{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var IndentConsts;\n    (function (IndentConsts) {\n        IndentConsts[IndentConsts[\"INCREASE_MASK\"] = 1] = \"INCREASE_MASK\";\n        IndentConsts[IndentConsts[\"DECREASE_MASK\"] = 2] = \"DECREASE_MASK\";\n        IndentConsts[IndentConsts[\"INDENT_NEXTLINE_MASK\"] = 4] = \"INDENT_NEXTLINE_MASK\";\n        IndentConsts[IndentConsts[\"UNINDENT_MASK\"] = 8] = \"UNINDENT_MASK\";\n    })(IndentConsts = exports.IndentConsts || (exports.IndentConsts = {}));\n    class IndentRulesSupport {\n        constructor(indentationRules) {\n            this._indentationRules = indentationRules;\n        }\n        shouldIncrease(text) {\n            if (this._indentationRules) {\n                if (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(text)) {\n                    return true;\n                }\n                // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n                // \treturn true;\n                // }\n            }\n            return false;\n        }\n        shouldDecrease(text) {\n            if (this._indentationRules && this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(text)) {\n                return true;\n            }\n            return false;\n        }\n        shouldIndentNextLine(text) {\n            if (this._indentationRules && this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n                return true;\n            }\n            return false;\n        }\n        shouldIgnore(text) {\n            // the text matches `unIndentedLinePattern`\n            if (this._indentationRules && this._indentationRules.unIndentedLinePattern && this._indentationRules.unIndentedLinePattern.test(text)) {\n                return true;\n            }\n            return false;\n        }\n        getIndentMetadata(text) {\n            let ret = 0;\n            if (this.shouldIncrease(text)) {\n                ret += IndentConsts.INCREASE_MASK;\n            }\n            if (this.shouldDecrease(text)) {\n                ret += IndentConsts.DECREASE_MASK;\n            }\n            if (this.shouldIndentNextLine(text)) {\n                ret += IndentConsts.INDENT_NEXTLINE_MASK;\n            }\n            if (this.shouldIgnore(text)) {\n                ret += IndentConsts.UNINDENT_MASK;\n            }\n            return ret;\n        }\n    }\n    exports.IndentRulesSupport = IndentRulesSupport;\n});\n",null]}