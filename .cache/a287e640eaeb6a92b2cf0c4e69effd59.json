{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/platform\", \"vs/base/node/pfs\"], function (require, exports, env, pfs) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let _DEFAULT_TERMINAL_LINUX_READY = null;\n    function getDefaultTerminalLinuxReady() {\n        if (!_DEFAULT_TERMINAL_LINUX_READY) {\n            _DEFAULT_TERMINAL_LINUX_READY = new Promise(c => {\n                if (env.isLinux) {\n                    Promise.all([pfs.exists('/etc/debian_version'), process.lazyEnv || Promise.resolve(undefined)]).then(([isDebian]) => {\n                        if (isDebian) {\n                            c('x-terminal-emulator');\n                        }\n                        else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n                            c('gnome-terminal');\n                        }\n                        else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n                            c('konsole');\n                        }\n                        else if (process.env.COLORTERM) {\n                            c(process.env.COLORTERM);\n                        }\n                        else if (process.env.TERM) {\n                            c(process.env.TERM);\n                        }\n                        else {\n                            c('xterm');\n                        }\n                    });\n                    return;\n                }\n                c('xterm');\n            });\n        }\n        return _DEFAULT_TERMINAL_LINUX_READY;\n    }\n    exports.getDefaultTerminalLinuxReady = getDefaultTerminalLinuxReady;\n    exports.DEFAULT_TERMINAL_OSX = 'Terminal.app';\n    let _DEFAULT_TERMINAL_WINDOWS = null;\n    function getDefaultTerminalWindows() {\n        if (!_DEFAULT_TERMINAL_WINDOWS) {\n            const isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n            _DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : 'C:\\\\Windows'}\\\\${isWoW64 ? 'Sysnative' : 'System32'}\\\\cmd.exe`;\n        }\n        return _DEFAULT_TERMINAL_WINDOWS;\n    }\n    exports.getDefaultTerminalWindows = getDefaultTerminalWindows;\n});\n",null]}