{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/errors.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/errors.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nvar ErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        this.listeners = [];\n        this.unexpectedErrorHandler = function (e) {\n            setTimeout(function () {\n                if (e.stack) {\n                    throw new Error(e.message + '\\n\\n' + e.stack);\n                }\n                throw e;\n            }, 0);\n        };\n    }\n    ErrorHandler.prototype.addListener = function (listener) {\n        var _this = this;\n        this.listeners.push(listener);\n        return function () {\n            _this._removeListener(listener);\n        };\n    };\n    ErrorHandler.prototype.emit = function (e) {\n        this.listeners.forEach(function (listener) {\n            listener(e);\n        });\n    };\n    ErrorHandler.prototype._removeListener = function (listener) {\n        this.listeners.splice(this.listeners.indexOf(listener), 1);\n    };\n    ErrorHandler.prototype.setUnexpectedErrorHandler = function (newUnexpectedErrorHandler) {\n        this.unexpectedErrorHandler = newUnexpectedErrorHandler;\n    };\n    ErrorHandler.prototype.getUnexpectedErrorHandler = function () {\n        return this.unexpectedErrorHandler;\n    };\n    ErrorHandler.prototype.onUnexpectedError = function (e) {\n        this.unexpectedErrorHandler(e);\n        this.emit(e);\n    };\n    // For external errors, we don't want the listeners to be called\n    ErrorHandler.prototype.onUnexpectedExternalError = function (e) {\n        this.unexpectedErrorHandler(e);\n    };\n    return ErrorHandler;\n}());\nexports.ErrorHandler = ErrorHandler;\nexports.errorHandler = new ErrorHandler();\nfunction setUnexpectedErrorHandler(newUnexpectedErrorHandler) {\n    exports.errorHandler.setUnexpectedErrorHandler(newUnexpectedErrorHandler);\n}\nexports.setUnexpectedErrorHandler = setUnexpectedErrorHandler;\nfunction onUnexpectedError(e) {\n    // ignore errors from cancelled promises\n    if (!isPromiseCanceledError(e)) {\n        exports.errorHandler.onUnexpectedError(e);\n    }\n    return undefined;\n}\nexports.onUnexpectedError = onUnexpectedError;\nfunction onUnexpectedExternalError(e) {\n    // ignore errors from cancelled promises\n    if (!isPromiseCanceledError(e)) {\n        exports.errorHandler.onUnexpectedExternalError(e);\n    }\n    return undefined;\n}\nexports.onUnexpectedExternalError = onUnexpectedExternalError;\nfunction transformErrorForSerialization(error) {\n    if (error instanceof Error) {\n        var name = error.name, message = error.message;\n        var stack = error.stacktrace || error.stack;\n        return {\n            $isError: true,\n            name: name,\n            message: message,\n            stack: stack\n        };\n    }\n    // return as is\n    return error;\n}\nexports.transformErrorForSerialization = transformErrorForSerialization;\nvar canceledName = 'Canceled';\n/**\n * Checks if the given error is a promise in canceled state\n */\nfunction isPromiseCanceledError(error) {\n    return error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\nexports.isPromiseCanceledError = isPromiseCanceledError;\n/**\n * Returns an error that signals cancellation.\n */\nfunction canceled() {\n    var error = new Error(canceledName);\n    error.name = error.message;\n    return error;\n}\nexports.canceled = canceled;\nfunction illegalArgument(name) {\n    if (name) {\n        return new Error(\"Illegal argument: \" + name);\n    }\n    else {\n        return new Error('Illegal argument');\n    }\n}\nexports.illegalArgument = illegalArgument;\nfunction illegalState(name) {\n    if (name) {\n        return new Error(\"Illegal state: \" + name);\n    }\n    else {\n        return new Error('Illegal state');\n    }\n}\nexports.illegalState = illegalState;\nfunction readonly(name) {\n    return name\n        ? new Error(\"readonly property '\" + name + \" cannot be changed'\")\n        : new Error('readonly property cannot be changed');\n}\nexports.readonly = readonly;\nfunction disposed(what) {\n    var result = new Error(what + \" has been disposed\");\n    result.name = 'DISPOSED';\n    return result;\n}\nexports.disposed = disposed;\nfunction getErrorMessage(err) {\n    if (!err) {\n        return 'Error';\n    }\n    if (err.message) {\n        return err.message;\n    }\n    if (err.stack) {\n        return err.stack.split('\\n')[0];\n    }\n    return String(err);\n}\nexports.getErrorMessage = getErrorMessage;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/errors.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/errors.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ErrorListenerCallback {\n\t(error: any): void;\n}\n\nexport interface ErrorListenerUnbind {\n\t(): void;\n}\n\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n\tprivate unexpectedErrorHandler: (e: any) => void;\n\tprivate listeners: ErrorListenerCallback[];\n\n\tconstructor() {\n\n\t\tthis.listeners = [];\n\n\t\tthis.unexpectedErrorHandler = function (e: any) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tthrow new Error(e.message + '\\n\\n' + e.stack);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}, 0);\n\t\t};\n\t}\n\n\tpublic addListener(listener: ErrorListenerCallback): ErrorListenerUnbind {\n\t\tthis.listeners.push(listener);\n\n\t\treturn () => {\n\t\t\tthis._removeListener(listener);\n\t\t};\n\t}\n\n\tprivate emit(e: any): void {\n\t\tthis.listeners.forEach((listener) => {\n\t\t\tlistener(e);\n\t\t});\n\t}\n\n\tprivate _removeListener(listener: ErrorListenerCallback): void {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1);\n\t}\n\n\tpublic setUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\t\tthis.unexpectedErrorHandler = newUnexpectedErrorHandler;\n\t}\n\n\tpublic getUnexpectedErrorHandler(): (e: any) => void {\n\t\treturn this.unexpectedErrorHandler;\n\t}\n\n\tpublic onUnexpectedError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t\tthis.emit(e);\n\t}\n\n\t// For external errors, we don't want the listeners to be called\n\tpublic onUnexpectedExternalError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t}\n}\n\nexport const errorHandler = new ErrorHandler();\n\nexport function setUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\terrorHandler.setUnexpectedErrorHandler(newUnexpectedErrorHandler);\n}\n\nexport function onUnexpectedError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isPromiseCanceledError(e)) {\n\t\terrorHandler.onUnexpectedError(e);\n\t}\n\treturn undefined;\n}\n\nexport function onUnexpectedExternalError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isPromiseCanceledError(e)) {\n\t\terrorHandler.onUnexpectedExternalError(e);\n\t}\n\treturn undefined;\n}\n\nexport interface SerializedError {\n\treadonly $isError: true;\n\treadonly name: string;\n\treadonly message: string;\n\treadonly stack: string;\n}\n\nexport function transformErrorForSerialization(error: Error): SerializedError;\nexport function transformErrorForSerialization(error: any): any;\nexport function transformErrorForSerialization(error: any): any {\n\tif (error instanceof Error) {\n\t\tlet { name, message } = error;\n\t\tconst stack: string = (<any>error).stacktrace || (<any>error).stack;\n\t\treturn {\n\t\t\t$isError: true,\n\t\t\tname,\n\t\t\tmessage,\n\t\t\tstack\n\t\t};\n\t}\n\n\t// return as is\n\treturn error;\n}\n\n// see https://github.com/v8/v8/wiki/Stack%20Trace%20API#basic-stack-traces\nexport interface V8CallSite {\n\tgetThis(): any;\n\tgetTypeName(): string;\n\tgetFunction(): string;\n\tgetFunctionName(): string;\n\tgetMethodName(): string;\n\tgetFileName(): string;\n\tgetLineNumber(): number;\n\tgetColumnNumber(): number;\n\tgetEvalOrigin(): string;\n\tisToplevel(): boolean;\n\tisEval(): boolean;\n\tisNative(): boolean;\n\tisConstructor(): boolean;\n\ttoString(): string;\n}\n\nconst canceledName = 'Canceled';\n\n/**\n * Checks if the given error is a promise in canceled state\n */\nexport function isPromiseCanceledError(error: any): boolean {\n\treturn error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n\n/**\n * Returns an error that signals cancellation.\n */\nexport function canceled(): Error {\n\tconst error = new Error(canceledName);\n\terror.name = error.message;\n\treturn error;\n}\n\nexport function illegalArgument(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal argument: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal argument');\n\t}\n}\n\nexport function illegalState(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal state: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal state');\n\t}\n}\n\nexport function readonly(name?: string): Error {\n\treturn name\n\t\t? new Error(`readonly property '${name} cannot be changed'`)\n\t\t: new Error('readonly property cannot be changed');\n}\n\nexport function disposed(what: string): Error {\n\tconst result = new Error(`${what} has been disposed`);\n\tresult.name = 'DISPOSED';\n\treturn result;\n}\n\nexport function getErrorMessage(err: any): string {\n\tif (!err) {\n\t\treturn 'Error';\n\t}\n\n\tif (err.message) {\n\t\treturn err.message;\n\t}\n\n\tif (err.stack) {\n\t\treturn err.stack.split('\\n')[0];\n\t}\n\n\treturn String(err);\n}\n"]}]}