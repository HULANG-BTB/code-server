{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentsPanel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentsPanel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/panel\");\nvar dom = require(\"vs/base/browser/dom\");\nvar event_1 = require(\"vs/base/common/event\");\nvar treeDefaults_1 = require(\"vs/base/parts/tree/browser/treeDefaults\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar commentModel_1 = require(\"vs/workbench/contrib/comments/common/commentModel\");\nvar commentsEditorContribution_1 = require(\"vs/workbench/contrib/comments/browser/commentsEditorContribution\");\nvar commentsTreeViewer_1 = require(\"vs/workbench/contrib/comments/browser/commentsTreeViewer\");\nvar commentService_1 = require(\"vs/workbench/contrib/comments/browser/commentService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar labels_1 = require(\"vs/workbench/browser/labels\");\nexports.COMMENTS_PANEL_ID = 'workbench.panel.comments';\nexports.COMMENTS_PANEL_TITLE = 'Comments';\nvar CommentsPanel = /** @class */ (function (_super) {\n    tslib_1.__extends(CommentsPanel, _super);\n    function CommentsPanel(instantiationService, commentService, editorService, commandService, openerService, telemetryService, themeService, storageService) {\n        var _this = _super.call(this, exports.COMMENTS_PANEL_ID, telemetryService, themeService, storageService) || this;\n        _this.instantiationService = instantiationService;\n        _this.commentService = commentService;\n        _this.editorService = editorService;\n        _this.commandService = commandService;\n        _this.openerService = openerService;\n        return _this;\n    }\n    CommentsPanel.prototype.create = function (parent) {\n        var _this = this;\n        _super.prototype.create.call(this, parent);\n        dom.addClass(parent, 'comments-panel');\n        var container = dom.append(parent, dom.$('.comments-panel-container'));\n        this.treeContainer = dom.append(container, dom.$('.tree-container'));\n        this.commentsModel = new commentModel_1.CommentsModel();\n        this.createTree();\n        this.createMessageBox(container);\n        this._register(this.commentService.onDidSetAllCommentThreads(this.onAllCommentsChanged, this));\n        this._register(this.commentService.onDidUpdateCommentThreads(this.onCommentsUpdated, this));\n        var styleElement = dom.createStyleSheet(parent);\n        this.applyStyles(styleElement);\n        this._register(this.themeService.onThemeChange(function (_) { return _this.applyStyles(styleElement); }));\n        this._register(this.onDidChangeVisibility(function (visible) {\n            if (visible) {\n                _this.refresh();\n            }\n        }));\n        this.render();\n    };\n    CommentsPanel.prototype.applyStyles = function (styleElement) {\n        var content = [];\n        var theme = this.themeService.getTheme();\n        var linkColor = theme.getColor(colorRegistry_1.textLinkForeground);\n        if (linkColor) {\n            content.push(\".comments-panel .comments-panel-container a { color: \" + linkColor + \"; }\");\n        }\n        var linkActiveColor = theme.getColor(colorRegistry_1.textLinkActiveForeground);\n        if (linkActiveColor) {\n            content.push(\".comments-panel .comments-panel-container a:hover, a:active { color: \" + linkActiveColor + \"; }\");\n        }\n        var focusColor = theme.getColor(colorRegistry_1.focusBorder);\n        if (focusColor) {\n            content.push(\".comments-panel .commenst-panel-container a:focus { outline-color: \" + focusColor + \"; }\");\n        }\n        var codeTextForegroundColor = theme.getColor(colorRegistry_1.textPreformatForeground);\n        if (codeTextForegroundColor) {\n            content.push(\".comments-panel .comments-panel-container .text code { color: \" + codeTextForegroundColor + \"; }\");\n        }\n        styleElement.innerHTML = content.join('\\n');\n    };\n    CommentsPanel.prototype.render = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        dom.toggleClass(this.treeContainer, 'hidden', !this.commentsModel.hasCommentThreads());\n                        return [4 /*yield*/, this.tree.setInput(this.commentsModel)];\n                    case 1:\n                        _a.sent();\n                        this.renderMessage();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CommentsPanel.prototype.getActions = function () {\n        if (!this.collapseAllAction) {\n            this.collapseAllAction = this.instantiationService.createInstance(treeDefaults_1.CollapseAllAction, this.tree, this.commentsModel.hasCommentThreads());\n            this._register(this.collapseAllAction);\n        }\n        return [this.collapseAllAction];\n    };\n    CommentsPanel.prototype.layout = function (dimensions) {\n        this.tree.layout(dimensions.height, dimensions.width);\n    };\n    CommentsPanel.prototype.getTitle = function () {\n        return exports.COMMENTS_PANEL_TITLE;\n    };\n    CommentsPanel.prototype.createMessageBox = function (parent) {\n        this.messageBoxContainer = dom.append(parent, dom.$('.message-box-container'));\n        this.messageBox = dom.append(this.messageBoxContainer, dom.$('span'));\n        this.messageBox.setAttribute('tabindex', '0');\n    };\n    CommentsPanel.prototype.renderMessage = function () {\n        this.messageBox.textContent = this.commentsModel.getMessage();\n        dom.toggleClass(this.messageBoxContainer, 'hidden', this.commentsModel.hasCommentThreads());\n    };\n    CommentsPanel.prototype.createTree = function () {\n        var _this = this;\n        this.treeLabels = this._register(this.instantiationService.createInstance(labels_1.ResourceLabels, this));\n        this.tree = this._register(this.instantiationService.createInstance(listService_1.WorkbenchTree, this.treeContainer, {\n            dataSource: new commentsTreeViewer_1.CommentsDataSource(),\n            renderer: new commentsTreeViewer_1.CommentsModelRenderer(this.treeLabels, this.openerService),\n            accessibilityProvider: new treeDefaults_1.DefaultAccessibilityProvider,\n            controller: new treeDefaults_1.DefaultController(),\n            dnd: new treeDefaults_1.DefaultDragAndDrop(),\n            filter: new commentsTreeViewer_1.CommentsDataFilter()\n        }, {\n            twistiePixels: 20,\n            ariaLabel: exports.COMMENTS_PANEL_TITLE\n        }));\n        var commentsNavigator = this._register(new listService_1.TreeResourceNavigator(this.tree, { openOnFocus: true }));\n        this._register(event_1.Event.debounce(commentsNavigator.openResource, function (last, event) { return event; }, 100, true)(function (options) {\n            _this.openFile(options.element, options.editorOptions.pinned, options.editorOptions.preserveFocus, options.sideBySide);\n        }));\n    };\n    CommentsPanel.prototype.openFile = function (element, pinned, preserveFocus, sideBySide) {\n        var _this = this;\n        var _a;\n        if (!element) {\n            return false;\n        }\n        if (!(element instanceof commentModel_1.ResourceWithCommentThreads || element instanceof commentModel_1.CommentNode)) {\n            return false;\n        }\n        var range = element instanceof commentModel_1.ResourceWithCommentThreads ? element.commentThreads[0].range : element.range;\n        var activeEditor = this.editorService.activeEditor;\n        var currentActiveResource = activeEditor ? activeEditor.getResource() : undefined;\n        if (currentActiveResource && currentActiveResource.toString() === element.resource.toString()) {\n            var threadToReveal_1 = element instanceof commentModel_1.ResourceWithCommentThreads ? element.commentThreads[0].threadId : element.threadId;\n            var commentToReveal_1 = element instanceof commentModel_1.ResourceWithCommentThreads ? element.commentThreads[0].comment.commentId : element.comment.commentId;\n            var control = this.editorService.activeTextEditorWidget;\n            if (threadToReveal_1 && editorBrowser_1.isCodeEditor(control)) {\n                var controller = commentsEditorContribution_1.ReviewController.get(control);\n                controller.revealCommentThread(threadToReveal_1, commentToReveal_1, false);\n            }\n            return true;\n        }\n        var threadToReveal = element instanceof commentModel_1.ResourceWithCommentThreads ? element.commentThreads[0].threadId : element.threadId;\n        var commentToReveal = element instanceof commentModel_1.ResourceWithCommentThreads ? element.commentThreads[0].comment : element.comment;\n        if (commentToReveal.selectCommand) {\n            (_a = this.commandService).executeCommand.apply(_a, [commentToReveal.selectCommand.id].concat((commentToReveal.selectCommand.arguments || []))).then(function (_) {\n                var activeWidget = _this.editorService.activeTextEditorWidget;\n                if (editorBrowser_1.isDiffEditor(activeWidget)) {\n                    var originalEditorWidget = activeWidget.getOriginalEditor();\n                    var modifiedEditorWidget = activeWidget.getModifiedEditor();\n                    var controller = void 0;\n                    if (originalEditorWidget.getModel().uri.toString() === element.resource.toString()) {\n                        controller = commentsEditorContribution_1.ReviewController.get(originalEditorWidget);\n                    }\n                    else if (modifiedEditorWidget.getModel().uri.toString() === element.resource.toString()) {\n                        controller = commentsEditorContribution_1.ReviewController.get(modifiedEditorWidget);\n                    }\n                    if (controller) {\n                        controller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n                    }\n                }\n                else {\n                    var activeEditor_1 = _this.editorService.activeEditor;\n                    var currentActiveResource_1 = activeEditor_1 ? activeEditor_1.getResource() : undefined;\n                    if (currentActiveResource_1 && currentActiveResource_1.toString() === element.resource.toString()) {\n                        var control = _this.editorService.activeTextEditorWidget;\n                        if (threadToReveal && editorBrowser_1.isCodeEditor(control)) {\n                            var controller = commentsEditorContribution_1.ReviewController.get(control);\n                            controller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n                        }\n                    }\n                }\n                return true;\n            });\n        }\n        else {\n            this.editorService.openEditor({\n                resource: element.resource,\n                options: {\n                    pinned: pinned,\n                    preserveFocus: preserveFocus,\n                    selection: range\n                }\n            }, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP).then(function (editor) {\n                if (editor) {\n                    var control = editor.getControl();\n                    if (threadToReveal && editorBrowser_1.isCodeEditor(control)) {\n                        var controller = commentsEditorContribution_1.ReviewController.get(control);\n                        controller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n                    }\n                }\n            });\n        }\n        return true;\n    };\n    CommentsPanel.prototype.refresh = function () {\n        var _this = this;\n        if (this.isVisible()) {\n            this.collapseAllAction.enabled = this.commentsModel.hasCommentThreads();\n            dom.toggleClass(this.treeContainer, 'hidden', !this.commentsModel.hasCommentThreads());\n            this.tree.refresh().then(function () {\n                _this.renderMessage();\n            }, function (e) {\n                console.log(e);\n            });\n        }\n    };\n    CommentsPanel.prototype.onAllCommentsChanged = function (e) {\n        this.commentsModel.setCommentThreads(e.ownerId, e.commentThreads);\n        this.refresh();\n    };\n    CommentsPanel.prototype.onCommentsUpdated = function (e) {\n        var didUpdate = this.commentsModel.updateCommentThreads(e);\n        if (didUpdate) {\n            this.refresh();\n        }\n    };\n    CommentsPanel = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, commentService_1.ICommentService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, commands_1.ICommandService),\n        tslib_1.__param(4, opener_1.IOpenerService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, storage_1.IStorageService)\n    ], CommentsPanel);\n    return CommentsPanel;\n}(panel_1.Panel));\nexports.CommentsPanel = CommentsPanel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentsPanel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/comments/browser/commentsPanel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panel';\nimport * as dom from 'vs/base/browser/dom';\nimport { IAction } from 'vs/base/common/actions';\nimport { Event } from 'vs/base/common/event';\nimport { CollapseAllAction, DefaultAccessibilityProvider, DefaultController, DefaultDragAndDrop } from 'vs/base/parts/tree/browser/treeDefaults';\nimport { isCodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TreeResourceNavigator, WorkbenchTree } from 'vs/platform/list/browser/listService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Panel } from 'vs/workbench/browser/panel';\nimport { CommentNode, CommentsModel, ResourceWithCommentThreads, ICommentThreadChangedEvent } from 'vs/workbench/contrib/comments/common/commentModel';\nimport { ReviewController } from 'vs/workbench/contrib/comments/browser/commentsEditorContribution';\nimport { CommentsDataFilter, CommentsDataSource, CommentsModelRenderer } from 'vs/workbench/contrib/comments/browser/commentsTreeViewer';\nimport { ICommentService, IWorkspaceCommentThreadsEvent } from 'vs/workbench/contrib/comments/browser/commentService';\nimport { IEditorService, ACTIVE_GROUP, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { textLinkForeground, textLinkActiveForeground, focusBorder, textPreformatForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ResourceLabels } from 'vs/workbench/browser/labels';\n\nexport const COMMENTS_PANEL_ID = 'workbench.panel.comments';\nexport const COMMENTS_PANEL_TITLE = 'Comments';\n\nexport class CommentsPanel extends Panel {\n\tprivate treeLabels: ResourceLabels;\n\tprivate tree: WorkbenchTree;\n\tprivate treeContainer: HTMLElement;\n\tprivate messageBoxContainer: HTMLElement;\n\tprivate messageBox: HTMLElement;\n\tprivate commentsModel: CommentsModel;\n\tprivate collapseAllAction: IAction;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommentService private readonly commentService: ICommentService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(COMMENTS_PANEL_ID, telemetryService, themeService, storageService);\n\t}\n\n\tpublic create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\n\t\tdom.addClass(parent, 'comments-panel');\n\n\t\tlet container = dom.append(parent, dom.$('.comments-panel-container'));\n\t\tthis.treeContainer = dom.append(container, dom.$('.tree-container'));\n\t\tthis.commentsModel = new CommentsModel();\n\n\t\tthis.createTree();\n\t\tthis.createMessageBox(container);\n\n\t\tthis._register(this.commentService.onDidSetAllCommentThreads(this.onAllCommentsChanged, this));\n\t\tthis._register(this.commentService.onDidUpdateCommentThreads(this.onCommentsUpdated, this));\n\n\t\tconst styleElement = dom.createStyleSheet(parent);\n\t\tthis.applyStyles(styleElement);\n\t\tthis._register(this.themeService.onThemeChange(_ => this.applyStyles(styleElement)));\n\n\t\tthis._register(this.onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tthis.refresh();\n\t\t\t}\n\t\t}));\n\n\t\tthis.render();\n\t}\n\n\tprivate applyStyles(styleElement: HTMLStyleElement) {\n\t\tconst content: string[] = [];\n\n\t\tconst theme = this.themeService.getTheme();\n\t\tconst linkColor = theme.getColor(textLinkForeground);\n\t\tif (linkColor) {\n\t\t\tcontent.push(`.comments-panel .comments-panel-container a { color: ${linkColor}; }`);\n\t\t}\n\n\t\tconst linkActiveColor = theme.getColor(textLinkActiveForeground);\n\t\tif (linkActiveColor) {\n\t\t\tcontent.push(`.comments-panel .comments-panel-container a:hover, a:active { color: ${linkActiveColor}; }`);\n\t\t}\n\n\t\tconst focusColor = theme.getColor(focusBorder);\n\t\tif (focusColor) {\n\t\t\tcontent.push(`.comments-panel .commenst-panel-container a:focus { outline-color: ${focusColor}; }`);\n\t\t}\n\n\t\tconst codeTextForegroundColor = theme.getColor(textPreformatForeground);\n\t\tif (codeTextForegroundColor) {\n\t\t\tcontent.push(`.comments-panel .comments-panel-container .text code { color: ${codeTextForegroundColor}; }`);\n\t\t}\n\n\t\tstyleElement.innerHTML = content.join('\\n');\n\t}\n\n\tprivate async render(): Promise<void> {\n\t\tdom.toggleClass(this.treeContainer, 'hidden', !this.commentsModel.hasCommentThreads());\n\t\tawait this.tree.setInput(this.commentsModel);\n\t\tthis.renderMessage();\n\t}\n\n\tpublic getActions(): IAction[] {\n\t\tif (!this.collapseAllAction) {\n\t\t\tthis.collapseAllAction = this.instantiationService.createInstance(CollapseAllAction, this.tree, this.commentsModel.hasCommentThreads());\n\t\t\tthis._register(this.collapseAllAction);\n\t\t}\n\n\t\treturn [this.collapseAllAction];\n\t}\n\n\tpublic layout(dimensions: dom.Dimension): void {\n\t\tthis.tree.layout(dimensions.height, dimensions.width);\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn COMMENTS_PANEL_TITLE;\n\t}\n\n\tprivate createMessageBox(parent: HTMLElement): void {\n\t\tthis.messageBoxContainer = dom.append(parent, dom.$('.message-box-container'));\n\t\tthis.messageBox = dom.append(this.messageBoxContainer, dom.$('span'));\n\t\tthis.messageBox.setAttribute('tabindex', '0');\n\t}\n\n\tprivate renderMessage(): void {\n\t\tthis.messageBox.textContent = this.commentsModel.getMessage();\n\t\tdom.toggleClass(this.messageBoxContainer, 'hidden', this.commentsModel.hasCommentThreads());\n\t}\n\n\tprivate createTree(): void {\n\t\tthis.treeLabels = this._register(this.instantiationService.createInstance(ResourceLabels, this));\n\n\t\tthis.tree = this._register(this.instantiationService.createInstance(WorkbenchTree, this.treeContainer, {\n\t\t\tdataSource: new CommentsDataSource(),\n\t\t\trenderer: new CommentsModelRenderer(this.treeLabels, this.openerService),\n\t\t\taccessibilityProvider: new DefaultAccessibilityProvider,\n\t\t\tcontroller: new DefaultController(),\n\t\t\tdnd: new DefaultDragAndDrop(),\n\t\t\tfilter: new CommentsDataFilter()\n\t\t}, {\n\t\t\t\ttwistiePixels: 20,\n\t\t\t\tariaLabel: COMMENTS_PANEL_TITLE\n\t\t\t}));\n\n\t\tconst commentsNavigator = this._register(new TreeResourceNavigator(this.tree, { openOnFocus: true }));\n\t\tthis._register(Event.debounce(commentsNavigator.openResource, (last, event) => event, 100, true)(options => {\n\t\t\tthis.openFile(options.element, options.editorOptions.pinned, options.editorOptions.preserveFocus, options.sideBySide);\n\t\t}));\n\t}\n\n\tprivate openFile(element: any, pinned?: boolean, preserveFocus?: boolean, sideBySide?: boolean): boolean {\n\t\tif (!element) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!(element instanceof ResourceWithCommentThreads || element instanceof CommentNode)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst range = element instanceof ResourceWithCommentThreads ? element.commentThreads[0].range : element.range;\n\n\t\tconst activeEditor = this.editorService.activeEditor;\n\t\tlet currentActiveResource = activeEditor ? activeEditor.getResource() : undefined;\n\t\tif (currentActiveResource && currentActiveResource.toString() === element.resource.toString()) {\n\t\t\tconst threadToReveal = element instanceof ResourceWithCommentThreads ? element.commentThreads[0].threadId : element.threadId;\n\t\t\tconst commentToReveal = element instanceof ResourceWithCommentThreads ? element.commentThreads[0].comment.commentId : element.comment.commentId;\n\t\t\tconst control = this.editorService.activeTextEditorWidget;\n\t\t\tif (threadToReveal && isCodeEditor(control)) {\n\t\t\t\tconst controller = ReviewController.get(control);\n\t\t\t\tcontroller.revealCommentThread(threadToReveal, commentToReveal, false);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tconst threadToReveal = element instanceof ResourceWithCommentThreads ? element.commentThreads[0].threadId : element.threadId;\n\t\tconst commentToReveal = element instanceof ResourceWithCommentThreads ? element.commentThreads[0].comment : element.comment;\n\n\t\tif (commentToReveal.selectCommand) {\n\t\t\tthis.commandService.executeCommand(commentToReveal.selectCommand.id, ...(commentToReveal.selectCommand.arguments || [])).then(_ => {\n\t\t\t\tlet activeWidget = this.editorService.activeTextEditorWidget;\n\t\t\t\tif (isDiffEditor(activeWidget)) {\n\t\t\t\t\tconst originalEditorWidget = activeWidget.getOriginalEditor();\n\t\t\t\t\tconst modifiedEditorWidget = activeWidget.getModifiedEditor();\n\n\t\t\t\t\tlet controller;\n\t\t\t\t\tif (originalEditorWidget.getModel()!.uri.toString() === element.resource.toString()) {\n\t\t\t\t\t\tcontroller = ReviewController.get(originalEditorWidget);\n\t\t\t\t\t} else if (modifiedEditorWidget.getModel()!.uri.toString() === element.resource.toString()) {\n\t\t\t\t\t\tcontroller = ReviewController.get(modifiedEditorWidget);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (controller) {\n\t\t\t\t\t\tcontroller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet activeEditor = this.editorService.activeEditor;\n\t\t\t\t\tlet currentActiveResource = activeEditor ? activeEditor.getResource() : undefined;\n\t\t\t\t\tif (currentActiveResource && currentActiveResource.toString() === element.resource.toString()) {\n\t\t\t\t\t\tconst control = this.editorService.activeTextEditorWidget;\n\t\t\t\t\t\tif (threadToReveal && isCodeEditor(control)) {\n\t\t\t\t\t\t\tconst controller = ReviewController.get(control);\n\t\t\t\t\t\t\tcontroller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.editorService.openEditor({\n\t\t\t\tresource: element.resource,\n\t\t\t\toptions: {\n\t\t\t\t\tpinned: pinned,\n\t\t\t\t\tpreserveFocus: preserveFocus,\n\t\t\t\t\tselection: range\n\t\t\t\t}\n\t\t\t}, sideBySide ? SIDE_GROUP : ACTIVE_GROUP).then(editor => {\n\t\t\t\tif (editor) {\n\t\t\t\t\tconst control = editor.getControl();\n\t\t\t\t\tif (threadToReveal && isCodeEditor(control)) {\n\t\t\t\t\t\tconst controller = ReviewController.get(control);\n\t\t\t\t\t\tcontroller.revealCommentThread(threadToReveal, commentToReveal.commentId, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate refresh(): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.collapseAllAction.enabled = this.commentsModel.hasCommentThreads();\n\n\t\t\tdom.toggleClass(this.treeContainer, 'hidden', !this.commentsModel.hasCommentThreads());\n\t\t\tthis.tree.refresh().then(() => {\n\t\t\t\tthis.renderMessage();\n\t\t\t}, (e) => {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onAllCommentsChanged(e: IWorkspaceCommentThreadsEvent): void {\n\t\tthis.commentsModel.setCommentThreads(e.ownerId, e.commentThreads);\n\t\tthis.refresh();\n\t}\n\n\tprivate onCommentsUpdated(e: ICommentThreadChangedEvent): void {\n\t\tconst didUpdate = this.commentsModel.updateCommentThreads(e);\n\t\tif (didUpdate) {\n\t\t\tthis.refresh();\n\t\t}\n\t}\n}\n"]}]}