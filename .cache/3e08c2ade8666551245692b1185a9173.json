{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\"], function (require, exports, instantiation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var LanguageType;\n    (function (LanguageType) {\n        LanguageType[LanguageType[\"Core\"] = 1] = \"Core\";\n        LanguageType[LanguageType[\"Contributed\"] = 2] = \"Contributed\";\n    })(LanguageType = exports.LanguageType || (exports.LanguageType = {}));\n    exports.ILocalizationsService = instantiation_1.createDecorator('localizationsService');\n    function isValidLocalization(localization) {\n        if (typeof localization.languageId !== 'string') {\n            return false;\n        }\n        if (!Array.isArray(localization.translations) || localization.translations.length === 0) {\n            return false;\n        }\n        for (const translation of localization.translations) {\n            if (typeof translation.id !== 'string') {\n                return false;\n            }\n            if (typeof translation.path !== 'string') {\n                return false;\n            }\n        }\n        if (localization.languageName && typeof localization.languageName !== 'string') {\n            return false;\n        }\n        if (localization.localizedLanguageName && typeof localization.localizedLanguageName !== 'string') {\n            return false;\n        }\n        return true;\n    }\n    exports.isValidLocalization = isValidLocalization;\n});\n",null]}