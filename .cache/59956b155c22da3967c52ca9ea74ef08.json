{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar CursorPosition = /** @class */ (function () {\n    function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n    }\n    return CursorPosition;\n}());\nexports.CursorPosition = CursorPosition;\nvar MoveOperations = /** @class */ (function () {\n    function MoveOperations() {\n    }\n    MoveOperations.left = function (config, model, lineNumber, column) {\n        if (column > model.getLineMinColumn(lineNumber)) {\n            if (cursorCommon_1.CursorColumns.isLowSurrogate(model, lineNumber, column - 2)) {\n                // character before column is a low surrogate\n                column = column - 2;\n            }\n            else {\n                column = column - 1;\n            }\n        }\n        else if (lineNumber > 1) {\n            lineNumber = lineNumber - 1;\n            column = model.getLineMaxColumn(lineNumber);\n        }\n        return new CursorPosition(lineNumber, column, 0);\n    };\n    MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\n        var lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n            lineNumber = r.lineNumber;\n            column = r.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    };\n    MoveOperations.right = function (config, model, lineNumber, column) {\n        if (column < model.getLineMaxColumn(lineNumber)) {\n            if (cursorCommon_1.CursorColumns.isHighSurrogate(model, lineNumber, column - 1)) {\n                // character after column is a high surrogate\n                column = column + 2;\n            }\n            else {\n                column = column + 1;\n            }\n        }\n        else if (lineNumber < model.getLineCount()) {\n            lineNumber = lineNumber + 1;\n            column = model.getLineMinColumn(lineNumber);\n        }\n        return new CursorPosition(lineNumber, column, 0);\n    };\n    MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\n        var lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n            lineNumber = r.lineNumber;\n            column = r.column;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    };\n    MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n        var currentVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n        lineNumber = lineNumber + count;\n        var lineCount = model.getLineCount();\n        if (lineNumber > lineCount) {\n            lineNumber = lineCount;\n            if (allowMoveOnLastLine) {\n                column = model.getLineMaxColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n                if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                    column = column - 1;\n                }\n            }\n        }\n        else {\n            column = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n            if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                column = column - 1;\n            }\n        }\n        leftoverVisibleColumns = currentVisibleColumn - cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    };\n    MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\n        var lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move down acts relative to the end of selection\n            lineNumber = cursor.selection.endLineNumber;\n            column = cursor.selection.endColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    };\n    MoveOperations.translateDown = function (config, model, cursor) {\n        var selection = cursor.selection;\n        var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new cursorCommon_1.SingleCursorState(new range_1.Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new position_1.Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    };\n    MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n        var currentVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n        lineNumber = lineNumber - count;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            if (allowMoveOnFirstLine) {\n                column = model.getLineMinColumn(lineNumber);\n            }\n            else {\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\n                if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                    column = column - 1;\n                }\n            }\n        }\n        else {\n            column = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n            if (cursorCommon_1.CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n                column = column - 1;\n            }\n        }\n        leftoverVisibleColumns = currentVisibleColumn - cursorCommon_1.CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n    };\n    MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\n        var lineNumber, column;\n        if (cursor.hasSelection() && !inSelectionMode) {\n            // If we are in selection mode, move up acts relative to the beginning of selection\n            lineNumber = cursor.selection.startLineNumber;\n            column = cursor.selection.startColumn;\n        }\n        else {\n            lineNumber = cursor.position.lineNumber;\n            column = cursor.position.column;\n        }\n        var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n    };\n    MoveOperations.translateUp = function (config, model, cursor) {\n        var selection = cursor.selection;\n        var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n        var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n        return new cursorCommon_1.SingleCursorState(new range_1.Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new position_1.Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n    };\n    MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\n        var lineNumber = cursor.position.lineNumber;\n        var minColumn = model.getLineMinColumn(lineNumber);\n        var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n        var column;\n        var relevantColumnNumber = cursor.position.column;\n        if (relevantColumnNumber === firstNonBlankColumn) {\n            column = minColumn;\n        }\n        else {\n            column = firstNonBlankColumn;\n        }\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\n    };\n    MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\n        var lineNumber = cursor.position.lineNumber;\n        var maxColumn = model.getLineMaxColumn(lineNumber);\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n    };\n    MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\n        return cursor.move(inSelectionMode, 1, 1, 0);\n    };\n    MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\n        var lastLineNumber = model.getLineCount();\n        var lastColumn = model.getLineMaxColumn(lastLineNumber);\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n    };\n    return MoveOperations;\n}());\nexports.MoveOperations = MoveOperations;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveOperations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,yEAAqI;AACrI,2DAA0D;AAC1D,qDAAoD;AAEpD;IAOC,wBAAY,UAAkB,EAAE,MAAc,EAAE,sBAA8B;QAC7E,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;IACtD,CAAC;IACF,qBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,wCAAc;AAc3B;IAAA;IA6NA,CAAC;IA3Nc,mBAAI,GAAlB,UAAmB,MAA2B,EAAE,KAAyB,EAAE,UAAkB,EAAE,MAAc;QAE5G,IAAI,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE;YAChD,IAAI,4BAAa,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE;gBAChE,6CAA6C;gBAC7C,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACN,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;SACD;aAAM,IAAI,UAAU,GAAG,CAAC,EAAE;YAC1B,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC;YAC5B,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAEa,uBAAQ,GAAtB,UAAuB,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB,EAAE,WAAmB;QACtJ,IAAI,UAAkB,EACrB,MAAc,CAAC;QAEhB,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;YAC9C,+HAA+H;YAC/H,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC;YAC9C,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC;SACtC;aAAM;YACN,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;YACnH,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;YAC1B,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;SAClB;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEa,oBAAK,GAAnB,UAAoB,MAA2B,EAAE,KAAyB,EAAE,UAAkB,EAAE,MAAc;QAE7G,IAAI,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE;YAChD,IAAI,4BAAa,CAAC,eAAe,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE;gBACjE,6CAA6C;gBAC7C,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;iBAAM;gBACN,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;SACD;aAAM,IAAI,UAAU,GAAG,KAAK,CAAC,YAAY,EAAE,EAAE;YAC7C,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC;YAC5B,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAClD,CAAC;IAEa,wBAAS,GAAvB,UAAwB,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB,EAAE,WAAmB;QACvJ,IAAI,UAAkB,EACrB,MAAc,CAAC;QAEhB,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;YAC9C,0HAA0H;YAC1H,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC;YAC5C,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;SACpC;aAAM;YACN,IAAI,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;YACpH,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;YAC1B,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;SAClB;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEa,mBAAI,GAAlB,UAAmB,MAA2B,EAAE,KAAyB,EAAE,UAAkB,EAAE,MAAc,EAAE,sBAA8B,EAAE,KAAa,EAAE,mBAA4B;QACzL,IAAM,oBAAoB,GAAG,4BAAa,CAAC,uBAAuB,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,sBAAsB,CAAC;QAEtJ,UAAU,GAAG,UAAU,GAAG,KAAK,CAAC;QAChC,IAAI,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QACrC,IAAI,UAAU,GAAG,SAAS,EAAE;YAC3B,UAAU,GAAG,SAAS,CAAC;YACvB,IAAI,mBAAmB,EAAE;gBACxB,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;aAC5C;iBAAM;gBACN,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;gBAC9D,IAAI,4BAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE;oBACnE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;iBACpB;aACD;SACD;aAAM;YACN,MAAM,GAAG,4BAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;YACjG,IAAI,4BAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE;gBACnE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;SACD;QAED,sBAAsB,GAAG,oBAAoB,GAAG,4BAAa,CAAC,uBAAuB,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAEhJ,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,sBAAsB,CAAC,CAAC;IACvE,CAAC;IAEa,uBAAQ,GAAtB,UAAuB,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB,EAAE,UAAkB;QACrJ,IAAI,UAAkB,EACrB,MAAc,CAAC;QAEhB,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;YAC9C,+EAA+E;YAC/E,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC;YAC5C,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;SACpC;aAAM;YACN,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YACxC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;SAChC;QAED,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,sBAAsB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAEhH,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC;IACvF,CAAC;IAEa,4BAAa,GAA3B,UAA4B,MAA2B,EAAE,KAAyB,EAAE,MAAyB;QAC5G,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAEjC,IAAI,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,oBAAoB,EAAE,MAAM,CAAC,oCAAoC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACnL,IAAI,QAAQ,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,kBAAkB,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,sBAAsB,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAEnJ,OAAO,IAAI,gCAAiB,CAC3B,IAAI,aAAK,CAAC,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,MAAM,CAAC,EAC7G,cAAc,CAAC,sBAAsB,EACrC,IAAI,mBAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,EAClD,QAAQ,CAAC,sBAAsB,CAC/B,CAAC;IACH,CAAC;IAEa,iBAAE,GAAhB,UAAiB,MAA2B,EAAE,KAAyB,EAAE,UAAkB,EAAE,MAAc,EAAE,sBAA8B,EAAE,KAAa,EAAE,oBAA6B;QACxL,IAAM,oBAAoB,GAAG,4BAAa,CAAC,uBAAuB,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,sBAAsB,CAAC;QAEtJ,UAAU,GAAG,UAAU,GAAG,KAAK,CAAC;QAChC,IAAI,UAAU,GAAG,CAAC,EAAE;YACnB,UAAU,GAAG,CAAC,CAAC;YACf,IAAI,oBAAoB,EAAE;gBACzB,MAAM,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;aAC5C;iBAAM;gBACN,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;gBAC9D,IAAI,4BAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE;oBACnE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;iBACpB;aACD;SACD;aAAM;YACN,MAAM,GAAG,4BAAa,CAAC,wBAAwB,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;YACjG,IAAI,4BAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,EAAE;gBACnE,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;aACpB;SACD;QAED,sBAAsB,GAAG,oBAAoB,GAAG,4BAAa,CAAC,uBAAuB,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;QAEhJ,OAAO,IAAI,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE,sBAAsB,CAAC,CAAC;IACvE,CAAC;IAEa,qBAAM,GAApB,UAAqB,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB,EAAE,UAAkB;QACnJ,IAAI,UAAkB,EACrB,MAAc,CAAC;QAEhB,IAAI,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;YAC9C,mFAAmF;YACnF,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC;YAC9C,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC;SACtC;aAAM;YACN,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YACxC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;SAChC;QAED,IAAI,CAAC,GAAG,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,sBAAsB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAE9G,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC;IACvF,CAAC;IAEa,0BAAW,GAAzB,UAA0B,MAA2B,EAAE,KAAyB,EAAE,MAAyB;QAE1G,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAEjC,IAAI,cAAc,GAAG,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,oBAAoB,EAAE,MAAM,CAAC,oCAAoC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QACjL,IAAI,QAAQ,GAAG,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,kBAAkB,EAAE,SAAS,CAAC,cAAc,EAAE,MAAM,CAAC,sBAAsB,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAEjJ,OAAO,IAAI,gCAAiB,CAC3B,IAAI,aAAK,CAAC,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,MAAM,CAAC,EAC7G,cAAc,CAAC,sBAAsB,EACrC,IAAI,mBAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,EAClD,QAAQ,CAAC,sBAAsB,CAC/B,CAAC;IACH,CAAC;IAEa,oCAAqB,GAAnC,UAAoC,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB;QAC9I,IAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC5C,IAAI,SAAS,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,mBAAmB,GAAG,KAAK,CAAC,+BAA+B,CAAC,UAAU,CAAC,IAAI,SAAS,CAAC;QAEzF,IAAI,MAAc,CAAC;QAEnB,IAAI,oBAAoB,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QAClD,IAAI,oBAAoB,KAAK,mBAAmB,EAAE;YACjD,MAAM,GAAG,SAAS,CAAC;SACnB;aAAM;YACN,MAAM,GAAG,mBAAmB,CAAC;SAC7B;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEa,8BAAe,GAA7B,UAA8B,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB;QACxI,IAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC5C,IAAI,SAAS,GAAG,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEa,sCAAuB,GAArC,UAAsC,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB;QAChJ,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IAEa,gCAAiB,GAA/B,UAAgC,MAA2B,EAAE,KAAyB,EAAE,MAAyB,EAAE,eAAwB;QAC1I,IAAI,cAAc,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QAC1C,IAAI,UAAU,GAAG,KAAK,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;QAExD,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IACpE,CAAC;IACF,qBAAC;AAAD,CAAC,AA7ND,IA6NC;AA7NY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorColumns, CursorConfiguration, ICursorSimpleModel, SingleCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\n\nexport class CursorPosition {\n\t_cursorPositionBrand: void;\n\n\tpublic readonly lineNumber: number;\n\tpublic readonly column: number;\n\tpublic readonly leftoverVisibleColumns: number;\n\n\tconstructor(lineNumber: number, column: number, leftoverVisibleColumns: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t}\n}\n\nexport class MoveOperations {\n\n\tpublic static left(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number): CursorPosition {\n\n\t\tif (column > model.getLineMinColumn(lineNumber)) {\n\t\t\tif (CursorColumns.isLowSurrogate(model, lineNumber, column - 2)) {\n\t\t\t\t// character before column is a low surrogate\n\t\t\t\tcolumn = column - 2;\n\t\t\t} else {\n\t\t\t\tcolumn = column - 1;\n\t\t\t}\n\t\t} else if (lineNumber > 1) {\n\t\t\tlineNumber = lineNumber - 1;\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\treturn new CursorPosition(lineNumber, column, 0);\n\t}\n\n\tpublic static moveLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlet r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static right(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number): CursorPosition {\n\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tif (CursorColumns.isHighSurrogate(model, lineNumber, column - 1)) {\n\t\t\t\t// character after column is a high surrogate\n\t\t\t\tcolumn = column + 2;\n\t\t\t} else {\n\t\t\t\tcolumn = column + 1;\n\t\t\t}\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\n\t\treturn new CursorPosition(lineNumber, column, 0);\n\t}\n\n\tpublic static moveRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlet r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static down(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnLastLine: boolean): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\n\t\tlineNumber = lineNumber + count;\n\t\tlet lineCount = model.getLineCount();\n\t\tif (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnLastLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t\tif (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n\t\t\t\t\tcolumn = column - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\t\t\tif (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n\t\t\t\tcolumn = column - 1;\n\t\t\t}\n\t\t}\n\n\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static moveDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move down acts relative to the end of selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\t\tlet selection = cursor.selection;\n\n\t\tlet selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tlet position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tpublic static up(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnFirstLine: boolean): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\n\t\tlineNumber = lineNumber - count;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnFirstLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t\tif (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n\t\t\t\t\tcolumn = column - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\t\t\tif (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n\t\t\t\tcolumn = column - 1;\n\t\t\t}\n\t\t}\n\n\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static moveUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move up acts relative to the beginning of selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\n\t\tlet selection = cursor.selection;\n\n\t\tlet selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tlet position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tpublic static moveToBeginningOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\t\tlet minColumn = model.getLineMinColumn(lineNumber);\n\t\tlet firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n\n\t\tlet column: number;\n\n\t\tlet relevantColumnNumber = cursor.position.column;\n\t\tif (relevantColumnNumber === firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static moveToEndOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\t\tlet maxColumn = model.getLineMaxColumn(lineNumber);\n\t\treturn cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n\t}\n\n\tpublic static moveToBeginningOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\treturn cursor.move(inSelectionMode, 1, 1, 0);\n\t}\n\n\tpublic static moveToEndOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lastLineNumber = model.getLineCount();\n\t\tlet lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\treturn cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n\t}\n}\n"]}]}