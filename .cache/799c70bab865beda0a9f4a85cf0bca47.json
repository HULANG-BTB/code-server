{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/base/node/pfs\", \"vs/editor/common/services/resolverService\", \"vs/nls\", \"vs/platform/dialogs/common/dialogs\", \"vs/platform/environment/common/environment\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/product/node/product\", \"vs/platform/windows/common/windows\", \"vs/workbench/contrib/performance/electron-browser/perfviewEditor\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/clipboard/common/clipboardService\", \"vs/base/common/uri\"], function (require, exports, path_1, pfs_1, resolverService_1, nls_1, dialogs_1, environment_1, lifecycle_1, product_1, windows_1, perfviewEditor_1, extensions_1, clipboardService_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let StartupProfiler = class StartupProfiler {\n        constructor(_windowsService, _dialogService, _environmentService, _textModelResolverService, _clipboardService, lifecycleService, extensionService) {\n            this._windowsService = _windowsService;\n            this._dialogService = _dialogService;\n            this._environmentService = _environmentService;\n            this._textModelResolverService = _textModelResolverService;\n            this._clipboardService = _clipboardService;\n            // wait for everything to be ready\n            Promise.all([\n                lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually),\n                extensionService.whenInstalledExtensionsRegistered()\n            ]).then(() => {\n                this._stopProfiling();\n            });\n        }\n        _stopProfiling() {\n            const profileFilenamePrefix = this._environmentService.args['prof-startup-prefix'];\n            if (!profileFilenamePrefix) {\n                return;\n            }\n            const dir = path_1.dirname(profileFilenamePrefix);\n            const prefix = path_1.basename(profileFilenamePrefix);\n            const removeArgs = ['--prof-startup'];\n            const markerFile = pfs_1.readFile(profileFilenamePrefix).then(value => removeArgs.push(...value.toString().split('|')))\n                .then(() => pfs_1.del(profileFilenamePrefix)) // (1) delete the file to tell the main process to stop profiling\n                .then(() => new Promise(resolve => {\n                const check = () => {\n                    pfs_1.exists(profileFilenamePrefix).then(exists => {\n                        if (exists) {\n                            resolve();\n                        }\n                        else {\n                            setTimeout(check, 500);\n                        }\n                    });\n                };\n                check();\n            }))\n                .then(() => pfs_1.del(profileFilenamePrefix)); // (3) finally delete the file again\n            markerFile.then(() => {\n                return pfs_1.readdir(dir).then(files => files.filter(value => value.indexOf(prefix) === 0));\n            }).then(files => {\n                const profileFiles = files.reduce((prev, cur) => `${prev}${path_1.join(dir, cur)}\\n`, '\\n');\n                return this._dialogService.confirm({\n                    type: 'info',\n                    message: nls_1.localize('prof.message', \"Successfully created profiles.\"),\n                    detail: nls_1.localize('prof.detail', \"Please create an issue and manually attach the following files:\\n{0}\", profileFiles),\n                    primaryButton: nls_1.localize('prof.restartAndFileIssue', \"Create Issue and Restart\"),\n                    secondaryButton: nls_1.localize('prof.restart', \"Restart\")\n                }).then(res => {\n                    if (res.confirmed) {\n                        Promise.all([\n                            this._windowsService.showItemInFolder(uri_1.URI.file(path_1.join(dir, files[0]))),\n                            this._createPerfIssue(files)\n                        ]).then(() => {\n                            // keep window stable until restart is selected\n                            return this._dialogService.confirm({\n                                type: 'info',\n                                message: nls_1.localize('prof.thanks', \"Thanks for helping us.\"),\n                                detail: nls_1.localize('prof.detail.restart', \"A final restart is required to continue to use '{0}'. Again, thank you for your contribution.\", this._environmentService.appNameLong),\n                                primaryButton: nls_1.localize('prof.restart', \"Restart\"),\n                                secondaryButton: undefined\n                            }).then(() => {\n                                // now we are ready to restart\n                                this._windowsService.relaunch({ removeArgs });\n                            });\n                        });\n                    }\n                    else {\n                        // simply restart\n                        this._windowsService.relaunch({ removeArgs });\n                    }\n                });\n            });\n        }\n        _createPerfIssue(files) {\n            return this._textModelResolverService.createModelReference(perfviewEditor_1.PerfviewInput.Uri).then(ref => {\n                this._clipboardService.writeText(ref.object.textEditorModel.getValue());\n                ref.dispose();\n                const body = `\n1. :warning: We have copied additional data to your clipboard. Make sure to **paste** here. :warning:\n1. :warning: Make sure to **attach** these files from your *home*-directory: :warning:\\n${files.map(file => `-\\`${file}\\``).join('\\n')}\n`;\n                const baseUrl = product_1.default.reportIssueUrl;\n                const queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';\n                window.open(`${baseUrl}${queryStringPrefix}body=${encodeURIComponent(body)}`);\n            });\n        }\n    };\n    StartupProfiler = __decorate([\n        __param(0, windows_1.IWindowsService),\n        __param(1, dialogs_1.IDialogService),\n        __param(2, environment_1.IEnvironmentService),\n        __param(3, resolverService_1.ITextModelService),\n        __param(4, clipboardService_1.IClipboardService),\n        __param(5, lifecycle_1.ILifecycleService),\n        __param(6, extensions_1.IExtensionService)\n    ], StartupProfiler);\n    exports.StartupProfiler = StartupProfiler;\n});\n",null]}