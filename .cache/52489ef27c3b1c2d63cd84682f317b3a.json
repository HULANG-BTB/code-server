{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/ide/src/fill/clipboard.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/fill/clipboard.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar events_1 = require(\"@coder/events\");\n/**\n * Wrapper around the native clipboard with some fallbacks.\n */\nvar Clipboard = /** @class */ (function () {\n    function Clipboard() {\n        this.enableEmitter = new events_1.Emitter();\n        this.onPermissionChange = this.enableEmitter.event;\n        this._isEnabled = false;\n    }\n    /**\n     * Ask for permission to use the clipboard.\n     */\n    Clipboard.prototype.initialize = function () {\n        var _this = this;\n        // tslint:disable no-any\n        var navigatorClip = navigator.clipboard;\n        var navigatorPerms = navigator.permissions;\n        // tslint:enable no-any\n        if (navigatorClip && navigatorPerms) {\n            navigatorPerms.query({\n                name: \"clipboard-read\",\n            }).then(function (permissionStatus) {\n                var updateStatus = function () {\n                    _this._isEnabled = permissionStatus.state !== \"denied\";\n                    _this.enableEmitter.emit(_this.isEnabled);\n                };\n                updateStatus();\n                permissionStatus.onchange = function () {\n                    updateStatus();\n                };\n            });\n        }\n    };\n    /**\n     * Paste currently copied text.\n     */\n    Clipboard.prototype.paste = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var element, start, end, allText, newText, _a, ex_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this.isEnabled) return [3 /*break*/, 4];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        element = document.activeElement;\n                        start = element.selectionStart || 0;\n                        end = element.selectionEnd;\n                        allText = element.value;\n                        _a = allText.substring(0, start);\n                        return [4 /*yield*/, this.readText()];\n                    case 2:\n                        newText = _a + (_b.sent())\n                            + allText.substring(end || start);\n                        element.value = newText;\n                        return [2 /*return*/, true];\n                    case 3:\n                        ex_1 = _b.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/, document.execCommand(\"paste\")];\n                }\n            });\n        });\n    };\n    Object.defineProperty(Clipboard.prototype, \"isSupported\", {\n        /**\n         * Return true if the native clipboard is supported.\n         */\n        get: function () {\n            // tslint:disable no-any\n            return typeof navigator !== \"undefined\"\n                && typeof navigator.clipboard !== \"undefined\"\n                && typeof navigator.clipboard.readText !== \"undefined\";\n            // tslint:enable no-any\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Read text from the clipboard.\n     */\n    Clipboard.prototype.readText = function () {\n        return this.instance ? this.instance.readText() : Promise.resolve(\"\");\n    };\n    /**\n     * Write text to the clipboard.\n     */\n    Clipboard.prototype.writeText = function (value) {\n        return this.instance\n            ? this.instance.writeText(value)\n            : this.writeTextFallback(value);\n    };\n    Object.defineProperty(Clipboard.prototype, \"isEnabled\", {\n        /**\n         * Return true if the clipboard is currently enabled.\n         */\n        get: function () {\n            return !!this._isEnabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Clipboard.prototype, \"instance\", {\n        /**\n         * Return clipboard instance if there is one.\n         */\n        get: function () {\n            // tslint:disable-next-line no-any\n            return this.isSupported ? navigator.clipboard : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Fallback for writing text to the clipboard.\n     * Taken from https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n     */\n    Clipboard.prototype.writeTextFallback = function (value) {\n        // Note the current focus and selection.\n        var active = document.activeElement;\n        var selection = document.getSelection();\n        var selected = selection && selection.rangeCount > 0\n            ? selection.getRangeAt(0)\n            : false;\n        // Insert a hidden textarea to put the text to copy in.\n        var el = document.createElement(\"textarea\");\n        el.value = value;\n        el.setAttribute(\"readonly\", \"\");\n        el.style.position = \"absolute\";\n        el.style.left = \"-9999px\";\n        document.body.appendChild(el);\n        // Select the textarea and execute a copy (this will only work as part of a\n        // user interaction).\n        el.select();\n        document.execCommand(\"copy\");\n        // Remove the textarea and put focus and selection back to where it was\n        // previously.\n        document.body.removeChild(el);\n        active.focus();\n        if (selected && selection) {\n            selection.removeAllRanges();\n            selection.addRange(selected);\n        }\n        return Promise.resolve();\n    };\n    return Clipboard;\n}());\nexports.Clipboard = Clipboard;\n// Global clipboard instance since it's used in the Electron fill.\nexports.clipboard = new Clipboard();\n",{"version":3,"file":"/home/coding/workspace/packages/ide/src/fill/clipboard.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/ide/src/fill/clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["import { Emitter } from \"@coder/events\";\n\n/**\n * Wrapper around the native clipboard with some fallbacks.\n */\nexport class Clipboard {\n\tprivate readonly enableEmitter = new Emitter<boolean>();\n\tpublic readonly onPermissionChange = this.enableEmitter.event;\n\tprivate _isEnabled: boolean = false;\n\n\t/**\n\t * Ask for permission to use the clipboard.\n\t */\n\tpublic initialize(): void {\n\t\t// tslint:disable no-any\n\t\tconst navigatorClip = (navigator as any).clipboard;\n\t\tconst navigatorPerms = (navigator as any).permissions;\n\t\t// tslint:enable no-any\n\t\tif (navigatorClip && navigatorPerms) {\n\t\t\tnavigatorPerms.query({\n\t\t\t\tname: \"clipboard-read\",\n\t\t\t}).then((permissionStatus: {\n\t\t\t\tonchange: () => void,\n\t\t\t\tstate: \"denied\" | \"granted\" | \"prompt\",\n\t\t\t}) => {\n\t\t\t\tconst updateStatus = (): void => {\n\t\t\t\t\tthis._isEnabled = permissionStatus.state !== \"denied\";\n\t\t\t\t\tthis.enableEmitter.emit(this.isEnabled);\n\t\t\t\t};\n\t\t\t\tupdateStatus();\n\t\t\t\tpermissionStatus.onchange = (): void => {\n\t\t\t\t\tupdateStatus();\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Paste currently copied text.\n\t */\n\tpublic async paste(): Promise<boolean> {\n\t\tif (this.isEnabled) {\n\t\t\ttry {\n\t\t\t\tconst element = document.activeElement as HTMLInputElement | HTMLTextAreaElement;\n\t\t\t\tconst start = element.selectionStart || 0;\n\t\t\t\tconst end = element.selectionEnd;\n\t\t\t\tconst allText = element.value;\n\t\t\t\tconst newText = allText.substring(0, start)\n\t\t\t\t\t+ (await this.readText())\n\t\t\t\t\t+ allText.substring(end || start);\n\t\t\t\telement.value = newText;\n\n\t\t\t\treturn true;\n\t\t\t} catch (ex) {\n\t\t\t\t// Will try execCommand below.\n\t\t\t}\n\t\t}\n\n\t\treturn document.execCommand(\"paste\");\n\t}\n\n\t/**\n\t * Return true if the native clipboard is supported.\n\t */\n\tpublic get isSupported(): boolean {\n\t\t// tslint:disable no-any\n\t\treturn typeof navigator !== \"undefined\"\n\t\t\t&& typeof (navigator as any).clipboard !== \"undefined\"\n\t\t\t&& typeof (navigator as any).clipboard.readText !== \"undefined\";\n\t\t// tslint:enable no-any\n\t}\n\n\t/**\n\t * Read text from the clipboard.\n\t */\n\tpublic readText(): Promise<string> {\n\t\treturn this.instance ? this.instance.readText() : Promise.resolve(\"\");\n\t}\n\n\t/**\n\t * Write text to the clipboard.\n\t */\n\tpublic writeText(value: string): Promise<void> {\n\t\treturn this.instance\n\t\t\t? this.instance.writeText(value)\n\t\t\t: this.writeTextFallback(value);\n\t}\n\n\t/**\n\t * Return true if the clipboard is currently enabled.\n\t */\n\tpublic get isEnabled(): boolean {\n\t\treturn !!this._isEnabled;\n\t}\n\n\t/**\n\t * Return clipboard instance if there is one.\n\t */\n\tprivate get instance(): ({\n\t\treadText(): Promise<string>;\n\t\twriteText(value: string): Promise<void>;\n\t}) | undefined {\n\t\t// tslint:disable-next-line no-any\n\t\treturn this.isSupported ? (navigator as any).clipboard : undefined;\n\t}\n\n\t/**\n\t * Fallback for writing text to the clipboard.\n\t * Taken from https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n\t */\n\tprivate writeTextFallback(value: string): Promise<void> {\n\t\t// Note the current focus and selection.\n\t\tconst active = document.activeElement as HTMLElement;\n\t\tconst selection = document.getSelection();\n\t\tconst selected = selection && selection.rangeCount > 0\n\t\t\t? selection.getRangeAt(0)\n\t\t\t: false;\n\n\t\t// Insert a hidden textarea to put the text to copy in.\n\t\tconst el = document.createElement(\"textarea\");\n\t\tel.value = value;\n\t\tel.setAttribute(\"readonly\", \"\");\n\t\tel.style.position = \"absolute\";\n\t\tel.style.left = \"-9999px\";\n\t\tdocument.body.appendChild(el);\n\n\t\t// Select the textarea and execute a copy (this will only work as part of a\n\t\t// user interaction).\n\t\tel.select();\n\t\tdocument.execCommand(\"copy\");\n\n\t\t// Remove the textarea and put focus and selection back to where it was\n\t\t// previously.\n\t\tdocument.body.removeChild(el);\n\t\tactive.focus();\n\t\tif (selected && selection) {\n\t\t\tselection.removeAllRanges();\n\t\t\tselection.addRange(selected);\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n}\n\n// Global clipboard instance since it's used in the Electron fill.\nexport const clipboard = new Clipboard();\n"]}]}