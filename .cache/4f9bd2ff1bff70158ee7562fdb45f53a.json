{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/logViewer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/logViewer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path_1 = require(\"vs/base/common/path\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar textResourceEditor_1 = require(\"vs/workbench/browser/parts/editor/textResourceEditor\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar LogViewerInput = /** @class */ (function (_super) {\n    tslib_1.__extends(LogViewerInput, _super);\n    function LogViewerInput(outputChannelDescriptor, textModelResolverService) {\n        var _this = _super.call(this, path_1.basename(outputChannelDescriptor.file.path), path_1.dirname(outputChannelDescriptor.file.path), uri_1.URI.from({ scheme: output_1.LOG_SCHEME, path: outputChannelDescriptor.id }), textModelResolverService) || this;\n        _this.outputChannelDescriptor = outputChannelDescriptor;\n        return _this;\n    }\n    LogViewerInput.prototype.getTypeId = function () {\n        return LogViewerInput.ID;\n    };\n    LogViewerInput.prototype.getResource = function () {\n        return this.outputChannelDescriptor.file;\n    };\n    LogViewerInput.ID = 'workbench.editorinputs.output';\n    LogViewerInput = tslib_1.__decorate([\n        tslib_1.__param(1, resolverService_1.ITextModelService)\n    ], LogViewerInput);\n    return LogViewerInput;\n}(resourceEditorInput_1.ResourceEditorInput));\nexports.LogViewerInput = LogViewerInput;\nvar LogViewer = /** @class */ (function (_super) {\n    tslib_1.__extends(LogViewer, _super);\n    function LogViewer(telemetryService, instantiationService, storageService, baseConfigurationService, textResourceConfigurationService, themeService, editorGroupService, textFileService, editorService, windowService) {\n        return _super.call(this, LogViewer.LOG_VIEWER_EDITOR_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, textFileService, editorService, windowService) || this;\n    }\n    LogViewer.prototype.getConfigurationOverrides = function () {\n        var options = _super.prototype.getConfigurationOverrides.call(this);\n        options.wordWrap = 'off'; // all log viewers do not wrap\n        options.folding = false;\n        options.scrollBeyondLastLine = false;\n        return options;\n    };\n    LogViewer.LOG_VIEWER_EDITOR_ID = 'workbench.editors.logViewer';\n    LogViewer = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, textfiles_1.ITextFileService),\n        tslib_1.__param(8, editorService_1.IEditorService),\n        tslib_1.__param(9, windows_1.IWindowService)\n    ], LogViewer);\n    return LogViewer;\n}(textResourceEditor_1.AbstractTextResourceEditor));\nexports.LogViewer = LogViewer;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/logViewer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/logViewer.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4CAAwD;AAExD,oEAA2E;AAC3E,8DAAqE;AACrE,yFAAoG;AACpG,gFAAuF;AACvF,2FAAkG;AAClG,sEAAsE;AACtE,6EAAmF;AACnF,gFAAuF;AACvF,sFAAqF;AACrF,0CAAyC;AACzC,6EAA8E;AAC9E,oEAAqG;AACrG,+FAA+F;AAC/F,mFAAmF;AACnF,8DAAoE;AAEpE;IAAoC,0CAAmB;IAItD,wBAAoB,uBAAqD,EACrD,wBAA2C;QAD/D,YAGC,kBAAM,eAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,cAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,mBAAU,EAAE,IAAI,EAAE,uBAAuB,CAAC,EAAE,EAAE,CAAC,EAAE,wBAAwB,CAAC,SAC5L;QAJmB,6BAAuB,GAAvB,uBAAuB,CAA8B;;IAIzE,CAAC;IAEM,kCAAS,GAAhB;QACC,OAAO,cAAc,CAAC,EAAE,CAAC;IAC1B,CAAC;IAEM,oCAAW,GAAlB;QACC,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC;IAC1C,CAAC;IAdsB,iBAAE,GAAG,+BAA+B,CAAC;IAFhD,cAAc;QAKxB,mBAAA,mCAAiB,CAAA;OALP,cAAc,CAiB1B;IAAD,qBAAC;CAAA,AAjBD,CAAoC,yCAAmB,GAiBtD;AAjBY,wCAAc;AAmB3B;IAA+B,qCAA0B;IAIxD,mBACoB,gBAAmC,EAC/B,oBAA2C,EACjD,cAA+B,EACzB,wBAA+C,EACnC,gCAAmE,EACvF,YAA2B,EACpB,kBAAwC,EAC5C,eAAiC,EACnC,aAA6B,EAC7B,aAA6B;eAE7C,kBAAM,SAAS,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,cAAc,EAAE,gCAAgC,EAAE,YAAY,EAAE,kBAAkB,EAAE,eAAe,EAAE,aAAa,EAAE,aAAa,CAAC;IACjN,CAAC;IAES,6CAAyB,GAAnC;QACC,IAAM,OAAO,GAAG,iBAAM,yBAAyB,WAAE,CAAC;QAClD,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,8BAA8B;QACxD,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;QACxB,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;QACrC,OAAO,OAAO,CAAC;IAChB,CAAC;IAvBe,8BAAoB,GAAG,6BAA6B,CAAC;IAFzD,SAAS;QAKnB,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,yBAAe,CAAA;QACf,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,yDAAiC,CAAA;QACjC,mBAAA,4BAAa,CAAA;QACb,mBAAA,0CAAoB,CAAA;QACpB,mBAAA,4BAAgB,CAAA;QAChB,mBAAA,8BAAc,CAAA;QACd,mBAAA,wBAAc,CAAA;OAdJ,SAAS,CA0BrB;IAAD,gBAAC;CAAA,AA1BD,CAA+B,+CAA0B,GA0BxD;AA1BY,8BAAS","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dirname, basename } from 'vs/base/common/path';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { AbstractTextResourceEditor } from 'vs/workbench/browser/parts/editor/textResourceEditor';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { LOG_SCHEME, IFileOutputChannelDescriptor } from 'vs/workbench/contrib/output/common/output';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\n\nexport class LogViewerInput extends ResourceEditorInput {\n\n\tpublic static readonly ID = 'workbench.editorinputs.output';\n\n\tconstructor(private outputChannelDescriptor: IFileOutputChannelDescriptor,\n\t\t@ITextModelService textModelResolverService: ITextModelService\n\t) {\n\t\tsuper(basename(outputChannelDescriptor.file.path), dirname(outputChannelDescriptor.file.path), URI.from({ scheme: LOG_SCHEME, path: outputChannelDescriptor.id }), textModelResolverService);\n\t}\n\n\tpublic getTypeId(): string {\n\t\treturn LogViewerInput.ID;\n\t}\n\n\tpublic getResource(): URI {\n\t\treturn this.outputChannelDescriptor.file;\n\t}\n}\n\nexport class LogViewer extends AbstractTextResourceEditor {\n\n\tstatic readonly LOG_VIEWER_EDITOR_ID = 'workbench.editors.logViewer';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService baseConfigurationService: IConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(LogViewer.LOG_VIEWER_EDITOR_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, textFileService, editorService, windowService);\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\tconst options = super.getConfigurationOverrides();\n\t\toptions.wordWrap = 'off'; // all log viewers do not wrap\n\t\toptions.folding = false;\n\t\toptions.scrollBeyondLastLine = false;\n\t\treturn options;\n\t}\n}\n"]}]}