{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/selectBox/selectBox.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/selectBox/selectBox.ts","mtime":1555846338028},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./selectBox\");\nvar widget_1 = require(\"vs/base/browser/ui/widget\");\nvar color_1 = require(\"vs/base/common/color\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar selectBoxNative_1 = require(\"vs/base/browser/ui/selectBox/selectBoxNative\");\nvar selectBoxCustom_1 = require(\"vs/base/browser/ui/selectBox/selectBoxCustom\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nexports.defaultStyles = {\n    selectBackground: color_1.Color.fromHex('#3C3C3C'),\n    selectForeground: color_1.Color.fromHex('#F0F0F0'),\n    selectBorder: color_1.Color.fromHex('#3C3C3C')\n};\nvar SelectBox = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectBox, _super);\n    function SelectBox(options, selected, contextViewProvider, styles, selectBoxOptions) {\n        if (styles === void 0) { styles = objects_1.deepClone(exports.defaultStyles); }\n        var _this = _super.call(this) || this;\n        objects_1.mixin(_this.styles, exports.defaultStyles, false);\n        // Default to native SelectBox for OSX unless overridden\n        if (browser_1.isMacintosh && !(selectBoxOptions && selectBoxOptions.useCustomDrawn)) {\n            _this.selectBoxDelegate = new selectBoxNative_1.SelectBoxNative(options, selected, styles, selectBoxOptions);\n        }\n        else {\n            _this.selectBoxDelegate = new selectBoxCustom_1.SelectBoxList(options, selected, contextViewProvider, styles, selectBoxOptions);\n        }\n        _this._register(_this.selectBoxDelegate);\n        return _this;\n    }\n    Object.defineProperty(SelectBox.prototype, \"onDidSelect\", {\n        // Public SelectBox Methods - routed through delegate interface\n        get: function () {\n            return this.selectBoxDelegate.onDidSelect;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SelectBox.prototype.setOptions = function (options, selected) {\n        this.selectBoxDelegate.setOptions(options, selected);\n    };\n    SelectBox.prototype.select = function (index) {\n        this.selectBoxDelegate.select(index);\n    };\n    SelectBox.prototype.setAriaLabel = function (label) {\n        this.selectBoxDelegate.setAriaLabel(label);\n    };\n    SelectBox.prototype.focus = function () {\n        this.selectBoxDelegate.focus();\n    };\n    SelectBox.prototype.blur = function () {\n        this.selectBoxDelegate.blur();\n    };\n    // Public Widget Methods - routed through delegate interface\n    SelectBox.prototype.render = function (container) {\n        this.selectBoxDelegate.render(container);\n    };\n    SelectBox.prototype.style = function (styles) {\n        this.selectBoxDelegate.style(styles);\n    };\n    SelectBox.prototype.applyStyles = function () {\n        this.selectBoxDelegate.applyStyles();\n    };\n    return SelectBox;\n}(widget_1.Widget));\nexports.SelectBox = SelectBox;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/selectBox/selectBox.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/selectBox/selectBox.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8BAA4B;AAG5B,oDAAmD;AACnD,8CAA6C;AAC7C,kDAA0D;AAG1D,gFAA+E;AAC/E,gFAA6E;AAC7E,mDAAsD;AA+CzC,QAAA,aAAa,GAAG;IAC5B,gBAAgB,EAAE,aAAK,CAAC,OAAO,CAAC,SAAS,CAAC;IAC1C,gBAAgB,EAAE,aAAK,CAAC,OAAO,CAAC,SAAS,CAAC;IAC1C,YAAY,EAAE,aAAK,CAAC,OAAO,CAAC,SAAS,CAAC;CACtC,CAAC;AAOF;IAA+B,qCAAM;IAIpC,mBAAY,OAA4B,EAAE,QAAgB,EAAE,mBAAyC,EAAE,MAAmD,EAAE,gBAAoC;QAAzF,uBAAA,EAAA,SAA2B,mBAAS,CAAC,qBAAa,CAAC;QAA1J,YACC,iBAAO,SAYP;QAVA,eAAK,CAAC,KAAI,CAAC,MAAM,EAAE,qBAAa,EAAE,KAAK,CAAC,CAAC;QAEzC,wDAAwD;QACxD,IAAI,qBAAW,IAAI,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,cAAc,CAAC,EAAE;YAC1E,KAAI,CAAC,iBAAiB,GAAG,IAAI,iCAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;SAC1F;aAAM;YACN,KAAI,CAAC,iBAAiB,GAAG,IAAI,+BAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;SAC7G;QAED,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;;IACxC,CAAC;IAID,sBAAW,kCAAW;QAFtB,+DAA+D;aAE/D;YACC,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;QAC3C,CAAC;;;OAAA;IAEM,8BAAU,GAAjB,UAAkB,OAA4B,EAAE,QAAiB;QAChE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAEM,0BAAM,GAAb,UAAc,KAAa;QAC1B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEM,gCAAY,GAAnB,UAAoB,KAAa;QAChC,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEM,yBAAK,GAAZ;QACC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAEM,wBAAI,GAAX;QACC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,4DAA4D;IAErD,0BAAM,GAAb,UAAc,SAAsB;QACnC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC1C,CAAC;IAEM,yBAAK,GAAZ,UAAa,MAAwB;QACpC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAEM,+BAAW,GAAlB;QACC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC;IACF,gBAAC;AAAD,CAAC,AA1DD,CAA+B,eAAM,GA0DpC;AA1DY,8BAAS","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./selectBox';\n\nimport { Event } from 'vs/base/common/event';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport { Color } from 'vs/base/common/color';\nimport { deepClone, mixin } from 'vs/base/common/objects';\nimport { IContextViewProvider } from 'vs/base/browser/ui/contextview/contextview';\nimport { IListStyles } from 'vs/base/browser/ui/list/listWidget';\nimport { SelectBoxNative } from 'vs/base/browser/ui/selectBox/selectBoxNative';\nimport { SelectBoxList } from 'vs/base/browser/ui/selectBox/selectBoxCustom';\nimport { isMacintosh } from 'vs/base/browser/browser';\n\n\n// Public SelectBox interface - Calls routed to appropriate select implementation class\n\nexport interface ISelectBoxDelegate {\n\n\t// Public SelectBox Interface\n\treadonly onDidSelect: Event<ISelectData>;\n\tsetOptions(options: ISelectOptionItem[], selected?: number): void;\n\tselect(index: number): void;\n\tsetAriaLabel(label: string): void;\n\tfocus(): void;\n\tblur(): void;\n\tdispose(): void;\n\n\t// Delegated Widget interface\n\trender(container: HTMLElement): void;\n\tstyle(styles: ISelectBoxStyles): void;\n\tapplyStyles(): void;\n}\n\nexport interface ISelectBoxOptions {\n\tuseCustomDrawn?: boolean;\n\tariaLabel?: string;\n\tminBottomMargin?: number;\n}\n\n// Utilize optionItem interface to capture all option parameters\nexport interface ISelectOptionItem {\n\ttext: string;\n\tdecoratorRight?: string;\n\tdescription?: string;\n\tdescriptionIsMarkdown?: boolean;\n\tisDisabled?: boolean;\n}\n\nexport interface ISelectBoxStyles extends IListStyles {\n\tselectBackground?: Color;\n\tselectListBackground?: Color;\n\tselectForeground?: Color;\n\tdecoratorRightForeground?: Color;\n\tselectBorder?: Color;\n\tselectListBorder?: Color;\n\tfocusBorder?: Color;\n}\n\nexport const defaultStyles = {\n\tselectBackground: Color.fromHex('#3C3C3C'),\n\tselectForeground: Color.fromHex('#F0F0F0'),\n\tselectBorder: Color.fromHex('#3C3C3C')\n};\n\nexport interface ISelectData {\n\tselected: string;\n\tindex: number;\n}\n\nexport class SelectBox extends Widget implements ISelectBoxDelegate {\n\tprivate styles: ISelectBoxStyles;\n\tprivate selectBoxDelegate: ISelectBoxDelegate;\n\n\tconstructor(options: ISelectOptionItem[], selected: number, contextViewProvider: IContextViewProvider, styles: ISelectBoxStyles = deepClone(defaultStyles), selectBoxOptions?: ISelectBoxOptions) {\n\t\tsuper();\n\n\t\tmixin(this.styles, defaultStyles, false);\n\n\t\t// Default to native SelectBox for OSX unless overridden\n\t\tif (isMacintosh && !(selectBoxOptions && selectBoxOptions.useCustomDrawn)) {\n\t\t\tthis.selectBoxDelegate = new SelectBoxNative(options, selected, styles, selectBoxOptions);\n\t\t} else {\n\t\t\tthis.selectBoxDelegate = new SelectBoxList(options, selected, contextViewProvider, styles, selectBoxOptions);\n\t\t}\n\n\t\tthis._register(this.selectBoxDelegate);\n\t}\n\n\t// Public SelectBox Methods - routed through delegate interface\n\n\tpublic get onDidSelect(): Event<ISelectData> {\n\t\treturn this.selectBoxDelegate.onDidSelect;\n\t}\n\n\tpublic setOptions(options: ISelectOptionItem[], selected?: number): void {\n\t\tthis.selectBoxDelegate.setOptions(options, selected);\n\t}\n\n\tpublic select(index: number): void {\n\t\tthis.selectBoxDelegate.select(index);\n\t}\n\n\tpublic setAriaLabel(label: string): void {\n\t\tthis.selectBoxDelegate.setAriaLabel(label);\n\t}\n\n\tpublic focus(): void {\n\t\tthis.selectBoxDelegate.focus();\n\t}\n\n\tpublic blur(): void {\n\t\tthis.selectBoxDelegate.blur();\n\t}\n\n\t// Public Widget Methods - routed through delegate interface\n\n\tpublic render(container: HTMLElement): void {\n\t\tthis.selectBoxDelegate.render(container);\n\t}\n\n\tpublic style(styles: ISelectBoxStyles): void {\n\t\tthis.selectBoxDelegate.style(styles);\n\t}\n\n\tpublic applyStyles(): void {\n\t\tthis.selectBoxDelegate.applyStyles();\n\t}\n}"]}]}