{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editorWorkerServiceImpl_1 = require(\"vs/editor/common/services/editorWorkerServiceImpl\");\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nfunction createWebWorker(modelService, opts) {\n    return new MonacoWebWorkerImpl(modelService, opts);\n}\nexports.createWebWorker = createWebWorker;\nvar MonacoWebWorkerImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(MonacoWebWorkerImpl, _super);\n    function MonacoWebWorkerImpl(modelService, opts) {\n        var _this = _super.call(this, modelService, opts.label) || this;\n        _this._foreignModuleId = opts.moduleId;\n        _this._foreignModuleCreateData = opts.createData || null;\n        _this._foreignProxy = null;\n        return _this;\n    }\n    MonacoWebWorkerImpl.prototype._getForeignProxy = function () {\n        var _this = this;\n        if (!this._foreignProxy) {\n            this._foreignProxy = this._getProxy().then(function (proxy) {\n                return proxy.loadForeignModule(_this._foreignModuleId, _this._foreignModuleCreateData).then(function (foreignMethods) {\n                    _this._foreignModuleCreateData = null;\n                    var proxyMethodRequest = function (method, args) {\n                        return proxy.fmr(method, args);\n                    };\n                    var createProxyMethod = function (method, proxyMethodRequest) {\n                        return function () {\n                            var args = Array.prototype.slice.call(arguments, 0);\n                            return proxyMethodRequest(method, args);\n                        };\n                    };\n                    var foreignProxy = {};\n                    for (var _i = 0, foreignMethods_1 = foreignMethods; _i < foreignMethods_1.length; _i++) {\n                        var foreignMethod = foreignMethods_1[_i];\n                        foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n                    }\n                    return foreignProxy;\n                });\n            });\n        }\n        return this._foreignProxy;\n    };\n    MonacoWebWorkerImpl.prototype.getProxy = function () {\n        return this._getForeignProxy();\n    };\n    MonacoWebWorkerImpl.prototype.withSyncedResources = function (resources) {\n        var _this = this;\n        return this._withSyncedResources(resources).then(function (_) { return _this.getProxy(); });\n    };\n    return MonacoWebWorkerImpl;\n}(editorWorkerServiceImpl_1.EditorWorkerClient));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/webWorker.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,6FAAuF;AAGvF;;;GAGG;AACH,SAAgB,eAAe,CAAI,YAA2B,EAAE,IAAuB;IACtF,OAAO,IAAI,mBAAmB,CAAI,YAAY,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AAFD,0CAEC;AAqCD;IAAqC,+CAAkB;IAMtD,6BAAY,YAA2B,EAAE,IAAuB;QAAhE,YACC,kBAAM,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,SAI/B;QAHA,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC;QACtC,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC;QACxD,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;IAC3B,CAAC;IAEO,8CAAgB,GAAxB;QAAA,iBA2BC;QA1BA,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACxB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAC,KAAK;gBAChD,OAAO,KAAK,CAAC,iBAAiB,CAAC,KAAI,CAAC,gBAAgB,EAAE,KAAI,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,UAAC,cAAc;oBACxG,KAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;oBAErC,IAAM,kBAAkB,GAAG,UAAC,MAAc,EAAE,IAAW;wBACtD,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBAChC,CAAC,CAAC;oBAEF,IAAM,iBAAiB,GAAG,UAAC,MAAc,EAAE,kBAAiE;wBAC3G,OAAO;4BACN,IAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;4BACtD,OAAO,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;wBACzC,CAAC,CAAC;oBACH,CAAC,CAAC;oBAEF,IAAI,YAAY,GAAG,EAAO,CAAC;oBAC3B,KAA4B,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;wBAAvC,IAAM,aAAa,uBAAA;wBACjB,YAAa,CAAC,aAAa,CAAC,GAAG,iBAAiB,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;qBAC1F;oBAED,OAAO,YAAY,CAAC;gBACrB,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAEM,sCAAQ,GAAf;QACC,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,CAAC;IAEM,iDAAmB,GAA1B,UAA2B,SAAgB;QAA3C,iBAEC;QADA,OAAO,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,EAAE,EAAf,CAAe,CAAC,CAAC;IACxE,CAAC;IACF,0BAAC;AAAD,CAAC,AAjDD,CAAqC,4CAAkB,GAiDtD","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { EditorWorkerClient } from 'vs/editor/common/services/editorWorkerServiceImpl';\nimport { IModelService } from 'vs/editor/common/services/modelService';\n\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker<T>(modelService: IModelService, opts: IWebWorkerOptions): MonacoWebWorker<T> {\n\treturn new MonacoWebWorkerImpl<T>(modelService, opts);\n}\n\n/**\n * A web worker that can provide a proxy to an arbitrary file.\n */\nexport interface MonacoWebWorker<T> {\n\t/**\n\t * Terminate the web worker, thus invalidating the returned proxy.\n\t */\n\tdispose(): void;\n\t/**\n\t * Get a proxy to the arbitrary loaded code.\n\t */\n\tgetProxy(): Promise<T>;\n\t/**\n\t * Synchronize (send) the models at `resources` to the web worker,\n\t * making them available in the monaco.worker.getMirrorModels().\n\t */\n\twithSyncedResources(resources: URI[]): Promise<T>;\n}\n\nexport interface IWebWorkerOptions {\n\t/**\n\t * The AMD moduleId to load.\n\t * It should export a function `create` that should return the exported proxy.\n\t */\n\tmoduleId: string;\n\t/**\n\t * The data to send over when calling create on the module.\n\t */\n\tcreateData?: any;\n\t/**\n\t * A label to be used to identify the web worker for debugging purposes.\n\t */\n\tlabel?: string;\n}\n\nclass MonacoWebWorkerImpl<T> extends EditorWorkerClient implements MonacoWebWorker<T> {\n\n\tprivate readonly _foreignModuleId: string;\n\tprivate _foreignModuleCreateData: any | null;\n\tprivate _foreignProxy: Promise<T> | null;\n\n\tconstructor(modelService: IModelService, opts: IWebWorkerOptions) {\n\t\tsuper(modelService, opts.label);\n\t\tthis._foreignModuleId = opts.moduleId;\n\t\tthis._foreignModuleCreateData = opts.createData || null;\n\t\tthis._foreignProxy = null;\n\t}\n\n\tprivate _getForeignProxy(): Promise<T> {\n\t\tif (!this._foreignProxy) {\n\t\t\tthis._foreignProxy = this._getProxy().then((proxy) => {\n\t\t\t\treturn proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData).then((foreignMethods) => {\n\t\t\t\t\tthis._foreignModuleCreateData = null;\n\n\t\t\t\t\tconst proxyMethodRequest = (method: string, args: any[]): Promise<any> => {\n\t\t\t\t\t\treturn proxy.fmr(method, args);\n\t\t\t\t\t};\n\n\t\t\t\t\tconst createProxyMethod = (method: string, proxyMethodRequest: (method: string, args: any[]) => Promise<any>): () => Promise<any> => {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tconst args = Array.prototype.slice.call(arguments, 0);\n\t\t\t\t\t\t\treturn proxyMethodRequest(method, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\tlet foreignProxy = {} as T;\n\t\t\t\t\tfor (const foreignMethod of foreignMethods) {\n\t\t\t\t\t\t(<any>foreignProxy)[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn foreignProxy;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn this._foreignProxy;\n\t}\n\n\tpublic getProxy(): Promise<T> {\n\t\treturn this._getForeignProxy();\n\t}\n\n\tpublic withSyncedResources(resources: URI[]): Promise<T> {\n\t\treturn this._withSyncedResources(resources).then(_ => this.getProxy());\n\t}\n}\n"]}]}