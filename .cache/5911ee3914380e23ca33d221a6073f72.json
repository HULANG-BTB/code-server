{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textFileEditorModelManager.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textFileEditorModelManager.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar textFileEditorModel_1 = require(\"vs/workbench/services/textfile/common/textFileEditorModel\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar map_1 = require(\"vs/base/common/map\");\nvar TextFileEditorModelManager = /** @class */ (function (_super) {\n    tslib_1.__extends(TextFileEditorModelManager, _super);\n    function TextFileEditorModelManager(lifecycleService, instantiationService) {\n        var _this = _super.call(this) || this;\n        _this.lifecycleService = lifecycleService;\n        _this.instantiationService = instantiationService;\n        _this._onModelDisposed = _this._register(new event_1.Emitter());\n        _this._onModelContentChanged = _this._register(new event_1.Emitter());\n        _this._onModelDirty = _this._register(new event_1.Emitter());\n        _this._onModelSaveError = _this._register(new event_1.Emitter());\n        _this._onModelSaved = _this._register(new event_1.Emitter());\n        _this._onModelReverted = _this._register(new event_1.Emitter());\n        _this._onModelEncodingChanged = _this._register(new event_1.Emitter());\n        _this._onModelOrphanedChanged = _this._register(new event_1.Emitter());\n        _this.mapResourceToModel = new map_1.ResourceMap();\n        _this.mapResourceToDisposeListener = new map_1.ResourceMap();\n        _this.mapResourceToStateChangeListener = new map_1.ResourceMap();\n        _this.mapResourceToModelContentChangeListener = new map_1.ResourceMap();\n        _this.mapResourceToPendingModelLoaders = new map_1.ResourceMap();\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelDisposed\", {\n        get: function () { return this._onModelDisposed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelContentChanged\", {\n        get: function () { return this._onModelContentChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelDirty\", {\n        get: function () { return this._onModelDirty.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelSaveError\", {\n        get: function () { return this._onModelSaveError.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelSaved\", {\n        get: function () { return this._onModelSaved.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelReverted\", {\n        get: function () { return this._onModelReverted.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelEncodingChanged\", {\n        get: function () { return this._onModelEncodingChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelOrphanedChanged\", {\n        get: function () { return this._onModelOrphanedChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TextFileEditorModelManager.prototype.registerListeners = function () {\n        // Lifecycle\n        this.lifecycleService.onShutdown(this.dispose, this);\n    };\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelsDirty\", {\n        get: function () {\n            if (!this._onModelsDirtyEvent) {\n                this._onModelsDirtyEvent = this.debounce(this.onModelDirty);\n            }\n            return this._onModelsDirtyEvent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelsSaveError\", {\n        get: function () {\n            if (!this._onModelsSaveError) {\n                this._onModelsSaveError = this.debounce(this.onModelSaveError);\n            }\n            return this._onModelsSaveError;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelsSaved\", {\n        get: function () {\n            if (!this._onModelsSaved) {\n                this._onModelsSaved = this.debounce(this.onModelSaved);\n            }\n            return this._onModelsSaved;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextFileEditorModelManager.prototype, \"onModelsReverted\", {\n        get: function () {\n            if (!this._onModelsReverted) {\n                this._onModelsReverted = this.debounce(this.onModelReverted);\n            }\n            return this._onModelsReverted;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextFileEditorModelManager.prototype.debounce = function (event) {\n        return event_1.Event.debounce(event, function (prev, cur) {\n            if (!prev) {\n                prev = [cur];\n            }\n            else {\n                prev.push(cur);\n            }\n            return prev;\n        }, this.debounceDelay());\n    };\n    TextFileEditorModelManager.prototype.debounceDelay = function () {\n        return 250;\n    };\n    TextFileEditorModelManager.prototype.get = function (resource) {\n        return this.mapResourceToModel.get(resource);\n    };\n    TextFileEditorModelManager.prototype.loadOrCreate = function (resource, options) {\n        var _this = this;\n        // Return early if model is currently being loaded\n        var pendingLoad = this.mapResourceToPendingModelLoaders.get(resource);\n        if (pendingLoad) {\n            return pendingLoad;\n        }\n        var modelPromise;\n        // Model exists\n        var model = this.get(resource);\n        if (model) {\n            if (options && options.reload) {\n                // async reload: trigger a reload but return immediately\n                if (options.reload.async) {\n                    modelPromise = Promise.resolve(model);\n                    model.load(options);\n                }\n                // sync reload: do not return until model reloaded\n                else {\n                    modelPromise = model.load(options);\n                }\n            }\n            else {\n                modelPromise = Promise.resolve(model);\n            }\n        }\n        // Model does not exist\n        else {\n            var newModel_1 = model = this.instantiationService.createInstance(textFileEditorModel_1.TextFileEditorModel, resource, options ? options.encoding : undefined);\n            modelPromise = model.load(options);\n            // Install state change listener\n            this.mapResourceToStateChangeListener.set(resource, model.onDidStateChange(function (state) {\n                var event = new textfiles_1.TextFileModelChangeEvent(newModel_1, state);\n                switch (state) {\n                    case textfiles_1.StateChange.DIRTY:\n                        _this._onModelDirty.fire(event);\n                        break;\n                    case textfiles_1.StateChange.SAVE_ERROR:\n                        _this._onModelSaveError.fire(event);\n                        break;\n                    case textfiles_1.StateChange.SAVED:\n                        _this._onModelSaved.fire(event);\n                        break;\n                    case textfiles_1.StateChange.REVERTED:\n                        _this._onModelReverted.fire(event);\n                        break;\n                    case textfiles_1.StateChange.ENCODING:\n                        _this._onModelEncodingChanged.fire(event);\n                        break;\n                    case textfiles_1.StateChange.ORPHANED_CHANGE:\n                        _this._onModelOrphanedChanged.fire(event);\n                        break;\n                }\n            }));\n            // Install model content change listener\n            this.mapResourceToModelContentChangeListener.set(resource, model.onDidContentChange(function (e) {\n                _this._onModelContentChanged.fire(new textfiles_1.TextFileModelChangeEvent(newModel_1, e));\n            }));\n        }\n        // Store pending loads to avoid race conditions\n        this.mapResourceToPendingModelLoaders.set(resource, modelPromise);\n        return modelPromise.then(function (model) {\n            // Make known to manager (if not already known)\n            _this.add(resource, model);\n            // Model can be dirty if a backup was restored, so we make sure to have this event delivered\n            if (model.isDirty()) {\n                _this._onModelDirty.fire(new textfiles_1.TextFileModelChangeEvent(model, textfiles_1.StateChange.DIRTY));\n            }\n            // Remove from pending loads\n            _this.mapResourceToPendingModelLoaders.delete(resource);\n            return model;\n        }, function (error) {\n            // Free resources of this invalid model\n            if (model) {\n                model.dispose();\n            }\n            // Remove from pending loads\n            _this.mapResourceToPendingModelLoaders.delete(resource);\n            return Promise.reject(error);\n        });\n    };\n    TextFileEditorModelManager.prototype.getAll = function (resource, filter) {\n        if (resource) {\n            var res_1 = this.mapResourceToModel.get(resource);\n            return res_1 ? [res_1] : [];\n        }\n        var res = [];\n        this.mapResourceToModel.forEach(function (model) {\n            if (!filter || filter(model)) {\n                res.push(model);\n            }\n        });\n        return res;\n    };\n    TextFileEditorModelManager.prototype.add = function (resource, model) {\n        var _this = this;\n        var knownModel = this.mapResourceToModel.get(resource);\n        if (knownModel === model) {\n            return; // already cached\n        }\n        // dispose any previously stored dispose listener for this resource\n        var disposeListener = this.mapResourceToDisposeListener.get(resource);\n        if (disposeListener) {\n            disposeListener.dispose();\n        }\n        // store in cache but remove when model gets disposed\n        this.mapResourceToModel.set(resource, model);\n        this.mapResourceToDisposeListener.set(resource, model.onDispose(function () {\n            _this.remove(resource);\n            _this._onModelDisposed.fire(resource);\n        }));\n    };\n    TextFileEditorModelManager.prototype.remove = function (resource) {\n        this.mapResourceToModel.delete(resource);\n        var disposeListener = this.mapResourceToDisposeListener.get(resource);\n        if (disposeListener) {\n            lifecycle_1.dispose(disposeListener);\n            this.mapResourceToDisposeListener.delete(resource);\n        }\n        var stateChangeListener = this.mapResourceToStateChangeListener.get(resource);\n        if (stateChangeListener) {\n            lifecycle_1.dispose(stateChangeListener);\n            this.mapResourceToStateChangeListener.delete(resource);\n        }\n        var modelContentChangeListener = this.mapResourceToModelContentChangeListener.get(resource);\n        if (modelContentChangeListener) {\n            lifecycle_1.dispose(modelContentChangeListener);\n            this.mapResourceToModelContentChangeListener.delete(resource);\n        }\n    };\n    TextFileEditorModelManager.prototype.clear = function () {\n        // model caches\n        this.mapResourceToModel.clear();\n        this.mapResourceToPendingModelLoaders.clear();\n        // dispose dispose listeners\n        this.mapResourceToDisposeListener.forEach(function (l) { return l.dispose(); });\n        this.mapResourceToDisposeListener.clear();\n        // dispose state change listeners\n        this.mapResourceToStateChangeListener.forEach(function (l) { return l.dispose(); });\n        this.mapResourceToStateChangeListener.clear();\n        // dispose model content change listeners\n        this.mapResourceToModelContentChangeListener.forEach(function (l) { return l.dispose(); });\n        this.mapResourceToModelContentChangeListener.clear();\n    };\n    TextFileEditorModelManager.prototype.disposeModel = function (model) {\n        if (!model) {\n            return; // we need data!\n        }\n        if (model.isDisposed()) {\n            return; // already disposed\n        }\n        if (this.mapResourceToPendingModelLoaders.has(model.getResource())) {\n            return; // not yet loaded\n        }\n        if (model.isDirty()) {\n            return; // not saved\n        }\n        model.dispose();\n    };\n    TextFileEditorModelManager = tslib_1.__decorate([\n        tslib_1.__param(0, lifecycle_2.ILifecycleService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], TextFileEditorModelManager);\n    return TextFileEditorModelManager;\n}(lifecycle_1.Disposable));\nexports.TextFileEditorModelManager = TextFileEditorModelManager;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textFileEditorModelManager.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textFileEditorModelManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { dispose, IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { ITextFileEditorModel, ITextFileEditorModelManager, TextFileModelChangeEvent, StateChange, IModelLoadOrCreateOptions } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ResourceMap } from 'vs/base/common/map';\n\nexport class TextFileEditorModelManager extends Disposable implements ITextFileEditorModelManager {\n\n\tprivate readonly _onModelDisposed: Emitter<URI> = this._register(new Emitter<URI>());\n\tget onModelDisposed(): Event<URI> { return this._onModelDisposed.event; }\n\n\tprivate readonly _onModelContentChanged: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelContentChanged(): Event<TextFileModelChangeEvent> { return this._onModelContentChanged.event; }\n\n\tprivate readonly _onModelDirty: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelDirty(): Event<TextFileModelChangeEvent> { return this._onModelDirty.event; }\n\n\tprivate readonly _onModelSaveError: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelSaveError(): Event<TextFileModelChangeEvent> { return this._onModelSaveError.event; }\n\n\tprivate readonly _onModelSaved: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelSaved(): Event<TextFileModelChangeEvent> { return this._onModelSaved.event; }\n\n\tprivate readonly _onModelReverted: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelReverted(): Event<TextFileModelChangeEvent> { return this._onModelReverted.event; }\n\n\tprivate readonly _onModelEncodingChanged: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelEncodingChanged(): Event<TextFileModelChangeEvent> { return this._onModelEncodingChanged.event; }\n\n\tprivate readonly _onModelOrphanedChanged: Emitter<TextFileModelChangeEvent> = this._register(new Emitter<TextFileModelChangeEvent>());\n\tget onModelOrphanedChanged(): Event<TextFileModelChangeEvent> { return this._onModelOrphanedChanged.event; }\n\n\tprivate _onModelsDirtyEvent: Event<TextFileModelChangeEvent[]>;\n\tprivate _onModelsSaveError: Event<TextFileModelChangeEvent[]>;\n\tprivate _onModelsSaved: Event<TextFileModelChangeEvent[]>;\n\tprivate _onModelsReverted: Event<TextFileModelChangeEvent[]>;\n\n\tprivate mapResourceToDisposeListener: ResourceMap<IDisposable>;\n\tprivate mapResourceToStateChangeListener: ResourceMap<IDisposable>;\n\tprivate mapResourceToModelContentChangeListener: ResourceMap<IDisposable>;\n\tprivate mapResourceToModel: ResourceMap<ITextFileEditorModel>;\n\tprivate mapResourceToPendingModelLoaders: ResourceMap<Promise<ITextFileEditorModel>>;\n\n\tconstructor(\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis.mapResourceToModel = new ResourceMap<ITextFileEditorModel>();\n\t\tthis.mapResourceToDisposeListener = new ResourceMap<IDisposable>();\n\t\tthis.mapResourceToStateChangeListener = new ResourceMap<IDisposable>();\n\t\tthis.mapResourceToModelContentChangeListener = new ResourceMap<IDisposable>();\n\t\tthis.mapResourceToPendingModelLoaders = new ResourceMap<Promise<ITextFileEditorModel>>();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onShutdown(this.dispose, this);\n\t}\n\n\tget onModelsDirty(): Event<TextFileModelChangeEvent[]> {\n\t\tif (!this._onModelsDirtyEvent) {\n\t\t\tthis._onModelsDirtyEvent = this.debounce(this.onModelDirty);\n\t\t}\n\n\t\treturn this._onModelsDirtyEvent;\n\t}\n\n\tget onModelsSaveError(): Event<TextFileModelChangeEvent[]> {\n\t\tif (!this._onModelsSaveError) {\n\t\t\tthis._onModelsSaveError = this.debounce(this.onModelSaveError);\n\t\t}\n\n\t\treturn this._onModelsSaveError;\n\t}\n\n\tget onModelsSaved(): Event<TextFileModelChangeEvent[]> {\n\t\tif (!this._onModelsSaved) {\n\t\t\tthis._onModelsSaved = this.debounce(this.onModelSaved);\n\t\t}\n\n\t\treturn this._onModelsSaved;\n\t}\n\n\tget onModelsReverted(): Event<TextFileModelChangeEvent[]> {\n\t\tif (!this._onModelsReverted) {\n\t\t\tthis._onModelsReverted = this.debounce(this.onModelReverted);\n\t\t}\n\n\t\treturn this._onModelsReverted;\n\t}\n\n\tprivate debounce(event: Event<TextFileModelChangeEvent>): Event<TextFileModelChangeEvent[]> {\n\t\treturn Event.debounce(event, (prev: TextFileModelChangeEvent[], cur: TextFileModelChangeEvent) => {\n\t\t\tif (!prev) {\n\t\t\t\tprev = [cur];\n\t\t\t} else {\n\t\t\t\tprev.push(cur);\n\t\t\t}\n\t\t\treturn prev;\n\t\t}, this.debounceDelay());\n\t}\n\n\tprotected debounceDelay(): number {\n\t\treturn 250;\n\t}\n\n\tget(resource: URI): ITextFileEditorModel | undefined {\n\t\treturn this.mapResourceToModel.get(resource);\n\t}\n\n\tloadOrCreate(resource: URI, options?: IModelLoadOrCreateOptions): Promise<ITextFileEditorModel> {\n\n\t\t// Return early if model is currently being loaded\n\t\tconst pendingLoad = this.mapResourceToPendingModelLoaders.get(resource);\n\t\tif (pendingLoad) {\n\t\t\treturn pendingLoad;\n\t\t}\n\n\t\tlet modelPromise: Promise<ITextFileEditorModel>;\n\n\t\t// Model exists\n\t\tlet model = this.get(resource);\n\t\tif (model) {\n\t\t\tif (options && options.reload) {\n\n\t\t\t\t// async reload: trigger a reload but return immediately\n\t\t\t\tif (options.reload.async) {\n\t\t\t\t\tmodelPromise = Promise.resolve(model);\n\t\t\t\t\tmodel.load(options);\n\t\t\t\t}\n\n\t\t\t\t// sync reload: do not return until model reloaded\n\t\t\t\telse {\n\t\t\t\t\tmodelPromise = model.load(options);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodelPromise = Promise.resolve(model);\n\t\t\t}\n\t\t}\n\n\t\t// Model does not exist\n\t\telse {\n\t\t\tconst newModel = model = this.instantiationService.createInstance(TextFileEditorModel, resource, options ? options.encoding : undefined);\n\t\t\tmodelPromise = model.load(options);\n\n\t\t\t// Install state change listener\n\t\t\tthis.mapResourceToStateChangeListener.set(resource, model.onDidStateChange(state => {\n\t\t\t\tconst event = new TextFileModelChangeEvent(newModel, state);\n\t\t\t\tswitch (state) {\n\t\t\t\t\tcase StateChange.DIRTY:\n\t\t\t\t\t\tthis._onModelDirty.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase StateChange.SAVE_ERROR:\n\t\t\t\t\t\tthis._onModelSaveError.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase StateChange.SAVED:\n\t\t\t\t\t\tthis._onModelSaved.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase StateChange.REVERTED:\n\t\t\t\t\t\tthis._onModelReverted.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase StateChange.ENCODING:\n\t\t\t\t\t\tthis._onModelEncodingChanged.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase StateChange.ORPHANED_CHANGE:\n\t\t\t\t\t\tthis._onModelOrphanedChanged.fire(event);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Install model content change listener\n\t\t\tthis.mapResourceToModelContentChangeListener.set(resource, model.onDidContentChange(e => {\n\t\t\t\tthis._onModelContentChanged.fire(new TextFileModelChangeEvent(newModel, e));\n\t\t\t}));\n\t\t}\n\n\t\t// Store pending loads to avoid race conditions\n\t\tthis.mapResourceToPendingModelLoaders.set(resource, modelPromise);\n\n\t\treturn modelPromise.then(model => {\n\n\t\t\t// Make known to manager (if not already known)\n\t\t\tthis.add(resource, model);\n\n\t\t\t// Model can be dirty if a backup was restored, so we make sure to have this event delivered\n\t\t\tif (model.isDirty()) {\n\t\t\t\tthis._onModelDirty.fire(new TextFileModelChangeEvent(model, StateChange.DIRTY));\n\t\t\t}\n\n\t\t\t// Remove from pending loads\n\t\t\tthis.mapResourceToPendingModelLoaders.delete(resource);\n\n\t\t\treturn model;\n\t\t}, error => {\n\n\t\t\t// Free resources of this invalid model\n\t\t\tif (model) {\n\t\t\t\tmodel.dispose();\n\t\t\t}\n\n\t\t\t// Remove from pending loads\n\t\t\tthis.mapResourceToPendingModelLoaders.delete(resource);\n\n\t\t\treturn Promise.reject<ITextFileEditorModel>(error);\n\t\t});\n\t}\n\n\tgetAll(resource?: URI, filter?: (model: ITextFileEditorModel) => boolean): ITextFileEditorModel[] {\n\t\tif (resource) {\n\t\t\tconst res = this.mapResourceToModel.get(resource);\n\n\t\t\treturn res ? [res] : [];\n\t\t}\n\n\t\tconst res: ITextFileEditorModel[] = [];\n\t\tthis.mapResourceToModel.forEach(model => {\n\t\t\tif (!filter || filter(model)) {\n\t\t\t\tres.push(model);\n\t\t\t}\n\t\t});\n\n\t\treturn res;\n\t}\n\n\tadd(resource: URI, model: ITextFileEditorModel): void {\n\t\tconst knownModel = this.mapResourceToModel.get(resource);\n\t\tif (knownModel === model) {\n\t\t\treturn; // already cached\n\t\t}\n\n\t\t// dispose any previously stored dispose listener for this resource\n\t\tconst disposeListener = this.mapResourceToDisposeListener.get(resource);\n\t\tif (disposeListener) {\n\t\t\tdisposeListener.dispose();\n\t\t}\n\n\t\t// store in cache but remove when model gets disposed\n\t\tthis.mapResourceToModel.set(resource, model);\n\t\tthis.mapResourceToDisposeListener.set(resource, model.onDispose(() => {\n\t\t\tthis.remove(resource);\n\t\t\tthis._onModelDisposed.fire(resource);\n\t\t}));\n\t}\n\n\tremove(resource: URI): void {\n\t\tthis.mapResourceToModel.delete(resource);\n\n\t\tconst disposeListener = this.mapResourceToDisposeListener.get(resource);\n\t\tif (disposeListener) {\n\t\t\tdispose(disposeListener);\n\t\t\tthis.mapResourceToDisposeListener.delete(resource);\n\t\t}\n\n\t\tconst stateChangeListener = this.mapResourceToStateChangeListener.get(resource);\n\t\tif (stateChangeListener) {\n\t\t\tdispose(stateChangeListener);\n\t\t\tthis.mapResourceToStateChangeListener.delete(resource);\n\t\t}\n\n\t\tconst modelContentChangeListener = this.mapResourceToModelContentChangeListener.get(resource);\n\t\tif (modelContentChangeListener) {\n\t\t\tdispose(modelContentChangeListener);\n\t\t\tthis.mapResourceToModelContentChangeListener.delete(resource);\n\t\t}\n\t}\n\n\tclear(): void {\n\n\t\t// model caches\n\t\tthis.mapResourceToModel.clear();\n\t\tthis.mapResourceToPendingModelLoaders.clear();\n\n\t\t// dispose dispose listeners\n\t\tthis.mapResourceToDisposeListener.forEach(l => l.dispose());\n\t\tthis.mapResourceToDisposeListener.clear();\n\n\t\t// dispose state change listeners\n\t\tthis.mapResourceToStateChangeListener.forEach(l => l.dispose());\n\t\tthis.mapResourceToStateChangeListener.clear();\n\n\t\t// dispose model content change listeners\n\t\tthis.mapResourceToModelContentChangeListener.forEach(l => l.dispose());\n\t\tthis.mapResourceToModelContentChangeListener.clear();\n\t}\n\n\tdisposeModel(model: TextFileEditorModel): void {\n\t\tif (!model) {\n\t\t\treturn; // we need data!\n\t\t}\n\n\t\tif (model.isDisposed()) {\n\t\t\treturn; // already disposed\n\t\t}\n\n\t\tif (this.mapResourceToPendingModelLoaders.has(model.getResource())) {\n\t\t\treturn; // not yet loaded\n\t\t}\n\n\t\tif (model.isDirty()) {\n\t\t\treturn; // not saved\n\t\t}\n\n\t\tmodel.dispose();\n\t}\n}"]}]}