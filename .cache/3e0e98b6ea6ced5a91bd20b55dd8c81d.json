{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsFile.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsFile.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_1 = require(\"vs/base/common/json\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar nls_1 = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar snippetParser_1 = require(\"vs/editor/contrib/snippet/snippetParser\");\nvar snippetVariables_1 = require(\"vs/editor/contrib/snippet/snippetVariables\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar Snippet = /** @class */ (function () {\n    function Snippet(scopes, name, prefix, description, body, source, snippetSource) {\n        this.scopes = scopes;\n        this.name = name;\n        this.prefix = prefix;\n        this.description = description;\n        this.body = body;\n        this.source = source;\n        this.snippetSource = snippetSource;\n        //\n        this.prefixLow = prefix ? prefix.toLowerCase() : prefix;\n    }\n    Object.defineProperty(Snippet.prototype, \"codeSnippet\", {\n        get: function () {\n            this._ensureCodeSnippet();\n            return this._codeSnippet;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Snippet.prototype, \"isBogous\", {\n        get: function () {\n            this._ensureCodeSnippet();\n            return this._isBogous;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Snippet.prototype._ensureCodeSnippet = function () {\n        if (!this._codeSnippet) {\n            var rewrite = Snippet._rewriteBogousVariables(this.body);\n            if (typeof rewrite === 'string') {\n                this._codeSnippet = rewrite;\n                this._isBogous = true;\n            }\n            else {\n                this._codeSnippet = this.body;\n                this._isBogous = false;\n            }\n        }\n    };\n    Snippet.compare = function (a, b) {\n        if (a.snippetSource < b.snippetSource) {\n            return -1;\n        }\n        else if (a.snippetSource > b.snippetSource) {\n            return 1;\n        }\n        else if (a.name > b.name) {\n            return 1;\n        }\n        else if (a.name < b.name) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    };\n    Snippet._rewriteBogousVariables = function (template) {\n        var textmateSnippet = new snippetParser_1.SnippetParser().parse(template, false);\n        var placeholders = new Map();\n        var placeholderMax = 0;\n        for (var _i = 0, _a = textmateSnippet.placeholders; _i < _a.length; _i++) {\n            var placeholder = _a[_i];\n            placeholderMax = Math.max(placeholderMax, placeholder.index);\n        }\n        var didChange = false;\n        var stack = textmateSnippet.children.slice();\n        while (stack.length > 0) {\n            var marker = stack.shift();\n            if (marker instanceof snippetParser_1.Variable\n                && marker.children.length === 0\n                && !snippetVariables_1.KnownSnippetVariableNames[marker.name]) {\n                // a 'variable' without a default value and not being one of our supported\n                // variables is automatically turned into a placeholder. This is to restore\n                // a bug we had before. So `${foo}` becomes `${N:foo}`\n                var index = placeholders.has(marker.name) ? placeholders.get(marker.name) : ++placeholderMax;\n                placeholders.set(marker.name, index);\n                var synthetic = new snippetParser_1.Placeholder(index).appendChild(new snippetParser_1.Text(marker.name));\n                textmateSnippet.replace(marker, [synthetic]);\n                didChange = true;\n            }\n            else {\n                // recurse\n                stack.push.apply(stack, marker.children);\n            }\n        }\n        if (!didChange) {\n            return false;\n        }\n        else {\n            return textmateSnippet.toTextmateString();\n        }\n    };\n    return Snippet;\n}());\nexports.Snippet = Snippet;\nfunction isJsonSerializedSnippet(thing) {\n    return Boolean(thing.body) && Boolean(thing.prefix);\n}\nvar SnippetSource;\n(function (SnippetSource) {\n    SnippetSource[SnippetSource[\"User\"] = 1] = \"User\";\n    SnippetSource[SnippetSource[\"Workspace\"] = 2] = \"Workspace\";\n    SnippetSource[SnippetSource[\"Extension\"] = 3] = \"Extension\";\n})(SnippetSource = exports.SnippetSource || (exports.SnippetSource = {}));\nvar SnippetFile = /** @class */ (function () {\n    function SnippetFile(source, location, defaultScopes, _extension, _fileService) {\n        this.source = source;\n        this.location = location;\n        this.defaultScopes = defaultScopes;\n        this._extension = _extension;\n        this._fileService = _fileService;\n        this.data = [];\n        this.isGlobalSnippets = path_1.extname(location.path) === '.code-snippets';\n        this.isUserSnippets = !this._extension;\n    }\n    SnippetFile.prototype.select = function (selector, bucket) {\n        if (this.isGlobalSnippets || !this.isUserSnippets) {\n            this._scopeSelect(selector, bucket);\n        }\n        else {\n            this._filepathSelect(selector, bucket);\n        }\n    };\n    SnippetFile.prototype._filepathSelect = function (selector, bucket) {\n        // for `fooLang.json` files all snippets are accepted\n        if (selector + '.json' === path_1.basename(this.location.path)) {\n            bucket.push.apply(bucket, this.data);\n        }\n    };\n    SnippetFile.prototype._scopeSelect = function (selector, bucket) {\n        // for `my.code-snippets` files we need to look at each snippet\n        for (var _i = 0, _a = this.data; _i < _a.length; _i++) {\n            var snippet = _a[_i];\n            var len = snippet.scopes.length;\n            if (len === 0) {\n                // always accept\n                bucket.push(snippet);\n            }\n            else {\n                for (var i = 0; i < len; i++) {\n                    // match\n                    if (snippet.scopes[i] === selector) {\n                        bucket.push(snippet);\n                        break; // match only once!\n                    }\n                }\n            }\n        }\n        var idx = selector.lastIndexOf('.');\n        if (idx >= 0) {\n            this._scopeSelect(selector.substring(0, idx), bucket);\n        }\n    };\n    SnippetFile.prototype.load = function () {\n        var _this = this;\n        if (!this._loadPromise) {\n            this._loadPromise = Promise.resolve(this._fileService.resolveContent(this.location, { encoding: 'utf8' })).then(function (content) {\n                var data = json_1.parse(content.value.toString());\n                if (typeof data === 'object') {\n                    collections_1.forEach(data, function (entry) {\n                        var name = entry.key, scopeOrTemplate = entry.value;\n                        if (isJsonSerializedSnippet(scopeOrTemplate)) {\n                            _this._parseSnippet(name, scopeOrTemplate, _this.data);\n                        }\n                        else {\n                            collections_1.forEach(scopeOrTemplate, function (entry) {\n                                var name = entry.key, template = entry.value;\n                                _this._parseSnippet(name, template, _this.data);\n                            });\n                        }\n                    });\n                }\n                return _this;\n            });\n        }\n        return this._loadPromise;\n    };\n    SnippetFile.prototype.reset = function () {\n        this._loadPromise = undefined;\n        this.data.length = 0;\n    };\n    SnippetFile.prototype._parseSnippet = function (name, snippet, bucket) {\n        var _this = this;\n        var prefix = snippet.prefix, body = snippet.body, description = snippet.description;\n        if (Array.isArray(body)) {\n            body = body.join('\\n');\n        }\n        if (Array.isArray(description)) {\n            description = description.join('\\n');\n        }\n        if ((typeof prefix !== 'string' && !Array.isArray(prefix)) || typeof body !== 'string') {\n            return;\n        }\n        var scopes;\n        if (this.defaultScopes) {\n            scopes = this.defaultScopes;\n        }\n        else if (typeof snippet.scope === 'string') {\n            scopes = snippet.scope.split(',').map(function (s) { return s.trim(); }).filter(function (s) { return !strings_1.isFalsyOrWhitespace(s); });\n        }\n        else {\n            scopes = [];\n        }\n        var source;\n        if (this._extension) {\n            // extension snippet -> show the name of the extension\n            source = this._extension.displayName || this._extension.name;\n        }\n        else if (this.source === SnippetSource.Workspace) {\n            // workspace -> only *.code-snippets files\n            source = nls_1.localize('source.workspaceSnippetGlobal', \"Workspace Snippet\");\n        }\n        else {\n            // user -> global (*.code-snippets) and language snippets\n            if (this.isGlobalSnippets) {\n                source = nls_1.localize('source.userSnippetGlobal', \"Global User Snippet\");\n            }\n            else {\n                source = nls_1.localize('source.userSnippet', \"User Snippet\");\n            }\n        }\n        var prefixes = Array.isArray(prefix) ? prefix : [prefix];\n        prefixes.forEach(function (p) {\n            bucket.push(new Snippet(scopes, name, p, description, body, source, _this.source));\n        });\n    };\n    return SnippetFile;\n}());\nexports.SnippetFile = SnippetFile;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsFile.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippetsFile.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { parse as jsonParse } from 'vs/base/common/json';\nimport { forEach } from 'vs/base/common/collections';\nimport { localize } from 'vs/nls';\nimport { extname, basename } from 'vs/base/common/path';\nimport { SnippetParser, Variable, Placeholder, Text } from 'vs/editor/contrib/snippet/snippetParser';\nimport { KnownSnippetVariableNames } from 'vs/editor/contrib/snippet/snippetVariables';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport class Snippet {\n\n\tprivate _codeSnippet: string;\n\tprivate _isBogous: boolean;\n\n\treadonly prefixLow: string;\n\n\tconstructor(\n\t\treadonly scopes: string[],\n\t\treadonly name: string,\n\t\treadonly prefix: string,\n\t\treadonly description: string,\n\t\treadonly body: string,\n\t\treadonly source: string,\n\t\treadonly snippetSource: SnippetSource,\n\t) {\n\t\t//\n\t\tthis.prefixLow = prefix ? prefix.toLowerCase() : prefix;\n\t}\n\n\tget codeSnippet(): string {\n\t\tthis._ensureCodeSnippet();\n\t\treturn this._codeSnippet;\n\t}\n\n\tget isBogous(): boolean {\n\t\tthis._ensureCodeSnippet();\n\t\treturn this._isBogous;\n\t}\n\n\tprivate _ensureCodeSnippet() {\n\t\tif (!this._codeSnippet) {\n\t\t\tconst rewrite = Snippet._rewriteBogousVariables(this.body);\n\t\t\tif (typeof rewrite === 'string') {\n\t\t\t\tthis._codeSnippet = rewrite;\n\t\t\t\tthis._isBogous = true;\n\t\t\t} else {\n\t\t\t\tthis._codeSnippet = this.body;\n\t\t\t\tthis._isBogous = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic compare(a: Snippet, b: Snippet): number {\n\t\tif (a.snippetSource < b.snippetSource) {\n\t\t\treturn -1;\n\t\t} else if (a.snippetSource > b.snippetSource) {\n\t\t\treturn 1;\n\t\t} else if (a.name > b.name) {\n\t\t\treturn 1;\n\t\t} else if (a.name < b.name) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic _rewriteBogousVariables(template: string): false | string {\n\t\tconst textmateSnippet = new SnippetParser().parse(template, false);\n\n\t\tlet placeholders = new Map<string, number>();\n\t\tlet placeholderMax = 0;\n\t\tfor (const placeholder of textmateSnippet.placeholders) {\n\t\t\tplaceholderMax = Math.max(placeholderMax, placeholder.index);\n\t\t}\n\n\t\tlet didChange = false;\n\t\tlet stack = [...textmateSnippet.children];\n\n\t\twhile (stack.length > 0) {\n\t\t\tconst marker = stack.shift()!;\n\n\t\t\tif (\n\t\t\t\tmarker instanceof Variable\n\t\t\t\t&& marker.children.length === 0\n\t\t\t\t&& !KnownSnippetVariableNames[marker.name]\n\t\t\t) {\n\t\t\t\t// a 'variable' without a default value and not being one of our supported\n\t\t\t\t// variables is automatically turned into a placeholder. This is to restore\n\t\t\t\t// a bug we had before. So `${foo}` becomes `${N:foo}`\n\t\t\t\tconst index = placeholders.has(marker.name) ? placeholders.get(marker.name)! : ++placeholderMax;\n\t\t\t\tplaceholders.set(marker.name, index);\n\n\t\t\t\tconst synthetic = new Placeholder(index).appendChild(new Text(marker.name));\n\t\t\t\ttextmateSnippet.replace(marker, [synthetic]);\n\t\t\t\tdidChange = true;\n\n\t\t\t} else {\n\t\t\t\t// recurse\n\t\t\t\tstack.push(...marker.children);\n\t\t\t}\n\t\t}\n\n\t\tif (!didChange) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn textmateSnippet.toTextmateString();\n\t\t}\n\t}\n}\n\n\ninterface JsonSerializedSnippet {\n\tbody: string;\n\tscope: string;\n\tprefix: string | string[];\n\tdescription: string;\n}\n\nfunction isJsonSerializedSnippet(thing: any): thing is JsonSerializedSnippet {\n\treturn Boolean((<JsonSerializedSnippet>thing).body) && Boolean((<JsonSerializedSnippet>thing).prefix);\n}\n\ninterface JsonSerializedSnippets {\n\t[name: string]: JsonSerializedSnippet | { [name: string]: JsonSerializedSnippet };\n}\n\nexport const enum SnippetSource {\n\tUser = 1,\n\tWorkspace = 2,\n\tExtension = 3,\n}\n\nexport class SnippetFile {\n\n\treadonly data: Snippet[] = [];\n\treadonly isGlobalSnippets: boolean;\n\treadonly isUserSnippets: boolean;\n\n\tprivate _loadPromise?: Promise<this>;\n\n\tconstructor(\n\t\treadonly source: SnippetSource,\n\t\treadonly location: URI,\n\t\tpublic defaultScopes: string[] | undefined,\n\t\tprivate readonly _extension: IExtensionDescription | undefined,\n\t\tprivate readonly _fileService: IFileService\n\t) {\n\t\tthis.isGlobalSnippets = extname(location.path) === '.code-snippets';\n\t\tthis.isUserSnippets = !this._extension;\n\t}\n\n\tselect(selector: string, bucket: Snippet[]): void {\n\t\tif (this.isGlobalSnippets || !this.isUserSnippets) {\n\t\t\tthis._scopeSelect(selector, bucket);\n\t\t} else {\n\t\t\tthis._filepathSelect(selector, bucket);\n\t\t}\n\t}\n\n\tprivate _filepathSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `fooLang.json` files all snippets are accepted\n\t\tif (selector + '.json' === basename(this.location.path)) {\n\t\t\tbucket.push(...this.data);\n\t\t}\n\t}\n\n\tprivate _scopeSelect(selector: string, bucket: Snippet[]): void {\n\t\t// for `my.code-snippets` files we need to look at each snippet\n\t\tfor (const snippet of this.data) {\n\t\t\tconst len = snippet.scopes.length;\n\t\t\tif (len === 0) {\n\t\t\t\t// always accept\n\t\t\t\tbucket.push(snippet);\n\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\t\t// match\n\t\t\t\t\tif (snippet.scopes[i] === selector) {\n\t\t\t\t\t\tbucket.push(snippet);\n\t\t\t\t\t\tbreak; // match only once!\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet idx = selector.lastIndexOf('.');\n\t\tif (idx >= 0) {\n\t\t\tthis._scopeSelect(selector.substring(0, idx), bucket);\n\t\t}\n\t}\n\n\tload(): Promise<this> {\n\t\tif (!this._loadPromise) {\n\t\t\tthis._loadPromise = Promise.resolve(this._fileService.resolveContent(this.location, { encoding: 'utf8' })).then(content => {\n\t\t\t\tconst data = <JsonSerializedSnippets>jsonParse(content.value.toString());\n\t\t\t\tif (typeof data === 'object') {\n\t\t\t\t\tforEach(data, entry => {\n\t\t\t\t\t\tconst { key: name, value: scopeOrTemplate } = entry;\n\t\t\t\t\t\tif (isJsonSerializedSnippet(scopeOrTemplate)) {\n\t\t\t\t\t\t\tthis._parseSnippet(name, scopeOrTemplate, this.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tforEach(scopeOrTemplate, entry => {\n\t\t\t\t\t\t\t\tconst { key: name, value: template } = entry;\n\t\t\t\t\t\t\t\tthis._parseSnippet(name, template, this.data);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t});\n\t\t}\n\t\treturn this._loadPromise;\n\t}\n\n\treset(): void {\n\t\tthis._loadPromise = undefined;\n\t\tthis.data.length = 0;\n\t}\n\n\tprivate _parseSnippet(name: string, snippet: JsonSerializedSnippet, bucket: Snippet[]): void {\n\n\t\tlet { prefix, body, description } = snippet;\n\n\t\tif (Array.isArray(body)) {\n\t\t\tbody = body.join('\\n');\n\t\t}\n\n\t\tif (Array.isArray(description)) {\n\t\t\tdescription = description.join('\\n');\n\t\t}\n\n\t\tif ((typeof prefix !== 'string' && !Array.isArray(prefix)) || typeof body !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tlet scopes: string[];\n\t\tif (this.defaultScopes) {\n\t\t\tscopes = this.defaultScopes;\n\t\t} else if (typeof snippet.scope === 'string') {\n\t\t\tscopes = snippet.scope.split(',').map(s => s.trim()).filter(s => !isFalsyOrWhitespace(s));\n\t\t} else {\n\t\t\tscopes = [];\n\t\t}\n\n\t\tlet source: string;\n\t\tif (this._extension) {\n\t\t\t// extension snippet -> show the name of the extension\n\t\t\tsource = this._extension.displayName || this._extension.name;\n\n\t\t} else if (this.source === SnippetSource.Workspace) {\n\t\t\t// workspace -> only *.code-snippets files\n\t\t\tsource = localize('source.workspaceSnippetGlobal', \"Workspace Snippet\");\n\t\t} else {\n\t\t\t// user -> global (*.code-snippets) and language snippets\n\t\t\tif (this.isGlobalSnippets) {\n\t\t\t\tsource = localize('source.userSnippetGlobal', \"Global User Snippet\");\n\t\t\t} else {\n\t\t\t\tsource = localize('source.userSnippet', \"User Snippet\");\n\t\t\t}\n\t\t}\n\n\t\tlet prefixes = Array.isArray(prefix) ? prefix : [prefix];\n\t\tprefixes.forEach(p => {\n\t\t\tbucket.push(new Snippet(\n\t\t\t\tscopes,\n\t\t\t\tname,\n\t\t\t\tp,\n\t\t\t\tdescription,\n\t\t\t\tbody,\n\t\t\t\tsource,\n\t\t\t\tthis.source\n\t\t\t));\n\t\t});\n\t}\n}\n"]}]}