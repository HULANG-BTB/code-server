{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorControl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorControl.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar editor_2 = require(\"vs/workbench/browser/parts/editor/editor\");\nvar event_1 = require(\"vs/base/common/event\");\nvar types_1 = require(\"vs/base/common/types\");\nvar EditorControl = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorControl, _super);\n    function EditorControl(parent, groupView, layoutService, instantiationService, progressService) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.groupView = groupView;\n        _this.layoutService = layoutService;\n        _this.instantiationService = instantiationService;\n        _this._onDidFocus = _this._register(new event_1.Emitter());\n        _this._onDidSizeConstraintsChange = _this._register(new event_1.Emitter());\n        _this.controls = [];\n        _this.activeControlDisposeables = [];\n        _this.editorOperation = _this._register(new progress_1.LongRunningOperation(progressService));\n        return _this;\n    }\n    Object.defineProperty(EditorControl.prototype, \"minimumWidth\", {\n        get: function () { return this._activeControl ? this._activeControl.minimumWidth : editor_2.DEFAULT_EDITOR_MIN_DIMENSIONS.width; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"minimumHeight\", {\n        get: function () { return this._activeControl ? this._activeControl.minimumHeight : editor_2.DEFAULT_EDITOR_MIN_DIMENSIONS.height; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"maximumWidth\", {\n        get: function () { return this._activeControl ? this._activeControl.maximumWidth : editor_2.DEFAULT_EDITOR_MAX_DIMENSIONS.width; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"maximumHeight\", {\n        get: function () { return this._activeControl ? this._activeControl.maximumHeight : editor_2.DEFAULT_EDITOR_MAX_DIMENSIONS.height; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"onDidFocus\", {\n        get: function () { return this._onDidFocus.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"onDidSizeConstraintsChange\", {\n        get: function () { return this._onDidSizeConstraintsChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorControl.prototype, \"activeControl\", {\n        get: function () {\n            return this._activeControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorControl.prototype.openEditor = function (editor, options) {\n        // Editor control\n        var descriptor = platform_1.Registry.as(editor_1.Extensions.Editors).getEditor(editor);\n        if (!descriptor) {\n            throw new Error('No editor descriptor found');\n        }\n        var control = this.doShowEditorControl(descriptor);\n        // Set input\n        return this.doSetInput(control, editor, types_1.withUndefinedAsNull(options)).then((function (editorChanged) { return ({ control: control, editorChanged: editorChanged }); }));\n    };\n    EditorControl.prototype.doShowEditorControl = function (descriptor) {\n        // Return early if the currently active editor control can handle the input\n        if (this._activeControl && descriptor.describes(this._activeControl)) {\n            return this._activeControl;\n        }\n        // Hide active one first\n        this.doHideActiveEditorControl();\n        // Create editor\n        var control = this.doCreateEditorControl(descriptor);\n        // Set editor as active\n        this.doSetActiveControl(control);\n        // Show editor\n        this.parent.appendChild(control.getContainer());\n        dom_1.show(control.getContainer());\n        // Indicate to editor that it is now visible\n        control.setVisible(true, this.groupView);\n        // Layout\n        if (this.dimension) {\n            control.layout(this.dimension);\n        }\n        return control;\n    };\n    EditorControl.prototype.doCreateEditorControl = function (descriptor) {\n        // Instantiate editor\n        var control = this.doInstantiateEditorControl(descriptor);\n        // Create editor container as needed\n        if (!control.getContainer()) {\n            var controlInstanceContainer = document.createElement('div');\n            dom_1.addClass(controlInstanceContainer, 'editor-instance');\n            controlInstanceContainer.id = descriptor.getId();\n            control.create(controlInstanceContainer);\n        }\n        return control;\n    };\n    EditorControl.prototype.doInstantiateEditorControl = function (descriptor) {\n        // Return early if already instantiated\n        var existingControl = this.controls.filter(function (control) { return descriptor.describes(control); })[0];\n        if (existingControl) {\n            return existingControl;\n        }\n        // Otherwise instantiate new\n        var control = this._register(descriptor.instantiate(this.instantiationService));\n        this.controls.push(control);\n        return control;\n    };\n    EditorControl.prototype.doSetActiveControl = function (control) {\n        var _this = this;\n        this._activeControl = control;\n        // Clear out previous active control listeners\n        this.activeControlDisposeables = lifecycle_1.dispose(this.activeControlDisposeables);\n        // Listen to control changes\n        if (control) {\n            this.activeControlDisposeables.push(control.onDidSizeConstraintsChange(function (e) { return _this._onDidSizeConstraintsChange.fire(e); }));\n            this.activeControlDisposeables.push(control.onDidFocus(function () { return _this._onDidFocus.fire(); }));\n        }\n        // Indicate that size constraints could have changed due to new editor\n        this._onDidSizeConstraintsChange.fire(undefined);\n    };\n    EditorControl.prototype.doSetInput = function (control, editor, options) {\n        // If the input did not change, return early and only apply the options\n        // unless the options instruct us to force open it even if it is the same\n        var forceReload = options && options.forceReload;\n        var inputMatches = control.input && control.input.matches(editor);\n        if (inputMatches && !forceReload) {\n            // Forward options\n            control.setOptions(options);\n            // Still focus as needed\n            var focus = !options || !options.preserveFocus;\n            if (focus) {\n                control.focus();\n            }\n            return Promise.resolve(false);\n        }\n        // Show progress while setting input after a certain timeout. If the workbench is opening\n        // be more relaxed about progress showing by increasing the delay a little bit to reduce flicker.\n        var operation = this.editorOperation.start(this.layoutService.isRestored() ? 800 : 3200);\n        // Call into editor control\n        var editorWillChange = !inputMatches;\n        return control.setInput(editor, options, operation.token).then(function () {\n            // Focus (unless prevented or another operation is running)\n            if (operation.isCurrent()) {\n                var focus = !options || !options.preserveFocus;\n                if (focus) {\n                    control.focus();\n                }\n            }\n            // Operation done\n            operation.stop();\n            return editorWillChange;\n        }, function (e) {\n            // Operation done\n            operation.stop();\n            return Promise.reject(e);\n        });\n    };\n    EditorControl.prototype.doHideActiveEditorControl = function () {\n        if (!this._activeControl) {\n            return;\n        }\n        // Stop any running operation\n        this.editorOperation.stop();\n        // Remove control from parent and hide\n        var controlInstanceContainer = this._activeControl.getContainer();\n        this.parent.removeChild(controlInstanceContainer);\n        dom_1.hide(controlInstanceContainer);\n        // Indicate to editor control\n        this._activeControl.clearInput();\n        this._activeControl.setVisible(false, this.groupView);\n        // Clear active control\n        this.doSetActiveControl(null);\n    };\n    EditorControl.prototype.closeEditor = function (editor) {\n        if (this._activeControl && editor.matches(this._activeControl.input)) {\n            this.doHideActiveEditorControl();\n        }\n    };\n    EditorControl.prototype.layout = function (dimension) {\n        this.dimension = dimension;\n        if (this._activeControl && this.dimension) {\n            this._activeControl.layout(this.dimension);\n        }\n    };\n    EditorControl.prototype.dispose = function () {\n        this.activeControlDisposeables = lifecycle_1.dispose(this.activeControlDisposeables);\n        _super.prototype.dispose.call(this);\n    };\n    EditorControl = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, progress_1.IProgressService)\n    ], EditorControl);\n    return EditorControl;\n}(lifecycle_1.Disposable));\nexports.EditorControl = EditorControl;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorControl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorControl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dispose, Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { EditorInput, EditorOptions } from 'vs/workbench/common/editor';\nimport { Dimension, show, hide, addClass } from 'vs/base/browser/dom';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEditorRegistry, Extensions as EditorExtensions, IEditorDescriptor } from 'vs/workbench/browser/editor';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressService, LongRunningOperation } from 'vs/platform/progress/common/progress';\nimport { IEditorGroupView, DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS } from 'vs/workbench/browser/parts/editor/editor';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IVisibleEditor } from 'vs/workbench/services/editor/common/editorService';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\n\nexport interface IOpenEditorResult {\n\treadonly control: BaseEditor;\n\treadonly editorChanged: boolean;\n}\n\nexport class EditorControl extends Disposable {\n\n\tget minimumWidth() { return this._activeControl ? this._activeControl.minimumWidth : DEFAULT_EDITOR_MIN_DIMENSIONS.width; }\n\tget minimumHeight() { return this._activeControl ? this._activeControl.minimumHeight : DEFAULT_EDITOR_MIN_DIMENSIONS.height; }\n\tget maximumWidth() { return this._activeControl ? this._activeControl.maximumWidth : DEFAULT_EDITOR_MAX_DIMENSIONS.width; }\n\tget maximumHeight() { return this._activeControl ? this._activeControl.maximumHeight : DEFAULT_EDITOR_MAX_DIMENSIONS.height; }\n\n\tprivate readonly _onDidFocus: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidFocus(): Event<void> { return this._onDidFocus.event; }\n\n\tprivate _onDidSizeConstraintsChange = this._register(new Emitter<{ width: number; height: number; } | undefined>());\n\tget onDidSizeConstraintsChange(): Event<{ width: number; height: number; } | undefined> { return this._onDidSizeConstraintsChange.event; }\n\n\tprivate _activeControl: BaseEditor | null;\n\tprivate controls: BaseEditor[] = [];\n\n\tprivate activeControlDisposeables: IDisposable[] = [];\n\tprivate dimension: Dimension;\n\tprivate editorOperation: LongRunningOperation;\n\n\tconstructor(\n\t\tprivate parent: HTMLElement,\n\t\tprivate groupView: IEditorGroupView,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IProgressService progressService: IProgressService\n\t) {\n\t\tsuper();\n\n\t\tthis.editorOperation = this._register(new LongRunningOperation(progressService));\n\t}\n\n\tget activeControl(): IVisibleEditor | null {\n\t\treturn this._activeControl as IVisibleEditor | null;\n\t}\n\n\topenEditor(editor: EditorInput, options?: EditorOptions): Promise<IOpenEditorResult> {\n\n\t\t// Editor control\n\t\tconst descriptor = Registry.as<IEditorRegistry>(EditorExtensions.Editors).getEditor(editor);\n\t\tif (!descriptor) {\n\t\t\tthrow new Error('No editor descriptor found');\n\t\t}\n\t\tconst control = this.doShowEditorControl(descriptor);\n\n\t\t// Set input\n\t\treturn this.doSetInput(control, editor, withUndefinedAsNull(options)).then((editorChanged => (({ control, editorChanged } as IOpenEditorResult))));\n\t}\n\n\tprivate doShowEditorControl(descriptor: IEditorDescriptor): BaseEditor {\n\n\t\t// Return early if the currently active editor control can handle the input\n\t\tif (this._activeControl && descriptor.describes(this._activeControl)) {\n\t\t\treturn this._activeControl;\n\t\t}\n\n\t\t// Hide active one first\n\t\tthis.doHideActiveEditorControl();\n\n\t\t// Create editor\n\t\tconst control = this.doCreateEditorControl(descriptor);\n\n\t\t// Set editor as active\n\t\tthis.doSetActiveControl(control);\n\n\t\t// Show editor\n\t\tthis.parent.appendChild(control.getContainer());\n\t\tshow(control.getContainer());\n\n\t\t// Indicate to editor that it is now visible\n\t\tcontrol.setVisible(true, this.groupView);\n\n\t\t// Layout\n\t\tif (this.dimension) {\n\t\t\tcontrol.layout(this.dimension);\n\t\t}\n\n\t\treturn control;\n\t}\n\n\tprivate doCreateEditorControl(descriptor: IEditorDescriptor): BaseEditor {\n\n\t\t// Instantiate editor\n\t\tconst control = this.doInstantiateEditorControl(descriptor);\n\n\t\t// Create editor container as needed\n\t\tif (!control.getContainer()) {\n\t\t\tconst controlInstanceContainer = document.createElement('div');\n\t\t\taddClass(controlInstanceContainer, 'editor-instance');\n\t\t\tcontrolInstanceContainer.id = descriptor.getId();\n\n\t\t\tcontrol.create(controlInstanceContainer);\n\t\t}\n\n\t\treturn control;\n\t}\n\n\tprivate doInstantiateEditorControl(descriptor: IEditorDescriptor): BaseEditor {\n\n\t\t// Return early if already instantiated\n\t\tconst existingControl = this.controls.filter(control => descriptor.describes(control))[0];\n\t\tif (existingControl) {\n\t\t\treturn existingControl;\n\t\t}\n\n\t\t// Otherwise instantiate new\n\t\tconst control = this._register(descriptor.instantiate(this.instantiationService));\n\t\tthis.controls.push(control);\n\n\t\treturn control;\n\t}\n\n\tprivate doSetActiveControl(control: BaseEditor | null) {\n\t\tthis._activeControl = control;\n\n\t\t// Clear out previous active control listeners\n\t\tthis.activeControlDisposeables = dispose(this.activeControlDisposeables);\n\n\t\t// Listen to control changes\n\t\tif (control) {\n\t\t\tthis.activeControlDisposeables.push(control.onDidSizeConstraintsChange(e => this._onDidSizeConstraintsChange.fire(e)));\n\t\t\tthis.activeControlDisposeables.push(control.onDidFocus(() => this._onDidFocus.fire()));\n\t\t}\n\n\t\t// Indicate that size constraints could have changed due to new editor\n\t\tthis._onDidSizeConstraintsChange.fire(undefined);\n\t}\n\n\tprivate doSetInput(control: BaseEditor, editor: EditorInput, options: EditorOptions | null): Promise<boolean> {\n\n\t\t// If the input did not change, return early and only apply the options\n\t\t// unless the options instruct us to force open it even if it is the same\n\t\tconst forceReload = options && options.forceReload;\n\t\tconst inputMatches = control.input && control.input.matches(editor);\n\t\tif (inputMatches && !forceReload) {\n\n\t\t\t// Forward options\n\t\t\tcontrol.setOptions(options);\n\n\t\t\t// Still focus as needed\n\t\t\tconst focus = !options || !options.preserveFocus;\n\t\t\tif (focus) {\n\t\t\t\tcontrol.focus();\n\t\t\t}\n\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\t// Show progress while setting input after a certain timeout. If the workbench is opening\n\t\t// be more relaxed about progress showing by increasing the delay a little bit to reduce flicker.\n\t\tconst operation = this.editorOperation.start(this.layoutService.isRestored() ? 800 : 3200);\n\n\t\t// Call into editor control\n\t\tconst editorWillChange = !inputMatches;\n\t\treturn control.setInput(editor, options, operation.token).then(() => {\n\n\t\t\t// Focus (unless prevented or another operation is running)\n\t\t\tif (operation.isCurrent()) {\n\t\t\t\tconst focus = !options || !options.preserveFocus;\n\t\t\t\tif (focus) {\n\t\t\t\t\tcontrol.focus();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Operation done\n\t\t\toperation.stop();\n\n\t\t\treturn editorWillChange;\n\t\t}, e => {\n\n\t\t\t// Operation done\n\t\t\toperation.stop();\n\n\t\t\treturn Promise.reject(e);\n\t\t});\n\t}\n\n\tprivate doHideActiveEditorControl(): void {\n\t\tif (!this._activeControl) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Stop any running operation\n\t\tthis.editorOperation.stop();\n\n\t\t// Remove control from parent and hide\n\t\tconst controlInstanceContainer = this._activeControl.getContainer();\n\t\tthis.parent.removeChild(controlInstanceContainer);\n\t\thide(controlInstanceContainer);\n\n\t\t// Indicate to editor control\n\t\tthis._activeControl.clearInput();\n\t\tthis._activeControl.setVisible(false, this.groupView);\n\n\t\t// Clear active control\n\t\tthis.doSetActiveControl(null);\n\t}\n\n\tcloseEditor(editor: EditorInput): void {\n\t\tif (this._activeControl && editor.matches(this._activeControl.input)) {\n\t\t\tthis.doHideActiveEditorControl();\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.dimension = dimension;\n\n\t\tif (this._activeControl && this.dimension) {\n\t\t\tthis._activeControl.layout(this.dimension);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.activeControlDisposeables = dispose(this.activeControlDisposeables);\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}