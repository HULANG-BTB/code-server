{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/config/editorOptions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/config/editorOptions.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/browser\", \"vs/base/common/arrays\", \"vs/base/common/objects\", \"vs/base/common/platform\", \"vs/base/common/scrollable\", \"vs/editor/common/core/uint\", \"vs/editor/common/model/wordHelper\", \"vs/nls\", \"vs/platform/accessibility/common/accessibility\", \"vs/base/common/types\"], function (require, exports, browser, arrays, objects, platform, scrollable_1, uint_1, wordHelper_1, nls, accessibility_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var RenderMinimap;\n    (function (RenderMinimap) {\n        RenderMinimap[RenderMinimap[\"None\"] = 0] = \"None\";\n        RenderMinimap[RenderMinimap[\"Small\"] = 1] = \"Small\";\n        RenderMinimap[RenderMinimap[\"Large\"] = 2] = \"Large\";\n        RenderMinimap[RenderMinimap[\"SmallBlocks\"] = 3] = \"SmallBlocks\";\n        RenderMinimap[RenderMinimap[\"LargeBlocks\"] = 4] = \"LargeBlocks\";\n    })(RenderMinimap = exports.RenderMinimap || (exports.RenderMinimap = {}));\n    /**\n     * Describes how to indent wrapped lines.\n     */\n    var WrappingIndent;\n    (function (WrappingIndent) {\n        /**\n         * No indentation => wrapped lines begin at column 1.\n         */\n        WrappingIndent[WrappingIndent[\"None\"] = 0] = \"None\";\n        /**\n         * Same => wrapped lines get the same indentation as the parent.\n         */\n        WrappingIndent[WrappingIndent[\"Same\"] = 1] = \"Same\";\n        /**\n         * Indent => wrapped lines get +1 indentation toward the parent.\n         */\n        WrappingIndent[WrappingIndent[\"Indent\"] = 2] = \"Indent\";\n        /**\n         * DeepIndent => wrapped lines get +2 indentation toward the parent.\n         */\n        WrappingIndent[WrappingIndent[\"DeepIndent\"] = 3] = \"DeepIndent\";\n    })(WrappingIndent = exports.WrappingIndent || (exports.WrappingIndent = {}));\n    /**\n     * The kind of animation in which the editor's cursor should be rendered.\n     */\n    var TextEditorCursorBlinkingStyle;\n    (function (TextEditorCursorBlinkingStyle) {\n        /**\n         * Hidden\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Hidden\"] = 0] = \"Hidden\";\n        /**\n         * Blinking\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Blink\"] = 1] = \"Blink\";\n        /**\n         * Blinking with smooth fading\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Smooth\"] = 2] = \"Smooth\";\n        /**\n         * Blinking with prolonged filled state and smooth fading\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Phase\"] = 3] = \"Phase\";\n        /**\n         * Expand collapse animation on the y axis\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Expand\"] = 4] = \"Expand\";\n        /**\n         * No-Blinking\n         */\n        TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle[\"Solid\"] = 5] = \"Solid\";\n    })(TextEditorCursorBlinkingStyle = exports.TextEditorCursorBlinkingStyle || (exports.TextEditorCursorBlinkingStyle = {}));\n    /**\n     * @internal\n     */\n    function blinkingStyleToString(blinkingStyle) {\n        if (blinkingStyle === TextEditorCursorBlinkingStyle.Blink) {\n            return 'blink';\n        }\n        else if (blinkingStyle === TextEditorCursorBlinkingStyle.Expand) {\n            return 'expand';\n        }\n        else if (blinkingStyle === TextEditorCursorBlinkingStyle.Phase) {\n            return 'phase';\n        }\n        else if (blinkingStyle === TextEditorCursorBlinkingStyle.Smooth) {\n            return 'smooth';\n        }\n        else if (blinkingStyle === TextEditorCursorBlinkingStyle.Solid) {\n            return 'solid';\n        }\n        else {\n            throw new Error('blinkingStyleToString: Unknown blinkingStyle');\n        }\n    }\n    exports.blinkingStyleToString = blinkingStyleToString;\n    /**\n     * The style in which the editor's cursor should be rendered.\n     */\n    var TextEditorCursorStyle;\n    (function (TextEditorCursorStyle) {\n        /**\n         * As a vertical line (sitting between two characters).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n        /**\n         * As a block (sitting on top of a character).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n        /**\n         * As a horizontal line (sitting under a character).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n        /**\n         * As a thin vertical line (sitting between two characters).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n        /**\n         * As an outlined block (sitting on top of a character).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n        /**\n         * As a thin horizontal line (sitting under a character).\n         */\n        TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n    })(TextEditorCursorStyle = exports.TextEditorCursorStyle || (exports.TextEditorCursorStyle = {}));\n    /**\n     * @internal\n     */\n    function cursorStyleToString(cursorStyle) {\n        if (cursorStyle === TextEditorCursorStyle.Line) {\n            return 'line';\n        }\n        else if (cursorStyle === TextEditorCursorStyle.Block) {\n            return 'block';\n        }\n        else if (cursorStyle === TextEditorCursorStyle.Underline) {\n            return 'underline';\n        }\n        else if (cursorStyle === TextEditorCursorStyle.LineThin) {\n            return 'line-thin';\n        }\n        else if (cursorStyle === TextEditorCursorStyle.BlockOutline) {\n            return 'block-outline';\n        }\n        else if (cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n            return 'underline-thin';\n        }\n        else {\n            throw new Error('cursorStyleToString: Unknown cursorStyle');\n        }\n    }\n    exports.cursorStyleToString = cursorStyleToString;\n    function _cursorStyleFromString(cursorStyle, defaultValue) {\n        if (typeof cursorStyle !== 'string') {\n            return defaultValue;\n        }\n        if (cursorStyle === 'line') {\n            return TextEditorCursorStyle.Line;\n        }\n        else if (cursorStyle === 'block') {\n            return TextEditorCursorStyle.Block;\n        }\n        else if (cursorStyle === 'underline') {\n            return TextEditorCursorStyle.Underline;\n        }\n        else if (cursorStyle === 'line-thin') {\n            return TextEditorCursorStyle.LineThin;\n        }\n        else if (cursorStyle === 'block-outline') {\n            return TextEditorCursorStyle.BlockOutline;\n        }\n        else if (cursorStyle === 'underline-thin') {\n            return TextEditorCursorStyle.UnderlineThin;\n        }\n        return TextEditorCursorStyle.Line;\n    }\n    var RenderLineNumbersType;\n    (function (RenderLineNumbersType) {\n        RenderLineNumbersType[RenderLineNumbersType[\"Off\"] = 0] = \"Off\";\n        RenderLineNumbersType[RenderLineNumbersType[\"On\"] = 1] = \"On\";\n        RenderLineNumbersType[RenderLineNumbersType[\"Relative\"] = 2] = \"Relative\";\n        RenderLineNumbersType[RenderLineNumbersType[\"Interval\"] = 3] = \"Interval\";\n        RenderLineNumbersType[RenderLineNumbersType[\"Custom\"] = 4] = \"Custom\";\n    })(RenderLineNumbersType = exports.RenderLineNumbersType || (exports.RenderLineNumbersType = {}));\n    /**\n     * Internal configuration options (transformed or computed) for the editor.\n     */\n    class InternalEditorOptions {\n        /**\n         * @internal\n         */\n        constructor(source) {\n            this.canUseLayerHinting = source.canUseLayerHinting;\n            this.pixelRatio = source.pixelRatio;\n            this.editorClassName = source.editorClassName;\n            this.lineHeight = source.lineHeight | 0;\n            this.readOnly = source.readOnly;\n            this.accessibilitySupport = source.accessibilitySupport;\n            this.multiCursorModifier = source.multiCursorModifier;\n            this.multiCursorMergeOverlapping = source.multiCursorMergeOverlapping;\n            this.wordSeparators = source.wordSeparators;\n            this.autoClosingBrackets = source.autoClosingBrackets;\n            this.autoClosingQuotes = source.autoClosingQuotes;\n            this.autoSurround = source.autoSurround;\n            this.autoIndent = source.autoIndent;\n            this.useTabStops = source.useTabStops;\n            this.tabFocusMode = source.tabFocusMode;\n            this.dragAndDrop = source.dragAndDrop;\n            this.emptySelectionClipboard = source.emptySelectionClipboard;\n            this.copyWithSyntaxHighlighting = source.copyWithSyntaxHighlighting;\n            this.layoutInfo = source.layoutInfo;\n            this.fontInfo = source.fontInfo;\n            this.viewInfo = source.viewInfo;\n            this.wrappingInfo = source.wrappingInfo;\n            this.contribInfo = source.contribInfo;\n            this.showUnused = source.showUnused;\n        }\n        /**\n         * @internal\n         */\n        equals(other) {\n            return (this.canUseLayerHinting === other.canUseLayerHinting\n                && this.pixelRatio === other.pixelRatio\n                && this.editorClassName === other.editorClassName\n                && this.lineHeight === other.lineHeight\n                && this.readOnly === other.readOnly\n                && this.accessibilitySupport === other.accessibilitySupport\n                && this.multiCursorModifier === other.multiCursorModifier\n                && this.multiCursorMergeOverlapping === other.multiCursorMergeOverlapping\n                && this.wordSeparators === other.wordSeparators\n                && this.autoClosingBrackets === other.autoClosingBrackets\n                && this.autoClosingQuotes === other.autoClosingQuotes\n                && this.autoSurround === other.autoSurround\n                && this.autoIndent === other.autoIndent\n                && this.useTabStops === other.useTabStops\n                && this.tabFocusMode === other.tabFocusMode\n                && this.dragAndDrop === other.dragAndDrop\n                && this.showUnused === other.showUnused\n                && this.emptySelectionClipboard === other.emptySelectionClipboard\n                && this.copyWithSyntaxHighlighting === other.copyWithSyntaxHighlighting\n                && InternalEditorOptions._equalsLayoutInfo(this.layoutInfo, other.layoutInfo)\n                && this.fontInfo.equals(other.fontInfo)\n                && InternalEditorOptions._equalsViewOptions(this.viewInfo, other.viewInfo)\n                && InternalEditorOptions._equalsWrappingInfo(this.wrappingInfo, other.wrappingInfo)\n                && InternalEditorOptions._equalsContribOptions(this.contribInfo, other.contribInfo));\n        }\n        /**\n         * @internal\n         */\n        createChangeEvent(newOpts) {\n            return {\n                canUseLayerHinting: (this.canUseLayerHinting !== newOpts.canUseLayerHinting),\n                pixelRatio: (this.pixelRatio !== newOpts.pixelRatio),\n                editorClassName: (this.editorClassName !== newOpts.editorClassName),\n                lineHeight: (this.lineHeight !== newOpts.lineHeight),\n                readOnly: (this.readOnly !== newOpts.readOnly),\n                accessibilitySupport: (this.accessibilitySupport !== newOpts.accessibilitySupport),\n                multiCursorModifier: (this.multiCursorModifier !== newOpts.multiCursorModifier),\n                multiCursorMergeOverlapping: (this.multiCursorMergeOverlapping !== newOpts.multiCursorMergeOverlapping),\n                wordSeparators: (this.wordSeparators !== newOpts.wordSeparators),\n                autoClosingBrackets: (this.autoClosingBrackets !== newOpts.autoClosingBrackets),\n                autoClosingQuotes: (this.autoClosingQuotes !== newOpts.autoClosingQuotes),\n                autoSurround: (this.autoSurround !== newOpts.autoSurround),\n                autoIndent: (this.autoIndent !== newOpts.autoIndent),\n                useTabStops: (this.useTabStops !== newOpts.useTabStops),\n                tabFocusMode: (this.tabFocusMode !== newOpts.tabFocusMode),\n                dragAndDrop: (this.dragAndDrop !== newOpts.dragAndDrop),\n                emptySelectionClipboard: (this.emptySelectionClipboard !== newOpts.emptySelectionClipboard),\n                copyWithSyntaxHighlighting: (this.copyWithSyntaxHighlighting !== newOpts.copyWithSyntaxHighlighting),\n                layoutInfo: (!InternalEditorOptions._equalsLayoutInfo(this.layoutInfo, newOpts.layoutInfo)),\n                fontInfo: (!this.fontInfo.equals(newOpts.fontInfo)),\n                viewInfo: (!InternalEditorOptions._equalsViewOptions(this.viewInfo, newOpts.viewInfo)),\n                wrappingInfo: (!InternalEditorOptions._equalsWrappingInfo(this.wrappingInfo, newOpts.wrappingInfo)),\n                contribInfo: (!InternalEditorOptions._equalsContribOptions(this.contribInfo, newOpts.contribInfo))\n            };\n        }\n        /**\n         * @internal\n         */\n        static _equalsLayoutInfo(a, b) {\n            return (a.width === b.width\n                && a.height === b.height\n                && a.glyphMarginLeft === b.glyphMarginLeft\n                && a.glyphMarginWidth === b.glyphMarginWidth\n                && a.glyphMarginHeight === b.glyphMarginHeight\n                && a.lineNumbersLeft === b.lineNumbersLeft\n                && a.lineNumbersWidth === b.lineNumbersWidth\n                && a.lineNumbersHeight === b.lineNumbersHeight\n                && a.decorationsLeft === b.decorationsLeft\n                && a.decorationsWidth === b.decorationsWidth\n                && a.decorationsHeight === b.decorationsHeight\n                && a.contentLeft === b.contentLeft\n                && a.contentWidth === b.contentWidth\n                && a.contentHeight === b.contentHeight\n                && a.renderMinimap === b.renderMinimap\n                && a.minimapLeft === b.minimapLeft\n                && a.minimapWidth === b.minimapWidth\n                && a.viewportColumn === b.viewportColumn\n                && a.verticalScrollbarWidth === b.verticalScrollbarWidth\n                && a.horizontalScrollbarHeight === b.horizontalScrollbarHeight\n                && this._equalsOverviewRuler(a.overviewRuler, b.overviewRuler));\n        }\n        /**\n         * @internal\n         */\n        static _equalsOverviewRuler(a, b) {\n            return (a.width === b.width\n                && a.height === b.height\n                && a.top === b.top\n                && a.right === b.right);\n        }\n        /**\n         * @internal\n         */\n        static _equalsViewOptions(a, b) {\n            return (a.extraEditorClassName === b.extraEditorClassName\n                && a.disableMonospaceOptimizations === b.disableMonospaceOptimizations\n                && arrays.equals(a.rulers, b.rulers)\n                && a.ariaLabel === b.ariaLabel\n                && a.renderLineNumbers === b.renderLineNumbers\n                && a.renderCustomLineNumbers === b.renderCustomLineNumbers\n                && a.renderFinalNewline === b.renderFinalNewline\n                && a.selectOnLineNumbers === b.selectOnLineNumbers\n                && a.glyphMargin === b.glyphMargin\n                && a.revealHorizontalRightPadding === b.revealHorizontalRightPadding\n                && a.roundedSelection === b.roundedSelection\n                && a.overviewRulerLanes === b.overviewRulerLanes\n                && a.overviewRulerBorder === b.overviewRulerBorder\n                && a.cursorBlinking === b.cursorBlinking\n                && a.mouseWheelZoom === b.mouseWheelZoom\n                && a.cursorSmoothCaretAnimation === b.cursorSmoothCaretAnimation\n                && a.cursorStyle === b.cursorStyle\n                && a.cursorWidth === b.cursorWidth\n                && a.hideCursorInOverviewRuler === b.hideCursorInOverviewRuler\n                && a.scrollBeyondLastLine === b.scrollBeyondLastLine\n                && a.scrollBeyondLastColumn === b.scrollBeyondLastColumn\n                && a.smoothScrolling === b.smoothScrolling\n                && a.stopRenderingLineAfter === b.stopRenderingLineAfter\n                && a.renderWhitespace === b.renderWhitespace\n                && a.renderControlCharacters === b.renderControlCharacters\n                && a.fontLigatures === b.fontLigatures\n                && a.renderIndentGuides === b.renderIndentGuides\n                && a.highlightActiveIndentGuide === b.highlightActiveIndentGuide\n                && a.renderLineHighlight === b.renderLineHighlight\n                && this._equalsScrollbarOptions(a.scrollbar, b.scrollbar)\n                && this._equalsMinimapOptions(a.minimap, b.minimap)\n                && a.fixedOverflowWidgets === b.fixedOverflowWidgets);\n        }\n        /**\n         * @internal\n         */\n        static _equalsScrollbarOptions(a, b) {\n            return (a.arrowSize === b.arrowSize\n                && a.vertical === b.vertical\n                && a.horizontal === b.horizontal\n                && a.useShadows === b.useShadows\n                && a.verticalHasArrows === b.verticalHasArrows\n                && a.horizontalHasArrows === b.horizontalHasArrows\n                && a.handleMouseWheel === b.handleMouseWheel\n                && a.horizontalScrollbarSize === b.horizontalScrollbarSize\n                && a.horizontalSliderSize === b.horizontalSliderSize\n                && a.verticalScrollbarSize === b.verticalScrollbarSize\n                && a.verticalSliderSize === b.verticalSliderSize\n                && a.mouseWheelScrollSensitivity === b.mouseWheelScrollSensitivity\n                && a.fastScrollSensitivity === b.fastScrollSensitivity);\n        }\n        /**\n         * @internal\n         */\n        static _equalsMinimapOptions(a, b) {\n            return (a.enabled === b.enabled\n                && a.side === b.side\n                && a.showSlider === b.showSlider\n                && a.renderCharacters === b.renderCharacters\n                && a.maxColumn === b.maxColumn);\n        }\n        /**\n         * @internal\n         */\n        static _equalFindOptions(a, b) {\n            return (a.seedSearchStringFromSelection === b.seedSearchStringFromSelection\n                && a.autoFindInSelection === b.autoFindInSelection\n                && a.globalFindClipboard === b.globalFindClipboard\n                && a.addExtraSpaceOnTop === b.addExtraSpaceOnTop);\n        }\n        /**\n         * @internal\n         */\n        static _equalsParameterHintOptions(a, b) {\n            return (a.enabled === b.enabled\n                && a.cycle === b.cycle);\n        }\n        /**\n         * @internal\n         */\n        static _equalsHoverOptions(a, b) {\n            return (a.enabled === b.enabled\n                && a.delay === b.delay\n                && a.sticky === b.sticky);\n        }\n        /**\n         * @internal\n         */\n        static _equalsSuggestOptions(a, b) {\n            if (a === b) {\n                return true;\n            }\n            else if (!a || !b) {\n                return false;\n            }\n            else {\n                return a.filterGraceful === b.filterGraceful\n                    && a.snippets === b.snippets\n                    && a.snippetsPreventQuickSuggestions === b.snippetsPreventQuickSuggestions\n                    && a.localityBonus === b.localityBonus\n                    && a.shareSuggestSelections === b.shareSuggestSelections\n                    && a.showIcons === b.showIcons\n                    && a.maxVisibleSuggestions === b.maxVisibleSuggestions\n                    && objects.equals(a.filteredTypes, b.filteredTypes);\n            }\n        }\n        static _equalsGotoLocationOptions(a, b) {\n            if (a === b) {\n                return true;\n            }\n            else if (!a || !b) {\n                return false;\n            }\n            else {\n                return a.multiple === b.multiple;\n            }\n        }\n        /**\n         * @internal\n         */\n        static _equalsWrappingInfo(a, b) {\n            return (a.inDiffEditor === b.inDiffEditor\n                && a.isDominatedByLongLines === b.isDominatedByLongLines\n                && a.isWordWrapMinified === b.isWordWrapMinified\n                && a.isViewportWrapping === b.isViewportWrapping\n                && a.wrappingColumn === b.wrappingColumn\n                && a.wrappingIndent === b.wrappingIndent\n                && a.wordWrapBreakBeforeCharacters === b.wordWrapBreakBeforeCharacters\n                && a.wordWrapBreakAfterCharacters === b.wordWrapBreakAfterCharacters\n                && a.wordWrapBreakObtrusiveCharacters === b.wordWrapBreakObtrusiveCharacters);\n        }\n        /**\n         * @internal\n         */\n        static _equalsContribOptions(a, b) {\n            return (a.selectionClipboard === b.selectionClipboard\n                && this._equalsHoverOptions(a.hover, b.hover)\n                && a.links === b.links\n                && a.contextmenu === b.contextmenu\n                && InternalEditorOptions._equalsQuickSuggestions(a.quickSuggestions, b.quickSuggestions)\n                && a.quickSuggestionsDelay === b.quickSuggestionsDelay\n                && this._equalsParameterHintOptions(a.parameterHints, b.parameterHints)\n                && a.formatOnType === b.formatOnType\n                && a.formatOnPaste === b.formatOnPaste\n                && a.suggestOnTriggerCharacters === b.suggestOnTriggerCharacters\n                && a.acceptSuggestionOnEnter === b.acceptSuggestionOnEnter\n                && a.acceptSuggestionOnCommitCharacter === b.acceptSuggestionOnCommitCharacter\n                && a.wordBasedSuggestions === b.wordBasedSuggestions\n                && a.suggestSelection === b.suggestSelection\n                && a.suggestFontSize === b.suggestFontSize\n                && a.suggestLineHeight === b.suggestLineHeight\n                && a.tabCompletion === b.tabCompletion\n                && this._equalsSuggestOptions(a.suggest, b.suggest)\n                && InternalEditorOptions._equalsGotoLocationOptions(a.gotoLocation, b.gotoLocation)\n                && a.selectionHighlight === b.selectionHighlight\n                && a.occurrencesHighlight === b.occurrencesHighlight\n                && a.codeLens === b.codeLens\n                && a.folding === b.folding\n                && a.foldingStrategy === b.foldingStrategy\n                && a.showFoldingControls === b.showFoldingControls\n                && a.matchBrackets === b.matchBrackets\n                && this._equalFindOptions(a.find, b.find)\n                && a.colorDecorators === b.colorDecorators\n                && objects.equals(a.codeActionsOnSave, b.codeActionsOnSave)\n                && a.codeActionsOnSaveTimeout === b.codeActionsOnSaveTimeout\n                && a.lightbulbEnabled === b.lightbulbEnabled);\n        }\n        static _equalsQuickSuggestions(a, b) {\n            if (typeof a === 'boolean') {\n                if (typeof b !== 'boolean') {\n                    return false;\n                }\n                return a === b;\n            }\n            if (typeof b === 'boolean') {\n                return false;\n            }\n            return (a.comments === b.comments\n                && a.other === b.other\n                && a.strings === b.strings);\n        }\n    }\n    exports.InternalEditorOptions = InternalEditorOptions;\n    function _boolean(value, defaultValue) {\n        if (typeof value === 'undefined') {\n            return defaultValue;\n        }\n        if (value === 'false') {\n            // treat the string 'false' as false\n            return false;\n        }\n        return Boolean(value);\n    }\n    function _booleanMap(value, defaultValue) {\n        if (!value) {\n            return defaultValue;\n        }\n        const out = Object.create(null);\n        for (const k of Object.keys(value)) {\n            const v = value[k];\n            if (typeof v === 'boolean') {\n                out[k] = v;\n            }\n        }\n        return out;\n    }\n    function _string(value, defaultValue) {\n        if (typeof value !== 'string') {\n            return defaultValue;\n        }\n        return value;\n    }\n    function _stringSet(value, defaultValue, allowedValues) {\n        if (typeof value !== 'string') {\n            return defaultValue;\n        }\n        if (allowedValues.indexOf(value) === -1) {\n            return defaultValue;\n        }\n        return value;\n    }\n    function _clampedInt(value, defaultValue, minimum, maximum) {\n        let r;\n        if (typeof value === 'undefined') {\n            r = defaultValue;\n        }\n        else {\n            r = parseInt(value, 10);\n            if (isNaN(r)) {\n                r = defaultValue;\n            }\n        }\n        r = Math.max(minimum, r);\n        r = Math.min(maximum, r);\n        return r | 0;\n    }\n    function _float(value, defaultValue) {\n        let r = parseFloat(value);\n        if (isNaN(r)) {\n            r = defaultValue;\n        }\n        return r;\n    }\n    function _wrappingIndentFromString(wrappingIndent, defaultValue) {\n        if (typeof wrappingIndent !== 'string') {\n            return defaultValue;\n        }\n        if (wrappingIndent === 'same') {\n            return WrappingIndent.Same;\n        }\n        else if (wrappingIndent === 'indent') {\n            return WrappingIndent.Indent;\n        }\n        else if (wrappingIndent === 'deepIndent') {\n            return WrappingIndent.DeepIndent;\n        }\n        else {\n            return WrappingIndent.None;\n        }\n    }\n    function _cursorBlinkingStyleFromString(cursorBlinkingStyle, defaultValue) {\n        if (typeof cursorBlinkingStyle !== 'string') {\n            return defaultValue;\n        }\n        switch (cursorBlinkingStyle) {\n            case 'blink':\n                return TextEditorCursorBlinkingStyle.Blink;\n            case 'smooth':\n                return TextEditorCursorBlinkingStyle.Smooth;\n            case 'phase':\n                return TextEditorCursorBlinkingStyle.Phase;\n            case 'expand':\n                return TextEditorCursorBlinkingStyle.Expand;\n            case 'visible': // maintain compatibility\n            case 'solid':\n                return TextEditorCursorBlinkingStyle.Solid;\n        }\n        return TextEditorCursorBlinkingStyle.Blink;\n    }\n    function _scrollbarVisibilityFromString(visibility, defaultValue) {\n        if (typeof visibility !== 'string') {\n            return defaultValue;\n        }\n        switch (visibility) {\n            case 'hidden':\n                return scrollable_1.ScrollbarVisibility.Hidden;\n            case 'visible':\n                return scrollable_1.ScrollbarVisibility.Visible;\n            default:\n                return scrollable_1.ScrollbarVisibility.Auto;\n        }\n    }\n    /**\n     * @internal\n     */\n    class EditorOptionsValidator {\n        /**\n         * Validate raw editor options.\n         * i.e. since they can be defined by the user, they might be invalid.\n         */\n        static validate(opts, defaults) {\n            let wordWrap = opts.wordWrap;\n            {\n                // Compatibility with old true or false values\n                if (wordWrap === true) {\n                    wordWrap = 'on';\n                }\n                else if (wordWrap === false) {\n                    wordWrap = 'off';\n                }\n                wordWrap = _stringSet(wordWrap, defaults.wordWrap, ['off', 'on', 'wordWrapColumn', 'bounded']);\n            }\n            const viewInfo = this._sanitizeViewInfo(opts, defaults.viewInfo);\n            const contribInfo = this._sanitizeContribInfo(opts, defaults.contribInfo);\n            let configuredMulticursorModifier = undefined;\n            if (typeof opts.multiCursorModifier === 'string') {\n                if (opts.multiCursorModifier === 'ctrlCmd') {\n                    configuredMulticursorModifier = browser.isMacintosh ? 'metaKey' : 'ctrlKey';\n                }\n                else {\n                    configuredMulticursorModifier = 'altKey';\n                }\n            }\n            const multiCursorModifier = _stringSet(configuredMulticursorModifier, defaults.multiCursorModifier, ['altKey', 'metaKey', 'ctrlKey']);\n            let autoClosingBrackets;\n            let autoClosingQuotes;\n            let autoSurround;\n            if (typeof opts.autoClosingBrackets === 'boolean' && opts.autoClosingBrackets === false) {\n                // backwards compatibility: disable all on boolean false\n                autoClosingBrackets = 'never';\n                autoClosingQuotes = 'never';\n                autoSurround = 'never';\n            }\n            else {\n                autoClosingBrackets = _stringSet(opts.autoClosingBrackets, defaults.autoClosingBrackets, ['always', 'languageDefined', 'beforeWhitespace', 'never']);\n                autoClosingQuotes = _stringSet(opts.autoClosingQuotes, defaults.autoClosingQuotes, ['always', 'languageDefined', 'beforeWhitespace', 'never']);\n                autoSurround = _stringSet(opts.autoSurround, defaults.autoSurround, ['languageDefined', 'brackets', 'quotes', 'never']);\n            }\n            return {\n                inDiffEditor: _boolean(opts.inDiffEditor, defaults.inDiffEditor),\n                wordSeparators: _string(opts.wordSeparators, defaults.wordSeparators),\n                lineNumbersMinChars: _clampedInt(opts.lineNumbersMinChars, defaults.lineNumbersMinChars, 1, 10),\n                lineDecorationsWidth: (typeof opts.lineDecorationsWidth === 'undefined' ? defaults.lineDecorationsWidth : opts.lineDecorationsWidth),\n                readOnly: _boolean(opts.readOnly, defaults.readOnly),\n                mouseStyle: _stringSet(opts.mouseStyle, defaults.mouseStyle, ['text', 'default', 'copy']),\n                disableLayerHinting: _boolean(opts.disableLayerHinting, defaults.disableLayerHinting),\n                automaticLayout: _boolean(opts.automaticLayout, defaults.automaticLayout),\n                wordWrap: wordWrap,\n                wordWrapColumn: _clampedInt(opts.wordWrapColumn, defaults.wordWrapColumn, 1, uint_1.Constants.MAX_SAFE_SMALL_INTEGER),\n                wordWrapMinified: _boolean(opts.wordWrapMinified, defaults.wordWrapMinified),\n                wrappingIndent: _wrappingIndentFromString(opts.wrappingIndent, defaults.wrappingIndent),\n                wordWrapBreakBeforeCharacters: _string(opts.wordWrapBreakBeforeCharacters, defaults.wordWrapBreakBeforeCharacters),\n                wordWrapBreakAfterCharacters: _string(opts.wordWrapBreakAfterCharacters, defaults.wordWrapBreakAfterCharacters),\n                wordWrapBreakObtrusiveCharacters: _string(opts.wordWrapBreakObtrusiveCharacters, defaults.wordWrapBreakObtrusiveCharacters),\n                autoClosingBrackets,\n                autoClosingQuotes,\n                autoSurround,\n                autoIndent: _boolean(opts.autoIndent, defaults.autoIndent),\n                dragAndDrop: _boolean(opts.dragAndDrop, defaults.dragAndDrop),\n                emptySelectionClipboard: _boolean(opts.emptySelectionClipboard, defaults.emptySelectionClipboard),\n                copyWithSyntaxHighlighting: _boolean(opts.copyWithSyntaxHighlighting, defaults.copyWithSyntaxHighlighting),\n                useTabStops: _boolean(opts.useTabStops, defaults.useTabStops),\n                multiCursorModifier: multiCursorModifier,\n                multiCursorMergeOverlapping: _boolean(opts.multiCursorMergeOverlapping, defaults.multiCursorMergeOverlapping),\n                accessibilitySupport: _stringSet(opts.accessibilitySupport, defaults.accessibilitySupport, ['auto', 'on', 'off']),\n                showUnused: _boolean(opts.showUnused, defaults.showUnused),\n                viewInfo: viewInfo,\n                contribInfo: contribInfo,\n            };\n        }\n        static _sanitizeScrollbarOpts(opts, defaults, mouseWheelScrollSensitivity, fastScrollSensitivity) {\n            if (typeof opts !== 'object') {\n                return defaults;\n            }\n            const horizontalScrollbarSize = _clampedInt(opts.horizontalScrollbarSize, defaults.horizontalScrollbarSize, 0, 1000);\n            const verticalScrollbarSize = _clampedInt(opts.verticalScrollbarSize, defaults.verticalScrollbarSize, 0, 1000);\n            return {\n                vertical: _scrollbarVisibilityFromString(opts.vertical, defaults.vertical),\n                horizontal: _scrollbarVisibilityFromString(opts.horizontal, defaults.horizontal),\n                arrowSize: _clampedInt(opts.arrowSize, defaults.arrowSize, 0, 1000),\n                useShadows: _boolean(opts.useShadows, defaults.useShadows),\n                verticalHasArrows: _boolean(opts.verticalHasArrows, defaults.verticalHasArrows),\n                horizontalHasArrows: _boolean(opts.horizontalHasArrows, defaults.horizontalHasArrows),\n                horizontalScrollbarSize: horizontalScrollbarSize,\n                horizontalSliderSize: _clampedInt(opts.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\n                verticalScrollbarSize: verticalScrollbarSize,\n                verticalSliderSize: _clampedInt(opts.verticalSliderSize, verticalScrollbarSize, 0, 1000),\n                handleMouseWheel: _boolean(opts.handleMouseWheel, defaults.handleMouseWheel),\n                mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n                fastScrollSensitivity: fastScrollSensitivity,\n            };\n        }\n        static _sanitizeMinimapOpts(opts, defaults) {\n            if (typeof opts !== 'object') {\n                return defaults;\n            }\n            return {\n                enabled: _boolean(opts.enabled, defaults.enabled),\n                side: _stringSet(opts.side, defaults.side, ['right', 'left']),\n                showSlider: _stringSet(opts.showSlider, defaults.showSlider, ['always', 'mouseover']),\n                renderCharacters: _boolean(opts.renderCharacters, defaults.renderCharacters),\n                maxColumn: _clampedInt(opts.maxColumn, defaults.maxColumn, 1, 10000),\n            };\n        }\n        static _sanitizeFindOpts(opts, defaults) {\n            if (typeof opts !== 'object') {\n                return defaults;\n            }\n            return {\n                seedSearchStringFromSelection: _boolean(opts.seedSearchStringFromSelection, defaults.seedSearchStringFromSelection),\n                autoFindInSelection: _boolean(opts.autoFindInSelection, defaults.autoFindInSelection),\n                globalFindClipboard: _boolean(opts.globalFindClipboard, defaults.globalFindClipboard),\n                addExtraSpaceOnTop: _boolean(opts.addExtraSpaceOnTop, defaults.addExtraSpaceOnTop)\n            };\n        }\n        static _sanitizeParameterHintOpts(opts, defaults) {\n            if (typeof opts !== 'object') {\n                return defaults;\n            }\n            return {\n                enabled: _boolean(opts.enabled, defaults.enabled),\n                cycle: _boolean(opts.cycle, defaults.cycle)\n            };\n        }\n        static _sanitizeHoverOpts(_opts, defaults) {\n            let opts;\n            if (typeof _opts === 'boolean') {\n                opts = {\n                    enabled: _opts\n                };\n            }\n            else if (typeof _opts === 'object') {\n                opts = _opts;\n            }\n            else {\n                return defaults;\n            }\n            return {\n                enabled: _boolean(opts.enabled, defaults.enabled),\n                delay: _clampedInt(opts.delay, defaults.delay, 0, 10000),\n                sticky: _boolean(opts.sticky, defaults.sticky)\n            };\n        }\n        static _sanitizeSuggestOpts(opts, defaults) {\n            const suggestOpts = opts.suggest || {};\n            return {\n                filterGraceful: _boolean(suggestOpts.filterGraceful, defaults.filterGraceful),\n                snippets: _stringSet(opts.snippetSuggestions, defaults.snippets, ['top', 'bottom', 'inline', 'none']),\n                snippetsPreventQuickSuggestions: _boolean(suggestOpts.snippetsPreventQuickSuggestions, defaults.filterGraceful),\n                localityBonus: _boolean(suggestOpts.localityBonus, defaults.localityBonus),\n                shareSuggestSelections: _boolean(suggestOpts.shareSuggestSelections, defaults.shareSuggestSelections),\n                showIcons: _boolean(suggestOpts.showIcons, defaults.showIcons),\n                maxVisibleSuggestions: _clampedInt(suggestOpts.maxVisibleSuggestions, defaults.maxVisibleSuggestions, 1, 15),\n                filteredTypes: types_1.isObject(suggestOpts.filteredTypes) ? suggestOpts.filteredTypes : Object.create(null)\n            };\n        }\n        static _santizeGotoLocationOpts(opts, defaults) {\n            const gotoOpts = opts.gotoLocation || {};\n            return {\n                multiple: _stringSet(gotoOpts.multiple, defaults.multiple, ['peek', 'gotoAndPeek', 'goto'])\n            };\n        }\n        static _sanitizeTabCompletionOpts(opts, defaults) {\n            if (opts === false) {\n                return 'off';\n            }\n            else if (opts === true) {\n                return 'onlySnippets';\n            }\n            else {\n                return _stringSet(opts, defaults, ['on', 'off', 'onlySnippets']);\n            }\n        }\n        static _sanitizeViewInfo(opts, defaults) {\n            let rulers = [];\n            if (Array.isArray(opts.rulers)) {\n                for (let i = 0, len = opts.rulers.length; i < len; i++) {\n                    rulers.push(_clampedInt(opts.rulers[i], 0, 0, 10000));\n                }\n                rulers.sort();\n            }\n            let renderLineNumbers = defaults.renderLineNumbers;\n            let renderCustomLineNumbers = defaults.renderCustomLineNumbers;\n            if (typeof opts.lineNumbers !== 'undefined') {\n                let lineNumbers = opts.lineNumbers;\n                // Compatibility with old true or false values\n                if (lineNumbers === true) {\n                    lineNumbers = 'on';\n                }\n                else if (lineNumbers === false) {\n                    lineNumbers = 'off';\n                }\n                if (typeof lineNumbers === 'function') {\n                    renderLineNumbers = RenderLineNumbersType.Custom;\n                    renderCustomLineNumbers = lineNumbers;\n                }\n                else if (lineNumbers === 'interval') {\n                    renderLineNumbers = RenderLineNumbersType.Interval;\n                }\n                else if (lineNumbers === 'relative') {\n                    renderLineNumbers = RenderLineNumbersType.Relative;\n                }\n                else if (lineNumbers === 'on') {\n                    renderLineNumbers = RenderLineNumbersType.On;\n                }\n                else {\n                    renderLineNumbers = RenderLineNumbersType.Off;\n                }\n            }\n            const fontLigatures = _boolean(opts.fontLigatures, defaults.fontLigatures);\n            const disableMonospaceOptimizations = _boolean(opts.disableMonospaceOptimizations, defaults.disableMonospaceOptimizations) || fontLigatures;\n            let renderWhitespace = opts.renderWhitespace;\n            {\n                // Compatibility with old true or false values\n                if (renderWhitespace === true) {\n                    renderWhitespace = 'boundary';\n                }\n                else if (renderWhitespace === false) {\n                    renderWhitespace = 'none';\n                }\n                renderWhitespace = _stringSet(renderWhitespace, defaults.renderWhitespace, ['none', 'boundary', 'all']);\n            }\n            let renderLineHighlight = opts.renderLineHighlight;\n            {\n                // Compatibility with old true or false values\n                if (renderLineHighlight === true) {\n                    renderLineHighlight = 'line';\n                }\n                else if (renderLineHighlight === false) {\n                    renderLineHighlight = 'none';\n                }\n                renderLineHighlight = _stringSet(renderLineHighlight, defaults.renderLineHighlight, ['none', 'gutter', 'line', 'all']);\n            }\n            let mouseWheelScrollSensitivity = _float(opts.mouseWheelScrollSensitivity, defaults.scrollbar.mouseWheelScrollSensitivity);\n            if (mouseWheelScrollSensitivity === 0) {\n                // Disallow 0, as it would prevent/block scrolling\n                mouseWheelScrollSensitivity = 1;\n            }\n            let fastScrollSensitivity = _float(opts.fastScrollSensitivity, defaults.scrollbar.fastScrollSensitivity);\n            if (fastScrollSensitivity <= 0) {\n                fastScrollSensitivity = defaults.scrollbar.fastScrollSensitivity;\n            }\n            const scrollbar = this._sanitizeScrollbarOpts(opts.scrollbar, defaults.scrollbar, mouseWheelScrollSensitivity, fastScrollSensitivity);\n            const minimap = this._sanitizeMinimapOpts(opts.minimap, defaults.minimap);\n            return {\n                extraEditorClassName: _string(opts.extraEditorClassName, defaults.extraEditorClassName),\n                disableMonospaceOptimizations: disableMonospaceOptimizations,\n                rulers: rulers,\n                ariaLabel: _string(opts.ariaLabel, defaults.ariaLabel),\n                renderLineNumbers: renderLineNumbers,\n                renderCustomLineNumbers: renderCustomLineNumbers,\n                renderFinalNewline: _boolean(opts.renderFinalNewline, defaults.renderFinalNewline),\n                selectOnLineNumbers: _boolean(opts.selectOnLineNumbers, defaults.selectOnLineNumbers),\n                glyphMargin: _boolean(opts.glyphMargin, defaults.glyphMargin),\n                revealHorizontalRightPadding: _clampedInt(opts.revealHorizontalRightPadding, defaults.revealHorizontalRightPadding, 0, 1000),\n                roundedSelection: _boolean(opts.roundedSelection, defaults.roundedSelection),\n                overviewRulerLanes: _clampedInt(opts.overviewRulerLanes, defaults.overviewRulerLanes, 0, 3),\n                overviewRulerBorder: _boolean(opts.overviewRulerBorder, defaults.overviewRulerBorder),\n                cursorBlinking: _cursorBlinkingStyleFromString(opts.cursorBlinking, defaults.cursorBlinking),\n                mouseWheelZoom: _boolean(opts.mouseWheelZoom, defaults.mouseWheelZoom),\n                cursorSmoothCaretAnimation: _boolean(opts.cursorSmoothCaretAnimation, defaults.cursorSmoothCaretAnimation),\n                cursorStyle: _cursorStyleFromString(opts.cursorStyle, defaults.cursorStyle),\n                cursorWidth: _clampedInt(opts.cursorWidth, defaults.cursorWidth, 0, Number.MAX_VALUE),\n                hideCursorInOverviewRuler: _boolean(opts.hideCursorInOverviewRuler, defaults.hideCursorInOverviewRuler),\n                scrollBeyondLastLine: _boolean(opts.scrollBeyondLastLine, defaults.scrollBeyondLastLine),\n                scrollBeyondLastColumn: _clampedInt(opts.scrollBeyondLastColumn, defaults.scrollBeyondLastColumn, 0, uint_1.Constants.MAX_SAFE_SMALL_INTEGER),\n                smoothScrolling: _boolean(opts.smoothScrolling, defaults.smoothScrolling),\n                stopRenderingLineAfter: _clampedInt(opts.stopRenderingLineAfter, defaults.stopRenderingLineAfter, -1, uint_1.Constants.MAX_SAFE_SMALL_INTEGER),\n                renderWhitespace: renderWhitespace,\n                renderControlCharacters: _boolean(opts.renderControlCharacters, defaults.renderControlCharacters),\n                fontLigatures: fontLigatures,\n                renderIndentGuides: _boolean(opts.renderIndentGuides, defaults.renderIndentGuides),\n                highlightActiveIndentGuide: _boolean(opts.highlightActiveIndentGuide, defaults.highlightActiveIndentGuide),\n                renderLineHighlight: renderLineHighlight,\n                scrollbar: scrollbar,\n                minimap: minimap,\n                fixedOverflowWidgets: _boolean(opts.fixedOverflowWidgets, defaults.fixedOverflowWidgets),\n            };\n        }\n        static _sanitizeContribInfo(opts, defaults) {\n            let quickSuggestions;\n            if (typeof opts.quickSuggestions === 'object') {\n                quickSuggestions = Object.assign({ other: true }, opts.quickSuggestions);\n            }\n            else {\n                quickSuggestions = _boolean(opts.quickSuggestions, defaults.quickSuggestions);\n            }\n            // Compatibility support for acceptSuggestionOnEnter\n            if (typeof opts.acceptSuggestionOnEnter === 'boolean') {\n                opts.acceptSuggestionOnEnter = opts.acceptSuggestionOnEnter ? 'on' : 'off';\n            }\n            const find = this._sanitizeFindOpts(opts.find, defaults.find);\n            return {\n                selectionClipboard: _boolean(opts.selectionClipboard, defaults.selectionClipboard),\n                hover: this._sanitizeHoverOpts(opts.hover, defaults.hover),\n                links: _boolean(opts.links, defaults.links),\n                contextmenu: _boolean(opts.contextmenu, defaults.contextmenu),\n                quickSuggestions: quickSuggestions,\n                quickSuggestionsDelay: _clampedInt(opts.quickSuggestionsDelay, defaults.quickSuggestionsDelay, uint_1.Constants.MIN_SAFE_SMALL_INTEGER, uint_1.Constants.MAX_SAFE_SMALL_INTEGER),\n                parameterHints: this._sanitizeParameterHintOpts(opts.parameterHints, defaults.parameterHints),\n                formatOnType: _boolean(opts.formatOnType, defaults.formatOnType),\n                formatOnPaste: _boolean(opts.formatOnPaste, defaults.formatOnPaste),\n                suggestOnTriggerCharacters: _boolean(opts.suggestOnTriggerCharacters, defaults.suggestOnTriggerCharacters),\n                acceptSuggestionOnEnter: _stringSet(opts.acceptSuggestionOnEnter, defaults.acceptSuggestionOnEnter, ['on', 'smart', 'off']),\n                acceptSuggestionOnCommitCharacter: _boolean(opts.acceptSuggestionOnCommitCharacter, defaults.acceptSuggestionOnCommitCharacter),\n                wordBasedSuggestions: _boolean(opts.wordBasedSuggestions, defaults.wordBasedSuggestions),\n                suggestSelection: _stringSet(opts.suggestSelection, defaults.suggestSelection, ['first', 'recentlyUsed', 'recentlyUsedByPrefix']),\n                suggestFontSize: _clampedInt(opts.suggestFontSize, defaults.suggestFontSize, 0, 1000),\n                suggestLineHeight: _clampedInt(opts.suggestLineHeight, defaults.suggestLineHeight, 0, 1000),\n                tabCompletion: this._sanitizeTabCompletionOpts(opts.tabCompletion, defaults.tabCompletion),\n                suggest: this._sanitizeSuggestOpts(opts, defaults.suggest),\n                gotoLocation: this._santizeGotoLocationOpts(opts, defaults.gotoLocation),\n                selectionHighlight: _boolean(opts.selectionHighlight, defaults.selectionHighlight),\n                occurrencesHighlight: _boolean(opts.occurrencesHighlight, defaults.occurrencesHighlight),\n                codeLens: _boolean(opts.codeLens, defaults.codeLens),\n                folding: _boolean(opts.folding, defaults.folding),\n                foldingStrategy: _stringSet(opts.foldingStrategy, defaults.foldingStrategy, ['auto', 'indentation']),\n                showFoldingControls: _stringSet(opts.showFoldingControls, defaults.showFoldingControls, ['always', 'mouseover']),\n                matchBrackets: _boolean(opts.matchBrackets, defaults.matchBrackets),\n                find: find,\n                colorDecorators: _boolean(opts.colorDecorators, defaults.colorDecorators),\n                lightbulbEnabled: _boolean(opts.lightbulb ? opts.lightbulb.enabled : false, defaults.lightbulbEnabled),\n                codeActionsOnSave: _booleanMap(opts.codeActionsOnSave, {}),\n                codeActionsOnSaveTimeout: _clampedInt(opts.codeActionsOnSaveTimeout, defaults.codeActionsOnSaveTimeout, 1, 10000)\n            };\n        }\n    }\n    exports.EditorOptionsValidator = EditorOptionsValidator;\n    /**\n     * @internal\n     */\n    class InternalEditorOptionsFactory {\n        static _tweakValidatedOptions(opts, accessibilitySupport) {\n            const accessibilityIsOn = (accessibilitySupport === accessibility_1.AccessibilitySupport.Enabled);\n            const accessibilityIsOff = (accessibilitySupport === accessibility_1.AccessibilitySupport.Disabled);\n            return {\n                inDiffEditor: opts.inDiffEditor,\n                wordSeparators: opts.wordSeparators,\n                lineNumbersMinChars: opts.lineNumbersMinChars,\n                lineDecorationsWidth: opts.lineDecorationsWidth,\n                readOnly: opts.readOnly,\n                mouseStyle: opts.mouseStyle,\n                disableLayerHinting: opts.disableLayerHinting,\n                automaticLayout: opts.automaticLayout,\n                wordWrap: opts.wordWrap,\n                wordWrapColumn: opts.wordWrapColumn,\n                wordWrapMinified: opts.wordWrapMinified,\n                wrappingIndent: opts.wrappingIndent,\n                wordWrapBreakBeforeCharacters: opts.wordWrapBreakBeforeCharacters,\n                wordWrapBreakAfterCharacters: opts.wordWrapBreakAfterCharacters,\n                wordWrapBreakObtrusiveCharacters: opts.wordWrapBreakObtrusiveCharacters,\n                autoClosingBrackets: opts.autoClosingBrackets,\n                autoClosingQuotes: opts.autoClosingQuotes,\n                autoSurround: opts.autoSurround,\n                autoIndent: opts.autoIndent,\n                dragAndDrop: opts.dragAndDrop,\n                emptySelectionClipboard: opts.emptySelectionClipboard,\n                copyWithSyntaxHighlighting: opts.copyWithSyntaxHighlighting,\n                useTabStops: opts.useTabStops,\n                multiCursorModifier: opts.multiCursorModifier,\n                multiCursorMergeOverlapping: opts.multiCursorMergeOverlapping,\n                accessibilitySupport: opts.accessibilitySupport,\n                showUnused: opts.showUnused,\n                viewInfo: {\n                    extraEditorClassName: opts.viewInfo.extraEditorClassName,\n                    disableMonospaceOptimizations: opts.viewInfo.disableMonospaceOptimizations,\n                    rulers: opts.viewInfo.rulers,\n                    ariaLabel: (accessibilityIsOff ? nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press Alt+F1 for options.\") : opts.viewInfo.ariaLabel),\n                    renderLineNumbers: opts.viewInfo.renderLineNumbers,\n                    renderCustomLineNumbers: opts.viewInfo.renderCustomLineNumbers,\n                    renderFinalNewline: opts.viewInfo.renderFinalNewline,\n                    selectOnLineNumbers: opts.viewInfo.selectOnLineNumbers,\n                    glyphMargin: opts.viewInfo.glyphMargin,\n                    revealHorizontalRightPadding: opts.viewInfo.revealHorizontalRightPadding,\n                    roundedSelection: (accessibilityIsOn ? false : opts.viewInfo.roundedSelection),\n                    overviewRulerLanes: opts.viewInfo.overviewRulerLanes,\n                    overviewRulerBorder: opts.viewInfo.overviewRulerBorder,\n                    cursorBlinking: opts.viewInfo.cursorBlinking,\n                    mouseWheelZoom: opts.viewInfo.mouseWheelZoom,\n                    cursorSmoothCaretAnimation: opts.viewInfo.cursorSmoothCaretAnimation,\n                    cursorStyle: opts.viewInfo.cursorStyle,\n                    cursorWidth: opts.viewInfo.cursorWidth,\n                    hideCursorInOverviewRuler: opts.viewInfo.hideCursorInOverviewRuler,\n                    scrollBeyondLastLine: opts.viewInfo.scrollBeyondLastLine,\n                    scrollBeyondLastColumn: opts.viewInfo.scrollBeyondLastColumn,\n                    smoothScrolling: opts.viewInfo.smoothScrolling,\n                    stopRenderingLineAfter: opts.viewInfo.stopRenderingLineAfter,\n                    renderWhitespace: (accessibilityIsOn ? 'none' : opts.viewInfo.renderWhitespace),\n                    renderControlCharacters: (accessibilityIsOn ? false : opts.viewInfo.renderControlCharacters),\n                    fontLigatures: (accessibilityIsOn ? false : opts.viewInfo.fontLigatures),\n                    renderIndentGuides: (accessibilityIsOn ? false : opts.viewInfo.renderIndentGuides),\n                    highlightActiveIndentGuide: opts.viewInfo.highlightActiveIndentGuide,\n                    renderLineHighlight: opts.viewInfo.renderLineHighlight,\n                    scrollbar: opts.viewInfo.scrollbar,\n                    minimap: {\n                        enabled: (accessibilityIsOn ? false : opts.viewInfo.minimap.enabled),\n                        side: opts.viewInfo.minimap.side,\n                        renderCharacters: opts.viewInfo.minimap.renderCharacters,\n                        showSlider: opts.viewInfo.minimap.showSlider,\n                        maxColumn: opts.viewInfo.minimap.maxColumn\n                    },\n                    fixedOverflowWidgets: opts.viewInfo.fixedOverflowWidgets\n                },\n                contribInfo: {\n                    selectionClipboard: opts.contribInfo.selectionClipboard,\n                    hover: opts.contribInfo.hover,\n                    links: (accessibilityIsOn ? false : opts.contribInfo.links),\n                    contextmenu: opts.contribInfo.contextmenu,\n                    quickSuggestions: opts.contribInfo.quickSuggestions,\n                    quickSuggestionsDelay: opts.contribInfo.quickSuggestionsDelay,\n                    parameterHints: opts.contribInfo.parameterHints,\n                    formatOnType: opts.contribInfo.formatOnType,\n                    formatOnPaste: opts.contribInfo.formatOnPaste,\n                    suggestOnTriggerCharacters: opts.contribInfo.suggestOnTriggerCharacters,\n                    acceptSuggestionOnEnter: opts.contribInfo.acceptSuggestionOnEnter,\n                    acceptSuggestionOnCommitCharacter: opts.contribInfo.acceptSuggestionOnCommitCharacter,\n                    wordBasedSuggestions: opts.contribInfo.wordBasedSuggestions,\n                    suggestSelection: opts.contribInfo.suggestSelection,\n                    suggestFontSize: opts.contribInfo.suggestFontSize,\n                    suggestLineHeight: opts.contribInfo.suggestLineHeight,\n                    tabCompletion: opts.contribInfo.tabCompletion,\n                    suggest: opts.contribInfo.suggest,\n                    gotoLocation: opts.contribInfo.gotoLocation,\n                    selectionHighlight: (accessibilityIsOn ? false : opts.contribInfo.selectionHighlight),\n                    occurrencesHighlight: (accessibilityIsOn ? false : opts.contribInfo.occurrencesHighlight),\n                    codeLens: (accessibilityIsOn ? false : opts.contribInfo.codeLens),\n                    folding: (accessibilityIsOn ? false : opts.contribInfo.folding),\n                    foldingStrategy: opts.contribInfo.foldingStrategy,\n                    showFoldingControls: opts.contribInfo.showFoldingControls,\n                    matchBrackets: (accessibilityIsOn ? false : opts.contribInfo.matchBrackets),\n                    find: opts.contribInfo.find,\n                    colorDecorators: opts.contribInfo.colorDecorators,\n                    lightbulbEnabled: opts.contribInfo.lightbulbEnabled,\n                    codeActionsOnSave: opts.contribInfo.codeActionsOnSave,\n                    codeActionsOnSaveTimeout: opts.contribInfo.codeActionsOnSaveTimeout\n                }\n            };\n        }\n        static createInternalEditorOptions(env, _opts) {\n            let accessibilitySupport;\n            if (_opts.accessibilitySupport === 'auto') {\n                // The editor reads the `accessibilitySupport` from the environment\n                accessibilitySupport = env.accessibilitySupport;\n            }\n            else if (_opts.accessibilitySupport === 'on') {\n                accessibilitySupport = accessibility_1.AccessibilitySupport.Enabled;\n            }\n            else {\n                accessibilitySupport = accessibility_1.AccessibilitySupport.Disabled;\n            }\n            // Disable some non critical features to get as best performance as possible\n            // See https://github.com/Microsoft/vscode/issues/26730\n            const opts = this._tweakValidatedOptions(_opts, accessibilitySupport);\n            let lineDecorationsWidth;\n            if (typeof opts.lineDecorationsWidth === 'string' && /^\\d+(\\.\\d+)?ch$/.test(opts.lineDecorationsWidth)) {\n                const multiple = parseFloat(opts.lineDecorationsWidth.substr(0, opts.lineDecorationsWidth.length - 2));\n                lineDecorationsWidth = multiple * env.fontInfo.typicalHalfwidthCharacterWidth;\n            }\n            else {\n                lineDecorationsWidth = _clampedInt(opts.lineDecorationsWidth, 0, 0, 1000);\n            }\n            if (opts.contribInfo.folding) {\n                lineDecorationsWidth += 16;\n            }\n            const layoutInfo = EditorLayoutProvider.compute({\n                outerWidth: env.outerWidth,\n                outerHeight: env.outerHeight,\n                showGlyphMargin: opts.viewInfo.glyphMargin,\n                lineHeight: env.fontInfo.lineHeight,\n                showLineNumbers: (opts.viewInfo.renderLineNumbers !== RenderLineNumbersType.Off),\n                lineNumbersMinChars: opts.lineNumbersMinChars,\n                lineNumbersDigitCount: env.lineNumbersDigitCount,\n                lineDecorationsWidth: lineDecorationsWidth,\n                typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\n                maxDigitWidth: env.fontInfo.maxDigitWidth,\n                verticalScrollbarWidth: opts.viewInfo.scrollbar.verticalScrollbarSize,\n                horizontalScrollbarHeight: opts.viewInfo.scrollbar.horizontalScrollbarSize,\n                scrollbarArrowSize: opts.viewInfo.scrollbar.arrowSize,\n                verticalScrollbarHasArrows: opts.viewInfo.scrollbar.verticalHasArrows,\n                minimap: opts.viewInfo.minimap.enabled,\n                minimapSide: opts.viewInfo.minimap.side,\n                minimapRenderCharacters: opts.viewInfo.minimap.renderCharacters,\n                minimapMaxColumn: opts.viewInfo.minimap.maxColumn,\n                pixelRatio: env.pixelRatio\n            });\n            let bareWrappingInfo = null;\n            {\n                const wordWrap = opts.wordWrap;\n                const wordWrapColumn = opts.wordWrapColumn;\n                const wordWrapMinified = opts.wordWrapMinified;\n                if (accessibilitySupport === accessibility_1.AccessibilitySupport.Enabled) {\n                    // See https://github.com/Microsoft/vscode/issues/27766\n                    // Never enable wrapping when a screen reader is attached\n                    // because arrow down etc. will not move the cursor in the way\n                    // a screen reader expects.\n                    bareWrappingInfo = {\n                        isWordWrapMinified: false,\n                        isViewportWrapping: false,\n                        wrappingColumn: -1\n                    };\n                }\n                else if (wordWrapMinified && env.isDominatedByLongLines) {\n                    // Force viewport width wrapping if model is dominated by long lines\n                    bareWrappingInfo = {\n                        isWordWrapMinified: true,\n                        isViewportWrapping: true,\n                        wrappingColumn: Math.max(1, layoutInfo.viewportColumn)\n                    };\n                }\n                else if (wordWrap === 'on') {\n                    bareWrappingInfo = {\n                        isWordWrapMinified: false,\n                        isViewportWrapping: true,\n                        wrappingColumn: Math.max(1, layoutInfo.viewportColumn)\n                    };\n                }\n                else if (wordWrap === 'bounded') {\n                    bareWrappingInfo = {\n                        isWordWrapMinified: false,\n                        isViewportWrapping: true,\n                        wrappingColumn: Math.min(Math.max(1, layoutInfo.viewportColumn), wordWrapColumn)\n                    };\n                }\n                else if (wordWrap === 'wordWrapColumn') {\n                    bareWrappingInfo = {\n                        isWordWrapMinified: false,\n                        isViewportWrapping: false,\n                        wrappingColumn: wordWrapColumn\n                    };\n                }\n                else {\n                    bareWrappingInfo = {\n                        isWordWrapMinified: false,\n                        isViewportWrapping: false,\n                        wrappingColumn: -1\n                    };\n                }\n            }\n            const wrappingInfo = {\n                inDiffEditor: opts.inDiffEditor,\n                isDominatedByLongLines: env.isDominatedByLongLines,\n                isWordWrapMinified: bareWrappingInfo.isWordWrapMinified,\n                isViewportWrapping: bareWrappingInfo.isViewportWrapping,\n                wrappingColumn: bareWrappingInfo.wrappingColumn,\n                wrappingIndent: opts.wrappingIndent,\n                wordWrapBreakBeforeCharacters: opts.wordWrapBreakBeforeCharacters,\n                wordWrapBreakAfterCharacters: opts.wordWrapBreakAfterCharacters,\n                wordWrapBreakObtrusiveCharacters: opts.wordWrapBreakObtrusiveCharacters,\n            };\n            let className = 'monaco-editor';\n            if (opts.viewInfo.extraEditorClassName) {\n                className += ' ' + opts.viewInfo.extraEditorClassName;\n            }\n            if (env.extraEditorClassName) {\n                className += ' ' + env.extraEditorClassName;\n            }\n            if (opts.viewInfo.fontLigatures) {\n                className += ' enable-ligatures';\n            }\n            if (opts.mouseStyle === 'default') {\n                className += ' mouse-default';\n            }\n            else if (opts.mouseStyle === 'copy') {\n                className += ' mouse-copy';\n            }\n            return new InternalEditorOptions({\n                canUseLayerHinting: opts.disableLayerHinting ? false : true,\n                pixelRatio: env.pixelRatio,\n                editorClassName: className,\n                lineHeight: env.fontInfo.lineHeight,\n                readOnly: opts.readOnly,\n                accessibilitySupport: accessibilitySupport,\n                multiCursorModifier: opts.multiCursorModifier,\n                multiCursorMergeOverlapping: opts.multiCursorMergeOverlapping,\n                wordSeparators: opts.wordSeparators,\n                autoClosingBrackets: opts.autoClosingBrackets,\n                autoClosingQuotes: opts.autoClosingQuotes,\n                autoSurround: opts.autoSurround,\n                autoIndent: opts.autoIndent,\n                useTabStops: opts.useTabStops,\n                tabFocusMode: opts.readOnly ? true : env.tabFocusMode,\n                dragAndDrop: opts.dragAndDrop,\n                emptySelectionClipboard: opts.emptySelectionClipboard && env.emptySelectionClipboard,\n                copyWithSyntaxHighlighting: opts.copyWithSyntaxHighlighting,\n                layoutInfo: layoutInfo,\n                fontInfo: env.fontInfo,\n                viewInfo: opts.viewInfo,\n                wrappingInfo: wrappingInfo,\n                contribInfo: opts.contribInfo,\n                showUnused: opts.showUnused,\n            });\n        }\n    }\n    exports.InternalEditorOptionsFactory = InternalEditorOptionsFactory;\n    /**\n     * @internal\n     */\n    class EditorLayoutProvider {\n        static compute(_opts) {\n            const outerWidth = _opts.outerWidth | 0;\n            const outerHeight = _opts.outerHeight | 0;\n            const showGlyphMargin = _opts.showGlyphMargin;\n            const lineHeight = _opts.lineHeight | 0;\n            const showLineNumbers = _opts.showLineNumbers;\n            const lineNumbersMinChars = _opts.lineNumbersMinChars | 0;\n            const lineNumbersDigitCount = _opts.lineNumbersDigitCount | 0;\n            const lineDecorationsWidth = _opts.lineDecorationsWidth | 0;\n            const typicalHalfwidthCharacterWidth = _opts.typicalHalfwidthCharacterWidth;\n            const maxDigitWidth = _opts.maxDigitWidth;\n            const verticalScrollbarWidth = _opts.verticalScrollbarWidth | 0;\n            const verticalScrollbarHasArrows = _opts.verticalScrollbarHasArrows;\n            const scrollbarArrowSize = _opts.scrollbarArrowSize | 0;\n            const horizontalScrollbarHeight = _opts.horizontalScrollbarHeight | 0;\n            const minimap = _opts.minimap;\n            const minimapSide = _opts.minimapSide;\n            const minimapRenderCharacters = _opts.minimapRenderCharacters;\n            const minimapMaxColumn = _opts.minimapMaxColumn | 0;\n            const pixelRatio = _opts.pixelRatio;\n            let lineNumbersWidth = 0;\n            if (showLineNumbers) {\n                const digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\n                lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\n            }\n            let glyphMarginWidth = 0;\n            if (showGlyphMargin) {\n                glyphMarginWidth = lineHeight;\n            }\n            let glyphMarginLeft = 0;\n            let lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\n            let decorationsLeft = lineNumbersLeft + lineNumbersWidth;\n            let contentLeft = decorationsLeft + lineDecorationsWidth;\n            const remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\n            let renderMinimap;\n            let minimapLeft;\n            let minimapWidth;\n            let contentWidth;\n            if (!minimap) {\n                minimapLeft = 0;\n                minimapWidth = 0;\n                renderMinimap = RenderMinimap.None;\n                contentWidth = remainingWidth;\n            }\n            else {\n                let minimapCharWidth;\n                if (pixelRatio >= 2) {\n                    renderMinimap = minimapRenderCharacters ? RenderMinimap.Large : RenderMinimap.LargeBlocks;\n                    minimapCharWidth = 2 / pixelRatio;\n                }\n                else {\n                    renderMinimap = minimapRenderCharacters ? RenderMinimap.Small : RenderMinimap.SmallBlocks;\n                    minimapCharWidth = 1 / pixelRatio;\n                }\n                // Given:\n                // (leaving 2px for the cursor to have space after the last character)\n                // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\n                // minimapWidth = viewportColumn * minimapCharWidth\n                // contentWidth = remainingWidth - minimapWidth\n                // What are good values for contentWidth and minimapWidth ?\n                // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\n                // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n                // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n                // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n                // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\n                minimapWidth = Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)));\n                let minimapColumns = minimapWidth / minimapCharWidth;\n                if (minimapColumns > minimapMaxColumn) {\n                    minimapWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\n                }\n                contentWidth = remainingWidth - minimapWidth;\n                if (minimapSide === 'left') {\n                    minimapLeft = 0;\n                    glyphMarginLeft += minimapWidth;\n                    lineNumbersLeft += minimapWidth;\n                    decorationsLeft += minimapWidth;\n                    contentLeft += minimapWidth;\n                }\n                else {\n                    minimapLeft = outerWidth - minimapWidth - verticalScrollbarWidth;\n                }\n            }\n            // (leaving 2px for the cursor to have space after the last character)\n            const viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\n            const verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);\n            return {\n                width: outerWidth,\n                height: outerHeight,\n                glyphMarginLeft: glyphMarginLeft,\n                glyphMarginWidth: glyphMarginWidth,\n                glyphMarginHeight: outerHeight,\n                lineNumbersLeft: lineNumbersLeft,\n                lineNumbersWidth: lineNumbersWidth,\n                lineNumbersHeight: outerHeight,\n                decorationsLeft: decorationsLeft,\n                decorationsWidth: lineDecorationsWidth,\n                decorationsHeight: outerHeight,\n                contentLeft: contentLeft,\n                contentWidth: contentWidth,\n                contentHeight: outerHeight,\n                renderMinimap: renderMinimap,\n                minimapLeft: minimapLeft,\n                minimapWidth: minimapWidth,\n                viewportColumn: viewportColumn,\n                verticalScrollbarWidth: verticalScrollbarWidth,\n                horizontalScrollbarHeight: horizontalScrollbarHeight,\n                overviewRuler: {\n                    top: verticalArrowSize,\n                    width: verticalScrollbarWidth,\n                    height: (outerHeight - 2 * verticalArrowSize),\n                    right: 0\n                }\n            };\n        }\n    }\n    exports.EditorLayoutProvider = EditorLayoutProvider;\n    const DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\n    const DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\n    const DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace, \\'Droid Sans Fallback\\'';\n    /**\n     * @internal\n     */\n    exports.EDITOR_FONT_DEFAULTS = {\n        fontFamily: (browser.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),\n        fontWeight: 'normal',\n        fontSize: (browser.isMacintosh ? 12 : 14),\n        lineHeight: 0,\n        letterSpacing: 0,\n    };\n    /**\n     * @internal\n     */\n    exports.EDITOR_MODEL_DEFAULTS = {\n        tabSize: 4,\n        indentSize: 4,\n        insertSpaces: true,\n        detectIndentation: true,\n        trimAutoWhitespace: true,\n        largeFileOptimizations: true\n    };\n    /**\n     * @internal\n     */\n    exports.EDITOR_DEFAULTS = {\n        inDiffEditor: false,\n        wordSeparators: wordHelper_1.USUAL_WORD_SEPARATORS,\n        lineNumbersMinChars: 5,\n        lineDecorationsWidth: 10,\n        readOnly: false,\n        mouseStyle: 'text',\n        disableLayerHinting: false,\n        automaticLayout: false,\n        wordWrap: 'off',\n        wordWrapColumn: 80,\n        wordWrapMinified: true,\n        wrappingIndent: WrappingIndent.Same,\n        wordWrapBreakBeforeCharacters: '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋',\n        wordWrapBreakAfterCharacters: ' \\t})]?|/&,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣',\n        wordWrapBreakObtrusiveCharacters: '.',\n        autoClosingBrackets: 'languageDefined',\n        autoClosingQuotes: 'languageDefined',\n        autoSurround: 'languageDefined',\n        autoIndent: true,\n        dragAndDrop: true,\n        emptySelectionClipboard: true,\n        copyWithSyntaxHighlighting: true,\n        useTabStops: true,\n        multiCursorModifier: 'altKey',\n        multiCursorMergeOverlapping: true,\n        accessibilitySupport: 'auto',\n        showUnused: true,\n        viewInfo: {\n            extraEditorClassName: '',\n            disableMonospaceOptimizations: false,\n            rulers: [],\n            ariaLabel: nls.localize('editorViewAccessibleLabel', \"Editor content\"),\n            renderLineNumbers: RenderLineNumbersType.On,\n            renderCustomLineNumbers: null,\n            renderFinalNewline: true,\n            selectOnLineNumbers: true,\n            glyphMargin: true,\n            revealHorizontalRightPadding: 30,\n            roundedSelection: true,\n            overviewRulerLanes: 2,\n            overviewRulerBorder: true,\n            cursorBlinking: TextEditorCursorBlinkingStyle.Blink,\n            mouseWheelZoom: false,\n            cursorSmoothCaretAnimation: false,\n            cursorStyle: TextEditorCursorStyle.Line,\n            cursorWidth: 0,\n            hideCursorInOverviewRuler: false,\n            scrollBeyondLastLine: true,\n            scrollBeyondLastColumn: 5,\n            smoothScrolling: false,\n            stopRenderingLineAfter: 10000,\n            renderWhitespace: 'none',\n            renderControlCharacters: false,\n            fontLigatures: false,\n            renderIndentGuides: true,\n            highlightActiveIndentGuide: true,\n            renderLineHighlight: 'line',\n            scrollbar: {\n                vertical: scrollable_1.ScrollbarVisibility.Auto,\n                horizontal: scrollable_1.ScrollbarVisibility.Auto,\n                arrowSize: 11,\n                useShadows: true,\n                verticalHasArrows: false,\n                horizontalHasArrows: false,\n                horizontalScrollbarSize: 10,\n                horizontalSliderSize: 10,\n                verticalScrollbarSize: 14,\n                verticalSliderSize: 14,\n                handleMouseWheel: true,\n                mouseWheelScrollSensitivity: 1,\n                fastScrollSensitivity: 5,\n            },\n            minimap: {\n                enabled: true,\n                side: 'right',\n                showSlider: 'mouseover',\n                renderCharacters: true,\n                maxColumn: 120\n            },\n            fixedOverflowWidgets: false,\n        },\n        contribInfo: {\n            selectionClipboard: false,\n            hover: {\n                enabled: true,\n                delay: 300,\n                sticky: true\n            },\n            links: true,\n            contextmenu: true,\n            quickSuggestions: { other: true, comments: false, strings: false },\n            quickSuggestionsDelay: 10,\n            parameterHints: {\n                enabled: true,\n                cycle: false\n            },\n            formatOnType: false,\n            formatOnPaste: false,\n            suggestOnTriggerCharacters: true,\n            acceptSuggestionOnEnter: 'on',\n            acceptSuggestionOnCommitCharacter: true,\n            wordBasedSuggestions: true,\n            suggestSelection: 'recentlyUsed',\n            suggestFontSize: 0,\n            suggestLineHeight: 0,\n            tabCompletion: 'off',\n            suggest: {\n                filterGraceful: true,\n                snippets: 'inline',\n                snippetsPreventQuickSuggestions: true,\n                localityBonus: false,\n                shareSuggestSelections: false,\n                showIcons: true,\n                maxVisibleSuggestions: 12,\n                filteredTypes: Object.create(null)\n            },\n            gotoLocation: {\n                multiple: 'peek'\n            },\n            selectionHighlight: true,\n            occurrencesHighlight: true,\n            codeLens: true,\n            folding: true,\n            foldingStrategy: 'auto',\n            showFoldingControls: 'mouseover',\n            matchBrackets: true,\n            find: {\n                seedSearchStringFromSelection: true,\n                autoFindInSelection: false,\n                globalFindClipboard: false,\n                addExtraSpaceOnTop: true\n            },\n            colorDecorators: true,\n            lightbulbEnabled: true,\n            codeActionsOnSave: {},\n            codeActionsOnSaveTimeout: 750\n        },\n    };\n});\n",null]}