{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codelens/codelens.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codelens/codelens.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/base/common/uri\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/modes\", \"vs/editor/common/services/modelService\"], function (require, exports, arrays_1, cancellation_1, errors_1, uri_1, editorExtensions_1, modes_1, modelService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getCodeLensData(model, token) {\n        const symbols = [];\n        const provider = modes_1.CodeLensProviderRegistry.ordered(model);\n        const promises = provider.map(provider => Promise.resolve(provider.provideCodeLenses(model, token)).then(result => {\n            if (Array.isArray(result)) {\n                for (let symbol of result) {\n                    symbols.push({ symbol, provider });\n                }\n            }\n        }).catch(errors_1.onUnexpectedExternalError));\n        return Promise.all(promises).then(() => {\n            return arrays_1.mergeSort(symbols, (a, b) => {\n                // sort by lineNumber, provider-rank, and column\n                if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n                    return -1;\n                }\n                else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n                    return 1;\n                }\n                else if (provider.indexOf(a.provider) < provider.indexOf(b.provider)) {\n                    return -1;\n                }\n                else if (provider.indexOf(a.provider) > provider.indexOf(b.provider)) {\n                    return 1;\n                }\n                else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n                    return -1;\n                }\n                else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n        });\n    }\n    exports.getCodeLensData = getCodeLensData;\n    editorExtensions_1.registerLanguageCommand('_executeCodeLensProvider', function (accessor, args) {\n        let { resource, itemResolveCount } = args;\n        if (!(resource instanceof uri_1.URI)) {\n            throw errors_1.illegalArgument();\n        }\n        const model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (!model) {\n            throw errors_1.illegalArgument();\n        }\n        const result = [];\n        return getCodeLensData(model, cancellation_1.CancellationToken.None).then(value => {\n            let resolve = [];\n            for (const item of value) {\n                if (typeof itemResolveCount === 'undefined' || Boolean(item.symbol.command)) {\n                    result.push(item.symbol);\n                }\n                else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) {\n                    resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, cancellation_1.CancellationToken.None)).then(symbol => result.push(symbol || item.symbol)));\n                }\n            }\n            return Promise.all(resolve);\n        }).then(() => {\n            return result;\n        });\n    });\n});\n",null]}