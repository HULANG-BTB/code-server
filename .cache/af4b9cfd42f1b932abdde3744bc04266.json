{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/keyCodes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/keyCodes.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/platform\", \"vs/base/common/errors\"], function (require, exports, platform_1, errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Virtual Key Codes, the value does not hold any inherent meaning.\n     * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n     * But these are \"more general\", as they should work across browsers & OS`s.\n     */\n    var KeyCode;\n    (function (KeyCode) {\n        /**\n         * Placed first to cover the 0 value of the enum.\n         */\n        KeyCode[KeyCode[\"Unknown\"] = 0] = \"Unknown\";\n        KeyCode[KeyCode[\"Backspace\"] = 1] = \"Backspace\";\n        KeyCode[KeyCode[\"Tab\"] = 2] = \"Tab\";\n        KeyCode[KeyCode[\"Enter\"] = 3] = \"Enter\";\n        KeyCode[KeyCode[\"Shift\"] = 4] = \"Shift\";\n        KeyCode[KeyCode[\"Ctrl\"] = 5] = \"Ctrl\";\n        KeyCode[KeyCode[\"Alt\"] = 6] = \"Alt\";\n        KeyCode[KeyCode[\"PauseBreak\"] = 7] = \"PauseBreak\";\n        KeyCode[KeyCode[\"CapsLock\"] = 8] = \"CapsLock\";\n        KeyCode[KeyCode[\"Escape\"] = 9] = \"Escape\";\n        KeyCode[KeyCode[\"Space\"] = 10] = \"Space\";\n        KeyCode[KeyCode[\"PageUp\"] = 11] = \"PageUp\";\n        KeyCode[KeyCode[\"PageDown\"] = 12] = \"PageDown\";\n        KeyCode[KeyCode[\"End\"] = 13] = \"End\";\n        KeyCode[KeyCode[\"Home\"] = 14] = \"Home\";\n        KeyCode[KeyCode[\"LeftArrow\"] = 15] = \"LeftArrow\";\n        KeyCode[KeyCode[\"UpArrow\"] = 16] = \"UpArrow\";\n        KeyCode[KeyCode[\"RightArrow\"] = 17] = \"RightArrow\";\n        KeyCode[KeyCode[\"DownArrow\"] = 18] = \"DownArrow\";\n        KeyCode[KeyCode[\"Insert\"] = 19] = \"Insert\";\n        KeyCode[KeyCode[\"Delete\"] = 20] = \"Delete\";\n        KeyCode[KeyCode[\"KEY_0\"] = 21] = \"KEY_0\";\n        KeyCode[KeyCode[\"KEY_1\"] = 22] = \"KEY_1\";\n        KeyCode[KeyCode[\"KEY_2\"] = 23] = \"KEY_2\";\n        KeyCode[KeyCode[\"KEY_3\"] = 24] = \"KEY_3\";\n        KeyCode[KeyCode[\"KEY_4\"] = 25] = \"KEY_4\";\n        KeyCode[KeyCode[\"KEY_5\"] = 26] = \"KEY_5\";\n        KeyCode[KeyCode[\"KEY_6\"] = 27] = \"KEY_6\";\n        KeyCode[KeyCode[\"KEY_7\"] = 28] = \"KEY_7\";\n        KeyCode[KeyCode[\"KEY_8\"] = 29] = \"KEY_8\";\n        KeyCode[KeyCode[\"KEY_9\"] = 30] = \"KEY_9\";\n        KeyCode[KeyCode[\"KEY_A\"] = 31] = \"KEY_A\";\n        KeyCode[KeyCode[\"KEY_B\"] = 32] = \"KEY_B\";\n        KeyCode[KeyCode[\"KEY_C\"] = 33] = \"KEY_C\";\n        KeyCode[KeyCode[\"KEY_D\"] = 34] = \"KEY_D\";\n        KeyCode[KeyCode[\"KEY_E\"] = 35] = \"KEY_E\";\n        KeyCode[KeyCode[\"KEY_F\"] = 36] = \"KEY_F\";\n        KeyCode[KeyCode[\"KEY_G\"] = 37] = \"KEY_G\";\n        KeyCode[KeyCode[\"KEY_H\"] = 38] = \"KEY_H\";\n        KeyCode[KeyCode[\"KEY_I\"] = 39] = \"KEY_I\";\n        KeyCode[KeyCode[\"KEY_J\"] = 40] = \"KEY_J\";\n        KeyCode[KeyCode[\"KEY_K\"] = 41] = \"KEY_K\";\n        KeyCode[KeyCode[\"KEY_L\"] = 42] = \"KEY_L\";\n        KeyCode[KeyCode[\"KEY_M\"] = 43] = \"KEY_M\";\n        KeyCode[KeyCode[\"KEY_N\"] = 44] = \"KEY_N\";\n        KeyCode[KeyCode[\"KEY_O\"] = 45] = \"KEY_O\";\n        KeyCode[KeyCode[\"KEY_P\"] = 46] = \"KEY_P\";\n        KeyCode[KeyCode[\"KEY_Q\"] = 47] = \"KEY_Q\";\n        KeyCode[KeyCode[\"KEY_R\"] = 48] = \"KEY_R\";\n        KeyCode[KeyCode[\"KEY_S\"] = 49] = \"KEY_S\";\n        KeyCode[KeyCode[\"KEY_T\"] = 50] = \"KEY_T\";\n        KeyCode[KeyCode[\"KEY_U\"] = 51] = \"KEY_U\";\n        KeyCode[KeyCode[\"KEY_V\"] = 52] = \"KEY_V\";\n        KeyCode[KeyCode[\"KEY_W\"] = 53] = \"KEY_W\";\n        KeyCode[KeyCode[\"KEY_X\"] = 54] = \"KEY_X\";\n        KeyCode[KeyCode[\"KEY_Y\"] = 55] = \"KEY_Y\";\n        KeyCode[KeyCode[\"KEY_Z\"] = 56] = \"KEY_Z\";\n        KeyCode[KeyCode[\"Meta\"] = 57] = \"Meta\";\n        KeyCode[KeyCode[\"ContextMenu\"] = 58] = \"ContextMenu\";\n        KeyCode[KeyCode[\"F1\"] = 59] = \"F1\";\n        KeyCode[KeyCode[\"F2\"] = 60] = \"F2\";\n        KeyCode[KeyCode[\"F3\"] = 61] = \"F3\";\n        KeyCode[KeyCode[\"F4\"] = 62] = \"F4\";\n        KeyCode[KeyCode[\"F5\"] = 63] = \"F5\";\n        KeyCode[KeyCode[\"F6\"] = 64] = \"F6\";\n        KeyCode[KeyCode[\"F7\"] = 65] = \"F7\";\n        KeyCode[KeyCode[\"F8\"] = 66] = \"F8\";\n        KeyCode[KeyCode[\"F9\"] = 67] = \"F9\";\n        KeyCode[KeyCode[\"F10\"] = 68] = \"F10\";\n        KeyCode[KeyCode[\"F11\"] = 69] = \"F11\";\n        KeyCode[KeyCode[\"F12\"] = 70] = \"F12\";\n        KeyCode[KeyCode[\"F13\"] = 71] = \"F13\";\n        KeyCode[KeyCode[\"F14\"] = 72] = \"F14\";\n        KeyCode[KeyCode[\"F15\"] = 73] = \"F15\";\n        KeyCode[KeyCode[\"F16\"] = 74] = \"F16\";\n        KeyCode[KeyCode[\"F17\"] = 75] = \"F17\";\n        KeyCode[KeyCode[\"F18\"] = 76] = \"F18\";\n        KeyCode[KeyCode[\"F19\"] = 77] = \"F19\";\n        KeyCode[KeyCode[\"NumLock\"] = 78] = \"NumLock\";\n        KeyCode[KeyCode[\"ScrollLock\"] = 79] = \"ScrollLock\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ';:' key\n         */\n        KeyCode[KeyCode[\"US_SEMICOLON\"] = 80] = \"US_SEMICOLON\";\n        /**\n         * For any country/region, the '+' key\n         * For the US standard keyboard, the '=+' key\n         */\n        KeyCode[KeyCode[\"US_EQUAL\"] = 81] = \"US_EQUAL\";\n        /**\n         * For any country/region, the ',' key\n         * For the US standard keyboard, the ',<' key\n         */\n        KeyCode[KeyCode[\"US_COMMA\"] = 82] = \"US_COMMA\";\n        /**\n         * For any country/region, the '-' key\n         * For the US standard keyboard, the '-_' key\n         */\n        KeyCode[KeyCode[\"US_MINUS\"] = 83] = \"US_MINUS\";\n        /**\n         * For any country/region, the '.' key\n         * For the US standard keyboard, the '.>' key\n         */\n        KeyCode[KeyCode[\"US_DOT\"] = 84] = \"US_DOT\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '/?' key\n         */\n        KeyCode[KeyCode[\"US_SLASH\"] = 85] = \"US_SLASH\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '`~' key\n         */\n        KeyCode[KeyCode[\"US_BACKTICK\"] = 86] = \"US_BACKTICK\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '[{' key\n         */\n        KeyCode[KeyCode[\"US_OPEN_SQUARE_BRACKET\"] = 87] = \"US_OPEN_SQUARE_BRACKET\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '\\|' key\n         */\n        KeyCode[KeyCode[\"US_BACKSLASH\"] = 88] = \"US_BACKSLASH\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ']}' key\n         */\n        KeyCode[KeyCode[\"US_CLOSE_SQUARE_BRACKET\"] = 89] = \"US_CLOSE_SQUARE_BRACKET\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ''\"' key\n         */\n        KeyCode[KeyCode[\"US_QUOTE\"] = 90] = \"US_QUOTE\";\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         */\n        KeyCode[KeyCode[\"OEM_8\"] = 91] = \"OEM_8\";\n        /**\n         * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n         */\n        KeyCode[KeyCode[\"OEM_102\"] = 92] = \"OEM_102\";\n        KeyCode[KeyCode[\"NUMPAD_0\"] = 93] = \"NUMPAD_0\";\n        KeyCode[KeyCode[\"NUMPAD_1\"] = 94] = \"NUMPAD_1\";\n        KeyCode[KeyCode[\"NUMPAD_2\"] = 95] = \"NUMPAD_2\";\n        KeyCode[KeyCode[\"NUMPAD_3\"] = 96] = \"NUMPAD_3\";\n        KeyCode[KeyCode[\"NUMPAD_4\"] = 97] = \"NUMPAD_4\";\n        KeyCode[KeyCode[\"NUMPAD_5\"] = 98] = \"NUMPAD_5\";\n        KeyCode[KeyCode[\"NUMPAD_6\"] = 99] = \"NUMPAD_6\";\n        KeyCode[KeyCode[\"NUMPAD_7\"] = 100] = \"NUMPAD_7\";\n        KeyCode[KeyCode[\"NUMPAD_8\"] = 101] = \"NUMPAD_8\";\n        KeyCode[KeyCode[\"NUMPAD_9\"] = 102] = \"NUMPAD_9\";\n        KeyCode[KeyCode[\"NUMPAD_MULTIPLY\"] = 103] = \"NUMPAD_MULTIPLY\";\n        KeyCode[KeyCode[\"NUMPAD_ADD\"] = 104] = \"NUMPAD_ADD\";\n        KeyCode[KeyCode[\"NUMPAD_SEPARATOR\"] = 105] = \"NUMPAD_SEPARATOR\";\n        KeyCode[KeyCode[\"NUMPAD_SUBTRACT\"] = 106] = \"NUMPAD_SUBTRACT\";\n        KeyCode[KeyCode[\"NUMPAD_DECIMAL\"] = 107] = \"NUMPAD_DECIMAL\";\n        KeyCode[KeyCode[\"NUMPAD_DIVIDE\"] = 108] = \"NUMPAD_DIVIDE\";\n        /**\n         * Cover all key codes when IME is processing input.\n         */\n        KeyCode[KeyCode[\"KEY_IN_COMPOSITION\"] = 109] = \"KEY_IN_COMPOSITION\";\n        KeyCode[KeyCode[\"ABNT_C1\"] = 110] = \"ABNT_C1\";\n        KeyCode[KeyCode[\"ABNT_C2\"] = 111] = \"ABNT_C2\";\n        /**\n         * Placed last to cover the length of the enum.\n         * Please do not depend on this value!\n         */\n        KeyCode[KeyCode[\"MAX_VALUE\"] = 112] = \"MAX_VALUE\";\n    })(KeyCode = exports.KeyCode || (exports.KeyCode = {}));\n    class KeyCodeStrMap {\n        constructor() {\n            this._keyCodeToStr = [];\n            this._strToKeyCode = Object.create(null);\n        }\n        define(keyCode, str) {\n            this._keyCodeToStr[keyCode] = str;\n            this._strToKeyCode[str.toLowerCase()] = keyCode;\n        }\n        keyCodeToStr(keyCode) {\n            return this._keyCodeToStr[keyCode];\n        }\n        strToKeyCode(str) {\n            return this._strToKeyCode[str.toLowerCase()] || KeyCode.Unknown;\n        }\n    }\n    const uiMap = new KeyCodeStrMap();\n    const userSettingsUSMap = new KeyCodeStrMap();\n    const userSettingsGeneralMap = new KeyCodeStrMap();\n    (function () {\n        function define(keyCode, uiLabel, usUserSettingsLabel = uiLabel, generalUserSettingsLabel = usUserSettingsLabel) {\n            uiMap.define(keyCode, uiLabel);\n            userSettingsUSMap.define(keyCode, usUserSettingsLabel);\n            userSettingsGeneralMap.define(keyCode, generalUserSettingsLabel);\n        }\n        define(KeyCode.Unknown, 'unknown');\n        define(KeyCode.Backspace, 'Backspace');\n        define(KeyCode.Tab, 'Tab');\n        define(KeyCode.Enter, 'Enter');\n        define(KeyCode.Shift, 'Shift');\n        define(KeyCode.Ctrl, 'Ctrl');\n        define(KeyCode.Alt, 'Alt');\n        define(KeyCode.PauseBreak, 'PauseBreak');\n        define(KeyCode.CapsLock, 'CapsLock');\n        define(KeyCode.Escape, 'Escape');\n        define(KeyCode.Space, 'Space');\n        define(KeyCode.PageUp, 'PageUp');\n        define(KeyCode.PageDown, 'PageDown');\n        define(KeyCode.End, 'End');\n        define(KeyCode.Home, 'Home');\n        define(KeyCode.LeftArrow, 'LeftArrow', 'Left');\n        define(KeyCode.UpArrow, 'UpArrow', 'Up');\n        define(KeyCode.RightArrow, 'RightArrow', 'Right');\n        define(KeyCode.DownArrow, 'DownArrow', 'Down');\n        define(KeyCode.Insert, 'Insert');\n        define(KeyCode.Delete, 'Delete');\n        define(KeyCode.KEY_0, '0');\n        define(KeyCode.KEY_1, '1');\n        define(KeyCode.KEY_2, '2');\n        define(KeyCode.KEY_3, '3');\n        define(KeyCode.KEY_4, '4');\n        define(KeyCode.KEY_5, '5');\n        define(KeyCode.KEY_6, '6');\n        define(KeyCode.KEY_7, '7');\n        define(KeyCode.KEY_8, '8');\n        define(KeyCode.KEY_9, '9');\n        define(KeyCode.KEY_A, 'A');\n        define(KeyCode.KEY_B, 'B');\n        define(KeyCode.KEY_C, 'C');\n        define(KeyCode.KEY_D, 'D');\n        define(KeyCode.KEY_E, 'E');\n        define(KeyCode.KEY_F, 'F');\n        define(KeyCode.KEY_G, 'G');\n        define(KeyCode.KEY_H, 'H');\n        define(KeyCode.KEY_I, 'I');\n        define(KeyCode.KEY_J, 'J');\n        define(KeyCode.KEY_K, 'K');\n        define(KeyCode.KEY_L, 'L');\n        define(KeyCode.KEY_M, 'M');\n        define(KeyCode.KEY_N, 'N');\n        define(KeyCode.KEY_O, 'O');\n        define(KeyCode.KEY_P, 'P');\n        define(KeyCode.KEY_Q, 'Q');\n        define(KeyCode.KEY_R, 'R');\n        define(KeyCode.KEY_S, 'S');\n        define(KeyCode.KEY_T, 'T');\n        define(KeyCode.KEY_U, 'U');\n        define(KeyCode.KEY_V, 'V');\n        define(KeyCode.KEY_W, 'W');\n        define(KeyCode.KEY_X, 'X');\n        define(KeyCode.KEY_Y, 'Y');\n        define(KeyCode.KEY_Z, 'Z');\n        define(KeyCode.Meta, 'Meta');\n        define(KeyCode.ContextMenu, 'ContextMenu');\n        define(KeyCode.F1, 'F1');\n        define(KeyCode.F2, 'F2');\n        define(KeyCode.F3, 'F3');\n        define(KeyCode.F4, 'F4');\n        define(KeyCode.F5, 'F5');\n        define(KeyCode.F6, 'F6');\n        define(KeyCode.F7, 'F7');\n        define(KeyCode.F8, 'F8');\n        define(KeyCode.F9, 'F9');\n        define(KeyCode.F10, 'F10');\n        define(KeyCode.F11, 'F11');\n        define(KeyCode.F12, 'F12');\n        define(KeyCode.F13, 'F13');\n        define(KeyCode.F14, 'F14');\n        define(KeyCode.F15, 'F15');\n        define(KeyCode.F16, 'F16');\n        define(KeyCode.F17, 'F17');\n        define(KeyCode.F18, 'F18');\n        define(KeyCode.F19, 'F19');\n        define(KeyCode.NumLock, 'NumLock');\n        define(KeyCode.ScrollLock, 'ScrollLock');\n        define(KeyCode.US_SEMICOLON, ';', ';', 'OEM_1');\n        define(KeyCode.US_EQUAL, '=', '=', 'OEM_PLUS');\n        define(KeyCode.US_COMMA, ',', ',', 'OEM_COMMA');\n        define(KeyCode.US_MINUS, '-', '-', 'OEM_MINUS');\n        define(KeyCode.US_DOT, '.', '.', 'OEM_PERIOD');\n        define(KeyCode.US_SLASH, '/', '/', 'OEM_2');\n        define(KeyCode.US_BACKTICK, '`', '`', 'OEM_3');\n        define(KeyCode.ABNT_C1, 'ABNT_C1');\n        define(KeyCode.ABNT_C2, 'ABNT_C2');\n        define(KeyCode.US_OPEN_SQUARE_BRACKET, '[', '[', 'OEM_4');\n        define(KeyCode.US_BACKSLASH, '\\\\', '\\\\', 'OEM_5');\n        define(KeyCode.US_CLOSE_SQUARE_BRACKET, ']', ']', 'OEM_6');\n        define(KeyCode.US_QUOTE, '\\'', '\\'', 'OEM_7');\n        define(KeyCode.OEM_8, 'OEM_8');\n        define(KeyCode.OEM_102, 'OEM_102');\n        define(KeyCode.NUMPAD_0, 'NumPad0');\n        define(KeyCode.NUMPAD_1, 'NumPad1');\n        define(KeyCode.NUMPAD_2, 'NumPad2');\n        define(KeyCode.NUMPAD_3, 'NumPad3');\n        define(KeyCode.NUMPAD_4, 'NumPad4');\n        define(KeyCode.NUMPAD_5, 'NumPad5');\n        define(KeyCode.NUMPAD_6, 'NumPad6');\n        define(KeyCode.NUMPAD_7, 'NumPad7');\n        define(KeyCode.NUMPAD_8, 'NumPad8');\n        define(KeyCode.NUMPAD_9, 'NumPad9');\n        define(KeyCode.NUMPAD_MULTIPLY, 'NumPad_Multiply');\n        define(KeyCode.NUMPAD_ADD, 'NumPad_Add');\n        define(KeyCode.NUMPAD_SEPARATOR, 'NumPad_Separator');\n        define(KeyCode.NUMPAD_SUBTRACT, 'NumPad_Subtract');\n        define(KeyCode.NUMPAD_DECIMAL, 'NumPad_Decimal');\n        define(KeyCode.NUMPAD_DIVIDE, 'NumPad_Divide');\n    })();\n    var KeyCodeUtils;\n    (function (KeyCodeUtils) {\n        function toString(keyCode) {\n            return uiMap.keyCodeToStr(keyCode);\n        }\n        KeyCodeUtils.toString = toString;\n        function fromString(key) {\n            return uiMap.strToKeyCode(key);\n        }\n        KeyCodeUtils.fromString = fromString;\n        function toUserSettingsUS(keyCode) {\n            return userSettingsUSMap.keyCodeToStr(keyCode);\n        }\n        KeyCodeUtils.toUserSettingsUS = toUserSettingsUS;\n        function toUserSettingsGeneral(keyCode) {\n            return userSettingsGeneralMap.keyCodeToStr(keyCode);\n        }\n        KeyCodeUtils.toUserSettingsGeneral = toUserSettingsGeneral;\n        function fromUserSettings(key) {\n            return userSettingsUSMap.strToKeyCode(key) || userSettingsGeneralMap.strToKeyCode(key);\n        }\n        KeyCodeUtils.fromUserSettings = fromUserSettings;\n    })(KeyCodeUtils = exports.KeyCodeUtils || (exports.KeyCodeUtils = {}));\n    /**\n     * Binary encoding strategy:\n     * ```\n     *    1111 11\n     *    5432 1098 7654 3210\n     *    ---- CSAW KKKK KKKK\n     *  C = bit 11 = ctrlCmd flag\n     *  S = bit 10 = shift flag\n     *  A = bit 9 = alt flag\n     *  W = bit 8 = winCtrl flag\n     *  K = bits 0-7 = key code\n     * ```\n     */\n    var BinaryKeybindingsMask;\n    (function (BinaryKeybindingsMask) {\n        BinaryKeybindingsMask[BinaryKeybindingsMask[\"CtrlCmd\"] = 2048] = \"CtrlCmd\";\n        BinaryKeybindingsMask[BinaryKeybindingsMask[\"Shift\"] = 1024] = \"Shift\";\n        BinaryKeybindingsMask[BinaryKeybindingsMask[\"Alt\"] = 512] = \"Alt\";\n        BinaryKeybindingsMask[BinaryKeybindingsMask[\"WinCtrl\"] = 256] = \"WinCtrl\";\n        BinaryKeybindingsMask[BinaryKeybindingsMask[\"KeyCode\"] = 255] = \"KeyCode\";\n    })(BinaryKeybindingsMask || (BinaryKeybindingsMask = {}));\n    var KeyMod;\n    (function (KeyMod) {\n        KeyMod[KeyMod[\"CtrlCmd\"] = 2048] = \"CtrlCmd\";\n        KeyMod[KeyMod[\"Shift\"] = 1024] = \"Shift\";\n        KeyMod[KeyMod[\"Alt\"] = 512] = \"Alt\";\n        KeyMod[KeyMod[\"WinCtrl\"] = 256] = \"WinCtrl\";\n    })(KeyMod = exports.KeyMod || (exports.KeyMod = {}));\n    function KeyChord(firstPart, secondPart) {\n        const chordPart = ((secondPart & 0x0000FFFF) << 16) >>> 0;\n        return (firstPart | chordPart) >>> 0;\n    }\n    exports.KeyChord = KeyChord;\n    function createKeybinding(keybinding, OS) {\n        if (keybinding === 0) {\n            return null;\n        }\n        const firstPart = (keybinding & 0x0000FFFF) >>> 0;\n        const chordPart = (keybinding & 0xFFFF0000) >>> 16;\n        if (chordPart !== 0) {\n            return new ChordKeybinding([\n                createSimpleKeybinding(firstPart, OS),\n                createSimpleKeybinding(chordPart, OS)\n            ]);\n        }\n        return new ChordKeybinding([createSimpleKeybinding(firstPart, OS)]);\n    }\n    exports.createKeybinding = createKeybinding;\n    function createSimpleKeybinding(keybinding, OS) {\n        const ctrlCmd = (keybinding & BinaryKeybindingsMask.CtrlCmd ? true : false);\n        const winCtrl = (keybinding & BinaryKeybindingsMask.WinCtrl ? true : false);\n        const ctrlKey = (OS === platform_1.OperatingSystem.Macintosh ? winCtrl : ctrlCmd);\n        const shiftKey = (keybinding & BinaryKeybindingsMask.Shift ? true : false);\n        const altKey = (keybinding & BinaryKeybindingsMask.Alt ? true : false);\n        const metaKey = (OS === platform_1.OperatingSystem.Macintosh ? ctrlCmd : winCtrl);\n        const keyCode = (keybinding & BinaryKeybindingsMask.KeyCode);\n        return new SimpleKeybinding(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n    }\n    exports.createSimpleKeybinding = createSimpleKeybinding;\n    class SimpleKeybinding {\n        constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n            this.ctrlKey = ctrlKey;\n            this.shiftKey = shiftKey;\n            this.altKey = altKey;\n            this.metaKey = metaKey;\n            this.keyCode = keyCode;\n        }\n        equals(other) {\n            return (this.ctrlKey === other.ctrlKey\n                && this.shiftKey === other.shiftKey\n                && this.altKey === other.altKey\n                && this.metaKey === other.metaKey\n                && this.keyCode === other.keyCode);\n        }\n        getHashCode() {\n            const ctrl = this.ctrlKey ? '1' : '0';\n            const shift = this.shiftKey ? '1' : '0';\n            const alt = this.altKey ? '1' : '0';\n            const meta = this.metaKey ? '1' : '0';\n            return `${ctrl}${shift}${alt}${meta}${this.keyCode}`;\n        }\n        isModifierKey() {\n            return (this.keyCode === KeyCode.Unknown\n                || this.keyCode === KeyCode.Ctrl\n                || this.keyCode === KeyCode.Meta\n                || this.keyCode === KeyCode.Alt\n                || this.keyCode === KeyCode.Shift);\n        }\n        toChord() {\n            return new ChordKeybinding([this]);\n        }\n        /**\n         * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n         */\n        isDuplicateModifierCase() {\n            return ((this.ctrlKey && this.keyCode === KeyCode.Ctrl)\n                || (this.shiftKey && this.keyCode === KeyCode.Shift)\n                || (this.altKey && this.keyCode === KeyCode.Alt)\n                || (this.metaKey && this.keyCode === KeyCode.Meta));\n        }\n    }\n    exports.SimpleKeybinding = SimpleKeybinding;\n    class ChordKeybinding {\n        constructor(parts) {\n            if (parts.length === 0) {\n                throw errors_1.illegalArgument(`parts`);\n            }\n            this.parts = parts;\n        }\n        getHashCode() {\n            let result = '';\n            for (let i = 0, len = this.parts.length; i < len; i++) {\n                if (i !== 0) {\n                    result += ';';\n                }\n                result += this.parts[i].getHashCode();\n            }\n            return result;\n        }\n        equals(other) {\n            if (other === null) {\n                return false;\n            }\n            if (this.parts.length !== other.parts.length) {\n                return false;\n            }\n            for (let i = 0; i < this.parts.length; i++) {\n                if (!this.parts[i].equals(other.parts[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    exports.ChordKeybinding = ChordKeybinding;\n    class ResolvedKeybindingPart {\n        constructor(ctrlKey, shiftKey, altKey, metaKey, kbLabel, kbAriaLabel) {\n            this.ctrlKey = ctrlKey;\n            this.shiftKey = shiftKey;\n            this.altKey = altKey;\n            this.metaKey = metaKey;\n            this.keyLabel = kbLabel;\n            this.keyAriaLabel = kbAriaLabel;\n        }\n    }\n    exports.ResolvedKeybindingPart = ResolvedKeybindingPart;\n    /**\n     * A resolved keybinding. Can be a simple keybinding or a chord keybinding.\n     */\n    class ResolvedKeybinding {\n    }\n    exports.ResolvedKeybinding = ResolvedKeybinding;\n});\n",null]}