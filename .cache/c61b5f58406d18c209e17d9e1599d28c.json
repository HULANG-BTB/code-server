{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchemaCommon.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/contrib/tasks/common/problemMatcher\"], function (require, exports, nls, problemMatcher_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const schema = {\n        definitions: {\n            showOutputType: {\n                type: 'string',\n                enum: ['always', 'silent', 'never']\n            },\n            options: {\n                type: 'object',\n                description: nls.localize('JsonSchema.options', 'Additional command options'),\n                properties: {\n                    cwd: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.options.cwd', 'The current working directory of the executed program or script. If omitted Code\\'s current workspace root is used.')\n                    },\n                    env: {\n                        type: 'object',\n                        additionalProperties: {\n                            type: 'string'\n                        },\n                        description: nls.localize('JsonSchema.options.env', 'The environment of the executed program or shell. If omitted the parent process\\' environment is used.')\n                    }\n                },\n                additionalProperties: {\n                    type: ['string', 'array', 'object']\n                }\n            },\n            problemMatcherType: {\n                oneOf: [\n                    {\n                        type: 'string',\n                    },\n                    problemMatcher_1.Schemas.LegacyProblemMatcher,\n                    {\n                        type: 'array',\n                        items: {\n                            anyOf: [\n                                problemMatcher_1.Schemas.LegacyProblemMatcher,\n                                {\n                                    type: 'string',\n                                }\n                            ]\n                        }\n                    }\n                ]\n            },\n            shellConfiguration: {\n                type: 'object',\n                additionalProperties: false,\n                description: nls.localize('JsonSchema.shellConfiguration', 'Configures the shell to be used.'),\n                properties: {\n                    executable: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.shell.executable', 'The shell to be used.')\n                    },\n                    args: {\n                        type: 'array',\n                        description: nls.localize('JsonSchema.shell.args', 'The shell arguments.'),\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                }\n            },\n            commandConfiguration: {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    command: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                    },\n                    args: {\n                        type: 'array',\n                        description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    options: {\n                        $ref: '#/definitions/options'\n                    }\n                }\n            },\n            taskDescription: {\n                type: 'object',\n                required: ['taskName'],\n                additionalProperties: false,\n                properties: {\n                    taskName: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.tasks.taskName', \"The task's name\")\n                    },\n                    command: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                    },\n                    args: {\n                        type: 'array',\n                        description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.'),\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    options: {\n                        $ref: '#/definitions/options'\n                    },\n                    windows: {\n                        $ref: '#/definitions/commandConfiguration',\n                        description: nls.localize('JsonSchema.tasks.windows', 'Windows specific command configuration')\n                    },\n                    osx: {\n                        $ref: '#/definitions/commandConfiguration',\n                        description: nls.localize('JsonSchema.tasks.mac', 'Mac specific command configuration')\n                    },\n                    linux: {\n                        $ref: '#/definitions/commandConfiguration',\n                        description: nls.localize('JsonSchema.tasks.linux', 'Linux specific command configuration')\n                    },\n                    suppressTaskName: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.tasks.suppressTaskName', 'Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.'),\n                        default: true\n                    },\n                    showOutput: {\n                        $ref: '#/definitions/showOutputType',\n                        description: nls.localize('JsonSchema.tasks.showOutput', 'Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.')\n                    },\n                    echoCommand: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n                        default: true\n                    },\n                    isWatching: {\n                        type: 'boolean',\n                        deprecationMessage: nls.localize('JsonSchema.tasks.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n                        description: nls.localize('JsonSchema.tasks.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n                        default: true\n                    },\n                    isBackground: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n                        default: true\n                    },\n                    promptOnClose: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n                        default: false\n                    },\n                    isBuildCommand: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.tasks.build', 'Maps this task to Code\\'s default build command.'),\n                        default: true\n                    },\n                    isTestCommand: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.tasks.test', 'Maps this task to Code\\'s default test command.'),\n                        default: true\n                    },\n                    problemMatcher: {\n                        $ref: '#/definitions/problemMatcherType',\n                        description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n                    }\n                }\n            },\n            taskRunnerConfiguration: {\n                type: 'object',\n                required: [],\n                properties: {\n                    command: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n                    },\n                    args: {\n                        type: 'array',\n                        description: nls.localize('JsonSchema.args', 'Additional arguments passed to the command.'),\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    options: {\n                        $ref: '#/definitions/options'\n                    },\n                    showOutput: {\n                        $ref: '#/definitions/showOutputType',\n                        description: nls.localize('JsonSchema.showOutput', 'Controls whether the output of the running task is shown or not. If omitted \\'always\\' is used.')\n                    },\n                    isWatching: {\n                        type: 'boolean',\n                        deprecationMessage: nls.localize('JsonSchema.watching.deprecation', 'Deprecated. Use isBackground instead.'),\n                        description: nls.localize('JsonSchema.watching', 'Whether the executed task is kept alive and is watching the file system.'),\n                        default: true\n                    },\n                    isBackground: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.background', 'Whether the executed task is kept alive and is running in the background.'),\n                        default: true\n                    },\n                    promptOnClose: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.promptOnClose', 'Whether the user is prompted when VS Code closes with a running background task.'),\n                        default: false\n                    },\n                    echoCommand: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.echoCommand', 'Controls whether the executed command is echoed to the output. Default is false.'),\n                        default: true\n                    },\n                    suppressTaskName: {\n                        type: 'boolean',\n                        description: nls.localize('JsonSchema.suppressTaskName', 'Controls whether the task name is added as an argument to the command. Default is false.'),\n                        default: true\n                    },\n                    taskSelector: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.taskSelector', 'Prefix to indicate that an argument is task.')\n                    },\n                    problemMatcher: {\n                        $ref: '#/definitions/problemMatcherType',\n                        description: nls.localize('JsonSchema.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n                    },\n                    tasks: {\n                        type: 'array',\n                        description: nls.localize('JsonSchema.tasks', 'The task configurations. Usually these are enrichments of task already defined in the external task runner.'),\n                        items: {\n                            type: 'object',\n                            $ref: '#/definitions/taskDescription'\n                        }\n                    }\n                }\n            }\n        }\n    };\n    exports.default = schema;\n});\n",null]}