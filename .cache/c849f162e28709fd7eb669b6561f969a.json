{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform = require(\"vs/platform/registry/common/platform\");\nvar event_1 = require(\"vs/base/common/event\");\nexports.Extensions = {\n    JSONContribution: 'base.contributions.json'\n};\nfunction normalizeId(id) {\n    if (id.length > 0 && id.charAt(id.length - 1) === '#') {\n        return id.substring(0, id.length - 1);\n    }\n    return id;\n}\nvar JSONContributionRegistry = /** @class */ (function () {\n    function JSONContributionRegistry() {\n        this._onDidChangeSchema = new event_1.Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.schemasById = {};\n    }\n    JSONContributionRegistry.prototype.registerSchema = function (uri, unresolvedSchemaContent) {\n        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n        this._onDidChangeSchema.fire(uri);\n    };\n    JSONContributionRegistry.prototype.notifySchemaChanged = function (uri) {\n        this._onDidChangeSchema.fire(uri);\n    };\n    JSONContributionRegistry.prototype.getSchemaContributions = function () {\n        return {\n            schemas: this.schemasById,\n        };\n    };\n    return JSONContributionRegistry;\n}());\nvar jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(exports.Extensions.JSONContribution, jsonContributionRegistry);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,+DAAiE;AACjE,8CAAsD;AAEzC,QAAA,UAAU,GAAG;IACzB,gBAAgB,EAAE,yBAAyB;CAC3C,CAAC;AA8BF,SAAS,WAAW,CAAC,EAAU;IAC9B,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACtD,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACtC;IACD,OAAO,EAAE,CAAC;AACX,CAAC;AAID;IAOC;QAHiB,uBAAkB,GAAG,IAAI,eAAO,EAAU,CAAC;QACnD,sBAAiB,GAAkB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QAGzE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACvB,CAAC;IAEM,iDAAc,GAArB,UAAsB,GAAW,EAAE,uBAAoC;QACtE,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,uBAAuB,CAAC;QAC7D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,sDAAmB,GAA1B,UAA2B,GAAW;QACrC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,yDAAsB,GAA7B;QACC,OAAO;YACN,OAAO,EAAE,IAAI,CAAC,WAAW;SACzB,CAAC;IACH,CAAC;IAEF,+BAAC;AAAD,CAAC,AA1BD,IA0BC;AAED,IAAM,wBAAwB,GAAG,IAAI,wBAAwB,EAAE,CAAC;AAChE,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as platform from 'vs/platform/registry/common/platform';\nimport { Event, Emitter } from 'vs/base/common/event';\n\nexport const Extensions = {\n\tJSONContribution: 'base.contributions.json'\n};\n\nexport interface ISchemaContributions {\n\tschemas: { [id: string]: IJSONSchema };\n}\n\nexport interface IJSONContributionRegistry {\n\n\treadonly onDidChangeSchema: Event<string>;\n\n\t/**\n\t * Register a schema to the registry.\n\t */\n\tregisterSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void;\n\n\n\t/**\n\t * Notifies all listeners that the content of the given schema has changed.\n\t * @param uri The id of the schema\n\t */\n\tnotifySchemaChanged(uri: string): void;\n\n\t/**\n\t * Get all schemas\n\t */\n\tgetSchemaContributions(): ISchemaContributions;\n}\n\n\n\nfunction normalizeId(id: string) {\n\tif (id.length > 0 && id.charAt(id.length - 1) === '#') {\n\t\treturn id.substring(0, id.length - 1);\n\t}\n\treturn id;\n}\n\n\n\nclass JSONContributionRegistry implements IJSONContributionRegistry {\n\n\tprivate schemasById: { [id: string]: IJSONSchema };\n\n\tprivate readonly _onDidChangeSchema = new Emitter<string>();\n\treadonly onDidChangeSchema: Event<string> = this._onDidChangeSchema.event;\n\n\tconstructor() {\n\t\tthis.schemasById = {};\n\t}\n\n\tpublic registerSchema(uri: string, unresolvedSchemaContent: IJSONSchema): void {\n\t\tthis.schemasById[normalizeId(uri)] = unresolvedSchemaContent;\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n\tpublic notifySchemaChanged(uri: string): void {\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n\tpublic getSchemaContributions(): ISchemaContributions {\n\t\treturn {\n\t\t\tschemas: this.schemasById,\n\t\t};\n\t}\n\n}\n\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);"]}]}