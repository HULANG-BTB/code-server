{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nif (typeof TextDecoder !== 'undefined') {\n    exports.createStringBuilder = function (capacity) { return new StringBuilder(capacity); };\n}\nelse {\n    exports.createStringBuilder = function (capacity) { return new CompatStringBuilder(); };\n}\nvar StringBuilder = /** @class */ (function () {\n    function StringBuilder(capacity) {\n        this._decoder = new TextDecoder('UTF-16LE');\n        this._capacity = capacity | 0;\n        this._buffer = new Uint16Array(this._capacity);\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    StringBuilder.prototype.reset = function () {\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    };\n    StringBuilder.prototype.build = function () {\n        if (this._completedStrings !== null) {\n            this._flushBuffer();\n            return this._completedStrings.join('');\n        }\n        return this._buildBuffer();\n    };\n    StringBuilder.prototype._buildBuffer = function () {\n        if (this._bufferLength === 0) {\n            return '';\n        }\n        var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n        return this._decoder.decode(view);\n    };\n    StringBuilder.prototype._flushBuffer = function () {\n        var bufferString = this._buildBuffer();\n        this._bufferLength = 0;\n        if (this._completedStrings === null) {\n            this._completedStrings = [bufferString];\n        }\n        else {\n            this._completedStrings[this._completedStrings.length] = bufferString;\n        }\n    };\n    StringBuilder.prototype.write1 = function (charCode) {\n        var remainingSpace = this._capacity - this._bufferLength;\n        if (remainingSpace <= 1) {\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n                this._flushBuffer();\n            }\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    };\n    StringBuilder.prototype.appendASCII = function (charCode) {\n        if (this._bufferLength === this._capacity) {\n            // buffer is full\n            this._flushBuffer();\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    };\n    StringBuilder.prototype.appendASCIIString = function (str) {\n        var strLen = str.length;\n        if (this._bufferLength + strLen >= this._capacity) {\n            // This string does not fit in the remaining buffer space\n            this._flushBuffer();\n            this._completedStrings[this._completedStrings.length] = str;\n            return;\n        }\n        for (var i = 0; i < strLen; i++) {\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\n        }\n    };\n    return StringBuilder;\n}());\nvar CompatStringBuilder = /** @class */ (function () {\n    function CompatStringBuilder() {\n        this._pieces = [];\n        this._piecesLen = 0;\n    }\n    CompatStringBuilder.prototype.reset = function () {\n        this._pieces = [];\n        this._piecesLen = 0;\n    };\n    CompatStringBuilder.prototype.build = function () {\n        return this._pieces.join('');\n    };\n    CompatStringBuilder.prototype.write1 = function (charCode) {\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n    };\n    CompatStringBuilder.prototype.appendASCII = function (charCode) {\n        this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n    };\n    CompatStringBuilder.prototype.appendASCIIString = function (str) {\n        this._pieces[this._piecesLen++] = str;\n    };\n    return CompatStringBuilder;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/core/stringBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\n\ndeclare var TextDecoder: any; // TODO@TypeScript\ninterface TextDecoder {\n\tdecode(view: Uint16Array): string;\n}\n\nexport interface IStringBuilder {\n\tbuild(): string;\n\treset(): void;\n\twrite1(charCode: number): void;\n\tappendASCII(charCode: number): void;\n\tappendASCIIString(str: string): void;\n}\n\nexport let createStringBuilder: (capacity: number) => IStringBuilder;\n\nif (typeof TextDecoder !== 'undefined') {\n\tcreateStringBuilder = (capacity) => new StringBuilder(capacity);\n} else {\n\tcreateStringBuilder = (capacity) => new CompatStringBuilder();\n}\n\nclass StringBuilder implements IStringBuilder {\n\n\tprivate readonly _decoder: TextDecoder;\n\tprivate readonly _capacity: number;\n\tprivate readonly _buffer: Uint16Array;\n\n\tprivate _completedStrings: string[] | null;\n\tprivate _bufferLength: number;\n\n\tconstructor(capacity: number) {\n\t\tthis._decoder = new TextDecoder('UTF-16LE');\n\t\tthis._capacity = capacity | 0;\n\t\tthis._buffer = new Uint16Array(this._capacity);\n\n\t\tthis._completedStrings = null;\n\t\tthis._bufferLength = 0;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._completedStrings = null;\n\t\tthis._bufferLength = 0;\n\t}\n\n\tpublic build(): string {\n\t\tif (this._completedStrings !== null) {\n\t\t\tthis._flushBuffer();\n\t\t\treturn this._completedStrings.join('');\n\t\t}\n\t\treturn this._buildBuffer();\n\t}\n\n\tprivate _buildBuffer(): string {\n\t\tif (this._bufferLength === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n\t\treturn this._decoder.decode(view);\n\t}\n\n\tprivate _flushBuffer(): void {\n\t\tconst bufferString = this._buildBuffer();\n\t\tthis._bufferLength = 0;\n\n\t\tif (this._completedStrings === null) {\n\t\t\tthis._completedStrings = [bufferString];\n\t\t} else {\n\t\t\tthis._completedStrings[this._completedStrings.length] = bufferString;\n\t\t}\n\t}\n\n\tpublic write1(charCode: number): void {\n\t\tconst remainingSpace = this._capacity - this._bufferLength;\n\n\t\tif (remainingSpace <= 1) {\n\t\t\tif (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n\t\t\t\tthis._flushBuffer();\n\t\t\t}\n\t\t}\n\n\t\tthis._buffer[this._bufferLength++] = charCode;\n\t}\n\n\tpublic appendASCII(charCode: number): void {\n\t\tif (this._bufferLength === this._capacity) {\n\t\t\t// buffer is full\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\tthis._buffer[this._bufferLength++] = charCode;\n\t}\n\n\tpublic appendASCIIString(str: string): void {\n\t\tconst strLen = str.length;\n\n\t\tif (this._bufferLength + strLen >= this._capacity) {\n\t\t\t// This string does not fit in the remaining buffer space\n\n\t\t\tthis._flushBuffer();\n\t\t\tthis._completedStrings![this._completedStrings!.length] = str;\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = 0; i < strLen; i++) {\n\t\t\tthis._buffer[this._bufferLength++] = str.charCodeAt(i);\n\t\t}\n\t}\n}\n\nclass CompatStringBuilder implements IStringBuilder {\n\n\tprivate _pieces: string[];\n\tprivate _piecesLen: number;\n\n\tconstructor() {\n\t\tthis._pieces = [];\n\t\tthis._piecesLen = 0;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._pieces = [];\n\t\tthis._piecesLen = 0;\n\t}\n\n\tpublic build(): string {\n\t\treturn this._pieces.join('');\n\t}\n\n\tpublic write1(charCode: number): void {\n\t\tthis._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n\t}\n\n\tpublic appendASCII(charCode: number): void {\n\t\tthis._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n\t}\n\n\tpublic appendASCIIString(str: string): void {\n\t\tthis._pieces[this._piecesLen++] = str;\n\t}\n}\n"]}]}