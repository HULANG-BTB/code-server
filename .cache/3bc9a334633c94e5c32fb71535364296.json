{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostWebview.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostWebview.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/uri\", \"vs/workbench/api/node/extHostTypeConverters\", \"../common/extHost.protocol\", \"./extHostTypes\"], function (require, exports, event_1, uri_1, typeConverters, extHost_protocol_1, extHostTypes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostWebview {\n        constructor(handle, proxy, options) {\n            this._isDisposed = false;\n            this._onMessageEmitter = new event_1.Emitter();\n            this.onDidReceiveMessage = this._onMessageEmitter.event;\n            this._handle = handle;\n            this._proxy = proxy;\n            this._options = options;\n        }\n        dispose() {\n            this._onMessageEmitter.dispose();\n        }\n        get html() {\n            this.assertNotDisposed();\n            return this._html;\n        }\n        set html(value) {\n            this.assertNotDisposed();\n            if (this._html !== value) {\n                this._html = value;\n                this._proxy.$setHtml(this._handle, value);\n            }\n        }\n        get options() {\n            this.assertNotDisposed();\n            return this._options;\n        }\n        set options(newOptions) {\n            this.assertNotDisposed();\n            this._proxy.$setOptions(this._handle, newOptions);\n            this._options = newOptions;\n        }\n        postMessage(message) {\n            this.assertNotDisposed();\n            return this._proxy.$postMessage(this._handle, message);\n        }\n        assertNotDisposed() {\n            if (this._isDisposed) {\n                throw new Error('Webview is disposed');\n            }\n        }\n    }\n    exports.ExtHostWebview = ExtHostWebview;\n    class ExtHostWebviewPanel {\n        constructor(handle, proxy, viewType, title, viewColumn, editorOptions, webview) {\n            this._isDisposed = false;\n            this._visible = true;\n            this._active = true;\n            this._onDisposeEmitter = new event_1.Emitter();\n            this.onDidDispose = this._onDisposeEmitter.event;\n            this._onDidChangeViewStateEmitter = new event_1.Emitter();\n            this.onDidChangeViewState = this._onDidChangeViewStateEmitter.event;\n            this._handle = handle;\n            this._proxy = proxy;\n            this._viewType = viewType;\n            this._options = editorOptions;\n            this._viewColumn = viewColumn;\n            this._title = title;\n            this._webview = webview;\n        }\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this._onDisposeEmitter.fire();\n            this._proxy.$disposeWebview(this._handle);\n            this._webview.dispose();\n            this._onDisposeEmitter.dispose();\n            this._onDidChangeViewStateEmitter.dispose();\n        }\n        get webview() {\n            this.assertNotDisposed();\n            return this._webview;\n        }\n        get viewType() {\n            this.assertNotDisposed();\n            return this._viewType;\n        }\n        get title() {\n            this.assertNotDisposed();\n            return this._title;\n        }\n        set title(value) {\n            this.assertNotDisposed();\n            if (this._title !== value) {\n                this._title = value;\n                this._proxy.$setTitle(this._handle, value);\n            }\n        }\n        get iconPath() {\n            this.assertNotDisposed();\n            return this._iconPath;\n        }\n        set iconPath(value) {\n            this.assertNotDisposed();\n            if (this._iconPath !== value) {\n                this._iconPath = value;\n                this._proxy.$setIconPath(this._handle, uri_1.URI.isUri(value) ? { light: value, dark: value } : value);\n            }\n        }\n        get options() {\n            return this._options;\n        }\n        get viewColumn() {\n            this.assertNotDisposed();\n            if (typeof this._viewColumn === 'number' && this._viewColumn < 0) {\n                // We are using a symbolic view column\n                // Return undefined instead to indicate that the real view column is currently unknown but will be resolved.\n                return undefined;\n            }\n            return this._viewColumn;\n        }\n        _setViewColumn(value) {\n            this.assertNotDisposed();\n            this._viewColumn = value;\n        }\n        get active() {\n            this.assertNotDisposed();\n            return this._active;\n        }\n        _setActive(value) {\n            this.assertNotDisposed();\n            this._active = value;\n        }\n        get visible() {\n            this.assertNotDisposed();\n            return this._visible;\n        }\n        _setVisible(value) {\n            this.assertNotDisposed();\n            this._visible = value;\n        }\n        postMessage(message) {\n            this.assertNotDisposed();\n            return this._proxy.$postMessage(this._handle, message);\n        }\n        reveal(viewColumn, preserveFocus) {\n            this.assertNotDisposed();\n            this._proxy.$reveal(this._handle, {\n                viewColumn: viewColumn ? typeConverters.ViewColumn.from(viewColumn) : undefined,\n                preserveFocus: !!preserveFocus\n            });\n        }\n        assertNotDisposed() {\n            if (this._isDisposed) {\n                throw new Error('Webview is disposed');\n            }\n        }\n    }\n    exports.ExtHostWebviewPanel = ExtHostWebviewPanel;\n    class ExtHostWebviews {\n        constructor(mainContext) {\n            this._webviewPanels = new Map();\n            this._serializers = new Map();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadWebviews);\n        }\n        static newHandle() {\n            return ExtHostWebviews.webviewHandlePool++ + '';\n        }\n        createWebviewPanel(extension, viewType, title, showOptions, options = {}) {\n            const viewColumn = typeof showOptions === 'object' ? showOptions.viewColumn : showOptions;\n            const webviewShowOptions = {\n                viewColumn: typeConverters.ViewColumn.from(viewColumn),\n                preserveFocus: typeof showOptions === 'object' && !!showOptions.preserveFocus\n            };\n            const handle = ExtHostWebviews.newHandle();\n            this._proxy.$createWebviewPanel(handle, viewType, title, webviewShowOptions, options, extension.identifier, extension.extensionLocation);\n            const webview = new ExtHostWebview(handle, this._proxy, options);\n            const panel = new ExtHostWebviewPanel(handle, this._proxy, viewType, title, viewColumn, options, webview);\n            this._webviewPanels.set(handle, panel);\n            return panel;\n        }\n        registerWebviewPanelSerializer(viewType, serializer) {\n            if (this._serializers.has(viewType)) {\n                throw new Error(`Serializer for '${viewType}' already registered`);\n            }\n            this._serializers.set(viewType, serializer);\n            this._proxy.$registerSerializer(viewType);\n            return new extHostTypes_1.Disposable(() => {\n                this._serializers.delete(viewType);\n                this._proxy.$unregisterSerializer(viewType);\n            });\n        }\n        $onMessage(handle, message) {\n            const panel = this.getWebviewPanel(handle);\n            if (panel) {\n                panel.webview._onMessageEmitter.fire(message);\n            }\n        }\n        $onDidChangeWebviewPanelViewState(handle, newState) {\n            const panel = this.getWebviewPanel(handle);\n            if (!panel) {\n                return;\n            }\n            const viewColumn = typeConverters.ViewColumn.to(newState.position);\n            if (panel.active !== newState.active || panel.visible !== newState.visible || panel.viewColumn !== viewColumn) {\n                panel._setActive(newState.active);\n                panel._setVisible(newState.visible);\n                panel._setViewColumn(viewColumn);\n                panel._onDidChangeViewStateEmitter.fire({ webviewPanel: panel });\n            }\n        }\n        $onDidDisposeWebviewPanel(handle) {\n            const panel = this.getWebviewPanel(handle);\n            if (panel) {\n                panel.dispose();\n                this._webviewPanels.delete(handle);\n            }\n            return Promise.resolve(undefined);\n        }\n        $deserializeWebviewPanel(webviewHandle, viewType, title, state, position, options) {\n            const serializer = this._serializers.get(viewType);\n            if (!serializer) {\n                return Promise.reject(new Error(`No serializer found for '${viewType}'`));\n            }\n            const webview = new ExtHostWebview(webviewHandle, this._proxy, options);\n            const revivedPanel = new ExtHostWebviewPanel(webviewHandle, this._proxy, viewType, title, typeof position === 'number' && position >= 0 ? typeConverters.ViewColumn.to(position) : undefined, options, webview);\n            this._webviewPanels.set(webviewHandle, revivedPanel);\n            return Promise.resolve(serializer.deserializeWebviewPanel(revivedPanel, state));\n        }\n        getWebviewPanel(handle) {\n            return this._webviewPanels.get(handle);\n        }\n    }\n    ExtHostWebviews.webviewHandlePool = 1;\n    exports.ExtHostWebviews = ExtHostWebviews;\n});\n",null]}