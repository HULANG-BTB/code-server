{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/quickOpen/common/quickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/quickOpen/common/quickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IQuickOpenService = instantiation_1.createDecorator('quickOpenService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/quickOpen/common/quickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/quickOpen/common/quickOpen.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,gFAAiF;AAQpE,QAAA,iBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IQuickNavigateConfiguration, IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IShowOptions {\n\tquickNavigateConfiguration?: IQuickNavigateConfiguration;\n\tinputSelection?: { start: number; end: number; };\n\tautoFocus?: IAutoFocus;\n}\n\nexport const IQuickOpenService = createDecorator<IQuickOpenService>('quickOpenService');\n\nexport interface IQuickOpenService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Asks the container to show the quick open control with the optional prefix set. If the optional parameter\n\t * is set for quick navigation mode, the quick open control will quickly navigate when the quick navigate\n\t * key is pressed and will run the selection after the ctrl key is released.\n\t *\n\t * The returned promise completes when quick open is closing.\n\t */\n\tshow(prefix?: string, options?: IShowOptions): Promise<void>;\n\n\t/**\n\t * Allows to navigate from the outside in an opened picker.\n\t */\n\tnavigate(next: boolean, quickNavigate?: IQuickNavigateConfiguration): void;\n\n\t/**\n\t * Accepts the selected value in quick open if visible.\n\t */\n\taccept(): void;\n\n\t/**\n\t * Focus into the quick open if visible.\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Closes any opened quick open.\n\t */\n\tclose(): void;\n\n\t/**\n\t * Allows to register on the event that quick open is showing\n\t */\n\tonShow: Event<void>;\n\n\t/**\n\t * Allows to register on the event that quick open is hiding\n\t */\n\tonHide: Event<void>;\n}\n"]}]}