{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/mime\", \"vs/base/common/resources\", \"vs/editor/common/modes/modesRegistry\", \"vs/editor/common/services/modeService\", \"vs/editor/common/services/modeServiceImpl\", \"vs/platform/configuration/common/configuration\", \"vs/platform/environment/common/environment\", \"vs/platform/files/common/files\", \"vs/workbench/services/extensions/common/extensions\", \"vs/workbench/services/extensions/common/extensionsRegistry\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, nls, mime, resources, modesRegistry_1, modeService_1, modeServiceImpl_1, configuration_1, environment_1, files_1, extensions_1, extensionsRegistry_1, extensions_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.languagesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'languages',\n        jsonSchema: {\n            description: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),\n            type: 'array',\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { id: '${1:languageId}', aliases: ['${2:label}'], extensions: ['${3:extension}'], configuration: './language-configuration.json' } }],\n                properties: {\n                    id: {\n                        description: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),\n                        type: 'string'\n                    },\n                    aliases: {\n                        description: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    extensions: {\n                        description: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),\n                        default: ['.foo'],\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    filenames: {\n                        description: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    filenamePatterns: {\n                        description: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    mimetypes: {\n                        description: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    },\n                    firstLine: {\n                        description: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),\n                        type: 'string'\n                    },\n                    configuration: {\n                        description: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),\n                        type: 'string',\n                        default: './language-configuration.json'\n                    }\n                }\n            }\n        }\n    });\n    let WorkbenchModeServiceImpl = class WorkbenchModeServiceImpl extends modeServiceImpl_1.ModeServiceImpl {\n        constructor(extensionService, configurationService, environmentService) {\n            super(environmentService.verbose || environmentService.isExtensionDevelopment || !environmentService.isBuilt);\n            this._configurationService = configurationService;\n            this._extensionService = extensionService;\n            exports.languagesExtPoint.setHandler((extensions) => {\n                let allValidLanguages = [];\n                for (let i = 0, len = extensions.length; i < len; i++) {\n                    let extension = extensions[i];\n                    if (!Array.isArray(extension.value)) {\n                        extension.collector.error(nls.localize('invalid', \"Invalid `contributes.{0}`. Expected an array.\", exports.languagesExtPoint.name));\n                        continue;\n                    }\n                    for (let j = 0, lenJ = extension.value.length; j < lenJ; j++) {\n                        let ext = extension.value[j];\n                        if (isValidLanguageExtensionPoint(ext, extension.collector)) {\n                            let configuration = undefined;\n                            if (ext.configuration) {\n                                configuration = resources.joinPath(extension.description.extensionLocation, ext.configuration);\n                            }\n                            allValidLanguages.push({\n                                id: ext.id,\n                                extensions: ext.extensions,\n                                filenames: ext.filenames,\n                                filenamePatterns: ext.filenamePatterns,\n                                firstLine: ext.firstLine,\n                                aliases: ext.aliases,\n                                mimetypes: ext.mimetypes,\n                                configuration: configuration\n                            });\n                        }\n                    }\n                }\n                modesRegistry_1.ModesRegistry.setDynamicLanguages(allValidLanguages);\n            });\n            this.updateMime();\n            this._configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration(files_1.FILES_ASSOCIATIONS_CONFIG)) {\n                    this.updateMime();\n                }\n            });\n            this._extensionService.whenInstalledExtensionsRegistered().then(() => {\n                this.updateMime();\n            });\n            this.onDidCreateMode((mode) => {\n                this._extensionService.activateByEvent(`onLanguage:${mode.getId()}`);\n            });\n        }\n        _onReady() {\n            if (!this._onReadyPromise) {\n                this._onReadyPromise = Promise.resolve(this._extensionService.whenInstalledExtensionsRegistered().then(() => true));\n            }\n            return this._onReadyPromise;\n        }\n        updateMime() {\n            const configuration = this._configurationService.getValue();\n            // Clear user configured mime associations\n            mime.clearTextMimes(true /* user configured */);\n            // Register based on settings\n            if (configuration.files && configuration.files.associations) {\n                Object.keys(configuration.files.associations).forEach(pattern => {\n                    const langId = configuration.files.associations[pattern];\n                    const mimetype = this.getMimeForMode(langId) || `text/x-${langId}`;\n                    mime.registerTextMime({ id: langId, mime: mimetype, filepattern: pattern, userConfigured: true });\n                });\n            }\n            this._onLanguagesMaybeChanged.fire();\n        }\n    };\n    WorkbenchModeServiceImpl = __decorate([\n        __param(0, extensions_1.IExtensionService),\n        __param(1, configuration_1.IConfigurationService),\n        __param(2, environment_1.IEnvironmentService)\n    ], WorkbenchModeServiceImpl);\n    exports.WorkbenchModeServiceImpl = WorkbenchModeServiceImpl;\n    function isUndefinedOrStringArray(value) {\n        if (typeof value === 'undefined') {\n            return true;\n        }\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        return value.every(item => typeof item === 'string');\n    }\n    function isValidLanguageExtensionPoint(value, collector) {\n        if (!value) {\n            collector.error(nls.localize('invalid.empty', \"Empty value for `contributes.{0}`\", exports.languagesExtPoint.name));\n            return false;\n        }\n        if (typeof value.id !== 'string') {\n            collector.error(nls.localize('require.id', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n            return false;\n        }\n        if (!isUndefinedOrStringArray(value.extensions)) {\n            collector.error(nls.localize('opt.extensions', \"property `{0}` can be omitted and must be of type `string[]`\", 'extensions'));\n            return false;\n        }\n        if (!isUndefinedOrStringArray(value.filenames)) {\n            collector.error(nls.localize('opt.filenames', \"property `{0}` can be omitted and must be of type `string[]`\", 'filenames'));\n            return false;\n        }\n        if (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\n            collector.error(nls.localize('opt.firstLine', \"property `{0}` can be omitted and must be of type `string`\", 'firstLine'));\n            return false;\n        }\n        if (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\n            collector.error(nls.localize('opt.configuration', \"property `{0}` can be omitted and must be of type `string`\", 'configuration'));\n            return false;\n        }\n        if (!isUndefinedOrStringArray(value.aliases)) {\n            collector.error(nls.localize('opt.aliases', \"property `{0}` can be omitted and must be of type `string[]`\", 'aliases'));\n            return false;\n        }\n        if (!isUndefinedOrStringArray(value.mimetypes)) {\n            collector.error(nls.localize('opt.mimetypes', \"property `{0}` can be omitted and must be of type `string[]`\", 'mimetypes'));\n            return false;\n        }\n        return true;\n    }\n    extensions_2.registerSingleton(modeService_1.IModeService, WorkbenchModeServiceImpl);\n});\n",null]}