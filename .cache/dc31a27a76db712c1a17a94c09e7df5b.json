{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar cp = require(\"child_process\");\nvar path = require(\"vs/base/common/path\");\nvar processes = require(\"vs/base/node/processes\");\nvar nls = require(\"vs/nls\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar externalTerminal_1 = require(\"vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal\");\nvar amd_1 = require(\"vs/base/common/amd\");\nvar TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\nvar WinSpawnType;\n(function (WinSpawnType) {\n    WinSpawnType[WinSpawnType[\"CMD\"] = 0] = \"CMD\";\n    WinSpawnType[WinSpawnType[\"CMDER\"] = 1] = \"CMDER\";\n})(WinSpawnType || (WinSpawnType = {}));\nvar WindowsExternalTerminalService = /** @class */ (function () {\n    function WindowsExternalTerminalService(_configurationService) {\n        this._configurationService = _configurationService;\n    }\n    WindowsExternalTerminalService.prototype.openTerminal = function (cwd) {\n        var configuration = this._configurationService.getValue();\n        this.spawnTerminal(cp, configuration, processes.getWindowsShell(), cwd);\n    };\n    WindowsExternalTerminalService.prototype.runInTerminal = function (title, dir, args, envVars) {\n        var configuration = this._configurationService.getValue();\n        var terminalConfig = configuration.terminal.external;\n        var exec = terminalConfig.windowsExec || externalTerminal_1.getDefaultTerminalWindows();\n        return new Promise(function (c, e) {\n            var title = \"\\\"\" + dir + \" - \" + TERMINAL_TITLE + \"\\\"\";\n            var command = \"\\\"\\\"\" + args.join('\" \"') + \"\\\" & pause\\\"\"; // use '|' to only pause on non-zero exit code\n            var cmdArgs = [\n                '/c', 'start', title, '/wait', exec, '/c', command\n            ];\n            // merge environment variables into a copy of the process.env\n            var env = objects_1.assign({}, process.env, envVars);\n            // delete environment variables that have a null value\n            Object.keys(env).filter(function (v) { return env[v] === null; }).forEach(function (key) { return delete env[key]; });\n            var options = {\n                cwd: dir,\n                env: env,\n                windowsVerbatimArguments: true\n            };\n            var cmd = cp.spawn(WindowsExternalTerminalService.CMD, cmdArgs, options);\n            cmd.on('error', e);\n            c(undefined);\n        });\n    };\n    WindowsExternalTerminalService.prototype.spawnTerminal = function (spawner, configuration, command, cwd) {\n        var terminalConfig = configuration.terminal.external;\n        var exec = terminalConfig.windowsExec || externalTerminal_1.getDefaultTerminalWindows();\n        var spawnType = this.getSpawnType(exec);\n        // Make the drive letter uppercase on Windows (see #9448)\n        if (cwd && cwd[1] === ':') {\n            cwd = cwd[0].toUpperCase() + cwd.substr(1);\n        }\n        // cmder ignores the environment cwd and instead opts to always open in %USERPROFILE%\n        // unless otherwise specified\n        if (spawnType === WinSpawnType.CMDER) {\n            spawner.spawn(exec, cwd ? [cwd] : undefined);\n            return Promise.resolve(undefined);\n        }\n        var cmdArgs = ['/c', 'start', '/wait'];\n        if (exec.indexOf(' ') >= 0) {\n            // The \"\" argument is the window title. Without this, exec doesn't work when the path\n            // contains spaces\n            cmdArgs.push('\"\"');\n        }\n        cmdArgs.push(exec);\n        return new Promise(function (c, e) {\n            var env = cwd ? { cwd: cwd } : undefined;\n            var child = spawner.spawn(command, cmdArgs, env);\n            child.on('error', e);\n            child.on('exit', function () { return c(); });\n        });\n    };\n    WindowsExternalTerminalService.prototype.getSpawnType = function (exec) {\n        var basename = path.basename(exec).toLowerCase();\n        if (basename === 'cmder' || basename === 'cmder.exe') {\n            return WinSpawnType.CMDER;\n        }\n        return WinSpawnType.CMD;\n    };\n    WindowsExternalTerminalService.CMD = 'cmd.exe';\n    WindowsExternalTerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService)\n    ], WindowsExternalTerminalService);\n    return WindowsExternalTerminalService;\n}());\nexports.WindowsExternalTerminalService = WindowsExternalTerminalService;\nvar MacExternalTerminalService = /** @class */ (function () {\n    function MacExternalTerminalService(_configurationService) {\n        this._configurationService = _configurationService;\n    }\n    MacExternalTerminalService.prototype.openTerminal = function (cwd) {\n        var configuration = this._configurationService.getValue();\n        this.spawnTerminal(cp, configuration, cwd);\n    };\n    MacExternalTerminalService.prototype.runInTerminal = function (title, dir, args, envVars) {\n        var configuration = this._configurationService.getValue();\n        var terminalConfig = configuration.terminal.external;\n        var terminalApp = terminalConfig.osxExec || externalTerminal_1.DEFAULT_TERMINAL_OSX;\n        return new Promise(function (c, e) {\n            if (terminalApp === externalTerminal_1.DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n                // On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n                // and then launches the program inside that window.\n                var script_1 = terminalApp === externalTerminal_1.DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n                var scriptpath = amd_1.getPathFromAmdModule(require, \"vs/workbench/contrib/externalTerminal/electron-browser/\" + script_1 + \".scpt\");\n                var osaArgs = [\n                    scriptpath,\n                    '-t', title || TERMINAL_TITLE,\n                    '-w', dir,\n                ];\n                for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n                    var a = args_1[_i];\n                    osaArgs.push('-a');\n                    osaArgs.push(a);\n                }\n                if (envVars) {\n                    for (var key in envVars) {\n                        var value = envVars[key];\n                        if (value === null) {\n                            osaArgs.push('-u');\n                            osaArgs.push(key);\n                        }\n                        else {\n                            osaArgs.push('-e');\n                            osaArgs.push(key + \"=\" + value);\n                        }\n                    }\n                }\n                var stderr_1 = '';\n                var osa = cp.spawn(MacExternalTerminalService.OSASCRIPT, osaArgs);\n                osa.on('error', e);\n                osa.stderr.on('data', function (data) {\n                    stderr_1 += data.toString();\n                });\n                osa.on('exit', function (code) {\n                    if (code === 0) { // OK\n                        c(undefined);\n                    }\n                    else {\n                        if (stderr_1) {\n                            var lines = stderr_1.split('\\n', 1);\n                            e(new Error(lines[0]));\n                        }\n                        else {\n                            e(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script_1, code)));\n                        }\n                    }\n                });\n            }\n            else {\n                e(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n            }\n        });\n    };\n    MacExternalTerminalService.prototype.spawnTerminal = function (spawner, configuration, cwd) {\n        var terminalConfig = configuration.terminal.external;\n        var terminalApp = terminalConfig.osxExec || externalTerminal_1.DEFAULT_TERMINAL_OSX;\n        return new Promise(function (c, e) {\n            var args = ['-a', terminalApp];\n            if (cwd) {\n                args.push(cwd);\n            }\n            var child = spawner.spawn('/usr/bin/open', args);\n            child.on('error', e);\n            child.on('exit', function () { return c(); });\n        });\n    };\n    MacExternalTerminalService.OSASCRIPT = '/usr/bin/osascript'; // osascript is the AppleScript interpreter on OS X\n    MacExternalTerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService)\n    ], MacExternalTerminalService);\n    return MacExternalTerminalService;\n}());\nexports.MacExternalTerminalService = MacExternalTerminalService;\nvar LinuxExternalTerminalService = /** @class */ (function () {\n    function LinuxExternalTerminalService(_configurationService) {\n        this._configurationService = _configurationService;\n    }\n    LinuxExternalTerminalService.prototype.openTerminal = function (cwd) {\n        var configuration = this._configurationService.getValue();\n        this.spawnTerminal(cp, configuration, cwd);\n    };\n    LinuxExternalTerminalService.prototype.runInTerminal = function (title, dir, args, envVars) {\n        var configuration = this._configurationService.getValue();\n        var terminalConfig = configuration.terminal.external;\n        var execPromise = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : externalTerminal_1.getDefaultTerminalLinuxReady();\n        return new Promise(function (c, e) {\n            var termArgs = [];\n            //termArgs.push('--title');\n            //termArgs.push(`\"${TERMINAL_TITLE}\"`);\n            execPromise.then(function (exec) {\n                if (exec.indexOf('gnome-terminal') >= 0) {\n                    termArgs.push('-x');\n                }\n                else {\n                    termArgs.push('-e');\n                }\n                termArgs.push('bash');\n                termArgs.push('-c');\n                var bashCommand = quote(args) + \"; echo; read -p \\\"\" + LinuxExternalTerminalService.WAIT_MESSAGE + \"\\\" -n1;\";\n                termArgs.push(\"''\" + bashCommand + \"''\"); // wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n                // merge environment variables into a copy of the process.env\n                var env = objects_1.assign({}, process.env, envVars);\n                // delete environment variables that have a null value\n                Object.keys(env).filter(function (v) { return env[v] === null; }).forEach(function (key) { return delete env[key]; });\n                var options = {\n                    cwd: dir,\n                    env: env\n                };\n                var stderr = '';\n                var cmd = cp.spawn(exec, termArgs, options);\n                cmd.on('error', e);\n                cmd.stderr.on('data', function (data) {\n                    stderr += data.toString();\n                });\n                cmd.on('exit', function (code) {\n                    if (code === 0) { // OK\n                        c(undefined);\n                    }\n                    else {\n                        if (stderr) {\n                            var lines = stderr.split('\\n', 1);\n                            e(new Error(lines[0]));\n                        }\n                        else {\n                            e(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n                        }\n                    }\n                });\n            });\n        });\n    };\n    LinuxExternalTerminalService.prototype.spawnTerminal = function (spawner, configuration, cwd) {\n        var terminalConfig = configuration.terminal.external;\n        var execPromise = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : externalTerminal_1.getDefaultTerminalLinuxReady();\n        return new Promise(function (c, e) {\n            execPromise.then(function (exec) {\n                var env = cwd ? { cwd: cwd } : undefined;\n                var child = spawner.spawn(exec, [], env);\n                child.on('error', e);\n                child.on('exit', function () { return c(); });\n            });\n        });\n    };\n    LinuxExternalTerminalService.WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n    LinuxExternalTerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService)\n    ], LinuxExternalTerminalService);\n    return LinuxExternalTerminalService;\n}());\nexports.LinuxExternalTerminalService = LinuxExternalTerminalService;\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args) {\n    var r = '';\n    for (var _i = 0, args_2 = args; _i < args_2.length; _i++) {\n        var a = args_2[_i];\n        if (a.indexOf(' ') >= 0) {\n            r += '\"' + a + '\"';\n        }\n        else {\n            r += a;\n        }\n        r += ' ';\n    }\n    return r;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as path from 'vs/base/common/path';\nimport * as processes from 'vs/base/node/processes';\nimport * as nls from 'vs/nls';\nimport { assign } from 'vs/base/common/objects';\nimport { IExternalTerminalService, IExternalTerminalConfiguration } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { getDefaultTerminalWindows, getDefaultTerminalLinuxReady, DEFAULT_TERMINAL_OSX } from 'vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\n\nconst TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\n\nenum WinSpawnType {\n\tCMD,\n\tCMDER\n}\n\nexport class WindowsExternalTerminalService implements IExternalTerminalService {\n\tpublic _serviceBrand: any;\n\n\tprivate static readonly CMD = 'cmd.exe';\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t}\n\n\tpublic openTerminal(cwd?: string): void {\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\n\t\tthis.spawnTerminal(cp, configuration, processes.getWindowsShell(), cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: IProcessEnvironment): Promise<number | undefined> {\n\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst exec = terminalConfig.windowsExec || getDefaultTerminalWindows();\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tconst title = `\"${dir} - ${TERMINAL_TITLE}\"`;\n\t\t\tconst command = `\"\"${args.join('\" \"')}\" & pause\"`; // use '|' to only pause on non-zero exit code\n\n\t\t\tconst cmdArgs = [\n\t\t\t\t'/c', 'start', title, '/wait', exec, '/c', command\n\t\t\t];\n\n\t\t\t// merge environment variables into a copy of the process.env\n\t\t\tconst env = assign({}, process.env, envVars);\n\n\t\t\t// delete environment variables that have a null value\n\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\tconst options: any = {\n\t\t\t\tcwd: dir,\n\t\t\t\tenv: env,\n\t\t\t\twindowsVerbatimArguments: true\n\t\t\t};\n\n\t\t\tconst cmd = cp.spawn(WindowsExternalTerminalService.CMD, cmdArgs, options);\n\t\t\tcmd.on('error', e);\n\n\t\t\tc(undefined);\n\t\t});\n\t}\n\n\tprivate spawnTerminal(spawner: typeof cp, configuration: IExternalTerminalConfiguration, command: string, cwd?: string): Promise<void> {\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst exec = terminalConfig.windowsExec || getDefaultTerminalWindows();\n\t\tconst spawnType = this.getSpawnType(exec);\n\n\t\t// Make the drive letter uppercase on Windows (see #9448)\n\t\tif (cwd && cwd[1] === ':') {\n\t\t\tcwd = cwd[0].toUpperCase() + cwd.substr(1);\n\t\t}\n\n\t\t// cmder ignores the environment cwd and instead opts to always open in %USERPROFILE%\n\t\t// unless otherwise specified\n\t\tif (spawnType === WinSpawnType.CMDER) {\n\t\t\tspawner.spawn(exec, cwd ? [cwd] : undefined);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst cmdArgs = ['/c', 'start', '/wait'];\n\t\tif (exec.indexOf(' ') >= 0) {\n\t\t\t// The \"\" argument is the window title. Without this, exec doesn't work when the path\n\t\t\t// contains spaces\n\t\t\tcmdArgs.push('\"\"');\n\t\t}\n\t\tcmdArgs.push(exec);\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst env = cwd ? { cwd: cwd } : undefined;\n\t\t\tconst child = spawner.spawn(command, cmdArgs, env);\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n\n\tprivate getSpawnType(exec: string): WinSpawnType {\n\t\tconst basename = path.basename(exec).toLowerCase();\n\t\tif (basename === 'cmder' || basename === 'cmder.exe') {\n\t\t\treturn WinSpawnType.CMDER;\n\t\t}\n\t\treturn WinSpawnType.CMD;\n\t}\n}\n\nexport class MacExternalTerminalService implements IExternalTerminalService {\n\tpublic _serviceBrand: any;\n\n\tprivate static readonly OSASCRIPT = '/usr/bin/osascript';\t// osascript is the AppleScript interpreter on OS X\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\n\tpublic openTerminal(cwd?: string): void {\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\n\t\tthis.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: IProcessEnvironment): Promise<number | undefined> {\n\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst terminalApp = terminalConfig.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tif (terminalApp === DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n\n\t\t\t\t// On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n\t\t\t\t// and then launches the program inside that window.\n\n\t\t\t\tconst script = terminalApp === DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n\t\t\t\tconst scriptpath = getPathFromAmdModule(require, `vs/workbench/contrib/externalTerminal/electron-browser/${script}.scpt`);\n\n\t\t\t\tconst osaArgs = [\n\t\t\t\t\tscriptpath,\n\t\t\t\t\t'-t', title || TERMINAL_TITLE,\n\t\t\t\t\t'-w', dir,\n\t\t\t\t];\n\n\t\t\t\tfor (let a of args) {\n\t\t\t\t\tosaArgs.push('-a');\n\t\t\t\t\tosaArgs.push(a);\n\t\t\t\t}\n\n\t\t\t\tif (envVars) {\n\t\t\t\t\tfor (let key in envVars) {\n\t\t\t\t\t\tconst value = envVars[key];\n\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\tosaArgs.push('-u');\n\t\t\t\t\t\t\tosaArgs.push(key);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tosaArgs.push('-e');\n\t\t\t\t\t\t\tosaArgs.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst osa = cp.spawn(MacExternalTerminalService.OSASCRIPT, osaArgs);\n\t\t\t\tosa.on('error', e);\n\t\t\t\tosa.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tosa.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\te(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\te(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate spawnTerminal(spawner: typeof cp, configuration: IExternalTerminalConfiguration, cwd?: string): Promise<void> {\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst terminalApp = terminalConfig.osxExec || DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst args = ['-a', terminalApp];\n\t\t\tif (cwd) {\n\t\t\t\targs.push(cwd);\n\t\t\t}\n\t\t\tconst child = spawner.spawn('/usr/bin/open', args);\n\t\t\tchild.on('error', e);\n\t\t\tchild.on('exit', () => c());\n\t\t});\n\t}\n}\n\nexport class LinuxExternalTerminalService implements IExternalTerminalService {\n\tpublic _serviceBrand: any;\n\n\tprivate static readonly WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\n\n\tpublic openTerminal(cwd?: string): void {\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\n\t\tthis.spawnTerminal(cp, configuration, cwd);\n\t}\n\n\tpublic runInTerminal(title: string, dir: string, args: string[], envVars: IProcessEnvironment): Promise<number | undefined> {\n\n\t\tconst configuration = this._configurationService.getValue<IExternalTerminalConfiguration>();\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst execPromise = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tlet termArgs: string[] = [];\n\t\t\t//termArgs.push('--title');\n\t\t\t//termArgs.push(`\"${TERMINAL_TITLE}\"`);\n\t\t\texecPromise.then(exec => {\n\t\t\t\tif (exec.indexOf('gnome-terminal') >= 0) {\n\t\t\t\t\ttermArgs.push('-x');\n\t\t\t\t} else {\n\t\t\t\t\ttermArgs.push('-e');\n\t\t\t\t}\n\t\t\t\ttermArgs.push('bash');\n\t\t\t\ttermArgs.push('-c');\n\n\t\t\t\tconst bashCommand = `${quote(args)}; echo; read -p \"${LinuxExternalTerminalService.WAIT_MESSAGE}\" -n1;`;\n\t\t\t\ttermArgs.push(`''${bashCommand}''`);\t// wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n\n\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\tconst env = assign({}, process.env, envVars);\n\n\t\t\t\t// delete environment variables that have a null value\n\t\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\t\tconst options: any = {\n\t\t\t\t\tcwd: dir,\n\t\t\t\t\tenv: env\n\t\t\t\t};\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst cmd = cp.spawn(exec, termArgs, options);\n\t\t\t\tcmd.on('error', e);\n\t\t\t\tcmd.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tcmd.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\te(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate spawnTerminal(spawner: typeof cp, configuration: IExternalTerminalConfiguration, cwd?: string): Promise<void> {\n\t\tconst terminalConfig = configuration.terminal.external;\n\t\tconst execPromise = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\texecPromise.then(exec => {\n\t\t\t\tconst env = cwd ? { cwd } : undefined;\n\t\t\t\tconst child = spawner.spawn(exec, [], env);\n\t\t\t\tchild.on('error', e);\n\t\t\t\tchild.on('exit', () => c());\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args: string[]): string {\n\tlet r = '';\n\tfor (let a of args) {\n\t\tif (a.indexOf(' ') >= 0) {\n\t\t\tr += '\"' + a + '\"';\n\t\t} else {\n\t\t\tr += a;\n\t\t}\n\t\tr += ' ';\n\t}\n\treturn r;\n}\n"]}]}