{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/progress/browser/progressService2.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/progress/browser/progressService2.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/progressService2\");\nvar nls_1 = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar async_1 = require(\"vs/base/common/async\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar ProgressService2 = /** @class */ (function () {\n    function ProgressService2(_activityBar, _viewletService, _notificationService, _statusbarService) {\n        this._activityBar = _activityBar;\n        this._viewletService = _viewletService;\n        this._notificationService = _notificationService;\n        this._statusbarService = _statusbarService;\n        this._stack = [];\n    }\n    ProgressService2.prototype.withProgress = function (options, task, onDidCancel) {\n        var location = options.location;\n        if (typeof location === 'string') {\n            var viewlet = this._viewletService.getViewlet(location);\n            if (viewlet) {\n                return this._withViewletProgress(location, task);\n            }\n            return Promise.reject(new Error(\"Bad progress location: \" + location));\n        }\n        switch (location) {\n            case progress_1.ProgressLocation.Notification:\n                return this._withNotificationProgress(options, task, onDidCancel);\n            case progress_1.ProgressLocation.Window:\n                return this._withWindowProgress(options, task);\n            case progress_1.ProgressLocation.Explorer:\n                return this._withViewletProgress('workbench.view.explorer', task);\n            case progress_1.ProgressLocation.Scm:\n                return this._withViewletProgress('workbench.view.scm', task);\n            case progress_1.ProgressLocation.Extensions:\n                return this._withViewletProgress('workbench.view.extensions', task);\n            default:\n                return Promise.reject(new Error(\"Bad progress location: \" + location));\n        }\n    };\n    ProgressService2.prototype._withWindowProgress = function (options, callback) {\n        var _this = this;\n        var task = [options, new progress_1.Progress(function () { return _this._updateWindowProgress(); })];\n        var promise = callback(task[1]);\n        var delayHandle = setTimeout(function () {\n            delayHandle = undefined;\n            _this._stack.unshift(task);\n            _this._updateWindowProgress();\n            // show progress for at least 150ms\n            Promise.all([\n                async_1.timeout(150),\n                promise\n            ]).finally(function () {\n                var idx = _this._stack.indexOf(task);\n                _this._stack.splice(idx, 1);\n                _this._updateWindowProgress();\n            });\n        }, 150);\n        // cancel delay if promise finishes below 150ms\n        return promise.finally(function () { return clearTimeout(delayHandle); });\n    };\n    ProgressService2.prototype._updateWindowProgress = function (idx) {\n        if (idx === void 0) { idx = 0; }\n        lifecycle_1.dispose(this._globalStatusEntry);\n        if (idx < this._stack.length) {\n            var _a = this._stack[idx], options = _a[0], progress = _a[1];\n            var progressTitle = options.title;\n            var progressMessage = progress.value && progress.value.message;\n            var text = void 0;\n            var title = void 0;\n            if (progressTitle && progressMessage) {\n                // <title>: <message>\n                text = nls_1.localize('progress.text2', \"{0}: {1}\", progressTitle, progressMessage);\n                title = options.source ? nls_1.localize('progress.title3', \"[{0}] {1}: {2}\", options.source, progressTitle, progressMessage) : text;\n            }\n            else if (progressTitle) {\n                // <title>\n                text = progressTitle;\n                title = options.source ? nls_1.localize('progress.title2', \"[{0}]: {1}\", options.source, progressTitle) : text;\n            }\n            else if (progressMessage) {\n                // <message>\n                text = progressMessage;\n                title = options.source ? nls_1.localize('progress.title2', \"[{0}]: {1}\", options.source, progressMessage) : text;\n            }\n            else {\n                // no title, no message -> no progress. try with next on stack\n                this._updateWindowProgress(idx + 1);\n                return;\n            }\n            this._globalStatusEntry = this._statusbarService.addEntry({\n                text: \"$(sync~spin) \" + text,\n                tooltip: title\n            }, statusbar_1.StatusbarAlignment.LEFT);\n        }\n    };\n    ProgressService2.prototype._withNotificationProgress = function (options, callback, onDidCancel) {\n        var _this = this;\n        var toDispose = [];\n        var createNotification = function (message, increment) {\n            if (!message) {\n                return undefined; // we need a message at least\n            }\n            var actions = { primary: [] };\n            if (options.cancellable) {\n                var cancelAction = new /** @class */ (function (_super) {\n                    tslib_1.__extends(class_1, _super);\n                    function class_1() {\n                        return _super.call(this, 'progress.cancel', nls_1.localize('cancel', \"Cancel\"), undefined, true) || this;\n                    }\n                    class_1.prototype.run = function () {\n                        if (typeof onDidCancel === 'function') {\n                            onDidCancel();\n                        }\n                        return Promise.resolve(undefined);\n                    };\n                    return class_1;\n                }(actions_1.Action));\n                toDispose.push(cancelAction);\n                actions.primary.push(cancelAction);\n            }\n            var handle = _this._notificationService.notify({\n                severity: notification_1.Severity.Info,\n                message: message,\n                source: options.source,\n                actions: actions\n            });\n            updateProgress(handle, increment);\n            event_1.Event.once(handle.onDidClose)(function () {\n                lifecycle_1.dispose(toDispose);\n            });\n            return handle;\n        };\n        var updateProgress = function (notification, increment) {\n            if (typeof increment === 'number' && increment >= 0) {\n                notification.progress.total(100); // always percentage based\n                notification.progress.worked(increment);\n            }\n            else {\n                notification.progress.infinite();\n            }\n        };\n        var handle;\n        var updateNotification = function (message, increment) {\n            if (!handle) {\n                handle = createNotification(message, increment);\n            }\n            else {\n                if (typeof message === 'string') {\n                    var newMessage = void 0;\n                    if (typeof options.title === 'string') {\n                        newMessage = options.title + \": \" + message; // always prefix with overall title if we have it (https://github.com/Microsoft/vscode/issues/50932)\n                    }\n                    else {\n                        newMessage = message;\n                    }\n                    handle.updateMessage(newMessage);\n                }\n                if (typeof increment === 'number') {\n                    updateProgress(handle, increment);\n                }\n            }\n        };\n        // Show initially\n        updateNotification(options.title);\n        // Update based on progress\n        var p = callback({\n            report: function (progress) {\n                updateNotification(progress.message, progress.increment);\n            }\n        });\n        // Show progress for at least 800ms and then hide once done or canceled\n        Promise.all([async_1.timeout(800), p]).finally(function () {\n            if (handle) {\n                handle.close();\n            }\n        });\n        return p;\n    };\n    ProgressService2.prototype._withViewletProgress = function (viewletId, task) {\n        var _this = this;\n        var promise = task(progress_1.emptyProgress);\n        // show in viewlet\n        var viewletProgress = this._viewletService.getProgressIndicator(viewletId);\n        if (viewletProgress) {\n            viewletProgress.showWhile(promise);\n        }\n        // show activity bar\n        var activityProgress;\n        var delayHandle = setTimeout(function () {\n            delayHandle = undefined;\n            var handle = _this._activityBar.showActivity(viewletId, new activity_1.ProgressBadge(function () { return ''; }), 'progress-badge', 100);\n            var startTimeVisible = Date.now();\n            var minTimeVisible = 300;\n            activityProgress = {\n                dispose: function () {\n                    var d = Date.now() - startTimeVisible;\n                    if (d < minTimeVisible) {\n                        // should at least show for Nms\n                        setTimeout(function () { return handle.dispose(); }, minTimeVisible - d);\n                    }\n                    else {\n                        // shown long enough\n                        handle.dispose();\n                    }\n                }\n            };\n        }, 300);\n        var onDone = function () {\n            clearTimeout(delayHandle);\n            lifecycle_1.dispose(activityProgress);\n        };\n        promise.then(onDone, onDone);\n        return promise;\n    };\n    ProgressService2 = tslib_1.__decorate([\n        tslib_1.__param(0, activity_1.IActivityService),\n        tslib_1.__param(1, viewlet_1.IViewletService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, statusbar_1.IStatusbarService)\n    ], ProgressService2);\n    return ProgressService2;\n}());\nexports.ProgressService2 = ProgressService2;\nextensions_1.registerSingleton(progress_1.IProgressService2, ProgressService2, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/progress/browser/progressService2.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/progress/browser/progressService2.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,2CAAyC;AAEzC,8BAAkC;AAClC,sDAAgE;AAChE,iEAAgK;AAChK,yEAAgF;AAChF,oEAA+F;AAC/F,8CAA+C;AAC/C,2EAAiG;AACjG,6EAAyI;AACzI,kDAAgD;AAChD,8CAA6C;AAC7C,0EAAgF;AAEhF;IAOC,0BACoC,YAA8B,EAC/B,eAAgC,EAC3B,oBAA0C,EAC7C,iBAAoC;QAHrC,iBAAY,GAAZ,YAAY,CAAkB;QAC/B,oBAAe,GAAf,eAAe,CAAiB;QAC3B,yBAAoB,GAApB,oBAAoB,CAAsB;QAC7C,sBAAiB,GAAjB,iBAAiB,CAAmB;QAPxD,WAAM,GAAkD,EAAE,CAAC;IAQxE,CAAC;IAEL,uCAAY,GAAZ,UAAoB,OAAyB,EAAE,IAAwD,EAAE,WAAwB;QAExH,IAAA,2BAAQ,CAAa;QAC7B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;YACjC,IAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC1D,IAAI,OAAO,EAAE;gBACZ,OAAO,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aACjD;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA0B,QAAU,CAAC,CAAC,CAAC;SACvE;QAED,QAAQ,QAAQ,EAAE;YACjB,KAAK,2BAAgB,CAAC,YAAY;gBACjC,OAAO,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YACnE,KAAK,2BAAgB,CAAC,MAAM;gBAC3B,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAChD,KAAK,2BAAgB,CAAC,QAAQ;gBAC7B,OAAO,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;YACnE,KAAK,2BAAgB,CAAC,GAAG;gBACxB,OAAO,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;YAC9D,KAAK,2BAAgB,CAAC,UAAU;gBAC/B,OAAO,IAAI,CAAC,oBAAoB,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;YACrE;gBACC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,4BAA0B,QAAU,CAAC,CAAC,CAAC;SACxE;IACF,CAAC;IAEO,8CAAmB,GAA3B,UAAmC,OAAyB,EAAE,QAAmE;QAAjI,iBAyBC;QAvBA,IAAM,IAAI,GAAgD,CAAC,OAAO,EAAE,IAAI,mBAAQ,CAAgB,cAAM,OAAA,KAAI,CAAC,qBAAqB,EAAE,EAA5B,CAA4B,CAAC,CAAC,CAAC;QAErI,IAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAElC,IAAI,WAAW,GAAQ,UAAU,CAAC;YACjC,WAAW,GAAG,SAAS,CAAC;YACxB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAE7B,mCAAmC;YACnC,OAAO,CAAC,GAAG,CAAC;gBACX,eAAO,CAAC,GAAG,CAAC;gBACZ,OAAO;aACP,CAAC,CAAC,OAAO,CAAC;gBACV,IAAM,GAAG,GAAG,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACtC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;QAEJ,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,+CAA+C;QAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,cAAM,OAAA,YAAY,CAAC,WAAW,CAAC,EAAzB,CAAyB,CAAC,CAAC;IACzD,CAAC;IAEO,gDAAqB,GAA7B,UAA8B,GAAe;QAAf,oBAAA,EAAA,OAAe;QAE5C,mBAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAEjC,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAEvB,IAAA,qBAAsC,EAArC,eAAO,EAAE,gBAA4B,CAAC;YAE7C,IAAI,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;YAClC,IAAI,eAAe,GAAG,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;YAC/D,IAAI,IAAI,SAAQ,CAAC;YACjB,IAAI,KAAK,SAAQ,CAAC;YAElB,IAAI,aAAa,IAAI,eAAe,EAAE;gBACrC,qBAAqB;gBACrB,IAAI,GAAG,cAAQ,CAAC,gBAAgB,EAAE,UAAU,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;gBAC9E,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAQ,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,OAAO,CAAC,MAAM,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aAE9H;iBAAM,IAAI,aAAa,EAAE;gBACzB,UAAU;gBACV,IAAI,GAAG,aAAa,CAAC;gBACrB,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAQ,CAAC,iBAAiB,EAAE,YAAY,EAAE,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aAEzG;iBAAM,IAAI,eAAe,EAAE;gBAC3B,YAAY;gBACZ,IAAI,GAAG,eAAe,CAAC;gBACvB,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,cAAQ,CAAC,iBAAiB,EAAE,YAAY,EAAE,OAAO,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aAE3G;iBAAM;gBACN,8DAA8D;gBAC9D,IAAI,CAAC,qBAAqB,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;gBACpC,OAAO;aACP;YAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC;gBACzD,IAAI,EAAE,kBAAgB,IAAM;gBAC5B,OAAO,EAAE,KAAK;aACd,EAAE,8BAAkB,CAAC,IAAI,CAAC,CAAC;SAC5B;IACF,CAAC;IAEO,oDAAyB,GAAjC,UAA+D,OAAyB,EAAE,QAA8E,EAAE,WAAwB;QAAlM,iBA6FC;QA5FA,IAAM,SAAS,GAAkB,EAAE,CAAC;QAEpC,IAAM,kBAAkB,GAAG,UAAC,OAA2B,EAAE,SAAkB;YAC1E,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,SAAS,CAAC,CAAC,6BAA6B;aAC/C;YAED,IAAM,OAAO,GAAyB,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;YACtD,IAAI,OAAO,CAAC,WAAW,EAAE;gBACxB,IAAM,YAAY,GAAG;oBAAkB,mCAAM;oBAC5C;+BACC,kBAAM,iBAAiB,EAAE,cAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC;oBACxE,CAAC;oBAED,qBAAG,GAAH;wBACC,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;4BACtC,WAAW,EAAE,CAAC;yBACd;wBAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnC,CAAC;oBACF,cAAC;gBAAD,CAAC,AAZwB,CAAc,gBAAM,EAY5C,CAAC;gBACF,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAE7B,OAAO,CAAC,OAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACpC;YAED,IAAM,MAAM,GAAG,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC;gBAC/C,QAAQ,EAAE,uBAAQ,CAAC,IAAI;gBACvB,OAAO,SAAA;gBACP,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,OAAO,SAAA;aACP,CAAC,CAAC;YAEH,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAElC,aAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;gBAC7B,mBAAO,CAAC,SAAS,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QACf,CAAC,CAAC;QAEF,IAAM,cAAc,GAAG,UAAC,YAAiC,EAAE,SAAkB;YAC5E,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,IAAI,CAAC,EAAE;gBACpD,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,0BAA0B;gBAC5D,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;aACxC;iBAAM;gBACN,YAAY,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACjC;QACF,CAAC,CAAC;QAEF,IAAI,MAAuC,CAAC;QAC5C,IAAM,kBAAkB,GAAG,UAAC,OAAgB,EAAE,SAAkB;YAC/D,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,GAAG,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aAChD;iBAAM;gBACN,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAChC,IAAI,UAAU,SAAQ,CAAC;oBACvB,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,EAAE;wBACtC,UAAU,GAAM,OAAO,CAAC,KAAK,UAAK,OAAS,CAAC,CAAC,oGAAoG;qBACjJ;yBAAM;wBACN,UAAU,GAAG,OAAO,CAAC;qBACrB;oBAED,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBACjC;gBAED,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;oBAClC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;iBAClC;aACD;QACF,CAAC,CAAC;QAEF,iBAAiB;QACjB,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAElC,2BAA2B;QAC3B,IAAM,CAAC,GAAG,QAAQ,CAAC;YAClB,MAAM,EAAE,UAAA,QAAQ;gBACf,kBAAkB,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC1D,CAAC;SACD,CAAC,CAAC;QAEH,uEAAuE;QACvE,OAAO,CAAC,GAAG,CAAC,CAAC,eAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;YACtC,IAAI,MAAM,EAAE;gBACX,MAAM,CAAC,KAAK,EAAE,CAAC;aACf;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,CAAC;IACV,CAAC;IAEO,+CAAoB,GAA5B,UAA0D,SAAiB,EAAE,IAAsD;QAAnI,iBA2CC;QAzCA,IAAM,OAAO,GAAG,IAAI,CAAC,wBAAa,CAAC,CAAC;QAEpC,kBAAkB;QAClB,IAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAC7E,IAAI,eAAe,EAAE;YACpB,eAAe,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SACnC;QAED,oBAAoB;QACpB,IAAI,gBAA6B,CAAC;QAClC,IAAI,WAAW,GAAQ,UAAU,CAAC;YACjC,WAAW,GAAG,SAAS,CAAC;YACxB,IAAM,MAAM,GAAG,KAAI,CAAC,YAAY,CAAC,YAAY,CAC5C,SAAS,EACT,IAAI,wBAAa,CAAC,cAAM,OAAA,EAAE,EAAF,CAAE,CAAC,EAC3B,gBAAgB,EAChB,GAAG,CACH,CAAC;YACF,IAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACpC,IAAM,cAAc,GAAG,GAAG,CAAC;YAC3B,gBAAgB,GAAG;gBAClB,OAAO;oBACN,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,gBAAgB,CAAC;oBACxC,IAAI,CAAC,GAAG,cAAc,EAAE;wBACvB,+BAA+B;wBAC/B,UAAU,CAAC,cAAM,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,EAAE,cAAc,GAAG,CAAC,CAAC,CAAC;qBACvD;yBAAM;wBACN,oBAAoB;wBACpB,MAAM,CAAC,OAAO,EAAE,CAAC;qBACjB;gBACF,CAAC;aACD,CAAC;QACH,CAAC,EAAE,GAAG,CAAC,CAAC;QAER,IAAM,MAAM,GAAG;YACd,YAAY,CAAC,WAAW,CAAC,CAAC;YAC1B,mBAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3B,CAAC,CAAC;QAEF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IAChB,CAAC;IAvPW,gBAAgB;QAQ1B,mBAAA,2BAAgB,CAAA;QAChB,mBAAA,yBAAe,CAAA;QACf,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,6BAAiB,CAAA;OAXP,gBAAgB,CAwP5B;IAAD,uBAAC;CAAA,AAxPD,IAwPC;AAxPY,4CAAgB;AA0P7B,8BAAiB,CAAC,4BAAiB,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/progressService2';\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IProgressService2, IProgressOptions, IProgressStep, ProgressLocation, IProgress, emptyProgress, Progress } from 'vs/platform/progress/common/progress';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { StatusbarAlignment, IStatusbarService } from 'vs/platform/statusbar/common/statusbar';\nimport { timeout } from 'vs/base/common/async';\nimport { ProgressBadge, IActivityService } from 'vs/workbench/services/activity/common/activity';\nimport { INotificationService, Severity, INotificationHandle, INotificationActions } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { Event } from 'vs/base/common/event';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class ProgressService2 implements IProgressService2 {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _stack: [IProgressOptions, Progress<IProgressStep>][] = [];\n\tprivate _globalStatusEntry: IDisposable;\n\n\tconstructor(\n\t\t@IActivityService private readonly _activityBar: IActivityService,\n\t\t@IViewletService private readonly _viewletService: IViewletService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t) { }\n\n\twithProgress<R=any>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: () => void): Promise<R> {\n\n\t\tconst { location } = options;\n\t\tif (typeof location === 'string') {\n\t\t\tconst viewlet = this._viewletService.getViewlet(location);\n\t\t\tif (viewlet) {\n\t\t\t\treturn this._withViewletProgress(location, task);\n\t\t\t}\n\t\t\treturn Promise.reject(new Error(`Bad progress location: ${location}`));\n\t\t}\n\n\t\tswitch (location) {\n\t\t\tcase ProgressLocation.Notification:\n\t\t\t\treturn this._withNotificationProgress(options, task, onDidCancel);\n\t\t\tcase ProgressLocation.Window:\n\t\t\t\treturn this._withWindowProgress(options, task);\n\t\t\tcase ProgressLocation.Explorer:\n\t\t\t\treturn this._withViewletProgress('workbench.view.explorer', task);\n\t\t\tcase ProgressLocation.Scm:\n\t\t\t\treturn this._withViewletProgress('workbench.view.scm', task);\n\t\t\tcase ProgressLocation.Extensions:\n\t\t\t\treturn this._withViewletProgress('workbench.view.extensions', task);\n\t\t\tdefault:\n\t\t\t\treturn Promise.reject(new Error(`Bad progress location: ${location}`));\n\t\t}\n\t}\n\n\tprivate _withWindowProgress<R=any>(options: IProgressOptions, callback: (progress: IProgress<{ message?: string }>) => Promise<R>): Promise<R> {\n\n\t\tconst task: [IProgressOptions, Progress<IProgressStep>] = [options, new Progress<IProgressStep>(() => this._updateWindowProgress())];\n\n\t\tconst promise = callback(task[1]);\n\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tthis._stack.unshift(task);\n\t\t\tthis._updateWindowProgress();\n\n\t\t\t// show progress for at least 150ms\n\t\t\tPromise.all([\n\t\t\t\ttimeout(150),\n\t\t\t\tpromise\n\t\t\t]).finally(() => {\n\t\t\t\tconst idx = this._stack.indexOf(task);\n\t\t\t\tthis._stack.splice(idx, 1);\n\t\t\t\tthis._updateWindowProgress();\n\t\t\t});\n\n\t\t}, 150);\n\n\t\t// cancel delay if promise finishes below 150ms\n\t\treturn promise.finally(() => clearTimeout(delayHandle));\n\t}\n\n\tprivate _updateWindowProgress(idx: number = 0) {\n\n\t\tdispose(this._globalStatusEntry);\n\n\t\tif (idx < this._stack.length) {\n\n\t\t\tconst [options, progress] = this._stack[idx];\n\n\t\t\tlet progressTitle = options.title;\n\t\t\tlet progressMessage = progress.value && progress.value.message;\n\t\t\tlet text: string;\n\t\t\tlet title: string;\n\n\t\t\tif (progressTitle && progressMessage) {\n\t\t\t\t// <title>: <message>\n\t\t\t\ttext = localize('progress.text2', \"{0}: {1}\", progressTitle, progressMessage);\n\t\t\t\ttitle = options.source ? localize('progress.title3', \"[{0}] {1}: {2}\", options.source, progressTitle, progressMessage) : text;\n\n\t\t\t} else if (progressTitle) {\n\t\t\t\t// <title>\n\t\t\t\ttext = progressTitle;\n\t\t\t\ttitle = options.source ? localize('progress.title2', \"[{0}]: {1}\", options.source, progressTitle) : text;\n\n\t\t\t} else if (progressMessage) {\n\t\t\t\t// <message>\n\t\t\t\ttext = progressMessage;\n\t\t\t\ttitle = options.source ? localize('progress.title2', \"[{0}]: {1}\", options.source, progressMessage) : text;\n\n\t\t\t} else {\n\t\t\t\t// no title, no message -> no progress. try with next on stack\n\t\t\t\tthis._updateWindowProgress(idx + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._globalStatusEntry = this._statusbarService.addEntry({\n\t\t\t\ttext: `$(sync~spin) ${text}`,\n\t\t\t\ttooltip: title\n\t\t\t}, StatusbarAlignment.LEFT);\n\t\t}\n\t}\n\n\tprivate _withNotificationProgress<P extends Promise<R>, R=any>(options: IProgressOptions, callback: (progress: IProgress<{ message?: string, increment?: number }>) => P, onDidCancel?: () => void): P {\n\t\tconst toDispose: IDisposable[] = [];\n\n\t\tconst createNotification = (message: string | undefined, increment?: number): INotificationHandle | undefined => {\n\t\t\tif (!message) {\n\t\t\t\treturn undefined; // we need a message at least\n\t\t\t}\n\n\t\t\tconst actions: INotificationActions = { primary: [] };\n\t\t\tif (options.cancellable) {\n\t\t\t\tconst cancelAction = new class extends Action {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper('progress.cancel', localize('cancel', \"Cancel\"), undefined, true);\n\t\t\t\t\t}\n\n\t\t\t\t\trun(): Promise<any> {\n\t\t\t\t\t\tif (typeof onDidCancel === 'function') {\n\t\t\t\t\t\t\tonDidCancel();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttoDispose.push(cancelAction);\n\n\t\t\t\tactions.primary!.push(cancelAction);\n\t\t\t}\n\n\t\t\tconst handle = this._notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tsource: options.source,\n\t\t\t\tactions\n\t\t\t});\n\n\t\t\tupdateProgress(handle, increment);\n\n\t\t\tEvent.once(handle.onDidClose)(() => {\n\t\t\t\tdispose(toDispose);\n\t\t\t});\n\n\t\t\treturn handle;\n\t\t};\n\n\t\tconst updateProgress = (notification: INotificationHandle, increment?: number): void => {\n\t\t\tif (typeof increment === 'number' && increment >= 0) {\n\t\t\t\tnotification.progress.total(100); // always percentage based\n\t\t\t\tnotification.progress.worked(increment);\n\t\t\t} else {\n\t\t\t\tnotification.progress.infinite();\n\t\t\t}\n\t\t};\n\n\t\tlet handle: INotificationHandle | undefined;\n\t\tconst updateNotification = (message?: string, increment?: number): void => {\n\t\t\tif (!handle) {\n\t\t\t\thandle = createNotification(message, increment);\n\t\t\t} else {\n\t\t\t\tif (typeof message === 'string') {\n\t\t\t\t\tlet newMessage: string;\n\t\t\t\t\tif (typeof options.title === 'string') {\n\t\t\t\t\t\tnewMessage = `${options.title}: ${message}`; // always prefix with overall title if we have it (https://github.com/Microsoft/vscode/issues/50932)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage = message;\n\t\t\t\t\t}\n\n\t\t\t\t\thandle.updateMessage(newMessage);\n\t\t\t\t}\n\n\t\t\t\tif (typeof increment === 'number') {\n\t\t\t\t\tupdateProgress(handle, increment);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Show initially\n\t\tupdateNotification(options.title);\n\n\t\t// Update based on progress\n\t\tconst p = callback({\n\t\t\treport: progress => {\n\t\t\t\tupdateNotification(progress.message, progress.increment);\n\t\t\t}\n\t\t});\n\n\t\t// Show progress for at least 800ms and then hide once done or canceled\n\t\tPromise.all([timeout(800), p]).finally(() => {\n\t\t\tif (handle) {\n\t\t\t\thandle.close();\n\t\t\t}\n\t\t});\n\n\t\treturn p;\n\t}\n\n\tprivate _withViewletProgress<P extends Promise<R>, R=any>(viewletId: string, task: (progress: IProgress<{ message?: string }>) => P): P {\n\n\t\tconst promise = task(emptyProgress);\n\n\t\t// show in viewlet\n\t\tconst viewletProgress = this._viewletService.getProgressIndicator(viewletId);\n\t\tif (viewletProgress) {\n\t\t\tviewletProgress.showWhile(promise);\n\t\t}\n\n\t\t// show activity bar\n\t\tlet activityProgress: IDisposable;\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tconst handle = this._activityBar.showActivity(\n\t\t\t\tviewletId,\n\t\t\t\tnew ProgressBadge(() => ''),\n\t\t\t\t'progress-badge',\n\t\t\t\t100\n\t\t\t);\n\t\t\tconst startTimeVisible = Date.now();\n\t\t\tconst minTimeVisible = 300;\n\t\t\tactivityProgress = {\n\t\t\t\tdispose() {\n\t\t\t\t\tconst d = Date.now() - startTimeVisible;\n\t\t\t\t\tif (d < minTimeVisible) {\n\t\t\t\t\t\t// should at least show for Nms\n\t\t\t\t\t\tsetTimeout(() => handle.dispose(), minTimeVisible - d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// shown long enough\n\t\t\t\t\t\thandle.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}, 300);\n\n\t\tconst onDone = () => {\n\t\t\tclearTimeout(delayHandle);\n\t\t\tdispose(activityProgress);\n\t\t};\n\n\t\tpromise.then(onDone, onDone);\n\t\treturn promise;\n\t}\n}\n\nregisterSingleton(IProgressService2, ProgressService2, true);\n"]}]}