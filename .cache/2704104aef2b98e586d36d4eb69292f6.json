{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/decorations/browser/decorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/decorations/browser/decorations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IDecorationsService = instantiation_1.createDecorator('IFileDecorationsService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/decorations/browser/decorations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/decorations/browser/decorations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAOpE,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,yBAAyB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const IDecorationsService = createDecorator<IDecorationsService>('IFileDecorationsService');\n\nexport interface IDecorationData {\n\treadonly weight?: number;\n\treadonly color?: ColorIdentifier;\n\treadonly letter?: string;\n\treadonly tooltip?: string;\n\treadonly bubble?: boolean;\n\treadonly source?: string;\n}\n\nexport interface IDecoration {\n\treadonly tooltip: string;\n\treadonly labelClassName: string;\n\treadonly badgeClassName: string;\n\tupdate(data: IDecorationData): IDecoration;\n}\n\nexport interface IDecorationsProvider {\n\treadonly label: string;\n\treadonly onDidChange: Event<URI[]>;\n\tprovideDecorations(uri: URI, token: CancellationToken): IDecorationData | Promise<IDecorationData | undefined> | undefined;\n}\n\nexport interface IResourceDecorationChangeEvent {\n\taffectsResource(uri: URI): boolean;\n}\n\nexport interface IDecorationsService {\n\n\treadonly _serviceBrand: any;\n\n\treadonly onDidChangeDecorations: Event<IResourceDecorationChangeEvent>;\n\n\tregisterDecorationsProvider(provider: IDecorationsProvider): IDisposable;\n\n\tgetDecoration(uri: URI, includeChildren: boolean, overwrite?: IDecorationData): IDecoration | undefined;\n}\n"]}]}