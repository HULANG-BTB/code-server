{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar network_1 = require(\"vs/base/common/network\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensionManagementIpc_1 = require(\"vs/platform/extensionManagement/node/extensionManagementIpc\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar remoteHosts_1 = require(\"vs/platform/remote/common/remoteHosts\");\nvar sharedProcessService_1 = require(\"vs/platform/ipc/electron-browser/sharedProcessService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar localExtensionManagementServerAuthority = 'vscode-local';\nvar ExtensionManagementServerService = /** @class */ (function () {\n    function ExtensionManagementServerService(sharedProcessService, remoteAgentService) {\n        this.remoteExtensionManagementServer = null;\n        var localExtensionManagementService = new extensionManagementIpc_1.ExtensionManagementChannelClient(sharedProcessService.getChannel('extensions'));\n        this.localExtensionManagementServer = { extensionManagementService: localExtensionManagementService, authority: localExtensionManagementServerAuthority, label: nls_1.localize('local', \"Local\") };\n        var remoteAgentConnection = remoteAgentService.getConnection();\n        if (remoteAgentConnection) {\n            var extensionManagementService = new extensionManagementIpc_1.ExtensionManagementChannelClient(remoteAgentConnection.getChannel('extensions'));\n            this.remoteExtensionManagementServer = { authority: remoteAgentConnection.remoteAuthority, extensionManagementService: extensionManagementService, label: remoteAgentConnection.remoteAuthority };\n        }\n    }\n    ExtensionManagementServerService.prototype.getExtensionManagementServer = function (location) {\n        if (location.scheme === network_1.Schemas.file) {\n            return this.localExtensionManagementServer;\n        }\n        if (location.scheme === remoteHosts_1.REMOTE_HOST_SCHEME) {\n            return this.remoteExtensionManagementServer;\n        }\n        return null;\n    };\n    ExtensionManagementServerService = tslib_1.__decorate([\n        tslib_1.__param(0, sharedProcessService_1.ISharedProcessService),\n        tslib_1.__param(1, remoteAgentService_1.IRemoteAgentService)\n    ], ExtensionManagementServerService);\n    return ExtensionManagementServerService;\n}());\nexports.ExtensionManagementServerService = ExtensionManagementServerService;\nextensions_1.registerSingleton(extensionManagement_1.IExtensionManagementServerService, ExtensionManagementServerService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8BAAkC;AAClC,kDAAiD;AAEjD,kGAA2I;AAC3I,sGAA+G;AAC/G,6FAA6F;AAC7F,qEAA2E;AAE3E,8FAA8F;AAC9F,0EAAgF;AAEhF,IAAM,uCAAuC,GAAW,cAAc,CAAC;AAEvE;IAOC,0CACwB,oBAA2C,EAC7C,kBAAuC;QAJpD,oCAA+B,GAAsC,IAAI,CAAC;QAMlF,IAAM,+BAA+B,GAAG,IAAI,yDAAgC,CAAC,oBAAoB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;QAE5H,IAAI,CAAC,8BAA8B,GAAG,EAAE,0BAA0B,EAAE,+BAA+B,EAAE,SAAS,EAAE,uCAAuC,EAAE,KAAK,EAAE,cAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;QAC7L,IAAM,qBAAqB,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;QACjE,IAAI,qBAAqB,EAAE;YAC1B,IAAM,0BAA0B,GAAG,IAAI,yDAAgC,CAAC,qBAAqB,CAAC,UAAU,CAAW,YAAY,CAAC,CAAC,CAAC;YAClI,IAAI,CAAC,+BAA+B,GAAG,EAAE,SAAS,EAAE,qBAAqB,CAAC,eAAe,EAAE,0BAA0B,4BAAA,EAAE,KAAK,EAAE,qBAAqB,CAAC,eAAe,EAAE,CAAC;SACtK;IACF,CAAC;IAED,uEAA4B,GAA5B,UAA6B,QAAa;QACzC,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;YACrC,OAAO,IAAI,CAAC,8BAA8B,CAAC;SAC3C;QACD,IAAI,QAAQ,CAAC,MAAM,KAAK,gCAAkB,EAAE;YAC3C,OAAO,IAAI,CAAC,+BAA+B,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IA7BW,gCAAgC;QAQ1C,mBAAA,4CAAqB,CAAA;QACrB,mBAAA,wCAAmB,CAAA;OATT,gCAAgC,CA8B5C;IAAD,uCAAC;CAAA,AA9BD,IA8BC;AA9BY,4EAAgC;AAgC7C,8BAAiB,CAAC,uDAAiC,EAAE,gCAAgC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionManagementServer, IExtensionManagementServerService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementChannelClient } from 'vs/platform/extensionManagement/node/extensionManagementIpc';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { REMOTE_HOST_SCHEME } from 'vs/platform/remote/common/remoteHosts';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-browser/sharedProcessService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nconst localExtensionManagementServerAuthority: string = 'vscode-local';\n\nexport class ExtensionManagementServerService implements IExtensionManagementServerService {\n\n\t_serviceBrand: any;\n\n\treadonly localExtensionManagementServer: IExtensionManagementServer;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null = null;\n\n\tconstructor(\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tconst localExtensionManagementService = new ExtensionManagementChannelClient(sharedProcessService.getChannel('extensions'));\n\n\t\tthis.localExtensionManagementServer = { extensionManagementService: localExtensionManagementService, authority: localExtensionManagementServerAuthority, label: localize('local', \"Local\") };\n\t\tconst remoteAgentConnection = remoteAgentService.getConnection();\n\t\tif (remoteAgentConnection) {\n\t\t\tconst extensionManagementService = new ExtensionManagementChannelClient(remoteAgentConnection.getChannel<IChannel>('extensions'));\n\t\t\tthis.remoteExtensionManagementServer = { authority: remoteAgentConnection.remoteAuthority, extensionManagementService, label: remoteAgentConnection.remoteAuthority };\n\t\t}\n\t}\n\n\tgetExtensionManagementServer(location: URI): IExtensionManagementServer | null {\n\t\tif (location.scheme === Schemas.file) {\n\t\t\treturn this.localExtensionManagementServer;\n\t\t}\n\t\tif (location.scheme === REMOTE_HOST_SCHEME) {\n\t\t\treturn this.remoteExtensionManagementServer;\n\t\t}\n\t\treturn null;\n\t}\n}\n\nregisterSingleton(IExtensionManagementServerService, ExtensionManagementServerService);"]}]}