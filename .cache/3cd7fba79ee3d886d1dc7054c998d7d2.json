{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar objects = require(\"vs/base/common/objects\");\nvar types = require(\"vs/base/common/types\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar network_1 = require(\"vs/base/common/network\");\nvar actions_1 = require(\"vs/base/common/actions\");\nexports.ActiveEditorContext = new contextkey_1.RawContextKey('activeEditor', null);\nexports.EditorsVisibleContext = new contextkey_1.RawContextKey('editorIsOpen', false);\nexports.EditorGroupActiveEditorDirtyContext = new contextkey_1.RawContextKey('groupActiveEditorDirty', false);\nexports.NoEditorsVisibleContext = exports.EditorsVisibleContext.toNegated();\nexports.TextCompareEditorVisibleContext = new contextkey_1.RawContextKey('textCompareEditorVisible', false);\nexports.TextCompareEditorActiveContext = new contextkey_1.RawContextKey('textCompareEditorActive', false);\nexports.ActiveEditorGroupEmptyContext = new contextkey_1.RawContextKey('activeEditorGroupEmpty', false);\nexports.MultipleEditorGroupsContext = new contextkey_1.RawContextKey('multipleEditorGroups', false);\nexports.SingleEditorGroupsContext = exports.MultipleEditorGroupsContext.toNegated();\nexports.InEditorZenModeContext = new contextkey_1.RawContextKey('inZenMode', false);\nexports.SplitEditorsVertically = new contextkey_1.RawContextKey('splitEditorsVertically', false);\n/**\n * Text diff editor id.\n */\nexports.TEXT_DIFF_EDITOR_ID = 'workbench.editors.textDiffEditor';\n/**\n * Binary diff editor id.\n */\nexports.BINARY_DIFF_EDITOR_ID = 'workbench.editors.binaryResourceDiffEditor';\nvar Verbosity;\n(function (Verbosity) {\n    Verbosity[Verbosity[\"SHORT\"] = 0] = \"SHORT\";\n    Verbosity[Verbosity[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    Verbosity[Verbosity[\"LONG\"] = 2] = \"LONG\";\n})(Verbosity = exports.Verbosity || (exports.Verbosity = {}));\n/**\n * Editor inputs are lightweight objects that can be passed to the workbench API to open inside the editor part.\n * Each editor input is mapped to an editor that is capable of opening it through the Platform facade.\n */\nvar EditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorInput, _super);\n    function EditorInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onDidChangeDirty = _this._register(new event_1.Emitter());\n        _this._onDidChangeLabel = _this._register(new event_1.Emitter());\n        _this._onDispose = _this._register(new event_1.Emitter());\n        _this.disposed = false;\n        return _this;\n    }\n    Object.defineProperty(EditorInput.prototype, \"onDidChangeDirty\", {\n        get: function () { return this._onDidChangeDirty.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorInput.prototype, \"onDidChangeLabel\", {\n        get: function () { return this._onDidChangeLabel.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorInput.prototype, \"onDispose\", {\n        get: function () { return this._onDispose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the associated resource of this input if any.\n     */\n    EditorInput.prototype.getResource = function () {\n        return null;\n    };\n    /**\n     * Returns the name of this input that can be shown to the user. Examples include showing the name of the input\n     * above the editor area when the input is shown.\n     */\n    EditorInput.prototype.getName = function () {\n        return null;\n    };\n    /**\n     * Returns the description of this input that can be shown to the user. Examples include showing the description of\n     * the input above the editor area to the side of the name of the input.\n     */\n    EditorInput.prototype.getDescription = function (verbosity) {\n        return null;\n    };\n    /**\n     * Returns the title of this input that can be shown to the user. Examples include showing the title of\n     * the input above the editor area as hover over the input label.\n     */\n    EditorInput.prototype.getTitle = function (verbosity) {\n        return this.getName();\n    };\n    /**\n     * Returns the preferred editor for this input. A list of candidate editors is passed in that whee registered\n     * for the input. This allows subclasses to decide late which editor to use for the input on a case by case basis.\n     */\n    EditorInput.prototype.getPreferredEditorId = function (candidates) {\n        if (candidates && candidates.length > 0) {\n            return candidates[0];\n        }\n        return null;\n    };\n    /**\n     * Returns a descriptor suitable for telemetry events.\n     *\n     * Subclasses should extend if they can contribute.\n     */\n    EditorInput.prototype.getTelemetryDescriptor = function () {\n        /* __GDPR__FRAGMENT__\n            \"EditorTelemetryDescriptor\" : {\n                \"typeId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        return { typeId: this.getTypeId() };\n    };\n    /**\n     * An editor that is dirty will be asked to be saved once it closes.\n     */\n    EditorInput.prototype.isDirty = function () {\n        return false;\n    };\n    /**\n     * Subclasses should bring up a proper dialog for the user if the editor is dirty and return the result.\n     */\n    EditorInput.prototype.confirmSave = function () {\n        return Promise.resolve(ConfirmResult.DONT_SAVE);\n    };\n    /**\n     * Saves the editor if it is dirty. Subclasses return a promise with a boolean indicating the success of the operation.\n     */\n    EditorInput.prototype.save = function () {\n        return Promise.resolve(true);\n    };\n    /**\n     * Reverts the editor if it is dirty. Subclasses return a promise with a boolean indicating the success of the operation.\n     */\n    EditorInput.prototype.revert = function (options) {\n        return Promise.resolve(true);\n    };\n    /**\n     * Called when this input is no longer opened in any editor. Subclasses can free resources as needed.\n     */\n    EditorInput.prototype.close = function () {\n        this.dispose();\n    };\n    /**\n     * Subclasses can set this to false if it does not make sense to split the editor input.\n     */\n    EditorInput.prototype.supportsSplitEditor = function () {\n        return true;\n    };\n    /**\n     * Returns true if this input is identical to the otherInput.\n     */\n    EditorInput.prototype.matches = function (otherInput) {\n        return this === otherInput;\n    };\n    /**\n     * Returns whether this input was disposed or not.\n     */\n    EditorInput.prototype.isDisposed = function () {\n        return this.disposed;\n    };\n    /**\n     * Called when an editor input is no longer needed. Allows to free up any resources taken by\n     * resolving the editor input.\n     */\n    EditorInput.prototype.dispose = function () {\n        this.disposed = true;\n        this._onDispose.fire();\n        _super.prototype.dispose.call(this);\n    };\n    return EditorInput;\n}(lifecycle_1.Disposable));\nexports.EditorInput = EditorInput;\nvar ConfirmResult;\n(function (ConfirmResult) {\n    ConfirmResult[ConfirmResult[\"SAVE\"] = 0] = \"SAVE\";\n    ConfirmResult[ConfirmResult[\"DONT_SAVE\"] = 1] = \"DONT_SAVE\";\n    ConfirmResult[ConfirmResult[\"CANCEL\"] = 2] = \"CANCEL\";\n})(ConfirmResult = exports.ConfirmResult || (exports.ConfirmResult = {}));\nvar EncodingMode;\n(function (EncodingMode) {\n    /**\n     * Instructs the encoding support to encode the current input with the provided encoding\n     */\n    EncodingMode[EncodingMode[\"Encode\"] = 0] = \"Encode\";\n    /**\n     * Instructs the encoding support to decode the current input with the provided encoding\n     */\n    EncodingMode[EncodingMode[\"Decode\"] = 1] = \"Decode\";\n})(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));\n/**\n * Side by side editor inputs that have a master and details side.\n */\nvar SideBySideEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(SideBySideEditorInput, _super);\n    function SideBySideEditorInput(name, description, _details, _master) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this.description = description;\n        _this._details = _details;\n        _this._master = _master;\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(SideBySideEditorInput.prototype, \"master\", {\n        get: function () {\n            return this._master;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SideBySideEditorInput.prototype, \"details\", {\n        get: function () {\n            return this._details;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SideBySideEditorInput.prototype.isDirty = function () {\n        return this.master.isDirty();\n    };\n    SideBySideEditorInput.prototype.confirmSave = function () {\n        return this.master.confirmSave();\n    };\n    SideBySideEditorInput.prototype.save = function () {\n        return this.master.save();\n    };\n    SideBySideEditorInput.prototype.revert = function () {\n        return this.master.revert();\n    };\n    SideBySideEditorInput.prototype.getTelemetryDescriptor = function () {\n        var descriptor = this.master.getTelemetryDescriptor();\n        return objects.assign(descriptor, _super.prototype.getTelemetryDescriptor.call(this));\n    };\n    SideBySideEditorInput.prototype.registerListeners = function () {\n        var _this = this;\n        // When the details or master input gets disposed, dispose this diff editor input\n        var onceDetailsDisposed = event_1.Event.once(this.details.onDispose);\n        this._register(onceDetailsDisposed(function () {\n            if (!_this.isDisposed()) {\n                _this.dispose();\n            }\n        }));\n        var onceMasterDisposed = event_1.Event.once(this.master.onDispose);\n        this._register(onceMasterDisposed(function () {\n            if (!_this.isDisposed()) {\n                _this.dispose();\n            }\n        }));\n        // Reemit some events from the master side to the outside\n        this._register(this.master.onDidChangeDirty(function () { return _this._onDidChangeDirty.fire(); }));\n        this._register(this.master.onDidChangeLabel(function () { return _this._onDidChangeLabel.fire(); }));\n    };\n    SideBySideEditorInput.prototype.resolve = function () {\n        return Promise.resolve(null);\n    };\n    SideBySideEditorInput.prototype.getTypeId = function () {\n        return SideBySideEditorInput.ID;\n    };\n    SideBySideEditorInput.prototype.getName = function () {\n        return this.name;\n    };\n    SideBySideEditorInput.prototype.getDescription = function () {\n        return this.description;\n    };\n    SideBySideEditorInput.prototype.matches = function (otherInput) {\n        if (_super.prototype.matches.call(this, otherInput) === true) {\n            return true;\n        }\n        if (otherInput) {\n            if (!(otherInput instanceof SideBySideEditorInput)) {\n                return false;\n            }\n            var otherDiffInput = otherInput;\n            return this.details.matches(otherDiffInput.details) && this.master.matches(otherDiffInput.master);\n        }\n        return false;\n    };\n    SideBySideEditorInput.ID = 'workbench.editorinputs.sidebysideEditorInput';\n    return SideBySideEditorInput;\n}(EditorInput));\nexports.SideBySideEditorInput = SideBySideEditorInput;\n/**\n * The editor model is the heavyweight counterpart of editor input. Depending on the editor input, it\n * connects to the disk to retrieve content and may allow for saving it back or reverting it. Editor models\n * are typically cached for some while because they are expensive to construct.\n */\nvar EditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorModel, _super);\n    function EditorModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onDispose = _this._register(new event_1.Emitter());\n        return _this;\n    }\n    Object.defineProperty(EditorModel.prototype, \"onDispose\", {\n        get: function () { return this._onDispose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Causes this model to load returning a promise when loading is completed.\n     */\n    EditorModel.prototype.load = function () {\n        return Promise.resolve(this);\n    };\n    /**\n     * Returns whether this model was loaded or not.\n     */\n    EditorModel.prototype.isResolved = function () {\n        return true;\n    };\n    /**\n     * Subclasses should implement to free resources that have been claimed through loading.\n     */\n    EditorModel.prototype.dispose = function () {\n        this._onDispose.fire();\n        _super.prototype.dispose.call(this);\n    };\n    return EditorModel;\n}(lifecycle_1.Disposable));\nexports.EditorModel = EditorModel;\nfunction isEditorInputWithOptions(obj) {\n    var editorInputWithOptions = obj;\n    return !!editorInputWithOptions && !!editorInputWithOptions.editor;\n}\nexports.isEditorInputWithOptions = isEditorInputWithOptions;\n/**\n * The editor options is the base class of options that can be passed in when opening an editor.\n */\nvar EditorOptions = /** @class */ (function () {\n    function EditorOptions() {\n    }\n    /**\n     * Helper to create EditorOptions inline.\n     */\n    EditorOptions.create = function (settings) {\n        var options = new EditorOptions();\n        options.preserveFocus = settings.preserveFocus;\n        options.forceReload = settings.forceReload;\n        options.revealIfVisible = settings.revealIfVisible;\n        options.revealIfOpened = settings.revealIfOpened;\n        options.pinned = settings.pinned;\n        options.index = settings.index;\n        options.inactive = settings.inactive;\n        options.ignoreError = settings.ignoreError;\n        return options;\n    };\n    return EditorOptions;\n}());\nexports.EditorOptions = EditorOptions;\n/**\n * Base Text Editor Options.\n */\nvar TextEditorOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(TextEditorOptions, _super);\n    function TextEditorOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TextEditorOptions.from = function (input) {\n        if (!input || !input.options) {\n            return undefined;\n        }\n        return TextEditorOptions.create(input.options);\n    };\n    /**\n     * Helper to convert options bag to real class\n     */\n    TextEditorOptions.create = function (options) {\n        if (options === void 0) { options = Object.create(null); }\n        var textEditorOptions = new TextEditorOptions();\n        if (options.selection) {\n            var selection = options.selection;\n            textEditorOptions.selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn);\n        }\n        if (options.viewState) {\n            textEditorOptions.editorViewState = options.viewState;\n        }\n        if (options.forceReload) {\n            textEditorOptions.forceReload = true;\n        }\n        if (options.revealIfVisible) {\n            textEditorOptions.revealIfVisible = true;\n        }\n        if (options.revealIfOpened) {\n            textEditorOptions.revealIfOpened = true;\n        }\n        if (options.preserveFocus) {\n            textEditorOptions.preserveFocus = true;\n        }\n        if (options.revealInCenterIfOutsideViewport) {\n            textEditorOptions.revealInCenterIfOutsideViewport = true;\n        }\n        if (options.pinned) {\n            textEditorOptions.pinned = true;\n        }\n        if (options.inactive) {\n            textEditorOptions.inactive = true;\n        }\n        if (options.ignoreError) {\n            textEditorOptions.ignoreError = true;\n        }\n        if (typeof options.index === 'number') {\n            textEditorOptions.index = options.index;\n        }\n        return textEditorOptions;\n    };\n    /**\n     * Returns if this options object has objects defined for the editor.\n     */\n    TextEditorOptions.prototype.hasOptionsDefined = function () {\n        return !!this.editorViewState || (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn));\n    };\n    /**\n     * Tells the editor to set show the given selection when the editor is being opened.\n     */\n    TextEditorOptions.prototype.selection = function (startLineNumber, startColumn, endLineNumber, endColumn) {\n        if (endLineNumber === void 0) { endLineNumber = startLineNumber; }\n        if (endColumn === void 0) { endColumn = startColumn; }\n        this.startLineNumber = startLineNumber;\n        this.startColumn = startColumn;\n        this.endLineNumber = endLineNumber;\n        this.endColumn = endColumn;\n        return this;\n    };\n    /**\n     * Create a TextEditorOptions inline to be used when the editor is opening.\n     */\n    TextEditorOptions.fromEditor = function (editor, settings) {\n        var options = TextEditorOptions.create(settings);\n        // View state\n        options.editorViewState = editor.saveViewState();\n        return options;\n    };\n    /**\n     * Apply the view state or selection to the given editor.\n     *\n     * @return if something was applied\n     */\n    TextEditorOptions.prototype.apply = function (editor, scrollType) {\n        // View state\n        return this.applyViewState(editor, scrollType);\n    };\n    TextEditorOptions.prototype.applyViewState = function (editor, scrollType) {\n        var gotApplied = false;\n        // First try viewstate\n        if (this.editorViewState) {\n            editor.restoreViewState(this.editorViewState);\n            gotApplied = true;\n        }\n        // Otherwise check for selection\n        else if (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn)) {\n            // Select\n            if (!types.isUndefinedOrNull(this.endLineNumber) && !types.isUndefinedOrNull(this.endColumn)) {\n                var range = {\n                    startLineNumber: this.startLineNumber,\n                    startColumn: this.startColumn,\n                    endLineNumber: this.endLineNumber,\n                    endColumn: this.endColumn\n                };\n                editor.setSelection(range);\n                if (this.revealInCenterIfOutsideViewport) {\n                    editor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n                }\n                else {\n                    editor.revealRangeInCenter(range, scrollType);\n                }\n            }\n            // Reveal\n            else {\n                var pos = {\n                    lineNumber: this.startLineNumber,\n                    column: this.startColumn\n                };\n                editor.setPosition(pos);\n                if (this.revealInCenterIfOutsideViewport) {\n                    editor.revealPositionInCenterIfOutsideViewport(pos, scrollType);\n                }\n                else {\n                    editor.revealPositionInCenter(pos, scrollType);\n                }\n            }\n            gotApplied = true;\n        }\n        return gotApplied;\n    };\n    return TextEditorOptions;\n}(EditorOptions));\nexports.TextEditorOptions = TextEditorOptions;\nvar EditorCommandsContextActionRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorCommandsContextActionRunner, _super);\n    function EditorCommandsContextActionRunner(context) {\n        var _this = _super.call(this) || this;\n        _this.context = context;\n        return _this;\n    }\n    EditorCommandsContextActionRunner.prototype.run = function (action, context) {\n        return _super.prototype.run.call(this, action, this.context);\n    };\n    return EditorCommandsContextActionRunner;\n}(actions_1.ActionRunner));\nexports.EditorCommandsContextActionRunner = EditorCommandsContextActionRunner;\nfunction toResource(editor, options) {\n    if (!editor) {\n        return null;\n    }\n    // Check for side by side if we are asked to\n    if (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {\n        editor = editor.master;\n    }\n    var resource = editor.getResource();\n    if (!options || !options.filter) {\n        return resource; // return early if no filter is specified\n    }\n    if (!resource) {\n        return null;\n    }\n    var includeFiles;\n    var includeUntitled;\n    if (Array.isArray(options.filter)) {\n        includeFiles = (options.filter.indexOf(network_1.Schemas.file) >= 0);\n        includeUntitled = (options.filter.indexOf(network_1.Schemas.untitled) >= 0);\n    }\n    else {\n        includeFiles = (options.filter === network_1.Schemas.file);\n        includeUntitled = (options.filter === network_1.Schemas.untitled);\n    }\n    if (includeFiles && resource.scheme === network_1.Schemas.file) {\n        return resource;\n    }\n    if (includeUntitled && resource.scheme === network_1.Schemas.untitled) {\n        return resource;\n    }\n    return null;\n}\nexports.toResource = toResource;\nvar CloseDirection;\n(function (CloseDirection) {\n    CloseDirection[CloseDirection[\"LEFT\"] = 0] = \"LEFT\";\n    CloseDirection[CloseDirection[\"RIGHT\"] = 1] = \"RIGHT\";\n})(CloseDirection = exports.CloseDirection || (exports.CloseDirection = {}));\nvar EditorInputFactoryRegistry = /** @class */ (function () {\n    function EditorInputFactoryRegistry() {\n        this.editorInputFactoryConstructors = Object.create(null);\n        this.editorInputFactoryInstances = Object.create(null);\n    }\n    EditorInputFactoryRegistry.prototype.start = function (accessor) {\n        this.instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        for (var key in this.editorInputFactoryConstructors) {\n            var element = this.editorInputFactoryConstructors[key];\n            this.createEditorInputFactory(key, element);\n        }\n        this.editorInputFactoryConstructors = Object.create(null);\n    };\n    EditorInputFactoryRegistry.prototype.createEditorInputFactory = function (editorInputId, ctor) {\n        var instance = this.instantiationService.createInstance(ctor);\n        this.editorInputFactoryInstances[editorInputId] = instance;\n    };\n    EditorInputFactoryRegistry.prototype.registerFileInputFactory = function (factory) {\n        this.fileInputFactory = factory;\n    };\n    EditorInputFactoryRegistry.prototype.getFileInputFactory = function () {\n        return this.fileInputFactory;\n    };\n    EditorInputFactoryRegistry.prototype.registerEditorInputFactory = function (editorInputId, ctor) {\n        if (!this.instantiationService) {\n            this.editorInputFactoryConstructors[editorInputId] = ctor;\n        }\n        else {\n            this.createEditorInputFactory(editorInputId, ctor);\n        }\n    };\n    EditorInputFactoryRegistry.prototype.getEditorInputFactory = function (editorInputId) {\n        return this.editorInputFactoryInstances[editorInputId];\n    };\n    return EditorInputFactoryRegistry;\n}());\nexports.Extensions = {\n    EditorInputFactories: 'workbench.contributions.editor.inputFactories'\n};\nplatform_1.Registry.add(exports.Extensions.EditorInputFactories, new EditorInputFactoryRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport * as objects from 'vs/base/common/objects';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { IEditor as ICodeEditor, IEditorViewState, ScrollType, IDiffEditor } from 'vs/editor/common/editorCommon';\nimport { IEditorModel, IEditorOptions, ITextEditorOptions, IBaseResourceInput } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService, IConstructorSignature0, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { RawContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Schemas } from 'vs/base/common/network';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ICompositeControl } from 'vs/workbench/common/composite';\nimport { ActionRunner, IAction } from 'vs/base/common/actions';\n\nexport const ActiveEditorContext = new RawContextKey<string | null>('activeEditor', null);\nexport const EditorsVisibleContext = new RawContextKey<boolean>('editorIsOpen', false);\nexport const EditorGroupActiveEditorDirtyContext = new RawContextKey<boolean>('groupActiveEditorDirty', false);\nexport const NoEditorsVisibleContext: ContextKeyExpr = EditorsVisibleContext.toNegated();\nexport const TextCompareEditorVisibleContext = new RawContextKey<boolean>('textCompareEditorVisible', false);\nexport const TextCompareEditorActiveContext = new RawContextKey<boolean>('textCompareEditorActive', false);\nexport const ActiveEditorGroupEmptyContext = new RawContextKey<boolean>('activeEditorGroupEmpty', false);\nexport const MultipleEditorGroupsContext = new RawContextKey<boolean>('multipleEditorGroups', false);\nexport const SingleEditorGroupsContext = MultipleEditorGroupsContext.toNegated();\nexport const InEditorZenModeContext = new RawContextKey<boolean>('inZenMode', false);\nexport const SplitEditorsVertically = new RawContextKey<boolean>('splitEditorsVertically', false);\n\n/**\n * Text diff editor id.\n */\nexport const TEXT_DIFF_EDITOR_ID = 'workbench.editors.textDiffEditor';\n\n/**\n * Binary diff editor id.\n */\nexport const BINARY_DIFF_EDITOR_ID = 'workbench.editors.binaryResourceDiffEditor';\n\nexport interface IEditor {\n\n\t/**\n\t * The assigned input of this editor.\n\t */\n\tinput: IEditorInput | null;\n\n\t/**\n\t * The assigned options of this editor.\n\t */\n\toptions: IEditorOptions | null;\n\n\t/**\n\t * The assigned group this editor is showing in.\n\t */\n\tgroup: IEditorGroup | undefined;\n\n\t/**\n\t * The minimum width of this editor.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * The maximum width of this editor.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * The minimum height of this editor.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * The maximum height of this editor.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * An event to notify whenever minimum/maximum width/height changes.\n\t */\n\treadonly onDidSizeConstraintsChange: Event<{ width: number; height: number; } | undefined>;\n\n\t/**\n\t * Returns the unique identifier of this editor.\n\t */\n\tgetId(): string;\n\n\t/**\n\t * Returns the underlying control of this editor.\n\t */\n\tgetControl(): IEditorControl | null;\n\n\t/**\n\t * Asks the underlying control to focus.\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Finds out if this editor is visible or not.\n\t */\n\tisVisible(): boolean;\n}\n\nexport interface ITextEditor extends IEditor {\n\n\t/**\n\t * Returns the underlying text editor widget of this editor.\n\t */\n\tgetControl(): ICodeEditor;\n}\n\nexport interface ITextDiffEditor extends IEditor {\n\n\t/**\n\t * Returns the underlying text editor widget of this editor.\n\t */\n\tgetControl(): IDiffEditor;\n}\n\nexport interface ITextSideBySideEditor extends IEditor {\n\n\t/**\n\t * Returns the underlying text editor widget of the master side\n\t * of this side-by-side editor.\n\t */\n\tgetMasterEditor(): ITextEditor;\n\n\t/**\n\t * Returns the underlying text editor widget of the details side\n\t * of this side-by-side editor.\n\t */\n\tgetDetailsEditor(): ITextEditor;\n}\n\n/**\n * Marker interface for the base editor control\n */\nexport interface IEditorControl extends ICompositeControl { }\n\nexport interface IFileInputFactory {\n\n\tcreateFileInput(resource: URI, encoding: string | undefined, instantiationService: IInstantiationService): IFileEditorInput;\n\n\tisFileInput(obj: any): obj is IFileEditorInput;\n}\n\nexport interface IEditorInputFactoryRegistry {\n\n\t/**\n\t * Registers the file input factory to use for file inputs.\n\t */\n\tregisterFileInputFactory(factory: IFileInputFactory): void;\n\n\t/**\n\t * Returns the file input factory to use for file inputs.\n\t */\n\tgetFileInputFactory(): IFileInputFactory;\n\n\t/**\n\t * Registers a editor input factory for the given editor input to the registry. An editor input factory\n\t * is capable of serializing and deserializing editor inputs from string data.\n\t *\n\t * @param editorInputId the identifier of the editor input\n\t * @param factory the editor input factory for serialization/deserialization\n\t */\n\tregisterEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void;\n\n\t/**\n\t * Returns the editor input factory for the given editor input.\n\t *\n\t * @param editorInputId the identifier of the editor input\n\t */\n\tgetEditorInputFactory(editorInputId: string): IEditorInputFactory;\n\n\t/**\n\t * Starts the registry by providing the required services.\n\t */\n\tstart(accessor: ServicesAccessor): void;\n}\n\nexport interface IEditorInputFactory {\n\n\t/**\n\t * Returns a string representation of the provided editor input that contains enough information\n\t * to deserialize back to the original editor input from the deserialize() method.\n\t */\n\tserialize(editorInput: EditorInput): string | undefined;\n\n\t/**\n\t * Returns an editor input from the provided serialized form of the editor input. This form matches\n\t * the value returned from the serialize() method.\n\t */\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput | undefined;\n}\n\nexport interface IUntitledResourceInput extends IBaseResourceInput {\n\n\t/**\n\t * Optional resource. If the resource is not provided a new untitled file is created.\n\t */\n\tresource?: URI;\n\n\t/**\n\t * Optional file path. Using the file resource will associate the file to the untitled resource.\n\t */\n\tfilePath?: string;\n\n\t/**\n\t * Optional language of the untitled resource.\n\t */\n\tlanguage?: string;\n\n\t/**\n\t * Optional contents of the untitled resource.\n\t */\n\tcontents?: string;\n\n\t/**\n\t * Optional encoding of the untitled resource.\n\t */\n\tencoding?: string;\n}\n\nexport interface IResourceDiffInput extends IBaseResourceInput {\n\n\t/**\n\t * The left hand side URI to open inside a diff editor.\n\t */\n\tleftResource: URI;\n\n\t/**\n\t * The right hand side URI to open inside a diff editor.\n\t */\n\trightResource: URI;\n}\n\nexport interface IResourceSideBySideInput extends IBaseResourceInput {\n\n\t/**\n\t * The right hand side URI to open inside a side by side editor.\n\t */\n\tmasterResource: URI;\n\n\t/**\n\t * The left hand side URI to open inside a side by side editor.\n\t */\n\tdetailResource: URI;\n}\n\nexport const enum Verbosity {\n\tSHORT,\n\tMEDIUM,\n\tLONG\n}\n\nexport interface IRevertOptions {\n\n\t/**\n\t *  Forces to load the contents of the editor again even if the editor is not dirty.\n\t */\n\tforce?: boolean;\n\n\t/**\n\t * A soft revert will clear dirty state of an editor but will not attempt to load it.\n\t */\n\tsoft?: boolean;\n}\n\nexport interface IEditorInput extends IDisposable {\n\n\t/**\n\t * Triggered when this input is disposed.\n\t */\n\tonDispose: Event<void>;\n\n\t/**\n\t * Returns the associated resource of this input.\n\t */\n\tgetResource(): URI | null;\n\n\t/**\n\t * Unique type identifier for this inpput.\n\t */\n\tgetTypeId(): string;\n\n\t/**\n\t * Returns the display name of this input.\n\t */\n\tgetName(): string | null;\n\n\t/**\n\t * Returns the display description of this input.\n\t */\n\tgetDescription(verbosity?: Verbosity): string | null;\n\n\t/**\n\t * Returns the display title of this input.\n\t */\n\tgetTitle(verbosity?: Verbosity): string | null;\n\n\t/**\n\t * Resolves the input.\n\t */\n\tresolve(): Promise<IEditorModel | null>;\n\n\t/**\n\t * Returns if this input is dirty or not.\n\t */\n\tisDirty(): boolean;\n\n\t/**\n\t * Reverts this input.\n\t */\n\trevert(options?: IRevertOptions): Promise<boolean>;\n\n\t/**\n\t * Returns if the other object matches this input.\n\t */\n\tmatches(other: any): boolean;\n}\n\n/**\n * Editor inputs are lightweight objects that can be passed to the workbench API to open inside the editor part.\n * Each editor input is mapped to an editor that is capable of opening it through the Platform facade.\n */\nexport abstract class EditorInput extends Disposable implements IEditorInput {\n\n\tprotected readonly _onDidChangeDirty: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeDirty(): Event<void> { return this._onDidChangeDirty.event; }\n\n\tprotected readonly _onDidChangeLabel: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChangeLabel(): Event<void> { return this._onDidChangeLabel.event; }\n\n\tprivate readonly _onDispose: Emitter<void> = this._register(new Emitter<void>());\n\tget onDispose(): Event<void> { return this._onDispose.event; }\n\n\tprivate disposed: boolean = false;\n\n\t/**\n\t * Returns the unique type identifier of this input.\n\t */\n\tabstract getTypeId(): string;\n\n\t/**\n\t * Returns the associated resource of this input if any.\n\t */\n\tgetResource(): URI | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the name of this input that can be shown to the user. Examples include showing the name of the input\n\t * above the editor area when the input is shown.\n\t */\n\tgetName(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the description of this input that can be shown to the user. Examples include showing the description of\n\t * the input above the editor area to the side of the name of the input.\n\t */\n\tgetDescription(verbosity?: Verbosity): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the title of this input that can be shown to the user. Examples include showing the title of\n\t * the input above the editor area as hover over the input label.\n\t */\n\tgetTitle(verbosity?: Verbosity): string | null {\n\t\treturn this.getName();\n\t}\n\n\t/**\n\t * Returns the preferred editor for this input. A list of candidate editors is passed in that whee registered\n\t * for the input. This allows subclasses to decide late which editor to use for the input on a case by case basis.\n\t */\n\tgetPreferredEditorId(candidates: string[]): string | null {\n\t\tif (candidates && candidates.length > 0) {\n\t\t\treturn candidates[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns a descriptor suitable for telemetry events.\n\t *\n\t * Subclasses should extend if they can contribute.\n\t */\n\tgetTelemetryDescriptor(): { [key: string]: any } {\n\t\t/* __GDPR__FRAGMENT__\n\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\"typeId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\treturn { typeId: this.getTypeId() };\n\t}\n\n\t/**\n\t * Returns a type of EditorModel that represents the resolved input. Subclasses should\n\t * override to provide a meaningful model.\n\t */\n\tabstract resolve(): Promise<IEditorModel | null>;\n\n\t/**\n\t * An editor that is dirty will be asked to be saved once it closes.\n\t */\n\tisDirty(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Subclasses should bring up a proper dialog for the user if the editor is dirty and return the result.\n\t */\n\tconfirmSave(): Promise<ConfirmResult> {\n\t\treturn Promise.resolve(ConfirmResult.DONT_SAVE);\n\t}\n\n\t/**\n\t * Saves the editor if it is dirty. Subclasses return a promise with a boolean indicating the success of the operation.\n\t */\n\tsave(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * Reverts the editor if it is dirty. Subclasses return a promise with a boolean indicating the success of the operation.\n\t */\n\trevert(options?: IRevertOptions): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * Called when this input is no longer opened in any editor. Subclasses can free resources as needed.\n\t */\n\tclose(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Subclasses can set this to false if it does not make sense to split the editor input.\n\t */\n\tsupportsSplitEditor(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns true if this input is identical to the otherInput.\n\t */\n\tmatches(otherInput: any): boolean {\n\t\treturn this === otherInput;\n\t}\n\n\t/**\n\t * Returns whether this input was disposed or not.\n\t */\n\tisDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\t/**\n\t * Called when an editor input is no longer needed. Allows to free up any resources taken by\n\t * resolving the editor input.\n\t */\n\tdispose(): void {\n\t\tthis.disposed = true;\n\t\tthis._onDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport const enum ConfirmResult {\n\tSAVE,\n\tDONT_SAVE,\n\tCANCEL\n}\n\nexport const enum EncodingMode {\n\n\t/**\n\t * Instructs the encoding support to encode the current input with the provided encoding\n\t */\n\tEncode,\n\n\t/**\n\t * Instructs the encoding support to decode the current input with the provided encoding\n\t */\n\tDecode\n}\n\nexport interface IEncodingSupport {\n\n\t/**\n\t * Gets the encoding of the input if known.\n\t */\n\tgetEncoding(): string;\n\n\t/**\n\t * Sets the encoding for the input for saving.\n\t */\n\tsetEncoding(encoding: string, mode: EncodingMode): void;\n}\n\n/**\n * This is a tagging interface to declare an editor input being capable of dealing with files. It is only used in the editor registry\n * to register this kind of input to the platform.\n */\nexport interface IFileEditorInput extends IEditorInput, IEncodingSupport {\n\n\tgetResource(): URI;\n\n\t/**\n\t * Sets the preferred encodingt to use for this input.\n\t */\n\tsetPreferredEncoding(encoding: string): void;\n\n\t/**\n\t * Forces this file input to open as binary instead of text.\n\t */\n\tsetForceOpenAsBinary(): void;\n}\n\n/**\n * Side by side editor inputs that have a master and details side.\n */\nexport class SideBySideEditorInput extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.editorinputs.sidebysideEditorInput';\n\n\tconstructor(\n\t\tprivate readonly name: string,\n\t\tprivate readonly description: string | null,\n\t\tprivate readonly _details: EditorInput,\n\t\tprivate readonly _master: EditorInput\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tget master(): EditorInput {\n\t\treturn this._master;\n\t}\n\n\tget details(): EditorInput {\n\t\treturn this._details;\n\t}\n\n\tisDirty(): boolean {\n\t\treturn this.master.isDirty();\n\t}\n\n\tconfirmSave(): Promise<ConfirmResult> {\n\t\treturn this.master.confirmSave();\n\t}\n\n\tsave(): Promise<boolean> {\n\t\treturn this.master.save();\n\t}\n\n\trevert(): Promise<boolean> {\n\t\treturn this.master.revert();\n\t}\n\n\tgetTelemetryDescriptor(): object {\n\t\tconst descriptor = this.master.getTelemetryDescriptor();\n\n\t\treturn objects.assign(descriptor, super.getTelemetryDescriptor());\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// When the details or master input gets disposed, dispose this diff editor input\n\t\tconst onceDetailsDisposed = Event.once(this.details.onDispose);\n\t\tthis._register(onceDetailsDisposed(() => {\n\t\t\tif (!this.isDisposed()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\tconst onceMasterDisposed = Event.once(this.master.onDispose);\n\t\tthis._register(onceMasterDisposed(() => {\n\t\t\tif (!this.isDisposed()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\n\t\t// Reemit some events from the master side to the outside\n\t\tthis._register(this.master.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis._register(this.master.onDidChangeLabel(() => this._onDidChangeLabel.fire()));\n\t}\n\n\tresolve(): Promise<EditorModel | null> {\n\t\treturn Promise.resolve(null);\n\t}\n\n\tgetTypeId(): string {\n\t\treturn SideBySideEditorInput.ID;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\tgetDescription(): string | null {\n\t\treturn this.description;\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput) {\n\t\t\tif (!(otherInput instanceof SideBySideEditorInput)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst otherDiffInput = <SideBySideEditorInput>otherInput;\n\t\t\treturn this.details.matches(otherDiffInput.details) && this.master.matches(otherDiffInput.master);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport interface ITextEditorModel extends IEditorModel {\n\ttextEditorModel: ITextModel;\n}\n\n/**\n * The editor model is the heavyweight counterpart of editor input. Depending on the editor input, it\n * connects to the disk to retrieve content and may allow for saving it back or reverting it. Editor models\n * are typically cached for some while because they are expensive to construct.\n */\nexport class EditorModel extends Disposable implements IEditorModel {\n\n\tprivate readonly _onDispose: Emitter<void> = this._register(new Emitter<void>());\n\tget onDispose(): Event<void> { return this._onDispose.event; }\n\n\t/**\n\t * Causes this model to load returning a promise when loading is completed.\n\t */\n\tload(): Promise<IEditorModel> {\n\t\treturn Promise.resolve(this);\n\t}\n\n\t/**\n\t * Returns whether this model was loaded or not.\n\t */\n\tisResolved(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses should implement to free resources that have been claimed through loading.\n\t */\n\tdispose(): void {\n\t\tthis._onDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface IEditorInputWithOptions {\n\teditor: IEditorInput;\n\toptions?: IEditorOptions | ITextEditorOptions;\n}\n\nexport function isEditorInputWithOptions(obj: any): obj is IEditorInputWithOptions {\n\tconst editorInputWithOptions = obj as IEditorInputWithOptions;\n\n\treturn !!editorInputWithOptions && !!editorInputWithOptions.editor;\n}\n\n/**\n * The editor options is the base class of options that can be passed in when opening an editor.\n */\nexport class EditorOptions implements IEditorOptions {\n\n\t/**\n\t * Helper to create EditorOptions inline.\n\t */\n\tstatic create(settings: IEditorOptions): EditorOptions {\n\t\tconst options = new EditorOptions();\n\n\t\toptions.preserveFocus = settings.preserveFocus;\n\t\toptions.forceReload = settings.forceReload;\n\t\toptions.revealIfVisible = settings.revealIfVisible;\n\t\toptions.revealIfOpened = settings.revealIfOpened;\n\t\toptions.pinned = settings.pinned;\n\t\toptions.index = settings.index;\n\t\toptions.inactive = settings.inactive;\n\t\toptions.ignoreError = settings.ignoreError;\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Tells the editor to not receive keyboard focus when the editor is being opened. By default,\n\t * the editor will receive keyboard focus on open.\n\t */\n\tpreserveFocus: boolean | undefined;\n\n\t/**\n\t * Tells the editor to reload the editor input in the editor even if it is identical to the one\n\t * already showing. By default, the editor will not reload the input if it is identical to the\n\t * one showing.\n\t */\n\tforceReload: boolean | undefined;\n\n\t/**\n\t * Will reveal the editor if it is already opened and visible in any of the opened editor groups.\n\t */\n\trevealIfVisible: boolean | undefined;\n\n\t/**\n\t * Will reveal the editor if it is already opened (even when not visible) in any of the opened editor groups.\n\t */\n\trevealIfOpened: boolean | undefined;\n\n\t/**\n\t * An editor that is pinned remains in the editor stack even when another editor is being opened.\n\t * An editor that is not pinned will always get replaced by another editor that is not pinned.\n\t */\n\tpinned: boolean | undefined;\n\n\t/**\n\t * The index in the document stack where to insert the editor into when opening.\n\t */\n\tindex: number | undefined;\n\n\t/**\n\t * An active editor that is opened will show its contents directly. Set to true to open an editor\n\t * in the background.\n\t */\n\tinactive: boolean | undefined;\n\n\t/**\n\t * Will not show an error in case opening the editor fails and thus allows to show a custom error\n\t * message as needed. By default, an error will be presented as notification if opening was not possible.\n\t */\n\tignoreError: boolean | undefined;\n}\n\n/**\n * Base Text Editor Options.\n */\nexport class TextEditorOptions extends EditorOptions {\n\tprivate startLineNumber: number;\n\tprivate startColumn: number;\n\tprivate endLineNumber: number;\n\tprivate endColumn: number;\n\n\tprivate revealInCenterIfOutsideViewport: boolean;\n\tprivate editorViewState: IEditorViewState | null;\n\n\tstatic from(input?: IBaseResourceInput): TextEditorOptions | undefined {\n\t\tif (!input || !input.options) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn TextEditorOptions.create(input.options);\n\t}\n\n\t/**\n\t * Helper to convert options bag to real class\n\t */\n\tstatic create(options: ITextEditorOptions = Object.create(null)): TextEditorOptions {\n\t\tconst textEditorOptions = new TextEditorOptions();\n\n\t\tif (options.selection) {\n\t\t\tconst selection = options.selection;\n\t\t\ttextEditorOptions.selection(selection.startLineNumber, selection.startColumn, selection.endLineNumber, selection.endColumn);\n\t\t}\n\n\t\tif (options.viewState) {\n\t\t\ttextEditorOptions.editorViewState = options.viewState as IEditorViewState;\n\t\t}\n\n\t\tif (options.forceReload) {\n\t\t\ttextEditorOptions.forceReload = true;\n\t\t}\n\n\t\tif (options.revealIfVisible) {\n\t\t\ttextEditorOptions.revealIfVisible = true;\n\t\t}\n\n\t\tif (options.revealIfOpened) {\n\t\t\ttextEditorOptions.revealIfOpened = true;\n\t\t}\n\n\t\tif (options.preserveFocus) {\n\t\t\ttextEditorOptions.preserveFocus = true;\n\t\t}\n\n\t\tif (options.revealInCenterIfOutsideViewport) {\n\t\t\ttextEditorOptions.revealInCenterIfOutsideViewport = true;\n\t\t}\n\n\t\tif (options.pinned) {\n\t\t\ttextEditorOptions.pinned = true;\n\t\t}\n\n\t\tif (options.inactive) {\n\t\t\ttextEditorOptions.inactive = true;\n\t\t}\n\n\t\tif (options.ignoreError) {\n\t\t\ttextEditorOptions.ignoreError = true;\n\t\t}\n\n\t\tif (typeof options.index === 'number') {\n\t\t\ttextEditorOptions.index = options.index;\n\t\t}\n\n\t\treturn textEditorOptions;\n\t}\n\n\t/**\n\t * Returns if this options object has objects defined for the editor.\n\t */\n\thasOptionsDefined(): boolean {\n\t\treturn !!this.editorViewState || (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn));\n\t}\n\n\t/**\n\t * Tells the editor to set show the given selection when the editor is being opened.\n\t */\n\tselection(startLineNumber: number, startColumn: number, endLineNumber: number = startLineNumber, endColumn: number = startColumn): EditorOptions {\n\t\tthis.startLineNumber = startLineNumber;\n\t\tthis.startColumn = startColumn;\n\t\tthis.endLineNumber = endLineNumber;\n\t\tthis.endColumn = endColumn;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Create a TextEditorOptions inline to be used when the editor is opening.\n\t */\n\tstatic fromEditor(editor: ICodeEditor, settings?: IEditorOptions): TextEditorOptions {\n\t\tconst options = TextEditorOptions.create(settings);\n\n\t\t// View state\n\t\toptions.editorViewState = editor.saveViewState();\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Apply the view state or selection to the given editor.\n\t *\n\t * @return if something was applied\n\t */\n\tapply(editor: ICodeEditor, scrollType: ScrollType): boolean {\n\n\t\t// View state\n\t\treturn this.applyViewState(editor, scrollType);\n\t}\n\n\tprivate applyViewState(editor: ICodeEditor, scrollType: ScrollType): boolean {\n\t\tlet gotApplied = false;\n\n\t\t// First try viewstate\n\t\tif (this.editorViewState) {\n\t\t\teditor.restoreViewState(this.editorViewState);\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\t// Otherwise check for selection\n\t\telse if (!types.isUndefinedOrNull(this.startLineNumber) && !types.isUndefinedOrNull(this.startColumn)) {\n\n\t\t\t// Select\n\t\t\tif (!types.isUndefinedOrNull(this.endLineNumber) && !types.isUndefinedOrNull(this.endColumn)) {\n\t\t\t\tconst range = {\n\t\t\t\t\tstartLineNumber: this.startLineNumber,\n\t\t\t\t\tstartColumn: this.startColumn,\n\t\t\t\t\tendLineNumber: this.endLineNumber,\n\t\t\t\t\tendColumn: this.endColumn\n\t\t\t\t};\n\t\t\t\teditor.setSelection(range);\n\t\t\t\tif (this.revealInCenterIfOutsideViewport) {\n\t\t\t\t\teditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n\t\t\t\t} else {\n\t\t\t\t\teditor.revealRangeInCenter(range, scrollType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Reveal\n\t\t\telse {\n\t\t\t\tconst pos = {\n\t\t\t\t\tlineNumber: this.startLineNumber,\n\t\t\t\t\tcolumn: this.startColumn\n\t\t\t\t};\n\t\t\t\teditor.setPosition(pos);\n\t\t\t\tif (this.revealInCenterIfOutsideViewport) {\n\t\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(pos, scrollType);\n\t\t\t\t} else {\n\t\t\t\t\teditor.revealPositionInCenter(pos, scrollType);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgotApplied = true;\n\t\t}\n\n\t\treturn gotApplied;\n\t}\n}\n\nexport interface IEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\teditor: IEditorInput;\n}\n\n/**\n * The editor commands context is used for editor commands (e.g. in the editor title)\n * and we must ensure that the context is serializable because it potentially travels\n * to the extension host!\n */\nexport interface IEditorCommandsContext {\n\tgroupId: GroupIdentifier;\n\teditorIndex?: number;\n}\n\nexport class EditorCommandsContextActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\tprivate context: IEditorCommandsContext\n\t) {\n\t\tsuper();\n\t}\n\n\trun(action: IAction, context?: any): Promise<void> {\n\t\treturn super.run(action, this.context);\n\t}\n}\n\nexport interface IEditorCloseEvent extends IEditorIdentifier {\n\treplaced: boolean;\n\tindex: number;\n}\n\nexport type GroupIdentifier = number;\n\nexport interface IWorkbenchEditorConfiguration {\n\tworkbench: {\n\t\teditor: IEditorPartConfiguration,\n\t\ticonTheme: string;\n\t};\n}\n\ninterface IEditorPartConfiguration {\n\tshowTabs?: boolean;\n\thighlightModifiedTabs?: boolean;\n\ttabCloseButton?: 'left' | 'right' | 'off';\n\ttabSizing?: 'fit' | 'shrink';\n\tfocusRecentEditorAfterClose?: boolean;\n\tshowIcons?: boolean;\n\tenablePreview?: boolean;\n\tenablePreviewFromQuickOpen?: boolean;\n\tcloseOnFileDelete?: boolean;\n\topenPositioning?: 'left' | 'right' | 'first' | 'last';\n\topenSideBySideDirection?: 'right' | 'down';\n\tcloseEmptyGroups?: boolean;\n\trevealIfOpen?: boolean;\n\tswipeToNavigate?: boolean;\n\tlabelFormat?: 'default' | 'short' | 'medium' | 'long';\n\trestoreViewState?: boolean;\n}\n\nexport interface IEditorPartOptions extends IEditorPartConfiguration {\n\ticonTheme?: string;\n}\n\nexport interface IResourceOptions {\n\tsupportSideBySide?: boolean;\n\tfilter?: string | string[];\n}\n\nexport function toResource(editor: IEditorInput | null | undefined, options?: IResourceOptions): URI | null {\n\tif (!editor) {\n\t\treturn null;\n\t}\n\n\t// Check for side by side if we are asked to\n\tif (options && options.supportSideBySide && editor instanceof SideBySideEditorInput) {\n\t\teditor = editor.master;\n\t}\n\n\tconst resource = editor.getResource();\n\tif (!options || !options.filter) {\n\t\treturn resource; // return early if no filter is specified\n\t}\n\n\tif (!resource) {\n\t\treturn null;\n\t}\n\n\tlet includeFiles: boolean;\n\tlet includeUntitled: boolean;\n\tif (Array.isArray(options.filter)) {\n\t\tincludeFiles = (options.filter.indexOf(Schemas.file) >= 0);\n\t\tincludeUntitled = (options.filter.indexOf(Schemas.untitled) >= 0);\n\t} else {\n\t\tincludeFiles = (options.filter === Schemas.file);\n\t\tincludeUntitled = (options.filter === Schemas.untitled);\n\t}\n\n\tif (includeFiles && resource.scheme === Schemas.file) {\n\t\treturn resource;\n\t}\n\n\tif (includeUntitled && resource.scheme === Schemas.untitled) {\n\t\treturn resource;\n\t}\n\n\treturn null;\n}\n\nexport const enum CloseDirection {\n\tLEFT,\n\tRIGHT\n}\n\nexport interface IEditorMemento<T> {\n\n\tsaveEditorState(group: IEditorGroup, resource: URI, state: T): void;\n\tsaveEditorState(group: IEditorGroup, editor: EditorInput, state: T): void;\n\n\tloadEditorState(group: IEditorGroup, resource: URI): T | undefined;\n\tloadEditorState(group: IEditorGroup, editor: EditorInput): T | undefined;\n\n\tclearEditorState(resource: URI, group?: IEditorGroup): void;\n\tclearEditorState(editor: EditorInput, group?: IEditorGroup): void;\n}\n\nclass EditorInputFactoryRegistry implements IEditorInputFactoryRegistry {\n\tprivate instantiationService: IInstantiationService;\n\tprivate fileInputFactory: IFileInputFactory;\n\tprivate editorInputFactoryConstructors: { [editorInputId: string]: IConstructorSignature0<IEditorInputFactory> } = Object.create(null);\n\tprivate readonly editorInputFactoryInstances: { [editorInputId: string]: IEditorInputFactory } = Object.create(null);\n\n\tstart(accessor: ServicesAccessor): void {\n\t\tthis.instantiationService = accessor.get(IInstantiationService);\n\n\t\tfor (let key in this.editorInputFactoryConstructors) {\n\t\t\tconst element = this.editorInputFactoryConstructors[key];\n\t\t\tthis.createEditorInputFactory(key, element);\n\t\t}\n\n\t\tthis.editorInputFactoryConstructors = Object.create(null);\n\t}\n\n\tprivate createEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void {\n\t\tconst instance = this.instantiationService.createInstance(ctor);\n\t\tthis.editorInputFactoryInstances[editorInputId] = instance;\n\t}\n\n\tregisterFileInputFactory(factory: IFileInputFactory): void {\n\t\tthis.fileInputFactory = factory;\n\t}\n\n\tgetFileInputFactory(): IFileInputFactory {\n\t\treturn this.fileInputFactory;\n\t}\n\n\tregisterEditorInputFactory(editorInputId: string, ctor: IConstructorSignature0<IEditorInputFactory>): void {\n\t\tif (!this.instantiationService) {\n\t\t\tthis.editorInputFactoryConstructors[editorInputId] = ctor;\n\t\t} else {\n\t\t\tthis.createEditorInputFactory(editorInputId, ctor);\n\t\t}\n\t}\n\n\tgetEditorInputFactory(editorInputId: string): IEditorInputFactory {\n\t\treturn this.editorInputFactoryInstances[editorInputId];\n\t}\n}\n\nexport const Extensions = {\n\tEditorInputFactories: 'workbench.contributions.editor.inputFactories'\n};\n\nRegistry.add(Extensions.EditorInputFactories, new EditorInputFactoryRegistry());\n"]}]}