{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar event_1 = require(\"vs/base/common/event\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar AccessibilityService = /** @class */ (function () {\n    function AccessibilityService(windowService) {\n        this.windowService = windowService;\n        this._accessibilitySupport = accessibility_1.AccessibilitySupport.Unknown;\n        this._onDidChangeAccessibilitySupport = new event_1.Emitter();\n        this.onDidChangeAccessibilitySupport = this._onDidChangeAccessibilitySupport.event;\n    }\n    AccessibilityService.prototype.alwaysUnderlineAccessKeys = function () {\n        var _this = this;\n        if (!platform_1.isWindows) {\n            return Promise.resolve(false);\n        }\n        return new Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var Registry, value;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return require('vscode-windows-registry'); })];\n                    case 1:\n                        Registry = _a.sent();\n                        try {\n                            value = Registry.GetStringRegKey('HKEY_CURRENT_USER', 'Control Panel\\\\Accessibility\\\\Keyboard Preference', 'On');\n                        }\n                        catch (_b) {\n                            resolve(false);\n                        }\n                        resolve(value === '1');\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AccessibilityService.prototype.setAccessibilitySupport = function (accessibilitySupport) {\n        if (this._accessibilitySupport === accessibilitySupport) {\n            return;\n        }\n        this._accessibilitySupport = accessibilitySupport;\n        this._onDidChangeAccessibilitySupport.fire();\n    };\n    AccessibilityService.prototype.getAccessibilitySupport = function () {\n        if (this._accessibilitySupport === accessibility_1.AccessibilitySupport.Unknown) {\n            var config = this.windowService.getConfiguration();\n            this._accessibilitySupport = (config && config.accessibilitySupport) ? accessibility_1.AccessibilitySupport.Enabled : accessibility_1.AccessibilitySupport.Disabled;\n        }\n        return this._accessibilitySupport;\n    };\n    AccessibilityService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService)\n    ], AccessibilityService);\n    return AccessibilityService;\n}());\nexports.AccessibilityService = AccessibilityService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,gFAA6G;AAC7G,oDAAoD;AACpD,8CAAsD;AACtD,8DAAoE;AAEpE;IAOC,8BACkC,aAA6B;QAA7B,kBAAa,GAAb,aAAa,CAAgB;QALvD,0BAAqB,GAAG,oCAAoB,CAAC,OAAO,CAAC;QAC5C,qCAAgC,GAAG,IAAI,eAAO,EAAQ,CAAC;QAC/D,oCAA+B,GAAgB,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC;IAIhG,CAAC;IAEL,wDAAyB,GAAzB;QAAA,iBAiBC;QAhBA,IAAI,CAAC,oBAAS,EAAE;YACf,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,OAAO,IAAI,OAAO,CAAU,UAAO,OAAO;;;;4BACxB,yEAAa,yBAAyB,OAAC;;wBAAlD,QAAQ,GAAG,SAAuC;wBAGxD,IAAI;4BACH,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,mBAAmB,EAAE,mDAAmD,EAAE,IAAI,CAAC,CAAC;yBACjH;wBAAC,WAAM;4BACP,OAAO,CAAC,KAAK,CAAC,CAAC;yBACf;wBAED,OAAO,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC;;;;aACvB,CAAC,CAAC;IACJ,CAAC;IAED,sDAAuB,GAAvB,UAAwB,oBAA0C;QACjE,IAAI,IAAI,CAAC,qBAAqB,KAAK,oBAAoB,EAAE;YACxD,OAAO;SACP;QAED,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QAClD,IAAI,CAAC,gCAAgC,CAAC,IAAI,EAAE,CAAC;IAC9C,CAAC;IAED,sDAAuB,GAAvB;QACC,IAAI,IAAI,CAAC,qBAAqB,KAAK,oCAAoB,CAAC,OAAO,EAAE;YAChE,IAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;YACrD,IAAI,CAAC,qBAAqB,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,oCAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,oCAAoB,CAAC,QAAQ,CAAC;SAEpI;QAED,OAAO,IAAI,CAAC,qBAAqB,CAAC;IACnC,CAAC;IA/CW,oBAAoB;QAQ9B,mBAAA,wBAAc,CAAA;OARJ,oBAAoB,CAgDhC;IAAD,2BAAC;CAAA,AAhDD,IAgDC;AAhDY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\n\nexport class AccessibilityService implements IAccessibilityService {\n\t_serviceBrand: any;\n\n\tprivate _accessibilitySupport = AccessibilitySupport.Unknown;\n\tprivate readonly _onDidChangeAccessibilitySupport = new Emitter<void>();\n\treadonly onDidChangeAccessibilitySupport: Event<void> = this._onDidChangeAccessibilitySupport.event;\n\n\tconstructor(\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) { }\n\n\talwaysUnderlineAccessKeys(): Promise<boolean> {\n\t\tif (!isWindows) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\treturn new Promise<boolean>(async (resolve) => {\n\t\t\tconst Registry = await import('vscode-windows-registry');\n\n\t\t\tlet value;\n\t\t\ttry {\n\t\t\t\tvalue = Registry.GetStringRegKey('HKEY_CURRENT_USER', 'Control Panel\\\\Accessibility\\\\Keyboard Preference', 'On');\n\t\t\t} catch {\n\t\t\t\tresolve(false);\n\t\t\t}\n\n\t\t\tresolve(value === '1');\n\t\t});\n\t}\n\n\tsetAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void {\n\t\tif (this._accessibilitySupport === accessibilitySupport) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._accessibilitySupport = accessibilitySupport;\n\t\tthis._onDidChangeAccessibilitySupport.fire();\n\t}\n\n\tgetAccessibilitySupport(): AccessibilitySupport {\n\t\tif (this._accessibilitySupport === AccessibilitySupport.Unknown) {\n\t\t\tconst config = this.windowService.getConfiguration();\n\t\t\tthis._accessibilitySupport = (config && config.accessibilitySupport) ? AccessibilitySupport.Enabled : AccessibilitySupport.Disabled;\n\n\t\t}\n\n\t\treturn this._accessibilitySupport;\n\t}\n}"]}]}