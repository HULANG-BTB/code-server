{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugSession.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugSession.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar resources = require(\"vs/base/common/resources\");\nvar nls = require(\"vs/nls\");\nvar platform = require(\"vs/base/common/platform\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar event_1 = require(\"vs/base/common/event\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar aria = require(\"vs/base/browser/ui/aria/aria\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugSource_1 = require(\"vs/workbench/contrib/debug/common/debugSource\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar rawDebugSession_1 = require(\"vs/workbench/contrib/debug/electron-browser/rawDebugSession\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar replModel_1 = require(\"vs/workbench/contrib/debug/common/replModel\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar DebugSession = /** @class */ (function () {\n    function DebugSession(_configuration, root, model, _parentSession, debugService, telemetryService, outputService, windowService, configurationService, viewletService, workspaceContextService, environmentService, notificationService) {\n        this._configuration = _configuration;\n        this.root = root;\n        this.model = model;\n        this._parentSession = _parentSession;\n        this.debugService = debugService;\n        this.telemetryService = telemetryService;\n        this.outputService = outputService;\n        this.windowService = windowService;\n        this.configurationService = configurationService;\n        this.viewletService = viewletService;\n        this.workspaceContextService = workspaceContextService;\n        this.environmentService = environmentService;\n        this.notificationService = notificationService;\n        this.initialized = false;\n        this.sources = new Map();\n        this.threads = new Map();\n        this.rawListeners = [];\n        this._onDidChangeState = new event_1.Emitter();\n        this._onDidEndAdapter = new event_1.Emitter();\n        this._onDidLoadedSource = new event_1.Emitter();\n        this._onDidCustomEvent = new event_1.Emitter();\n        this._onDidChangeREPLElements = new event_1.Emitter();\n        this.id = uuid_1.generateUuid();\n        this.repl = new replModel_1.ReplModel(this);\n    }\n    DebugSession.prototype.getId = function () {\n        return this.id;\n    };\n    Object.defineProperty(DebugSession.prototype, \"configuration\", {\n        get: function () {\n            return this._configuration.resolved;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"unresolvedConfiguration\", {\n        get: function () {\n            return this._configuration.unresolved;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"parentSession\", {\n        get: function () {\n            return this._parentSession;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugSession.prototype.setConfiguration = function (configuration) {\n        this._configuration = configuration;\n    };\n    DebugSession.prototype.getLabel = function () {\n        var includeRoot = this.workspaceContextService.getWorkspace().folders.length > 1;\n        return includeRoot && this.root ? this.configuration.name + \" (\" + resources.basenameOrAuthority(this.root.uri) + \")\" : this.configuration.name;\n    };\n    Object.defineProperty(DebugSession.prototype, \"state\", {\n        get: function () {\n            if (!this.initialized) {\n                return debug_1.State.Initializing;\n            }\n            if (!this.raw) {\n                return debug_1.State.Inactive;\n            }\n            var focusedThread = this.debugService.getViewModel().focusedThread;\n            if (focusedThread && focusedThread.session === this) {\n                return focusedThread.stopped ? debug_1.State.Stopped : debug_1.State.Running;\n            }\n            if (this.getAllThreads().some(function (t) { return t.stopped; })) {\n                return debug_1.State.Stopped;\n            }\n            return debug_1.State.Running;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"capabilities\", {\n        get: function () {\n            return this.raw ? this.raw.capabilities : Object.create(null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"onDidChangeState\", {\n        //---- events\n        get: function () {\n            return this._onDidChangeState.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"onDidEndAdapter\", {\n        get: function () {\n            return this._onDidEndAdapter.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"onDidChangeReplElements\", {\n        get: function () {\n            return this._onDidChangeREPLElements.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"onDidCustomEvent\", {\n        //---- DAP events\n        get: function () {\n            return this._onDidCustomEvent.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugSession.prototype, \"onDidLoadedSource\", {\n        get: function () {\n            return this._onDidLoadedSource.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //---- DAP requests\n    /**\n     * create and initialize a new debug adapter for this session\n     */\n    DebugSession.prototype.initialize = function (dbgr) {\n        var _this = this;\n        if (this.raw) {\n            // if there was already a connection make sure to remove old listeners\n            this.shutdown();\n        }\n        return dbgr.getCustomTelemetryService().then(function (customTelemetryService) {\n            return dbgr.createDebugAdapter(_this, _this.outputService).then(function (debugAdapter) {\n                _this.raw = new rawDebugSession_1.RawDebugSession(debugAdapter, dbgr, _this.telemetryService, customTelemetryService, _this.environmentService);\n                return _this.raw.start().then(function () {\n                    _this.registerListeners();\n                    return _this.raw.initialize({\n                        clientID: 'vscode',\n                        clientName: product_1.default.nameLong,\n                        adapterID: _this.configuration.type,\n                        pathFormat: 'path',\n                        linesStartAt1: true,\n                        columnsStartAt1: true,\n                        supportsVariableType: true,\n                        supportsVariablePaging: true,\n                        supportsRunInTerminalRequest: true,\n                        locale: platform.locale\n                    }).then(function () {\n                        _this.initialized = true;\n                        _this._onDidChangeState.fire();\n                        _this.model.setExceptionBreakpoints(_this.raw.capabilities.exceptionBreakpointFilters || []);\n                    });\n                });\n            });\n        }).then(undefined, function (err) {\n            _this.initialized = true;\n            _this._onDidChangeState.fire();\n            return Promise.reject(err);\n        });\n    };\n    /**\n     * launch or attach to the debuggee\n     */\n    DebugSession.prototype.launchOrAttach = function (config) {\n        if (this.raw) {\n            // __sessionID only used for EH debugging (but we add it always for now...)\n            config.__sessionId = this.getId();\n            return this.raw.launchOrAttach(config).then(function (result) {\n                return undefined;\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    /**\n     * end the current debug adapter session\n     */\n    DebugSession.prototype.terminate = function (restart) {\n        if (restart === void 0) { restart = false; }\n        if (this.raw) {\n            if (this.raw.capabilities.supportsTerminateRequest && this._configuration.resolved.request === 'launch') {\n                return this.raw.terminate(restart).then(function (response) {\n                    return undefined;\n                });\n            }\n            return this.raw.disconnect(restart).then(function (response) {\n                return undefined;\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    /**\n     * end the current debug adapter session\n     */\n    DebugSession.prototype.disconnect = function (restart) {\n        if (restart === void 0) { restart = false; }\n        if (this.raw) {\n            return this.raw.disconnect(restart).then(function (response) {\n                return undefined;\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    /**\n     * restart debug adapter session\n     */\n    DebugSession.prototype.restart = function () {\n        if (this.raw) {\n            return this.raw.restart().then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.sendBreakpoints = function (modelUri, breakpointsToSend, sourceModified) {\n        var _this = this;\n        if (!this.raw) {\n            return Promise.reject(new Error('no debug adapter'));\n        }\n        if (!this.raw.readyForBreakpoints) {\n            return Promise.resolve(undefined);\n        }\n        var source = this.getSourceForUri(modelUri);\n        var rawSource;\n        if (source) {\n            rawSource = source.raw;\n        }\n        else {\n            var data = debugSource_1.Source.getEncodedDebugData(modelUri);\n            rawSource = { name: data.name, path: data.path, sourceReference: data.sourceReference };\n        }\n        if (breakpointsToSend.length && !rawSource.adapterData) {\n            rawSource.adapterData = breakpointsToSend[0].adapterData;\n        }\n        // Normalize all drive letters going out from vscode to debug adapters so we are consistent with our resolving #43959\n        if (rawSource.path) {\n            rawSource.path = labels_1.normalizeDriveLetter(rawSource.path);\n        }\n        return this.raw.setBreakpoints({\n            source: rawSource,\n            lines: breakpointsToSend.map(function (bp) { return bp.lineNumber; }),\n            breakpoints: breakpointsToSend.map(function (bp) { return ({ line: bp.lineNumber, column: bp.column, condition: bp.condition, hitCondition: bp.hitCondition, logMessage: bp.logMessage }); }),\n            sourceModified: sourceModified\n        }).then(function (response) {\n            if (response && response.body) {\n                var data = Object.create(null);\n                for (var i = 0; i < breakpointsToSend.length; i++) {\n                    data[breakpointsToSend[i].getId()] = response.body.breakpoints[i];\n                }\n                _this.model.setBreakpointSessionData(_this.getId(), data);\n            }\n        });\n    };\n    DebugSession.prototype.sendFunctionBreakpoints = function (fbpts) {\n        var _this = this;\n        if (this.raw) {\n            if (this.raw.readyForBreakpoints) {\n                return this.raw.setFunctionBreakpoints({ breakpoints: fbpts }).then(function (response) {\n                    if (response && response.body) {\n                        var data = Object.create(null);\n                        for (var i = 0; i < fbpts.length; i++) {\n                            data[fbpts[i].getId()] = response.body.breakpoints[i];\n                        }\n                        _this.model.setBreakpointSessionData(_this.getId(), data);\n                    }\n                });\n            }\n            return Promise.resolve(undefined);\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.sendExceptionBreakpoints = function (exbpts) {\n        if (this.raw) {\n            if (this.raw.readyForBreakpoints) {\n                return this.raw.setExceptionBreakpoints({ filters: exbpts.map(function (exb) { return exb.filter; }) }).then(function () { return undefined; });\n            }\n            return Promise.resolve(undefined);\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.customRequest = function (request, args) {\n        if (this.raw) {\n            return this.raw.custom(request, args);\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.stackTrace = function (threadId, startFrame, levels) {\n        if (this.raw) {\n            return this.raw.stackTrace({ threadId: threadId, startFrame: startFrame, levels: levels });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.exceptionInfo = function (threadId) {\n        if (this.raw) {\n            return this.raw.exceptionInfo({ threadId: threadId }).then(function (response) {\n                if (response) {\n                    return {\n                        id: response.body.exceptionId,\n                        description: response.body.description,\n                        breakMode: response.body.breakMode,\n                        details: response.body.details\n                    };\n                }\n                return undefined;\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.scopes = function (frameId) {\n        if (this.raw) {\n            return this.raw.scopes({ frameId: frameId });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.variables = function (variablesReference, filter, start, count) {\n        if (this.raw) {\n            return this.raw.variables({ variablesReference: variablesReference, filter: filter, start: start, count: count });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.evaluate = function (expression, frameId, context) {\n        if (this.raw) {\n            return this.raw.evaluate({ expression: expression, frameId: frameId, context: context });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.restartFrame = function (frameId, threadId) {\n        if (this.raw) {\n            return this.raw.restartFrame({ frameId: frameId }, threadId).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.next = function (threadId) {\n        if (this.raw) {\n            return this.raw.next({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.stepIn = function (threadId) {\n        if (this.raw) {\n            return this.raw.stepIn({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.stepOut = function (threadId) {\n        if (this.raw) {\n            return this.raw.stepOut({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.stepBack = function (threadId) {\n        if (this.raw) {\n            return this.raw.stepBack({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.continue = function (threadId) {\n        if (this.raw) {\n            return this.raw.continue({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.reverseContinue = function (threadId) {\n        if (this.raw) {\n            return this.raw.reverseContinue({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.pause = function (threadId) {\n        if (this.raw) {\n            return this.raw.pause({ threadId: threadId }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.terminateThreads = function (threadIds) {\n        if (this.raw) {\n            return this.raw.terminateThreads({ threadIds: threadIds }).then(function () { return undefined; });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.setVariable = function (variablesReference, name, value) {\n        if (this.raw) {\n            return this.raw.setVariable({ variablesReference: variablesReference, name: name, value: value });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.loadSource = function (resource) {\n        if (!this.raw) {\n            return Promise.reject(new Error('no debug adapter'));\n        }\n        var source = this.getSourceForUri(resource);\n        var rawSource;\n        if (source) {\n            rawSource = source.raw;\n        }\n        else {\n            // create a Source\n            var sourceRef = void 0;\n            if (resource.query) {\n                var data = debugSource_1.Source.getEncodedDebugData(resource);\n                sourceRef = data.sourceReference;\n            }\n            rawSource = {\n                path: resource.with({ scheme: '', query: '' }).toString(true),\n                sourceReference: sourceRef\n            };\n        }\n        return this.raw.source({ sourceReference: rawSource.sourceReference || 0, source: rawSource });\n    };\n    DebugSession.prototype.getLoadedSources = function () {\n        var _this = this;\n        if (this.raw) {\n            return this.raw.loadedSources({}).then(function (response) {\n                if (response.body && response.body.sources) {\n                    return response.body.sources.map(function (src) { return _this.getSource(src); });\n                }\n                else {\n                    return [];\n                }\n            }, function () {\n                return [];\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    DebugSession.prototype.completions = function (frameId, text, position, overwriteBefore) {\n        if (this.raw) {\n            return this.raw.completions({\n                frameId: frameId,\n                text: text,\n                column: position.column,\n                line: position.lineNumber\n            }).then(function (response) {\n                var result = [];\n                if (response && response.body && response.body.targets) {\n                    response.body.targets.forEach(function (item) {\n                        if (item && item.label) {\n                            result.push({\n                                label: item.label,\n                                insertText: item.text || item.label,\n                                kind: modes_1.completionKindFromString(item.type || 'property'),\n                                filterText: (item.start && item.length) ? text.substr(item.start, item.length).concat(item.label) : undefined,\n                                range: range_1.Range.fromPositions(position.delta(0, -(item.length || overwriteBefore)), position)\n                            });\n                        }\n                    });\n                }\n                return result;\n            });\n        }\n        return Promise.reject(new Error('no debug adapter'));\n    };\n    //---- threads\n    DebugSession.prototype.getThread = function (threadId) {\n        return this.threads.get(threadId);\n    };\n    DebugSession.prototype.getAllThreads = function () {\n        var result = [];\n        this.threads.forEach(function (t) { return result.push(t); });\n        return result;\n    };\n    DebugSession.prototype.clearThreads = function (removeThreads, reference) {\n        if (reference === void 0) { reference = undefined; }\n        if (reference !== undefined && reference !== null) {\n            var thread = this.threads.get(reference);\n            if (thread) {\n                thread.clearCallStack();\n                thread.stoppedDetails = undefined;\n                thread.stopped = false;\n                if (removeThreads) {\n                    this.threads.delete(reference);\n                }\n            }\n        }\n        else {\n            this.threads.forEach(function (thread) {\n                thread.clearCallStack();\n                thread.stoppedDetails = undefined;\n                thread.stopped = false;\n            });\n            if (removeThreads) {\n                this.threads.clear();\n                debugModel_1.ExpressionContainer.allValues.clear();\n            }\n        }\n    };\n    DebugSession.prototype.rawUpdate = function (data) {\n        var _this = this;\n        data.threads.forEach(function (thread) {\n            if (!_this.threads.has(thread.id)) {\n                // A new thread came in, initialize it.\n                _this.threads.set(thread.id, new debugModel_1.Thread(_this, thread.name, thread.id));\n            }\n            else if (thread.name) {\n                // Just the thread name got updated #18244\n                var oldThread = _this.threads.get(thread.id);\n                if (oldThread) {\n                    oldThread.name = thread.name;\n                }\n            }\n        });\n        var stoppedDetails = data.stoppedDetails;\n        if (stoppedDetails) {\n            // Set the availability of the threads' callstacks depending on\n            // whether the thread is stopped or not\n            if (stoppedDetails.allThreadsStopped) {\n                this.threads.forEach(function (thread) {\n                    thread.stoppedDetails = thread.threadId === stoppedDetails.threadId ? stoppedDetails : { reason: undefined };\n                    thread.stopped = true;\n                    thread.clearCallStack();\n                });\n            }\n            else {\n                var thread = typeof stoppedDetails.threadId === 'number' ? this.threads.get(stoppedDetails.threadId) : undefined;\n                if (thread) {\n                    // One thread is stopped, only update that thread.\n                    thread.stoppedDetails = stoppedDetails;\n                    thread.clearCallStack();\n                    thread.stopped = true;\n                }\n            }\n        }\n    };\n    DebugSession.prototype.fetchThreads = function (stoppedDetails) {\n        var _this = this;\n        return this.raw ? this.raw.threads().then(function (response) {\n            if (response && response.body && response.body.threads) {\n                _this.model.rawUpdate({\n                    sessionId: _this.getId(),\n                    threads: response.body.threads,\n                    stoppedDetails: stoppedDetails\n                });\n            }\n        }) : Promise.resolve(undefined);\n    };\n    //---- private\n    DebugSession.prototype.registerListeners = function () {\n        var _this = this;\n        if (!this.raw) {\n            return;\n        }\n        this.rawListeners.push(this.raw.onDidInitialize(function () {\n            aria.status(nls.localize('debuggingStarted', \"Debugging started.\"));\n            var sendConfigurationDone = function () {\n                if (_this.raw && _this.raw.capabilities.supportsConfigurationDoneRequest) {\n                    return _this.raw.configurationDone().then(undefined, function (e) {\n                        // Disconnect the debug session on configuration done error #10596\n                        if (_this.raw) {\n                            _this.raw.disconnect();\n                        }\n                        if (e.command !== 'canceled' && e.message !== 'canceled') {\n                            _this.notificationService.error(e);\n                        }\n                    });\n                }\n                return undefined;\n            };\n            // Send all breakpoints\n            _this.debugService.sendAllBreakpoints(_this).then(sendConfigurationDone, sendConfigurationDone)\n                .then(function () { return _this.fetchThreads(); });\n        }));\n        this.rawListeners.push(this.raw.onDidStop(function (event) {\n            _this.fetchThreads(event.body).then(function () {\n                var thread = typeof event.body.threadId === 'number' ? _this.getThread(event.body.threadId) : undefined;\n                if (thread) {\n                    // Call fetch call stack twice, the first only return the top stack frame.\n                    // Second retrieves the rest of the call stack. For performance reasons #25605\n                    var promises = _this.model.fetchCallStack(thread);\n                    var focus_1 = function () {\n                        if (!event.body.preserveFocusHint && thread.getCallStack().length) {\n                            _this.debugService.focusStackFrame(undefined, thread);\n                            if (thread.stoppedDetails) {\n                                if (_this.configurationService.getValue('debug').openDebug === 'openOnDebugBreak') {\n                                    _this.viewletService.openViewlet(debug_1.VIEWLET_ID);\n                                }\n                                _this.windowService.focusWindow();\n                            }\n                        }\n                    };\n                    promises.topCallStack.then(focus_1);\n                    promises.wholeCallStack.then(function () {\n                        if (!_this.debugService.getViewModel().focusedStackFrame) {\n                            // The top stack frame can be deemphesized so try to focus again #68616\n                            focus_1();\n                        }\n                    });\n                }\n            }).then(function () { return _this._onDidChangeState.fire(); });\n        }));\n        this.rawListeners.push(this.raw.onDidThread(function (event) {\n            if (event.body.reason === 'started') {\n                // debounce to reduce threadsRequest frequency and improve performance\n                if (!_this.fetchThreadsScheduler) {\n                    _this.fetchThreadsScheduler = new async_1.RunOnceScheduler(function () {\n                        _this.fetchThreads();\n                    }, 100);\n                    _this.rawListeners.push(_this.fetchThreadsScheduler);\n                }\n                if (!_this.fetchThreadsScheduler.isScheduled()) {\n                    _this.fetchThreadsScheduler.schedule();\n                }\n            }\n            else if (event.body.reason === 'exited') {\n                _this.model.clearThreads(_this.getId(), true, event.body.threadId);\n            }\n        }));\n        this.rawListeners.push(this.raw.onDidTerminateDebugee(function (event) {\n            aria.status(nls.localize('debuggingStopped', \"Debugging stopped.\"));\n            if (event.body && event.body.restart) {\n                _this.debugService.restartSession(_this, event.body.restart).then(undefined, errors_1.onUnexpectedError);\n            }\n            else if (_this.raw) {\n                _this.raw.disconnect();\n            }\n        }));\n        this.rawListeners.push(this.raw.onDidContinued(function (event) {\n            var threadId = event.body.allThreadsContinued !== false ? undefined : event.body.threadId;\n            _this.model.clearThreads(_this.getId(), false, threadId);\n            _this._onDidChangeState.fire();\n        }));\n        var outpuPromises = [];\n        this.rawListeners.push(this.raw.onDidOutput(function (event) {\n            if (!event.body || !_this.raw) {\n                return;\n            }\n            var outputSeverity = event.body.category === 'stderr' ? severity_1.default.Error : event.body.category === 'console' ? severity_1.default.Warning : severity_1.default.Info;\n            if (event.body.category === 'telemetry') {\n                // only log telemetry events from debug adapter if the debug extension provided the telemetry key\n                // and the user opted in telemetry\n                if (_this.raw.customTelemetryService && _this.telemetryService.isOptedIn) {\n                    // __GDPR__TODO__ We're sending events in the name of the debug extension and we can not ensure that those are declared correctly.\n                    _this.raw.customTelemetryService.publicLog(event.body.output, event.body.data);\n                }\n                return;\n            }\n            // Make sure to append output in the correct order by properly waiting on preivous promises #33822\n            var waitFor = outpuPromises.slice();\n            var source = event.body.source && event.body.line ? {\n                lineNumber: event.body.line,\n                column: event.body.column ? event.body.column : 1,\n                source: _this.getSource(event.body.source)\n            } : undefined;\n            if (event.body.variablesReference) {\n                var container = new debugModel_1.ExpressionContainer(_this, event.body.variablesReference, uuid_1.generateUuid());\n                outpuPromises.push(container.getChildren().then(function (children) {\n                    return Promise.all(waitFor).then(function () { return children.forEach(function (child) {\n                        // Since we can not display multiple trees in a row, we are displaying these variables one after the other (ignoring their names)\n                        child.name = null;\n                        _this.appendToRepl(child, outputSeverity, source);\n                    }); });\n                }));\n            }\n            else if (typeof event.body.output === 'string') {\n                Promise.all(waitFor).then(function () { return _this.appendToRepl(event.body.output, outputSeverity, source); });\n            }\n            Promise.all(outpuPromises).then(function () { return outpuPromises = []; });\n        }));\n        this.rawListeners.push(this.raw.onDidBreakpoint(function (event) {\n            var _a, _b, _c;\n            var id = event.body && event.body.breakpoint ? event.body.breakpoint.id : undefined;\n            var breakpoint = _this.model.getBreakpoints().filter(function (bp) { return bp.idFromAdapter === id; }).pop();\n            var functionBreakpoint = _this.model.getFunctionBreakpoints().filter(function (bp) { return bp.idFromAdapter === id; }).pop();\n            if (event.body.reason === 'new' && event.body.breakpoint.source && event.body.breakpoint.line) {\n                var source = _this.getSource(event.body.breakpoint.source);\n                var bps = _this.model.addBreakpoints(source.uri, [{\n                        column: event.body.breakpoint.column,\n                        enabled: true,\n                        lineNumber: event.body.breakpoint.line,\n                    }], false);\n                if (bps.length === 1) {\n                    _this.model.setBreakpointSessionData(_this.getId(), (_a = {}, _a[bps[0].getId()] = event.body.breakpoint, _a));\n                }\n            }\n            if (event.body.reason === 'removed') {\n                if (breakpoint) {\n                    _this.model.removeBreakpoints([breakpoint]);\n                }\n                if (functionBreakpoint) {\n                    _this.model.removeFunctionBreakpoints(functionBreakpoint.getId());\n                }\n            }\n            if (event.body.reason === 'changed') {\n                if (breakpoint) {\n                    if (!breakpoint.column) {\n                        event.body.breakpoint.column = undefined;\n                    }\n                    _this.model.setBreakpointSessionData(_this.getId(), (_b = {}, _b[breakpoint.getId()] = event.body.breakpoint, _b));\n                }\n                if (functionBreakpoint) {\n                    _this.model.setBreakpointSessionData(_this.getId(), (_c = {}, _c[functionBreakpoint.getId()] = event.body.breakpoint, _c));\n                }\n            }\n        }));\n        this.rawListeners.push(this.raw.onDidLoadedSource(function (event) {\n            _this._onDidLoadedSource.fire({\n                reason: event.body.reason,\n                source: _this.getSource(event.body.source)\n            });\n        }));\n        this.rawListeners.push(this.raw.onDidCustomEvent(function (event) {\n            _this._onDidCustomEvent.fire(event);\n        }));\n        this.rawListeners.push(this.raw.onDidExitAdapter(function (event) {\n            _this._onDidEndAdapter.fire(event);\n        }));\n    };\n    DebugSession.prototype.shutdown = function () {\n        lifecycle_1.dispose(this.rawListeners);\n        if (this.raw) {\n            this.raw.disconnect();\n        }\n        this.raw = undefined;\n        this.model.clearThreads(this.getId(), true);\n        this._onDidChangeState.fire();\n    };\n    //---- sources\n    DebugSession.prototype.getSourceForUri = function (uri) {\n        return this.sources.get(this.getUriKey(uri));\n    };\n    DebugSession.prototype.getSource = function (raw) {\n        var source = new debugSource_1.Source(raw, this.getId());\n        var uriKey = this.getUriKey(source.uri);\n        var found = this.sources.get(uriKey);\n        if (found) {\n            source = found;\n            // merge attributes of new into existing\n            source.raw = objects_1.mixin(source.raw, raw);\n            if (source.raw && raw) {\n                // Always take the latest presentation hint from adapter #42139\n                source.raw.presentationHint = raw.presentationHint;\n            }\n        }\n        else {\n            this.sources.set(uriKey, source);\n        }\n        return source;\n    };\n    DebugSession.prototype.getUriKey = function (uri) {\n        // TODO: the following code does not make sense if uri originates from a different platform\n        return platform.isLinux ? uri.toString() : uri.toString().toLowerCase();\n    };\n    // REPL\n    DebugSession.prototype.getReplElements = function () {\n        return this.repl.getReplElements();\n    };\n    DebugSession.prototype.removeReplExpressions = function () {\n        this.repl.removeReplExpressions();\n        this._onDidChangeREPLElements.fire();\n    };\n    DebugSession.prototype.addReplExpression = function (stackFrame, name) {\n        var _this = this;\n        var viewModel = this.debugService.getViewModel();\n        return this.repl.addReplExpression(stackFrame, name)\n            .then(function () { return _this._onDidChangeREPLElements.fire(); })\n            // Evaluate all watch expressions and fetch variables again since repl evaluation might have changed some.\n            .then(function () { return _this.debugService.focusStackFrame(viewModel.focusedStackFrame, viewModel.focusedThread, viewModel.focusedSession); });\n    };\n    DebugSession.prototype.appendToRepl = function (data, severity, source) {\n        this.repl.appendToRepl(data, severity, source);\n        this._onDidChangeREPLElements.fire();\n    };\n    DebugSession.prototype.logToRepl = function (sev, args, frame) {\n        this.repl.logToRepl(sev, args, frame);\n        this._onDidChangeREPLElements.fire();\n    };\n    DebugSession = tslib_1.__decorate([\n        tslib_1.__param(4, debug_1.IDebugService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, output_1.IOutputService),\n        tslib_1.__param(7, windows_1.IWindowService),\n        tslib_1.__param(8, configuration_1.IConfigurationService),\n        tslib_1.__param(9, viewlet_1.IViewletService),\n        tslib_1.__param(10, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(11, environment_1.IEnvironmentService),\n        tslib_1.__param(12, notification_1.INotificationService)\n    ], DebugSession);\n    return DebugSession;\n}());\nexports.DebugSession = DebugSession;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugSession.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugSession.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as resources from 'vs/base/common/resources';\nimport * as nls from 'vs/nls';\nimport * as platform from 'vs/base/common/platform';\nimport severity from 'vs/base/common/severity';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { CompletionItem, completionKindFromString } from 'vs/editor/common/modes';\nimport { Position } from 'vs/editor/common/core/position';\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport { IDebugSession, IConfig, IThread, IRawModelUpdate, IDebugService, IRawStoppedDetails, State, LoadedSourceEvent, IFunctionBreakpoint, IExceptionBreakpoint, IBreakpoint, IExceptionInfo, AdapterEndEvent, IDebugger, VIEWLET_ID, IDebugConfiguration, IReplElement, IStackFrame, IExpression, IReplElementSource } from 'vs/workbench/contrib/debug/common/debug';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport { mixin } from 'vs/base/common/objects';\nimport { Thread, ExpressionContainer, DebugModel } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { RawDebugSession } from 'vs/workbench/contrib/debug/electron-browser/rawDebugSession';\nimport product from 'vs/platform/product/node/product';\nimport { IWorkspaceFolder, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { normalizeDriveLetter } from 'vs/base/common/labels';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { ReplModel } from 'vs/workbench/contrib/debug/common/replModel';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nexport class DebugSession implements IDebugSession {\n\tprivate id: string;\n\tprivate raw: RawDebugSession | undefined;\n\tprivate initialized = false;\n\n\tprivate sources = new Map<string, Source>();\n\tprivate threads = new Map<number, Thread>();\n\tprivate rawListeners: IDisposable[] = [];\n\tprivate fetchThreadsScheduler: RunOnceScheduler;\n\tprivate repl: ReplModel;\n\n\tprivate readonly _onDidChangeState = new Emitter<void>();\n\tprivate readonly _onDidEndAdapter = new Emitter<AdapterEndEvent>();\n\n\tprivate readonly _onDidLoadedSource = new Emitter<LoadedSourceEvent>();\n\tprivate readonly _onDidCustomEvent = new Emitter<DebugProtocol.Event>();\n\n\tprivate readonly _onDidChangeREPLElements = new Emitter<void>();\n\n\tconstructor(\n\t\tprivate _configuration: { resolved: IConfig, unresolved: IConfig | undefined },\n\t\tpublic root: IWorkspaceFolder,\n\t\tprivate model: DebugModel,\n\t\tprivate _parentSession: IDebugSession | undefined,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tthis.id = generateUuid();\n\t\tthis.repl = new ReplModel(this);\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tget configuration(): IConfig {\n\t\treturn this._configuration.resolved;\n\t}\n\n\tget unresolvedConfiguration(): IConfig | undefined {\n\t\treturn this._configuration.unresolved;\n\t}\n\n\tget parentSession(): IDebugSession | undefined {\n\t\treturn this._parentSession;\n\t}\n\n\tsetConfiguration(configuration: { resolved: IConfig, unresolved: IConfig | undefined }) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetLabel(): string {\n\t\tconst includeRoot = this.workspaceContextService.getWorkspace().folders.length > 1;\n\t\treturn includeRoot && this.root ? `${this.configuration.name} (${resources.basenameOrAuthority(this.root.uri)})` : this.configuration.name;\n\t}\n\n\tget state(): State {\n\t\tif (!this.initialized) {\n\t\t\treturn State.Initializing;\n\t\t}\n\t\tif (!this.raw) {\n\t\t\treturn State.Inactive;\n\t\t}\n\n\t\tconst focusedThread = this.debugService.getViewModel().focusedThread;\n\t\tif (focusedThread && focusedThread.session === this) {\n\t\t\treturn focusedThread.stopped ? State.Stopped : State.Running;\n\t\t}\n\t\tif (this.getAllThreads().some(t => t.stopped)) {\n\t\t\treturn State.Stopped;\n\t\t}\n\n\t\treturn State.Running;\n\t}\n\n\tget capabilities(): DebugProtocol.Capabilities {\n\t\treturn this.raw ? this.raw.capabilities : Object.create(null);\n\t}\n\n\t//---- events\n\tget onDidChangeState(): Event<void> {\n\t\treturn this._onDidChangeState.event;\n\t}\n\n\tget onDidEndAdapter(): Event<AdapterEndEvent> {\n\t\treturn this._onDidEndAdapter.event;\n\t}\n\n\tget onDidChangeReplElements(): Event<void> {\n\t\treturn this._onDidChangeREPLElements.event;\n\t}\n\n\t//---- DAP events\n\n\tget onDidCustomEvent(): Event<DebugProtocol.Event> {\n\t\treturn this._onDidCustomEvent.event;\n\t}\n\n\tget onDidLoadedSource(): Event<LoadedSourceEvent> {\n\t\treturn this._onDidLoadedSource.event;\n\t}\n\n\t//---- DAP requests\n\n\t/**\n\t * create and initialize a new debug adapter for this session\n\t */\n\tinitialize(dbgr: IDebugger): Promise<void> {\n\n\t\tif (this.raw) {\n\t\t\t// if there was already a connection make sure to remove old listeners\n\t\t\tthis.shutdown();\n\t\t}\n\n\t\treturn dbgr.getCustomTelemetryService().then(customTelemetryService => {\n\n\t\t\treturn dbgr.createDebugAdapter(this, this.outputService).then(debugAdapter => {\n\n\t\t\t\tthis.raw = new RawDebugSession(debugAdapter, dbgr, this.telemetryService, customTelemetryService, this.environmentService);\n\n\t\t\t\treturn this.raw!.start().then(() => {\n\n\t\t\t\t\tthis.registerListeners();\n\n\t\t\t\t\treturn this.raw!.initialize({\n\t\t\t\t\t\tclientID: 'vscode',\n\t\t\t\t\t\tclientName: product.nameLong,\n\t\t\t\t\t\tadapterID: this.configuration.type,\n\t\t\t\t\t\tpathFormat: 'path',\n\t\t\t\t\t\tlinesStartAt1: true,\n\t\t\t\t\t\tcolumnsStartAt1: true,\n\t\t\t\t\t\tsupportsVariableType: true, // #8858\n\t\t\t\t\t\tsupportsVariablePaging: true, // #9537\n\t\t\t\t\t\tsupportsRunInTerminalRequest: true, // #10574\n\t\t\t\t\t\tlocale: platform.locale\n\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\tthis.initialized = true;\n\t\t\t\t\t\tthis._onDidChangeState.fire();\n\t\t\t\t\t\tthis.model.setExceptionBreakpoints(this.raw!.capabilities.exceptionBreakpointFilters || []);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(undefined, err => {\n\t\t\tthis.initialized = true;\n\t\t\tthis._onDidChangeState.fire();\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\t/**\n\t * launch or attach to the debuggee\n\t */\n\tlaunchOrAttach(config: IConfig): Promise<void> {\n\t\tif (this.raw) {\n\n\t\t\t// __sessionID only used for EH debugging (but we add it always for now...)\n\t\t\tconfig.__sessionId = this.getId();\n\n\t\t\treturn this.raw.launchOrAttach(config).then(result => {\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\t/**\n\t * end the current debug adapter session\n\t */\n\tterminate(restart = false): Promise<void> {\n\t\tif (this.raw) {\n\t\t\tif (this.raw.capabilities.supportsTerminateRequest && this._configuration.resolved.request === 'launch') {\n\t\t\t\treturn this.raw.terminate(restart).then(response => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.raw.disconnect(restart).then(response => {\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\t/**\n\t * end the current debug adapter session\n\t */\n\tdisconnect(restart = false): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.disconnect(restart).then(response => {\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\t/**\n\t * restart debug adapter session\n\t */\n\trestart(): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.restart().then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tsendBreakpoints(modelUri: URI, breakpointsToSend: IBreakpoint[], sourceModified: boolean): Promise<void> {\n\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error('no debug adapter'));\n\t\t}\n\n\t\tif (!this.raw.readyForBreakpoints) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst source = this.getSourceForUri(modelUri);\n\t\tlet rawSource: DebugProtocol.Source;\n\t\tif (source) {\n\t\t\trawSource = source.raw;\n\t\t} else {\n\t\t\tconst data = Source.getEncodedDebugData(modelUri);\n\t\t\trawSource = { name: data.name, path: data.path, sourceReference: data.sourceReference };\n\t\t}\n\n\t\tif (breakpointsToSend.length && !rawSource.adapterData) {\n\t\t\trawSource.adapterData = breakpointsToSend[0].adapterData;\n\t\t}\n\t\t// Normalize all drive letters going out from vscode to debug adapters so we are consistent with our resolving #43959\n\t\tif (rawSource.path) {\n\t\t\trawSource.path = normalizeDriveLetter(rawSource.path);\n\t\t}\n\n\t\treturn this.raw.setBreakpoints({\n\t\t\tsource: rawSource,\n\t\t\tlines: breakpointsToSend.map(bp => bp.lineNumber),\n\t\t\tbreakpoints: breakpointsToSend.map(bp => ({ line: bp.lineNumber, column: bp.column, condition: bp.condition, hitCondition: bp.hitCondition, logMessage: bp.logMessage })),\n\t\t\tsourceModified\n\t\t}).then(response => {\n\t\t\tif (response && response.body) {\n\t\t\t\tconst data: { [id: string]: DebugProtocol.Breakpoint } = Object.create(null);\n\t\t\t\tfor (let i = 0; i < breakpointsToSend.length; i++) {\n\t\t\t\t\tdata[breakpointsToSend[i].getId()] = response.body.breakpoints[i];\n\t\t\t\t}\n\n\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), data);\n\t\t\t}\n\t\t});\n\t}\n\n\tsendFunctionBreakpoints(fbpts: IFunctionBreakpoint[]): Promise<void> {\n\t\tif (this.raw) {\n\t\t\tif (this.raw.readyForBreakpoints) {\n\t\t\t\treturn this.raw.setFunctionBreakpoints({ breakpoints: fbpts }).then(response => {\n\t\t\t\t\tif (response && response.body) {\n\t\t\t\t\t\tconst data: { [id: string]: DebugProtocol.Breakpoint } = Object.create(null);\n\t\t\t\t\t\tfor (let i = 0; i < fbpts.length; i++) {\n\t\t\t\t\t\t\tdata[fbpts[i].getId()] = response.body.breakpoints[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tsendExceptionBreakpoints(exbpts: IExceptionBreakpoint[]): Promise<void> {\n\t\tif (this.raw) {\n\t\t\tif (this.raw.readyForBreakpoints) {\n\t\t\t\treturn this.raw.setExceptionBreakpoints({ filters: exbpts.map(exb => exb.filter) }).then(() => undefined);\n\t\t\t}\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tcustomRequest(request: string, args: any): Promise<DebugProtocol.Response> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.custom(request, args);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tstackTrace(threadId: number, startFrame: number, levels: number): Promise<DebugProtocol.StackTraceResponse> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.stackTrace({ threadId, startFrame, levels });\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\texceptionInfo(threadId: number): Promise<IExceptionInfo | undefined> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.exceptionInfo({ threadId }).then(response => {\n\t\t\t\tif (response) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: response.body.exceptionId,\n\t\t\t\t\t\tdescription: response.body.description,\n\t\t\t\t\t\tbreakMode: response.body.breakMode,\n\t\t\t\t\t\tdetails: response.body.details\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tscopes(frameId: number): Promise<DebugProtocol.ScopesResponse> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.scopes({ frameId });\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tvariables(variablesReference: number, filter: 'indexed' | 'named' | undefined, start: number | undefined, count: number | undefined): Promise<DebugProtocol.VariablesResponse> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.variables({ variablesReference, filter, start, count });\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tevaluate(expression: string, frameId: number, context?: string): Promise<DebugProtocol.EvaluateResponse> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.evaluate({ expression, frameId, context });\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\trestartFrame(frameId: number, threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.restartFrame({ frameId }, threadId).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tnext(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.next({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tstepIn(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.stepIn({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tstepOut(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.stepOut({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tstepBack(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.stepBack({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tcontinue(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.continue({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\treverseContinue(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.reverseContinue({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tpause(threadId: number): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.pause({ threadId }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tterminateThreads(threadIds?: number[]): Promise<void> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.terminateThreads({ threadIds }).then(() => undefined);\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tsetVariable(variablesReference: number, name: string, value: string): Promise<DebugProtocol.SetVariableResponse> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.setVariable({ variablesReference, name, value });\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tloadSource(resource: URI): Promise<DebugProtocol.SourceResponse> {\n\n\t\tif (!this.raw) {\n\t\t\treturn Promise.reject(new Error('no debug adapter'));\n\t\t}\n\n\t\tconst source = this.getSourceForUri(resource);\n\t\tlet rawSource: DebugProtocol.Source;\n\t\tif (source) {\n\t\t\trawSource = source.raw;\n\t\t} else {\n\t\t\t// create a Source\n\n\t\t\tlet sourceRef: number | undefined;\n\t\t\tif (resource.query) {\n\t\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\t\tsourceRef = data.sourceReference;\n\t\t\t}\n\n\t\t\trawSource = {\n\t\t\t\tpath: resource.with({ scheme: '', query: '' }).toString(true),\t// Remove debug: scheme\n\t\t\t\tsourceReference: sourceRef\n\t\t\t};\n\t\t}\n\n\t\treturn this.raw.source({ sourceReference: rawSource.sourceReference || 0, source: rawSource });\n\t}\n\n\tgetLoadedSources(): Promise<Source[]> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.loadedSources({}).then(response => {\n\t\t\t\tif (response.body && response.body.sources) {\n\t\t\t\t\treturn response.body.sources.map(src => this.getSource(src));\n\t\t\t\t} else {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t}, () => {\n\t\t\t\treturn [];\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\tcompletions(frameId: number | undefined, text: string, position: Position, overwriteBefore: number): Promise<CompletionItem[]> {\n\t\tif (this.raw) {\n\t\t\treturn this.raw.completions({\n\t\t\t\tframeId,\n\t\t\t\ttext,\n\t\t\t\tcolumn: position.column,\n\t\t\t\tline: position.lineNumber\n\t\t\t}).then(response => {\n\n\t\t\t\tconst result: CompletionItem[] = [];\n\t\t\t\tif (response && response.body && response.body.targets) {\n\t\t\t\t\tresponse.body.targets.forEach(item => {\n\t\t\t\t\t\tif (item && item.label) {\n\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\tlabel: item.label,\n\t\t\t\t\t\t\t\tinsertText: item.text || item.label,\n\t\t\t\t\t\t\t\tkind: completionKindFromString(item.type || 'property'),\n\t\t\t\t\t\t\t\tfilterText: (item.start && item.length) ? text.substr(item.start, item.length).concat(item.label) : undefined,\n\t\t\t\t\t\t\t\trange: Range.fromPositions(position.delta(0, -(item.length || overwriteBefore)), position)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new Error('no debug adapter'));\n\t}\n\n\t//---- threads\n\n\tgetThread(threadId: number): Thread | undefined {\n\t\treturn this.threads.get(threadId);\n\t}\n\n\tgetAllThreads(): IThread[] {\n\t\tconst result: IThread[] = [];\n\t\tthis.threads.forEach(t => result.push(t));\n\t\treturn result;\n\t}\n\n\tclearThreads(removeThreads: boolean, reference: number | undefined = undefined): void {\n\t\tif (reference !== undefined && reference !== null) {\n\t\t\tconst thread = this.threads.get(reference);\n\t\t\tif (thread) {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\n\t\t\t\tif (removeThreads) {\n\t\t\t\t\tthis.threads.delete(reference);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.threads.forEach(thread => {\n\t\t\t\tthread.clearCallStack();\n\t\t\t\tthread.stoppedDetails = undefined;\n\t\t\t\tthread.stopped = false;\n\t\t\t});\n\n\t\t\tif (removeThreads) {\n\t\t\t\tthis.threads.clear();\n\t\t\t\tExpressionContainer.allValues.clear();\n\t\t\t}\n\t\t}\n\t}\n\n\trawUpdate(data: IRawModelUpdate): void {\n\t\tdata.threads.forEach(thread => {\n\t\t\tif (!this.threads.has(thread.id)) {\n\t\t\t\t// A new thread came in, initialize it.\n\t\t\t\tthis.threads.set(thread.id, new Thread(this, thread.name, thread.id));\n\t\t\t} else if (thread.name) {\n\t\t\t\t// Just the thread name got updated #18244\n\t\t\t\tconst oldThread = this.threads.get(thread.id);\n\t\t\t\tif (oldThread) {\n\t\t\t\t\toldThread.name = thread.name;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst stoppedDetails = data.stoppedDetails;\n\t\tif (stoppedDetails) {\n\t\t\t// Set the availability of the threads' callstacks depending on\n\t\t\t// whether the thread is stopped or not\n\t\t\tif (stoppedDetails.allThreadsStopped) {\n\t\t\t\tthis.threads.forEach(thread => {\n\t\t\t\t\tthread.stoppedDetails = thread.threadId === stoppedDetails.threadId ? stoppedDetails : { reason: undefined };\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst thread = typeof stoppedDetails.threadId === 'number' ? this.threads.get(stoppedDetails.threadId) : undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// One thread is stopped, only update that thread.\n\t\t\t\t\tthread.stoppedDetails = stoppedDetails;\n\t\t\t\t\tthread.clearCallStack();\n\t\t\t\t\tthread.stopped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate fetchThreads(stoppedDetails?: IRawStoppedDetails): Promise<void> {\n\t\treturn this.raw ? this.raw.threads().then(response => {\n\t\t\tif (response && response.body && response.body.threads) {\n\t\t\t\tthis.model.rawUpdate({\n\t\t\t\t\tsessionId: this.getId(),\n\t\t\t\t\tthreads: response.body.threads,\n\t\t\t\t\tstoppedDetails\n\t\t\t\t});\n\t\t\t}\n\t\t}) : Promise.resolve(undefined);\n\t}\n\n\t//---- private\n\n\tprivate registerListeners(): void {\n\t\tif (!this.raw) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rawListeners.push(this.raw.onDidInitialize(() => {\n\t\t\taria.status(nls.localize('debuggingStarted', \"Debugging started.\"));\n\t\t\tconst sendConfigurationDone = () => {\n\t\t\t\tif (this.raw && this.raw.capabilities.supportsConfigurationDoneRequest) {\n\t\t\t\t\treturn this.raw.configurationDone().then(undefined, e => {\n\t\t\t\t\t\t// Disconnect the debug session on configuration done error #10596\n\t\t\t\t\t\tif (this.raw) {\n\t\t\t\t\t\t\tthis.raw.disconnect();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (e.command !== 'canceled' && e.message !== 'canceled') {\n\t\t\t\t\t\t\tthis.notificationService.error(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t};\n\n\t\t\t// Send all breakpoints\n\t\t\tthis.debugService.sendAllBreakpoints(this).then(sendConfigurationDone, sendConfigurationDone)\n\t\t\t\t.then(() => this.fetchThreads());\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidStop(event => {\n\t\t\tthis.fetchThreads(event.body).then(() => {\n\t\t\t\tconst thread = typeof event.body.threadId === 'number' ? this.getThread(event.body.threadId) : undefined;\n\t\t\t\tif (thread) {\n\t\t\t\t\t// Call fetch call stack twice, the first only return the top stack frame.\n\t\t\t\t\t// Second retrieves the rest of the call stack. For performance reasons #25605\n\t\t\t\t\tconst promises = this.model.fetchCallStack(<Thread>thread);\n\t\t\t\t\tconst focus = () => {\n\t\t\t\t\t\tif (!event.body.preserveFocusHint && thread.getCallStack().length) {\n\t\t\t\t\t\t\tthis.debugService.focusStackFrame(undefined, thread);\n\t\t\t\t\t\t\tif (thread.stoppedDetails) {\n\t\t\t\t\t\t\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').openDebug === 'openOnDebugBreak') {\n\t\t\t\t\t\t\t\t\tthis.viewletService.openViewlet(VIEWLET_ID);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.windowService.focusWindow();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tpromises.topCallStack.then(focus);\n\t\t\t\t\tpromises.wholeCallStack.then(() => {\n\t\t\t\t\t\tif (!this.debugService.getViewModel().focusedStackFrame) {\n\t\t\t\t\t\t\t// The top stack frame can be deemphesized so try to focus again #68616\n\t\t\t\t\t\t\tfocus();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).then(() => this._onDidChangeState.fire());\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidThread(event => {\n\t\t\tif (event.body.reason === 'started') {\n\t\t\t\t// debounce to reduce threadsRequest frequency and improve performance\n\t\t\t\tif (!this.fetchThreadsScheduler) {\n\t\t\t\t\tthis.fetchThreadsScheduler = new RunOnceScheduler(() => {\n\t\t\t\t\t\tthis.fetchThreads();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tthis.rawListeners.push(this.fetchThreadsScheduler);\n\t\t\t\t}\n\t\t\t\tif (!this.fetchThreadsScheduler.isScheduled()) {\n\t\t\t\t\tthis.fetchThreadsScheduler.schedule();\n\t\t\t\t}\n\t\t\t} else if (event.body.reason === 'exited') {\n\t\t\t\tthis.model.clearThreads(this.getId(), true, event.body.threadId);\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidTerminateDebugee(event => {\n\t\t\taria.status(nls.localize('debuggingStopped', \"Debugging stopped.\"));\n\t\t\tif (event.body && event.body.restart) {\n\t\t\t\tthis.debugService.restartSession(this, event.body.restart).then(undefined, onUnexpectedError);\n\t\t\t} else if (this.raw) {\n\t\t\t\tthis.raw.disconnect();\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidContinued(event => {\n\t\t\tconst threadId = event.body.allThreadsContinued !== false ? undefined : event.body.threadId;\n\t\t\tthis.model.clearThreads(this.getId(), false, threadId);\n\t\t\tthis._onDidChangeState.fire();\n\t\t}));\n\n\t\tlet outpuPromises: Promise<void>[] = [];\n\t\tthis.rawListeners.push(this.raw.onDidOutput(event => {\n\t\t\tif (!event.body || !this.raw) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst outputSeverity = event.body.category === 'stderr' ? severity.Error : event.body.category === 'console' ? severity.Warning : severity.Info;\n\t\t\tif (event.body.category === 'telemetry') {\n\t\t\t\t// only log telemetry events from debug adapter if the debug extension provided the telemetry key\n\t\t\t\t// and the user opted in telemetry\n\t\t\t\tif (this.raw.customTelemetryService && this.telemetryService.isOptedIn) {\n\t\t\t\t\t// __GDPR__TODO__ We're sending events in the name of the debug extension and we can not ensure that those are declared correctly.\n\t\t\t\t\tthis.raw.customTelemetryService.publicLog(event.body.output, event.body.data);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Make sure to append output in the correct order by properly waiting on preivous promises #33822\n\t\t\tconst waitFor = outpuPromises.slice();\n\t\t\tconst source = event.body.source && event.body.line ? {\n\t\t\t\tlineNumber: event.body.line,\n\t\t\t\tcolumn: event.body.column ? event.body.column : 1,\n\t\t\t\tsource: this.getSource(event.body.source)\n\t\t\t} : undefined;\n\t\t\tif (event.body.variablesReference) {\n\t\t\t\tconst container = new ExpressionContainer(this, event.body.variablesReference, generateUuid());\n\t\t\t\toutpuPromises.push(container.getChildren().then(children => {\n\t\t\t\t\treturn Promise.all(waitFor).then(() => children.forEach(child => {\n\t\t\t\t\t\t// Since we can not display multiple trees in a row, we are displaying these variables one after the other (ignoring their names)\n\t\t\t\t\t\t(<any>child).name = null;\n\t\t\t\t\t\tthis.appendToRepl(child, outputSeverity, source);\n\t\t\t\t\t}));\n\t\t\t\t}));\n\t\t\t} else if (typeof event.body.output === 'string') {\n\t\t\t\tPromise.all(waitFor).then(() => this.appendToRepl(event.body.output, outputSeverity, source));\n\t\t\t}\n\t\t\tPromise.all(outpuPromises).then(() => outpuPromises = []);\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidBreakpoint(event => {\n\t\t\tconst id = event.body && event.body.breakpoint ? event.body.breakpoint.id : undefined;\n\t\t\tconst breakpoint = this.model.getBreakpoints().filter(bp => bp.idFromAdapter === id).pop();\n\t\t\tconst functionBreakpoint = this.model.getFunctionBreakpoints().filter(bp => bp.idFromAdapter === id).pop();\n\n\t\t\tif (event.body.reason === 'new' && event.body.breakpoint.source && event.body.breakpoint.line) {\n\t\t\t\tconst source = this.getSource(event.body.breakpoint.source);\n\t\t\t\tconst bps = this.model.addBreakpoints(source.uri, [{\n\t\t\t\t\tcolumn: event.body.breakpoint.column,\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlineNumber: event.body.breakpoint.line,\n\t\t\t\t}], false);\n\t\t\t\tif (bps.length === 1) {\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), { [bps[0].getId()]: event.body.breakpoint });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (event.body.reason === 'removed') {\n\t\t\t\tif (breakpoint) {\n\t\t\t\t\tthis.model.removeBreakpoints([breakpoint]);\n\t\t\t\t}\n\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\tthis.model.removeFunctionBreakpoints(functionBreakpoint.getId());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (event.body.reason === 'changed') {\n\t\t\t\tif (breakpoint) {\n\t\t\t\t\tif (!breakpoint.column) {\n\t\t\t\t\t\tevent.body.breakpoint.column = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), { [breakpoint.getId()]: event.body.breakpoint });\n\t\t\t\t}\n\t\t\t\tif (functionBreakpoint) {\n\t\t\t\t\tthis.model.setBreakpointSessionData(this.getId(), { [functionBreakpoint.getId()]: event.body.breakpoint });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidLoadedSource(event => {\n\t\t\tthis._onDidLoadedSource.fire({\n\t\t\t\treason: event.body.reason,\n\t\t\t\tsource: this.getSource(event.body.source)\n\t\t\t});\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidCustomEvent(event => {\n\t\t\tthis._onDidCustomEvent.fire(event);\n\t\t}));\n\n\t\tthis.rawListeners.push(this.raw.onDidExitAdapter(event => {\n\t\t\tthis._onDidEndAdapter.fire(event);\n\t\t}));\n\t}\n\n\tshutdown(): void {\n\t\tdispose(this.rawListeners);\n\t\tif (this.raw) {\n\t\t\tthis.raw.disconnect();\n\t\t}\n\t\tthis.raw = undefined;\n\t\tthis.model.clearThreads(this.getId(), true);\n\t\tthis._onDidChangeState.fire();\n\t}\n\n\t//---- sources\n\n\tgetSourceForUri(uri: URI): Source | undefined {\n\t\treturn this.sources.get(this.getUriKey(uri));\n\t}\n\n\tgetSource(raw?: DebugProtocol.Source): Source {\n\t\tlet source = new Source(raw, this.getId());\n\t\tconst uriKey = this.getUriKey(source.uri);\n\t\tconst found = this.sources.get(uriKey);\n\t\tif (found) {\n\t\t\tsource = found;\n\t\t\t// merge attributes of new into existing\n\t\t\tsource.raw = mixin(source.raw, raw);\n\t\t\tif (source.raw && raw) {\n\t\t\t\t// Always take the latest presentation hint from adapter #42139\n\t\t\t\tsource.raw.presentationHint = raw.presentationHint;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.sources.set(uriKey, source);\n\t\t}\n\n\t\treturn source;\n\t}\n\n\tprivate getUriKey(uri: URI): string {\n\t\t// TODO: the following code does not make sense if uri originates from a different platform\n\t\treturn platform.isLinux ? uri.toString() : uri.toString().toLowerCase();\n\t}\n\n\t// REPL\n\n\tgetReplElements(): IReplElement[] {\n\t\treturn this.repl.getReplElements();\n\t}\n\n\tremoveReplExpressions(): void {\n\t\tthis.repl.removeReplExpressions();\n\t\tthis._onDidChangeREPLElements.fire();\n\t}\n\n\taddReplExpression(stackFrame: IStackFrame | undefined, name: string): Promise<void> {\n\t\tconst viewModel = this.debugService.getViewModel();\n\t\treturn this.repl.addReplExpression(stackFrame, name)\n\t\t\t.then(() => this._onDidChangeREPLElements.fire())\n\t\t\t// Evaluate all watch expressions and fetch variables again since repl evaluation might have changed some.\n\t\t\t.then(() => this.debugService.focusStackFrame(viewModel.focusedStackFrame, viewModel.focusedThread, viewModel.focusedSession));\n\t}\n\n\tappendToRepl(data: string | IExpression, severity: severity, source?: IReplElementSource): void {\n\t\tthis.repl.appendToRepl(data, severity, source);\n\t\tthis._onDidChangeREPLElements.fire();\n\t}\n\n\tlogToRepl(sev: severity, args: any[], frame?: { uri: URI, line: number, column: number }) {\n\t\tthis.repl.logToRepl(sev, args, frame);\n\t\tthis._onDidChangeREPLElements.fire();\n\t}\n}\n"]}]}