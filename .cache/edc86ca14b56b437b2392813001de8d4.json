{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesTree.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesTree.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"./referencesModel\", \"vs/editor/common/services/resolverService\", \"vs/base/browser/ui/iconLabel/iconLabel\", \"vs/base/browser/ui/countBadge/countBadge\", \"vs/platform/label/common/label\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/styler\", \"vs/base/browser/dom\", \"vs/nls\", \"vs/base/common/labels\", \"vs/base/common/resources\", \"vs/base/common/strings\", \"vs/base/common/lifecycle\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/keybinding/common/keybinding\", \"vs/base/common/filters\"], function (require, exports, referencesModel_1, resolverService_1, iconLabel_1, countBadge_1, label_1, themeService_1, styler_1, dom, nls_1, labels_1, resources_1, strings_1, lifecycle_1, instantiation_1, keybinding_1, filters_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let DataSource = class DataSource {\n        constructor(_resolverService) {\n            this._resolverService = _resolverService;\n        }\n        hasChildren(element) {\n            if (element instanceof referencesModel_1.ReferencesModel) {\n                return true;\n            }\n            if (element instanceof referencesModel_1.FileReferences && !element.failure) {\n                return true;\n            }\n            return false;\n        }\n        getChildren(element) {\n            if (element instanceof referencesModel_1.ReferencesModel) {\n                return element.groups;\n            }\n            if (element instanceof referencesModel_1.FileReferences) {\n                return element.resolve(this._resolverService).then(val => {\n                    // if (element.failure) {\n                    // \t// refresh the element on failure so that\n                    // \t// we can update its rendering\n                    // \treturn tree.refresh(element).then(() => val.children);\n                    // }\n                    return val.children;\n                });\n            }\n            throw new Error('bad tree');\n        }\n    };\n    DataSource = __decorate([\n        __param(0, resolverService_1.ITextModelService)\n    ], DataSource);\n    exports.DataSource = DataSource;\n    //#endregion\n    class Delegate {\n        getHeight() {\n            return 23;\n        }\n        getTemplateId(element) {\n            if (element instanceof referencesModel_1.FileReferences) {\n                return FileReferencesRenderer.id;\n            }\n            else {\n                return OneReferenceRenderer.id;\n            }\n        }\n    }\n    exports.Delegate = Delegate;\n    let StringRepresentationProvider = class StringRepresentationProvider {\n        constructor(_keybindingService) {\n            this._keybindingService = _keybindingService;\n        }\n        getKeyboardNavigationLabel(element) {\n            // todo@joao `OneReference` elements are lazy and their \"real\" label\n            // isn't known yet\n            return resources_1.basename(element.uri);\n        }\n        mightProducePrintableCharacter(event) {\n            return this._keybindingService.mightProducePrintableCharacter(event);\n        }\n    };\n    StringRepresentationProvider = __decorate([\n        __param(0, keybinding_1.IKeybindingService)\n    ], StringRepresentationProvider);\n    exports.StringRepresentationProvider = StringRepresentationProvider;\n    class IdentityProvider {\n        getId(element) {\n            return element.id;\n        }\n    }\n    exports.IdentityProvider = IdentityProvider;\n    //#region render: File\n    let FileReferencesTemplate = class FileReferencesTemplate extends lifecycle_1.Disposable {\n        constructor(container, _uriLabel, themeService) {\n            super();\n            this._uriLabel = _uriLabel;\n            const parent = document.createElement('div');\n            dom.addClass(parent, 'reference-file');\n            this.file = this._register(new iconLabel_1.IconLabel(parent, { supportHighlights: true }));\n            this.badge = new countBadge_1.CountBadge(dom.append(parent, dom.$('.count')));\n            this._register(styler_1.attachBadgeStyler(this.badge, themeService));\n            container.appendChild(parent);\n        }\n        set(element, matches) {\n            let parent = resources_1.dirname(element.uri);\n            this.file.setLabel(labels_1.getBaseLabel(element.uri), this._uriLabel.getUriLabel(parent, { relative: true }), { title: this._uriLabel.getUriLabel(element.uri), matches });\n            const len = element.children.length;\n            this.badge.setCount(len);\n            if (element.failure) {\n                this.badge.setTitleFormat(nls_1.localize('referencesFailre', \"Failed to resolve file.\"));\n            }\n            else if (len > 1) {\n                this.badge.setTitleFormat(nls_1.localize('referencesCount', \"{0} references\", len));\n            }\n            else {\n                this.badge.setTitleFormat(nls_1.localize('referenceCount', \"{0} reference\", len));\n            }\n        }\n    };\n    FileReferencesTemplate = __decorate([\n        __param(1, label_1.ILabelService),\n        __param(2, themeService_1.IThemeService)\n    ], FileReferencesTemplate);\n    let FileReferencesRenderer = class FileReferencesRenderer {\n        constructor(_instantiationService) {\n            this._instantiationService = _instantiationService;\n            this.templateId = FileReferencesRenderer.id;\n        }\n        renderTemplate(container) {\n            return this._instantiationService.createInstance(FileReferencesTemplate, container);\n        }\n        renderElement(node, index, template) {\n            template.set(node.element, filters_1.createMatches(node.filterData));\n        }\n        disposeTemplate(templateData) {\n            templateData.dispose();\n        }\n    };\n    FileReferencesRenderer.id = 'FileReferencesRenderer';\n    FileReferencesRenderer = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], FileReferencesRenderer);\n    exports.FileReferencesRenderer = FileReferencesRenderer;\n    //#endregion\n    //#region render: Reference\n    class OneReferenceTemplate {\n        constructor(container) {\n            const parent = document.createElement('div');\n            this.before = document.createElement('span');\n            this.inside = document.createElement('span');\n            this.after = document.createElement('span');\n            dom.addClass(this.inside, 'referenceMatch');\n            dom.addClass(parent, 'reference');\n            parent.appendChild(this.before);\n            parent.appendChild(this.inside);\n            parent.appendChild(this.after);\n            container.appendChild(parent);\n        }\n        set(element) {\n            const filePreview = element.parent.preview;\n            const preview = filePreview && filePreview.preview(element.range);\n            if (preview) {\n                const { before, inside, after } = preview;\n                this.before.innerHTML = strings_1.escape(before);\n                this.inside.innerHTML = strings_1.escape(inside);\n                this.after.innerHTML = strings_1.escape(after);\n            }\n        }\n    }\n    class OneReferenceRenderer {\n        constructor() {\n            this.templateId = OneReferenceRenderer.id;\n        }\n        renderTemplate(container) {\n            return new OneReferenceTemplate(container);\n        }\n        renderElement(element, index, templateData) {\n            templateData.set(element.element);\n        }\n        disposeTemplate() {\n            //\n        }\n    }\n    OneReferenceRenderer.id = 'OneReferenceRenderer';\n    exports.OneReferenceRenderer = OneReferenceRenderer;\n    //#endregion\n    class AriaProvider {\n        getAriaLabel(element) {\n            if (element instanceof referencesModel_1.FileReferences) {\n                return element.getAriaMessage();\n            }\n            else if (element instanceof referencesModel_1.OneReference) {\n                return element.getAriaMessage();\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    exports.AriaProvider = AriaProvider;\n});\n",null]}