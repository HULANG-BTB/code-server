{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar getIconClasses_1 = require(\"vs/editor/common/services/getIconClasses\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar nls = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar workspaceCommands_1 = require(\"vs/workbench/browser/actions/workspaceCommands\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar OpenRawDefaultSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenRawDefaultSettingsAction, _super);\n    function OpenRawDefaultSettingsAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenRawDefaultSettingsAction.prototype.run = function (event) {\n        return this.preferencesService.openRawDefaultSettings();\n    };\n    OpenRawDefaultSettingsAction.ID = 'workbench.action.openRawDefaultSettings';\n    OpenRawDefaultSettingsAction.LABEL = nls.localize('openRawDefaultSettings', \"Open Default Settings (JSON)\");\n    OpenRawDefaultSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenRawDefaultSettingsAction);\n    return OpenRawDefaultSettingsAction;\n}(actions_1.Action));\nexports.OpenRawDefaultSettingsAction = OpenRawDefaultSettingsAction;\nvar OpenSettings2Action = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenSettings2Action, _super);\n    function OpenSettings2Action(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenSettings2Action.prototype.run = function (event) {\n        return this.preferencesService.openSettings(false);\n    };\n    OpenSettings2Action.ID = 'workbench.action.openSettings2';\n    OpenSettings2Action.LABEL = nls.localize('openSettings2', \"Open Settings (UI)\");\n    OpenSettings2Action = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenSettings2Action);\n    return OpenSettings2Action;\n}(actions_1.Action));\nexports.OpenSettings2Action = OpenSettings2Action;\nvar OpenSettingsJsonAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenSettingsJsonAction, _super);\n    function OpenSettingsJsonAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenSettingsJsonAction.prototype.run = function (event) {\n        return this.preferencesService.openSettings(true);\n    };\n    OpenSettingsJsonAction.ID = 'workbench.action.openSettingsJson';\n    OpenSettingsJsonAction.LABEL = nls.localize('openSettingsJson', \"Open Settings (JSON)\");\n    OpenSettingsJsonAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenSettingsJsonAction);\n    return OpenSettingsJsonAction;\n}(actions_1.Action));\nexports.OpenSettingsJsonAction = OpenSettingsJsonAction;\nvar OpenGlobalSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenGlobalSettingsAction, _super);\n    function OpenGlobalSettingsAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenGlobalSettingsAction.prototype.run = function (event) {\n        return this.preferencesService.openGlobalSettings();\n    };\n    OpenGlobalSettingsAction.ID = 'workbench.action.openGlobalSettings';\n    OpenGlobalSettingsAction.LABEL = nls.localize('openGlobalSettings', \"Open User Settings\");\n    OpenGlobalSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenGlobalSettingsAction);\n    return OpenGlobalSettingsAction;\n}(actions_1.Action));\nexports.OpenGlobalSettingsAction = OpenGlobalSettingsAction;\nvar OpenRemoteSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenRemoteSettingsAction, _super);\n    function OpenRemoteSettingsAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenRemoteSettingsAction.prototype.run = function (event) {\n        return this.preferencesService.openRemoteSettings();\n    };\n    OpenRemoteSettingsAction.ID = 'workbench.action.openRemoteSettings';\n    OpenRemoteSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenRemoteSettingsAction);\n    return OpenRemoteSettingsAction;\n}(actions_1.Action));\nexports.OpenRemoteSettingsAction = OpenRemoteSettingsAction;\nvar OpenGlobalKeybindingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenGlobalKeybindingsAction, _super);\n    function OpenGlobalKeybindingsAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenGlobalKeybindingsAction.prototype.run = function (event) {\n        return this.preferencesService.openGlobalKeybindingSettings(false);\n    };\n    OpenGlobalKeybindingsAction.ID = 'workbench.action.openGlobalKeybindings';\n    OpenGlobalKeybindingsAction.LABEL = nls.localize('openGlobalKeybindings', \"Open Keyboard Shortcuts\");\n    OpenGlobalKeybindingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenGlobalKeybindingsAction);\n    return OpenGlobalKeybindingsAction;\n}(actions_1.Action));\nexports.OpenGlobalKeybindingsAction = OpenGlobalKeybindingsAction;\nvar OpenGlobalKeybindingsFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenGlobalKeybindingsFileAction, _super);\n    function OpenGlobalKeybindingsFileAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenGlobalKeybindingsFileAction.prototype.run = function (event) {\n        return this.preferencesService.openGlobalKeybindingSettings(true);\n    };\n    OpenGlobalKeybindingsFileAction.ID = 'workbench.action.openGlobalKeybindingsFile';\n    OpenGlobalKeybindingsFileAction.LABEL = nls.localize('openGlobalKeybindingsFile', \"Open Keyboard Shortcuts (JSON)\");\n    OpenGlobalKeybindingsFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenGlobalKeybindingsFileAction);\n    return OpenGlobalKeybindingsFileAction;\n}(actions_1.Action));\nexports.OpenGlobalKeybindingsFileAction = OpenGlobalKeybindingsFileAction;\nvar OpenDefaultKeybindingsFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenDefaultKeybindingsFileAction, _super);\n    function OpenDefaultKeybindingsFileAction(id, label, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    OpenDefaultKeybindingsFileAction.prototype.run = function (event) {\n        return this.preferencesService.openDefaultKeybindingsFile();\n    };\n    OpenDefaultKeybindingsFileAction.ID = 'workbench.action.openDefaultKeybindingsFile';\n    OpenDefaultKeybindingsFileAction.LABEL = nls.localize('openDefaultKeybindingsFile', \"Open Default Keyboard Shortcuts (JSON)\");\n    OpenDefaultKeybindingsFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService)\n    ], OpenDefaultKeybindingsFileAction);\n    return OpenDefaultKeybindingsFileAction;\n}(actions_1.Action));\nexports.OpenDefaultKeybindingsFileAction = OpenDefaultKeybindingsFileAction;\nvar OpenWorkspaceSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenWorkspaceSettingsAction, _super);\n    function OpenWorkspaceSettingsAction(id, label, preferencesService, workspaceContextService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.preferencesService = preferencesService;\n        _this.workspaceContextService = workspaceContextService;\n        _this.disposables = [];\n        _this.update();\n        _this.workspaceContextService.onDidChangeWorkbenchState(function () { return _this.update(); }, _this, _this.disposables);\n        return _this;\n    }\n    OpenWorkspaceSettingsAction.prototype.update = function () {\n        this.enabled = this.workspaceContextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY;\n    };\n    OpenWorkspaceSettingsAction.prototype.run = function (event) {\n        return this.preferencesService.openWorkspaceSettings();\n    };\n    OpenWorkspaceSettingsAction.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n        _super.prototype.dispose.call(this);\n    };\n    OpenWorkspaceSettingsAction.ID = 'workbench.action.openWorkspaceSettings';\n    OpenWorkspaceSettingsAction.LABEL = nls.localize('openWorkspaceSettings', \"Open Workspace Settings\");\n    OpenWorkspaceSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, preferences_1.IPreferencesService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService)\n    ], OpenWorkspaceSettingsAction);\n    return OpenWorkspaceSettingsAction;\n}(actions_1.Action));\nexports.OpenWorkspaceSettingsAction = OpenWorkspaceSettingsAction;\nexports.OPEN_FOLDER_SETTINGS_COMMAND = '_workbench.action.openFolderSettings';\nexports.OPEN_FOLDER_SETTINGS_LABEL = nls.localize('openFolderSettings', \"Open Folder Settings\");\nvar OpenFolderSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenFolderSettingsAction, _super);\n    function OpenFolderSettingsAction(id, label, workspaceContextService, preferencesService, commandService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.workspaceContextService = workspaceContextService;\n        _this.preferencesService = preferencesService;\n        _this.commandService = commandService;\n        _this.disposables = [];\n        _this.update();\n        _this.workspaceContextService.onDidChangeWorkbenchState(function () { return _this.update(); }, _this, _this.disposables);\n        _this.workspaceContextService.onDidChangeWorkspaceFolders(function () { return _this.update(); }, _this, _this.disposables);\n        return _this;\n    }\n    OpenFolderSettingsAction.prototype.update = function () {\n        this.enabled = this.workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE && this.workspaceContextService.getWorkspace().folders.length > 0;\n    };\n    OpenFolderSettingsAction.prototype.run = function () {\n        var _this = this;\n        return this.commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID)\n            .then(function (workspaceFolder) {\n            if (workspaceFolder) {\n                return _this.preferencesService.openFolderSettings(workspaceFolder.uri);\n            }\n            return null;\n        });\n    };\n    OpenFolderSettingsAction.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n        _super.prototype.dispose.call(this);\n    };\n    OpenFolderSettingsAction.ID = 'workbench.action.openFolderSettings';\n    OpenFolderSettingsAction.LABEL = exports.OPEN_FOLDER_SETTINGS_LABEL;\n    OpenFolderSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, preferences_1.IPreferencesService),\n        tslib_1.__param(4, commands_1.ICommandService)\n    ], OpenFolderSettingsAction);\n    return OpenFolderSettingsAction;\n}(actions_1.Action));\nexports.OpenFolderSettingsAction = OpenFolderSettingsAction;\nvar ConfigureLanguageBasedSettingsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigureLanguageBasedSettingsAction, _super);\n    function ConfigureLanguageBasedSettingsAction(id, label, modelService, modeService, quickInputService, preferencesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.modelService = modelService;\n        _this.modeService = modeService;\n        _this.quickInputService = quickInputService;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    ConfigureLanguageBasedSettingsAction.prototype.run = function () {\n        var _this = this;\n        var languages = this.modeService.getRegisteredLanguageNames();\n        var picks = languages.sort().map(function (lang, index) {\n            var description = nls.localize('languageDescriptionConfigured', \"({0})\", _this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n            // construct a fake resource to be able to show nice icons if any\n            var fakeResource;\n            var extensions = _this.modeService.getExtensions(lang);\n            if (extensions && extensions.length) {\n                fakeResource = uri_1.URI.file(extensions[0]);\n            }\n            else {\n                var filenames = _this.modeService.getFilenames(lang);\n                if (filenames && filenames.length) {\n                    fakeResource = uri_1.URI.file(filenames[0]);\n                }\n            }\n            return {\n                label: lang,\n                iconClasses: getIconClasses_1.getIconClasses(_this.modelService, _this.modeService, fakeResource),\n                description: description\n            };\n        });\n        return this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language\") })\n            .then(function (pick) {\n            if (pick) {\n                var modeId = _this.modeService.getModeIdForLanguageName(pick.label.toLowerCase());\n                if (typeof modeId === 'string') {\n                    return _this.preferencesService.configureSettingsForLanguage(modeId);\n                }\n            }\n            return undefined;\n        });\n    };\n    ConfigureLanguageBasedSettingsAction.ID = 'workbench.action.configureLanguageBasedSettings';\n    ConfigureLanguageBasedSettingsAction.LABEL = nls.localize('configureLanguageBasedSettings', \"Configure Language Specific Settings...\");\n    ConfigureLanguageBasedSettingsAction = tslib_1.__decorate([\n        tslib_1.__param(2, modelService_1.IModelService),\n        tslib_1.__param(3, modeService_1.IModeService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, preferences_1.IPreferencesService)\n    ], ConfigureLanguageBasedSettingsAction);\n    return ConfigureLanguageBasedSettingsAction;\n}(actions_1.Action));\nexports.ConfigureLanguageBasedSettingsAction = ConfigureLanguageBasedSettingsAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/preferencesActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { PICK_WORKSPACE_FOLDER_COMMAND_ID } from 'vs/workbench/browser/actions/workspaceCommands';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\n\nexport class OpenRawDefaultSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openRawDefaultSettings';\n\tstatic readonly LABEL = nls.localize('openRawDefaultSettings', \"Open Default Settings (JSON)\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openRawDefaultSettings();\n\t}\n}\n\nexport class OpenSettings2Action extends Action {\n\n\tstatic readonly ID = 'workbench.action.openSettings2';\n\tstatic readonly LABEL = nls.localize('openSettings2', \"Open Settings (UI)\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openSettings(false);\n\t}\n}\n\nexport class OpenSettingsJsonAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openSettingsJson';\n\tstatic readonly LABEL = nls.localize('openSettingsJson', \"Open Settings (JSON)\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openSettings(true);\n\t}\n}\n\nexport class OpenGlobalSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openGlobalSettings';\n\tstatic readonly LABEL = nls.localize('openGlobalSettings', \"Open User Settings\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openGlobalSettings();\n\t}\n}\n\nexport class OpenRemoteSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openRemoteSettings';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openRemoteSettings();\n\t}\n}\n\nexport class OpenGlobalKeybindingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openGlobalKeybindings';\n\tstatic readonly LABEL = nls.localize('openGlobalKeybindings', \"Open Keyboard Shortcuts\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openGlobalKeybindingSettings(false);\n\t}\n}\n\nexport class OpenGlobalKeybindingsFileAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openGlobalKeybindingsFile';\n\tstatic readonly LABEL = nls.localize('openGlobalKeybindingsFile', \"Open Keyboard Shortcuts (JSON)\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openGlobalKeybindingSettings(true);\n\t}\n}\n\nexport class OpenDefaultKeybindingsFileAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openDefaultKeybindingsFile';\n\tstatic readonly LABEL = nls.localize('openDefaultKeybindingsFile', \"Open Default Keyboard Shortcuts (JSON)\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openDefaultKeybindingsFile();\n\t}\n}\n\nexport class OpenWorkspaceSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openWorkspaceSettings';\n\tstatic readonly LABEL = nls.localize('openWorkspaceSettings', \"Open Workspace Settings\");\n\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper(id, label);\n\t\tthis.update();\n\t\tthis.workspaceContextService.onDidChangeWorkbenchState(() => this.update(), this, this.disposables);\n\t}\n\n\tprivate update(): void {\n\t\tthis.enabled = this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY;\n\t}\n\n\trun(event?: any): Promise<any> {\n\t\treturn this.preferencesService.openWorkspaceSettings();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tsuper.dispose();\n\t}\n}\n\nexport const OPEN_FOLDER_SETTINGS_COMMAND = '_workbench.action.openFolderSettings';\nexport const OPEN_FOLDER_SETTINGS_LABEL = nls.localize('openFolderSettings', \"Open Folder Settings\");\nexport class OpenFolderSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openFolderSettings';\n\tstatic readonly LABEL = OPEN_FOLDER_SETTINGS_LABEL;\n\n\tprivate disposables: IDisposable[] = [];\n\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper(id, label);\n\t\tthis.update();\n\t\tthis.workspaceContextService.onDidChangeWorkbenchState(() => this.update(), this, this.disposables);\n\t\tthis.workspaceContextService.onDidChangeWorkspaceFolders(() => this.update(), this, this.disposables);\n\t}\n\n\tprivate update(): void {\n\t\tthis.enabled = this.workspaceContextService.getWorkbenchState() === WorkbenchState.WORKSPACE && this.workspaceContextService.getWorkspace().folders.length > 0;\n\t}\n\n\trun(): Promise<any> {\n\t\treturn this.commandService.executeCommand<IWorkspaceFolder>(PICK_WORKSPACE_FOLDER_COMMAND_ID)\n\t\t\t.then(workspaceFolder => {\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this.preferencesService.openFolderSettings(workspaceFolder.uri);\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t\tsuper.dispose();\n\t}\n}\n\nexport class ConfigureLanguageBasedSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureLanguageBasedSettings';\n\tstatic readonly LABEL = nls.localize('configureLanguageBasedSettings', \"Configure Language Specific Settings...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst languages = this.modeService.getRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.sort().map((lang, index) => {\n\t\t\tconst description: string = nls.localize('languageDescriptionConfigured', \"({0})\", this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\tlet fakeResource: URI | undefined;\n\t\t\tconst extensions = this.modeService.getExtensions(lang);\n\t\t\tif (extensions && extensions.length) {\n\t\t\t\tfakeResource = URI.file(extensions[0]);\n\t\t\t} else {\n\t\t\t\tconst filenames = this.modeService.getFilenames(lang);\n\t\t\t\tif (filenames && filenames.length) {\n\t\t\t\t\tfakeResource = URI.file(filenames[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tlabel: lang,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.modeService, fakeResource),\n\t\t\t\tdescription\n\t\t\t} as IQuickPickItem;\n\t\t});\n\n\t\treturn this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language\") })\n\t\t\t.then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst modeId = this.modeService.getModeIdForLanguageName(pick.label.toLowerCase());\n\t\t\t\t\tif (typeof modeId === 'string') {\n\t\t\t\t\t\treturn this.preferencesService.configureSettingsForLanguage(modeId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t}\n}\n"]}]}