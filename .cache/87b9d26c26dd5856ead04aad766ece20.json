{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationEditingService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationEditingService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar json = require(\"vs/base/common/json\");\nvar strings = require(\"vs/base/common/strings\");\nvar jsonEdit_1 = require(\"vs/base/common/jsonEdit\");\nvar async_1 = require(\"vs/base/common/async\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configuration_2 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar types_1 = require(\"vs/base/common/types\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar ConfigurationEditingErrorCode;\n(function (ConfigurationEditingErrorCode) {\n    /**\n     * Error when trying to write a configuration key that is not registered.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_UNKNOWN_KEY\"] = 0] = \"ERROR_UNKNOWN_KEY\";\n    /**\n     * Error when trying to write an application setting into workspace settings.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION\"] = 1] = \"ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION\";\n    /**\n     * Error when trying to write an invalid folder configuration key to folder settings.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_FOLDER_CONFIGURATION\"] = 2] = \"ERROR_INVALID_FOLDER_CONFIGURATION\";\n    /**\n     * Error when trying to write to user target but not supported for provided key.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_USER_TARGET\"] = 3] = \"ERROR_INVALID_USER_TARGET\";\n    /**\n     * Error when trying to write to user target but not supported for provided key.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_WORKSPACE_TARGET\"] = 4] = \"ERROR_INVALID_WORKSPACE_TARGET\";\n    /**\n     * Error when trying to write a configuration key to folder target\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_FOLDER_TARGET\"] = 5] = \"ERROR_INVALID_FOLDER_TARGET\";\n    /**\n     * Error when trying to write to the workspace configuration without having a workspace opened.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_NO_WORKSPACE_OPENED\"] = 6] = \"ERROR_NO_WORKSPACE_OPENED\";\n    /**\n     * Error when trying to write and save to the configuration file while it is dirty in the editor.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_CONFIGURATION_FILE_DIRTY\"] = 7] = \"ERROR_CONFIGURATION_FILE_DIRTY\";\n    /**\n     * Error when trying to write to a configuration file that contains JSON errors.\n     */\n    ConfigurationEditingErrorCode[ConfigurationEditingErrorCode[\"ERROR_INVALID_CONFIGURATION\"] = 8] = \"ERROR_INVALID_CONFIGURATION\";\n})(ConfigurationEditingErrorCode = exports.ConfigurationEditingErrorCode || (exports.ConfigurationEditingErrorCode = {}));\nvar ConfigurationEditingError = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigurationEditingError, _super);\n    function ConfigurationEditingError(message, code) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        return _this;\n    }\n    return ConfigurationEditingError;\n}(Error));\nexports.ConfigurationEditingError = ConfigurationEditingError;\nvar ConfigurationEditingService = /** @class */ (function () {\n    function ConfigurationEditingService(configurationService, contextService, environmentService, fileService, textModelResolverService, textFileService, notificationService, preferencesService, editorService, remoteAgentService) {\n        var _this = this;\n        this.configurationService = configurationService;\n        this.contextService = contextService;\n        this.environmentService = environmentService;\n        this.fileService = fileService;\n        this.textModelResolverService = textModelResolverService;\n        this.textFileService = textFileService;\n        this.notificationService = notificationService;\n        this.preferencesService = preferencesService;\n        this.editorService = editorService;\n        this.queue = new async_1.Queue();\n        remoteAgentService.getEnvironment().then(function (environment) {\n            if (environment) {\n                _this.remoteSettingsResource = environment.appSettingsPath;\n            }\n        });\n    }\n    ConfigurationEditingService.prototype.writeConfiguration = function (target, value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var operation = this.getConfigurationEditOperation(target, value, options.scopes || {});\n        return Promise.resolve(this.queue.queue(function () { return _this.doWriteConfiguration(operation, options) // queue up writes to prevent race conditions\n            .then(function () { return null; }, function (error) {\n            if (!options.donotNotifyError) {\n                _this.onError(error, operation, options.scopes);\n            }\n            return Promise.reject(error);\n        }); }));\n    };\n    ConfigurationEditingService.prototype.doWriteConfiguration = function (operation, options) {\n        var _this = this;\n        var checkDirtyConfiguration = !(options.force || options.donotSave);\n        var saveConfiguration = options.force || !options.donotSave;\n        return this.resolveAndValidate(operation.target, operation, checkDirtyConfiguration, options.scopes || {})\n            .then(function (reference) { return _this.writeToBuffer(reference.object.textEditorModel, operation, saveConfiguration)\n            .then(function () { return reference.dispose(); }); });\n    };\n    ConfigurationEditingService.prototype.writeToBuffer = function (model, operation, save) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var edit;\n            return tslib_1.__generator(this, function (_a) {\n                edit = this.getEdits(model, operation)[0];\n                if (edit && this.applyEditsToBuffer(edit, model) && save) {\n                    return [2 /*return*/, this.textFileService.save(operation.resource, { skipSaveParticipants: true /* programmatic change */ })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    ConfigurationEditingService.prototype.applyEditsToBuffer = function (edit, model) {\n        var startPosition = model.getPositionAt(edit.offset);\n        var endPosition = model.getPositionAt(edit.offset + edit.length);\n        var range = new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n        var currentText = model.getValueInRange(range);\n        if (edit.content !== currentText) {\n            var editOperation = currentText ? editOperation_1.EditOperation.replace(range, edit.content) : editOperation_1.EditOperation.insert(startPosition, edit.content);\n            model.pushEditOperations([new selection_1.Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], function () { return []; });\n            return true;\n        }\n        return false;\n    };\n    ConfigurationEditingService.prototype.onError = function (error, operation, scopes) {\n        switch (error.code) {\n            case ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION:\n                this.onInvalidConfigurationError(error, operation);\n                break;\n            case ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY:\n                this.onConfigurationFileDirtyError(error, operation, scopes);\n                break;\n            default:\n                this.notificationService.error(error.message);\n        }\n    };\n    ConfigurationEditingService.prototype.onInvalidConfigurationError = function (error, operation) {\n        var _this = this;\n        var openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === configuration_2.TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n            : operation.workspaceStandAloneConfigurationKey === configuration_2.LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(notification_1.Severity.Error, error.message, [{\n                    label: openStandAloneConfigurationActionLabel,\n                    run: function () { return _this.openFile(operation.resource); }\n                }]);\n        }\n        else {\n            this.notificationService.prompt(notification_1.Severity.Error, error.message, [{\n                    label: nls.localize('open', \"Open Settings\"),\n                    run: function () { return _this.openSettings(operation); }\n                }]);\n        }\n    };\n    ConfigurationEditingService.prototype.onConfigurationFileDirtyError = function (error, operation, scopes) {\n        var _this = this;\n        var openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === configuration_2.TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n            : operation.workspaceStandAloneConfigurationKey === configuration_2.LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n                : null;\n        if (openStandAloneConfigurationActionLabel) {\n            this.notificationService.prompt(notification_1.Severity.Error, error.message, [{\n                    label: nls.localize('saveAndRetry', \"Save and Retry\"),\n                    run: function () {\n                        var key = operation.key ? operation.workspaceStandAloneConfigurationKey + \".\" + operation.key : operation.workspaceStandAloneConfigurationKey;\n                        _this.writeConfiguration(operation.target, { key: key, value: operation.value }, { force: true, scopes: scopes });\n                    }\n                },\n                {\n                    label: openStandAloneConfigurationActionLabel,\n                    run: function () { return _this.openFile(operation.resource); }\n                }]);\n        }\n        else {\n            this.notificationService.prompt(notification_1.Severity.Error, error.message, [{\n                    label: nls.localize('saveAndRetry', \"Save and Retry\"),\n                    run: function () { return _this.writeConfiguration(operation.target, { key: operation.key, value: operation.value }, { force: true, scopes: scopes }); }\n                },\n                {\n                    label: nls.localize('open', \"Open Settings\"),\n                    run: function () { return _this.openSettings(operation); }\n                }]);\n        }\n    };\n    ConfigurationEditingService.prototype.openSettings = function (operation) {\n        switch (operation.target) {\n            case configuration_1.ConfigurationTarget.USER:\n                this.preferencesService.openGlobalSettings(true);\n                break;\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                this.preferencesService.openWorkspaceSettings(true);\n                break;\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                if (operation.resource) {\n                    var workspaceFolder = this.contextService.getWorkspaceFolder(operation.resource);\n                    if (workspaceFolder) {\n                        this.preferencesService.openFolderSettings(workspaceFolder.uri, true);\n                    }\n                }\n                break;\n        }\n    };\n    ConfigurationEditingService.prototype.openFile = function (resource) {\n        this.editorService.openEditor({ resource: resource });\n    };\n    ConfigurationEditingService.prototype.reject = function (code, target, operation) {\n        var message = this.toErrorMessage(code, target, operation);\n        return Promise.reject(new ConfigurationEditingError(message, code));\n    };\n    ConfigurationEditingService.prototype.toErrorMessage = function (error, target, operation) {\n        switch (error) {\n            // API constraints\n            case ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY: return nls.localize('errorUnknownKey', \"Unable to write to {0} because {1} is not a registered configuration.\", this.stringifyTarget(target), operation.key);\n            case ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION: return nls.localize('errorInvalidWorkspaceConfigurationApplication', \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\", operation.key);\n            case ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION: return nls.localize('errorInvalidFolderConfiguration', \"Unable to write to Folder Settings because {0} does not support the folder resource scope.\", operation.key);\n            case ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET: return nls.localize('errorInvalidUserTarget', \"Unable to write to User Settings because {0} does not support for global scope.\", operation.key);\n            case ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET: return nls.localize('errorInvalidWorkspaceTarget', \"Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.\", operation.key);\n            case ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET: return nls.localize('errorInvalidFolderTarget', \"Unable to write to Folder Settings because no resource is provided.\");\n            case ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED: return nls.localize('errorNoWorkspaceOpened', \"Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.\", this.stringifyTarget(target));\n            // User issues\n            case ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION: {\n                if (operation.workspaceStandAloneConfigurationKey === configuration_2.TASKS_CONFIGURATION_KEY) {\n                    return nls.localize('errorInvalidTaskConfiguration', \"Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.\");\n                }\n                if (operation.workspaceStandAloneConfigurationKey === configuration_2.LAUNCH_CONFIGURATION_KEY) {\n                    return nls.localize('errorInvalidLaunchConfiguration', \"Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.\");\n                }\n                switch (target) {\n                    case configuration_1.ConfigurationTarget.USER:\n                        return nls.localize('errorInvalidConfiguration', \"Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.\");\n                    case configuration_1.ConfigurationTarget.WORKSPACE:\n                        return nls.localize('errorInvalidConfigurationWorkspace', \"Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.\");\n                    case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                        var workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            var folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return nls.localize('errorInvalidConfigurationFolder', \"Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.\", workspaceFolderName);\n                }\n                return '';\n            }\n            case ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY: {\n                if (operation.workspaceStandAloneConfigurationKey === configuration_2.TASKS_CONFIGURATION_KEY) {\n                    return nls.localize('errorTasksConfigurationFileDirty', \"Unable to write into tasks configuration file because the file is dirty. Please save it first and then try again.\");\n                }\n                if (operation.workspaceStandAloneConfigurationKey === configuration_2.LAUNCH_CONFIGURATION_KEY) {\n                    return nls.localize('errorLaunchConfigurationFileDirty', \"Unable to write into launch configuration file because the file is dirty. Please save it first and then try again.\");\n                }\n                switch (target) {\n                    case configuration_1.ConfigurationTarget.USER:\n                        return nls.localize('errorConfigurationFileDirty', \"Unable to write into user settings because the file is dirty. Please save the user settings file first and then try again.\");\n                    case configuration_1.ConfigurationTarget.WORKSPACE:\n                        return nls.localize('errorConfigurationFileDirtyWorkspace', \"Unable to write into workspace settings because the file is dirty. Please save the workspace settings file first and then try again.\");\n                    case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                        var workspaceFolderName = '<<unknown>>';\n                        if (operation.resource) {\n                            var folder = this.contextService.getWorkspaceFolder(operation.resource);\n                            if (folder) {\n                                workspaceFolderName = folder.name;\n                            }\n                        }\n                        return nls.localize('errorConfigurationFileDirtyFolder', \"Unable to write into folder settings because the file is dirty. Please save the '{0}' folder settings file first and then try again.\", workspaceFolderName);\n                }\n                return '';\n            }\n        }\n    };\n    ConfigurationEditingService.prototype.stringifyTarget = function (target) {\n        switch (target) {\n            case configuration_1.ConfigurationTarget.USER:\n                return nls.localize('userTarget', \"User Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                return nls.localize('workspaceTarget', \"Workspace Settings\");\n            case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                return nls.localize('folderTarget', \"Folder Settings\");\n        }\n        return '';\n    };\n    ConfigurationEditingService.prototype.getEdits = function (model, edit) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        var value = edit.value, jsonPath = edit.jsonPath;\n        // Without jsonPath, the entire configuration file is being replaced, so we just use JSON.stringify\n        if (!jsonPath.length) {\n            var content = JSON.stringify(value, null, insertSpaces ? strings.repeat(' ', tabSize) : '\\t');\n            return [{\n                    content: content,\n                    length: model.getValue().length,\n                    offset: 0\n                }];\n        }\n        return jsonEdit_1.setProperty(model.getValue(), jsonPath, value, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol });\n    };\n    ConfigurationEditingService.prototype.resolveModelReference = function (resource) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var exists;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.fileService.existsFile(resource)];\n                    case 1:\n                        exists = _a.sent();\n                        if (!!exists) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.fileService.updateContent(resource, '{}', { encoding: 'utf8' })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, this.textModelResolverService.createModelReference(resource)];\n                }\n            });\n        });\n    };\n    ConfigurationEditingService.prototype.hasParseErrors = function (model, operation) {\n        // If we write to a workspace standalone file and replace the entire contents (no key provided)\n        // we can return here because any parse errors can safely be ignored since all contents are replaced\n        if (operation.workspaceStandAloneConfigurationKey && !operation.key) {\n            return false;\n        }\n        var parseErrors = [];\n        json.parse(model.getValue(), parseErrors);\n        return parseErrors.length > 0;\n    };\n    ConfigurationEditingService.prototype.resolveAndValidate = function (target, operation, checkDirty, overrides) {\n        var _this = this;\n        // Any key must be a known setting from the registry (unless this is a standalone config)\n        if (!operation.workspaceStandAloneConfigurationKey) {\n            var validKeys = this.configurationService.keys().default;\n            if (validKeys.indexOf(operation.key) < 0 && !configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(operation.key)) {\n                return this.reject(ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY, target, operation);\n            }\n        }\n        if (operation.workspaceStandAloneConfigurationKey) {\n            // Global tasks and launches are not supported\n            if (target === configuration_1.ConfigurationTarget.USER) {\n                return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET, target, operation);\n            }\n            // Workspace tasks are not supported\n            if (operation.workspaceStandAloneConfigurationKey === configuration_2.TASKS_CONFIGURATION_KEY && this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE && operation.target === configuration_1.ConfigurationTarget.WORKSPACE) {\n                return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET, target, operation);\n            }\n        }\n        // Target cannot be workspace or folder if no workspace opened\n        if ((target === configuration_1.ConfigurationTarget.WORKSPACE || target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) && this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            return this.reject(ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED, target, operation);\n        }\n        if (target === configuration_1.ConfigurationTarget.WORKSPACE) {\n            if (!operation.workspaceStandAloneConfigurationKey) {\n                var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n                if (configurationProperties[operation.key].scope === configurationRegistry_1.ConfigurationScope.APPLICATION) {\n                    return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION, target, operation);\n                }\n            }\n        }\n        if (target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n            if (!operation.resource) {\n                return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n            }\n            if (!operation.workspaceStandAloneConfigurationKey) {\n                var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n                if (configurationProperties[operation.key].scope !== configurationRegistry_1.ConfigurationScope.RESOURCE) {\n                    return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION, target, operation);\n                }\n            }\n        }\n        if (!operation.resource) {\n            return this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n        }\n        return this.resolveModelReference(operation.resource)\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            if (_this.hasParseErrors(model, operation)) {\n                return _this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION, target, operation);\n            }\n            // Target cannot be dirty if not writing into buffer\n            if (checkDirty && _this.textFileService.isDirty(operation.resource)) {\n                return _this.reject(ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY, target, operation);\n            }\n            return reference;\n        });\n    };\n    ConfigurationEditingService.prototype.getConfigurationEditOperation = function (target, config, overrides) {\n        // Check for standalone workspace configurations\n        if (config.key) {\n            var standaloneConfigurationKeys = Object.keys(configuration_2.WORKSPACE_STANDALONE_CONFIGURATIONS);\n            for (var _i = 0, standaloneConfigurationKeys_1 = standaloneConfigurationKeys; _i < standaloneConfigurationKeys_1.length; _i++) {\n                var key_1 = standaloneConfigurationKeys_1[_i];\n                var resource_1 = this.getConfigurationFileResource(target, config, configuration_2.WORKSPACE_STANDALONE_CONFIGURATIONS[key_1], overrides.resource);\n                // Check for prefix\n                if (config.key === key_1) {\n                    var jsonPath_1 = this.isWorkspaceConfigurationResource(resource_1) ? [key_1] : [];\n                    return { key: jsonPath_1[jsonPath_1.length - 1], jsonPath: jsonPath_1, value: config.value, resource: types_1.withNullAsUndefined(resource_1), workspaceStandAloneConfigurationKey: key_1, target: target };\n                }\n                // Check for prefix.<setting>\n                var keyPrefix = key_1 + \".\";\n                if (config.key.indexOf(keyPrefix) === 0) {\n                    var jsonPath_2 = this.isWorkspaceConfigurationResource(resource_1) ? [key_1, config.key.substr(keyPrefix.length)] : [config.key.substr(keyPrefix.length)];\n                    return { key: jsonPath_2[jsonPath_2.length - 1], jsonPath: jsonPath_2, value: config.value, resource: types_1.withNullAsUndefined(resource_1), workspaceStandAloneConfigurationKey: key_1, target: target };\n                }\n            }\n        }\n        var key = config.key;\n        var jsonPath = overrides.overrideIdentifier ? [configuration_1.keyFromOverrideIdentifier(overrides.overrideIdentifier), key] : [key];\n        if (target === configuration_1.ConfigurationTarget.USER) {\n            return { key: key, jsonPath: jsonPath, value: config.value, resource: types_1.withNullAsUndefined(this.getConfigurationFileResource(target, config, '', null)), target: target };\n        }\n        var resource = this.getConfigurationFileResource(target, config, configuration_2.FOLDER_SETTINGS_PATH, overrides.resource);\n        if (this.isWorkspaceConfigurationResource(resource)) {\n            jsonPath = ['settings'].concat(jsonPath);\n        }\n        return { key: key, jsonPath: jsonPath, value: config.value, resource: types_1.withNullAsUndefined(resource), target: target };\n    };\n    ConfigurationEditingService.prototype.isWorkspaceConfigurationResource = function (resource) {\n        var workspace = this.contextService.getWorkspace();\n        return !!(workspace.configuration && resource && workspace.configuration.fsPath === resource.fsPath);\n    };\n    ConfigurationEditingService.prototype.getConfigurationFileResource = function (target, config, relativePath, resource) {\n        if (target === configuration_1.ConfigurationTarget.USER_LOCAL) {\n            return uri_1.URI.file(this.environmentService.appSettingsPath);\n        }\n        if (target === configuration_1.ConfigurationTarget.USER_REMOTE) {\n            return this.remoteSettingsResource;\n        }\n        if (target === configuration_1.ConfigurationTarget.USER) {\n            if (this.configurationService.inspect(config.key).userRemote !== undefined) {\n                return this.remoteSettingsResource;\n            }\n            return uri_1.URI.file(this.environmentService.appSettingsPath);\n        }\n        var workbenchState = this.contextService.getWorkbenchState();\n        if (workbenchState !== workspace_1.WorkbenchState.EMPTY) {\n            var workspace = this.contextService.getWorkspace();\n            if (target === configuration_1.ConfigurationTarget.WORKSPACE) {\n                if (workbenchState === workspace_1.WorkbenchState.WORKSPACE) {\n                    return types_1.withUndefinedAsNull(workspace.configuration);\n                }\n                if (workbenchState === workspace_1.WorkbenchState.FOLDER) {\n                    return workspace.folders[0].toResource(relativePath);\n                }\n            }\n            if (target === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n                if (resource) {\n                    var folder = this.contextService.getWorkspaceFolder(resource);\n                    if (folder) {\n                        return folder.toResource(relativePath);\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    ConfigurationEditingService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, files_1.IFileService),\n        tslib_1.__param(4, resolverService_1.ITextModelService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, notification_1.INotificationService),\n        tslib_1.__param(7, preferences_1.IPreferencesService),\n        tslib_1.__param(8, editorService_1.IEditorService),\n        tslib_1.__param(9, remoteAgentService_1.IRemoteAgentService)\n    ], ConfigurationEditingService);\n    return ConfigurationEditingService;\n}());\nexports.ConfigurationEditingService = ConfigurationEditingService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationEditingService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/configurationEditingService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as json from 'vs/base/common/json';\nimport * as strings from 'vs/base/common/strings';\nimport { setProperty } from 'vs/base/common/jsonEdit';\nimport { Queue } from 'vs/base/common/async';\nimport { Edit } from 'vs/base/common/jsonFormatter';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IConfigurationService, IConfigurationOverrides, keyFromOverrideIdentifier, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { FOLDER_SETTINGS_PATH, WORKSPACE_STANDALONE_CONFIGURATIONS, TASKS_CONFIGURATION_KEY, LAUNCH_CONFIGURATION_KEY } from 'vs/workbench/services/configuration/common/configuration';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { OVERRIDE_PROPERTY_PATTERN, IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { withUndefinedAsNull, withNullAsUndefined } from 'vs/base/common/types';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport const enum ConfigurationEditingErrorCode {\n\n\t/**\n\t * Error when trying to write a configuration key that is not registered.\n\t */\n\tERROR_UNKNOWN_KEY,\n\n\t/**\n\t * Error when trying to write an application setting into workspace settings.\n\t */\n\tERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION,\n\n\t/**\n\t * Error when trying to write an invalid folder configuration key to folder settings.\n\t */\n\tERROR_INVALID_FOLDER_CONFIGURATION,\n\n\t/**\n\t * Error when trying to write to user target but not supported for provided key.\n\t */\n\tERROR_INVALID_USER_TARGET,\n\n\t/**\n\t * Error when trying to write to user target but not supported for provided key.\n\t */\n\tERROR_INVALID_WORKSPACE_TARGET,\n\n\t/**\n\t * Error when trying to write a configuration key to folder target\n\t */\n\tERROR_INVALID_FOLDER_TARGET,\n\n\t/**\n\t * Error when trying to write to the workspace configuration without having a workspace opened.\n\t */\n\tERROR_NO_WORKSPACE_OPENED,\n\n\t/**\n\t * Error when trying to write and save to the configuration file while it is dirty in the editor.\n\t */\n\tERROR_CONFIGURATION_FILE_DIRTY,\n\n\t/**\n\t * Error when trying to write to a configuration file that contains JSON errors.\n\t */\n\tERROR_INVALID_CONFIGURATION\n}\n\nexport class ConfigurationEditingError extends Error {\n\tconstructor(message: string, public code: ConfigurationEditingErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IConfigurationValue {\n\tkey: string;\n\tvalue: any;\n}\n\nexport interface IConfigurationEditingOptions {\n\t/**\n\t * If `true`, do not saves the configuration. Default is `false`.\n\t */\n\tdonotSave?: boolean;\n\t/**\n\t * If `true`, do not notifies the error to user by showing the message box. Default is `false`.\n\t */\n\tdonotNotifyError?: boolean;\n\t/**\n\t * Scope of configuration to be written into.\n\t */\n\tscopes?: IConfigurationOverrides;\n}\n\ninterface IConfigurationEditOperation extends IConfigurationValue {\n\ttarget: ConfigurationTarget;\n\tjsonPath: json.JSONPath;\n\tresource?: URI;\n\tworkspaceStandAloneConfigurationKey?: string;\n\n}\n\ninterface ConfigurationEditingOptions extends IConfigurationEditingOptions {\n\tforce?: boolean;\n}\n\nexport class ConfigurationEditingService {\n\n\tpublic _serviceBrand: any;\n\n\tprivate queue: Queue<void>;\n\tprivate remoteSettingsResource: URI | null;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t\tremoteAgentService.getEnvironment().then(environment => {\n\t\t\tif (environment) {\n\t\t\t\tthis.remoteSettingsResource = environment.appSettingsPath;\n\t\t\t}\n\t\t});\n\t}\n\n\twriteConfiguration(target: ConfigurationTarget, value: IConfigurationValue, options: IConfigurationEditingOptions = {}): Promise<void> {\n\t\tconst operation = this.getConfigurationEditOperation(target, value, options.scopes || {});\n\t\treturn Promise.resolve(this.queue.queue(() => this.doWriteConfiguration(operation, options) // queue up writes to prevent race conditions\n\t\t\t.then(() => null,\n\t\t\t\terror => {\n\t\t\t\t\tif (!options.donotNotifyError) {\n\t\t\t\t\t\tthis.onError(error, operation, options.scopes);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t})));\n\t}\n\n\tprivate doWriteConfiguration(operation: IConfigurationEditOperation, options: ConfigurationEditingOptions): Promise<void> {\n\t\tconst checkDirtyConfiguration = !(options.force || options.donotSave);\n\t\tconst saveConfiguration = options.force || !options.donotSave;\n\t\treturn this.resolveAndValidate(operation.target, operation, checkDirtyConfiguration, options.scopes || {})\n\t\t\t.then(reference => this.writeToBuffer(reference.object.textEditorModel, operation, saveConfiguration)\n\t\t\t\t.then(() => reference.dispose()));\n\t}\n\n\tprivate async writeToBuffer(model: ITextModel, operation: IConfigurationEditOperation, save: boolean): Promise<any> {\n\t\tconst edit = this.getEdits(model, operation)[0];\n\t\tif (edit && this.applyEditsToBuffer(edit, model) && save) {\n\t\t\treturn this.textFileService.save(operation.resource!, { skipSaveParticipants: true /* programmatic change */ });\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tlet currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate onError(error: ConfigurationEditingError, operation: IConfigurationEditOperation, scopes: IConfigurationOverrides | undefined): void {\n\t\tswitch (error.code) {\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION:\n\t\t\t\tthis.onInvalidConfigurationError(error, operation);\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY:\n\t\t\t\tthis.onConfigurationFileDirtyError(error, operation, scopes);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.notificationService.error(error.message);\n\t\t}\n\t}\n\n\tprivate onInvalidConfigurationError(error: ConfigurationEditingError, operation: IConfigurationEditOperation, ): void {\n\t\tconst openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n\t\t\t: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n\t\t\t\t: null;\n\t\tif (openStandAloneConfigurationActionLabel) {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: openStandAloneConfigurationActionLabel,\n\t\t\t\t\trun: () => this.openFile(operation.resource!)\n\t\t\t\t}]\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('open', \"Open Settings\"),\n\t\t\t\t\trun: () => this.openSettings(operation)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate onConfigurationFileDirtyError(error: ConfigurationEditingError, operation: IConfigurationEditOperation, scopes: IConfigurationOverrides | undefined): void {\n\t\tconst openStandAloneConfigurationActionLabel = operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY ? nls.localize('openTasksConfiguration', \"Open Tasks Configuration\")\n\t\t\t: operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY ? nls.localize('openLaunchConfiguration', \"Open Launch Configuration\")\n\t\t\t\t: null;\n\t\tif (openStandAloneConfigurationActionLabel) {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('saveAndRetry', \"Save and Retry\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tconst key = operation.key ? `${operation.workspaceStandAloneConfigurationKey}.${operation.key}` : operation.workspaceStandAloneConfigurationKey!;\n\t\t\t\t\t\tthis.writeConfiguration(operation.target, { key, value: operation.value }, <ConfigurationEditingOptions>{ force: true, scopes });\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: openStandAloneConfigurationActionLabel,\n\t\t\t\t\trun: () => this.openFile(operation.resource!)\n\t\t\t\t}]\n\t\t\t);\n\t\t} else {\n\t\t\tthis.notificationService.prompt(Severity.Error, error.message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('saveAndRetry', \"Save and Retry\"),\n\t\t\t\t\trun: () => this.writeConfiguration(operation.target, { key: operation.key, value: operation.value }, <ConfigurationEditingOptions>{ force: true, scopes })\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('open', \"Open Settings\"),\n\t\t\t\t\trun: () => this.openSettings(operation)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate openSettings(operation: IConfigurationEditOperation): void {\n\t\tswitch (operation.target) {\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\tthis.preferencesService.openGlobalSettings(true);\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\tthis.preferencesService.openWorkspaceSettings(true);\n\t\t\t\tbreak;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (operation.resource) {\n\t\t\t\t\tconst workspaceFolder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\t\tthis.preferencesService.openFolderSettings(workspaceFolder.uri, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate openFile(resource: URI): void {\n\t\tthis.editorService.openEditor({ resource });\n\t}\n\n\tprivate reject<T = never>(code: ConfigurationEditingErrorCode, target: ConfigurationTarget, operation: IConfigurationEditOperation): Promise<T> {\n\t\tconst message = this.toErrorMessage(code, target, operation);\n\n\t\treturn Promise.reject(new ConfigurationEditingError(message, code));\n\t}\n\n\tprivate toErrorMessage(error: ConfigurationEditingErrorCode, target: ConfigurationTarget, operation: IConfigurationEditOperation): string {\n\t\tswitch (error) {\n\n\t\t\t// API constraints\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY: return nls.localize('errorUnknownKey', \"Unable to write to {0} because {1} is not a registered configuration.\", this.stringifyTarget(target), operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION: return nls.localize('errorInvalidWorkspaceConfigurationApplication', \"Unable to write {0} to Workspace Settings. This setting can be written only into User settings.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION: return nls.localize('errorInvalidFolderConfiguration', \"Unable to write to Folder Settings because {0} does not support the folder resource scope.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET: return nls.localize('errorInvalidUserTarget', \"Unable to write to User Settings because {0} does not support for global scope.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET: return nls.localize('errorInvalidWorkspaceTarget', \"Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.\", operation.key);\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET: return nls.localize('errorInvalidFolderTarget', \"Unable to write to Folder Settings because no resource is provided.\");\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED: return nls.localize('errorNoWorkspaceOpened', \"Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.\", this.stringifyTarget(target));\n\n\t\t\t// User issues\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION: {\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorInvalidTaskConfiguration', \"Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.\");\n\t\t\t\t}\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorInvalidLaunchConfiguration', \"Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.\");\n\t\t\t\t}\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfiguration', \"Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.\");\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfigurationWorkspace', \"Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.\");\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\t\t\tlet workspaceFolderName: string = '<<unknown>>';\n\t\t\t\t\t\tif (operation.resource) {\n\t\t\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\t\t\tif (folder) {\n\t\t\t\t\t\t\t\tworkspaceFolderName = folder.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn nls.localize('errorInvalidConfigurationFolder', \"Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.\", workspaceFolderName);\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tcase ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY: {\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorTasksConfigurationFileDirty', \"Unable to write into tasks configuration file because the file is dirty. Please save it first and then try again.\");\n\t\t\t\t}\n\t\t\t\tif (operation.workspaceStandAloneConfigurationKey === LAUNCH_CONFIGURATION_KEY) {\n\t\t\t\t\treturn nls.localize('errorLaunchConfigurationFileDirty', \"Unable to write into launch configuration file because the file is dirty. Please save it first and then try again.\");\n\t\t\t\t}\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirty', \"Unable to write into user settings because the file is dirty. Please save the user settings file first and then try again.\");\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirtyWorkspace', \"Unable to write into workspace settings because the file is dirty. Please save the workspace settings file first and then try again.\");\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\t\t\tlet workspaceFolderName: string = '<<unknown>>';\n\t\t\t\t\t\tif (operation.resource) {\n\t\t\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(operation.resource);\n\t\t\t\t\t\t\tif (folder) {\n\t\t\t\t\t\t\t\tworkspaceFolderName = folder.name;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn nls.localize('errorConfigurationFileDirtyFolder', \"Unable to write into folder settings because the file is dirty. Please save the '{0}' folder settings file first and then try again.\", workspaceFolderName);\n\t\t\t\t}\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate stringifyTarget(target: ConfigurationTarget): string {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\treturn nls.localize('userTarget', \"User Settings\");\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn nls.localize('workspaceTarget', \"Workspace Settings\");\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn nls.localize('folderTarget', \"Folder Settings\");\n\t\t}\n\t\treturn '';\n\t}\n\n\tprivate getEdits(model: ITextModel, edit: IConfigurationEditOperation): Edit[] {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst { value, jsonPath } = edit;\n\n\t\t// Without jsonPath, the entire configuration file is being replaced, so we just use JSON.stringify\n\t\tif (!jsonPath.length) {\n\t\t\tconst content = JSON.stringify(value, null, insertSpaces ? strings.repeat(' ', tabSize) : '\\t');\n\t\t\treturn [{\n\t\t\t\tcontent,\n\t\t\t\tlength: model.getValue().length,\n\t\t\t\toffset: 0\n\t\t\t}];\n\t\t}\n\n\t\treturn setProperty(model.getValue(), jsonPath, value, { tabSize, insertSpaces, eol });\n\t}\n\n\tprivate async resolveModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.existsFile(resource);\n\t\tif (!exists) {\n\t\t\tawait this.fileService.updateContent(resource, '{}', { encoding: 'utf8' });\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(model: ITextModel, operation: IConfigurationEditOperation): boolean {\n\t\t// If we write to a workspace standalone file and replace the entire contents (no key provided)\n\t\t// we can return here because any parse errors can safely be ignored since all contents are replaced\n\t\tif (operation.workspaceStandAloneConfigurationKey && !operation.key) {\n\t\t\treturn false;\n\t\t}\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(model.getValue(), parseErrors);\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate resolveAndValidate(target: ConfigurationTarget, operation: IConfigurationEditOperation, checkDirty: boolean, overrides: IConfigurationOverrides): Promise<IReference<IResolvedTextEditorModel>> {\n\n\t\t// Any key must be a known setting from the registry (unless this is a standalone config)\n\t\tif (!operation.workspaceStandAloneConfigurationKey) {\n\t\t\tconst validKeys = this.configurationService.keys().default;\n\t\t\tif (validKeys.indexOf(operation.key) < 0 && !OVERRIDE_PROPERTY_PATTERN.test(operation.key)) {\n\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY, target, operation);\n\t\t\t}\n\t\t}\n\n\t\tif (operation.workspaceStandAloneConfigurationKey) {\n\t\t\t// Global tasks and launches are not supported\n\t\t\tif (target === ConfigurationTarget.USER) {\n\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_USER_TARGET, target, operation);\n\t\t\t}\n\n\t\t\t// Workspace tasks are not supported\n\t\t\tif (operation.workspaceStandAloneConfigurationKey === TASKS_CONFIGURATION_KEY && this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE && operation.target === ConfigurationTarget.WORKSPACE) {\n\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_TARGET, target, operation);\n\t\t\t}\n\t\t}\n\n\t\t// Target cannot be workspace or folder if no workspace opened\n\t\tif ((target === ConfigurationTarget.WORKSPACE || target === ConfigurationTarget.WORKSPACE_FOLDER) && this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED, target, operation);\n\t\t}\n\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tif (!operation.workspaceStandAloneConfigurationKey) {\n\t\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\t\t\tif (configurationProperties[operation.key].scope === ConfigurationScope.APPLICATION) {\n\t\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_WORKSPACE_CONFIGURATION_APPLICATION, target, operation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (!operation.resource) {\n\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n\t\t\t}\n\n\t\t\tif (!operation.workspaceStandAloneConfigurationKey) {\n\t\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\t\t\tif (configurationProperties[operation.key].scope !== ConfigurationScope.RESOURCE) {\n\t\t\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_CONFIGURATION, target, operation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!operation.resource) {\n\t\t\treturn this.reject(ConfigurationEditingErrorCode.ERROR_INVALID_FOLDER_TARGET, target, operation);\n\t\t}\n\n\t\treturn this.resolveModelReference(operation.resource)\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\n\t\t\t\tif (this.hasParseErrors(model, operation)) {\n\t\t\t\t\treturn this.reject<typeof reference>(ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION, target, operation);\n\t\t\t\t}\n\n\t\t\t\t// Target cannot be dirty if not writing into buffer\n\t\t\t\tif (checkDirty && this.textFileService.isDirty(operation.resource)) {\n\t\t\t\t\treturn this.reject<typeof reference>(ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY, target, operation);\n\t\t\t\t}\n\t\t\t\treturn reference;\n\t\t\t});\n\t}\n\n\tprivate getConfigurationEditOperation(target: ConfigurationTarget, config: IConfigurationValue, overrides: IConfigurationOverrides): IConfigurationEditOperation {\n\n\t\t// Check for standalone workspace configurations\n\t\tif (config.key) {\n\t\t\tconst standaloneConfigurationKeys = Object.keys(WORKSPACE_STANDALONE_CONFIGURATIONS);\n\t\t\tfor (const key of standaloneConfigurationKeys) {\n\t\t\t\tconst resource = this.getConfigurationFileResource(target, config, WORKSPACE_STANDALONE_CONFIGURATIONS[key], overrides.resource);\n\n\t\t\t\t// Check for prefix\n\t\t\t\tif (config.key === key) {\n\t\t\t\t\tconst jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key] : [];\n\t\t\t\t\treturn { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: withNullAsUndefined(resource), workspaceStandAloneConfigurationKey: key, target };\n\t\t\t\t}\n\n\t\t\t\t// Check for prefix.<setting>\n\t\t\t\tconst keyPrefix = `${key}.`;\n\t\t\t\tif (config.key.indexOf(keyPrefix) === 0) {\n\t\t\t\t\tconst jsonPath = this.isWorkspaceConfigurationResource(resource) ? [key, config.key.substr(keyPrefix.length)] : [config.key.substr(keyPrefix.length)];\n\t\t\t\t\treturn { key: jsonPath[jsonPath.length - 1], jsonPath, value: config.value, resource: withNullAsUndefined(resource), workspaceStandAloneConfigurationKey: key, target };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet key = config.key;\n\t\tlet jsonPath = overrides.overrideIdentifier ? [keyFromOverrideIdentifier(overrides.overrideIdentifier), key] : [key];\n\t\tif (target === ConfigurationTarget.USER) {\n\t\t\treturn { key, jsonPath, value: config.value, resource: withNullAsUndefined(this.getConfigurationFileResource(target, config, '', null)), target };\n\t\t}\n\n\t\tconst resource = this.getConfigurationFileResource(target, config, FOLDER_SETTINGS_PATH, overrides.resource);\n\t\tif (this.isWorkspaceConfigurationResource(resource)) {\n\t\t\tjsonPath = ['settings', ...jsonPath];\n\t\t}\n\t\treturn { key, jsonPath, value: config.value, resource: withNullAsUndefined(resource), target };\n\t}\n\n\tprivate isWorkspaceConfigurationResource(resource: URI | null): boolean {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn !!(workspace.configuration && resource && workspace.configuration.fsPath === resource.fsPath);\n\t}\n\n\tprivate getConfigurationFileResource(target: ConfigurationTarget, config: IConfigurationValue, relativePath: string, resource: URI | null | undefined): URI | null {\n\t\tif (target === ConfigurationTarget.USER_LOCAL) {\n\t\t\treturn URI.file(this.environmentService.appSettingsPath);\n\t\t}\n\t\tif (target === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn this.remoteSettingsResource;\n\t\t}\n\t\tif (target === ConfigurationTarget.USER) {\n\t\t\tif (this.configurationService.inspect(config.key).userRemote !== undefined) {\n\t\t\t\treturn this.remoteSettingsResource;\n\t\t\t}\n\t\t\treturn URI.file(this.environmentService.appSettingsPath);\n\t\t}\n\n\t\tconst workbenchState = this.contextService.getWorkbenchState();\n\t\tif (workbenchState !== WorkbenchState.EMPTY) {\n\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\t\tif (workbenchState === WorkbenchState.WORKSPACE) {\n\t\t\t\t\treturn withUndefinedAsNull(workspace.configuration);\n\t\t\t\t}\n\t\t\t\tif (workbenchState === WorkbenchState.FOLDER) {\n\t\t\t\t\treturn workspace.folders[0].toResource(relativePath);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\t\tif (resource) {\n\t\t\t\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\treturn folder.toResource(relativePath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n"]}]}