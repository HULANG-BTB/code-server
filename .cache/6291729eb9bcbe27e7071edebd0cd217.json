{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/baseDebugView.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/baseDebugView.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom = require(\"vs/base/browser/dom\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar inputBox_1 = require(\"vs/base/browser/ui/inputbox/inputBox\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar highlightedLabel_1 = require(\"vs/base/browser/ui/highlightedlabel/highlightedLabel\");\nvar filters_1 = require(\"vs/base/common/filters\");\nexports.MAX_VALUE_RENDER_LENGTH_IN_VIEWLET = 1024;\nexports.twistiePixels = 20;\nvar booleanRegex = /^true|false$/i;\nvar stringRegex = /^(['\"]).*\\1$/;\nvar $ = dom.$;\nfunction renderViewTree(container) {\n    var treeContainer = document.createElement('div');\n    dom.addClass(treeContainer, 'debug-view-content');\n    container.appendChild(treeContainer);\n    return treeContainer;\n}\nexports.renderViewTree = renderViewTree;\nfunction replaceWhitespace(value) {\n    var map = { '\\n': '\\\\n', '\\r': '\\\\r', '\\t': '\\\\t' };\n    return value.replace(/[\\n\\r\\t]/g, function (char) { return map[char]; });\n}\nexports.replaceWhitespace = replaceWhitespace;\nfunction renderExpressionValue(expressionOrValue, container, options) {\n    var value = typeof expressionOrValue === 'string' ? expressionOrValue : expressionOrValue.value;\n    // remove stale classes\n    container.className = 'value';\n    // when resolving expressions we represent errors from the server as a variable with name === null.\n    if (value === null || ((expressionOrValue instanceof debugModel_1.Expression || expressionOrValue instanceof debugModel_1.Variable) && !expressionOrValue.available)) {\n        dom.addClass(container, 'unavailable');\n        if (value !== debugModel_1.Expression.DEFAULT_VALUE) {\n            dom.addClass(container, 'error');\n        }\n    }\n    else if ((expressionOrValue instanceof debugModel_1.ExpressionContainer) && options.showChanged && expressionOrValue.valueChanged && value !== debugModel_1.Expression.DEFAULT_VALUE) {\n        // value changed color has priority over other colors.\n        container.className = 'value changed';\n        expressionOrValue.valueChanged = false;\n    }\n    if (options.colorize && typeof expressionOrValue !== 'string') {\n        if (expressionOrValue.type === 'number' || expressionOrValue.type === 'boolean' || expressionOrValue.type === 'string') {\n            dom.addClass(container, expressionOrValue.type);\n        }\n        else if (!isNaN(+value)) {\n            dom.addClass(container, 'number');\n        }\n        else if (booleanRegex.test(value)) {\n            dom.addClass(container, 'boolean');\n        }\n        else if (stringRegex.test(value)) {\n            dom.addClass(container, 'string');\n        }\n    }\n    if (options.maxValueLength && value && value.length > options.maxValueLength) {\n        value = value.substr(0, options.maxValueLength) + '...';\n    }\n    if (value && !options.preserveWhitespace) {\n        container.textContent = replaceWhitespace(value);\n    }\n    else {\n        container.textContent = value || '';\n    }\n    if (options.showHover) {\n        container.title = value || '';\n    }\n}\nexports.renderExpressionValue = renderExpressionValue;\nfunction renderVariable(variable, data, showChanged, highlights) {\n    if (variable.available) {\n        var text = replaceWhitespace(variable.name);\n        if (variable.value && typeof variable.name === 'string') {\n            text += ':';\n        }\n        data.label.set(text, highlights, variable.type ? variable.type : variable.name);\n        dom.toggleClass(data.name, 'virtual', !!variable.presentationHint && variable.presentationHint.kind === 'virtual');\n    }\n    else if (variable.value && typeof variable.name === 'string') {\n        data.label.set(':');\n    }\n    renderExpressionValue(variable, data.value, {\n        showChanged: showChanged,\n        maxValueLength: exports.MAX_VALUE_RENDER_LENGTH_IN_VIEWLET,\n        preserveWhitespace: false,\n        showHover: true,\n        colorize: true\n    });\n}\nexports.renderVariable = renderVariable;\nvar AbstractExpressionsRenderer = /** @class */ (function () {\n    function AbstractExpressionsRenderer(debugService, contextViewService, themeService) {\n        this.debugService = debugService;\n        this.contextViewService = contextViewService;\n        this.themeService = themeService;\n    }\n    AbstractExpressionsRenderer.prototype.renderTemplate = function (container) {\n        var _this = this;\n        var expression = dom.append(container, $('.expression'));\n        var name = dom.append(expression, $('span.name'));\n        var value = dom.append(expression, $('span.value'));\n        var label = new highlightedLabel_1.HighlightedLabel(name, false);\n        var inputBoxContainer = dom.append(expression, $('.inputBoxContainer'));\n        var toDispose = [];\n        var enableInputBox = function (expression, options) {\n            name.style.display = 'none';\n            value.style.display = 'none';\n            inputBoxContainer.style.display = 'initial';\n            var inputBox = new inputBox_1.InputBox(inputBoxContainer, _this.contextViewService, {\n                placeholder: options.placeholder,\n                ariaLabel: options.ariaLabel\n            });\n            var styler = styler_1.attachInputBoxStyler(inputBox, _this.themeService);\n            inputBox.value = options.initialValue;\n            inputBox.focus();\n            inputBox.select();\n            var disposed = false;\n            toDispose.push(inputBox);\n            toDispose.push(styler);\n            var wrapUp = function (renamed) {\n                if (!disposed) {\n                    disposed = true;\n                    _this.debugService.getViewModel().setSelectedExpression(undefined);\n                    options.onFinish(inputBox.value, renamed);\n                    // need to remove the input box since this template will be reused.\n                    inputBoxContainer.removeChild(inputBox.element);\n                    name.style.display = 'initial';\n                    value.style.display = 'initial';\n                    inputBoxContainer.style.display = 'none';\n                    lifecycle_1.dispose(toDispose);\n                }\n            };\n            toDispose.push(dom.addStandardDisposableListener(inputBox.inputElement, 'keydown', function (e) {\n                var isEscape = e.equals(keyCodes_1.KeyCode.Escape);\n                var isEnter = e.equals(keyCodes_1.KeyCode.Enter);\n                if (isEscape || isEnter) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    wrapUp(isEnter);\n                }\n            }));\n            toDispose.push(dom.addDisposableListener(inputBox.inputElement, 'blur', function () {\n                wrapUp(true);\n            }));\n            toDispose.push(dom.addDisposableListener(inputBox.inputElement, 'click', function (e) {\n                // Do not expand / collapse selected elements\n                e.preventDefault();\n                e.stopPropagation();\n            }));\n        };\n        return { expression: expression, name: name, value: value, label: label, enableInputBox: enableInputBox, inputBoxContainer: inputBoxContainer, toDispose: toDispose };\n    };\n    AbstractExpressionsRenderer.prototype.renderElement = function (node, index, data) {\n        var element = node.element;\n        if (element === this.debugService.getViewModel().getSelectedExpression()) {\n            data.enableInputBox(element, this.getInputBoxOptions(element));\n        }\n        else {\n            this.renderExpression(element, data, filters_1.createMatches(node.filterData));\n        }\n    };\n    AbstractExpressionsRenderer.prototype.disposeTemplate = function (templateData) {\n        lifecycle_1.dispose(templateData.toDispose);\n    };\n    AbstractExpressionsRenderer = tslib_1.__decorate([\n        tslib_1.__param(0, debug_1.IDebugService),\n        tslib_1.__param(1, contextView_1.IContextViewService),\n        tslib_1.__param(2, themeService_1.IThemeService)\n    ], AbstractExpressionsRenderer);\n    return AbstractExpressionsRenderer;\n}());\nexports.AbstractExpressionsRenderer = AbstractExpressionsRenderer;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/baseDebugView.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/baseDebugView.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { IExpression, IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { Expression, Variable, ExpressionContainer } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IInputValidationOptions, InputBox } from 'vs/base/browser/ui/inputbox/inputBox';\nimport { ITreeRenderer, ITreeNode } from 'vs/base/browser/ui/tree/tree';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { attachInputBoxStyler } from 'vs/platform/theme/common/styler';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { HighlightedLabel, IHighlight } from 'vs/base/browser/ui/highlightedlabel/highlightedLabel';\nimport { FuzzyScore, createMatches } from 'vs/base/common/filters';\n\nexport const MAX_VALUE_RENDER_LENGTH_IN_VIEWLET = 1024;\nexport const twistiePixels = 20;\nconst booleanRegex = /^true|false$/i;\nconst stringRegex = /^(['\"]).*\\1$/;\nconst $ = dom.$;\n\nexport interface IRenderValueOptions {\n\tpreserveWhitespace?: boolean;\n\tshowChanged?: boolean;\n\tmaxValueLength?: number;\n\tshowHover?: boolean;\n\tcolorize?: boolean;\n}\n\nexport interface IVariableTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLElement;\n\tvalue: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\nexport function renderViewTree(container: HTMLElement): HTMLElement {\n\tconst treeContainer = document.createElement('div');\n\tdom.addClass(treeContainer, 'debug-view-content');\n\tcontainer.appendChild(treeContainer);\n\treturn treeContainer;\n}\n\nexport function replaceWhitespace(value: string): string {\n\tconst map: { [x: string]: string } = { '\\n': '\\\\n', '\\r': '\\\\r', '\\t': '\\\\t' };\n\treturn value.replace(/[\\n\\r\\t]/g, char => map[char]);\n}\n\nexport function renderExpressionValue(expressionOrValue: IExpression | string, container: HTMLElement, options: IRenderValueOptions): void {\n\tlet value = typeof expressionOrValue === 'string' ? expressionOrValue : expressionOrValue.value;\n\n\t// remove stale classes\n\tcontainer.className = 'value';\n\t// when resolving expressions we represent errors from the server as a variable with name === null.\n\tif (value === null || ((expressionOrValue instanceof Expression || expressionOrValue instanceof Variable) && !expressionOrValue.available)) {\n\t\tdom.addClass(container, 'unavailable');\n\t\tif (value !== Expression.DEFAULT_VALUE) {\n\t\t\tdom.addClass(container, 'error');\n\t\t}\n\t} else if ((expressionOrValue instanceof ExpressionContainer) && options.showChanged && expressionOrValue.valueChanged && value !== Expression.DEFAULT_VALUE) {\n\t\t// value changed color has priority over other colors.\n\t\tcontainer.className = 'value changed';\n\t\texpressionOrValue.valueChanged = false;\n\t}\n\n\tif (options.colorize && typeof expressionOrValue !== 'string') {\n\t\tif (expressionOrValue.type === 'number' || expressionOrValue.type === 'boolean' || expressionOrValue.type === 'string') {\n\t\t\tdom.addClass(container, expressionOrValue.type);\n\t\t} else if (!isNaN(+value)) {\n\t\t\tdom.addClass(container, 'number');\n\t\t} else if (booleanRegex.test(value)) {\n\t\t\tdom.addClass(container, 'boolean');\n\t\t} else if (stringRegex.test(value)) {\n\t\t\tdom.addClass(container, 'string');\n\t\t}\n\t}\n\n\tif (options.maxValueLength && value && value.length > options.maxValueLength) {\n\t\tvalue = value.substr(0, options.maxValueLength) + '...';\n\t}\n\tif (value && !options.preserveWhitespace) {\n\t\tcontainer.textContent = replaceWhitespace(value);\n\t} else {\n\t\tcontainer.textContent = value || '';\n\t}\n\tif (options.showHover) {\n\t\tcontainer.title = value || '';\n\t}\n}\n\nexport function renderVariable(variable: Variable, data: IVariableTemplateData, showChanged: boolean, highlights: IHighlight[]): void {\n\tif (variable.available) {\n\t\tlet text = replaceWhitespace(variable.name);\n\t\tif (variable.value && typeof variable.name === 'string') {\n\t\t\ttext += ':';\n\t\t}\n\t\tdata.label.set(text, highlights, variable.type ? variable.type : variable.name);\n\t\tdom.toggleClass(data.name, 'virtual', !!variable.presentationHint && variable.presentationHint.kind === 'virtual');\n\t} else if (variable.value && typeof variable.name === 'string') {\n\t\tdata.label.set(':');\n\t}\n\n\trenderExpressionValue(variable, data.value, {\n\t\tshowChanged,\n\t\tmaxValueLength: MAX_VALUE_RENDER_LENGTH_IN_VIEWLET,\n\t\tpreserveWhitespace: false,\n\t\tshowHover: true,\n\t\tcolorize: true\n\t});\n}\n\nexport interface IInputBoxOptions {\n\tinitialValue: string;\n\tariaLabel: string;\n\tplaceholder?: string;\n\tvalidationOptions?: IInputValidationOptions;\n\tonFinish: (value: string, success: boolean) => void;\n}\n\nexport interface IExpressionTemplateData {\n\texpression: HTMLElement;\n\tname: HTMLSpanElement;\n\tvalue: HTMLSpanElement;\n\tinputBoxContainer: HTMLElement;\n\tenableInputBox(expression: IExpression, options: IInputBoxOptions): void;\n\ttoDispose: IDisposable[];\n\tlabel: HighlightedLabel;\n}\n\nexport abstract class AbstractExpressionsRenderer implements ITreeRenderer<IExpression, FuzzyScore, IExpressionTemplateData> {\n\n\tconstructor(\n\t\t@IDebugService protected debugService: IDebugService,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IThemeService private readonly themeService: IThemeService\n\t) { }\n\n\tabstract get templateId(): string;\n\n\trenderTemplate(container: HTMLElement): IExpressionTemplateData {\n\t\tconst expression = dom.append(container, $('.expression'));\n\t\tconst name = dom.append(expression, $('span.name'));\n\t\tconst value = dom.append(expression, $('span.value'));\n\t\tconst label = new HighlightedLabel(name, false);\n\n\t\tconst inputBoxContainer = dom.append(expression, $('.inputBoxContainer'));\n\t\tconst toDispose: IDisposable[] = [];\n\n\t\tconst enableInputBox = (expression: IExpression, options: IInputBoxOptions) => {\n\t\t\tname.style.display = 'none';\n\t\t\tvalue.style.display = 'none';\n\t\t\tinputBoxContainer.style.display = 'initial';\n\n\t\t\tconst inputBox = new InputBox(inputBoxContainer, this.contextViewService, {\n\t\t\t\tplaceholder: options.placeholder,\n\t\t\t\tariaLabel: options.ariaLabel\n\t\t\t});\n\t\t\tconst styler = attachInputBoxStyler(inputBox, this.themeService);\n\n\t\t\tinputBox.value = options.initialValue;\n\t\t\tinputBox.focus();\n\t\t\tinputBox.select();\n\n\t\t\tlet disposed = false;\n\t\t\ttoDispose.push(inputBox);\n\t\t\ttoDispose.push(styler);\n\n\t\t\tconst wrapUp = (renamed: boolean) => {\n\t\t\t\tif (!disposed) {\n\t\t\t\t\tdisposed = true;\n\t\t\t\t\tthis.debugService.getViewModel().setSelectedExpression(undefined);\n\t\t\t\t\toptions.onFinish(inputBox.value, renamed);\n\n\t\t\t\t\t// need to remove the input box since this template will be reused.\n\t\t\t\t\tinputBoxContainer.removeChild(inputBox.element);\n\t\t\t\t\tname.style.display = 'initial';\n\t\t\t\t\tvalue.style.display = 'initial';\n\t\t\t\t\tinputBoxContainer.style.display = 'none';\n\t\t\t\t\tdispose(toDispose);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttoDispose.push(dom.addStandardDisposableListener(inputBox.inputElement, 'keydown', (e: IKeyboardEvent) => {\n\t\t\t\tconst isEscape = e.equals(KeyCode.Escape);\n\t\t\t\tconst isEnter = e.equals(KeyCode.Enter);\n\t\t\t\tif (isEscape || isEnter) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t\twrapUp(isEnter);\n\t\t\t\t}\n\t\t\t}));\n\t\t\ttoDispose.push(dom.addDisposableListener(inputBox.inputElement, 'blur', () => {\n\t\t\t\twrapUp(true);\n\t\t\t}));\n\t\t\ttoDispose.push(dom.addDisposableListener(inputBox.inputElement, 'click', e => {\n\t\t\t\t// Do not expand / collapse selected elements\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}));\n\t\t};\n\n\t\treturn { expression, name, value, label, enableInputBox, inputBoxContainer, toDispose };\n\t}\n\n\trenderElement(node: ITreeNode<IExpression, FuzzyScore>, index: number, data: IExpressionTemplateData): void {\n\t\tconst { element } = node;\n\t\tif (element === this.debugService.getViewModel().getSelectedExpression()) {\n\t\t\tdata.enableInputBox(element, this.getInputBoxOptions(element));\n\t\t} else {\n\t\t\tthis.renderExpression(element, data, createMatches(node.filterData));\n\t\t}\n\t}\n\n\tprotected abstract renderExpression(expression: IExpression, data: IExpressionTemplateData, highlights: IHighlight[]): void;\n\tprotected abstract getInputBoxOptions(expression: IExpression): IInputBoxOptions;\n\n\tdisposeTemplate(templateData: IExpressionTemplateData): void {\n\t\tdispose(templateData.toDispose);\n\t}\n}\n"]}]}