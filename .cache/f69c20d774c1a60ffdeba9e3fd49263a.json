{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/driver/electron-main/driver.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/driver/electron-main/driver.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/platform/driver/node/driver\", \"vs/platform/windows/electron-main/windows\", \"vs/base/parts/ipc/node/ipc.net\", \"vs/base/common/lifecycle\", \"vs/base/parts/ipc/common/ipc\", \"vs/base/common/keyCodes\", \"vs/platform/keybinding/common/usLayoutResolvedKeybinding\", \"vs/base/common/platform\", \"vs/base/common/event\", \"vs/base/common/scanCode\", \"vs/base/common/keybindingParser\", \"vs/base/common/async\"], function (require, exports, driver_1, windows_1, ipc_net_1, lifecycle_1, ipc_1, keyCodes_1, usLayoutResolvedKeybinding_1, platform_1, event_1, scanCode_1, keybindingParser_1, async_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function isSilentKeyCode(keyCode) {\n        return keyCode < keyCodes_1.KeyCode.KEY_0;\n    }\n    let Driver = class Driver {\n        constructor(windowServer, options, windowsService) {\n            this.windowServer = windowServer;\n            this.options = options;\n            this.windowsService = windowsService;\n            this.registeredWindowIds = new Set();\n            this.reloadingWindowIds = new Set();\n            this.onDidReloadingChange = new event_1.Emitter();\n        }\n        registerWindowDriver(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.registeredWindowIds.add(windowId);\n                this.reloadingWindowIds.delete(windowId);\n                this.onDidReloadingChange.fire();\n                return this.options;\n            });\n        }\n        reloadWindowDriver(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.reloadingWindowIds.add(windowId);\n            });\n        }\n        getWindowIds() {\n            return __awaiter(this, void 0, void 0, function* () {\n                return this.windowsService.getWindows()\n                    .map(w => w.id)\n                    .filter(id => this.registeredWindowIds.has(id) && !this.reloadingWindowIds.has(id));\n            });\n        }\n        capturePage(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this.whenUnfrozen(windowId);\n                const window = this.windowsService.getWindowById(windowId);\n                if (!window) {\n                    throw new Error('Invalid window');\n                }\n                const webContents = window.win.webContents;\n                const image = yield new Promise(c => webContents.capturePage(c));\n                return image.toPNG().toString('base64');\n            });\n        }\n        reloadWindow(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this.whenUnfrozen(windowId);\n                const window = this.windowsService.getWindowById(windowId);\n                if (!window) {\n                    throw new Error('Invalid window');\n                }\n                this.reloadingWindowIds.add(windowId);\n                this.windowsService.reload(window);\n            });\n        }\n        exitApplication() {\n            return __awaiter(this, void 0, void 0, function* () {\n                return this.windowsService.quit();\n            });\n        }\n        dispatchKeybinding(windowId, keybinding) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this.whenUnfrozen(windowId);\n                const parts = keybindingParser_1.KeybindingParser.parseUserBinding(keybinding);\n                for (let part of parts) {\n                    yield this._dispatchKeybinding(windowId, part);\n                }\n            });\n        }\n        _dispatchKeybinding(windowId, keybinding) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (keybinding instanceof scanCode_1.ScanCodeBinding) {\n                    throw new Error('ScanCodeBindings not supported');\n                }\n                const window = this.windowsService.getWindowById(windowId);\n                if (!window) {\n                    throw new Error('Invalid window');\n                }\n                const webContents = window.win.webContents;\n                const noModifiedKeybinding = new keyCodes_1.SimpleKeybinding(false, false, false, false, keybinding.keyCode);\n                const resolvedKeybinding = new usLayoutResolvedKeybinding_1.USLayoutResolvedKeybinding(noModifiedKeybinding.toChord(), platform_1.OS);\n                const keyCode = resolvedKeybinding.getElectronAccelerator();\n                const modifiers = [];\n                if (keybinding.ctrlKey) {\n                    modifiers.push('ctrl');\n                }\n                if (keybinding.metaKey) {\n                    modifiers.push('meta');\n                }\n                if (keybinding.shiftKey) {\n                    modifiers.push('shift');\n                }\n                if (keybinding.altKey) {\n                    modifiers.push('alt');\n                }\n                webContents.sendInputEvent({ type: 'keyDown', keyCode, modifiers });\n                if (!isSilentKeyCode(keybinding.keyCode)) {\n                    webContents.sendInputEvent({ type: 'char', keyCode, modifiers });\n                }\n                webContents.sendInputEvent({ type: 'keyUp', keyCode, modifiers });\n                yield async_1.timeout(100);\n            });\n        }\n        click(windowId, selector, xoffset, yoffset) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                yield windowDriver.click(selector, xoffset, yoffset);\n            });\n        }\n        doubleClick(windowId, selector) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                yield windowDriver.doubleClick(selector);\n            });\n        }\n        setValue(windowId, selector, text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                yield windowDriver.setValue(selector, text);\n            });\n        }\n        getTitle(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                return yield windowDriver.getTitle();\n            });\n        }\n        isActiveElement(windowId, selector) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                return yield windowDriver.isActiveElement(selector);\n            });\n        }\n        getElements(windowId, selector, recursive) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                return yield windowDriver.getElements(selector, recursive);\n            });\n        }\n        typeInEditor(windowId, selector, text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                yield windowDriver.typeInEditor(selector, text);\n            });\n        }\n        getTerminalBuffer(windowId, selector) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                return yield windowDriver.getTerminalBuffer(selector);\n            });\n        }\n        writeInTerminal(windowId, selector, text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windowDriver = yield this.getWindowDriver(windowId);\n                yield windowDriver.writeInTerminal(selector, text);\n            });\n        }\n        getWindowDriver(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this.whenUnfrozen(windowId);\n                const id = `window:${windowId}`;\n                const router = new ipc_1.StaticRouter(ctx => ctx === id);\n                const windowDriverChannel = this.windowServer.getChannel('windowDriver', router);\n                return new driver_1.WindowDriverChannelClient(windowDriverChannel);\n            });\n        }\n        whenUnfrozen(windowId) {\n            return __awaiter(this, void 0, void 0, function* () {\n                while (this.reloadingWindowIds.has(windowId)) {\n                    yield event_1.Event.toPromise(this.onDidReloadingChange.event);\n                }\n            });\n        }\n    };\n    Driver = __decorate([\n        __param(2, windows_1.IWindowsMainService)\n    ], Driver);\n    exports.Driver = Driver;\n    function serve(windowServer, handle, environmentService, instantiationService) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const verbose = environmentService.driverVerbose;\n            const driver = instantiationService.createInstance(Driver, windowServer, { verbose });\n            const windowDriverRegistryChannel = new driver_1.WindowDriverRegistryChannel(driver);\n            windowServer.registerChannel('windowDriverRegistry', windowDriverRegistryChannel);\n            const server = yield ipc_net_1.serve(handle);\n            const channel = new driver_1.DriverChannel(driver);\n            server.registerChannel('driver', channel);\n            return lifecycle_1.combinedDisposable([server, windowServer]);\n        });\n    }\n    exports.serve = serve;\n});\n",null]}