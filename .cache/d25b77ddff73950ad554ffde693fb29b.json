{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TaskErrors;\n(function (TaskErrors) {\n    TaskErrors[TaskErrors[\"NotConfigured\"] = 0] = \"NotConfigured\";\n    TaskErrors[TaskErrors[\"RunningTask\"] = 1] = \"RunningTask\";\n    TaskErrors[TaskErrors[\"NoBuildTask\"] = 2] = \"NoBuildTask\";\n    TaskErrors[TaskErrors[\"NoTestTask\"] = 3] = \"NoTestTask\";\n    TaskErrors[TaskErrors[\"ConfigValidationError\"] = 4] = \"ConfigValidationError\";\n    TaskErrors[TaskErrors[\"TaskNotFound\"] = 5] = \"TaskNotFound\";\n    TaskErrors[TaskErrors[\"NoValidTaskRunner\"] = 6] = \"NoValidTaskRunner\";\n    TaskErrors[TaskErrors[\"UnknownError\"] = 7] = \"UnknownError\";\n})(TaskErrors = exports.TaskErrors || (exports.TaskErrors = {}));\nvar TaskError = /** @class */ (function () {\n    function TaskError(severity, message, code) {\n        this.severity = severity;\n        this.message = message;\n        this.code = code;\n    }\n    return TaskError;\n}());\nexports.TaskError = TaskError;\nvar Triggers;\n(function (Triggers) {\n    Triggers.shortcut = 'shortcut';\n    Triggers.command = 'command';\n})(Triggers = exports.Triggers || (exports.Triggers = {}));\nvar TaskExecuteKind;\n(function (TaskExecuteKind) {\n    TaskExecuteKind[TaskExecuteKind[\"Started\"] = 1] = \"Started\";\n    TaskExecuteKind[TaskExecuteKind[\"Active\"] = 2] = \"Active\";\n})(TaskExecuteKind = exports.TaskExecuteKind || (exports.TaskExecuteKind = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAUhG,IAAkB,UASjB;AATD,WAAkB,UAAU;IAC3B,6DAAa,CAAA;IACb,yDAAW,CAAA;IACX,yDAAW,CAAA;IACX,uDAAU,CAAA;IACV,6EAAqB,CAAA;IACrB,2DAAY,CAAA;IACZ,qEAAiB,CAAA;IACjB,2DAAY,CAAA;AACb,CAAC,EATiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAS3B;AAED;IAKC,mBAAY,QAAkB,EAAE,OAAe,EAAE,IAAgB;QAChE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IACF,gBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,8BAAS;AAwCtB,IAAiB,QAAQ,CAGxB;AAHD,WAAiB,QAAQ;IACb,iBAAQ,GAAW,UAAU,CAAC;IAC9B,gBAAO,GAAW,SAAS,CAAC;AACxC,CAAC,EAHgB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAGxB;AASD,IAAkB,eAGjB;AAHD,WAAkB,eAAe;IAChC,2DAAW,CAAA;IACX,yDAAU,CAAA;AACX,CAAC,EAHiB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAGhC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport Severity from 'vs/base/common/severity';\nimport { TerminateResponse } from 'vs/base/common/processes';\nimport { Event } from 'vs/base/common/event';\nimport { Platform } from 'vs/base/common/platform';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Task, TaskEvent, KeyedTaskIdentifier } from './tasks';\n\nexport const enum TaskErrors {\n\tNotConfigured,\n\tRunningTask,\n\tNoBuildTask,\n\tNoTestTask,\n\tConfigValidationError,\n\tTaskNotFound,\n\tNoValidTaskRunner,\n\tUnknownError\n}\n\nexport class TaskError {\n\tpublic severity: Severity;\n\tpublic message: string;\n\tpublic code: TaskErrors;\n\n\tconstructor(severity: Severity, message: string, code: TaskErrors) {\n\t\tthis.severity = severity;\n\t\tthis.message = message;\n\t\tthis.code = code;\n\t}\n}\n\n/* __GDPR__FRAGMENT__\n\t\"TelemetryEvent\" : {\n\t\t\"trigger\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"runner\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"taskKind\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"command\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\"exitCode\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t}\n*/\nexport interface TelemetryEvent {\n\t// How the task got trigger. Is either shortcut or command\n\ttrigger: string;\n\n\trunner: 'terminal' | 'output';\n\n\ttaskKind: string;\n\n\t// The command triggered\n\tcommand: string;\n\n\t// Whether the task ran successful\n\tsuccess: boolean;\n\n\t// The exit code\n\texitCode?: number;\n}\n\nexport namespace Triggers {\n\texport let shortcut: string = 'shortcut';\n\texport let command: string = 'command';\n}\n\nexport interface ITaskSummary {\n\t/**\n\t * Exit code of the process.\n\t */\n\texitCode?: number;\n}\n\nexport const enum TaskExecuteKind {\n\tStarted = 1,\n\tActive = 2\n}\n\nexport interface ITaskExecuteResult {\n\tkind: TaskExecuteKind;\n\tpromise: Promise<ITaskSummary>;\n\ttask: Task;\n\tstarted?: {\n\t\trestartOnFileChanges?: string;\n\t};\n\tactive?: {\n\t\tsame: boolean;\n\t\tbackground: boolean;\n\t};\n}\n\nexport interface ITaskResolver {\n\tresolve(workspaceFolder: IWorkspaceFolder, identifier: string | KeyedTaskIdentifier | undefined): Task | undefined;\n}\n\nexport interface TaskTerminateResponse extends TerminateResponse {\n\ttask: Task | undefined;\n}\n\nexport interface ResolveSet {\n\tprocess?: {\n\t\tname: string;\n\t\tcwd?: string;\n\t\tpath?: string;\n\t};\n\tvariables: Set<string>;\n}\n\nexport interface ResolvedVariables {\n\tprocess?: string;\n\tvariables: Map<string, string>;\n}\n\nexport interface TaskSystemInfo {\n\tplatform: Platform;\n\tcontext: any;\n\turiProvider: (this: void, path: string) => URI;\n\tresolveVariables(workspaceFolder: IWorkspaceFolder, toResolve: ResolveSet): Promise<ResolvedVariables>;\n}\n\nexport interface TaskSystemInfoResovler {\n\t(workspaceFolder: IWorkspaceFolder): TaskSystemInfo | undefined;\n}\n\nexport interface ITaskSystem {\n\tonDidStateChange: Event<TaskEvent>;\n\trun(task: Task, resolver: ITaskResolver): ITaskExecuteResult;\n\trerun(): ITaskExecuteResult | undefined;\n\tisActive(): Promise<boolean>;\n\tisActiveSync(): boolean;\n\tgetActiveTasks(): Task[];\n\tcanAutoTerminate(): boolean;\n\tterminate(task: Task): Promise<TaskTerminateResponse>;\n\tterminateAll(): Promise<TaskTerminateResponse[]>;\n\trevealTask(task: Task): boolean;\n\tcustomExecutionComplete(task: Task, result: number): Promise<void>;\n}"]}]}