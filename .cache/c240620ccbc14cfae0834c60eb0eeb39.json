{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/diff/diffComputer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/diff/diffComputer.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/diff/diff\", \"vs/base/common/strings\"], function (require, exports, diff_1, strings) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const MAXIMUM_RUN_TIME = 5000; // 5 seconds\n    const MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\n    function computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\n        const diffAlgo = new diff_1.LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\n        return diffAlgo.ComputeDiff(pretty);\n    }\n    class LineMarkerSequence {\n        constructor(lines) {\n            let startColumns = [];\n            let endColumns = [];\n            for (let i = 0, length = lines.length; i < length; i++) {\n                startColumns[i] = LineMarkerSequence._getFirstNonBlankColumn(lines[i], 1);\n                endColumns[i] = LineMarkerSequence._getLastNonBlankColumn(lines[i], 1);\n            }\n            this._lines = lines;\n            this._startColumns = startColumns;\n            this._endColumns = endColumns;\n        }\n        getLength() {\n            return this._lines.length;\n        }\n        getElementAtIndex(i) {\n            return this._lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\n        }\n        getStartLineNumber(i) {\n            return i + 1;\n        }\n        getStartColumn(i) {\n            return this._startColumns[i];\n        }\n        getEndLineNumber(i) {\n            return i + 1;\n        }\n        getEndColumn(i) {\n            return this._endColumns[i];\n        }\n        static _getFirstNonBlankColumn(txt, defaultValue) {\n            const r = strings.firstNonWhitespaceIndex(txt);\n            if (r === -1) {\n                return defaultValue;\n            }\n            return r + 1;\n        }\n        static _getLastNonBlankColumn(txt, defaultValue) {\n            const r = strings.lastNonWhitespaceIndex(txt);\n            if (r === -1) {\n                return defaultValue;\n            }\n            return r + 2;\n        }\n        getCharSequence(shouldIgnoreTrimWhitespace, startIndex, endIndex) {\n            let charCodes = [];\n            let lineNumbers = [];\n            let columns = [];\n            let len = 0;\n            for (let index = startIndex; index <= endIndex; index++) {\n                const lineContent = this._lines[index];\n                const startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\n                const endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\n                for (let col = startColumn; col < endColumn; col++) {\n                    charCodes[len] = lineContent.charCodeAt(col - 1);\n                    lineNumbers[len] = index + 1;\n                    columns[len] = col;\n                    len++;\n                }\n            }\n            return new CharSequence(charCodes, lineNumbers, columns);\n        }\n    }\n    class CharSequence {\n        constructor(charCodes, lineNumbers, columns) {\n            this._charCodes = charCodes;\n            this._lineNumbers = lineNumbers;\n            this._columns = columns;\n        }\n        getLength() {\n            return this._charCodes.length;\n        }\n        getElementAtIndex(i) {\n            return this._charCodes[i];\n        }\n        getStartLineNumber(i) {\n            return this._lineNumbers[i];\n        }\n        getStartColumn(i) {\n            return this._columns[i];\n        }\n        getEndLineNumber(i) {\n            return this._lineNumbers[i];\n        }\n        getEndColumn(i) {\n            return this._columns[i] + 1;\n        }\n    }\n    class CharChange {\n        constructor(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\n            this.originalStartLineNumber = originalStartLineNumber;\n            this.originalStartColumn = originalStartColumn;\n            this.originalEndLineNumber = originalEndLineNumber;\n            this.originalEndColumn = originalEndColumn;\n            this.modifiedStartLineNumber = modifiedStartLineNumber;\n            this.modifiedStartColumn = modifiedStartColumn;\n            this.modifiedEndLineNumber = modifiedEndLineNumber;\n            this.modifiedEndColumn = modifiedEndColumn;\n        }\n        static createFromDiffChange(diffChange, originalCharSequence, modifiedCharSequence) {\n            let originalStartLineNumber;\n            let originalStartColumn;\n            let originalEndLineNumber;\n            let originalEndColumn;\n            let modifiedStartLineNumber;\n            let modifiedStartColumn;\n            let modifiedEndLineNumber;\n            let modifiedEndColumn;\n            if (diffChange.originalLength === 0) {\n                originalStartLineNumber = 0;\n                originalStartColumn = 0;\n                originalEndLineNumber = 0;\n                originalEndColumn = 0;\n            }\n            else {\n                originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\n                originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\n                originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n                originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\n            }\n            if (diffChange.modifiedLength === 0) {\n                modifiedStartLineNumber = 0;\n                modifiedStartColumn = 0;\n                modifiedEndLineNumber = 0;\n                modifiedEndColumn = 0;\n            }\n            else {\n                modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\n                modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\n                modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n                modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            }\n            return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\n        }\n    }\n    function postProcessCharChanges(rawChanges) {\n        if (rawChanges.length <= 1) {\n            return rawChanges;\n        }\n        let result = [rawChanges[0]];\n        let prevChange = result[0];\n        for (let i = 1, len = rawChanges.length; i < len; i++) {\n            const currChange = rawChanges[i];\n            const originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\n            const modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\n            // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\n            const matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\n            if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\n                // Merge the current change into the previous one\n                prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\n                prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\n            }\n            else {\n                // Add the current change\n                result.push(currChange);\n                prevChange = currChange;\n            }\n        }\n        return result;\n    }\n    class LineChange {\n        constructor(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\n            this.originalStartLineNumber = originalStartLineNumber;\n            this.originalEndLineNumber = originalEndLineNumber;\n            this.modifiedStartLineNumber = modifiedStartLineNumber;\n            this.modifiedEndLineNumber = modifiedEndLineNumber;\n            this.charChanges = charChanges;\n        }\n        static createFromDiffResult(shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueProcessingPredicate, shouldComputeCharChanges, shouldPostProcessCharChanges) {\n            let originalStartLineNumber;\n            let originalEndLineNumber;\n            let modifiedStartLineNumber;\n            let modifiedEndLineNumber;\n            let charChanges = undefined;\n            if (diffChange.originalLength === 0) {\n                originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\n                originalEndLineNumber = 0;\n            }\n            else {\n                originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\n                originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\n            }\n            if (diffChange.modifiedLength === 0) {\n                modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\n                modifiedEndLineNumber = 0;\n            }\n            else {\n                modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\n                modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\n            }\n            if (shouldComputeCharChanges && diffChange.originalLength !== 0 && diffChange.modifiedLength !== 0 && continueProcessingPredicate()) {\n                const originalCharSequence = originalLineSequence.getCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\n                const modifiedCharSequence = modifiedLineSequence.getCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\n                let rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueProcessingPredicate, true);\n                if (shouldPostProcessCharChanges) {\n                    rawChanges = postProcessCharChanges(rawChanges);\n                }\n                charChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\n                }\n            }\n            return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\n        }\n    }\n    class DiffComputer {\n        constructor(originalLines, modifiedLines, opts) {\n            this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\n            this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\n            this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\n            this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\n            this.maximumRunTimeMs = MAXIMUM_RUN_TIME;\n            this.originalLines = originalLines;\n            this.modifiedLines = modifiedLines;\n            this.original = new LineMarkerSequence(originalLines);\n            this.modified = new LineMarkerSequence(modifiedLines);\n        }\n        computeDiff() {\n            if (this.original.getLength() === 1 && this.original.getElementAtIndex(0).length === 0) {\n                // empty original => fast path\n                return [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: 1,\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: this.modified.getLength(),\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }];\n            }\n            if (this.modified.getLength() === 1 && this.modified.getElementAtIndex(0).length === 0) {\n                // empty modified => fast path\n                return [{\n                        originalStartLineNumber: 1,\n                        originalEndLineNumber: this.original.getLength(),\n                        modifiedStartLineNumber: 1,\n                        modifiedEndLineNumber: 1,\n                        charChanges: [{\n                                modifiedEndColumn: 0,\n                                modifiedEndLineNumber: 0,\n                                modifiedStartColumn: 0,\n                                modifiedStartLineNumber: 0,\n                                originalEndColumn: 0,\n                                originalEndLineNumber: 0,\n                                originalStartColumn: 0,\n                                originalStartLineNumber: 0\n                            }]\n                    }];\n            }\n            this.computationStartTime = (new Date()).getTime();\n            let rawChanges = computeDiff(this.original, this.modified, this._continueProcessingPredicate.bind(this), this.shouldMakePrettyDiff);\n            // The diff is always computed with ignoring trim whitespace\n            // This ensures we get the prettiest diff\n            if (this.shouldIgnoreTrimWhitespace) {\n                let lineChanges = [];\n                for (let i = 0, length = rawChanges.length; i < length; i++) {\n                    lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this._continueProcessingPredicate.bind(this), this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                }\n                return lineChanges;\n            }\n            // Need to post-process and introduce changes where the trim whitespace is different\n            // Note that we are looping starting at -1 to also cover the lines before the first change\n            let result = [];\n            let originalLineIndex = 0;\n            let modifiedLineIndex = 0;\n            for (let i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\n                const nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\n                const originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\n                const modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\n                while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\n                    const originalLine = this.originalLines[originalLineIndex];\n                    const modifiedLine = this.modifiedLines[modifiedLineIndex];\n                    if (originalLine !== modifiedLine) {\n                        // These lines differ only in trim whitespace\n                        // Check the leading whitespace\n                        {\n                            let originalStartColumn = LineMarkerSequence._getFirstNonBlankColumn(originalLine, 1);\n                            let modifiedStartColumn = LineMarkerSequence._getFirstNonBlankColumn(modifiedLine, 1);\n                            while (originalStartColumn > 1 && modifiedStartColumn > 1) {\n                                const originalChar = originalLine.charCodeAt(originalStartColumn - 2);\n                                const modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\n                                if (originalChar !== modifiedChar) {\n                                    break;\n                                }\n                                originalStartColumn--;\n                                modifiedStartColumn--;\n                            }\n                            if (originalStartColumn > 1 || modifiedStartColumn > 1) {\n                                this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\n                            }\n                        }\n                        // Check the trailing whitespace\n                        {\n                            let originalEndColumn = LineMarkerSequence._getLastNonBlankColumn(originalLine, 1);\n                            let modifiedEndColumn = LineMarkerSequence._getLastNonBlankColumn(modifiedLine, 1);\n                            const originalMaxColumn = originalLine.length + 1;\n                            const modifiedMaxColumn = modifiedLine.length + 1;\n                            while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\n                                const originalChar = originalLine.charCodeAt(originalEndColumn - 1);\n                                const modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\n                                if (originalChar !== modifiedChar) {\n                                    break;\n                                }\n                                originalEndColumn++;\n                                modifiedEndColumn++;\n                            }\n                            if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\n                                this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\n                            }\n                        }\n                    }\n                    originalLineIndex++;\n                    modifiedLineIndex++;\n                }\n                if (nextChange) {\n                    // Emit the actual change\n                    result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this._continueProcessingPredicate.bind(this), this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\n                    originalLineIndex += nextChange.originalLength;\n                    modifiedLineIndex += nextChange.modifiedLength;\n                }\n            }\n            return result;\n        }\n        _pushTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n            if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\n                // Merged into previous\n                return;\n            }\n            let charChanges = undefined;\n            if (this.shouldComputeCharChanges) {\n                charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\n            }\n            result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\n        }\n        _mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\n            const len = result.length;\n            if (len === 0) {\n                return false;\n            }\n            const prevChange = result[len - 1];\n            if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\n                // Don't merge with inserts/deletes\n                return false;\n            }\n            if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\n                prevChange.originalEndLineNumber = originalLineNumber;\n                prevChange.modifiedEndLineNumber = modifiedLineNumber;\n                if (this.shouldComputeCharChanges) {\n                    prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\n                }\n                return true;\n            }\n            return false;\n        }\n        _continueProcessingPredicate() {\n            if (this.maximumRunTimeMs === 0) {\n                return true;\n            }\n            const now = (new Date()).getTime();\n            return now - this.computationStartTime < this.maximumRunTimeMs;\n        }\n    }\n    exports.DiffComputer = DiffComputer;\n});\n",null]}