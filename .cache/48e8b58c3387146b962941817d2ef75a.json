{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar webWorker_1 = require(\"vs/editor/common/services/webWorker\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar OutputLinkProvider = /** @class */ (function () {\n    function OutputLinkProvider(contextService, modelService) {\n        var _this = this;\n        this.contextService = contextService;\n        this.modelService = modelService;\n        this.disposeWorkerScheduler = new async_1.RunOnceScheduler(function () { return _this.disposeWorker(); }, OutputLinkProvider.DISPOSE_WORKER_TIME);\n        this.registerListeners();\n        this.updateLinkProviderWorker();\n    }\n    OutputLinkProvider.prototype.registerListeners = function () {\n        var _this = this;\n        this.contextService.onDidChangeWorkspaceFolders(function () { return _this.updateLinkProviderWorker(); });\n    };\n    OutputLinkProvider.prototype.updateLinkProviderWorker = function () {\n        var _this = this;\n        // Setup link provider depending on folders being opened or not\n        var folders = this.contextService.getWorkspace().folders;\n        if (folders.length > 0) {\n            if (!this.linkProviderRegistration) {\n                this.linkProviderRegistration = modes_1.LinkProviderRegistry.register([{ language: output_1.OUTPUT_MODE_ID, scheme: '*' }, { language: output_1.LOG_MODE_ID, scheme: '*' }], {\n                    provideLinks: function (model, token) {\n                        return _this.provideLinks(model.uri);\n                    }\n                });\n            }\n        }\n        else {\n            this.linkProviderRegistration = lifecycle_1.dispose(this.linkProviderRegistration);\n        }\n        // Dispose worker to recreate with folders on next provideLinks request\n        this.disposeWorker();\n        this.disposeWorkerScheduler.cancel();\n    };\n    OutputLinkProvider.prototype.getOrCreateWorker = function () {\n        this.disposeWorkerScheduler.schedule();\n        if (!this.worker) {\n            var createData = {\n                workspaceFolders: this.contextService.getWorkspace().folders.map(function (folder) { return folder.uri.toString(); })\n            };\n            this.worker = webWorker_1.createWebWorker(this.modelService, {\n                moduleId: 'vs/workbench/contrib/output/common/outputLinkComputer',\n                createData: createData,\n                label: 'outputLinkComputer'\n            });\n        }\n        return this.worker;\n    };\n    OutputLinkProvider.prototype.provideLinks = function (modelUri) {\n        return Promise.resolve([]);\n        return this.getOrCreateWorker().withSyncedResources([modelUri]).then(function (linkComputer) {\n            return linkComputer.computeLinks(modelUri.toString());\n        });\n    };\n    OutputLinkProvider.prototype.disposeWorker = function () {\n        if (this.worker) {\n            this.worker.dispose();\n            this.worker = undefined;\n        }\n    };\n    OutputLinkProvider.DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n    OutputLinkProvider = tslib_1.__decorate([\n        tslib_1.__param(0, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(1, modelService_1.IModelService)\n    ], OutputLinkProvider);\n    return OutputLinkProvider;\n}());\nexports.OutputLinkProvider = OutputLinkProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/outputLinkProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { LinkProviderRegistry, ILink } from 'vs/editor/common/modes';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { OUTPUT_MODE_ID, LOG_MODE_ID } from 'vs/workbench/contrib/output/common/output';\nimport { MonacoWebWorker, createWebWorker } from 'vs/editor/common/services/webWorker';\nimport { ICreateData, OutputLinkComputer } from 'vs/workbench/contrib/output/common/outputLinkComputer';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\n\nexport class OutputLinkProvider {\n\n\tprivate static readonly DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n\n\tprivate worker?: MonacoWebWorker<OutputLinkComputer>;\n\tprivate disposeWorkerScheduler: RunOnceScheduler;\n\tprivate linkProviderRegistration: IDisposable;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tthis.disposeWorkerScheduler = new RunOnceScheduler(() => this.disposeWorker(), OutputLinkProvider.DISPOSE_WORKER_TIME);\n\n\t\tthis.registerListeners();\n\t\tthis.updateLinkProviderWorker();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.contextService.onDidChangeWorkspaceFolders(() => this.updateLinkProviderWorker());\n\t}\n\n\tprivate updateLinkProviderWorker(): void {\n\n\t\t// Setup link provider depending on folders being opened or not\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tif (folders.length > 0) {\n\t\t\tif (!this.linkProviderRegistration) {\n\t\t\t\tthis.linkProviderRegistration = LinkProviderRegistry.register([{ language: OUTPUT_MODE_ID, scheme: '*' }, { language: LOG_MODE_ID, scheme: '*' }], {\n\t\t\t\t\tprovideLinks: (model, token): Promise<ILink[]> => {\n\t\t\t\t\t\treturn this.provideLinks(model.uri);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.linkProviderRegistration = dispose(this.linkProviderRegistration);\n\t\t}\n\n\t\t// Dispose worker to recreate with folders on next provideLinks request\n\t\tthis.disposeWorker();\n\t\tthis.disposeWorkerScheduler.cancel();\n\t}\n\n\tprivate getOrCreateWorker(): MonacoWebWorker<OutputLinkComputer> {\n\t\tthis.disposeWorkerScheduler.schedule();\n\n\t\tif (!this.worker) {\n\t\t\tconst createData: ICreateData = {\n\t\t\t\tworkspaceFolders: this.contextService.getWorkspace().folders.map(folder => folder.uri.toString())\n\t\t\t};\n\n\t\t\tthis.worker = createWebWorker<OutputLinkComputer>(this.modelService, {\n\t\t\t\tmoduleId: 'vs/workbench/contrib/output/common/outputLinkComputer',\n\t\t\t\tcreateData,\n\t\t\t\tlabel: 'outputLinkComputer'\n\t\t\t});\n\t\t}\n\n\t\treturn this.worker;\n\t}\n\n\tprivate provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\treturn Promise.resolve([]);\n\t\treturn this.getOrCreateWorker().withSyncedResources([modelUri]).then(linkComputer => {\n\t\t\treturn linkComputer.computeLinks(modelUri.toString());\n\t\t});\n\t}\n\n\tprivate disposeWorker(): void {\n\t\tif (this.worker) {\n\t\t\tthis.worker.dispose();\n\t\t\tthis.worker = undefined;\n\t\t}\n\t}\n}\n"]}]}