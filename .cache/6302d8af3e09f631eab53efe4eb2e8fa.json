{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formattingEdit.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formattingEdit.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/editOperation\", \"vs/editor/common/core/range\"], function (require, exports, editOperation_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FormattingEdit {\n        static _handleEolEdits(editor, edits) {\n            let newEol = undefined;\n            let singleEdits = [];\n            for (let edit of edits) {\n                if (typeof edit.eol === 'number') {\n                    newEol = edit.eol;\n                }\n                if (edit.range && typeof edit.text === 'string') {\n                    singleEdits.push(edit);\n                }\n            }\n            if (typeof newEol === 'number') {\n                if (editor.hasModel()) {\n                    editor.getModel().pushEOL(newEol);\n                }\n            }\n            return singleEdits;\n        }\n        static _isFullModelReplaceEdit(editor, edit) {\n            if (!editor.hasModel()) {\n                return false;\n            }\n            const model = editor.getModel();\n            const editRange = model.validateRange(edit.range);\n            const fullModelRange = model.getFullModelRange();\n            return fullModelRange.equalsRange(editRange);\n        }\n        static execute(editor, _edits) {\n            editor.pushUndoStop();\n            const edits = FormattingEdit._handleEolEdits(editor, _edits);\n            if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\n                // We use replace semantics and hope that markers stay put...\n                editor.executeEdits('formatEditsCommand', edits.map(edit => editOperation_1.EditOperation.replace(range_1.Range.lift(edit.range), edit.text)));\n            }\n            else {\n                editor.executeEdits('formatEditsCommand', edits.map(edit => editOperation_1.EditOperation.replaceMove(range_1.Range.lift(edit.range), edit.text)));\n            }\n            editor.pushUndoStop();\n        }\n    }\n    exports.FormattingEdit = FormattingEdit;\n});\n",null]}