{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar encoding = require(\"vs/base/node/encoding\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar path_1 = require(\"vs/base/common/path\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar resources_1 = require(\"vs/base/common/resources\");\n// TODO@Ben debt - encodings should move one layer up from the file service into the text file\n// service and then ideally be passed in as option to the file service\n// the file service should talk about string |Â Buffer for reading and writing and only convert\n// to strings if a encoding is provided\nvar ResourceEncodings = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceEncodings, _super);\n    function ResourceEncodings(textResourceConfigurationService, environmentService, contextService, encodingOverride) {\n        var _this = _super.call(this) || this;\n        _this.textResourceConfigurationService = textResourceConfigurationService;\n        _this.environmentService = environmentService;\n        _this.contextService = contextService;\n        _this.encodingOverride = encodingOverride || _this.getEncodingOverrides();\n        _this.registerListeners();\n        return _this;\n    }\n    ResourceEncodings.prototype.registerListeners = function () {\n        var _this = this;\n        // Workspace Folder Change\n        this._register(this.contextService.onDidChangeWorkspaceFolders(function () {\n            _this.encodingOverride = _this.getEncodingOverrides();\n        }));\n    };\n    ResourceEncodings.prototype.getReadEncoding = function (resource, options, detected) {\n        var preferredEncoding;\n        // Encoding passed in as option\n        if (options && options.encoding) {\n            if (detected.encoding === encoding.UTF8 && options.encoding === encoding.UTF8) {\n                preferredEncoding = encoding.UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n            }\n            else {\n                preferredEncoding = options.encoding; // give passed in encoding highest priority\n            }\n        }\n        // Encoding detected\n        else if (detected.encoding) {\n            if (detected.encoding === encoding.UTF8) {\n                preferredEncoding = encoding.UTF8_with_bom; // if we detected UTF-8, it can only be because of a BOM\n            }\n            else {\n                preferredEncoding = detected.encoding;\n            }\n        }\n        // Encoding configured\n        else if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === encoding.UTF8_with_bom) {\n            preferredEncoding = encoding.UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n        }\n        return this.getEncodingForResource(resource, preferredEncoding);\n    };\n    ResourceEncodings.prototype.getWriteEncoding = function (resource, preferredEncoding) {\n        var resourceEncoding = this.getEncodingForResource(resource, preferredEncoding);\n        return {\n            encoding: resourceEncoding,\n            hasBOM: resourceEncoding === encoding.UTF16be || resourceEncoding === encoding.UTF16le || resourceEncoding === encoding.UTF8_with_bom // enforce BOM for certain encodings\n        };\n    };\n    ResourceEncodings.prototype.getEncodingForResource = function (resource, preferredEncoding) {\n        var fileEncoding;\n        var override = this.getEncodingOverride(resource);\n        if (override) {\n            fileEncoding = override; // encoding override always wins\n        }\n        else if (preferredEncoding) {\n            fileEncoding = preferredEncoding; // preferred encoding comes second\n        }\n        else {\n            fileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n        }\n        if (!fileEncoding || !encoding.encodingExists(fileEncoding)) {\n            fileEncoding = encoding.UTF8; // the default is UTF 8\n        }\n        return fileEncoding;\n    };\n    ResourceEncodings.prototype.getEncodingOverrides = function () {\n        var encodingOverride = [];\n        // Global settings\n        encodingOverride.push({ parent: uri_1.URI.file(this.environmentService.appSettingsHome), encoding: encoding.UTF8 });\n        // Workspace files\n        encodingOverride.push({ extension: workspaces_1.WORKSPACE_EXTENSION, encoding: encoding.UTF8 });\n        // Folder Settings\n        this.contextService.getWorkspace().folders.forEach(function (folder) {\n            encodingOverride.push({ parent: resources_1.joinPath(folder.uri, '.vscode'), encoding: encoding.UTF8 });\n        });\n        return encodingOverride;\n    };\n    ResourceEncodings.prototype.getEncodingOverride = function (resource) {\n        if (resource && this.encodingOverride && this.encodingOverride.length) {\n            for (var _i = 0, _a = this.encodingOverride; _i < _a.length; _i++) {\n                var override = _a[_i];\n                // check if the resource is child of encoding override path\n                if (override.parent && files_1.isParent(resource.fsPath, override.parent.fsPath, !platform_1.isLinux /* ignorecase */)) {\n                    return override.encoding;\n                }\n                // check if the resource extension is equal to encoding override\n                if (override.extension && path_1.extname(resource.fsPath) === \".\" + override.extension) {\n                    return override.encoding;\n                }\n            }\n        }\n        return null;\n    };\n    return ResourceEncodings;\n}(lifecycle_1.Disposable));\nexports.ResourceEncodings = ResourceEncodings;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/encoding.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WORKSPACE_EXTENSION } from 'vs/platform/workspaces/common/workspaces';\nimport * as encoding from 'vs/base/node/encoding';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IResolveContentOptions, isParent, IResourceEncodings, IResourceEncoding } from 'vs/platform/files/common/files';\nimport { isLinux } from 'vs/base/common/platform';\nimport { extname } from 'vs/base/common/path';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { joinPath } from 'vs/base/common/resources';\n\nexport interface IEncodingOverride {\n\tparent?: uri;\n\textension?: string;\n\tencoding: string;\n}\n\n// TODO@Ben debt - encodings should move one layer up from the file service into the text file\n// service and then ideally be passed in as option to the file service\n// the file service should talk about string |Â Buffer for reading and writing and only convert\n// to strings if a encoding is provided\nexport class ResourceEncodings extends Disposable implements IResourceEncodings {\n\tprivate encodingOverride: IEncodingOverride[];\n\n\tconstructor(\n\t\tprivate textResourceConfigurationService: ITextResourceConfigurationService,\n\t\tprivate environmentService: IEnvironmentService,\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tencodingOverride?: IEncodingOverride[]\n\t) {\n\t\tsuper();\n\n\t\tthis.encodingOverride = encodingOverride || this.getEncodingOverrides();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Workspace Folder Change\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tthis.encodingOverride = this.getEncodingOverrides();\n\t\t}));\n\t}\n\n\tgetReadEncoding(resource: uri, options: IResolveContentOptions | undefined, detected: encoding.IDetectedEncodingResult): string {\n\t\tlet preferredEncoding: string | undefined;\n\n\t\t// Encoding passed in as option\n\t\tif (options && options.encoding) {\n\t\t\tif (detected.encoding === encoding.UTF8 && options.encoding === encoding.UTF8) {\n\t\t\t\tpreferredEncoding = encoding.UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t}\n\t\t}\n\n\t\t// Encoding detected\n\t\telse if (detected.encoding) {\n\t\t\tif (detected.encoding === encoding.UTF8) {\n\t\t\t\tpreferredEncoding = encoding.UTF8_with_bom; // if we detected UTF-8, it can only be because of a BOM\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = detected.encoding;\n\t\t\t}\n\t\t}\n\n\t\t// Encoding configured\n\t\telse if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === encoding.UTF8_with_bom) {\n\t\t\tpreferredEncoding = encoding.UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t}\n\n\t\treturn this.getEncodingForResource(resource, preferredEncoding);\n\t}\n\n\tgetWriteEncoding(resource: uri, preferredEncoding?: string): IResourceEncoding {\n\t\tconst resourceEncoding = this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding: resourceEncoding,\n\t\t\thasBOM: resourceEncoding === encoding.UTF16be || resourceEncoding === encoding.UTF16le || resourceEncoding === encoding.UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tprivate getEncodingForResource(resource: uri, preferredEncoding?: string): string {\n\t\tlet fileEncoding: string;\n\n\t\tconst override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override; // encoding override always wins\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding; // preferred encoding comes second\n\t\t} else {\n\t\t\tfileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n\t\t}\n\n\t\tif (!fileEncoding || !encoding.encodingExists(fileEncoding)) {\n\t\t\tfileEncoding = encoding.UTF8; // the default is UTF 8\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverrides(): IEncodingOverride[] {\n\t\tconst encodingOverride: IEncodingOverride[] = [];\n\n\t\t// Global settings\n\t\tencodingOverride.push({ parent: uri.file(this.environmentService.appSettingsHome), encoding: encoding.UTF8 });\n\n\t\t// Workspace files\n\t\tencodingOverride.push({ extension: WORKSPACE_EXTENSION, encoding: encoding.UTF8 });\n\n\t\t// Folder Settings\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tencodingOverride.push({ parent: joinPath(folder.uri, '.vscode'), encoding: encoding.UTF8 });\n\t\t});\n\n\t\treturn encodingOverride;\n\t}\n\n\tprivate getEncodingOverride(resource: uri): string | null {\n\t\tif (resource && this.encodingOverride && this.encodingOverride.length) {\n\t\t\tfor (const override of this.encodingOverride) {\n\n\t\t\t\t// check if the resource is child of encoding override path\n\t\t\t\tif (override.parent && isParent(resource.fsPath, override.parent.fsPath, !isLinux /* ignorecase */)) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\n\t\t\t\t// check if the resource extension is equal to encoding override\n\t\t\t\tif (override.extension && extname(resource.fsPath) === `.${override.extension}`) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n"]}]}