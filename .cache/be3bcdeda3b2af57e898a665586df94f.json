{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/hoverWidgets.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/hover/hoverWidgets.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/browser/ui/scrollbar/scrollableElement\", \"vs/base/browser/ui/widget\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/editor/browser/editorBrowser\"], function (require, exports, dom_1, scrollableElement_1, widget_1, keyCodes_1, lifecycle_1, editorBrowser) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ContentHoverWidget extends widget_1.Widget {\n        constructor(id, editor) {\n            super();\n            this.disposables = [];\n            // Editor.IContentWidget.allowEditorOverflow\n            this.allowEditorOverflow = true;\n            this._id = id;\n            this._editor = editor;\n            this._isVisible = false;\n            this._containerDomNode = document.createElement('div');\n            this._containerDomNode.className = 'monaco-editor-hover hidden';\n            this._containerDomNode.tabIndex = 0;\n            this._domNode = document.createElement('div');\n            this._domNode.className = 'monaco-editor-hover-content';\n            this.scrollbar = new scrollableElement_1.DomScrollableElement(this._domNode, {});\n            this.disposables.push(this.scrollbar);\n            this._containerDomNode.appendChild(this.scrollbar.getDomNode());\n            this.onkeydown(this._containerDomNode, (e) => {\n                if (e.equals(keyCodes_1.KeyCode.Escape)) {\n                    this.hide();\n                }\n            });\n            this._register(this._editor.onDidChangeConfiguration((e) => {\n                if (e.fontInfo) {\n                    this.updateFont();\n                }\n            }));\n            this._editor.onDidLayoutChange(e => this.layout());\n            this.layout();\n            this._editor.addContentWidget(this);\n            this._showAtPosition = null;\n            this._showAtRange = null;\n        }\n        get isVisible() {\n            return this._isVisible;\n        }\n        set isVisible(value) {\n            this._isVisible = value;\n            dom_1.toggleClass(this._containerDomNode, 'hidden', !this._isVisible);\n        }\n        getId() {\n            return this._id;\n        }\n        getDomNode() {\n            return this._containerDomNode;\n        }\n        showAt(position, range, focus) {\n            // Position has changed\n            this._showAtPosition = position;\n            this._showAtRange = range;\n            this.isVisible = true;\n            this._editor.layoutContentWidget(this);\n            // Simply force a synchronous render on the editor\n            // such that the widget does not really render with left = '0px'\n            this._editor.render();\n            this._stoleFocus = focus;\n            if (focus) {\n                this._containerDomNode.focus();\n            }\n        }\n        hide() {\n            if (!this.isVisible) {\n                return;\n            }\n            this.isVisible = false;\n            this._editor.layoutContentWidget(this);\n            if (this._stoleFocus) {\n                this._editor.focus();\n            }\n        }\n        getPosition() {\n            if (this.isVisible) {\n                return {\n                    position: this._showAtPosition,\n                    range: this._showAtRange,\n                    preference: [\n                        editorBrowser.ContentWidgetPositionPreference.ABOVE,\n                        editorBrowser.ContentWidgetPositionPreference.BELOW\n                    ]\n                };\n            }\n            return null;\n        }\n        dispose() {\n            this._editor.removeContentWidget(this);\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n        updateFont() {\n            const codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));\n            codeClasses.forEach(node => this._editor.applyFontInfo(node));\n        }\n        updateContents(node) {\n            this._domNode.textContent = '';\n            this._domNode.appendChild(node);\n            this.updateFont();\n            this._editor.layoutContentWidget(this);\n            this.onContentsChange();\n        }\n        onContentsChange() {\n            this.scrollbar.scanDomNode();\n        }\n        layout() {\n            const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n            const { fontSize, lineHeight } = this._editor.getConfiguration().fontInfo;\n            this._domNode.style.fontSize = `${fontSize}px`;\n            this._domNode.style.lineHeight = `${lineHeight}px`;\n            this._domNode.style.maxHeight = `${height}px`;\n            this._domNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;\n        }\n    }\n    exports.ContentHoverWidget = ContentHoverWidget;\n    class GlyphHoverWidget extends widget_1.Widget {\n        constructor(id, editor) {\n            super();\n            this._id = id;\n            this._editor = editor;\n            this._isVisible = false;\n            this._domNode = document.createElement('div');\n            this._domNode.className = 'monaco-editor-hover hidden';\n            this._domNode.setAttribute('aria-hidden', 'true');\n            this._domNode.setAttribute('role', 'presentation');\n            this._showAtLineNumber = -1;\n            this._register(this._editor.onDidChangeConfiguration((e) => {\n                if (e.fontInfo) {\n                    this.updateFont();\n                }\n            }));\n            this._editor.addOverlayWidget(this);\n        }\n        get isVisible() {\n            return this._isVisible;\n        }\n        set isVisible(value) {\n            this._isVisible = value;\n            dom_1.toggleClass(this._domNode, 'hidden', !this._isVisible);\n        }\n        getId() {\n            return this._id;\n        }\n        getDomNode() {\n            return this._domNode;\n        }\n        showAt(lineNumber) {\n            this._showAtLineNumber = lineNumber;\n            if (!this.isVisible) {\n                this.isVisible = true;\n            }\n            const editorLayout = this._editor.getLayoutInfo();\n            const topForLineNumber = this._editor.getTopForLineNumber(this._showAtLineNumber);\n            const editorScrollTop = this._editor.getScrollTop();\n            const lineHeight = this._editor.getConfiguration().lineHeight;\n            const nodeHeight = this._domNode.clientHeight;\n            const top = topForLineNumber - editorScrollTop - ((nodeHeight - lineHeight) / 2);\n            this._domNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n            this._domNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n        }\n        hide() {\n            if (!this.isVisible) {\n                return;\n            }\n            this.isVisible = false;\n        }\n        getPosition() {\n            return null;\n        }\n        dispose() {\n            this._editor.removeOverlayWidget(this);\n            super.dispose();\n        }\n        updateFont() {\n            const codeTags = Array.prototype.slice.call(this._domNode.getElementsByTagName('code'));\n            const codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));\n            [...codeTags, ...codeClasses].forEach(node => this._editor.applyFontInfo(node));\n        }\n        updateContents(node) {\n            this._domNode.textContent = '';\n            this._domNode.appendChild(node);\n            this.updateFont();\n        }\n    }\n    exports.GlyphHoverWidget = GlyphHoverWidget;\n});\n",null]}