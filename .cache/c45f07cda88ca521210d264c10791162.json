{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSearch.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSearch.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar search_1 = require(\"vs/workbench/services/search/common/search\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar MainThreadSearch = /** @class */ (function () {\n    function MainThreadSearch(extHostContext, _searchService, _telemetryService) {\n        this._searchService = _searchService;\n        this._telemetryService = _telemetryService;\n        this._searchProvider = new Map();\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostSearch);\n    }\n    MainThreadSearch.prototype.dispose = function () {\n        this._searchProvider.forEach(function (value) { return value.dispose(); });\n        this._searchProvider.clear();\n    };\n    MainThreadSearch.prototype.$registerTextSearchProvider = function (handle, scheme) {\n        this._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, search_1.SearchProviderType.text, scheme, handle, this._proxy));\n    };\n    MainThreadSearch.prototype.$registerFileSearchProvider = function (handle, scheme) {\n        this._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, search_1.SearchProviderType.file, scheme, handle, this._proxy));\n    };\n    MainThreadSearch.prototype.$unregisterProvider = function (handle) {\n        lifecycle_1.dispose(this._searchProvider.get(handle));\n        this._searchProvider.delete(handle);\n    };\n    MainThreadSearch.prototype.$handleFileMatch = function (handle, session, data) {\n        var provider = this._searchProvider.get(handle);\n        if (!provider) {\n            throw new Error('Got result for unknown provider');\n        }\n        provider.handleFindMatch(session, data);\n    };\n    MainThreadSearch.prototype.$handleTextMatch = function (handle, session, data) {\n        var provider = this._searchProvider.get(handle);\n        if (!provider) {\n            throw new Error('Got result for unknown provider');\n        }\n        provider.handleFindMatch(session, data);\n    };\n    MainThreadSearch.prototype.$handleTelemetry = function (eventName, data) {\n        this._telemetryService.publicLog(eventName, data);\n    };\n    MainThreadSearch = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadSearch),\n        tslib_1.__param(1, search_1.ISearchService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService)\n    ], MainThreadSearch);\n    return MainThreadSearch;\n}());\nexports.MainThreadSearch = MainThreadSearch;\nvar SearchOperation = /** @class */ (function () {\n    function SearchOperation(progress, id, matches) {\n        if (id === void 0) { id = ++SearchOperation._idPool; }\n        if (matches === void 0) { matches = new Map(); }\n        this.progress = progress;\n        this.id = id;\n        this.matches = matches;\n        //\n    }\n    SearchOperation.prototype.addMatch = function (match) {\n        var _a;\n        if (this.matches.has(match.resource.toString())) {\n            // Merge with previous IFileMatches\n            // TODO@rob clean up text/file result types\n            (_a = this.matches.get(match.resource.toString()).results).push.apply(_a, match.results);\n        }\n        else {\n            this.matches.set(match.resource.toString(), match);\n        }\n        if (this.progress) {\n            this.progress(match);\n        }\n    };\n    SearchOperation._idPool = 0;\n    return SearchOperation;\n}());\nvar RemoteSearchProvider = /** @class */ (function () {\n    function RemoteSearchProvider(searchService, type, _scheme, _handle, _proxy) {\n        this._scheme = _scheme;\n        this._handle = _handle;\n        this._proxy = _proxy;\n        this._searches = new Map();\n        this._registrations = [searchService.registerSearchResultProvider(this._scheme, type, this)];\n    }\n    RemoteSearchProvider.prototype.dispose = function () {\n        lifecycle_1.dispose(this._registrations);\n    };\n    RemoteSearchProvider.prototype.fileSearch = function (query, token) {\n        if (token === void 0) { token = cancellation_1.CancellationToken.None; }\n        return this.doSearch(query, undefined, token);\n    };\n    RemoteSearchProvider.prototype.textSearch = function (query, onProgress, token) {\n        if (token === void 0) { token = cancellation_1.CancellationToken.None; }\n        return this.doSearch(query, onProgress, token);\n    };\n    RemoteSearchProvider.prototype.doSearch = function (query, onProgress, token) {\n        var _this = this;\n        if (token === void 0) { token = cancellation_1.CancellationToken.None; }\n        if (!query.folderQueries.length) {\n            throw new Error('Empty folderQueries');\n        }\n        var search = new SearchOperation(onProgress);\n        this._searches.set(search.id, search);\n        var searchP = query.type === search_1.QueryType.File\n            ? this._proxy.$provideFileSearchResults(this._handle, search.id, query, token)\n            : this._proxy.$provideTextSearchResults(this._handle, search.id, query, token);\n        return Promise.resolve(searchP).then(function (result) {\n            _this._searches.delete(search.id);\n            return { results: map_1.values(search.matches), stats: result.stats, limitHit: result.limitHit };\n        }, function (err) {\n            _this._searches.delete(search.id);\n            return Promise.reject(err);\n        });\n    };\n    RemoteSearchProvider.prototype.clearCache = function (cacheKey) {\n        return Promise.resolve(this._proxy.$clearCache(cacheKey));\n    };\n    RemoteSearchProvider.prototype.handleFindMatch = function (session, dataOrUri) {\n        var searchOp = this._searches.get(session);\n        if (!searchOp) {\n            // ignore...\n            return;\n        }\n        dataOrUri.forEach(function (result) {\n            if (result.results) {\n                searchOp.addMatch({\n                    resource: uri_1.URI.revive(result.resource),\n                    results: result.results\n                });\n            }\n            else {\n                searchOp.addMatch({\n                    resource: uri_1.URI.revive(result)\n                });\n            }\n        });\n    };\n    return RemoteSearchProvider;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSearch.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { values } from 'vs/base/common/map';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { IFileMatch, IFileQuery, IRawFileMatch2, ISearchComplete, ISearchCompleteStats, ISearchProgressItem, ISearchResultProvider, ISearchService, ITextQuery, QueryType, SearchProviderType } from 'vs/workbench/services/search/common/search';\nimport { ExtHostContext, ExtHostSearchShape, IExtHostContext, MainContext, MainThreadSearchShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadSearch)\nexport class MainThreadSearch implements MainThreadSearchShape {\n\n\tprivate readonly _proxy: ExtHostSearchShape;\n\tprivate readonly _searchProvider = new Map<number, RemoteSearchProvider>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSearch);\n\t}\n\n\tdispose(): void {\n\t\tthis._searchProvider.forEach(value => value.dispose());\n\t\tthis._searchProvider.clear();\n\t}\n\n\t$registerTextSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.text, scheme, handle, this._proxy));\n\t}\n\n\t$registerFileSearchProvider(handle: number, scheme: string): void {\n\t\tthis._searchProvider.set(handle, new RemoteSearchProvider(this._searchService, SearchProviderType.file, scheme, handle, this._proxy));\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tdispose(this._searchProvider.get(handle));\n\t\tthis._searchProvider.delete(handle);\n\t}\n\n\t$handleFileMatch(handle: number, session: number, data: UriComponents[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTextMatch(handle: number, session: number, data: IRawFileMatch2[]): void {\n\t\tconst provider = this._searchProvider.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Got result for unknown provider');\n\t\t}\n\n\t\tprovider.handleFindMatch(session, data);\n\t}\n\n\t$handleTelemetry(eventName: string, data: any): void {\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n}\n\nclass SearchOperation {\n\n\tprivate static _idPool = 0;\n\n\tconstructor(\n\t\treadonly progress?: (match: IFileMatch) => any,\n\t\treadonly id: number = ++SearchOperation._idPool,\n\t\treadonly matches = new Map<string, IFileMatch>()\n\t) {\n\t\t//\n\t}\n\n\taddMatch(match: IFileMatch): void {\n\t\tif (this.matches.has(match.resource.toString())) {\n\t\t\t// Merge with previous IFileMatches\n\t\t\t// TODO@rob clean up text/file result types\n\t\t\tthis.matches.get(match.resource.toString())!.results!.push(...match.results!);\n\t\t} else {\n\t\t\tthis.matches.set(match.resource.toString(), match);\n\t\t}\n\n\t\tif (this.progress) {\n\t\t\tthis.progress(match);\n\t\t}\n\t}\n}\n\nclass RemoteSearchProvider implements ISearchResultProvider, IDisposable {\n\n\tprivate readonly _registrations: IDisposable[];\n\tprivate readonly _searches = new Map<number, SearchOperation>();\n\n\tconstructor(\n\t\tsearchService: ISearchService,\n\t\ttype: SearchProviderType,\n\t\tprivate readonly _scheme: string,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _proxy: ExtHostSearchShape\n\t) {\n\t\tthis._registrations = [searchService.registerSearchResultProvider(this._scheme, type, this)];\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._registrations);\n\t}\n\n\tfileSearch(query: IFileQuery, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, undefined, token);\n\t}\n\n\ttextSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, onProgress, token);\n\t}\n\n\tdoSearch(query: ITextQuery | IFileQuery, onProgress?: (p: ISearchProgressItem) => void, token: CancellationToken = CancellationToken.None): Promise<ISearchComplete> {\n\t\tif (!query.folderQueries.length) {\n\t\t\tthrow new Error('Empty folderQueries');\n\t\t}\n\n\t\tconst search = new SearchOperation(onProgress);\n\t\tthis._searches.set(search.id, search);\n\n\t\tconst searchP = query.type === QueryType.File\n\t\t\t? this._proxy.$provideFileSearchResults(this._handle, search.id, query, token)\n\t\t\t: this._proxy.$provideTextSearchResults(this._handle, search.id, query, token);\n\n\t\treturn Promise.resolve(searchP).then((result: ISearchCompleteStats) => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn { results: values(search.matches), stats: result.stats, limitHit: result.limitHit };\n\t\t}, err => {\n\t\t\tthis._searches.delete(search.id);\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$clearCache(cacheKey));\n\t}\n\n\thandleFindMatch(session: number, dataOrUri: Array<UriComponents | IRawFileMatch2>): void {\n\t\tconst searchOp = this._searches.get(session);\n\n\t\tif (!searchOp) {\n\t\t\t// ignore...\n\t\t\treturn;\n\t\t}\n\n\t\tdataOrUri.forEach(result => {\n\t\t\tif ((<IRawFileMatch2>result).results) {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive((<IRawFileMatch2>result).resource),\n\t\t\t\t\tresults: (<IRawFileMatch2>result).results\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsearchOp.addMatch({\n\t\t\t\t\tresource: URI.revive(result)\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n"]}]}