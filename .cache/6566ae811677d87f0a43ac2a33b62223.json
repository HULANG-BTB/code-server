{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/workbench/common/editor\", \"vs/workbench/services/layout/browser/layoutService\"], function (require, exports, dom, event_1, lifecycle_1, uri_1, editor_1, layoutService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WebviewEditorInput = class WebviewEditorInput extends editor_1.EditorInput {\n        constructor(viewType, id, name, options, state, events, extension, _layoutService) {\n            super();\n            this.viewType = viewType;\n            this._layoutService = _layoutService;\n            this._html = '';\n            this._currentWebviewHtml = '';\n            this._webviewDisposables = [];\n            this._scrollYPercentage = 0;\n            this._onDidChangeIcon = this._register(new event_1.Emitter());\n            this.onDidChangeIcon = this._onDidChangeIcon.event;\n            if (typeof id === 'number') {\n                this._id = id;\n                WebviewEditorInput.handlePool = Math.max(id, WebviewEditorInput.handlePool) + 1;\n            }\n            else {\n                this._id = WebviewEditorInput.handlePool++;\n            }\n            this._name = name;\n            this._options = options;\n            this._events = events;\n            this._state = state;\n            this.extension = extension;\n        }\n        static updateStyleElement(id, iconPath) {\n            if (!this._styleElement) {\n                this._styleElement = dom.createStyleSheet();\n                this._styleElement.className = 'webview-icons';\n            }\n            if (!iconPath) {\n                this._icons.delete(id);\n            }\n            else {\n                this._icons.set(id, iconPath);\n            }\n            const cssRules = [];\n            this._icons.forEach((value, key) => {\n                const webviewSelector = `.show-file-icons .webview-${key}-name-file-icon::before`;\n                if (uri_1.URI.isUri(value)) {\n                    cssRules.push(`${webviewSelector} { content: \"\"; background-image: url(${value.toString()}); }`);\n                }\n                else {\n                    cssRules.push(`.vs ${webviewSelector} { content: \"\"; background-image: url(${value.light.toString()}); }`);\n                    cssRules.push(`.vs-dark ${webviewSelector} { content: \"\"; background-image: url(${value.dark.toString()}); }`);\n                }\n            });\n            this._styleElement.innerHTML = cssRules.join('\\n');\n        }\n        getTypeId() {\n            return WebviewEditorInput.typeId;\n        }\n        getId() {\n            return this._id;\n        }\n        dispose() {\n            this.disposeWebview();\n            if (this._container) {\n                this._container.remove();\n                this._container = undefined;\n            }\n            if (this._events && this._events.onDispose) {\n                this._events.onDispose();\n            }\n            this._events = undefined;\n            this._webview = undefined;\n            super.dispose();\n        }\n        getResource() {\n            return uri_1.URI.from({\n                scheme: 'webview-panel',\n                path: `webview-panel/webview-${this._id}`\n            });\n        }\n        getName() {\n            return this._name;\n        }\n        getTitle() {\n            return this.getName();\n        }\n        getDescription() {\n            return null;\n        }\n        setName(value) {\n            this._name = value;\n            this._onDidChangeLabel.fire();\n        }\n        get iconPath() {\n            return this._iconPath;\n        }\n        set iconPath(value) {\n            this._iconPath = value;\n            WebviewEditorInput.updateStyleElement(this._id, value);\n        }\n        matches(other) {\n            return other === this || (other instanceof WebviewEditorInput && other._id === this._id);\n        }\n        get group() {\n            return this._group;\n        }\n        get html() {\n            return this._html;\n        }\n        set html(value) {\n            if (value === this._currentWebviewHtml) {\n                return;\n            }\n            this._html = value;\n            if (this._webview) {\n                this._webview.contents = value;\n                this._currentWebviewHtml = value;\n            }\n        }\n        get state() {\n            return this._state;\n        }\n        set state(value) {\n            this._state = value;\n        }\n        get webviewState() {\n            return this._state.state;\n        }\n        get options() {\n            return this._options;\n        }\n        setOptions(value) {\n            this._options = Object.assign({}, this._options, value);\n            if (this._webview) {\n                this._webview.options = {\n                    allowScripts: this._options.enableScripts,\n                    localResourceRoots: this._options.localResourceRoots,\n                    portMappings: this._options.portMapping,\n                };\n            }\n        }\n        resolve() {\n            return Promise.resolve(new editor_1.EditorModel());\n        }\n        supportsSplitEditor() {\n            return false;\n        }\n        get container() {\n            if (!this._container) {\n                this._container = document.createElement('div');\n                this._container.id = `webview-${this._id}`;\n                const part = this._layoutService.getContainer(layoutService_1.Parts.EDITOR_PART);\n                part.appendChild(this._container);\n            }\n            return this._container;\n        }\n        get webview() {\n            return this._webview;\n        }\n        set webview(value) {\n            this._webviewDisposables = lifecycle_1.dispose(this._webviewDisposables);\n            this._webview = value;\n            if (!this._webview) {\n                return;\n            }\n            this._webview.onDidClickLink(link => {\n                if (this._events && this._events.onDidClickLink) {\n                    this._events.onDidClickLink(link, this._options);\n                }\n            }, null, this._webviewDisposables);\n            this._webview.onMessage(message => {\n                if (this._events && this._events.onMessage) {\n                    this._events.onMessage(message);\n                }\n            }, null, this._webviewDisposables);\n            this._webview.onDidScroll(message => {\n                this._scrollYPercentage = message.scrollYPercentage;\n            }, null, this._webviewDisposables);\n            this._webview.onDidUpdateState(newState => {\n                this._state.state = newState;\n            }, null, this._webviewDisposables);\n        }\n        get scrollYPercentage() {\n            return this._scrollYPercentage;\n        }\n        claimWebview(owner) {\n            this._webviewOwner = owner;\n        }\n        releaseWebview(owner) {\n            if (this._webviewOwner === owner) {\n                this._webviewOwner = undefined;\n                if (this._options.retainContextWhenHidden && this._container) {\n                    this._container.style.visibility = 'hidden';\n                }\n                else {\n                    this.disposeWebview();\n                }\n            }\n        }\n        disposeWebview() {\n            // The input owns the webview and its parent\n            if (this._webview) {\n                this._webview.dispose();\n                this._webview = undefined;\n            }\n            this._webviewDisposables = lifecycle_1.dispose(this._webviewDisposables);\n            this._webviewOwner = undefined;\n            if (this._container) {\n                this._container.style.visibility = 'hidden';\n            }\n            this._currentWebviewHtml = '';\n        }\n        updateGroup(group) {\n            this._group = group;\n        }\n    };\n    WebviewEditorInput.handlePool = 0;\n    WebviewEditorInput._icons = new Map();\n    WebviewEditorInput.typeId = 'workbench.editors.webviewInput';\n    WebviewEditorInput = __decorate([\n        __param(7, layoutService_1.IWorkbenchLayoutService)\n    ], WebviewEditorInput);\n    exports.WebviewEditorInput = WebviewEditorInput;\n    let RevivedWebviewEditorInput = class RevivedWebviewEditorInput extends WebviewEditorInput {\n        constructor(viewType, id, name, options, state, events, extension, reviver, partService) {\n            super(viewType, id, name, options, state, events, extension, partService);\n            this.reviver = reviver;\n            this._revived = false;\n        }\n        resolve() {\n            const _super = Object.create(null, {\n                resolve: { get: () => super.resolve }\n            });\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!this._revived) {\n                    this._revived = true;\n                    yield this.reviver(this);\n                }\n                return _super.resolve.call(this);\n            });\n        }\n    };\n    RevivedWebviewEditorInput = __decorate([\n        __param(8, layoutService_1.IWorkbenchLayoutService)\n    ], RevivedWebviewEditorInput);\n    exports.RevivedWebviewEditorInput = RevivedWebviewEditorInput;\n});\n",null]}