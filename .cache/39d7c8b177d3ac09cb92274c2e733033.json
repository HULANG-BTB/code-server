{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar map_1 = require(\"vs/base/common/map\");\n/**\n * The normalize() method returns the Unicode Normalization Form of a given string. The form will be\n * the Normalization Form Canonical Composition.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize}\n */\nexports.canNormalize = typeof (''.normalize) === 'function';\nvar nfcCache = new map_1.LRUCache(10000); // bounded to 10000 elements\nfunction normalizeNFC(str) {\n    return normalize(str, 'NFC', nfcCache);\n}\nexports.normalizeNFC = normalizeNFC;\nvar nfdCache = new map_1.LRUCache(10000); // bounded to 10000 elements\nfunction normalizeNFD(str) {\n    return normalize(str, 'NFD', nfdCache);\n}\nexports.normalizeNFD = normalizeNFD;\nvar nonAsciiCharactersPattern = /[^\\u0000-\\u0080]/;\nfunction normalize(str, form, normalizedCache) {\n    if (!exports.canNormalize || !str) {\n        return str;\n    }\n    var cached = normalizedCache.get(str);\n    if (cached) {\n        return cached;\n    }\n    var res;\n    if (nonAsciiCharactersPattern.test(str)) {\n        res = str.normalize(form);\n    }\n    else {\n        res = str;\n    }\n    // Use the cache for fast lookup\n    normalizedCache.set(str, res);\n    return res;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,0CAA8C;AAE9C;;;;;GAKG;AACU,QAAA,YAAY,GAAG,OAAO,CAAO,EAAG,CAAC,SAAS,CAAC,KAAK,UAAU,CAAC;AAExE,IAAM,QAAQ,GAAG,IAAI,cAAQ,CAAiB,KAAK,CAAC,CAAC,CAAC,4BAA4B;AAClF,SAAgB,YAAY,CAAC,GAAW;IACvC,OAAO,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;AAFD,oCAEC;AAED,IAAM,QAAQ,GAAG,IAAI,cAAQ,CAAiB,KAAK,CAAC,CAAC,CAAC,4BAA4B;AAClF,SAAgB,YAAY,CAAC,GAAW;IACvC,OAAO,SAAS,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;AAFD,oCAEC;AAED,IAAM,yBAAyB,GAAG,kBAAkB,CAAC;AACrD,SAAS,SAAS,CAAC,GAAW,EAAE,IAAY,EAAE,eAAyC;IACtF,IAAI,CAAC,oBAAY,IAAI,CAAC,GAAG,EAAE;QAC1B,OAAO,GAAG,CAAC;KACX;IAED,IAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,MAAM,EAAE;QACX,OAAO,MAAM,CAAC;KACd;IAED,IAAI,GAAW,CAAC;IAChB,IAAI,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACxC,GAAG,GAAS,GAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACjC;SAAM;QACN,GAAG,GAAG,GAAG,CAAC;KACV;IAED,gCAAgC;IAChC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE9B,OAAO,GAAG,CAAC;AACZ,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LRUCache } from 'vs/base/common/map';\n\n/**\n * The normalize() method returns the Unicode Normalization Form of a given string. The form will be\n * the Normalization Form Canonical Composition.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize}\n */\nexport const canNormalize = typeof ((<any>'').normalize) === 'function';\n\nconst nfcCache = new LRUCache<string, string>(10000); // bounded to 10000 elements\nexport function normalizeNFC(str: string): string {\n\treturn normalize(str, 'NFC', nfcCache);\n}\n\nconst nfdCache = new LRUCache<string, string>(10000); // bounded to 10000 elements\nexport function normalizeNFD(str: string): string {\n\treturn normalize(str, 'NFD', nfdCache);\n}\n\nconst nonAsciiCharactersPattern = /[^\\u0000-\\u0080]/;\nfunction normalize(str: string, form: string, normalizedCache: LRUCache<string, string>): string {\n\tif (!canNormalize || !str) {\n\t\treturn str;\n\t}\n\n\tconst cached = normalizedCache.get(str);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tlet res: string;\n\tif (nonAsciiCharactersPattern.test(str)) {\n\t\tres = (<any>str).normalize(form);\n\t} else {\n\t\tres = str;\n\t}\n\n\t// Use the cache for fast lookup\n\tnormalizedCache.set(str, res);\n\n\treturn res;\n}\n"]}]}