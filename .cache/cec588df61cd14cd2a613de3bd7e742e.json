{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extensionsRegistry = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar nls = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar configurationResolverSchema_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolverSchema\");\n// debuggers extension point\nexports.debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'debuggers',\n    defaultExtensionKind: 'workspace',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),\n        type: 'array',\n        defaultSnippets: [{ body: [{ type: '', extensions: [] }] }],\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { type: '', program: '', runtime: '', enableBreakpointsFor: { languageIds: [''] } } }],\n            properties: {\n                type: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.type', \"Unique identifier for this debug adapter.\"),\n                    type: 'string'\n                },\n                label: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.label', \"Display name for this debug adapter.\"),\n                    type: 'string'\n                },\n                program: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.program', \"Path to the debug adapter program. Path is either absolute or relative to the extension folder.\"),\n                    type: 'string'\n                },\n                args: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.args', \"Optional arguments to pass to the adapter.\"),\n                    type: 'array'\n                },\n                runtime: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.runtime', \"Optional runtime in case the program attribute is not an executable but requires a runtime.\"),\n                    type: 'string'\n                },\n                runtimeArgs: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', \"Optional runtime arguments.\"),\n                    type: 'array'\n                },\n                variables: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.variables', \"Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command.\"),\n                    type: 'object'\n                },\n                initialConfigurations: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', \"Configurations for generating the initial \\'launch.json\\'.\"),\n                    type: ['array', 'string'],\n                },\n                languages: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.languages', \"List of languages for which the debug extension could be considered the \\\"default debugger\\\".\"),\n                    type: 'array'\n                },\n                adapterExecutableCommand: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.adapterExecutableCommand', \"If specified VS Code will call this command to determine the executable path of the debug adapter and the arguments to pass.\"),\n                    type: 'string'\n                },\n                configurationSnippets: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', \"Snippets for adding new configurations in \\'launch.json\\'.\"),\n                    type: 'array'\n                },\n                configurationAttributes: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', \"JSON schema configurations for validating \\'launch.json\\'.\"),\n                    type: 'object'\n                },\n                windows: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.windows', \"Windows specific settings.\"),\n                    type: 'object',\n                    properties: {\n                        runtime: {\n                            description: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', \"Runtime used for Windows.\"),\n                            type: 'string'\n                        }\n                    }\n                },\n                osx: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.osx', \"macOS specific settings.\"),\n                    type: 'object',\n                    properties: {\n                        runtime: {\n                            description: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', \"Runtime used for macOS.\"),\n                            type: 'string'\n                        }\n                    }\n                },\n                linux: {\n                    description: nls.localize('vscode.extension.contributes.debuggers.linux', \"Linux specific settings.\"),\n                    type: 'object',\n                    properties: {\n                        runtime: {\n                            description: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', \"Runtime used for Linux.\"),\n                            type: 'string'\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n// breakpoints extension point #9037\nexports.breakpointsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'breakpoints',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),\n        type: 'array',\n        defaultSnippets: [{ body: [{ language: '' }] }],\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { language: '' } }],\n            properties: {\n                language: {\n                    description: nls.localize('vscode.extension.contributes.breakpoints.language', \"Allow breakpoints for this language.\"),\n                    type: 'string'\n                },\n            }\n        }\n    }\n});\n// debug general schema\nvar defaultCompound = { name: 'Compound', configurations: [] };\nexports.launchSchema = {\n    id: configuration_1.launchSchemaId,\n    type: 'object',\n    title: nls.localize('app.launch.json.title', \"Launch\"),\n    required: [],\n    default: { version: '0.2.0', configurations: [], compounds: [] },\n    properties: {\n        version: {\n            type: 'string',\n            description: nls.localize('app.launch.json.version', \"Version of this file format.\"),\n            default: '0.2.0'\n        },\n        configurations: {\n            type: 'array',\n            description: nls.localize('app.launch.json.configurations', \"List of configurations. Add new configurations or edit existing ones by using IntelliSense.\"),\n            items: {\n                defaultSnippets: [],\n                'type': 'object',\n                oneOf: []\n            }\n        },\n        compounds: {\n            type: 'array',\n            description: nls.localize('app.launch.json.compounds', \"List of compounds. Each compound references multiple configurations which will get launched together.\"),\n            items: {\n                type: 'object',\n                required: ['name', 'configurations'],\n                properties: {\n                    name: {\n                        type: 'string',\n                        description: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n                    },\n                    configurations: {\n                        type: 'array',\n                        default: [],\n                        items: {\n                            oneOf: [{\n                                    enum: [],\n                                    description: nls.localize('useUniqueNames', \"Please use unique configuration names.\")\n                                }, {\n                                    type: 'object',\n                                    required: ['name'],\n                                    properties: {\n                                        name: {\n                                            enum: [],\n                                            description: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n                                        },\n                                        folder: {\n                                            enum: [],\n                                            description: nls.localize('app.launch.json.compound.folder', \"Name of folder in which the compound is located.\")\n                                        }\n                                    }\n                                }]\n                        },\n                        description: nls.localize('app.launch.json.compounds.configurations', \"Names of configurations that will be started as part of this compound.\")\n                    }\n                },\n                default: defaultCompound\n            },\n            default: [\n                defaultCompound\n            ]\n        },\n        inputs: configurationResolverSchema_1.inputsSchema.definitions.inputs\n    }\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extensionsRegistry from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport * as nls from 'vs/nls';\nimport { IDebuggerContribution, ICompound } from 'vs/workbench/contrib/debug/common/debug';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { inputsSchema } from 'vs/workbench/services/configurationResolver/common/configurationResolverSchema';\n\n// debuggers extension point\nexport const debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IDebuggerContribution[]>({\n\textensionPoint: 'debuggers',\n\tdefaultExtensionKind: 'workspace',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ type: '', extensions: [] }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { type: '', program: '', runtime: '', enableBreakpointsFor: { languageIds: [''] } } }],\n\t\t\tproperties: {\n\t\t\t\ttype: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.type', \"Unique identifier for this debug adapter.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.label', \"Display name for this debug adapter.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tprogram: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.program', \"Path to the debug adapter program. Path is either absolute or relative to the extension folder.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\targs: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.args', \"Optional arguments to pass to the adapter.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\truntime: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtime', \"Optional runtime in case the program attribute is not an executable but requires a runtime.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\truntimeArgs: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', \"Optional runtime arguments.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tvariables: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.variables', \"Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command.\"),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\tinitialConfigurations: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', \"Configurations for generating the initial \\'launch.json\\'.\"),\n\t\t\t\t\ttype: ['array', 'string'],\n\t\t\t\t},\n\t\t\t\tlanguages: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.languages', \"List of languages for which the debug extension could be considered the \\\"default debugger\\\".\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tadapterExecutableCommand: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.adapterExecutableCommand', \"If specified VS Code will call this command to determine the executable path of the debug adapter and the arguments to pass.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tconfigurationSnippets: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', \"Snippets for adding new configurations in \\'launch.json\\'.\"),\n\t\t\t\t\ttype: 'array'\n\t\t\t\t},\n\t\t\t\tconfigurationAttributes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', \"JSON schema configurations for validating \\'launch.json\\'.\"),\n\t\t\t\t\ttype: 'object'\n\t\t\t\t},\n\t\t\t\twindows: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows', \"Windows specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', \"Runtime used for Windows.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tosx: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx', \"macOS specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', \"Runtime used for macOS.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tlinux: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux', \"Linux specific settings.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\truntime: {\n\t\t\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', \"Runtime used for Linux.\"),\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport interface IRawBreakpointContribution {\n\tlanguage: string;\n}\n\n// breakpoints extension point #9037\nexport const breakpointsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IRawBreakpointContribution[]>({\n\textensionPoint: 'breakpoints',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),\n\t\ttype: 'array',\n\t\tdefaultSnippets: [{ body: [{ language: '' }] }],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { language: '' } }],\n\t\t\tproperties: {\n\t\t\t\tlanguage: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.breakpoints.language', \"Allow breakpoints for this language.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n});\n\n// debug general schema\nconst defaultCompound: ICompound = { name: 'Compound', configurations: [] };\nexport const launchSchema: IJSONSchema = {\n\tid: launchSchemaId,\n\ttype: 'object',\n\ttitle: nls.localize('app.launch.json.title', \"Launch\"),\n\trequired: [],\n\tdefault: { version: '0.2.0', configurations: [], compounds: [] },\n\tproperties: {\n\t\tversion: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('app.launch.json.version', \"Version of this file format.\"),\n\t\t\tdefault: '0.2.0'\n\t\t},\n\t\tconfigurations: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('app.launch.json.configurations', \"List of configurations. Add new configurations or edit existing ones by using IntelliSense.\"),\n\t\t\titems: {\n\t\t\t\tdefaultSnippets: [],\n\t\t\t\t'type': 'object',\n\t\t\t\toneOf: []\n\t\t\t}\n\t\t},\n\t\tcompounds: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('app.launch.json.compounds', \"List of compounds. Each compound references multiple configurations which will get launched together.\"),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['name', 'configurations'],\n\t\t\t\tproperties: {\n\t\t\t\t\tname: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n\t\t\t\t\t},\n\t\t\t\t\tconfigurations: {\n\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\tdefault: [],\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\toneOf: [{\n\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\tdescription: nls.localize('useUniqueNames', \"Please use unique configuration names.\")\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\trequired: ['name'],\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfolder: {\n\t\t\t\t\t\t\t\t\t\tenum: [],\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compound.folder', \"Name of folder in which the compound is located.\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdescription: nls.localize('app.launch.json.compounds.configurations', \"Names of configurations that will be started as part of this compound.\")\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdefault: defaultCompound\n\t\t\t},\n\t\t\tdefault: [\n\t\t\t\tdefaultCompound\n\t\t\t]\n\t\t},\n\t\tinputs: inputsSchema.definitions!.inputs\n\t}\n};\n"]}]}