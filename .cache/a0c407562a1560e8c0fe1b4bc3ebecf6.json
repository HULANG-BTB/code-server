{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/toolbar/toolbar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/toolbar/toolbar.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./toolbar\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar dropdown_1 = require(\"vs/base/browser/ui/dropdown/dropdown\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar types_1 = require(\"vs/base/common/types\");\nexports.CONTEXT = 'context.toolbar';\n/**\n * A widget that combines an action bar for primary actions and a dropdown for secondary actions.\n */\nvar ToolBar = /** @class */ (function (_super) {\n    tslib_1.__extends(ToolBar, _super);\n    function ToolBar(container, contextMenuProvider, options) {\n        if (options === void 0) { options = { orientation: actionbar_1.ActionsOrientation.HORIZONTAL }; }\n        var _this = _super.call(this) || this;\n        _this.options = options;\n        _this.lookupKeybindings = typeof _this.options.getKeyBinding === 'function';\n        _this.toggleMenuAction = _this._register(new ToggleMenuAction(function () { return _this.toggleMenuActionItem && _this.toggleMenuActionItem.show(); }, options.toggleMenuTitle));\n        var element = document.createElement('div');\n        element.className = 'monaco-toolbar';\n        container.appendChild(element);\n        _this.actionBar = _this._register(new actionbar_1.ActionBar(element, {\n            orientation: options.orientation,\n            ariaLabel: options.ariaLabel,\n            actionRunner: options.actionRunner,\n            actionItemProvider: function (action) {\n                // Return special action item for the toggle menu action\n                if (action.id === ToggleMenuAction.ID) {\n                    // Dispose old\n                    if (_this.toggleMenuActionItem) {\n                        _this.toggleMenuActionItem.dispose();\n                    }\n                    // Create new\n                    _this.toggleMenuActionItem = new dropdown_1.DropdownMenuActionItem(action, action.menuActions, contextMenuProvider, _this.options.actionItemProvider, _this.actionRunner, _this.options.getKeyBinding, 'toolbar-toggle-more', _this.options.anchorAlignmentProvider);\n                    _this.toggleMenuActionItem.setActionContext(_this.actionBar.context);\n                    return _this.toggleMenuActionItem;\n                }\n                return options.actionItemProvider ? options.actionItemProvider(action) : undefined;\n            }\n        }));\n        return _this;\n    }\n    Object.defineProperty(ToolBar.prototype, \"actionRunner\", {\n        get: function () {\n            return this.actionBar.actionRunner;\n        },\n        set: function (actionRunner) {\n            this.actionBar.actionRunner = actionRunner;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ToolBar.prototype, \"context\", {\n        set: function (context) {\n            this.actionBar.context = context;\n            if (this.toggleMenuActionItem) {\n                this.toggleMenuActionItem.setActionContext(context);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToolBar.prototype.getContainer = function () {\n        return this.actionBar.getContainer();\n    };\n    ToolBar.prototype.getItemsWidth = function () {\n        var itemsWidth = 0;\n        for (var i = 0; i < this.actionBar.length(); i++) {\n            itemsWidth += this.actionBar.getWidth(i);\n        }\n        return itemsWidth;\n    };\n    ToolBar.prototype.setAriaLabel = function (label) {\n        this.actionBar.setAriaLabel(label);\n    };\n    ToolBar.prototype.setActions = function (primaryActions, secondaryActions) {\n        var _this = this;\n        return function () {\n            var primaryActionsToSet = primaryActions ? primaryActions.slice(0) : [];\n            // Inject additional action to open secondary actions if present\n            _this.hasSecondaryActions = !!(secondaryActions && secondaryActions.length > 0);\n            if (_this.hasSecondaryActions && secondaryActions) {\n                _this.toggleMenuAction.menuActions = secondaryActions.slice(0);\n                primaryActionsToSet.push(_this.toggleMenuAction);\n            }\n            _this.actionBar.clear();\n            primaryActionsToSet.forEach(function (action) {\n                _this.actionBar.push(action, { icon: true, label: false, keybinding: _this.getKeybindingLabel(action) });\n            });\n        };\n    };\n    ToolBar.prototype.getKeybindingLabel = function (action) {\n        var key = this.lookupKeybindings && this.options.getKeyBinding ? this.options.getKeyBinding(action) : undefined;\n        return types_1.withNullAsUndefined(key && key.getLabel());\n    };\n    ToolBar.prototype.addPrimaryAction = function (primaryAction) {\n        var _this = this;\n        return function () {\n            // Add after the \"...\" action if we have secondary actions\n            if (_this.hasSecondaryActions) {\n                var itemCount = _this.actionBar.length();\n                _this.actionBar.push(primaryAction, { icon: true, label: false, index: itemCount, keybinding: _this.getKeybindingLabel(primaryAction) });\n            }\n            // Otherwise just add to the end\n            else {\n                _this.actionBar.push(primaryAction, { icon: true, label: false, keybinding: _this.getKeybindingLabel(primaryAction) });\n            }\n        };\n    };\n    ToolBar.prototype.dispose = function () {\n        if (this.toggleMenuActionItem) {\n            this.toggleMenuActionItem.dispose();\n            this.toggleMenuActionItem = undefined;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    return ToolBar;\n}(lifecycle_1.Disposable));\nexports.ToolBar = ToolBar;\nvar ToggleMenuAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleMenuAction, _super);\n    function ToggleMenuAction(toggleDropdownMenu, title) {\n        var _this = this;\n        title = title || nls.localize('moreActions', \"More Actions...\");\n        _this = _super.call(this, ToggleMenuAction.ID, title, undefined, true) || this;\n        _this.toggleDropdownMenu = toggleDropdownMenu;\n        return _this;\n    }\n    ToggleMenuAction.prototype.run = function () {\n        this.toggleDropdownMenu();\n        return Promise.resolve(true);\n    };\n    Object.defineProperty(ToggleMenuAction.prototype, \"menuActions\", {\n        get: function () {\n            return this._menuActions;\n        },\n        set: function (actions) {\n            this._menuActions = actions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToggleMenuAction.ID = 'toolbar.toggle.more';\n    return ToggleMenuAction;\n}(actions_1.Action));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/toolbar/toolbar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/toolbar/toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./toolbar';\nimport * as nls from 'vs/nls';\nimport { Action, IActionRunner, IAction } from 'vs/base/common/actions';\nimport { ActionBar, ActionsOrientation, IActionItemProvider } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IContextMenuProvider, DropdownMenuActionItem } from 'vs/base/browser/ui/dropdown/dropdown';\nimport { ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { AnchorAlignment } from 'vs/base/browser/ui/contextview/contextview';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport const CONTEXT = 'context.toolbar';\n\nexport interface IToolBarOptions {\n\torientation?: ActionsOrientation;\n\tactionItemProvider?: IActionItemProvider;\n\tariaLabel?: string;\n\tgetKeyBinding?: (action: IAction) => ResolvedKeybinding | undefined;\n\tactionRunner?: IActionRunner;\n\ttoggleMenuTitle?: string;\n\tanchorAlignmentProvider?: () => AnchorAlignment;\n}\n\n/**\n * A widget that combines an action bar for primary actions and a dropdown for secondary actions.\n */\nexport class ToolBar extends Disposable {\n\tprivate options: IToolBarOptions;\n\tprivate actionBar: ActionBar;\n\tprivate toggleMenuAction: ToggleMenuAction;\n\tprivate toggleMenuActionItem?: DropdownMenuActionItem;\n\tprivate hasSecondaryActions: boolean;\n\tprivate lookupKeybindings: boolean;\n\n\tconstructor(container: HTMLElement, contextMenuProvider: IContextMenuProvider, options: IToolBarOptions = { orientation: ActionsOrientation.HORIZONTAL }) {\n\t\tsuper();\n\n\t\tthis.options = options;\n\t\tthis.lookupKeybindings = typeof this.options.getKeyBinding === 'function';\n\n\t\tthis.toggleMenuAction = this._register(new ToggleMenuAction(() => this.toggleMenuActionItem && this.toggleMenuActionItem.show(), options.toggleMenuTitle));\n\n\t\tlet element = document.createElement('div');\n\t\telement.className = 'monaco-toolbar';\n\t\tcontainer.appendChild(element);\n\n\t\tthis.actionBar = this._register(new ActionBar(element, {\n\t\t\torientation: options.orientation,\n\t\t\tariaLabel: options.ariaLabel,\n\t\t\tactionRunner: options.actionRunner,\n\t\t\tactionItemProvider: (action: Action) => {\n\n\t\t\t\t// Return special action item for the toggle menu action\n\t\t\t\tif (action.id === ToggleMenuAction.ID) {\n\n\t\t\t\t\t// Dispose old\n\t\t\t\t\tif (this.toggleMenuActionItem) {\n\t\t\t\t\t\tthis.toggleMenuActionItem.dispose();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Create new\n\t\t\t\t\tthis.toggleMenuActionItem = new DropdownMenuActionItem(\n\t\t\t\t\t\taction,\n\t\t\t\t\t\t(<ToggleMenuAction>action).menuActions,\n\t\t\t\t\t\tcontextMenuProvider,\n\t\t\t\t\t\tthis.options.actionItemProvider,\n\t\t\t\t\t\tthis.actionRunner,\n\t\t\t\t\t\tthis.options.getKeyBinding,\n\t\t\t\t\t\t'toolbar-toggle-more',\n\t\t\t\t\t\tthis.options.anchorAlignmentProvider\n\t\t\t\t\t);\n\t\t\t\t\tthis.toggleMenuActionItem!.setActionContext(this.actionBar.context);\n\n\t\t\t\t\treturn this.toggleMenuActionItem;\n\t\t\t\t}\n\n\t\t\t\treturn options.actionItemProvider ? options.actionItemProvider(action) : undefined;\n\t\t\t}\n\t\t}));\n\t}\n\n\tset actionRunner(actionRunner: IActionRunner) {\n\t\tthis.actionBar.actionRunner = actionRunner;\n\t}\n\n\tget actionRunner(): IActionRunner {\n\t\treturn this.actionBar.actionRunner;\n\t}\n\n\tset context(context: any) {\n\t\tthis.actionBar.context = context;\n\t\tif (this.toggleMenuActionItem) {\n\t\t\tthis.toggleMenuActionItem.setActionContext(context);\n\t\t}\n\t}\n\n\tgetContainer(): HTMLElement {\n\t\treturn this.actionBar.getContainer();\n\t}\n\n\tgetItemsWidth(): number {\n\t\tlet itemsWidth = 0;\n\t\tfor (let i = 0; i < this.actionBar.length(); i++) {\n\t\t\titemsWidth += this.actionBar.getWidth(i);\n\t\t}\n\t\treturn itemsWidth;\n\t}\n\n\tsetAriaLabel(label: string): void {\n\t\tthis.actionBar.setAriaLabel(label);\n\t}\n\n\tsetActions(primaryActions: IAction[], secondaryActions?: IAction[]): () => void {\n\t\treturn () => {\n\t\t\tlet primaryActionsToSet = primaryActions ? primaryActions.slice(0) : [];\n\n\t\t\t// Inject additional action to open secondary actions if present\n\t\t\tthis.hasSecondaryActions = !!(secondaryActions && secondaryActions.length > 0);\n\t\t\tif (this.hasSecondaryActions && secondaryActions) {\n\t\t\t\tthis.toggleMenuAction.menuActions = secondaryActions.slice(0);\n\t\t\t\tprimaryActionsToSet.push(this.toggleMenuAction);\n\t\t\t}\n\n\t\t\tthis.actionBar.clear();\n\n\t\t\tprimaryActionsToSet.forEach(action => {\n\t\t\t\tthis.actionBar.push(action, { icon: true, label: false, keybinding: this.getKeybindingLabel(action) });\n\t\t\t});\n\t\t};\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | undefined {\n\t\tconst key = this.lookupKeybindings && this.options.getKeyBinding ? this.options.getKeyBinding(action) : undefined;\n\n\t\treturn withNullAsUndefined(key && key.getLabel());\n\t}\n\n\taddPrimaryAction(primaryAction: IAction): () => void {\n\t\treturn () => {\n\n\t\t\t// Add after the \"...\" action if we have secondary actions\n\t\t\tif (this.hasSecondaryActions) {\n\t\t\t\tlet itemCount = this.actionBar.length();\n\t\t\t\tthis.actionBar.push(primaryAction, { icon: true, label: false, index: itemCount, keybinding: this.getKeybindingLabel(primaryAction) });\n\t\t\t}\n\n\t\t\t// Otherwise just add to the end\n\t\t\telse {\n\t\t\t\tthis.actionBar.push(primaryAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(primaryAction) });\n\t\t\t}\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tif (this.toggleMenuActionItem) {\n\t\t\tthis.toggleMenuActionItem.dispose();\n\t\t\tthis.toggleMenuActionItem = undefined;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}\n\nclass ToggleMenuAction extends Action {\n\n\tstatic readonly ID = 'toolbar.toggle.more';\n\n\tprivate _menuActions: IAction[];\n\tprivate toggleDropdownMenu: () => void;\n\n\tconstructor(toggleDropdownMenu: () => void, title?: string) {\n\t\ttitle = title || nls.localize('moreActions', \"More Actions...\");\n\t\tsuper(ToggleMenuAction.ID, title, undefined, true);\n\n\t\tthis.toggleDropdownMenu = toggleDropdownMenu;\n\t}\n\n\trun(): Promise<any> {\n\t\tthis.toggleDropdownMenu();\n\n\t\treturn Promise.resolve(true);\n\t}\n\n\tget menuActions() {\n\t\treturn this._menuActions;\n\t}\n\n\tset menuActions(actions: IAction[]) {\n\t\tthis._menuActions = actions;\n\t}\n}"]}]}