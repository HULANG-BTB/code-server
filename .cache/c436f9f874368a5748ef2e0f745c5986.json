{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocumentsAndEditors.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDocumentsAndEditors.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/assert\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostDocumentData\", \"vs/workbench/api/node/extHostTextEditor\", \"vs/workbench/api/node/extHostTypeConverters\"], function (require, exports, assert, event_1, lifecycle_1, uri_1, extHost_protocol_1, extHostDocumentData_1, extHostTextEditor_1, typeConverters) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostDocumentsAndEditors {\n        constructor(_mainContext) {\n            this._mainContext = _mainContext;\n            this._disposables = [];\n            this._editors = new Map();\n            this._documents = new Map();\n            this._onDidAddDocuments = new event_1.Emitter();\n            this._onDidRemoveDocuments = new event_1.Emitter();\n            this._onDidChangeVisibleTextEditors = new event_1.Emitter();\n            this._onDidChangeActiveTextEditor = new event_1.Emitter();\n            this.onDidAddDocuments = this._onDidAddDocuments.event;\n            this.onDidRemoveDocuments = this._onDidRemoveDocuments.event;\n            this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event;\n            this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event;\n        }\n        dispose() {\n            this._disposables = lifecycle_1.dispose(this._disposables);\n        }\n        $acceptDocumentsAndEditorsDelta(delta) {\n            const removedDocuments = [];\n            const addedDocuments = [];\n            const removedEditors = [];\n            if (delta.removedDocuments) {\n                for (const uriComponent of delta.removedDocuments) {\n                    const uri = uri_1.URI.revive(uriComponent);\n                    const id = uri.toString();\n                    const data = this._documents.get(id);\n                    this._documents.delete(id);\n                    if (data) {\n                        removedDocuments.push(data);\n                    }\n                }\n            }\n            if (delta.addedDocuments) {\n                for (const data of delta.addedDocuments) {\n                    const resource = uri_1.URI.revive(data.uri);\n                    assert.ok(!this._documents.has(resource.toString()), `document '${resource} already exists!'`);\n                    const documentData = new extHostDocumentData_1.ExtHostDocumentData(this._mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadDocuments), resource, data.lines, data.EOL, data.modeId, data.versionId, data.isDirty);\n                    this._documents.set(resource.toString(), documentData);\n                    addedDocuments.push(documentData);\n                }\n            }\n            if (delta.removedEditors) {\n                for (const id of delta.removedEditors) {\n                    const editor = this._editors.get(id);\n                    this._editors.delete(id);\n                    if (editor) {\n                        removedEditors.push(editor);\n                    }\n                }\n            }\n            if (delta.addedEditors) {\n                for (const data of delta.addedEditors) {\n                    const resource = uri_1.URI.revive(data.documentUri);\n                    assert.ok(this._documents.has(resource.toString()), `document '${resource}' does not exist`);\n                    assert.ok(!this._editors.has(data.id), `editor '${data.id}' already exists!`);\n                    const documentData = this._documents.get(resource.toString());\n                    const editor = new extHostTextEditor_1.ExtHostTextEditor(this._mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadTextEditors), data.id, documentData, data.selections.map(typeConverters.Selection.to), data.options, data.visibleRanges.map(range => typeConverters.Range.to(range)), typeof data.editorPosition === 'number' ? typeConverters.ViewColumn.to(data.editorPosition) : undefined);\n                    this._editors.set(data.id, editor);\n                }\n            }\n            if (delta.newActiveEditor !== undefined) {\n                assert.ok(delta.newActiveEditor === null || this._editors.has(delta.newActiveEditor), `active editor '${delta.newActiveEditor}' does not exist`);\n                this._activeEditorId = delta.newActiveEditor;\n            }\n            lifecycle_1.dispose(removedDocuments);\n            lifecycle_1.dispose(removedEditors);\n            // now that the internal state is complete, fire events\n            if (delta.removedDocuments) {\n                this._onDidRemoveDocuments.fire(removedDocuments);\n            }\n            if (delta.addedDocuments) {\n                this._onDidAddDocuments.fire(addedDocuments);\n            }\n            if (delta.removedEditors || delta.addedEditors) {\n                this._onDidChangeVisibleTextEditors.fire(this.allEditors());\n            }\n            if (delta.newActiveEditor !== undefined) {\n                this._onDidChangeActiveTextEditor.fire(this.activeEditor());\n            }\n        }\n        getDocument(uri) {\n            return this._documents.get(uri.toString());\n        }\n        allDocuments() {\n            const result = [];\n            this._documents.forEach(data => result.push(data));\n            return result;\n        }\n        getEditor(id) {\n            return this._editors.get(id);\n        }\n        activeEditor() {\n            if (!this._activeEditorId) {\n                return undefined;\n            }\n            else {\n                return this._editors.get(this._activeEditorId);\n            }\n        }\n        allEditors() {\n            const result = [];\n            this._editors.forEach(data => result.push(data));\n            return result;\n        }\n    }\n    exports.ExtHostDocumentsAndEditors = ExtHostDocumentsAndEditors;\n});\n",null]}