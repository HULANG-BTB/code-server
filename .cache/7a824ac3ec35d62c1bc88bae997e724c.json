{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/common/clipboardService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/common/clipboardService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IClipboardService = instantiation_1.createDecorator('clipboardService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/common/clipboardService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/common/clipboardService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAGpE,QAAA,iBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\n\nexport const IClipboardService = createDecorator<IClipboardService>('clipboardService');\n\nexport interface IClipboardService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Writes text to the system clipboard.\n\t */\n\twriteText(text: string, type?: string): void;\n\n\t/**\n\t * Reads the content of the clipboard in plain text\n\t */\n\treadText(type?: string): string;\n\n\t/**\n\t * Reads text from the system find pasteboard.\n\t */\n\treadFindText(): string;\n\n\t/**\n\t * Writes text to the system find pasteboard.\n\t */\n\twriteFindText(text: string): void;\n\n\t/**\n\t * Writes resources to the system clipboard.\n\t */\n\twriteResources(resources: URI[]): void;\n\n\t/**\n\t * Reads resources from the system clipboard.\n\t */\n\treadResources(): URI[];\n\n\t/**\n\t * Find out if resources are copied to the clipboard.\n\t */\n\thasResources(): boolean;\n}\n"]}]}