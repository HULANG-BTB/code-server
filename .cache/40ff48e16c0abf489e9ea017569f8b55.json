{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/accessibility/node/accessibilityService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/platform/accessibility/common/accessibility\", \"vs/base/common/platform\", \"vs/base/common/event\", \"vs/platform/windows/common/windows\"], function (require, exports, accessibility_1, platform_1, event_1, windows_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let AccessibilityService = class AccessibilityService {\n        constructor(windowService) {\n            this.windowService = windowService;\n            this._accessibilitySupport = accessibility_1.AccessibilitySupport.Unknown;\n            this._onDidChangeAccessibilitySupport = new event_1.Emitter();\n            this.onDidChangeAccessibilitySupport = this._onDidChangeAccessibilitySupport.event;\n        }\n        alwaysUnderlineAccessKeys() {\n            if (!platform_1.isWindows) {\n                return Promise.resolve(false);\n            }\n            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n                const Registry = yield new Promise((resolve_1, reject_1) => { require(['vscode-windows-registry'], resolve_1, reject_1); });\n                let value;\n                try {\n                    value = Registry.GetStringRegKey('HKEY_CURRENT_USER', 'Control Panel\\\\Accessibility\\\\Keyboard Preference', 'On');\n                }\n                catch (_a) {\n                    resolve(false);\n                }\n                resolve(value === '1');\n            }));\n        }\n        setAccessibilitySupport(accessibilitySupport) {\n            if (this._accessibilitySupport === accessibilitySupport) {\n                return;\n            }\n            this._accessibilitySupport = accessibilitySupport;\n            this._onDidChangeAccessibilitySupport.fire();\n        }\n        getAccessibilitySupport() {\n            if (this._accessibilitySupport === accessibility_1.AccessibilitySupport.Unknown) {\n                const config = this.windowService.getConfiguration();\n                this._accessibilitySupport = (config && config.accessibilitySupport) ? accessibility_1.AccessibilitySupport.Enabled : accessibility_1.AccessibilitySupport.Disabled;\n            }\n            return this._accessibilitySupport;\n        }\n    };\n    AccessibilityService = __decorate([\n        __param(0, windows_1.IWindowService)\n    ], AccessibilityService);\n    exports.AccessibilityService = AccessibilityService;\n});\n",null]}