{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar TelemetryService = /** @class */ (function () {\n    function TelemetryService(config, _configurationService) {\n        var _this = this;\n        this._configurationService = _configurationService;\n        this._disposables = [];\n        this._cleanupPatterns = [];\n        this._appender = config.appender;\n        this._commonProperties = config.commonProperties || Promise.resolve({});\n        this._piiPaths = config.piiPaths || [];\n        this._userOptIn = true;\n        // static cleanup pattern for: `file:///DANGEROUS/PATH/resources/app/Useful/Information`\n        this._cleanupPatterns = [/file:\\/\\/\\/.*?\\/resources\\/app\\//gi];\n        for (var _i = 0, _a = this._piiPaths; _i < _a.length; _i++) {\n            var piiPath = _a[_i];\n            this._cleanupPatterns.push(new RegExp(strings_1.escapeRegExpCharacters(piiPath), 'gi'));\n        }\n        if (this._configurationService) {\n            this._updateUserOptIn();\n            this._configurationService.onDidChangeConfiguration(this._updateUserOptIn, this, this._disposables);\n            /* __GDPR__\n                \"optInStatus\" : {\n                    \"optIn\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n                }\n            */\n            this.publicLog('optInStatus', { optIn: this._userOptIn });\n            this._commonProperties.then(function (values) {\n                var isHashedId = /^[a-f0-9]+$/i.test(values['common.machineId']);\n                /* __GDPR__\n                    \"machineIdFallback\" : {\n                        \"usingFallbackGuid\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n                    }\n                */\n                _this.publicLog('machineIdFallback', { usingFallbackGuid: !isHashedId });\n            });\n        }\n    }\n    TelemetryService.prototype._updateUserOptIn = function () {\n        var config = this._configurationService.getValue(TELEMETRY_SECTION_ID);\n        this._userOptIn = config ? config.enableTelemetry : this._userOptIn;\n    };\n    Object.defineProperty(TelemetryService.prototype, \"isOptedIn\", {\n        get: function () {\n            return this._userOptIn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TelemetryService.prototype.getTelemetryInfo = function () {\n        return this._commonProperties.then(function (values) {\n            // well known properties\n            var sessionId = values['sessionID'];\n            var instanceId = values['common.instanceId'];\n            var machineId = values['common.machineId'];\n            return { sessionId: sessionId, instanceId: instanceId, machineId: machineId };\n        });\n    };\n    TelemetryService.prototype.dispose = function () {\n        this._disposables = lifecycle_1.dispose(this._disposables);\n    };\n    TelemetryService.prototype.publicLog = function (eventName, data, anonymizeFilePaths) {\n        var _this = this;\n        // don't send events when the user is optout\n        if (!this._userOptIn) {\n            return Promise.resolve(undefined);\n        }\n        return this._commonProperties.then(function (values) {\n            // (first) add common properties\n            data = objects_1.mixin(data, values);\n            // (last) remove all PII from data\n            data = objects_1.cloneAndChange(data, function (value) {\n                if (typeof value === 'string') {\n                    return _this._cleanupInfo(value, anonymizeFilePaths);\n                }\n                return undefined;\n            });\n            _this._appender.log(eventName, data);\n        }, function (err) {\n            // unsure what to do now...\n            console.error(err);\n        });\n    };\n    TelemetryService.prototype._cleanupInfo = function (stack, anonymizeFilePaths) {\n        var updatedStack = stack;\n        if (anonymizeFilePaths) {\n            var cleanUpIndexes = [];\n            for (var _i = 0, _a = this._cleanupPatterns; _i < _a.length; _i++) {\n                var regexp = _a[_i];\n                while (true) {\n                    var result = regexp.exec(stack);\n                    if (!result) {\n                        break;\n                    }\n                    cleanUpIndexes.push([result.index, regexp.lastIndex]);\n                }\n            }\n            var nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n            var fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n            var lastIndex = 0;\n            updatedStack = '';\n            var _loop_1 = function () {\n                var result = fileRegex.exec(stack);\n                if (!result) {\n                    return \"break\";\n                }\n                // Anoynimize user file paths that do not need to be retained or cleaned up.\n                if (!nodeModulesRegex.test(result[0]) && cleanUpIndexes.every(function (_a) {\n                    var x = _a[0], y = _a[1];\n                    return result.index < x || result.index >= y;\n                })) {\n                    updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n                    lastIndex = fileRegex.lastIndex;\n                }\n            };\n            while (true) {\n                var state_1 = _loop_1();\n                if (state_1 === \"break\")\n                    break;\n            }\n            if (lastIndex < stack.length) {\n                updatedStack += stack.substr(lastIndex);\n            }\n        }\n        // sanitize with configured cleanup patterns\n        for (var _b = 0, _c = this._cleanupPatterns; _b < _c.length; _b++) {\n            var regexp = _c[_b];\n            updatedStack = updatedStack.replace(regexp, '');\n        }\n        return updatedStack;\n    };\n    TelemetryService.IDLE_START_EVENT_NAME = 'UserIdleStart';\n    TelemetryService.IDLE_STOP_EVENT_NAME = 'UserIdleStop';\n    TelemetryService = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.optional(configuration_1.IConfigurationService))\n    ], TelemetryService);\n    return TelemetryService;\n}());\nexports.TelemetryService = TelemetryService;\nvar TELEMETRY_SECTION_ID = 'telemetry';\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    'id': TELEMETRY_SECTION_ID,\n    'order': 110,\n    'type': 'object',\n    'title': nls_1.localize('telemetryConfigurationTitle', \"Telemetry\"),\n    'properties': {\n        'telemetry.enableTelemetry': {\n            'type': 'boolean',\n            'description': nls_1.localize('telemetry.enableTelemetry', \"Enable usage data and errors to be sent to a Microsoft online service.\"),\n            'default': true,\n            'tags': ['usesOnlineServices']\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { ITelemetryService, ITelemetryInfo, ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { optional } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { cloneAndChange, mixin } from 'vs/base/common/objects';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport interface ITelemetryServiceConfig {\n\tappender: ITelemetryAppender;\n\tcommonProperties?: Promise<{ [name: string]: any }>;\n\tpiiPaths?: string[];\n}\n\nexport class TelemetryService implements ITelemetryService {\n\n\tstatic IDLE_START_EVENT_NAME = 'UserIdleStart';\n\tstatic IDLE_STOP_EVENT_NAME = 'UserIdleStop';\n\n\t_serviceBrand: any;\n\n\tprivate _appender: ITelemetryAppender;\n\tprivate _commonProperties: Promise<{ [name: string]: any; }>;\n\tprivate _piiPaths: string[];\n\tprivate _userOptIn: boolean;\n\n\tprivate _disposables: IDisposable[] = [];\n\tprivate _cleanupPatterns: RegExp[] = [];\n\n\tconstructor(\n\t\tconfig: ITelemetryServiceConfig,\n\t\t@optional(IConfigurationService) private _configurationService: IConfigurationService\n\t) {\n\t\tthis._appender = config.appender;\n\t\tthis._commonProperties = config.commonProperties || Promise.resolve({});\n\t\tthis._piiPaths = config.piiPaths || [];\n\t\tthis._userOptIn = true;\n\n\t\t// static cleanup pattern for: `file:///DANGEROUS/PATH/resources/app/Useful/Information`\n\t\tthis._cleanupPatterns = [/file:\\/\\/\\/.*?\\/resources\\/app\\//gi];\n\n\t\tfor (let piiPath of this._piiPaths) {\n\t\t\tthis._cleanupPatterns.push(new RegExp(escapeRegExpCharacters(piiPath), 'gi'));\n\t\t}\n\n\t\tif (this._configurationService) {\n\t\t\tthis._updateUserOptIn();\n\t\t\tthis._configurationService.onDidChangeConfiguration(this._updateUserOptIn, this, this._disposables);\n\t\t\t/* __GDPR__\n\t\t\t\t\"optInStatus\" : {\n\t\t\t\t\t\"optIn\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.publicLog('optInStatus', { optIn: this._userOptIn });\n\n\t\t\tthis._commonProperties.then(values => {\n\t\t\t\tconst isHashedId = /^[a-f0-9]+$/i.test(values['common.machineId']);\n\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"machineIdFallback\" : {\n\t\t\t\t\t\t\"usingFallbackGuid\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"BusinessInsight\", \"isMeasurement\": true }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.publicLog('machineIdFallback', { usingFallbackGuid: !isHashedId });\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _updateUserOptIn(): void {\n\t\tconst config = this._configurationService.getValue<any>(TELEMETRY_SECTION_ID);\n\t\tthis._userOptIn = config ? config.enableTelemetry : this._userOptIn;\n\t}\n\n\tget isOptedIn(): boolean {\n\t\treturn this._userOptIn;\n\t}\n\n\tgetTelemetryInfo(): Promise<ITelemetryInfo> {\n\t\treturn this._commonProperties.then(values => {\n\t\t\t// well known properties\n\t\t\tlet sessionId = values['sessionID'];\n\t\t\tlet instanceId = values['common.instanceId'];\n\t\t\tlet machineId = values['common.machineId'];\n\n\t\t\treturn { sessionId, instanceId, machineId };\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData, anonymizeFilePaths?: boolean): Promise<any> {\n\t\t// don't send events when the user is optout\n\t\tif (!this._userOptIn) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this._commonProperties.then(values => {\n\n\t\t\t// (first) add common properties\n\t\t\tdata = mixin(data, values);\n\n\t\t\t// (last) remove all PII from data\n\t\t\tdata = cloneAndChange(data, value => {\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\treturn this._cleanupInfo(value, anonymizeFilePaths);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t\t\tthis._appender.log(eventName, data);\n\n\t\t}, err => {\n\t\t\t// unsure what to do now...\n\t\t\tconsole.error(err);\n\t\t});\n\t}\n\n\tprivate _cleanupInfo(stack: string, anonymizeFilePaths?: boolean): string {\n\t\tlet updatedStack = stack;\n\n\t\tif (anonymizeFilePaths) {\n\t\t\tconst cleanUpIndexes: [number, number][] = [];\n\t\t\tfor (let regexp of this._cleanupPatterns) {\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst result = regexp.exec(stack);\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcleanUpIndexes.push([result.index, regexp.lastIndex]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst nodeModulesRegex = /^[\\\\\\/]?(node_modules|node_modules\\.asar)[\\\\\\/]/;\n\t\t\tconst fileRegex = /(file:\\/\\/)?([a-zA-Z]:(\\\\\\\\|\\\\|\\/)|(\\\\\\\\|\\\\|\\/))?([\\w-\\._]+(\\\\\\\\|\\\\|\\/))+[\\w-\\._]*/g;\n\t\t\tlet lastIndex = 0;\n\t\t\tupdatedStack = '';\n\n\t\t\twhile (true) {\n\t\t\t\tconst result = fileRegex.exec(stack);\n\t\t\t\tif (!result) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Anoynimize user file paths that do not need to be retained or cleaned up.\n\t\t\t\tif (!nodeModulesRegex.test(result[0]) && cleanUpIndexes.every(([x, y]) => result.index < x || result.index >= y)) {\n\t\t\t\t\tupdatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';\n\t\t\t\t\tlastIndex = fileRegex.lastIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lastIndex < stack.length) {\n\t\t\t\tupdatedStack += stack.substr(lastIndex);\n\t\t\t}\n\t\t}\n\n\t\t// sanitize with configured cleanup patterns\n\t\tfor (let regexp of this._cleanupPatterns) {\n\t\t\tupdatedStack = updatedStack.replace(regexp, '');\n\t\t}\n\t\treturn updatedStack;\n\t}\n}\n\n\nconst TELEMETRY_SECTION_ID = 'telemetry';\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t'id': TELEMETRY_SECTION_ID,\n\t'order': 110,\n\t'type': 'object',\n\t'title': localize('telemetryConfigurationTitle', \"Telemetry\"),\n\t'properties': {\n\t\t'telemetry.enableTelemetry': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': localize('telemetry.enableTelemetry', \"Enable usage data and errors to be sent to a Microsoft online service.\"),\n\t\t\t'default': true,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t}\n\t}\n});\n"]}]}