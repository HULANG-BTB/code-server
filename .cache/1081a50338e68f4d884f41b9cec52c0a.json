{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/intializingRangeProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/folding/intializingRangeProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/model\", \"vs/editor/contrib/folding/syntaxRangeProvider\"], function (require, exports, model_1, syntaxRangeProvider_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ID_INIT_PROVIDER = 'init';\n    class InitializingRangeProvider {\n        constructor(editorModel, initialRanges, onTimeout, timeoutTime) {\n            this.editorModel = editorModel;\n            this.id = exports.ID_INIT_PROVIDER;\n            if (initialRanges.length) {\n                let toDecorationRange = (range) => {\n                    return {\n                        range: {\n                            startLineNumber: range.startLineNumber,\n                            startColumn: 0,\n                            endLineNumber: range.endLineNumber,\n                            endColumn: editorModel.getLineLength(range.endLineNumber)\n                        },\n                        options: {\n                            stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges\n                        }\n                    };\n                };\n                this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));\n                this.timeout = setTimeout(onTimeout, timeoutTime);\n            }\n        }\n        dispose() {\n            if (this.decorationIds) {\n                this.editorModel.deltaDecorations(this.decorationIds, []);\n                this.decorationIds = undefined;\n            }\n            if (typeof this.timeout === 'number') {\n                clearTimeout(this.timeout);\n                this.timeout = undefined;\n            }\n        }\n        compute(cancelationToken) {\n            let foldingRangeData = [];\n            if (this.decorationIds) {\n                for (let id of this.decorationIds) {\n                    let range = this.editorModel.getDecorationRange(id);\n                    if (range) {\n                        foldingRangeData.push({ start: range.startLineNumber, end: range.endLineNumber, rank: 1 });\n                    }\n                }\n            }\n            return Promise.resolve(syntaxRangeProvider_1.sanitizeRanges(foldingRangeData, Number.MAX_VALUE));\n        }\n    }\n    exports.InitializingRangeProvider = InitializingRangeProvider;\n});\n",null]}