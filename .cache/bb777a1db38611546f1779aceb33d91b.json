{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStatusBar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStatusBar.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadStatusBar = /** @class */ (function () {\n    function MainThreadStatusBar(extHostContext, _statusbarService) {\n        this._statusbarService = _statusbarService;\n        this._entries = Object.create(null);\n    }\n    MainThreadStatusBar.prototype.dispose = function () {\n        for (var key in this._entries) {\n            this._entries[key].dispose();\n        }\n    };\n    MainThreadStatusBar.prototype.$setEntry = function (id, extensionId, text, tooltip, command, color, alignment, priority) {\n        // Dispose any old\n        this.$dispose(id);\n        // Add new\n        var entry = this._statusbarService.addEntry({ text: text, tooltip: tooltip, command: command, color: color, extensionId: extensionId }, alignment, priority);\n        this._entries[id] = entry;\n    };\n    MainThreadStatusBar.prototype.$dispose = function (id) {\n        var disposeable = this._entries[id];\n        if (disposeable) {\n            disposeable.dispose();\n        }\n        delete this._entries[id];\n    };\n    MainThreadStatusBar = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadStatusBar),\n        tslib_1.__param(1, statusbar_1.IStatusbarService)\n    ], MainThreadStatusBar);\n    return MainThreadStatusBar;\n}());\nexports.MainThreadStatusBar = MainThreadStatusBar;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStatusBar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadStatusBar.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oEAA+H;AAE/H,+DAAoG;AAEpG,6EAAgF;AAIhF;IAIC,6BACC,cAA+B,EACK,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAExE,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,qCAAO,GAAP;QACC,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;SAC7B;IACF,CAAC;IAED,uCAAS,GAAT,UAAU,EAAU,EAAE,WAAgC,EAAE,IAAY,EAAE,OAAe,EAAE,OAAe,EAAE,KAA0B,EAAE,SAAuC,EAAE,QAAgB;QAE5L,kBAAkB;QAClB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAElB,UAAU;QACV,IAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,WAAW,aAAA,EAAE,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACnH,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED,sCAAQ,GAAR,UAAS,EAAU;QAClB,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,WAAW,EAAE;YAChB,WAAW,CAAC,OAAO,EAAE,CAAC;SACtB;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAlCW,mBAAmB;QAD/B,uCAAoB,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAOnD,mBAAA,6BAAiB,CAAA;OANP,mBAAmB,CAmC/B;IAAD,0BAAC;CAAA,AAnCD,IAmCC;AAnCY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { MainThreadStatusBarShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\n@extHostNamedCustomer(MainContext.MainThreadStatusBar)\nexport class MainThreadStatusBar implements MainThreadStatusBarShape {\n\n\tprivate readonly _entries: { [id: number]: IDisposable };\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService\n\t) {\n\t\tthis._entries = Object.create(null);\n\t}\n\n\tdispose(): void {\n\t\tfor (const key in this._entries) {\n\t\t\tthis._entries[key].dispose();\n\t\t}\n\t}\n\n\t$setEntry(id: number, extensionId: ExtensionIdentifier, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void {\n\n\t\t// Dispose any old\n\t\tthis.$dispose(id);\n\n\t\t// Add new\n\t\tconst entry = this._statusbarService.addEntry({ text, tooltip, command, color, extensionId }, alignment, priority);\n\t\tthis._entries[id] = entry;\n\t}\n\n\t$dispose(id: number) {\n\t\tconst disposeable = this._entries[id];\n\t\tif (disposeable) {\n\t\t\tdisposeable.dispose();\n\t\t}\n\n\t\tdelete this._entries[id];\n\t}\n}\n"]}]}