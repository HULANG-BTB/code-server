{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar types_1 = require(\"vs/base/common/types\");\nvar map_1 = require(\"vs/base/common/map\");\nvar TokenizationRegistryImpl = /** @class */ (function () {\n    function TokenizationRegistryImpl() {\n        this._map = new Map();\n        this._promises = new Map();\n        this._onDidChange = new event_1.Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._colorMap = null;\n    }\n    TokenizationRegistryImpl.prototype.fire = function (languages) {\n        this._onDidChange.fire({\n            changedLanguages: languages,\n            changedColorMap: false\n        });\n    };\n    TokenizationRegistryImpl.prototype.register = function (language, support) {\n        var _this = this;\n        this._map.set(language, support);\n        this.fire([language]);\n        return lifecycle_1.toDisposable(function () {\n            if (_this._map.get(language) !== support) {\n                return;\n            }\n            _this._map.delete(language);\n            _this.fire([language]);\n        });\n    };\n    TokenizationRegistryImpl.prototype.registerPromise = function (language, supportPromise) {\n        var _this = this;\n        var registration = null;\n        var isDisposed = false;\n        this._promises.set(language, supportPromise.then(function (support) {\n            _this._promises.delete(language);\n            if (isDisposed || !support) {\n                return;\n            }\n            registration = _this.register(language, support);\n        }));\n        return lifecycle_1.toDisposable(function () {\n            isDisposed = true;\n            if (registration) {\n                registration.dispose();\n            }\n        });\n    };\n    TokenizationRegistryImpl.prototype.getPromise = function (language) {\n        var _this = this;\n        var support = this.get(language);\n        if (support) {\n            return Promise.resolve(support);\n        }\n        var promise = this._promises.get(language);\n        if (promise) {\n            return promise.then(function (_) { return _this.get(language); });\n        }\n        return null;\n    };\n    TokenizationRegistryImpl.prototype.get = function (language) {\n        return types_1.withUndefinedAsNull(this._map.get(language));\n    };\n    TokenizationRegistryImpl.prototype.setColorMap = function (colorMap) {\n        this._colorMap = colorMap;\n        this._onDidChange.fire({\n            changedLanguages: map_1.keys(this._map),\n            changedColorMap: true\n        });\n    };\n    TokenizationRegistryImpl.prototype.getColorMap = function () {\n        return this._colorMap;\n    };\n    TokenizationRegistryImpl.prototype.getDefaultBackground = function () {\n        if (this._colorMap && this._colorMap.length > modes_1.ColorId.DefaultBackground) {\n            return this._colorMap[modes_1.ColorId.DefaultBackground];\n        }\n        return null;\n    };\n    return TokenizationRegistryImpl;\n}());\nexports.TokenizationRegistryImpl = TokenizationRegistryImpl;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ColorId, ITokenizationRegistry, ITokenizationSupport, ITokenizationSupportChangedEvent } from 'vs/editor/common/modes';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\nimport { keys } from 'vs/base/common/map';\n\nexport class TokenizationRegistryImpl implements ITokenizationRegistry {\n\n\tprivate readonly _map = new Map<string, ITokenizationSupport>();\n\tprivate readonly _promises = new Map<string, Thenable<void>>();\n\n\tprivate readonly _onDidChange = new Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> = this._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic fire(languages: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languages,\n\t\t\tchangedColorMap: false\n\t\t});\n\t}\n\n\tpublic register(language: string, support: ITokenizationSupport) {\n\t\tthis._map.set(language, support);\n\t\tthis.fire([language]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._map.get(language) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._map.delete(language);\n\t\t\tthis.fire([language]);\n\t\t});\n\t}\n\n\tpublic registerPromise(language: string, supportPromise: Thenable<ITokenizationSupport | null>): IDisposable {\n\n\t\tlet registration: IDisposable | null = null;\n\t\tlet isDisposed: boolean = false;\n\n\t\tthis._promises.set(language, supportPromise.then(support => {\n\t\t\tthis._promises.delete(language);\n\t\t\tif (isDisposed || !support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tregistration = this.register(language, support);\n\t\t}));\n\n\t\treturn toDisposable(() => {\n\t\t\tisDisposed = true;\n\t\t\tif (registration) {\n\t\t\t\tregistration.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getPromise(language: string): Thenable<ITokenizationSupport> | null {\n\t\tconst support = this.get(language);\n\t\tif (support) {\n\t\t\treturn Promise.resolve(support);\n\t\t}\n\t\tconst promise = this._promises.get(language);\n\t\tif (promise) {\n\t\t\treturn promise.then(_ => this.get(language)!);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic get(language: string): ITokenizationSupport | null {\n\t\treturn withUndefinedAsNull(this._map.get(language));\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: keys(this._map),\n\t\t\tchangedColorMap: true\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (this._colorMap && this._colorMap.length > ColorId.DefaultBackground) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n"]}]}