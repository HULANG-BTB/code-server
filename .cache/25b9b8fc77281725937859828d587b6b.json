{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\"], function (require, exports, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class MoveCaretCommand {\n        constructor(selection, isMovingLeft) {\n            this._selection = selection;\n            this._isMovingLeft = isMovingLeft;\n        }\n        getEditOperations(model, builder) {\n            let s = this._selection;\n            this._selectionId = builder.trackSelection(s);\n            if (s.startLineNumber !== s.endLineNumber) {\n                return;\n            }\n            if (this._isMovingLeft && s.startColumn === 0) {\n                return;\n            }\n            else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {\n                return;\n            }\n            let lineNumber = s.selectionStartLineNumber;\n            let lineContent = model.getLineContent(lineNumber);\n            let left;\n            let middle;\n            let right;\n            if (this._isMovingLeft) {\n                left = lineContent.substring(0, s.startColumn - 2);\n                middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n                right = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);\n            }\n            else {\n                left = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);\n                middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n                right = lineContent.substring(s.endColumn);\n            }\n            let newLineContent = left + middle + right;\n            builder.addEditOperation(new range_1.Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);\n            builder.addEditOperation(new range_1.Range(lineNumber, 1, lineNumber, 1), newLineContent);\n            this._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);\n            this._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;\n            this._moved = true;\n        }\n        computeCursorState(model, helper) {\n            let result = helper.getTrackedSelection(this._selectionId);\n            if (this._moved) {\n                result = result.setStartPosition(result.startLineNumber, this._cutStartIndex);\n                result = result.setEndPosition(result.startLineNumber, this._cutEndIndex);\n            }\n            return result;\n        }\n    }\n    exports.MoveCaretCommand = MoveCaretCommand;\n});\n",null]}