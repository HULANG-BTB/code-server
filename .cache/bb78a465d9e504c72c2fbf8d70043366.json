{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar moveCaretCommand_1 = require(\"vs/editor/contrib/caretOperations/moveCaretCommand\");\nvar MoveCaretAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveCaretAction, _super);\n    function MoveCaretAction(left, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.left = left;\n        return _this;\n    }\n    MoveCaretAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var commands = [];\n        var selections = editor.getSelections();\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n            commands.push(new moveCaretCommand_1.MoveCaretCommand(selection, this.left));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return MoveCaretAction;\n}(editorExtensions_1.EditorAction));\nvar MoveCaretLeftAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveCaretLeftAction, _super);\n    function MoveCaretLeftAction() {\n        return _super.call(this, true, {\n            id: 'editor.action.moveCarretLeftAction',\n            label: nls.localize('caret.moveLeft', \"Move Caret Left\"),\n            alias: 'Move Caret Left',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return MoveCaretLeftAction;\n}(MoveCaretAction));\nvar MoveCaretRightAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveCaretRightAction, _super);\n    function MoveCaretRightAction() {\n        return _super.call(this, false, {\n            id: 'editor.action.moveCarretRightAction',\n            label: nls.localize('caret.moveRight', \"Move Caret Right\"),\n            alias: 'Move Caret Right',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return MoveCaretRightAction;\n}(MoveCaretAction));\neditorExtensions_1.registerEditorAction(MoveCaretLeftAction);\neditorExtensions_1.registerEditorAction(MoveCaretRightAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,uEAA0H;AAE1H,wEAAuE;AACvE,uFAAsF;AAEtF;IAA8B,2CAAY;IAIzC,yBAAY,IAAa,EAAE,IAAoB;QAA/C,YACC,kBAAM,IAAI,CAAC,SAGX;QADA,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IAClB,CAAC;IAEM,6BAAG,GAAV,UAAW,QAA0B,EAAE,MAAmB;QACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO;SACP;QAED,IAAI,QAAQ,GAAe,EAAE,CAAC;QAC9B,IAAI,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAExC,KAAwB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;YAA/B,IAAM,SAAS,mBAAA;YACnB,QAAQ,CAAC,IAAI,CAAC,IAAI,mCAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1D;QAED,MAAM,CAAC,YAAY,EAAE,CAAC;QACtB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,YAAY,EAAE,CAAC;IACvB,CAAC;IACF,sBAAC;AAAD,CAAC,AA1BD,CAA8B,+BAAY,GA0BzC;AAED;IAAkC,+CAAe;IAChD;eACC,kBAAM,IAAI,EAAE;YACX,EAAE,EAAE,oCAAoC;YACxC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;YACxD,KAAK,EAAE,iBAAiB;YACxB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,0BAAC;AAAD,CAAC,AATD,CAAkC,eAAe,GAShD;AAED;IAAmC,gDAAe;IACjD;eACC,kBAAM,KAAK,EAAE;YACZ,EAAE,EAAE,qCAAqC;YACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;YAC1D,KAAK,EAAE,kBAAkB;YACzB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,2BAAC;AAAD,CAAC,AATD,CAAmC,eAAe,GASjD;AAED,uCAAoB,CAAC,mBAAmB,CAAC,CAAC;AAC1C,uCAAoB,CAAC,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { MoveCaretCommand } from 'vs/editor/contrib/caretOperations/moveCaretCommand';\n\nclass MoveCaretAction extends EditorAction {\n\n\tprivate readonly left: boolean;\n\n\tconstructor(left: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\n\t\tthis.left = left;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet commands: ICommand[] = [];\n\t\tlet selections = editor.getSelections();\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new MoveCaretCommand(selection, this.left));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveCaretLeftAction extends MoveCaretAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.moveCarretLeftAction',\n\t\t\tlabel: nls.localize('caret.moveLeft', \"Move Caret Left\"),\n\t\t\talias: 'Move Caret Left',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nclass MoveCaretRightAction extends MoveCaretAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.moveCarretRightAction',\n\t\t\tlabel: nls.localize('caret.moveRight', \"Move Caret Right\"),\n\t\t\talias: 'Move Caret Right',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nregisterEditorAction(MoveCaretLeftAction);\nregisterEditorAction(MoveCaretRightAction);\n"]}]}