{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/configureSnippets.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/configureSnippets.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar path_1 = require(\"vs/base/common/path\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar async_1 = require(\"vs/base/common/async\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar snippets_contribution_1 = require(\"vs/workbench/contrib/snippets/browser/snippets.contribution\");\nvar map_1 = require(\"vs/base/common/map\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar snippetsFile_1 = require(\"vs/workbench/contrib/snippets/browser/snippetsFile\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar id = 'workbench.action.openSnippets';\nvar ISnippetPick;\n(function (ISnippetPick) {\n    function is(thing) {\n        return thing && typeof thing.filepath === 'string';\n    }\n    ISnippetPick.is = is;\n})(ISnippetPick || (ISnippetPick = {}));\nfunction computePicks(snippetService, envService, modeService) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var existing, future, seen, _i, _a, file, names, _b, _c, snippet, _d, _e, scope, name, mode, dir, _f, _g, mode, label;\n        return tslib_1.__generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    existing = [];\n                    future = [];\n                    seen = new Set();\n                    _i = 0;\n                    return [4 /*yield*/, snippetService.getSnippetFiles()];\n                case 1:\n                    _a = _h.sent();\n                    _h.label = 2;\n                case 2:\n                    if (!(_i < _a.length)) return [3 /*break*/, 6];\n                    file = _a[_i];\n                    if (file.source === snippetsFile_1.SnippetSource.Extension) {\n                        // skip extension snippets\n                        return [3 /*break*/, 5];\n                    }\n                    if (!file.isGlobalSnippets) return [3 /*break*/, 4];\n                    return [4 /*yield*/, file.load()];\n                case 3:\n                    _h.sent();\n                    names = new Set();\n                    outer: for (_b = 0, _c = file.data; _b < _c.length; _b++) {\n                        snippet = _c[_b];\n                        for (_d = 0, _e = snippet.scopes; _d < _e.length; _d++) {\n                            scope = _e[_d];\n                            name = modeService.getLanguageName(scope);\n                            if (name) {\n                                if (names.size >= 4) {\n                                    names.add(name + \"...\");\n                                    break outer;\n                                }\n                                else {\n                                    names.add(name);\n                                }\n                            }\n                        }\n                    }\n                    existing.push({\n                        label: path_1.basename(file.location.fsPath),\n                        filepath: file.location.fsPath,\n                        description: names.size === 0\n                            ? nls.localize('global.scope', \"(global)\")\n                            : nls.localize('global.1', \"({0})\", map_1.values(names).join(', '))\n                    });\n                    return [3 /*break*/, 5];\n                case 4:\n                    mode = path_1.basename(file.location.fsPath).replace(/\\.json$/, '');\n                    existing.push({\n                        label: path_1.basename(file.location.fsPath),\n                        description: \"(\" + modeService.getLanguageName(mode) + \")\",\n                        filepath: file.location.fsPath\n                    });\n                    seen.add(mode);\n                    _h.label = 5;\n                case 5:\n                    _i++;\n                    return [3 /*break*/, 2];\n                case 6:\n                    dir = path_1.join(envService.appSettingsHome, 'snippets');\n                    for (_f = 0, _g = modeService.getRegisteredModes(); _f < _g.length; _f++) {\n                        mode = _g[_f];\n                        label = modeService.getLanguageName(mode);\n                        if (label && !seen.has(mode)) {\n                            future.push({\n                                label: mode,\n                                description: \"(\" + label + \")\",\n                                filepath: path_1.join(dir, mode + \".json\"),\n                                hint: true\n                            });\n                        }\n                    }\n                    existing.sort(function (a, b) {\n                        var a_ext = path_1.extname(a.filepath);\n                        var b_ext = path_1.extname(b.filepath);\n                        if (a_ext === b_ext) {\n                            return a.label.localeCompare(b.label);\n                        }\n                        else if (a_ext === '.code-snippets') {\n                            return -1;\n                        }\n                        else {\n                            return 1;\n                        }\n                    });\n                    future.sort(function (a, b) {\n                        return a.label.localeCompare(b.label);\n                    });\n                    return [2 /*return*/, { existing: existing, future: future }];\n            }\n        });\n    });\n}\nfunction createSnippetFile(scope, defaultPath, windowService, notificationService, fileService, opener) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var path, resource;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, fileService.createFolder(defaultPath)];\n                case 1:\n                    _a.sent();\n                    return [4 /*yield*/, async_1.timeout(100)];\n                case 2:\n                    _a.sent(); // ensure quick pick closes...\n                    return [4 /*yield*/, windowService.showSaveDialog({\n                            defaultPath: defaultPath.fsPath,\n                            filters: [{ name: 'Code Snippets', extensions: ['code-snippets'] }]\n                        })];\n                case 3:\n                    path = _a.sent();\n                    if (!path) {\n                        return [2 /*return*/, undefined];\n                    }\n                    resource = uri_1.URI.file(path);\n                    if (path_1.dirname(resource.fsPath) !== defaultPath.fsPath) {\n                        notificationService.error(nls.localize('badPath', \"Snippets must be inside this folder: '{0}'. \", defaultPath.fsPath));\n                        return [2 /*return*/, undefined];\n                    }\n                    return [4 /*yield*/, fileService.updateContent(resource, [\n                            '{',\n                            '\\t// Place your ' + scope + ' snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ',\n                            '\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ',\n                            '\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ',\n                            '\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ',\n                            '\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ',\n                            '\\t// Placeholders with the same ids are connected.',\n                            '\\t// Example:',\n                            '\\t// \"Print to console\": {',\n                            '\\t// \\t\"scope\": \"javascript,typescript\",',\n                            '\\t// \\t\"prefix\": \"log\",',\n                            '\\t// \\t\"body\": [',\n                            '\\t// \\t\\t\"console.log(\\'$1\\');\",',\n                            '\\t// \\t\\t\"$2\"',\n                            '\\t// \\t],',\n                            '\\t// \\t\"description\": \"Log output to console\"',\n                            '\\t// }',\n                            '}'\n                        ].join('\\n'))];\n                case 4:\n                    _a.sent();\n                    return [4 /*yield*/, opener.open(resource)];\n                case 5:\n                    _a.sent();\n                    return [2 /*return*/, undefined];\n            }\n        });\n    });\n}\nfunction createLanguageSnippetFile(pick, fileService) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var contents;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, fileService.existsFile(uri_1.URI.file(pick.filepath))];\n                case 1:\n                    if (_a.sent()) {\n                        return [2 /*return*/];\n                    }\n                    contents = [\n                        '{',\n                        '\\t// Place your snippets for ' + pick.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n                        '\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n                        '\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',\n                        '\\t// same ids are connected.',\n                        '\\t// Example:',\n                        '\\t// \"Print to console\": {',\n                        '\\t// \\t\"prefix\": \"log\",',\n                        '\\t// \\t\"body\": [',\n                        '\\t// \\t\\t\"console.log(\\'$1\\');\",',\n                        '\\t// \\t\\t\"$2\"',\n                        '\\t// \\t],',\n                        '\\t// \\t\"description\": \"Log output to console\"',\n                        '\\t// }',\n                        '}'\n                    ].join('\\n');\n                    return [4 /*yield*/, fileService.updateContent(uri_1.URI.file(pick.filepath), contents)];\n                case 2:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\ncommands_1.CommandsRegistry.registerCommand(id, function (accessor) { return tslib_1.__awaiter(_this, void 0, Promise, function () {\n    var snippetService, quickInputService, opener, windowService, modeService, envService, notificationService, workspaceService, fileService, picks, existing, globalSnippetPicks, workspaceSnippetPicks, _i, _a, folder, pick;\n    return tslib_1.__generator(this, function (_b) {\n        switch (_b.label) {\n            case 0:\n                snippetService = accessor.get(snippets_contribution_1.ISnippetsService);\n                quickInputService = accessor.get(quickInput_1.IQuickInputService);\n                opener = accessor.get(opener_1.IOpenerService);\n                windowService = accessor.get(windows_1.IWindowService);\n                modeService = accessor.get(modeService_1.IModeService);\n                envService = accessor.get(environment_1.IEnvironmentService);\n                notificationService = accessor.get(notification_1.INotificationService);\n                workspaceService = accessor.get(workspace_1.IWorkspaceContextService);\n                fileService = accessor.get(files_1.IFileService);\n                return [4 /*yield*/, computePicks(snippetService, envService, modeService)];\n            case 1:\n                picks = _b.sent();\n                existing = picks.existing;\n                globalSnippetPicks = [{\n                        scope: nls.localize('new.global_scope', 'global'),\n                        label: nls.localize('new.global', \"New Global Snippets file...\"),\n                        uri: uri_1.URI.file(path_1.join(envService.appSettingsHome, 'snippets'))\n                    }];\n                workspaceSnippetPicks = [];\n                for (_i = 0, _a = workspaceService.getWorkspace().folders; _i < _a.length; _i++) {\n                    folder = _a[_i];\n                    workspaceSnippetPicks.push({\n                        scope: nls.localize('new.workspace_scope', \"{0} workspace\", folder.name),\n                        label: nls.localize('new.folder', \"New Snippets file for '{0}'...\", folder.name),\n                        uri: folder.toResource('.vscode')\n                    });\n                }\n                if (existing.length > 0) {\n                    existing.unshift({ type: 'separator', label: nls.localize('group.global', \"Existing Snippets\") });\n                    existing.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n                }\n                else {\n                    existing.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n                }\n                return [4 /*yield*/, quickInputService.pick([].concat(existing, globalSnippetPicks, workspaceSnippetPicks, picks.future), {\n                        placeHolder: nls.localize('openSnippet.pickLanguage', \"Select Snippets File or Create Snippets\"),\n                        matchOnDescription: true\n                    })];\n            case 2:\n                pick = _b.sent();\n                if (!(globalSnippetPicks.indexOf(pick) >= 0)) return [3 /*break*/, 3];\n                return [2 /*return*/, createSnippetFile(pick.scope, pick.uri, windowService, notificationService, fileService, opener)];\n            case 3:\n                if (!(workspaceSnippetPicks.indexOf(pick) >= 0)) return [3 /*break*/, 4];\n                return [2 /*return*/, createSnippetFile(pick.scope, pick.uri, windowService, notificationService, fileService, opener)];\n            case 4:\n                if (!ISnippetPick.is(pick)) return [3 /*break*/, 7];\n                if (!pick.hint) return [3 /*break*/, 6];\n                return [4 /*yield*/, createLanguageSnippetFile(pick, fileService)];\n            case 5:\n                _b.sent();\n                _b.label = 6;\n            case 6: return [2 /*return*/, opener.open(uri_1.URI.file(pick.filepath))];\n            case 7: return [2 /*return*/];\n        }\n    });\n}); });\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n    command: {\n        id: id,\n        title: { value: nls.localize('openSnippet.label', \"Configure User Snippets\"), original: 'Preferences: Configure User Snippets' },\n        category: nls.localize('preferences', \"Preferences\")\n    }\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n    group: '3_snippets',\n    command: {\n        id: id,\n        title: nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, \"User &&Snippets\")\n    },\n    order: 1\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/configureSnippets.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/configureSnippets.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { join, basename, dirname, extname } from 'vs/base/common/path';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { timeout } from 'vs/base/common/async';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets.contribution';\nimport { values } from 'vs/base/common/map';\nimport { IQuickPickItem, IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nconst id = 'workbench.action.openSnippets';\n\nnamespace ISnippetPick {\n\texport function is(thing: object): thing is ISnippetPick {\n\t\treturn thing && typeof (<ISnippetPick>thing).filepath === 'string';\n\t}\n}\n\ninterface ISnippetPick extends IQuickPickItem {\n\tfilepath: string;\n\thint?: true;\n}\n\nasync function computePicks(snippetService: ISnippetsService, envService: IEnvironmentService, modeService: IModeService) {\n\n\tconst existing: ISnippetPick[] = [];\n\tconst future: ISnippetPick[] = [];\n\n\tconst seen = new Set<string>();\n\n\tfor (const file of await snippetService.getSnippetFiles()) {\n\n\t\tif (file.source === SnippetSource.Extension) {\n\t\t\t// skip extension snippets\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (file.isGlobalSnippets) {\n\n\t\t\tawait file.load();\n\n\t\t\t// list scopes for global snippets\n\t\t\tconst names = new Set<string>();\n\t\t\touter: for (const snippet of file.data) {\n\t\t\t\tfor (const scope of snippet.scopes) {\n\t\t\t\t\tconst name = modeService.getLanguageName(scope);\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tif (names.size >= 4) {\n\t\t\t\t\t\t\tnames.add(`${name}...`);\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\texisting.push({\n\t\t\t\tlabel: basename(file.location.fsPath),\n\t\t\t\tfilepath: file.location.fsPath,\n\t\t\t\tdescription: names.size === 0\n\t\t\t\t\t? nls.localize('global.scope', \"(global)\")\n\t\t\t\t\t: nls.localize('global.1', \"({0})\", values(names).join(', '))\n\t\t\t});\n\n\t\t} else {\n\t\t\t// language snippet\n\t\t\tconst mode = basename(file.location.fsPath).replace(/\\.json$/, '');\n\t\t\texisting.push({\n\t\t\t\tlabel: basename(file.location.fsPath),\n\t\t\t\tdescription: `(${modeService.getLanguageName(mode)})`,\n\t\t\t\tfilepath: file.location.fsPath\n\t\t\t});\n\t\t\tseen.add(mode);\n\t\t}\n\t}\n\n\tconst dir = join(envService.appSettingsHome, 'snippets');\n\tfor (const mode of modeService.getRegisteredModes()) {\n\t\tconst label = modeService.getLanguageName(mode);\n\t\tif (label && !seen.has(mode)) {\n\t\t\tfuture.push({\n\t\t\t\tlabel: mode,\n\t\t\t\tdescription: `(${label})`,\n\t\t\t\tfilepath: join(dir, `${mode}.json`),\n\t\t\t\thint: true\n\t\t\t});\n\t\t}\n\t}\n\n\texisting.sort((a, b) => {\n\t\tlet a_ext = extname(a.filepath);\n\t\tlet b_ext = extname(b.filepath);\n\t\tif (a_ext === b_ext) {\n\t\t\treturn a.label.localeCompare(b.label);\n\t\t} else if (a_ext === '.code-snippets') {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t});\n\n\tfuture.sort((a, b) => {\n\t\treturn a.label.localeCompare(b.label);\n\t});\n\n\treturn { existing, future };\n}\n\nasync function createSnippetFile(scope: string, defaultPath: URI, windowService: IWindowService, notificationService: INotificationService, fileService: IFileService, opener: IOpenerService) {\n\n\tawait fileService.createFolder(defaultPath);\n\tawait timeout(100); // ensure quick pick closes...\n\n\tconst path = await windowService.showSaveDialog({\n\t\tdefaultPath: defaultPath.fsPath,\n\t\tfilters: [{ name: 'Code Snippets', extensions: ['code-snippets'] }]\n\t});\n\tif (!path) {\n\t\treturn undefined;\n\t}\n\tconst resource = URI.file(path);\n\tif (dirname(resource.fsPath) !== defaultPath.fsPath) {\n\t\tnotificationService.error(nls.localize('badPath', \"Snippets must be inside this folder: '{0}'. \", defaultPath.fsPath));\n\t\treturn undefined;\n\t}\n\n\tawait fileService.updateContent(resource, [\n\t\t'{',\n\t\t'\\t// Place your ' + scope + ' snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and ',\n\t\t'\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope ',\n\t\t'\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is ',\n\t\t'\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: ',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. ',\n\t\t'\\t// Placeholders with the same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"scope\": \"javascript,typescript\",',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n'));\n\n\tawait opener.open(resource);\n\treturn undefined;\n}\n\nasync function createLanguageSnippetFile(pick: ISnippetPick, fileService: IFileService) {\n\tif (await fileService.existsFile(URI.file(pick.filepath))) {\n\t\treturn;\n\t}\n\tconst contents = [\n\t\t'{',\n\t\t'\\t// Place your snippets for ' + pick.label + ' here. Each snippet is defined under a snippet name and has a prefix, body and ',\n\t\t'\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:',\n\t\t'\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the ',\n\t\t'\\t// same ids are connected.',\n\t\t'\\t// Example:',\n\t\t'\\t// \"Print to console\": {',\n\t\t'\\t// \\t\"prefix\": \"log\",',\n\t\t'\\t// \\t\"body\": [',\n\t\t'\\t// \\t\\t\"console.log(\\'$1\\');\",',\n\t\t'\\t// \\t\\t\"$2\"',\n\t\t'\\t// \\t],',\n\t\t'\\t// \\t\"description\": \"Log output to console\"',\n\t\t'\\t// }',\n\t\t'}'\n\t].join('\\n');\n\tawait fileService.updateContent(URI.file(pick.filepath), contents);\n}\n\nCommandsRegistry.registerCommand(id, async (accessor): Promise<any> => {\n\n\tconst snippetService = accessor.get(ISnippetsService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst opener = accessor.get(IOpenerService);\n\tconst windowService = accessor.get(IWindowService);\n\tconst modeService = accessor.get(IModeService);\n\tconst envService = accessor.get(IEnvironmentService);\n\tconst notificationService = accessor.get(INotificationService);\n\tconst workspaceService = accessor.get(IWorkspaceContextService);\n\tconst fileService = accessor.get(IFileService);\n\n\tconst picks = await computePicks(snippetService, envService, modeService);\n\tconst existing: QuickPickInput[] = picks.existing;\n\n\ttype SnippetPick = IQuickPickItem & { uri: URI } & { scope: string };\n\tconst globalSnippetPicks: SnippetPick[] = [{\n\t\tscope: nls.localize('new.global_scope', 'global'),\n\t\tlabel: nls.localize('new.global', \"New Global Snippets file...\"),\n\t\turi: URI.file(join(envService.appSettingsHome, 'snippets'))\n\t}];\n\n\tconst workspaceSnippetPicks: SnippetPick[] = [];\n\tfor (const folder of workspaceService.getWorkspace().folders) {\n\t\tworkspaceSnippetPicks.push({\n\t\t\tscope: nls.localize('new.workspace_scope', \"{0} workspace\", folder.name),\n\t\t\tlabel: nls.localize('new.folder', \"New Snippets file for '{0}'...\", folder.name),\n\t\t\turi: folder.toResource('.vscode')\n\t\t});\n\t}\n\n\tif (existing.length > 0) {\n\t\texisting.unshift({ type: 'separator', label: nls.localize('group.global', \"Existing Snippets\") });\n\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t} else {\n\t\texisting.push({ type: 'separator', label: nls.localize('new.global.sep', \"New Snippets\") });\n\t}\n\n\tconst pick = await quickInputService.pick(([] as QuickPickInput[]).concat(existing, globalSnippetPicks, workspaceSnippetPicks, picks.future), {\n\t\tplaceHolder: nls.localize('openSnippet.pickLanguage', \"Select Snippets File or Create Snippets\"),\n\t\tmatchOnDescription: true\n\t});\n\n\tif (globalSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, windowService, notificationService, fileService, opener);\n\t} else if (workspaceSnippetPicks.indexOf(pick as SnippetPick) >= 0) {\n\t\treturn createSnippetFile((pick as SnippetPick).scope, (pick as SnippetPick).uri, windowService, notificationService, fileService, opener);\n\t} else if (ISnippetPick.is(pick)) {\n\t\tif (pick.hint) {\n\t\t\tawait createLanguageSnippetFile(pick, fileService);\n\t\t}\n\t\treturn opener.open(URI.file(pick.filepath));\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid,\n\t\ttitle: { value: nls.localize('openSnippet.label', \"Configure User Snippets\"), original: 'Preferences: Configure User Snippets' },\n\t\tcategory: nls.localize('preferences', \"Preferences\")\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '3_snippets',\n\tcommand: {\n\t\tid,\n\t\ttitle: nls.localize({ key: 'miOpenSnippets', comment: ['&& denotes a mnemonic'] }, \"User &&Snippets\")\n\t},\n\torder: 1\n});\n"]}]}