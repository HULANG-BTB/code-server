{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminal.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminal.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform = require(\"vs/base/common/platform\");\nvar nls = require(\"vs/nls\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/browser/terminal\");\nvar terminal_2 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar terminalInstanceService_1 = require(\"vs/workbench/contrib/terminal/electron-browser/terminalInstanceService\");\nvar terminalService_1 = require(\"vs/workbench/contrib/terminal/electron-browser/terminalService\");\nvar terminal_3 = require(\"vs/workbench/contrib/terminal/node/terminal\");\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    id: 'terminal',\n    order: 100,\n    title: nls.localize('terminalIntegratedConfigurationTitle', \"Integrated Terminal\"),\n    type: 'object',\n    properties: {\n        'terminal.integrated.shell.linux': {\n            markdownDescription: nls.localize('terminal.integrated.shell.linux', \"The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n            type: 'string',\n            default: terminal_3.getDefaultShell(platform.Platform.Linux)\n        },\n        'terminal.integrated.shell.osx': {\n            markdownDescription: nls.localize('terminal.integrated.shell.osx', \"The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n            type: 'string',\n            default: terminal_3.getDefaultShell(platform.Platform.Mac)\n        },\n        'terminal.integrated.shell.windows': {\n            markdownDescription: nls.localize('terminal.integrated.shell.windows', \"The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n            type: 'string',\n            default: terminal_3.getDefaultShell(platform.Platform.Windows)\n        }\n    }\n});\nextensions_1.registerSingleton(terminal_2.ITerminalService, terminalService_1.TerminalService, true);\nextensions_1.registerSingleton(terminal_1.ITerminalInstanceService, terminalInstanceService_1.TerminalInstanceService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminal.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminal.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,kDAAoD;AACpD,4BAA8B;AAC9B,gGAA4G;AAC5G,0EAAgF;AAChF,iEAAgE;AAChE,2EAA0F;AAC1F,0EAAiF;AACjF,kHAAiH;AACjH,kGAAiG;AACjG,wEAA8E;AAE9E,IAAM,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC,CAAC;AAC5F,qBAAqB,CAAC,qBAAqB,CAAC;IAC3C,EAAE,EAAE,UAAU;IACd,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,sCAAsC,EAAE,qBAAqB,CAAC;IAClF,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,iCAAiC,EAAE;YAClC,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,iCAAiC,EAAE,+KAA+K,CAAC;YACrP,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,0BAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC;SACjD;QACD,+BAA+B,EAAE;YAChC,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,+KAA+K,CAAC;YACnP,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,0BAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;SAC/C;QACD,mCAAmC,EAAE;YACpC,mBAAmB,EAAE,GAAG,CAAC,QAAQ,CAAC,mCAAmC,EAAE,iLAAiL,CAAC;YACzP,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,0BAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;SACnD;KACD;CACD,CAAC,CAAC;AAEH,8BAAiB,CAAC,2BAAgB,EAAE,iCAAe,EAAE,IAAI,CAAC,CAAC;AAC3D,8BAAiB,CAAC,mCAAwB,EAAE,iDAAuB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport * as nls from 'vs/nls';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalInstanceService } from 'vs/workbench/contrib/terminal/electron-browser/terminalInstanceService';\nimport { TerminalService } from 'vs/workbench/contrib/terminal/electron-browser/terminalService';\nimport { getDefaultShell } from 'vs/workbench/contrib/terminal/node/terminal';\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\tid: 'terminal',\n\torder: 100,\n\ttitle: nls.localize('terminalIntegratedConfigurationTitle', \"Integrated Terminal\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'terminal.integrated.shell.linux': {\n\t\t\tmarkdownDescription: nls.localize('terminal.integrated.shell.linux', \"The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: getDefaultShell(platform.Platform.Linux)\n\t\t},\n\t\t'terminal.integrated.shell.osx': {\n\t\t\tmarkdownDescription: nls.localize('terminal.integrated.shell.osx', \"The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: getDefaultShell(platform.Platform.Mac)\n\t\t},\n\t\t'terminal.integrated.shell.windows': {\n\t\t\tmarkdownDescription: nls.localize('terminal.integrated.shell.windows', \"The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration).\"),\n\t\t\ttype: 'string',\n\t\t\tdefault: getDefaultShell(platform.Platform.Windows)\n\t\t}\n\t}\n});\n\nregisterSingleton(ITerminalService, TerminalService, true);\nregisterSingleton(ITerminalInstanceService, TerminalInstanceService, true);\n"]}]}