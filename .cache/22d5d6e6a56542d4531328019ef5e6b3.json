{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/event\", \"vs/platform/log/common/log\", \"vs/platform/storage/common/storage\", \"vs/base/node/storage\", \"vs/base/common/actions\", \"vs/platform/windows/common/windows\", \"vs/nls\", \"vs/base/common/performance\", \"vs/base/common/path\", \"vs/base/node/pfs\", \"vs/platform/environment/common/environment\", \"vs/platform/workspaces/common/workspaces\", \"vs/base/common/errors\"], function (require, exports, lifecycle_1, event_1, log_1, storage_1, storage_2, actions_1, windows_1, nls_1, performance_1, path_1, pfs_1, environment_1, workspaces_1, errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let StorageService = class StorageService extends lifecycle_1.Disposable {\n        constructor(globalStorageDatabase, logService, environmentService) {\n            super();\n            this.logService = logService;\n            this.environmentService = environmentService;\n            this._onDidChangeStorage = this._register(new event_1.Emitter());\n            this._onWillSaveState = this._register(new event_1.Emitter());\n            // Global Storage\n            this.globalStorage = new storage_2.Storage(globalStorageDatabase);\n            this._register(this.globalStorage.onDidChangeStorage(key => this.handleDidChangeStorage(key, storage_1.StorageScope.GLOBAL)));\n        }\n        get onDidChangeStorage() { return this._onDidChangeStorage.event; }\n        get onWillSaveState() { return this._onWillSaveState.event; }\n        handleDidChangeStorage(key, scope) {\n            this._onDidChangeStorage.fire({ key, scope });\n        }\n        initialize(payload) {\n            if (!this.initializePromise) {\n                this.initializePromise = this.doInitialize(payload);\n            }\n            return this.initializePromise;\n        }\n        doInitialize(payload) {\n            return Promise.all([\n                this.initializeGlobalStorage(),\n                this.initializeWorkspaceStorage(payload)\n            ]).then(() => undefined);\n        }\n        initializeGlobalStorage() {\n            return this.globalStorage.init();\n        }\n        initializeWorkspaceStorage(payload) {\n            // Prepare workspace storage folder for DB\n            return this.prepareWorkspaceStorageFolder(payload).then(result => {\n                const useInMemoryStorage = !!this.environmentService.extensionTestsLocationURI; // no storage during extension tests!\n                // Create workspace storage and initalize\n                performance_1.mark('willInitWorkspaceStorage');\n                return this.createWorkspaceStorage(useInMemoryStorage ? storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH : path_1.join(result.path, StorageService.WORKSPACE_STORAGE_NAME), result.wasCreated ? storage_2.StorageHint.STORAGE_DOES_NOT_EXIST : undefined).init().then(() => {\n                    performance_1.mark('didInitWorkspaceStorage');\n                }, error => {\n                    performance_1.mark('didInitWorkspaceStorage');\n                    return Promise.reject(error);\n                });\n            }).then(undefined, error => {\n                errors_1.onUnexpectedError(error);\n                // Upon error, fallback to in-memory storage\n                return this.createWorkspaceStorage(storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH).init();\n            });\n        }\n        createWorkspaceStorage(workspaceStoragePath, hint) {\n            // Logger for workspace storage\n            const workspaceLoggingOptions = {\n                logTrace: (this.logService.getLevel() === log_1.LogLevel.Trace) ? msg => this.logService.trace(msg) : undefined,\n                logError: error => this.logService.error(error)\n            };\n            // Dispose old (if any)\n            this.workspaceStorage = lifecycle_1.dispose(this.workspaceStorage);\n            this.workspaceStorageListener = lifecycle_1.dispose(this.workspaceStorageListener);\n            // Create new\n            this.workspaceStoragePath = workspaceStoragePath;\n            this.workspaceStorage = new storage_2.Storage(new storage_2.SQLiteStorageDatabase(workspaceStoragePath, { logging: workspaceLoggingOptions }), { hint });\n            this.workspaceStorageListener = this.workspaceStorage.onDidChangeStorage(key => this.handleDidChangeStorage(key, storage_1.StorageScope.WORKSPACE));\n            return this.workspaceStorage;\n        }\n        getWorkspaceStorageFolderPath(payload) {\n            return path_1.join(this.environmentService.workspaceStorageHome, payload.id); // workspace home + workspace id;\n        }\n        prepareWorkspaceStorageFolder(payload) {\n            const workspaceStorageFolderPath = this.getWorkspaceStorageFolderPath(payload);\n            return pfs_1.exists(workspaceStorageFolderPath).then(exists => {\n                if (exists) {\n                    return { path: workspaceStorageFolderPath, wasCreated: false };\n                }\n                return pfs_1.mkdirp(workspaceStorageFolderPath).then(() => {\n                    // Write metadata into folder\n                    this.ensureWorkspaceStorageFolderMeta(payload);\n                    return { path: workspaceStorageFolderPath, wasCreated: true };\n                });\n            });\n        }\n        ensureWorkspaceStorageFolderMeta(payload) {\n            let meta = undefined;\n            if (workspaces_1.isSingleFolderWorkspaceInitializationPayload(payload)) {\n                meta = { folder: payload.folder.toString() };\n            }\n            else if (workspaces_1.isWorkspaceIdentifier(payload)) {\n                meta = { configuration: payload.configPath };\n            }\n            if (meta) {\n                const workspaceStorageMetaPath = path_1.join(this.getWorkspaceStorageFolderPath(payload), StorageService.WORKSPACE_META_NAME);\n                pfs_1.exists(workspaceStorageMetaPath).then(exists => {\n                    if (exists) {\n                        return undefined; // already existing\n                    }\n                    return pfs_1.writeFile(workspaceStorageMetaPath, JSON.stringify(meta, undefined, 2));\n                }).then(undefined, error => errors_1.onUnexpectedError(error));\n            }\n        }\n        get(key, scope, fallbackValue) {\n            return this.getStorage(scope).get(key, fallbackValue);\n        }\n        getBoolean(key, scope, fallbackValue) {\n            return this.getStorage(scope).getBoolean(key, fallbackValue);\n        }\n        getNumber(key, scope, fallbackValue) {\n            return this.getStorage(scope).getNumber(key, fallbackValue);\n        }\n        store(key, value, scope) {\n            this.getStorage(scope).set(key, value);\n        }\n        remove(key, scope) {\n            this.getStorage(scope).delete(key);\n        }\n        close() {\n            // Signal as event so that clients can still store data\n            this._onWillSaveState.fire({ reason: storage_1.WillSaveStateReason.SHUTDOWN });\n            // Do it\n            return Promise.all([\n                this.globalStorage.close(),\n                this.workspaceStorage.close()\n            ]).then(() => undefined);\n        }\n        getStorage(scope) {\n            return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage : this.workspaceStorage;\n        }\n        getSize(scope) {\n            return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage.size : this.workspaceStorage.size;\n        }\n        checkIntegrity(scope, full) {\n            return scope === storage_1.StorageScope.GLOBAL ? this.globalStorage.checkIntegrity(full) : this.workspaceStorage.checkIntegrity(full);\n        }\n        logStorage() {\n            return Promise.all([\n                this.globalStorage.items,\n                this.workspaceStorage.items,\n                this.globalStorage.checkIntegrity(true /* full */),\n                this.workspaceStorage.checkIntegrity(true /* full */)\n            ]).then(result => {\n                const safeParse = (value) => {\n                    try {\n                        return JSON.parse(value);\n                    }\n                    catch (error) {\n                        return value;\n                    }\n                };\n                const globalItems = new Map();\n                const globalItemsParsed = new Map();\n                result[0].forEach((value, key) => {\n                    globalItems.set(key, value);\n                    globalItemsParsed.set(key, safeParse(value));\n                });\n                const workspaceItems = new Map();\n                const workspaceItemsParsed = new Map();\n                result[1].forEach((value, key) => {\n                    workspaceItems.set(key, value);\n                    workspaceItemsParsed.set(key, safeParse(value));\n                });\n                console.group(`Storage: Global (integrity: ${result[2]}, path: ${this.environmentService.globalStorageHome})`);\n                let globalValues = [];\n                globalItems.forEach((value, key) => {\n                    globalValues.push({ key, value });\n                });\n                console.table(globalValues);\n                console.groupEnd();\n                console.log(globalItemsParsed);\n                console.group(`Storage: Workspace (integrity: ${result[3]}, load: ${performance_1.getDuration('willInitWorkspaceStorage', 'didInitWorkspaceStorage')}, path: ${this.workspaceStoragePath})`);\n                let workspaceValues = [];\n                workspaceItems.forEach((value, key) => {\n                    workspaceValues.push({ key, value });\n                });\n                console.table(workspaceValues);\n                console.groupEnd();\n                console.log(workspaceItemsParsed);\n            });\n        }\n        migrate(toWorkspace) {\n            if (this.workspaceStoragePath === storage_2.SQLiteStorageDatabase.IN_MEMORY_PATH) {\n                return Promise.resolve(); // no migration needed if running in memory\n            }\n            // Close workspace DB to be able to copy\n            return this.workspaceStorage.close().then(() => {\n                // Prepare new workspace storage folder\n                return this.prepareWorkspaceStorageFolder(toWorkspace).then(result => {\n                    const newWorkspaceStoragePath = path_1.join(result.path, StorageService.WORKSPACE_STORAGE_NAME);\n                    // Copy current storage over to new workspace storage\n                    return pfs_1.copy(this.workspaceStoragePath, newWorkspaceStoragePath).then(() => {\n                        // Recreate and init workspace storage\n                        return this.createWorkspaceStorage(newWorkspaceStoragePath).init();\n                    });\n                });\n            });\n        }\n    };\n    StorageService.WORKSPACE_STORAGE_NAME = 'state.vscdb';\n    StorageService.WORKSPACE_META_NAME = 'workspace.json';\n    StorageService = __decorate([\n        __param(1, log_1.ILogService),\n        __param(2, environment_1.IEnvironmentService)\n    ], StorageService);\n    exports.StorageService = StorageService;\n    let LogStorageAction = class LogStorageAction extends actions_1.Action {\n        constructor(id, label, storageService, windowService) {\n            super(id, label);\n            this.storageService = storageService;\n            this.windowService = windowService;\n        }\n        run() {\n            this.storageService.logStorage();\n            return this.windowService.openDevTools();\n        }\n    };\n    LogStorageAction.ID = 'workbench.action.logStorage';\n    LogStorageAction.LABEL = nls_1.localize({ key: 'logStorage', comment: ['A developer only action to log the contents of the storage for the current window.'] }, \"Log Storage Database Contents\");\n    LogStorageAction = __decorate([\n        __param(2, storage_1.IStorageService),\n        __param(3, windows_1.IWindowService)\n    ], LogStorageAction);\n    exports.LogStorageAction = LogStorageAction;\n});\n",null]}