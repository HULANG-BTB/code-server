{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetParser.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/charCode\"], function (require, exports, charCode_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TokenType;\n    (function (TokenType) {\n        TokenType[TokenType[\"Dollar\"] = 0] = \"Dollar\";\n        TokenType[TokenType[\"Colon\"] = 1] = \"Colon\";\n        TokenType[TokenType[\"Comma\"] = 2] = \"Comma\";\n        TokenType[TokenType[\"CurlyOpen\"] = 3] = \"CurlyOpen\";\n        TokenType[TokenType[\"CurlyClose\"] = 4] = \"CurlyClose\";\n        TokenType[TokenType[\"Backslash\"] = 5] = \"Backslash\";\n        TokenType[TokenType[\"Forwardslash\"] = 6] = \"Forwardslash\";\n        TokenType[TokenType[\"Pipe\"] = 7] = \"Pipe\";\n        TokenType[TokenType[\"Int\"] = 8] = \"Int\";\n        TokenType[TokenType[\"VariableName\"] = 9] = \"VariableName\";\n        TokenType[TokenType[\"Format\"] = 10] = \"Format\";\n        TokenType[TokenType[\"Plus\"] = 11] = \"Plus\";\n        TokenType[TokenType[\"Dash\"] = 12] = \"Dash\";\n        TokenType[TokenType[\"QuestionMark\"] = 13] = \"QuestionMark\";\n        TokenType[TokenType[\"EOF\"] = 14] = \"EOF\";\n    })(TokenType = exports.TokenType || (exports.TokenType = {}));\n    class Scanner {\n        constructor() {\n            this.text('');\n        }\n        static isDigitCharacter(ch) {\n            return ch >= charCode_1.CharCode.Digit0 && ch <= charCode_1.CharCode.Digit9;\n        }\n        static isVariableCharacter(ch) {\n            return ch === charCode_1.CharCode.Underline\n                || (ch >= charCode_1.CharCode.a && ch <= charCode_1.CharCode.z)\n                || (ch >= charCode_1.CharCode.A && ch <= charCode_1.CharCode.Z);\n        }\n        text(value) {\n            this.value = value;\n            this.pos = 0;\n        }\n        tokenText(token) {\n            return this.value.substr(token.pos, token.len);\n        }\n        next() {\n            if (this.pos >= this.value.length) {\n                return { type: TokenType.EOF, pos: this.pos, len: 0 };\n            }\n            let pos = this.pos;\n            let len = 0;\n            let ch = this.value.charCodeAt(pos);\n            let type;\n            // static types\n            type = Scanner._table[ch];\n            if (typeof type === 'number') {\n                this.pos += 1;\n                return { type, pos, len: 1 };\n            }\n            // number\n            if (Scanner.isDigitCharacter(ch)) {\n                type = TokenType.Int;\n                do {\n                    len += 1;\n                    ch = this.value.charCodeAt(pos + len);\n                } while (Scanner.isDigitCharacter(ch));\n                this.pos += len;\n                return { type, pos, len };\n            }\n            // variable name\n            if (Scanner.isVariableCharacter(ch)) {\n                type = TokenType.VariableName;\n                do {\n                    ch = this.value.charCodeAt(pos + (++len));\n                } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n                this.pos += len;\n                return { type, pos, len };\n            }\n            // format\n            type = TokenType.Format;\n            do {\n                len += 1;\n                ch = this.value.charCodeAt(pos + len);\n            } while (!isNaN(ch)\n                && typeof Scanner._table[ch] === 'undefined' // not static token\n                && !Scanner.isDigitCharacter(ch) // not number\n                && !Scanner.isVariableCharacter(ch) // not variable\n            );\n            this.pos += len;\n            return { type, pos, len };\n        }\n    }\n    Scanner._table = {\n        [charCode_1.CharCode.DollarSign]: TokenType.Dollar,\n        [charCode_1.CharCode.Colon]: TokenType.Colon,\n        [charCode_1.CharCode.Comma]: TokenType.Comma,\n        [charCode_1.CharCode.OpenCurlyBrace]: TokenType.CurlyOpen,\n        [charCode_1.CharCode.CloseCurlyBrace]: TokenType.CurlyClose,\n        [charCode_1.CharCode.Backslash]: TokenType.Backslash,\n        [charCode_1.CharCode.Slash]: TokenType.Forwardslash,\n        [charCode_1.CharCode.Pipe]: TokenType.Pipe,\n        [charCode_1.CharCode.Plus]: TokenType.Plus,\n        [charCode_1.CharCode.Dash]: TokenType.Dash,\n        [charCode_1.CharCode.QuestionMark]: TokenType.QuestionMark,\n    };\n    exports.Scanner = Scanner;\n    class Marker {\n        constructor() {\n            this._children = [];\n        }\n        appendChild(child) {\n            if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n                // this and previous child are text -> merge them\n                this._children[this._children.length - 1].value += child.value;\n            }\n            else {\n                // normal adoption of child\n                child.parent = this;\n                this._children.push(child);\n            }\n            return this;\n        }\n        replace(child, others) {\n            const { parent } = child;\n            const idx = parent.children.indexOf(child);\n            const newChildren = parent.children.slice(0);\n            newChildren.splice(idx, 1, ...others);\n            parent._children = newChildren;\n            (function _fixParent(children, parent) {\n                for (const child of children) {\n                    child.parent = parent;\n                    _fixParent(child.children, child);\n                }\n            })(others, parent);\n        }\n        get children() {\n            return this._children;\n        }\n        get snippet() {\n            let candidate = this;\n            while (true) {\n                if (!candidate) {\n                    return undefined;\n                }\n                if (candidate instanceof TextmateSnippet) {\n                    return candidate;\n                }\n                candidate = candidate.parent;\n            }\n        }\n        toString() {\n            return this.children.reduce((prev, cur) => prev + cur.toString(), '');\n        }\n        len() {\n            return 0;\n        }\n    }\n    exports.Marker = Marker;\n    class Text extends Marker {\n        constructor(value) {\n            super();\n            this.value = value;\n        }\n        static escape(value) {\n            return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n        }\n        toString() {\n            return this.value;\n        }\n        toTextmateString() {\n            return Text.escape(this.value);\n        }\n        len() {\n            return this.value.length;\n        }\n        clone() {\n            return new Text(this.value);\n        }\n    }\n    exports.Text = Text;\n    class TransformableMarker extends Marker {\n    }\n    exports.TransformableMarker = TransformableMarker;\n    class Placeholder extends TransformableMarker {\n        constructor(index) {\n            super();\n            this.index = index;\n        }\n        static compareByIndex(a, b) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.isFinalTabstop) {\n                return 1;\n            }\n            else if (b.isFinalTabstop) {\n                return -1;\n            }\n            else if (a.index < b.index) {\n                return -1;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        }\n        get isFinalTabstop() {\n            return this.index === 0;\n        }\n        get choice() {\n            return this._children.length === 1 && this._children[0] instanceof Choice\n                ? this._children[0]\n                : undefined;\n        }\n        toTextmateString() {\n            let transformString = '';\n            if (this.transform) {\n                transformString = this.transform.toTextmateString();\n            }\n            if (this.children.length === 0 && !this.transform) {\n                return `\\$${this.index}`;\n            }\n            else if (this.children.length === 0) {\n                return `\\${${this.index}${transformString}}`;\n            }\n            else if (this.choice) {\n                return `\\${${this.index}|${this.choice.toTextmateString()}|${transformString}}`;\n            }\n            else {\n                return `\\${${this.index}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n            }\n        }\n        clone() {\n            let ret = new Placeholder(this.index);\n            if (this.transform) {\n                ret.transform = this.transform.clone();\n            }\n            ret._children = this.children.map(child => child.clone());\n            return ret;\n        }\n    }\n    exports.Placeholder = Placeholder;\n    class Choice extends Marker {\n        constructor() {\n            super(...arguments);\n            this.options = [];\n        }\n        appendChild(marker) {\n            if (marker instanceof Text) {\n                marker.parent = this;\n                this.options.push(marker);\n            }\n            return this;\n        }\n        toString() {\n            return this.options[0].value;\n        }\n        toTextmateString() {\n            return this.options\n                .map(option => option.value.replace(/\\||,/g, '\\\\$&'))\n                .join(',');\n        }\n        len() {\n            return this.options[0].len();\n        }\n        clone() {\n            let ret = new Choice();\n            this.options.forEach(ret.appendChild, ret);\n            return ret;\n        }\n    }\n    exports.Choice = Choice;\n    class Transform extends Marker {\n        resolve(value) {\n            const _this = this;\n            let didMatch = false;\n            let ret = value.replace(this.regexp, function () {\n                didMatch = true;\n                return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n            });\n            // when the regex didn't match and when the transform has\n            // else branches, then run those\n            if (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n                ret = this._replace([]);\n            }\n            return ret;\n        }\n        _replace(groups) {\n            let ret = '';\n            for (const marker of this._children) {\n                if (marker instanceof FormatString) {\n                    let value = groups[marker.index] || '';\n                    value = marker.resolve(value);\n                    ret += value;\n                }\n                else {\n                    ret += marker.toString();\n                }\n            }\n            return ret;\n        }\n        toString() {\n            return '';\n        }\n        toTextmateString() {\n            return `/${this.regexp.source}/${this.children.map(c => c.toTextmateString())}/${(this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : '')}`;\n        }\n        clone() {\n            let ret = new Transform();\n            ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n            ret._children = this.children.map(child => child.clone());\n            return ret;\n        }\n    }\n    exports.Transform = Transform;\n    class FormatString extends Marker {\n        constructor(index, shorthandName, ifValue, elseValue) {\n            super();\n            this.index = index;\n            this.shorthandName = shorthandName;\n            this.ifValue = ifValue;\n            this.elseValue = elseValue;\n        }\n        resolve(value) {\n            if (this.shorthandName === 'upcase') {\n                return !value ? '' : value.toLocaleUpperCase();\n            }\n            else if (this.shorthandName === 'downcase') {\n                return !value ? '' : value.toLocaleLowerCase();\n            }\n            else if (this.shorthandName === 'capitalize') {\n                return !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n            }\n            else if (this.shorthandName === 'pascalcase') {\n                return !value ? '' : this._toPascalCase(value);\n            }\n            else if (Boolean(value) && typeof this.ifValue === 'string') {\n                return this.ifValue;\n            }\n            else if (!Boolean(value) && typeof this.elseValue === 'string') {\n                return this.elseValue;\n            }\n            else {\n                return value || '';\n            }\n        }\n        _toPascalCase(value) {\n            const match = value.match(/[a-z]+/gi);\n            if (!match) {\n                return value;\n            }\n            return match.map(function (word) {\n                return word.charAt(0).toUpperCase()\n                    + word.substr(1).toLowerCase();\n            })\n                .join('');\n        }\n        toTextmateString() {\n            let value = '${';\n            value += this.index;\n            if (this.shorthandName) {\n                value += `:/${this.shorthandName}`;\n            }\n            else if (this.ifValue && this.elseValue) {\n                value += `:?${this.ifValue}:${this.elseValue}`;\n            }\n            else if (this.ifValue) {\n                value += `:+${this.ifValue}`;\n            }\n            else if (this.elseValue) {\n                value += `:-${this.elseValue}`;\n            }\n            value += '}';\n            return value;\n        }\n        clone() {\n            let ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n            return ret;\n        }\n    }\n    exports.FormatString = FormatString;\n    class Variable extends TransformableMarker {\n        constructor(name) {\n            super();\n            this.name = name;\n        }\n        resolve(resolver) {\n            let value = resolver.resolve(this);\n            if (this.transform) {\n                value = this.transform.resolve(value || '');\n            }\n            if (value !== undefined) {\n                this._children = [new Text(value)];\n                return true;\n            }\n            return false;\n        }\n        toTextmateString() {\n            let transformString = '';\n            if (this.transform) {\n                transformString = this.transform.toTextmateString();\n            }\n            if (this.children.length === 0) {\n                return `\\${${this.name}${transformString}}`;\n            }\n            else {\n                return `\\${${this.name}:${this.children.map(child => child.toTextmateString()).join('')}${transformString}}`;\n            }\n        }\n        clone() {\n            const ret = new Variable(this.name);\n            if (this.transform) {\n                ret.transform = this.transform.clone();\n            }\n            ret._children = this.children.map(child => child.clone());\n            return ret;\n        }\n    }\n    exports.Variable = Variable;\n    function walk(marker, visitor) {\n        const stack = [...marker];\n        while (stack.length > 0) {\n            const marker = stack.shift();\n            const recurse = visitor(marker);\n            if (!recurse) {\n                break;\n            }\n            stack.unshift(...marker.children);\n        }\n    }\n    class TextmateSnippet extends Marker {\n        get placeholderInfo() {\n            if (!this._placeholders) {\n                // fill in placeholders\n                let all = [];\n                let last;\n                this.walk(function (candidate) {\n                    if (candidate instanceof Placeholder) {\n                        all.push(candidate);\n                        last = !last || last.index < candidate.index ? candidate : last;\n                    }\n                    return true;\n                });\n                this._placeholders = { all, last };\n            }\n            return this._placeholders;\n        }\n        get placeholders() {\n            const { all } = this.placeholderInfo;\n            return all;\n        }\n        offset(marker) {\n            let pos = 0;\n            let found = false;\n            this.walk(candidate => {\n                if (candidate === marker) {\n                    found = true;\n                    return false;\n                }\n                pos += candidate.len();\n                return true;\n            });\n            if (!found) {\n                return -1;\n            }\n            return pos;\n        }\n        fullLen(marker) {\n            let ret = 0;\n            walk([marker], marker => {\n                ret += marker.len();\n                return true;\n            });\n            return ret;\n        }\n        enclosingPlaceholders(placeholder) {\n            let ret = [];\n            let { parent } = placeholder;\n            while (parent) {\n                if (parent instanceof Placeholder) {\n                    ret.push(parent);\n                }\n                parent = parent.parent;\n            }\n            return ret;\n        }\n        resolveVariables(resolver) {\n            this.walk(candidate => {\n                if (candidate instanceof Variable) {\n                    if (candidate.resolve(resolver)) {\n                        this._placeholders = undefined;\n                    }\n                }\n                return true;\n            });\n            return this;\n        }\n        appendChild(child) {\n            this._placeholders = undefined;\n            return super.appendChild(child);\n        }\n        replace(child, others) {\n            this._placeholders = undefined;\n            return super.replace(child, others);\n        }\n        toTextmateString() {\n            return this.children.reduce((prev, cur) => prev + cur.toTextmateString(), '');\n        }\n        clone() {\n            let ret = new TextmateSnippet();\n            this._children = this.children.map(child => child.clone());\n            return ret;\n        }\n        walk(visitor) {\n            walk(this.children, visitor);\n        }\n    }\n    exports.TextmateSnippet = TextmateSnippet;\n    class SnippetParser {\n        constructor() {\n            this._scanner = new Scanner();\n        }\n        static escape(value) {\n            return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n        }\n        text(value) {\n            return this.parse(value).toString();\n        }\n        parse(value, insertFinalTabstop, enforceFinalTabstop) {\n            this._scanner.text(value);\n            this._token = this._scanner.next();\n            const snippet = new TextmateSnippet();\n            while (this._parse(snippet)) {\n                // nothing\n            }\n            // fill in values for placeholders. the first placeholder of an index\n            // that has a value defines the value for all placeholders with that index\n            const placeholderDefaultValues = new Map();\n            const incompletePlaceholders = [];\n            let placeholderCount = 0;\n            snippet.walk(marker => {\n                if (marker instanceof Placeholder) {\n                    placeholderCount += 1;\n                    if (marker.isFinalTabstop) {\n                        placeholderDefaultValues.set(0, undefined);\n                    }\n                    else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n                        placeholderDefaultValues.set(marker.index, marker.children);\n                    }\n                    else {\n                        incompletePlaceholders.push(marker);\n                    }\n                }\n                return true;\n            });\n            for (const placeholder of incompletePlaceholders) {\n                const defaultValues = placeholderDefaultValues.get(placeholder.index);\n                if (defaultValues) {\n                    const clone = new Placeholder(placeholder.index);\n                    clone.transform = placeholder.transform;\n                    for (const child of defaultValues) {\n                        clone.appendChild(child.clone());\n                    }\n                    snippet.replace(placeholder, [clone]);\n                }\n            }\n            if (!enforceFinalTabstop) {\n                enforceFinalTabstop = placeholderCount > 0 && insertFinalTabstop;\n            }\n            if (!placeholderDefaultValues.has(0) && enforceFinalTabstop) {\n                // the snippet uses placeholders but has no\n                // final tabstop defined -> insert at the end\n                snippet.appendChild(new Placeholder(0));\n            }\n            return snippet;\n        }\n        _accept(type, value) {\n            if (type === undefined || this._token.type === type) {\n                let ret = !value ? true : this._scanner.tokenText(this._token);\n                this._token = this._scanner.next();\n                return ret;\n            }\n            return false;\n        }\n        _backTo(token) {\n            this._scanner.pos = token.pos + token.len;\n            this._token = token;\n            return false;\n        }\n        _until(type) {\n            if (this._token.type === TokenType.EOF) {\n                return false;\n            }\n            let start = this._token;\n            while (this._token.type !== type) {\n                this._token = this._scanner.next();\n                if (this._token.type === TokenType.EOF) {\n                    return false;\n                }\n            }\n            let value = this._scanner.value.substring(start.pos, this._token.pos);\n            this._token = this._scanner.next();\n            return value;\n        }\n        _parse(marker) {\n            return this._parseEscaped(marker)\n                || this._parseTabstopOrVariableName(marker)\n                || this._parseComplexPlaceholder(marker)\n                || this._parseComplexVariable(marker)\n                || this._parseAnything(marker);\n        }\n        // \\$, \\\\, \\} -> just text\n        _parseEscaped(marker) {\n            let value;\n            if (value = this._accept(TokenType.Backslash, true)) {\n                // saw a backslash, append escaped token or that backslash\n                value = this._accept(TokenType.Dollar, true)\n                    || this._accept(TokenType.CurlyClose, true)\n                    || this._accept(TokenType.Backslash, true)\n                    || value;\n                marker.appendChild(new Text(value));\n                return true;\n            }\n            return false;\n        }\n        // $foo -> variable, $1 -> tabstop\n        _parseTabstopOrVariableName(parent) {\n            let value;\n            const token = this._token;\n            const match = this._accept(TokenType.Dollar)\n                && (value = this._accept(TokenType.VariableName, true) || this._accept(TokenType.Int, true));\n            if (!match) {\n                return this._backTo(token);\n            }\n            parent.appendChild(/^\\d+$/.test(value)\n                ? new Placeholder(Number(value))\n                : new Variable(value));\n            return true;\n        }\n        // ${1:<children>}, ${1} -> placeholder\n        _parseComplexPlaceholder(parent) {\n            let index;\n            const token = this._token;\n            const match = this._accept(TokenType.Dollar)\n                && this._accept(TokenType.CurlyOpen)\n                && (index = this._accept(TokenType.Int, true));\n            if (!match) {\n                return this._backTo(token);\n            }\n            const placeholder = new Placeholder(Number(index));\n            if (this._accept(TokenType.Colon)) {\n                // ${1:<children>}\n                while (true) {\n                    // ...} -> done\n                    if (this._accept(TokenType.CurlyClose)) {\n                        parent.appendChild(placeholder);\n                        return true;\n                    }\n                    if (this._parse(placeholder)) {\n                        continue;\n                    }\n                    // fallback\n                    parent.appendChild(new Text('${' + index + ':'));\n                    placeholder.children.forEach(parent.appendChild, parent);\n                    return true;\n                }\n            }\n            else if (placeholder.index > 0 && this._accept(TokenType.Pipe)) {\n                // ${1|one,two,three|}\n                const choice = new Choice();\n                while (true) {\n                    if (this._parseChoiceElement(choice)) {\n                        if (this._accept(TokenType.Comma)) {\n                            // opt, -> more\n                            continue;\n                        }\n                        if (this._accept(TokenType.Pipe)) {\n                            placeholder.appendChild(choice);\n                            if (this._accept(TokenType.CurlyClose)) {\n                                // ..|} -> done\n                                parent.appendChild(placeholder);\n                                return true;\n                            }\n                        }\n                    }\n                    this._backTo(token);\n                    return false;\n                }\n            }\n            else if (this._accept(TokenType.Forwardslash)) {\n                // ${1/<regex>/<format>/<options>}\n                if (this._parseTransform(placeholder)) {\n                    parent.appendChild(placeholder);\n                    return true;\n                }\n                this._backTo(token);\n                return false;\n            }\n            else if (this._accept(TokenType.CurlyClose)) {\n                // ${1}\n                parent.appendChild(placeholder);\n                return true;\n            }\n            else {\n                // ${1 <- missing curly or colon\n                return this._backTo(token);\n            }\n        }\n        _parseChoiceElement(parent) {\n            const token = this._token;\n            const values = [];\n            while (true) {\n                if (this._token.type === TokenType.Comma || this._token.type === TokenType.Pipe) {\n                    break;\n                }\n                let value;\n                if (value = this._accept(TokenType.Backslash, true)) {\n                    // \\, \\|, or \\\\\n                    value = this._accept(TokenType.Comma, true)\n                        || this._accept(TokenType.Pipe, true)\n                        || this._accept(TokenType.Backslash, true)\n                        || value;\n                }\n                else {\n                    value = this._accept(undefined, true);\n                }\n                if (!value) {\n                    // EOF\n                    this._backTo(token);\n                    return false;\n                }\n                values.push(value);\n            }\n            if (values.length === 0) {\n                this._backTo(token);\n                return false;\n            }\n            parent.appendChild(new Text(values.join('')));\n            return true;\n        }\n        // ${foo:<children>}, ${foo} -> variable\n        _parseComplexVariable(parent) {\n            let name;\n            const token = this._token;\n            const match = this._accept(TokenType.Dollar)\n                && this._accept(TokenType.CurlyOpen)\n                && (name = this._accept(TokenType.VariableName, true));\n            if (!match) {\n                return this._backTo(token);\n            }\n            const variable = new Variable(name);\n            if (this._accept(TokenType.Colon)) {\n                // ${foo:<children>}\n                while (true) {\n                    // ...} -> done\n                    if (this._accept(TokenType.CurlyClose)) {\n                        parent.appendChild(variable);\n                        return true;\n                    }\n                    if (this._parse(variable)) {\n                        continue;\n                    }\n                    // fallback\n                    parent.appendChild(new Text('${' + name + ':'));\n                    variable.children.forEach(parent.appendChild, parent);\n                    return true;\n                }\n            }\n            else if (this._accept(TokenType.Forwardslash)) {\n                // ${foo/<regex>/<format>/<options>}\n                if (this._parseTransform(variable)) {\n                    parent.appendChild(variable);\n                    return true;\n                }\n                this._backTo(token);\n                return false;\n            }\n            else if (this._accept(TokenType.CurlyClose)) {\n                // ${foo}\n                parent.appendChild(variable);\n                return true;\n            }\n            else {\n                // ${foo <- missing curly or colon\n                return this._backTo(token);\n            }\n        }\n        _parseTransform(parent) {\n            // ...<regex>/<format>/<options>}\n            let transform = new Transform();\n            let regexValue = '';\n            let regexOptions = '';\n            // (1) /regex\n            while (true) {\n                if (this._accept(TokenType.Forwardslash)) {\n                    break;\n                }\n                let escaped;\n                if (escaped = this._accept(TokenType.Backslash, true)) {\n                    escaped = this._accept(TokenType.Forwardslash, true) || escaped;\n                    regexValue += escaped;\n                    continue;\n                }\n                if (this._token.type !== TokenType.EOF) {\n                    regexValue += this._accept(undefined, true);\n                    continue;\n                }\n                return false;\n            }\n            // (2) /format\n            while (true) {\n                if (this._accept(TokenType.Forwardslash)) {\n                    break;\n                }\n                let escaped;\n                if (escaped = this._accept(TokenType.Backslash, true)) {\n                    escaped = this._accept(TokenType.Backslash, true) || this._accept(TokenType.Forwardslash, true) || escaped;\n                    transform.appendChild(new Text(escaped));\n                    continue;\n                }\n                if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n                    continue;\n                }\n                return false;\n            }\n            // (3) /option\n            while (true) {\n                if (this._accept(TokenType.CurlyClose)) {\n                    break;\n                }\n                if (this._token.type !== TokenType.EOF) {\n                    regexOptions += this._accept(undefined, true);\n                    continue;\n                }\n                return false;\n            }\n            try {\n                transform.regexp = new RegExp(regexValue, regexOptions);\n            }\n            catch (e) {\n                // invalid regexp\n                return false;\n            }\n            parent.transform = transform;\n            return true;\n        }\n        _parseFormatString(parent) {\n            const token = this._token;\n            if (!this._accept(TokenType.Dollar)) {\n                return false;\n            }\n            let complex = false;\n            if (this._accept(TokenType.CurlyOpen)) {\n                complex = true;\n            }\n            let index = this._accept(TokenType.Int, true);\n            if (!index) {\n                this._backTo(token);\n                return false;\n            }\n            else if (!complex) {\n                // $1\n                parent.appendChild(new FormatString(Number(index)));\n                return true;\n            }\n            else if (this._accept(TokenType.CurlyClose)) {\n                // ${1}\n                parent.appendChild(new FormatString(Number(index)));\n                return true;\n            }\n            else if (!this._accept(TokenType.Colon)) {\n                this._backTo(token);\n                return false;\n            }\n            if (this._accept(TokenType.Forwardslash)) {\n                // ${1:/upcase}\n                let shorthand = this._accept(TokenType.VariableName, true);\n                if (!shorthand || !this._accept(TokenType.CurlyClose)) {\n                    this._backTo(token);\n                    return false;\n                }\n                else {\n                    parent.appendChild(new FormatString(Number(index), shorthand));\n                    return true;\n                }\n            }\n            else if (this._accept(TokenType.Plus)) {\n                // ${1:+<if>}\n                let ifValue = this._until(TokenType.CurlyClose);\n                if (ifValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n                    return true;\n                }\n            }\n            else if (this._accept(TokenType.Dash)) {\n                // ${2:-<else>}\n                let elseValue = this._until(TokenType.CurlyClose);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                    return true;\n                }\n            }\n            else if (this._accept(TokenType.QuestionMark)) {\n                // ${2:?<if>:<else>}\n                let ifValue = this._until(TokenType.Colon);\n                if (ifValue) {\n                    let elseValue = this._until(TokenType.CurlyClose);\n                    if (elseValue) {\n                        parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n                        return true;\n                    }\n                }\n            }\n            else {\n                // ${1:<else>}\n                let elseValue = this._until(TokenType.CurlyClose);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                    return true;\n                }\n            }\n            this._backTo(token);\n            return false;\n        }\n        _parseAnything(marker) {\n            if (this._token.type !== TokenType.EOF) {\n                marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n                this._accept(undefined);\n                return true;\n            }\n            return false;\n        }\n    }\n    exports.SnippetParser = SnippetParser;\n});\n",null]}