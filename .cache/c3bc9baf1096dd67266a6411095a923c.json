{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeStore.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeStore.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar resources = require(\"vs/base/common/resources\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar colorThemeData_1 = require(\"vs/workbench/services/themes/browser/colorThemeData\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar themesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'themes',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.themes', 'Contributes textmate color themes.'),\n        type: 'array',\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: workbenchThemeService_1.VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n            properties: {\n                id: {\n                    description: nls.localize('vscode.extension.contributes.themes.id', 'Id of the icon theme as used in the user settings.'),\n                    type: 'string'\n                },\n                label: {\n                    description: nls.localize('vscode.extension.contributes.themes.label', 'Label of the color theme as shown in the UI.'),\n                    type: 'string'\n                },\n                uiTheme: {\n                    description: nls.localize('vscode.extension.contributes.themes.uiTheme', 'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme.'),\n                    enum: [workbenchThemeService_1.VS_LIGHT_THEME, workbenchThemeService_1.VS_DARK_THEME, workbenchThemeService_1.VS_HC_THEME]\n                },\n                path: {\n                    description: nls.localize('vscode.extension.contributes.themes.path', 'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./themes/themeFile.tmTheme\\'.'),\n                    type: 'string'\n                }\n            },\n            required: ['path', 'uiTheme']\n        }\n    }\n});\nvar ColorThemeStore = /** @class */ (function () {\n    function ColorThemeStore(extensionService, defaultTheme) {\n        this.extensionService = extensionService;\n        this.extensionsColorThemes = [defaultTheme];\n        this.onDidChangeEmitter = new event_1.Emitter();\n        this.initialize();\n    }\n    Object.defineProperty(ColorThemeStore.prototype, \"onDidChange\", {\n        get: function () { return this.onDidChangeEmitter.event; },\n        enumerable: true,\n        configurable: true\n    });\n    ColorThemeStore.prototype.initialize = function () {\n        var _this = this;\n        themesExtPoint.setHandler(function (extensions, delta) {\n            var previousIds = {};\n            var added = [];\n            for (var _i = 0, _a = _this.extensionsColorThemes; _i < _a.length; _i++) {\n                var theme = _a[_i];\n                previousIds[theme.id] = true;\n            }\n            _this.extensionsColorThemes.length = 1; // remove all but the default theme\n            for (var _b = 0, extensions_2 = extensions; _b < extensions_2.length; _b++) {\n                var ext = extensions_2[_b];\n                var extensionData = {\n                    extensionId: ext.description.identifier.value,\n                    extensionPublisher: ext.description.publisher,\n                    extensionName: ext.description.name,\n                    extensionIsBuiltin: ext.description.isBuiltin\n                };\n                _this.onThemes(ext.description.extensionLocation, extensionData, ext.value, ext.collector);\n            }\n            for (var _c = 0, _d = _this.extensionsColorThemes; _c < _d.length; _c++) {\n                var theme = _d[_c];\n                if (!previousIds[theme.id]) {\n                    added.push(theme);\n                }\n            }\n            _this.onDidChangeEmitter.fire({ themes: _this.extensionsColorThemes, added: added });\n        });\n    };\n    ColorThemeStore.prototype.onThemes = function (extensionLocation, extensionData, themes, collector) {\n        var _this = this;\n        if (!Array.isArray(themes)) {\n            collector.error(nls.localize('reqarray', \"Extension point `{0}` must be an array.\", themesExtPoint.name));\n            return;\n        }\n        themes.forEach(function (theme) {\n            if (!theme.path || !types.isString(theme.path)) {\n                collector.error(nls.localize('reqpath', \"Expected string in `contributes.{0}.path`. Provided value: {1}\", themesExtPoint.name, String(theme.path)));\n                return;\n            }\n            var colorThemeLocation = resources.joinPath(extensionLocation, theme.path);\n            if (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n                collector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", themesExtPoint.name, colorThemeLocation.path, extensionLocation.path));\n            }\n            var themeData = colorThemeData_1.ColorThemeData.fromExtensionTheme(theme, colorThemeLocation, extensionData);\n            if (themeData.id === _this.extensionsColorThemes[0].id) {\n                _this.extensionsColorThemes[0] = themeData;\n            }\n            else {\n                _this.extensionsColorThemes.push(themeData);\n            }\n        });\n    };\n    ColorThemeStore.prototype.findThemeData = function (themeId, defaultId) {\n        return this.getColorThemes().then(function (allThemes) {\n            var defaultTheme = undefined;\n            for (var _i = 0, allThemes_1 = allThemes; _i < allThemes_1.length; _i++) {\n                var t = allThemes_1[_i];\n                if (t.id === themeId) {\n                    return t;\n                }\n                if (t.id === defaultId) {\n                    defaultTheme = t;\n                }\n            }\n            return defaultTheme;\n        });\n    };\n    ColorThemeStore.prototype.findThemeDataBySettingsId = function (settingsId, defaultId) {\n        return this.getColorThemes().then(function (allThemes) {\n            var defaultTheme = undefined;\n            for (var _i = 0, allThemes_2 = allThemes; _i < allThemes_2.length; _i++) {\n                var t = allThemes_2[_i];\n                if (t.settingsId === settingsId) {\n                    return t;\n                }\n                if (t.id === defaultId) {\n                    defaultTheme = t;\n                }\n            }\n            return defaultTheme;\n        });\n    };\n    ColorThemeStore.prototype.findThemeDataByParentLocation = function (parentLocation) {\n        if (parentLocation) {\n            return this.getColorThemes().then(function (allThemes) {\n                return allThemes.filter(function (t) { return t.location && resources.isEqualOrParent(t.location, parentLocation); });\n            });\n        }\n        return Promise.resolve([]);\n    };\n    ColorThemeStore.prototype.getColorThemes = function () {\n        var _this = this;\n        return this.extensionService.whenInstalledExtensionsRegistered().then(function (_) {\n            return _this.extensionsColorThemes;\n        });\n    };\n    ColorThemeStore = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService)\n    ], ColorThemeStore);\n    return ColorThemeStore;\n}());\nexports.ColorThemeStore = ColorThemeStore;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeStore.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/colorThemeStore.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport * as types from 'vs/base/common/types';\nimport * as resources from 'vs/base/common/resources';\nimport { ExtensionsRegistry, ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ExtensionData, IThemeExtensionPoint, VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { ColorThemeData } from 'vs/workbench/services/themes/browser/colorThemeData';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\n\nconst themesExtPoint = ExtensionsRegistry.registerExtensionPoint<IThemeExtensionPoint[]>({\n\textensionPoint: 'themes',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.themes', 'Contributes textmate color themes.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { label: '${1:label}', id: '${2:id}', uiTheme: VS_DARK_THEME, path: './themes/${3:id}.tmTheme.' } }],\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.themes.id', 'Id of the icon theme as used in the user settings.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.themes.label', 'Label of the color theme as shown in the UI.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tuiTheme: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.themes.uiTheme', 'Base theme defining the colors around the editor: \\'vs\\' is the light color theme, \\'vs-dark\\' is the dark color theme. \\'hc-black\\' is the dark high contrast theme.'),\n\t\t\t\t\tenum: [VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME]\n\t\t\t\t},\n\t\t\t\tpath: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.themes.path', 'Path of the tmTheme file. The path is relative to the extension folder and is typically \\'./themes/themeFile.tmTheme\\'.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['path', 'uiTheme']\n\t\t}\n\t}\n});\n\nexport interface ColorThemeChangeEvent {\n\tthemes: ColorThemeData[];\n\tadded: ColorThemeData[];\n}\n\nexport class ColorThemeStore {\n\n\tprivate extensionsColorThemes: ColorThemeData[];\n\tprivate readonly onDidChangeEmitter: Emitter<ColorThemeChangeEvent>;\n\n\tpublic get onDidChange(): Event<ColorThemeChangeEvent> { return this.onDidChangeEmitter.event; }\n\n\tconstructor(@IExtensionService private readonly extensionService: IExtensionService, defaultTheme: ColorThemeData) {\n\t\tthis.extensionsColorThemes = [defaultTheme];\n\t\tthis.onDidChangeEmitter = new Emitter<ColorThemeChangeEvent>();\n\t\tthis.initialize();\n\t}\n\n\n\tprivate initialize() {\n\t\tthemesExtPoint.setHandler((extensions, delta) => {\n\t\t\tconst previousIds: { [key: string]: boolean } = {};\n\t\t\tconst added: ColorThemeData[] = [];\n\t\t\tfor (const theme of this.extensionsColorThemes) {\n\t\t\t\tpreviousIds[theme.id] = true;\n\t\t\t}\n\t\t\tthis.extensionsColorThemes.length = 1; // remove all but the default theme\n\t\t\tfor (let ext of extensions) {\n\t\t\t\tlet extensionData = {\n\t\t\t\t\textensionId: ext.description.identifier.value,\n\t\t\t\t\textensionPublisher: ext.description.publisher,\n\t\t\t\t\textensionName: ext.description.name,\n\t\t\t\t\textensionIsBuiltin: ext.description.isBuiltin\n\t\t\t\t};\n\t\t\t\tthis.onThemes(ext.description.extensionLocation, extensionData, ext.value, ext.collector);\n\t\t\t}\n\t\t\tfor (const theme of this.extensionsColorThemes) {\n\t\t\t\tif (!previousIds[theme.id]) {\n\t\t\t\t\tadded.push(theme);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.onDidChangeEmitter.fire({ themes: this.extensionsColorThemes, added });\n\t\t});\n\t}\n\n\tprivate onThemes(extensionLocation: URI, extensionData: ExtensionData, themes: IThemeExtensionPoint[], collector: ExtensionMessageCollector): void {\n\t\tif (!Array.isArray(themes)) {\n\t\t\tcollector.error(nls.localize(\n\t\t\t\t'reqarray',\n\t\t\t\t\"Extension point `{0}` must be an array.\",\n\t\t\t\tthemesExtPoint.name\n\t\t\t));\n\t\t\treturn;\n\t\t}\n\t\tthemes.forEach(theme => {\n\t\t\tif (!theme.path || !types.isString(theme.path)) {\n\t\t\t\tcollector.error(nls.localize(\n\t\t\t\t\t'reqpath',\n\t\t\t\t\t\"Expected string in `contributes.{0}.path`. Provided value: {1}\",\n\t\t\t\t\tthemesExtPoint.name,\n\t\t\t\t\tString(theme.path)\n\t\t\t\t));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst colorThemeLocation = resources.joinPath(extensionLocation, theme.path);\n\t\t\tif (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n\t\t\t\tcollector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", themesExtPoint.name, colorThemeLocation.path, extensionLocation.path));\n\t\t\t}\n\n\t\t\tlet themeData = ColorThemeData.fromExtensionTheme(theme, colorThemeLocation, extensionData);\n\t\t\tif (themeData.id === this.extensionsColorThemes[0].id) {\n\t\t\t\tthis.extensionsColorThemes[0] = themeData;\n\t\t\t} else {\n\t\t\t\tthis.extensionsColorThemes.push(themeData);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic findThemeData(themeId: string, defaultId?: string): Promise<ColorThemeData | undefined> {\n\t\treturn this.getColorThemes().then(allThemes => {\n\t\t\tlet defaultTheme: ColorThemeData | undefined = undefined;\n\t\t\tfor (let t of allThemes) {\n\t\t\t\tif (t.id === themeId) {\n\t\t\t\t\treturn <ColorThemeData>t;\n\t\t\t\t}\n\t\t\t\tif (t.id === defaultId) {\n\t\t\t\t\tdefaultTheme = <ColorThemeData>t;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn defaultTheme;\n\t\t});\n\t}\n\n\tpublic findThemeDataBySettingsId(settingsId: string, defaultId: string | undefined): Promise<ColorThemeData | undefined> {\n\t\treturn this.getColorThemes().then(allThemes => {\n\t\t\tlet defaultTheme: ColorThemeData | undefined = undefined;\n\t\t\tfor (let t of allThemes) {\n\t\t\t\tif (t.settingsId === settingsId) {\n\t\t\t\t\treturn <ColorThemeData>t;\n\t\t\t\t}\n\t\t\t\tif (t.id === defaultId) {\n\t\t\t\t\tdefaultTheme = <ColorThemeData>t;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn defaultTheme;\n\t\t});\n\t}\n\n\tpublic findThemeDataByParentLocation(parentLocation: URI | undefined): Promise<ColorThemeData[]> {\n\t\tif (parentLocation) {\n\t\t\treturn this.getColorThemes().then(allThemes => {\n\t\t\t\treturn allThemes.filter(t => t.location && resources.isEqualOrParent(t.location, parentLocation));\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve([]);\n\n\t}\n\n\tpublic getColorThemes(): Promise<ColorThemeData[]> {\n\t\treturn this.extensionService.whenInstalledExtensionsRegistered().then(_ => {\n\t\t\treturn this.extensionsColorThemes;\n\t\t});\n\t}\n\n}\n"]}]}