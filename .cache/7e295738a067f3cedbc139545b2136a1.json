{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/normalization.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/map\"], function (require, exports, map_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The normalize() method returns the Unicode Normalization Form of a given string. The form will be\n     * the Normalization Form Canonical Composition.\n     *\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize}\n     */\n    exports.canNormalize = typeof (''.normalize) === 'function';\n    const nfcCache = new map_1.LRUCache(10000); // bounded to 10000 elements\n    function normalizeNFC(str) {\n        return normalize(str, 'NFC', nfcCache);\n    }\n    exports.normalizeNFC = normalizeNFC;\n    const nfdCache = new map_1.LRUCache(10000); // bounded to 10000 elements\n    function normalizeNFD(str) {\n        return normalize(str, 'NFD', nfdCache);\n    }\n    exports.normalizeNFD = normalizeNFD;\n    const nonAsciiCharactersPattern = /[^\\u0000-\\u0080]/;\n    function normalize(str, form, normalizedCache) {\n        if (!exports.canNormalize || !str) {\n            return str;\n        }\n        const cached = normalizedCache.get(str);\n        if (cached) {\n            return cached;\n        }\n        let res;\n        if (nonAsciiCharactersPattern.test(str)) {\n            res = str.normalize(form);\n        }\n        else {\n            res = str;\n        }\n        // Use the cache for fast lookup\n        normalizedCache.set(str, res);\n        return res;\n    }\n});\n",null]}