{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IndentConsts;\n(function (IndentConsts) {\n    IndentConsts[IndentConsts[\"INCREASE_MASK\"] = 1] = \"INCREASE_MASK\";\n    IndentConsts[IndentConsts[\"DECREASE_MASK\"] = 2] = \"DECREASE_MASK\";\n    IndentConsts[IndentConsts[\"INDENT_NEXTLINE_MASK\"] = 4] = \"INDENT_NEXTLINE_MASK\";\n    IndentConsts[IndentConsts[\"UNINDENT_MASK\"] = 8] = \"UNINDENT_MASK\";\n})(IndentConsts = exports.IndentConsts || (exports.IndentConsts = {}));\nvar IndentRulesSupport = /** @class */ (function () {\n    function IndentRulesSupport(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    IndentRulesSupport.prototype.shouldIncrease = function (text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    };\n    IndentRulesSupport.prototype.shouldDecrease = function (text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    };\n    IndentRulesSupport.prototype.shouldIndentNextLine = function (text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    };\n    IndentRulesSupport.prototype.shouldIgnore = function (text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    };\n    IndentRulesSupport.prototype.getIndentMetadata = function (text) {\n        var ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += IndentConsts.INCREASE_MASK;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += IndentConsts.DECREASE_MASK;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += IndentConsts.INDENT_NEXTLINE_MASK;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += IndentConsts.UNINDENT_MASK;\n        }\n        return ret;\n    };\n    return IndentRulesSupport;\n}());\nexports.IndentRulesSupport = IndentRulesSupport;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/indentRules.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,IAAkB,YAKjB;AALD,WAAkB,YAAY;IAC7B,iEAA0B,CAAA;IAC1B,iEAA0B,CAAA;IAC1B,+EAAiC,CAAA;IACjC,iEAA0B,CAAA;AAC3B,CAAC,EALiB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAK7B;AAED;IAIC,4BAAY,gBAAiC;QAC5C,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,2CAAc,GAArB,UAAsB,IAAY;QACjC,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5G,OAAO,IAAI,CAAC;aACZ;YACD,iHAAiH;YACjH,gBAAgB;YAChB,IAAI;SACJ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,2CAAc,GAArB,UAAsB,IAAY;QACjC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtI,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,iDAAoB,GAA3B,UAA4B,IAAY;QACvC,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtI,OAAO,IAAI,CAAC;SACZ;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,yCAAY,GAAnB,UAAoB,IAAY;QAC/B,2CAA2C;QAC3C,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,IAAI,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtI,OAAO,IAAI,CAAC;SACZ;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,8CAAiB,GAAxB,UAAyB,IAAY;QACpC,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC9B,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC9B,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;YACpC,GAAG,IAAI,YAAY,CAAC,oBAAoB,CAAC;SACzC;QACD,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;YAC5B,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC;SAClC;QACD,OAAO,GAAG,CAAC;IACZ,CAAC;IACF,yBAAC;AAAD,CAAC,AA5DD,IA4DC;AA5DY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IndentationRule } from 'vs/editor/common/modes/languageConfiguration';\n\nexport const enum IndentConsts {\n\tINCREASE_MASK = 0b00000001,\n\tDECREASE_MASK = 0b00000010,\n\tINDENT_NEXTLINE_MASK = 0b00000100,\n\tUNINDENT_MASK = 0b00001000,\n}\n\nexport class IndentRulesSupport {\n\n\tprivate readonly _indentationRules: IndentationRule;\n\n\tconstructor(indentationRules: IndentationRule) {\n\t\tthis._indentationRules = indentationRules;\n\t}\n\n\tpublic shouldIncrease(text: string): boolean {\n\t\tif (this._indentationRules) {\n\t\t\tif (this._indentationRules.increaseIndentPattern && this._indentationRules.increaseIndentPattern.test(text)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n\t\t\t// \treturn true;\n\t\t\t// }\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic shouldDecrease(text: string): boolean {\n\t\tif (this._indentationRules && this._indentationRules.decreaseIndentPattern && this._indentationRules.decreaseIndentPattern.test(text)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic shouldIndentNextLine(text: string): boolean {\n\t\tif (this._indentationRules && this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic shouldIgnore(text: string): boolean {\n\t\t// the text matches `unIndentedLinePattern`\n\t\tif (this._indentationRules && this._indentationRules.unIndentedLinePattern && this._indentationRules.unIndentedLinePattern.test(text)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic getIndentMetadata(text: string): number {\n\t\tlet ret = 0;\n\t\tif (this.shouldIncrease(text)) {\n\t\t\tret += IndentConsts.INCREASE_MASK;\n\t\t}\n\t\tif (this.shouldDecrease(text)) {\n\t\t\tret += IndentConsts.DECREASE_MASK;\n\t\t}\n\t\tif (this.shouldIndentNextLine(text)) {\n\t\t\tret += IndentConsts.INDENT_NEXTLINE_MASK;\n\t\t}\n\t\tif (this.shouldIgnore(text)) {\n\t\t\tret += IndentConsts.UNINDENT_MASK;\n\t\t}\n\t\treturn ret;\n\t}\n}\n"]}]}