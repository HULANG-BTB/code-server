{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/storage/common/storage\", \"vs/base/common/types\"], function (require, exports, storage_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Memento {\n        constructor(id, storageService) {\n            this.storageService = storageService;\n            this.id = Memento.COMMON_PREFIX + id;\n        }\n        getMemento(scope) {\n            // Scope by Workspace\n            if (scope === storage_1.StorageScope.WORKSPACE) {\n                let workspaceMemento = Memento.workspaceMementos[this.id];\n                if (!workspaceMemento) {\n                    workspaceMemento = new ScopedMemento(this.id, scope, this.storageService);\n                    Memento.workspaceMementos[this.id] = workspaceMemento;\n                }\n                return workspaceMemento.getMemento();\n            }\n            // Scope Global\n            let globalMemento = Memento.globalMementos[this.id];\n            if (!globalMemento) {\n                globalMemento = new ScopedMemento(this.id, scope, this.storageService);\n                Memento.globalMementos[this.id] = globalMemento;\n            }\n            return globalMemento.getMemento();\n        }\n        saveMemento() {\n            // Workspace\n            const workspaceMemento = Memento.workspaceMementos[this.id];\n            if (workspaceMemento) {\n                workspaceMemento.save();\n            }\n            // Global\n            const globalMemento = Memento.globalMementos[this.id];\n            if (globalMemento) {\n                globalMemento.save();\n            }\n        }\n    }\n    Memento.globalMementos = Object.create(null);\n    Memento.workspaceMementos = Object.create(null);\n    Memento.COMMON_PREFIX = 'memento/';\n    exports.Memento = Memento;\n    class ScopedMemento {\n        constructor(id, scope, storageService) {\n            this.id = id;\n            this.scope = scope;\n            this.storageService = storageService;\n            this.mementoObj = this.load();\n        }\n        getMemento() {\n            return this.mementoObj;\n        }\n        load() {\n            const memento = this.storageService.get(this.id, this.scope);\n            if (memento) {\n                return JSON.parse(memento);\n            }\n            return {};\n        }\n        save() {\n            if (!types_1.isEmptyObject(this.mementoObj)) {\n                this.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope);\n            }\n            else {\n                this.storageService.remove(this.id, this.scope);\n            }\n        }\n    }\n});\n",null]}