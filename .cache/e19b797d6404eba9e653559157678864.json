{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls_1 = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nexports.IRequestService = instantiation_1.createDecorator('requestService');\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration)\n    .registerConfiguration({\n    id: 'http',\n    order: 15,\n    title: nls_1.localize('httpConfigurationTitle', \"HTTP\"),\n    type: 'object',\n    properties: {\n        'http.proxy': {\n            type: 'string',\n            pattern: '^https?://([^:]*(:[^@]*)?@)?([^:]+)(:\\\\d+)?/?$|^$',\n            description: nls_1.localize('proxy', \"The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.\")\n        },\n        'http.proxyStrictSSL': {\n            type: 'boolean',\n            default: true,\n            description: nls_1.localize('strictSSL', \"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\")\n        },\n        'http.proxyAuthorization': {\n            type: ['null', 'string'],\n            default: null,\n            description: nls_1.localize('proxyAuthorization', \"The value to send as the 'Proxy-Authorization' header for every network request.\")\n        },\n        'http.proxySupport': {\n            type: 'string',\n            enum: ['off', 'on', 'override'],\n            enumDescriptions: [\n                nls_1.localize('proxySupportOff', \"Disable proxy support for extensions.\"),\n                nls_1.localize('proxySupportOn', \"Enable proxy support for extensions.\"),\n                nls_1.localize('proxySupportOverride', \"Enable proxy support for extensions, override request options.\"),\n            ],\n            default: 'override',\n            description: nls_1.localize('proxySupport', \"Use the proxy support for extensions.\")\n        },\n        'http.systemCertificates': {\n            type: 'boolean',\n            default: true,\n            description: nls_1.localize('systemCertificates', \"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)\")\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8BAAkC;AAClC,gFAAiF;AAEjF,gGAA4G;AAC5G,iEAAgE;AAGnD,QAAA,eAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC;AAgBlF,mBAAQ,CAAC,EAAE,CAAyB,kCAAU,CAAC,aAAa,CAAC;KAC3D,qBAAqB,CAAC;IACtB,EAAE,EAAE,MAAM;IACV,KAAK,EAAE,EAAE;IACT,KAAK,EAAE,cAAQ,CAAC,wBAAwB,EAAE,MAAM,CAAC;IACjD,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,YAAY,EAAE;YACb,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,mDAAmD;YAC5D,WAAW,EAAE,cAAQ,CAAC,OAAO,EAAE,+GAA+G,CAAC;SAC/I;QACD,qBAAqB,EAAE;YACtB,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,IAAI;YACb,WAAW,EAAE,cAAQ,CAAC,WAAW,EAAE,oGAAoG,CAAC;SACxI;QACD,yBAAyB,EAAE;YAC1B,IAAI,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;YACxB,OAAO,EAAE,IAAI;YACb,WAAW,EAAE,cAAQ,CAAC,oBAAoB,EAAE,kFAAkF,CAAC;SAC/H;QACD,mBAAmB,EAAE;YACpB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,UAAU,CAAC;YAC/B,gBAAgB,EAAE;gBACjB,cAAQ,CAAC,iBAAiB,EAAE,uCAAuC,CAAC;gBACpE,cAAQ,CAAC,gBAAgB,EAAE,sCAAsC,CAAC;gBAClE,cAAQ,CAAC,sBAAsB,EAAE,gEAAgE,CAAC;aAClG;YACD,OAAO,EAAE,UAAU;YACnB,WAAW,EAAE,cAAQ,CAAC,cAAc,EAAE,uCAAuC,CAAC;SAC9E;QACD,yBAAyB,EAAE;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,IAAI;YACb,WAAW,EAAE,cAAQ,CAAC,oBAAoB,EAAE,kJAAkJ,CAAC;SAC/L;KACD;CACD,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IRequestOptions, IRequestContext } from 'vs/base/node/request';\nimport { IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const IRequestService = createDecorator<IRequestService>('requestService');\n\nexport interface IRequestService {\n\t_serviceBrand: any;\n\n\trequest(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext>;\n}\n\nexport interface IHTTPConfiguration {\n\thttp?: {\n\t\tproxy?: string;\n\t\tproxyStrictSSL?: boolean;\n\t\tproxyAuthorization?: string;\n\t};\n}\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t.registerConfiguration({\n\t\tid: 'http',\n\t\torder: 15,\n\t\ttitle: localize('httpConfigurationTitle', \"HTTP\"),\n\t\ttype: 'object',\n\t\tproperties: {\n\t\t\t'http.proxy': {\n\t\t\t\ttype: 'string',\n\t\t\t\tpattern: '^https?://([^:]*(:[^@]*)?@)?([^:]+)(:\\\\d+)?/?$|^$',\n\t\t\t\tdescription: localize('proxy', \"The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.\")\n\t\t\t},\n\t\t\t'http.proxyStrictSSL': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('strictSSL', \"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\")\n\t\t\t},\n\t\t\t'http.proxyAuthorization': {\n\t\t\t\ttype: ['null', 'string'],\n\t\t\t\tdefault: null,\n\t\t\t\tdescription: localize('proxyAuthorization', \"The value to send as the 'Proxy-Authorization' header for every network request.\")\n\t\t\t},\n\t\t\t'http.proxySupport': {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: ['off', 'on', 'override'],\n\t\t\t\tenumDescriptions: [\n\t\t\t\t\tlocalize('proxySupportOff', \"Disable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportOn', \"Enable proxy support for extensions.\"),\n\t\t\t\t\tlocalize('proxySupportOverride', \"Enable proxy support for extensions, override request options.\"),\n\t\t\t\t],\n\t\t\t\tdefault: 'override',\n\t\t\t\tdescription: localize('proxySupport', \"Use the proxy support for extensions.\")\n\t\t\t},\n\t\t\t'http.systemCertificates': {\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: true,\n\t\t\t\tdescription: localize('systemCertificates', \"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)\")\n\t\t\t}\n\t\t}\n\t});\n"]}]}