{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/types\", \"vs/base/common/arrays\"], function (require, exports, nls, types, arrays) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function exceptionToErrorMessage(exception, verbose) {\n        if (exception.message) {\n            if (verbose && (exception.stack || exception.stacktrace)) {\n                return nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), exception.stack || exception.stacktrace);\n            }\n            return detectSystemErrorMessage(exception);\n        }\n        return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n    }\n    function detectSystemErrorMessage(exception) {\n        // See https://nodejs.org/api/errors.html#errors_class_system_error\n        if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n            return nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n        }\n        return exception.message;\n    }\n    /**\n     * Tries to generate a human readable error message out of the error. If the verbose parameter\n     * is set to true, the error message will include stacktrace details if provided.\n     *\n     * @returns A string containing the error message.\n     */\n    function toErrorMessage(error = null, verbose = false) {\n        if (!error) {\n            return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n        }\n        if (Array.isArray(error)) {\n            const errors = arrays.coalesce(error);\n            const msg = toErrorMessage(errors[0], verbose);\n            if (errors.length > 1) {\n                return nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n            }\n            return msg;\n        }\n        if (types.isString(error)) {\n            return error;\n        }\n        if (error.detail) {\n            const detail = error.detail;\n            if (detail.error) {\n                return exceptionToErrorMessage(detail.error, verbose);\n            }\n            if (detail.exception) {\n                return exceptionToErrorMessage(detail.exception, verbose);\n            }\n        }\n        if (error.stack) {\n            return exceptionToErrorMessage(error, verbose);\n        }\n        if (error.message) {\n            return error.message;\n        }\n        return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n    }\n    exports.toErrorMessage = toErrorMessage;\n});\n",null]}