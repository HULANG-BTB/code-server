{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar dialogService_1 = require(\"vs/platform/dialogs/browser/dialogService\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar sharedProcessService_1 = require(\"vs/platform/ipc/electron-browser/sharedProcessService\");\nvar dialogIpc_1 = require(\"vs/platform/dialogs/node/dialogIpc\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar layoutService_1 = require(\"vs/platform/layout/browser/layoutService\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar DialogService = /** @class */ (function () {\n    function DialogService(configurationService, logService, layoutService, themeService, windowService, sharedProcessService) {\n        // Use HTML based dialogs\n        if (configurationService.getValue('workbench.dialogs.customEnabled') === true) {\n            this.impl = new dialogService_1.DialogService(logService, layoutService, themeService);\n        }\n        // Electron dialog service\n        else {\n            this.impl = new NativeDialogService(windowService, logService, sharedProcessService);\n        }\n    }\n    DialogService.prototype.confirm = function (confirmation) {\n        return this.impl.confirm(confirmation);\n    };\n    DialogService.prototype.show = function (severity, message, buttons, options) {\n        return this.impl.show(severity, message, buttons, options);\n    };\n    DialogService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, log_1.ILogService),\n        tslib_1.__param(2, layoutService_1.ILayoutService),\n        tslib_1.__param(3, themeService_1.IThemeService),\n        tslib_1.__param(4, windows_1.IWindowService),\n        tslib_1.__param(5, sharedProcessService_1.ISharedProcessService)\n    ], DialogService);\n    return DialogService;\n}());\nexports.DialogService = DialogService;\nvar NativeDialogService = /** @class */ (function () {\n    function NativeDialogService(windowService, logService, sharedProcessService) {\n        this.windowService = windowService;\n        this.logService = logService;\n        sharedProcessService.registerChannel('dialog', new dialogIpc_1.DialogChannel(this));\n    }\n    NativeDialogService.prototype.confirm = function (confirmation) {\n        this.logService.trace('DialogService#confirm', confirmation.message);\n        var _a = this.massageMessageBoxOptions(this.getConfirmOptions(confirmation)), options = _a.options, buttonIndexMap = _a.buttonIndexMap;\n        return this.windowService.showMessageBox(options).then(function (result) {\n            return {\n                confirmed: buttonIndexMap[result.button] === 0 ? true : false,\n                checkboxChecked: result.checkboxChecked\n            };\n        });\n    };\n    NativeDialogService.prototype.getConfirmOptions = function (confirmation) {\n        var buttons = [];\n        if (confirmation.primaryButton) {\n            buttons.push(confirmation.primaryButton);\n        }\n        else {\n            buttons.push(nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n        }\n        if (confirmation.secondaryButton) {\n            buttons.push(confirmation.secondaryButton);\n        }\n        else if (typeof confirmation.secondaryButton === 'undefined') {\n            buttons.push(nls.localize('cancelButton', \"Cancel\"));\n        }\n        var opts = {\n            title: confirmation.title,\n            message: confirmation.message,\n            buttons: buttons,\n            cancelId: 1\n        };\n        if (confirmation.detail) {\n            opts.detail = confirmation.detail;\n        }\n        if (confirmation.type) {\n            opts.type = confirmation.type;\n        }\n        if (confirmation.checkbox) {\n            opts.checkboxLabel = confirmation.checkbox.label;\n            opts.checkboxChecked = confirmation.checkbox.checked;\n        }\n        return opts;\n    };\n    NativeDialogService.prototype.show = function (severity, message, buttons, dialogOptions) {\n        this.logService.trace('DialogService#show', message);\n        var _a = this.massageMessageBoxOptions({\n            message: message,\n            buttons: buttons,\n            type: (severity === severity_1.default.Info) ? 'question' : (severity === severity_1.default.Error) ? 'error' : (severity === severity_1.default.Warning) ? 'warning' : 'none',\n            cancelId: dialogOptions ? dialogOptions.cancelId : undefined,\n            detail: dialogOptions ? dialogOptions.detail : undefined\n        }), options = _a.options, buttonIndexMap = _a.buttonIndexMap;\n        return this.windowService.showMessageBox(options).then(function (result) { return buttonIndexMap[result.button]; });\n    };\n    NativeDialogService.prototype.massageMessageBoxOptions = function (options) {\n        var buttonIndexMap = (options.buttons || []).map(function (button, index) { return index; });\n        var buttons = (options.buttons || []).map(function (button) { return labels_1.mnemonicButtonLabel(button); });\n        var cancelId = options.cancelId;\n        // Linux: order of buttons is reverse\n        // macOS: also reverse, but the OS handles this for us!\n        if (platform_1.isLinux) {\n            buttons = buttons.reverse();\n            buttonIndexMap = buttonIndexMap.reverse();\n        }\n        // Default Button (always first one)\n        options.defaultId = buttonIndexMap[0];\n        // Cancel Button\n        if (typeof cancelId === 'number') {\n            // Ensure the cancelId is the correct one from our mapping\n            cancelId = buttonIndexMap[cancelId];\n            // macOS/Linux: the cancel button should always be to the left of the primary action\n            // if we see more than 2 buttons, move the cancel one to the left of the primary\n            if (!platform_1.isWindows && buttons.length > 2 && cancelId !== 1) {\n                var cancelButton = buttons[cancelId];\n                buttons.splice(cancelId, 1);\n                buttons.splice(1, 0, cancelButton);\n                var cancelButtonIndex = buttonIndexMap[cancelId];\n                buttonIndexMap.splice(cancelId, 1);\n                buttonIndexMap.splice(1, 0, cancelButtonIndex);\n                cancelId = 1;\n            }\n        }\n        options.buttons = buttons;\n        options.cancelId = cancelId;\n        options.noLink = true;\n        options.title = options.title || product_1.default.nameLong;\n        return { options: options, buttonIndexMap: buttonIndexMap };\n    };\n    NativeDialogService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService),\n        tslib_1.__param(1, log_1.ILogService),\n        tslib_1.__param(2, sharedProcessService_1.ISharedProcessService)\n    ], NativeDialogService);\n    return NativeDialogService;\n}());\nextensions_1.registerSingleton(dialogs_1.IDialogService, DialogService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/dialogs/electron-browser/dialogService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport product from 'vs/platform/product/node/product';\nimport Severity from 'vs/base/common/severity';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { IDialogService, IConfirmation, IConfirmationResult, IDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { DialogService as HTMLDialogService } from 'vs/platform/dialogs/browser/dialogService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-browser/sharedProcessService';\nimport { DialogChannel } from 'vs/platform/dialogs/node/dialogIpc';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\n\ninterface IMassagedMessageBoxOptions {\n\n\t/**\n\t * OS massaged message box options.\n\t */\n\toptions: Electron.MessageBoxOptions;\n\n\t/**\n\t * Since the massaged result of the message box options potentially\n\t * changes the order of buttons, we have to keep a map of these\n\t * changes so that we can still return the correct index to the caller.\n\t */\n\tbuttonIndexMap: number[];\n}\n\nexport class DialogService implements IDialogService {\n\t_serviceBrand: any;\n\n\tprivate impl: IDialogService;\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILayoutService layoutService: ILayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService\n\t) {\n\n\t\t// Use HTML based dialogs\n\t\tif (configurationService.getValue('workbench.dialogs.customEnabled') === true) {\n\t\t\tthis.impl = new HTMLDialogService(logService, layoutService, themeService);\n\t\t}\n\t\t// Electron dialog service\n\t\telse {\n\t\t\tthis.impl = new NativeDialogService(windowService, logService, sharedProcessService);\n\t\t}\n\t}\n\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\treturn this.impl.confirm(confirmation);\n\t}\n\tshow(severity: Severity, message: string, buttons: string[], options?: IDialogOptions | undefined): Promise<number> {\n\t\treturn this.impl.show(severity, message, buttons, options);\n\t}\n}\n\nclass NativeDialogService implements IDialogService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService\n\t) {\n\t\tsharedProcessService.registerChannel('dialog', new DialogChannel(this));\n\t}\n\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace('DialogService#confirm', confirmation.message);\n\n\t\tconst { options, buttonIndexMap } = this.massageMessageBoxOptions(this.getConfirmOptions(confirmation));\n\n\t\treturn this.windowService.showMessageBox(options).then(result => {\n\t\t\treturn {\n\t\t\t\tconfirmed: buttonIndexMap[result.button] === 0 ? true : false,\n\t\t\t\tcheckboxChecked: result.checkboxChecked\n\t\t\t} as IConfirmationResult;\n\t\t});\n\t}\n\n\tprivate getConfirmOptions(confirmation: IConfirmation): Electron.MessageBoxOptions {\n\t\tconst buttons: string[] = [];\n\t\tif (confirmation.primaryButton) {\n\t\t\tbuttons.push(confirmation.primaryButton);\n\t\t} else {\n\t\t\tbuttons.push(nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n\t\t}\n\n\t\tif (confirmation.secondaryButton) {\n\t\t\tbuttons.push(confirmation.secondaryButton);\n\t\t} else if (typeof confirmation.secondaryButton === 'undefined') {\n\t\t\tbuttons.push(nls.localize('cancelButton', \"Cancel\"));\n\t\t}\n\n\t\tconst opts: Electron.MessageBoxOptions = {\n\t\t\ttitle: confirmation.title,\n\t\t\tmessage: confirmation.message,\n\t\t\tbuttons,\n\t\t\tcancelId: 1\n\t\t};\n\n\t\tif (confirmation.detail) {\n\t\t\topts.detail = confirmation.detail;\n\t\t}\n\n\t\tif (confirmation.type) {\n\t\t\topts.type = confirmation.type;\n\t\t}\n\n\t\tif (confirmation.checkbox) {\n\t\t\topts.checkboxLabel = confirmation.checkbox.label;\n\t\t\topts.checkboxChecked = confirmation.checkbox.checked;\n\t\t}\n\n\t\treturn opts;\n\t}\n\n\tshow(severity: Severity, message: string, buttons: string[], dialogOptions?: IDialogOptions): Promise<number> {\n\t\tthis.logService.trace('DialogService#show', message);\n\n\t\tconst { options, buttonIndexMap } = this.massageMessageBoxOptions({\n\t\t\tmessage,\n\t\t\tbuttons,\n\t\t\ttype: (severity === Severity.Info) ? 'question' : (severity === Severity.Error) ? 'error' : (severity === Severity.Warning) ? 'warning' : 'none',\n\t\t\tcancelId: dialogOptions ? dialogOptions.cancelId : undefined,\n\t\t\tdetail: dialogOptions ? dialogOptions.detail : undefined\n\t\t});\n\n\t\treturn this.windowService.showMessageBox(options).then(result => buttonIndexMap[result.button]);\n\t}\n\n\tprivate massageMessageBoxOptions(options: Electron.MessageBoxOptions): IMassagedMessageBoxOptions {\n\t\tlet buttonIndexMap = (options.buttons || []).map((button, index) => index);\n\t\tlet buttons = (options.buttons || []).map(button => mnemonicButtonLabel(button));\n\t\tlet cancelId = options.cancelId;\n\n\t\t// Linux: order of buttons is reverse\n\t\t// macOS: also reverse, but the OS handles this for us!\n\t\tif (isLinux) {\n\t\t\tbuttons = buttons.reverse();\n\t\t\tbuttonIndexMap = buttonIndexMap.reverse();\n\t\t}\n\n\t\t// Default Button (always first one)\n\t\toptions.defaultId = buttonIndexMap[0];\n\n\t\t// Cancel Button\n\t\tif (typeof cancelId === 'number') {\n\n\t\t\t// Ensure the cancelId is the correct one from our mapping\n\t\t\tcancelId = buttonIndexMap[cancelId];\n\n\t\t\t// macOS/Linux: the cancel button should always be to the left of the primary action\n\t\t\t// if we see more than 2 buttons, move the cancel one to the left of the primary\n\t\t\tif (!isWindows && buttons.length > 2 && cancelId !== 1) {\n\t\t\t\tconst cancelButton = buttons[cancelId];\n\t\t\t\tbuttons.splice(cancelId, 1);\n\t\t\t\tbuttons.splice(1, 0, cancelButton);\n\n\t\t\t\tconst cancelButtonIndex = buttonIndexMap[cancelId];\n\t\t\t\tbuttonIndexMap.splice(cancelId, 1);\n\t\t\t\tbuttonIndexMap.splice(1, 0, cancelButtonIndex);\n\n\t\t\t\tcancelId = 1;\n\t\t\t}\n\t\t}\n\n\t\toptions.buttons = buttons;\n\t\toptions.cancelId = cancelId;\n\t\toptions.noLink = true;\n\t\toptions.title = options.title || product.nameLong;\n\n\t\treturn { options, buttonIndexMap };\n\t}\n}\n\nregisterSingleton(IDialogService, DialogService, true);"]}]}