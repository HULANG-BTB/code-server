{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./clipboard\");\nvar nls = require(\"vs/nls\");\nvar browser = require(\"vs/base/browser/browser\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform = require(\"vs/base/common/platform\");\nvar textAreaInput_1 = require(\"vs/editor/browser/controller/textAreaInput\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nvar supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nvar supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// IE and Edge have trouble with setting html content in clipboard\nvar supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeOrIE);\n// Chrome incorrectly returns true for document.queryCommandSupported('paste')\n// when the paste feature is available but the calling script has insufficient\n// privileges to actually perform the action\n// const supportsPaste = (platform.isNative || (!browser.isChrome && document.queryCommandSupported('paste')));\nvar supportsPaste = true;\nvar ExecCommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExecCommandAction, _super);\n    function ExecCommandAction(browserCommand, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.browserCommand = browserCommand;\n        return _this;\n    }\n    ExecCommandAction.prototype.runCommand = function (accessor, args) {\n        var focusedEditor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            focusedEditor.trigger('keyboard', this.id, args);\n            return;\n        }\n        document.execCommand(this.browserCommand);\n    };\n    ExecCommandAction.prototype.run = function (accessor, editor) {\n        editor.focus();\n        document.execCommand(this.browserCommand);\n    };\n    return ExecCommandAction;\n}(editorExtensions_1.EditorAction));\nvar ExecCommandCutAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExecCommandCutAction, _super);\n    function ExecCommandCutAction() {\n        var _this = this;\n        var kbOpts = {\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X,\n            win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Delete] },\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        };\n        // Do not bind cut keybindings in the browser,\n        // since browsers do that for us and it avoids security prompts\n        if (!platform.isNative) {\n            kbOpts = null;\n        }\n        _this = _super.call(this, 'cut', {\n            id: 'editor.action.clipboardCutAction',\n            label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            alias: 'Cut',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: kbOpts,\n            menuOpts: {\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                order: 1\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '2_ccp',\n                title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n                order: 1\n            }\n        }) || this;\n        return _this;\n    }\n    ExecCommandCutAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        _super.prototype.run.call(this, accessor, editor);\n    };\n    return ExecCommandCutAction;\n}(ExecCommandAction));\nvar ExecCommandCopyAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExecCommandCopyAction, _super);\n    function ExecCommandCopyAction() {\n        var _this = this;\n        var kbOpts = {\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n            win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Insert] },\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        };\n        // Do not bind copy keybindings in the browser,\n        // since browsers do that for us and it avoids security prompts\n        if (!platform.isNative) {\n            kbOpts = null;\n        }\n        _this = _super.call(this, 'copy', {\n            id: 'editor.action.clipboardCopyAction',\n            label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            alias: 'Copy',\n            precondition: null,\n            kbOpts: kbOpts,\n            menuOpts: {\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                order: 2\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '2_ccp',\n                title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n                order: 2\n            }\n        }) || this;\n        return _this;\n    }\n    ExecCommandCopyAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        // Prevent copying an empty line by accident\n        if (editor.getSelections().length === 1 && editor.getSelection().isEmpty()) {\n            if (editor.getModel().getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber) === 0) {\n                return;\n            }\n        }\n        _super.prototype.run.call(this, accessor, editor);\n    };\n    return ExecCommandCopyAction;\n}(ExecCommandAction));\nvar ExecCommandPasteAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExecCommandPasteAction, _super);\n    function ExecCommandPasteAction() {\n        var _this = this;\n        var kbOpts = {\n            kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n            win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Insert] },\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        };\n        // Do not bind paste keybindings in the browser,\n        // since browsers do that for us and it avoids security prompts\n        if (!platform.isNative) {\n            kbOpts = null;\n        }\n        var workbench = require('vs/../../../../packages/vscode/src/workbench').workbench;\n        _this = _super.call(this, 'paste', {\n            id: 'editor.action.clipboardPasteAction',\n            label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            alias: 'Paste',\n            precondition: require('vs/platform/contextkey/common/contextkey').ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, workbench.clipboardContextKey),\n            kbOpts: kbOpts,\n            menuOpts: {\n                group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                order: 3\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '2_ccp',\n                title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n                order: 3,\n                when: workbench.clipboardContextKey,\n            }\n        }) || this;\n        return _this;\n    }\n    ExecCommandPasteAction.prototype.run = function (accessor, editor) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _a, _b, _c, _d, ex_1;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!(editor instanceof require('vs/editor/browser/widget/codeEditorWidget').CodeEditorWidget)) return [3 /*break*/, 5];\n                        _e.label = 1;\n                    case 1:\n                        _e.trys.push([1, 3, , 4]);\n                        _b = (_a = editor).trigger;\n                        _c = ['', require('vs/editor/common/editorCommon').Handler.Paste];\n                        _d = {};\n                        return [4 /*yield*/, require('vs/../../../../packages/vscode/src/workbench').workbench.clipboardText];\n                    case 2:\n                        _b.apply(_a, _c.concat([(_d.text = _e.sent(),\n                                _d)]));\n                        return [3 /*break*/, 4];\n                    case 3:\n                        ex_1 = _e.sent();\n                        _super.prototype.run.call(this, accessor, editor);\n                        return [3 /*break*/, 4];\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        _super.prototype.run.call(this, accessor, editor);\n                        _e.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return ExecCommandPasteAction;\n}(ExecCommandAction));\nvar ExecCommandCopyWithSyntaxHighlightingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\n    function ExecCommandCopyWithSyntaxHighlightingAction() {\n        return _super.call(this, 'copy', {\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n            alias: 'Copy With Syntax Highlighting',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        textAreaInput_1.CopyOptions.forceCopyWithSyntaxHighlighting = true;\n        _super.prototype.run.call(this, accessor, editor);\n        textAreaInput_1.CopyOptions.forceCopyWithSyntaxHighlighting = false;\n    };\n    return ExecCommandCopyWithSyntaxHighlightingAction;\n}(ExecCommandAction));\nif (supportsCut) {\n    editorExtensions_1.registerEditorAction(ExecCommandCutAction);\n}\nif (supportsCopy) {\n    editorExtensions_1.registerEditorAction(ExecCommandCopyAction);\n}\nif (supportsPaste) {\n    editorExtensions_1.registerEditorAction(ExecCommandPasteAction);\n}\nif (supportsCopyWithSyntaxHighlighting) {\n    editorExtensions_1.registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./clipboard';\nimport * as nls from 'vs/nls';\nimport * as browser from 'vs/base/browser/browser';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport * as platform from 'vs/base/common/platform';\nimport { CopyOptions } from 'vs/editor/browser/controller/textAreaInput';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ICommandKeybindingsOptions, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\n\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// IE and Edge have trouble with setting html content in clipboard\nconst supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeOrIE);\n// Chrome incorrectly returns true for document.queryCommandSupported('paste')\n// when the paste feature is available but the calling script has insufficient\n// privileges to actually perform the action\n// const supportsPaste = (platform.isNative || (!browser.isChrome && document.queryCommandSupported('paste')));\nconst supportsPaste = true;\n\ntype ExecCommand = 'cut' | 'copy' | 'paste';\n\nabstract class ExecCommandAction extends EditorAction {\n\n\tprivate readonly browserCommand: ExecCommand;\n\n\tconstructor(browserCommand: ExecCommand, opts: IActionOptions) {\n\t\tsuper(opts);\n\t\tthis.browserCommand = browserCommand;\n\t}\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tlet focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\t// Only if editor text focus (i.e. not if editor has widget focus).\n\t\tif (focusedEditor && focusedEditor.hasTextFocus()) {\n\t\t\tfocusedEditor.trigger('keyboard', this.id, args);\n\t\t\treturn;\n\t\t}\n\n\t\tdocument.execCommand(this.browserCommand);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\teditor.focus();\n\t\tdocument.execCommand(this.browserCommand);\n\t}\n}\n\nclass ExecCommandCutAction extends ExecCommandAction {\n\n\tconstructor() {\n\t\tlet kbOpts: ICommandKeybindingsOptions | null = {\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_X,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_X, secondary: [KeyMod.Shift | KeyCode.Delete] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t};\n\t\t// Do not bind cut keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tif (!platform.isNative) {\n\t\t\tkbOpts = null;\n\t\t}\n\t\tsuper('cut', {\n\t\t\tid: 'editor.action.clipboardCutAction',\n\t\t\tlabel: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n\t\t\talias: 'Cut',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: kbOpts,\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '2_ccp',\n\t\t\t\ttitle: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n\t\tif (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tsuper.run(accessor, editor);\n\t}\n}\n\nclass ExecCommandCopyAction extends ExecCommandAction {\n\n\tconstructor() {\n\t\tlet kbOpts: ICommandKeybindingsOptions | null = {\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_C,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_C, secondary: [KeyMod.CtrlCmd | KeyCode.Insert] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t};\n\t\t// Do not bind copy keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tif (!platform.isNative) {\n\t\t\tkbOpts = null;\n\t\t}\n\n\t\tsuper('copy', {\n\t\t\tid: 'editor.action.clipboardCopyAction',\n\t\t\tlabel: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n\t\t\talias: 'Copy',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: kbOpts,\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '2_ccp',\n\t\t\t\ttitle: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n\t\tif (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\t// Prevent copying an empty line by accident\n\t\tif (editor.getSelections().length === 1 && editor.getSelection().isEmpty()) {\n\t\t\tif (editor.getModel().getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber) === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tsuper.run(accessor, editor);\n\t}\n}\n\nclass ExecCommandPasteAction extends ExecCommandAction {\n\n\tconstructor() {\n\t\tlet kbOpts: ICommandKeybindingsOptions | null = {\n\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_V,\n\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_V, secondary: [KeyMod.Shift | KeyCode.Insert] },\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t};\n\t\t// Do not bind paste keybindings in the browser,\n\t\t// since browsers do that for us and it avoids security prompts\n\t\tif (!platform.isNative) {\n\t\t\tkbOpts = null;\n\t\t}\n\n\t\tconst { workbench } = require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench');\n\t\tsuper('paste', {\n\t\t\tid: 'editor.action.clipboardPasteAction',\n\t\t\tlabel: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n\t\t\talias: 'Paste',\n\t\t\tprecondition: (require('vs/platform/contextkey/common/contextkey') as typeof import('vs/platform/contextkey/common/contextkey')).ContextKeyExpr.and(EditorContextKeys.writable, workbench.clipboardContextKey),\n\t\t\tkbOpts: kbOpts,\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: CLIPBOARD_CONTEXT_MENU_GROUP,\n\t\t\t\torder: 3\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '2_ccp',\n\t\t\t\ttitle: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n\t\t\t\torder: 3,\n\t\t\t\twhen: workbench.clipboardContextKey,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor, editor: ICodeEditor): Promise<void> {\n\t\tif (editor instanceof (require('vs/editor/browser/widget/codeEditorWidget') as typeof import('vs/editor/browser/widget/codeEditorWidget')).CodeEditorWidget) {\n\t\t\ttry {\n\t\t\t\teditor.trigger('', (require('vs/editor/common/editorCommon') as typeof import ('vs/editor/common/editorCommon')).Handler.Paste, {\n\t\t\t\t\ttext: await (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.clipboardText,\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\tsuper.run(accessor, editor);\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.run(accessor, editor);\n\t\t}\n\t}\n}\n\nclass ExecCommandCopyWithSyntaxHighlightingAction extends ExecCommandAction {\n\n\tconstructor() {\n\t\tsuper('copy', {\n\t\t\tid: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n\t\t\tlabel: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n\t\t\talias: 'Copy With Syntax Highlighting',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n\t\tif (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = true;\n\t\tsuper.run(accessor, editor);\n\t\tCopyOptions.forceCopyWithSyntaxHighlighting = false;\n\t}\n}\n\nif (supportsCut) {\n\tregisterEditorAction(ExecCommandCutAction);\n}\nif (supportsCopy) {\n\tregisterEditorAction(ExecCommandCopyAction);\n}\nif (supportsPaste) {\n\tregisterEditorAction(ExecCommandPasteAction);\n}\nif (supportsCopyWithSyntaxHighlighting) {\n\tregisterEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"]}]}