{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/editor/common/modes/abstractMode\", \"vs/editor/common/modes/nullMode\", \"vs/editor/common/services/languagesRegistry\"], function (require, exports, event_1, lifecycle_1, abstractMode_1, nullMode_1, languagesRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class LanguageSelection extends lifecycle_1.Disposable {\n        constructor(onLanguagesMaybeChanged, selector) {\n            super();\n            this._onDidChange = this._register(new event_1.Emitter());\n            this.onDidChange = this._onDidChange.event;\n            this._selector = selector;\n            this.languageIdentifier = this._selector();\n            this._register(onLanguagesMaybeChanged(() => this._evaluate()));\n        }\n        _evaluate() {\n            let languageIdentifier = this._selector();\n            if (languageIdentifier.id === this.languageIdentifier.id) {\n                // no change\n                return;\n            }\n            this.languageIdentifier = languageIdentifier;\n            this._onDidChange.fire(this.languageIdentifier);\n        }\n    }\n    class ModeServiceImpl {\n        constructor(warnOnOverwrite = false) {\n            this._onDidCreateMode = new event_1.Emitter();\n            this.onDidCreateMode = this._onDidCreateMode.event;\n            this._onLanguagesMaybeChanged = new event_1.Emitter();\n            this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n            this._instantiatedModes = {};\n            this._registry = new languagesRegistry_1.LanguagesRegistry(true, warnOnOverwrite);\n            this._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire());\n        }\n        _onReady() {\n            return Promise.resolve(true);\n        }\n        isRegisteredMode(mimetypeOrModeId) {\n            return this._registry.isRegisteredMode(mimetypeOrModeId);\n        }\n        getRegisteredModes() {\n            return this._registry.getRegisteredModes();\n        }\n        getRegisteredLanguageNames() {\n            return this._registry.getRegisteredLanguageNames();\n        }\n        getExtensions(alias) {\n            return this._registry.getExtensions(alias);\n        }\n        getFilenames(alias) {\n            return this._registry.getFilenames(alias);\n        }\n        getMimeForMode(modeId) {\n            return this._registry.getMimeForMode(modeId);\n        }\n        getLanguageName(modeId) {\n            return this._registry.getLanguageName(modeId);\n        }\n        getModeIdForLanguageName(alias) {\n            return this._registry.getModeIdForLanguageNameLowercase(alias);\n        }\n        getModeIdByFilepathOrFirstLine(filepath, firstLine) {\n            const modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(filepath, firstLine);\n            if (modeIds.length > 0) {\n                return modeIds[0];\n            }\n            return null;\n        }\n        getModeId(commaSeparatedMimetypesOrCommaSeparatedIds) {\n            const modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n            if (modeIds.length > 0) {\n                return modeIds[0];\n            }\n            return null;\n        }\n        getLanguageIdentifier(modeId) {\n            return this._registry.getLanguageIdentifier(modeId);\n        }\n        getConfigurationFiles(modeId) {\n            return this._registry.getConfigurationFiles(modeId);\n        }\n        // --- instantiation\n        create(commaSeparatedMimetypesOrCommaSeparatedIds) {\n            return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n                const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n                return this._createModeAndGetLanguageIdentifier(modeId);\n            });\n        }\n        createByLanguageName(languageName) {\n            return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n                const modeId = this._getModeIdByLanguageName(languageName);\n                return this._createModeAndGetLanguageIdentifier(modeId);\n            });\n        }\n        createByFilepathOrFirstLine(filepath, firstLine) {\n            return new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n                const modeId = this.getModeIdByFilepathOrFirstLine(filepath, firstLine);\n                return this._createModeAndGetLanguageIdentifier(modeId);\n            });\n        }\n        _createModeAndGetLanguageIdentifier(modeId) {\n            // Fall back to plain text if no mode was found\n            const languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n            this._getOrCreateMode(languageIdentifier.language);\n            return languageIdentifier;\n        }\n        triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds) {\n            const modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n            // Fall back to plain text if no mode was found\n            this._getOrCreateMode(modeId || 'plaintext');\n        }\n        waitForLanguageRegistration() {\n            return this._onReady().then(() => { });\n        }\n        _getModeIdByLanguageName(languageName) {\n            const modeIds = this._registry.getModeIdsFromLanguageName(languageName);\n            if (modeIds.length > 0) {\n                return modeIds[0];\n            }\n            return null;\n        }\n        _getOrCreateMode(modeId) {\n            if (!this._instantiatedModes.hasOwnProperty(modeId)) {\n                let languageIdentifier = this.getLanguageIdentifier(modeId) || nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n                this._instantiatedModes[modeId] = new abstractMode_1.FrankensteinMode(languageIdentifier);\n                this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n            }\n            return this._instantiatedModes[modeId];\n        }\n    }\n    exports.ModeServiceImpl = ModeServiceImpl;\n});\n",null]}