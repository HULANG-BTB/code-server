{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/panelViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/panelViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/panelviewlet\");\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/workbench/browser/actions\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar toolbar_1 = require(\"vs/base/browser/ui/toolbar/toolbar\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar panelview_1 = require(\"vs/base/browser/ui/splitview/panelview\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar mouseEvent_1 = require(\"vs/base/browser/mouseEvent\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar types_1 = require(\"vs/base/common/types\");\nvar ViewletPanel = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewletPanel, _super);\n    function ViewletPanel(options, keybindingService, contextMenuService, configurationService) {\n        var _this = _super.call(this, options) || this;\n        _this.keybindingService = keybindingService;\n        _this.contextMenuService = contextMenuService;\n        _this.configurationService = configurationService;\n        _this._onDidFocus = new event_1.Emitter();\n        _this.onDidFocus = _this._onDidFocus.event;\n        _this._onDidBlur = new event_1.Emitter();\n        _this.onDidBlur = _this._onDidBlur.event;\n        _this._onDidChangeBodyVisibility = new event_1.Emitter();\n        _this.onDidChangeBodyVisibility = _this._onDidChangeBodyVisibility.event;\n        _this._onDidChangeTitleArea = new event_1.Emitter();\n        _this.onDidChangeTitleArea = _this._onDidChangeTitleArea.event;\n        _this._isVisible = false;\n        _this.id = options.id;\n        _this.title = options.title;\n        _this.actionRunner = options.actionRunner;\n        _this.disposables.push(_this._onDidFocus, _this._onDidBlur, _this._onDidChangeBodyVisibility, _this._onDidChangeTitleArea);\n        return _this;\n    }\n    ViewletPanel.prototype.setVisible = function (visible) {\n        if (this._isVisible !== visible) {\n            this._isVisible = visible;\n            if (this.isExpanded()) {\n                this._onDidChangeBodyVisibility.fire(visible);\n            }\n        }\n    };\n    ViewletPanel.prototype.isVisible = function () {\n        return this._isVisible;\n    };\n    ViewletPanel.prototype.isBodyVisible = function () {\n        return this._isVisible && this.isExpanded();\n    };\n    ViewletPanel.prototype.setExpanded = function (expanded) {\n        var changed = _super.prototype.setExpanded.call(this, expanded);\n        if (changed) {\n            this._onDidChangeBodyVisibility.fire(expanded);\n        }\n        return changed;\n    };\n    ViewletPanel.prototype.render = function () {\n        var _this = this;\n        _super.prototype.render.call(this);\n        var focusTracker = dom_1.trackFocus(this.element);\n        this.disposables.push(focusTracker);\n        this.disposables.push(focusTracker.onDidFocus(function () { return _this._onDidFocus.fire(); }));\n        this.disposables.push(focusTracker.onDidBlur(function () { return _this._onDidBlur.fire(); }));\n    };\n    ViewletPanel.prototype.renderHeader = function (container) {\n        var _this = this;\n        this.headerContainer = container;\n        this.renderHeaderTitle(container, this.title);\n        var actions = dom_1.append(container, dom_1.$('.actions'));\n        this.toolbar = new toolbar_1.ToolBar(actions, this.contextMenuService, {\n            orientation: actionbar_1.ActionsOrientation.HORIZONTAL,\n            actionItemProvider: function (action) { return _this.getActionItem(action); },\n            ariaLabel: nls.localize('viewToolbarAriaLabel', \"{0} actions\", this.title),\n            getKeyBinding: function (action) { return types_1.withNullAsUndefined(_this.keybindingService.lookupKeybinding(action.id)); },\n            actionRunner: this.actionRunner\n        });\n        this.disposables.push(this.toolbar);\n        this.setActions();\n        var onDidRelevantConfigurationChange = event_1.Event.filter(this.configurationService.onDidChangeConfiguration, function (e) { return e.affectsConfiguration(ViewletPanel.AlwaysShowActionsConfig); });\n        onDidRelevantConfigurationChange(this.updateActionsVisibility, this, this.disposables);\n        this.updateActionsVisibility();\n    };\n    ViewletPanel.prototype.renderHeaderTitle = function (container, title) {\n        dom_1.append(container, dom_1.$('h3.title', undefined, title));\n    };\n    ViewletPanel.prototype.focus = function () {\n        if (this.element) {\n            this.element.focus();\n            this._onDidFocus.fire();\n        }\n    };\n    ViewletPanel.prototype.setActions = function () {\n        this.toolbar.setActions(actions_1.prepareActions(this.getActions()), actions_1.prepareActions(this.getSecondaryActions()))();\n        this.toolbar.context = this.getActionsContext();\n    };\n    ViewletPanel.prototype.updateActionsVisibility = function () {\n        var shouldAlwaysShowActions = this.configurationService.getValue('workbench.view.alwaysShowHeaderActions');\n        dom_1.toggleClass(this.headerContainer, 'actions-always-visible', shouldAlwaysShowActions);\n    };\n    ViewletPanel.prototype.updateActions = function () {\n        this.setActions();\n        this._onDidChangeTitleArea.fire();\n    };\n    ViewletPanel.prototype.getActions = function () {\n        return [];\n    };\n    ViewletPanel.prototype.getSecondaryActions = function () {\n        return [];\n    };\n    ViewletPanel.prototype.getActionItem = function (action) {\n        return undefined;\n    };\n    ViewletPanel.prototype.getActionsContext = function () {\n        return undefined;\n    };\n    ViewletPanel.prototype.getOptimalWidth = function () {\n        return 0;\n    };\n    ViewletPanel.prototype.saveState = function () {\n        // Subclasses to implement for saving state\n    };\n    ViewletPanel.AlwaysShowActionsConfig = 'workbench.view.alwaysShowHeaderActions';\n    ViewletPanel = tslib_1.__decorate([\n        tslib_1.__param(1, keybinding_1.IKeybindingService),\n        tslib_1.__param(2, contextView_1.IContextMenuService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ViewletPanel);\n    return ViewletPanel;\n}(panelview_1.Panel));\nexports.ViewletPanel = ViewletPanel;\nvar PanelViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(PanelViewlet, _super);\n    function PanelViewlet(id, options, configurationService, layoutService, contextMenuService, telemetryService, themeService, storageService) {\n        var _this = _super.call(this, id, configurationService, layoutService, telemetryService, themeService, storageService) || this;\n        _this.options = options;\n        _this.contextMenuService = contextMenuService;\n        _this.panelItems = [];\n        return _this;\n    }\n    Object.defineProperty(PanelViewlet.prototype, \"onDidSashChange\", {\n        get: function () {\n            return this.panelview.onDidSashChange;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelViewlet.prototype, \"panels\", {\n        get: function () {\n            return this.panelItems.map(function (i) { return i.panel; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PanelViewlet.prototype, \"length\", {\n        get: function () {\n            return this.panelItems.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PanelViewlet.prototype.create = function (parent) {\n        var _this = this;\n        _super.prototype.create.call(this, parent);\n        this.panelview = this._register(new panelview_1.PanelView(parent, this.options));\n        this._register(this.panelview.onDidDrop(function (_a) {\n            var from = _a.from, to = _a.to;\n            return _this.movePanel(from, to);\n        }));\n        this._register(dom_1.addDisposableListener(parent, dom_1.EventType.CONTEXT_MENU, function (e) { return _this.showContextMenu(new mouseEvent_1.StandardMouseEvent(e)); }));\n    };\n    PanelViewlet.prototype.showContextMenu = function (event) {\n        var _this = this;\n        for (var _i = 0, _a = this.panelItems; _i < _a.length; _i++) {\n            var panelItem = _a[_i];\n            // Do not show context menu if target is coming from inside panel views\n            if (dom_1.isAncestor(event.target, panelItem.panel.element)) {\n                return;\n            }\n        }\n        event.stopPropagation();\n        event.preventDefault();\n        var anchor = { x: event.posx, y: event.posy };\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return anchor; },\n            getActions: function () { return _this.getContextMenuActions(); }\n        });\n    };\n    PanelViewlet.prototype.getTitle = function () {\n        var title = platform_1.Registry.as(viewlet_1.Extensions.Viewlets).getViewlet(this.getId()).name;\n        if (this.isSingleView()) {\n            title = title + \": \" + this.panelItems[0].panel.title;\n        }\n        return title;\n    };\n    PanelViewlet.prototype.getActions = function () {\n        if (this.isSingleView()) {\n            return this.panelItems[0].panel.getActions();\n        }\n        return [];\n    };\n    PanelViewlet.prototype.getSecondaryActions = function () {\n        if (this.isSingleView()) {\n            return this.panelItems[0].panel.getSecondaryActions();\n        }\n        return [];\n    };\n    PanelViewlet.prototype.getActionItem = function (action) {\n        if (this.isSingleView()) {\n            return this.panelItems[0].panel.getActionItem(action);\n        }\n        return _super.prototype.getActionItem.call(this, action);\n    };\n    PanelViewlet.prototype.focus = function () {\n        _super.prototype.focus.call(this);\n        if (this.lastFocusedPanel) {\n            this.lastFocusedPanel.focus();\n        }\n        else if (this.panelItems.length > 0) {\n            for (var _i = 0, _a = this.panelItems; _i < _a.length; _i++) {\n                var panel = _a[_i].panel;\n                if (panel.isExpanded()) {\n                    panel.focus();\n                    return;\n                }\n            }\n        }\n    };\n    PanelViewlet.prototype.layout = function (dimension) {\n        this.panelview.layout(dimension.height, dimension.width);\n    };\n    PanelViewlet.prototype.getOptimalWidth = function () {\n        var sizes = this.panelItems\n            .map(function (panelItem) { return panelItem.panel.getOptimalWidth() || 0; });\n        return Math.max.apply(Math, sizes);\n    };\n    PanelViewlet.prototype.addPanels = function (panels) {\n        var wasSingleView = this.isSingleView();\n        for (var _i = 0, panels_1 = panels; _i < panels_1.length; _i++) {\n            var _a = panels_1[_i], panel = _a.panel, size = _a.size, index = _a.index;\n            this.addPanel(panel, size, index);\n        }\n        this.updateViewHeaders();\n        if (this.isSingleView() !== wasSingleView) {\n            this.updateTitleArea();\n        }\n    };\n    PanelViewlet.prototype.addPanel = function (panel, size, index) {\n        var _this = this;\n        if (index === void 0) { index = this.panelItems.length - 1; }\n        var disposables = [];\n        var onDidFocus = panel.onDidFocus(function () { return _this.lastFocusedPanel = panel; }, null, disposables);\n        var onDidChangeTitleArea = panel.onDidChangeTitleArea(function () {\n            if (_this.isSingleView()) {\n                _this.updateTitleArea();\n            }\n        }, null, disposables);\n        var onDidChange = panel.onDidChange(function () {\n            if (panel === _this.lastFocusedPanel && !panel.isExpanded()) {\n                _this.lastFocusedPanel = undefined;\n            }\n        }, null, disposables);\n        var panelStyler = styler_1.attachStyler(this.themeService, {\n            headerForeground: theme_1.SIDE_BAR_SECTION_HEADER_FOREGROUND,\n            headerBackground: theme_1.SIDE_BAR_SECTION_HEADER_BACKGROUND,\n            headerBorder: theme_1.SIDE_BAR_SECTION_HEADER_BORDER,\n            dropBackground: theme_1.SIDE_BAR_DRAG_AND_DROP_BACKGROUND\n        }, panel);\n        var disposable = lifecycle_1.combinedDisposable([onDidFocus, onDidChangeTitleArea, panelStyler, onDidChange]);\n        var panelItem = { panel: panel, disposable: disposable };\n        this.panelItems.splice(index, 0, panelItem);\n        this.panelview.addPanel(panel, size, index);\n    };\n    PanelViewlet.prototype.removePanels = function (panels) {\n        var _this = this;\n        var wasSingleView = this.isSingleView();\n        panels.forEach(function (panel) { return _this.removePanel(panel); });\n        this.updateViewHeaders();\n        if (wasSingleView !== this.isSingleView()) {\n            this.updateTitleArea();\n        }\n    };\n    PanelViewlet.prototype.removePanel = function (panel) {\n        var index = arrays_1.firstIndex(this.panelItems, function (i) { return i.panel === panel; });\n        if (index === -1) {\n            return;\n        }\n        if (this.lastFocusedPanel === panel) {\n            this.lastFocusedPanel = undefined;\n        }\n        this.panelview.removePanel(panel);\n        var panelItem = this.panelItems.splice(index, 1)[0];\n        panelItem.disposable.dispose();\n    };\n    PanelViewlet.prototype.movePanel = function (from, to) {\n        var fromIndex = arrays_1.firstIndex(this.panelItems, function (item) { return item.panel === from; });\n        var toIndex = arrays_1.firstIndex(this.panelItems, function (item) { return item.panel === to; });\n        if (fromIndex < 0 || fromIndex >= this.panelItems.length) {\n            return;\n        }\n        if (toIndex < 0 || toIndex >= this.panelItems.length) {\n            return;\n        }\n        var panelItem = this.panelItems.splice(fromIndex, 1)[0];\n        this.panelItems.splice(toIndex, 0, panelItem);\n        this.panelview.movePanel(from, to);\n    };\n    PanelViewlet.prototype.resizePanel = function (panel, size) {\n        this.panelview.resizePanel(panel, size);\n    };\n    PanelViewlet.prototype.getPanelSize = function (panel) {\n        return this.panelview.getPanelSize(panel);\n    };\n    PanelViewlet.prototype.updateViewHeaders = function () {\n        if (this.isSingleView()) {\n            this.panelItems[0].panel.setExpanded(true);\n            this.panelItems[0].panel.headerVisible = false;\n        }\n        else {\n            this.panelItems.forEach(function (i) { return i.panel.headerVisible = true; });\n        }\n    };\n    PanelViewlet.prototype.isSingleView = function () {\n        return this.options.showHeaderInTitleWhenSingleView && this.panelItems.length === 1;\n    };\n    PanelViewlet.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.panelItems.forEach(function (i) { return i.disposable.dispose(); });\n        this.panelview.dispose();\n    };\n    PanelViewlet = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(4, contextView_1.IContextMenuService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, storage_1.IStorageService)\n    ], PanelViewlet);\n    return PanelViewlet;\n}(viewlet_1.Viewlet));\nexports.PanelViewlet = PanelViewlet;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/panelViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/panelViewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/panelviewlet';\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { attachStyler, IColorMapping } from 'vs/platform/theme/common/styler';\nimport { SIDE_BAR_DRAG_AND_DROP_BACKGROUND, SIDE_BAR_SECTION_HEADER_FOREGROUND, SIDE_BAR_SECTION_HEADER_BACKGROUND, SIDE_BAR_SECTION_HEADER_BORDER } from 'vs/workbench/common/theme';\nimport { append, $, trackFocus, toggleClass, EventType, isAncestor, Dimension, addDisposableListener } from 'vs/base/browser/dom';\nimport { IDisposable, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { firstIndex } from 'vs/base/common/arrays';\nimport { IAction, IActionRunner } from 'vs/base/common/actions';\nimport { IActionItem, ActionsOrientation } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { prepareActions } from 'vs/workbench/browser/actions';\nimport { Viewlet, ViewletRegistry, Extensions } from 'vs/workbench/browser/viewlet';\nimport { ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { PanelView, IPanelViewOptions, IPanelOptions, Panel } from 'vs/base/browser/ui/splitview/panelview';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { IView } from 'vs/workbench/common/views';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport interface IPanelColors extends IColorMapping {\n\tdropBackground?: ColorIdentifier;\n\theaderForeground?: ColorIdentifier;\n\theaderBackground?: ColorIdentifier;\n\theaderBorder?: ColorIdentifier;\n}\n\nexport interface IViewletPanelOptions extends IPanelOptions {\n\tactionRunner?: IActionRunner;\n\tid: string;\n\ttitle: string;\n}\n\nexport abstract class ViewletPanel extends Panel implements IView {\n\n\tprivate static AlwaysShowActionsConfig = 'workbench.view.alwaysShowHeaderActions';\n\n\tprivate _onDidFocus = new Emitter<void>();\n\treadonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n\tprivate _onDidBlur = new Emitter<void>();\n\treadonly onDidBlur: Event<void> = this._onDidBlur.event;\n\n\tprivate _onDidChangeBodyVisibility = new Emitter<boolean>();\n\treadonly onDidChangeBodyVisibility: Event<boolean> = this._onDidChangeBodyVisibility.event;\n\n\tprotected _onDidChangeTitleArea = new Emitter<void>();\n\treadonly onDidChangeTitleArea: Event<void> = this._onDidChangeTitleArea.event;\n\n\tprivate _isVisible: boolean = false;\n\treadonly id: string;\n\treadonly title: string;\n\n\tprotected actionRunner?: IActionRunner;\n\tprotected toolbar: ToolBar;\n\tprivate headerContainer: HTMLElement;\n\n\tconstructor(\n\t\toptions: IViewletPanelOptions,\n\t\t@IKeybindingService protected keybindingService: IKeybindingService,\n\t\t@IContextMenuService protected contextMenuService: IContextMenuService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(options);\n\n\t\tthis.id = options.id;\n\t\tthis.title = options.title;\n\t\tthis.actionRunner = options.actionRunner;\n\n\t\tthis.disposables.push(this._onDidFocus, this._onDidBlur, this._onDidChangeBodyVisibility, this._onDidChangeTitleArea);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tif (this._isVisible !== visible) {\n\t\t\tthis._isVisible = visible;\n\n\t\t\tif (this.isExpanded()) {\n\t\t\t\tthis._onDidChangeBodyVisibility.fire(visible);\n\t\t\t}\n\t\t}\n\t}\n\n\tisVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tisBodyVisible(): boolean {\n\t\treturn this._isVisible && this.isExpanded();\n\t}\n\n\tsetExpanded(expanded: boolean): boolean {\n\t\tconst changed = super.setExpanded(expanded);\n\t\tif (changed) {\n\t\t\tthis._onDidChangeBodyVisibility.fire(expanded);\n\t\t}\n\n\t\treturn changed;\n\t}\n\n\trender(): void {\n\t\tsuper.render();\n\n\t\tconst focusTracker = trackFocus(this.element);\n\t\tthis.disposables.push(focusTracker);\n\t\tthis.disposables.push(focusTracker.onDidFocus(() => this._onDidFocus.fire()));\n\t\tthis.disposables.push(focusTracker.onDidBlur(() => this._onDidBlur.fire()));\n\t}\n\n\tprotected renderHeader(container: HTMLElement): void {\n\t\tthis.headerContainer = container;\n\n\t\tthis.renderHeaderTitle(container, this.title);\n\n\t\tconst actions = append(container, $('.actions'));\n\t\tthis.toolbar = new ToolBar(actions, this.contextMenuService, {\n\t\t\torientation: ActionsOrientation.HORIZONTAL,\n\t\t\tactionItemProvider: action => this.getActionItem(action),\n\t\t\tariaLabel: nls.localize('viewToolbarAriaLabel', \"{0} actions\", this.title),\n\t\t\tgetKeyBinding: action => withNullAsUndefined(this.keybindingService.lookupKeybinding(action.id)),\n\t\t\tactionRunner: this.actionRunner\n\t\t});\n\n\t\tthis.disposables.push(this.toolbar);\n\t\tthis.setActions();\n\n\t\tconst onDidRelevantConfigurationChange = Event.filter(this.configurationService.onDidChangeConfiguration, e => e.affectsConfiguration(ViewletPanel.AlwaysShowActionsConfig));\n\t\tonDidRelevantConfigurationChange(this.updateActionsVisibility, this, this.disposables);\n\t\tthis.updateActionsVisibility();\n\t}\n\n\tprotected renderHeaderTitle(container: HTMLElement, title: string): void {\n\t\tappend(container, $('h3.title', undefined, title));\n\t}\n\n\tfocus(): void {\n\t\tif (this.element) {\n\t\t\tthis.element.focus();\n\t\t\tthis._onDidFocus.fire();\n\t\t}\n\t}\n\n\tprivate setActions(): void {\n\t\tthis.toolbar.setActions(prepareActions(this.getActions()), prepareActions(this.getSecondaryActions()))();\n\t\tthis.toolbar.context = this.getActionsContext();\n\t}\n\n\tprivate updateActionsVisibility(): void {\n\t\tconst shouldAlwaysShowActions = this.configurationService.getValue<boolean>('workbench.view.alwaysShowHeaderActions');\n\t\ttoggleClass(this.headerContainer, 'actions-always-visible', shouldAlwaysShowActions);\n\t}\n\n\tprotected updateActions(): void {\n\t\tthis.setActions();\n\t\tthis._onDidChangeTitleArea.fire();\n\t}\n\n\tgetActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\tgetSecondaryActions(): IAction[] {\n\t\treturn [];\n\t}\n\n\tgetActionItem(action: IAction): IActionItem | undefined {\n\t\treturn undefined;\n\t}\n\n\tgetActionsContext(): any {\n\t\treturn undefined;\n\t}\n\n\tgetOptimalWidth(): number {\n\t\treturn 0;\n\t}\n\n\tsaveState(): void {\n\t\t// Subclasses to implement for saving state\n\t}\n}\n\nexport interface IViewsViewletOptions extends IPanelViewOptions {\n\tshowHeaderInTitleWhenSingleView: boolean;\n}\n\ninterface IViewletPanelItem {\n\tpanel: ViewletPanel;\n\tdisposable: IDisposable;\n}\n\nexport class PanelViewlet extends Viewlet {\n\n\tprivate lastFocusedPanel: ViewletPanel | undefined;\n\tprivate panelItems: IViewletPanelItem[] = [];\n\tprivate panelview: PanelView;\n\n\tget onDidSashChange(): Event<number> {\n\t\treturn this.panelview.onDidSashChange;\n\t}\n\n\tprotected get panels(): ViewletPanel[] {\n\t\treturn this.panelItems.map(i => i.panel);\n\t}\n\n\tprotected get length(): number {\n\t\treturn this.panelItems.length;\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate options: IViewsViewletOptions,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService protected contextMenuService: IContextMenuService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(id, configurationService, layoutService, telemetryService, themeService, storageService);\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tthis.panelview = this._register(new PanelView(parent, this.options));\n\t\tthis._register(this.panelview.onDidDrop(({ from, to }) => this.movePanel(from as ViewletPanel, to as ViewletPanel)));\n\t\tthis._register(addDisposableListener(parent, EventType.CONTEXT_MENU, (e: MouseEvent) => this.showContextMenu(new StandardMouseEvent(e))));\n\t}\n\n\tprivate showContextMenu(event: StandardMouseEvent): void {\n\t\tfor (const panelItem of this.panelItems) {\n\t\t\t// Do not show context menu if target is coming from inside panel views\n\t\t\tif (isAncestor(event.target, panelItem.panel.element)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\n\t\tlet anchor: { x: number, y: number } = { x: event.posx, y: event.posy };\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => anchor,\n\t\t\tgetActions: () => this.getContextMenuActions()\n\t\t});\n\t}\n\n\tgetTitle(): string {\n\t\tlet title = Registry.as<ViewletRegistry>(Extensions.Viewlets).getViewlet(this.getId()).name;\n\n\t\tif (this.isSingleView()) {\n\t\t\ttitle = `${title}: ${this.panelItems[0].panel.title}`;\n\t\t}\n\n\t\treturn title;\n\t}\n\n\tgetActions(): IAction[] {\n\t\tif (this.isSingleView()) {\n\t\t\treturn this.panelItems[0].panel.getActions();\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tgetSecondaryActions(): IAction[] {\n\t\tif (this.isSingleView()) {\n\t\t\treturn this.panelItems[0].panel.getSecondaryActions();\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tgetActionItem(action: IAction): IActionItem | undefined {\n\t\tif (this.isSingleView()) {\n\t\t\treturn this.panelItems[0].panel.getActionItem(action);\n\t\t}\n\n\t\treturn super.getActionItem(action);\n\t}\n\n\tfocus(): void {\n\t\tsuper.focus();\n\n\t\tif (this.lastFocusedPanel) {\n\t\t\tthis.lastFocusedPanel.focus();\n\t\t} else if (this.panelItems.length > 0) {\n\t\t\tfor (const { panel } of this.panelItems) {\n\t\t\t\tif (panel.isExpanded()) {\n\t\t\t\t\tpanel.focus();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension): void {\n\t\tthis.panelview.layout(dimension.height, dimension.width);\n\t}\n\n\tgetOptimalWidth(): number {\n\t\tconst sizes = this.panelItems\n\t\t\t.map(panelItem => panelItem.panel.getOptimalWidth() || 0);\n\n\t\treturn Math.max(...sizes);\n\t}\n\n\taddPanels(panels: { panel: ViewletPanel, size: number, index?: number }[]): void {\n\t\tconst wasSingleView = this.isSingleView();\n\n\t\tfor (const { panel, size, index } of panels) {\n\t\t\tthis.addPanel(panel, size, index);\n\t\t}\n\n\t\tthis.updateViewHeaders();\n\t\tif (this.isSingleView() !== wasSingleView) {\n\t\t\tthis.updateTitleArea();\n\t\t}\n\t}\n\n\tprivate addPanel(panel: ViewletPanel, size: number, index = this.panelItems.length - 1): void {\n\t\tconst disposables: IDisposable[] = [];\n\t\tconst onDidFocus = panel.onDidFocus(() => this.lastFocusedPanel = panel, null, disposables);\n\t\tconst onDidChangeTitleArea = panel.onDidChangeTitleArea(() => {\n\t\t\tif (this.isSingleView()) {\n\t\t\t\tthis.updateTitleArea();\n\t\t\t}\n\t\t}, null, disposables);\n\t\tconst onDidChange = panel.onDidChange(() => {\n\t\t\tif (panel === this.lastFocusedPanel && !panel.isExpanded()) {\n\t\t\t\tthis.lastFocusedPanel = undefined;\n\t\t\t}\n\t\t}, null, disposables);\n\n\t\tconst panelStyler = attachStyler<IPanelColors>(this.themeService, {\n\t\t\theaderForeground: SIDE_BAR_SECTION_HEADER_FOREGROUND,\n\t\t\theaderBackground: SIDE_BAR_SECTION_HEADER_BACKGROUND,\n\t\t\theaderBorder: SIDE_BAR_SECTION_HEADER_BORDER,\n\t\t\tdropBackground: SIDE_BAR_DRAG_AND_DROP_BACKGROUND\n\t\t}, panel);\n\t\tconst disposable = combinedDisposable([onDidFocus, onDidChangeTitleArea, panelStyler, onDidChange]);\n\t\tconst panelItem: IViewletPanelItem = { panel, disposable };\n\n\t\tthis.panelItems.splice(index, 0, panelItem);\n\t\tthis.panelview.addPanel(panel, size, index);\n\t}\n\n\tremovePanels(panels: ViewletPanel[]): void {\n\t\tconst wasSingleView = this.isSingleView();\n\n\t\tpanels.forEach(panel => this.removePanel(panel));\n\n\t\tthis.updateViewHeaders();\n\t\tif (wasSingleView !== this.isSingleView()) {\n\t\t\tthis.updateTitleArea();\n\t\t}\n\t}\n\n\tprivate removePanel(panel: ViewletPanel): void {\n\t\tconst index = firstIndex(this.panelItems, i => i.panel === panel);\n\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.lastFocusedPanel === panel) {\n\t\t\tthis.lastFocusedPanel = undefined;\n\t\t}\n\n\t\tthis.panelview.removePanel(panel);\n\t\tconst [panelItem] = this.panelItems.splice(index, 1);\n\t\tpanelItem.disposable.dispose();\n\n\t}\n\n\tmovePanel(from: ViewletPanel, to: ViewletPanel): void {\n\t\tconst fromIndex = firstIndex(this.panelItems, item => item.panel === from);\n\t\tconst toIndex = firstIndex(this.panelItems, item => item.panel === to);\n\n\t\tif (fromIndex < 0 || fromIndex >= this.panelItems.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (toIndex < 0 || toIndex >= this.panelItems.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [panelItem] = this.panelItems.splice(fromIndex, 1);\n\t\tthis.panelItems.splice(toIndex, 0, panelItem);\n\n\t\tthis.panelview.movePanel(from, to);\n\t}\n\n\tresizePanel(panel: ViewletPanel, size: number): void {\n\t\tthis.panelview.resizePanel(panel, size);\n\t}\n\n\tgetPanelSize(panel: ViewletPanel): number {\n\t\treturn this.panelview.getPanelSize(panel);\n\t}\n\n\tprotected updateViewHeaders(): void {\n\t\tif (this.isSingleView()) {\n\t\t\tthis.panelItems[0].panel.setExpanded(true);\n\t\t\tthis.panelItems[0].panel.headerVisible = false;\n\t\t} else {\n\t\t\tthis.panelItems.forEach(i => i.panel.headerVisible = true);\n\t\t}\n\t}\n\n\tprotected isSingleView(): boolean {\n\t\treturn this.options.showHeaderInTitleWhenSingleView && this.panelItems.length === 1;\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\t\tthis.panelItems.forEach(i => i.disposable.dispose());\n\t\tthis.panelview.dispose();\n\t}\n}\n"]}]}