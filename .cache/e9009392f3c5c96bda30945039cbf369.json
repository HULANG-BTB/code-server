{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar async_1 = require(\"vs/base/common/async\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar color_1 = require(\"vs/base/common/color\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar colorThemeSchema_1 = require(\"vs/workbench/services/themes/common/colorThemeSchema\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar SelectColorThemeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectColorThemeAction, _super);\n    function SelectColorThemeAction(id, label, quickInputService, themeService, extensionGalleryService, viewletService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickInputService = quickInputService;\n        _this.themeService = themeService;\n        _this.extensionGalleryService = extensionGalleryService;\n        _this.viewletService = viewletService;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    SelectColorThemeAction.prototype.run = function () {\n        var _this = this;\n        return this.themeService.getColorThemes().then(function (themes) {\n            var currentTheme = _this.themeService.getColorTheme();\n            var picks = toEntries(themes.filter(function (t) { return t.type === themeService_1.LIGHT; }), nls_1.localize('themes.category.light', \"light themes\")).concat(toEntries(themes.filter(function (t) { return t.type === themeService_1.DARK; }), nls_1.localize('themes.category.dark', \"dark themes\")), toEntries(themes.filter(function (t) { return t.type === themeService_1.HIGH_CONTRAST; }), nls_1.localize('themes.category.hc', \"high contrast themes\")), configurationEntries(_this.extensionGalleryService, nls_1.localize('installColorThemes', \"Install Additional Color Themes...\")));\n            var selectTheme = function (theme, applyTheme) {\n                var themeId = theme.id;\n                if (typeof theme.id === 'undefined') { // 'pick in marketplace' entry\n                    if (applyTheme) {\n                        openExtensionViewlet(_this.viewletService, 'category:themes ');\n                    }\n                    themeId = currentTheme.id;\n                }\n                var target = undefined;\n                if (applyTheme) {\n                    var confValue = _this.configurationService.inspect(workbenchThemeService_1.COLOR_THEME_SETTING);\n                    target = typeof confValue.workspace !== 'undefined' ? configuration_1.ConfigurationTarget.WORKSPACE : configuration_1.ConfigurationTarget.USER;\n                }\n                _this.themeService.setColorTheme(themeId, target).then(undefined, function (err) {\n                    errors_1.onUnexpectedError(err);\n                    _this.themeService.setColorTheme(currentTheme.id, undefined);\n                });\n            };\n            var placeHolder = nls_1.localize('themes.selectTheme', \"Select Color Theme (Up/Down Keys to Preview)\");\n            var autoFocusIndex = arrays_1.firstIndex(picks, function (p) { return isItem(p) && p.id === currentTheme.id; });\n            var activeItem = picks[autoFocusIndex];\n            var delayer = new async_1.Delayer(100);\n            var chooseTheme = function (theme) { return delayer.trigger(function () { return selectTheme(theme || currentTheme, true); }, 0); };\n            var tryTheme = function (theme) { return delayer.trigger(function () { return selectTheme(theme, false); }); };\n            return _this.quickInputService.pick(picks, { placeHolder: placeHolder, activeItem: activeItem, onDidFocus: tryTheme })\n                .then(chooseTheme);\n        });\n    };\n    SelectColorThemeAction.ID = 'workbench.action.selectTheme';\n    SelectColorThemeAction.LABEL = nls_1.localize('selectTheme.label', \"Color Theme\");\n    SelectColorThemeAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickInput_1.IQuickInputService),\n        tslib_1.__param(3, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(4, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(5, viewlet_1.IViewletService),\n        tslib_1.__param(6, configuration_1.IConfigurationService)\n    ], SelectColorThemeAction);\n    return SelectColorThemeAction;\n}(actions_1.Action));\nexports.SelectColorThemeAction = SelectColorThemeAction;\nvar SelectIconThemeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectIconThemeAction, _super);\n    function SelectIconThemeAction(id, label, quickInputService, themeService, extensionGalleryService, viewletService, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickInputService = quickInputService;\n        _this.themeService = themeService;\n        _this.extensionGalleryService = extensionGalleryService;\n        _this.viewletService = viewletService;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    SelectIconThemeAction.prototype.run = function () {\n        var _this = this;\n        return this.themeService.getFileIconThemes().then(function (themes) {\n            var currentTheme = _this.themeService.getFileIconTheme();\n            var picks = [{ id: '', label: nls_1.localize('noIconThemeLabel', 'None'), description: nls_1.localize('noIconThemeDesc', 'Disable file icons') }];\n            picks = picks.concat(toEntries(themes), configurationEntries(_this.extensionGalleryService, nls_1.localize('installIconThemes', \"Install Additional File Icon Themes...\")));\n            var selectTheme = function (theme, applyTheme) {\n                var themeId = theme.id;\n                if (typeof theme.id === 'undefined') { // 'pick in marketplace' entry\n                    if (applyTheme) {\n                        openExtensionViewlet(_this.viewletService, 'tag:icon-theme ');\n                    }\n                    themeId = currentTheme.id;\n                }\n                var target = undefined;\n                if (applyTheme) {\n                    var confValue = _this.configurationService.inspect(workbenchThemeService_1.ICON_THEME_SETTING);\n                    target = typeof confValue.workspace !== 'undefined' ? configuration_1.ConfigurationTarget.WORKSPACE : configuration_1.ConfigurationTarget.USER;\n                }\n                _this.themeService.setFileIconTheme(themeId, target).then(undefined, function (err) {\n                    errors_1.onUnexpectedError(err);\n                    _this.themeService.setFileIconTheme(currentTheme.id, undefined);\n                });\n            };\n            var placeHolder = nls_1.localize('themes.selectIconTheme', \"Select File Icon Theme\");\n            var autoFocusIndex = arrays_1.firstIndex(picks, function (p) { return isItem(p) && p.id === currentTheme.id; });\n            var activeItem = picks[autoFocusIndex];\n            var delayer = new async_1.Delayer(100);\n            var chooseTheme = function (theme) { return delayer.trigger(function () { return selectTheme(theme || currentTheme, true); }, 0); };\n            var tryTheme = function (theme) { return delayer.trigger(function () { return selectTheme(theme, false); }); };\n            return _this.quickInputService.pick(picks, { placeHolder: placeHolder, activeItem: activeItem, onDidFocus: tryTheme })\n                .then(chooseTheme);\n        });\n    };\n    SelectIconThemeAction.ID = 'workbench.action.selectIconTheme';\n    SelectIconThemeAction.LABEL = nls_1.localize('selectIconTheme.label', \"File Icon Theme\");\n    SelectIconThemeAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickInput_1.IQuickInputService),\n        tslib_1.__param(3, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(4, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(5, viewlet_1.IViewletService),\n        tslib_1.__param(6, configuration_1.IConfigurationService)\n    ], SelectIconThemeAction);\n    return SelectIconThemeAction;\n}(actions_1.Action));\nfunction configurationEntries(extensionGalleryService, label) {\n    if (extensionGalleryService.isEnabled()) {\n        return [\n            {\n                type: 'separator'\n            },\n            {\n                id: undefined,\n                label: label,\n                alwaysShow: true\n            }\n        ];\n    }\n    return [];\n}\nfunction openExtensionViewlet(viewletService, query) {\n    return viewletService.openViewlet(extensions_1.VIEWLET_ID, true).then(function (viewlet) {\n        if (viewlet) {\n            viewlet.search(query);\n            viewlet.focus();\n        }\n    });\n}\nfunction isItem(i) {\n    return i['type'] !== 'separatpr';\n}\nfunction toEntries(themes, label) {\n    var toEntry = function (theme) { return ({ id: theme.id, label: theme.label, description: theme.description }); };\n    var sorter = function (t1, t2) { return t1.label.localeCompare(t2.label); };\n    var entries = themes.map(toEntry).sort(sorter);\n    if (entries.length > 0 && label) {\n        entries.unshift({ type: 'separator', label: label });\n    }\n    return entries;\n}\nvar GenerateColorThemeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GenerateColorThemeAction, _super);\n    function GenerateColorThemeAction(id, label, themeService, editorService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.themeService = themeService;\n        _this.editorService = editorService;\n        return _this;\n    }\n    GenerateColorThemeAction.prototype.run = function () {\n        var theme = this.themeService.getColorTheme();\n        var colors = platform_1.Registry.as(colorRegistry_1.Extensions.ColorContribution).getColors();\n        var colorIds = colors.map(function (c) { return c.id; }).sort();\n        var resultingColors = {};\n        var inherited = [];\n        for (var _i = 0, colorIds_1 = colorIds; _i < colorIds_1.length; _i++) {\n            var colorId = colorIds_1[_i];\n            var color = theme.getColor(colorId, false);\n            if (color) {\n                resultingColors[colorId] = color_1.Color.Format.CSS.formatHexA(color, true);\n            }\n            else {\n                inherited.push(colorId);\n            }\n        }\n        for (var _a = 0, inherited_1 = inherited; _a < inherited_1.length; _a++) {\n            var id = inherited_1[_a];\n            var color = theme.getColor(id);\n            if (color) {\n                resultingColors['__' + id] = color_1.Color.Format.CSS.formatHexA(color, true);\n            }\n        }\n        var contents = JSON.stringify({\n            '$schema': colorThemeSchema_1.colorThemeSchemaId,\n            type: theme.type,\n            colors: resultingColors,\n            tokenColors: theme.tokenColors.filter(function (t) { return !!t.scope; })\n        }, null, '\\t');\n        contents = contents.replace(/\\\"__/g, '//\"');\n        return this.editorService.openEditor({ contents: contents, language: 'jsonc' });\n    };\n    GenerateColorThemeAction.ID = 'workbench.action.generateColorTheme';\n    GenerateColorThemeAction.LABEL = nls_1.localize('generateColorTheme.label', \"Generate Color Theme From Current Settings\");\n    GenerateColorThemeAction = tslib_1.__decorate([\n        tslib_1.__param(2, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(3, editorService_1.IEditorService)\n    ], GenerateColorThemeAction);\n    return GenerateColorThemeAction;\n}(actions_1.Action));\nvar category = nls_1.localize('preferences', \"Preferences\");\nvar colorThemeDescriptor = new actions_2.SyncActionDescriptor(SelectColorThemeAction, SelectColorThemeAction.ID, SelectColorThemeAction.LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_T) });\nplatform_1.Registry.as(actions_3.Extensions.WorkbenchActions).registerWorkbenchAction(colorThemeDescriptor, 'Preferences: Color Theme', category);\nvar iconThemeDescriptor = new actions_2.SyncActionDescriptor(SelectIconThemeAction, SelectIconThemeAction.ID, SelectIconThemeAction.LABEL);\nplatform_1.Registry.as(actions_3.Extensions.WorkbenchActions).registerWorkbenchAction(iconThemeDescriptor, 'Preferences: File Icon Theme', category);\nvar developerCategory = nls_1.localize('developer', \"Developer\");\nvar generateColorThemeDescriptor = new actions_2.SyncActionDescriptor(GenerateColorThemeAction, GenerateColorThemeAction.ID, GenerateColorThemeAction.LABEL);\nplatform_1.Registry.as(actions_3.Extensions.WorkbenchActions).registerWorkbenchAction(generateColorThemeDescriptor, 'Developer: Generate Color Theme From Current Settings', developerCategory);\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarPreferencesMenu, {\n    group: '4_themes',\n    command: {\n        id: SelectColorThemeAction.ID,\n        title: nls_1.localize({ key: 'miSelectColorTheme', comment: ['&& denotes a mnemonic'] }, \"&&Color Theme\")\n    },\n    order: 1\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarPreferencesMenu, {\n    group: '4_themes',\n    command: {\n        id: SelectIconThemeAction.ID,\n        title: nls_1.localize({ key: 'miSelectIconTheme', comment: ['&& denotes a mnemonic'] }, \"File &&Icon Theme\")\n    },\n    order: 2\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/browser/themes.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { firstIndex } from 'vs/base/common/arrays';\nimport { KeyMod, KeyChord, KeyCode } from 'vs/base/common/keyCodes';\nimport { SyncActionDescriptor, MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actions';\nimport { IWorkbenchThemeService, COLOR_THEME_SETTING, ICON_THEME_SETTING, IColorTheme, IFileIconTheme } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { VIEWLET_ID, IExtensionsViewlet } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { Delayer } from 'vs/base/common/async';\nimport { IColorRegistry, Extensions as ColorRegistryExtensions } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Color } from 'vs/base/common/color';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { LIGHT, DARK, HIGH_CONTRAST } from 'vs/platform/theme/common/themeService';\nimport { colorThemeSchemaId } from 'vs/workbench/services/themes/common/colorThemeSchema';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\n\nexport class SelectColorThemeAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.selectTheme';\n\tstatic LABEL = localize('selectTheme.label', \"Color Theme\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.themeService.getColorThemes().then(themes => {\n\t\t\tconst currentTheme = this.themeService.getColorTheme();\n\n\t\t\tconst picks: QuickPickInput<ThemeItem>[] = [\n\t\t\t\t...toEntries(themes.filter(t => t.type === LIGHT), localize('themes.category.light', \"light themes\")),\n\t\t\t\t...toEntries(themes.filter(t => t.type === DARK), localize('themes.category.dark', \"dark themes\")),\n\t\t\t\t...toEntries(themes.filter(t => t.type === HIGH_CONTRAST), localize('themes.category.hc', \"high contrast themes\")),\n\t\t\t\t...configurationEntries(this.extensionGalleryService, localize('installColorThemes', \"Install Additional Color Themes...\"))\n\t\t\t];\n\n\t\t\tconst selectTheme = (theme: ThemeItem, applyTheme: boolean) => {\n\t\t\t\tlet themeId = theme.id;\n\t\t\t\tif (typeof theme.id === 'undefined') { // 'pick in marketplace' entry\n\t\t\t\t\tif (applyTheme) {\n\t\t\t\t\t\topenExtensionViewlet(this.viewletService, 'category:themes ');\n\t\t\t\t\t}\n\t\t\t\t\tthemeId = currentTheme.id;\n\t\t\t\t}\n\t\t\t\tlet target: ConfigurationTarget | undefined = undefined;\n\t\t\t\tif (applyTheme) {\n\t\t\t\t\tlet confValue = this.configurationService.inspect(COLOR_THEME_SETTING);\n\t\t\t\t\ttarget = typeof confValue.workspace !== 'undefined' ? ConfigurationTarget.WORKSPACE : ConfigurationTarget.USER;\n\t\t\t\t}\n\n\t\t\t\tthis.themeService.setColorTheme(themeId, target).then(undefined,\n\t\t\t\t\terr => {\n\t\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\t\tthis.themeService.setColorTheme(currentTheme.id, undefined);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tconst placeHolder = localize('themes.selectTheme', \"Select Color Theme (Up/Down Keys to Preview)\");\n\t\t\tconst autoFocusIndex = firstIndex(picks, p => isItem(p) && p.id === currentTheme.id);\n\t\t\tconst activeItem: ThemeItem = picks[autoFocusIndex] as ThemeItem;\n\t\t\tconst delayer = new Delayer<void>(100);\n\t\t\tconst chooseTheme = (theme: ThemeItem) => delayer.trigger(() => selectTheme(theme || currentTheme, true), 0);\n\t\t\tconst tryTheme = (theme: ThemeItem) => delayer.trigger(() => selectTheme(theme, false));\n\n\t\t\treturn this.quickInputService.pick(picks, { placeHolder, activeItem, onDidFocus: tryTheme })\n\t\t\t\t.then(chooseTheme);\n\t\t});\n\t}\n}\n\nclass SelectIconThemeAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.selectIconTheme';\n\tstatic LABEL = localize('selectIconTheme.label', \"File Icon Theme\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@IExtensionGalleryService private readonly extensionGalleryService: IExtensionGalleryService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.themeService.getFileIconThemes().then(themes => {\n\t\t\tconst currentTheme = this.themeService.getFileIconTheme();\n\n\t\t\tlet picks: QuickPickInput<ThemeItem>[] = [{ id: '', label: localize('noIconThemeLabel', 'None'), description: localize('noIconThemeDesc', 'Disable file icons') }];\n\t\t\tpicks = picks.concat(\n\t\t\t\ttoEntries(themes),\n\t\t\t\tconfigurationEntries(this.extensionGalleryService, localize('installIconThemes', \"Install Additional File Icon Themes...\"))\n\t\t\t);\n\n\t\t\tconst selectTheme = (theme: ThemeItem, applyTheme: boolean) => {\n\t\t\t\tlet themeId = theme.id;\n\t\t\t\tif (typeof theme.id === 'undefined') { // 'pick in marketplace' entry\n\t\t\t\t\tif (applyTheme) {\n\t\t\t\t\t\topenExtensionViewlet(this.viewletService, 'tag:icon-theme ');\n\t\t\t\t\t}\n\t\t\t\t\tthemeId = currentTheme.id;\n\t\t\t\t}\n\t\t\t\tlet target: ConfigurationTarget | undefined = undefined;\n\t\t\t\tif (applyTheme) {\n\t\t\t\t\tlet confValue = this.configurationService.inspect(ICON_THEME_SETTING);\n\t\t\t\t\ttarget = typeof confValue.workspace !== 'undefined' ? ConfigurationTarget.WORKSPACE : ConfigurationTarget.USER;\n\t\t\t\t}\n\t\t\t\tthis.themeService.setFileIconTheme(themeId, target).then(undefined,\n\t\t\t\t\terr => {\n\t\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t\t\tthis.themeService.setFileIconTheme(currentTheme.id, undefined);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\n\t\t\tconst placeHolder = localize('themes.selectIconTheme', \"Select File Icon Theme\");\n\t\t\tconst autoFocusIndex = firstIndex(picks, p => isItem(p) && p.id === currentTheme.id);\n\t\t\tconst activeItem: ThemeItem = picks[autoFocusIndex] as ThemeItem;\n\t\t\tconst delayer = new Delayer<void>(100);\n\t\t\tconst chooseTheme = (theme: ThemeItem) => delayer.trigger(() => selectTheme(theme || currentTheme, true), 0);\n\t\t\tconst tryTheme = (theme: ThemeItem) => delayer.trigger(() => selectTheme(theme, false));\n\n\t\t\treturn this.quickInputService.pick(picks, { placeHolder, activeItem, onDidFocus: tryTheme })\n\t\t\t\t.then(chooseTheme);\n\t\t});\n\t}\n}\n\nfunction configurationEntries(extensionGalleryService: IExtensionGalleryService, label: string): QuickPickInput<ThemeItem>[] {\n\tif (extensionGalleryService.isEnabled()) {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: undefined,\n\t\t\t\tlabel: label,\n\t\t\t\talwaysShow: true\n\t\t\t}\n\t\t];\n\t}\n\treturn [];\n}\n\nfunction openExtensionViewlet(viewletService: IViewletService, query: string) {\n\treturn viewletService.openViewlet(VIEWLET_ID, true).then(viewlet => {\n\t\tif (viewlet) {\n\t\t\t(viewlet as IExtensionsViewlet).search(query);\n\t\t\tviewlet.focus();\n\t\t}\n\t});\n}\ninterface ThemeItem {\n\tid: string | undefined;\n\tlabel: string;\n\tdescription?: string;\n\talwaysShow?: boolean;\n}\n\nfunction isItem(i: QuickPickInput<ThemeItem>): i is ThemeItem {\n\treturn i['type'] !== 'separatpr';\n}\n\nfunction toEntries(themes: Array<IColorTheme | IFileIconTheme>, label?: string): QuickPickInput<ThemeItem>[] {\n\tconst toEntry = (theme: IColorTheme): ThemeItem => ({ id: theme.id, label: theme.label, description: theme.description });\n\tconst sorter = (t1: ThemeItem, t2: ThemeItem) => t1.label.localeCompare(t2.label);\n\tlet entries: QuickPickInput<ThemeItem>[] = themes.map(toEntry).sort(sorter);\n\tif (entries.length > 0 && label) {\n\t\tentries.unshift({ type: 'separator', label });\n\t}\n\treturn entries;\n}\n\nclass GenerateColorThemeAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.generateColorTheme';\n\tstatic LABEL = localize('generateColorTheme.label', \"Generate Color Theme From Current Settings\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\tlet theme = this.themeService.getColorTheme();\n\t\tlet colors = Registry.as<IColorRegistry>(ColorRegistryExtensions.ColorContribution).getColors();\n\t\tlet colorIds = colors.map(c => c.id).sort();\n\t\tlet resultingColors = {};\n\t\tlet inherited: string[] = [];\n\t\tfor (let colorId of colorIds) {\n\t\t\tconst color = theme.getColor(colorId, false);\n\t\t\tif (color) {\n\t\t\t\tresultingColors[colorId] = Color.Format.CSS.formatHexA(color, true);\n\t\t\t} else {\n\t\t\t\tinherited.push(colorId);\n\t\t\t}\n\t\t}\n\t\tfor (let id of inherited) {\n\t\t\tconst color = theme.getColor(id);\n\t\t\tif (color) {\n\t\t\t\tresultingColors['__' + id] = Color.Format.CSS.formatHexA(color, true);\n\t\t\t}\n\t\t}\n\t\tlet contents = JSON.stringify({\n\t\t\t'$schema': colorThemeSchemaId,\n\t\t\ttype: theme.type,\n\t\t\tcolors: resultingColors,\n\t\t\ttokenColors: theme.tokenColors.filter(t => !!t.scope)\n\t\t}, null, '\\t');\n\t\tcontents = contents.replace(/\\\"__/g, '//\"');\n\n\t\treturn this.editorService.openEditor({ contents, language: 'jsonc' });\n\t}\n}\n\nconst category = localize('preferences', \"Preferences\");\n\nconst colorThemeDescriptor = new SyncActionDescriptor(SelectColorThemeAction, SelectColorThemeAction.ID, SelectColorThemeAction.LABEL, { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_T) });\nRegistry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions).registerWorkbenchAction(colorThemeDescriptor, 'Preferences: Color Theme', category);\n\nconst iconThemeDescriptor = new SyncActionDescriptor(SelectIconThemeAction, SelectIconThemeAction.ID, SelectIconThemeAction.LABEL);\nRegistry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions).registerWorkbenchAction(iconThemeDescriptor, 'Preferences: File Icon Theme', category);\n\n\nconst developerCategory = localize('developer', \"Developer\");\n\nconst generateColorThemeDescriptor = new SyncActionDescriptor(GenerateColorThemeAction, GenerateColorThemeAction.ID, GenerateColorThemeAction.LABEL);\nRegistry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions).registerWorkbenchAction(generateColorThemeDescriptor, 'Developer: Generate Color Theme From Current Settings', developerCategory);\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '4_themes',\n\tcommand: {\n\t\tid: SelectColorThemeAction.ID,\n\t\ttitle: localize({ key: 'miSelectColorTheme', comment: ['&& denotes a mnemonic'] }, \"&&Color Theme\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '4_themes',\n\tcommand: {\n\t\tid: SelectIconThemeAction.ID,\n\t\ttitle: localize({ key: 'miSelectIconTheme', comment: ['&& denotes a mnemonic'] }, \"File &&Icon Theme\")\n\t},\n\torder: 2\n});\n"]}]}