{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/jsonFormatter.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonFormatter.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_1 = require(\"./json\");\nfunction format(documentText, range, options) {\n    var initialIndentLevel;\n    var formatText;\n    var formatTextStart;\n    var rangeStart;\n    var rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        var endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    var eol = getEOL(options, documentText);\n    var lineBreak = false;\n    var indentLevel = 0;\n    var indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    var scanner = json_1.createScanner(formatText, false);\n    var hasError = false;\n    function newLineAndIndent() {\n        return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n    function scanNext() {\n        var token = scanner.scan();\n        lineBreak = false;\n        while (token === json_1.SyntaxKind.Trivia || token === json_1.SyntaxKind.LineBreakTrivia) {\n            lineBreak = lineBreak || (token === json_1.SyntaxKind.LineBreakTrivia);\n            token = scanner.scan();\n        }\n        hasError = token === json_1.SyntaxKind.Unknown || scanner.getTokenError() !== json_1.ScanError.None;\n        return token;\n    }\n    var editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    var firstToken = scanNext();\n    if (firstToken !== json_1.SyntaxKind.EOF) {\n        var firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        var initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== json_1.SyntaxKind.EOF) {\n        var firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        var secondToken = scanNext();\n        var replaceContent = '';\n        while (!lineBreak && (secondToken === json_1.SyntaxKind.LineCommentTrivia || secondToken === json_1.SyntaxKind.BlockCommentTrivia)) {\n            // comments on the same line: keep them on the same line, but ignore them otherwise\n            var commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            replaceContent = secondToken === json_1.SyntaxKind.LineCommentTrivia ? newLineAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === json_1.SyntaxKind.CloseBraceToken) {\n            if (firstToken !== json_1.SyntaxKind.OpenBraceToken) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else if (secondToken === json_1.SyntaxKind.CloseBracketToken) {\n            if (firstToken !== json_1.SyntaxKind.OpenBracketToken) {\n                indentLevel--;\n                replaceContent = newLineAndIndent();\n            }\n        }\n        else {\n            switch (firstToken) {\n                case json_1.SyntaxKind.OpenBracketToken:\n                case json_1.SyntaxKind.OpenBraceToken:\n                    indentLevel++;\n                    replaceContent = newLineAndIndent();\n                    break;\n                case json_1.SyntaxKind.CommaToken:\n                case json_1.SyntaxKind.LineCommentTrivia:\n                    replaceContent = newLineAndIndent();\n                    break;\n                case json_1.SyntaxKind.BlockCommentTrivia:\n                    if (lineBreak) {\n                        replaceContent = newLineAndIndent();\n                    }\n                    else {\n                        // symbol following comment on the same line: keep on same line, separate with ' '\n                        replaceContent = ' ';\n                    }\n                    break;\n                case json_1.SyntaxKind.ColonToken:\n                    replaceContent = ' ';\n                    break;\n                case json_1.SyntaxKind.StringLiteral:\n                    if (secondToken === json_1.SyntaxKind.ColonToken) {\n                        replaceContent = '';\n                        break;\n                    }\n                // fall through\n                case json_1.SyntaxKind.NullKeyword:\n                case json_1.SyntaxKind.TrueKeyword:\n                case json_1.SyntaxKind.FalseKeyword:\n                case json_1.SyntaxKind.NumericLiteral:\n                case json_1.SyntaxKind.CloseBraceToken:\n                case json_1.SyntaxKind.CloseBracketToken:\n                    if (secondToken === json_1.SyntaxKind.LineCommentTrivia || secondToken === json_1.SyntaxKind.BlockCommentTrivia) {\n                        replaceContent = ' ';\n                    }\n                    else if (secondToken !== json_1.SyntaxKind.CommaToken && secondToken !== json_1.SyntaxKind.EOF) {\n                        hasError = true;\n                    }\n                    break;\n                case json_1.SyntaxKind.Unknown:\n                    hasError = true;\n                    break;\n            }\n            if (lineBreak && (secondToken === json_1.SyntaxKind.LineCommentTrivia || secondToken === json_1.SyntaxKind.BlockCommentTrivia)) {\n                replaceContent = newLineAndIndent();\n            }\n        }\n        var secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nexports.format = format;\nfunction repeat(s, count) {\n    var result = '';\n    for (var i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    var i = 0;\n    var nChars = 0;\n    var tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        var ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nfunction isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\nexports.isEOL = isEOL;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonFormatter.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/jsonFormatter.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createScanner, SyntaxKind, ScanError } from './json';\n\nexport interface FormattingOptions {\n\t/**\n\t * If indentation is based on spaces (`insertSpaces` = true), then what is the number of spaces that make an indent?\n\t */\n\ttabSize?: number;\n\t/**\n\t * Is indentation based on spaces?\n\t */\n\tinsertSpaces?: boolean;\n\t/**\n\t * The default 'end of line' character. If not set, '\\n' is used as default.\n\t */\n\teol?: string;\n}\n\n/**\n * Represents a text modification\n */\nexport interface Edit {\n\t/**\n\t * The start offset of the modification.\n\t */\n\toffset: number;\n\t/**\n\t * The length of the modification. Must not be negative. Empty length represents an *insert*.\n\t */\n\tlength: number;\n\t/**\n\t * The new content. Empty content represents a *remove*.\n\t */\n\tcontent: string;\n}\n\n/**\n * A text range in the document\n*/\nexport interface Range {\n\t/**\n\t * The start offset of the range.\n\t */\n\toffset: number;\n\t/**\n\t * The length of the range. Must not be negative.\n\t */\n\tlength: number;\n}\n\n\nexport function format(documentText: string, range: Range | undefined, options: FormattingOptions): Edit[] {\n\tlet initialIndentLevel: number;\n\tlet formatText: string;\n\tlet formatTextStart: number;\n\tlet rangeStart: number;\n\tlet rangeEnd: number;\n\tif (range) {\n\t\trangeStart = range.offset;\n\t\trangeEnd = rangeStart + range.length;\n\n\t\tformatTextStart = rangeStart;\n\t\twhile (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n\t\t\tformatTextStart--;\n\t\t}\n\t\tlet endOffset = rangeEnd;\n\t\twhile (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n\t\t\tendOffset++;\n\t\t}\n\t\tformatText = documentText.substring(formatTextStart, endOffset);\n\t\tinitialIndentLevel = computeIndentLevel(formatText, options);\n\t} else {\n\t\tformatText = documentText;\n\t\tinitialIndentLevel = 0;\n\t\tformatTextStart = 0;\n\t\trangeStart = 0;\n\t\trangeEnd = documentText.length;\n\t}\n\tconst eol = getEOL(options, documentText);\n\n\tlet lineBreak = false;\n\tlet indentLevel = 0;\n\tlet indentValue: string;\n\tif (options.insertSpaces) {\n\t\tindentValue = repeat(' ', options.tabSize || 4);\n\t} else {\n\t\tindentValue = '\\t';\n\t}\n\n\tconst scanner = createScanner(formatText, false);\n\tlet hasError = false;\n\n\tfunction newLineAndIndent(): string {\n\t\treturn eol + repeat(indentValue, initialIndentLevel + indentLevel);\n\t}\n\tfunction scanNext(): SyntaxKind {\n\t\tlet token = scanner.scan();\n\t\tlineBreak = false;\n\t\twhile (token === SyntaxKind.Trivia || token === SyntaxKind.LineBreakTrivia) {\n\t\t\tlineBreak = lineBreak || (token === SyntaxKind.LineBreakTrivia);\n\t\t\ttoken = scanner.scan();\n\t\t}\n\t\thasError = token === SyntaxKind.Unknown || scanner.getTokenError() !== ScanError.None;\n\t\treturn token;\n\t}\n\tconst editOperations: Edit[] = [];\n\tfunction addEdit(text: string, startOffset: number, endOffset: number) {\n\t\tif (!hasError && startOffset < rangeEnd && endOffset > rangeStart && documentText.substring(startOffset, endOffset) !== text) {\n\t\t\teditOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n\t\t}\n\t}\n\n\tlet firstToken = scanNext();\n\n\tif (firstToken !== SyntaxKind.EOF) {\n\t\tconst firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\tconst initialIndent = repeat(indentValue, initialIndentLevel);\n\t\taddEdit(initialIndent, formatTextStart, firstTokenStart);\n\t}\n\n\twhile (firstToken !== SyntaxKind.EOF) {\n\t\tlet firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n\t\tlet secondToken = scanNext();\n\n\t\tlet replaceContent = '';\n\t\twhile (!lineBreak && (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia)) {\n\t\t\t// comments on the same line: keep them on the same line, but ignore them otherwise\n\t\t\tconst commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\t\taddEdit(' ', firstTokenEnd, commentTokenStart);\n\t\t\tfirstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n\t\t\treplaceContent = secondToken === SyntaxKind.LineCommentTrivia ? newLineAndIndent() : '';\n\t\t\tsecondToken = scanNext();\n\t\t}\n\n\t\tif (secondToken === SyntaxKind.CloseBraceToken) {\n\t\t\tif (firstToken !== SyntaxKind.OpenBraceToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else if (secondToken === SyntaxKind.CloseBracketToken) {\n\t\t\tif (firstToken !== SyntaxKind.OpenBracketToken) {\n\t\t\t\tindentLevel--;\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (firstToken) {\n\t\t\t\tcase SyntaxKind.OpenBracketToken:\n\t\t\t\tcase SyntaxKind.OpenBraceToken:\n\t\t\t\t\tindentLevel++;\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.CommaToken:\n\t\t\t\tcase SyntaxKind.LineCommentTrivia:\n\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.BlockCommentTrivia:\n\t\t\t\t\tif (lineBreak) {\n\t\t\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// symbol following comment on the same line: keep on same line, separate with ' '\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.ColonToken:\n\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.StringLiteral:\n\t\t\t\t\tif (secondToken === SyntaxKind.ColonToken) {\n\t\t\t\t\t\treplaceContent = '';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t// fall through\n\t\t\t\tcase SyntaxKind.NullKeyword:\n\t\t\t\tcase SyntaxKind.TrueKeyword:\n\t\t\t\tcase SyntaxKind.FalseKeyword:\n\t\t\t\tcase SyntaxKind.NumericLiteral:\n\t\t\t\tcase SyntaxKind.CloseBraceToken:\n\t\t\t\tcase SyntaxKind.CloseBracketToken:\n\t\t\t\t\tif (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia) {\n\t\t\t\t\t\treplaceContent = ' ';\n\t\t\t\t\t} else if (secondToken !== SyntaxKind.CommaToken && secondToken !== SyntaxKind.EOF) {\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase SyntaxKind.Unknown:\n\t\t\t\t\thasError = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (lineBreak && (secondToken === SyntaxKind.LineCommentTrivia || secondToken === SyntaxKind.BlockCommentTrivia)) {\n\t\t\t\treplaceContent = newLineAndIndent();\n\t\t\t}\n\n\t\t}\n\t\tconst secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n\t\taddEdit(replaceContent, firstTokenEnd, secondTokenStart);\n\t\tfirstToken = secondToken;\n\t}\n\treturn editOperations;\n}\n\nfunction repeat(s: string, count: number): string {\n\tlet result = '';\n\tfor (let i = 0; i < count; i++) {\n\t\tresult += s;\n\t}\n\treturn result;\n}\n\nfunction computeIndentLevel(content: string, options: FormattingOptions): number {\n\tlet i = 0;\n\tlet nChars = 0;\n\tconst tabSize = options.tabSize || 4;\n\twhile (i < content.length) {\n\t\tconst ch = content.charAt(i);\n\t\tif (ch === ' ') {\n\t\t\tnChars++;\n\t\t} else if (ch === '\\t') {\n\t\t\tnChars += tabSize;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn Math.floor(nChars / tabSize);\n}\n\nfunction getEOL(options: FormattingOptions, text: string): string {\n\tfor (let i = 0; i < text.length; i++) {\n\t\tconst ch = text.charAt(i);\n\t\tif (ch === '\\r') {\n\t\t\tif (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n\t\t\t\treturn '\\r\\n';\n\t\t\t}\n\t\t\treturn '\\r';\n\t\t} else if (ch === '\\n') {\n\t\t\treturn '\\n';\n\t\t}\n\t}\n\treturn (options && options.eol) || '\\n';\n}\n\nexport function isEOL(text: string, offset: number) {\n\treturn '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}"]}]}