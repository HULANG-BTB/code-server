{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar ColumnSelection = /** @class */ (function () {\n    function ColumnSelection() {\n    }\n    ColumnSelection._columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        var reversed = (fromLineNumber > toLineNumber);\n        var isRTL = (fromVisibleColumn > toVisibleColumn);\n        var isLTR = (fromVisibleColumn < toVisibleColumn);\n        var result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (var i = 0; i < lineCount; i++) {\n            var lineNumber = fromLineNumber + (reversed ? -i : i);\n            var startColumn = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n            var endColumn = cursorCommon_1.CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n            var visibleStartColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, startColumn));\n            var visibleEndColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new cursorCommon_1.SingleCursorState(new range_1.Range(lineNumber, startColumn, lineNumber, startColumn), 0, new position_1.Position(lineNumber, endColumn), 0));\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    };\n    ColumnSelection.columnSelect = function (config, model, fromViewSelection, toViewLineNumber, toViewVisualColumn) {\n        var fromViewPosition = new position_1.Position(fromViewSelection.selectionStartLineNumber, fromViewSelection.selectionStartColumn);\n        var fromViewVisibleColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, fromViewPosition);\n        return ColumnSelection._columnSelect(config, model, fromViewPosition.lineNumber, fromViewVisibleColumn, toViewLineNumber, toViewVisualColumn);\n    };\n    ColumnSelection.columnSelectLeft = function (config, model, cursor, toViewLineNumber, toViewVisualColumn) {\n        if (toViewVisualColumn > 1) {\n            toViewVisualColumn--;\n        }\n        return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n    };\n    ColumnSelection.columnSelectRight = function (config, model, cursor, toViewLineNumber, toViewVisualColumn) {\n        var maxVisualViewColumn = 0;\n        var minViewLineNumber = Math.min(cursor.position.lineNumber, toViewLineNumber);\n        var maxViewLineNumber = Math.max(cursor.position.lineNumber, toViewLineNumber);\n        for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            var lineMaxVisualViewColumn = cursorCommon_1.CursorColumns.visibleColumnFromColumn2(config, model, new position_1.Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n    };\n    ColumnSelection.columnSelectUp = function (config, model, cursor, isPaged, toViewLineNumber, toViewVisualColumn) {\n        var linesCount = isPaged ? config.pageSize : 1;\n        toViewLineNumber -= linesCount;\n        if (toViewLineNumber < 1) {\n            toViewLineNumber = 1;\n        }\n        return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n    };\n    ColumnSelection.columnSelectDown = function (config, model, cursor, isPaged, toViewLineNumber, toViewVisualColumn) {\n        var linesCount = isPaged ? config.pageSize : 1;\n        toViewLineNumber += linesCount;\n        if (toViewLineNumber > model.getLineCount()) {\n            toViewLineNumber = model.getLineCount();\n        }\n        return this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n    };\n    return ColumnSelection;\n}());\nexports.ColumnSelection = ColumnSelection;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorColumnSelection.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorColumns, CursorConfiguration, ICursorSimpleModel, SingleCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\n\nexport interface IColumnSelectResult {\n\tviewStates: SingleCursorState[];\n\treversed: boolean;\n\ttoLineNumber: number;\n\ttoVisualColumn: number;\n}\n\nexport class ColumnSelection {\n\n\tprivate static _columnSelect(config: CursorConfiguration, model: ICursorSimpleModel, fromLineNumber: number, fromVisibleColumn: number, toLineNumber: number, toVisibleColumn: number): IColumnSelectResult {\n\t\tlet lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n\t\tlet reversed = (fromLineNumber > toLineNumber);\n\t\tlet isRTL = (fromVisibleColumn > toVisibleColumn);\n\t\tlet isLTR = (fromVisibleColumn < toVisibleColumn);\n\n\t\tlet result: SingleCursorState[] = [];\n\n\t\t// console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tlet lineNumber = fromLineNumber + (reversed ? -i : i);\n\n\t\t\tlet startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n\t\t\tlet endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n\t\t\tlet visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\n\t\t\tlet visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\n\n\t\t\t// console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n\t\t\tif (isLTR) {\n\t\t\t\tif (visibleStartColumn > toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleEndColumn < fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRTL) {\n\t\t\t\tif (visibleEndColumn > fromVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (visibleStartColumn < toVisibleColumn) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, startColumn, lineNumber, startColumn), 0,\n\t\t\t\tnew Position(lineNumber, endColumn), 0\n\t\t\t));\n\t\t}\n\n\t\treturn {\n\t\t\tviewStates: result,\n\t\t\treversed: reversed,\n\t\t\ttoLineNumber: toLineNumber,\n\t\t\ttoVisualColumn: toVisibleColumn\n\t\t};\n\t}\n\n\tpublic static columnSelect(config: CursorConfiguration, model: ICursorSimpleModel, fromViewSelection: Selection, toViewLineNumber: number, toViewVisualColumn: number): IColumnSelectResult {\n\t\tconst fromViewPosition = new Position(fromViewSelection.selectionStartLineNumber, fromViewSelection.selectionStartColumn);\n\t\tconst fromViewVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, fromViewPosition);\n\t\treturn ColumnSelection._columnSelect(config, model, fromViewPosition.lineNumber, fromViewVisibleColumn, toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, toViewLineNumber: number, toViewVisualColumn: number): IColumnSelectResult {\n\t\tif (toViewVisualColumn > 1) {\n\t\t\ttoViewVisualColumn--;\n\t\t}\n\n\t\treturn this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, toViewLineNumber: number, toViewVisualColumn: number): IColumnSelectResult {\n\t\tlet maxVisualViewColumn = 0;\n\t\tlet minViewLineNumber = Math.min(cursor.position.lineNumber, toViewLineNumber);\n\t\tlet maxViewLineNumber = Math.max(cursor.position.lineNumber, toViewLineNumber);\n\t\tfor (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n\t\t\tlet lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n\t\t\tlet lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\n\t\t\tmaxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n\t\t}\n\n\t\tif (toViewVisualColumn < maxVisualViewColumn) {\n\t\t\ttoViewVisualColumn++;\n\t\t}\n\n\t\treturn this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, isPaged: boolean, toViewLineNumber: number, toViewVisualColumn: number): IColumnSelectResult {\n\t\tlet linesCount = isPaged ? config.pageSize : 1;\n\n\t\ttoViewLineNumber -= linesCount;\n\t\tif (toViewLineNumber < 1) {\n\t\t\ttoViewLineNumber = 1;\n\t\t}\n\n\t\treturn this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n\t}\n\n\tpublic static columnSelectDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, isPaged: boolean, toViewLineNumber: number, toViewVisualColumn: number): IColumnSelectResult {\n\t\tlet linesCount = isPaged ? config.pageSize : 1;\n\n\t\ttoViewLineNumber += linesCount;\n\t\tif (toViewLineNumber > model.getLineCount()) {\n\t\t\ttoViewLineNumber = model.getLineCount();\n\t\t}\n\n\t\treturn this.columnSelect(config, model, cursor.selection, toViewLineNumber, toViewVisualColumn);\n\t}\n}\n"]}]}