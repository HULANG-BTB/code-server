{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/node/configurationService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/node/configurationService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/registry/common/platform\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/base/common/lifecycle\", \"vs/platform/configuration/common/configuration\", \"vs/platform/configuration/common/configurationModels\", \"vs/base/common/event\", \"vs/platform/environment/common/environment\", \"vs/platform/configuration/node/configuration\"], function (require, exports, platform_1, configurationRegistry_1, lifecycle_1, configuration_1, configurationModels_1, event_1, environment_1, configuration_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ConfigurationService = class ConfigurationService extends lifecycle_1.Disposable {\n        constructor(environmentService) {\n            super();\n            this._onDidChangeConfiguration = this._register(new event_1.Emitter());\n            this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n            this.userConfiguration = this._register(new configuration_2.NodeBasedUserConfiguration(environmentService.appSettingsPath));\n            // Initialize\n            const defaults = new configurationModels_1.DefaultConfigurationModel();\n            const user = this.userConfiguration.initializeSync();\n            this._configuration = new configurationModels_1.Configuration(defaults, user);\n            // Listeners\n            this._register(this.userConfiguration.onDidChangeConfiguration(userConfigurationModel => this.onDidChangeUserConfiguration(userConfigurationModel)));\n            this._register(platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidUpdateConfiguration(configurationProperties => this.onDidDefaultConfigurationChange(configurationProperties)));\n        }\n        get configuration() {\n            return this._configuration;\n        }\n        getConfigurationData() {\n            return this.configuration.toData();\n        }\n        getValue(arg1, arg2) {\n            const section = typeof arg1 === 'string' ? arg1 : undefined;\n            const overrides = configuration_1.isConfigurationOverrides(arg1) ? arg1 : configuration_1.isConfigurationOverrides(arg2) ? arg2 : {};\n            return this.configuration.getValue(section, overrides, undefined);\n        }\n        updateValue(key, value, arg3, arg4) {\n            return Promise.reject(new Error('not supported'));\n        }\n        inspect(key) {\n            return this.configuration.inspect(key, {}, undefined);\n        }\n        keys() {\n            return this.configuration.keys(undefined);\n        }\n        reloadConfiguration(folder) {\n            return folder ? Promise.resolve(undefined) :\n                this.userConfiguration.reload().then(userConfigurationModel => this.onDidChangeUserConfiguration(userConfigurationModel));\n        }\n        onDidChangeUserConfiguration(userConfigurationModel) {\n            const { added, updated, removed } = configuration_1.compare(this._configuration.localUserConfiguration, userConfigurationModel);\n            const changedKeys = [...added, ...updated, ...removed];\n            if (changedKeys.length) {\n                this._configuration.updateLocalUserConfiguration(userConfigurationModel);\n                this.trigger(changedKeys, configuration_1.ConfigurationTarget.USER);\n            }\n        }\n        onDidDefaultConfigurationChange(keys) {\n            this._configuration.updateDefaultConfiguration(new configurationModels_1.DefaultConfigurationModel());\n            this.trigger(keys, configuration_1.ConfigurationTarget.DEFAULT);\n        }\n        trigger(keys, source) {\n            this._onDidChangeConfiguration.fire(new configurationModels_1.ConfigurationChangeEvent().change(keys).telemetryData(source, this.getTargetConfiguration(source)));\n        }\n        getTargetConfiguration(target) {\n            switch (target) {\n                case configuration_1.ConfigurationTarget.DEFAULT:\n                    return this._configuration.defaults.contents;\n                case configuration_1.ConfigurationTarget.USER:\n                    return this._configuration.localUserConfiguration.contents;\n            }\n            return {};\n        }\n    };\n    ConfigurationService = __decorate([\n        __param(0, environment_1.IEnvironmentService)\n    ], ConfigurationService);\n    exports.ConfigurationService = ConfigurationService;\n});\n",null]}