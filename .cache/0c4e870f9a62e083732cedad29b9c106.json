{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/platform.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/platform.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os = require(\"os\");\nvar platform = require(\"vs/base/common/platform\");\nvar browser = require(\"vs/base/browser/browser\");\n// tslint:disable no-any to override const\n// Use en instead of en-US since that's vscode default and it uses\n// that to determine whether to output aliases which will be redundant.\nif (platform.locale === \"en-US\") {\n    platform.locale = \"en\";\n}\nif (platform.language === \"en-US\") {\n    platform.language = \"en\";\n}\n// Use the server's platform instead of the client's. For example, this affects\n// how VS Code handles paths (and more) because different platforms give\n// different results. We'll have to counter for things that shouldn't change,\n// like keybindings.\nplatform.isLinux = os.platform() === \"linux\";\nplatform.isWindows = os.platform() === \"win32\";\nplatform.isMacintosh = os.platform() === \"darwin\";\nplatform.platform = os.platform() === \"linux\" ? platform.Platform.Linux : os.platform() === \"win32\" ? platform.Platform.Windows : platform.Platform.Mac;\n// This is used for keybindings, and in one place to choose between \\r\\n and \\n\n// (which we change to use platform.isWindows instead).\nplatform.OS = (browser.isMacintosh ? platform.OperatingSystem.Macintosh : (browser.isWindows ? platform.OperatingSystem.Windows : platform.OperatingSystem.Linux));\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/platform.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/platform.ts"],"names":[],"mappings":";;AAAA,uBAAyB;AACzB,kDAAoD;AACpD,iDAAmD;AAEnD,0CAA0C;AAE1C,kEAAkE;AAClE,uEAAuE;AACvE,IAAI,QAAQ,CAAC,MAAM,KAAK,OAAO,EAAE;IAC/B,QAAgB,CAAC,MAAM,GAAG,IAAI,CAAC;CAChC;AACD,IAAI,QAAQ,CAAC,QAAQ,KAAK,OAAO,EAAE;IACjC,QAAgB,CAAC,QAAQ,GAAG,IAAI,CAAC;CAClC;AAED,+EAA+E;AAC/E,wEAAwE;AACxE,6EAA6E;AAC7E,oBAAoB;AACnB,QAAgB,CAAC,OAAO,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC;AACrD,QAAgB,CAAC,SAAS,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC;AACvD,QAAgB,CAAC,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,QAAQ,CAAC;AAC1D,QAAgB,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;AAEjK,+EAA+E;AAC/E,uDAAuD;AACtD,QAAgB,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC","sourcesContent":["import * as os from \"os\";\nimport * as platform from \"vs/base/common/platform\";\nimport * as browser from \"vs/base/browser/browser\";\n\n// tslint:disable no-any to override const\n\n// Use en instead of en-US since that's vscode default and it uses\n// that to determine whether to output aliases which will be redundant.\nif (platform.locale === \"en-US\") {\n\t(platform as any).locale = \"en\";\n}\nif (platform.language === \"en-US\") {\n\t(platform as any).language = \"en\";\n}\n\n// Use the server's platform instead of the client's. For example, this affects\n// how VS Code handles paths (and more) because different platforms give\n// different results. We'll have to counter for things that shouldn't change,\n// like keybindings.\n(platform as any).isLinux = os.platform() === \"linux\";\n(platform as any).isWindows = os.platform() === \"win32\";\n(platform as any).isMacintosh = os.platform() === \"darwin\";\n(platform as any).platform = os.platform() === \"linux\" ? platform.Platform.Linux : os.platform() === \"win32\" ? platform.Platform.Windows : platform.Platform.Mac;\n\n// This is used for keybindings, and in one place to choose between \\r\\n and \\n\n// (which we change to use platform.isWindows instead).\n(platform as any).OS = (browser.isMacintosh ? platform.OperatingSystem.Macintosh : (browser.isWindows ? platform.OperatingSystem.Windows : platform.OperatingSystem.Linux));\n"]}]}