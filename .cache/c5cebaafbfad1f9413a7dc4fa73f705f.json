{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalTab.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalTab.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar aria = require(\"vs/base/browser/ui/aria/aria\");\nvar nls = require(\"vs/nls\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar splitview_1 = require(\"vs/base/browser/ui/splitview/splitview\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar SPLIT_PANE_MIN_SIZE = 120;\nvar TERMINAL_MIN_USEFUL_SIZE = 250;\nvar SplitPaneContainer = /** @class */ (function () {\n    function SplitPaneContainer(_container, orientation) {\n        this._container = _container;\n        this.orientation = orientation;\n        this._children = [];\n        this._onDidChange = event_1.Event.None;\n        this._width = this._container.offsetWidth;\n        this._height = this._container.offsetHeight;\n        this._createSplitView();\n        this._splitView.layout(this.orientation === splitview_1.Orientation.HORIZONTAL ? this._width : this._height);\n    }\n    Object.defineProperty(SplitPaneContainer.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange; },\n        enumerable: true,\n        configurable: true\n    });\n    SplitPaneContainer.prototype._createSplitView = function () {\n        var _this = this;\n        this._splitView = new splitview_1.SplitView(this._container, { orientation: this.orientation });\n        this._splitViewDisposables = [];\n        this._splitViewDisposables.push(this._splitView.onDidSashReset(function () { return _this._splitView.distributeViewSizes(); }));\n    };\n    SplitPaneContainer.prototype.split = function (instance, index) {\n        if (index === void 0) { index = this._children.length; }\n        this._addChild(instance, index);\n    };\n    SplitPaneContainer.prototype.resizePane = function (index, direction, amount) {\n        // TODO: Should resize pane up/down resize the panel?\n        // Only resize the correct dimension\n        var isHorizontal = direction === terminal_1.Direction.Left || direction === terminal_1.Direction.Right;\n        if (isHorizontal && this.orientation !== splitview_1.Orientation.HORIZONTAL ||\n            !isHorizontal && this.orientation !== splitview_1.Orientation.VERTICAL) {\n            return;\n        }\n        // Only resize when there is mor ethan one pane\n        if (this._children.length <= 1) {\n            return;\n        }\n        // Get sizes\n        var sizes = [];\n        for (var i = 0; i < this._splitView.length; i++) {\n            sizes.push(this._splitView.getViewSize(i));\n        }\n        // Remove size from right pane, unless index is the last pane in which case use left pane\n        var isSizingEndPane = index !== this._children.length - 1;\n        var indexToChange = isSizingEndPane ? index + 1 : index - 1;\n        if (isSizingEndPane && direction === terminal_1.Direction.Left) {\n            amount *= -1;\n        }\n        else if (!isSizingEndPane && direction === terminal_1.Direction.Right) {\n            amount *= -1;\n        }\n        else if (isSizingEndPane && direction === terminal_1.Direction.Up) {\n            amount *= -1;\n        }\n        else if (!isSizingEndPane && direction === terminal_1.Direction.Down) {\n            amount *= -1;\n        }\n        // Ensure the size is not reduced beyond the minimum, otherwise weird things can happen\n        if (sizes[index] + amount < SPLIT_PANE_MIN_SIZE) {\n            amount = SPLIT_PANE_MIN_SIZE - sizes[index];\n        }\n        else if (sizes[indexToChange] - amount < SPLIT_PANE_MIN_SIZE) {\n            amount = sizes[indexToChange] - SPLIT_PANE_MIN_SIZE;\n        }\n        // Apply the size change\n        sizes[index] += amount;\n        sizes[indexToChange] -= amount;\n        for (var i = 0; i < this._splitView.length - 1; i++) {\n            this._splitView.resizeView(i, sizes[i]);\n        }\n    };\n    SplitPaneContainer.prototype._addChild = function (instance, index) {\n        var _this = this;\n        var child = new SplitPane(instance, this.orientation === splitview_1.Orientation.HORIZONTAL ? this._height : this._width);\n        child.orientation = this.orientation;\n        if (typeof index === 'number') {\n            this._children.splice(index, 0, child);\n        }\n        else {\n            this._children.push(child);\n        }\n        this._withDisabledLayout(function () { return _this._splitView.addView(child, splitview_1.Sizing.Distribute, index); });\n        this._onDidChange = event_1.Event.any.apply(event_1.Event, this._children.map(function (c) { return c.onDidChange; }));\n    };\n    SplitPaneContainer.prototype.remove = function (instance) {\n        var index = null;\n        for (var i = 0; i < this._children.length; i++) {\n            if (this._children[i].instance === instance) {\n                index = i;\n            }\n        }\n        if (index !== null) {\n            this._children.splice(index, 1);\n            this._splitView.removeView(index, splitview_1.Sizing.Distribute);\n        }\n    };\n    SplitPaneContainer.prototype.layout = function (width, height) {\n        this._width = width;\n        this._height = height;\n        if (this.orientation === splitview_1.Orientation.HORIZONTAL) {\n            this._children.forEach(function (c) { return c.orthogonalLayout(height); });\n            this._splitView.layout(width);\n        }\n        else {\n            this._children.forEach(function (c) { return c.orthogonalLayout(width); });\n            this._splitView.layout(height);\n        }\n    };\n    SplitPaneContainer.prototype.setOrientation = function (orientation) {\n        var _this = this;\n        if (this.orientation === orientation) {\n            return;\n        }\n        this.orientation = orientation;\n        // Remove old split view\n        while (this._container.children.length > 0) {\n            this._container.removeChild(this._container.children[0]);\n        }\n        this._splitViewDisposables.forEach(function (d) { return d.dispose(); });\n        this._splitViewDisposables = [];\n        this._splitView.dispose();\n        // Create new split view with updated orientation\n        this._createSplitView();\n        this._withDisabledLayout(function () {\n            _this._children.forEach(function (child) {\n                child.orientation = orientation;\n                _this._splitView.addView(child, 1);\n            });\n        });\n    };\n    SplitPaneContainer.prototype._withDisabledLayout = function (innerFunction) {\n        // Whenever manipulating views that are going to be changed immediately, disabling\n        // layout/resize events in the terminal prevent bad dimensions going to the pty.\n        this._children.forEach(function (c) { return c.instance.disableLayout = true; });\n        innerFunction();\n        this._children.forEach(function (c) { return c.instance.disableLayout = false; });\n    };\n    return SplitPaneContainer;\n}());\nvar SplitPane = /** @class */ (function () {\n    function SplitPane(instance, orthogonalSize) {\n        this.instance = instance;\n        this.orthogonalSize = orthogonalSize;\n        this.minimumSize = SPLIT_PANE_MIN_SIZE;\n        this.maximumSize = Number.MAX_VALUE;\n        this._onDidChange = event_1.Event.None;\n        this.element = document.createElement('div');\n        this.element.className = 'terminal-split-pane';\n        this.instance.attachToElement(this.element);\n    }\n    Object.defineProperty(SplitPane.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange; },\n        enumerable: true,\n        configurable: true\n    });\n    SplitPane.prototype.layout = function (size) {\n        // Only layout when both sizes are known\n        this._size = size;\n        if (!this._size || !this.orthogonalSize) {\n            return;\n        }\n        if (this.orientation === splitview_1.Orientation.VERTICAL) {\n            this.instance.layout({ width: this.orthogonalSize, height: this._size });\n        }\n        else {\n            this.instance.layout({ width: this._size, height: this.orthogonalSize });\n        }\n    };\n    SplitPane.prototype.orthogonalLayout = function (size) {\n        this.orthogonalSize = size;\n    };\n    return SplitPane;\n}());\nvar TerminalTab = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalTab, _super);\n    function TerminalTab(terminalFocusContextKey, configHelper, _container, shellLaunchConfig, _terminalService, _layoutService) {\n        var _this = _super.call(this) || this;\n        _this._container = _container;\n        _this._terminalService = _terminalService;\n        _this._layoutService = _layoutService;\n        _this._terminalInstances = [];\n        _this._panelPosition = layoutService_1.Position.BOTTOM;\n        _this._onDisposed = new event_1.Emitter();\n        _this._onInstancesChanged = new event_1.Emitter();\n        var instance = _this._terminalService.createInstance(terminalFocusContextKey, configHelper, undefined, shellLaunchConfig, true);\n        _this._terminalInstances.push(instance);\n        _this._initInstanceListeners(instance);\n        _this._activeInstanceIndex = 0;\n        if (_this._container) {\n            _this.attachToElement(_this._container);\n        }\n        return _this;\n    }\n    Object.defineProperty(TerminalTab.prototype, \"terminalInstances\", {\n        get: function () { return this._terminalInstances; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalTab.prototype, \"onDisposed\", {\n        get: function () { return this._onDisposed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalTab.prototype, \"onInstancesChanged\", {\n        get: function () { return this._onInstancesChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalTab.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this._tabElement) {\n            this._container.removeChild(this._tabElement);\n            this._tabElement = null;\n        }\n        this._terminalInstances = [];\n        this._onInstancesChanged.fire();\n    };\n    Object.defineProperty(TerminalTab.prototype, \"activeInstance\", {\n        get: function () {\n            if (this._terminalInstances.length === 0) {\n                return null;\n            }\n            return this._terminalInstances[this._activeInstanceIndex];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalTab.prototype._initInstanceListeners = function (instance) {\n        var _this = this;\n        instance.addDisposable(instance.onDisposed(function (instance) { return _this._onInstanceDisposed(instance); }));\n        instance.addDisposable(instance.onFocused(function (instance) {\n            aria.alert(nls.localize('terminalFocus', \"Terminal {0}\", _this._terminalService.activeTabIndex + 1));\n            _this._setActiveInstance(instance);\n        }));\n    };\n    TerminalTab.prototype._onInstanceDisposed = function (instance) {\n        // Get the index of the instance and remove it from the list\n        var index = this._terminalInstances.indexOf(instance);\n        var wasActiveInstance = instance === this.activeInstance;\n        if (index !== -1) {\n            this._terminalInstances.splice(index, 1);\n        }\n        // Adjust focus if the instance was active\n        if (wasActiveInstance && this._terminalInstances.length > 0) {\n            var newIndex = index < this._terminalInstances.length ? index : this._terminalInstances.length - 1;\n            this.setActiveInstanceByIndex(newIndex);\n            // TODO: Only focus the new instance if the tab had focus?\n            if (this.activeInstance) {\n                this.activeInstance.focus(true);\n            }\n        }\n        // Remove the instance from the split pane if it has been created\n        if (this._splitPaneContainer) {\n            this._splitPaneContainer.remove(instance);\n        }\n        // Fire events and dispose tab if it was the last instance\n        this._onInstancesChanged.fire();\n        if (this._terminalInstances.length === 0) {\n            this._onDisposed.fire(this);\n            this.dispose();\n        }\n    };\n    TerminalTab.prototype._setActiveInstance = function (instance) {\n        this.setActiveInstanceByIndex(this._getIndexFromId(instance.id));\n    };\n    TerminalTab.prototype._getIndexFromId = function (terminalId) {\n        var terminalIndex = -1;\n        this.terminalInstances.forEach(function (terminalInstance, i) {\n            if (terminalInstance.id === terminalId) {\n                terminalIndex = i;\n            }\n        });\n        if (terminalIndex === -1) {\n            throw new Error(\"Terminal with ID \" + terminalId + \" does not exist (has it already been disposed?)\");\n        }\n        return terminalIndex;\n    };\n    TerminalTab.prototype.setActiveInstanceByIndex = function (index) {\n        // Check for invalid value\n        if (index < 0 || index >= this._terminalInstances.length) {\n            return;\n        }\n        var didInstanceChange = this._activeInstanceIndex !== index;\n        this._activeInstanceIndex = index;\n        if (didInstanceChange) {\n            this._onInstancesChanged.fire();\n        }\n    };\n    TerminalTab.prototype.attachToElement = function (element) {\n        var _this = this;\n        this._container = element;\n        this._tabElement = document.createElement('div');\n        this._tabElement.classList.add('terminal-tab');\n        this._container.appendChild(this._tabElement);\n        if (!this._splitPaneContainer) {\n            this._panelPosition = this._layoutService.getPanelPosition();\n            var orientation = this._panelPosition === layoutService_1.Position.BOTTOM ? splitview_1.Orientation.HORIZONTAL : splitview_1.Orientation.VERTICAL;\n            var newLocal = new SplitPaneContainer(this._tabElement, orientation);\n            this._splitPaneContainer = newLocal;\n            this.terminalInstances.forEach(function (instance) { return _this._splitPaneContainer.split(instance); });\n        }\n    };\n    Object.defineProperty(TerminalTab.prototype, \"title\", {\n        get: function () {\n            var title = this.terminalInstances[0].title;\n            for (var i = 1; i < this.terminalInstances.length; i++) {\n                if (this.terminalInstances[i].title) {\n                    title += \", \" + this.terminalInstances[i].title;\n                }\n            }\n            return title;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalTab.prototype.setVisible = function (visible) {\n        if (this._tabElement) {\n            this._tabElement.style.display = visible ? '' : 'none';\n        }\n        this.terminalInstances.forEach(function (i) { return i.setVisible(visible); });\n    };\n    TerminalTab.prototype.split = function (terminalFocusContextKey, configHelper, shellLaunchConfig) {\n        var newTerminalSize = ((this._panelPosition === layoutService_1.Position.BOTTOM ? this._container.clientWidth : this._container.clientHeight) / (this._terminalInstances.length + 1));\n        if (newTerminalSize < TERMINAL_MIN_USEFUL_SIZE) {\n            return undefined;\n        }\n        var instance = this._terminalService.createInstance(terminalFocusContextKey, configHelper, undefined, shellLaunchConfig, true);\n        this._terminalInstances.splice(this._activeInstanceIndex + 1, 0, instance);\n        this._initInstanceListeners(instance);\n        this._setActiveInstance(instance);\n        if (this._splitPaneContainer) {\n            this._splitPaneContainer.split(instance, this._activeInstanceIndex);\n        }\n        return instance;\n    };\n    TerminalTab.prototype.addDisposable = function (disposable) {\n        this._register(disposable);\n    };\n    TerminalTab.prototype.layout = function (width, height) {\n        if (this._splitPaneContainer) {\n            // Check if the panel position changed and rotate panes if so\n            var newPanelPosition = this._layoutService.getPanelPosition();\n            var panelPositionChanged = newPanelPosition !== this._panelPosition;\n            if (panelPositionChanged) {\n                var newOrientation = newPanelPosition === layoutService_1.Position.BOTTOM ? splitview_1.Orientation.HORIZONTAL : splitview_1.Orientation.VERTICAL;\n                this._splitPaneContainer.setOrientation(newOrientation);\n                this._panelPosition = newPanelPosition;\n            }\n            this._splitPaneContainer.layout(width, height);\n        }\n    };\n    TerminalTab.prototype.focusPreviousPane = function () {\n        var newIndex = this._activeInstanceIndex === 0 ? this._terminalInstances.length - 1 : this._activeInstanceIndex - 1;\n        this.setActiveInstanceByIndex(newIndex);\n    };\n    TerminalTab.prototype.focusNextPane = function () {\n        var newIndex = this._activeInstanceIndex === this._terminalInstances.length - 1 ? 0 : this._activeInstanceIndex + 1;\n        this.setActiveInstanceByIndex(newIndex);\n    };\n    TerminalTab.prototype.resizePane = function (direction) {\n        if (!this._splitPaneContainer) {\n            return;\n        }\n        var isHorizontal = (direction === terminal_1.Direction.Left || direction === terminal_1.Direction.Right);\n        var font = this._terminalService.configHelper.getFont();\n        // TODO: Support letter spacing and line height\n        var amount = isHorizontal ? font.charWidth : font.charHeight;\n        if (amount) {\n            this._splitPaneContainer.resizePane(this._activeInstanceIndex, direction, amount);\n        }\n    };\n    TerminalTab = tslib_1.__decorate([\n        tslib_1.__param(4, terminal_1.ITerminalService),\n        tslib_1.__param(5, layoutService_1.IWorkbenchLayoutService)\n    ], TerminalTab);\n    return TerminalTab;\n}(lifecycle_1.Disposable));\nexports.TerminalTab = TerminalTab;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalTab.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalTab.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport * as nls from 'vs/nls';\nimport { ITerminalInstance, IShellLaunchConfig, ITerminalTab, Direction, ITerminalService, ITerminalConfigHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { SplitView, Orientation, IView, Sizing } from 'vs/base/browser/ui/splitview/splitview';\nimport { IWorkbenchLayoutService, Position } from 'vs/workbench/services/layout/browser/layoutService';\n\nconst SPLIT_PANE_MIN_SIZE = 120;\nconst TERMINAL_MIN_USEFUL_SIZE = 250;\n\nclass SplitPaneContainer {\n\tprivate _height: number;\n\tprivate _width: number;\n\tprivate _splitView: SplitView;\n\tprivate _splitViewDisposables: IDisposable[];\n\tprivate _children: SplitPane[] = [];\n\n\n\tprivate _onDidChange: Event<number | undefined> = Event.None;\n\tpublic get onDidChange(): Event<number | undefined> { return this._onDidChange; }\n\n\tconstructor(\n\t\tprivate _container: HTMLElement,\n\t\tpublic orientation: Orientation\n\t) {\n\t\tthis._width = this._container.offsetWidth;\n\t\tthis._height = this._container.offsetHeight;\n\t\tthis._createSplitView();\n\t\tthis._splitView.layout(this.orientation === Orientation.HORIZONTAL ? this._width : this._height);\n\t}\n\n\tprivate _createSplitView(): void {\n\t\tthis._splitView = new SplitView(this._container, { orientation: this.orientation });\n\t\tthis._splitViewDisposables = [];\n\t\tthis._splitViewDisposables.push(this._splitView.onDidSashReset(() => this._splitView.distributeViewSizes()));\n\t}\n\n\tpublic split(instance: ITerminalInstance, index: number = this._children.length): void {\n\t\tthis._addChild(instance, index);\n\t}\n\n\tpublic resizePane(index: number, direction: Direction, amount: number): void {\n\t\t// TODO: Should resize pane up/down resize the panel?\n\n\t\t// Only resize the correct dimension\n\t\tconst isHorizontal = direction === Direction.Left || direction === Direction.Right;\n\t\tif (isHorizontal && this.orientation !== Orientation.HORIZONTAL ||\n\t\t\t!isHorizontal && this.orientation !== Orientation.VERTICAL) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only resize when there is mor ethan one pane\n\t\tif (this._children.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get sizes\n\t\tconst sizes: number[] = [];\n\t\tfor (let i = 0; i < this._splitView.length; i++) {\n\t\t\tsizes.push(this._splitView.getViewSize(i));\n\t\t}\n\n\t\t// Remove size from right pane, unless index is the last pane in which case use left pane\n\t\tconst isSizingEndPane = index !== this._children.length - 1;\n\t\tconst indexToChange = isSizingEndPane ? index + 1 : index - 1;\n\t\tif (isSizingEndPane && direction === Direction.Left) {\n\t\t\tamount *= -1;\n\t\t} else if (!isSizingEndPane && direction === Direction.Right) {\n\t\t\tamount *= -1;\n\t\t} else if (isSizingEndPane && direction === Direction.Up) {\n\t\t\tamount *= -1;\n\t\t} else if (!isSizingEndPane && direction === Direction.Down) {\n\t\t\tamount *= -1;\n\t\t}\n\n\t\t// Ensure the size is not reduced beyond the minimum, otherwise weird things can happen\n\t\tif (sizes[index] + amount < SPLIT_PANE_MIN_SIZE) {\n\t\t\tamount = SPLIT_PANE_MIN_SIZE - sizes[index];\n\t\t} else if (sizes[indexToChange] - amount < SPLIT_PANE_MIN_SIZE) {\n\t\t\tamount = sizes[indexToChange] - SPLIT_PANE_MIN_SIZE;\n\t\t}\n\n\t\t// Apply the size change\n\t\tsizes[index] += amount;\n\t\tsizes[indexToChange] -= amount;\n\t\tfor (let i = 0; i < this._splitView.length - 1; i++) {\n\t\t\tthis._splitView.resizeView(i, sizes[i]);\n\t\t}\n\t}\n\n\tprivate _addChild(instance: ITerminalInstance, index: number): void {\n\t\tconst child = new SplitPane(instance, this.orientation === Orientation.HORIZONTAL ? this._height : this._width);\n\t\tchild.orientation = this.orientation;\n\t\tif (typeof index === 'number') {\n\t\t\tthis._children.splice(index, 0, child);\n\t\t} else {\n\t\t\tthis._children.push(child);\n\t\t}\n\n\t\tthis._withDisabledLayout(() => this._splitView.addView(child, Sizing.Distribute, index));\n\n\t\tthis._onDidChange = Event.any(...this._children.map(c => c.onDidChange));\n\t}\n\n\tpublic remove(instance: ITerminalInstance): void {\n\t\tlet index: number | null = null;\n\t\tfor (let i = 0; i < this._children.length; i++) {\n\t\t\tif (this._children[i].instance === instance) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tif (index !== null) {\n\t\t\tthis._children.splice(index, 1);\n\t\t\tthis._splitView.removeView(index, Sizing.Distribute);\n\t\t}\n\t}\n\n\tpublic layout(width: number, height: number): void {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tif (this.orientation === Orientation.HORIZONTAL) {\n\t\t\tthis._children.forEach(c => c.orthogonalLayout(height));\n\t\t\tthis._splitView.layout(width);\n\t\t} else {\n\t\t\tthis._children.forEach(c => c.orthogonalLayout(width));\n\t\t\tthis._splitView.layout(height);\n\t\t}\n\t}\n\n\tpublic setOrientation(orientation: Orientation): void {\n\t\tif (this.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\t\tthis.orientation = orientation;\n\n\t\t// Remove old split view\n\t\twhile (this._container.children.length > 0) {\n\t\t\tthis._container.removeChild(this._container.children[0]);\n\t\t}\n\t\tthis._splitViewDisposables.forEach(d => d.dispose());\n\t\tthis._splitViewDisposables = [];\n\t\tthis._splitView.dispose();\n\n\t\t// Create new split view with updated orientation\n\t\tthis._createSplitView();\n\t\tthis._withDisabledLayout(() => {\n\t\t\tthis._children.forEach(child => {\n\t\t\t\tchild.orientation = orientation;\n\t\t\t\tthis._splitView.addView(child, 1);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _withDisabledLayout(innerFunction: () => void): void {\n\t\t// Whenever manipulating views that are going to be changed immediately, disabling\n\t\t// layout/resize events in the terminal prevent bad dimensions going to the pty.\n\t\tthis._children.forEach(c => c.instance.disableLayout = true);\n\t\tinnerFunction();\n\t\tthis._children.forEach(c => c.instance.disableLayout = false);\n\t}\n}\n\nclass SplitPane implements IView {\n\tpublic minimumSize: number = SPLIT_PANE_MIN_SIZE;\n\tpublic maximumSize: number = Number.MAX_VALUE;\n\n\tpublic orientation: Orientation | undefined;\n\tprotected _size: number;\n\n\tprivate _onDidChange: Event<number | undefined> = Event.None;\n\tpublic get onDidChange(): Event<number | undefined> { return this._onDidChange; }\n\n\treadonly element: HTMLElement;\n\n\tconstructor(\n\t\treadonly instance: ITerminalInstance,\n\t\tpublic orthogonalSize: number\n\t) {\n\t\tthis.element = document.createElement('div');\n\t\tthis.element.className = 'terminal-split-pane';\n\t\tthis.instance.attachToElement(this.element);\n\t}\n\n\tpublic layout(size: number): void {\n\t\t// Only layout when both sizes are known\n\t\tthis._size = size;\n\t\tif (!this._size || !this.orthogonalSize) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tthis.instance.layout({ width: this.orthogonalSize, height: this._size });\n\t\t} else {\n\t\t\tthis.instance.layout({ width: this._size, height: this.orthogonalSize });\n\t\t}\n\t}\n\n\tpublic orthogonalLayout(size: number): void {\n\t\tthis.orthogonalSize = size;\n\t}\n}\n\nexport class TerminalTab extends Disposable implements ITerminalTab {\n\tprivate _terminalInstances: ITerminalInstance[] = [];\n\tprivate _splitPaneContainer: SplitPaneContainer | undefined;\n\tprivate _tabElement: HTMLElement | null;\n\tprivate _panelPosition: Position = Position.BOTTOM;\n\n\tprivate _activeInstanceIndex: number;\n\n\tpublic get terminalInstances(): ITerminalInstance[] { return this._terminalInstances; }\n\n\tprivate readonly _onDisposed: Emitter<ITerminalTab>;\n\tpublic get onDisposed(): Event<ITerminalTab> { return this._onDisposed.event; }\n\tprivate readonly _onInstancesChanged: Emitter<void>;\n\tpublic get onInstancesChanged(): Event<void> { return this._onInstancesChanged.event; }\n\n\tconstructor(\n\t\tterminalFocusContextKey: IContextKey<boolean>,\n\t\tconfigHelper: ITerminalConfigHelper,\n\t\tprivate _container: HTMLElement,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IWorkbenchLayoutService private readonly _layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper();\n\t\tthis._onDisposed = new Emitter<ITerminalTab>();\n\t\tthis._onInstancesChanged = new Emitter<void>();\n\n\t\tconst instance = this._terminalService.createInstance(\n\t\t\tterminalFocusContextKey,\n\t\t\tconfigHelper,\n\t\t\tundefined,\n\t\t\tshellLaunchConfig,\n\t\t\ttrue);\n\t\tthis._terminalInstances.push(instance);\n\t\tthis._initInstanceListeners(instance);\n\t\tthis._activeInstanceIndex = 0;\n\n\t\tif (this._container) {\n\t\t\tthis.attachToElement(this._container);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tif (this._tabElement) {\n\t\t\tthis._container.removeChild(this._tabElement);\n\t\t\tthis._tabElement = null;\n\t\t}\n\t\tthis._terminalInstances = [];\n\t\tthis._onInstancesChanged.fire();\n\t}\n\n\tpublic get activeInstance(): ITerminalInstance | null {\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._terminalInstances[this._activeInstanceIndex];\n\t}\n\n\tprivate _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tinstance.addDisposable(instance.onDisposed(instance => this._onInstanceDisposed(instance)));\n\t\tinstance.addDisposable(instance.onFocused(instance => {\n\t\t\taria.alert(nls.localize('terminalFocus', \"Terminal {0}\", this._terminalService.activeTabIndex + 1));\n\t\t\tthis._setActiveInstance(instance);\n\t\t}));\n\t}\n\n\tprivate _onInstanceDisposed(instance: ITerminalInstance): void {\n\t\t// Get the index of the instance and remove it from the list\n\t\tconst index = this._terminalInstances.indexOf(instance);\n\t\tconst wasActiveInstance = instance === this.activeInstance;\n\t\tif (index !== -1) {\n\t\t\tthis._terminalInstances.splice(index, 1);\n\t\t}\n\n\t\t// Adjust focus if the instance was active\n\t\tif (wasActiveInstance && this._terminalInstances.length > 0) {\n\t\t\tconst newIndex = index < this._terminalInstances.length ? index : this._terminalInstances.length - 1;\n\t\t\tthis.setActiveInstanceByIndex(newIndex);\n\t\t\t// TODO: Only focus the new instance if the tab had focus?\n\t\t\tif (this.activeInstance) {\n\t\t\t\tthis.activeInstance.focus(true);\n\t\t\t}\n\t\t}\n\n\t\t// Remove the instance from the split pane if it has been created\n\t\tif (this._splitPaneContainer) {\n\t\t\tthis._splitPaneContainer.remove(instance);\n\t\t}\n\n\t\t// Fire events and dispose tab if it was the last instance\n\t\tthis._onInstancesChanged.fire();\n\t\tif (this._terminalInstances.length === 0) {\n\t\t\tthis._onDisposed.fire(this);\n\t\t\tthis.dispose();\n\t\t}\n\t}\n\n\tprivate _setActiveInstance(instance: ITerminalInstance): void {\n\t\tthis.setActiveInstanceByIndex(this._getIndexFromId(instance.id));\n\t}\n\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.terminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.id === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tpublic setActiveInstanceByIndex(index: number): void {\n\t\t// Check for invalid value\n\t\tif (index < 0 || index >= this._terminalInstances.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst didInstanceChange = this._activeInstanceIndex !== index;\n\t\tthis._activeInstanceIndex = index;\n\n\t\tif (didInstanceChange) {\n\t\t\tthis._onInstancesChanged.fire();\n\t\t}\n\t}\n\n\tpublic attachToElement(element: HTMLElement): void {\n\t\tthis._container = element;\n\t\tthis._tabElement = document.createElement('div');\n\t\tthis._tabElement.classList.add('terminal-tab');\n\t\tthis._container.appendChild(this._tabElement);\n\t\tif (!this._splitPaneContainer) {\n\t\t\tthis._panelPosition = this._layoutService.getPanelPosition();\n\t\t\tconst orientation = this._panelPosition === Position.BOTTOM ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\t\tconst newLocal = new SplitPaneContainer(this._tabElement, orientation);\n\t\t\tthis._splitPaneContainer = newLocal;\n\t\t\tthis.terminalInstances.forEach(instance => this._splitPaneContainer!.split(instance));\n\t\t}\n\t}\n\n\tpublic get title(): string {\n\t\tlet title = this.terminalInstances[0].title;\n\t\tfor (let i = 1; i < this.terminalInstances.length; i++) {\n\t\t\tif (this.terminalInstances[i].title) {\n\t\t\t\ttitle += `, ${this.terminalInstances[i].title}`;\n\t\t\t}\n\t\t}\n\t\treturn title;\n\t}\n\n\tpublic setVisible(visible: boolean): void {\n\t\tif (this._tabElement) {\n\t\t\tthis._tabElement.style.display = visible ? '' : 'none';\n\t\t}\n\t\tthis.terminalInstances.forEach(i => i.setVisible(visible));\n\t}\n\n\tpublic split(\n\t\tterminalFocusContextKey: IContextKey<boolean>,\n\t\tconfigHelper: ITerminalConfigHelper,\n\t\tshellLaunchConfig: IShellLaunchConfig\n\t): ITerminalInstance | undefined {\n\t\tconst newTerminalSize = ((this._panelPosition === Position.BOTTOM ? this._container.clientWidth : this._container.clientHeight) / (this._terminalInstances.length + 1));\n\t\tif (newTerminalSize < TERMINAL_MIN_USEFUL_SIZE) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst instance = this._terminalService.createInstance(\n\t\t\tterminalFocusContextKey,\n\t\t\tconfigHelper,\n\t\t\tundefined,\n\t\t\tshellLaunchConfig,\n\t\t\ttrue);\n\t\tthis._terminalInstances.splice(this._activeInstanceIndex + 1, 0, instance);\n\t\tthis._initInstanceListeners(instance);\n\t\tthis._setActiveInstance(instance);\n\n\t\tif (this._splitPaneContainer) {\n\t\t\tthis._splitPaneContainer.split(instance, this._activeInstanceIndex);\n\t\t}\n\n\t\treturn instance;\n\t}\n\n\tpublic addDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n\n\tpublic layout(width: number, height: number): void {\n\t\tif (this._splitPaneContainer) {\n\t\t\t// Check if the panel position changed and rotate panes if so\n\t\t\tconst newPanelPosition = this._layoutService.getPanelPosition();\n\t\t\tconst panelPositionChanged = newPanelPosition !== this._panelPosition;\n\t\t\tif (panelPositionChanged) {\n\t\t\t\tconst newOrientation = newPanelPosition === Position.BOTTOM ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n\t\t\t\tthis._splitPaneContainer.setOrientation(newOrientation);\n\t\t\t\tthis._panelPosition = newPanelPosition;\n\t\t\t}\n\n\t\t\tthis._splitPaneContainer.layout(width, height);\n\t\t}\n\t}\n\n\tpublic focusPreviousPane(): void {\n\t\tconst newIndex = this._activeInstanceIndex === 0 ? this._terminalInstances.length - 1 : this._activeInstanceIndex - 1;\n\t\tthis.setActiveInstanceByIndex(newIndex);\n\t}\n\n\tpublic focusNextPane(): void {\n\t\tconst newIndex = this._activeInstanceIndex === this._terminalInstances.length - 1 ? 0 : this._activeInstanceIndex + 1;\n\t\tthis.setActiveInstanceByIndex(newIndex);\n\t}\n\n\tpublic resizePane(direction: Direction): void {\n\t\tif (!this._splitPaneContainer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isHorizontal = (direction === Direction.Left || direction === Direction.Right);\n\t\tconst font = this._terminalService.configHelper.getFont();\n\t\t// TODO: Support letter spacing and line height\n\t\tconst amount = isHorizontal ? font.charWidth : font.charHeight;\n\t\tif (amount) {\n\t\t\tthis._splitPaneContainer.resizePane(this._activeInstanceIndex, direction, amount);\n\t\t}\n\t}\n}\n"]}]}