{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar RestrictedRenderingContext = /** @class */ (function () {\n    function RestrictedRenderingContext(viewLayout, viewportData) {\n        this._viewLayout = viewLayout;\n        this.viewportData = viewportData;\n        this.scrollWidth = this._viewLayout.getScrollWidth();\n        this.scrollHeight = this._viewLayout.getScrollHeight();\n        this.visibleRange = this.viewportData.visibleRange;\n        this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n        var vInfo = this._viewLayout.getCurrentViewport();\n        this.scrollTop = vInfo.top;\n        this.scrollLeft = vInfo.left;\n        this.viewportWidth = vInfo.width;\n        this.viewportHeight = vInfo.height;\n    }\n    RestrictedRenderingContext.prototype.getScrolledTopFromAbsoluteTop = function (absoluteTop) {\n        return absoluteTop - this.scrollTop;\n    };\n    RestrictedRenderingContext.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n        return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    };\n    RestrictedRenderingContext.prototype.getDecorationsInViewport = function () {\n        return this.viewportData.getDecorationsInViewport();\n    };\n    return RestrictedRenderingContext;\n}());\nexports.RestrictedRenderingContext = RestrictedRenderingContext;\nvar RenderingContext = /** @class */ (function (_super) {\n    tslib_1.__extends(RenderingContext, _super);\n    function RenderingContext(viewLayout, viewportData, viewLines) {\n        var _this = _super.call(this, viewLayout, viewportData) || this;\n        _this._viewLines = viewLines;\n        return _this;\n    }\n    RenderingContext.prototype.linesVisibleRangesForRange = function (range, includeNewLines) {\n        return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n    };\n    RenderingContext.prototype.visibleRangeForPosition = function (position) {\n        return this._viewLines.visibleRangeForPosition(position);\n    };\n    return RenderingContext;\n}(RestrictedRenderingContext));\nexports.RenderingContext = RenderingContext;\nvar LineVisibleRanges = /** @class */ (function () {\n    function LineVisibleRanges(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n    return LineVisibleRanges;\n}());\nexports.LineVisibleRanges = LineVisibleRanges;\nvar HorizontalRange = /** @class */ (function () {\n    function HorizontalRange(left, width) {\n        this.left = Math.round(left);\n        this.width = Math.round(width);\n    }\n    HorizontalRange.prototype.toString = function () {\n        return \"[\" + this.left + \",\" + this.width + \"]\";\n    };\n    return HorizontalRange;\n}());\nexports.HorizontalRange = HorizontalRange;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAYhG;IAmBC,oCAAY,UAAuB,EAAE,YAA0B;QAC9D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;QAEvD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;QAEzD,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC;IACpC,CAAC;IAEM,kEAA6B,GAApC,UAAqC,WAAmB;QACvD,OAAO,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;IACrC,CAAC;IAEM,mEAA8B,GAArC,UAAsC,UAAkB;QACvD,OAAO,IAAI,CAAC,WAAW,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;IACpE,CAAC;IAEM,6DAAwB,GAA/B;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,wBAAwB,EAAE,CAAC;IACrD,CAAC;IAEF,iCAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDqB,gEAA0B;AAkDhD;IAAsC,4CAA0B;IAK/D,0BAAY,UAAuB,EAAE,YAA0B,EAAE,SAAqB;QAAtF,YACC,kBAAM,UAAU,EAAE,YAAY,CAAC,SAE/B;QADA,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC;;IAC7B,CAAC;IAEM,qDAA0B,GAAjC,UAAkC,KAAY,EAAE,eAAwB;QACvE,OAAO,IAAI,CAAC,UAAU,CAAC,0BAA0B,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IAEM,kDAAuB,GAA9B,UAA+B,QAAkB;QAChD,OAAO,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;IACF,uBAAC;AAAD,CAAC,AAjBD,CAAsC,0BAA0B,GAiB/D;AAjBY,4CAAgB;AAmB7B;IAMC,2BAAY,UAAkB,EAAE,MAAyB;QACxD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IACF,wBAAC;AAAD,CAAC,AAVD,IAUC;AAVY,8CAAiB;AAY9B;IAMC,yBAAY,IAAY,EAAE,KAAa;QACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,kCAAQ,GAAf;QACC,OAAO,MAAI,IAAI,CAAC,IAAI,SAAI,IAAI,CAAC,KAAK,MAAG,CAAC;IACvC,CAAC;IACF,sBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { IViewLayout, ViewModelDecoration } from 'vs/editor/common/viewModel/viewModel';\n\nexport interface IViewLines {\n\tlinesVisibleRangesForRange(range: Range, includeNewLines: boolean): LineVisibleRanges[] | null;\n\tvisibleRangeForPosition(position: Position): HorizontalRange | null;\n}\n\nexport abstract class RestrictedRenderingContext {\n\t_restrictedRenderingContextBrand: void;\n\n\tpublic readonly viewportData: ViewportData;\n\n\tpublic readonly scrollWidth: number;\n\tpublic readonly scrollHeight: number;\n\n\tpublic readonly visibleRange: Range;\n\tpublic readonly bigNumbersDelta: number;\n\n\tpublic readonly scrollTop: number;\n\tpublic readonly scrollLeft: number;\n\n\tpublic readonly viewportWidth: number;\n\tpublic readonly viewportHeight: number;\n\n\tprivate readonly _viewLayout: IViewLayout;\n\n\tconstructor(viewLayout: IViewLayout, viewportData: ViewportData) {\n\t\tthis._viewLayout = viewLayout;\n\t\tthis.viewportData = viewportData;\n\n\t\tthis.scrollWidth = this._viewLayout.getScrollWidth();\n\t\tthis.scrollHeight = this._viewLayout.getScrollHeight();\n\n\t\tthis.visibleRange = this.viewportData.visibleRange;\n\t\tthis.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n\n\t\tconst vInfo = this._viewLayout.getCurrentViewport();\n\t\tthis.scrollTop = vInfo.top;\n\t\tthis.scrollLeft = vInfo.left;\n\t\tthis.viewportWidth = vInfo.width;\n\t\tthis.viewportHeight = vInfo.height;\n\t}\n\n\tpublic getScrolledTopFromAbsoluteTop(absoluteTop: number): number {\n\t\treturn absoluteTop - this.scrollTop;\n\t}\n\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\treturn this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n\t}\n\n\tpublic getDecorationsInViewport(): ViewModelDecoration[] {\n\t\treturn this.viewportData.getDecorationsInViewport();\n\t}\n\n}\n\nexport class RenderingContext extends RestrictedRenderingContext {\n\t_renderingContextBrand: void;\n\n\tprivate readonly _viewLines: IViewLines;\n\n\tconstructor(viewLayout: IViewLayout, viewportData: ViewportData, viewLines: IViewLines) {\n\t\tsuper(viewLayout, viewportData);\n\t\tthis._viewLines = viewLines;\n\t}\n\n\tpublic linesVisibleRangesForRange(range: Range, includeNewLines: boolean): LineVisibleRanges[] | null {\n\t\treturn this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n\t}\n\n\tpublic visibleRangeForPosition(position: Position): HorizontalRange | null {\n\t\treturn this._viewLines.visibleRangeForPosition(position);\n\t}\n}\n\nexport class LineVisibleRanges {\n\t_lineVisibleRangesBrand: void;\n\n\tpublic lineNumber: number;\n\tpublic ranges: HorizontalRange[];\n\n\tconstructor(lineNumber: number, ranges: HorizontalRange[]) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.ranges = ranges;\n\t}\n}\n\nexport class HorizontalRange {\n\t_horizontalRangeBrand: void;\n\n\tpublic left: number;\n\tpublic width: number;\n\n\tconstructor(left: number, width: number) {\n\t\tthis.left = Math.round(left);\n\t\tthis.width = Math.round(width);\n\t}\n\n\tpublic toString(): string {\n\t\treturn `[${this.left},${this.width}]`;\n\t}\n}\n"]}]}