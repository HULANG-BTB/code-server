{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/range.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/range.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/position\"], function (require, exports, position_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n     */\n    class Range {\n        constructor(startLineNumber, startColumn, endLineNumber, endColumn) {\n            if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\n                this.startLineNumber = endLineNumber;\n                this.startColumn = endColumn;\n                this.endLineNumber = startLineNumber;\n                this.endColumn = startColumn;\n            }\n            else {\n                this.startLineNumber = startLineNumber;\n                this.startColumn = startColumn;\n                this.endLineNumber = endLineNumber;\n                this.endColumn = endColumn;\n            }\n        }\n        /**\n         * Test if this range is empty.\n         */\n        isEmpty() {\n            return Range.isEmpty(this);\n        }\n        /**\n         * Test if `range` is empty.\n         */\n        static isEmpty(range) {\n            return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\n        }\n        /**\n         * Test if position is in this range. If the position is at the edges, will return true.\n         */\n        containsPosition(position) {\n            return Range.containsPosition(this, position);\n        }\n        /**\n         * Test if `position` is in `range`. If the position is at the edges, will return true.\n         */\n        static containsPosition(range, position) {\n            if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\n                return false;\n            }\n            if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\n                return false;\n            }\n            if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\n                return false;\n            }\n            return true;\n        }\n        /**\n         * Test if range is in this range. If the range is equal to this range, will return true.\n         */\n        containsRange(range) {\n            return Range.containsRange(this, range);\n        }\n        /**\n         * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n         */\n        static containsRange(range, otherRange) {\n            if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\n                return false;\n            }\n            if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\n                return false;\n            }\n            if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\n                return false;\n            }\n            if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\n                return false;\n            }\n            return true;\n        }\n        /**\n         * A reunion of the two ranges.\n         * The smallest position will be used as the start point, and the largest one as the end point.\n         */\n        plusRange(range) {\n            return Range.plusRange(this, range);\n        }\n        /**\n         * A reunion of the two ranges.\n         * The smallest position will be used as the start point, and the largest one as the end point.\n         */\n        static plusRange(a, b) {\n            let startLineNumber;\n            let startColumn;\n            let endLineNumber;\n            let endColumn;\n            if (b.startLineNumber < a.startLineNumber) {\n                startLineNumber = b.startLineNumber;\n                startColumn = b.startColumn;\n            }\n            else if (b.startLineNumber === a.startLineNumber) {\n                startLineNumber = b.startLineNumber;\n                startColumn = Math.min(b.startColumn, a.startColumn);\n            }\n            else {\n                startLineNumber = a.startLineNumber;\n                startColumn = a.startColumn;\n            }\n            if (b.endLineNumber > a.endLineNumber) {\n                endLineNumber = b.endLineNumber;\n                endColumn = b.endColumn;\n            }\n            else if (b.endLineNumber === a.endLineNumber) {\n                endLineNumber = b.endLineNumber;\n                endColumn = Math.max(b.endColumn, a.endColumn);\n            }\n            else {\n                endLineNumber = a.endLineNumber;\n                endColumn = a.endColumn;\n            }\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        /**\n         * A intersection of the two ranges.\n         */\n        intersectRanges(range) {\n            return Range.intersectRanges(this, range);\n        }\n        /**\n         * A intersection of the two ranges.\n         */\n        static intersectRanges(a, b) {\n            let resultStartLineNumber = a.startLineNumber;\n            let resultStartColumn = a.startColumn;\n            let resultEndLineNumber = a.endLineNumber;\n            let resultEndColumn = a.endColumn;\n            let otherStartLineNumber = b.startLineNumber;\n            let otherStartColumn = b.startColumn;\n            let otherEndLineNumber = b.endLineNumber;\n            let otherEndColumn = b.endColumn;\n            if (resultStartLineNumber < otherStartLineNumber) {\n                resultStartLineNumber = otherStartLineNumber;\n                resultStartColumn = otherStartColumn;\n            }\n            else if (resultStartLineNumber === otherStartLineNumber) {\n                resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\n            }\n            if (resultEndLineNumber > otherEndLineNumber) {\n                resultEndLineNumber = otherEndLineNumber;\n                resultEndColumn = otherEndColumn;\n            }\n            else if (resultEndLineNumber === otherEndLineNumber) {\n                resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\n            }\n            // Check if selection is now empty\n            if (resultStartLineNumber > resultEndLineNumber) {\n                return null;\n            }\n            if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\n                return null;\n            }\n            return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\n        }\n        /**\n         * Test if this range equals other.\n         */\n        equalsRange(other) {\n            return Range.equalsRange(this, other);\n        }\n        /**\n         * Test if range `a` equals `b`.\n         */\n        static equalsRange(a, b) {\n            return (!!a &&\n                !!b &&\n                a.startLineNumber === b.startLineNumber &&\n                a.startColumn === b.startColumn &&\n                a.endLineNumber === b.endLineNumber &&\n                a.endColumn === b.endColumn);\n        }\n        /**\n         * Return the end position (which will be after or equal to the start position)\n         */\n        getEndPosition() {\n            return new position_1.Position(this.endLineNumber, this.endColumn);\n        }\n        /**\n         * Return the start position (which will be before or equal to the end position)\n         */\n        getStartPosition() {\n            return new position_1.Position(this.startLineNumber, this.startColumn);\n        }\n        /**\n         * Transform to a user presentable string representation.\n         */\n        toString() {\n            return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\n        }\n        /**\n         * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n         */\n        setEndPosition(endLineNumber, endColumn) {\n            return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\n        }\n        /**\n         * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n         */\n        setStartPosition(startLineNumber, startColumn) {\n            return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\n        }\n        /**\n         * Create a new empty range using this range's start position.\n         */\n        collapseToStart() {\n            return Range.collapseToStart(this);\n        }\n        /**\n         * Create a new empty range using this range's start position.\n         */\n        static collapseToStart(range) {\n            return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n        }\n        // ---\n        static fromPositions(start, end = start) {\n            return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n        }\n        static lift(range) {\n            if (!range) {\n                return null;\n            }\n            return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        /**\n         * Test if `obj` is an `IRange`.\n         */\n        static isIRange(obj) {\n            return (obj\n                && (typeof obj.startLineNumber === 'number')\n                && (typeof obj.startColumn === 'number')\n                && (typeof obj.endLineNumber === 'number')\n                && (typeof obj.endColumn === 'number'));\n        }\n        /**\n         * Test if the two ranges are touching in any way.\n         */\n        static areIntersectingOrTouching(a, b) {\n            // Check if `a` is before `b`\n            if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\n                return false;\n            }\n            // Check if `b` is before `a`\n            if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\n                return false;\n            }\n            // These ranges must intersect\n            return true;\n        }\n        /**\n         * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n         */\n        static areIntersecting(a, b) {\n            // Check if `a` is before `b`\n            if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\n                return false;\n            }\n            // Check if `b` is before `a`\n            if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\n                return false;\n            }\n            // These ranges must intersect\n            return true;\n        }\n        /**\n         * A function that compares ranges, useful for sorting ranges\n         * It will first compare ranges on the startPosition and then on the endPosition\n         */\n        static compareRangesUsingStarts(a, b) {\n            if (a && b) {\n                const aStartLineNumber = a.startLineNumber | 0;\n                const bStartLineNumber = b.startLineNumber | 0;\n                if (aStartLineNumber === bStartLineNumber) {\n                    const aStartColumn = a.startColumn | 0;\n                    const bStartColumn = b.startColumn | 0;\n                    if (aStartColumn === bStartColumn) {\n                        const aEndLineNumber = a.endLineNumber | 0;\n                        const bEndLineNumber = b.endLineNumber | 0;\n                        if (aEndLineNumber === bEndLineNumber) {\n                            const aEndColumn = a.endColumn | 0;\n                            const bEndColumn = b.endColumn | 0;\n                            return aEndColumn - bEndColumn;\n                        }\n                        return aEndLineNumber - bEndLineNumber;\n                    }\n                    return aStartColumn - bStartColumn;\n                }\n                return aStartLineNumber - bStartLineNumber;\n            }\n            const aExists = (a ? 1 : 0);\n            const bExists = (b ? 1 : 0);\n            return aExists - bExists;\n        }\n        /**\n         * A function that compares ranges, useful for sorting ranges\n         * It will first compare ranges on the endPosition and then on the startPosition\n         */\n        static compareRangesUsingEnds(a, b) {\n            if (a.endLineNumber === b.endLineNumber) {\n                if (a.endColumn === b.endColumn) {\n                    if (a.startLineNumber === b.startLineNumber) {\n                        return a.startColumn - b.startColumn;\n                    }\n                    return a.startLineNumber - b.startLineNumber;\n                }\n                return a.endColumn - b.endColumn;\n            }\n            return a.endLineNumber - b.endLineNumber;\n        }\n        /**\n         * Test if the range spans multiple lines.\n         */\n        static spansMultipleLines(range) {\n            return range.endLineNumber > range.startLineNumber;\n        }\n    }\n    exports.Range = Range;\n});\n",null]}