{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/colorRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/colorRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform = require(\"vs/platform/registry/common/platform\");\nvar color_1 = require(\"vs/base/common/color\");\nvar event_1 = require(\"vs/base/common/event\");\nvar nls = require(\"vs/nls\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar async_1 = require(\"vs/base/common/async\");\n// color registry\nexports.Extensions = {\n    ColorContribution: 'base.contributions.colors'\n};\nvar ColorRegistry = /** @class */ (function () {\n    function ColorRegistry() {\n        this._onDidChangeSchema = new event_1.Emitter();\n        this.onDidChangeSchema = this._onDidChangeSchema.event;\n        this.colorSchema = { type: 'object', properties: {} };\n        this.colorReferenceSchema = { type: 'string', enum: [], enumDescriptions: [] };\n        this.colorsById = {};\n    }\n    ColorRegistry.prototype.registerColor = function (id, defaults, description, needsTransparency, deprecationMessage) {\n        if (needsTransparency === void 0) { needsTransparency = false; }\n        var colorContribution = { id: id, description: description, defaults: defaults, needsTransparency: needsTransparency, deprecationMessage: deprecationMessage };\n        this.colorsById[id] = colorContribution;\n        var propertySchema = { type: 'string', description: description, format: 'color-hex', default: '#ff0000' };\n        if (deprecationMessage) {\n            propertySchema.deprecationMessage = deprecationMessage;\n        }\n        this.colorSchema.properties[id] = propertySchema;\n        this.colorReferenceSchema.enum.push(id);\n        this.colorReferenceSchema.enumDescriptions.push(description);\n        this._onDidChangeSchema.fire();\n        return id;\n    };\n    ColorRegistry.prototype.deregisterColor = function (id) {\n        delete this.colorsById[id];\n        delete this.colorSchema.properties[id];\n        var index = this.colorReferenceSchema.enum.indexOf(id);\n        if (index !== -1) {\n            this.colorReferenceSchema.enum.splice(index, 1);\n            this.colorReferenceSchema.enumDescriptions.splice(index, 1);\n        }\n        this._onDidChangeSchema.fire();\n    };\n    ColorRegistry.prototype.getColors = function () {\n        var _this = this;\n        return Object.keys(this.colorsById).map(function (id) { return _this.colorsById[id]; });\n    };\n    ColorRegistry.prototype.resolveDefaultColor = function (id, theme) {\n        var colorDesc = this.colorsById[id];\n        if (colorDesc && colorDesc.defaults) {\n            var colorValue = colorDesc.defaults[theme.type];\n            return resolveColorValue(colorValue, theme);\n        }\n        return undefined;\n    };\n    ColorRegistry.prototype.getColorSchema = function () {\n        return this.colorSchema;\n    };\n    ColorRegistry.prototype.getColorReferenceSchema = function () {\n        return this.colorReferenceSchema;\n    };\n    ColorRegistry.prototype.toString = function () {\n        var _this = this;\n        var sorter = function (a, b) {\n            var cat1 = a.indexOf('.') === -1 ? 0 : 1;\n            var cat2 = b.indexOf('.') === -1 ? 0 : 1;\n            if (cat1 !== cat2) {\n                return cat1 - cat2;\n            }\n            return a.localeCompare(b);\n        };\n        return Object.keys(this.colorsById).sort(sorter).map(function (k) { return \"- `\" + k + \"`: \" + _this.colorsById[k].description; }).join('\\n');\n    };\n    return ColorRegistry;\n}());\nvar colorRegistry = new ColorRegistry();\nplatform.Registry.add(exports.Extensions.ColorContribution, colorRegistry);\nfunction registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n    return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\nexports.registerColor = registerColor;\nfunction getColorRegistry() {\n    return colorRegistry;\n}\nexports.getColorRegistry = getColorRegistry;\n// ----- base colors\nexports.foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexports.errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexports.descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(exports.foreground, 0.7), hc: transparent(exports.foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\nexports.focusBorder = registerColor('focusBorder', { dark: color_1.Color.fromHex('#0E639C').transparent(0.8), light: color_1.Color.fromHex('#007ACC').transparent(0.4), hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexports.contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexports.activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: exports.focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexports.selectionBackground = registerColor('selection.background', { light: null, dark: null, hc: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n// ------ text colors\nexports.textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hc: color_1.Color.black }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexports.textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexports.textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexports.textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hc: '#D7BA7D' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexports.textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hc: null }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexports.textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hc: color_1.Color.white }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexports.textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: color_1.Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n// ----- widgets\nexports.widgetShadow = registerColor('widget.shadow', { dark: '#000000', light: '#A8A8A8', hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexports.inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: color_1.Color.white, hc: color_1.Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexports.inputForeground = registerColor('input.foreground', { dark: exports.foreground, light: exports.foreground, hc: exports.foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexports.inputBorder = registerColor('input.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexports.inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hc: exports.activeContrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexports.inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(exports.foreground, 0.5), dark: transparent(exports.foreground, 0.5), hc: transparent(exports.foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\nexports.inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: color_1.Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexports.inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexports.inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: exports.contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexports.inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: color_1.Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexports.inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexports.inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: exports.contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexports.inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: color_1.Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexports.inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexports.inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: exports.contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexports.selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: color_1.Color.white, hc: color_1.Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexports.selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hc: color_1.Color.black }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexports.selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: color_1.Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexports.selectBorder = registerColor('dropdown.border', { dark: exports.selectBackground, light: '#CECECE', hc: exports.contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\nexports.listFocusBackground = registerColor('list.focusBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0074E8', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: color_1.Color.white, light: color_1.Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexports.listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexports.listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexports.listDropBackground = registerColor('list.dropBackground', { dark: exports.listFocusBackground, light: exports.listFocusBackground, hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexports.listHighlightForeground = registerColor('list.highlightForeground', { dark: '#0097fb', light: '#0066BF', hc: exports.focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexports.listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hc: '#B89500' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexports.listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hc: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexports.listWarningForeground = registerColor('list.warningForeground', { dark: '#4d9e4d', light: '#117711', hc: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexports.listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: color_1.Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexports.listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: color_1.Color.transparent, light: color_1.Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexports.listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: exports.contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexports.pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: color_1.Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexports.pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: color_1.Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexports.buttonForeground = registerColor('button.foreground', { dark: color_1.Color.white, light: color_1.Color.white, hc: color_1.Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexports.buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\nexports.buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(exports.buttonBackground, 0.2), light: darken(exports.buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexports.badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: color_1.Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexports.badgeForeground = registerColor('badge.foreground', { dark: color_1.Color.white, light: '#333', hc: color_1.Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexports.scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexports.scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: color_1.Color.fromHex('#797979').transparent(0.4), light: color_1.Color.fromHex('#646464').transparent(0.4), hc: transparent(exports.contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexports.scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: color_1.Color.fromHex('#646464').transparent(0.7), light: color_1.Color.fromHex('#646464').transparent(0.7), hc: transparent(exports.contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexports.scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: color_1.Color.fromHex('#BFBFBF').transparent(0.4), light: color_1.Color.fromHex('#000000').transparent(0.6), hc: exports.contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexports.progressBarBackground = registerColor('progressBar.background', { dark: color_1.Color.fromHex('#0E70C0'), light: color_1.Color.fromHex('#0E70C0'), hc: exports.contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexports.menuBorder = registerColor('menu.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexports.menuForeground = registerColor('menu.foreground', { dark: exports.selectForeground, light: exports.foreground, hc: exports.selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexports.menuBackground = registerColor('menu.background', { dark: exports.selectBackground, light: exports.selectBackground, hc: exports.selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexports.menuSelectionForeground = registerColor('menu.selectionForeground', { dark: exports.listActiveSelectionForeground, light: exports.listActiveSelectionForeground, hc: exports.listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexports.menuSelectionBackground = registerColor('menu.selectionBackground', { dark: exports.listActiveSelectionBackground, light: exports.listActiveSelectionBackground, hc: exports.listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexports.menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: exports.activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexports.menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: exports.contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\nexports.editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: color_1.Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\nexports.editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: color_1.Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\nexports.editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexports.editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: exports.contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexports.editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Editor selection colors.\n */\nexports.editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexports.editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexports.editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(exports.editorSelectionBackground, 0.5), dark: transparent(exports.editorSelectionBackground, 0.5), hc: transparent(exports.editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexports.editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), dark: lessProminent(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\nexports.editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexports.editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexports.editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexports.editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexports.editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: exports.activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexports.editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(exports.activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Editor hover\n */\nexports.editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.editorHoverBackground = registerColor('editorHoverWidget.background', { light: exports.editorWidgetBackground, dark: exports.editorWidgetBackground, hc: exports.editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexports.editorHoverBorder = registerColor('editorHoverWidget.border', { light: exports.editorWidgetBorder, dark: exports.editorWidgetBorder, hc: exports.editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexports.editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(exports.editorHoverBackground, 0.2), light: darken(exports.editorHoverBackground, 0.05), hc: exports.editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\nexports.editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: color_1.Color.blue, hc: color_1.Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Diff Editor Colors\n */\nexports.defaultInsertColor = new color_1.Color(new color_1.RGBA(155, 185, 85, 0.2));\nexports.defaultRemoveColor = new color_1.Color(new color_1.RGBA(255, 0, 0, 0.2));\nexports.diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: exports.defaultInsertColor, light: exports.defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: exports.defaultRemoveColor, light: exports.defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexports.diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexports.diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: exports.contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\n/**\n * Snippet placeholder colors\n */\nexports.snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new color_1.Color(new color_1.RGBA(124, 124, 124, 0.3)), light: new color_1.Color(new color_1.RGBA(10, 50, 100, 0.2)), hc: new color_1.Color(new color_1.RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexports.snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexports.snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexports.snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new color_1.Color(new color_1.RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final stabstop of a snippet.\"));\n/**\n * Breadcrumb colors\n */\nexports.breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(exports.foreground, 0.8), dark: transparent(exports.foreground, 0.8), hc: transparent(exports.foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexports.breadcrumbsBackground = registerColor('breadcrumb.background', { light: exports.editorBackground, dark: exports.editorBackground, hc: exports.editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexports.breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(exports.foreground, 0.2), dark: lighten(exports.foreground, 0.1), hc: lighten(exports.foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexports.breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(exports.foreground, 0.2), dark: lighten(exports.foreground, 0.1), hc: lighten(exports.foreground, 0.1) }, nls.localize('breadcrumbsSelectedForegound', \"Color of selected breadcrumb items.\"));\nexports.breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: exports.editorWidgetBackground, dark: exports.editorWidgetBackground, hc: exports.editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n/**\n * Merge-conflict colors\n */\nvar headerTransparency = 0.5;\nvar currentBaseColor = color_1.Color.fromHex('#40C8AE').transparent(headerTransparency);\nvar incomingBaseColor = color_1.Color.fromHex('#40A6FF').transparent(headerTransparency);\nvar commonBaseColor = color_1.Color.fromHex('#606060').transparent(0.4);\nvar contentTransparency = 0.4;\nvar rulerTransparency = 1;\nexports.mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hc: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(exports.mergeCurrentHeaderBackground, contentTransparency), light: transparent(exports.mergeCurrentHeaderBackground, contentTransparency), hc: transparent(exports.mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hc: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(exports.mergeIncomingHeaderBackground, contentTransparency), light: transparent(exports.mergeIncomingHeaderBackground, contentTransparency), hc: transparent(exports.mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hc: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(exports.mergeCommonHeaderBackground, contentTransparency), light: transparent(exports.mergeCommonHeaderBackground, contentTransparency), hc: transparent(exports.mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.mergeBorder = registerColor('merge.border', { dark: null, light: null, hc: '#C3DF6F' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexports.overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(exports.mergeCurrentHeaderBackground, rulerTransparency), light: transparent(exports.mergeCurrentHeaderBackground, rulerTransparency), hc: exports.mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexports.overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(exports.mergeIncomingHeaderBackground, rulerTransparency), light: transparent(exports.mergeIncomingHeaderBackground, rulerTransparency), hc: exports.mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexports.overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(exports.mergeCommonHeaderBackground, rulerTransparency), light: transparent(exports.mergeCommonHeaderBackground, rulerTransparency), hc: exports.mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nvar findMatchColorDefault = new color_1.Color(new color_1.RGBA(246, 185, 77, 0.7));\nexports.overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: findMatchColorDefault, light: findMatchColorDefault, hc: findMatchColorDefault }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- color functions\nfunction darken(colorValue, factor) {\n    return function (theme) {\n        var color = resolveColorValue(colorValue, theme);\n        if (color) {\n            return color.darken(factor);\n        }\n        return undefined;\n    };\n}\nexports.darken = darken;\nfunction lighten(colorValue, factor) {\n    return function (theme) {\n        var color = resolveColorValue(colorValue, theme);\n        if (color) {\n            return color.lighten(factor);\n        }\n        return undefined;\n    };\n}\nexports.lighten = lighten;\nfunction transparent(colorValue, factor) {\n    return function (theme) {\n        var color = resolveColorValue(colorValue, theme);\n        if (color) {\n            return color.transparent(factor);\n        }\n        return undefined;\n    };\n}\nexports.transparent = transparent;\nfunction oneOf() {\n    var colorValues = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        colorValues[_i] = arguments[_i];\n    }\n    return function (theme) {\n        for (var _i = 0, colorValues_1 = colorValues; _i < colorValues_1.length; _i++) {\n            var colorValue = colorValues_1[_i];\n            var color = resolveColorValue(colorValue, theme);\n            if (color) {\n                return color;\n            }\n        }\n        return undefined;\n    };\n}\nexports.oneOf = oneOf;\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n    return function (theme) {\n        var from = resolveColorValue(colorValue, theme);\n        if (from) {\n            var backgroundColor = resolveColorValue(backgroundColorValue, theme);\n            if (backgroundColor) {\n                if (from.isDarkerThan(backgroundColor)) {\n                    return color_1.Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\n                }\n                return color_1.Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\n            }\n            return from.transparent(factor * transparency);\n        }\n        return undefined;\n    };\n}\n// ----- implementation\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nfunction resolveColorValue(colorValue, theme) {\n    if (colorValue === null) {\n        return undefined;\n    }\n    else if (typeof colorValue === 'string') {\n        if (colorValue[0] === '#') {\n            return color_1.Color.fromHex(colorValue);\n        }\n        return theme.getColor(colorValue);\n    }\n    else if (colorValue instanceof color_1.Color) {\n        return colorValue;\n    }\n    else if (typeof colorValue === 'function') {\n        return colorValue(theme);\n    }\n    return undefined;\n}\nexports.workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nvar schemaRegistry = platform.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\nschemaRegistry.registerSchema(exports.workbenchColorsSchemaId, colorRegistry.getColorSchema());\nvar delayer = new async_1.RunOnceScheduler(function () { return schemaRegistry.notifySchemaChanged(exports.workbenchColorsSchemaId); }, 200);\ncolorRegistry.onDidChangeSchema(function () {\n    if (!delayer.isScheduled()) {\n        delayer.schedule();\n    }\n});\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/colorRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/colorRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/platform/registry/common/platform';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { ITheme } from 'vs/platform/theme/common/themeService';\nimport { Event, Emitter } from 'vs/base/common/event';\n\nimport * as nls from 'vs/nls';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { RunOnceScheduler } from 'vs/base/common/async';\n\n//  ------ API types\n\nexport type ColorIdentifier = string;\n\nexport interface ColorContribution {\n\treadonly id: ColorIdentifier;\n\treadonly description: string;\n\treadonly defaults: ColorDefaults | null;\n\treadonly needsTransparency: boolean;\n\treadonly deprecationMessage: string | undefined;\n}\n\n\nexport interface ColorFunction {\n\t(theme: ITheme): Color | undefined;\n}\n\nexport interface ColorDefaults {\n\tlight: ColorValue | null;\n\tdark: ColorValue | null;\n\thc: ColorValue | null;\n}\n\n/**\n * A Color Value is either a color literal, a refence to other color or a derived color\n */\nexport type ColorValue = Color | string | ColorIdentifier | ColorFunction;\n\n// color registry\nexport const Extensions = {\n\tColorContribution: 'base.contributions.colors'\n};\n\nexport interface IColorRegistry {\n\n\treadonly onDidChangeSchema: Event<void>;\n\n\t/**\n\t * Register a color to the registry.\n\t * @param id The color id as used in theme description files\n\t * @param defaults The default values\n\t * @description the description\n\t */\n\tregisterColor(id: string, defaults: ColorDefaults, description: string): ColorIdentifier;\n\n\t/**\n\t * Register a color to the registry.\n\t */\n\tderegisterColor(id: string): void;\n\n\t/**\n\t * Get all color contributions\n\t */\n\tgetColors(): ColorContribution[];\n\n\t/**\n\t * Gets the default color of the given id\n\t */\n\tresolveDefaultColor(id: ColorIdentifier, theme: ITheme): Color | undefined;\n\n\t/**\n\t * JSON schema for an object to assign color values to one of the color contributions.\n\t */\n\tgetColorSchema(): IJSONSchema;\n\n\t/**\n\t * JSON schema to for a reference to a color contribution.\n\t */\n\tgetColorReferenceSchema(): IJSONSchema;\n\n}\n\n\n\nclass ColorRegistry implements IColorRegistry {\n\n\tprivate readonly _onDidChangeSchema = new Emitter<void>();\n\treadonly onDidChangeSchema: Event<void> = this._onDidChangeSchema.event;\n\n\tprivate colorsById: { [key: string]: ColorContribution };\n\tprivate colorSchema: IJSONSchema & { properties: IJSONSchemaMap } = { type: 'object', properties: {} };\n\tprivate colorReferenceSchema: IJSONSchema & { enum: string[], enumDescriptions: string[] } = { type: 'string', enum: [], enumDescriptions: [] };\n\n\tconstructor() {\n\t\tthis.colorsById = {};\n\t}\n\n\tpublic registerColor(id: string, defaults: ColorDefaults | null, description: string, needsTransparency = false, deprecationMessage?: string): ColorIdentifier {\n\t\tlet colorContribution: ColorContribution = { id, description, defaults, needsTransparency, deprecationMessage };\n\t\tthis.colorsById[id] = colorContribution;\n\t\tlet propertySchema: IJSONSchema = { type: 'string', description, format: 'color-hex', default: '#ff0000' };\n\t\tif (deprecationMessage) {\n\t\t\tpropertySchema.deprecationMessage = deprecationMessage;\n\t\t}\n\t\tthis.colorSchema.properties[id] = propertySchema;\n\t\tthis.colorReferenceSchema.enum.push(id);\n\t\tthis.colorReferenceSchema.enumDescriptions.push(description);\n\n\t\tthis._onDidChangeSchema.fire();\n\t\treturn id;\n\t}\n\n\n\tpublic deregisterColor(id: string): void {\n\t\tdelete this.colorsById[id];\n\t\tdelete this.colorSchema.properties[id];\n\t\tconst index = this.colorReferenceSchema.enum.indexOf(id);\n\t\tif (index !== -1) {\n\t\t\tthis.colorReferenceSchema.enum.splice(index, 1);\n\t\t\tthis.colorReferenceSchema.enumDescriptions.splice(index, 1);\n\t\t}\n\t\tthis._onDidChangeSchema.fire();\n\t}\n\n\tpublic getColors(): ColorContribution[] {\n\t\treturn Object.keys(this.colorsById).map(id => this.colorsById[id]);\n\t}\n\n\tpublic resolveDefaultColor(id: ColorIdentifier, theme: ITheme): Color | undefined {\n\t\tconst colorDesc = this.colorsById[id];\n\t\tif (colorDesc && colorDesc.defaults) {\n\t\t\tconst colorValue = colorDesc.defaults[theme.type];\n\t\t\treturn resolveColorValue(colorValue, theme);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getColorSchema(): IJSONSchema {\n\t\treturn this.colorSchema;\n\t}\n\n\tpublic getColorReferenceSchema(): IJSONSchema {\n\t\treturn this.colorReferenceSchema;\n\t}\n\n\tpublic toString() {\n\t\tlet sorter = (a: string, b: string) => {\n\t\t\tlet cat1 = a.indexOf('.') === -1 ? 0 : 1;\n\t\t\tlet cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\t\t\tif (cat1 !== cat2) {\n\t\t\t\treturn cat1 - cat2;\n\t\t\t}\n\t\t\treturn a.localeCompare(b);\n\t\t};\n\n\t\treturn Object.keys(this.colorsById).sort(sorter).map(k => `- \\`${k}\\`: ${this.colorsById[k].description}`).join('\\n');\n\t}\n\n}\n\nconst colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\n\nexport function registerColor(id: string, defaults: ColorDefaults | null, description: string, needsTransparency?: boolean, deprecationMessage?: string): ColorIdentifier {\n\treturn colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n}\n\nexport function getColorRegistry(): IColorRegistry {\n\treturn colorRegistry;\n}\n\n// ----- base colors\n\nexport const foreground = registerColor('foreground', { dark: '#CCCCCC', light: '#616161', hc: '#FFFFFF' }, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport const errorForeground = registerColor('errorForeground', { dark: '#F48771', light: '#A1260D', hc: '#F48771' }, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport const descriptionForeground = registerColor('descriptionForeground', { light: '#717171', dark: transparent(foreground, 0.7), hc: transparent(foreground, 0.7) }, nls.localize('descriptionForeground', \"Foreground color for description text providing additional information, for example for a label.\"));\n\nexport const focusBorder = registerColor('focusBorder', { dark: Color.fromHex('#0E639C').transparent(0.8), light: Color.fromHex('#007ACC').transparent(0.4), hc: '#F38518' }, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\n\nexport const contrastBorder = registerColor('contrastBorder', { light: null, dark: null, hc: '#6FC3DF' }, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport const activeContrastBorder = registerColor('contrastActiveBorder', { light: null, dark: null, hc: focusBorder }, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\n\nexport const selectionBackground = registerColor('selection.background', { light: null, dark: null, hc: null }, nls.localize('selectionBackground', \"The background color of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.\"));\n\n// ------ text colors\n\nexport const textSeparatorForeground = registerColor('textSeparator.foreground', { light: '#0000002e', dark: '#ffffff2e', hc: Color.black }, nls.localize('textSeparatorForeground', \"Color for text separators.\"));\nexport const textLinkForeground = registerColor('textLink.foreground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport const textLinkActiveForeground = registerColor('textLink.activeForeground', { light: '#006AB1', dark: '#3794FF', hc: '#3794FF' }, nls.localize('textLinkActiveForeground', \"Foreground color for links in text when clicked on and on mouse hover.\"));\nexport const textPreformatForeground = registerColor('textPreformat.foreground', { light: '#A31515', dark: '#D7BA7D', hc: '#D7BA7D' }, nls.localize('textPreformatForeground', \"Foreground color for preformatted text segments.\"));\nexport const textBlockQuoteBackground = registerColor('textBlockQuote.background', { light: '#7f7f7f1a', dark: '#7f7f7f1a', hc: null }, nls.localize('textBlockQuoteBackground', \"Background color for block quotes in text.\"));\nexport const textBlockQuoteBorder = registerColor('textBlockQuote.border', { light: '#007acc80', dark: '#007acc80', hc: Color.white }, nls.localize('textBlockQuoteBorder', \"Border color for block quotes in text.\"));\nexport const textCodeBlockBackground = registerColor('textCodeBlock.background', { light: '#dcdcdc66', dark: '#0a0a0a66', hc: Color.black }, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\"));\n\n// ----- widgets\nexport const widgetShadow = registerColor('widget.shadow', { dark: '#000000', light: '#A8A8A8', hc: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\n\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', { dark: foreground, light: foreground, hc: foreground }, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hc: activeContrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hc: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hc: Color.black }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hc: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hc: Color.black }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hc: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hc: Color.black }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hc: null }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hc: Color.black }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hc: Color.black }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: null, hc: Color.white }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hc: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n\nexport const listFocusBackground = registerColor('list.focusBackground', { dark: '#062F4A', light: '#D6EBFF', hc: null }, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listFocusForeground = registerColor('list.focusForeground', { dark: null, light: null, hc: null }, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground', { dark: '#094771', light: '#0074E8', hc: null }, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground', { dark: Color.white, light: Color.white, hc: null }, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hc: null }, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', { dark: null, light: null, hc: null }, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', { dark: null, light: null, hc: null }, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport const listHoverBackground = registerColor('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hc: null }, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport const listHoverForeground = registerColor('list.hoverForeground', { dark: null, light: null, hc: null }, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport const listDropBackground = registerColor('list.dropBackground', { dark: listFocusBackground, light: listFocusBackground, hc: null }, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport const listHighlightForeground = registerColor('list.highlightForeground', { dark: '#0097fb', light: '#0066BF', hc: focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hc: '#B89500' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\nexport const listErrorForeground = registerColor('list.errorForeground', { dark: '#F88070', light: '#B01011', hc: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\nexport const listWarningForeground = registerColor('list.warningForeground', { dark: '#4d9e4d', light: '#117711', hc: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background', { light: '#efc1ad', dark: '#653723', hc: Color.black }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline', { dark: Color.transparent, light: Color.transparent, hc: '#f38518' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hc: contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\n\nexport const pickerGroupForeground = registerColor('pickerGroup.foreground', { dark: '#3794FF', light: '#0066BF', hc: Color.white }, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport const pickerGroupBorder = registerColor('pickerGroup.border', { dark: '#3F3F46', light: '#CCCEDB', hc: Color.white }, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\n\nexport const buttonForeground = registerColor('button.foreground', { dark: Color.white, light: Color.white, hc: Color.white }, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hc: null }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hc: null }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\n\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hc: Color.black }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hc: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hc: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hc: transparent(contrastBorder, 0.6) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hc: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hc: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hc: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n\nexport const menuBorder = registerColor('menu.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('menuBorder', \"Border color of menus.\"));\nexport const menuForeground = registerColor('menu.foreground', { dark: selectForeground, light: foreground, hc: selectForeground }, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport const menuBackground = registerColor('menu.background', { dark: selectBackground, light: selectBackground, hc: selectBackground }, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport const menuSelectionForeground = registerColor('menu.selectionForeground', { dark: listActiveSelectionForeground, light: listActiveSelectionForeground, hc: listActiveSelectionForeground }, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport const menuSelectionBackground = registerColor('menu.selectionBackground', { dark: listActiveSelectionBackground, light: listActiveSelectionBackground, hc: listActiveSelectionBackground }, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport const menuSelectionBorder = registerColor('menu.selectionBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport const menuSeparatorBackground = registerColor('menu.separatorBackground', { dark: '#BBBBBB', light: '#888888', hc: contrastBorder }, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\n\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\nexport const editorBackground = registerColor('editor.background', { light: '#fffffe', dark: '#1E1E1E', hc: Color.black }, nls.localize('editorBackground', \"Editor background color.\"));\n\n/**\n * Editor foreground color.\n */\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hc: Color.white }, nls.localize('editorForeground', \"Editor default foreground color.\"));\n\n/**\n * Editor widgets\n */\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hc: '#0C141F' }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hc: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\n\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hc: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n\n/**\n * Editor selection colors.\n */\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hc: '#f3f518' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hc: '#000000' }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hc: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hc: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n\n\n/**\n * Editor find match colors.\n */\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hc: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hc: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hc: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hc: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hc: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n\n/**\n * Editor hover\n */\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hc: '#ADD6FF26' }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hc: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hc: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n\n/**\n * Editor link colors\n */\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hc: Color.cyan }, nls.localize('activeLinkForeground', 'Color of active links.'));\n\n/**\n * Diff Editor Colors\n */\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\n\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: defaultInsertColor, light: defaultInsertColor, hc: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hc: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hc: '#33ff2eff' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hc: '#FF008F' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\n\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hc: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\n\n/**\n * Snippet placeholder colors\n */\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hc: new Color(new RGBA(124, 124, 124, 0.3)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hc: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hc: '#525252' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final stabstop of a snippet.\"));\n\n/**\n * Breadcrumb colors\n */\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hc: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hc: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hc: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hc: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForegound', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hc: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n\n/**\n * Merge-conflict colors\n */\n\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\n\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hc: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hc: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hc: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hc: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hc: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hc: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hc: '#C3DF6F' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\n\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hc: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\n\nconst findMatchColorDefault = new Color(new RGBA(246, 185, 77, 0.7));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: findMatchColorDefault, light: findMatchColorDefault, hc: findMatchColorDefault }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\n\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hc: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n\n\n// ----- color functions\n\nexport function darken(colorValue: ColorValue, factor: number): ColorFunction {\n\treturn (theme) => {\n\t\tlet color = resolveColorValue(colorValue, theme);\n\t\tif (color) {\n\t\t\treturn color.darken(factor);\n\t\t}\n\t\treturn undefined;\n\t};\n}\n\nexport function lighten(colorValue: ColorValue, factor: number): ColorFunction {\n\treturn (theme) => {\n\t\tlet color = resolveColorValue(colorValue, theme);\n\t\tif (color) {\n\t\t\treturn color.lighten(factor);\n\t\t}\n\t\treturn undefined;\n\t};\n}\n\nexport function transparent(colorValue: ColorValue, factor: number): ColorFunction {\n\treturn (theme) => {\n\t\tlet color = resolveColorValue(colorValue, theme);\n\t\tif (color) {\n\t\t\treturn color.transparent(factor);\n\t\t}\n\t\treturn undefined;\n\t};\n}\n\nexport function oneOf(...colorValues: ColorValue[]): ColorFunction {\n\treturn (theme) => {\n\t\tfor (let colorValue of colorValues) {\n\t\t\tlet color = resolveColorValue(colorValue, theme);\n\t\t\tif (color) {\n\t\t\t\treturn color;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n}\n\nfunction lessProminent(colorValue: ColorValue, backgroundColorValue: ColorValue, factor: number, transparency: number): ColorFunction {\n\treturn (theme) => {\n\t\tlet from = resolveColorValue(colorValue, theme);\n\t\tif (from) {\n\t\t\tlet backgroundColor = resolveColorValue(backgroundColorValue, theme);\n\t\t\tif (backgroundColor) {\n\t\t\t\tif (from.isDarkerThan(backgroundColor)) {\n\t\t\t\t\treturn Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\n\t\t\t\t}\n\t\t\t\treturn Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\n\t\t\t}\n\t\t\treturn from.transparent(factor * transparency);\n\t\t}\n\t\treturn undefined;\n\t};\n}\n\n// ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\nfunction resolveColorValue(colorValue: ColorValue | null, theme: ITheme): Color | undefined {\n\tif (colorValue === null) {\n\t\treturn undefined;\n\t} else if (typeof colorValue === 'string') {\n\t\tif (colorValue[0] === '#') {\n\t\t\treturn Color.fromHex(colorValue);\n\t\t}\n\t\treturn theme.getColor(colorValue);\n\t} else if (colorValue instanceof Color) {\n\t\treturn colorValue;\n\t} else if (typeof colorValue === 'function') {\n\t\treturn colorValue(theme);\n\t}\n\treturn undefined;\n}\n\nexport const workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\n\nlet schemaRegistry = platform.Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\n\nconst delayer = new RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId), 200);\ncolorRegistry.onDidChangeSchema(() => {\n\tif (!delayer.isScheduled()) {\n\t\tdelayer.schedule();\n\t}\n});\n\n// setTimeout(_ => console.log(colorRegistry.toString()), 5000);\n\n\n\n"]}]}