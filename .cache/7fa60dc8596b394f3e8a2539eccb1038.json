{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar LanguageType;\n(function (LanguageType) {\n    LanguageType[LanguageType[\"Core\"] = 1] = \"Core\";\n    LanguageType[LanguageType[\"Contributed\"] = 2] = \"Contributed\";\n})(LanguageType = exports.LanguageType || (exports.LanguageType = {}));\nexports.ILocalizationsService = instantiation_1.createDecorator('localizationsService');\nfunction isValidLocalization(localization) {\n    if (typeof localization.languageId !== 'string') {\n        return false;\n    }\n    if (!Array.isArray(localization.translations) || localization.translations.length === 0) {\n        return false;\n    }\n    for (var _i = 0, _a = localization.translations; _i < _a.length; _i++) {\n        var translation = _a[_i];\n        if (typeof translation.id !== 'string') {\n            return false;\n        }\n        if (typeof translation.path !== 'string') {\n            return false;\n        }\n    }\n    if (localization.languageName && typeof localization.languageName !== 'string') {\n        return false;\n    }\n    if (localization.localizedLanguageName && typeof localization.localizedLanguageName !== 'string') {\n        return false;\n    }\n    return true;\n}\nexports.isValidLocalization = isValidLocalization;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/localizations/common/localizations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAgBjF,IAAkB,YAGjB;AAHD,WAAkB,YAAY;IAC7B,+CAAQ,CAAA;IACR,6DAAW,CAAA;AACZ,CAAC,EAHiB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAG7B;AAEY,QAAA,qBAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;AAQpG,SAAgB,mBAAmB,CAAC,YAA2B;IAC9D,IAAI,OAAO,YAAY,CAAC,UAAU,KAAK,QAAQ,EAAE;QAChD,OAAO,KAAK,CAAC;KACb;IACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QACxF,OAAO,KAAK,CAAC;KACb;IACD,KAA0B,UAAyB,EAAzB,KAAA,YAAY,CAAC,YAAY,EAAzB,cAAyB,EAAzB,IAAyB,EAAE;QAAhD,IAAM,WAAW,SAAA;QACrB,IAAI,OAAO,WAAW,CAAC,EAAE,KAAK,QAAQ,EAAE;YACvC,OAAO,KAAK,CAAC;SACb;QACD,IAAI,OAAO,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE;YACzC,OAAO,KAAK,CAAC;SACb;KACD;IACD,IAAI,YAAY,CAAC,YAAY,IAAI,OAAO,YAAY,CAAC,YAAY,KAAK,QAAQ,EAAE;QAC/E,OAAO,KAAK,CAAC;KACb;IACD,IAAI,YAAY,CAAC,qBAAqB,IAAI,OAAO,YAAY,CAAC,qBAAqB,KAAK,QAAQ,EAAE;QACjG,OAAO,KAAK,CAAC;KACb;IACD,OAAO,IAAI,CAAC;AACb,CAAC;AAtBD,kDAsBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\n\nexport interface ILocalization {\n\tlanguageId: string;\n\tlanguageName?: string;\n\tlocalizedLanguageName?: string;\n\ttranslations: ITranslation[];\n\tminimalTranslations?: { [key: string]: string };\n}\n\nexport interface ITranslation {\n\tid: string;\n\tpath: string;\n}\n\nexport const enum LanguageType {\n\tCore = 1,\n\tContributed\n}\n\nexport const ILocalizationsService = createDecorator<ILocalizationsService>('localizationsService');\nexport interface ILocalizationsService {\n\t_serviceBrand: any;\n\n\treadonly onDidLanguagesChange: Event<void>;\n\tgetLanguageIds(type?: LanguageType): Promise<string[]>;\n}\n\nexport function isValidLocalization(localization: ILocalization): boolean {\n\tif (typeof localization.languageId !== 'string') {\n\t\treturn false;\n\t}\n\tif (!Array.isArray(localization.translations) || localization.translations.length === 0) {\n\t\treturn false;\n\t}\n\tfor (const translation of localization.translations) {\n\t\tif (typeof translation.id !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t\tif (typeof translation.path !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (localization.languageName && typeof localization.languageName !== 'string') {\n\t\treturn false;\n\t}\n\tif (localization.localizedLanguageName && typeof localization.localizedLanguageName !== 'string') {\n\t\treturn false;\n\t}\n\treturn true;\n}"]}]}