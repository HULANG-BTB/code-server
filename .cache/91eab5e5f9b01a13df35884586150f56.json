{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewProtocols.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewProtocols.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"vs/base/common/mime\", \"vs/base/common/path\", \"vs/base/common/strings\", \"vs/base/common/uri\", \"vs/platform/remote/common/remoteHosts\"], function (require, exports, mime_1, path_1, strings_1, uri_1, remoteHosts_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var WebviewProtocol;\n    (function (WebviewProtocol) {\n        WebviewProtocol[\"CoreResource\"] = \"vscode-core-resource\";\n        WebviewProtocol[\"VsCodeResource\"] = \"vscode-resource\";\n    })(WebviewProtocol = exports.WebviewProtocol || (exports.WebviewProtocol = {}));\n    function resolveContent(fileService, resource, mime, callback) {\n        fileService.resolveContent(resource, { encoding: 'binary' }).then(contents => {\n            callback({\n                data: Buffer.from(contents.value, contents.encoding),\n                mimeType: mime\n            });\n        }, (err) => {\n            console.log(err);\n            callback({ error: -2 /* FAILED: https://cs.chromium.org/chromium/src/net/base/net_error_list.h */ });\n        });\n    }\n    function registerFileProtocol(contents, protocol, fileService, extensionLocation, getRoots) {\n        contents.session.protocol.registerBufferProtocol(protocol, (request, callback) => {\n            if (extensionLocation && extensionLocation.scheme === remoteHosts_1.REMOTE_HOST_SCHEME) {\n                const requestUri = uri_1.URI.parse(request.url);\n                const redirectedUri = uri_1.URI.from({\n                    scheme: remoteHosts_1.REMOTE_HOST_SCHEME,\n                    authority: extensionLocation.authority,\n                    path: '/vscode-resource',\n                    query: JSON.stringify({\n                        requestResourcePath: requestUri.path\n                    })\n                });\n                resolveContent(fileService, redirectedUri, getMimeType(requestUri), callback);\n                return;\n            }\n            const requestPath = uri_1.URI.parse(request.url).path;\n            const normalizedPath = uri_1.URI.file(requestPath);\n            for (const root of getRoots()) {\n                if (strings_1.startsWith(normalizedPath.fsPath, root.fsPath + path_1.sep)) {\n                    resolveContent(fileService, normalizedPath, getMimeType(normalizedPath), callback);\n                    return;\n                }\n            }\n            console.error('Webview: Cannot load resource outside of protocol root');\n            callback({ error: -10 /* ACCESS_DENIED: https://cs.chromium.org/chromium/src/net/base/net_error_list.h */ });\n        }, (error) => {\n            if (error) {\n                console.error(`Failed to register '${protocol}' protocol`);\n            }\n        });\n    }\n    exports.registerFileProtocol = registerFileProtocol;\n    const webviewMimeTypes = {\n        '.svg': 'image/svg+xml',\n        '.txt': 'text/plain',\n        '.css': 'text/css',\n        '.js': 'application/javascript',\n        '.json': 'application/json',\n        '.html': 'text/html',\n        '.htm': 'text/html',\n        '.xhtml': 'application/xhtml+xml',\n        '.oft': 'font/otf',\n        '.xml': 'application/xml',\n    };\n    function getMimeType(normalizedPath) {\n        const ext = path_1.extname(normalizedPath.fsPath).toLowerCase();\n        return webviewMimeTypes[ext] || mime_1.getMediaMime(normalizedPath.fsPath) || mime_1.MIME_UNKNOWN;\n    }\n});\n",null]}