{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar update_1 = require(\"vs/platform/update/common/update\");\nvar semver = require(\"semver\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar releaseNotesEditor_1 = require(\"./releaseNotesEditor\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar releaseNotesManager = undefined;\nfunction showReleaseNotes(instantiationService, version) {\n    if (!releaseNotesManager) {\n        releaseNotesManager = instantiationService.createInstance(releaseNotesEditor_1.ReleaseNotesManager);\n    }\n    return instantiationService.invokeFunction(function (accessor) { return releaseNotesManager.show(accessor, version); });\n}\nvar OpenLatestReleaseNotesInBrowserAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenLatestReleaseNotesInBrowserAction, _super);\n    function OpenLatestReleaseNotesInBrowserAction(openerService) {\n        var _this = _super.call(this, 'update.openLatestReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), undefined, true) || this;\n        _this.openerService = openerService;\n        return _this;\n    }\n    OpenLatestReleaseNotesInBrowserAction.prototype.run = function () {\n        if (product_1.default.releaseNotesUrl) {\n            var uri = uri_1.URI.parse(product_1.default.releaseNotesUrl);\n            return this.openerService.open(uri);\n        }\n        return Promise.resolve(false);\n    };\n    OpenLatestReleaseNotesInBrowserAction = tslib_1.__decorate([\n        tslib_1.__param(0, opener_1.IOpenerService)\n    ], OpenLatestReleaseNotesInBrowserAction);\n    return OpenLatestReleaseNotesInBrowserAction;\n}(actions_1.Action));\nexports.OpenLatestReleaseNotesInBrowserAction = OpenLatestReleaseNotesInBrowserAction;\nvar AbstractShowReleaseNotesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractShowReleaseNotesAction, _super);\n    function AbstractShowReleaseNotesAction(id, label, version, instantiationService) {\n        var _this = _super.call(this, id, label, undefined, true) || this;\n        _this.version = version;\n        _this.instantiationService = instantiationService;\n        return _this;\n    }\n    AbstractShowReleaseNotesAction.prototype.run = function () {\n        var _this = this;\n        if (!this.enabled) {\n            return Promise.resolve(false);\n        }\n        this.enabled = false;\n        return showReleaseNotes(this.instantiationService, this.version)\n            .then(undefined, function () {\n            var action = _this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);\n            return action.run().then(function () { return false; });\n        });\n    };\n    AbstractShowReleaseNotesAction = tslib_1.__decorate([\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], AbstractShowReleaseNotesAction);\n    return AbstractShowReleaseNotesAction;\n}(actions_1.Action));\nexports.AbstractShowReleaseNotesAction = AbstractShowReleaseNotesAction;\nvar ShowReleaseNotesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowReleaseNotesAction, _super);\n    function ShowReleaseNotesAction(version, instantiationService) {\n        return _super.call(this, 'update.showReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), version, instantiationService) || this;\n    }\n    ShowReleaseNotesAction = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], ShowReleaseNotesAction);\n    return ShowReleaseNotesAction;\n}(AbstractShowReleaseNotesAction));\nexports.ShowReleaseNotesAction = ShowReleaseNotesAction;\nvar ShowCurrentReleaseNotesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowCurrentReleaseNotesAction, _super);\n    function ShowCurrentReleaseNotesAction(id, label, instantiationService) {\n        if (id === void 0) { id = ShowCurrentReleaseNotesAction.ID; }\n        if (label === void 0) { label = ShowCurrentReleaseNotesAction.LABEL; }\n        return _super.call(this, id, label, package_1.default.version, instantiationService) || this;\n    }\n    ShowCurrentReleaseNotesAction.ID = 'update.showCurrentReleaseNotes';\n    ShowCurrentReleaseNotesAction.LABEL = nls.localize('showReleaseNotes', \"Show Release Notes\");\n    ShowCurrentReleaseNotesAction = tslib_1.__decorate([\n        tslib_1.__param(2, instantiation_1.IInstantiationService)\n    ], ShowCurrentReleaseNotesAction);\n    return ShowCurrentReleaseNotesAction;\n}(AbstractShowReleaseNotesAction));\nexports.ShowCurrentReleaseNotesAction = ShowCurrentReleaseNotesAction;\nvar ProductContribution = /** @class */ (function () {\n    function ProductContribution(storageService, instantiationService, notificationService, environmentService, openerService, configurationService) {\n        var lastVersion = storageService.get(ProductContribution.KEY, storage_1.StorageScope.GLOBAL, '');\n        var shouldShowReleaseNotes = configurationService.getValue('update.showReleaseNotes');\n        // was there an update? if so, open release notes\n        if (shouldShowReleaseNotes && !environmentService.skipReleaseNotes && product_1.default.releaseNotesUrl && lastVersion && package_1.default.version !== lastVersion) {\n            showReleaseNotes(instantiationService, package_1.default.version)\n                .then(undefined, function () {\n                notificationService.prompt(severity_1.default.Info, nls.localize('read the release notes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", product_1.default.nameLong, package_1.default.version), [{\n                        label: nls.localize('releaseNotes', \"Release Notes\"),\n                        run: function () {\n                            var uri = uri_1.URI.parse(product_1.default.releaseNotesUrl);\n                            openerService.open(uri);\n                        }\n                    }], { sticky: true });\n            });\n        }\n        // should we show the new license?\n        if (product_1.default.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(package_1.default.version, '>=1.0.0')) {\n            notificationService.info(nls.localize('licenseChanged', \"Our license terms have changed, please click [here]({0}) to go through them.\", product_1.default.licenseUrl));\n        }\n        storageService.store(ProductContribution.KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n    }\n    ProductContribution.KEY = 'releaseNotes/lastVersion';\n    ProductContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, opener_1.IOpenerService),\n        tslib_1.__param(5, configuration_1.IConfigurationService)\n    ], ProductContribution);\n    return ProductContribution;\n}());\nexports.ProductContribution = ProductContribution;\nvar NeverShowAgain = /** @class */ (function () {\n    function NeverShowAgain(key, storageService) {\n        var _this = this;\n        this.storageService = storageService;\n        this.action = new actions_1.Action(\"neverShowAgain:\" + this.key, nls.localize('neveragain', \"Don't Show Again\"), undefined, true, function (notification) {\n            // Hide notification\n            notification.close();\n            _this.storageService.store(_this.key, true, storage_1.StorageScope.GLOBAL);\n            return Promise.resolve(true);\n        });\n        this.key = \"neverShowAgain:\" + key;\n    }\n    NeverShowAgain.prototype.shouldShow = function () {\n        return !this.storageService.getBoolean(this.key, storage_1.StorageScope.GLOBAL, false);\n    };\n    NeverShowAgain = tslib_1.__decorate([\n        tslib_1.__param(1, storage_1.IStorageService)\n    ], NeverShowAgain);\n    return NeverShowAgain;\n}());\nvar Win3264BitContribution = /** @class */ (function () {\n    function Win3264BitContribution(storageService, notificationService, environmentService) {\n        if (environmentService.disableUpdates) {\n            return;\n        }\n        var neverShowAgain = new NeverShowAgain(Win3264BitContribution.KEY, storageService);\n        if (!neverShowAgain.shouldShow()) {\n            return;\n        }\n        var url = product_1.default.quality === 'insider'\n            ? Win3264BitContribution.INSIDER_URL\n            : Win3264BitContribution.URL;\n        var handle = notificationService.prompt(severity_1.default.Info, nls.localize('64bitisavailable', \"{0} for 64-bit Windows is now available! Click [here]({1}) to learn more.\", product_1.default.nameShort, url), [{\n                label: nls.localize('neveragain', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () {\n                    neverShowAgain.action.run(handle);\n                    neverShowAgain.action.dispose();\n                }\n            }], { sticky: true });\n    }\n    Win3264BitContribution.KEY = 'update/win32-64bits';\n    Win3264BitContribution.URL = 'https://code.visualstudio.com/updates/v1_15#_windows-64-bit';\n    Win3264BitContribution.INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_15.md#windows-64-bit';\n    Win3264BitContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, environment_1.IEnvironmentService)\n    ], Win3264BitContribution);\n    return Win3264BitContribution;\n}());\nexports.Win3264BitContribution = Win3264BitContribution;\nvar Linux32BitContribution = /** @class */ (function () {\n    function Linux32BitContribution(storageService, notificationService, environmentService) {\n        if (environmentService.disableUpdates) {\n            return;\n        }\n        var neverShowAgain = new NeverShowAgain(Linux32BitContribution.KEY, storageService);\n        if (!neverShowAgain.shouldShow()) {\n            return;\n        }\n        var url = product_1.default.quality === 'insider'\n            ? Linux32BitContribution.INSIDER_URL\n            : Linux32BitContribution.URL;\n        var handle = notificationService.prompt(severity_1.default.Info, nls.localize('linux64bits', \"{0} for 32-bit Linux will soon be discontinued. Please update to the 64-bit version.\", product_1.default.nameShort, url), [{\n                label: nls.localize('learnmore', \"Learn More\"),\n                run: function () {\n                    window.open(url);\n                }\n            },\n            {\n                label: nls.localize('neveragain', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () {\n                    neverShowAgain.action.run(handle);\n                    neverShowAgain.action.dispose();\n                }\n            }], { sticky: true });\n    }\n    Linux32BitContribution.KEY = 'update/linux32-64bits';\n    Linux32BitContribution.URL = 'https://code.visualstudio.com/updates/v1_32#_linux-32-bit-support-ends-soon';\n    Linux32BitContribution.INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_32.md#linux-32-bit-support-ends-soon';\n    Linux32BitContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, environment_1.IEnvironmentService)\n    ], Linux32BitContribution);\n    return Linux32BitContribution;\n}());\nexports.Linux32BitContribution = Linux32BitContribution;\nvar CommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CommandAction, _super);\n    function CommandAction(commandId, label, commandService) {\n        return _super.call(this, \"command-action:\" + commandId, label, undefined, true, function () { return commandService.executeCommand(commandId); }) || this;\n    }\n    CommandAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], CommandAction);\n    return CommandAction;\n}(actions_1.Action));\nvar UpdateContribution = /** @class */ (function () {\n    function UpdateContribution(storageService, commandService, instantiationService, notificationService, dialogService, updateService, activityService, windowService) {\n        this.storageService = storageService;\n        this.commandService = commandService;\n        this.instantiationService = instantiationService;\n        this.notificationService = notificationService;\n        this.dialogService = dialogService;\n        this.updateService = updateService;\n        this.activityService = activityService;\n        this.windowService = windowService;\n        this.badgeDisposable = lifecycle_1.Disposable.None;\n        this.disposables = [];\n        this.state = updateService.state;\n        updateService.onStateChange(this.onUpdateStateChange, this, this.disposables);\n        this.onUpdateStateChange(this.updateService.state);\n        /*\n        The `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n        combination to figure out when to show a message to the user that he should update.\n\n        This message should appear if the user has received an update notification but hasn't\n        updated since 5 days.\n        */\n        var currentVersion = product_1.default.commit;\n        var lastKnownVersion = this.storageService.get('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n        // if current version != stored version, clear both fields\n        if (currentVersion !== lastKnownVersion) {\n            this.storageService.remove('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n            this.storageService.remove('update/updateNotificationTime', storage_1.StorageScope.GLOBAL);\n        }\n    }\n    Object.defineProperty(UpdateContribution.prototype, \"id\", {\n        get: function () { return 'vs.update'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UpdateContribution.prototype, \"name\", {\n        get: function () { return nls.localize('manage', \"Manage\"); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UpdateContribution.prototype, \"cssClass\", {\n        get: function () { return 'update-activity'; },\n        enumerable: true,\n        configurable: true\n    });\n    UpdateContribution.prototype.onUpdateStateChange = function (state) {\n        switch (state.type) {\n            case update_1.StateType.Idle:\n                if (state.error) {\n                    this.onError(state.error);\n                }\n                else if (this.state.type === update_1.StateType.CheckingForUpdates && this.state.context && this.state.context.windowId === this.windowService.getCurrentWindowId()) {\n                    this.onUpdateNotAvailable();\n                }\n                break;\n            case update_1.StateType.AvailableForDownload:\n                this.onUpdateAvailable(state.update);\n                break;\n            case update_1.StateType.Downloaded:\n                this.onUpdateDownloaded(state.update);\n                break;\n            case update_1.StateType.Updating:\n                this.onUpdateUpdating(state.update);\n                break;\n            case update_1.StateType.Ready:\n                this.onUpdateReady(state.update);\n                break;\n        }\n        var badge = undefined;\n        var clazz;\n        if (state.type === update_1.StateType.AvailableForDownload || state.type === update_1.StateType.Downloaded || state.type === update_1.StateType.Ready) {\n            badge = new activity_1.NumberBadge(1, function () { return nls.localize('updateIsReady', \"New {0} update available.\", product_1.default.nameShort); });\n        }\n        else if (state.type === update_1.StateType.CheckingForUpdates || state.type === update_1.StateType.Downloading || state.type === update_1.StateType.Updating) {\n            badge = new activity_1.ProgressBadge(function () { return nls.localize('updateIsReady', \"New {0} update available.\", product_1.default.nameShort); });\n            clazz = 'progress-badge';\n        }\n        this.badgeDisposable.dispose();\n        if (badge) {\n            this.badgeDisposable = this.activityService.showActivity(this.id, badge, clazz);\n        }\n        this.state = state;\n    };\n    UpdateContribution.prototype.onError = function (error) {\n        error = error.replace(/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/, 'See [this link](https://github.com/Microsoft/vscode/issues/7426#issuecomment-425093469) for more information');\n        this.notificationService.notify({\n            severity: notification_1.Severity.Error,\n            message: error,\n            source: nls.localize('update service', \"Update Service\"),\n        });\n    };\n    UpdateContribution.prototype.onUpdateNotAvailable = function () {\n        this.dialogService.show(severity_1.default.Info, nls.localize('noUpdatesAvailable', \"There are currently no updates available.\"), [nls.localize('ok', \"OK\")]);\n    };\n    // linux\n    UpdateContribution.prototype.onUpdateAvailable = function (update) {\n        var _this = this;\n        if (!this.shouldShowNotification()) {\n            return;\n        }\n        this.notificationService.prompt(severity_1.default.Info, nls.localize('thereIsUpdateAvailable', \"There is an available update.\"), [{\n                label: nls.localize('download now', \"Download Now\"),\n                run: function () { return _this.updateService.downloadUpdate(); }\n            }, {\n                label: nls.localize('later', \"Later\"),\n                run: function () { }\n            }, {\n                label: nls.localize('releaseNotes', \"Release Notes\"),\n                run: function () {\n                    var action = _this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                    action.run();\n                    action.dispose();\n                }\n            }], { sticky: true });\n    };\n    // windows fast updates (target === system)\n    UpdateContribution.prototype.onUpdateDownloaded = function (update) {\n        var _this = this;\n        if (!this.shouldShowNotification()) {\n            return;\n        }\n        this.notificationService.prompt(severity_1.default.Info, nls.localize('updateAvailable', \"There's an update available: {0} {1}\", product_1.default.nameLong, update.productVersion), [{\n                label: nls.localize('installUpdate', \"Install Update\"),\n                run: function () { return _this.updateService.applyUpdate(); }\n            }, {\n                label: nls.localize('later', \"Later\"),\n                run: function () { }\n            }, {\n                label: nls.localize('releaseNotes', \"Release Notes\"),\n                run: function () {\n                    var action = _this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                    action.run();\n                    action.dispose();\n                }\n            }], { sticky: true });\n    };\n    // windows fast updates\n    UpdateContribution.prototype.onUpdateUpdating = function (update) {\n        if (platform_1.isWindows && product_1.default.target === 'user') {\n            return;\n        }\n        // windows fast updates (target === system)\n        var neverShowAgain = new NeverShowAgain('update/win32-fast-updates', this.storageService);\n        if (!neverShowAgain.shouldShow()) {\n            return;\n        }\n        var handle = this.notificationService.prompt(severity_1.default.Info, nls.localize('updateInstalling', \"{0} {1} is being installed in the background; we'll let you know when it's done.\", product_1.default.nameLong, update.productVersion), [{\n                label: nls.localize('neveragain', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () {\n                    neverShowAgain.action.run(handle);\n                    neverShowAgain.action.dispose();\n                }\n            }]);\n    };\n    // windows and mac\n    UpdateContribution.prototype.onUpdateReady = function (update) {\n        var _this = this;\n        if (!(platform_1.isWindows && product_1.default.target !== 'user') && !this.shouldShowNotification()) {\n            return;\n        }\n        var actions = [{\n                label: nls.localize('updateNow', \"Update Now\"),\n                run: function () { return _this.updateService.quitAndInstall(); }\n            }, {\n                label: nls.localize('later', \"Later\"),\n                run: function () { }\n            }];\n        // TODO@joao check why snap updates send `update` as falsy\n        if (update.productVersion) {\n            actions.push({\n                label: nls.localize('releaseNotes', \"Release Notes\"),\n                run: function () {\n                    var action = _this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                    action.run();\n                    action.dispose();\n                }\n            });\n        }\n        // windows user fast updates and mac\n        this.notificationService.prompt(severity_1.default.Info, nls.localize('updateAvailableAfterRestart', \"Restart {0} to apply the latest update.\", product_1.default.nameLong), actions, { sticky: true });\n    };\n    UpdateContribution.prototype.shouldShowNotification = function () {\n        var currentVersion = product_1.default.commit;\n        var currentMillis = new Date().getTime();\n        var lastKnownVersion = this.storageService.get('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n        // if version != stored version, save version and date\n        if (currentVersion !== lastKnownVersion) {\n            this.storageService.store('update/lastKnownVersion', currentVersion, storage_1.StorageScope.GLOBAL);\n            this.storageService.store('update/updateNotificationTime', currentMillis, storage_1.StorageScope.GLOBAL);\n        }\n        var updateNotificationMillis = this.storageService.getNumber('update/updateNotificationTime', storage_1.StorageScope.GLOBAL, currentMillis);\n        var diffDays = (currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n        return diffDays > 5;\n    };\n    UpdateContribution.prototype.getActions = function () {\n        var result = [\n            new CommandAction(UpdateContribution.showCommandsId, nls.localize('commandPalette', \"Command Palette...\"), this.commandService),\n            new actionbar_1.Separator(),\n            new CommandAction(UpdateContribution.openSettingsId, nls.localize('settings', \"Settings\"), this.commandService),\n            new CommandAction(UpdateContribution.showExtensionsId, nls.localize('showExtensions', \"Extensions\"), this.commandService),\n            new CommandAction(UpdateContribution.openKeybindingsId, nls.localize('keyboardShortcuts', \"Keyboard Shortcuts\"), this.commandService),\n            new actionbar_1.Separator(),\n            new CommandAction(UpdateContribution.openUserSnippets, nls.localize('userSnippets', \"User Snippets\"), this.commandService),\n            new actionbar_1.Separator(),\n            new CommandAction(UpdateContribution.selectColorThemeId, nls.localize('selectTheme.label', \"Color Theme\"), this.commandService),\n            new CommandAction(UpdateContribution.selectIconThemeId, nls.localize('themes.selectIconTheme.label', \"File Icon Theme\"), this.commandService)\n        ];\n        var updateAction = this.getUpdateAction();\n        if (updateAction) {\n            result.push(new actionbar_1.Separator(), updateAction);\n        }\n        return result;\n    };\n    UpdateContribution.prototype.getUpdateAction = function () {\n        var _this = this;\n        var state = this.updateService.state;\n        switch (state.type) {\n            case update_1.StateType.Uninitialized:\n                return null;\n            case update_1.StateType.Idle:\n                var windowId_1 = this.windowService.getCurrentWindowId();\n                return new actions_1.Action('update.check', nls.localize('checkForUpdates', \"Check for Updates...\"), undefined, true, function () {\n                    return _this.updateService.checkForUpdates({ windowId: windowId_1 });\n                });\n            case update_1.StateType.CheckingForUpdates:\n                return new actions_1.Action('update.checking', nls.localize('checkingForUpdates', \"Checking For Updates...\"), undefined, false);\n            case update_1.StateType.AvailableForDownload:\n                return new actions_1.Action('update.downloadNow', nls.localize('download now', \"Download Now\"), undefined, true, function () {\n                    return _this.updateService.downloadUpdate();\n                });\n            case update_1.StateType.Downloading:\n                return new actions_1.Action('update.downloading', nls.localize('DownloadingUpdate', \"Downloading Update...\"), undefined, false);\n            case update_1.StateType.Downloaded:\n                return new actions_1.Action('update.install', nls.localize('installUpdate...', \"Install Update...\"), undefined, true, function () {\n                    return _this.updateService.applyUpdate();\n                });\n            case update_1.StateType.Updating:\n                return new actions_1.Action('update.updating', nls.localize('installingUpdate', \"Installing Update...\"), undefined, false);\n            case update_1.StateType.Ready:\n                return new actions_1.Action('update.restart', nls.localize('restartToUpdate', \"Restart to Update\"), undefined, true, function () {\n                    return _this.updateService.quitAndInstall();\n                });\n        }\n    };\n    UpdateContribution.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    UpdateContribution.showCommandsId = 'workbench.action.showCommands';\n    UpdateContribution.openSettingsId = 'workbench.action.openSettings';\n    UpdateContribution.openKeybindingsId = 'workbench.action.openGlobalKeybindings';\n    UpdateContribution.openUserSnippets = 'workbench.action.openSnippets';\n    UpdateContribution.selectColorThemeId = 'workbench.action.selectTheme';\n    UpdateContribution.selectIconThemeId = 'workbench.action.selectIconTheme';\n    UpdateContribution.showExtensionsId = 'workbench.view.extensions';\n    UpdateContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, commands_1.ICommandService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, dialogs_1.IDialogService),\n        tslib_1.__param(5, update_1.IUpdateService),\n        tslib_1.__param(6, activity_1.IActivityService),\n        tslib_1.__param(7, windows_1.IWindowService)\n    ], UpdateContribution);\n    return UpdateContribution;\n}());\nexports.UpdateContribution = UpdateContribution;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport severity from 'vs/base/common/severity';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport pkg from 'vs/platform/product/node/package';\nimport product from 'vs/platform/product/node/product';\nimport { URI } from 'vs/base/common/uri';\nimport { IActivityService, NumberBadge, IBadge, ProgressBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IGlobalActivity } from 'vs/workbench/common/activity';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IUpdateService, State as UpdateState, StateType, IUpdate } from 'vs/platform/update/common/update';\nimport * as semver from 'semver';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { INotificationService, INotificationHandle, Severity } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ReleaseNotesManager } from './releaseNotesEditor';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nlet releaseNotesManager: ReleaseNotesManager | undefined = undefined;\n\nfunction showReleaseNotes(instantiationService: IInstantiationService, version: string) {\n\tif (!releaseNotesManager) {\n\t\treleaseNotesManager = instantiationService.createInstance(ReleaseNotesManager);\n\t}\n\n\treturn instantiationService.invokeFunction(accessor => releaseNotesManager!.show(accessor, version));\n}\n\nexport class OpenLatestReleaseNotesInBrowserAction extends Action {\n\n\tconstructor(\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper('update.openLatestReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), undefined, true);\n\t}\n\n\trun(): Promise<any> {\n\t\tif (product.releaseNotesUrl) {\n\t\t\tconst uri = URI.parse(product.releaseNotesUrl);\n\t\t\treturn this.openerService.open(uri);\n\t\t}\n\t\treturn Promise.resolve(false);\n\t}\n}\n\nexport abstract class AbstractShowReleaseNotesAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate version: string,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label, undefined, true);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tif (!this.enabled) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\tthis.enabled = false;\n\n\t\treturn showReleaseNotes(this.instantiationService, this.version)\n\t\t\t.then(undefined, () => {\n\t\t\t\tconst action = this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);\n\t\t\t\treturn action.run().then(() => false);\n\t\t\t});\n\t}\n}\n\nexport class ShowReleaseNotesAction extends AbstractShowReleaseNotesAction {\n\n\tconstructor(\n\t\tversion: string,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper('update.showReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), version, instantiationService);\n\t}\n}\n\nexport class ShowCurrentReleaseNotesAction extends AbstractShowReleaseNotesAction {\n\n\tstatic readonly ID = 'update.showCurrentReleaseNotes';\n\tstatic LABEL = nls.localize('showReleaseNotes', \"Show Release Notes\");\n\n\tconstructor(\n\t\tid = ShowCurrentReleaseNotesAction.ID,\n\t\tlabel = ShowCurrentReleaseNotesAction.LABEL,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label, pkg.version, instantiationService);\n\t}\n}\n\nexport class ProductContribution implements IWorkbenchContribution {\n\n\tprivate static readonly KEY = 'releaseNotes/lastVersion';\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tconst lastVersion = storageService.get(ProductContribution.KEY, StorageScope.GLOBAL, '');\n\t\tconst shouldShowReleaseNotes = configurationService.getValue<boolean>('update.showReleaseNotes');\n\n\t\t// was there an update? if so, open release notes\n\t\tif (shouldShowReleaseNotes && !environmentService.skipReleaseNotes && product.releaseNotesUrl && lastVersion && pkg.version !== lastVersion) {\n\t\t\tshowReleaseNotes(instantiationService, pkg.version)\n\t\t\t\t.then(undefined, () => {\n\t\t\t\t\tnotificationService.prompt(\n\t\t\t\t\t\tseverity.Info,\n\t\t\t\t\t\tnls.localize('read the release notes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", product.nameLong, pkg.version),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\tconst uri = URI.parse(product.releaseNotesUrl);\n\t\t\t\t\t\t\t\topenerService.open(uri);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t}\n\n\t\t// should we show the new license?\n\t\tif (product.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(pkg.version, '>=1.0.0')) {\n\t\t\tnotificationService.info(nls.localize('licenseChanged', \"Our license terms have changed, please click [here]({0}) to go through them.\", product.licenseUrl));\n\t\t}\n\n\t\tstorageService.store(ProductContribution.KEY, pkg.version, StorageScope.GLOBAL);\n\t}\n}\n\nclass NeverShowAgain {\n\n\tprivate readonly key: string;\n\n\treadonly action = new Action(`neverShowAgain:${this.key}`, nls.localize('neveragain', \"Don't Show Again\"), undefined, true, (notification: INotificationHandle) => {\n\n\t\t// Hide notification\n\t\tnotification.close();\n\n\t\tthis.storageService.store(this.key, true, StorageScope.GLOBAL);\n\n\t\treturn Promise.resolve(true);\n\t});\n\n\tconstructor(key: string, @IStorageService private readonly storageService: IStorageService) {\n\t\tthis.key = `neverShowAgain:${key}`;\n\t}\n\n\tshouldShow(): boolean {\n\t\treturn !this.storageService.getBoolean(this.key, StorageScope.GLOBAL, false);\n\t}\n}\n\nexport class Win3264BitContribution implements IWorkbenchContribution {\n\n\tprivate static readonly KEY = 'update/win32-64bits';\n\tprivate static readonly URL = 'https://code.visualstudio.com/updates/v1_15#_windows-64-bit';\n\tprivate static readonly INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_15.md#windows-64-bit';\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tif (environmentService.disableUpdates) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst neverShowAgain = new NeverShowAgain(Win3264BitContribution.KEY, storageService);\n\n\t\tif (!neverShowAgain.shouldShow()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst url = product.quality === 'insider'\n\t\t\t? Win3264BitContribution.INSIDER_URL\n\t\t\t: Win3264BitContribution.URL;\n\n\t\tconst handle = notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('64bitisavailable', \"{0} for 64-bit Windows is now available! Click [here]({1}) to learn more.\", product.nameShort, url),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('neveragain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tneverShowAgain.action.run(handle);\n\t\t\t\t\tneverShowAgain.action.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nexport class Linux32BitContribution implements IWorkbenchContribution {\n\n\tprivate static readonly KEY = 'update/linux32-64bits';\n\tprivate static readonly URL = 'https://code.visualstudio.com/updates/v1_32#_linux-32-bit-support-ends-soon';\n\tprivate static readonly INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_32.md#linux-32-bit-support-ends-soon';\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tif (environmentService.disableUpdates) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst neverShowAgain = new NeverShowAgain(Linux32BitContribution.KEY, storageService);\n\n\t\tif (!neverShowAgain.shouldShow()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst url = product.quality === 'insider'\n\t\t\t? Linux32BitContribution.INSIDER_URL\n\t\t\t: Linux32BitContribution.URL;\n\n\t\tconst handle = notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('linux64bits', \"{0} for 32-bit Linux will soon be discontinued. Please update to the 64-bit version.\", product.nameShort, url),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('learnmore', \"Learn More\"),\n\t\t\t\trun: () => {\n\t\t\t\t\twindow.open(url);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: nls.localize('neveragain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tneverShowAgain.action.run(handle);\n\t\t\t\t\tneverShowAgain.action.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nclass CommandAction extends Action {\n\n\tconstructor(\n\t\tcommandId: string,\n\t\tlabel: string,\n\t\t@ICommandService commandService: ICommandService\n\t) {\n\t\tsuper(`command-action:${commandId}`, label, undefined, true, () => commandService.executeCommand(commandId));\n\t}\n}\n\nexport class UpdateContribution implements IGlobalActivity {\n\n\tprivate static readonly showCommandsId = 'workbench.action.showCommands';\n\tprivate static readonly openSettingsId = 'workbench.action.openSettings';\n\tprivate static readonly openKeybindingsId = 'workbench.action.openGlobalKeybindings';\n\tprivate static readonly openUserSnippets = 'workbench.action.openSnippets';\n\tprivate static readonly selectColorThemeId = 'workbench.action.selectTheme';\n\tprivate static readonly selectIconThemeId = 'workbench.action.selectIconTheme';\n\tprivate static readonly showExtensionsId = 'workbench.view.extensions';\n\n\tget id() { return 'vs.update'; }\n\tget name() { return nls.localize('manage', \"Manage\"); }\n\tget cssClass() { return 'update-activity'; }\n\n\tprivate state: UpdateState;\n\tprivate badgeDisposable: IDisposable = Disposable.None;\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IUpdateService private readonly updateService: IUpdateService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tthis.state = updateService.state;\n\n\t\tupdateService.onStateChange(this.onUpdateStateChange, this, this.disposables);\n\t\tthis.onUpdateStateChange(this.updateService.state);\n\n\t\t/*\n\t\tThe `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n\t\tcombination to figure out when to show a message to the user that he should update.\n\n\t\tThis message should appear if the user has received an update notification but hasn't\n\t\tupdated since 5 days.\n\t\t*/\n\n\t\tconst currentVersion = product.commit;\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.GLOBAL);\n\n\t\t// if current version != stored version, clear both fields\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.remove('update/lastKnownVersion', StorageScope.GLOBAL);\n\t\t\tthis.storageService.remove('update/updateNotificationTime', StorageScope.GLOBAL);\n\t\t}\n\t}\n\n\tprivate onUpdateStateChange(state: UpdateState): void {\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Idle:\n\t\t\t\tif (state.error) {\n\t\t\t\t\tthis.onError(state.error);\n\t\t\t\t} else if (this.state.type === StateType.CheckingForUpdates && this.state.context && this.state.context.windowId === this.windowService.getCurrentWindowId()) {\n\t\t\t\t\tthis.onUpdateNotAvailable();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\tthis.onUpdateAvailable(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\tthis.onUpdateDownloaded(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Updating:\n\t\t\t\tthis.onUpdateUpdating(state.update);\n\t\t\t\tbreak;\n\n\t\t\tcase StateType.Ready:\n\t\t\t\tthis.onUpdateReady(state.update);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet badge: IBadge | undefined = undefined;\n\t\tlet clazz: string | undefined;\n\n\t\tif (state.type === StateType.AvailableForDownload || state.type === StateType.Downloaded || state.type === StateType.Ready) {\n\t\t\tbadge = new NumberBadge(1, () => nls.localize('updateIsReady', \"New {0} update available.\", product.nameShort));\n\t\t} else if (state.type === StateType.CheckingForUpdates || state.type === StateType.Downloading || state.type === StateType.Updating) {\n\t\t\tbadge = new ProgressBadge(() => nls.localize('updateIsReady', \"New {0} update available.\", product.nameShort));\n\t\t\tclazz = 'progress-badge';\n\t\t}\n\n\t\tthis.badgeDisposable.dispose();\n\n\t\tif (badge) {\n\t\t\tthis.badgeDisposable = this.activityService.showActivity(this.id, badge, clazz);\n\t\t}\n\n\t\tthis.state = state;\n\t}\n\n\tprivate onError(error: string): void {\n\t\terror = error.replace(/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/, 'See [this link](https://github.com/Microsoft/vscode/issues/7426#issuecomment-425093469) for more information');\n\n\t\tthis.notificationService.notify({\n\t\t\tseverity: Severity.Error,\n\t\t\tmessage: error,\n\t\t\tsource: nls.localize('update service', \"Update Service\"),\n\t\t});\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tthis.dialogService.show(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('noUpdatesAvailable', \"There are currently no updates available.\"),\n\t\t\t[nls.localize('ok', \"OK\")]\n\t\t);\n\t}\n\n\t// linux\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('thereIsUpdateAvailable', \"There is an available update.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('download now', \"Download Now\"),\n\t\t\t\trun: () => this.updateService.downloadUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\t// windows fast updates (target === system)\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (!this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailable', \"There's an update available: {0} {1}\", product.nameLong, update.productVersion),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('installUpdate', \"Install Update\"),\n\t\t\t\trun: () => this.updateService.applyUpdate()\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\t\trun: () => { }\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\t// windows fast updates\n\tprivate onUpdateUpdating(update: IUpdate): void {\n\t\tif (isWindows && product.target === 'user') {\n\t\t\treturn;\n\t\t}\n\n\t\t// windows fast updates (target === system)\n\t\tconst neverShowAgain = new NeverShowAgain('update/win32-fast-updates', this.storageService);\n\n\t\tif (!neverShowAgain.shouldShow()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst handle = this.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateInstalling', \"{0} {1} is being installed in the background; we'll let you know when it's done.\", product.nameLong, update.productVersion),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('neveragain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tneverShowAgain.action.run(handle);\n\t\t\t\t\tneverShowAgain.action.dispose();\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\t}\n\n\t// windows and mac\n\tprivate onUpdateReady(update: IUpdate): void {\n\t\tif (!(isWindows && product.target !== 'user') && !this.shouldShowNotification()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst actions = [{\n\t\t\tlabel: nls.localize('updateNow', \"Update Now\"),\n\t\t\trun: () => this.updateService.quitAndInstall()\n\t\t}, {\n\t\t\tlabel: nls.localize('later', \"Later\"),\n\t\t\trun: () => { }\n\t\t}];\n\n\t\t// TODO@joao check why snap updates send `update` as falsy\n\t\tif (update.productVersion) {\n\t\t\tactions.push({\n\t\t\t\tlabel: nls.localize('releaseNotes', \"Release Notes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tconst action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n\t\t\t\t\taction.run();\n\t\t\t\t\taction.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// windows user fast updates and mac\n\t\tthis.notificationService.prompt(\n\t\t\tseverity.Info,\n\t\t\tnls.localize('updateAvailableAfterRestart', \"Restart {0} to apply the latest update.\", product.nameLong),\n\t\t\tactions,\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\tprivate shouldShowNotification(): boolean {\n\t\tconst currentVersion = product.commit;\n\t\tconst currentMillis = new Date().getTime();\n\t\tconst lastKnownVersion = this.storageService.get('update/lastKnownVersion', StorageScope.GLOBAL);\n\n\t\t// if version != stored version, save version and date\n\t\tif (currentVersion !== lastKnownVersion) {\n\t\t\tthis.storageService.store('update/lastKnownVersion', currentVersion!, StorageScope.GLOBAL);\n\t\t\tthis.storageService.store('update/updateNotificationTime', currentMillis, StorageScope.GLOBAL);\n\t\t}\n\n\t\tconst updateNotificationMillis = this.storageService.getNumber('update/updateNotificationTime', StorageScope.GLOBAL, currentMillis);\n\t\tconst diffDays = (currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n\n\t\treturn diffDays > 5;\n\t}\n\n\tgetActions(): IAction[] {\n\t\tconst result: IAction[] = [\n\t\t\tnew CommandAction(UpdateContribution.showCommandsId, nls.localize('commandPalette', \"Command Palette...\"), this.commandService),\n\t\t\tnew Separator(),\n\t\t\tnew CommandAction(UpdateContribution.openSettingsId, nls.localize('settings', \"Settings\"), this.commandService),\n\t\t\tnew CommandAction(UpdateContribution.showExtensionsId, nls.localize('showExtensions', \"Extensions\"), this.commandService),\n\t\t\tnew CommandAction(UpdateContribution.openKeybindingsId, nls.localize('keyboardShortcuts', \"Keyboard Shortcuts\"), this.commandService),\n\t\t\tnew Separator(),\n\t\t\tnew CommandAction(UpdateContribution.openUserSnippets, nls.localize('userSnippets', \"User Snippets\"), this.commandService),\n\t\t\tnew Separator(),\n\t\t\tnew CommandAction(UpdateContribution.selectColorThemeId, nls.localize('selectTheme.label', \"Color Theme\"), this.commandService),\n\t\t\tnew CommandAction(UpdateContribution.selectIconThemeId, nls.localize('themes.selectIconTheme.label', \"File Icon Theme\"), this.commandService)\n\t\t];\n\n\t\tconst updateAction = this.getUpdateAction();\n\n\t\tif (updateAction) {\n\t\t\tresult.push(new Separator(), updateAction);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate getUpdateAction(): IAction | null {\n\t\tconst state = this.updateService.state;\n\n\t\tswitch (state.type) {\n\t\t\tcase StateType.Uninitialized:\n\t\t\t\treturn null;\n\n\t\t\tcase StateType.Idle:\n\t\t\t\tconst windowId = this.windowService.getCurrentWindowId();\n\t\t\t\treturn new Action('update.check', nls.localize('checkForUpdates', \"Check for Updates...\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.checkForUpdates({ windowId }));\n\n\t\t\tcase StateType.CheckingForUpdates:\n\t\t\t\treturn new Action('update.checking', nls.localize('checkingForUpdates', \"Checking For Updates...\"), undefined, false);\n\n\t\t\tcase StateType.AvailableForDownload:\n\t\t\t\treturn new Action('update.downloadNow', nls.localize('download now', \"Download Now\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.downloadUpdate());\n\n\t\t\tcase StateType.Downloading:\n\t\t\t\treturn new Action('update.downloading', nls.localize('DownloadingUpdate', \"Downloading Update...\"), undefined, false);\n\n\t\t\tcase StateType.Downloaded:\n\t\t\t\treturn new Action('update.install', nls.localize('installUpdate...', \"Install Update...\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.applyUpdate());\n\n\t\t\tcase StateType.Updating:\n\t\t\t\treturn new Action('update.updating', nls.localize('installingUpdate', \"Installing Update...\"), undefined, false);\n\n\t\t\tcase StateType.Ready:\n\t\t\t\treturn new Action('update.restart', nls.localize('restartToUpdate', \"Restart to Update\"), undefined, true, () =>\n\t\t\t\t\tthis.updateService.quitAndInstall());\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n"]}]}