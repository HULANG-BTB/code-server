{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/peekViewWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/peekViewWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/base/common/actions\", \"vs/base/common/color\", \"vs/base/common/event\", \"vs/base/common/objects\", \"vs/base/common/strings\", \"vs/editor/browser/services/codeEditorService\", \"vs/editor/browser/widget/embeddedCodeEditorWidget\", \"vs/editor/contrib/zoneWidget/zoneWidget\", \"vs/nls\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/instantiation/common/extensions\", \"vs/css!./media/peekViewWidget\"], function (require, exports, dom, actionbar_1, actions_1, color_1, event_1, objects, strings, codeEditorService_1, embeddedCodeEditorWidget_1, zoneWidget_1, nls, contextkey_1, instantiation_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IPeekViewService = instantiation_1.createDecorator('IPeekViewService');\n    extensions_1.registerSingleton(exports.IPeekViewService, class {\n        constructor() {\n            this._widgets = new Map();\n        }\n        addExclusiveWidget(editor, widget) {\n            const existing = this._widgets.get(editor);\n            if (existing) {\n                existing.listener.dispose();\n                existing.widget.dispose();\n            }\n            const remove = () => {\n                const data = this._widgets.get(editor);\n                if (data && data.widget === widget) {\n                    data.listener.dispose();\n                    this._widgets.delete(editor);\n                }\n            };\n            this._widgets.set(editor, { widget, listener: widget.onDidClose(remove) });\n        }\n    });\n    var PeekContext;\n    (function (PeekContext) {\n        PeekContext.inPeekEditor = new contextkey_1.RawContextKey('inReferenceSearchEditor', true);\n        PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();\n    })(PeekContext = exports.PeekContext || (exports.PeekContext = {}));\n    function getOuterEditor(accessor) {\n        let editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n        if (editor instanceof embeddedCodeEditorWidget_1.EmbeddedCodeEditorWidget) {\n            return editor.getParentEditor();\n        }\n        return editor;\n    }\n    exports.getOuterEditor = getOuterEditor;\n    const defaultOptions = {\n        headerBackgroundColor: color_1.Color.white,\n        primaryHeadingColor: color_1.Color.fromHex('#333333'),\n        secondaryHeadingColor: color_1.Color.fromHex('#6c6c6cb3')\n    };\n    class PeekViewWidget extends zoneWidget_1.ZoneWidget {\n        constructor(editor, options = {}) {\n            super(editor, options);\n            this._onDidClose = new event_1.Emitter();\n            objects.mixin(this.options, defaultOptions, false);\n        }\n        dispose() {\n            super.dispose();\n            this._onDidClose.fire(this);\n        }\n        get onDidClose() {\n            return this._onDidClose.event;\n        }\n        style(styles) {\n            let options = this.options;\n            if (styles.headerBackgroundColor) {\n                options.headerBackgroundColor = styles.headerBackgroundColor;\n            }\n            if (styles.primaryHeadingColor) {\n                options.primaryHeadingColor = styles.primaryHeadingColor;\n            }\n            if (styles.secondaryHeadingColor) {\n                options.secondaryHeadingColor = styles.secondaryHeadingColor;\n            }\n            super.style(styles);\n        }\n        _applyStyles() {\n            super._applyStyles();\n            let options = this.options;\n            if (this._headElement && options.headerBackgroundColor) {\n                this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();\n            }\n            if (this._primaryHeading && options.primaryHeadingColor) {\n                this._primaryHeading.style.color = options.primaryHeadingColor.toString();\n            }\n            if (this._secondaryHeading && options.secondaryHeadingColor) {\n                this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();\n            }\n            if (this._bodyElement && options.frameColor) {\n                this._bodyElement.style.borderColor = options.frameColor.toString();\n            }\n        }\n        _fillContainer(container) {\n            this.setCssClass('peekview-widget');\n            this._headElement = dom.$('.head');\n            this._bodyElement = dom.$('.body');\n            this._fillHead(this._headElement);\n            this._fillBody(this._bodyElement);\n            container.appendChild(this._headElement);\n            container.appendChild(this._bodyElement);\n        }\n        _fillHead(container) {\n            const titleElement = dom.$('.peekview-title');\n            dom.append(this._headElement, titleElement);\n            dom.addStandardDisposableListener(titleElement, 'click', event => this._onTitleClick(event));\n            this._headingIcon = dom.$('span');\n            this._primaryHeading = dom.$('span.filename');\n            this._secondaryHeading = dom.$('span.dirname');\n            this._metaHeading = dom.$('span.meta');\n            dom.append(titleElement, this._headingIcon, this._primaryHeading, this._secondaryHeading, this._metaHeading);\n            const actionsContainer = dom.$('.peekview-actions');\n            dom.append(this._headElement, actionsContainer);\n            const actionBarOptions = this._getActionBarOptions();\n            this._actionbarWidget = new actionbar_1.ActionBar(actionsContainer, actionBarOptions);\n            this._disposables.push(this._actionbarWidget);\n            this._actionbarWidget.push(new actions_1.Action('peekview.close', nls.localize('label.close', \"Close\"), 'close-peekview-action', true, () => {\n                this.dispose();\n                return Promise.resolve();\n            }), { label: false, icon: true });\n        }\n        _getActionBarOptions() {\n            return {};\n        }\n        _onTitleClick(event) {\n            // implement me\n        }\n        setTitleIcon(iconClassName) {\n            this._headingIcon.className = iconClassName ? `icon ${iconClassName}` : '';\n        }\n        setTitle(primaryHeading, secondaryHeading) {\n            this._primaryHeading.innerHTML = strings.escape(primaryHeading);\n            this._primaryHeading.setAttribute('aria-label', primaryHeading);\n            if (secondaryHeading) {\n                this._secondaryHeading.innerHTML = strings.escape(secondaryHeading);\n            }\n            else {\n                dom.clearNode(this._secondaryHeading);\n            }\n        }\n        setMetaTitle(value) {\n            if (value) {\n                this._metaHeading.innerHTML = strings.escape(value);\n            }\n            else {\n                dom.clearNode(this._metaHeading);\n            }\n        }\n        _doLayout(heightInPixel, widthInPixel) {\n            if (!this._isShowing && heightInPixel < 0) {\n                // Looks like the view zone got folded away!\n                this.dispose();\n                return;\n            }\n            const headHeight = Math.ceil(this.editor.getConfiguration().lineHeight * 1.2);\n            const bodyHeight = heightInPixel - (headHeight + 2 /* the border-top/bottom width*/);\n            this._doLayoutHead(headHeight, widthInPixel);\n            this._doLayoutBody(bodyHeight, widthInPixel);\n        }\n        _doLayoutHead(heightInPixel, widthInPixel) {\n            this._headElement.style.height = `${heightInPixel}px`;\n            this._headElement.style.lineHeight = this._headElement.style.height;\n        }\n        _doLayoutBody(heightInPixel, widthInPixel) {\n            this._bodyElement.style.height = `${heightInPixel}px`;\n        }\n    }\n    exports.PeekViewWidget = PeekViewWidget;\n});\n",null]}