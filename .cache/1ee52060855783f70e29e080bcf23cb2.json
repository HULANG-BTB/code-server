{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"vs/workbench/contrib/markers/browser/markersFileDecorations\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar nls_1 = require(\"vs/nls\");\nvar markersModel_1 = require(\"vs/workbench/contrib/markers/browser/markersModel\");\nvar markersPanel_1 = require(\"vs/workbench/contrib/markers/browser/markersPanel\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar markersPanelActions_1 = require(\"vs/workbench/contrib/markers/browser/markersPanelActions\");\nvar constants_1 = require(\"vs/workbench/contrib/markers/browser/constants\");\nvar messages_1 = require(\"vs/workbench/contrib/markers/browser/messages\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar markers_1 = require(\"vs/workbench/contrib/markers/browser/markers\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar panel_2 = require(\"vs/workbench/common/panel\");\nextensions_1.registerSingleton(markers_1.IMarkersWorkbenchService, markers_1.MarkersWorkbenchService, false);\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: constants_1.default.MARKER_OPEN_SIDE_ACTION_ID,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(constants_1.default.MarkerFocusContextKey),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Enter,\n    mac: {\n        primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.Enter\n    },\n    handler: function (accessor, args) {\n        var markersPanel = accessor.get(panelService_1.IPanelService).getActivePanel();\n        markersPanel.openFileAtElement(markersPanel.getFocusElement(), false, true, true);\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: constants_1.default.MARKER_SHOW_PANEL_ID,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: undefined,\n    primary: undefined,\n    handler: function (accessor, args) {\n        accessor.get(panelService_1.IPanelService).openPanel(constants_1.default.MARKERS_PANEL_ID);\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: constants_1.default.MARKER_SHOW_QUICK_FIX,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: constants_1.default.MarkerFocusContextKey,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_DOT,\n    handler: function (accessor, args) {\n        var markersPanel = accessor.get(panelService_1.IPanelService).getActivePanel();\n        var focusedElement = markersPanel.getFocusElement();\n        if (focusedElement instanceof markersModel_1.Marker) {\n            markersPanel.showQuickFixes(focusedElement);\n        }\n    }\n});\n// configuration\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    'id': 'problems',\n    'order': 101,\n    'title': messages_1.default.PROBLEMS_PANEL_CONFIGURATION_TITLE,\n    'type': 'object',\n    'properties': {\n        'problems.autoReveal': {\n            'description': messages_1.default.PROBLEMS_PANEL_CONFIGURATION_AUTO_REVEAL,\n            'type': 'boolean',\n            'default': true\n        }\n    }\n});\n// markers panel\nplatform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor(markersPanel_1.MarkersPanel, constants_1.default.MARKERS_PANEL_ID, messages_1.default.MARKERS_PANEL_TITLE_PROBLEMS, 'markersPanel', 10, markersPanelActions_1.ToggleMarkersPanelAction.ID));\n// workbench\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(markers_1.ActivityUpdater, lifecycle_1.LifecyclePhase.Restored);\n// actions\nvar registry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(markersPanelActions_1.ToggleMarkersPanelAction, markersPanelActions_1.ToggleMarkersPanelAction.ID, markersPanelActions_1.ToggleMarkersPanelAction.LABEL, {\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_M\n}), 'View: Toggle Problems (Errors, Warnings, Infos)', messages_1.default.MARKERS_PANEL_VIEW_CATEGORY);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(markersPanelActions_1.ShowProblemsPanelAction, markersPanelActions_1.ShowProblemsPanelAction.ID, markersPanelActions_1.ShowProblemsPanelAction.LABEL), 'View: Focus Problems (Errors, Warnings, Infos)', messages_1.default.MARKERS_PANEL_VIEW_CATEGORY);\nactions_2.registerAction({\n    id: constants_1.default.MARKER_COPY_ACTION_ID,\n    title: { value: nls_1.localize('copyMarker', \"Copy\"), original: 'Copy' },\n    handler: function (accessor) {\n        copyMarker(accessor.get(panelService_1.IPanelService), accessor.get(clipboardService_1.IClipboardService));\n    },\n    menu: {\n        menuId: actions_2.MenuId.ProblemsPanelContext,\n        when: constants_1.default.MarkerFocusContextKey,\n        group: 'navigation'\n    },\n    keybinding: {\n        keys: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C\n        },\n        when: constants_1.default.MarkerFocusContextKey\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.MARKER_COPY_MESSAGE_ACTION_ID,\n    title: { value: nls_1.localize('copyMessage', \"Copy Message\"), original: 'Copy Message' },\n    handler: function (accessor) {\n        copyMessage(accessor.get(panelService_1.IPanelService), accessor.get(clipboardService_1.IClipboardService));\n    },\n    menu: {\n        menuId: actions_2.MenuId.ProblemsPanelContext,\n        when: constants_1.default.MarkerFocusContextKey,\n        group: 'navigation'\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.RELATED_INFORMATION_COPY_MESSAGE_ACTION_ID,\n    title: { value: nls_1.localize('copyMessage', \"Copy Message\"), original: 'Copy Message' },\n    handler: function (accessor) {\n        copyRelatedInformationMessage(accessor.get(panelService_1.IPanelService), accessor.get(clipboardService_1.IClipboardService));\n    },\n    menu: {\n        menuId: actions_2.MenuId.ProblemsPanelContext,\n        when: constants_1.default.RelatedInformationFocusContextKey,\n        group: 'navigation'\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.FOCUS_PROBLEMS_FROM_FILTER,\n    handler: function (accessor) {\n        focusProblemsView(accessor.get(panelService_1.IPanelService));\n    },\n    keybinding: {\n        when: constants_1.default.MarkerPanelFilterFocusContextKey,\n        keys: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.DownArrow\n        },\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.MARKERS_PANEL_FOCUS_FILTER,\n    handler: function (accessor) {\n        focusProblemsFilter(accessor.get(panelService_1.IPanelService));\n    },\n    keybinding: {\n        when: constants_1.default.MarkerPanelFocusContextKey,\n        keys: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F\n        },\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.MARKERS_PANEL_SHOW_MULTILINE_MESSAGE,\n    handler: function (accessor) {\n        var panelService = accessor.get(panelService_1.IPanelService);\n        var panel = panelService.getActivePanel();\n        if (panel instanceof markersPanel_1.MarkersPanel) {\n            panel.markersViewModel.multiline = true;\n        }\n    },\n    title: { value: nls_1.localize('show multiline', \"Show message in multiple lines\"), original: 'Problems: Show message in multiple lines' },\n    category: nls_1.localize('problems', \"Problems\"),\n    menu: {\n        menuId: actions_2.MenuId.CommandPalette,\n        when: panel_2.ActivePanelContext.isEqualTo(constants_1.default.MARKERS_PANEL_ID)\n    }\n});\nactions_2.registerAction({\n    id: constants_1.default.MARKERS_PANEL_SHOW_SINGLELINE_MESSAGE,\n    handler: function (accessor) {\n        var panelService = accessor.get(panelService_1.IPanelService);\n        var panel = panelService.getActivePanel();\n        if (panel instanceof markersPanel_1.MarkersPanel) {\n            panel.markersViewModel.multiline = false;\n        }\n    },\n    title: { value: nls_1.localize('show singleline', \"Show message in single line\"), original: 'Problems: Show message in single line' },\n    category: nls_1.localize('problems', \"Problems\"),\n    menu: {\n        menuId: actions_2.MenuId.CommandPalette,\n        when: panel_2.ActivePanelContext.isEqualTo(constants_1.default.MARKERS_PANEL_ID)\n    }\n});\nfunction copyMarker(panelService, clipboardService) {\n    var activePanel = panelService.getActivePanel();\n    if (activePanel instanceof markersPanel_1.MarkersPanel) {\n        var element = activePanel.getFocusElement();\n        if (element instanceof markersModel_1.Marker) {\n            clipboardService.writeText(\"\" + element);\n        }\n    }\n}\nfunction copyMessage(panelService, clipboardService) {\n    var activePanel = panelService.getActivePanel();\n    if (activePanel instanceof markersPanel_1.MarkersPanel) {\n        var element = activePanel.getFocusElement();\n        if (element instanceof markersModel_1.Marker) {\n            clipboardService.writeText(element.marker.message);\n        }\n    }\n}\nfunction copyRelatedInformationMessage(panelService, clipboardService) {\n    var activePanel = panelService.getActivePanel();\n    if (activePanel instanceof markersPanel_1.MarkersPanel) {\n        var element = activePanel.getFocusElement();\n        if (element instanceof markersModel_1.RelatedInformation) {\n            clipboardService.writeText(element.raw.message);\n        }\n    }\n}\nfunction focusProblemsView(panelService) {\n    var activePanel = panelService.getActivePanel();\n    if (activePanel instanceof markersPanel_1.MarkersPanel) {\n        activePanel.focus();\n    }\n}\nfunction focusProblemsFilter(panelService) {\n    var activePanel = panelService.getActivePanel();\n    if (activePanel instanceof markersPanel_1.MarkersPanel) {\n        activePanel.focusFilter();\n    }\n}\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarViewMenu, {\n    group: '4_panels',\n    command: {\n        id: markersPanelActions_1.ToggleMarkersPanelAction.ID,\n        title: nls_1.localize({ key: 'miMarker', comment: ['&& denotes a mnemonic'] }, \"&&Problems\")\n    },\n    order: 4\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markers.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/workbench/contrib/markers/browser/markersFileDecorations';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { localize } from 'vs/nls';\nimport { Marker, RelatedInformation } from 'vs/workbench/contrib/markers/browser/markersModel';\nimport { MarkersPanel } from 'vs/workbench/contrib/markers/browser/markersPanel';\nimport { MenuId, MenuRegistry, SyncActionDescriptor, registerAction } from 'vs/platform/actions/common/actions';\nimport { PanelRegistry, Extensions as PanelExtensions, PanelDescriptor } from 'vs/workbench/browser/panel';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ToggleMarkersPanelAction, ShowProblemsPanelAction } from 'vs/workbench/contrib/markers/browser/markersPanelActions';\nimport Constants from 'vs/workbench/contrib/markers/browser/constants';\nimport Messages from 'vs/workbench/contrib/markers/browser/messages';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IMarkersWorkbenchService, MarkersWorkbenchService, ActivityUpdater } from 'vs/workbench/contrib/markers/browser/markers';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ActivePanelContext } from 'vs/workbench/common/panel';\n\nregisterSingleton(IMarkersWorkbenchService, MarkersWorkbenchService, false);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: Constants.MARKER_OPEN_SIDE_ACTION_ID,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(Constants.MarkerFocusContextKey),\n\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyMod.WinCtrl | KeyCode.Enter\n\t},\n\thandler: (accessor, args: any) => {\n\t\tconst markersPanel = (<MarkersPanel>accessor.get(IPanelService).getActivePanel());\n\t\tmarkersPanel.openFileAtElement(markersPanel.getFocusElement(), false, true, true);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: Constants.MARKER_SHOW_PANEL_ID,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: undefined,\n\thandler: (accessor, args: any) => {\n\t\taccessor.get(IPanelService).openPanel(Constants.MARKERS_PANEL_ID);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: Constants.MARKER_SHOW_QUICK_FIX,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: Constants.MarkerFocusContextKey,\n\tprimary: KeyMod.CtrlCmd | KeyCode.US_DOT,\n\thandler: (accessor, args: any) => {\n\t\tconst markersPanel = (<MarkersPanel>accessor.get(IPanelService).getActivePanel());\n\t\tconst focusedElement = markersPanel.getFocusElement();\n\t\tif (focusedElement instanceof Marker) {\n\t\t\tmarkersPanel.showQuickFixes(focusedElement);\n\t\t}\n\t}\n});\n\n// configuration\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t'id': 'problems',\n\t'order': 101,\n\t'title': Messages.PROBLEMS_PANEL_CONFIGURATION_TITLE,\n\t'type': 'object',\n\t'properties': {\n\t\t'problems.autoReveal': {\n\t\t\t'description': Messages.PROBLEMS_PANEL_CONFIGURATION_AUTO_REVEAL,\n\t\t\t'type': 'boolean',\n\t\t\t'default': true\n\t\t}\n\t}\n});\n\n\n// markers panel\nRegistry.as<PanelRegistry>(PanelExtensions.Panels).registerPanel(new PanelDescriptor(\n\tMarkersPanel,\n\tConstants.MARKERS_PANEL_ID,\n\tMessages.MARKERS_PANEL_TITLE_PROBLEMS,\n\t'markersPanel',\n\t10,\n\tToggleMarkersPanelAction.ID\n));\n\n// workbench\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ActivityUpdater, LifecyclePhase.Restored);\n\n// actions\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMarkersPanelAction, ToggleMarkersPanelAction.ID, ToggleMarkersPanelAction.LABEL, {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_M\n}), 'View: Toggle Problems (Errors, Warnings, Infos)', Messages.MARKERS_PANEL_VIEW_CATEGORY);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ShowProblemsPanelAction, ShowProblemsPanelAction.ID, ShowProblemsPanelAction.LABEL), 'View: Focus Problems (Errors, Warnings, Infos)', Messages.MARKERS_PANEL_VIEW_CATEGORY);\nregisterAction({\n\tid: Constants.MARKER_COPY_ACTION_ID,\n\ttitle: { value: localize('copyMarker', \"Copy\"), original: 'Copy' },\n\thandler(accessor) {\n\t\tcopyMarker(accessor.get(IPanelService), accessor.get(IClipboardService));\n\t},\n\tmenu: {\n\t\tmenuId: MenuId.ProblemsPanelContext,\n\t\twhen: Constants.MarkerFocusContextKey,\n\t\tgroup: 'navigation'\n\t},\n\tkeybinding: {\n\t\tkeys: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_C\n\t\t},\n\t\twhen: Constants.MarkerFocusContextKey\n\t}\n});\nregisterAction({\n\tid: Constants.MARKER_COPY_MESSAGE_ACTION_ID,\n\ttitle: { value: localize('copyMessage', \"Copy Message\"), original: 'Copy Message' },\n\thandler(accessor) {\n\t\tcopyMessage(accessor.get(IPanelService), accessor.get(IClipboardService));\n\t},\n\tmenu: {\n\t\tmenuId: MenuId.ProblemsPanelContext,\n\t\twhen: Constants.MarkerFocusContextKey,\n\t\tgroup: 'navigation'\n\t}\n});\nregisterAction({\n\tid: Constants.RELATED_INFORMATION_COPY_MESSAGE_ACTION_ID,\n\ttitle: { value: localize('copyMessage', \"Copy Message\"), original: 'Copy Message' },\n\thandler(accessor) {\n\t\tcopyRelatedInformationMessage(accessor.get(IPanelService), accessor.get(IClipboardService));\n\t},\n\tmenu: {\n\t\tmenuId: MenuId.ProblemsPanelContext,\n\t\twhen: Constants.RelatedInformationFocusContextKey,\n\t\tgroup: 'navigation'\n\t}\n});\nregisterAction({\n\tid: Constants.FOCUS_PROBLEMS_FROM_FILTER,\n\thandler(accessor) {\n\t\tfocusProblemsView(accessor.get(IPanelService));\n\t},\n\tkeybinding: {\n\t\twhen: Constants.MarkerPanelFilterFocusContextKey,\n\t\tkeys: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow\n\t\t},\n\t}\n});\nregisterAction({\n\tid: Constants.MARKERS_PANEL_FOCUS_FILTER,\n\thandler(accessor) {\n\t\tfocusProblemsFilter(accessor.get(IPanelService));\n\t},\n\tkeybinding: {\n\t\twhen: Constants.MarkerPanelFocusContextKey,\n\t\tkeys: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_F\n\t\t},\n\t}\n});\nregisterAction({\n\tid: Constants.MARKERS_PANEL_SHOW_MULTILINE_MESSAGE,\n\thandler(accessor) {\n\t\tconst panelService = accessor.get(IPanelService);\n\t\tconst panel = panelService.getActivePanel();\n\t\tif (panel instanceof MarkersPanel) {\n\t\t\tpanel.markersViewModel.multiline = true;\n\t\t}\n\t},\n\ttitle: { value: localize('show multiline', \"Show message in multiple lines\"), original: 'Problems: Show message in multiple lines' },\n\tcategory: localize('problems', \"Problems\"),\n\tmenu: {\n\t\tmenuId: MenuId.CommandPalette,\n\t\twhen: ActivePanelContext.isEqualTo(Constants.MARKERS_PANEL_ID)\n\t}\n});\nregisterAction({\n\tid: Constants.MARKERS_PANEL_SHOW_SINGLELINE_MESSAGE,\n\thandler(accessor) {\n\t\tconst panelService = accessor.get(IPanelService);\n\t\tconst panel = panelService.getActivePanel();\n\t\tif (panel instanceof MarkersPanel) {\n\t\t\tpanel.markersViewModel.multiline = false;\n\t\t}\n\t},\n\ttitle: { value: localize('show singleline', \"Show message in single line\"), original: 'Problems: Show message in single line' },\n\tcategory: localize('problems', \"Problems\"),\n\tmenu: {\n\t\tmenuId: MenuId.CommandPalette,\n\t\twhen: ActivePanelContext.isEqualTo(Constants.MARKERS_PANEL_ID)\n\t}\n});\n\nfunction copyMarker(panelService: IPanelService, clipboardService: IClipboardService) {\n\tconst activePanel = panelService.getActivePanel();\n\tif (activePanel instanceof MarkersPanel) {\n\t\tconst element = (<MarkersPanel>activePanel).getFocusElement();\n\t\tif (element instanceof Marker) {\n\t\t\tclipboardService.writeText(`${element}`);\n\t\t}\n\t}\n}\n\nfunction copyMessage(panelService: IPanelService, clipboardService: IClipboardService) {\n\tconst activePanel = panelService.getActivePanel();\n\tif (activePanel instanceof MarkersPanel) {\n\t\tconst element = (<MarkersPanel>activePanel).getFocusElement();\n\t\tif (element instanceof Marker) {\n\t\t\tclipboardService.writeText(element.marker.message);\n\t\t}\n\t}\n}\n\nfunction copyRelatedInformationMessage(panelService: IPanelService, clipboardService: IClipboardService) {\n\tconst activePanel = panelService.getActivePanel();\n\tif (activePanel instanceof MarkersPanel) {\n\t\tconst element = (<MarkersPanel>activePanel).getFocusElement();\n\t\tif (element instanceof RelatedInformation) {\n\t\t\tclipboardService.writeText(element.raw.message);\n\t\t}\n\t}\n}\n\nfunction focusProblemsView(panelService: IPanelService) {\n\tconst activePanel = panelService.getActivePanel();\n\tif (activePanel instanceof MarkersPanel) {\n\t\tactivePanel.focus();\n\t}\n}\n\nfunction focusProblemsFilter(panelService: IPanelService) {\n\tconst activePanel = panelService.getActivePanel();\n\tif (activePanel instanceof MarkersPanel) {\n\t\tactivePanel.focusFilter();\n\t}\n}\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '4_panels',\n\tcommand: {\n\t\tid: ToggleMarkersPanelAction.ID,\n\t\ttitle: localize({ key: 'miMarker', comment: ['&& denotes a mnemonic'] }, \"&&Problems\")\n\t},\n\torder: 4\n});\n"]}]}