{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/textSearchAdapter.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/textSearchAdapter.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/node/extfs\", \"vs/workbench/services/search/node/ripgrepTextSearchEngine\", \"vs/workbench/services/search/node/textSearchManager\"], function (require, exports, extfs, ripgrepTextSearchEngine_1, textSearchManager_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TextSearchEngineAdapter {\n        constructor(query) {\n            this.query = query;\n        }\n        search(token, onResult, onMessage) {\n            if ((!this.query.folderQueries || !this.query.folderQueries.length) && (!this.query.extraFileResources || !this.query.extraFileResources.length)) {\n                return Promise.resolve({\n                    type: 'success',\n                    limitHit: false,\n                    stats: {\n                        type: 'searchProcess'\n                    }\n                });\n            }\n            const pretendOutputChannel = {\n                appendLine(msg) {\n                    onMessage({ message: msg });\n                }\n            };\n            const textSearchManager = new textSearchManager_1.TextSearchManager(this.query, new ripgrepTextSearchEngine_1.RipgrepTextSearchEngine(pretendOutputChannel), extfs);\n            return new Promise((resolve, reject) => {\n                return textSearchManager\n                    .search(matches => {\n                    onResult(matches.map(fileMatchToSerialized));\n                }, token)\n                    .then(c => resolve({ limitHit: c.limitHit, type: 'success' }), reject);\n            });\n        }\n    }\n    exports.TextSearchEngineAdapter = TextSearchEngineAdapter;\n    function fileMatchToSerialized(match) {\n        return {\n            path: match.resource && match.resource.fsPath,\n            results: match.results,\n            numMatches: (match.results || []).reduce((sum, r) => {\n                if (!!r.ranges) {\n                    const m = r;\n                    return sum + (Array.isArray(m.ranges) ? m.ranges.length : 1);\n                }\n                else {\n                    return sum + 1;\n                }\n            }, 0)\n        };\n    }\n});\n",null]}