{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/config/fontInfo.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/config/fontInfo.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/browser\", \"vs/editor/common/config/editorOptions\", \"vs/editor/common/config/editorZoom\"], function (require, exports, browser, editorOptions_1, editorZoom_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Determined from empirical observations.\n     * @internal\n     */\n    const GOLDEN_LINE_HEIGHT_RATIO = browser.isMacintosh ? 1.5 : 1.35;\n    /**\n     * Font settings maximum and minimum limits\n     */\n    const MINIMUM_FONT_SIZE = 8;\n    const MAXIMUM_FONT_SIZE = 100;\n    const MINIMUM_LINE_HEIGHT = 8;\n    const MAXIMUM_LINE_HEIGHT = 150;\n    const MINIMUM_LETTER_SPACING = -5;\n    const MAXIMUM_LETTER_SPACING = 20;\n    function safeParseFloat(n, defaultValue) {\n        if (typeof n === 'number') {\n            return n;\n        }\n        if (typeof n === 'undefined') {\n            return defaultValue;\n        }\n        let r = parseFloat(n);\n        if (isNaN(r)) {\n            return defaultValue;\n        }\n        return r;\n    }\n    function safeParseInt(n, defaultValue) {\n        if (typeof n === 'number') {\n            return Math.round(n);\n        }\n        if (typeof n === 'undefined') {\n            return defaultValue;\n        }\n        let r = parseInt(n);\n        if (isNaN(r)) {\n            return defaultValue;\n        }\n        return r;\n    }\n    function clamp(n, min, max) {\n        if (n < min) {\n            return min;\n        }\n        if (n > max) {\n            return max;\n        }\n        return n;\n    }\n    function _string(value, defaultValue) {\n        if (typeof value !== 'string') {\n            return defaultValue;\n        }\n        return value;\n    }\n    class BareFontInfo {\n        /**\n         * @internal\n         */\n        static createFromRawSettings(opts, zoomLevel, ignoreEditorZoom = false) {\n            let fontFamily = _string(opts.fontFamily, editorOptions_1.EDITOR_FONT_DEFAULTS.fontFamily);\n            let fontWeight = _string(opts.fontWeight, editorOptions_1.EDITOR_FONT_DEFAULTS.fontWeight);\n            let fontSize = safeParseFloat(opts.fontSize, editorOptions_1.EDITOR_FONT_DEFAULTS.fontSize);\n            fontSize = clamp(fontSize, 0, MAXIMUM_FONT_SIZE);\n            if (fontSize === 0) {\n                fontSize = editorOptions_1.EDITOR_FONT_DEFAULTS.fontSize;\n            }\n            else if (fontSize < MINIMUM_FONT_SIZE) {\n                fontSize = MINIMUM_FONT_SIZE;\n            }\n            let lineHeight = safeParseInt(opts.lineHeight, 0);\n            lineHeight = clamp(lineHeight, 0, MAXIMUM_LINE_HEIGHT);\n            if (lineHeight === 0) {\n                lineHeight = Math.round(GOLDEN_LINE_HEIGHT_RATIO * fontSize);\n            }\n            else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n                lineHeight = MINIMUM_LINE_HEIGHT;\n            }\n            let letterSpacing = safeParseFloat(opts.letterSpacing, 0);\n            letterSpacing = clamp(letterSpacing, MINIMUM_LETTER_SPACING, MAXIMUM_LETTER_SPACING);\n            let editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : editorZoom_1.EditorZoom.getZoomLevel() * 0.1);\n            fontSize *= editorZoomLevelMultiplier;\n            lineHeight *= editorZoomLevelMultiplier;\n            return new BareFontInfo({\n                zoomLevel: zoomLevel,\n                fontFamily: fontFamily,\n                fontWeight: fontWeight,\n                fontSize: fontSize,\n                lineHeight: lineHeight,\n                letterSpacing: letterSpacing\n            });\n        }\n        /**\n         * @internal\n         */\n        constructor(opts) {\n            this.zoomLevel = opts.zoomLevel;\n            this.fontFamily = String(opts.fontFamily);\n            this.fontWeight = String(opts.fontWeight);\n            this.fontSize = opts.fontSize;\n            this.lineHeight = opts.lineHeight | 0;\n            this.letterSpacing = opts.letterSpacing;\n        }\n        /**\n         * @internal\n         */\n        getId() {\n            return this.zoomLevel + '-' + this.fontFamily + '-' + this.fontWeight + '-' + this.fontSize + '-' + this.lineHeight + '-' + this.letterSpacing;\n        }\n        /**\n         * @internal\n         */\n        getMassagedFontFamily() {\n            if (/[,\"']/.test(this.fontFamily)) {\n                // Looks like the font family might be already escaped\n                return this.fontFamily;\n            }\n            if (/[+ ]/.test(this.fontFamily)) {\n                // Wrap a font family using + or <space> with quotes\n                return `\"${this.fontFamily}\"`;\n            }\n            return this.fontFamily;\n        }\n    }\n    exports.BareFontInfo = BareFontInfo;\n    class FontInfo extends BareFontInfo {\n        /**\n         * @internal\n         */\n        constructor(opts, isTrusted) {\n            super(opts);\n            this.isTrusted = isTrusted;\n            this.isMonospace = opts.isMonospace;\n            this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n            this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n            this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n            this.spaceWidth = opts.spaceWidth;\n            this.maxDigitWidth = opts.maxDigitWidth;\n        }\n        /**\n         * @internal\n         */\n        equals(other) {\n            return (this.fontFamily === other.fontFamily\n                && this.fontWeight === other.fontWeight\n                && this.fontSize === other.fontSize\n                && this.lineHeight === other.lineHeight\n                && this.letterSpacing === other.letterSpacing\n                && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth\n                && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth\n                && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n                && this.spaceWidth === other.spaceWidth\n                && this.maxDigitWidth === other.maxDigitWidth);\n        }\n    }\n    exports.FontInfo = FontInfo;\n});\n",null]}