{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar heap_1 = require(\"vs/workbench/services/heap/common/heap\");\nvar HeapService = /** @class */ (function () {\n    function HeapService() {\n        this._onGarbageCollection = new event_1.Emitter();\n        this.onGarbageCollection = this._onGarbageCollection.event;\n        this._activeSignals = new WeakMap();\n        this._activeIds = new Set();\n        //\n    }\n    HeapService.prototype.dispose = function () {\n        clearInterval(this._consumeHandle);\n    };\n    HeapService.prototype.trackObject = function (obj) {\n        var _this = this;\n        if (typeof process === 'undefined' || typeof process.stdout === 'undefined') {\n            return;\n        } // Doesn't work in the browser (for running the extension host in worker).\n        if (!obj) {\n            return;\n        }\n        var ident = obj.$ident;\n        if (typeof ident !== 'number') {\n            return;\n        }\n        if (this._activeIds.has(ident)) {\n            return;\n        }\n        if (this._ctor) {\n            // track and leave\n            this._activeIds.add(ident);\n            this._activeSignals.set(obj, new this._ctor(ident));\n        }\n        else {\n            // make sure to load gc-signals, then track and leave\n            if (!this._ctorInit) {\n                this._ctorInit = Promise.resolve().then(function () { return require('gc-signals'); }).then(function (_a) {\n                    var GCSignal = _a.GCSignal, consumeSignals = _a.consumeSignals;\n                    _this._ctor = GCSignal;\n                    _this._consumeHandle = setInterval(function () {\n                        var ids = consumeSignals();\n                        if (ids.length > 0) {\n                            // local book-keeping\n                            for (var _i = 0, ids_1 = ids; _i < ids_1.length; _i++) {\n                                var id = ids_1[_i];\n                                _this._activeIds.delete(id);\n                            }\n                            // fire event\n                            _this._onGarbageCollection.fire(ids);\n                        }\n                    }, 15 * 1000);\n                });\n            }\n            this._ctorInit.then(function () {\n                _this._activeIds.add(ident);\n                _this._activeSignals.set(obj, new _this._ctor(ident));\n            });\n        }\n    };\n    return HeapService;\n}());\nexports.HeapService = HeapService;\nextensions_1.registerSingleton(heap_1.IHeapService, HeapService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/heap/node/heap.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,0EAAgF;AAChF,8CAAsD;AAEtD,+DAAwF;AAExF;IAcC;QAViB,yBAAoB,GAAsB,IAAI,eAAO,EAAY,CAAC;QACnE,wBAAmB,GAAoB,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC;QAE/E,mBAAc,GAAG,IAAI,OAAO,EAAe,CAAC;QAC5C,eAAU,GAAG,IAAI,GAAG,EAAU,CAAC;QAOtC,EAAE;IACH,CAAC;IAED,6BAAO,GAAP;QACC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAED,iCAAW,GAAX,UAAY,GAAwC;QAApD,iBA6CC;QA5CA,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,OAAO,CAAC,MAAM,KAAK,WAAW,EAAE;YAAE,OAAO;SAAE,CAAC,0EAA0E;QACnK,IAAI,CAAC,GAAG,EAAE;YACT,OAAO;SACP;QAED,IAAM,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC;QACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,OAAO;SACP;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC/B,OAAO;SACP;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACf,kBAAkB;YAClB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SAEpD;aAAM;YACN,qDAAqD;YACrD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpB,IAAI,CAAC,SAAS,GAAG,oDAAO,YAAY,MAAE,IAAI,CAAC,UAAC,EAA4B;wBAA1B,sBAAQ,EAAE,kCAAc;oBACrE,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;oBACtB,KAAI,CAAC,cAAc,GAAG,WAAW,CAAC;wBACjC,IAAM,GAAG,GAAG,cAAc,EAAE,CAAC;wBAE7B,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;4BACnB,qBAAqB;4BACrB,KAAiB,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG,EAAE;gCAAjB,IAAM,EAAE,YAAA;gCACZ,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;6BAC3B;4BACD,aAAa;4BACb,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBACpC;oBACF,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC;aACH;YAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;gBACnB,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAC3B,KAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;SACH;IACF,CAAC;IACF,kBAAC;AAAD,CAAC,AApED,IAoEC;AApEY,kCAAW;AAsExB,8BAAiB,CAAC,mBAAY,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { GCSignal } from 'gc-signals';\nimport { IHeapService, ObjectIdentifier } from 'vs/workbench/services/heap/common/heap';\n\nexport class HeapService implements IHeapService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onGarbageCollection: Emitter<number[]> = new Emitter<number[]>();\n\tpublic readonly onGarbageCollection: Event<number[]> = this._onGarbageCollection.event;\n\n\tprivate _activeSignals = new WeakMap<any, object>();\n\tprivate _activeIds = new Set<number>();\n\n\tprivate _consumeHandle: any;\n\tprivate _ctor: { new(id: number): GCSignal };\n\tprivate _ctorInit: Promise<void>;\n\n\tconstructor() {\n\t\t//\n\t}\n\n\tdispose() {\n\t\tclearInterval(this._consumeHandle);\n\t}\n\n\ttrackObject(obj: ObjectIdentifier | undefined | null): void {\n\t\tif (typeof process === 'undefined' || typeof process.stdout === 'undefined') { return; } // Doesn't work in the browser (for running the extension host in worker).\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ident = obj.$ident;\n\t\tif (typeof ident !== 'number') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._activeIds.has(ident)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._ctor) {\n\t\t\t// track and leave\n\t\t\tthis._activeIds.add(ident);\n\t\t\tthis._activeSignals.set(obj, new this._ctor(ident));\n\n\t\t} else {\n\t\t\t// make sure to load gc-signals, then track and leave\n\t\t\tif (!this._ctorInit) {\n\t\t\t\tthis._ctorInit = import('gc-signals').then(({ GCSignal, consumeSignals }) => {\n\t\t\t\t\tthis._ctor = GCSignal;\n\t\t\t\t\tthis._consumeHandle = setInterval(() => {\n\t\t\t\t\t\tconst ids = consumeSignals();\n\n\t\t\t\t\t\tif (ids.length > 0) {\n\t\t\t\t\t\t\t// local book-keeping\n\t\t\t\t\t\t\tfor (const id of ids) {\n\t\t\t\t\t\t\t\tthis._activeIds.delete(id);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// fire event\n\t\t\t\t\t\t\tthis._onGarbageCollection.fire(ids);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 15 * 1000);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._ctorInit.then(() => {\n\t\t\t\tthis._activeIds.add(ident);\n\t\t\t\tthis._activeSignals.set(obj, new this._ctor(ident));\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterSingleton(IHeapService, HeapService, true);\n"]}]}