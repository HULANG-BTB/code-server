{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/worker/workerMain.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/worker/workerMain.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    (function () {\n        let MonacoEnvironment = self.MonacoEnvironment;\n        let monacoBaseUrl = MonacoEnvironment && MonacoEnvironment.baseUrl ? MonacoEnvironment.baseUrl : '../../../';\n        if (typeof self.define !== 'function' || !self.define.amd) {\n            importScripts(monacoBaseUrl + 'vs/loader.js');\n        }\n        require.config({\n            baseUrl: monacoBaseUrl,\n            catchError: true\n        });\n        let loadCode = function (moduleId) {\n            require([moduleId], function (ws) {\n                setTimeout(function () {\n                    let messageHandler = ws.create((msg) => {\n                        self.postMessage(msg);\n                    }, null);\n                    self.onmessage = (e) => messageHandler.onmessage(e.data);\n                    while (beforeReadyMessages.length > 0) {\n                        self.onmessage(beforeReadyMessages.shift());\n                    }\n                }, 0);\n            });\n        };\n        let isFirstMessage = true;\n        let beforeReadyMessages = [];\n        self.onmessage = (message) => {\n            if (!isFirstMessage) {\n                beforeReadyMessages.push(message);\n                return;\n            }\n            isFirstMessage = false;\n            loadCode(message.data);\n        };\n    })();\n});\n",null]}