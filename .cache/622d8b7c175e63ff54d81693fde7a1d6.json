{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/platform/actions/common/actions\", \"vs/platform/registry/common/platform\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/workbench/common/actions\", \"vs/workbench/browser/viewlet\", \"vs/workbench/browser/panel\", \"vs/workbench/browser/parts/statusbar/statusbar\", \"vs/platform/statusbar/common/statusbar\", \"vs/workbench/contrib/debug/browser/breakpointsView\", \"vs/workbench/contrib/debug/browser/callStackView\", \"vs/workbench/common/contributions\", \"vs/workbench/contrib/debug/common/debug\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/workbench/services/panel/common/panelService\", \"vs/workbench/contrib/debug/browser/debugEditorModelManager\", \"vs/workbench/contrib/debug/browser/debugActions\", \"vs/workbench/contrib/debug/browser/debugToolBar\", \"vs/workbench/contrib/debug/electron-browser/debugService\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/workbench/contrib/debug/browser/debugCommands\", \"vs/workbench/browser/quickopen\", \"vs/workbench/contrib/debug/browser/statusbarColorProvider\", \"vs/workbench/common/views\", \"vs/base/browser/browser\", \"vs/platform/contextkey/common/contextkey\", \"vs/base/common/uri\", \"vs/workbench/contrib/debug/browser/debugViewlet\", \"vs/workbench/contrib/debug/browser/debugQuickOpen\", \"vs/workbench/contrib/debug/browser/debugStatus\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/workbench/services/configuration/common/configuration\", \"vs/workbench/services/editor/common/editorGroupsService\", \"vs/workbench/contrib/debug/browser/loadedScriptsView\", \"vs/workbench/contrib/debug/browser/debugEditorActions\", \"vs/workbench/contrib/debug/browser/watchExpressionsView\", \"vs/workbench/contrib/debug/browser/variablesView\", \"vs/workbench/contrib/debug/browser/repl\", \"vs/workbench/contrib/debug/common/debugContentProvider\", \"vs/css!../browser/media/debug.contribution\", \"vs/css!../browser/media/debugHover\"], function (require, exports, nls, keyCodes_1, actions_1, platform_1, extensions_1, configurationRegistry_1, actions_2, viewlet_1, panel_1, statusbar_1, statusbar_2, breakpointsView_1, callStackView_1, contributions_1, debug_1, layoutService_1, panelService_1, debugEditorModelManager_1, debugActions_1, debugToolBar_1, service, viewlet_2, debugCommands_1, quickopen_1, statusbarColorProvider_1, views_1, browser_1, contextkey_1, uri_1, debugViewlet_1, debugQuickOpen_1, debugStatus_1, lifecycle_1, configuration_1, editorGroupsService_1, loadedScriptsView_1, debugEditorActions_1, watchExpressionsView_1, variablesView_1, repl_1, debugContentProvider_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let OpenDebugViewletAction = class OpenDebugViewletAction extends viewlet_1.ShowViewletAction {\n        constructor(id, label, viewletService, editorGroupService, layoutService) {\n            super(id, label, debug_1.VIEWLET_ID, viewletService, editorGroupService, layoutService);\n        }\n    };\n    OpenDebugViewletAction.ID = debug_1.VIEWLET_ID;\n    OpenDebugViewletAction.LABEL = nls.localize('toggleDebugViewlet', \"Show Debug\");\n    OpenDebugViewletAction = __decorate([\n        __param(2, viewlet_2.IViewletService),\n        __param(3, editorGroupsService_1.IEditorGroupsService),\n        __param(4, layoutService_1.IWorkbenchLayoutService)\n    ], OpenDebugViewletAction);\n    let OpenDebugPanelAction = class OpenDebugPanelAction extends panel_1.TogglePanelAction {\n        constructor(id, label, panelService, layoutService) {\n            super(id, label, debug_1.REPL_ID, panelService, layoutService);\n        }\n    };\n    OpenDebugPanelAction.ID = 'workbench.debug.action.toggleRepl';\n    OpenDebugPanelAction.LABEL = nls.localize('toggleDebugPanel', \"Debug Console\");\n    OpenDebugPanelAction = __decorate([\n        __param(2, panelService_1.IPanelService),\n        __param(3, layoutService_1.IWorkbenchLayoutService)\n    ], OpenDebugPanelAction);\n    // register viewlet\n    platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor(debugViewlet_1.DebugViewlet, debug_1.VIEWLET_ID, nls.localize('debug', \"Debug\"), 'debug', 3));\n    const openViewletKb = {\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_D\n    };\n    const openPanelKb = {\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Y\n    };\n    // register repl panel\n    platform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor(repl_1.Repl, debug_1.REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'), 'repl', 30, OpenDebugPanelAction.ID));\n    platform_1.Registry.as(panel_1.Extensions.Panels).setDefaultPanelId(debug_1.REPL_ID);\n    // Register default debug views\n    const viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\n    viewsRegistry.registerViews([{ id: debug_1.VARIABLES_VIEW_ID, name: nls.localize('variables', \"Variables\"), ctorDescriptor: { ctor: variablesView_1.VariablesView }, order: 10, weight: 40, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' } }], debug_1.VIEW_CONTAINER);\n    viewsRegistry.registerViews([{ id: debug_1.WATCH_VIEW_ID, name: nls.localize('watch', \"Watch\"), ctorDescriptor: { ctor: watchExpressionsView_1.WatchExpressionsView }, order: 20, weight: 10, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' } }], debug_1.VIEW_CONTAINER);\n    viewsRegistry.registerViews([{ id: debug_1.CALLSTACK_VIEW_ID, name: nls.localize('callStack', \"Call Stack\"), ctorDescriptor: { ctor: callStackView_1.CallStackView }, order: 30, weight: 30, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' } }], debug_1.VIEW_CONTAINER);\n    viewsRegistry.registerViews([{ id: debug_1.BREAKPOINTS_VIEW_ID, name: nls.localize('breakpoints', \"Breakpoints\"), ctorDescriptor: { ctor: breakpointsView_1.BreakpointsView }, order: 40, weight: 20, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' } }], debug_1.VIEW_CONTAINER);\n    viewsRegistry.registerViews([{ id: debug_1.LOADED_SCRIPTS_VIEW_ID, name: nls.localize('loadedScripts', \"Loaded Scripts\"), ctorDescriptor: { ctor: loadedScriptsView_1.LoadedScriptsView }, order: 35, weight: 5, canToggleVisibility: true, collapsed: true, when: debug_1.CONTEXT_LOADED_SCRIPTS_SUPPORTED }], debug_1.VIEW_CONTAINER);\n    debugCommands_1.registerCommands();\n    // register action to open viewlet\n    const registry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugPanelAction, OpenDebugPanelAction.ID, OpenDebugPanelAction.LABEL, openPanelKb), 'View: Debug Console', nls.localize('view', \"View\"));\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugViewletAction, OpenDebugViewletAction.ID, OpenDebugViewletAction.LABEL, openViewletKb), 'View: Show Debug', nls.localize('view', \"View\"));\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugEditorModelManager_1.DebugEditorModelManager, lifecycle_1.LifecyclePhase.Restored);\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugToolBar_1.DebugToolBar, lifecycle_1.LifecyclePhase.Restored);\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugContentProvider_1.DebugContentProvider, lifecycle_1.LifecyclePhase.Eventually);\n    platform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(statusbarColorProvider_1.StatusBarColorProvider, lifecycle_1.LifecyclePhase.Eventually);\n    const debugCategory = nls.localize('debugCategory', \"Debug\");\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StartAction, debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL, { primary: keyCodes_1.KeyCode.F5 }, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Debugging', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ConfigureAction, debugActions_1.ConfigureAction.ID, debugActions_1.ConfigureAction.LABEL), 'Debug: Open launch.json', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.AddFunctionBreakpointAction, debugActions_1.AddFunctionBreakpointAction.ID, debugActions_1.AddFunctionBreakpointAction.LABEL), 'Debug: Add Function Breakpoint', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ReapplyBreakpointsAction, debugActions_1.ReapplyBreakpointsAction.ID, debugActions_1.ReapplyBreakpointsAction.LABEL), 'Debug: Reapply All Breakpoints', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RunAction, debugActions_1.RunAction.ID, debugActions_1.RunAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F5, mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.F5 } }, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Without Debugging', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RemoveAllBreakpointsAction, debugActions_1.RemoveAllBreakpointsAction.ID, debugActions_1.RemoveAllBreakpointsAction.LABEL), 'Debug: Remove All Breakpoints', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.EnableAllBreakpointsAction, debugActions_1.EnableAllBreakpointsAction.ID, debugActions_1.EnableAllBreakpointsAction.LABEL), 'Debug: Enable All Breakpoints', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.DisableAllBreakpointsAction, debugActions_1.DisableAllBreakpointsAction.ID, debugActions_1.DisableAllBreakpointsAction.LABEL), 'Debug: Disable All Breakpoints', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.SelectAndStartAction, debugActions_1.SelectAndStartAction.ID, debugActions_1.SelectAndStartAction.LABEL), 'Debug: Select and Start Debugging', debugCategory);\n    registry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(repl_1.ClearReplAction, repl_1.ClearReplAction.ID, repl_1.ClearReplAction.LABEL), 'Debug: Clear Console', debugCategory);\n    const registerDebugCommandPaletteItem = (id, title, when, precondition) => {\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n            when,\n            command: {\n                id,\n                title: `Debug: ${title}`,\n                precondition\n            }\n        });\n    };\n    const restartLabel = nls.localize('restartDebug', \"Restart\");\n    const stepOverLabel = nls.localize('stepOverDebug', \"Step Over\");\n    const stepIntoLabel = nls.localize('stepIntoDebug', \"Step Into\");\n    const stepOutLabel = nls.localize('stepOutDebug', \"Step Out\");\n    const pauseLabel = nls.localize('pauseDebug', \"Pause\");\n    const disconnectLabel = nls.localize('disconnect', \"Disconnect\");\n    const stopLabel = nls.localize('stop', \"Stop\");\n    const continueLabel = nls.localize('continueDebug', \"Continue\");\n    registerDebugCommandPaletteItem(debugCommands_1.RESTART_SESSION_ID, restartLabel);\n    registerDebugCommandPaletteItem(debugCommands_1.TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), debug_1.CONTEXT_IN_DEBUG_MODE);\n    registerDebugCommandPaletteItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCommandPaletteItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCommandPaletteItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCommandPaletteItem(debugCommands_1.PAUSE_ID, pauseLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('running'));\n    registerDebugCommandPaletteItem(debugCommands_1.DISCONNECT_ID, disconnectLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH);\n    registerDebugCommandPaletteItem(debugCommands_1.STOP_ID, stopLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\n    registerDebugCommandPaletteItem(debugCommands_1.CONTINUE_ID, continueLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCommandPaletteItem(debugCommands_1.FOCUS_REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus on Debug Console View'));\n    // Register Quick Open\n    (platform_1.Registry.as(quickopen_1.Extensions.Quickopen)).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(debugQuickOpen_1.DebugQuickOpenHandler, debugQuickOpen_1.DebugQuickOpenHandler.ID, 'debug ', 'inLaunchConfigurationsPicker', nls.localize('debugCommands', \"Debug Configuration\")));\n    // register service\n    extensions_1.registerSingleton(debug_1.IDebugService, service.DebugService);\n    // Register configuration\n    const configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\n    configurationRegistry.registerConfiguration({\n        id: 'debug',\n        order: 20,\n        title: nls.localize('debugConfigurationTitle', \"Debug\"),\n        type: 'object',\n        properties: {\n            'debug.allowBreakpointsEverywhere': {\n                type: 'boolean',\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, \"Allow setting breakpoints in any file.\"),\n                default: false\n            },\n            'debug.openExplorerOnEnd': {\n                type: 'boolean',\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, \"Automatically open the explorer view at the end of a debug session.\"),\n                default: false\n            },\n            'debug.inlineValues': {\n                type: 'boolean',\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, \"Show variable values inline in editor while debugging.\"),\n                default: false\n            },\n            'debug.toolBarLocation': {\n                enum: ['floating', 'docked', 'hidden'],\n                markdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, \"Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.\"),\n                default: 'floating'\n            },\n            'debug.showInStatusBar': {\n                enum: ['never', 'always', 'onFirstSessionStart'],\n                enumDescriptions: [nls.localize('never', \"Never show debug in status bar\"), nls.localize('always', \"Always show debug in status bar\"), nls.localize('onFirstSessionStart', \"Show debug in status bar only after debug was started for the first time\")],\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, \"Controls when the debug status bar should be visible.\"),\n                default: 'onFirstSessionStart'\n            },\n            'debug.internalConsoleOptions': debug_1.INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n            'debug.openDebug': {\n                enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart', 'openOnDebugBreak'],\n                default: 'openOnSessionStart',\n                description: nls.localize('openDebug', \"Controls when the debug view should open.\")\n            },\n            'debug.enableAllHovers': {\n                type: 'boolean',\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'enableAllHovers' }, \"Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.\"),\n                default: false\n            },\n            'debug.console.fontSize': {\n                type: 'number',\n                description: nls.localize('debug.console.fontSize', \"Controls the font size in pixels in the debug console.\"),\n                default: browser_1.isMacintosh ? 12 : 14,\n            },\n            'debug.console.fontFamily': {\n                type: 'string',\n                description: nls.localize('debug.console.fontFamily', \"Controls the font family in the debug console.\"),\n                default: 'default'\n            },\n            'debug.console.lineHeight': {\n                type: 'number',\n                description: nls.localize('debug.console.lineHeight', \"Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.\"),\n                default: 0\n            },\n            'launch': {\n                type: 'object',\n                description: nls.localize({ comment: ['This is the description for a setting'], key: 'launch' }, \"Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.\"),\n                default: { configurations: [], compounds: [] },\n                $ref: configuration_1.launchSchemaId\n            }\n        }\n    });\n    // Register Debug Status\n    const statusBar = platform_1.Registry.as(statusbar_1.Extensions.Statusbar);\n    statusBar.registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(debugStatus_1.DebugStatus, statusbar_2.StatusbarAlignment.LEFT, 30 /* Low Priority */));\n    // Debug toolbar\n    const registerDebugToolBarItem = (id, title, icon, order, when, precondition) => {\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.DebugToolBar, {\n            group: 'navigation',\n            when,\n            order,\n            command: {\n                id,\n                title,\n                iconLocation: {\n                    light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/debug/browser/media/${icon}.svg`)),\n                    dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/debug/browser/media/${icon}-inverse.svg`))\n                },\n                precondition\n            }\n        });\n    };\n    registerDebugToolBarItem(debugCommands_1.CONTINUE_ID, continueLabel, 'continue', 10, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.PAUSE_ID, pauseLabel, 'pause', 10, debug_1.CONTEXT_DEBUG_STATE.notEqualsTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.STOP_ID, stopLabel, 'stop', 70, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\n    registerDebugToolBarItem(debugCommands_1.DISCONNECT_ID, disconnectLabel, 'disconnect', 70, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH);\n    registerDebugToolBarItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, 'step-over', 20, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 'step-into', 30, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, 'step-out', 40, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.RESTART_SESSION_ID, restartLabel, 'restart', 60);\n    registerDebugToolBarItem(debugCommands_1.STEP_BACK_ID, nls.localize('stepBackDebug', \"Step Back\"), 'step-back', 50, debug_1.CONTEXT_STEP_BACK_SUPPORTED, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugToolBarItem(debugCommands_1.REVERSE_CONTINUE_ID, nls.localize('reverseContinue', \"Reverse\"), 'reverse-continue', 60, debug_1.CONTEXT_STEP_BACK_SUPPORTED, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    // Debug callstack context menu\n    const registerDebugCallstackItem = (id, title, order, when, precondition, group = 'navigation') => {\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.DebugCallStackContext, {\n            group,\n            when,\n            order,\n            command: {\n                id,\n                title,\n                precondition\n            }\n        });\n    };\n    registerDebugCallstackItem(debugCommands_1.RESTART_SESSION_ID, restartLabel, 10, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\n    registerDebugCallstackItem(debugCommands_1.STOP_ID, stopLabel, 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\n    registerDebugCallstackItem(debugCommands_1.PAUSE_ID, pauseLabel, 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('running')));\n    registerDebugCallstackItem(debugCommands_1.CONTINUE_ID, continueLabel, 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')));\n    registerDebugCallstackItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCallstackItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 30, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCallstackItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, 40, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n    registerDebugCallstackItem(debugCommands_1.TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), 10, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination');\n    registerDebugCallstackItem(debugCommands_1.RESTART_FRAME_ID, nls.localize('restartFrame', \"Restart Frame\"), 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), debug_1.CONTEXT_RESTART_FRAME_SUPPORTED));\n    registerDebugCallstackItem(debugCommands_1.COPY_STACK_TRACE_ID, nls.localize('copyStackTrace', \"Copy Call Stack\"), 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'));\n    // View menu\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n        group: '3_views',\n        command: {\n            id: debug_1.VIEWLET_ID,\n            title: nls.localize({ key: 'miViewDebug', comment: ['&& denotes a mnemonic'] }, \"&&Debug\")\n        },\n        order: 4\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n        group: '4_panels',\n        command: {\n            id: OpenDebugPanelAction.ID,\n            title: nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, \"De&&bug Console\")\n        },\n        order: 2\n    });\n    // Debug menu\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '1_debug',\n        command: {\n            id: debugActions_1.StartAction.ID,\n            title: nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Start Debugging\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '1_debug',\n        command: {\n            id: debugActions_1.RunAction.ID,\n            title: nls.localize({ key: 'miStartWithoutDebugging', comment: ['&& denotes a mnemonic'] }, \"Start &&Without Debugging\")\n        },\n        order: 2\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '1_debug',\n        command: {\n            id: debugCommands_1.STOP_ID,\n            title: nls.localize({ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Stop Debugging\"),\n            precondition: debug_1.CONTEXT_IN_DEBUG_MODE\n        },\n        order: 3\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '1_debug',\n        command: {\n            id: debugCommands_1.RESTART_SESSION_ID,\n            title: nls.localize({ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, \"&&Restart Debugging\"),\n            precondition: debug_1.CONTEXT_IN_DEBUG_MODE\n        },\n        order: 4\n    });\n    // Configuration\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '2_configuration',\n        command: {\n            id: debugActions_1.ConfigureAction.ID,\n            title: nls.localize({ key: 'miOpenConfigurations', comment: ['&& denotes a mnemonic'] }, \"Open &&Configurations\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '2_configuration',\n        command: {\n            id: debugCommands_1.ADD_CONFIGURATION_ID,\n            title: nls.localize({ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, \"A&&dd Configuration...\")\n        },\n        order: 2\n    });\n    // Step Commands\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '3_step',\n        command: {\n            id: debugCommands_1.STEP_OVER_ID,\n            title: nls.localize({ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, \"Step &&Over\"),\n            precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '3_step',\n        command: {\n            id: debugCommands_1.STEP_INTO_ID,\n            title: nls.localize({ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, \"Step &&Into\"),\n            precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n        },\n        order: 2\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '3_step',\n        command: {\n            id: debugCommands_1.STEP_OUT_ID,\n            title: nls.localize({ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, \"Step O&&ut\"),\n            precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n        },\n        order: 3\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '3_step',\n        command: {\n            id: debugCommands_1.CONTINUE_ID,\n            title: nls.localize({ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, \"&&Continue\"),\n            precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n        },\n        order: 4\n    });\n    // New Breakpoints\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '4_new_breakpoint',\n        command: {\n            id: debugEditorActions_1.TOGGLE_BREAKPOINT_ID,\n            title: nls.localize({ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Breakpoint\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n        group: '1_breakpoints',\n        command: {\n            id: debugEditorActions_1.TOGGLE_CONDITIONAL_BREAKPOINT_ID,\n            title: nls.localize({ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Conditional Breakpoint...\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n        group: '1_breakpoints',\n        command: {\n            id: debugCommands_1.TOGGLE_INLINE_BREAKPOINT_ID,\n            title: nls.localize({ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Inline Breakp&&oint\")\n        },\n        order: 2\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n        group: '1_breakpoints',\n        command: {\n            id: debugActions_1.AddFunctionBreakpointAction.ID,\n            title: nls.localize({ key: 'miFunctionBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Function Breakpoint...\")\n        },\n        order: 3\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n        group: '1_breakpoints',\n        command: {\n            id: debugEditorActions_1.TOGGLE_LOG_POINT_ID,\n            title: nls.localize({ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, \"&&Logpoint...\")\n        },\n        order: 4\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '4_new_breakpoint',\n        title: nls.localize({ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&New Breakpoint\"),\n        submenu: actions_1.MenuId.MenubarNewBreakpointMenu,\n        order: 2\n    });\n    // Modify Breakpoints\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '5_breakpoints',\n        command: {\n            id: debugActions_1.EnableAllBreakpointsAction.ID,\n            title: nls.localize({ key: 'miEnableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"&&Enable All Breakpoints\")\n        },\n        order: 1\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '5_breakpoints',\n        command: {\n            id: debugActions_1.DisableAllBreakpointsAction.ID,\n            title: nls.localize({ key: 'miDisableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Disable A&&ll Breakpoints\")\n        },\n        order: 2\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: '5_breakpoints',\n        command: {\n            id: debugActions_1.RemoveAllBreakpointsAction.ID,\n            title: nls.localize({ key: 'miRemoveAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Remove &&All Breakpoints\")\n        },\n        order: 3\n    });\n    // Install Debuggers\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n        group: 'z_install',\n        command: {\n            id: 'debug.installAdditionalDebuggers',\n            title: nls.localize({ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, \"&&Install Additional Debuggers...\")\n        },\n        order: 1\n    });\n    // Touch Bar\n    if (browser_1.isMacintosh) {\n        const registerTouchBarEntry = (id, title, order, when, icon) => {\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.TouchBarContext, {\n                command: {\n                    id, title, iconLocation: { dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/debug/electron-browser/media/${icon}`)) }\n                },\n                when,\n                group: '9_debug',\n                order\n            });\n        };\n        registerTouchBarEntry(debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL, 0, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-tb.png');\n        registerTouchBarEntry(debugActions_1.RunAction.ID, debugActions_1.RunAction.LABEL, 1, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-without-debugging-tb.png');\n        registerTouchBarEntry(debugCommands_1.CONTINUE_ID, continueLabel, 0, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'continue-tb.png');\n        registerTouchBarEntry(debugCommands_1.PAUSE_ID, pauseLabel, 1, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_IN_DEBUG_MODE, contextkey_1.ContextKeyExpr.notEquals('debugState', 'stopped')), 'pause-tb.png');\n        registerTouchBarEntry(debugCommands_1.STEP_OVER_ID, stepOverLabel, 2, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepover-tb.png');\n        registerTouchBarEntry(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 3, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepinto-tb.png');\n        registerTouchBarEntry(debugCommands_1.STEP_OUT_ID, stepOutLabel, 4, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepout-tb.png');\n        registerTouchBarEntry(debugCommands_1.RESTART_SESSION_ID, restartLabel, 5, debug_1.CONTEXT_IN_DEBUG_MODE, 'restart-tb.png');\n        registerTouchBarEntry(debugCommands_1.STOP_ID, stopLabel, 6, debug_1.CONTEXT_IN_DEBUG_MODE, 'stop-tb.png');\n    }\n});\n",null]}