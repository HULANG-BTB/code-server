{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/workbench/contrib/extensions/common/extensions\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/commands/common/commands\", \"vs/platform/actions/common/actions\", \"vs/nls\", \"vs/base/common/map\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/platform/notification/common/notification\", \"vs/base/common/actions\", \"vs/platform/windows/common/windows\", \"vs/base/common/lifecycle\", \"vs/base/common/cancellation\"], function (require, exports, extensions_1, extensions_2, commands_1, actions_1, nls_1, map_1, extensionManagementUtil_1, notification_1, actions_2, windows_1, lifecycle_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ExtensionDependencyChecker = class ExtensionDependencyChecker extends lifecycle_1.Disposable {\n        constructor(extensionService, extensionsWorkbenchService, notificationService, windowService) {\n            super();\n            this.extensionService = extensionService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.notificationService = notificationService;\n            this.windowService = windowService;\n            commands_1.CommandsRegistry.registerCommand('workbench.extensions.installMissingDepenencies', () => this.installMissingDependencies());\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n                command: {\n                    id: 'workbench.extensions.installMissingDepenencies',\n                    category: nls_1.localize('extensions', \"Extensions\"),\n                    title: nls_1.localize('auto install missing deps', \"Install Missing Dependencies\")\n                }\n            });\n        }\n        getUninstalledMissingDependencies() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const allMissingDependencies = yield this.getAllMissingDependencies();\n                const localExtensions = yield this.extensionsWorkbenchService.queryLocal();\n                return allMissingDependencies.filter(id => localExtensions.every(l => !extensionManagementUtil_1.areSameExtensions(l.identifier, { id })));\n            });\n        }\n        getAllMissingDependencies() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const runningExtensions = yield this.extensionService.getExtensions();\n                const runningExtensionsIds = runningExtensions.reduce((result, r) => { result.add(r.identifier.value.toLowerCase()); return result; }, new Set());\n                const missingDependencies = new Set();\n                for (const extension of runningExtensions) {\n                    if (extension.extensionDependencies) {\n                        extension.extensionDependencies.forEach(dep => {\n                            if (!runningExtensionsIds.has(dep.toLowerCase())) {\n                                missingDependencies.add(dep);\n                            }\n                        });\n                    }\n                }\n                return map_1.values(missingDependencies);\n            });\n        }\n        installMissingDependencies() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const missingDependencies = yield this.getUninstalledMissingDependencies();\n                if (missingDependencies.length) {\n                    const extensions = (yield this.extensionsWorkbenchService.queryGallery({ names: missingDependencies, pageSize: missingDependencies.length }, cancellation_1.CancellationToken.None)).firstPage;\n                    if (extensions.length) {\n                        yield Promise.all(extensions.map(extension => this.extensionsWorkbenchService.install(extension)));\n                        this.notificationService.notify({\n                            severity: notification_1.Severity.Info,\n                            message: nls_1.localize('finished installing missing deps', \"Finished installing missing dependencies. Please reload the window now.\"),\n                            actions: {\n                                primary: [new actions_2.Action('realod', nls_1.localize('reload', \"Realod Window\"), '', true, () => this.windowService.reloadWindow())]\n                            }\n                        });\n                    }\n                }\n                else {\n                    this.notificationService.info(nls_1.localize('no missing deps', \"There are no missing dependencies to install.\"));\n                }\n            });\n        }\n    };\n    ExtensionDependencyChecker = __decorate([\n        __param(0, extensions_2.IExtensionService),\n        __param(1, extensions_1.IExtensionsWorkbenchService),\n        __param(2, notification_1.INotificationService),\n        __param(3, windows_1.IWindowService)\n    ], ExtensionDependencyChecker);\n    exports.ExtensionDependencyChecker = ExtensionDependencyChecker;\n});\n",null]}