{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/statusbar/common/statusbar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/statusbar/common/statusbar.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IStatusbarService = instantiation_1.createDecorator('statusbarService');\nvar StatusbarAlignment;\n(function (StatusbarAlignment) {\n    StatusbarAlignment[StatusbarAlignment[\"LEFT\"] = 0] = \"LEFT\";\n    StatusbarAlignment[StatusbarAlignment[\"RIGHT\"] = 1] = \"RIGHT\";\n})(StatusbarAlignment = exports.StatusbarAlignment || (exports.StatusbarAlignment = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/statusbar/common/statusbar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/statusbar/common/statusbar.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAKpE,QAAA,iBAAiB,GAAG,+BAAe,CAAoB,kBAAkB,CAAC,CAAC;AAExF,IAAkB,kBAEjB;AAFD,WAAkB,kBAAkB;IACnC,2DAAI,CAAA;IAAE,6DAAK,CAAA;AACZ,CAAC,EAFiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAEnC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport const IStatusbarService = createDecorator<IStatusbarService>('statusbarService');\n\nexport const enum StatusbarAlignment {\n\tLEFT, RIGHT\n}\n\n/**\n * A declarative way of describing a status bar entry\n */\nexport interface IStatusbarEntry {\n\n\t/**\n\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t *\n\t * `My text ${icon name} contains icons like ${icon name} this one.`\n\t */\n\treadonly text: string;\n\n\t/**\n\t * An optional tooltip text to show when you hover over the entry\n\t */\n\treadonly tooltip?: string;\n\n\t/**\n\t * An optional color to use for the entry\n\t */\n\treadonly color?: string | ThemeColor;\n\n\t/**\n\t * An optional background color to use for the entry\n\t */\n\treadonly backgroundColor?: string | ThemeColor;\n\n\t/**\n\t * An optional id of a command that is known to the workbench to execute on click\n\t */\n\treadonly command?: string;\n\n\t/**\n\t * Optional arguments for the command.\n\t */\n\treadonly arguments?: any[];\n\n\t/**\n\t * An optional extension ID if this entry is provided from an extension.\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\t/**\n\t * Wether to show a beak above the status bar entry.\n\t */\n\treadonly showBeak?: boolean;\n}\n\nexport interface IStatusbarService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment and priority. Use the returned IDisposable\n\t * to remove the statusbar entry.\n\t */\n\taddEntry(entry: IStatusbarEntry, alignment: StatusbarAlignment, priority?: number): IDisposable;\n\n\t/**\n\t * Prints something to the status bar area with optional auto dispose and delay.\n\t */\n\tsetStatusMessage(message: string, autoDisposeAfter?: number, delayBy?: number): IDisposable;\n}"]}]}