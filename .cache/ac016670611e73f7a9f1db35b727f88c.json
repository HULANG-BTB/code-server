{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/htmlContent.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/htmlContent.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\"], function (require, exports, arrays_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class MarkdownString {\n        constructor(value = '') {\n            this.value = value;\n        }\n        appendText(value) {\n            // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n            this.value += value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&');\n            return this;\n        }\n        appendMarkdown(value) {\n            this.value += value;\n            return this;\n        }\n        appendCodeblock(langId, code) {\n            this.value += '\\n```';\n            this.value += langId;\n            this.value += '\\n';\n            this.value += code;\n            this.value += '\\n```\\n';\n            return this;\n        }\n    }\n    exports.MarkdownString = MarkdownString;\n    function isEmptyMarkdownString(oneOrMany) {\n        if (isMarkdownString(oneOrMany)) {\n            return !oneOrMany.value;\n        }\n        else if (Array.isArray(oneOrMany)) {\n            return oneOrMany.every(isEmptyMarkdownString);\n        }\n        else {\n            return true;\n        }\n    }\n    exports.isEmptyMarkdownString = isEmptyMarkdownString;\n    function isMarkdownString(thing) {\n        if (thing instanceof MarkdownString) {\n            return true;\n        }\n        else if (thing && typeof thing === 'object') {\n            return typeof thing.value === 'string'\n                && (typeof thing.isTrusted === 'boolean' || thing.isTrusted === undefined);\n        }\n        return false;\n    }\n    exports.isMarkdownString = isMarkdownString;\n    function markedStringsEquals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        else if (!a || !b) {\n            return false;\n        }\n        else if (Array.isArray(a) && Array.isArray(b)) {\n            return arrays_1.equals(a, b, markdownStringEqual);\n        }\n        else if (isMarkdownString(a) && isMarkdownString(b)) {\n            return markdownStringEqual(a, b);\n        }\n        else {\n            return false;\n        }\n    }\n    exports.markedStringsEquals = markedStringsEquals;\n    function markdownStringEqual(a, b) {\n        if (a === b) {\n            return true;\n        }\n        else if (!a || !b) {\n            return false;\n        }\n        else {\n            return a.value === b.value && a.isTrusted === b.isTrusted;\n        }\n    }\n    function removeMarkdownEscapes(text) {\n        if (!text) {\n            return text;\n        }\n        return text.replace(/\\\\([\\\\`*_{}[\\]()#+\\-.!])/g, '$1');\n    }\n    exports.removeMarkdownEscapes = removeMarkdownEscapes;\n});\n",null]}