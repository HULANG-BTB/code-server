{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/arrays\", \"vs/workbench/common/editor/untitledEditorInput\", \"vs/platform/configuration/common/configuration\", \"vs/base/common/event\", \"vs/base/common/map\", \"vs/base/common/network\", \"vs/base/common/lifecycle\", \"vs/platform/instantiation/common/extensions\", \"vs/base/common/resources\"], function (require, exports, uri_1, instantiation_1, arrays, untitledEditorInput_1, configuration_1, event_1, map_1, network_1, lifecycle_1, extensions_1, resources_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IUntitledEditorService = instantiation_1.createDecorator('untitledEditorService');\n    let UntitledEditorService = class UntitledEditorService extends lifecycle_1.Disposable {\n        constructor(instantiationService, configurationService) {\n            super();\n            this.instantiationService = instantiationService;\n            this.configurationService = configurationService;\n            this.mapResourceToInput = new map_1.ResourceMap();\n            this.mapResourceToAssociatedFilePath = new map_1.ResourceMap();\n            this._onDidChangeContent = this._register(new event_1.Emitter());\n            this._onDidChangeDirty = this._register(new event_1.Emitter());\n            this._onDidChangeEncoding = this._register(new event_1.Emitter());\n            this._onDidDisposeModel = this._register(new event_1.Emitter());\n        }\n        get onDidChangeContent() { return this._onDidChangeContent.event; }\n        get onDidChangeDirty() { return this._onDidChangeDirty.event; }\n        get onDidChangeEncoding() { return this._onDidChangeEncoding.event; }\n        get onDidDisposeModel() { return this._onDidDisposeModel.event; }\n        get(resource) {\n            return this.mapResourceToInput.get(resource);\n        }\n        getAll(resources) {\n            if (resources) {\n                return arrays.coalesce(resources.map(r => this.get(r)));\n            }\n            return this.mapResourceToInput.values();\n        }\n        exists(resource) {\n            return this.mapResourceToInput.has(resource);\n        }\n        revertAll(resources, force) {\n            const reverted = [];\n            const untitledInputs = this.getAll(resources);\n            untitledInputs.forEach(input => {\n                if (input) {\n                    input.revert();\n                    input.dispose();\n                    reverted.push(input.getResource());\n                }\n            });\n            return reverted;\n        }\n        isDirty(resource) {\n            const input = this.get(resource);\n            return input ? input.isDirty() : false;\n        }\n        getDirty(resources) {\n            let inputs;\n            if (resources) {\n                inputs = arrays.coalesce(resources.map(r => this.get(r)));\n            }\n            else {\n                inputs = this.mapResourceToInput.values();\n            }\n            return inputs\n                .filter(i => i.isDirty())\n                .map(i => i.getResource());\n        }\n        loadOrCreate(options = Object.create(null)) {\n            return this.createOrGet(options.resource, options.modeId, options.initialValue, options.encoding, options.useResourcePath).resolve();\n        }\n        createOrGet(resource, modeId, initialValue, encoding, hasAssociatedFilePath = false) {\n            if (resource) {\n                // Massage resource if it comes with a file:// scheme\n                if (resource.scheme === network_1.Schemas.file) {\n                    hasAssociatedFilePath = true;\n                    resource = resource.with({ scheme: network_1.Schemas.untitled }); // ensure we have the right scheme\n                }\n                if (hasAssociatedFilePath) {\n                    this.mapResourceToAssociatedFilePath.set(resource, true); // remember for future lookups\n                }\n            }\n            // Return existing instance if asked for it\n            if (resource && this.mapResourceToInput.has(resource)) {\n                return this.mapResourceToInput.get(resource);\n            }\n            // Create new otherwise\n            return this.doCreate(resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n        }\n        doCreate(resource, hasAssociatedFilePath, modeId, initialValue, encoding) {\n            if (!resource) {\n                // Create new taking a resource URI that is not already taken\n                let counter = this.mapResourceToInput.size + 1;\n                do {\n                    resource = uri_1.URI.from({ scheme: network_1.Schemas.untitled, path: `Untitled-${counter}` });\n                    counter++;\n                } while (this.mapResourceToInput.has(resource));\n            }\n            // Look up default language from settings if any\n            if (!modeId && !hasAssociatedFilePath) {\n                const configuration = this.configurationService.getValue();\n                if (configuration.files && configuration.files.defaultLanguage) {\n                    modeId = configuration.files.defaultLanguage;\n                }\n            }\n            const input = this.instantiationService.createInstance(untitledEditorInput_1.UntitledEditorInput, resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n            const contentListener = input.onDidModelChangeContent(() => {\n                this._onDidChangeContent.fire(resource);\n            });\n            const dirtyListener = input.onDidChangeDirty(() => {\n                this._onDidChangeDirty.fire(resource);\n            });\n            const encodingListener = input.onDidModelChangeEncoding(() => {\n                this._onDidChangeEncoding.fire(resource);\n            });\n            const disposeListener = input.onDispose(() => {\n                this._onDidDisposeModel.fire(resource);\n            });\n            // Remove from cache on dispose\n            const onceDispose = event_1.Event.once(input.onDispose);\n            onceDispose(() => {\n                this.mapResourceToInput.delete(input.getResource());\n                this.mapResourceToAssociatedFilePath.delete(input.getResource());\n                contentListener.dispose();\n                dirtyListener.dispose();\n                encodingListener.dispose();\n                disposeListener.dispose();\n            });\n            // Add to cache\n            this.mapResourceToInput.set(resource, input);\n            return input;\n        }\n        hasAssociatedFilePath(resource) {\n            return this.mapResourceToAssociatedFilePath.has(resource);\n        }\n        suggestFileName(resource) {\n            const input = this.get(resource);\n            return input ? input.suggestFileName() : resources_1.basename(resource);\n        }\n        getEncoding(resource) {\n            const input = this.get(resource);\n            return input ? input.getEncoding() : undefined;\n        }\n    };\n    UntitledEditorService = __decorate([\n        __param(0, instantiation_1.IInstantiationService),\n        __param(1, configuration_1.IConfigurationService)\n    ], UntitledEditorService);\n    exports.UntitledEditorService = UntitledEditorService;\n    extensions_1.registerSingleton(exports.IUntitledEditorService, UntitledEditorService, true);\n});\n",null]}