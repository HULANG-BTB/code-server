{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/standaloneStrings.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/standaloneStrings.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar AccessibilityHelpNLS;\n(function (AccessibilityHelpNLS) {\n    AccessibilityHelpNLS.noSelection = nls.localize(\"noSelection\", \"No selection\");\n    AccessibilityHelpNLS.singleSelectionRange = nls.localize(\"singleSelectionRange\", \"Line {0}, Column {1} ({2} selected)\");\n    AccessibilityHelpNLS.singleSelection = nls.localize(\"singleSelection\", \"Line {0}, Column {1}\");\n    AccessibilityHelpNLS.multiSelectionRange = nls.localize(\"multiSelectionRange\", \"{0} selections ({1} characters selected)\");\n    AccessibilityHelpNLS.multiSelection = nls.localize(\"multiSelection\", \"{0} selections\");\n    AccessibilityHelpNLS.emergencyConfOn = nls.localize(\"emergencyConfOn\", \"Now changing the setting `accessibilitySupport` to 'on'.\");\n    AccessibilityHelpNLS.openingDocs = nls.localize(\"openingDocs\", \"Now opening the Editor Accessibility documentation page.\");\n    AccessibilityHelpNLS.readonlyDiffEditor = nls.localize(\"readonlyDiffEditor\", \" in a read-only pane of a diff editor.\");\n    AccessibilityHelpNLS.editableDiffEditor = nls.localize(\"editableDiffEditor\", \" in a pane of a diff editor.\");\n    AccessibilityHelpNLS.readonlyEditor = nls.localize(\"readonlyEditor\", \" in a read-only code editor\");\n    AccessibilityHelpNLS.editableEditor = nls.localize(\"editableEditor\", \" in a code editor\");\n    AccessibilityHelpNLS.changeConfigToOnMac = nls.localize(\"changeConfigToOnMac\", \"To configure the editor to be optimized for usage with a Screen Reader press Command+E now.\");\n    AccessibilityHelpNLS.changeConfigToOnWinLinux = nls.localize(\"changeConfigToOnWinLinux\", \"To configure the editor to be optimized for usage with a Screen Reader press Control+E now.\");\n    AccessibilityHelpNLS.auto_on = nls.localize(\"auto_on\", \"The editor is configured to be optimized for usage with a Screen Reader.\");\n    AccessibilityHelpNLS.auto_off = nls.localize(\"auto_off\", \"The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time.\");\n    AccessibilityHelpNLS.tabFocusModeOnMsg = nls.localize(\"tabFocusModeOnMsg\", \"Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.\");\n    AccessibilityHelpNLS.tabFocusModeOnMsgNoKb = nls.localize(\"tabFocusModeOnMsgNoKb\", \"Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.\");\n    AccessibilityHelpNLS.tabFocusModeOffMsg = nls.localize(\"tabFocusModeOffMsg\", \"Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.\");\n    AccessibilityHelpNLS.tabFocusModeOffMsgNoKb = nls.localize(\"tabFocusModeOffMsgNoKb\", \"Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.\");\n    AccessibilityHelpNLS.openDocMac = nls.localize(\"openDocMac\", \"Press Command+H now to open a browser window with more information related to editor accessibility.\");\n    AccessibilityHelpNLS.openDocWinLinux = nls.localize(\"openDocWinLinux\", \"Press Control+H now to open a browser window with more information related to editor accessibility.\");\n    AccessibilityHelpNLS.outroMsg = nls.localize(\"outroMsg\", \"You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.\");\n    AccessibilityHelpNLS.showAccessibilityHelpAction = nls.localize(\"showAccessibilityHelpAction\", \"Show Accessibility Help\");\n})(AccessibilityHelpNLS = exports.AccessibilityHelpNLS || (exports.AccessibilityHelpNLS = {}));\nvar InspectTokensNLS;\n(function (InspectTokensNLS) {\n    InspectTokensNLS.inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n})(InspectTokensNLS = exports.InspectTokensNLS || (exports.InspectTokensNLS = {}));\nvar GoToLineNLS;\n(function (GoToLineNLS) {\n    GoToLineNLS.gotoLineLabelValidLineAndColumn = nls.localize('gotoLineLabelValidLineAndColumn', \"Go to line {0} and character {1}\");\n    GoToLineNLS.gotoLineLabelValidLine = nls.localize('gotoLineLabelValidLine', \"Go to line {0}\");\n    GoToLineNLS.gotoLineLabelEmptyWithLineLimit = nls.localize('gotoLineLabelEmptyWithLineLimit', \"Type a line number between 1 and {0} to navigate to\");\n    GoToLineNLS.gotoLineLabelEmptyWithLineAndColumnLimit = nls.localize('gotoLineLabelEmptyWithLineAndColumnLimit', \"Type a character between 1 and {0} to navigate to\");\n    GoToLineNLS.gotoLineAriaLabel = nls.localize('gotoLineAriaLabel', \"Current Line: {0}. Go to line {1}.\");\n    GoToLineNLS.gotoLineActionInput = nls.localize('gotoLineActionInput', \"Type a line number, followed by an optional colon and a character number to navigate to\");\n    GoToLineNLS.gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line...\");\n})(GoToLineNLS = exports.GoToLineNLS || (exports.GoToLineNLS = {}));\nvar QuickCommandNLS;\n(function (QuickCommandNLS) {\n    QuickCommandNLS.ariaLabelEntryWithKey = nls.localize('ariaLabelEntryWithKey', \"{0}, {1}, commands\");\n    QuickCommandNLS.ariaLabelEntry = nls.localize('ariaLabelEntry', \"{0}, commands\");\n    QuickCommandNLS.quickCommandActionInput = nls.localize('quickCommandActionInput', \"Type the name of an action you want to execute\");\n    QuickCommandNLS.quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n})(QuickCommandNLS = exports.QuickCommandNLS || (exports.QuickCommandNLS = {}));\nvar QuickOutlineNLS;\n(function (QuickOutlineNLS) {\n    QuickOutlineNLS.entryAriaLabel = nls.localize('entryAriaLabel', \"{0}, symbols\");\n    QuickOutlineNLS.quickOutlineActionInput = nls.localize('quickOutlineActionInput', \"Type the name of an identifier you wish to navigate to\");\n    QuickOutlineNLS.quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n    QuickOutlineNLS._symbols_ = nls.localize('symbols', \"symbols ({0})\");\n    QuickOutlineNLS._modules_ = nls.localize('modules', \"modules ({0})\");\n    QuickOutlineNLS._class_ = nls.localize('class', \"classes ({0})\");\n    QuickOutlineNLS._interface_ = nls.localize('interface', \"interfaces ({0})\");\n    QuickOutlineNLS._method_ = nls.localize('method', \"methods ({0})\");\n    QuickOutlineNLS._function_ = nls.localize('function', \"functions ({0})\");\n    QuickOutlineNLS._property_ = nls.localize('property', \"properties ({0})\");\n    QuickOutlineNLS._variable_ = nls.localize('variable', \"variables ({0})\");\n    QuickOutlineNLS._variable2_ = nls.localize('variable2', \"variables ({0})\");\n    QuickOutlineNLS._constructor_ = nls.localize('_constructor', \"constructors ({0})\");\n    QuickOutlineNLS._call_ = nls.localize('call', \"calls ({0})\");\n})(QuickOutlineNLS = exports.QuickOutlineNLS || (exports.QuickOutlineNLS = {}));\nvar StandaloneCodeEditorNLS;\n(function (StandaloneCodeEditorNLS) {\n    StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n    StandaloneCodeEditorNLS.accessibilityHelpMessageIE = nls.localize('accessibilityHelpMessageIE', \"Press Ctrl+F1 for Accessibility Options.\");\n    StandaloneCodeEditorNLS.accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', \"Press Alt+F1 for Accessibility Options.\");\n})(StandaloneCodeEditorNLS = exports.StandaloneCodeEditorNLS || (exports.StandaloneCodeEditorNLS = {}));\nvar ToggleHighContrastNLS;\n(function (ToggleHighContrastNLS) {\n    ToggleHighContrastNLS.toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n})(ToggleHighContrastNLS = exports.ToggleHighContrastNLS || (exports.ToggleHighContrastNLS = {}));\nvar SimpleServicesNLS;\n(function (SimpleServicesNLS) {\n    SimpleServicesNLS.bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n})(SimpleServicesNLS = exports.SimpleServicesNLS || (exports.SimpleServicesNLS = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/standaloneStrings.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/standaloneStrings.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nexport namespace AccessibilityHelpNLS {\n\texport const noSelection = nls.localize(\"noSelection\", \"No selection\");\n\texport const singleSelectionRange = nls.localize(\"singleSelectionRange\", \"Line {0}, Column {1} ({2} selected)\");\n\texport const singleSelection = nls.localize(\"singleSelection\", \"Line {0}, Column {1}\");\n\texport const multiSelectionRange = nls.localize(\"multiSelectionRange\", \"{0} selections ({1} characters selected)\");\n\texport const multiSelection = nls.localize(\"multiSelection\", \"{0} selections\");\n\texport const emergencyConfOn = nls.localize(\"emergencyConfOn\", \"Now changing the setting `accessibilitySupport` to 'on'.\");\n\texport const openingDocs = nls.localize(\"openingDocs\", \"Now opening the Editor Accessibility documentation page.\");\n\texport const readonlyDiffEditor = nls.localize(\"readonlyDiffEditor\", \" in a read-only pane of a diff editor.\");\n\texport const editableDiffEditor = nls.localize(\"editableDiffEditor\", \" in a pane of a diff editor.\");\n\texport const readonlyEditor = nls.localize(\"readonlyEditor\", \" in a read-only code editor\");\n\texport const editableEditor = nls.localize(\"editableEditor\", \" in a code editor\");\n\texport const changeConfigToOnMac = nls.localize(\"changeConfigToOnMac\", \"To configure the editor to be optimized for usage with a Screen Reader press Command+E now.\");\n\texport const changeConfigToOnWinLinux = nls.localize(\"changeConfigToOnWinLinux\", \"To configure the editor to be optimized for usage with a Screen Reader press Control+E now.\");\n\texport const auto_on = nls.localize(\"auto_on\", \"The editor is configured to be optimized for usage with a Screen Reader.\");\n\texport const auto_off = nls.localize(\"auto_off\", \"The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time.\");\n\texport const tabFocusModeOnMsg = nls.localize(\"tabFocusModeOnMsg\", \"Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.\");\n\texport const tabFocusModeOnMsgNoKb = nls.localize(\"tabFocusModeOnMsgNoKb\", \"Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.\");\n\texport const tabFocusModeOffMsg = nls.localize(\"tabFocusModeOffMsg\", \"Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.\");\n\texport const tabFocusModeOffMsgNoKb = nls.localize(\"tabFocusModeOffMsgNoKb\", \"Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.\");\n\texport const openDocMac = nls.localize(\"openDocMac\", \"Press Command+H now to open a browser window with more information related to editor accessibility.\");\n\texport const openDocWinLinux = nls.localize(\"openDocWinLinux\", \"Press Control+H now to open a browser window with more information related to editor accessibility.\");\n\texport const outroMsg = nls.localize(\"outroMsg\", \"You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.\");\n\texport const showAccessibilityHelpAction = nls.localize(\"showAccessibilityHelpAction\", \"Show Accessibility Help\");\n}\n\nexport namespace InspectTokensNLS {\n\texport const inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n}\n\nexport namespace GoToLineNLS {\n\texport const gotoLineLabelValidLineAndColumn = nls.localize('gotoLineLabelValidLineAndColumn', \"Go to line {0} and character {1}\");\n\texport const gotoLineLabelValidLine = nls.localize('gotoLineLabelValidLine', \"Go to line {0}\");\n\texport const gotoLineLabelEmptyWithLineLimit = nls.localize('gotoLineLabelEmptyWithLineLimit', \"Type a line number between 1 and {0} to navigate to\");\n\texport const gotoLineLabelEmptyWithLineAndColumnLimit = nls.localize('gotoLineLabelEmptyWithLineAndColumnLimit', \"Type a character between 1 and {0} to navigate to\");\n\texport const gotoLineAriaLabel = nls.localize('gotoLineAriaLabel', \"Current Line: {0}. Go to line {1}.\");\n\texport const gotoLineActionInput = nls.localize('gotoLineActionInput', \"Type a line number, followed by an optional colon and a character number to navigate to\");\n\texport const gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line...\");\n}\n\nexport namespace QuickCommandNLS {\n\texport const ariaLabelEntryWithKey = nls.localize('ariaLabelEntryWithKey', \"{0}, {1}, commands\");\n\texport const ariaLabelEntry = nls.localize('ariaLabelEntry', \"{0}, commands\");\n\texport const quickCommandActionInput = nls.localize('quickCommandActionInput', \"Type the name of an action you want to execute\");\n\texport const quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n}\n\nexport namespace QuickOutlineNLS {\n\texport const entryAriaLabel = nls.localize('entryAriaLabel', \"{0}, symbols\");\n\texport const quickOutlineActionInput = nls.localize('quickOutlineActionInput', \"Type the name of an identifier you wish to navigate to\");\n\texport const quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n\texport const _symbols_ = nls.localize('symbols', \"symbols ({0})\");\n\texport const _modules_ = nls.localize('modules', \"modules ({0})\");\n\texport const _class_ = nls.localize('class', \"classes ({0})\");\n\texport const _interface_ = nls.localize('interface', \"interfaces ({0})\");\n\texport const _method_ = nls.localize('method', \"methods ({0})\");\n\texport const _function_ = nls.localize('function', \"functions ({0})\");\n\texport const _property_ = nls.localize('property', \"properties ({0})\");\n\texport const _variable_ = nls.localize('variable', \"variables ({0})\");\n\texport const _variable2_ = nls.localize('variable2', \"variables ({0})\");\n\texport const _constructor_ = nls.localize('_constructor', \"constructors ({0})\");\n\texport const _call_ = nls.localize('call', \"calls ({0})\");\n}\n\nexport namespace StandaloneCodeEditorNLS {\n\texport const editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n\texport const accessibilityHelpMessageIE = nls.localize('accessibilityHelpMessageIE', \"Press Ctrl+F1 for Accessibility Options.\");\n\texport const accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', \"Press Alt+F1 for Accessibility Options.\");\n}\n\nexport namespace ToggleHighContrastNLS {\n\texport const toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n}\n\nexport namespace SimpleServicesNLS {\n\texport const bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n}\n"]}]}