{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\"], function (require, exports, strings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function areSameExtensions(a, b) {\n        if (a.uuid && b.uuid) {\n            return a.uuid === b.uuid;\n        }\n        if (a.id === b.id) {\n            return true;\n        }\n        return strings_1.compareIgnoreCase(a.id, b.id) === 0;\n    }\n    exports.areSameExtensions = areSameExtensions;\n    function adoptToGalleryExtensionId(id) {\n        return id.toLocaleLowerCase();\n    }\n    exports.adoptToGalleryExtensionId = adoptToGalleryExtensionId;\n    function getGalleryExtensionId(publisher, name) {\n        return `${publisher.toLocaleLowerCase()}.${name.toLocaleLowerCase()}`;\n    }\n    exports.getGalleryExtensionId = getGalleryExtensionId;\n    function groupByExtension(extensions, getExtensionIdentifier) {\n        const byExtension = [];\n        const findGroup = (extension) => {\n            for (const group of byExtension) {\n                if (group.some(e => areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension)))) {\n                    return group;\n                }\n            }\n            return null;\n        };\n        for (const extension of extensions) {\n            const group = findGroup(extension);\n            if (group) {\n                group.push(extension);\n            }\n            else {\n                byExtension.push([extension]);\n            }\n        }\n        return byExtension;\n    }\n    exports.groupByExtension = groupByExtension;\n    function getLocalExtensionTelemetryData(extension) {\n        return {\n            id: extension.identifier.id,\n            name: extension.manifest.name,\n            galleryId: null,\n            publisherId: extension.metadata ? extension.metadata.publisherId : null,\n            publisherName: extension.manifest.publisher,\n            publisherDisplayName: extension.metadata ? extension.metadata.publisherDisplayName : null,\n            dependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0\n        };\n    }\n    exports.getLocalExtensionTelemetryData = getLocalExtensionTelemetryData;\n    /* __GDPR__FRAGMENT__\n        \"GalleryExtensionTelemetryData\" : {\n            \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"name\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"galleryId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"publisherId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"publisherName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n            \"dependencies\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n            \"${include}\": [\n                \"${GalleryExtensionTelemetryData2}\"\n            ]\n        }\n    */\n    function getGalleryExtensionTelemetryData(extension) {\n        return Object.assign({ id: extension.identifier.id, name: extension.name, galleryId: extension.identifier.uuid, publisherId: extension.publisherId, publisherName: extension.publisher, publisherDisplayName: extension.publisherDisplayName, dependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0) }, extension.telemetryData);\n    }\n    exports.getGalleryExtensionTelemetryData = getGalleryExtensionTelemetryData;\n    exports.BetterMergeId = 'pprice.better-merge';\n    function getMaliciousExtensionsSet(report) {\n        const result = new Set();\n        for (const extension of report) {\n            if (extension.malicious) {\n                result.add(extension.id.id);\n            }\n        }\n        return result;\n    }\n    exports.getMaliciousExtensionsSet = getMaliciousExtensionsSet;\n});\n",null]}