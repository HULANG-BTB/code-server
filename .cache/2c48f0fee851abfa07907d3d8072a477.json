{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/platform\", \"vs/platform/commands/common/commands\", \"vs/platform/registry/common/platform\"], function (require, exports, keyCodes_1, platform_1, commands_1, platform_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var KeybindingWeight;\n    (function (KeybindingWeight) {\n        KeybindingWeight[KeybindingWeight[\"EditorCore\"] = 0] = \"EditorCore\";\n        KeybindingWeight[KeybindingWeight[\"EditorContrib\"] = 100] = \"EditorContrib\";\n        KeybindingWeight[KeybindingWeight[\"WorkbenchContrib\"] = 200] = \"WorkbenchContrib\";\n        KeybindingWeight[KeybindingWeight[\"BuiltinExtension\"] = 300] = \"BuiltinExtension\";\n        KeybindingWeight[KeybindingWeight[\"ExternalExtension\"] = 400] = \"ExternalExtension\";\n    })(KeybindingWeight = exports.KeybindingWeight || (exports.KeybindingWeight = {}));\n    class KeybindingsRegistryImpl {\n        constructor() {\n            this._coreKeybindings = [];\n            this._extensionKeybindings = [];\n            this._cachedMergedKeybindings = null;\n        }\n        /**\n         * Take current platform into account and reduce to primary & secondary.\n         */\n        static bindToCurrentPlatform(kb) {\n            if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n                if (kb && kb.win) {\n                    return kb.win;\n                }\n            }\n            else if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n                if (kb && kb.mac) {\n                    return kb.mac;\n                }\n            }\n            else {\n                if (kb && kb.linux) {\n                    return kb.linux;\n                }\n            }\n            return kb;\n        }\n        /**\n         * Take current platform into account and reduce to primary & secondary.\n         */\n        static bindToCurrentPlatform2(kb) {\n            if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n                if (kb && kb.win) {\n                    return kb.win;\n                }\n            }\n            else if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n                if (kb && kb.mac) {\n                    return kb.mac;\n                }\n            }\n            else {\n                if (kb && kb.linux) {\n                    return kb.linux;\n                }\n            }\n            return kb;\n        }\n        registerKeybindingRule(rule) {\n            const actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n            if (actualKb && actualKb.primary) {\n                const kk = keyCodes_1.createKeybinding(actualKb.primary, platform_1.OS);\n                if (kk) {\n                    this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, 0, rule.when);\n                }\n            }\n            if (actualKb && Array.isArray(actualKb.secondary)) {\n                for (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n                    const k = actualKb.secondary[i];\n                    const kk = keyCodes_1.createKeybinding(k, platform_1.OS);\n                    if (kk) {\n                        this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, -i - 1, rule.when);\n                    }\n                }\n            }\n        }\n        setExtensionKeybindings(rules) {\n            let result = [], keybindingsLen = 0;\n            for (let i = 0, len = rules.length; i < len; i++) {\n                const rule = rules[i];\n                let actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform2(rule);\n                if (actualKb && actualKb.primary) {\n                    result[keybindingsLen++] = {\n                        keybinding: actualKb.primary,\n                        command: rule.id,\n                        commandArgs: rule.args,\n                        when: rule.when,\n                        weight1: rule.weight,\n                        weight2: 0\n                    };\n                }\n            }\n            this._extensionKeybindings = result;\n            this._cachedMergedKeybindings = null;\n        }\n        registerCommandAndKeybindingRule(desc) {\n            this.registerKeybindingRule(desc);\n            commands_1.CommandsRegistry.registerCommand(desc);\n        }\n        static _mightProduceChar(keyCode) {\n            if (keyCode >= keyCodes_1.KeyCode.KEY_0 && keyCode <= keyCodes_1.KeyCode.KEY_9) {\n                return true;\n            }\n            if (keyCode >= keyCodes_1.KeyCode.KEY_A && keyCode <= keyCodes_1.KeyCode.KEY_Z) {\n                return true;\n            }\n            return (keyCode === keyCodes_1.KeyCode.US_SEMICOLON\n                || keyCode === keyCodes_1.KeyCode.US_EQUAL\n                || keyCode === keyCodes_1.KeyCode.US_COMMA\n                || keyCode === keyCodes_1.KeyCode.US_MINUS\n                || keyCode === keyCodes_1.KeyCode.US_DOT\n                || keyCode === keyCodes_1.KeyCode.US_SLASH\n                || keyCode === keyCodes_1.KeyCode.US_BACKTICK\n                || keyCode === keyCodes_1.KeyCode.ABNT_C1\n                || keyCode === keyCodes_1.KeyCode.ABNT_C2\n                || keyCode === keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET\n                || keyCode === keyCodes_1.KeyCode.US_BACKSLASH\n                || keyCode === keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET\n                || keyCode === keyCodes_1.KeyCode.US_QUOTE\n                || keyCode === keyCodes_1.KeyCode.OEM_8\n                || keyCode === keyCodes_1.KeyCode.OEM_102);\n        }\n        _assertNoCtrlAlt(keybinding, commandId) {\n            if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n                if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n                    console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n                }\n            }\n        }\n        _registerDefaultKeybinding(keybinding, commandId, commandArgs, weight1, weight2, when) {\n            if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n                this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n            }\n            this._coreKeybindings.push({\n                keybinding: keybinding,\n                command: commandId,\n                commandArgs: commandArgs,\n                when: when,\n                weight1: weight1,\n                weight2: weight2\n            });\n            this._cachedMergedKeybindings = null;\n        }\n        getDefaultKeybindings() {\n            if (!this._cachedMergedKeybindings) {\n                this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n                this._cachedMergedKeybindings.sort(sorter);\n            }\n            return this._cachedMergedKeybindings.slice(0);\n        }\n    }\n    exports.KeybindingsRegistry = new KeybindingsRegistryImpl();\n    // Define extension point ids\n    exports.Extensions = {\n        EditorModes: 'platform.keybindingsRegistry'\n    };\n    platform_2.Registry.add(exports.Extensions.EditorModes, exports.KeybindingsRegistry);\n    function sorter(a, b) {\n        if (a.weight1 !== b.weight1) {\n            return a.weight1 - b.weight1;\n        }\n        if (a.command < b.command) {\n            return -1;\n        }\n        if (a.command > b.command) {\n            return 1;\n        }\n        return a.weight2 - b.weight2;\n    }\n});\n",null]}