{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmActivity.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmActivity.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar scm_1 = require(\"vs/workbench/contrib/scm/common/scm\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar StatusUpdater = /** @class */ (function () {\n    function StatusUpdater(scmService, activityService, logService) {\n        this.scmService = scmService;\n        this.activityService = activityService;\n        this.logService = logService;\n        this.badgeDisposable = lifecycle_1.Disposable.None;\n        this.disposables = [];\n        for (var _i = 0, _a = this.scmService.repositories; _i < _a.length; _i++) {\n            var repository = _a[_i];\n            this.onDidAddRepository(repository);\n        }\n        this.scmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n        this.render();\n    }\n    StatusUpdater.prototype.onDidAddRepository = function (repository) {\n        var _this = this;\n        var provider = repository.provider;\n        var onDidChange = event_1.Event.any(provider.onDidChange, provider.onDidChangeResources);\n        var changeDisposable = onDidChange(function () { return _this.render(); });\n        var onDidRemove = event_1.Event.filter(this.scmService.onDidRemoveRepository, function (e) { return e === repository; });\n        var removeDisposable = onDidRemove(function () {\n            disposable.dispose();\n            _this.disposables = _this.disposables.filter(function (d) { return d !== removeDisposable; });\n            _this.render();\n        });\n        var disposable = lifecycle_1.combinedDisposable([changeDisposable, removeDisposable]);\n        this.disposables.push(disposable);\n    };\n    StatusUpdater.prototype.render = function () {\n        this.badgeDisposable.dispose();\n        var count = this.scmService.repositories.reduce(function (r, repository) {\n            if (typeof repository.provider.count === 'number') {\n                return r + repository.provider.count;\n            }\n            else {\n                return r + repository.provider.groups.elements.reduce(function (r, g) { return r + g.elements.length; }, 0);\n            }\n        }, 0);\n        // TODO@joao: remove\n        this.logService.trace('SCM#StatusUpdater.render', count);\n        if (count > 0) {\n            var badge = new activity_1.NumberBadge(count, function (num) { return nls_1.localize('scmPendingChangesBadge', '{0} pending changes', num); });\n            this.badgeDisposable = this.activityService.showActivity(scm_1.VIEWLET_ID, badge, 'scm-viewlet-label');\n        }\n        else {\n            this.badgeDisposable = lifecycle_1.Disposable.None;\n        }\n    };\n    StatusUpdater.prototype.dispose = function () {\n        this.badgeDisposable.dispose();\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    StatusUpdater = tslib_1.__decorate([\n        tslib_1.__param(0, scm_1.ISCMService),\n        tslib_1.__param(1, activity_1.IActivityService),\n        tslib_1.__param(2, log_1.ILogService)\n    ], StatusUpdater);\n    return StatusUpdater;\n}());\nexports.StatusUpdater = StatusUpdater;\nvar StatusBarController = /** @class */ (function () {\n    function StatusBarController(scmService, statusbarService, contextKeyService, editorService) {\n        this.scmService = scmService;\n        this.statusbarService = statusbarService;\n        this.editorService = editorService;\n        this.statusBarDisposable = lifecycle_1.Disposable.None;\n        this.focusDisposable = lifecycle_1.Disposable.None;\n        this.focusedRepository = undefined;\n        this.disposables = [];\n        this.focusedProviderContextKey = contextKeyService.createKey('scmProvider', undefined);\n        this.scmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n        for (var _i = 0, _a = this.scmService.repositories; _i < _a.length; _i++) {\n            var repository = _a[_i];\n            this.onDidAddRepository(repository);\n        }\n        editorService.onDidActiveEditorChange(this.onDidActiveEditorChange, this, this.disposables);\n    }\n    StatusBarController.prototype.onDidActiveEditorChange = function () {\n        if (!this.editorService.activeEditor) {\n            return;\n        }\n        var resource = this.editorService.activeEditor.getResource();\n        if (!resource || resource.scheme !== 'file') {\n            return;\n        }\n        var bestRepository = null;\n        var bestMatchLength = Number.NEGATIVE_INFINITY;\n        for (var _i = 0, _a = this.scmService.repositories; _i < _a.length; _i++) {\n            var repository = _a[_i];\n            var root = repository.provider.rootUri;\n            if (!root) {\n                continue;\n            }\n            var rootFSPath = root.fsPath;\n            var prefixLength = strings_1.commonPrefixLength(rootFSPath, resource.fsPath);\n            if (prefixLength === rootFSPath.length && prefixLength > bestMatchLength) {\n                bestRepository = repository;\n                bestMatchLength = prefixLength;\n            }\n        }\n        if (bestRepository) {\n            this.onDidFocusRepository(bestRepository);\n        }\n    };\n    StatusBarController.prototype.onDidAddRepository = function (repository) {\n        var _this = this;\n        var changeDisposable = repository.onDidFocus(function () { return _this.onDidFocusRepository(repository); });\n        var onDidRemove = event_1.Event.filter(this.scmService.onDidRemoveRepository, function (e) { return e === repository; });\n        var removeDisposable = onDidRemove(function () {\n            disposable.dispose();\n            _this.disposables = _this.disposables.filter(function (d) { return d !== removeDisposable; });\n            if (_this.scmService.repositories.length === 0) {\n                _this.onDidFocusRepository(undefined);\n            }\n            else if (_this.focusedRepository === repository) {\n                _this.scmService.repositories[0].focus();\n            }\n        });\n        var disposable = lifecycle_1.combinedDisposable([changeDisposable, removeDisposable]);\n        this.disposables.push(disposable);\n        if (!this.focusedRepository) {\n            this.onDidFocusRepository(repository);\n        }\n    };\n    StatusBarController.prototype.onDidFocusRepository = function (repository) {\n        var _this = this;\n        if (this.focusedRepository === repository) {\n            return;\n        }\n        this.focusedRepository = repository;\n        this.focusedProviderContextKey.set(repository && repository.provider.id);\n        this.focusDisposable.dispose();\n        if (repository && repository.provider.onDidChangeStatusBarCommands) {\n            this.focusDisposable = repository.provider.onDidChangeStatusBarCommands(function () { return _this.render(repository); });\n        }\n        this.render(repository);\n    };\n    StatusBarController.prototype.render = function (repository) {\n        var _this = this;\n        this.statusBarDisposable.dispose();\n        if (!repository) {\n            return;\n        }\n        var commands = repository.provider.statusBarCommands || [];\n        var label = repository.provider.rootUri\n            ? resources_1.basename(repository.provider.rootUri) + \" (\" + repository.provider.label + \")\"\n            : repository.provider.label;\n        var disposables = commands.map(function (c) { return _this.statusbarService.addEntry({\n            text: c.title,\n            tooltip: label + \" - \" + c.tooltip,\n            command: c.id,\n            arguments: c.arguments\n        }, statusbar_1.StatusbarAlignment.LEFT, 10000); });\n        this.statusBarDisposable = lifecycle_1.combinedDisposable(disposables);\n    };\n    StatusBarController.prototype.dispose = function () {\n        this.focusDisposable.dispose();\n        this.statusBarDisposable.dispose();\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    StatusBarController = tslib_1.__decorate([\n        tslib_1.__param(0, scm_1.ISCMService),\n        tslib_1.__param(1, statusbar_1.IStatusbarService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, editorService_1.IEditorService)\n    ], StatusBarController);\n    return StatusBarController;\n}());\nexports.StatusBarController = StatusBarController;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmActivity.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scmActivity.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { basename } from 'vs/base/common/resources';\nimport { IDisposable, dispose, Disposable, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { VIEWLET_ID, ISCMService, ISCMRepository } from 'vs/workbench/contrib/scm/common/scm';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IStatusbarService, StatusbarAlignment as MainThreadStatusBarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { commonPrefixLength } from 'vs/base/common/strings';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class StatusUpdater implements IWorkbenchContribution {\n\n\tprivate badgeDisposable: IDisposable = Disposable.None;\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tfor (const repository of this.scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\tthis.scmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\t\tthis.render();\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tconst provider = repository.provider;\n\t\tconst onDidChange = Event.any(provider.onDidChange, provider.onDidChangeResources);\n\t\tconst changeDisposable = onDidChange(() => this.render());\n\n\t\tconst onDidRemove = Event.filter(this.scmService.onDidRemoveRepository, e => e === repository);\n\t\tconst removeDisposable = onDidRemove(() => {\n\t\t\tdisposable.dispose();\n\t\t\tthis.disposables = this.disposables.filter(d => d !== removeDisposable);\n\t\t\tthis.render();\n\t\t});\n\n\t\tconst disposable = combinedDisposable([changeDisposable, removeDisposable]);\n\t\tthis.disposables.push(disposable);\n\t}\n\n\tprivate render(): void {\n\t\tthis.badgeDisposable.dispose();\n\n\t\tconst count = this.scmService.repositories.reduce((r, repository) => {\n\t\t\tif (typeof repository.provider.count === 'number') {\n\t\t\t\treturn r + repository.provider.count;\n\t\t\t} else {\n\t\t\t\treturn r + repository.provider.groups.elements.reduce<number>((r, g) => r + g.elements.length, 0);\n\t\t\t}\n\t\t}, 0);\n\n\t\t// TODO@joao: remove\n\t\tthis.logService.trace('SCM#StatusUpdater.render', count);\n\n\t\tif (count > 0) {\n\t\t\tconst badge = new NumberBadge(count, num => localize('scmPendingChangesBadge', '{0} pending changes', num));\n\t\t\tthis.badgeDisposable = this.activityService.showActivity(VIEWLET_ID, badge, 'scm-viewlet-label');\n\t\t} else {\n\t\t\tthis.badgeDisposable = Disposable.None;\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.badgeDisposable.dispose();\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport class StatusBarController implements IWorkbenchContribution {\n\n\tprivate statusBarDisposable: IDisposable = Disposable.None;\n\tprivate focusDisposable: IDisposable = Disposable.None;\n\tprivate focusedRepository: ISCMRepository | undefined = undefined;\n\tprivate focusedProviderContextKey: IContextKey<string | undefined>;\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@ISCMService private readonly scmService: ISCMService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tthis.focusedProviderContextKey = contextKeyService.createKey<string | undefined>('scmProvider', undefined);\n\t\tthis.scmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\n\t\tfor (const repository of this.scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\teditorService.onDidActiveEditorChange(this.onDidActiveEditorChange, this, this.disposables);\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\t\tif (!this.editorService.activeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst resource = this.editorService.activeEditor.getResource();\n\n\t\tif (!resource || resource.scheme !== 'file') {\n\t\t\treturn;\n\t\t}\n\n\t\tlet bestRepository: ISCMRepository | null = null;\n\t\tlet bestMatchLength = Number.NEGATIVE_INFINITY;\n\n\t\tfor (const repository of this.scmService.repositories) {\n\t\t\tconst root = repository.provider.rootUri;\n\n\t\t\tif (!root) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst rootFSPath = root.fsPath;\n\t\t\tconst prefixLength = commonPrefixLength(rootFSPath, resource.fsPath);\n\n\t\t\tif (prefixLength === rootFSPath.length && prefixLength > bestMatchLength) {\n\t\t\t\tbestRepository = repository;\n\t\t\t\tbestMatchLength = prefixLength;\n\t\t\t}\n\t\t}\n\n\t\tif (bestRepository) {\n\t\t\tthis.onDidFocusRepository(bestRepository);\n\t\t}\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tconst changeDisposable = repository.onDidFocus(() => this.onDidFocusRepository(repository));\n\t\tconst onDidRemove = Event.filter(this.scmService.onDidRemoveRepository, e => e === repository);\n\t\tconst removeDisposable = onDidRemove(() => {\n\t\t\tdisposable.dispose();\n\t\t\tthis.disposables = this.disposables.filter(d => d !== removeDisposable);\n\n\t\t\tif (this.scmService.repositories.length === 0) {\n\t\t\t\tthis.onDidFocusRepository(undefined);\n\t\t\t} else if (this.focusedRepository === repository) {\n\t\t\t\tthis.scmService.repositories[0].focus();\n\t\t\t}\n\t\t});\n\n\t\tconst disposable = combinedDisposable([changeDisposable, removeDisposable]);\n\t\tthis.disposables.push(disposable);\n\n\t\tif (!this.focusedRepository) {\n\t\t\tthis.onDidFocusRepository(repository);\n\t\t}\n\t}\n\n\tprivate onDidFocusRepository(repository: ISCMRepository | undefined): void {\n\t\tif (this.focusedRepository === repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.focusedRepository = repository;\n\t\tthis.focusedProviderContextKey.set(repository && repository.provider.id);\n\t\tthis.focusDisposable.dispose();\n\n\t\tif (repository && repository.provider.onDidChangeStatusBarCommands) {\n\t\t\tthis.focusDisposable = repository.provider.onDidChangeStatusBarCommands(() => this.render(repository));\n\t\t}\n\n\t\tthis.render(repository);\n\t}\n\n\tprivate render(repository: ISCMRepository | undefined): void {\n\t\tthis.statusBarDisposable.dispose();\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands = repository.provider.statusBarCommands || [];\n\t\tconst label = repository.provider.rootUri\n\t\t\t? `${basename(repository.provider.rootUri)} (${repository.provider.label})`\n\t\t\t: repository.provider.label;\n\n\t\tconst disposables = commands.map(c => this.statusbarService.addEntry({\n\t\t\ttext: c.title,\n\t\t\ttooltip: `${label} - ${c.tooltip}`,\n\t\t\tcommand: c.id,\n\t\t\targuments: c.arguments\n\t\t}, MainThreadStatusBarAlignment.LEFT, 10000));\n\n\t\tthis.statusBarDisposable = combinedDisposable(disposables);\n\t}\n\n\tdispose(): void {\n\t\tthis.focusDisposable.dispose();\n\t\tthis.statusBarDisposable.dispose();\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n"]}]}