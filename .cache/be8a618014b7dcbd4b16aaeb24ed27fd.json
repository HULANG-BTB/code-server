{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codelens/codelensWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codelens/codelensWidget.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/common/arrays\", \"vs/base/common/strings\", \"vs/editor/browser/editorBrowser\", \"vs/editor/common/core/range\", \"vs/editor/common/model/textModel\", \"vs/editor/common/view/editorColorRegistry\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/css!./codelensWidget\"], function (require, exports, dom, arrays_1, strings_1, editorBrowser, range_1, textModel_1, editorColorRegistry_1, colorRegistry_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CodeLensViewZone {\n        constructor(afterLineNumber, onHeight) {\n            this.afterLineNumber = afterLineNumber;\n            this._onHeight = onHeight;\n            this.heightInLines = 1;\n            this.suppressMouseDown = true;\n            this.domNode = document.createElement('div');\n        }\n        onComputedHeight(height) {\n            if (this._lastHeight === undefined) {\n                this._lastHeight = height;\n            }\n            else if (this._lastHeight !== height) {\n                this._lastHeight = height;\n                this._onHeight();\n            }\n        }\n    }\n    class CodeLensContentWidget {\n        constructor(editor, symbolRange) {\n            // Editor.IContentWidget.allowEditorOverflow\n            this.allowEditorOverflow = false;\n            this.suppressMouseDown = true;\n            this._commands = Object.create(null);\n            this._id = 'codeLensWidget' + (++CodeLensContentWidget._idPool);\n            this._editor = editor;\n            this.setSymbolRange(symbolRange);\n            this._domNode = document.createElement('span');\n            this._domNode.innerHTML = '&nbsp;';\n            dom.addClass(this._domNode, 'codelens-decoration');\n            dom.addClass(this._domNode, 'invisible-cl');\n            this.updateHeight();\n            this.updateVisibility();\n        }\n        updateHeight() {\n            const { fontInfo, lineHeight } = this._editor.getConfiguration();\n            this._domNode.style.height = `${Math.round(lineHeight * 1.1)}px`;\n            this._domNode.style.lineHeight = `${lineHeight}px`;\n            this._domNode.style.fontSize = `${Math.round(fontInfo.fontSize * 0.9)}px`;\n            this._domNode.style.paddingRight = `${Math.round(fontInfo.fontSize * 0.45)}px`;\n            this._domNode.innerHTML = '&nbsp;';\n        }\n        updateVisibility() {\n            if (this.isVisible()) {\n                dom.removeClass(this._domNode, 'invisible-cl');\n                dom.addClass(this._domNode, 'fadein');\n            }\n        }\n        withCommands(inSymbols) {\n            this._commands = Object.create(null);\n            const symbols = arrays_1.coalesce(inSymbols);\n            if (arrays_1.isFalsyOrEmpty(symbols)) {\n                this._domNode.innerHTML = '<span>no commands</span>';\n                return;\n            }\n            let html = [];\n            for (let i = 0; i < symbols.length; i++) {\n                const command = symbols[i].command;\n                if (command) {\n                    const title = strings_1.escape(command.title);\n                    let part;\n                    if (command.id) {\n                        part = `<a id=${i}>${title}</a>`;\n                        this._commands[i] = command;\n                    }\n                    else {\n                        part = `<span>${title}</span>`;\n                    }\n                    html.push(part);\n                }\n            }\n            this._domNode.innerHTML = html.join('<span>&nbsp;|&nbsp;</span>');\n            this._editor.layoutContentWidget(this);\n        }\n        getCommand(link) {\n            return link.parentElement === this._domNode\n                ? this._commands[link.id]\n                : undefined;\n        }\n        getId() {\n            return this._id;\n        }\n        getDomNode() {\n            return this._domNode;\n        }\n        setSymbolRange(range) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const lineNumber = range.startLineNumber;\n            const column = this._editor.getModel().getLineFirstNonWhitespaceColumn(lineNumber);\n            this._widgetPosition = {\n                position: { lineNumber: lineNumber, column: column },\n                preference: [editorBrowser.ContentWidgetPositionPreference.ABOVE]\n            };\n        }\n        getPosition() {\n            return this._widgetPosition;\n        }\n        isVisible() {\n            return this._domNode.hasAttribute('monaco-visible-content-widget');\n        }\n    }\n    CodeLensContentWidget._idPool = 0;\n    class CodeLensHelper {\n        constructor() {\n            this._removeDecorations = [];\n            this._addDecorations = [];\n            this._addDecorationsCallbacks = [];\n        }\n        addDecoration(decoration, callback) {\n            this._addDecorations.push(decoration);\n            this._addDecorationsCallbacks.push(callback);\n        }\n        removeDecoration(decorationId) {\n            this._removeDecorations.push(decorationId);\n        }\n        commit(changeAccessor) {\n            let resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);\n            for (let i = 0, len = resultingDecorations.length; i < len; i++) {\n                this._addDecorationsCallbacks[i](resultingDecorations[i]);\n            }\n        }\n    }\n    exports.CodeLensHelper = CodeLensHelper;\n    class CodeLens {\n        constructor(data, editor, helper, viewZoneChangeAccessor, updateCallback) {\n            this._editor = editor;\n            this._data = data;\n            this._decorationIds = new Array(this._data.length);\n            let range;\n            this._data.forEach((codeLensData, i) => {\n                helper.addDecoration({\n                    range: codeLensData.symbol.range,\n                    options: textModel_1.ModelDecorationOptions.EMPTY\n                }, id => this._decorationIds[i] = id);\n                // the range contains all lenses on this line\n                if (!range) {\n                    range = range_1.Range.lift(codeLensData.symbol.range);\n                }\n                else {\n                    range = range_1.Range.plusRange(range, codeLensData.symbol.range);\n                }\n            });\n            if (range) {\n                this._contentWidget = new CodeLensContentWidget(editor, range);\n                this._viewZone = new CodeLensViewZone(range.startLineNumber - 1, updateCallback);\n                this._viewZoneId = viewZoneChangeAccessor.addZone(this._viewZone);\n                this._editor.addContentWidget(this._contentWidget);\n            }\n        }\n        dispose(helper, viewZoneChangeAccessor) {\n            while (this._decorationIds.length) {\n                helper.removeDecoration(this._decorationIds.pop());\n            }\n            if (viewZoneChangeAccessor) {\n                viewZoneChangeAccessor.removeZone(this._viewZoneId);\n            }\n            this._editor.removeContentWidget(this._contentWidget);\n        }\n        isValid() {\n            if (!this._editor.hasModel()) {\n                return false;\n            }\n            const model = this._editor.getModel();\n            return this._decorationIds.some((id, i) => {\n                const range = model.getDecorationRange(id);\n                const symbol = this._data[i].symbol;\n                return !!(range && range_1.Range.isEmpty(symbol.range) === range.isEmpty());\n            });\n        }\n        updateCodeLensSymbols(data, helper) {\n            while (this._decorationIds.length) {\n                helper.removeDecoration(this._decorationIds.pop());\n            }\n            this._data = data;\n            this._decorationIds = new Array(this._data.length);\n            this._data.forEach((codeLensData, i) => {\n                helper.addDecoration({\n                    range: codeLensData.symbol.range,\n                    options: textModel_1.ModelDecorationOptions.EMPTY\n                }, id => this._decorationIds[i] = id);\n            });\n        }\n        computeIfNecessary(model) {\n            this._contentWidget.updateVisibility(); // trigger the fade in\n            if (!this._contentWidget.isVisible()) {\n                return null;\n            }\n            // Read editor current state\n            for (let i = 0; i < this._decorationIds.length; i++) {\n                const range = model.getDecorationRange(this._decorationIds[i]);\n                if (range) {\n                    this._data[i].symbol.range = range;\n                }\n            }\n            return this._data;\n        }\n        updateCommands(symbols) {\n            this._contentWidget.withCommands(symbols);\n            for (let i = 0; i < this._data.length; i++) {\n                const resolved = symbols[i];\n                if (resolved) {\n                    const { symbol } = this._data[i];\n                    symbol.command = resolved.command || symbol.command;\n                }\n            }\n        }\n        updateHeight() {\n            this._contentWidget.updateHeight();\n        }\n        getCommand(link) {\n            return this._contentWidget.getCommand(link);\n        }\n        getLineNumber() {\n            if (this._editor.hasModel()) {\n                const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n                if (range) {\n                    return range.startLineNumber;\n                }\n            }\n            return -1;\n        }\n        update(viewZoneChangeAccessor) {\n            if (this.isValid() && this._editor.hasModel()) {\n                const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n                if (range) {\n                    this._viewZone.afterLineNumber = range.startLineNumber - 1;\n                    viewZoneChangeAccessor.layoutZone(this._viewZoneId);\n                    this._contentWidget.setSymbolRange(range);\n                    this._editor.layoutContentWidget(this._contentWidget);\n                }\n            }\n        }\n    }\n    exports.CodeLens = CodeLens;\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const codeLensForeground = theme.getColor(editorColorRegistry_1.editorCodeLensForeground);\n        if (codeLensForeground) {\n            collector.addRule(`.monaco-editor .codelens-decoration { color: ${codeLensForeground}; }`);\n        }\n        const activeLinkForeground = theme.getColor(colorRegistry_1.editorActiveLinkForeground);\n        if (activeLinkForeground) {\n            collector.addRule(`.monaco-editor .codelens-decoration > a:hover { color: ${activeLinkForeground} !important; }`);\n        }\n    });\n});\n",null]}