{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/ide/src/fill/notification.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/fill/notification.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"@coder/logger\");\nvar Severity;\n(function (Severity) {\n    Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n    Severity[Severity[\"Info\"] = 1] = \"Info\";\n    Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n    Severity[Severity[\"Error\"] = 3] = \"Error\";\n})(Severity = exports.Severity || (exports.Severity = {}));\n/**\n * Console-based notification service.\n */\nclass NotificationService {\n    error(error) {\n        logger_1.logger.error(error.message, logger_1.field(\"error\", error));\n    }\n    prompt(severity, message, _buttons, _onCancel) {\n        switch (severity) {\n            case Severity.Info:\n                logger_1.logger.info(message);\n                break;\n            case Severity.Warning:\n                logger_1.logger.warn(message);\n                break;\n            case Severity.Error:\n                logger_1.logger.error(message);\n                break;\n        }\n        return {\n            close: () => undefined,\n            updateMessage: () => undefined,\n            updateButtons: () => undefined,\n        };\n    }\n}\nexports.NotificationService = NotificationService;\n/**\n * Console-based progress service.\n */\nclass ProgressService {\n    start(title, task) {\n        logger_1.logger.info(title);\n        return task({\n            report: (progress) => {\n                logger_1.logger.info(`${title} progress: ${progress}`);\n            },\n        });\n    }\n}\nexports.ProgressService = ProgressService;\n",{"version":3,"file":"/home/coding/workspace/packages/ide/src/fill/notification.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/ide/src/fill/notification.ts"],"names":[],"mappings":";;AAAA,0CAA8C;AAQ9C,IAAY,QAKX;AALD,WAAY,QAAQ;IACnB,2CAAU,CAAA;IACV,uCAAQ,CAAA;IACR,6CAAW,CAAA;IACX,yCAAS,CAAA;AACV,CAAC,EALW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAKnB;AA6BD;;GAEG;AACH,MAAa,mBAAmB;IACxB,KAAK,CAAC,KAAY;QACxB,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,cAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IACpD,CAAC;IAEM,MAAM,CAAC,QAAkB,EAAE,OAAe,EAAE,QAA+B,EAAE,SAAqB;QACxG,QAAQ,QAAQ,EAAE;YACjB,KAAK,QAAQ,CAAC,IAAI;gBAAE,eAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;YAChD,KAAK,QAAQ,CAAC,OAAO;gBAAE,eAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;YACnD,KAAK,QAAQ,CAAC,KAAK;gBAAE,eAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAAC,MAAM;SAClD;QAED,OAAO;YACN,KAAK,EAAE,GAAS,EAAE,CAAC,SAAS;YAC5B,aAAa,EAAE,GAAS,EAAE,CAAC,SAAS;YACpC,aAAa,EAAE,GAAS,EAAE,CAAC,SAAS;SACpC,CAAC;IACH,CAAC;CACD;AAlBD,kDAkBC;AAED;;GAEG;AACH,MAAa,eAAe;IACpB,KAAK,CAAI,KAAa,EAAE,IAAyC;QACvE,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEnB,OAAO,IAAI,CAAC;YACX,MAAM,EAAE,CAAC,QAAQ,EAAQ,EAAE;gBAC1B,eAAM,CAAC,IAAI,CAAC,GAAG,KAAK,cAAc,QAAQ,EAAE,CAAC,CAAC;YAC/C,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;CACD;AAVD,0CAUC","sourcesContent":["import { logger, field } from \"@coder/logger\";\n\nexport interface INotificationHandle {\n\tclose(): void;\n\tupdateMessage(message: string): void;\n\tupdateButtons(buttons: INotificationButton[]): void;\n}\n\nexport enum Severity {\n\tIgnore = 0,\n\tInfo = 1,\n\tWarning = 2,\n\tError = 3,\n}\n\nexport interface INotificationButton {\n\tlabel: string;\n\trun(): void;\n}\n\n/**\n * Optional notification service.\n */\nexport interface INotificationService {\n\terror(error: Error): void;\n\tprompt(severity: Severity, message: string, buttons: INotificationButton[], onCancel: () => void): INotificationHandle;\n}\n\nexport interface IProgress {\n\t/**\n\t * Report progress, which should be the completed percentage from 0 to 100.\n\t */\n\treport(progress: number): void;\n}\n\nexport interface IProgressService {\n\t/**\n\t * Start a new progress bar that resolves & disappears when the task finishes.\n\t */\n\tstart<T>(title: string, task: (progress: IProgress) => Promise<T>, onCancel: () => void): Promise<T>;\n}\n\n/**\n * Console-based notification service.\n */\nexport class NotificationService implements INotificationService {\n\tpublic error(error: Error): void {\n\t\tlogger.error(error.message, field(\"error\", error));\n\t}\n\n\tpublic prompt(severity: Severity, message: string, _buttons: INotificationButton[], _onCancel: () => void): INotificationHandle {\n\t\tswitch (severity) {\n\t\t\tcase Severity.Info: logger.info(message); break;\n\t\t\tcase Severity.Warning: logger.warn(message); break;\n\t\t\tcase Severity.Error: logger.error(message); break;\n\t\t}\n\n\t\treturn {\n\t\t\tclose: (): void => undefined,\n\t\t\tupdateMessage: (): void => undefined,\n\t\t\tupdateButtons: (): void => undefined,\n\t\t};\n\t}\n}\n\n/**\n * Console-based progress service.\n */\nexport class ProgressService implements IProgressService {\n\tpublic start<T>(title: string, task: (progress: IProgress) => Promise<T>): Promise<T> {\n\t\tlogger.info(title);\n\n\t\treturn task({\n\t\t\treport: (progress): void => {\n\t\t\t\tlogger.info(`${title} progress: ${progress}`);\n\t\t\t},\n\t\t});\n\t}\n}\n"]}]}