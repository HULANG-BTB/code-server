{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar TrimTrailingWhitespaceCommand = /** @class */ (function () {\n    function TrimTrailingWhitespaceCommand(selection, cursors) {\n        this.selection = selection;\n        this.cursors = cursors;\n    }\n    TrimTrailingWhitespaceCommand.prototype.getEditOperations = function (model, builder) {\n        var ops = trimTrailingWhitespace(model, this.cursors);\n        for (var i = 0, len = ops.length; i < len; i++) {\n            var op = ops[i];\n            builder.addEditOperation(op.range, op.text);\n        }\n        this.selectionId = builder.trackSelection(this.selection);\n    };\n    TrimTrailingWhitespaceCommand.prototype.computeCursorState = function (model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    };\n    return TrimTrailingWhitespaceCommand;\n}());\nexports.TrimTrailingWhitespaceCommand = TrimTrailingWhitespaceCommand;\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nfunction trimTrailingWhitespace(model, cursors) {\n    // Sort cursors ascending\n    cursors.sort(function (a, b) {\n        if (a.lineNumber === b.lineNumber) {\n            return a.column - b.column;\n        }\n        return a.lineNumber - b.lineNumber;\n    });\n    // Reduce multiple cursors on the same line and only keep the last one on the line\n    for (var i = cursors.length - 2; i >= 0; i--) {\n        if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n            // Remove cursor at `i`\n            cursors.splice(i, 1);\n        }\n    }\n    var r = [];\n    var rLen = 0;\n    var cursorIndex = 0;\n    var cursorLen = cursors.length;\n    for (var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        var lineContent = model.getLineContent(lineNumber);\n        var maxLineColumn = lineContent.length + 1;\n        var minEditColumn = 0;\n        if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n            minEditColumn = cursors[cursorIndex].column;\n            cursorIndex++;\n            if (minEditColumn === maxLineColumn) {\n                // The cursor is at the end of the line => no edits for sure on this line\n                continue;\n            }\n        }\n        if (lineContent.length === 0) {\n            continue;\n        }\n        var lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        var fromColumn = 0;\n        if (lastNonWhitespaceIndex === -1) {\n            // Entire line is whitespace\n            fromColumn = 1;\n        }\n        else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n            // There is trailing whitespace\n            fromColumn = lastNonWhitespaceIndex + 2;\n        }\n        else {\n            // There is no trailing whitespace\n            continue;\n        }\n        fromColumn = Math.max(minEditColumn, fromColumn);\n        r[rLen++] = editOperation_1.EditOperation.delete(new range_1.Range(lineNumber, fromColumn, lineNumber, maxLineColumn));\n    }\n    return r;\n}\nexports.trimTrailingWhitespace = trimTrailingWhitespace;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\n\nexport class TrimTrailingWhitespaceCommand implements ICommand {\n\n\tprivate readonly selection: Selection;\n\tprivate selectionId: string;\n\tprivate readonly cursors: Position[];\n\n\tconstructor(selection: Selection, cursors: Position[]) {\n\t\tthis.selection = selection;\n\t\tthis.cursors = cursors;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tlet ops = trimTrailingWhitespace(model, this.cursors);\n\t\tfor (let i = 0, len = ops.length; i < len; i++) {\n\t\t\tlet op = ops[i];\n\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\nexport function trimTrailingWhitespace(model: ITextModel, cursors: Position[]): IIdentifiedSingleEditOperation[] {\n\t// Sort cursors ascending\n\tcursors.sort((a, b) => {\n\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\treturn a.column - b.column;\n\t\t}\n\t\treturn a.lineNumber - b.lineNumber;\n\t});\n\n\t// Reduce multiple cursors on the same line and only keep the last one on the line\n\tfor (let i = cursors.length - 2; i >= 0; i--) {\n\t\tif (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n\t\t\t// Remove cursor at `i`\n\t\t\tcursors.splice(i, 1);\n\t\t}\n\t}\n\n\tlet r: IIdentifiedSingleEditOperation[] = [];\n\tlet rLen = 0;\n\tlet cursorIndex = 0;\n\tlet cursorLen = cursors.length;\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlet lineContent = model.getLineContent(lineNumber);\n\t\tlet maxLineColumn = lineContent.length + 1;\n\t\tlet minEditColumn = 0;\n\n\t\tif (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n\t\t\tminEditColumn = cursors[cursorIndex].column;\n\t\t\tcursorIndex++;\n\t\t\tif (minEditColumn === maxLineColumn) {\n\t\t\t\t// The cursor is at the end of the line => no edits for sure on this line\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif (lineContent.length === 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\tlet fromColumn = 0;\n\t\tif (lastNonWhitespaceIndex === -1) {\n\t\t\t// Entire line is whitespace\n\t\t\tfromColumn = 1;\n\t\t} else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n\t\t\t// There is trailing whitespace\n\t\t\tfromColumn = lastNonWhitespaceIndex + 2;\n\t\t} else {\n\t\t\t// There is no trailing whitespace\n\t\t\tcontinue;\n\t\t}\n\n\t\tfromColumn = Math.max(minEditColumn, fromColumn);\n\t\tr[rLen++] = EditOperation.delete(new Range(\n\t\t\tlineNumber, fromColumn,\n\t\t\tlineNumber, maxLineColumn\n\t\t));\n\t}\n\n\treturn r;\n}\n"]}]}