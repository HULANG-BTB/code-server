{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/resources.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/resources.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar objects = require(\"vs/base/common/objects\");\nvar event_1 = require(\"vs/base/common/event\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar glob_1 = require(\"vs/base/common/glob\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar types_1 = require(\"vs/base/common/types\");\nvar ResourceContextKey = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceContextKey, _super);\n    function ResourceContextKey(contextKeyService, _fileService, _modeService) {\n        var _this = _super.call(this) || this;\n        _this._fileService = _fileService;\n        _this._modeService = _modeService;\n        _this._schemeKey = ResourceContextKey.Scheme.bindTo(contextKeyService);\n        _this._filenameKey = ResourceContextKey.Filename.bindTo(contextKeyService);\n        _this._langIdKey = ResourceContextKey.LangId.bindTo(contextKeyService);\n        _this._resourceKey = ResourceContextKey.Resource.bindTo(contextKeyService);\n        _this._extensionKey = ResourceContextKey.Extension.bindTo(contextKeyService);\n        _this._hasResource = ResourceContextKey.HasResource.bindTo(contextKeyService);\n        _this._isFileSystemResource = ResourceContextKey.IsFileSystemResource.bindTo(contextKeyService);\n        _this._register(_fileService.onDidChangeFileSystemProviderRegistrations(function () {\n            var resource = _this._resourceKey.get();\n            _this._isFileSystemResource.set(Boolean(resource && _fileService.canHandleResource(resource)));\n        }));\n        _this._register(_modeService.onDidCreateMode(function () {\n            var value = _this._resourceKey.get();\n            _this._langIdKey.set(value ? _this._modeService.getModeIdByFilepathOrFirstLine(value.fsPath) : null);\n        }));\n        return _this;\n    }\n    ResourceContextKey.prototype.set = function (value) {\n        if (!ResourceContextKey._uriEquals(this._resourceKey.get(), value)) {\n            this._resourceKey.set(value);\n            this._schemeKey.set(value ? value.scheme : null);\n            this._filenameKey.set(value ? resources_1.basename(value) : null);\n            this._langIdKey.set(value ? this._modeService.getModeIdByFilepathOrFirstLine(value.fsPath) : null);\n            this._extensionKey.set(value ? resources_1.extname(value) : null);\n            this._hasResource.set(!!value);\n            this._isFileSystemResource.set(value ? this._fileService.canHandleResource(value) : false);\n        }\n    };\n    ResourceContextKey.prototype.reset = function () {\n        this._schemeKey.reset();\n        this._langIdKey.reset();\n        this._resourceKey.reset();\n        this._langIdKey.reset();\n        this._extensionKey.reset();\n        this._hasResource.reset();\n        this._isFileSystemResource.reset();\n    };\n    ResourceContextKey.prototype.get = function () {\n        return types_1.withNullAsUndefined(this._resourceKey.get());\n    };\n    ResourceContextKey._uriEquals = function (a, b) {\n        if (a === b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return a.scheme === b.scheme // checks for not equals (fail fast)\n            && a.authority === b.authority\n            && a.path === b.path\n            && a.query === b.query\n            && a.fragment === b.fragment\n            && a.toString() === b.toString(); // for equal we use the normalized toString-form\n    };\n    ResourceContextKey.Scheme = new contextkey_1.RawContextKey('resourceScheme', undefined);\n    ResourceContextKey.Filename = new contextkey_1.RawContextKey('resourceFilename', undefined);\n    ResourceContextKey.LangId = new contextkey_1.RawContextKey('resourceLangId', undefined);\n    ResourceContextKey.Resource = new contextkey_1.RawContextKey('resource', undefined);\n    ResourceContextKey.Extension = new contextkey_1.RawContextKey('resourceExtname', undefined);\n    ResourceContextKey.HasResource = new contextkey_1.RawContextKey('resourceSet', false);\n    ResourceContextKey.IsFileSystemResource = new contextkey_1.RawContextKey('isFileSystemResource', false);\n    ResourceContextKey = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, files_1.IFileService),\n        tslib_1.__param(2, modeService_1.IModeService)\n    ], ResourceContextKey);\n    return ResourceContextKey;\n}(lifecycle_1.Disposable));\nexports.ResourceContextKey = ResourceContextKey;\nvar ResourceGlobMatcher = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceGlobMatcher, _super);\n    function ResourceGlobMatcher(globFn, shouldUpdate, contextService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.globFn = globFn;\n        _this.shouldUpdate = shouldUpdate;\n        _this.contextService = contextService;\n        _this.configurationService = configurationService;\n        _this._onExpressionChange = _this._register(new event_1.Emitter());\n        _this.mapRootToParsedExpression = new Map();\n        _this.mapRootToExpressionConfig = new Map();\n        _this.updateExcludes(false);\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(ResourceGlobMatcher.prototype, \"onExpressionChange\", {\n        get: function () { return this._onExpressionChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    ResourceGlobMatcher.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (_this.shouldUpdate(e)) {\n                _this.updateExcludes(true);\n            }\n        }));\n        this._register(this.contextService.onDidChangeWorkspaceFolders(function () { return _this.updateExcludes(true); }));\n    };\n    ResourceGlobMatcher.prototype.updateExcludes = function (fromEvent) {\n        var _this = this;\n        var changed = false;\n        // Add excludes per workspaces that got added\n        this.contextService.getWorkspace().folders.forEach(function (folder) {\n            var rootExcludes = _this.globFn(folder.uri);\n            if (!_this.mapRootToExpressionConfig.has(folder.uri.toString()) || !objects.equals(_this.mapRootToExpressionConfig.get(folder.uri.toString()), rootExcludes)) {\n                changed = true;\n                _this.mapRootToParsedExpression.set(folder.uri.toString(), glob_1.parse(rootExcludes));\n                _this.mapRootToExpressionConfig.set(folder.uri.toString(), objects.deepClone(rootExcludes));\n            }\n        });\n        // Remove excludes per workspace no longer present\n        this.mapRootToExpressionConfig.forEach(function (value, root) {\n            if (root === ResourceGlobMatcher.NO_ROOT) {\n                return; // always keep this one\n            }\n            if (root && !_this.contextService.getWorkspaceFolder(uri_1.URI.parse(root))) {\n                _this.mapRootToParsedExpression.delete(root);\n                _this.mapRootToExpressionConfig.delete(root);\n                changed = true;\n            }\n        });\n        // Always set for resources outside root as well\n        var globalExcludes = this.globFn();\n        if (!this.mapRootToExpressionConfig.has(ResourceGlobMatcher.NO_ROOT) || !objects.equals(this.mapRootToExpressionConfig.get(ResourceGlobMatcher.NO_ROOT), globalExcludes)) {\n            changed = true;\n            this.mapRootToParsedExpression.set(ResourceGlobMatcher.NO_ROOT, glob_1.parse(globalExcludes));\n            this.mapRootToExpressionConfig.set(ResourceGlobMatcher.NO_ROOT, objects.deepClone(globalExcludes));\n        }\n        if (fromEvent && changed) {\n            this._onExpressionChange.fire();\n        }\n    };\n    ResourceGlobMatcher.prototype.matches = function (resource) {\n        var folder = this.contextService.getWorkspaceFolder(resource);\n        var expressionForRoot;\n        if (folder && this.mapRootToParsedExpression.has(folder.uri.toString())) {\n            expressionForRoot = this.mapRootToParsedExpression.get(folder.uri.toString());\n        }\n        else {\n            expressionForRoot = this.mapRootToParsedExpression.get(ResourceGlobMatcher.NO_ROOT);\n        }\n        // If the resource if from a workspace, convert its absolute path to a relative\n        // path so that glob patterns have a higher probability to match. For example\n        // a glob pattern of \"src/**\" will not match on an absolute path \"/folder/src/file.txt\"\n        // but can match on \"src/file.txt\"\n        var resourcePathToMatch;\n        if (folder) {\n            resourcePathToMatch = resources_1.relativePath(folder.uri, resource); // always uses forward slashes\n        }\n        else {\n            resourcePathToMatch = resource.fsPath; // TODO@isidor: support non-file URIs\n        }\n        return !!expressionForRoot(resourcePathToMatch);\n    };\n    ResourceGlobMatcher.NO_ROOT = null;\n    ResourceGlobMatcher = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], ResourceGlobMatcher);\n    return ResourceGlobMatcher;\n}(lifecycle_1.Disposable));\nexports.ResourceGlobMatcher = ResourceGlobMatcher;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/resources.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/resources.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as objects from 'vs/base/common/objects';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { basename, extname, relativePath } from 'vs/base/common/resources';\nimport { RawContextKey, IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ParsedExpression, IExpression, parse } from 'vs/base/common/glob';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport class ResourceContextKey extends Disposable implements IContextKey<URI> {\n\n\tstatic Scheme = new RawContextKey<string>('resourceScheme', undefined);\n\tstatic Filename = new RawContextKey<string>('resourceFilename', undefined);\n\tstatic LangId = new RawContextKey<string>('resourceLangId', undefined);\n\tstatic Resource = new RawContextKey<URI>('resource', undefined);\n\tstatic Extension = new RawContextKey<string>('resourceExtname', undefined);\n\tstatic HasResource = new RawContextKey<boolean>('resourceSet', false);\n\tstatic IsFileSystemResource = new RawContextKey<boolean>('isFileSystemResource', false);\n\n\tprivate readonly _resourceKey: IContextKey<URI | null>;\n\tprivate readonly _schemeKey: IContextKey<string | null>;\n\tprivate readonly _filenameKey: IContextKey<string | null>;\n\tprivate readonly _langIdKey: IContextKey<string | null>;\n\tprivate readonly _extensionKey: IContextKey<string | null>;\n\tprivate readonly _hasResource: IContextKey<boolean>;\n\tprivate readonly _isFileSystemResource: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IModeService private readonly _modeService: IModeService\n\t) {\n\t\tsuper();\n\n\t\tthis._schemeKey = ResourceContextKey.Scheme.bindTo(contextKeyService);\n\t\tthis._filenameKey = ResourceContextKey.Filename.bindTo(contextKeyService);\n\t\tthis._langIdKey = ResourceContextKey.LangId.bindTo(contextKeyService);\n\t\tthis._resourceKey = ResourceContextKey.Resource.bindTo(contextKeyService);\n\t\tthis._extensionKey = ResourceContextKey.Extension.bindTo(contextKeyService);\n\t\tthis._hasResource = ResourceContextKey.HasResource.bindTo(contextKeyService);\n\t\tthis._isFileSystemResource = ResourceContextKey.IsFileSystemResource.bindTo(contextKeyService);\n\n\t\tthis._register(_fileService.onDidChangeFileSystemProviderRegistrations(() => {\n\t\t\tconst resource = this._resourceKey.get();\n\t\t\tthis._isFileSystemResource.set(Boolean(resource && _fileService.canHandleResource(resource)));\n\t\t}));\n\n\t\tthis._register(_modeService.onDidCreateMode(() => {\n\t\t\tconst value = this._resourceKey.get();\n\t\t\tthis._langIdKey.set(value ? this._modeService.getModeIdByFilepathOrFirstLine(value.fsPath) : null);\n\t\t}));\n\t}\n\n\tset(value: URI | null) {\n\t\tif (!ResourceContextKey._uriEquals(this._resourceKey.get(), value)) {\n\t\t\tthis._resourceKey.set(value);\n\t\t\tthis._schemeKey.set(value ? value.scheme : null);\n\t\t\tthis._filenameKey.set(value ? basename(value) : null);\n\t\t\tthis._langIdKey.set(value ? this._modeService.getModeIdByFilepathOrFirstLine(value.fsPath) : null);\n\t\t\tthis._extensionKey.set(value ? extname(value) : null);\n\t\t\tthis._hasResource.set(!!value);\n\t\t\tthis._isFileSystemResource.set(value ? this._fileService.canHandleResource(value) : false);\n\t\t}\n\t}\n\n\treset(): void {\n\t\tthis._schemeKey.reset();\n\t\tthis._langIdKey.reset();\n\t\tthis._resourceKey.reset();\n\t\tthis._langIdKey.reset();\n\t\tthis._extensionKey.reset();\n\t\tthis._hasResource.reset();\n\t\tthis._isFileSystemResource.reset();\n\t}\n\n\tget(): URI | undefined {\n\t\treturn withNullAsUndefined(this._resourceKey.get());\n\t}\n\n\tprivate static _uriEquals(a: URI | undefined | null, b: URI | undefined | null): boolean {\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\treturn a.scheme === b.scheme // checks for not equals (fail fast)\n\t\t\t&& a.authority === b.authority\n\t\t\t&& a.path === b.path\n\t\t\t&& a.query === b.query\n\t\t\t&& a.fragment === b.fragment\n\t\t\t&& a.toString() === b.toString(); // for equal we use the normalized toString-form\n\t}\n}\n\nexport class ResourceGlobMatcher extends Disposable {\n\n\tprivate static readonly NO_ROOT: string | null = null;\n\n\tprivate readonly _onExpressionChange: Emitter<void> = this._register(new Emitter<void>());\n\tget onExpressionChange(): Event<void> { return this._onExpressionChange.event; }\n\n\tprivate readonly mapRootToParsedExpression: Map<string | null, ParsedExpression> = new Map<string, ParsedExpression>();\n\tprivate readonly mapRootToExpressionConfig: Map<string | null, IExpression> = new Map<string, IExpression>();\n\n\tconstructor(\n\t\tprivate globFn: (root?: URI) => IExpression,\n\t\tprivate shouldUpdate: (event: IConfigurationChangeEvent) => boolean,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateExcludes(false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (this.shouldUpdate(e)) {\n\t\t\t\tthis.updateExcludes(true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.updateExcludes(true)));\n\t}\n\n\tprivate updateExcludes(fromEvent: boolean): void {\n\t\tlet changed = false;\n\n\t\t// Add excludes per workspaces that got added\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tconst rootExcludes = this.globFn(folder.uri);\n\t\t\tif (!this.mapRootToExpressionConfig.has(folder.uri.toString()) || !objects.equals(this.mapRootToExpressionConfig.get(folder.uri.toString()), rootExcludes)) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapRootToParsedExpression.set(folder.uri.toString(), parse(rootExcludes));\n\t\t\t\tthis.mapRootToExpressionConfig.set(folder.uri.toString(), objects.deepClone(rootExcludes));\n\t\t\t}\n\t\t});\n\n\t\t// Remove excludes per workspace no longer present\n\t\tthis.mapRootToExpressionConfig.forEach((value, root) => {\n\t\t\tif (root === ResourceGlobMatcher.NO_ROOT) {\n\t\t\t\treturn; // always keep this one\n\t\t\t}\n\n\t\t\tif (root && !this.contextService.getWorkspaceFolder(URI.parse(root))) {\n\t\t\t\tthis.mapRootToParsedExpression.delete(root);\n\t\t\t\tthis.mapRootToExpressionConfig.delete(root);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t});\n\n\t\t// Always set for resources outside root as well\n\t\tconst globalExcludes = this.globFn();\n\t\tif (!this.mapRootToExpressionConfig.has(ResourceGlobMatcher.NO_ROOT) || !objects.equals(this.mapRootToExpressionConfig.get(ResourceGlobMatcher.NO_ROOT), globalExcludes)) {\n\t\t\tchanged = true;\n\n\t\t\tthis.mapRootToParsedExpression.set(ResourceGlobMatcher.NO_ROOT, parse(globalExcludes));\n\t\t\tthis.mapRootToExpressionConfig.set(ResourceGlobMatcher.NO_ROOT, objects.deepClone(globalExcludes));\n\t\t}\n\n\t\tif (fromEvent && changed) {\n\t\t\tthis._onExpressionChange.fire();\n\t\t}\n\t}\n\n\tmatches(resource: URI): boolean {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\n\t\tlet expressionForRoot: ParsedExpression;\n\t\tif (folder && this.mapRootToParsedExpression.has(folder.uri.toString())) {\n\t\t\texpressionForRoot = this.mapRootToParsedExpression.get(folder.uri.toString())!;\n\t\t} else {\n\t\t\texpressionForRoot = this.mapRootToParsedExpression.get(ResourceGlobMatcher.NO_ROOT)!;\n\t\t}\n\n\t\t// If the resource if from a workspace, convert its absolute path to a relative\n\t\t// path so that glob patterns have a higher probability to match. For example\n\t\t// a glob pattern of \"src/**\" will not match on an absolute path \"/folder/src/file.txt\"\n\t\t// but can match on \"src/file.txt\"\n\t\tlet resourcePathToMatch: string;\n\t\tif (folder) {\n\t\t\tresourcePathToMatch = relativePath(folder.uri, resource)!; // always uses forward slashes\n\t\t} else {\n\t\t\tresourcePathToMatch = resource.fsPath; // TODO@isidor: support non-file URIs\n\t\t}\n\n\t\treturn !!expressionForRoot(resourcePathToMatch);\n\t}\n}"]}]}