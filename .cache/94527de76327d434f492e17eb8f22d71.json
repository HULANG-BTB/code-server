{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Uint8Matrix {\n        constructor(rows, cols, defaultValue) {\n            let data = new Uint8Array(rows * cols);\n            for (let i = 0, len = rows * cols; i < len; i++) {\n                data[i] = defaultValue;\n            }\n            this._data = data;\n            this.rows = rows;\n            this.cols = cols;\n        }\n        get(row, col) {\n            return this._data[row * this.cols + col];\n        }\n        set(row, col, value) {\n            this._data[row * this.cols + col] = value;\n        }\n    }\n    exports.Uint8Matrix = Uint8Matrix;\n    var Constants;\n    (function (Constants) {\n        /**\n         * MAX SMI (SMall Integer) as defined in v8.\n         * one bit is lost for boxing/unboxing flag.\n         * one bit is lost for sign flag.\n         * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n         */\n        Constants[Constants[\"MAX_SAFE_SMALL_INTEGER\"] = 1073741824] = \"MAX_SAFE_SMALL_INTEGER\";\n        /**\n         * MIN SMI (SMall Integer) as defined in v8.\n         * one bit is lost for boxing/unboxing flag.\n         * one bit is lost for sign flag.\n         * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n         */\n        Constants[Constants[\"MIN_SAFE_SMALL_INTEGER\"] = -1073741824] = \"MIN_SAFE_SMALL_INTEGER\";\n        /**\n         * Max unsigned integer that fits on 8 bits.\n         */\n        Constants[Constants[\"MAX_UINT_8\"] = 255] = \"MAX_UINT_8\";\n        /**\n         * Max unsigned integer that fits on 16 bits.\n         */\n        Constants[Constants[\"MAX_UINT_16\"] = 65535] = \"MAX_UINT_16\";\n        /**\n         * Max unsigned integer that fits on 32 bits.\n         */\n        Constants[Constants[\"MAX_UINT_32\"] = 4294967295] = \"MAX_UINT_32\";\n    })(Constants = exports.Constants || (exports.Constants = {}));\n    function toUint8(v) {\n        if (v < 0) {\n            return 0;\n        }\n        if (v > Constants.MAX_UINT_8) {\n            return Constants.MAX_UINT_8;\n        }\n        return v | 0;\n    }\n    exports.toUint8 = toUint8;\n    function toUint32(v) {\n        if (v < 0) {\n            return 0;\n        }\n        if (v > Constants.MAX_UINT_32) {\n            return Constants.MAX_UINT_32;\n        }\n        return v | 0;\n    }\n    exports.toUint32 = toUint32;\n    function toUint32Array(arr) {\n        let len = arr.length;\n        let r = new Uint32Array(len);\n        for (let i = 0; i < len; i++) {\n            r[i] = toUint32(arr[i]);\n        }\n        return r;\n    }\n    exports.toUint32Array = toUint32Array;\n});\n",null]}