{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/saveErrorHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/saveErrorHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar textFileEditorModel_1 = require(\"vs/workbench/services/textfile/common/textFileEditorModel\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar map_1 = require(\"vs/base/common/map\");\nvar diffEditorInput_1 = require(\"vs/workbench/common/editor/diffEditorInput\");\nvar resourceEditorInput_1 = require(\"vs/workbench/common/editor/resourceEditorInput\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar files_2 = require(\"vs/workbench/contrib/files/common/files\");\nvar fileEditorInput_1 = require(\"vs/workbench/contrib/files/common/editors/fileEditorInput\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar fileCommands_1 = require(\"vs/workbench/contrib/files/browser/fileCommands\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar event_1 = require(\"vs/base/common/event\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar platform_1 = require(\"vs/base/common/platform\");\nexports.CONFLICT_RESOLUTION_CONTEXT = 'saveConflictResolutionContext';\nexports.CONFLICT_RESOLUTION_SCHEME = 'conflictResolution';\nvar LEARN_MORE_DIRTY_WRITE_IGNORE_KEY = 'learnMoreDirtyWriteError';\nvar conflictEditorHelp = nls.localize('userGuide', \"Use the actions in the editor tool bar to either undo your changes or overwrite the content on disk with your changes.\");\n// A handler for save error happening with conflict resolution actions\nvar SaveErrorHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(SaveErrorHandler, _super);\n    function SaveErrorHandler(notificationService, textFileService, contextKeyService, editorService, textModelService, instantiationService, storageService) {\n        var _this = _super.call(this) || this;\n        _this.notificationService = notificationService;\n        _this.textFileService = textFileService;\n        _this.editorService = editorService;\n        _this.instantiationService = instantiationService;\n        _this.storageService = storageService;\n        _this.messages = new map_1.ResourceMap();\n        _this.conflictResolutionContext = new contextkey_1.RawContextKey(exports.CONFLICT_RESOLUTION_CONTEXT, false).bindTo(contextKeyService);\n        var provider = _this._register(instantiationService.createInstance(files_2.FileOnDiskContentProvider));\n        _this._register(textModelService.registerTextModelContentProvider(exports.CONFLICT_RESOLUTION_SCHEME, provider));\n        // Hook into model\n        textFileEditorModel_1.TextFileEditorModel.setSaveErrorHandler(_this);\n        _this.registerListeners();\n        return _this;\n    }\n    SaveErrorHandler.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.textFileService.models.onModelSaved(function (e) { return _this.onFileSavedOrReverted(e.resource); }));\n        this._register(this.textFileService.models.onModelReverted(function (e) { return _this.onFileSavedOrReverted(e.resource); }));\n        this._register(this.editorService.onDidActiveEditorChange(function () { return _this.onActiveEditorChanged(); }));\n    };\n    SaveErrorHandler.prototype.onActiveEditorChanged = function () {\n        var isActiveEditorSaveConflictResolution = false;\n        var activeConflictResolutionResource;\n        var activeInput = this.editorService.activeEditor;\n        if (activeInput instanceof diffEditorInput_1.DiffEditorInput && activeInput.originalInput instanceof resourceEditorInput_1.ResourceEditorInput && activeInput.modifiedInput instanceof fileEditorInput_1.FileEditorInput) {\n            var resource = activeInput.originalInput.getResource();\n            if (resource && resource.scheme === exports.CONFLICT_RESOLUTION_SCHEME) {\n                isActiveEditorSaveConflictResolution = true;\n                activeConflictResolutionResource = activeInput.modifiedInput.getResource();\n            }\n        }\n        this.conflictResolutionContext.set(isActiveEditorSaveConflictResolution);\n        this.activeConflictResolutionResource = activeConflictResolutionResource;\n    };\n    SaveErrorHandler.prototype.onFileSavedOrReverted = function (resource) {\n        var messageHandle = this.messages.get(resource);\n        if (messageHandle) {\n            messageHandle.close();\n            this.messages.delete(resource);\n        }\n    };\n    SaveErrorHandler.prototype.onSaveError = function (error, model) {\n        var fileOperationError = error;\n        var resource = model.getResource();\n        var message;\n        var actions = { primary: [], secondary: [] };\n        // Dirty write prevention\n        if (fileOperationError.fileOperationResult === files_1.FileOperationResult.FILE_MODIFIED_SINCE) {\n            // If the user tried to save from the opened conflict editor, show its message again\n            if (this.activeConflictResolutionResource && this.activeConflictResolutionResource.toString() === model.getResource().toString()) {\n                if (this.storageService.getBoolean(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, storage_1.StorageScope.GLOBAL)) {\n                    return; // return if this message is ignored\n                }\n                message = conflictEditorHelp;\n                actions.primary.push(this.instantiationService.createInstance(ResolveConflictLearnMoreAction));\n                actions.secondary.push(this.instantiationService.createInstance(DoNotShowResolveConflictLearnMoreAction));\n            }\n            // Otherwise show the message that will lead the user into the save conflict editor.\n            else {\n                message = nls.localize('staleSaveError', \"Failed to save '{0}': The content on disk is newer. Please compare your version with the one on disk.\", resources_1.basename(resource));\n                actions.primary.push(this.instantiationService.createInstance(ResolveSaveConflictAction, model));\n            }\n        }\n        // Any other save error\n        else {\n            var isReadonly = fileOperationError.fileOperationResult === files_1.FileOperationResult.FILE_READ_ONLY;\n            var triedToMakeWriteable = isReadonly && fileOperationError.options && fileOperationError.options.overwriteReadonly;\n            var isPermissionDenied = fileOperationError.fileOperationResult === files_1.FileOperationResult.FILE_PERMISSION_DENIED;\n            // Save Elevated\n            if (isPermissionDenied || triedToMakeWriteable) {\n                actions.primary.push(this.instantiationService.createInstance(SaveElevatedAction, model, triedToMakeWriteable));\n            }\n            // Overwrite\n            else if (isReadonly) {\n                actions.primary.push(this.instantiationService.createInstance(OverwriteReadonlyAction, model));\n            }\n            // Retry\n            else {\n                actions.primary.push(this.instantiationService.createInstance(actions_2.ExecuteCommandAction, fileCommands_1.SAVE_FILE_COMMAND_ID, nls.localize('retry', \"Retry\")));\n            }\n            // Save As\n            actions.primary.push(this.instantiationService.createInstance(actions_2.ExecuteCommandAction, fileCommands_1.SAVE_FILE_AS_COMMAND_ID, fileCommands_1.SAVE_FILE_AS_LABEL));\n            // Discard\n            actions.primary.push(this.instantiationService.createInstance(actions_2.ExecuteCommandAction, fileCommands_1.REVERT_FILE_COMMAND_ID, nls.localize('discard', \"Discard\")));\n            if (isReadonly) {\n                if (triedToMakeWriteable) {\n                    message = platform_1.isWindows ? nls.localize('readonlySaveErrorAdmin', \"Failed to save '{0}': File is write protected. Select 'Overwrite as Admin' to retry as administrator.\", resources_1.basename(resource)) : nls.localize('readonlySaveErrorSudo', \"Failed to save '{0}': File is write protected. Select 'Overwrite as Sudo' to retry as superuser.\", resources_1.basename(resource));\n                }\n                else {\n                    message = nls.localize('readonlySaveError', \"Failed to save '{0}': File is write protected. Select 'Overwrite' to attempt to remove protection.\", resources_1.basename(resource));\n                }\n            }\n            else if (isPermissionDenied) {\n                message = platform_1.isWindows ? nls.localize('permissionDeniedSaveError', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.\", resources_1.basename(resource)) : nls.localize('permissionDeniedSaveErrorSudo', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.\", resources_1.basename(resource));\n            }\n            else {\n                message = nls.localize('genericSaveError', \"Failed to save '{0}': {1}\", resources_1.basename(resource), errorMessage_1.toErrorMessage(error, false));\n            }\n        }\n        // Show message and keep function to hide in case the file gets saved/reverted\n        var handle = this.notificationService.notify({ severity: notification_1.Severity.Error, message: message, actions: actions });\n        event_1.Event.once(handle.onDidClose)(function () { return lifecycle_1.dispose.apply(void 0, actions.primary.concat(actions.secondary)); });\n        this.messages.set(model.getResource(), handle);\n    };\n    SaveErrorHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.messages.clear();\n    };\n    SaveErrorHandler = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, textfiles_1.ITextFileService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, resolverService_1.ITextModelService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, storage_1.IStorageService)\n    ], SaveErrorHandler);\n    return SaveErrorHandler;\n}(lifecycle_1.Disposable));\nexports.SaveErrorHandler = SaveErrorHandler;\nvar pendingResolveSaveConflictMessages = [];\nfunction clearPendingResolveSaveConflictMessages() {\n    while (pendingResolveSaveConflictMessages.length > 0) {\n        var item = pendingResolveSaveConflictMessages.pop();\n        if (item) {\n            item.close();\n        }\n    }\n}\nvar ResolveConflictLearnMoreAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveConflictLearnMoreAction, _super);\n    function ResolveConflictLearnMoreAction(openerService) {\n        var _this = _super.call(this, 'workbench.files.action.resolveConflictLearnMore', nls.localize('learnMore', \"Learn More\")) || this;\n        _this.openerService = openerService;\n        return _this;\n    }\n    ResolveConflictLearnMoreAction.prototype.run = function () {\n        return this.openerService.open(uri_1.URI.parse('https://go.microsoft.com/fwlink/?linkid=868264'));\n    };\n    ResolveConflictLearnMoreAction = tslib_1.__decorate([\n        tslib_1.__param(0, opener_1.IOpenerService)\n    ], ResolveConflictLearnMoreAction);\n    return ResolveConflictLearnMoreAction;\n}(actions_1.Action));\nvar DoNotShowResolveConflictLearnMoreAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DoNotShowResolveConflictLearnMoreAction, _super);\n    function DoNotShowResolveConflictLearnMoreAction(storageService) {\n        var _this = _super.call(this, 'workbench.files.action.resolveConflictLearnMoreDoNotShowAgain', nls.localize('dontShowAgain', \"Don't Show Again\")) || this;\n        _this.storageService = storageService;\n        return _this;\n    }\n    DoNotShowResolveConflictLearnMoreAction.prototype.run = function (notification) {\n        this.storageService.store(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, true, storage_1.StorageScope.GLOBAL);\n        // Hide notification\n        notification.dispose();\n        return Promise.resolve();\n    };\n    DoNotShowResolveConflictLearnMoreAction = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService)\n    ], DoNotShowResolveConflictLearnMoreAction);\n    return DoNotShowResolveConflictLearnMoreAction;\n}(actions_1.Action));\nvar ResolveSaveConflictAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResolveSaveConflictAction, _super);\n    function ResolveSaveConflictAction(model, editorService, notificationService, instantiationService, storageService, environmentService) {\n        var _this = _super.call(this, 'workbench.files.action.resolveConflict', nls.localize('compareChanges', \"Compare\")) || this;\n        _this.model = model;\n        _this.editorService = editorService;\n        _this.notificationService = notificationService;\n        _this.instantiationService = instantiationService;\n        _this.storageService = storageService;\n        _this.environmentService = environmentService;\n        return _this;\n    }\n    ResolveSaveConflictAction.prototype.run = function () {\n        var _this = this;\n        if (!this.model.isDisposed()) {\n            var resource = this.model.getResource();\n            var name = resources_1.basename(resource);\n            var editorLabel = nls.localize('saveConflictDiffLabel', \"{0} (on disk) ↔ {1} (in {2}) - Resolve save conflict\", name, name, this.environmentService.appNameLong);\n            return this.editorService.openEditor({\n                leftResource: uri_1.URI.from({ scheme: exports.CONFLICT_RESOLUTION_SCHEME, path: resource.fsPath }),\n                rightResource: resource,\n                label: editorLabel,\n                options: { pinned: true }\n            }).then(function () {\n                if (_this.storageService.getBoolean(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, storage_1.StorageScope.GLOBAL)) {\n                    return; // return if this message is ignored\n                }\n                // Show additional help how to resolve the save conflict\n                var actions = { primary: [], secondary: [] };\n                actions.primary.push(_this.instantiationService.createInstance(ResolveConflictLearnMoreAction));\n                actions.secondary.push(_this.instantiationService.createInstance(DoNotShowResolveConflictLearnMoreAction));\n                var handle = _this.notificationService.notify({ severity: notification_1.Severity.Info, message: conflictEditorHelp, actions: actions });\n                event_1.Event.once(handle.onDidClose)(function () { return lifecycle_1.dispose.apply(void 0, actions.primary.concat(actions.secondary)); });\n                pendingResolveSaveConflictMessages.push(handle);\n            });\n        }\n        return Promise.resolve(true);\n    };\n    ResolveSaveConflictAction = tslib_1.__decorate([\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService),\n        tslib_1.__param(4, storage_1.IStorageService),\n        tslib_1.__param(5, environment_1.IEnvironmentService)\n    ], ResolveSaveConflictAction);\n    return ResolveSaveConflictAction;\n}(actions_1.Action));\nvar SaveElevatedAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SaveElevatedAction, _super);\n    function SaveElevatedAction(model, triedToMakeWriteable) {\n        var _this = _super.call(this, 'workbench.files.action.saveElevated', triedToMakeWriteable ? platform_1.isWindows ? nls.localize('overwriteElevated', \"Overwrite as Admin...\") : nls.localize('overwriteElevatedSudo', \"Overwrite as Sudo...\") : platform_1.isWindows ? nls.localize('saveElevated', \"Retry as Admin...\") : nls.localize('saveElevatedSudo', \"Retry as Sudo...\")) || this;\n        _this.model = model;\n        _this.triedToMakeWriteable = triedToMakeWriteable;\n        return _this;\n    }\n    SaveElevatedAction.prototype.run = function () {\n        if (!this.model.isDisposed()) {\n            this.model.save({\n                writeElevated: true,\n                overwriteReadonly: this.triedToMakeWriteable\n            });\n        }\n        return Promise.resolve(true);\n    };\n    return SaveElevatedAction;\n}(actions_1.Action));\nvar OverwriteReadonlyAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OverwriteReadonlyAction, _super);\n    function OverwriteReadonlyAction(model) {\n        var _this = _super.call(this, 'workbench.files.action.overwrite', nls.localize('overwrite', \"Overwrite\")) || this;\n        _this.model = model;\n        return _this;\n    }\n    OverwriteReadonlyAction.prototype.run = function () {\n        if (!this.model.isDisposed()) {\n            this.model.save({ overwriteReadonly: true });\n        }\n        return Promise.resolve(true);\n    };\n    return OverwriteReadonlyAction;\n}(actions_1.Action));\nexports.acceptLocalChangesCommand = function (accessor, resource) {\n    var editorService = accessor.get(editorService_1.IEditorService);\n    var resolverService = accessor.get(resolverService_1.ITextModelService);\n    var modelService = accessor.get(modelService_1.IModelService);\n    var control = editorService.activeControl;\n    if (!control) {\n        return;\n    }\n    var editor = control.input;\n    var group = control.group;\n    resolverService.createModelReference(resource).then(function (reference) {\n        var model = reference.object;\n        var localModelSnapshot = model.createSnapshot();\n        clearPendingResolveSaveConflictMessages(); // hide any previously shown message about how to use these actions\n        // Revert to be able to save\n        return model.revert().then(function () {\n            // Restore user value (without loosing undo stack)\n            modelService.updateModel(model.textEditorModel, textModel_1.createTextBufferFactoryFromSnapshot(localModelSnapshot));\n            // Trigger save\n            return model.save().then(function () {\n                // Reopen file input\n                return editorService.openEditor({ resource: model.getResource() }, group).then(function () {\n                    // Clean up\n                    group.closeEditor(editor);\n                    editor.dispose();\n                    reference.dispose();\n                });\n            });\n        });\n    });\n};\nexports.revertLocalChangesCommand = function (accessor, resource) {\n    var editorService = accessor.get(editorService_1.IEditorService);\n    var resolverService = accessor.get(resolverService_1.ITextModelService);\n    var control = editorService.activeControl;\n    if (!control) {\n        return;\n    }\n    var editor = control.input;\n    var group = control.group;\n    resolverService.createModelReference(resource).then(function (reference) {\n        var model = reference.object;\n        clearPendingResolveSaveConflictMessages(); // hide any previously shown message about how to use these actions\n        // Revert on model\n        return model.revert().then(function () {\n            // Reopen file input\n            return editorService.openEditor({ resource: model.getResource() }, group).then(function () {\n                // Clean up\n                group.closeEditor(editor);\n                editor.dispose();\n                reference.dispose();\n            });\n        });\n    });\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/saveErrorHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/saveErrorHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { basename } from 'vs/base/common/resources';\nimport { Action } from 'vs/base/common/actions';\nimport { URI } from 'vs/base/common/uri';\nimport { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { ITextFileService, ISaveErrorHandler, ITextFileEditorModel, IResolvedTextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { ResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { IContextKeyService, IContextKey, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { FileOnDiskContentProvider } from 'vs/workbench/contrib/files/common/files';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/common/editors/fileEditorInput';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { SAVE_FILE_COMMAND_ID, REVERT_FILE_COMMAND_ID, SAVE_FILE_AS_COMMAND_ID, SAVE_FILE_AS_LABEL } from 'vs/workbench/contrib/files/browser/fileCommands';\nimport { createTextBufferFactoryFromSnapshot } from 'vs/editor/common/model/textModel';\nimport { INotificationService, INotificationHandle, INotificationActions, Severity } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ExecuteCommandAction } from 'vs/platform/actions/common/actions';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { Event } from 'vs/base/common/event';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { isWindows } from 'vs/base/common/platform';\n\nexport const CONFLICT_RESOLUTION_CONTEXT = 'saveConflictResolutionContext';\nexport const CONFLICT_RESOLUTION_SCHEME = 'conflictResolution';\n\nconst LEARN_MORE_DIRTY_WRITE_IGNORE_KEY = 'learnMoreDirtyWriteError';\n\nconst conflictEditorHelp = nls.localize('userGuide', \"Use the actions in the editor tool bar to either undo your changes or overwrite the content on disk with your changes.\");\n\n// A handler for save error happening with conflict resolution actions\nexport class SaveErrorHandler extends Disposable implements ISaveErrorHandler, IWorkbenchContribution {\n\tprivate messages: ResourceMap<INotificationHandle>;\n\tprivate conflictResolutionContext: IContextKey<boolean>;\n\tprivate activeConflictResolutionResource?: URI;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextModelService textModelService: ITextModelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.messages = new ResourceMap<INotificationHandle>();\n\t\tthis.conflictResolutionContext = new RawContextKey<boolean>(CONFLICT_RESOLUTION_CONTEXT, false).bindTo(contextKeyService);\n\n\t\tconst provider = this._register(instantiationService.createInstance(FileOnDiskContentProvider));\n\t\tthis._register(textModelService.registerTextModelContentProvider(CONFLICT_RESOLUTION_SCHEME, provider));\n\n\t\t// Hook into model\n\t\tTextFileEditorModel.setSaveErrorHandler(this);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.textFileService.models.onModelSaved(e => this.onFileSavedOrReverted(e.resource)));\n\t\tthis._register(this.textFileService.models.onModelReverted(e => this.onFileSavedOrReverted(e.resource)));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onActiveEditorChanged()));\n\t}\n\n\tprivate onActiveEditorChanged(): void {\n\t\tlet isActiveEditorSaveConflictResolution = false;\n\t\tlet activeConflictResolutionResource: URI | undefined;\n\n\t\tconst activeInput = this.editorService.activeEditor;\n\t\tif (activeInput instanceof DiffEditorInput && activeInput.originalInput instanceof ResourceEditorInput && activeInput.modifiedInput instanceof FileEditorInput) {\n\t\t\tconst resource = activeInput.originalInput.getResource();\n\t\t\tif (resource && resource.scheme === CONFLICT_RESOLUTION_SCHEME) {\n\t\t\t\tisActiveEditorSaveConflictResolution = true;\n\t\t\t\tactiveConflictResolutionResource = activeInput.modifiedInput.getResource();\n\t\t\t}\n\t\t}\n\n\t\tthis.conflictResolutionContext.set(isActiveEditorSaveConflictResolution);\n\t\tthis.activeConflictResolutionResource = activeConflictResolutionResource;\n\t}\n\n\tprivate onFileSavedOrReverted(resource: URI): void {\n\t\tconst messageHandle = this.messages.get(resource);\n\t\tif (messageHandle) {\n\t\t\tmessageHandle.close();\n\t\t\tthis.messages.delete(resource);\n\t\t}\n\t}\n\n\tonSaveError(error: any, model: ITextFileEditorModel): void {\n\t\tconst fileOperationError = error as FileOperationError;\n\t\tconst resource = model.getResource();\n\n\t\tlet message: string;\n\t\tconst actions: INotificationActions = { primary: [], secondary: [] };\n\n\t\t// Dirty write prevention\n\t\tif (fileOperationError.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\n\t\t\t// If the user tried to save from the opened conflict editor, show its message again\n\t\t\tif (this.activeConflictResolutionResource && this.activeConflictResolutionResource.toString() === model.getResource().toString()) {\n\t\t\t\tif (this.storageService.getBoolean(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, StorageScope.GLOBAL)) {\n\t\t\t\t\treturn; // return if this message is ignored\n\t\t\t\t}\n\n\t\t\t\tmessage = conflictEditorHelp;\n\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(ResolveConflictLearnMoreAction));\n\t\t\t\tactions.secondary!.push(this.instantiationService.createInstance(DoNotShowResolveConflictLearnMoreAction));\n\t\t\t}\n\n\t\t\t// Otherwise show the message that will lead the user into the save conflict editor.\n\t\t\telse {\n\t\t\t\tmessage = nls.localize('staleSaveError', \"Failed to save '{0}': The content on disk is newer. Please compare your version with the one on disk.\", basename(resource));\n\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(ResolveSaveConflictAction, model));\n\t\t\t}\n\t\t}\n\n\t\t// Any other save error\n\t\telse {\n\t\t\tconst isReadonly = fileOperationError.fileOperationResult === FileOperationResult.FILE_READ_ONLY;\n\t\t\tconst triedToMakeWriteable = isReadonly && fileOperationError.options && fileOperationError.options.overwriteReadonly;\n\t\t\tconst isPermissionDenied = fileOperationError.fileOperationResult === FileOperationResult.FILE_PERMISSION_DENIED;\n\n\t\t\t// Save Elevated\n\t\t\tif (isPermissionDenied || triedToMakeWriteable) {\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(SaveElevatedAction, model, triedToMakeWriteable));\n\t\t\t}\n\n\t\t\t// Overwrite\n\t\t\telse if (isReadonly) {\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(OverwriteReadonlyAction, model));\n\t\t\t}\n\n\t\t\t// Retry\n\t\t\telse {\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(ExecuteCommandAction, SAVE_FILE_COMMAND_ID, nls.localize('retry', \"Retry\")));\n\t\t\t}\n\n\t\t\t// Save As\n\t\t\tactions.primary!.push(this.instantiationService.createInstance(ExecuteCommandAction, SAVE_FILE_AS_COMMAND_ID, SAVE_FILE_AS_LABEL));\n\n\t\t\t// Discard\n\t\t\tactions.primary!.push(this.instantiationService.createInstance(ExecuteCommandAction, REVERT_FILE_COMMAND_ID, nls.localize('discard', \"Discard\")));\n\n\t\t\tif (isReadonly) {\n\t\t\t\tif (triedToMakeWriteable) {\n\t\t\t\t\tmessage = isWindows ? nls.localize('readonlySaveErrorAdmin', \"Failed to save '{0}': File is write protected. Select 'Overwrite as Admin' to retry as administrator.\", basename(resource)) : nls.localize('readonlySaveErrorSudo', \"Failed to save '{0}': File is write protected. Select 'Overwrite as Sudo' to retry as superuser.\", basename(resource));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = nls.localize('readonlySaveError', \"Failed to save '{0}': File is write protected. Select 'Overwrite' to attempt to remove protection.\", basename(resource));\n\t\t\t\t}\n\t\t\t} else if (isPermissionDenied) {\n\t\t\t\tmessage = isWindows ? nls.localize('permissionDeniedSaveError', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.\", basename(resource)) : nls.localize('permissionDeniedSaveErrorSudo', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.\", basename(resource));\n\t\t\t} else {\n\t\t\t\tmessage = nls.localize('genericSaveError', \"Failed to save '{0}': {1}\", basename(resource), toErrorMessage(error, false));\n\t\t\t}\n\t\t}\n\n\t\t// Show message and keep function to hide in case the file gets saved/reverted\n\t\tconst handle = this.notificationService.notify({ severity: Severity.Error, message, actions });\n\t\tEvent.once(handle.onDidClose)(() => dispose(...actions.primary!, ...actions.secondary!));\n\t\tthis.messages.set(model.getResource(), handle);\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.messages.clear();\n\t}\n}\n\nconst pendingResolveSaveConflictMessages: INotificationHandle[] = [];\nfunction clearPendingResolveSaveConflictMessages(): void {\n\twhile (pendingResolveSaveConflictMessages.length > 0) {\n\t\tconst item = pendingResolveSaveConflictMessages.pop();\n\t\tif (item) {\n\t\t\titem.close();\n\t\t}\n\t}\n}\n\nclass ResolveConflictLearnMoreAction extends Action {\n\n\tconstructor(\n\t\t@IOpenerService private readonly openerService: IOpenerService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflictLearnMore', nls.localize('learnMore', \"Learn More\"));\n\t}\n\n\trun(): Promise<any> {\n\t\treturn this.openerService.open(URI.parse('https://go.microsoft.com/fwlink/?linkid=868264'));\n\t}\n}\n\nclass DoNotShowResolveConflictLearnMoreAction extends Action {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflictLearnMoreDoNotShowAgain', nls.localize('dontShowAgain', \"Don't Show Again\"));\n\t}\n\n\trun(notification: IDisposable): Promise<any> {\n\t\tthis.storageService.store(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, true, StorageScope.GLOBAL);\n\n\t\t// Hide notification\n\t\tnotification.dispose();\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nclass ResolveSaveConflictAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper('workbench.files.action.resolveConflict', nls.localize('compareChanges', \"Compare\"));\n\t}\n\n\trun(): Promise<any> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tconst resource = this.model.getResource();\n\t\t\tconst name = basename(resource);\n\t\t\tconst editorLabel = nls.localize('saveConflictDiffLabel', \"{0} (on disk) ↔ {1} (in {2}) - Resolve save conflict\", name, name, this.environmentService.appNameLong);\n\n\t\t\treturn this.editorService.openEditor(\n\t\t\t\t{\n\t\t\t\t\tleftResource: URI.from({ scheme: CONFLICT_RESOLUTION_SCHEME, path: resource.fsPath }),\n\t\t\t\t\trightResource: resource,\n\t\t\t\t\tlabel: editorLabel,\n\t\t\t\t\toptions: { pinned: true }\n\t\t\t\t}\n\t\t\t).then(() => {\n\t\t\t\tif (this.storageService.getBoolean(LEARN_MORE_DIRTY_WRITE_IGNORE_KEY, StorageScope.GLOBAL)) {\n\t\t\t\t\treturn; // return if this message is ignored\n\t\t\t\t}\n\n\t\t\t\t// Show additional help how to resolve the save conflict\n\t\t\t\tconst actions: INotificationActions = { primary: [], secondary: [] };\n\t\t\t\tactions.primary!.push(this.instantiationService.createInstance(ResolveConflictLearnMoreAction));\n\t\t\t\tactions.secondary!.push(this.instantiationService.createInstance(DoNotShowResolveConflictLearnMoreAction));\n\n\t\t\t\tconst handle = this.notificationService.notify({ severity: Severity.Info, message: conflictEditorHelp, actions });\n\t\t\t\tEvent.once(handle.onDidClose)(() => dispose(...actions.primary!, ...actions.secondary!));\n\t\t\t\tpendingResolveSaveConflictMessages.push(handle);\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nclass SaveElevatedAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel,\n\t\tprivate triedToMakeWriteable: boolean\n\t) {\n\t\tsuper('workbench.files.action.saveElevated', triedToMakeWriteable ? isWindows ? nls.localize('overwriteElevated', \"Overwrite as Admin...\") : nls.localize('overwriteElevatedSudo', \"Overwrite as Sudo...\") : isWindows ? nls.localize('saveElevated', \"Retry as Admin...\") : nls.localize('saveElevatedSudo', \"Retry as Sudo...\"));\n\t}\n\n\trun(): Promise<any> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tthis.model.save({\n\t\t\t\twriteElevated: true,\n\t\t\t\toverwriteReadonly: this.triedToMakeWriteable\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nclass OverwriteReadonlyAction extends Action {\n\n\tconstructor(\n\t\tprivate model: ITextFileEditorModel\n\t) {\n\t\tsuper('workbench.files.action.overwrite', nls.localize('overwrite', \"Overwrite\"));\n\t}\n\n\trun(): Promise<any> {\n\t\tif (!this.model.isDisposed()) {\n\t\t\tthis.model.save({ overwriteReadonly: true });\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport const acceptLocalChangesCommand = (accessor: ServicesAccessor, resource: URI) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst resolverService = accessor.get(ITextModelService);\n\tconst modelService = accessor.get(IModelService);\n\n\tconst control = editorService.activeControl;\n\tif (!control) {\n\t\treturn;\n\t}\n\tconst editor = control.input;\n\tconst group = control.group;\n\n\tresolverService.createModelReference(resource).then(reference => {\n\t\tconst model = reference.object as IResolvedTextFileEditorModel;\n\t\tconst localModelSnapshot = model.createSnapshot();\n\n\t\tclearPendingResolveSaveConflictMessages(); // hide any previously shown message about how to use these actions\n\n\t\t// Revert to be able to save\n\t\treturn model.revert().then(() => {\n\n\t\t\t// Restore user value (without loosing undo stack)\n\t\t\tmodelService.updateModel(model.textEditorModel, createTextBufferFactoryFromSnapshot(localModelSnapshot));\n\n\t\t\t// Trigger save\n\t\t\treturn model.save().then(() => {\n\n\t\t\t\t// Reopen file input\n\t\t\t\treturn editorService.openEditor({ resource: model.getResource() }, group).then(() => {\n\n\t\t\t\t\t// Clean up\n\t\t\t\t\tgroup.closeEditor(editor);\n\t\t\t\t\teditor.dispose();\n\t\t\t\t\treference.dispose();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\nexport const revertLocalChangesCommand = (accessor: ServicesAccessor, resource: URI) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst resolverService = accessor.get(ITextModelService);\n\n\tconst control = editorService.activeControl;\n\tif (!control) {\n\t\treturn;\n\t}\n\tconst editor = control.input;\n\tconst group = control.group;\n\n\tresolverService.createModelReference(resource).then(reference => {\n\t\tconst model = reference.object as ITextFileEditorModel;\n\n\t\tclearPendingResolveSaveConflictMessages(); // hide any previously shown message about how to use these actions\n\n\t\t// Revert on model\n\t\treturn model.revert().then(() => {\n\n\t\t\t// Reopen file input\n\t\t\treturn editorService.openEditor({ resource: model.getResource() }, group).then(() => {\n\n\t\t\t\t// Clean up\n\t\t\t\tgroup.closeEditor(editor);\n\t\t\t\teditor.dispose();\n\t\t\t\treference.dispose();\n\t\t\t});\n\t\t});\n\t});\n};\n"]}]}