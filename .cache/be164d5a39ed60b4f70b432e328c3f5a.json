{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\n/**\n * The base editor model for the diff editor. It is made up of two editor models, the original version\n * and the modified version.\n */\nvar DiffEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(DiffEditorModel, _super);\n    function DiffEditorModel(originalModel, modifiedModel) {\n        var _this = _super.call(this) || this;\n        _this._originalModel = originalModel;\n        _this._modifiedModel = modifiedModel;\n        return _this;\n    }\n    Object.defineProperty(DiffEditorModel.prototype, \"originalModel\", {\n        get: function () {\n            if (!this._originalModel) {\n                return null;\n            }\n            return this._originalModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiffEditorModel.prototype, \"modifiedModel\", {\n        get: function () {\n            if (!this._modifiedModel) {\n                return null;\n            }\n            return this._modifiedModel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DiffEditorModel.prototype.load = function () {\n        var _this = this;\n        return Promise.all([\n            this._originalModel ? this._originalModel.load() : Promise.resolve(undefined),\n            this._modifiedModel ? this._modifiedModel.load() : Promise.resolve(undefined),\n        ]).then(function () { return _this; });\n    };\n    DiffEditorModel.prototype.isResolved = function () {\n        return !!this.originalModel && this.originalModel.isResolved() && !!this.modifiedModel && this.modifiedModel.isResolved();\n    };\n    DiffEditorModel.prototype.dispose = function () {\n        // Do not propagate the dispose() call to the two models inside. We never created the two models\n        // (original and modified) so we can not dispose them without sideeffects. Rather rely on the\n        // models getting disposed when their related inputs get disposed from the diffEditorInput.\n        _super.prototype.dispose.call(this);\n    };\n    return DiffEditorModel;\n}(editor_1.EditorModel));\nexports.DiffEditorModel = DiffEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorModel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qDAAyD;AAGzD;;;GAGG;AACH;IAAqC,2CAAW;IAI/C,yBAAY,aAAkC,EAAE,aAAkC;QAAlF,YACC,iBAAO,SAIP;QAFA,KAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,KAAI,CAAC,cAAc,GAAG,aAAa,CAAC;;IACrC,CAAC;IAED,sBAAI,0CAAa;aAAjB;YACC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBACzB,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAI,CAAC,cAA6B,CAAC;QAC3C,CAAC;;;OAAA;IAED,sBAAI,0CAAa;aAAjB;YACC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBACzB,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAI,CAAC,cAA6B,CAAC;QAC3C,CAAC;;;OAAA;IAED,8BAAI,GAAJ;QAAA,iBAKC;QAJA,OAAO,OAAO,CAAC,GAAG,CAAC;YAClB,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7E,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;SAC7E,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,EAAJ,CAAI,CAAC,CAAC;IACrB,CAAC;IAED,oCAAU,GAAV;QACC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;IAC3H,CAAC;IAED,iCAAO,GAAP;QAEC,gGAAgG;QAChG,6FAA6F;QAC7F,2FAA2F;QAE3F,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IACF,sBAAC;AAAD,CAAC,AA5CD,CAAqC,oBAAW,GA4C/C;AA5CY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { IEditorModel } from 'vs/platform/editor/common/editor';\n\n/**\n * The base editor model for the diff editor. It is made up of two editor models, the original version\n * and the modified version.\n */\nexport class DiffEditorModel extends EditorModel {\n\tprotected readonly _originalModel: IEditorModel | null;\n\tprotected readonly _modifiedModel: IEditorModel | null;\n\n\tconstructor(originalModel: IEditorModel | null, modifiedModel: IEditorModel | null) {\n\t\tsuper();\n\n\t\tthis._originalModel = originalModel;\n\t\tthis._modifiedModel = modifiedModel;\n\t}\n\n\tget originalModel(): EditorModel | null {\n\t\tif (!this._originalModel) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._originalModel as EditorModel;\n\t}\n\n\tget modifiedModel(): EditorModel | null {\n\t\tif (!this._modifiedModel) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._modifiedModel as EditorModel;\n\t}\n\n\tload(): Promise<EditorModel> {\n\t\treturn Promise.all([\n\t\t\tthis._originalModel ? this._originalModel.load() : Promise.resolve(undefined),\n\t\t\tthis._modifiedModel ? this._modifiedModel.load() : Promise.resolve(undefined),\n\t\t]).then(() => this);\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this.originalModel && this.originalModel.isResolved() && !!this.modifiedModel && this.modifiedModel.isResolved();\n\t}\n\n\tdispose(): void {\n\n\t\t// Do not propagate the dispose() call to the two models inside. We never created the two models\n\t\t// (original and modified) so we can not dispose them without sideeffects. Rather rely on the\n\t\t// models getting disposed when their related inputs get disposed from the diffEditorInput.\n\n\t\tsuper.dispose();\n\t}\n}"]}]}