{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar async_1 = require(\"vs/base/common/async\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar completionModel_1 = require(\"./completionModel\");\nvar suggest_1 = require(\"./suggest\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar wordDistance_1 = require(\"vs/editor/contrib/suggest/wordDistance\");\nvar LineContext = /** @class */ (function () {\n    function LineContext(model, position, auto, shy) {\n        this.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n        this.leadingWord = model.getWordUntilPosition(position);\n        this.lineNumber = position.lineNumber;\n        this.column = position.column;\n        this.auto = auto;\n        this.shy = shy;\n    }\n    LineContext.shouldAutoTrigger = function (editor) {\n        if (!editor.hasModel()) {\n            return false;\n        }\n        var model = editor.getModel();\n        var pos = editor.getPosition();\n        model.tokenizeIfCheap(pos.lineNumber);\n        var word = model.getWordAtPosition(pos);\n        if (!word) {\n            return false;\n        }\n        if (word.endColumn !== pos.column) {\n            return false;\n        }\n        if (!isNaN(Number(word.word))) {\n            return false;\n        }\n        return true;\n    };\n    return LineContext;\n}());\nexports.LineContext = LineContext;\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Manual\"] = 1] = \"Manual\";\n    State[State[\"Auto\"] = 2] = \"Auto\";\n})(State = exports.State || (exports.State = {}));\nvar SuggestModel = /** @class */ (function () {\n    function SuggestModel(_editor, _editorWorker) {\n        var _this = this;\n        this._editor = _editor;\n        this._editorWorker = _editorWorker;\n        this._toDispose = [];\n        this._triggerQuickSuggest = new async_1.TimeoutTimer();\n        this._triggerRefilter = new async_1.TimeoutTimer();\n        this._state = State.Idle;\n        this._onDidCancel = new event_1.Emitter();\n        this._onDidTrigger = new event_1.Emitter();\n        this._onDidSuggest = new event_1.Emitter();\n        this.onDidCancel = this._onDidCancel.event;\n        this.onDidTrigger = this._onDidTrigger.event;\n        this.onDidSuggest = this._onDidSuggest.event;\n        this._currentSelection = this._editor.getSelection() || new selection_1.Selection(1, 1, 1, 1);\n        // wire up various listeners\n        this._toDispose.push(this._editor.onDidChangeModel(function () {\n            _this._updateTriggerCharacters();\n            _this.cancel();\n        }));\n        this._toDispose.push(this._editor.onDidChangeModelLanguage(function () {\n            _this._updateTriggerCharacters();\n            _this.cancel();\n        }));\n        this._toDispose.push(this._editor.onDidChangeConfiguration(function () {\n            _this._updateTriggerCharacters();\n            _this._updateQuickSuggest();\n        }));\n        this._toDispose.push(modes_1.CompletionProviderRegistry.onDidChange(function () {\n            _this._updateTriggerCharacters();\n            _this._updateActiveSuggestSession();\n        }));\n        this._toDispose.push(this._editor.onDidChangeCursorSelection(function (e) {\n            _this._onCursorChange(e);\n        }));\n        var editorIsComposing = false;\n        this._toDispose.push(this._editor.onCompositionStart(function () {\n            editorIsComposing = true;\n        }));\n        this._toDispose.push(this._editor.onCompositionEnd(function () {\n            // refilter when composition ends\n            editorIsComposing = false;\n            _this._refilterCompletionItems();\n        }));\n        this._toDispose.push(this._editor.onDidChangeModelContent(function () {\n            // only filter completions when the editor isn't\n            // composing a character, e.g. ¨ + u makes ü but just\n            // ¨ cannot be used for filtering\n            if (!editorIsComposing) {\n                _this._refilterCompletionItems();\n            }\n        }));\n        this._updateTriggerCharacters();\n        this._updateQuickSuggest();\n    }\n    SuggestModel.prototype.dispose = function () {\n        lifecycle_1.dispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerCharacterListener, this._triggerQuickSuggest, this._triggerRefilter]);\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n        lifecycle_1.dispose(this._completionModel);\n        this.cancel();\n    };\n    // --- handle configuration & precondition changes\n    SuggestModel.prototype._updateQuickSuggest = function () {\n        this._quickSuggestDelay = this._editor.getConfiguration().contribInfo.quickSuggestionsDelay;\n        if (isNaN(this._quickSuggestDelay) || (!this._quickSuggestDelay && this._quickSuggestDelay !== 0) || this._quickSuggestDelay < 0) {\n            this._quickSuggestDelay = 10;\n        }\n    };\n    SuggestModel.prototype._updateTriggerCharacters = function () {\n        var _this = this;\n        lifecycle_1.dispose(this._triggerCharacterListener);\n        if (this._editor.getConfiguration().readOnly\n            || !this._editor.hasModel()\n            || !this._editor.getConfiguration().contribInfo.suggestOnTriggerCharacters) {\n            return;\n        }\n        var supportsByTriggerCharacter = Object.create(null);\n        for (var _i = 0, _a = modes_1.CompletionProviderRegistry.all(this._editor.getModel()); _i < _a.length; _i++) {\n            var support = _a[_i];\n            for (var _b = 0, _c = support.triggerCharacters || []; _b < _c.length; _b++) {\n                var ch = _c[_b];\n                var set = supportsByTriggerCharacter[ch];\n                if (!set) {\n                    set = supportsByTriggerCharacter[ch] = new Set();\n                    set.add(suggest_1.getSnippetSuggestSupport());\n                }\n                set.add(support);\n            }\n        }\n        this._triggerCharacterListener = this._editor.onDidType(function (text) {\n            var lastChar = text.charAt(text.length - 1);\n            var supports = supportsByTriggerCharacter[lastChar];\n            if (supports) {\n                // keep existing items that where not computed by the\n                // supports/providers that want to trigger now\n                var items = _this._completionModel ? _this._completionModel.adopt(supports) : undefined;\n                _this.trigger({ auto: true, shy: false, triggerCharacter: lastChar }, Boolean(_this._completionModel), supports, items);\n            }\n        });\n    };\n    Object.defineProperty(SuggestModel.prototype, \"state\", {\n        // --- trigger/retrigger/cancel suggest\n        get: function () {\n            return this._state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SuggestModel.prototype.cancel = function (retrigger) {\n        if (retrigger === void 0) { retrigger = false; }\n        if (this._state !== State.Idle) {\n            this._triggerRefilter.cancel();\n            this._triggerQuickSuggest.cancel();\n            if (this._requestToken) {\n                this._requestToken.cancel();\n                this._requestToken = undefined;\n            }\n            this._state = State.Idle;\n            lifecycle_1.dispose(this._completionModel);\n            this._completionModel = undefined;\n            this._context = undefined;\n            this._onDidCancel.fire({ retrigger: retrigger });\n        }\n    };\n    SuggestModel.prototype._updateActiveSuggestSession = function () {\n        if (this._state !== State.Idle) {\n            if (!this._editor.hasModel() || !modes_1.CompletionProviderRegistry.has(this._editor.getModel())) {\n                this.cancel();\n            }\n            else {\n                this.trigger({ auto: this._state === State.Auto, shy: false }, true);\n            }\n        }\n    };\n    SuggestModel.prototype._onCursorChange = function (e) {\n        var _this = this;\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        var model = this._editor.getModel();\n        var prevSelection = this._currentSelection;\n        this._currentSelection = this._editor.getSelection();\n        if (!e.selection.isEmpty()\n            || e.reason !== cursorEvents_1.CursorChangeReason.NotSet\n            || (e.source !== 'keyboard' && e.source !== 'deleteLeft')) {\n            // Early exit if nothing needs to be done!\n            // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n            if (this._state !== State.Idle) {\n                this.cancel();\n            }\n            return;\n        }\n        if (!modes_1.CompletionProviderRegistry.has(model)) {\n            return;\n        }\n        if (this._state === State.Idle) {\n            if (this._editor.getConfiguration().contribInfo.quickSuggestions === false) {\n                // not enabled\n                return;\n            }\n            if (!prevSelection.containsRange(this._currentSelection) && !prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n                // cursor didn't move RIGHT\n                return;\n            }\n            if (this._editor.getConfiguration().contribInfo.suggest.snippetsPreventQuickSuggestions && snippetController2_1.SnippetController2.get(this._editor).isInSnippet()) {\n                // no quick suggestion when in snippet mode\n                return;\n            }\n            this.cancel();\n            this._triggerQuickSuggest.cancelAndSet(function () {\n                if (!LineContext.shouldAutoTrigger(_this._editor)) {\n                    return;\n                }\n                if (!_this._editor.hasModel()) {\n                    return;\n                }\n                var model = _this._editor.getModel();\n                var pos = _this._editor.getPosition();\n                // validate enabled now\n                var quickSuggestions = _this._editor.getConfiguration().contribInfo.quickSuggestions;\n                if (quickSuggestions === false) {\n                    return;\n                }\n                else if (quickSuggestions === true) {\n                    // all good\n                }\n                else {\n                    // Check the type of the token that triggered this\n                    model.tokenizeIfCheap(pos.lineNumber);\n                    var lineTokens = model.getLineTokens(pos.lineNumber);\n                    var tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n                    var inValidScope = quickSuggestions.other && tokenType === modes_1.StandardTokenType.Other\n                        || quickSuggestions.comments && tokenType === modes_1.StandardTokenType.Comment\n                        || quickSuggestions.strings && tokenType === modes_1.StandardTokenType.String;\n                    if (!inValidScope) {\n                        return;\n                    }\n                }\n                // we made it till here -> trigger now\n                _this.trigger({ auto: true, shy: false });\n            }, this._quickSuggestDelay);\n        }\n    };\n    SuggestModel.prototype._refilterCompletionItems = function () {\n        var _this = this;\n        if (this._state === State.Idle) {\n            return;\n        }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // refine active suggestion\n        this._triggerRefilter.cancelAndSet(function () {\n            if (!_this._editor.hasModel()) {\n                return;\n            }\n            var model = _this._editor.getModel();\n            var position = _this._editor.getPosition();\n            var ctx = new LineContext(model, position, _this._state === State.Auto, false);\n            _this._onNewContext(ctx);\n        }, 25);\n    };\n    SuggestModel.prototype.trigger = function (context, retrigger, onlyFrom, existingItems) {\n        var _this = this;\n        if (retrigger === void 0) { retrigger = false; }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        var model = this._editor.getModel();\n        var auto = context.auto;\n        var ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n        // Cancel previous requests, change state & update UI\n        this.cancel(retrigger);\n        this._state = auto ? State.Auto : State.Manual;\n        this._onDidTrigger.fire({ auto: auto, shy: context.shy });\n        // Capture context when request was sent\n        this._context = ctx;\n        // Build context for request\n        var suggestCtx;\n        if (context.triggerCharacter) {\n            suggestCtx = {\n                triggerKind: modes_1.CompletionTriggerKind.TriggerCharacter,\n                triggerCharacter: context.triggerCharacter\n            };\n        }\n        else if (onlyFrom && onlyFrom.size > 0) {\n            suggestCtx = { triggerKind: modes_1.CompletionTriggerKind.TriggerForIncompleteCompletions };\n        }\n        else {\n            suggestCtx = { triggerKind: modes_1.CompletionTriggerKind.Invoke };\n        }\n        this._requestToken = new cancellation_1.CancellationTokenSource();\n        // kind filter and snippet sort rules\n        var contribInfo = this._editor.getConfiguration().contribInfo;\n        var itemKindFilter = new Set();\n        var snippetSortOrder = suggest_1.SnippetSortOrder.Inline;\n        switch (contribInfo.suggest.snippets) {\n            case 'top':\n                snippetSortOrder = suggest_1.SnippetSortOrder.Top;\n                break;\n            // \t↓ that's the default anyways...\n            // case 'inline':\n            // \tsnippetSortOrder = SnippetSortOrder.Inline;\n            // \tbreak;\n            case 'bottom':\n                snippetSortOrder = suggest_1.SnippetSortOrder.Bottom;\n                break;\n            case 'none':\n                itemKindFilter.add(modes_1.CompletionItemKind.Snippet);\n                break;\n        }\n        // kind filter\n        for (var key in contribInfo.suggest.filteredTypes) {\n            var kind = modes_1.completionKindFromString(key, true);\n            if (typeof kind !== 'undefined' && contribInfo.suggest.filteredTypes[key] === false) {\n                itemKindFilter.add(kind);\n            }\n        }\n        var wordDistance = wordDistance_1.WordDistance.create(this._editorWorker, this._editor);\n        var items = suggest_1.provideSuggestionItems(model, this._editor.getPosition(), new suggest_1.CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom), suggestCtx, this._requestToken.token);\n        Promise.all([items, wordDistance]).then(function (_a) {\n            var items = _a[0], wordDistance = _a[1];\n            lifecycle_1.dispose(_this._requestToken);\n            if (_this._state === State.Idle) {\n                return;\n            }\n            if (!_this._editor.hasModel()) {\n                return;\n            }\n            var model = _this._editor.getModel();\n            if (arrays_1.isNonEmptyArray(existingItems)) {\n                var cmpFn = suggest_1.getSuggestionComparator(snippetSortOrder);\n                items = items.concat(existingItems).sort(cmpFn);\n            }\n            var ctx = new LineContext(model, _this._editor.getPosition(), auto, context.shy);\n            lifecycle_1.dispose(_this._completionModel);\n            _this._completionModel = new completionModel_1.CompletionModel(items, _this._context.column, {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - _this._context.column\n            }, wordDistance, _this._editor.getConfiguration().contribInfo.suggest);\n            _this._onNewContext(ctx);\n        }).catch(errors_1.onUnexpectedError);\n    };\n    SuggestModel.prototype._onNewContext = function (ctx) {\n        if (!this._context) {\n            // happens when 24x7 IntelliSense is enabled and still in its delay\n            return;\n        }\n        if (ctx.lineNumber !== this._context.lineNumber) {\n            // e.g. happens when pressing Enter while IntelliSense is computed\n            this.cancel();\n            return;\n        }\n        if (ctx.leadingWord.startColumn < this._context.leadingWord.startColumn) {\n            // happens when the current word gets outdented\n            this.cancel();\n            return;\n        }\n        if (ctx.column < this._context.column) {\n            // typed -> moved cursor LEFT -> retrigger if still on a word\n            if (ctx.leadingWord.word) {\n                this.trigger({ auto: this._context.auto, shy: false }, true);\n            }\n            else {\n                this.cancel();\n            }\n            return;\n        }\n        if (!this._completionModel) {\n            // happens when IntelliSense is not yet computed\n            return;\n        }\n        if (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\n            // typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n            var incomplete = this._completionModel.incomplete;\n            var adopted = this._completionModel.adopt(incomplete);\n            this.trigger({ auto: this._state === State.Auto, shy: false }, true, incomplete, adopted);\n        }\n        else {\n            // typed -> moved cursor RIGHT -> update UI\n            var oldLineContext = this._completionModel.lineContext;\n            var isFrozen = false;\n            this._completionModel.lineContext = {\n                leadingLineContent: ctx.leadingLineContent,\n                characterCountDelta: ctx.column - this._context.column\n            };\n            if (this._completionModel.items.length === 0) {\n                if (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n                    // retrigger when heading into a new word\n                    this.trigger({ auto: this._context.auto, shy: false }, true);\n                    return;\n                }\n                if (!this._context.auto) {\n                    // freeze when IntelliSense was manually requested\n                    this._completionModel.lineContext = oldLineContext;\n                    isFrozen = this._completionModel.items.length > 0;\n                    if (isFrozen && ctx.leadingWord.word.length === 0) {\n                        // there were results before but now there aren't\n                        // and also we are not on a word anymore -> cancel\n                        this.cancel();\n                        return;\n                    }\n                }\n                else {\n                    // nothing left\n                    this.cancel();\n                    return;\n                }\n            }\n            this._onDidSuggest.fire({\n                completionModel: this._completionModel,\n                auto: this._context.auto,\n                shy: this._context.shy,\n                isFrozen: isFrozen,\n            });\n        }\n    };\n    return SuggestModel;\n}());\nexports.SuggestModel = SuggestModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { TimeoutTimer } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { CursorChangeReason, ICursorSelectionChangedEvent } from 'vs/editor/common/controller/cursorEvents';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel, IWordAtPosition } from 'vs/editor/common/model';\nimport { CompletionItemProvider, StandardTokenType, CompletionContext, CompletionProviderRegistry, CompletionTriggerKind, CompletionItemKind, completionKindFromString } from 'vs/editor/common/modes';\nimport { CompletionModel } from './completionModel';\nimport { CompletionItem, getSuggestionComparator, provideSuggestionItems, getSnippetSuggestSupport, SnippetSortOrder, CompletionOptions } from './suggest';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { WordDistance } from 'vs/editor/contrib/suggest/wordDistance';\n\nexport interface ICancelEvent {\n\treadonly retrigger: boolean;\n}\n\nexport interface ITriggerEvent {\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n}\n\nexport interface ISuggestEvent {\n\treadonly completionModel: CompletionModel;\n\treadonly isFrozen: boolean;\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n}\n\nexport interface SuggestTriggerContext {\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n\treadonly triggerCharacter?: string;\n}\n\nexport class LineContext {\n\n\tstatic shouldAutoTrigger(editor: ICodeEditor): boolean {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tconst pos = editor.getPosition();\n\t\tmodel.tokenizeIfCheap(pos.lineNumber);\n\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (!word) {\n\t\t\treturn false;\n\t\t}\n\t\tif (word.endColumn !== pos.column) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!isNaN(Number(word.word))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\treadonly lineNumber: number;\n\treadonly column: number;\n\treadonly leadingLineContent: string;\n\treadonly leadingWord: IWordAtPosition;\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n\n\tconstructor(model: ITextModel, position: Position, auto: boolean, shy: boolean) {\n\t\tthis.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\t\tthis.leadingWord = model.getWordUntilPosition(position);\n\t\tthis.lineNumber = position.lineNumber;\n\t\tthis.column = position.column;\n\t\tthis.auto = auto;\n\t\tthis.shy = shy;\n\t}\n}\n\nexport const enum State {\n\tIdle = 0,\n\tManual = 1,\n\tAuto = 2\n}\n\nexport class SuggestModel implements IDisposable {\n\n\tprivate _toDispose: IDisposable[] = [];\n\tprivate _quickSuggestDelay: number;\n\tprivate _triggerCharacterListener: IDisposable;\n\tprivate readonly _triggerQuickSuggest = new TimeoutTimer();\n\tprivate readonly _triggerRefilter = new TimeoutTimer();\n\tprivate _state: State = State.Idle;\n\n\tprivate _requestToken?: CancellationTokenSource;\n\tprivate _context?: LineContext;\n\tprivate _currentSelection: Selection;\n\n\tprivate _completionModel?: CompletionModel;\n\tprivate readonly _onDidCancel = new Emitter<ICancelEvent>();\n\tprivate readonly _onDidTrigger = new Emitter<ITriggerEvent>();\n\tprivate readonly _onDidSuggest = new Emitter<ISuggestEvent>();\n\n\treadonly onDidCancel: Event<ICancelEvent> = this._onDidCancel.event;\n\treadonly onDidTrigger: Event<ITriggerEvent> = this._onDidTrigger.event;\n\treadonly onDidSuggest: Event<ISuggestEvent> = this._onDidSuggest.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _editorWorker: IEditorWorkerService\n\t) {\n\t\tthis._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n\n\t\t// wire up various listeners\n\t\tthis._toDispose.push(this._editor.onDidChangeModel(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.push(this._editor.onDidChangeModelLanguage(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.push(this._editor.onDidChangeConfiguration(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis._updateQuickSuggest();\n\t\t}));\n\t\tthis._toDispose.push(CompletionProviderRegistry.onDidChange(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis._updateActiveSuggestSession();\n\t\t}));\n\t\tthis._toDispose.push(this._editor.onDidChangeCursorSelection(e => {\n\t\t\tthis._onCursorChange(e);\n\t\t}));\n\n\t\tlet editorIsComposing = false;\n\t\tthis._toDispose.push(this._editor.onCompositionStart(() => {\n\t\t\teditorIsComposing = true;\n\t\t}));\n\t\tthis._toDispose.push(this._editor.onCompositionEnd(() => {\n\t\t\t// refilter when composition ends\n\t\t\teditorIsComposing = false;\n\t\t\tthis._refilterCompletionItems();\n\t\t}));\n\t\tthis._toDispose.push(this._editor.onDidChangeModelContent(() => {\n\t\t\t// only filter completions when the editor isn't\n\t\t\t// composing a character, e.g. ¨ + u makes ü but just\n\t\t\t// ¨ cannot be used for filtering\n\t\t\tif (!editorIsComposing) {\n\t\t\t\tthis._refilterCompletionItems();\n\t\t\t}\n\t\t}));\n\n\t\tthis._updateTriggerCharacters();\n\t\tthis._updateQuickSuggest();\n\t}\n\n\tdispose(): void {\n\t\tdispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerCharacterListener, this._triggerQuickSuggest, this._triggerRefilter]);\n\t\tthis._toDispose = dispose(this._toDispose);\n\t\tdispose(this._completionModel);\n\t\tthis.cancel();\n\t}\n\n\t// --- handle configuration & precondition changes\n\n\tprivate _updateQuickSuggest(): void {\n\t\tthis._quickSuggestDelay = this._editor.getConfiguration().contribInfo.quickSuggestionsDelay;\n\n\t\tif (isNaN(this._quickSuggestDelay) || (!this._quickSuggestDelay && this._quickSuggestDelay !== 0) || this._quickSuggestDelay < 0) {\n\t\t\tthis._quickSuggestDelay = 10;\n\t\t}\n\t}\n\n\tprivate _updateTriggerCharacters(): void {\n\n\t\tdispose(this._triggerCharacterListener);\n\n\t\tif (this._editor.getConfiguration().readOnly\n\t\t\t|| !this._editor.hasModel()\n\t\t\t|| !this._editor.getConfiguration().contribInfo.suggestOnTriggerCharacters) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportsByTriggerCharacter: { [ch: string]: Set<CompletionItemProvider> } = Object.create(null);\n\t\tfor (const support of CompletionProviderRegistry.all(this._editor.getModel())) {\n\t\t\tfor (const ch of support.triggerCharacters || []) {\n\t\t\t\tlet set = supportsByTriggerCharacter[ch];\n\t\t\t\tif (!set) {\n\t\t\t\t\tset = supportsByTriggerCharacter[ch] = new Set();\n\t\t\t\t\tset.add(getSnippetSuggestSupport());\n\t\t\t\t}\n\t\t\t\tset.add(support);\n\t\t\t}\n\t\t}\n\n\t\tthis._triggerCharacterListener = this._editor.onDidType(text => {\n\t\t\tconst lastChar = text.charAt(text.length - 1);\n\t\t\tconst supports = supportsByTriggerCharacter[lastChar];\n\n\t\t\tif (supports) {\n\t\t\t\t// keep existing items that where not computed by the\n\t\t\t\t// supports/providers that want to trigger now\n\t\t\t\tconst items: CompletionItem[] | undefined = this._completionModel ? this._completionModel.adopt(supports) : undefined;\n\t\t\t\tthis.trigger({ auto: true, shy: false, triggerCharacter: lastChar }, Boolean(this._completionModel), supports, items);\n\t\t\t}\n\t\t});\n\t}\n\n\t// --- trigger/retrigger/cancel suggest\n\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tcancel(retrigger: boolean = false): void {\n\t\tif (this._state !== State.Idle) {\n\t\t\tthis._triggerRefilter.cancel();\n\t\t\tthis._triggerQuickSuggest.cancel();\n\t\t\tif (this._requestToken) {\n\t\t\t\tthis._requestToken.cancel();\n\t\t\t\tthis._requestToken = undefined;\n\t\t\t}\n\t\t\tthis._state = State.Idle;\n\t\t\tdispose(this._completionModel);\n\t\t\tthis._completionModel = undefined;\n\t\t\tthis._context = undefined;\n\t\t\tthis._onDidCancel.fire({ retrigger });\n\t\t}\n\t}\n\n\tprivate _updateActiveSuggestSession(): void {\n\t\tif (this._state !== State.Idle) {\n\t\t\tif (!this._editor.hasModel() || !CompletionProviderRegistry.has(this._editor.getModel())) {\n\t\t\t\tthis.cancel();\n\t\t\t} else {\n\t\t\t\tthis.trigger({ auto: this._state === State.Auto, shy: false }, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onCursorChange(e: ICursorSelectionChangedEvent): void {\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst prevSelection = this._currentSelection;\n\t\tthis._currentSelection = this._editor.getSelection();\n\n\t\tif (!e.selection.isEmpty()\n\t\t\t|| e.reason !== CursorChangeReason.NotSet\n\t\t\t|| (e.source !== 'keyboard' && e.source !== 'deleteLeft')\n\t\t) {\n\t\t\t// Early exit if nothing needs to be done!\n\t\t\t// Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n\t\t\tif (this._state !== State.Idle) {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!CompletionProviderRegistry.has(model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._state === State.Idle) {\n\n\t\t\tif (this._editor.getConfiguration().contribInfo.quickSuggestions === false) {\n\t\t\t\t// not enabled\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!prevSelection.containsRange(this._currentSelection) && !prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n\t\t\t\t// cursor didn't move RIGHT\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._editor.getConfiguration().contribInfo.suggest.snippetsPreventQuickSuggestions && SnippetController2.get(this._editor).isInSnippet()) {\n\t\t\t\t// no quick suggestion when in snippet mode\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.cancel();\n\n\t\t\tthis._triggerQuickSuggest.cancelAndSet(() => {\n\t\t\t\tif (!LineContext.shouldAutoTrigger(this._editor)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\tconst pos = this._editor.getPosition();\n\t\t\t\t// validate enabled now\n\t\t\t\tconst { quickSuggestions } = this._editor.getConfiguration().contribInfo;\n\t\t\t\tif (quickSuggestions === false) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (quickSuggestions === true) {\n\t\t\t\t\t// all good\n\t\t\t\t} else {\n\t\t\t\t\t// Check the type of the token that triggered this\n\t\t\t\t\tmodel.tokenizeIfCheap(pos.lineNumber);\n\t\t\t\t\tconst lineTokens = model.getLineTokens(pos.lineNumber);\n\t\t\t\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n\t\t\t\t\tconst inValidScope = quickSuggestions.other && tokenType === StandardTokenType.Other\n\t\t\t\t\t\t|| quickSuggestions.comments && tokenType === StandardTokenType.Comment\n\t\t\t\t\t\t|| quickSuggestions.strings && tokenType === StandardTokenType.String;\n\n\t\t\t\t\tif (!inValidScope) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we made it till here -> trigger now\n\t\t\t\tthis.trigger({ auto: true, shy: false });\n\n\t\t\t}, this._quickSuggestDelay);\n\n\t\t}\n\t}\n\n\tprivate _refilterCompletionItems(): void {\n\t\tif (this._state === State.Idle) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\t// refine active suggestion\n\t\tthis._triggerRefilter.cancelAndSet(() => {\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst position = this._editor.getPosition();\n\t\t\tconst ctx = new LineContext(model, position, this._state === State.Auto, false);\n\t\t\tthis._onNewContext(ctx);\n\t\t}, 25);\n\t}\n\n\ttrigger(context: SuggestTriggerContext, retrigger: boolean = false, onlyFrom?: Set<CompletionItemProvider>, existingItems?: CompletionItem[]): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst auto = context.auto;\n\t\tconst ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n\n\t\t// Cancel previous requests, change state & update UI\n\t\tthis.cancel(retrigger);\n\t\tthis._state = auto ? State.Auto : State.Manual;\n\t\tthis._onDidTrigger.fire({ auto, shy: context.shy });\n\n\t\t// Capture context when request was sent\n\t\tthis._context = ctx;\n\n\t\t// Build context for request\n\t\tlet suggestCtx: CompletionContext;\n\t\tif (context.triggerCharacter) {\n\t\t\tsuggestCtx = {\n\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\ttriggerCharacter: context.triggerCharacter\n\t\t\t};\n\t\t} else if (onlyFrom && onlyFrom.size > 0) {\n\t\t\tsuggestCtx = { triggerKind: CompletionTriggerKind.TriggerForIncompleteCompletions };\n\t\t} else {\n\t\t\tsuggestCtx = { triggerKind: CompletionTriggerKind.Invoke };\n\t\t}\n\n\t\tthis._requestToken = new CancellationTokenSource();\n\n\t\t// kind filter and snippet sort rules\n\t\tconst { contribInfo } = this._editor.getConfiguration();\n\t\tlet itemKindFilter = new Set<CompletionItemKind>();\n\t\tlet snippetSortOrder = SnippetSortOrder.Inline;\n\t\tswitch (contribInfo.suggest.snippets) {\n\t\t\tcase 'top':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Top;\n\t\t\t\tbreak;\n\t\t\t// \t↓ that's the default anyways...\n\t\t\t// case 'inline':\n\t\t\t// \tsnippetSortOrder = SnippetSortOrder.Inline;\n\t\t\t// \tbreak;\n\t\t\tcase 'bottom':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Bottom;\n\t\t\t\tbreak;\n\t\t\tcase 'none':\n\t\t\t\titemKindFilter.add(CompletionItemKind.Snippet);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// kind filter\n\t\tfor (const key in contribInfo.suggest.filteredTypes) {\n\t\t\tconst kind = completionKindFromString(key, true);\n\t\t\tif (typeof kind !== 'undefined' && contribInfo.suggest.filteredTypes[key] === false) {\n\t\t\t\titemKindFilter.add(kind);\n\t\t\t}\n\t\t}\n\n\t\tlet wordDistance = WordDistance.create(this._editorWorker, this._editor);\n\n\t\tlet items = provideSuggestionItems(\n\t\t\tmodel,\n\t\t\tthis._editor.getPosition(),\n\t\t\tnew CompletionOptions(snippetSortOrder, itemKindFilter, onlyFrom),\n\t\t\tsuggestCtx,\n\t\t\tthis._requestToken.token\n\t\t);\n\n\t\tPromise.all([items, wordDistance]).then(([items, wordDistance]) => {\n\n\t\t\tdispose(this._requestToken);\n\n\t\t\tif (this._state === State.Idle) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = this._editor.getModel();\n\n\t\t\tif (isNonEmptyArray(existingItems)) {\n\t\t\t\tconst cmpFn = getSuggestionComparator(snippetSortOrder);\n\t\t\t\titems = items.concat(existingItems).sort(cmpFn);\n\t\t\t}\n\n\t\t\tconst ctx = new LineContext(model, this._editor.getPosition(), auto, context.shy);\n\t\t\tdispose(this._completionModel);\n\t\t\tthis._completionModel = new CompletionModel(items, this._context!.column, {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context!.column\n\t\t\t},\n\t\t\t\twordDistance,\n\t\t\t\tthis._editor.getConfiguration().contribInfo.suggest\n\t\t\t);\n\t\t\tthis._onNewContext(ctx);\n\n\t\t}).catch(onUnexpectedError);\n\t}\n\n\tprivate _onNewContext(ctx: LineContext): void {\n\n\t\tif (!this._context) {\n\t\t\t// happens when 24x7 IntelliSense is enabled and still in its delay\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.lineNumber !== this._context.lineNumber) {\n\t\t\t// e.g. happens when pressing Enter while IntelliSense is computed\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.leadingWord.startColumn < this._context.leadingWord.startColumn) {\n\t\t\t// happens when the current word gets outdented\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column < this._context.column) {\n\t\t\t// typed -> moved cursor LEFT -> retrigger if still on a word\n\t\t\tif (ctx.leadingWord.word) {\n\t\t\t\tthis.trigger({ auto: this._context.auto, shy: false }, true);\n\t\t\t} else {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._completionModel) {\n\t\t\t// happens when IntelliSense is not yet computed\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column > this._context.column && this._completionModel.incomplete.size > 0 && ctx.leadingWord.word.length !== 0) {\n\t\t\t// typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n\t\t\tconst { incomplete } = this._completionModel;\n\t\t\tconst adopted = this._completionModel.adopt(incomplete);\n\t\t\tthis.trigger({ auto: this._state === State.Auto, shy: false }, true, incomplete, adopted);\n\n\t\t} else {\n\t\t\t// typed -> moved cursor RIGHT -> update UI\n\t\t\tlet oldLineContext = this._completionModel.lineContext;\n\t\t\tlet isFrozen = false;\n\n\t\t\tthis._completionModel.lineContext = {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context.column\n\t\t\t};\n\n\t\t\tif (this._completionModel.items.length === 0) {\n\n\t\t\t\tif (LineContext.shouldAutoTrigger(this._editor) && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n\t\t\t\t\t// retrigger when heading into a new word\n\t\t\t\t\tthis.trigger({ auto: this._context.auto, shy: false }, true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this._context.auto) {\n\t\t\t\t\t// freeze when IntelliSense was manually requested\n\t\t\t\t\tthis._completionModel.lineContext = oldLineContext;\n\t\t\t\t\tisFrozen = this._completionModel.items.length > 0;\n\n\t\t\t\t\tif (isFrozen && ctx.leadingWord.word.length === 0) {\n\t\t\t\t\t\t// there were results before but now there aren't\n\t\t\t\t\t\t// and also we are not on a word anymore -> cancel\n\t\t\t\t\t\tthis.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// nothing left\n\t\t\t\t\tthis.cancel();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidSuggest.fire({\n\t\t\t\tcompletionModel: this._completionModel,\n\t\t\t\tauto: this._context.auto,\n\t\t\t\tshy: this._context.shy,\n\t\t\t\tisFrozen,\n\t\t\t});\n\t\t}\n\t}\n}\n"]}]}