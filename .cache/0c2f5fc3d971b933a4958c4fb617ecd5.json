{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path = require(\"vs/base/common/path\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nfunction createSpdLogService(processName, logLevel, logsFolder) {\n    // Do not crash if spdlog cannot be loaded\n    try {\n        var _spdlog = require.__$__nodeRequire('spdlog');\n        _spdlog.setAsyncMode(8192, 500);\n        var logfilePath = path.join(logsFolder, processName + \".log\");\n        var logger = new _spdlog.RotatingLogger(processName, logfilePath, 1024 * 1024 * 5, 6);\n        logger.setLevel(0);\n        return new SpdLogService(logger, logLevel);\n    }\n    catch (e) {\n        console.error(e);\n    }\n    return new log_1.NullLogService();\n}\nexports.createSpdLogService = createSpdLogService;\nfunction createRotatingLogger(name, filename, filesize, filecount) {\n    var _spdlog = require.__$__nodeRequire('spdlog');\n    return _spdlog.createRotatingLogger(name, filename, filesize, filecount);\n}\nexports.createRotatingLogger = createRotatingLogger;\nvar SpdLogService = /** @class */ (function (_super) {\n    tslib_1.__extends(SpdLogService, _super);\n    function SpdLogService(logger, level) {\n        if (level === void 0) { level = log_1.LogLevel.Error; }\n        var _this = _super.call(this) || this;\n        _this.logger = logger;\n        _this.setLevel(level);\n        return _this;\n    }\n    SpdLogService.prototype.trace = function () {\n        if (this.getLevel() <= log_1.LogLevel.Trace) {\n            this.logger.trace(this.format(arguments));\n        }\n    };\n    SpdLogService.prototype.debug = function () {\n        if (this.getLevel() <= log_1.LogLevel.Debug) {\n            this.logger.debug(this.format(arguments));\n        }\n    };\n    SpdLogService.prototype.info = function () {\n        if (this.getLevel() <= log_1.LogLevel.Info) {\n            this.logger.info(this.format(arguments));\n        }\n    };\n    SpdLogService.prototype.warn = function () {\n        if (this.getLevel() <= log_1.LogLevel.Warning) {\n            this.logger.warn(this.format(arguments));\n        }\n    };\n    SpdLogService.prototype.error = function () {\n        if (this.getLevel() <= log_1.LogLevel.Error) {\n            var arg = arguments[0];\n            if (arg instanceof Error) {\n                var array = Array.prototype.slice.call(arguments);\n                array[0] = arg.stack;\n                this.logger.error(this.format(array));\n            }\n            else {\n                this.logger.error(this.format(arguments));\n            }\n        }\n    };\n    SpdLogService.prototype.critical = function () {\n        if (this.getLevel() <= log_1.LogLevel.Critical) {\n            this.logger.critical(this.format(arguments));\n        }\n    };\n    SpdLogService.prototype.dispose = function () {\n        this.logger.drop();\n    };\n    SpdLogService.prototype.format = function (args) {\n        var result = '';\n        for (var i = 0; i < args.length; i++) {\n            var a = args[i];\n            if (typeof a === 'object') {\n                try {\n                    a = JSON.stringify(a);\n                }\n                catch (e) { }\n            }\n            result += (i > 0 ? ' ' : '') + a;\n        }\n        return result;\n    };\n    return SpdLogService;\n}(log_1.AbstractLogService));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/log/node/spdlogService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport { ILogService, LogLevel, NullLogService, AbstractLogService } from 'vs/platform/log/common/log';\nimport * as spdlog from 'spdlog';\n\nexport function createSpdLogService(processName: string, logLevel: LogLevel, logsFolder: string): ILogService {\n\t// Do not crash if spdlog cannot be loaded\n\ttry {\n\t\tconst _spdlog: typeof spdlog = require.__$__nodeRequire('spdlog');\n\t\t_spdlog.setAsyncMode(8192, 500);\n\t\tconst logfilePath = path.join(logsFolder, `${processName}.log`);\n\t\tconst logger = new _spdlog.RotatingLogger(processName, logfilePath, 1024 * 1024 * 5, 6);\n\t\tlogger.setLevel(0);\n\n\t\treturn new SpdLogService(logger, logLevel);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n\treturn new NullLogService();\n}\n\nexport function createRotatingLogger(name: string, filename: string, filesize: number, filecount: number): spdlog.RotatingLogger {\n\tconst _spdlog: typeof spdlog = require.__$__nodeRequire('spdlog');\n\treturn _spdlog.createRotatingLogger(name, filename, filesize, filecount);\n}\n\nclass SpdLogService extends AbstractLogService implements ILogService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\tprivate readonly logger: spdlog.RotatingLogger,\n\t\tlevel: LogLevel = LogLevel.Error\n\t) {\n\t\tsuper();\n\t\tthis.setLevel(level);\n\t}\n\n\ttrace(): void {\n\t\tif (this.getLevel() <= LogLevel.Trace) {\n\t\t\tthis.logger.trace(this.format(arguments));\n\t\t}\n\t}\n\n\tdebug(): void {\n\t\tif (this.getLevel() <= LogLevel.Debug) {\n\t\t\tthis.logger.debug(this.format(arguments));\n\t\t}\n\t}\n\n\tinfo(): void {\n\t\tif (this.getLevel() <= LogLevel.Info) {\n\t\t\tthis.logger.info(this.format(arguments));\n\t\t}\n\t}\n\n\twarn(): void {\n\t\tif (this.getLevel() <= LogLevel.Warning) {\n\t\t\tthis.logger.warn(this.format(arguments));\n\t\t}\n\t}\n\n\terror(): void {\n\t\tif (this.getLevel() <= LogLevel.Error) {\n\t\t\tconst arg = arguments[0];\n\n\t\t\tif (arg instanceof Error) {\n\t\t\t\tconst array = Array.prototype.slice.call(arguments) as any[];\n\t\t\t\tarray[0] = arg.stack;\n\t\t\t\tthis.logger.error(this.format(array));\n\t\t\t} else {\n\t\t\t\tthis.logger.error(this.format(arguments));\n\t\t\t}\n\t\t}\n\t}\n\n\tcritical(): void {\n\t\tif (this.getLevel() <= LogLevel.Critical) {\n\t\t\tthis.logger.critical(this.format(arguments));\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.logger.drop();\n\t}\n\n\tprivate format(args: any): string {\n\t\tlet result = '';\n\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tlet a = args[i];\n\n\t\t\tif (typeof a === 'object') {\n\t\t\t\ttry {\n\t\t\t\t\ta = JSON.stringify(a);\n\t\t\t\t} catch (e) { }\n\t\t\t}\n\n\t\t\tresult += (i > 0 ? ' ' : '') + a;\n\t\t}\n\n\t\treturn result;\n\t}\n}"]}]}