{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupRestorer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupRestorer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/services/backup/common/backup\", \"vs/workbench/services/editor/common/editorService\", \"vs/base/common/network\", \"vs/platform/lifecycle/common/lifecycle\"], function (require, exports, backup_1, editorService_1, network_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let BackupRestorer = class BackupRestorer {\n        constructor(editorService, backupFileService, lifecycleService) {\n            this.editorService = editorService;\n            this.backupFileService = backupFileService;\n            this.lifecycleService = lifecycleService;\n            this.restoreBackups();\n        }\n        restoreBackups() {\n            this.lifecycleService.when(lifecycle_1.LifecyclePhase.Restored).then(() => this.doRestoreBackups());\n        }\n        doRestoreBackups() {\n            // Find all files and untitled with backups\n            return this.backupFileService.getWorkspaceFileBackups().then(backups => {\n                // Resolve backups that are opened\n                return this.doResolveOpenedBackups(backups).then((unresolved) => {\n                    // Some failed to restore or were not opened at all so we open and resolve them manually\n                    if (unresolved.length > 0) {\n                        return this.doOpenEditors(unresolved).then(() => this.doResolveOpenedBackups(unresolved));\n                    }\n                    return undefined;\n                });\n            });\n        }\n        doResolveOpenedBackups(backups) {\n            const restorePromises = [];\n            const unresolved = [];\n            backups.forEach(backup => {\n                const openedEditor = this.editorService.getOpened({ resource: backup });\n                if (openedEditor) {\n                    restorePromises.push(openedEditor.resolve().then(undefined, () => unresolved.push(backup)));\n                }\n                else {\n                    unresolved.push(backup);\n                }\n            });\n            return Promise.all(restorePromises).then(() => unresolved, () => unresolved);\n        }\n        doOpenEditors(resources) {\n            const hasOpenedEditors = this.editorService.visibleEditors.length > 0;\n            const inputs = resources.map((resource, index) => this.resolveInput(resource, index, hasOpenedEditors));\n            // Open all remaining backups as editors and resolve them to load their backups\n            return this.editorService.openEditors(inputs).then(() => undefined);\n        }\n        resolveInput(resource, index, hasOpenedEditors) {\n            const options = { pinned: true, preserveFocus: true, inactive: index > 0 || hasOpenedEditors };\n            if (resource.scheme === network_1.Schemas.untitled && !BackupRestorer.UNTITLED_REGEX.test(resource.fsPath)) {\n                return { filePath: resource.fsPath, options };\n            }\n            return { resource, options };\n        }\n    };\n    BackupRestorer.UNTITLED_REGEX = /Untitled-\\d+/;\n    BackupRestorer = __decorate([\n        __param(0, editorService_1.IEditorService),\n        __param(1, backup_1.IBackupFileService),\n        __param(2, lifecycle_1.ILifecycleService)\n    ], BackupRestorer);\n    exports.BackupRestorer = BackupRestorer;\n});\n",null]}