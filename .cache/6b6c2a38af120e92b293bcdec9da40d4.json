{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/ide/src/fill/notification.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/fill/notification.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"@coder/logger\"], function (require, exports, logger_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Severity;\n    (function (Severity) {\n        Severity[Severity[\"Ignore\"] = 0] = \"Ignore\";\n        Severity[Severity[\"Info\"] = 1] = \"Info\";\n        Severity[Severity[\"Warning\"] = 2] = \"Warning\";\n        Severity[Severity[\"Error\"] = 3] = \"Error\";\n    })(Severity = exports.Severity || (exports.Severity = {}));\n    /**\n     * Console-based notification service.\n     */\n    class NotificationService {\n        error(error) {\n            logger_1.logger.error(error.message, logger_1.field(\"error\", error));\n        }\n        prompt(severity, message, _buttons, _onCancel) {\n            switch (severity) {\n                case Severity.Info:\n                    logger_1.logger.info(message);\n                    break;\n                case Severity.Warning:\n                    logger_1.logger.warn(message);\n                    break;\n                case Severity.Error:\n                    logger_1.logger.error(message);\n                    break;\n            }\n            return {\n                close: () => undefined,\n                updateMessage: () => undefined,\n                updateButtons: () => undefined,\n            };\n        }\n    }\n    exports.NotificationService = NotificationService;\n    /**\n     * Console-based progress service.\n     */\n    class ProgressService {\n        start(title, task) {\n            logger_1.logger.info(title);\n            return task({\n                report: (progress) => {\n                    logger_1.logger.info(`${title} progress: ${progress}`);\n                },\n            });\n        }\n    }\n    exports.ProgressService = ProgressService;\n});\n",null]}