{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/notification/common/notificationService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/notification/common/notificationService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar NotificationService = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationService, _super);\n    function NotificationService() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._model = _this._register(new notifications_1.NotificationsModel());\n        return _this;\n    }\n    Object.defineProperty(NotificationService.prototype, \"model\", {\n        get: function () {\n            return this._model;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationService.prototype.info = function (message) {\n        var _this = this;\n        if (Array.isArray(message)) {\n            message.forEach(function (m) { return _this.info(m); });\n            return;\n        }\n        this.model.notify({ severity: notification_1.Severity.Info, message: message });\n    };\n    NotificationService.prototype.warn = function (message) {\n        var _this = this;\n        if (Array.isArray(message)) {\n            message.forEach(function (m) { return _this.warn(m); });\n            return;\n        }\n        this.model.notify({ severity: notification_1.Severity.Warning, message: message });\n    };\n    NotificationService.prototype.error = function (message) {\n        var _this = this;\n        if (Array.isArray(message)) {\n            message.forEach(function (m) { return _this.error(m); });\n            return;\n        }\n        this.model.notify({ severity: notification_1.Severity.Error, message: message });\n    };\n    NotificationService.prototype.notify = function (notification) {\n        return this.model.notify(notification);\n    };\n    NotificationService.prototype.prompt = function (severity, message, choices, options) {\n        var toDispose = [];\n        var choiceClicked = false;\n        var handle;\n        // Convert choices into primary/secondary actions\n        var actions = { primary: [], secondary: [] };\n        choices.forEach(function (choice, index) {\n            var action = new notifications_1.ChoiceAction(\"workbench.dialog.choice.\" + index, choice);\n            if (!choice.isSecondary) {\n                if (!actions.primary) {\n                    actions.primary = [];\n                }\n                actions.primary.push(action);\n            }\n            else {\n                if (!actions.secondary) {\n                    actions.secondary = [];\n                }\n                actions.secondary.push(action);\n            }\n            // React to action being clicked\n            toDispose.push(action.onDidRun(function () {\n                choiceClicked = true;\n                // Close notification unless we are told to keep open\n                if (!choice.keepOpen) {\n                    handle.close();\n                }\n            }));\n            toDispose.push(action);\n        });\n        // Show notification with actions\n        handle = this.notify({ severity: severity, message: message, actions: actions, sticky: options && options.sticky, silent: options && options.silent });\n        event_1.Event.once(handle.onDidClose)(function () {\n            // Cleanup when notification gets disposed\n            lifecycle_1.dispose(toDispose);\n            // Indicate cancellation to the outside if no action was executed\n            if (options && typeof options.onCancel === 'function' && !choiceClicked) {\n                options.onCancel();\n            }\n        });\n        return handle;\n    };\n    return NotificationService;\n}(lifecycle_1.Disposable));\nexports.NotificationService = NotificationService;\nextensions_1.registerSingleton(notification_1.INotificationService, NotificationService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/notification/common/notificationService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/notification/common/notificationService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotificationService, INotification, INotificationHandle, Severity, NotificationMessage, INotificationActions, IPromptChoice, IPromptOptions } from 'vs/platform/notification/common/notification';\nimport { INotificationsModel, NotificationsModel, ChoiceAction } from 'vs/workbench/common/notifications';\nimport { dispose, Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class NotificationService extends Disposable implements INotificationService {\n\n\t_serviceBrand: any;\n\n\tprivate _model: INotificationsModel = this._register(new NotificationsModel());\n\n\tget model(): INotificationsModel {\n\t\treturn this._model;\n\t}\n\n\tinfo(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.info(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.notify({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.warn(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.notify({ severity: Severity.Warning, message });\n\t}\n\n\terror(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.error(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.notify({ severity: Severity.Error, message });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\treturn this.model.notify(notification);\n\t}\n\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tconst toDispose: IDisposable[] = [];\n\n\t\tlet choiceClicked = false;\n\t\tlet handle: INotificationHandle;\n\n\t\t// Convert choices into primary/secondary actions\n\t\tconst actions: INotificationActions = { primary: [], secondary: [] };\n\t\tchoices.forEach((choice, index) => {\n\t\t\tconst action = new ChoiceAction(`workbench.dialog.choice.${index}`, choice);\n\t\t\tif (!choice.isSecondary) {\n\t\t\t\tif (!actions.primary) {\n\t\t\t\t\tactions.primary = [];\n\t\t\t\t}\n\t\t\t\tactions.primary.push(action);\n\t\t\t} else {\n\t\t\t\tif (!actions.secondary) {\n\t\t\t\t\tactions.secondary = [];\n\t\t\t\t}\n\t\t\t\tactions.secondary.push(action);\n\t\t\t}\n\n\t\t\t// React to action being clicked\n\t\t\ttoDispose.push(action.onDidRun(() => {\n\t\t\t\tchoiceClicked = true;\n\n\t\t\t\t// Close notification unless we are told to keep open\n\t\t\t\tif (!choice.keepOpen) {\n\t\t\t\t\thandle.close();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\ttoDispose.push(action);\n\t\t});\n\n\t\t// Show notification with actions\n\t\thandle = this.notify({ severity, message, actions, sticky: options && options.sticky, silent: options && options.silent });\n\n\t\tEvent.once(handle.onDidClose)(() => {\n\n\t\t\t// Cleanup when notification gets disposed\n\t\t\tdispose(toDispose);\n\n\t\t\t// Indicate cancellation to the outside if no action was executed\n\t\t\tif (options && typeof options.onCancel === 'function' && !choiceClicked) {\n\t\t\t\toptions.onCancel();\n\t\t\t}\n\t\t});\n\n\t\treturn handle;\n\t}\n}\n\nregisterSingleton(INotificationService, NotificationService, true);"]}]}