{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/statusbar/statusbar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/statusbar/statusbar.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar StatusbarItemDescriptor = /** @class */ (function () {\n    function StatusbarItemDescriptor(ctor, alignment, priority) {\n        this.syncDescriptor = descriptors_1.createSyncDescriptor(ctor);\n        this.alignment = alignment || statusbar_1.StatusbarAlignment.LEFT;\n        this.priority = priority || 0;\n    }\n    return StatusbarItemDescriptor;\n}());\nexports.StatusbarItemDescriptor = StatusbarItemDescriptor;\nvar StatusbarRegistry = /** @class */ (function () {\n    function StatusbarRegistry() {\n        this._items = [];\n    }\n    Object.defineProperty(StatusbarRegistry.prototype, \"items\", {\n        get: function () {\n            return this._items;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StatusbarRegistry.prototype.registerStatusbarItem = function (descriptor) {\n        this._items.push(descriptor);\n    };\n    return StatusbarRegistry;\n}());\nexports.Extensions = {\n    Statusbar: 'workbench.contributions.statusbar'\n};\nplatform_1.Registry.add(exports.Extensions.Statusbar, new StatusbarRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/statusbar/statusbar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/statusbar/statusbar.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iEAAgE;AAEhE,oEAA4E;AAC5E,4EAAqG;AAOrG;IAKC,iCAAY,IAA4C,EAAE,SAA8B,EAAE,QAAiB;QAC1G,IAAI,CAAC,cAAc,GAAG,kCAAoB,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,8BAAkB,CAAC,IAAI,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,CAAC;IAC/B,CAAC;IACF,8BAAC;AAAD,CAAC,AAVD,IAUC;AAVY,0DAAuB;AAiBpC;IAIC;QACC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,sBAAI,oCAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAED,iDAAqB,GAArB,UAAsB,UAAmC;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9B,CAAC;IACF,wBAAC;AAAD,CAAC,AAfD,IAeC;AAEY,QAAA,UAAU,GAAG;IACzB,SAAS,EAAE,mCAAmC;CAC9C,CAAC;AAEF,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,SAAS,EAAE,IAAI,iBAAiB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { StatusbarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { SyncDescriptor0, createSyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IConstructorSignature0 } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IStatusbarItem {\n\trender(element: HTMLElement): IDisposable;\n}\n\nexport class StatusbarItemDescriptor {\n\tsyncDescriptor: SyncDescriptor0<IStatusbarItem>;\n\talignment: StatusbarAlignment;\n\tpriority: number;\n\n\tconstructor(ctor: IConstructorSignature0<IStatusbarItem>, alignment?: StatusbarAlignment, priority?: number) {\n\t\tthis.syncDescriptor = createSyncDescriptor(ctor);\n\t\tthis.alignment = alignment || StatusbarAlignment.LEFT;\n\t\tthis.priority = priority || 0;\n\t}\n}\n\nexport interface IStatusbarRegistry {\n\tregisterStatusbarItem(descriptor: StatusbarItemDescriptor): void;\n\titems: StatusbarItemDescriptor[];\n}\n\nclass StatusbarRegistry implements IStatusbarRegistry {\n\n\tprivate _items: StatusbarItemDescriptor[];\n\n\tconstructor() {\n\t\tthis._items = [];\n\t}\n\n\tget items(): StatusbarItemDescriptor[] {\n\t\treturn this._items;\n\t}\n\n\tregisterStatusbarItem(descriptor: StatusbarItemDescriptor): void {\n\t\tthis._items.push(descriptor);\n\t}\n}\n\nexport const Extensions = {\n\tStatusbar: 'workbench.contributions.statusbar'\n};\n\nRegistry.add(Extensions.Statusbar, new StatusbarRegistry());\n"]}]}