{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/output.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/output.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar outputServices_1 = require(\"vs/workbench/contrib/output/browser/outputServices\");\nvar outputActions_1 = require(\"vs/workbench/contrib/output/browser/outputActions\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar outputPanel_1 = require(\"vs/workbench/contrib/output/browser/outputPanel\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar logViewer_1 = require(\"vs/workbench/contrib/output/browser/logViewer\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\n// Register Service\nextensions_1.registerSingleton(output_1.IOutputService, outputServices_1.OutputService);\n// Register Output Mode\nmodesRegistry_1.ModesRegistry.registerLanguage({\n    id: output_1.OUTPUT_MODE_ID,\n    extensions: [],\n    mimetypes: [output_1.OUTPUT_MIME]\n});\n// Register Log Output Mode\nmodesRegistry_1.ModesRegistry.registerLanguage({\n    id: output_1.LOG_MODE_ID,\n    extensions: [],\n    mimetypes: [output_1.LOG_MIME]\n});\n// Register Output Panel\nplatform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor(outputPanel_1.OutputPanel, output_1.OUTPUT_PANEL_ID, nls.localize('output', \"Output\"), 'output', 20, outputActions_1.ToggleOutputAction.ID));\nplatform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(logViewer_1.LogViewer, logViewer_1.LogViewer.LOG_VIEWER_EDITOR_ID, nls.localize('logViewer', \"Log Viewer\")), [\n    new descriptors_1.SyncDescriptor(logViewer_1.LogViewerInput)\n]);\nvar OutputContribution = /** @class */ (function () {\n    function OutputContribution(instantiationService, textModelService) {\n        textModelService.registerTextModelContentProvider(output_1.LOG_SCHEME, instantiationService.createInstance(outputServices_1.LogContentProvider));\n    }\n    OutputContribution = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, resolverService_1.ITextModelService)\n    ], OutputContribution);\n    return OutputContribution;\n}());\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(OutputContribution, lifecycle_1.LifecyclePhase.Restored);\n// register toggle output action globally\nvar actionRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.ToggleOutputAction, outputActions_1.ToggleOutputAction.ID, outputActions_1.ToggleOutputAction.LABEL, {\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_U,\n    linux: {\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_H) // On Ubuntu Ctrl+Shift+U is taken by some global OS command\n    }\n}), 'View: Toggle Output', nls.localize('viewCategory', \"View\"));\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.ClearOutputAction, outputActions_1.ClearOutputAction.ID, outputActions_1.ClearOutputAction.LABEL), 'View: Clear Output', nls.localize('viewCategory', \"View\"));\nvar devCategory = nls.localize('developer', \"Developer\");\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.ShowLogsOutputChannelAction, outputActions_1.ShowLogsOutputChannelAction.ID, outputActions_1.ShowLogsOutputChannelAction.LABEL), 'Developer: Show Logs...', devCategory);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(outputActions_1.OpenOutputLogFileAction, outputActions_1.OpenOutputLogFileAction.ID, outputActions_1.OpenOutputLogFileAction.LABEL), 'Developer: Open Log File...', devCategory);\n// Define clear command, contribute to editor context menu\nactions_1.registerAction({\n    id: 'editor.action.clearoutput',\n    title: { value: nls.localize('clearOutput.label', \"Clear Output\"), original: 'Clear Output' },\n    menu: {\n        menuId: actions_1.MenuId.EditorContext,\n        when: output_1.CONTEXT_IN_OUTPUT\n    },\n    handler: function (accessor) {\n        var activeChannel = accessor.get(output_1.IOutputService).getActiveChannel();\n        if (activeChannel) {\n            activeChannel.clear();\n        }\n    }\n});\nactions_1.registerAction({\n    id: 'workbench.action.openActiveLogOutputFile',\n    title: { value: nls.localize('openActiveLogOutputFile', \"Open Active Log Output File\"), original: 'Open Active Log Output File' },\n    menu: {\n        menuId: actions_1.MenuId.CommandPalette,\n        when: output_1.CONTEXT_ACTIVE_LOG_OUTPUT\n    },\n    handler: function (accessor) {\n        accessor.get(instantiation_1.IInstantiationService).createInstance(outputActions_1.OpenLogOutputFile).run();\n    }\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n    group: '4_panels',\n    command: {\n        id: outputActions_1.ToggleOutputAction.ID,\n        title: nls.localize({ key: 'miToggleOutput', comment: ['&& denotes a mnemonic'] }, \"&&Output\")\n    },\n    order: 1\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/output.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/output.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyMod, KeyChord, KeyCode } from 'vs/base/common/keyCodes';\nimport { ModesRegistry } from 'vs/editor/common/modes/modesRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { MenuId, MenuRegistry, SyncActionDescriptor, registerAction } from 'vs/platform/actions/common/actions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { OutputService, LogContentProvider } from 'vs/workbench/contrib/output/browser/outputServices';\nimport { ToggleOutputAction, ClearOutputAction, OpenLogOutputFile, ShowLogsOutputChannelAction, OpenOutputLogFileAction } from 'vs/workbench/contrib/output/browser/outputActions';\nimport { OUTPUT_MODE_ID, OUTPUT_MIME, OUTPUT_PANEL_ID, IOutputService, CONTEXT_IN_OUTPUT, LOG_SCHEME, LOG_MODE_ID, LOG_MIME, CONTEXT_ACTIVE_LOG_OUTPUT } from 'vs/workbench/contrib/output/common/output';\nimport { PanelRegistry, Extensions, PanelDescriptor } from 'vs/workbench/browser/panel';\nimport { OutputPanel } from 'vs/workbench/contrib/output/browser/outputPanel';\nimport { IEditorRegistry, Extensions as EditorExtensions, EditorDescriptor } from 'vs/workbench/browser/editor';\nimport { LogViewer, LogViewerInput } from 'vs/workbench/contrib/output/browser/logViewer';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\n\n// Register Service\nregisterSingleton(IOutputService, OutputService);\n\n// Register Output Mode\nModesRegistry.registerLanguage({\n\tid: OUTPUT_MODE_ID,\n\textensions: [],\n\tmimetypes: [OUTPUT_MIME]\n});\n\n// Register Log Output Mode\nModesRegistry.registerLanguage({\n\tid: LOG_MODE_ID,\n\textensions: [],\n\tmimetypes: [LOG_MIME]\n});\n\n// Register Output Panel\nRegistry.as<PanelRegistry>(Extensions.Panels).registerPanel(new PanelDescriptor(\n\tOutputPanel,\n\tOUTPUT_PANEL_ID,\n\tnls.localize('output', \"Output\"),\n\t'output',\n\t20,\n\tToggleOutputAction.ID\n));\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tLogViewer,\n\t\tLogViewer.LOG_VIEWER_EDITOR_ID,\n\t\tnls.localize('logViewer', \"Log Viewer\")\n\t),\n\t[\n\t\tnew SyncDescriptor(LogViewerInput)\n\t]\n);\n\nclass OutputContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelService: ITextModelService\n\t) {\n\t\ttextModelService.registerTextModelContentProvider(LOG_SCHEME, instantiationService.createInstance(LogContentProvider));\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(OutputContribution, LifecyclePhase.Restored);\n\n// register toggle output action globally\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleOutputAction, ToggleOutputAction.ID, ToggleOutputAction.LABEL, {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_U,\n\tlinux: {\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_H)  // On Ubuntu Ctrl+Shift+U is taken by some global OS command\n\t}\n}), 'View: Toggle Output', nls.localize('viewCategory', \"View\"));\n\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ClearOutputAction, ClearOutputAction.ID, ClearOutputAction.LABEL),\n\t'View: Clear Output', nls.localize('viewCategory', \"View\"));\n\nconst devCategory = nls.localize('developer', \"Developer\");\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(ShowLogsOutputChannelAction, ShowLogsOutputChannelAction.ID, ShowLogsOutputChannelAction.LABEL), 'Developer: Show Logs...', devCategory);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenOutputLogFileAction, OpenOutputLogFileAction.ID, OpenOutputLogFileAction.LABEL), 'Developer: Open Log File...', devCategory);\n\n// Define clear command, contribute to editor context menu\nregisterAction({\n\tid: 'editor.action.clearoutput',\n\ttitle: { value: nls.localize('clearOutput.label', \"Clear Output\"), original: 'Clear Output' },\n\tmenu: {\n\t\tmenuId: MenuId.EditorContext,\n\t\twhen: CONTEXT_IN_OUTPUT\n\t},\n\thandler(accessor) {\n\t\tconst activeChannel = accessor.get(IOutputService).getActiveChannel();\n\t\tif (activeChannel) {\n\t\t\tactiveChannel.clear();\n\t\t}\n\t}\n});\n\nregisterAction({\n\tid: 'workbench.action.openActiveLogOutputFile',\n\ttitle: { value: nls.localize('openActiveLogOutputFile', \"Open Active Log Output File\"), original: 'Open Active Log Output File' },\n\tmenu: {\n\t\tmenuId: MenuId.CommandPalette,\n\t\twhen: CONTEXT_ACTIVE_LOG_OUTPUT\n\t},\n\thandler(accessor) {\n\t\taccessor.get(IInstantiationService).createInstance(OpenLogOutputFile).run();\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '4_panels',\n\tcommand: {\n\t\tid: ToggleOutputAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleOutput', comment: ['&& denotes a mnemonic'] }, \"&&Output\")\n\t},\n\torder: 1\n});\n"]}]}