{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar color_1 = require(\"vs/base/common/color\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar colorRegistry = platform_1.Registry.as(colorRegistry_1.Extensions.ColorContribution);\nvar colorReferenceSchema = colorRegistry.getColorReferenceSchema();\nvar colorIdPattern = '^\\\\w+[.\\\\w+]*$';\nvar configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'colors',\n    jsonSchema: {\n        description: nls.localize('contributes.color', 'Contributes extension defined themable colors'),\n        type: 'array',\n        items: {\n            type: 'object',\n            properties: {\n                id: {\n                    type: 'string',\n                    description: nls.localize('contributes.color.id', 'The identifier of the themable color'),\n                    pattern: colorIdPattern,\n                    patternErrorMessage: nls.localize('contributes.color.id.format', 'Identifiers should be in the form aa[.bb]*'),\n                },\n                description: {\n                    type: 'string',\n                    description: nls.localize('contributes.color.description', 'The description of the themable color'),\n                },\n                defaults: {\n                    type: 'object',\n                    properties: {\n                        light: {\n                            description: nls.localize('contributes.defaults.light', 'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        },\n                        dark: {\n                            description: nls.localize('contributes.defaults.dark', 'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        },\n                        highContrast: {\n                            description: nls.localize('contributes.defaults.highContrast', 'The default color for high contrast themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n                            type: 'string',\n                            anyOf: [\n                                colorReferenceSchema,\n                                { type: 'string', format: 'color-hex' }\n                            ]\n                        }\n                    }\n                },\n            }\n        }\n    }\n});\nvar ColorExtensionPoint = /** @class */ (function () {\n    function ColorExtensionPoint() {\n        configurationExtPoint.setHandler(function (extensions, delta) {\n            var _loop_1 = function (extension) {\n                var extensionValue = extension.value;\n                var collector = extension.collector;\n                if (!extensionValue || !Array.isArray(extensionValue)) {\n                    collector.error(nls.localize('invalid.colorConfiguration', \"'configuration.colors' must be a array\"));\n                    return { value: void 0 };\n                }\n                var parseColorValue = function (s, name) {\n                    if (s.length > 0) {\n                        if (s[0] === '#') {\n                            return color_1.Color.Format.CSS.parseHex(s);\n                        }\n                        else {\n                            return s;\n                        }\n                    }\n                    collector.error(nls.localize('invalid.default.colorType', \"{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.\", name));\n                    return color_1.Color.red;\n                };\n                for (var _i = 0, extensionValue_2 = extensionValue; _i < extensionValue_2.length; _i++) {\n                    var colorContribution = extensionValue_2[_i];\n                    if (typeof colorContribution.id !== 'string' || colorContribution.id.length === 0) {\n                        collector.error(nls.localize('invalid.id', \"'configuration.colors.id' must be defined and can not be empty\"));\n                        return { value: void 0 };\n                    }\n                    if (!colorContribution.id.match(colorIdPattern)) {\n                        collector.error(nls.localize('invalid.id.format', \"'configuration.colors.id' must follow the word[.word]*\"));\n                        return { value: void 0 };\n                    }\n                    if (typeof colorContribution.description !== 'string' || colorContribution.id.length === 0) {\n                        collector.error(nls.localize('invalid.description', \"'configuration.colors.description' must be defined and can not be empty\"));\n                        return { value: void 0 };\n                    }\n                    var defaults = colorContribution.defaults;\n                    if (!defaults || typeof defaults !== 'object' || typeof defaults.light !== 'string' || typeof defaults.dark !== 'string' || typeof defaults.highContrast !== 'string') {\n                        collector.error(nls.localize('invalid.defaults', \"'configuration.colors.defaults' must be defined and must contain 'light', 'dark' and 'highContrast'\"));\n                        return { value: void 0 };\n                    }\n                    colorRegistry.registerColor(colorContribution.id, {\n                        light: parseColorValue(defaults.light, 'configuration.colors.defaults.light'),\n                        dark: parseColorValue(defaults.dark, 'configuration.colors.defaults.dark'),\n                        hc: parseColorValue(defaults.highContrast, 'configuration.colors.defaults.highContrast')\n                    }, colorContribution.description);\n                }\n            };\n            for (var _i = 0, _a = delta.added; _i < _a.length; _i++) {\n                var extension = _a[_i];\n                var state_1 = _loop_1(extension);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n            for (var _b = 0, _c = delta.removed; _b < _c.length; _b++) {\n                var extension = _c[_b];\n                var extensionValue = extension.value;\n                for (var _d = 0, extensionValue_1 = extensionValue; _d < extensionValue_1.length; _d++) {\n                    var colorContribution = extensionValue_1[_d];\n                    colorRegistry.deregisterColor(colorContribution.id);\n                }\n            }\n        });\n    }\n    return ColorExtensionPoint;\n}());\nexports.ColorExtensionPoint = ColorExtensionPoint;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IColorRegistry, Extensions as ColorRegistryExtensions } from 'vs/platform/theme/common/colorRegistry';\nimport { Color } from 'vs/base/common/color';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\ninterface IColorExtensionPoint {\n\tid: string;\n\tdescription: string;\n\tdefaults: { light: string, dark: string, highContrast: string };\n}\n\nconst colorRegistry: IColorRegistry = Registry.as<IColorRegistry>(ColorRegistryExtensions.ColorContribution);\n\nconst colorReferenceSchema = colorRegistry.getColorReferenceSchema();\nconst colorIdPattern = '^\\\\w+[.\\\\w+]*$';\n\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IColorExtensionPoint[]>({\n\textensionPoint: 'colors',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.color', 'Contributes extension defined themable colors'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.color.id', 'The identifier of the themable color'),\n\t\t\t\t\tpattern: colorIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.color.id.format', 'Identifiers should be in the form aa[.bb]*'),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.color.description', 'The description of the themable color'),\n\t\t\t\t},\n\t\t\t\tdefaults: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tlight: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.light', 'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdark: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.dark', 'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\thighContrast: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.highContrast', 'The default color for high contrast themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class ColorExtensionPoint {\n\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IColorExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.colorConfiguration', \"'configuration.colors' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet parseColorValue = (s: string, name: string) => {\n\t\t\t\t\tif (s.length > 0) {\n\t\t\t\t\t\tif (s[0] === '#') {\n\t\t\t\t\t\t\treturn Color.Format.CSS.parseHex(s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn s;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcollector.error(nls.localize('invalid.default.colorType', \"{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.\", name));\n\t\t\t\t\treturn Color.red;\n\t\t\t\t};\n\n\t\t\t\tfor (const colorContribution of extensionValue) {\n\t\t\t\t\tif (typeof colorContribution.id !== 'string' || colorContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.id', \"'configuration.colors.id' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!colorContribution.id.match(colorIdPattern)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.id.format', \"'configuration.colors.id' must follow the word[.word]*\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof colorContribution.description !== 'string' || colorContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.description', \"'configuration.colors.description' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet defaults = colorContribution.defaults;\n\t\t\t\t\tif (!defaults || typeof defaults !== 'object' || typeof defaults.light !== 'string' || typeof defaults.dark !== 'string' || typeof defaults.highContrast !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.defaults', \"'configuration.colors.defaults' must be defined and must contain 'light', 'dark' and 'highContrast'\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tcolorRegistry.registerColor(colorContribution.id, {\n\t\t\t\t\t\tlight: parseColorValue(defaults.light, 'configuration.colors.defaults.light'),\n\t\t\t\t\t\tdark: parseColorValue(defaults.dark, 'configuration.colors.defaults.dark'),\n\t\t\t\t\t\thc: parseColorValue(defaults.highContrast, 'configuration.colors.defaults.highContrast')\n\t\t\t\t\t}, colorContribution.description);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IColorExtensionPoint[]>extension.value;\n\t\t\t\tfor (const colorContribution of extensionValue) {\n\t\t\t\t\tcolorRegistry.deregisterColor(colorContribution.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\n"]}]}