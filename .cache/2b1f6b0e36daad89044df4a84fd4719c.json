{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/iterator.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/iterator.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.FIN = { done: true, value: undefined };\n    var Iterator;\n    (function (Iterator) {\n        const _empty = {\n            next() {\n                return exports.FIN;\n            }\n        };\n        function empty() {\n            return _empty;\n        }\n        Iterator.empty = empty;\n        function fromArray(array, index = 0, length = array.length) {\n            return {\n                next() {\n                    if (index >= length) {\n                        return exports.FIN;\n                    }\n                    return { done: false, value: array[index++] };\n                }\n            };\n        }\n        Iterator.fromArray = fromArray;\n        function from(elements) {\n            if (!elements) {\n                return Iterator.empty();\n            }\n            else if (Array.isArray(elements)) {\n                return Iterator.fromArray(elements);\n            }\n            else {\n                return elements;\n            }\n        }\n        Iterator.from = from;\n        function map(iterator, fn) {\n            return {\n                next() {\n                    const element = iterator.next();\n                    if (element.done) {\n                        return exports.FIN;\n                    }\n                    else {\n                        return { done: false, value: fn(element.value) };\n                    }\n                }\n            };\n        }\n        Iterator.map = map;\n        function filter(iterator, fn) {\n            return {\n                next() {\n                    while (true) {\n                        const element = iterator.next();\n                        if (element.done) {\n                            return exports.FIN;\n                        }\n                        if (fn(element.value)) {\n                            return { done: false, value: element.value };\n                        }\n                    }\n                }\n            };\n        }\n        Iterator.filter = filter;\n        function forEach(iterator, fn) {\n            for (let next = iterator.next(); !next.done; next = iterator.next()) {\n                fn(next.value);\n            }\n        }\n        Iterator.forEach = forEach;\n        function collect(iterator) {\n            const result = [];\n            forEach(iterator, value => result.push(value));\n            return result;\n        }\n        Iterator.collect = collect;\n    })(Iterator = exports.Iterator || (exports.Iterator = {}));\n    function getSequenceIterator(arg) {\n        if (Array.isArray(arg)) {\n            return Iterator.fromArray(arg);\n        }\n        else {\n            return arg;\n        }\n    }\n    exports.getSequenceIterator = getSequenceIterator;\n    class ArrayIterator {\n        constructor(items, start = 0, end = items.length, index = start - 1) {\n            this.items = items;\n            this.start = start;\n            this.end = end;\n            this.index = index;\n        }\n        first() {\n            this.index = this.start;\n            return this.current();\n        }\n        next() {\n            this.index = Math.min(this.index + 1, this.end);\n            return this.current();\n        }\n        current() {\n            if (this.index === this.start - 1 || this.index === this.end) {\n                return null;\n            }\n            return this.items[this.index];\n        }\n    }\n    exports.ArrayIterator = ArrayIterator;\n    class ArrayNavigator extends ArrayIterator {\n        constructor(items, start = 0, end = items.length, index = start - 1) {\n            super(items, start, end, index);\n        }\n        current() {\n            return super.current();\n        }\n        previous() {\n            this.index = Math.max(this.index - 1, this.start - 1);\n            return this.current();\n        }\n        first() {\n            this.index = this.start;\n            return this.current();\n        }\n        last() {\n            this.index = this.end - 1;\n            return this.current();\n        }\n        parent() {\n            return null;\n        }\n    }\n    exports.ArrayNavigator = ArrayNavigator;\n    class MappedIterator {\n        constructor(iterator, fn) {\n            this.iterator = iterator;\n            this.fn = fn;\n            // noop\n        }\n        next() { return this.fn(this.iterator.next()); }\n    }\n    exports.MappedIterator = MappedIterator;\n    class MappedNavigator extends MappedIterator {\n        constructor(navigator, fn) {\n            super(navigator, fn);\n            this.navigator = navigator;\n        }\n        current() { return this.fn(this.navigator.current()); }\n        previous() { return this.fn(this.navigator.previous()); }\n        parent() { return this.fn(this.navigator.parent()); }\n        first() { return this.fn(this.navigator.first()); }\n        last() { return this.fn(this.navigator.last()); }\n        next() { return this.fn(this.navigator.next()); }\n    }\n    exports.MappedNavigator = MappedNavigator;\n});\n",null]}