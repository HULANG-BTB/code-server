{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewEventHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewEventHandler.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/editor/common/view/viewEvents\"], function (require, exports, lifecycle_1, viewEvents) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ViewEventHandler extends lifecycle_1.Disposable {\n        constructor() {\n            super();\n            this._shouldRender = true;\n        }\n        shouldRender() {\n            return this._shouldRender;\n        }\n        forceShouldRender() {\n            this._shouldRender = true;\n        }\n        setShouldRender() {\n            this._shouldRender = true;\n        }\n        onDidRender() {\n            this._shouldRender = false;\n        }\n        // --- begin event handlers\n        onConfigurationChanged(e) {\n            return false;\n        }\n        onCursorStateChanged(e) {\n            return false;\n        }\n        onDecorationsChanged(e) {\n            return false;\n        }\n        onFlushed(e) {\n            return false;\n        }\n        onFocusChanged(e) {\n            return false;\n        }\n        onLanguageConfigurationChanged(e) {\n            return false;\n        }\n        onLineMappingChanged(e) {\n            return false;\n        }\n        onLinesChanged(e) {\n            return false;\n        }\n        onLinesDeleted(e) {\n            return false;\n        }\n        onLinesInserted(e) {\n            return false;\n        }\n        onRevealRangeRequest(e) {\n            return false;\n        }\n        onScrollChanged(e) {\n            return false;\n        }\n        onTokensChanged(e) {\n            return false;\n        }\n        onTokensColorsChanged(e) {\n            return false;\n        }\n        onZonesChanged(e) {\n            return false;\n        }\n        onThemeChanged(e) {\n            return false;\n        }\n        // --- end event handlers\n        handleEvents(events) {\n            let shouldRender = false;\n            for (let i = 0, len = events.length; i < len; i++) {\n                let e = events[i];\n                switch (e.type) {\n                    case viewEvents.ViewEventType.ViewConfigurationChanged:\n                        if (this.onConfigurationChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewCursorStateChanged:\n                        if (this.onCursorStateChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewDecorationsChanged:\n                        if (this.onDecorationsChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewFlushed:\n                        if (this.onFlushed(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewFocusChanged:\n                        if (this.onFocusChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewLanguageConfigurationChanged:\n                        if (this.onLanguageConfigurationChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewLineMappingChanged:\n                        if (this.onLineMappingChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewLinesChanged:\n                        if (this.onLinesChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewLinesDeleted:\n                        if (this.onLinesDeleted(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewLinesInserted:\n                        if (this.onLinesInserted(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewRevealRangeRequest:\n                        if (this.onRevealRangeRequest(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewScrollChanged:\n                        if (this.onScrollChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewTokensChanged:\n                        if (this.onTokensChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewTokensColorsChanged:\n                        if (this.onTokensColorsChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewZonesChanged:\n                        if (this.onZonesChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    case viewEvents.ViewEventType.ViewThemeChanged:\n                        if (this.onThemeChanged(e)) {\n                            shouldRender = true;\n                        }\n                        break;\n                    default:\n                        console.info('View received unknown event: ');\n                        console.info(e);\n                }\n            }\n            if (shouldRender) {\n                this._shouldRender = true;\n            }\n        }\n    }\n    exports.ViewEventHandler = ViewEventHandler;\n});\n",null]}