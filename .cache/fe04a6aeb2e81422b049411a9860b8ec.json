{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar logger_1 = require(\"@coder/logger\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar developerActions_1 = require(\"vs/workbench/electron-browser/actions/developerActions\");\nvar terminalActions_1 = require(\"vs/workbench/contrib/terminal/browser/terminalActions\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar workbench_1 = require(\"../workbench\");\n// Intercept adding workbench actions so we can skip actions that won't work or\n// modify actions that need different conditions, keybindings, etc.\nvar registry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\nvar originalRegister = registry.registerWorkbenchAction.bind(registry);\nregistry.registerWorkbenchAction = function (descriptor, alias, category, when) {\n    switch (descriptor.id) {\n        case developerActions_1.ToggleDevToolsAction.ID: // There appears to be no way to toggle this programmatically.\n            logger_1.logger.debug(\"Skipping unsupported workbench action \" + descriptor.id);\n            return {\n                dispose: function () { return undefined; },\n            };\n        case terminalActions_1.TerminalPasteAction.ID: // Modify the Windows keybinding and add our context key.\n            // tslint:disable-next-line no-any override private\n            descriptor._keybindings = {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n                linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_V },\n                win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V },\n                mac: { primary: 0 },\n            };\n            // tslint:disable-next-line no-any override private\n            descriptor._keybindingContext = contextkey_1.ContextKeyExpr.and(terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS, workbench_1.workbench.clipboardContextKey);\n    }\n    return originalRegister(descriptor, alias, category, when);\n};\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/workbenchRegistry.ts"],"names":[],"mappings":";;AAAA,wCAAuC;AAEvC,iEAAgE;AAChE,uDAAmF;AAEnF,uEAA0E;AAC1E,2FAA8F;AAC9F,yFAA4F;AAC5F,0EAAkG;AAClG,oDAA0D;AAC1D,0CAAyC;AAEzC,+EAA+E;AAC/E,mEAAmE;AACnE,IAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAU,CAAC,gBAAgB,CAAC,CAAC;AACpF,IAAM,gBAAgB,GAAG,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzE,QAAQ,CAAC,uBAAuB,GAAG,UAAC,UAAgC,EAAE,KAAa,EAAE,QAAiB,EAAE,IAAqB;IAC5H,QAAQ,UAAU,CAAC,EAAE,EAAE;QACtB,KAAK,uCAAoB,CAAC,EAAE,EAAE,8DAA8D;YAC3F,eAAM,CAAC,KAAK,CAAC,2CAAyC,UAAU,CAAC,EAAI,CAAC,CAAC;YAEvE,OAAO;gBACN,OAAO,EAAE,cAAY,OAAA,SAAS,EAAT,CAAS;aAC9B,CAAC;QAEH,KAAK,qCAAmB,CAAC,EAAE,EAAE,yDAAyD;YACrF,mDAAmD;YAClD,UAAkB,CAAC,YAAY,GAAG;gBAClC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK;gBACvC,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE;gBACjE,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK,EAAE;gBAChD,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;aACnB,CAAC;YACF,mDAAmD;YAClD,UAAkB,CAAC,kBAAkB,GAAG,2BAAc,CAAC,GAAG,CAAC,4CAAiC,EAAE,qBAAS,CAAC,mBAAmB,CAAC,CAAC;KAC/H;IAED,OAAO,gBAAgB,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC5D,CAAC,CAAC","sourcesContent":["import { logger } from \"@coder/logger\";\nimport { IDisposable } from \"vs/base/common/lifecycle\";\nimport { Registry } from \"vs/platform/registry/common/platform\";\nimport { IWorkbenchActionRegistry, Extensions } from \"vs/workbench/common/actions\";\nimport { SyncActionDescriptor } from \"vs/platform/actions/common/actions\";\nimport { ContextKeyExpr } from \"vs/platform/contextkey/common/contextkey\";\nimport { ToggleDevToolsAction } from \"vs/workbench/electron-browser/actions/developerActions\";\nimport { TerminalPasteAction } from \"vs/workbench/contrib/terminal/browser/terminalActions\";\nimport { KEYBINDING_CONTEXT_TERMINAL_FOCUS } from \"vs/workbench/contrib/terminal/common/terminal\";\nimport { KeyCode, KeyMod } from \"vs/base/common/keyCodes\";\nimport { workbench } from \"../workbench\";\n\n// Intercept adding workbench actions so we can skip actions that won't work or\n// modify actions that need different conditions, keybindings, etc.\nconst registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\nconst originalRegister = registry.registerWorkbenchAction.bind(registry);\nregistry.registerWorkbenchAction = (descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpr): IDisposable => {\n\tswitch (descriptor.id) {\n\t\tcase ToggleDevToolsAction.ID: // There appears to be no way to toggle this programmatically.\n\t\t\tlogger.debug(`Skipping unsupported workbench action ${descriptor.id}`);\n\n\t\t\treturn {\n\t\t\t\tdispose: (): void => undefined,\n\t\t\t};\n\n\t\tcase TerminalPasteAction.ID: // Modify the Windows keybinding and add our context key.\n\t\t\t// tslint:disable-next-line no-any override private\n\t\t\t(descriptor as any)._keybindings = {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_V,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_V },\n\t\t\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.KEY_V },\n\t\t\t\tmac: { primary: 0 },\n\t\t\t};\n\t\t\t// tslint:disable-next-line no-any override private\n\t\t\t(descriptor as any)._keybindingContext = ContextKeyExpr.and(KEYBINDING_CONTEXT_TERMINAL_FOCUS, workbench.clipboardContextKey);\n\t}\n\n\treturn originalRegister(descriptor, alias, category, when);\n};\n"]}]}