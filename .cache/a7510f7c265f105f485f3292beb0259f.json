{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Source;\n(function (Source) {\n    Source[Source[\"stdout\"] = 0] = \"stdout\";\n    Source[Source[\"stderr\"] = 1] = \"stderr\";\n})(Source = exports.Source || (exports.Source = {}));\nvar TerminateResponseCode;\n(function (TerminateResponseCode) {\n    TerminateResponseCode[TerminateResponseCode[\"Success\"] = 0] = \"Success\";\n    TerminateResponseCode[TerminateResponseCode[\"Unknown\"] = 1] = \"Unknown\";\n    TerminateResponseCode[TerminateResponseCode[\"AccessDenied\"] = 2] = \"AccessDenied\";\n    TerminateResponseCode[TerminateResponseCode[\"ProcessNotFound\"] = 3] = \"ProcessNotFound\";\n})(TerminateResponseCode = exports.TerminateResponseCode || (exports.TerminateResponseCode = {}));\n/**\n * Sanitizes a VS Code process environment by removing all Electron/VS Code-related values.\n */\nfunction sanitizeProcessEnvironment(env) {\n    var preserve = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        preserve[_i - 1] = arguments[_i];\n    }\n    var set = preserve.reduce(function (set, key) {\n        set[key] = true;\n        return set;\n    }, {});\n    var keysToRemove = [\n        /^ELECTRON_.+$/,\n        /^GOOGLE_API_KEY$/,\n        /^VSCODE_.+$/,\n        /^SNAP(|_.*)$/\n    ];\n    var envKeys = Object.keys(env);\n    envKeys\n        .filter(function (key) { return !set[key]; })\n        .forEach(function (envKey) {\n        for (var i = 0; i < keysToRemove.length; i++) {\n            if (envKey.search(keysToRemove[i]) !== -1) {\n                delete env[envKey];\n                break;\n            }\n        }\n    });\n}\nexports.sanitizeProcessEnvironment = sanitizeProcessEnvironment;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAiDhG,IAAkB,MAGjB;AAHD,WAAkB,MAAM;IACvB,uCAAM,CAAA;IACN,uCAAM,CAAA;AACP,CAAC,EAHiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAGvB;AA2BD,IAAkB,qBAKjB;AALD,WAAkB,qBAAqB;IACtC,uEAAW,CAAA;IACX,uEAAW,CAAA;IACX,iFAAgB,CAAA;IAChB,uFAAmB,CAAA;AACpB,CAAC,EALiB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAKtC;AAED;;GAEG;AACH,SAAgB,0BAA0B,CAAC,GAAwB;IAAE,kBAAqB;SAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;QAArB,iCAAqB;;IACzF,IAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;QACpC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QAChB,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAA6B,CAAC,CAAC;IAClC,IAAM,YAAY,GAAG;QACpB,eAAe;QACf,kBAAkB;QAClB,aAAa;QACb,cAAc;KACd,CAAC;IACF,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,OAAO;SACL,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAT,CAAS,CAAC;SACxB,OAAO,CAAC,UAAA,MAAM;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;gBAC1C,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC;gBACnB,MAAM;aACN;SACD;IACF,CAAC,CAAC,CAAC;AACL,CAAC;AAtBD,gEAsBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\n/**\n * Options to be passed to the external program or shell.\n */\nexport interface CommandOptions {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: { [key: string]: string; };\n}\n\nexport interface Executable {\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand: string;\n\n\t/**\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t */\n\tisShellCommand: boolean;\n\n\t/**\n\t * The arguments passed to the command.\n\t */\n\targs: string[];\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: CommandOptions;\n}\n\nexport interface ForkOptions extends CommandOptions {\n\texecArgv?: string[];\n}\n\nexport const enum Source {\n\tstdout,\n\tstderr\n}\n\n/**\n * The data send via a success callback\n */\nexport interface SuccessData {\n\terror?: Error;\n\tcmdCode?: number;\n\tterminated?: boolean;\n}\n\n/**\n * The data send via a error callback\n */\nexport interface ErrorData {\n\terror?: Error;\n\tterminated?: boolean;\n\tstdout?: string;\n\tstderr?: string;\n}\n\nexport interface TerminateResponse {\n\tsuccess: boolean;\n\tcode?: TerminateResponseCode;\n\terror?: any;\n}\n\nexport const enum TerminateResponseCode {\n\tSuccess = 0,\n\tUnknown = 1,\n\tAccessDenied = 2,\n\tProcessNotFound = 3,\n}\n\n/**\n * Sanitizes a VS Code process environment by removing all Electron/VS Code-related values.\n */\nexport function sanitizeProcessEnvironment(env: IProcessEnvironment, ...preserve: string[]): void {\n\tconst set = preserve.reduce((set, key) => {\n\t\tset[key] = true;\n\t\treturn set;\n\t}, {} as Record<string, boolean>);\n\tconst keysToRemove = [\n\t\t/^ELECTRON_.+$/,\n\t\t/^GOOGLE_API_KEY$/,\n\t\t/^VSCODE_.+$/,\n\t\t/^SNAP(|_.*)$/\n\t];\n\tconst envKeys = Object.keys(env);\n\tenvKeys\n\t\t.filter(key => !set[key])\n\t\t.forEach(envKey => {\n\t\t\tfor (let i = 0; i < keysToRemove.length; i++) {\n\t\t\t\tif (envKey.search(keysToRemove[i]) !== -1) {\n\t\t\t\t\tdelete env[envKey];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n}\n"]}]}