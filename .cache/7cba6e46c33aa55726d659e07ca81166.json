{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path = require(\"vs/base/common/path\");\nvar dom = require(\"vs/base/browser/dom\");\nvar keyboardEvent_1 = require(\"vs/base/browser/keyboardEvent\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar event_1 = require(\"vs/base/common/event\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle = require(\"vs/base/common/lifecycle\");\nvar platform = require(\"vs/base/common/platform\");\nvar commonEditorConfig_1 = require(\"vs/editor/common/config/commonEditorConfig\");\nvar nls = require(\"vs/nls\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar terminalWidgetManager_1 = require(\"vs/workbench/contrib/terminal/browser/terminalWidgetManager\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar terminalColorRegistry_1 = require(\"vs/workbench/contrib/terminal/common/terminalColorRegistry\");\nvar terminalCommands_1 = require(\"vs/workbench/contrib/terminal/common/terminalCommands\");\nvar terminalLinkHandler_1 = require(\"vs/workbench/contrib/terminal/browser/terminalLinkHandler\");\nvar terminalCommandTracker_1 = require(\"vs/workbench/contrib/terminal/browser/terminalCommandTracker\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar terminal_2 = require(\"vs/workbench/contrib/terminal/browser/terminal\");\n// How long in milliseconds should an average frame take to render for a notification to appear\n// which suggests the fallback DOM-based renderer\nvar SLOW_CANVAS_RENDER_THRESHOLD = 50;\nvar NUMBER_OF_FRAMES_TO_MEASURE = 20;\nexports.DEFAULT_COMMANDS_TO_SKIP_SHELL = [\n    terminalCommands_1.TERMINAL_COMMAND_ID.CLEAR_SELECTION,\n    terminalCommands_1.TERMINAL_COMMAND_ID.CLEAR,\n    terminalCommands_1.TERMINAL_COMMAND_ID.COPY_SELECTION,\n    terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_TO_LINE_START,\n    terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_WORD_LEFT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_WORD_RIGHT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FIND_WIDGET_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FIND_WIDGET_HIDE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FIND_NEXT_TERMINAL_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FIND_PREVIOUS_TERMINAL_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX_TERMINAL_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD_TERMINAL_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE_TERMINAL_FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_NEXT_PANE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_NEXT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_PREVIOUS_PANE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_PREVIOUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS,\n    terminalCommands_1.TERMINAL_COMMAND_ID.KILL,\n    terminalCommands_1.TERMINAL_COMMAND_ID.MOVE_TO_LINE_END,\n    terminalCommands_1.TERMINAL_COMMAND_ID.MOVE_TO_LINE_START,\n    terminalCommands_1.TERMINAL_COMMAND_ID.NEW_IN_ACTIVE_WORKSPACE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.NEW,\n    terminalCommands_1.TERMINAL_COMMAND_ID.PASTE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_DOWN,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_LEFT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_RIGHT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_UP,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_DOWN_LINE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_DOWN_PAGE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_BOTTOM,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_TOP,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_UP_LINE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_UP_PAGE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SEND_SEQUENCE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_ALL,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_NEXT_LINE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_LINE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT_IN_ACTIVE_WORKSPACE,\n    terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT,\n    terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE,\n    'editor.action.toggleTabFocusMode',\n    'workbench.action.quickOpen',\n    'workbench.action.quickOpenPreviousEditor',\n    'workbench.action.showCommands',\n    'workbench.action.tasks.build',\n    'workbench.action.tasks.restartTask',\n    'workbench.action.tasks.runTask',\n    'workbench.action.tasks.reRunTask',\n    'workbench.action.tasks.showLog',\n    'workbench.action.tasks.showTasks',\n    'workbench.action.tasks.terminate',\n    'workbench.action.tasks.test',\n    'workbench.action.toggleFullScreen',\n    'workbench.action.terminal.focusAtIndex1',\n    'workbench.action.terminal.focusAtIndex2',\n    'workbench.action.terminal.focusAtIndex3',\n    'workbench.action.terminal.focusAtIndex4',\n    'workbench.action.terminal.focusAtIndex5',\n    'workbench.action.terminal.focusAtIndex6',\n    'workbench.action.terminal.focusAtIndex7',\n    'workbench.action.terminal.focusAtIndex8',\n    'workbench.action.terminal.focusAtIndex9',\n    'workbench.action.focusSecondEditorGroup',\n    'workbench.action.focusThirdEditorGroup',\n    'workbench.action.focusFourthEditorGroup',\n    'workbench.action.focusFifthEditorGroup',\n    'workbench.action.focusSixthEditorGroup',\n    'workbench.action.focusSeventhEditorGroup',\n    'workbench.action.focusEighthEditorGroup',\n    'workbench.action.nextPanelView',\n    'workbench.action.previousPanelView',\n    'workbench.action.nextSideBarView',\n    'workbench.action.previousSideBarView',\n    'workbench.action.debug.start',\n    'workbench.action.debug.stop',\n    'workbench.action.debug.run',\n    'workbench.action.debug.restart',\n    'workbench.action.debug.continue',\n    'workbench.action.debug.pause',\n    'workbench.action.debug.stepInto',\n    'workbench.action.debug.stepOut',\n    'workbench.action.debug.stepOver',\n    'workbench.action.openNextRecentlyUsedEditorInGroup',\n    'workbench.action.openPreviousRecentlyUsedEditorInGroup',\n    'workbench.action.focusActiveEditorGroup',\n    'workbench.action.focusFirstEditorGroup',\n    'workbench.action.focusLastEditorGroup',\n    'workbench.action.firstEditorInGroup',\n    'workbench.action.lastEditorInGroup',\n    'workbench.action.navigateUp',\n    'workbench.action.navigateDown',\n    'workbench.action.navigateRight',\n    'workbench.action.navigateLeft',\n    'workbench.action.togglePanel',\n    'workbench.action.quickOpenView',\n    'workbench.action.toggleMaximizedPanel'\n];\nvar TerminalInstance = /** @class */ (function () {\n    function TerminalInstance(_terminalFocusContextKey, _configHelper, _container, _shellLaunchConfig, _terminalInstanceService, _contextKeyService, _keybindingService, _notificationService, _panelService, _instantiationService, _clipboardService, _themeService, _configurationService, _logService, _storageService, _accessibilityService) {\n        var _this = this;\n        this._terminalFocusContextKey = _terminalFocusContextKey;\n        this._configHelper = _configHelper;\n        this._container = _container;\n        this._shellLaunchConfig = _shellLaunchConfig;\n        this._terminalInstanceService = _terminalInstanceService;\n        this._contextKeyService = _contextKeyService;\n        this._keybindingService = _keybindingService;\n        this._notificationService = _notificationService;\n        this._panelService = _panelService;\n        this._instantiationService = _instantiationService;\n        this._clipboardService = _clipboardService;\n        this._themeService = _themeService;\n        this._configurationService = _configurationService;\n        this._logService = _logService;\n        this._storageService = _storageService;\n        this._accessibilityService = _accessibilityService;\n        this._onExit = new event_1.Emitter();\n        this._onDisposed = new event_1.Emitter();\n        this._onFocused = new event_1.Emitter();\n        this._onProcessIdReady = new event_1.Emitter();\n        this._onTitleChanged = new event_1.Emitter();\n        this._onData = new event_1.Emitter();\n        this._onLineData = new event_1.Emitter();\n        this._onRendererInput = new event_1.Emitter();\n        this._onRequestExtHostProcess = new event_1.Emitter();\n        this._onDimensionsChanged = new event_1.Emitter();\n        this._onFocus = new event_1.Emitter();\n        this._disposables = [];\n        this._skipTerminalCommands = [];\n        this._isExiting = false;\n        this._hadFocusOnExit = false;\n        this._isVisible = false;\n        this._isDisposed = false;\n        this._id = TerminalInstance._idCounter++;\n        this._titleReadyPromise = new Promise(function (c) {\n            _this._titleReadyComplete = c;\n        });\n        this._terminalHasTextContextKey = terminal_1.KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED.bindTo(this._contextKeyService);\n        this.disableLayout = false;\n        this._logService.trace(\"terminalInstance#ctor (id: \" + this.id + \")\", this._shellLaunchConfig);\n        this._initDimensions();\n        if (!this.shellLaunchConfig.isRendererOnly) {\n            this._createProcess();\n        }\n        else {\n            this.setTitle(this._shellLaunchConfig.name, false);\n        }\n        this._xtermReadyPromise = this._createXterm();\n        this._xtermReadyPromise.then(function () {\n            // Only attach xterm.js to the DOM if the terminal panel has been opened before.\n            if (_container) {\n                _this._attachToElement(_container);\n            }\n        });\n        this.addDisposable(this._configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('terminal.integrated')) {\n                _this.updateConfig();\n                // HACK: Trigger another async layout to ensure xterm's CharMeasure is ready to use,\n                // this hack can be removed when https://github.com/xtermjs/xterm.js/issues/702 is\n                // supported.\n                _this.setVisible(_this._isVisible);\n            }\n            if (e.affectsConfiguration('editor.accessibilitySupport')) {\n                _this.updateAccessibilitySupport();\n            }\n        }));\n    }\n    Object.defineProperty(TerminalInstance.prototype, \"id\", {\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"cols\", {\n        get: function () {\n            if (this._dimensionsOverride && this._dimensionsOverride.cols) {\n                return Math.min(Math.max(this._dimensionsOverride.cols, 2), this._cols);\n            }\n            return this._cols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"rows\", {\n        get: function () {\n            if (this._dimensionsOverride && this._dimensionsOverride.rows) {\n                return Math.min(Math.max(this._dimensionsOverride.rows, 2), this._rows);\n            }\n            return this._rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"processId\", {\n        // TODO: Ideally processId would be merged into processReady\n        get: function () { return this._processManager ? this._processManager.shellProcessId : undefined; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"processReady\", {\n        // TODO: How does this work with detached processes?\n        // TODO: Should this be an event as it can fire twice?\n        get: function () { return this._processManager ? this._processManager.ptyProcessReady : Promise.resolve(undefined); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"title\", {\n        get: function () { return this._title; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"hadFocusOnExit\", {\n        get: function () { return this._hadFocusOnExit; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"isTitleSetByProcess\", {\n        get: function () { return !!this._messageTitleDisposable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"shellLaunchConfig\", {\n        get: function () { return this._shellLaunchConfig; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"commandTracker\", {\n        get: function () { return this._commandTracker; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onExit\", {\n        get: function () { return this._onExit.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onDisposed\", {\n        get: function () { return this._onDisposed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onFocused\", {\n        get: function () { return this._onFocused.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onProcessIdReady\", {\n        get: function () { return this._onProcessIdReady.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onTitleChanged\", {\n        get: function () { return this._onTitleChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onData\", {\n        get: function () { return this._onData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onLineData\", {\n        get: function () { return this._onLineData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onRendererInput\", {\n        get: function () { return this._onRendererInput.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onRequestExtHostProcess\", {\n        get: function () { return this._onRequestExtHostProcess.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onDimensionsChanged\", {\n        get: function () { return this._onDimensionsChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalInstance.prototype, \"onFocus\", {\n        get: function () { return this._onFocus.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalInstance.prototype.addDisposable = function (disposable) {\n        this._disposables.push(disposable);\n    };\n    TerminalInstance.prototype._initDimensions = function () {\n        // The terminal panel needs to have been created\n        if (!this._container) {\n            return;\n        }\n        var computedStyle = window.getComputedStyle(this._container.parentElement);\n        var width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n        var height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n        this._evaluateColsAndRows(width, height);\n    };\n    /**\n     * Evaluates and sets the cols and rows of the terminal if possible.\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @return The terminal's width if it requires a layout.\n     */\n    TerminalInstance.prototype._evaluateColsAndRows = function (width, height) {\n        // Ignore if dimensions are undefined or 0\n        if (!width || !height) {\n            return null;\n        }\n        var dimension = this._getDimension(width, height);\n        if (!dimension) {\n            return null;\n        }\n        var font = this._configHelper.getFont(this._xterm);\n        if (!font.charWidth || !font.charHeight) {\n            return null;\n        }\n        // Because xterm.js converts from CSS pixels to actual pixels through\n        // the use of canvas, window.devicePixelRatio needs to be used here in\n        // order to be precise. font.charWidth/charHeight alone as insufficient\n        // when window.devicePixelRatio changes.\n        var scaledWidthAvailable = dimension.width * window.devicePixelRatio;\n        var scaledCharWidth;\n        if (this._configHelper.config.rendererType === 'dom') {\n            scaledCharWidth = font.charWidth * window.devicePixelRatio;\n        }\n        else {\n            scaledCharWidth = Math.floor(font.charWidth * window.devicePixelRatio) + font.letterSpacing;\n        }\n        this._cols = Math.max(Math.floor(scaledWidthAvailable / scaledCharWidth), 1);\n        var scaledHeightAvailable = dimension.height * window.devicePixelRatio;\n        var scaledCharHeight = Math.ceil(font.charHeight * window.devicePixelRatio);\n        var scaledLineHeight = Math.floor(scaledCharHeight * font.lineHeight);\n        this._rows = Math.max(Math.floor(scaledHeightAvailable / scaledLineHeight), 1);\n        return dimension.width;\n    };\n    TerminalInstance.prototype._getDimension = function (width, height) {\n        // The font needs to have been initialized\n        var font = this._configHelper.getFont(this._xterm);\n        if (!font || !font.charWidth || !font.charHeight) {\n            return null;\n        }\n        // The panel is minimized\n        if (!this._isVisible) {\n            return TerminalInstance._lastKnownDimensions;\n        }\n        else {\n            // Trigger scroll event manually so that the viewport's scroll area is synced. This\n            // needs to happen otherwise its scrollTop value is invalid when the panel is toggled as\n            // it gets removed and then added back to the DOM (resetting scrollTop to 0).\n            // Upstream issue: https://github.com/sourcelair/xterm.js/issues/291\n            if (this._xterm) {\n                this._xterm.emit('scroll', this._xterm._core.buffer.ydisp);\n            }\n        }\n        if (!this._wrapperElement) {\n            return null;\n        }\n        var wrapperElementStyle = getComputedStyle(this._wrapperElement);\n        var marginLeft = parseInt(wrapperElementStyle.marginLeft.split('px')[0], 10);\n        var marginRight = parseInt(wrapperElementStyle.marginRight.split('px')[0], 10);\n        var bottom = parseInt(wrapperElementStyle.bottom.split('px')[0], 10);\n        var innerWidth = width - marginLeft - marginRight;\n        var innerHeight = height - bottom;\n        TerminalInstance._lastKnownDimensions = new dom.Dimension(innerWidth, innerHeight);\n        return TerminalInstance._lastKnownDimensions;\n    };\n    /**\n     * Create xterm.js instance and attach data listeners.\n     */\n    TerminalInstance.prototype._createXterm = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var Terminal, font, config;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._terminalInstanceService.getXtermConstructor()];\n                    case 1:\n                        Terminal = _a.sent();\n                        font = this._configHelper.getFont(undefined, true);\n                        config = this._configHelper.config;\n                        this._xterm = new Terminal({\n                            scrollback: config.scrollback,\n                            theme: this._getXtermTheme(),\n                            drawBoldTextInBrightColors: config.drawBoldTextInBrightColors,\n                            fontFamily: font.fontFamily,\n                            fontWeight: config.fontWeight,\n                            fontWeightBold: config.fontWeightBold,\n                            fontSize: font.fontSize,\n                            letterSpacing: font.letterSpacing,\n                            lineHeight: font.lineHeight,\n                            bellStyle: config.enableBell ? 'sound' : 'none',\n                            screenReaderMode: this._isScreenReaderOptimized(),\n                            macOptionIsMeta: config.macOptionIsMeta,\n                            macOptionClickForcesSelection: config.macOptionClickForcesSelection,\n                            rightClickSelectsWord: config.rightClickBehavior === 'selectWord',\n                            // TODO: Guess whether to use canvas or dom better\n                            rendererType: config.rendererType === 'auto' ? 'canvas' : config.rendererType,\n                            // TODO: Remove this once the setting is removed upstream\n                            experimentalCharAtlas: 'dynamic',\n                            experimentalBufferLineImpl: 'TypedArray'\n                        });\n                        if (this._shellLaunchConfig.initialText) {\n                            this._xterm.writeln(this._shellLaunchConfig.initialText);\n                        }\n                        this._xterm.on('linefeed', function () { return _this._onLineFeed(); });\n                        this._xterm.on('key', function (key, ev) { return _this._onKey(key, ev); });\n                        if (this._processManager) {\n                            this._processManager.onProcessData(function (data) { return _this._onProcessData(data); });\n                            this._xterm.on('data', function (data) { return _this._processManager.write(data); });\n                            // TODO: How does the cwd work on detached processes?\n                            this.processReady.then(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var _a;\n                                return tslib_1.__generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _a = this._linkHandler;\n                                            return [4 /*yield*/, this._processManager.getInitialCwd()];\n                                        case 1:\n                                            _a.processCwd = _b.sent();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); });\n                            // Init winpty compat and link handler after process creation as they rely on the\n                            // underlying process OS\n                            this._processManager.onProcessReady(function () {\n                                if (!_this._processManager) {\n                                    return;\n                                }\n                                if (_this._processManager.os === platform.OperatingSystem.Windows) {\n                                    _this._xterm.winptyCompatInit();\n                                }\n                                _this._linkHandler = _this._instantiationService.createInstance(terminalLinkHandler_1.TerminalLinkHandler, _this._xterm, platform.platform, _this._processManager);\n                            });\n                        }\n                        this._xterm.on('focus', function () { return _this._onFocus.fire(_this); });\n                        // Register listener to trigger the onInput ext API if the terminal is a renderer only\n                        if (this._shellLaunchConfig.isRendererOnly) {\n                            this._xterm.on('data', function (data) { return _this._sendRendererInput(data); });\n                        }\n                        this._commandTracker = new terminalCommandTracker_1.TerminalCommandTracker(this._xterm);\n                        this._disposables.push(this._themeService.onThemeChange(function (theme) { return _this._updateTheme(theme); }));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TerminalInstance.prototype._isScreenReaderOptimized = function () {\n        var detected = this._accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n        var config = this._configurationService.getValue('editor.accessibilitySupport');\n        return config === 'on' || (config === 'auto' && detected);\n    };\n    TerminalInstance.prototype.reattachToElement = function (container) {\n        if (!this._wrapperElement) {\n            throw new Error('The terminal instance has not been attached to a container yet');\n        }\n        if (this._wrapperElement.parentNode) {\n            this._wrapperElement.parentNode.removeChild(this._wrapperElement);\n        }\n        this._container = container;\n        this._container.appendChild(this._wrapperElement);\n    };\n    TerminalInstance.prototype.attachToElement = function (container) {\n        // The container did not change, do nothing\n        if (this._container === container) {\n            return;\n        }\n        // Attach has not occured yet\n        if (!this._wrapperElement) {\n            this._attachToElement(container);\n            return;\n        }\n        // The container changed, reattach\n        this._container.removeChild(this._wrapperElement);\n        this._container = container;\n        this._container.appendChild(this._wrapperElement);\n    };\n    TerminalInstance.prototype._attachToElement = function (container) {\n        var _this = this;\n        this._xtermReadyPromise.then(function () {\n            if (_this._wrapperElement) {\n                throw new Error('The terminal instance has already been attached to a container');\n            }\n            _this._container = container;\n            _this._wrapperElement = document.createElement('div');\n            dom.addClass(_this._wrapperElement, 'terminal-wrapper');\n            _this._xtermElement = document.createElement('div');\n            // Attach the xterm object to the DOM, exposing it to the smoke tests\n            _this._wrapperElement.xterm = _this._xterm;\n            _this._xterm.open(_this._xtermElement);\n            _this._xterm.attachCustomKeyEventHandler(function (event) {\n                // Disable all input if the terminal is exiting\n                if (_this._isExiting) {\n                    return false;\n                }\n                // Skip processing by xterm.js of keyboard events that resolve to commands described\n                // within commandsToSkipShell\n                var standardKeyboardEvent = new keyboardEvent_1.StandardKeyboardEvent(event);\n                var resolveResult = _this._keybindingService.softDispatch(standardKeyboardEvent, standardKeyboardEvent.target);\n                if (resolveResult && _this._skipTerminalCommands.some(function (k) { return k === resolveResult.commandId; })) {\n                    event.preventDefault();\n                    return false;\n                }\n                // If tab focus mode is on, tab is not passed to the terminal\n                if (commonEditorConfig_1.TabFocus.getTabFocusMode() && event.keyCode === 9) {\n                    return false;\n                }\n                // Always have alt+F4 skip the terminal on Windows and allow it to be handled by the\n                // system\n                if (platform.isWindows && event.altKey && event.key === 'F4' && !event.ctrlKey) {\n                    return false;\n                }\n                return true;\n            });\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.element, 'mousedown', function () {\n                // We need to listen to the mouseup event on the document since the user may release\n                // the mouse button anywhere outside of _xterm.element.\n                var listener = dom.addDisposableListener(document, 'mouseup', function () {\n                    // Delay with a setTimeout to allow the mouseup to propagate through the DOM\n                    // before evaluating the new selection state.\n                    setTimeout(function () { return _this._refreshSelectionContextKey(); }, 0);\n                    listener.dispose();\n                });\n            }));\n            // xterm.js currently drops selection on keyup as we need to handle this case.\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.element, 'keyup', function () {\n                // Wait until keyup has propagated through the DOM before evaluating\n                // the new selection state.\n                setTimeout(function () { return _this._refreshSelectionContextKey(); }, 0);\n            }));\n            var xtermHelper = _this._xterm.element.querySelector('.xterm-helpers');\n            var focusTrap = document.createElement('div');\n            focusTrap.setAttribute('tabindex', '0');\n            dom.addClass(focusTrap, 'focus-trap');\n            _this._disposables.push(dom.addDisposableListener(focusTrap, 'focus', function () {\n                var currentElement = focusTrap;\n                while (!dom.hasClass(currentElement, 'part')) {\n                    currentElement = currentElement.parentElement;\n                }\n                var hidePanelElement = currentElement.querySelector('.hide-panel-action');\n                hidePanelElement.focus();\n            }));\n            xtermHelper.insertBefore(focusTrap, _this._xterm.textarea);\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.textarea, 'focus', function () {\n                _this._terminalFocusContextKey.set(true);\n                _this._onFocused.fire(_this);\n            }));\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.textarea, 'blur', function () {\n                _this._terminalFocusContextKey.reset();\n                _this._refreshSelectionContextKey();\n            }));\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.element, 'focus', function () {\n                _this._terminalFocusContextKey.set(true);\n            }));\n            _this._disposables.push(dom.addDisposableListener(_this._xterm.element, 'blur', function () {\n                _this._terminalFocusContextKey.reset();\n                _this._refreshSelectionContextKey();\n            }));\n            _this._wrapperElement.appendChild(_this._xtermElement);\n            _this._container.appendChild(_this._wrapperElement);\n            if (_this._processManager) {\n                _this._widgetManager = new terminalWidgetManager_1.TerminalWidgetManager(_this._wrapperElement);\n                _this._processManager.onProcessReady(function () { return _this._linkHandler.setWidgetManager(_this._widgetManager); });\n            }\n            var computedStyle = window.getComputedStyle(_this._container);\n            var width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n            var height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n            _this.layout(new dom.Dimension(width, height));\n            _this.setVisible(_this._isVisible);\n            _this.updateConfig();\n            // If IShellLaunchConfig.waitOnExit was true and the process finished before the terminal\n            // panel was initialized.\n            if (_this._xterm.getOption('disableStdin')) {\n                _this._attachPressAnyKeyToCloseListener();\n            }\n            var neverMeasureRenderTime = _this._storageService.getBoolean(terminal_1.NEVER_MEASURE_RENDER_TIME_STORAGE_KEY, storage_1.StorageScope.GLOBAL, false);\n            if (!neverMeasureRenderTime && _this._configHelper.config.rendererType === 'auto') {\n                _this._measureRenderTime();\n            }\n        });\n    };\n    TerminalInstance.prototype._measureRenderTime = function () {\n        var _this = this;\n        var frameTimes = [];\n        var textRenderLayer = this._xterm._core.renderer._renderLayers[0];\n        var originalOnGridChanged = textRenderLayer.onGridChanged;\n        var evaluateCanvasRenderer = function () {\n            // Discard first frame time as it's normal to take longer\n            frameTimes.shift();\n            var medianTime = frameTimes.sort()[Math.floor(frameTimes.length / 2)];\n            if (medianTime > SLOW_CANVAS_RENDER_THRESHOLD) {\n                var promptChoices = [\n                    {\n                        label: nls.localize('yes', \"Yes\"),\n                        run: function () {\n                            _this._configurationService.updateValue('terminal.integrated.rendererType', 'dom', configuration_1.ConfigurationTarget.USER).then(function () {\n                                _this._notificationService.info(nls.localize('terminal.rendererInAllNewTerminals', \"The terminal is now using the fallback renderer.\"));\n                            });\n                        }\n                    },\n                    {\n                        label: nls.localize('no', \"No\"),\n                        run: function () { }\n                    },\n                    {\n                        label: nls.localize('dontShowAgain', \"Don't Show Again\"),\n                        isSecondary: true,\n                        run: function () { return _this._storageService.store(terminal_1.NEVER_MEASURE_RENDER_TIME_STORAGE_KEY, true, storage_1.StorageScope.GLOBAL); }\n                    }\n                ];\n                _this._notificationService.prompt(notification_1.Severity.Warning, nls.localize('terminal.slowRendering', 'The standard renderer for the integrated terminal appears to be slow on your computer. Would you like to switch to the alternative DOM-based renderer which may improve performance? [Read more about terminal settings](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered).'), promptChoices);\n            }\n        };\n        textRenderLayer.onGridChanged = function (terminal, firstRow, lastRow) {\n            var startTime = performance.now();\n            originalOnGridChanged.call(textRenderLayer, terminal, firstRow, lastRow);\n            frameTimes.push(performance.now() - startTime);\n            if (frameTimes.length === NUMBER_OF_FRAMES_TO_MEASURE) {\n                evaluateCanvasRenderer();\n                // Restore original function\n                textRenderLayer.onGridChanged = originalOnGridChanged;\n            }\n        };\n    };\n    TerminalInstance.prototype.registerLinkMatcher = function (regex, handler, matchIndex, validationCallback) {\n        return this._linkHandler.registerCustomLinkHandler(regex, handler, matchIndex, validationCallback);\n    };\n    TerminalInstance.prototype.deregisterLinkMatcher = function (linkMatcherId) {\n        this._xterm.deregisterLinkMatcher(linkMatcherId);\n    };\n    TerminalInstance.prototype.hasSelection = function () {\n        return this._xterm && this._xterm.hasSelection();\n    };\n    TerminalInstance.prototype.copySelection = function () {\n        if (this.hasSelection()) {\n            this._clipboardService.writeText(this._xterm.getSelection());\n        }\n        else {\n            this._notificationService.warn(nls.localize('terminal.integrated.copySelection.noSelection', 'The terminal has no selection to copy'));\n        }\n    };\n    Object.defineProperty(TerminalInstance.prototype, \"selection\", {\n        get: function () {\n            return this.hasSelection() ? this._xterm.getSelection() : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalInstance.prototype.clearSelection = function () {\n        this._xterm.clearSelection();\n    };\n    TerminalInstance.prototype.selectAll = function () {\n        // Focus here to ensure the terminal context key is set\n        this._xterm.focus();\n        this._xterm.selectAll();\n    };\n    TerminalInstance.prototype.findNext = function (term, searchOptions) {\n        return this._xterm.findNext(term, searchOptions);\n    };\n    TerminalInstance.prototype.findPrevious = function (term, searchOptions) {\n        return this._xterm.findPrevious(term, searchOptions);\n    };\n    TerminalInstance.prototype.notifyFindWidgetFocusChanged = function (isFocused) {\n        var terminalFocused = !isFocused && (document.activeElement === this._xterm.textarea || document.activeElement === this._xterm.element);\n        this._terminalFocusContextKey.set(terminalFocused);\n    };\n    TerminalInstance.prototype.dispose = function (immediate) {\n        this._logService.trace(\"terminalInstance#dispose (id: \" + this.id + \")\");\n        lifecycle.dispose(this._windowsShellHelper);\n        this._windowsShellHelper = undefined;\n        this._linkHandler = lifecycle.dispose(this._linkHandler);\n        this._commandTracker = lifecycle.dispose(this._commandTracker);\n        this._widgetManager = lifecycle.dispose(this._widgetManager);\n        if (this._xterm && this._xterm.element) {\n            this._hadFocusOnExit = dom.hasClass(this._xterm.element, 'focus');\n        }\n        if (this._wrapperElement) {\n            if (this._wrapperElement.xterm) {\n                this._wrapperElement.xterm = null;\n            }\n            if (this._wrapperElement.parentElement) {\n                this._container.removeChild(this._wrapperElement);\n            }\n        }\n        if (this._xterm) {\n            var buffer = this._xterm._core.buffer;\n            this._sendLineData(buffer, buffer.ybase + buffer.y);\n            this._xterm.dispose();\n        }\n        if (this._pressAnyKeyToCloseListener) {\n            this._pressAnyKeyToCloseListener.dispose();\n            this._pressAnyKeyToCloseListener = undefined;\n        }\n        if (this._processManager) {\n            this._processManager.dispose(immediate);\n        }\n        else {\n            // In cases where there is no associated process (for example executing an extension callback task)\n            // consumers still expect on onExit event to be fired. An example of this is terminating the extension callback\n            // task.\n            this._onExit.fire(0);\n        }\n        if (!this._isDisposed) {\n            this._isDisposed = true;\n            this._onDisposed.fire(this);\n        }\n        this._disposables = lifecycle.dispose(this._disposables);\n    };\n    TerminalInstance.prototype.rendererExit = function (exitCode) {\n        // The use of this API is for cases where there is no backing process behind a terminal\n        // instance (eg. a custom execution task).\n        if (!this.shellLaunchConfig.isRendererOnly) {\n            throw new Error('rendererExit is only expected to be called on a renderer only terminal');\n        }\n        return this._onProcessExit(exitCode);\n    };\n    TerminalInstance.prototype.forceRedraw = function () {\n        this._xterm.refresh(0, this._xterm.rows - 1);\n    };\n    TerminalInstance.prototype.focus = function (force) {\n        if (!this._xterm) {\n            return;\n        }\n        var selection = window.getSelection();\n        if (!selection) {\n            return;\n        }\n        var text = selection.toString();\n        if (!text || force) {\n            this._xterm.focus();\n        }\n    };\n    TerminalInstance.prototype.focusWhenReady = function (force) {\n        var _this = this;\n        return this._xtermReadyPromise.then(function () { return _this.focus(force); });\n    };\n    TerminalInstance.prototype.paste = function () {\n        this.focus();\n        document.execCommand('paste');\n    };\n    TerminalInstance.prototype.write = function (text) {\n        var _this = this;\n        this._xtermReadyPromise.then(function () {\n            if (!_this._xterm) {\n                return;\n            }\n            _this._xterm.write(text);\n            if (_this._shellLaunchConfig.isRendererOnly) {\n                // Fire onData API in the extension host\n                _this._onData.fire(text);\n            }\n        });\n    };\n    TerminalInstance.prototype.sendText = function (text, addNewLine) {\n        var _this = this;\n        // Normalize line endings to 'enter' press.\n        text = text.replace(TerminalInstance.EOL_REGEX, '\\r');\n        if (addNewLine && text.substr(text.length - 1) !== '\\r') {\n            text += '\\r';\n        }\n        if (this._shellLaunchConfig.isRendererOnly) {\n            // If the terminal is a renderer only, fire the onInput ext API\n            this._sendRendererInput(text);\n        }\n        else {\n            // If the terminal has a process, send it to the process\n            if (this._processManager) {\n                this._processManager.ptyProcessReady.then(function () {\n                    _this._processManager.write(text);\n                });\n            }\n        }\n    };\n    TerminalInstance.prototype.setVisible = function (visible) {\n        var _this = this;\n        this._isVisible = visible;\n        if (this._wrapperElement) {\n            dom.toggleClass(this._wrapperElement, 'active', visible);\n        }\n        if (visible && this._xterm) {\n            // Trigger a manual scroll event which will sync the viewport and scroll bar. This is\n            // necessary if the number of rows in the terminal has decreased while it was in the\n            // background since scrollTop changes take no effect but the terminal's position does\n            // change since the number of visible rows decreases.\n            this._xterm.emit('scroll', this._xterm._core.buffer.ydisp);\n            if (this._container && this._container.parentElement) {\n                // Force a layout when the instance becomes invisible. This is particularly important\n                // for ensuring that terminals that are created in the background by an extension will\n                // correctly get correct character measurements in order to render to the screen (see\n                // #34554).\n                var computedStyle = window.getComputedStyle(this._container.parentElement);\n                var width_1 = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n                var height_1 = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n                this.layout(new dom.Dimension(width_1, height_1));\n                // HACK: Trigger another async layout to ensure xterm's CharMeasure is ready to use,\n                // this hack can be removed when https://github.com/xtermjs/xterm.js/issues/702 is\n                // supported.\n                setTimeout(function () { return _this.layout(new dom.Dimension(width_1, height_1)); }, 0);\n            }\n        }\n    };\n    TerminalInstance.prototype.scrollDownLine = function () {\n        this._xterm.scrollLines(1);\n    };\n    TerminalInstance.prototype.scrollDownPage = function () {\n        this._xterm.scrollPages(1);\n    };\n    TerminalInstance.prototype.scrollToBottom = function () {\n        this._xterm.scrollToBottom();\n    };\n    TerminalInstance.prototype.scrollUpLine = function () {\n        this._xterm.scrollLines(-1);\n    };\n    TerminalInstance.prototype.scrollUpPage = function () {\n        this._xterm.scrollPages(-1);\n    };\n    TerminalInstance.prototype.scrollToTop = function () {\n        this._xterm.scrollToTop();\n    };\n    TerminalInstance.prototype.clear = function () {\n        this._xterm.clear();\n    };\n    TerminalInstance.prototype._refreshSelectionContextKey = function () {\n        var activePanel = this._panelService.getActivePanel();\n        var isActive = !!activePanel && activePanel.getId() === terminal_1.TERMINAL_PANEL_ID;\n        this._terminalHasTextContextKey.set(isActive && this.hasSelection());\n    };\n    TerminalInstance.prototype._createProcess = function () {\n        var _this = this;\n        this._processManager = this._terminalInstanceService.createTerminalProcessManager(this._id, this._configHelper);\n        this._processManager.onProcessReady(function () { return _this._onProcessIdReady.fire(_this); });\n        this._processManager.onProcessExit(function (exitCode) { return _this._onProcessExit(exitCode); });\n        this._processManager.onProcessData(function (data) { return _this._onData.fire(data); });\n        if (this._shellLaunchConfig.name) {\n            this.setTitle(this._shellLaunchConfig.name, false);\n        }\n        else {\n            // Only listen for process title changes when a name is not provided\n            this.setTitle(this._shellLaunchConfig.executable, true);\n            this._messageTitleDisposable = this._processManager.onProcessTitle(function (title) { return _this.setTitle(title ? title : '', true); });\n        }\n        if (platform.isWindows) {\n            this._processManager.ptyProcessReady.then(function () {\n                if (_this._processManager.remoteAuthority) {\n                    return;\n                }\n                _this._xtermReadyPromise.then(function () {\n                    if (!_this._isDisposed) {\n                        _this._windowsShellHelper = _this._terminalInstanceService.createWindowsShellHelper(_this._processManager.shellProcessId, _this, _this._xterm);\n                    }\n                });\n            });\n        }\n        // Create the process asynchronously to allow the terminal's container\n        // to be created so dimensions are accurate\n        setTimeout(function () {\n            _this._processManager.createProcess(_this._shellLaunchConfig, _this._cols, _this._rows);\n        }, 0);\n    };\n    TerminalInstance.prototype._onProcessData = function (data) {\n        if (this._widgetManager) {\n            this._widgetManager.closeMessage();\n        }\n        if (this._xterm) {\n            this._xterm.write(data);\n        }\n    };\n    /**\n     * Called when either a process tied to a terminal has exited or when a terminal renderer\n     * simulates a process exiting (eg. custom execution task).\n     * @param exitCode The exit code of the process, this is undefined when the terminal was exited\n     * through user action.\n     */\n    TerminalInstance.prototype._onProcessExit = function (exitCode) {\n        this._logService.debug(\"Terminal process exit (id: \" + this.id + \") with code \" + exitCode);\n        // Prevent dispose functions being triggered multiple times\n        if (this._isExiting) {\n            return;\n        }\n        this._isExiting = true;\n        var exitCodeMessage;\n        if (exitCode) {\n            exitCodeMessage = nls.localize('terminal.integrated.exitedWithCode', 'The terminal process terminated with exit code: {0}', exitCode);\n        }\n        this._logService.debug(\"Terminal process exit (id: \" + this.id + \")\" + (this._processManager ? ' state ' + this._processManager.processState : ''));\n        // Only trigger wait on exit when the exit was *not* triggered by the\n        // user (via the `workbench.action.terminal.kill` command).\n        if (this._shellLaunchConfig.waitOnExit && (!this._processManager || this._processManager.processState !== terminal_1.ProcessState.KILLED_BY_USER)) {\n            if (exitCode) {\n                this._xterm.writeln(exitCodeMessage);\n            }\n            if (typeof this._shellLaunchConfig.waitOnExit === 'string') {\n                var message = this._shellLaunchConfig.waitOnExit;\n                // Bold the message and add an extra new line to make it stand out from the rest of the output\n                message = \"\\r\\n\\u001B[1m\" + message + \"\\u001B[0m\";\n                this._xterm.writeln(message);\n            }\n            // Disable all input if the terminal is exiting and listen for next keypress\n            this._xterm.setOption('disableStdin', true);\n            if (this._xterm.textarea) {\n                this._attachPressAnyKeyToCloseListener();\n            }\n        }\n        else {\n            this.dispose();\n            if (exitCode) {\n                if (this._processManager && this._processManager.processState === terminal_1.ProcessState.KILLED_DURING_LAUNCH) {\n                    var args = '';\n                    if (typeof this._shellLaunchConfig.args === 'string') {\n                        args = this._shellLaunchConfig.args;\n                    }\n                    else if (this._shellLaunchConfig.args && this._shellLaunchConfig.args.length) {\n                        args = ' ' + this._shellLaunchConfig.args.map(function (a) {\n                            if (typeof a === 'string' && a.indexOf(' ') !== -1) {\n                                return \"'\" + a + \"'\";\n                            }\n                            return a;\n                        }).join(' ');\n                    }\n                    if (this._shellLaunchConfig.executable) {\n                        this._notificationService.error(nls.localize('terminal.integrated.launchFailed', 'The terminal process command \\'{0}{1}\\' failed to launch (exit code: {2})', this._shellLaunchConfig.executable, args, exitCode));\n                    }\n                    else {\n                        this._notificationService.error(nls.localize('terminal.integrated.launchFailedExtHost', 'The terminal process failed to launch (exit code: {0})', exitCode));\n                    }\n                }\n                else {\n                    if (this._configHelper.config.showExitAlert) {\n                        this._notificationService.error(exitCodeMessage);\n                    }\n                    else {\n                        console.warn(exitCodeMessage);\n                    }\n                }\n            }\n        }\n        this._onExit.fire(exitCode || 0);\n    };\n    TerminalInstance.prototype._attachPressAnyKeyToCloseListener = function () {\n        var _this = this;\n        if (!this._pressAnyKeyToCloseListener) {\n            this._pressAnyKeyToCloseListener = dom.addDisposableListener(this._xterm.textarea, 'keypress', function (event) {\n                if (_this._pressAnyKeyToCloseListener) {\n                    _this._pressAnyKeyToCloseListener.dispose();\n                    _this._pressAnyKeyToCloseListener = undefined;\n                    _this.dispose();\n                    event.preventDefault();\n                }\n            });\n        }\n    };\n    TerminalInstance.prototype.reuseTerminal = function (shell) {\n        var _this = this;\n        // Unsubscribe any key listener we may have.\n        if (this._pressAnyKeyToCloseListener) {\n            this._pressAnyKeyToCloseListener.dispose();\n            this._pressAnyKeyToCloseListener = undefined;\n        }\n        // Kill and clear up the process, making the process manager ready for a new process\n        if (this._processManager) {\n            this._processManager.dispose();\n            this._processManager = undefined;\n        }\n        // Ensure new processes' output starts at start of new line\n        this._xterm.write('\\n\\x1b[G');\n        // Print initialText if specified\n        if (shell.initialText) {\n            this._xterm.writeln(shell.initialText);\n        }\n        var oldTitle = this._title;\n        // Clean up waitOnExit state\n        if (this._isExiting && this._shellLaunchConfig.waitOnExit) {\n            this._xterm.setOption('disableStdin', false);\n            this._isExiting = false;\n        }\n        // Set the new shell launch config\n        this._shellLaunchConfig = shell; // Must be done before calling _createProcess()\n        // Launch the process unless this is only a renderer.\n        // In the renderer only cases, we still need to set the title correctly.\n        if (!this._shellLaunchConfig.isRendererOnly) {\n            this._createProcess();\n        }\n        else if (this._shellLaunchConfig.name) {\n            this.setTitle(this._shellLaunchConfig.name, false);\n        }\n        if (oldTitle !== this._title) {\n            this.setTitle(this._title, true);\n        }\n        if (this._processManager) {\n            // The \"!\" operator is required here because _processManager is set to undefiend earlier\n            // and TS does not know that createProcess sets it.\n            this._processManager.onProcessData(function (data) { return _this._onProcessData(data); });\n        }\n    };\n    TerminalInstance.prototype._sendRendererInput = function (input) {\n        if (this._processManager) {\n            throw new Error('onRendererInput attempted to be used on a regular terminal');\n        }\n        // For terminal renderers onData fires on keystrokes and when sendText is called.\n        this._onRendererInput.fire(input);\n    };\n    TerminalInstance.prototype._onLineFeed = function () {\n        var buffer = this._xterm._core.buffer;\n        var newLine = buffer.lines.get(buffer.ybase + buffer.y);\n        if (!newLine.isWrapped) {\n            this._sendLineData(buffer, buffer.ybase + buffer.y - 1);\n        }\n    };\n    TerminalInstance.prototype._sendLineData = function (buffer, lineIndex) {\n        var lineData = buffer.translateBufferLineToString(lineIndex, true);\n        while (lineIndex >= 0 && buffer.lines.get(lineIndex--).isWrapped) {\n            lineData = buffer.translateBufferLineToString(lineIndex, false) + lineData;\n        }\n        this._onLineData.fire(lineData);\n    };\n    TerminalInstance.prototype._onKey = function (key, ev) {\n        var event = new keyboardEvent_1.StandardKeyboardEvent(ev);\n        if (event.equals(keyCodes_1.KeyCode.Enter)) {\n            this._updateProcessCwd();\n        }\n    };\n    TerminalInstance.prototype._updateProcessCwd = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var cwd;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getCwd()];\n                    case 1:\n                        cwd = _a.sent();\n                        if (cwd) {\n                            this._linkHandler.processCwd = cwd;\n                        }\n                        return [2 /*return*/, cwd];\n                }\n            });\n        });\n    };\n    TerminalInstance.prototype.updateConfig = function () {\n        var config = this._configHelper.config;\n        this._setCursorBlink(config.cursorBlinking);\n        this._setCursorStyle(config.cursorStyle);\n        this._setCommandsToSkipShell(config.commandsToSkipShell);\n        this._setEnableBell(config.enableBell);\n        this._safeSetOption('scrollback', config.scrollback);\n        this._safeSetOption('macOptionIsMeta', config.macOptionIsMeta);\n        this._safeSetOption('macOptionClickForcesSelection', config.macOptionClickForcesSelection);\n        this._safeSetOption('rightClickSelectsWord', config.rightClickBehavior === 'selectWord');\n        this._safeSetOption('rendererType', config.rendererType === 'auto' ? 'canvas' : config.rendererType);\n    };\n    TerminalInstance.prototype.updateAccessibilitySupport = function () {\n        this._xterm.setOption('screenReaderMode', this._isScreenReaderOptimized());\n    };\n    TerminalInstance.prototype._setCursorBlink = function (blink) {\n        if (this._xterm && this._xterm.getOption('cursorBlink') !== blink) {\n            this._xterm.setOption('cursorBlink', blink);\n            this._xterm.refresh(0, this._xterm.rows - 1);\n        }\n    };\n    TerminalInstance.prototype._setCursorStyle = function (style) {\n        if (this._xterm && this._xterm.getOption('cursorStyle') !== style) {\n            // 'line' is used instead of bar in VS Code to be consistent with editor.cursorStyle\n            var xtermOption = style === 'line' ? 'bar' : style;\n            this._xterm.setOption('cursorStyle', xtermOption);\n        }\n    };\n    TerminalInstance.prototype._setCommandsToSkipShell = function (commands) {\n        var excludeCommands = commands.filter(function (command) { return command[0] === '-'; }).map(function (command) { return command.slice(1); });\n        this._skipTerminalCommands = exports.DEFAULT_COMMANDS_TO_SKIP_SHELL.filter(function (defaultCommand) {\n            return excludeCommands.indexOf(defaultCommand) === -1;\n        }).concat(commands);\n    };\n    TerminalInstance.prototype._setEnableBell = function (isEnabled) {\n        if (this._xterm) {\n            if (this._xterm.getOption('bellStyle') === 'sound') {\n                if (!this._configHelper.config.enableBell) {\n                    this._xterm.setOption('bellStyle', 'none');\n                }\n            }\n            else {\n                if (this._configHelper.config.enableBell) {\n                    this._xterm.setOption('bellStyle', 'sound');\n                }\n            }\n        }\n    };\n    TerminalInstance.prototype._safeSetOption = function (key, value) {\n        if (!this._xterm) {\n            return;\n        }\n        if (this._xterm.getOption(key) !== value) {\n            this._xterm.setOption(key, value);\n        }\n    };\n    TerminalInstance.prototype.layout = function (dimension) {\n        if (this.disableLayout) {\n            return;\n        }\n        var terminalWidth = this._evaluateColsAndRows(dimension.width, dimension.height);\n        if (!terminalWidth) {\n            return;\n        }\n        if (this._xterm) {\n            this._xterm.element.style.width = terminalWidth + 'px';\n        }\n        this._resize();\n    };\n    TerminalInstance.prototype._resize = function () {\n        var _this = this;\n        var cols = this.cols;\n        var rows = this.rows;\n        if (this._xterm) {\n            // Only apply these settings when the terminal is visible so that\n            // the characters are measured correctly.\n            if (this._isVisible) {\n                var font = this._configHelper.getFont(this._xterm);\n                var config = this._configHelper.config;\n                this._safeSetOption('letterSpacing', font.letterSpacing);\n                this._safeSetOption('lineHeight', font.lineHeight);\n                this._safeSetOption('fontSize', font.fontSize);\n                this._safeSetOption('fontFamily', font.fontFamily);\n                this._safeSetOption('fontWeight', config.fontWeight);\n                this._safeSetOption('fontWeightBold', config.fontWeightBold);\n                this._safeSetOption('drawBoldTextInBrightColors', config.drawBoldTextInBrightColors);\n            }\n            if (cols !== this._xterm.cols || rows !== this._xterm.rows) {\n                this._onDimensionsChanged.fire();\n            }\n            this._xterm.resize(cols, rows);\n            if (this._isVisible) {\n                // HACK: Force the renderer to unpause by simulating an IntersectionObserver event.\n                // This is to fix an issue where dragging the window to the top of the screen to\n                // maximize on Windows/Linux would fire an event saying that the terminal was not\n                // visible.\n                if (this._xterm.getOption('rendererType') === 'canvas') {\n                    this._xterm._core.renderer.onIntersectionChange({ intersectionRatio: 1 });\n                    // HACK: Force a refresh of the screen to ensure links are refresh corrected.\n                    // This can probably be removed when the above hack is fixed in Chromium.\n                    this._xterm.refresh(0, this._xterm.rows - 1);\n                }\n            }\n        }\n        if (this._processManager) {\n            this._processManager.ptyProcessReady.then(function () { return _this._processManager.setDimensions(cols, rows); });\n        }\n    };\n    TerminalInstance.prototype.setTitle = function (title, eventFromProcess) {\n        if (!title) {\n            return;\n        }\n        if (eventFromProcess) {\n            title = path.basename(title);\n            if (platform.isWindows) {\n                // Remove the .exe extension\n                title = title.split('.exe')[0];\n            }\n        }\n        else {\n            // If the title has not been set by the API or the rename command, unregister the handler that\n            // automatically updates the terminal name\n            if (this._messageTitleDisposable) {\n                lifecycle.dispose(this._messageTitleDisposable);\n                lifecycle.dispose(this._windowsShellHelper);\n                this._messageTitleDisposable = undefined;\n                this._windowsShellHelper = undefined;\n            }\n        }\n        var didTitleChange = title !== this._title;\n        var oldTitle = this._title;\n        this._title = title;\n        if (didTitleChange) {\n            if (!oldTitle) {\n                this._titleReadyComplete(title);\n            }\n            this._onTitleChanged.fire(this);\n        }\n    };\n    TerminalInstance.prototype.waitForTitle = function () {\n        return this._titleReadyPromise;\n    };\n    TerminalInstance.prototype.setDimensions = function (dimensions) {\n        this._dimensionsOverride = dimensions;\n        this._resize();\n    };\n    TerminalInstance.prototype._getXtermTheme = function (theme) {\n        if (!theme) {\n            theme = this._themeService.getTheme();\n        }\n        var foregroundColor = theme.getColor(terminalColorRegistry_1.TERMINAL_FOREGROUND_COLOR);\n        var backgroundColor = theme.getColor(terminalColorRegistry_1.TERMINAL_BACKGROUND_COLOR) || theme.getColor(theme_1.PANEL_BACKGROUND);\n        var cursorColor = theme.getColor(terminalColorRegistry_1.TERMINAL_CURSOR_FOREGROUND_COLOR) || foregroundColor;\n        var cursorAccentColor = theme.getColor(terminalColorRegistry_1.TERMINAL_CURSOR_BACKGROUND_COLOR) || backgroundColor;\n        var selectionColor = theme.getColor(terminalColorRegistry_1.TERMINAL_SELECTION_BACKGROUND_COLOR);\n        return {\n            background: backgroundColor ? backgroundColor.toString() : null,\n            foreground: foregroundColor ? foregroundColor.toString() : null,\n            cursor: cursorColor ? cursorColor.toString() : null,\n            cursorAccent: cursorAccentColor ? cursorAccentColor.toString() : null,\n            selection: selectionColor ? selectionColor.toString() : null,\n            black: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[0]).toString(),\n            red: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[1]).toString(),\n            green: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[2]).toString(),\n            yellow: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[3]).toString(),\n            blue: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[4]).toString(),\n            magenta: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[5]).toString(),\n            cyan: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[6]).toString(),\n            white: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[7]).toString(),\n            brightBlack: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[8]).toString(),\n            brightRed: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[9]).toString(),\n            brightGreen: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[10]).toString(),\n            brightYellow: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[11]).toString(),\n            brightBlue: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[12]).toString(),\n            brightMagenta: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[13]).toString(),\n            brightCyan: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[14]).toString(),\n            brightWhite: theme.getColor(terminalColorRegistry_1.ansiColorIdentifiers[15]).toString()\n        };\n    };\n    TerminalInstance.prototype._updateTheme = function (theme) {\n        this._xterm.setOption('theme', this._getXtermTheme(theme));\n    };\n    TerminalInstance.prototype.toggleEscapeSequenceLogging = function () {\n        this._xterm._core.debug = !this._xterm._core.debug;\n        this._xterm.setOption('debug', this._xterm._core.debug);\n    };\n    TerminalInstance.prototype.getInitialCwd = function () {\n        if (!this._processManager) {\n            return Promise.resolve('');\n        }\n        return this._processManager.getInitialCwd();\n    };\n    TerminalInstance.prototype.getCwd = function () {\n        if (!this._processManager) {\n            return Promise.resolve('');\n        }\n        return this._processManager.getCwd();\n    };\n    TerminalInstance.EOL_REGEX = /\\r?\\n/g;\n    TerminalInstance._lastKnownDimensions = null;\n    TerminalInstance._idCounter = 1;\n    tslib_1.__decorate([\n        decorators_1.debounce(2000)\n    ], TerminalInstance.prototype, \"_updateProcessCwd\", null);\n    tslib_1.__decorate([\n        decorators_1.debounce(50)\n    ], TerminalInstance.prototype, \"_resize\", null);\n    TerminalInstance = tslib_1.__decorate([\n        tslib_1.__param(4, terminal_2.ITerminalInstanceService),\n        tslib_1.__param(5, contextkey_1.IContextKeyService),\n        tslib_1.__param(6, keybinding_1.IKeybindingService),\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, panelService_1.IPanelService),\n        tslib_1.__param(9, instantiation_1.IInstantiationService),\n        tslib_1.__param(10, clipboardService_1.IClipboardService),\n        tslib_1.__param(11, themeService_1.IThemeService),\n        tslib_1.__param(12, configuration_1.IConfigurationService),\n        tslib_1.__param(13, log_1.ILogService),\n        tslib_1.__param(14, storage_1.IStorageService),\n        tslib_1.__param(15, accessibility_1.IAccessibilityService)\n    ], TerminalInstance);\n    return TerminalInstance;\n}());\nexports.TerminalInstance = TerminalInstance;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    // Border\n    var border = theme.getColor(colorRegistry_1.activeContrastBorder);\n    if (border) {\n        collector.addRule(\"\\n\\t\\t\\t.hc-black .monaco-workbench .panel.integrated-terminal .xterm.focus::before,\\n\\t\\t\\t.hc-black .monaco-workbench .panel.integrated-terminal .xterm:focus::before { border-color: \" + border + \"; }\");\n    }\n    // Scrollbar\n    var scrollbarSliderBackgroundColor = theme.getColor(colorRegistry_1.scrollbarSliderBackground);\n    if (scrollbarSliderBackgroundColor) {\n        collector.addRule(\"\\n\\t\\t\\t.monaco-workbench .panel.integrated-terminal .find-focused .xterm .xterm-viewport,\\n\\t\\t\\t.monaco-workbench .panel.integrated-terminal .xterm.focus .xterm-viewport,\\n\\t\\t\\t.monaco-workbench .panel.integrated-terminal .xterm:focus .xterm-viewport,\\n\\t\\t\\t.monaco-workbench .panel.integrated-terminal .xterm:hover .xterm-viewport { background-color: \" + scrollbarSliderBackgroundColor + \" !important; }\");\n    }\n    var scrollbarSliderHoverBackgroundColor = theme.getColor(colorRegistry_1.scrollbarSliderHoverBackground);\n    if (scrollbarSliderHoverBackgroundColor) {\n        collector.addRule(\".monaco-workbench .panel.integrated-terminal .xterm .xterm-viewport::-webkit-scrollbar-thumb:hover { background-color: \" + scrollbarSliderHoverBackgroundColor + \"; }\");\n    }\n    var scrollbarSliderActiveBackgroundColor = theme.getColor(colorRegistry_1.scrollbarSliderActiveBackground);\n    if (scrollbarSliderActiveBackgroundColor) {\n        collector.addRule(\".monaco-workbench .panel.integrated-terminal .xterm .xterm-viewport::-webkit-scrollbar-thumb:active { background-color: \" + scrollbarSliderActiveBackgroundColor + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalInstance.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport * as dom from 'vs/base/browser/dom';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { debounce } from 'vs/base/common/decorators';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport * as lifecycle from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport { TabFocus } from 'vs/editor/common/config/commonEditorConfig';\nimport * as nls from 'vs/nls';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService, IPromptChoice, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { activeContrastBorder, scrollbarSliderActiveBackground, scrollbarSliderBackground, scrollbarSliderHoverBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { ICssStyleCollector, ITheme, IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { PANEL_BACKGROUND } from 'vs/workbench/common/theme';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/terminalWidgetManager';\nimport { IShellLaunchConfig, ITerminalDimensions, ITerminalInstance, ITerminalProcessManager, KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED, NEVER_MEASURE_RENDER_TIME_STORAGE_KEY, ProcessState, TERMINAL_PANEL_ID, IWindowsShellHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ansiColorIdentifiers, TERMINAL_BACKGROUND_COLOR, TERMINAL_CURSOR_BACKGROUND_COLOR, TERMINAL_CURSOR_FOREGROUND_COLOR, TERMINAL_FOREGROUND_COLOR, TERMINAL_SELECTION_BACKGROUND_COLOR } from 'vs/workbench/contrib/terminal/common/terminalColorRegistry';\nimport { TERMINAL_COMMAND_ID } from 'vs/workbench/contrib/terminal/common/terminalCommands';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { TerminalLinkHandler } from 'vs/workbench/contrib/terminal/browser/terminalLinkHandler';\nimport { TerminalCommandTracker } from 'vs/workbench/contrib/terminal/browser/terminalCommandTracker';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { ISearchOptions, Terminal as XTermTerminal } from 'vscode-xterm';\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\n\n// How long in milliseconds should an average frame take to render for a notification to appear\n// which suggests the fallback DOM-based renderer\nconst SLOW_CANVAS_RENDER_THRESHOLD = 50;\nconst NUMBER_OF_FRAMES_TO_MEASURE = 20;\n\n\nexport const DEFAULT_COMMANDS_TO_SKIP_SHELL: string[] = [\n\tTERMINAL_COMMAND_ID.CLEAR_SELECTION,\n\tTERMINAL_COMMAND_ID.CLEAR,\n\tTERMINAL_COMMAND_ID.COPY_SELECTION,\n\tTERMINAL_COMMAND_ID.DELETE_TO_LINE_START,\n\tTERMINAL_COMMAND_ID.DELETE_WORD_LEFT,\n\tTERMINAL_COMMAND_ID.DELETE_WORD_RIGHT,\n\tTERMINAL_COMMAND_ID.FIND_WIDGET_FOCUS,\n\tTERMINAL_COMMAND_ID.FIND_WIDGET_HIDE,\n\tTERMINAL_COMMAND_ID.FIND_NEXT_TERMINAL_FOCUS,\n\tTERMINAL_COMMAND_ID.FIND_PREVIOUS_TERMINAL_FOCUS,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX_TERMINAL_FOCUS,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD_TERMINAL_FOCUS,\n\tTERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE_TERMINAL_FOCUS,\n\tTERMINAL_COMMAND_ID.FOCUS_NEXT_PANE,\n\tTERMINAL_COMMAND_ID.FOCUS_NEXT,\n\tTERMINAL_COMMAND_ID.FOCUS_PREVIOUS_PANE,\n\tTERMINAL_COMMAND_ID.FOCUS_PREVIOUS,\n\tTERMINAL_COMMAND_ID.FOCUS,\n\tTERMINAL_COMMAND_ID.KILL,\n\tTERMINAL_COMMAND_ID.MOVE_TO_LINE_END,\n\tTERMINAL_COMMAND_ID.MOVE_TO_LINE_START,\n\tTERMINAL_COMMAND_ID.NEW_IN_ACTIVE_WORKSPACE,\n\tTERMINAL_COMMAND_ID.NEW,\n\tTERMINAL_COMMAND_ID.PASTE,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_DOWN,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_LEFT,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_RIGHT,\n\tTERMINAL_COMMAND_ID.RESIZE_PANE_UP,\n\tTERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n\tTERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n\tTERMINAL_COMMAND_ID.SCROLL_DOWN_LINE,\n\tTERMINAL_COMMAND_ID.SCROLL_DOWN_PAGE,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_BOTTOM,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND,\n\tTERMINAL_COMMAND_ID.SCROLL_TO_TOP,\n\tTERMINAL_COMMAND_ID.SCROLL_UP_LINE,\n\tTERMINAL_COMMAND_ID.SCROLL_UP_PAGE,\n\tTERMINAL_COMMAND_ID.SEND_SEQUENCE,\n\tTERMINAL_COMMAND_ID.SELECT_ALL,\n\tTERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND,\n\tTERMINAL_COMMAND_ID.SELECT_TO_NEXT_LINE,\n\tTERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND,\n\tTERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_LINE,\n\tTERMINAL_COMMAND_ID.SPLIT_IN_ACTIVE_WORKSPACE,\n\tTERMINAL_COMMAND_ID.SPLIT,\n\tTERMINAL_COMMAND_ID.TOGGLE,\n\t'editor.action.toggleTabFocusMode',\n\t'workbench.action.quickOpen',\n\t'workbench.action.quickOpenPreviousEditor',\n\t'workbench.action.showCommands',\n\t'workbench.action.tasks.build',\n\t'workbench.action.tasks.restartTask',\n\t'workbench.action.tasks.runTask',\n\t'workbench.action.tasks.reRunTask',\n\t'workbench.action.tasks.showLog',\n\t'workbench.action.tasks.showTasks',\n\t'workbench.action.tasks.terminate',\n\t'workbench.action.tasks.test',\n\t'workbench.action.toggleFullScreen',\n\t'workbench.action.terminal.focusAtIndex1',\n\t'workbench.action.terminal.focusAtIndex2',\n\t'workbench.action.terminal.focusAtIndex3',\n\t'workbench.action.terminal.focusAtIndex4',\n\t'workbench.action.terminal.focusAtIndex5',\n\t'workbench.action.terminal.focusAtIndex6',\n\t'workbench.action.terminal.focusAtIndex7',\n\t'workbench.action.terminal.focusAtIndex8',\n\t'workbench.action.terminal.focusAtIndex9',\n\t'workbench.action.focusSecondEditorGroup',\n\t'workbench.action.focusThirdEditorGroup',\n\t'workbench.action.focusFourthEditorGroup',\n\t'workbench.action.focusFifthEditorGroup',\n\t'workbench.action.focusSixthEditorGroup',\n\t'workbench.action.focusSeventhEditorGroup',\n\t'workbench.action.focusEighthEditorGroup',\n\t'workbench.action.nextPanelView',\n\t'workbench.action.previousPanelView',\n\t'workbench.action.nextSideBarView',\n\t'workbench.action.previousSideBarView',\n\t'workbench.action.debug.start',\n\t'workbench.action.debug.stop',\n\t'workbench.action.debug.run',\n\t'workbench.action.debug.restart',\n\t'workbench.action.debug.continue',\n\t'workbench.action.debug.pause',\n\t'workbench.action.debug.stepInto',\n\t'workbench.action.debug.stepOut',\n\t'workbench.action.debug.stepOver',\n\t'workbench.action.openNextRecentlyUsedEditorInGroup',\n\t'workbench.action.openPreviousRecentlyUsedEditorInGroup',\n\t'workbench.action.focusActiveEditorGroup',\n\t'workbench.action.focusFirstEditorGroup',\n\t'workbench.action.focusLastEditorGroup',\n\t'workbench.action.firstEditorInGroup',\n\t'workbench.action.lastEditorInGroup',\n\t'workbench.action.navigateUp',\n\t'workbench.action.navigateDown',\n\t'workbench.action.navigateRight',\n\t'workbench.action.navigateLeft',\n\t'workbench.action.togglePanel',\n\t'workbench.action.quickOpenView',\n\t'workbench.action.toggleMaximizedPanel'\n];\n\nexport class TerminalInstance implements ITerminalInstance {\n\tprivate static readonly EOL_REGEX = /\\r?\\n/g;\n\n\tprivate static _lastKnownDimensions: dom.Dimension | null = null;\n\tprivate static _idCounter = 1;\n\n\tprivate _processManager: ITerminalProcessManager | undefined;\n\tprivate _pressAnyKeyToCloseListener: lifecycle.IDisposable | undefined;\n\n\tprivate _id: number;\n\tprivate _isExiting: boolean;\n\tprivate _hadFocusOnExit: boolean;\n\tprivate _isVisible: boolean;\n\tprivate _isDisposed: boolean;\n\tprivate _skipTerminalCommands: string[];\n\tprivate _title: string;\n\tprivate _wrapperElement: HTMLDivElement;\n\tprivate _xterm: XTermTerminal;\n\tprivate _xtermElement: HTMLDivElement;\n\tprivate _terminalHasTextContextKey: IContextKey<boolean>;\n\tprivate _cols: number;\n\tprivate _rows: number;\n\tprivate _dimensionsOverride: ITerminalDimensions;\n\tprivate _windowsShellHelper: IWindowsShellHelper | undefined;\n\tprivate _xtermReadyPromise: Promise<void>;\n\tprivate _titleReadyPromise: Promise<string>;\n\tprivate _titleReadyComplete: (title: string) => any;\n\n\tprivate _disposables: lifecycle.IDisposable[];\n\tprivate _messageTitleDisposable: lifecycle.IDisposable | undefined;\n\n\tprivate _widgetManager: TerminalWidgetManager;\n\tprivate _linkHandler: TerminalLinkHandler;\n\tprivate _commandTracker: TerminalCommandTracker;\n\n\tpublic disableLayout: boolean;\n\tpublic get id(): number { return this._id; }\n\tpublic get cols(): number {\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.cols) {\n\t\t\treturn Math.min(Math.max(this._dimensionsOverride.cols, 2), this._cols);\n\t\t}\n\t\treturn this._cols;\n\t}\n\tpublic get rows(): number {\n\t\tif (this._dimensionsOverride && this._dimensionsOverride.rows) {\n\t\t\treturn Math.min(Math.max(this._dimensionsOverride.rows, 2), this._rows);\n\t\t}\n\t\treturn this._rows;\n\t}\n\t// TODO: Ideally processId would be merged into processReady\n\tpublic get processId(): number | undefined { return this._processManager ? this._processManager.shellProcessId : undefined; }\n\t// TODO: How does this work with detached processes?\n\t// TODO: Should this be an event as it can fire twice?\n\tpublic get processReady(): Promise<void> { return this._processManager ? this._processManager.ptyProcessReady : Promise.resolve(undefined); }\n\tpublic get title(): string { return this._title; }\n\tpublic get hadFocusOnExit(): boolean { return this._hadFocusOnExit; }\n\tpublic get isTitleSetByProcess(): boolean { return !!this._messageTitleDisposable; }\n\tpublic get shellLaunchConfig(): IShellLaunchConfig { return this._shellLaunchConfig; }\n\tpublic get commandTracker(): TerminalCommandTracker { return this._commandTracker; }\n\n\tprivate readonly _onExit = new Emitter<number>();\n\tpublic get onExit(): Event<number> { return this._onExit.event; }\n\tprivate readonly _onDisposed = new Emitter<ITerminalInstance>();\n\tpublic get onDisposed(): Event<ITerminalInstance> { return this._onDisposed.event; }\n\tprivate readonly _onFocused = new Emitter<ITerminalInstance>();\n\tpublic get onFocused(): Event<ITerminalInstance> { return this._onFocused.event; }\n\tprivate readonly _onProcessIdReady = new Emitter<ITerminalInstance>();\n\tpublic get onProcessIdReady(): Event<ITerminalInstance> { return this._onProcessIdReady.event; }\n\tprivate readonly _onTitleChanged = new Emitter<ITerminalInstance>();\n\tpublic get onTitleChanged(): Event<ITerminalInstance> { return this._onTitleChanged.event; }\n\tprivate readonly _onData = new Emitter<string>();\n\tpublic get onData(): Event<string> { return this._onData.event; }\n\tprivate readonly _onLineData = new Emitter<string>();\n\tpublic get onLineData(): Event<string> { return this._onLineData.event; }\n\tprivate readonly _onRendererInput = new Emitter<string>();\n\tpublic get onRendererInput(): Event<string> { return this._onRendererInput.event; }\n\tprivate readonly _onRequestExtHostProcess = new Emitter<ITerminalInstance>();\n\tpublic get onRequestExtHostProcess(): Event<ITerminalInstance> { return this._onRequestExtHostProcess.event; }\n\tprivate readonly _onDimensionsChanged = new Emitter<void>();\n\tpublic get onDimensionsChanged(): Event<void> { return this._onDimensionsChanged.event; }\n\tprivate readonly _onFocus = new Emitter<ITerminalInstance>();\n\tpublic get onFocus(): Event<ITerminalInstance> { return this._onFocus.event; }\n\n\tpublic constructor(\n\t\tprivate readonly _terminalFocusContextKey: IContextKey<boolean>,\n\t\tprivate readonly _configHelper: TerminalConfigHelper,\n\t\tprivate _container: HTMLElement,\n\t\tprivate _shellLaunchConfig: IShellLaunchConfig,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IPanelService private readonly _panelService: IPanelService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tthis._disposables = [];\n\t\tthis._skipTerminalCommands = [];\n\t\tthis._isExiting = false;\n\t\tthis._hadFocusOnExit = false;\n\t\tthis._isVisible = false;\n\t\tthis._isDisposed = false;\n\t\tthis._id = TerminalInstance._idCounter++;\n\n\t\tthis._titleReadyPromise = new Promise<string>(c => {\n\t\t\tthis._titleReadyComplete = c;\n\t\t});\n\n\t\tthis._terminalHasTextContextKey = KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED.bindTo(this._contextKeyService);\n\t\tthis.disableLayout = false;\n\n\t\tthis._logService.trace(`terminalInstance#ctor (id: ${this.id})`, this._shellLaunchConfig);\n\n\t\tthis._initDimensions();\n\t\tif (!this.shellLaunchConfig.isRendererOnly) {\n\t\t\tthis._createProcess();\n\t\t} else {\n\t\t\tthis.setTitle(this._shellLaunchConfig.name, false);\n\t\t}\n\n\t\tthis._xtermReadyPromise = this._createXterm();\n\t\tthis._xtermReadyPromise.then(() => {\n\t\t\t// Only attach xterm.js to the DOM if the terminal panel has been opened before.\n\t\t\tif (_container) {\n\t\t\t\tthis._attachToElement(_container);\n\t\t\t}\n\t\t});\n\n\t\tthis.addDisposable(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('terminal.integrated')) {\n\t\t\t\tthis.updateConfig();\n\t\t\t\t// HACK: Trigger another async layout to ensure xterm's CharMeasure is ready to use,\n\t\t\t\t// this hack can be removed when https://github.com/xtermjs/xterm.js/issues/702 is\n\t\t\t\t// supported.\n\t\t\t\tthis.setVisible(this._isVisible);\n\t\t\t}\n\t\t\tif (e.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\t\tthis.updateAccessibilitySupport();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic addDisposable(disposable: lifecycle.IDisposable): void {\n\t\tthis._disposables.push(disposable);\n\t}\n\n\tprivate _initDimensions(): void {\n\t\t// The terminal panel needs to have been created\n\t\tif (!this._container) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst computedStyle = window.getComputedStyle(this._container.parentElement!);\n\t\tconst width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n\t\tconst height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n\t\tthis._evaluateColsAndRows(width, height);\n\t}\n\n\t/**\n\t * Evaluates and sets the cols and rows of the terminal if possible.\n\t * @param width The width of the container.\n\t * @param height The height of the container.\n\t * @return The terminal's width if it requires a layout.\n\t */\n\tprivate _evaluateColsAndRows(width: number, height: number): number | null {\n\t\t// Ignore if dimensions are undefined or 0\n\t\tif (!width || !height) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst dimension = this._getDimension(width, height);\n\t\tif (!dimension) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst font = this._configHelper.getFont(this._xterm);\n\t\tif (!font.charWidth || !font.charHeight) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Because xterm.js converts from CSS pixels to actual pixels through\n\t\t// the use of canvas, window.devicePixelRatio needs to be used here in\n\t\t// order to be precise. font.charWidth/charHeight alone as insufficient\n\t\t// when window.devicePixelRatio changes.\n\t\tconst scaledWidthAvailable = dimension.width * window.devicePixelRatio;\n\n\t\tlet scaledCharWidth: number;\n\t\tif (this._configHelper.config.rendererType === 'dom') {\n\t\t\tscaledCharWidth = font.charWidth * window.devicePixelRatio;\n\t\t} else {\n\t\t\tscaledCharWidth = Math.floor(font.charWidth * window.devicePixelRatio) + font.letterSpacing;\n\t\t}\n\t\tthis._cols = Math.max(Math.floor(scaledWidthAvailable / scaledCharWidth), 1);\n\n\t\tconst scaledHeightAvailable = dimension.height * window.devicePixelRatio;\n\t\tconst scaledCharHeight = Math.ceil(font.charHeight * window.devicePixelRatio);\n\t\tconst scaledLineHeight = Math.floor(scaledCharHeight * font.lineHeight);\n\t\tthis._rows = Math.max(Math.floor(scaledHeightAvailable / scaledLineHeight), 1);\n\n\t\treturn dimension.width;\n\t}\n\n\tprivate _getDimension(width: number, height: number): dom.Dimension | null {\n\t\t// The font needs to have been initialized\n\t\tconst font = this._configHelper.getFont(this._xterm);\n\t\tif (!font || !font.charWidth || !font.charHeight) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// The panel is minimized\n\t\tif (!this._isVisible) {\n\t\t\treturn TerminalInstance._lastKnownDimensions;\n\t\t} else {\n\t\t\t// Trigger scroll event manually so that the viewport's scroll area is synced. This\n\t\t\t// needs to happen otherwise its scrollTop value is invalid when the panel is toggled as\n\t\t\t// it gets removed and then added back to the DOM (resetting scrollTop to 0).\n\t\t\t// Upstream issue: https://github.com/sourcelair/xterm.js/issues/291\n\t\t\tif (this._xterm) {\n\t\t\t\tthis._xterm.emit('scroll', this._xterm._core.buffer.ydisp);\n\t\t\t}\n\t\t}\n\n\t\tif (!this._wrapperElement) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst wrapperElementStyle = getComputedStyle(this._wrapperElement);\n\t\tconst marginLeft = parseInt(wrapperElementStyle.marginLeft!.split('px')[0], 10);\n\t\tconst marginRight = parseInt(wrapperElementStyle.marginRight!.split('px')[0], 10);\n\t\tconst bottom = parseInt(wrapperElementStyle.bottom!.split('px')[0], 10);\n\n\t\tconst innerWidth = width - marginLeft - marginRight;\n\t\tconst innerHeight = height - bottom;\n\n\t\tTerminalInstance._lastKnownDimensions = new dom.Dimension(innerWidth, innerHeight);\n\t\treturn TerminalInstance._lastKnownDimensions;\n\t}\n\n\t/**\n\t * Create xterm.js instance and attach data listeners.\n\t */\n\tprotected async _createXterm(): Promise<void> {\n\t\tconst Terminal = await this._terminalInstanceService.getXtermConstructor();\n\t\tconst font = this._configHelper.getFont(undefined, true);\n\t\tconst config = this._configHelper.config;\n\t\tthis._xterm = new Terminal({\n\t\t\tscrollback: config.scrollback,\n\t\t\ttheme: this._getXtermTheme(),\n\t\t\tdrawBoldTextInBrightColors: config.drawBoldTextInBrightColors,\n\t\t\tfontFamily: font.fontFamily,\n\t\t\tfontWeight: config.fontWeight,\n\t\t\tfontWeightBold: config.fontWeightBold,\n\t\t\tfontSize: font.fontSize,\n\t\t\tletterSpacing: font.letterSpacing,\n\t\t\tlineHeight: font.lineHeight,\n\t\t\tbellStyle: config.enableBell ? 'sound' : 'none',\n\t\t\tscreenReaderMode: this._isScreenReaderOptimized(),\n\t\t\tmacOptionIsMeta: config.macOptionIsMeta,\n\t\t\tmacOptionClickForcesSelection: config.macOptionClickForcesSelection,\n\t\t\trightClickSelectsWord: config.rightClickBehavior === 'selectWord',\n\t\t\t// TODO: Guess whether to use canvas or dom better\n\t\t\trendererType: config.rendererType === 'auto' ? 'canvas' : config.rendererType,\n\t\t\t// TODO: Remove this once the setting is removed upstream\n\t\t\texperimentalCharAtlas: 'dynamic',\n\t\t\texperimentalBufferLineImpl: 'TypedArray'\n\t\t});\n\t\tif (this._shellLaunchConfig.initialText) {\n\t\t\tthis._xterm.writeln(this._shellLaunchConfig.initialText);\n\t\t}\n\t\tthis._xterm.on('linefeed', () => this._onLineFeed());\n\t\tthis._xterm.on('key', (key, ev) => this._onKey(key, ev));\n\n\t\tif (this._processManager) {\n\t\t\tthis._processManager.onProcessData(data => this._onProcessData(data));\n\t\t\tthis._xterm.on('data', data => this._processManager!.write(data));\n\t\t\t// TODO: How does the cwd work on detached processes?\n\t\t\tthis.processReady.then(async () => {\n\t\t\t\tthis._linkHandler.processCwd = await this._processManager!.getInitialCwd();\n\t\t\t});\n\t\t\t// Init winpty compat and link handler after process creation as they rely on the\n\t\t\t// underlying process OS\n\t\t\tthis._processManager.onProcessReady(() => {\n\t\t\t\tif (!this._processManager) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (this._processManager.os === platform.OperatingSystem.Windows) {\n\t\t\t\t\tthis._xterm.winptyCompatInit();\n\t\t\t\t}\n\t\t\t\tthis._linkHandler = this._instantiationService.createInstance(TerminalLinkHandler, this._xterm, platform.platform, this._processManager);\n\t\t\t});\n\t\t}\n\t\tthis._xterm.on('focus', () => this._onFocus.fire(this));\n\n\t\t// Register listener to trigger the onInput ext API if the terminal is a renderer only\n\t\tif (this._shellLaunchConfig.isRendererOnly) {\n\t\t\tthis._xterm.on('data', (data) => this._sendRendererInput(data));\n\t\t}\n\n\t\tthis._commandTracker = new TerminalCommandTracker(this._xterm);\n\t\tthis._disposables.push(this._themeService.onThemeChange(theme => this._updateTheme(theme)));\n\t}\n\n\tprivate _isScreenReaderOptimized(): boolean {\n\t\tconst detected = this._accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\tconst config = this._configurationService.getValue('editor.accessibilitySupport');\n\t\treturn config === 'on' || (config === 'auto' && detected);\n\t}\n\n\tpublic reattachToElement(container: HTMLElement): void {\n\t\tif (!this._wrapperElement) {\n\t\t\tthrow new Error('The terminal instance has not been attached to a container yet');\n\t\t}\n\n\t\tif (this._wrapperElement.parentNode) {\n\t\t\tthis._wrapperElement.parentNode.removeChild(this._wrapperElement);\n\t\t}\n\t\tthis._container = container;\n\t\tthis._container.appendChild(this._wrapperElement);\n\t}\n\n\tpublic attachToElement(container: HTMLElement): void {\n\t\t// The container did not change, do nothing\n\t\tif (this._container === container) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Attach has not occured yet\n\t\tif (!this._wrapperElement) {\n\t\t\tthis._attachToElement(container);\n\t\t\treturn;\n\t\t}\n\n\t\t// The container changed, reattach\n\t\tthis._container.removeChild(this._wrapperElement);\n\t\tthis._container = container;\n\t\tthis._container.appendChild(this._wrapperElement);\n\t}\n\n\tpublic _attachToElement(container: HTMLElement): void {\n\t\tthis._xtermReadyPromise.then(() => {\n\t\t\tif (this._wrapperElement) {\n\t\t\t\tthrow new Error('The terminal instance has already been attached to a container');\n\t\t\t}\n\n\t\t\tthis._container = container;\n\t\t\tthis._wrapperElement = document.createElement('div');\n\t\t\tdom.addClass(this._wrapperElement, 'terminal-wrapper');\n\t\t\tthis._xtermElement = document.createElement('div');\n\n\t\t\t// Attach the xterm object to the DOM, exposing it to the smoke tests\n\t\t\t(<any>this._wrapperElement).xterm = this._xterm;\n\n\t\t\tthis._xterm.open(this._xtermElement);\n\t\t\tthis._xterm.attachCustomKeyEventHandler((event: KeyboardEvent): boolean => {\n\t\t\t\t// Disable all input if the terminal is exiting\n\t\t\t\tif (this._isExiting) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Skip processing by xterm.js of keyboard events that resolve to commands described\n\t\t\t\t// within commandsToSkipShell\n\t\t\t\tconst standardKeyboardEvent = new StandardKeyboardEvent(event);\n\t\t\t\tconst resolveResult = this._keybindingService.softDispatch(standardKeyboardEvent, standardKeyboardEvent.target);\n\t\t\t\tif (resolveResult && this._skipTerminalCommands.some(k => k === resolveResult.commandId)) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// If tab focus mode is on, tab is not passed to the terminal\n\t\t\t\tif (TabFocus.getTabFocusMode() && event.keyCode === 9) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Always have alt+F4 skip the terminal on Windows and allow it to be handled by the\n\t\t\t\t// system\n\t\t\t\tif (platform.isWindows && event.altKey && event.key === 'F4' && !event.ctrlKey) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.element, 'mousedown', () => {\n\t\t\t\t// We need to listen to the mouseup event on the document since the user may release\n\t\t\t\t// the mouse button anywhere outside of _xterm.element.\n\t\t\t\tconst listener = dom.addDisposableListener(document, 'mouseup', () => {\n\t\t\t\t\t// Delay with a setTimeout to allow the mouseup to propagate through the DOM\n\t\t\t\t\t// before evaluating the new selection state.\n\t\t\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t});\n\t\t\t}));\n\n\t\t\t// xterm.js currently drops selection on keyup as we need to handle this case.\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.element, 'keyup', () => {\n\t\t\t\t// Wait until keyup has propagated through the DOM before evaluating\n\t\t\t\t// the new selection state.\n\t\t\t\tsetTimeout(() => this._refreshSelectionContextKey(), 0);\n\t\t\t}));\n\n\t\t\tconst xtermHelper: HTMLElement = <HTMLElement>this._xterm.element.querySelector('.xterm-helpers');\n\t\t\tconst focusTrap: HTMLElement = document.createElement('div');\n\t\t\tfocusTrap.setAttribute('tabindex', '0');\n\t\t\tdom.addClass(focusTrap, 'focus-trap');\n\t\t\tthis._disposables.push(dom.addDisposableListener(focusTrap, 'focus', () => {\n\t\t\t\tlet currentElement = focusTrap;\n\t\t\t\twhile (!dom.hasClass(currentElement, 'part')) {\n\t\t\t\t\tcurrentElement = currentElement.parentElement!;\n\t\t\t\t}\n\t\t\t\tconst hidePanelElement = <HTMLElement>currentElement.querySelector('.hide-panel-action');\n\t\t\t\thidePanelElement.focus();\n\t\t\t}));\n\t\t\txtermHelper.insertBefore(focusTrap, this._xterm.textarea);\n\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.textarea, 'focus', () => {\n\t\t\t\tthis._terminalFocusContextKey.set(true);\n\t\t\t\tthis._onFocused.fire(this);\n\t\t\t}));\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.textarea, 'blur', () => {\n\t\t\t\tthis._terminalFocusContextKey.reset();\n\t\t\t\tthis._refreshSelectionContextKey();\n\t\t\t}));\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.element, 'focus', () => {\n\t\t\t\tthis._terminalFocusContextKey.set(true);\n\t\t\t}));\n\t\t\tthis._disposables.push(dom.addDisposableListener(this._xterm.element, 'blur', () => {\n\t\t\t\tthis._terminalFocusContextKey.reset();\n\t\t\t\tthis._refreshSelectionContextKey();\n\t\t\t}));\n\n\t\t\tthis._wrapperElement.appendChild(this._xtermElement);\n\t\t\tthis._container.appendChild(this._wrapperElement);\n\n\t\t\tif (this._processManager) {\n\t\t\t\tthis._widgetManager = new TerminalWidgetManager(this._wrapperElement);\n\t\t\t\tthis._processManager.onProcessReady(() => this._linkHandler.setWidgetManager(this._widgetManager));\n\t\t\t}\n\n\t\t\tconst computedStyle = window.getComputedStyle(this._container);\n\t\t\tconst width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n\t\t\tconst height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n\t\t\tthis.layout(new dom.Dimension(width, height));\n\t\t\tthis.setVisible(this._isVisible);\n\t\t\tthis.updateConfig();\n\n\t\t\t// If IShellLaunchConfig.waitOnExit was true and the process finished before the terminal\n\t\t\t// panel was initialized.\n\t\t\tif (this._xterm.getOption('disableStdin')) {\n\t\t\t\tthis._attachPressAnyKeyToCloseListener();\n\t\t\t}\n\n\t\t\tconst neverMeasureRenderTime = this._storageService.getBoolean(NEVER_MEASURE_RENDER_TIME_STORAGE_KEY, StorageScope.GLOBAL, false);\n\t\t\tif (!neverMeasureRenderTime && this._configHelper.config.rendererType === 'auto') {\n\t\t\t\tthis._measureRenderTime();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _measureRenderTime(): void {\n\t\tconst frameTimes: number[] = [];\n\t\tconst textRenderLayer = this._xterm._core.renderer._renderLayers[0];\n\t\tconst originalOnGridChanged = textRenderLayer.onGridChanged;\n\n\t\tconst evaluateCanvasRenderer = () => {\n\t\t\t// Discard first frame time as it's normal to take longer\n\t\t\tframeTimes.shift();\n\n\t\t\tconst medianTime = frameTimes.sort()[Math.floor(frameTimes.length / 2)];\n\t\t\tif (medianTime > SLOW_CANVAS_RENDER_THRESHOLD) {\n\t\t\t\tconst promptChoices: IPromptChoice[] = [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('yes', \"Yes\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._configurationService.updateValue('terminal.integrated.rendererType', 'dom', ConfigurationTarget.USER).then(() => {\n\t\t\t\t\t\t\t\tthis._notificationService.info(nls.localize('terminal.rendererInAllNewTerminals', \"The terminal is now using the fallback renderer.\"));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} as IPromptChoice,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('no', \"No\"),\n\t\t\t\t\t\trun: () => { }\n\t\t\t\t\t} as IPromptChoice,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('dontShowAgain', \"Don't Show Again\"),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => this._storageService.store(NEVER_MEASURE_RENDER_TIME_STORAGE_KEY, true, StorageScope.GLOBAL)\n\t\t\t\t\t} as IPromptChoice\n\t\t\t\t];\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Warning,\n\t\t\t\t\tnls.localize('terminal.slowRendering', 'The standard renderer for the integrated terminal appears to be slow on your computer. Would you like to switch to the alternative DOM-based renderer which may improve performance? [Read more about terminal settings](https://code.visualstudio.com/docs/editor/integrated-terminal#_changing-how-the-terminal-is-rendered).'),\n\t\t\t\t\tpromptChoices\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\ttextRenderLayer.onGridChanged = (terminal: XTermTerminal, firstRow: number, lastRow: number) => {\n\t\t\tconst startTime = performance.now();\n\t\t\toriginalOnGridChanged.call(textRenderLayer, terminal, firstRow, lastRow);\n\t\t\tframeTimes.push(performance.now() - startTime);\n\t\t\tif (frameTimes.length === NUMBER_OF_FRAMES_TO_MEASURE) {\n\t\t\t\tevaluateCanvasRenderer();\n\t\t\t\t// Restore original function\n\t\t\t\ttextRenderLayer.onGridChanged = originalOnGridChanged;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic registerLinkMatcher(regex: RegExp, handler: (url: string) => void, matchIndex?: number, validationCallback?: (uri: string, callback: (isValid: boolean) => void) => void): number {\n\t\treturn this._linkHandler.registerCustomLinkHandler(regex, handler, matchIndex, validationCallback);\n\t}\n\n\tpublic deregisterLinkMatcher(linkMatcherId: number): void {\n\t\tthis._xterm.deregisterLinkMatcher(linkMatcherId);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn this._xterm && this._xterm.hasSelection();\n\t}\n\n\tpublic copySelection(): void {\n\t\tif (this.hasSelection()) {\n\t\t\tthis._clipboardService.writeText(this._xterm.getSelection());\n\t\t} else {\n\t\t\tthis._notificationService.warn(nls.localize('terminal.integrated.copySelection.noSelection', 'The terminal has no selection to copy'));\n\t\t}\n\t}\n\n\tpublic get selection(): string | undefined {\n\t\treturn this.hasSelection() ? this._xterm.getSelection() : undefined;\n\t}\n\n\tpublic clearSelection(): void {\n\t\tthis._xterm.clearSelection();\n\t}\n\n\tpublic selectAll(): void {\n\t\t// Focus here to ensure the terminal context key is set\n\t\tthis._xterm.focus();\n\t\tthis._xterm.selectAll();\n\t}\n\n\tpublic findNext(term: string, searchOptions: ISearchOptions): boolean {\n\t\treturn this._xterm.findNext(term, searchOptions);\n\t}\n\n\tpublic findPrevious(term: string, searchOptions: ISearchOptions): boolean {\n\t\treturn this._xterm.findPrevious(term, searchOptions);\n\t}\n\n\tpublic notifyFindWidgetFocusChanged(isFocused: boolean): void {\n\t\tconst terminalFocused = !isFocused && (document.activeElement === this._xterm.textarea || document.activeElement === this._xterm.element);\n\t\tthis._terminalFocusContextKey.set(terminalFocused);\n\t}\n\n\tpublic dispose(immediate?: boolean): void {\n\t\tthis._logService.trace(`terminalInstance#dispose (id: ${this.id})`);\n\n\t\tlifecycle.dispose(this._windowsShellHelper);\n\t\tthis._windowsShellHelper = undefined;\n\t\tthis._linkHandler = lifecycle.dispose(this._linkHandler);\n\t\tthis._commandTracker = lifecycle.dispose(this._commandTracker);\n\t\tthis._widgetManager = lifecycle.dispose(this._widgetManager);\n\n\t\tif (this._xterm && this._xterm.element) {\n\t\t\tthis._hadFocusOnExit = dom.hasClass(this._xterm.element, 'focus');\n\t\t}\n\t\tif (this._wrapperElement) {\n\t\t\tif ((<any>this._wrapperElement).xterm) {\n\t\t\t\t(<any>this._wrapperElement).xterm = null;\n\t\t\t}\n\t\t\tif (this._wrapperElement.parentElement) {\n\t\t\t\tthis._container.removeChild(this._wrapperElement);\n\t\t\t}\n\t\t}\n\t\tif (this._xterm) {\n\t\t\tconst buffer = (<any>this._xterm._core.buffer);\n\t\t\tthis._sendLineData(buffer, buffer.ybase + buffer.y);\n\t\t\tthis._xterm.dispose();\n\t\t}\n\n\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t}\n\n\t\tif (this._processManager) {\n\t\t\tthis._processManager.dispose(immediate);\n\t\t} else {\n\t\t\t// In cases where there is no associated process (for example executing an extension callback task)\n\t\t\t// consumers still expect on onExit event to be fired. An example of this is terminating the extension callback\n\t\t\t// task.\n\t\t\tthis._onExit.fire(0);\n\t\t}\n\n\t\tif (!this._isDisposed) {\n\t\t\tthis._isDisposed = true;\n\t\t\tthis._onDisposed.fire(this);\n\t\t}\n\t\tthis._disposables = lifecycle.dispose(this._disposables);\n\t}\n\n\tpublic rendererExit(exitCode: number): void {\n\t\t// The use of this API is for cases where there is no backing process behind a terminal\n\t\t// instance (eg. a custom execution task).\n\t\tif (!this.shellLaunchConfig.isRendererOnly) {\n\t\t\tthrow new Error('rendererExit is only expected to be called on a renderer only terminal');\n\t\t}\n\n\t\treturn this._onProcessExit(exitCode);\n\t}\n\n\tpublic forceRedraw(): void {\n\t\tthis._xterm.refresh(0, this._xterm.rows - 1);\n\t}\n\n\tpublic focus(force?: boolean): void {\n\t\tif (!this._xterm) {\n\t\t\treturn;\n\t\t}\n\t\tconst selection = window.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst text = selection.toString();\n\t\tif (!text || force) {\n\t\t\tthis._xterm.focus();\n\t\t}\n\t}\n\n\tpublic focusWhenReady(force?: boolean): Promise<void> {\n\t\treturn this._xtermReadyPromise.then(() => this.focus(force));\n\t}\n\n\tpublic paste(): void {\n\t\tthis.focus();\n\t\tdocument.execCommand('paste');\n\t}\n\n\tpublic write(text: string): void {\n\t\tthis._xtermReadyPromise.then(() => {\n\t\t\tif (!this._xterm) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._xterm.write(text);\n\t\t\tif (this._shellLaunchConfig.isRendererOnly) {\n\t\t\t\t// Fire onData API in the extension host\n\t\t\t\tthis._onData.fire(text);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic sendText(text: string, addNewLine: boolean): void {\n\t\t// Normalize line endings to 'enter' press.\n\t\ttext = text.replace(TerminalInstance.EOL_REGEX, '\\r');\n\t\tif (addNewLine && text.substr(text.length - 1) !== '\\r') {\n\t\t\ttext += '\\r';\n\t\t}\n\n\t\tif (this._shellLaunchConfig.isRendererOnly) {\n\t\t\t// If the terminal is a renderer only, fire the onInput ext API\n\t\t\tthis._sendRendererInput(text);\n\t\t} else {\n\t\t\t// If the terminal has a process, send it to the process\n\t\t\tif (this._processManager) {\n\t\t\t\tthis._processManager.ptyProcessReady.then(() => {\n\t\t\t\t\tthis._processManager!.write(text);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setVisible(visible: boolean): void {\n\t\tthis._isVisible = visible;\n\t\tif (this._wrapperElement) {\n\t\t\tdom.toggleClass(this._wrapperElement, 'active', visible);\n\t\t}\n\t\tif (visible && this._xterm) {\n\t\t\t// Trigger a manual scroll event which will sync the viewport and scroll bar. This is\n\t\t\t// necessary if the number of rows in the terminal has decreased while it was in the\n\t\t\t// background since scrollTop changes take no effect but the terminal's position does\n\t\t\t// change since the number of visible rows decreases.\n\t\t\tthis._xterm.emit('scroll', this._xterm._core.buffer.ydisp);\n\t\t\tif (this._container && this._container.parentElement) {\n\t\t\t\t// Force a layout when the instance becomes invisible. This is particularly important\n\t\t\t\t// for ensuring that terminals that are created in the background by an extension will\n\t\t\t\t// correctly get correct character measurements in order to render to the screen (see\n\t\t\t\t// #34554).\n\t\t\t\tconst computedStyle = window.getComputedStyle(this._container.parentElement);\n\t\t\t\tconst width = parseInt(computedStyle.getPropertyValue('width').replace('px', ''), 10);\n\t\t\t\tconst height = parseInt(computedStyle.getPropertyValue('height').replace('px', ''), 10);\n\t\t\t\tthis.layout(new dom.Dimension(width, height));\n\t\t\t\t// HACK: Trigger another async layout to ensure xterm's CharMeasure is ready to use,\n\t\t\t\t// this hack can be removed when https://github.com/xtermjs/xterm.js/issues/702 is\n\t\t\t\t// supported.\n\t\t\t\tsetTimeout(() => this.layout(new dom.Dimension(width, height)), 0);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic scrollDownLine(): void {\n\t\tthis._xterm.scrollLines(1);\n\t}\n\n\tpublic scrollDownPage(): void {\n\t\tthis._xterm.scrollPages(1);\n\t}\n\n\tpublic scrollToBottom(): void {\n\t\tthis._xterm.scrollToBottom();\n\t}\n\n\tpublic scrollUpLine(): void {\n\t\tthis._xterm.scrollLines(-1);\n\t}\n\n\tpublic scrollUpPage(): void {\n\t\tthis._xterm.scrollPages(-1);\n\t}\n\n\tpublic scrollToTop(): void {\n\t\tthis._xterm.scrollToTop();\n\t}\n\n\tpublic clear(): void {\n\t\tthis._xterm.clear();\n\t}\n\n\tprivate _refreshSelectionContextKey() {\n\t\tconst activePanel = this._panelService.getActivePanel();\n\t\tconst isActive = !!activePanel && activePanel.getId() === TERMINAL_PANEL_ID;\n\n\t\tthis._terminalHasTextContextKey.set(isActive && this.hasSelection());\n\t}\n\n\tprotected _createProcess(): void {\n\t\tthis._processManager = this._terminalInstanceService.createTerminalProcessManager(this._id, this._configHelper);\n\t\tthis._processManager.onProcessReady(() => this._onProcessIdReady.fire(this));\n\t\tthis._processManager.onProcessExit(exitCode => this._onProcessExit(exitCode));\n\t\tthis._processManager.onProcessData(data => this._onData.fire(data));\n\n\t\tif (this._shellLaunchConfig.name) {\n\t\t\tthis.setTitle(this._shellLaunchConfig.name, false);\n\t\t} else {\n\t\t\t// Only listen for process title changes when a name is not provided\n\t\t\tthis.setTitle(this._shellLaunchConfig.executable, true);\n\t\t\tthis._messageTitleDisposable = this._processManager.onProcessTitle(title => this.setTitle(title ? title : '', true));\n\t\t}\n\n\t\tif (platform.isWindows) {\n\t\t\tthis._processManager.ptyProcessReady.then(() => {\n\t\t\t\tif (this._processManager!.remoteAuthority) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._xtermReadyPromise.then(() => {\n\t\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\t\tthis._windowsShellHelper = this._terminalInstanceService.createWindowsShellHelper(this._processManager!.shellProcessId, this, this._xterm);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Create the process asynchronously to allow the terminal's container\n\t\t// to be created so dimensions are accurate\n\t\tsetTimeout(() => {\n\t\t\tthis._processManager!.createProcess(this._shellLaunchConfig, this._cols, this._rows);\n\t\t}, 0);\n\t}\n\n\tprivate _onProcessData(data: string): void {\n\t\tif (this._widgetManager) {\n\t\t\tthis._widgetManager.closeMessage();\n\t\t}\n\t\tif (this._xterm) {\n\t\t\tthis._xterm.write(data);\n\t\t}\n\t}\n\n\t/**\n\t * Called when either a process tied to a terminal has exited or when a terminal renderer\n\t * simulates a process exiting (eg. custom execution task).\n\t * @param exitCode The exit code of the process, this is undefined when the terminal was exited\n\t * through user action.\n\t */\n\tprivate _onProcessExit(exitCode?: number): void {\n\t\tthis._logService.debug(`Terminal process exit (id: ${this.id}) with code ${exitCode}`);\n\n\t\t// Prevent dispose functions being triggered multiple times\n\t\tif (this._isExiting) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isExiting = true;\n\t\tlet exitCodeMessage: string;\n\n\t\tif (exitCode) {\n\t\t\texitCodeMessage = nls.localize('terminal.integrated.exitedWithCode', 'The terminal process terminated with exit code: {0}', exitCode);\n\t\t}\n\n\t\tthis._logService.debug(`Terminal process exit (id: ${this.id})${this._processManager ? ' state ' + this._processManager.processState : ''}`);\n\n\t\t// Only trigger wait on exit when the exit was *not* triggered by the\n\t\t// user (via the `workbench.action.terminal.kill` command).\n\t\tif (this._shellLaunchConfig.waitOnExit && (!this._processManager || this._processManager.processState !== ProcessState.KILLED_BY_USER)) {\n\t\t\tif (exitCode) {\n\t\t\t\tthis._xterm.writeln(exitCodeMessage!);\n\t\t\t}\n\t\t\tif (typeof this._shellLaunchConfig.waitOnExit === 'string') {\n\t\t\t\tlet message = this._shellLaunchConfig.waitOnExit;\n\t\t\t\t// Bold the message and add an extra new line to make it stand out from the rest of the output\n\t\t\t\tmessage = `\\r\\n\\x1b[1m${message}\\x1b[0m`;\n\t\t\t\tthis._xterm.writeln(message);\n\t\t\t}\n\t\t\t// Disable all input if the terminal is exiting and listen for next keypress\n\t\t\tthis._xterm.setOption('disableStdin', true);\n\t\t\tif (this._xterm.textarea) {\n\t\t\t\tthis._attachPressAnyKeyToCloseListener();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.dispose();\n\t\t\tif (exitCode) {\n\t\t\t\tif (this._processManager && this._processManager.processState === ProcessState.KILLED_DURING_LAUNCH) {\n\t\t\t\t\tlet args = '';\n\t\t\t\t\tif (typeof this._shellLaunchConfig.args === 'string') {\n\t\t\t\t\t\targs = this._shellLaunchConfig.args;\n\t\t\t\t\t} else if (this._shellLaunchConfig.args && this._shellLaunchConfig.args.length) {\n\t\t\t\t\t\targs = ' ' + this._shellLaunchConfig.args.map(a => {\n\t\t\t\t\t\t\tif (typeof a === 'string' && a.indexOf(' ') !== -1) {\n\t\t\t\t\t\t\t\treturn `'${a}'`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn a;\n\t\t\t\t\t\t}).join(' ');\n\t\t\t\t\t}\n\t\t\t\t\tif (this._shellLaunchConfig.executable) {\n\t\t\t\t\t\tthis._notificationService.error(nls.localize('terminal.integrated.launchFailed', 'The terminal process command \\'{0}{1}\\' failed to launch (exit code: {2})', this._shellLaunchConfig.executable, args, exitCode));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._notificationService.error(nls.localize('terminal.integrated.launchFailedExtHost', 'The terminal process failed to launch (exit code: {0})', exitCode));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this._configHelper.config.showExitAlert) {\n\t\t\t\t\t\tthis._notificationService.error(exitCodeMessage!);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(exitCodeMessage!);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._onExit.fire(exitCode || 0);\n\t}\n\n\tprivate _attachPressAnyKeyToCloseListener() {\n\t\tif (!this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener = dom.addDisposableListener(this._xterm.textarea, 'keypress', (event: KeyboardEvent) => {\n\t\t\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t\t\t\tthis.dispose();\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic reuseTerminal(shell: IShellLaunchConfig): void {\n\t\t// Unsubscribe any key listener we may have.\n\t\tif (this._pressAnyKeyToCloseListener) {\n\t\t\tthis._pressAnyKeyToCloseListener.dispose();\n\t\t\tthis._pressAnyKeyToCloseListener = undefined;\n\t\t}\n\n\t\t// Kill and clear up the process, making the process manager ready for a new process\n\t\tif (this._processManager) {\n\t\t\tthis._processManager.dispose();\n\t\t\tthis._processManager = undefined;\n\t\t}\n\n\t\t// Ensure new processes' output starts at start of new line\n\t\tthis._xterm.write('\\n\\x1b[G');\n\n\t\t// Print initialText if specified\n\t\tif (shell.initialText) {\n\t\t\tthis._xterm.writeln(shell.initialText);\n\t\t}\n\n\t\tconst oldTitle = this._title;\n\t\t// Clean up waitOnExit state\n\t\tif (this._isExiting && this._shellLaunchConfig.waitOnExit) {\n\t\t\tthis._xterm.setOption('disableStdin', false);\n\t\t\tthis._isExiting = false;\n\t\t}\n\n\t\t// Set the new shell launch config\n\t\tthis._shellLaunchConfig = shell; // Must be done before calling _createProcess()\n\n\t\t// Launch the process unless this is only a renderer.\n\t\t// In the renderer only cases, we still need to set the title correctly.\n\t\tif (!this._shellLaunchConfig.isRendererOnly) {\n\t\t\tthis._createProcess();\n\t\t} else if (this._shellLaunchConfig.name) {\n\t\t\tthis.setTitle(this._shellLaunchConfig.name, false);\n\t\t}\n\n\t\tif (oldTitle !== this._title) {\n\t\t\tthis.setTitle(this._title, true);\n\t\t}\n\n\t\tif (this._processManager) {\n\t\t\t// The \"!\" operator is required here because _processManager is set to undefiend earlier\n\t\t\t// and TS does not know that createProcess sets it.\n\t\t\tthis._processManager!.onProcessData(data => this._onProcessData(data));\n\t\t}\n\t}\n\n\tprivate _sendRendererInput(input: string): void {\n\t\tif (this._processManager) {\n\t\t\tthrow new Error('onRendererInput attempted to be used on a regular terminal');\n\t\t}\n\n\t\t// For terminal renderers onData fires on keystrokes and when sendText is called.\n\t\tthis._onRendererInput.fire(input);\n\t}\n\n\tprivate _onLineFeed(): void {\n\t\tconst buffer = (<any>this._xterm._core.buffer);\n\t\tconst newLine = buffer.lines.get(buffer.ybase + buffer.y);\n\t\tif (!newLine.isWrapped) {\n\t\t\tthis._sendLineData(buffer, buffer.ybase + buffer.y - 1);\n\t\t}\n\t}\n\n\tprivate _sendLineData(buffer: any, lineIndex: number): void {\n\t\tlet lineData = buffer.translateBufferLineToString(lineIndex, true);\n\t\twhile (lineIndex >= 0 && buffer.lines.get(lineIndex--).isWrapped) {\n\t\t\tlineData = buffer.translateBufferLineToString(lineIndex, false) + lineData;\n\t\t}\n\t\tthis._onLineData.fire(lineData);\n\t}\n\n\tprivate _onKey(key: string, ev: KeyboardEvent): void {\n\t\tconst event = new StandardKeyboardEvent(ev);\n\n\t\tif (event.equals(KeyCode.Enter)) {\n\t\t\tthis._updateProcessCwd();\n\t\t}\n\t}\n\n\t@debounce(2000)\n\tprivate async _updateProcessCwd(): Promise<string> {\n\t\t// reset cwd if it has changed, so file based url paths can be resolved\n\t\tconst cwd = await this.getCwd();\n\t\tif (cwd) {\n\t\t\tthis._linkHandler.processCwd = cwd;\n\t\t}\n\t\treturn cwd;\n\t}\n\n\tpublic updateConfig(): void {\n\t\tconst config = this._configHelper.config;\n\t\tthis._setCursorBlink(config.cursorBlinking);\n\t\tthis._setCursorStyle(config.cursorStyle);\n\t\tthis._setCommandsToSkipShell(config.commandsToSkipShell);\n\t\tthis._setEnableBell(config.enableBell);\n\t\tthis._safeSetOption('scrollback', config.scrollback);\n\t\tthis._safeSetOption('macOptionIsMeta', config.macOptionIsMeta);\n\t\tthis._safeSetOption('macOptionClickForcesSelection', config.macOptionClickForcesSelection);\n\t\tthis._safeSetOption('rightClickSelectsWord', config.rightClickBehavior === 'selectWord');\n\t\tthis._safeSetOption('rendererType', config.rendererType === 'auto' ? 'canvas' : config.rendererType);\n\t}\n\n\tpublic updateAccessibilitySupport(): void {\n\t\tthis._xterm.setOption('screenReaderMode', this._isScreenReaderOptimized());\n\t}\n\n\tprivate _setCursorBlink(blink: boolean): void {\n\t\tif (this._xterm && this._xterm.getOption('cursorBlink') !== blink) {\n\t\t\tthis._xterm.setOption('cursorBlink', blink);\n\t\t\tthis._xterm.refresh(0, this._xterm.rows - 1);\n\t\t}\n\t}\n\n\tprivate _setCursorStyle(style: string): void {\n\t\tif (this._xterm && this._xterm.getOption('cursorStyle') !== style) {\n\t\t\t// 'line' is used instead of bar in VS Code to be consistent with editor.cursorStyle\n\t\t\tconst xtermOption = style === 'line' ? 'bar' : style;\n\t\t\tthis._xterm.setOption('cursorStyle', xtermOption);\n\t\t}\n\t}\n\n\tprivate _setCommandsToSkipShell(commands: string[]): void {\n\t\tconst excludeCommands = commands.filter(command => command[0] === '-').map(command => command.slice(1));\n\t\tthis._skipTerminalCommands = DEFAULT_COMMANDS_TO_SKIP_SHELL.filter(defaultCommand => {\n\t\t\treturn excludeCommands.indexOf(defaultCommand) === -1;\n\t\t}).concat(commands);\n\t}\n\n\tprivate _setEnableBell(isEnabled: boolean): void {\n\t\tif (this._xterm) {\n\t\t\tif (this._xterm.getOption('bellStyle') === 'sound') {\n\t\t\t\tif (!this._configHelper.config.enableBell) {\n\t\t\t\t\tthis._xterm.setOption('bellStyle', 'none');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._configHelper.config.enableBell) {\n\t\t\t\t\tthis._xterm.setOption('bellStyle', 'sound');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _safeSetOption(key: string, value: any): void {\n\t\tif (!this._xterm) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._xterm.getOption(key) !== value) {\n\t\t\tthis._xterm.setOption(key, value);\n\t\t}\n\t}\n\n\tpublic layout(dimension: dom.Dimension): void {\n\t\tif (this.disableLayout) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst terminalWidth = this._evaluateColsAndRows(dimension.width, dimension.height);\n\t\tif (!terminalWidth) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._xterm) {\n\t\t\tthis._xterm.element.style.width = terminalWidth + 'px';\n\t\t}\n\n\t\tthis._resize();\n\t}\n\n\t@debounce(50)\n\tprivate _resize(): void {\n\t\tlet cols = this.cols;\n\t\tlet rows = this.rows;\n\n\t\tif (this._xterm) {\n\t\t\t// Only apply these settings when the terminal is visible so that\n\t\t\t// the characters are measured correctly.\n\t\t\tif (this._isVisible) {\n\t\t\t\tconst font = this._configHelper.getFont(this._xterm);\n\t\t\t\tconst config = this._configHelper.config;\n\t\t\t\tthis._safeSetOption('letterSpacing', font.letterSpacing);\n\t\t\t\tthis._safeSetOption('lineHeight', font.lineHeight);\n\t\t\t\tthis._safeSetOption('fontSize', font.fontSize);\n\t\t\t\tthis._safeSetOption('fontFamily', font.fontFamily);\n\t\t\t\tthis._safeSetOption('fontWeight', config.fontWeight);\n\t\t\t\tthis._safeSetOption('fontWeightBold', config.fontWeightBold);\n\t\t\t\tthis._safeSetOption('drawBoldTextInBrightColors', config.drawBoldTextInBrightColors);\n\t\t\t}\n\n\t\t\tif (cols !== this._xterm.cols || rows !== this._xterm.rows) {\n\t\t\t\tthis._onDimensionsChanged.fire();\n\t\t\t}\n\n\t\t\tthis._xterm.resize(cols, rows);\n\t\t\tif (this._isVisible) {\n\t\t\t\t// HACK: Force the renderer to unpause by simulating an IntersectionObserver event.\n\t\t\t\t// This is to fix an issue where dragging the window to the top of the screen to\n\t\t\t\t// maximize on Windows/Linux would fire an event saying that the terminal was not\n\t\t\t\t// visible.\n\t\t\t\tif (this._xterm.getOption('rendererType') === 'canvas') {\n\t\t\t\t\tthis._xterm._core.renderer.onIntersectionChange({ intersectionRatio: 1 });\n\t\t\t\t\t// HACK: Force a refresh of the screen to ensure links are refresh corrected.\n\t\t\t\t\t// This can probably be removed when the above hack is fixed in Chromium.\n\t\t\t\t\tthis._xterm.refresh(0, this._xterm.rows - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._processManager) {\n\t\t\tthis._processManager.ptyProcessReady.then(() => this._processManager!.setDimensions(cols, rows));\n\t\t}\n\t}\n\n\tpublic setTitle(title: string | undefined, eventFromProcess: boolean): void {\n\t\tif (!title) {\n\t\t\treturn;\n\t\t}\n\t\tif (eventFromProcess) {\n\t\t\ttitle = path.basename(title);\n\t\t\tif (platform.isWindows) {\n\t\t\t\t// Remove the .exe extension\n\t\t\t\ttitle = title.split('.exe')[0];\n\t\t\t}\n\t\t} else {\n\t\t\t// If the title has not been set by the API or the rename command, unregister the handler that\n\t\t\t// automatically updates the terminal name\n\t\t\tif (this._messageTitleDisposable) {\n\t\t\t\tlifecycle.dispose(this._messageTitleDisposable);\n\t\t\t\tlifecycle.dispose(this._windowsShellHelper);\n\t\t\t\tthis._messageTitleDisposable = undefined;\n\t\t\t\tthis._windowsShellHelper = undefined;\n\t\t\t}\n\t\t}\n\t\tconst didTitleChange = title !== this._title;\n\t\tconst oldTitle = this._title;\n\t\tthis._title = title;\n\t\tif (didTitleChange) {\n\t\t\tif (!oldTitle) {\n\t\t\t\tthis._titleReadyComplete(title);\n\t\t\t}\n\t\t\tthis._onTitleChanged.fire(this);\n\t\t}\n\t}\n\n\tpublic waitForTitle(): Promise<string> {\n\t\treturn this._titleReadyPromise;\n\t}\n\n\tpublic setDimensions(dimensions: ITerminalDimensions): void {\n\t\tthis._dimensionsOverride = dimensions;\n\t\tthis._resize();\n\t}\n\n\tprivate _getXtermTheme(theme?: ITheme): any {\n\t\tif (!theme) {\n\t\t\ttheme = this._themeService.getTheme();\n\t\t}\n\n\t\tconst foregroundColor = theme.getColor(TERMINAL_FOREGROUND_COLOR);\n\t\tconst backgroundColor = theme.getColor(TERMINAL_BACKGROUND_COLOR) || theme.getColor(PANEL_BACKGROUND);\n\t\tconst cursorColor = theme.getColor(TERMINAL_CURSOR_FOREGROUND_COLOR) || foregroundColor;\n\t\tconst cursorAccentColor = theme.getColor(TERMINAL_CURSOR_BACKGROUND_COLOR) || backgroundColor;\n\t\tconst selectionColor = theme.getColor(TERMINAL_SELECTION_BACKGROUND_COLOR);\n\n\t\treturn {\n\t\t\tbackground: backgroundColor ? backgroundColor.toString() : null,\n\t\t\tforeground: foregroundColor ? foregroundColor.toString() : null,\n\t\t\tcursor: cursorColor ? cursorColor.toString() : null,\n\t\t\tcursorAccent: cursorAccentColor ? cursorAccentColor.toString() : null,\n\t\t\tselection: selectionColor ? selectionColor.toString() : null,\n\t\t\tblack: theme.getColor(ansiColorIdentifiers[0])!.toString(),\n\t\t\tred: theme.getColor(ansiColorIdentifiers[1])!.toString(),\n\t\t\tgreen: theme.getColor(ansiColorIdentifiers[2])!.toString(),\n\t\t\tyellow: theme.getColor(ansiColorIdentifiers[3])!.toString(),\n\t\t\tblue: theme.getColor(ansiColorIdentifiers[4])!.toString(),\n\t\t\tmagenta: theme.getColor(ansiColorIdentifiers[5])!.toString(),\n\t\t\tcyan: theme.getColor(ansiColorIdentifiers[6])!.toString(),\n\t\t\twhite: theme.getColor(ansiColorIdentifiers[7])!.toString(),\n\t\t\tbrightBlack: theme.getColor(ansiColorIdentifiers[8])!.toString(),\n\t\t\tbrightRed: theme.getColor(ansiColorIdentifiers[9])!.toString(),\n\t\t\tbrightGreen: theme.getColor(ansiColorIdentifiers[10])!.toString(),\n\t\t\tbrightYellow: theme.getColor(ansiColorIdentifiers[11])!.toString(),\n\t\t\tbrightBlue: theme.getColor(ansiColorIdentifiers[12])!.toString(),\n\t\t\tbrightMagenta: theme.getColor(ansiColorIdentifiers[13])!.toString(),\n\t\t\tbrightCyan: theme.getColor(ansiColorIdentifiers[14])!.toString(),\n\t\t\tbrightWhite: theme.getColor(ansiColorIdentifiers[15])!.toString()\n\t\t};\n\t}\n\n\tprivate _updateTheme(theme?: ITheme): void {\n\t\tthis._xterm.setOption('theme', this._getXtermTheme(theme));\n\t}\n\n\tpublic toggleEscapeSequenceLogging(): void {\n\t\tthis._xterm._core.debug = !this._xterm._core.debug;\n\t\tthis._xterm.setOption('debug', this._xterm._core.debug);\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\tif (!this._processManager) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\treturn this._processManager.getInitialCwd();\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\tif (!this._processManager) {\n\t\t\treturn Promise.resolve('');\n\t\t}\n\t\treturn this._processManager.getCwd();\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\t// Border\n\tconst border = theme.getColor(activeContrastBorder);\n\tif (border) {\n\t\tcollector.addRule(`\n\t\t\t.hc-black .monaco-workbench .panel.integrated-terminal .xterm.focus::before,\n\t\t\t.hc-black .monaco-workbench .panel.integrated-terminal .xterm:focus::before { border-color: ${border}; }`\n\t\t);\n\t}\n\n\t// Scrollbar\n\tconst scrollbarSliderBackgroundColor = theme.getColor(scrollbarSliderBackground);\n\tif (scrollbarSliderBackgroundColor) {\n\t\tcollector.addRule(`\n\t\t\t.monaco-workbench .panel.integrated-terminal .find-focused .xterm .xterm-viewport,\n\t\t\t.monaco-workbench .panel.integrated-terminal .xterm.focus .xterm-viewport,\n\t\t\t.monaco-workbench .panel.integrated-terminal .xterm:focus .xterm-viewport,\n\t\t\t.monaco-workbench .panel.integrated-terminal .xterm:hover .xterm-viewport { background-color: ${scrollbarSliderBackgroundColor} !important; }`\n\t\t);\n\t}\n\n\tconst scrollbarSliderHoverBackgroundColor = theme.getColor(scrollbarSliderHoverBackground);\n\tif (scrollbarSliderHoverBackgroundColor) {\n\t\tcollector.addRule(`.monaco-workbench .panel.integrated-terminal .xterm .xterm-viewport::-webkit-scrollbar-thumb:hover { background-color: ${scrollbarSliderHoverBackgroundColor}; }`);\n\t}\n\n\tconst scrollbarSliderActiveBackgroundColor = theme.getColor(scrollbarSliderActiveBackground);\n\tif (scrollbarSliderActiveBackgroundColor) {\n\t\tcollector.addRule(`.monaco-workbench .panel.integrated-terminal .xterm .xterm-viewport::-webkit-scrollbar-thumb:active { background-color: ${scrollbarSliderActiveBackgroundColor}; }`);\n\t}\n});\n"]}]}