{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/configurationExtensionPoint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/configurationExtensionPoint.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar objects = require(\"vs/base/common/objects\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar configuration_1 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar types_1 = require(\"vs/base/common/types\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nvar configurationEntrySchema = {\n    type: 'object',\n    defaultSnippets: [{ body: { title: '', properties: {} } }],\n    properties: {\n        title: {\n            description: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),\n            type: 'string'\n        },\n        properties: {\n            description: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),\n            type: 'object',\n            additionalProperties: {\n                anyOf: [\n                    { $ref: 'http://json-schema.org/draft-07/schema#' },\n                    {\n                        type: 'object',\n                        properties: {\n                            isExecutable: {\n                                type: 'boolean',\n                                deprecationMessage: 'This property is deprecated. Instead use `scope` property and set it to `application` value.'\n                            },\n                            scope: {\n                                type: 'string',\n                                enum: ['application', 'window', 'resource'],\n                                default: 'window',\n                                enumDescriptions: [\n                                    nls.localize('scope.application.description', \"Application specific configuration, which can be configured only in User settings.\"),\n                                    nls.localize('scope.window.description', \"Window specific configuration, which can be configured in the User or Workspace settings.\"),\n                                    nls.localize('scope.resource.description', \"Resource specific configuration, which can be configured in the User, Workspace or Folder settings.\")\n                                ],\n                                description: nls.localize('scope.description', \"Scope in which the configuration is applicable. Available scopes are `window` and `resource`.\")\n                            },\n                            enumDescriptions: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: nls.localize('scope.enumDescriptions', 'Descriptions for enum values')\n                            },\n                            markdownEnumDescription: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                },\n                                description: nls.localize('scope.markdownEnumDescription', 'Descriptions for enum values in the markdown format.')\n                            },\n                            markdownDescription: {\n                                type: 'string',\n                                description: nls.localize('scope.markdownDescription', 'The description in the markdown format.')\n                            },\n                            deprecationMessage: {\n                                type: 'string',\n                                description: nls.localize('scope.deprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation.')\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n};\n// BEGIN VSCode extension point `configurationDefaults`\nvar defaultConfigurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configurationDefaults',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.defaultConfiguration', 'Contributes default editor configuration settings by language.'),\n        type: 'object',\n        patternProperties: {\n            '\\\\[.*\\\\]$': {\n                type: 'object',\n                default: {},\n                $ref: configurationRegistry_1.editorConfigurationSchemaId,\n            }\n        }\n    }\n});\ndefaultConfigurationExtPoint.setHandler(function (extensions, _a) {\n    var added = _a.added, removed = _a.removed;\n    if (removed.length) {\n        var removedDefaultConfigurations = removed.map(function (extension) {\n            var id = extension.description.identifier;\n            var name = extension.description.name;\n            var defaults = objects.deepClone(extension.value);\n            return {\n                id: id, name: name, defaults: defaults\n            };\n        });\n        configurationRegistry.deregisterDefaultConfigurations(removedDefaultConfigurations);\n    }\n    if (added.length) {\n        var addedDefaultConfigurations = added.map(function (extension) {\n            var id = extension.description.identifier;\n            var name = extension.description.name;\n            var defaults = objects.deepClone(extension.value);\n            return {\n                id: id, name: name, defaults: defaults\n            };\n        });\n        configurationRegistry.registerDefaultConfigurations(addedDefaultConfigurations);\n    }\n});\n// END VSCode extension point `configurationDefaults`\n// BEGIN VSCode extension point `configuration`\nvar configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'configuration',\n    deps: [defaultConfigurationExtPoint],\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),\n        oneOf: [\n            configurationEntrySchema,\n            {\n                type: 'array',\n                items: configurationEntrySchema\n            }\n        ]\n    }\n});\nvar extensionConfigurations = new Map();\nconfigurationExtPoint.setHandler(function (extensions, _a) {\n    var added = _a.added, removed = _a.removed;\n    if (removed.length) {\n        var removedConfigurations = [];\n        for (var _i = 0, removed_1 = removed; _i < removed_1.length; _i++) {\n            var extension = removed_1[_i];\n            var key = extensions_1.ExtensionIdentifier.toKey(extension.description.identifier);\n            removedConfigurations.push.apply(removedConfigurations, (extensionConfigurations.get(key) || []));\n            extensionConfigurations.delete(key);\n        }\n        configurationRegistry.deregisterConfigurations(removedConfigurations);\n    }\n    function handleConfiguration(node, extension) {\n        var configurations = [];\n        var configuration = objects.deepClone(node);\n        if (configuration.title && (typeof configuration.title !== 'string')) {\n            extension.collector.error(nls.localize('invalid.title', \"'configuration.title' must be a string\"));\n        }\n        validateProperties(configuration, extension);\n        configuration.id = node.id || extension.description.identifier.value;\n        configuration.contributedByExtension = true;\n        configuration.title = configuration.title || extension.description.displayName || extension.description.identifier.value;\n        configurations.push(configuration);\n        return configurations;\n    }\n    if (added.length) {\n        var addedConfigurations = [];\n        var _loop_1 = function (extension) {\n            var configurations = [];\n            var value = extension.value;\n            if (!Array.isArray(value)) {\n                configurations.push.apply(configurations, handleConfiguration(value, extension));\n            }\n            else {\n                value.forEach(function (v) { return configurations.push.apply(configurations, handleConfiguration(v, extension)); });\n            }\n            extensionConfigurations.set(extensions_1.ExtensionIdentifier.toKey(extension.description.identifier), configurations);\n            addedConfigurations.push.apply(addedConfigurations, configurations);\n        };\n        for (var _b = 0, added_1 = added; _b < added_1.length; _b++) {\n            var extension = added_1[_b];\n            _loop_1(extension);\n        }\n        configurationRegistry.registerConfigurations(addedConfigurations, false);\n    }\n});\n// END VSCode extension point `configuration`\nfunction validateProperties(configuration, extension) {\n    var properties = configuration.properties;\n    if (properties) {\n        if (typeof properties !== 'object') {\n            extension.collector.error(nls.localize('invalid.properties', \"'configuration.properties' must be an object\"));\n            configuration.properties = {};\n        }\n        for (var key in properties) {\n            var message = configurationRegistry_1.validateProperty(key);\n            if (message) {\n                delete properties[key];\n                extension.collector.warn(message);\n                continue;\n            }\n            var propertyConfiguration = properties[key];\n            if (!types_1.isObject(propertyConfiguration)) {\n                delete properties[key];\n                extension.collector.error(nls.localize('invalid.property', \"'configuration.property' must be an object\"));\n                continue;\n            }\n            if (propertyConfiguration.scope) {\n                if (propertyConfiguration.scope.toString() === 'application') {\n                    propertyConfiguration.scope = configurationRegistry_1.ConfigurationScope.APPLICATION;\n                }\n                else if (propertyConfiguration.scope.toString() === 'resource') {\n                    propertyConfiguration.scope = configurationRegistry_1.ConfigurationScope.RESOURCE;\n                }\n                else {\n                    propertyConfiguration.scope = configurationRegistry_1.ConfigurationScope.WINDOW;\n                }\n            }\n            else {\n                propertyConfiguration.scope = configurationRegistry_1.ConfigurationScope.WINDOW;\n            }\n        }\n    }\n    var subNodes = configuration.allOf;\n    if (subNodes) {\n        extension.collector.error(nls.localize('invalid.allOf', \"'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.\"));\n        for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\n            var node = subNodes_1[_i];\n            validateProperties(node, extension);\n        }\n    }\n}\nvar jsonRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\njsonRegistry.registerSchema('vscode://schemas/workspaceConfig', {\n    allowComments: true,\n    default: {\n        folders: [\n            {\n                path: ''\n            }\n        ],\n        settings: {}\n    },\n    required: ['folders'],\n    properties: {\n        'folders': {\n            minItems: 0,\n            uniqueItems: true,\n            description: nls.localize('workspaceConfig.folders.description', \"List of folders to be loaded in the workspace.\"),\n            items: {\n                type: 'object',\n                default: { path: '' },\n                oneOf: [{\n                        properties: {\n                            path: {\n                                type: 'string',\n                                description: nls.localize('workspaceConfig.path.description', \"A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.\")\n                            },\n                            name: {\n                                type: 'string',\n                                description: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n                            }\n                        },\n                        required: ['path']\n                    }, {\n                        properties: {\n                            uri: {\n                                type: 'string',\n                                description: nls.localize('workspaceConfig.uri.description', \"URI of the folder\")\n                            },\n                            name: {\n                                type: 'string',\n                                description: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n                            }\n                        },\n                        required: ['uri']\n                    }]\n            }\n        },\n        'settings': {\n            type: 'object',\n            default: {},\n            description: nls.localize('workspaceConfig.settings.description', \"Workspace settings\"),\n            $ref: configuration_1.workspaceSettingsSchemaId\n        },\n        'launch': {\n            type: 'object',\n            default: { configurations: [], compounds: [] },\n            description: nls.localize('workspaceConfig.launch.description', \"Workspace launch configurations\"),\n            $ref: configuration_1.launchSchemaId\n        },\n        'extensions': {\n            type: 'object',\n            default: {},\n            description: nls.localize('workspaceConfig.extensions.description', \"Workspace extensions\"),\n            $ref: 'vscode://schemas/extensions'\n        },\n        'remoteAuthority': {\n            type: 'string'\n        }\n    },\n    additionalProperties: false,\n    errorMessage: nls.localize('unknownWorkspaceProperty', \"Unknown workspace configuration property\")\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/configurationExtensionPoint.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/configurationExtensionPoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as objects from 'vs/base/common/objects';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { ExtensionsRegistry, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IConfigurationNode, IConfigurationRegistry, Extensions, editorConfigurationSchemaId, IDefaultConfigurationExtension, validateProperty, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { workspaceSettingsSchemaId, launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { isObject } from 'vs/base/common/types';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\nconst configurationEntrySchema: IJSONSchema = {\n\ttype: 'object',\n\tdefaultSnippets: [{ body: { title: '', properties: {} } }],\n\tproperties: {\n\t\ttitle: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.title', 'A summary of the settings. This label will be used in the settings file as separating comment.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tproperties: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.configuration.properties', 'Description of the configuration properties.'),\n\t\t\ttype: 'object',\n\t\t\tadditionalProperties: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{ $ref: 'http://json-schema.org/draft-07/schema#' },\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tisExecutable: {\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\tdeprecationMessage: 'This property is deprecated. Instead use `scope` property and set it to `application` value.'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tscope: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tenum: ['application', 'window', 'resource'],\n\t\t\t\t\t\t\t\tdefault: 'window',\n\t\t\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\t\t\tnls.localize('scope.application.description', \"Application specific configuration, which can be configured only in User settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.window.description', \"Window specific configuration, which can be configured in the User or Workspace settings.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('scope.resource.description', \"Resource specific configuration, which can be configured in the User, Workspace or Folder settings.\")\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.description', \"Scope in which the configuration is applicable. Available scopes are `window` and `resource`.\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tenumDescriptions: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.enumDescriptions', 'Descriptions for enum values')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkdownEnumDescription: {\n\t\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.markdownEnumDescription', 'Descriptions for enum values in the markdown format.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmarkdownDescription: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.markdownDescription', 'The description in the markdown format.')\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdeprecationMessage: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('scope.deprecationMessage', 'If set, the property is marked as deprecated and the given message is shown as an explanation.')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n};\n\n// BEGIN VSCode extension point `configurationDefaults`\nconst defaultConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>({\n\textensionPoint: 'configurationDefaults',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.defaultConfiguration', 'Contributes default editor configuration settings by language.'),\n\t\ttype: 'object',\n\t\tpatternProperties: {\n\t\t\t'\\\\[.*\\\\]$': {\n\t\t\t\ttype: 'object',\n\t\t\t\tdefault: {},\n\t\t\t\t$ref: editorConfigurationSchemaId,\n\t\t\t}\n\t\t}\n\t}\n});\ndefaultConfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n\tif (removed.length) {\n\t\tconst removedDefaultConfigurations: IDefaultConfigurationExtension[] = removed.map(extension => {\n\t\t\tconst id = extension.description.identifier;\n\t\t\tconst name = extension.description.name;\n\t\t\tconst defaults = objects.deepClone(extension.value);\n\t\t\treturn <IDefaultConfigurationExtension>{\n\t\t\t\tid, name, defaults\n\t\t\t};\n\t\t});\n\t\tconfigurationRegistry.deregisterDefaultConfigurations(removedDefaultConfigurations);\n\t}\n\tif (added.length) {\n\t\tconst addedDefaultConfigurations = added.map(extension => {\n\t\t\tconst id = extension.description.identifier;\n\t\t\tconst name = extension.description.name;\n\t\t\tconst defaults = objects.deepClone(extension.value);\n\t\t\treturn <IDefaultConfigurationExtension>{\n\t\t\t\tid, name, defaults\n\t\t\t};\n\t\t});\n\t\tconfigurationRegistry.registerDefaultConfigurations(addedDefaultConfigurations);\n\t}\n});\n// END VSCode extension point `configurationDefaults`\n\n\n// BEGIN VSCode extension point `configuration`\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IConfigurationNode>({\n\textensionPoint: 'configuration',\n\tdeps: [defaultConfigurationExtPoint],\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.configuration', 'Contributes configuration settings.'),\n\t\toneOf: [\n\t\t\tconfigurationEntrySchema,\n\t\t\t{\n\t\t\t\ttype: 'array',\n\t\t\t\titems: configurationEntrySchema\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst extensionConfigurations: Map<string, IConfigurationNode[]> = new Map<string, IConfigurationNode[]>();\n\nconfigurationExtPoint.setHandler((extensions, { added, removed }) => {\n\n\tif (removed.length) {\n\t\tconst removedConfigurations: IConfigurationNode[] = [];\n\t\tfor (const extension of removed) {\n\t\t\tconst key = ExtensionIdentifier.toKey(extension.description.identifier);\n\t\t\tremovedConfigurations.push(...(extensionConfigurations.get(key) || []));\n\t\t\textensionConfigurations.delete(key);\n\t\t}\n\t\tconfigurationRegistry.deregisterConfigurations(removedConfigurations);\n\t}\n\n\tfunction handleConfiguration(node: IConfigurationNode, extension: IExtensionPointUser<any>): IConfigurationNode[] {\n\t\tconst configurations: IConfigurationNode[] = [];\n\t\tlet configuration = objects.deepClone(node);\n\n\t\tif (configuration.title && (typeof configuration.title !== 'string')) {\n\t\t\textension.collector.error(nls.localize('invalid.title', \"'configuration.title' must be a string\"));\n\t\t}\n\n\t\tvalidateProperties(configuration, extension);\n\n\t\tconfiguration.id = node.id || extension.description.identifier.value;\n\t\tconfiguration.contributedByExtension = true;\n\t\tconfiguration.title = configuration.title || extension.description.displayName || extension.description.identifier.value;\n\t\tconfigurations.push(configuration);\n\t\treturn configurations;\n\t}\n\n\tif (added.length) {\n\t\tconst addedConfigurations: IConfigurationNode[] = [];\n\t\tfor (let extension of added) {\n\t\t\tconst configurations: IConfigurationNode[] = [];\n\t\t\tconst value = <IConfigurationNode | IConfigurationNode[]>extension.value;\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tconfigurations.push(...handleConfiguration(value, extension));\n\t\t\t} else {\n\t\t\t\tvalue.forEach(v => configurations.push(...handleConfiguration(v, extension)));\n\t\t\t}\n\t\t\textensionConfigurations.set(ExtensionIdentifier.toKey(extension.description.identifier), configurations);\n\t\t\taddedConfigurations.push(...configurations);\n\t\t}\n\n\t\tconfigurationRegistry.registerConfigurations(addedConfigurations, false);\n\t}\n\n});\n// END VSCode extension point `configuration`\n\nfunction validateProperties(configuration: IConfigurationNode, extension: IExtensionPointUser<any>): void {\n\tlet properties = configuration.properties;\n\tif (properties) {\n\t\tif (typeof properties !== 'object') {\n\t\t\textension.collector.error(nls.localize('invalid.properties', \"'configuration.properties' must be an object\"));\n\t\t\tconfiguration.properties = {};\n\t\t}\n\t\tfor (let key in properties) {\n\t\t\tconst message = validateProperty(key);\n\t\t\tif (message) {\n\t\t\t\tdelete properties[key];\n\t\t\t\textension.collector.warn(message);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst propertyConfiguration = properties[key];\n\t\t\tif (!isObject(propertyConfiguration)) {\n\t\t\t\tdelete properties[key];\n\t\t\t\textension.collector.error(nls.localize('invalid.property', \"'configuration.property' must be an object\"));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (propertyConfiguration.scope) {\n\t\t\t\tif (propertyConfiguration.scope.toString() === 'application') {\n\t\t\t\t\tpropertyConfiguration.scope = ConfigurationScope.APPLICATION;\n\t\t\t\t} else if (propertyConfiguration.scope.toString() === 'resource') {\n\t\t\t\t\tpropertyConfiguration.scope = ConfigurationScope.RESOURCE;\n\t\t\t\t} else {\n\t\t\t\t\tpropertyConfiguration.scope = ConfigurationScope.WINDOW;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpropertyConfiguration.scope = ConfigurationScope.WINDOW;\n\t\t\t}\n\t\t}\n\t}\n\tlet subNodes = configuration.allOf;\n\tif (subNodes) {\n\t\textension.collector.error(nls.localize('invalid.allOf', \"'configuration.allOf' is deprecated and should no longer be used. Instead, pass multiple configuration sections as an array to the 'configuration' contribution point.\"));\n\t\tfor (let node of subNodes) {\n\t\t\tvalidateProperties(node, extension);\n\t\t}\n\t}\n}\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\njsonRegistry.registerSchema('vscode://schemas/workspaceConfig', {\n\tallowComments: true,\n\tdefault: {\n\t\tfolders: [\n\t\t\t{\n\t\t\t\tpath: ''\n\t\t\t}\n\t\t],\n\t\tsettings: {\n\t\t}\n\t},\n\trequired: ['folders'],\n\tproperties: {\n\t\t'folders': {\n\t\t\tminItems: 0,\n\t\t\tuniqueItems: true,\n\t\t\tdescription: nls.localize('workspaceConfig.folders.description', \"List of folders to be loaded in the workspace.\"),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tdefault: { path: '' },\n\t\t\t\toneOf: [{\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.path.description', \"A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trequired: ['path']\n\t\t\t\t}, {\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\turi: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.uri.description', \"URI of the folder\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tname: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('workspaceConfig.name.description', \"An optional name for the folder. \")\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trequired: ['uri']\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\t'settings': {\n\t\t\ttype: 'object',\n\t\t\tdefault: {},\n\t\t\tdescription: nls.localize('workspaceConfig.settings.description', \"Workspace settings\"),\n\t\t\t$ref: workspaceSettingsSchemaId\n\t\t},\n\t\t'launch': {\n\t\t\ttype: 'object',\n\t\t\tdefault: { configurations: [], compounds: [] },\n\t\t\tdescription: nls.localize('workspaceConfig.launch.description', \"Workspace launch configurations\"),\n\t\t\t$ref: launchSchemaId\n\t\t},\n\t\t'extensions': {\n\t\t\ttype: 'object',\n\t\t\tdefault: {},\n\t\t\tdescription: nls.localize('workspaceConfig.extensions.description', \"Workspace extensions\"),\n\t\t\t$ref: 'vscode://schemas/extensions'\n\t\t},\n\t\t'remoteAuthority': {\n\t\t\ttype: 'string'\n\t\t}\n\t},\n\tadditionalProperties: false,\n\terrorMessage: nls.localize('unknownWorkspaceProperty', \"Unknown workspace configuration property\")\n});\n"]}]}