{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadOutputService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadOutputService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar MainThreadOutputService = /** @class */ (function (_super) {\n    tslib_1.__extends(MainThreadOutputService, _super);\n    function MainThreadOutputService(extHostContext, outputService, layoutService, panelService) {\n        var _this = _super.call(this) || this;\n        _this._outputService = outputService;\n        _this._layoutService = layoutService;\n        _this._panelService = panelService;\n        _this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostOutputService);\n        var setVisibleChannel = function () {\n            var panel = _this._panelService.getActivePanel();\n            var visibleChannel = panel && panel.getId() === output_1.OUTPUT_PANEL_ID ? _this._outputService.getActiveChannel() : undefined;\n            _this._proxy.$setVisibleChannel(visibleChannel ? visibleChannel.id : null);\n        };\n        _this._register(event_1.Event.any(_this._outputService.onActiveOutputChannel, _this._panelService.onDidPanelOpen, _this._panelService.onDidPanelClose)(function () { return setVisibleChannel(); }));\n        setVisibleChannel();\n        return _this;\n    }\n    MainThreadOutputService_1 = MainThreadOutputService;\n    MainThreadOutputService.prototype.$register = function (label, log, file) {\n        var _this = this;\n        var id = 'extension-output-#' + (MainThreadOutputService_1._idPool++);\n        platform_1.Registry.as(output_1.Extensions.OutputChannels).registerChannel({ id: id, label: label, file: file ? uri_1.URI.revive(file) : undefined, log: log });\n        this._register(lifecycle_1.toDisposable(function () { return _this.$dispose(id); }));\n        return Promise.resolve(id);\n    };\n    MainThreadOutputService.prototype.$append = function (channelId, value) {\n        var channel = this._getChannel(channelId);\n        if (channel) {\n            channel.append(value);\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype.$update = function (channelId) {\n        var channel = this._getChannel(channelId);\n        if (channel) {\n            channel.update();\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype.$clear = function (channelId, till) {\n        var channel = this._getChannel(channelId);\n        if (channel) {\n            channel.clear(till);\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype.$reveal = function (channelId, preserveFocus) {\n        var channel = this._getChannel(channelId);\n        if (channel) {\n            this._outputService.showChannel(channel.id, preserveFocus);\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype.$close = function (channelId) {\n        var panel = this._panelService.getActivePanel();\n        if (panel && panel.getId() === output_1.OUTPUT_PANEL_ID) {\n            var activeChannel = this._outputService.getActiveChannel();\n            if (activeChannel && channelId === activeChannel.id) {\n                this._layoutService.setPanelHidden(true);\n            }\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype.$dispose = function (channelId) {\n        var channel = this._getChannel(channelId);\n        if (channel) {\n            channel.dispose();\n        }\n        return undefined;\n    };\n    MainThreadOutputService.prototype._getChannel = function (channelId) {\n        return this._outputService.getChannel(channelId);\n    };\n    var MainThreadOutputService_1;\n    MainThreadOutputService._idPool = 1;\n    MainThreadOutputService = MainThreadOutputService_1 = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadOutputService),\n        tslib_1.__param(1, output_1.IOutputService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, panelService_1.IPanelService)\n    ], MainThreadOutputService);\n    return MainThreadOutputService;\n}(lifecycle_1.Disposable));\nexports.MainThreadOutputService = MainThreadOutputService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadOutputService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadOutputService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputService, IOutputChannel, OUTPUT_PANEL_ID, Extensions, IOutputChannelRegistry } from 'vs/workbench/contrib/output/common/output';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { MainThreadOutputServiceShape, MainContext, IExtHostContext, ExtHostOutputServiceShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\n\n@extHostNamedCustomer(MainContext.MainThreadOutputService)\nexport class MainThreadOutputService extends Disposable implements MainThreadOutputServiceShape {\n\n\tprivate static _idPool = 1;\n\n\tprivate readonly _proxy: ExtHostOutputServiceShape;\n\tprivate readonly _outputService: IOutputService;\n\tprivate readonly _layoutService: IWorkbenchLayoutService;\n\tprivate readonly _panelService: IPanelService;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IOutputService outputService: IOutputService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IPanelService panelService: IPanelService\n\t) {\n\t\tsuper();\n\t\tthis._outputService = outputService;\n\t\tthis._layoutService = layoutService;\n\t\tthis._panelService = panelService;\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostOutputService);\n\n\t\tconst setVisibleChannel = () => {\n\t\t\tconst panel = this._panelService.getActivePanel();\n\t\t\tconst visibleChannel = panel && panel.getId() === OUTPUT_PANEL_ID ? this._outputService.getActiveChannel() : undefined;\n\t\t\tthis._proxy.$setVisibleChannel(visibleChannel ? visibleChannel.id : null);\n\t\t};\n\t\tthis._register(Event.any<any>(this._outputService.onActiveOutputChannel, this._panelService.onDidPanelOpen, this._panelService.onDidPanelClose)(() => setVisibleChannel()));\n\t\tsetVisibleChannel();\n\t}\n\n\tpublic $register(label: string, log: boolean, file?: UriComponents): Promise<string> {\n\t\tconst id = 'extension-output-#' + (MainThreadOutputService._idPool++);\n\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id, label, file: file ? URI.revive(file) : undefined, log });\n\t\tthis._register(toDisposable(() => this.$dispose(id)));\n\t\treturn Promise.resolve(id);\n\t}\n\n\tpublic $append(channelId: string, value: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.append(value);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $update(channelId: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.update();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $clear(channelId: string, till: number): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.clear(till);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $reveal(channelId: string, preserveFocus: boolean): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tthis._outputService.showChannel(channel.id, preserveFocus);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic $close(channelId: string): Promise<void> | undefined {\n\t\tconst panel = this._panelService.getActivePanel();\n\t\tif (panel && panel.getId() === OUTPUT_PANEL_ID) {\n\t\t\tconst activeChannel = this._outputService.getActiveChannel();\n\t\t\tif (activeChannel && channelId === activeChannel.id) {\n\t\t\t\tthis._layoutService.setPanelHidden(true);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic $dispose(channelId: string): Promise<void> | undefined {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tchannel.dispose();\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _getChannel(channelId: string): IOutputChannel | undefined {\n\t\treturn this._outputService.getChannel(channelId);\n\t}\n}\n"]}]}