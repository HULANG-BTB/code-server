{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar ViewModel = /** @class */ (function () {\n    function ViewModel(contextKeyService) {\n        this.firstSessionStart = true;\n        this._onDidFocusSession = new event_1.Emitter();\n        this._onDidFocusStackFrame = new event_1.Emitter();\n        this._onDidSelectExpression = new event_1.Emitter();\n        this.multiSessionView = false;\n        this.expressionSelectedContextKey = debug_1.CONTEXT_EXPRESSION_SELECTED.bindTo(contextKeyService);\n        this.breakpointSelectedContextKey = debug_1.CONTEXT_BREAKPOINT_SELECTED.bindTo(contextKeyService);\n        this.loadedScriptsSupportedContextKey = debug_1.CONTEXT_LOADED_SCRIPTS_SUPPORTED.bindTo(contextKeyService);\n        this.stepBackSupportedContextKey = debug_1.CONTEXT_STEP_BACK_SUPPORTED.bindTo(contextKeyService);\n        this.focusedSessionIsAttach = debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.bindTo(contextKeyService);\n        this.restartFrameSupportedContextKey = debug_1.CONTEXT_RESTART_FRAME_SUPPORTED.bindTo(contextKeyService);\n    }\n    ViewModel.prototype.getId = function () {\n        return 'root';\n    };\n    Object.defineProperty(ViewModel.prototype, \"focusedSession\", {\n        get: function () {\n            return this._focusedSession;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewModel.prototype, \"focusedThread\", {\n        get: function () {\n            return this._focusedThread;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewModel.prototype, \"focusedStackFrame\", {\n        get: function () {\n            return this._focusedStackFrame;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewModel.prototype.setFocus = function (stackFrame, thread, session, explicit) {\n        var shouldEmitForStackFrame = this._focusedStackFrame !== stackFrame;\n        var shouldEmitForSession = this._focusedSession !== session;\n        this._focusedStackFrame = stackFrame;\n        this._focusedThread = thread;\n        this._focusedSession = session;\n        this.loadedScriptsSupportedContextKey.set(session ? !!session.capabilities.supportsLoadedSourcesRequest : false);\n        this.stepBackSupportedContextKey.set(session ? !!session.capabilities.supportsStepBack : false);\n        this.restartFrameSupportedContextKey.set(session ? !!session.capabilities.supportsRestartFrame : false);\n        var attach = !!session && session.configuration.request === 'attach' && !debugUtils_1.isExtensionHostDebugging(session.configuration);\n        this.focusedSessionIsAttach.set(attach);\n        if (shouldEmitForSession) {\n            this._onDidFocusSession.fire(session);\n        }\n        if (shouldEmitForStackFrame) {\n            this._onDidFocusStackFrame.fire({ stackFrame: stackFrame, explicit: explicit });\n        }\n    };\n    Object.defineProperty(ViewModel.prototype, \"onDidFocusSession\", {\n        get: function () {\n            return this._onDidFocusSession.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewModel.prototype, \"onDidFocusStackFrame\", {\n        get: function () {\n            return this._onDidFocusStackFrame.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewModel.prototype.getSelectedExpression = function () {\n        return this.selectedExpression;\n    };\n    ViewModel.prototype.setSelectedExpression = function (expression) {\n        this.selectedExpression = expression;\n        this.expressionSelectedContextKey.set(!!expression);\n        this._onDidSelectExpression.fire(expression);\n    };\n    Object.defineProperty(ViewModel.prototype, \"onDidSelectExpression\", {\n        get: function () {\n            return this._onDidSelectExpression.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewModel.prototype.getSelectedFunctionBreakpoint = function () {\n        return this.selectedFunctionBreakpoint;\n    };\n    ViewModel.prototype.setSelectedFunctionBreakpoint = function (functionBreakpoint) {\n        this.selectedFunctionBreakpoint = functionBreakpoint;\n        this.breakpointSelectedContextKey.set(!!functionBreakpoint);\n    };\n    ViewModel.prototype.isMultiSessionView = function () {\n        return this.multiSessionView;\n    };\n    ViewModel.prototype.setMultiSessionView = function (isMultiSessionView) {\n        this.multiSessionView = isMultiSessionView;\n    };\n    return ViewModel;\n}());\nexports.ViewModel = ViewModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { CONTEXT_EXPRESSION_SELECTED, IViewModel, IStackFrame, IDebugSession, IThread, IExpression, IFunctionBreakpoint, CONTEXT_BREAKPOINT_SELECTED, CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_RESTART_FRAME_SUPPORTED } from 'vs/workbench/contrib/debug/common/debug';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { isExtensionHostDebugging } from 'vs/workbench/contrib/debug/common/debugUtils';\n\nexport class ViewModel implements IViewModel {\n\n\tfirstSessionStart = true;\n\n\tprivate _focusedStackFrame: IStackFrame | undefined;\n\tprivate _focusedSession: IDebugSession | undefined;\n\tprivate _focusedThread: IThread | undefined;\n\tprivate selectedExpression: IExpression | undefined;\n\tprivate selectedFunctionBreakpoint: IFunctionBreakpoint | undefined;\n\tprivate readonly _onDidFocusSession: Emitter<IDebugSession | undefined>;\n\tprivate readonly _onDidFocusStackFrame: Emitter<{ stackFrame: IStackFrame | undefined, explicit: boolean }>;\n\tprivate readonly _onDidSelectExpression: Emitter<IExpression | undefined>;\n\tprivate multiSessionView: boolean;\n\tprivate expressionSelectedContextKey: IContextKey<boolean>;\n\tprivate breakpointSelectedContextKey: IContextKey<boolean>;\n\tprivate loadedScriptsSupportedContextKey: IContextKey<boolean>;\n\tprivate stepBackSupportedContextKey: IContextKey<boolean>;\n\tprivate focusedSessionIsAttach: IContextKey<boolean>;\n\tprivate restartFrameSupportedContextKey: IContextKey<boolean>;\n\n\tconstructor(contextKeyService: IContextKeyService) {\n\t\tthis._onDidFocusSession = new Emitter<IDebugSession | undefined>();\n\t\tthis._onDidFocusStackFrame = new Emitter<{ stackFrame: IStackFrame, explicit: boolean }>();\n\t\tthis._onDidSelectExpression = new Emitter<IExpression>();\n\t\tthis.multiSessionView = false;\n\t\tthis.expressionSelectedContextKey = CONTEXT_EXPRESSION_SELECTED.bindTo(contextKeyService);\n\t\tthis.breakpointSelectedContextKey = CONTEXT_BREAKPOINT_SELECTED.bindTo(contextKeyService);\n\t\tthis.loadedScriptsSupportedContextKey = CONTEXT_LOADED_SCRIPTS_SUPPORTED.bindTo(contextKeyService);\n\t\tthis.stepBackSupportedContextKey = CONTEXT_STEP_BACK_SUPPORTED.bindTo(contextKeyService);\n\t\tthis.focusedSessionIsAttach = CONTEXT_FOCUSED_SESSION_IS_ATTACH.bindTo(contextKeyService);\n\t\tthis.restartFrameSupportedContextKey = CONTEXT_RESTART_FRAME_SUPPORTED.bindTo(contextKeyService);\n\t}\n\n\tgetId(): string {\n\t\treturn 'root';\n\t}\n\n\tget focusedSession(): IDebugSession | undefined {\n\t\treturn this._focusedSession;\n\t}\n\n\tget focusedThread(): IThread | undefined {\n\t\treturn this._focusedThread;\n\t}\n\n\tget focusedStackFrame(): IStackFrame | undefined {\n\t\treturn this._focusedStackFrame;\n\t}\n\n\tsetFocus(stackFrame: IStackFrame | undefined, thread: IThread | undefined, session: IDebugSession | undefined, explicit: boolean): void {\n\t\tconst shouldEmitForStackFrame = this._focusedStackFrame !== stackFrame;\n\t\tconst shouldEmitForSession = this._focusedSession !== session;\n\n\t\tthis._focusedStackFrame = stackFrame;\n\t\tthis._focusedThread = thread;\n\t\tthis._focusedSession = session;\n\n\t\tthis.loadedScriptsSupportedContextKey.set(session ? !!session.capabilities.supportsLoadedSourcesRequest : false);\n\t\tthis.stepBackSupportedContextKey.set(session ? !!session.capabilities.supportsStepBack : false);\n\t\tthis.restartFrameSupportedContextKey.set(session ? !!session.capabilities.supportsRestartFrame : false);\n\t\tconst attach = !!session && session.configuration.request === 'attach' && !isExtensionHostDebugging(session.configuration);\n\t\tthis.focusedSessionIsAttach.set(attach);\n\n\t\tif (shouldEmitForSession) {\n\t\t\tthis._onDidFocusSession.fire(session);\n\t\t}\n\t\tif (shouldEmitForStackFrame) {\n\t\t\tthis._onDidFocusStackFrame.fire({ stackFrame, explicit });\n\t\t}\n\t}\n\n\tget onDidFocusSession(): Event<IDebugSession | undefined> {\n\t\treturn this._onDidFocusSession.event;\n\t}\n\n\tget onDidFocusStackFrame(): Event<{ stackFrame: IStackFrame | undefined, explicit: boolean }> {\n\t\treturn this._onDidFocusStackFrame.event;\n\t}\n\n\tgetSelectedExpression(): IExpression | undefined {\n\t\treturn this.selectedExpression;\n\t}\n\n\tsetSelectedExpression(expression: IExpression | undefined) {\n\t\tthis.selectedExpression = expression;\n\t\tthis.expressionSelectedContextKey.set(!!expression);\n\t\tthis._onDidSelectExpression.fire(expression);\n\t}\n\n\tget onDidSelectExpression(): Event<IExpression | undefined> {\n\t\treturn this._onDidSelectExpression.event;\n\t}\n\n\tgetSelectedFunctionBreakpoint(): IFunctionBreakpoint | undefined {\n\t\treturn this.selectedFunctionBreakpoint;\n\t}\n\n\tsetSelectedFunctionBreakpoint(functionBreakpoint: IFunctionBreakpoint | undefined): void {\n\t\tthis.selectedFunctionBreakpoint = functionBreakpoint;\n\t\tthis.breakpointSelectedContextKey.set(!!functionBreakpoint);\n\t}\n\n\tisMultiSessionView(): boolean {\n\t\treturn this.multiSessionView;\n\t}\n\n\tsetMultiSessionView(isMultiSessionView: boolean): void {\n\t\tthis.multiSessionView = isMultiSessionView;\n\t}\n}\n"]}]}