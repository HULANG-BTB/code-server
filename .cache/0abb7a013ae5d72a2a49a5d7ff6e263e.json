{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/tree/objectTree.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/tree/objectTree.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar abstractTree_1 = require(\"vs/base/browser/ui/tree/abstractTree\");\nvar objectTreeModel_1 = require(\"vs/base/browser/ui/tree/objectTreeModel\");\nvar ObjectTree = /** @class */ (function (_super) {\n    tslib_1.__extends(ObjectTree, _super);\n    function ObjectTree(container, delegate, renderers, options) {\n        if (options === void 0) { options = {}; }\n        return _super.call(this, container, delegate, renderers, options) || this;\n    }\n    ObjectTree.prototype.setChildren = function (element, children, onDidCreateNode, onDidDeleteNode) {\n        return this.model.setChildren(element, children, onDidCreateNode, onDidDeleteNode);\n    };\n    ObjectTree.prototype.rerender = function (element) {\n        if (element === undefined) {\n            this.view.rerender();\n            return;\n        }\n        this.model.rerender(element);\n    };\n    ObjectTree.prototype.resort = function (element, recursive) {\n        if (recursive === void 0) { recursive = true; }\n        this.model.resort(element, recursive);\n    };\n    ObjectTree.prototype.createModel = function (view, options) {\n        return new objectTreeModel_1.ObjectTreeModel(view, options);\n    };\n    return ObjectTree;\n}(abstractTree_1.AbstractTree));\nexports.ObjectTree = ObjectTree;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/tree/objectTree.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/tree/objectTree.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,qEAA0F;AAG1F,2EAA0E;AAO1E;IAAgF,sCAA6C;IAI5H,oBACC,SAAsB,EACtB,QAAiC,EACjC,SAAiE,EACjE,OAAgD;QAAhD,wBAAA,EAAA,YAAgD;eAEhD,kBAAM,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC;IAC/C,CAAC;IAED,gCAAW,GAAX,UACC,OAAiB,EACjB,QAAqC,EACrC,eAA2D,EAC3D,eAA2D;QAE3D,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;IACpF,CAAC;IAED,6BAAQ,GAAR,UAAS,OAAW;QACnB,IAAI,OAAO,KAAK,SAAS,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACrB,OAAO;SACP;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,2BAAM,GAAN,UAAO,OAAU,EAAE,SAAgB;QAAhB,0BAAA,EAAA,gBAAgB;QAClC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IACvC,CAAC;IAES,gCAAW,GAArB,UAAsB,IAA4C,EAAE,OAA2C;QAC9G,OAAO,IAAI,iCAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IACF,iBAAC;AAAD,CAAC,AAtCD,CAAgF,2BAAY,GAsC3F;AAtCY,gCAAU","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Iterator, ISequence } from 'vs/base/common/iterator';\nimport { AbstractTree, IAbstractTreeOptions } from 'vs/base/browser/ui/tree/abstractTree';\nimport { ISpliceable } from 'vs/base/common/sequence';\nimport { ITreeNode, ITreeModel, ITreeElement, ITreeRenderer, ITreeSorter } from 'vs/base/browser/ui/tree/tree';\nimport { ObjectTreeModel } from 'vs/base/browser/ui/tree/objectTreeModel';\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\n\nexport interface IObjectTreeOptions<T, TFilterData = void> extends IAbstractTreeOptions<T, TFilterData> {\n\tsorter?: ITreeSorter<T>;\n}\n\nexport class ObjectTree<T extends NonNullable<any>, TFilterData = void> extends AbstractTree<T | null, TFilterData, T | null> {\n\n\tprotected model: ObjectTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<any /* TODO@joao */, TFilterData, any>[],\n\t\toptions: IObjectTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tsuper(container, delegate, renderers, options);\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren?: ISequence<ITreeElement<T>>,\n\t\tonDidCreateNode?: (node: ITreeNode<T, TFilterData>) => void,\n\t\tonDidDeleteNode?: (node: ITreeNode<T, TFilterData>) => void\n\t): Iterator<ITreeElement<T | null>> {\n\t\treturn this.model.setChildren(element, children, onDidCreateNode, onDidDeleteNode);\n\t}\n\n\trerender(element?: T): void {\n\t\tif (element === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(element);\n\t}\n\n\tresort(element: T, recursive = true): void {\n\t\tthis.model.resort(element, recursive);\n\t}\n\n\tprotected createModel(view: ISpliceable<ITreeNode<T, TFilterData>>, options: IObjectTreeOptions<T, TFilterData>): ITreeModel<T | null, TFilterData, T | null> {\n\t\treturn new ObjectTreeModel(view, options);\n\t}\n}\n"]}]}