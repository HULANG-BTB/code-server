{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/tocTree.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/tocTree.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar listWidget_1 = require(\"vs/base/browser/ui/list/listWidget\");\nvar objectTree_1 = require(\"vs/base/browser/ui/tree/objectTree\");\nvar iterator_1 = require(\"vs/base/common/iterator\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar settingsTree_1 = require(\"vs/workbench/contrib/preferences/browser/settingsTree\");\nvar settingsTreeModels_1 = require(\"vs/workbench/contrib/preferences/browser/settingsTreeModels\");\nvar settingsWidgets_1 = require(\"vs/workbench/contrib/preferences/browser/settingsWidgets\");\nvar nls_1 = require(\"vs/nls\");\nvar $ = DOM.$;\nvar TOCTreeModel = /** @class */ (function () {\n    function TOCTreeModel(_viewState) {\n        this._viewState = _viewState;\n    }\n    Object.defineProperty(TOCTreeModel.prototype, \"settingsTreeRoot\", {\n        get: function () {\n            return this._settingsTreeRoot;\n        },\n        set: function (value) {\n            this._settingsTreeRoot = value;\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TOCTreeModel.prototype, \"currentSearchModel\", {\n        get: function () {\n            return this._currentSearchModel;\n        },\n        set: function (model) {\n            this._currentSearchModel = model;\n            this.update();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TOCTreeModel.prototype, \"children\", {\n        get: function () {\n            return this._settingsTreeRoot.children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TOCTreeModel.prototype.update = function () {\n        if (this._settingsTreeRoot) {\n            this.updateGroupCount(this._settingsTreeRoot);\n        }\n    };\n    TOCTreeModel.prototype.updateGroupCount = function (group) {\n        var _this = this;\n        group.children.forEach(function (child) {\n            if (child instanceof settingsTreeModels_1.SettingsTreeGroupElement) {\n                _this.updateGroupCount(child);\n            }\n        });\n        var childCount = group.children\n            .filter(function (child) { return child instanceof settingsTreeModels_1.SettingsTreeGroupElement; })\n            .reduce(function (acc, cur) { return acc + cur.count; }, 0);\n        group.count = childCount + this.getGroupCount(group);\n    };\n    TOCTreeModel.prototype.getGroupCount = function (group) {\n        var _this = this;\n        return group.children.filter(function (child) {\n            if (!(child instanceof settingsTreeModels_1.SettingsTreeSettingElement)) {\n                return false;\n            }\n            if (_this._currentSearchModel && !_this._currentSearchModel.root.containsSetting(child.setting.key)) {\n                return false;\n            }\n            // Check everything that the SettingsFilter checks except whether it's filtered by a category\n            return child.matchesScope(_this._viewState.settingsTarget) && child.matchesAllTags(_this._viewState.tagFilters);\n        }).length;\n    };\n    return TOCTreeModel;\n}());\nexports.TOCTreeModel = TOCTreeModel;\nvar TOC_ENTRY_TEMPLATE_ID = 'settings.toc.entry';\nvar TOCRenderer = /** @class */ (function () {\n    function TOCRenderer() {\n        this.templateId = TOC_ENTRY_TEMPLATE_ID;\n    }\n    TOCRenderer.prototype.renderTemplate = function (container) {\n        return {\n            labelElement: DOM.append(container, $('.settings-toc-entry')),\n            countElement: DOM.append(container, $('.settings-toc-count'))\n        };\n    };\n    TOCRenderer.prototype.renderElement = function (node, index, template) {\n        var element = node.element;\n        var count = element.count;\n        var label = element.label;\n        template.labelElement.textContent = label;\n        if (count) {\n            template.countElement.textContent = \" (\" + count + \")\";\n        }\n        else {\n            template.countElement.textContent = '';\n        }\n    };\n    TOCRenderer.prototype.disposeTemplate = function (templateData) {\n    };\n    return TOCRenderer;\n}());\nexports.TOCRenderer = TOCRenderer;\nvar TOCTreeDelegate = /** @class */ (function () {\n    function TOCTreeDelegate() {\n    }\n    TOCTreeDelegate.prototype.getTemplateId = function (element) {\n        return TOC_ENTRY_TEMPLATE_ID;\n    };\n    TOCTreeDelegate.prototype.getHeight = function (element) {\n        return 22;\n    };\n    return TOCTreeDelegate;\n}());\nfunction createTOCIterator(model, tree) {\n    var groupChildren = model.children.filter(function (c) { return c instanceof settingsTreeModels_1.SettingsTreeGroupElement; });\n    var groupsIt = iterator_1.Iterator.fromArray(groupChildren);\n    return iterator_1.Iterator.map(groupsIt, function (g) {\n        var nodeExists = true;\n        try {\n            tree.getNode(g);\n        }\n        catch (e) {\n            nodeExists = false;\n        }\n        var hasGroupChildren = g.children.some(function (c) { return c instanceof settingsTreeModels_1.SettingsTreeGroupElement; });\n        return {\n            element: g,\n            collapsed: nodeExists ? undefined : true,\n            collapsible: hasGroupChildren,\n            children: g instanceof settingsTreeModels_1.SettingsTreeGroupElement ?\n                createTOCIterator(g, tree) :\n                undefined\n        };\n    });\n}\nexports.createTOCIterator = createTOCIterator;\nvar SettingsAccessibilityProvider = /** @class */ (function () {\n    function SettingsAccessibilityProvider() {\n    }\n    SettingsAccessibilityProvider.prototype.getAriaLabel = function (element) {\n        if (!element) {\n            return '';\n        }\n        if (element instanceof settingsTreeModels_1.SettingsTreeGroupElement) {\n            return nls_1.localize('groupRowAriaLabel', \"{0}, group\", element.label);\n        }\n        return '';\n    };\n    SettingsAccessibilityProvider.prototype.getAriaLevel = function (element) {\n        var i = 1;\n        while (element instanceof settingsTreeModels_1.SettingsTreeGroupElement && element.parent) {\n            i++;\n            element = element.parent;\n        }\n        return i;\n    };\n    return SettingsAccessibilityProvider;\n}());\nvar TOCTree = /** @class */ (function (_super) {\n    tslib_1.__extends(TOCTree, _super);\n    function TOCTree(container, viewState, themeService, instantiationService) {\n        // test open mode\n        var _this = this;\n        var treeClass = 'settings-toc-tree';\n        var filter = instantiationService.createInstance(settingsTree_1.SettingsTreeFilter, viewState);\n        var options = {\n            filter: filter,\n            multipleSelectionSupport: false,\n            identityProvider: {\n                getId: function (e) {\n                    return e.id;\n                }\n            },\n            styleController: new listWidget_1.DefaultStyleController(DOM.createStyleSheet(container), treeClass),\n            accessibilityProvider: instantiationService.createInstance(SettingsAccessibilityProvider)\n        };\n        _this = _super.call(this, container, new TOCTreeDelegate(), [new TOCRenderer()], options) || this;\n        _this.getHTMLElement().classList.add(treeClass);\n        _this.disposables.push(styler_1.attachStyler(themeService, {\n            listActiveSelectionBackground: colorRegistry_1.editorBackground,\n            listActiveSelectionForeground: settingsWidgets_1.settingsHeaderForeground,\n            listFocusAndSelectionBackground: colorRegistry_1.editorBackground,\n            listFocusAndSelectionForeground: settingsWidgets_1.settingsHeaderForeground,\n            listFocusBackground: colorRegistry_1.editorBackground,\n            listFocusForeground: settingsWidgets_1.settingsHeaderForeground,\n            listHoverForeground: settingsWidgets_1.settingsHeaderForeground,\n            listHoverBackground: colorRegistry_1.editorBackground,\n            listInactiveSelectionBackground: colorRegistry_1.editorBackground,\n            listInactiveSelectionForeground: settingsWidgets_1.settingsHeaderForeground,\n            listInactiveFocusBackground: colorRegistry_1.editorBackground,\n            listInactiveFocusOutline: colorRegistry_1.editorBackground\n        }, function (colors) {\n            _this.style(colors);\n        }));\n        return _this;\n    }\n    TOCTree = tslib_1.__decorate([\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], TOCTree);\n    return TOCTree;\n}(objectTree_1.ObjectTree));\nexports.TOCTree = TOCTree;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/tocTree.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/tocTree.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { DefaultStyleController, IAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';\nimport { IObjectTreeOptions, ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { ITreeElement, ITreeNode, ITreeRenderer } from 'vs/base/browser/ui/tree/tree';\nimport { Iterator } from 'vs/base/common/iterator';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { editorBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { attachStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { SettingsTreeFilter } from 'vs/workbench/contrib/preferences/browser/settingsTree';\nimport { ISettingsEditorViewState, SearchResultModel, SettingsTreeElement, SettingsTreeGroupElement, SettingsTreeSettingElement } from 'vs/workbench/contrib/preferences/browser/settingsTreeModels';\nimport { settingsHeaderForeground } from 'vs/workbench/contrib/preferences/browser/settingsWidgets';\nimport { localize } from 'vs/nls';\n\nconst $ = DOM.$;\n\nexport class TOCTreeModel {\n\n\tprivate _currentSearchModel: SearchResultModel | null;\n\tprivate _settingsTreeRoot: SettingsTreeGroupElement;\n\n\tconstructor(private _viewState: ISettingsEditorViewState) {\n\t}\n\n\tget settingsTreeRoot(): SettingsTreeGroupElement {\n\t\treturn this._settingsTreeRoot;\n\t}\n\n\tset settingsTreeRoot(value: SettingsTreeGroupElement) {\n\t\tthis._settingsTreeRoot = value;\n\t\tthis.update();\n\t}\n\n\tget currentSearchModel(): SearchResultModel | null {\n\t\treturn this._currentSearchModel;\n\t}\n\n\tset currentSearchModel(model: SearchResultModel | null) {\n\t\tthis._currentSearchModel = model;\n\t\tthis.update();\n\t}\n\n\tget children(): SettingsTreeElement[] {\n\t\treturn this._settingsTreeRoot.children;\n\t}\n\n\tupdate(): void {\n\t\tif (this._settingsTreeRoot) {\n\t\t\tthis.updateGroupCount(this._settingsTreeRoot);\n\t\t}\n\t}\n\n\tprivate updateGroupCount(group: SettingsTreeGroupElement): void {\n\t\tgroup.children.forEach(child => {\n\t\t\tif (child instanceof SettingsTreeGroupElement) {\n\t\t\t\tthis.updateGroupCount(child);\n\t\t\t}\n\t\t});\n\n\t\tconst childCount = group.children\n\t\t\t.filter(child => child instanceof SettingsTreeGroupElement)\n\t\t\t.reduce((acc, cur) => acc + (<SettingsTreeGroupElement>cur).count!, 0);\n\n\t\tgroup.count = childCount + this.getGroupCount(group);\n\t}\n\n\tprivate getGroupCount(group: SettingsTreeGroupElement): number {\n\t\treturn group.children.filter(child => {\n\t\t\tif (!(child instanceof SettingsTreeSettingElement)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this._currentSearchModel && !this._currentSearchModel.root.containsSetting(child.setting.key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check everything that the SettingsFilter checks except whether it's filtered by a category\n\t\t\treturn child.matchesScope(this._viewState.settingsTarget) && child.matchesAllTags(this._viewState.tagFilters);\n\t\t}).length;\n\t}\n}\n\nconst TOC_ENTRY_TEMPLATE_ID = 'settings.toc.entry';\n\ninterface ITOCEntryTemplate {\n\tlabelElement: HTMLElement;\n\tcountElement: HTMLElement;\n}\n\nexport class TOCRenderer implements ITreeRenderer<SettingsTreeGroupElement, never, ITOCEntryTemplate> {\n\n\ttemplateId = TOC_ENTRY_TEMPLATE_ID;\n\n\trenderTemplate(container: HTMLElement): ITOCEntryTemplate {\n\t\treturn {\n\t\t\tlabelElement: DOM.append(container, $('.settings-toc-entry')),\n\t\t\tcountElement: DOM.append(container, $('.settings-toc-count'))\n\t\t};\n\t}\n\n\trenderElement(node: ITreeNode<SettingsTreeGroupElement>, index: number, template: ITOCEntryTemplate): void {\n\t\tconst element = node.element;\n\t\tconst count = element.count;\n\t\tconst label = element.label;\n\n\t\ttemplate.labelElement.textContent = label;\n\n\t\tif (count) {\n\t\t\ttemplate.countElement.textContent = ` (${count})`;\n\t\t} else {\n\t\t\ttemplate.countElement.textContent = '';\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: ITOCEntryTemplate): void {\n\t}\n}\n\nclass TOCTreeDelegate implements IListVirtualDelegate<SettingsTreeElement> {\n\tgetTemplateId(element: SettingsTreeElement): string {\n\t\treturn TOC_ENTRY_TEMPLATE_ID;\n\t}\n\n\tgetHeight(element: SettingsTreeElement): number {\n\t\treturn 22;\n\t}\n}\n\nexport function createTOCIterator(model: TOCTreeModel | SettingsTreeGroupElement, tree: TOCTree): Iterator<ITreeElement<SettingsTreeGroupElement>> {\n\tconst groupChildren = <SettingsTreeGroupElement[]>model.children.filter(c => c instanceof SettingsTreeGroupElement);\n\tconst groupsIt = Iterator.fromArray(groupChildren);\n\n\n\treturn Iterator.map(groupsIt, g => {\n\t\tlet nodeExists = true;\n\t\ttry { tree.getNode(g); } catch (e) { nodeExists = false; }\n\n\t\tconst hasGroupChildren = g.children.some(c => c instanceof SettingsTreeGroupElement);\n\n\t\treturn {\n\t\t\telement: g,\n\t\t\tcollapsed: nodeExists ? undefined : true,\n\t\t\tcollapsible: hasGroupChildren,\n\t\t\tchildren: g instanceof SettingsTreeGroupElement ?\n\t\t\t\tcreateTOCIterator(g, tree) :\n\t\t\t\tundefined\n\t\t};\n\t});\n}\n\nclass SettingsAccessibilityProvider implements IAccessibilityProvider<SettingsTreeGroupElement> {\n\tgetAriaLabel(element: SettingsTreeElement): string {\n\t\tif (!element) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (element instanceof SettingsTreeGroupElement) {\n\t\t\treturn localize('groupRowAriaLabel', \"{0}, group\", element.label);\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tgetAriaLevel(element: SettingsTreeGroupElement): number {\n\t\tlet i = 1;\n\t\twhile (element instanceof SettingsTreeGroupElement && element.parent) {\n\t\t\ti++;\n\t\t\telement = element.parent;\n\t\t}\n\n\t\treturn i;\n\t}\n}\n\nexport class TOCTree extends ObjectTree<SettingsTreeGroupElement> {\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tviewState: ISettingsEditorViewState,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\t// test open mode\n\n\t\tconst treeClass = 'settings-toc-tree';\n\t\tconst filter = instantiationService.createInstance(SettingsTreeFilter, viewState);\n\t\tconst options: IObjectTreeOptions<SettingsTreeGroupElement> = {\n\t\t\tfilter,\n\t\t\tmultipleSelectionSupport: false,\n\t\t\tidentityProvider: {\n\t\t\t\tgetId(e) {\n\t\t\t\t\treturn e.id;\n\t\t\t\t}\n\t\t\t},\n\t\t\tstyleController: new DefaultStyleController(DOM.createStyleSheet(container), treeClass),\n\t\t\taccessibilityProvider: instantiationService.createInstance(SettingsAccessibilityProvider)\n\t\t};\n\n\t\tsuper(container,\n\t\t\tnew TOCTreeDelegate(),\n\t\t\t[new TOCRenderer()],\n\t\t\toptions);\n\n\t\tthis.getHTMLElement().classList.add(treeClass);\n\n\t\tthis.disposables.push(attachStyler(themeService, {\n\t\t\tlistActiveSelectionBackground: editorBackground,\n\t\t\tlistActiveSelectionForeground: settingsHeaderForeground,\n\t\t\tlistFocusAndSelectionBackground: editorBackground,\n\t\t\tlistFocusAndSelectionForeground: settingsHeaderForeground,\n\t\t\tlistFocusBackground: editorBackground,\n\t\t\tlistFocusForeground: settingsHeaderForeground,\n\t\t\tlistHoverForeground: settingsHeaderForeground,\n\t\t\tlistHoverBackground: editorBackground,\n\t\t\tlistInactiveSelectionBackground: editorBackground,\n\t\t\tlistInactiveSelectionForeground: settingsHeaderForeground,\n\t\t\tlistInactiveFocusBackground: editorBackground,\n\t\t\tlistInactiveFocusOutline: editorBackground\n\t\t}, colors => {\n\t\t\tthis.style(colors);\n\t\t}));\n\t}\n}\n"]}]}