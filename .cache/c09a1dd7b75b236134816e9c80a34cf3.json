{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/editor.worker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/editor.worker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/worker/simpleWorker\", \"vs/editor/common/services/editorSimpleWorker\"], function (require, exports, simpleWorker_1, editorSimpleWorker_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let initialized = false;\n    function initialize(foreignModule) {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        const editorWorker = new editorSimpleWorker_1.EditorSimpleWorkerImpl(foreignModule);\n        const simpleWorker = new simpleWorker_1.SimpleWorkerServer((msg) => {\n            self.postMessage(msg);\n        }, editorWorker);\n        self.onmessage = (e) => {\n            simpleWorker.onmessage(e.data);\n        };\n    }\n    exports.initialize = initialize;\n    self.onmessage = (e) => {\n        // Ignore first message in this case and initialize if not yet initialized\n        if (!initialized) {\n            initialize(null);\n        }\n    };\n});\n",null]}