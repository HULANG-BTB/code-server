{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/viewsViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/viewsViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar mouseEvent_1 = require(\"vs/base/browser/mouseEvent\");\nvar panelViewlet_1 = require(\"vs/workbench/browser/parts/views/panelViewlet\");\nvar panelview_1 = require(\"vs/base/browser/ui/splitview/panelview\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar event_1 = require(\"vs/base/common/event\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar nls_1 = require(\"vs/nls\");\nvar views_2 = require(\"vs/workbench/browser/parts/views/views\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar ViewContainerViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewContainerViewlet, _super);\n    function ViewContainerViewlet(id, viewletStateStorageId, showHeaderInTitleWhenSingleView, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) {\n        var _this = _super.call(this, id, { showHeaderInTitleWhenSingleView: showHeaderInTitleWhenSingleView, dnd: new panelview_1.DefaultPanelDndController() }, configurationService, layoutService, contextMenuService, telemetryService, themeService, storageService) || this;\n        _this.storageService = storageService;\n        _this.instantiationService = instantiationService;\n        _this.contextMenuService = contextMenuService;\n        _this.extensionService = extensionService;\n        _this.contextService = contextService;\n        _this.didLayout = false;\n        _this.areExtensionsReady = false;\n        _this.viewDisposables = [];\n        var container = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).get(id);\n        _this.viewsModel = _this._register(_this.instantiationService.createInstance(views_2.PersistentContributableViewsModel, container, viewletStateStorageId));\n        _this.viewletState = _this.getMemento(storage_1.StorageScope.WORKSPACE);\n        _this.visibleViewsStorageId = id + \".numberOfVisibleViews\";\n        _this.visibleViewsCountFromCache = _this.storageService.getNumber(_this.visibleViewsStorageId, storage_1.StorageScope.WORKSPACE, 1);\n        _this._register(lifecycle_1.toDisposable(function () { return _this.viewDisposables = lifecycle_1.dispose(_this.viewDisposables); }));\n        return _this;\n    }\n    ViewContainerViewlet.prototype.create = function (parent) {\n        var _this = this;\n        _super.prototype.create.call(this, parent);\n        this._register(this.onDidSashChange(function () { return _this.saveViewSizes(); }));\n        this.viewsModel.onDidAdd(function (added) { return _this.onDidAddViews(added); });\n        this.viewsModel.onDidRemove(function (removed) { return _this.onDidRemoveViews(removed); });\n        var addedViews = this.viewsModel.visibleViewDescriptors.map(function (viewDescriptor, index) {\n            var size = _this.viewsModel.getSize(viewDescriptor.id);\n            var collapsed = _this.viewsModel.isCollapsed(viewDescriptor.id);\n            return ({ viewDescriptor: viewDescriptor, index: index, size: size, collapsed: collapsed });\n        });\n        if (addedViews.length) {\n            this.onDidAddViews(addedViews);\n        }\n        // Update headers after and title contributed views after available, since we read from cache in the beginning to know if the viewlet has single view or not. Ref #29609\n        this.extensionService.whenInstalledExtensionsRegistered().then(function () {\n            _this.areExtensionsReady = true;\n            if (_this.panels.length) {\n                _this.updateTitleArea();\n                _this.updateViewHeaders();\n            }\n        });\n        this.focus();\n    };\n    ViewContainerViewlet.prototype.getContextMenuActions = function () {\n        var _this = this;\n        var result = [];\n        var viewToggleActions = this.viewsModel.viewDescriptors.map(function (viewDescriptor) { return ({\n            id: viewDescriptor.id + \".toggleVisibility\",\n            label: viewDescriptor.name,\n            checked: _this.viewsModel.isVisible(viewDescriptor.id),\n            enabled: viewDescriptor.canToggleVisibility,\n            run: function () { return _this.toggleViewVisibility(viewDescriptor.id); }\n        }); });\n        result.push.apply(result, viewToggleActions);\n        var parentActions = _super.prototype.getContextMenuActions.call(this);\n        if (viewToggleActions.length && parentActions.length) {\n            result.push(new actionbar_1.Separator());\n        }\n        result.push.apply(result, parentActions);\n        return result;\n    };\n    ViewContainerViewlet.prototype.setVisible = function (visible) {\n        _super.prototype.setVisible.call(this, visible);\n        this.panels.filter(function (view) { return view.isVisible() !== visible; })\n            .map(function (view) { return view.setVisible(visible); });\n    };\n    ViewContainerViewlet.prototype.openView = function (id, focus) {\n        if (focus) {\n            this.focus();\n        }\n        var view = this.getView(id);\n        if (!view) {\n            this.toggleViewVisibility(id);\n        }\n        view = this.getView(id);\n        view.setExpanded(true);\n        if (focus) {\n            view.focus();\n        }\n        return view;\n    };\n    ViewContainerViewlet.prototype.movePanel = function (from, to) {\n        var fromIndex = arrays_1.firstIndex(this.panels, function (panel) { return panel === from; });\n        var toIndex = arrays_1.firstIndex(this.panels, function (panel) { return panel === to; });\n        var fromViewDescriptor = this.viewsModel.visibleViewDescriptors[fromIndex];\n        var toViewDescriptor = this.viewsModel.visibleViewDescriptors[toIndex];\n        _super.prototype.movePanel.call(this, from, to);\n        this.viewsModel.move(fromViewDescriptor.id, toViewDescriptor.id);\n    };\n    ViewContainerViewlet.prototype.layout = function (dimension) {\n        _super.prototype.layout.call(this, dimension);\n        this.dimension = dimension;\n        if (this.didLayout) {\n            this.saveViewSizes();\n        }\n        else {\n            this.didLayout = true;\n            this.restoreViewSizes();\n        }\n    };\n    ViewContainerViewlet.prototype.getOptimalWidth = function () {\n        var additionalMargin = 16;\n        var optimalWidth = Math.max.apply(Math, this.panels.map(function (view) { return view.getOptimalWidth() || 0; }));\n        return optimalWidth + additionalMargin;\n    };\n    ViewContainerViewlet.prototype.isSingleView = function () {\n        if (!_super.prototype.isSingleView.call(this)) {\n            return false;\n        }\n        if (!this.areExtensionsReady) {\n            // Check in cache so that view do not jump. See #29609\n            return this.visibleViewsCountFromCache === 1;\n        }\n        return true;\n    };\n    ViewContainerViewlet.prototype.createView = function (viewDescriptor, options) {\n        var _a;\n        return (_a = this.instantiationService).createInstance.apply(_a, [viewDescriptor.ctorDescriptor.ctor].concat((viewDescriptor.ctorDescriptor.arguments || []), [options]));\n    };\n    ViewContainerViewlet.prototype.getView = function (id) {\n        return this.panels.filter(function (view) { return view.id === id; })[0];\n    };\n    ViewContainerViewlet.prototype.onDidAddViews = function (added) {\n        var _this = this;\n        var panelsToAdd = [];\n        var _loop_1 = function (viewDescriptor, collapsed, index, size) {\n            var panel = this_1.createView(viewDescriptor, {\n                id: viewDescriptor.id,\n                title: viewDescriptor.name,\n                actionRunner: this_1.getActionRunner(),\n                expanded: !collapsed,\n                viewletState: this_1.viewletState\n            });\n            panel.render();\n            var contextMenuDisposable = DOM.addDisposableListener(panel.draggableElement, 'contextmenu', function (e) {\n                e.stopPropagation();\n                e.preventDefault();\n                _this.onContextMenu(new mouseEvent_1.StandardMouseEvent(e), viewDescriptor);\n            });\n            var collapseDisposable = event_1.Event.latch(event_1.Event.map(panel.onDidChange, function () { return !panel.isExpanded(); }))(function (collapsed) {\n                _this.viewsModel.setCollapsed(viewDescriptor.id, collapsed);\n            });\n            this_1.viewDisposables.splice(index, 0, lifecycle_1.combinedDisposable([contextMenuDisposable, collapseDisposable]));\n            panelsToAdd.push({ panel: panel, size: size || panel.minimumSize, index: index });\n        };\n        var this_1 = this;\n        for (var _i = 0, added_1 = added; _i < added_1.length; _i++) {\n            var _a = added_1[_i], viewDescriptor = _a.viewDescriptor, collapsed = _a.collapsed, index = _a.index, size = _a.size;\n            _loop_1(viewDescriptor, collapsed, index, size);\n        }\n        this.addPanels(panelsToAdd);\n        this.restoreViewSizes();\n        var panels = [];\n        for (var _b = 0, panelsToAdd_1 = panelsToAdd; _b < panelsToAdd_1.length; _b++) {\n            var panel = panelsToAdd_1[_b].panel;\n            panel.setVisible(this.isVisible());\n            panels.push(panel);\n        }\n        return panels;\n    };\n    ViewContainerViewlet.prototype.onDidRemoveViews = function (removed) {\n        removed = removed.sort(function (a, b) { return b.index - a.index; });\n        var panelsToRemove = [];\n        for (var _i = 0, removed_1 = removed; _i < removed_1.length; _i++) {\n            var index = removed_1[_i].index;\n            var disposable = this.viewDisposables.splice(index, 1)[0];\n            disposable.dispose();\n            panelsToRemove.push(this.panels[index]);\n        }\n        this.removePanels(panelsToRemove);\n        lifecycle_1.dispose(panelsToRemove);\n    };\n    ViewContainerViewlet.prototype.onContextMenu = function (event, viewDescriptor) {\n        var _this = this;\n        event.stopPropagation();\n        event.preventDefault();\n        var actions = [];\n        actions.push({\n            id: viewDescriptor.id + \".removeView\",\n            label: nls_1.localize('hideView', \"Hide\"),\n            enabled: viewDescriptor.canToggleVisibility,\n            run: function () { return _this.toggleViewVisibility(viewDescriptor.id); }\n        });\n        var otherActions = this.getContextMenuActions();\n        if (otherActions.length) {\n            actions.push.apply(actions, [new actionbar_1.Separator()].concat(otherActions));\n        }\n        var anchor = { x: event.posx, y: event.posy };\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return anchor; },\n            getActions: function () { return actions; }\n        });\n    };\n    ViewContainerViewlet.prototype.toggleViewVisibility = function (viewId) {\n        var visible = !this.viewsModel.isVisible(viewId);\n        /* __GDPR__\n            \"views.toggleVisibility\" : {\n                \"viewId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"visible\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this.telemetryService.publicLog('views.toggledVisibility', { viewId: viewId, visible: visible });\n        this.viewsModel.setVisible(viewId, visible);\n    };\n    ViewContainerViewlet.prototype.saveViewSizes = function () {\n        // Save size only when the layout has happened\n        if (this.didLayout) {\n            for (var _i = 0, _a = this.panels; _i < _a.length; _i++) {\n                var view = _a[_i];\n                this.viewsModel.setSize(view.id, this.getPanelSize(view));\n            }\n        }\n    };\n    ViewContainerViewlet.prototype.restoreViewSizes = function () {\n        // Restore sizes only when the layout has happened\n        if (this.didLayout) {\n            var initialSizes = void 0;\n            for (var i = 0; i < this.viewsModel.visibleViewDescriptors.length; i++) {\n                var panel = this.panels[i];\n                var viewDescriptor = this.viewsModel.visibleViewDescriptors[i];\n                var size = this.viewsModel.getSize(viewDescriptor.id);\n                if (typeof size === 'number') {\n                    this.resizePanel(panel, size);\n                }\n                else {\n                    initialSizes = initialSizes ? initialSizes : this.computeInitialSizes();\n                    this.resizePanel(panel, initialSizes[panel.id] || 200);\n                }\n            }\n        }\n    };\n    ViewContainerViewlet.prototype.computeInitialSizes = function () {\n        var sizes = {};\n        if (this.dimension) {\n            var totalWeight = this.viewsModel.visibleViewDescriptors.reduce(function (totalWeight, _a) {\n                var weight = _a.weight;\n                return totalWeight + (weight || 20);\n            }, 0);\n            for (var _i = 0, _a = this.viewsModel.visibleViewDescriptors; _i < _a.length; _i++) {\n                var viewDescriptor = _a[_i];\n                sizes[viewDescriptor.id] = this.dimension.height * (viewDescriptor.weight || 20) / totalWeight;\n            }\n        }\n        return sizes;\n    };\n    ViewContainerViewlet.prototype.saveState = function () {\n        this.panels.forEach(function (view) { return view.saveState(); });\n        this.storageService.store(this.visibleViewsStorageId, this.length, storage_1.StorageScope.WORKSPACE);\n        _super.prototype.saveState.call(this);\n    };\n    ViewContainerViewlet = tslib_1.__decorate([\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, storage_1.IStorageService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, themeService_1.IThemeService),\n        tslib_1.__param(9, contextView_1.IContextMenuService),\n        tslib_1.__param(10, extensions_1.IExtensionService),\n        tslib_1.__param(11, workspace_1.IWorkspaceContextService)\n    ], ViewContainerViewlet);\n    return ViewContainerViewlet;\n}(panelViewlet_1.PanelViewlet));\nexports.ViewContainerViewlet = ViewContainerViewlet;\nvar FileIconThemableWorkbenchTree = /** @class */ (function (_super) {\n    tslib_1.__extends(FileIconThemableWorkbenchTree, _super);\n    function FileIconThemableWorkbenchTree(container, configuration, options, contextKeyService, listService, themeService, configurationService, instantiationService) {\n        var _this = _super.call(this, container, configuration, tslib_1.__assign({}, options, { showTwistie: false, twistiePixels: 12 }), contextKeyService, listService, themeService, instantiationService, configurationService) || this;\n        DOM.addClass(container, 'file-icon-themable-tree');\n        DOM.addClass(container, 'show-file-icons');\n        var onFileIconThemeChange = function (fileIconTheme) {\n            DOM.toggleClass(container, 'align-icons-and-twisties', fileIconTheme.hasFileIcons && !fileIconTheme.hasFolderIcons);\n            DOM.toggleClass(container, 'hide-arrows', fileIconTheme.hidesExplorerArrows === true);\n        };\n        _this.disposables.push(themeService.onDidFileIconThemeChange(onFileIconThemeChange));\n        onFileIconThemeChange(themeService.getFileIconTheme());\n        return _this;\n    }\n    FileIconThemableWorkbenchTree = tslib_1.__decorate([\n        tslib_1.__param(3, contextkey_1.IContextKeyService),\n        tslib_1.__param(4, listService_1.IListService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, configuration_1.IConfigurationService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService)\n    ], FileIconThemableWorkbenchTree);\n    return FileIconThemableWorkbenchTree;\n}(listService_1.WorkbenchTree));\nexports.FileIconThemableWorkbenchTree = FileIconThemableWorkbenchTree;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/viewsViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/viewsViewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { dispose, IDisposable, combinedDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IAction } from 'vs/base/common/actions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { firstIndex } from 'vs/base/common/arrays';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IViewDescriptor, IViewsViewlet, IViewContainersRegistry, Extensions as ViewContainerExtensions, IView } from 'vs/workbench/common/views';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { PanelViewlet, ViewletPanel, IViewletPanelOptions } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { DefaultPanelDndController } from 'vs/base/browser/ui/splitview/panelview';\nimport { WorkbenchTree, IListService } from 'vs/platform/list/browser/listService';\nimport { IWorkbenchThemeService, IFileIconTheme } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { ITreeConfiguration, ITreeOptions } from 'vs/base/parts/tree/browser/tree';\nimport { Event } from 'vs/base/common/event';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { localize } from 'vs/nls';\nimport { IAddedViewDescriptorRef, IViewDescriptorRef, PersistentContributableViewsModel } from 'vs/workbench/browser/parts/views/views';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport interface IViewletViewOptions extends IViewletPanelOptions {\n\tviewletState: object;\n}\n\nexport abstract class ViewContainerViewlet extends PanelViewlet implements IViewsViewlet {\n\n\tprivate readonly viewletState: object;\n\tprivate didLayout = false;\n\tprivate dimension: DOM.Dimension;\n\tprivate areExtensionsReady: boolean = false;\n\n\tprivate readonly visibleViewsCountFromCache: number;\n\tprivate readonly visibleViewsStorageId: string;\n\tprotected readonly viewsModel: PersistentContributableViewsModel;\n\tprivate viewDisposables: IDisposable[] = [];\n\n\tconstructor(\n\t\tid: string,\n\t\tviewletStateStorageId: string,\n\t\tshowHeaderInTitleWhenSingleView: boolean,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService protected storageService: IStorageService,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService protected contextMenuService: IContextMenuService,\n\t\t@IExtensionService protected extensionService: IExtensionService,\n\t\t@IWorkspaceContextService protected contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(id, { showHeaderInTitleWhenSingleView, dnd: new DefaultPanelDndController() }, configurationService, layoutService, contextMenuService, telemetryService, themeService, storageService);\n\n\t\tconst container = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).get(id);\n\t\tthis.viewsModel = this._register(this.instantiationService.createInstance(PersistentContributableViewsModel, container, viewletStateStorageId));\n\t\tthis.viewletState = this.getMemento(StorageScope.WORKSPACE);\n\n\t\tthis.visibleViewsStorageId = `${id}.numberOfVisibleViews`;\n\t\tthis.visibleViewsCountFromCache = this.storageService.getNumber(this.visibleViewsStorageId, StorageScope.WORKSPACE, 1);\n\t\tthis._register(toDisposable(() => this.viewDisposables = dispose(this.viewDisposables)));\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tthis._register(this.onDidSashChange(() => this.saveViewSizes()));\n\t\tthis.viewsModel.onDidAdd(added => this.onDidAddViews(added));\n\t\tthis.viewsModel.onDidRemove(removed => this.onDidRemoveViews(removed));\n\t\tconst addedViews: IAddedViewDescriptorRef[] = this.viewsModel.visibleViewDescriptors.map((viewDescriptor, index) => {\n\t\t\tconst size = this.viewsModel.getSize(viewDescriptor.id);\n\t\t\tconst collapsed = this.viewsModel.isCollapsed(viewDescriptor.id);\n\t\t\treturn ({ viewDescriptor, index, size, collapsed });\n\t\t});\n\t\tif (addedViews.length) {\n\t\t\tthis.onDidAddViews(addedViews);\n\t\t}\n\n\t\t// Update headers after and title contributed views after available, since we read from cache in the beginning to know if the viewlet has single view or not. Ref #29609\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tthis.areExtensionsReady = true;\n\t\t\tif (this.panels.length) {\n\t\t\t\tthis.updateTitleArea();\n\t\t\t\tthis.updateViewHeaders();\n\t\t\t}\n\t\t});\n\n\t\tthis.focus();\n\t}\n\n\tgetContextMenuActions(): IAction[] {\n\t\tconst result: IAction[] = [];\n\t\tconst viewToggleActions = this.viewsModel.viewDescriptors.map(viewDescriptor => (<IAction>{\n\t\t\tid: `${viewDescriptor.id}.toggleVisibility`,\n\t\t\tlabel: viewDescriptor.name,\n\t\t\tchecked: this.viewsModel.isVisible(viewDescriptor.id),\n\t\t\tenabled: viewDescriptor.canToggleVisibility,\n\t\t\trun: () => this.toggleViewVisibility(viewDescriptor.id)\n\t\t}));\n\n\t\tresult.push(...viewToggleActions);\n\t\tconst parentActions = super.getContextMenuActions();\n\t\tif (viewToggleActions.length && parentActions.length) {\n\t\t\tresult.push(new Separator());\n\t\t}\n\n\t\tresult.push(...parentActions);\n\t\treturn result;\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tsuper.setVisible(visible);\n\t\tthis.panels.filter(view => view.isVisible() !== visible)\n\t\t\t.map((view) => view.setVisible(visible));\n\t}\n\n\topenView(id: string, focus?: boolean): IView {\n\t\tif (focus) {\n\t\t\tthis.focus();\n\t\t}\n\t\tlet view = this.getView(id);\n\t\tif (!view) {\n\t\t\tthis.toggleViewVisibility(id);\n\t\t}\n\t\tview = this.getView(id);\n\t\tview.setExpanded(true);\n\t\tif (focus) {\n\t\t\tview.focus();\n\t\t}\n\t\treturn view;\n\t}\n\n\tmovePanel(from: ViewletPanel, to: ViewletPanel): void {\n\t\tconst fromIndex = firstIndex(this.panels, panel => panel === from);\n\t\tconst toIndex = firstIndex(this.panels, panel => panel === to);\n\t\tconst fromViewDescriptor = this.viewsModel.visibleViewDescriptors[fromIndex];\n\t\tconst toViewDescriptor = this.viewsModel.visibleViewDescriptors[toIndex];\n\n\t\tsuper.movePanel(from, to);\n\t\tthis.viewsModel.move(fromViewDescriptor.id, toViewDescriptor.id);\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\t\tsuper.layout(dimension);\n\t\tthis.dimension = dimension;\n\t\tif (this.didLayout) {\n\t\t\tthis.saveViewSizes();\n\t\t} else {\n\t\t\tthis.didLayout = true;\n\t\t\tthis.restoreViewSizes();\n\t\t}\n\t}\n\n\tgetOptimalWidth(): number {\n\t\tconst additionalMargin = 16;\n\t\tconst optimalWidth = Math.max(...this.panels.map(view => view.getOptimalWidth() || 0));\n\t\treturn optimalWidth + additionalMargin;\n\t}\n\n\tprotected isSingleView(): boolean {\n\t\tif (!super.isSingleView()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.areExtensionsReady) {\n\t\t\t// Check in cache so that view do not jump. See #29609\n\t\t\treturn this.visibleViewsCountFromCache === 1;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewletPanel {\n\t\treturn (this.instantiationService as any).createInstance(viewDescriptor.ctorDescriptor.ctor, ...(viewDescriptor.ctorDescriptor.arguments || []), options) as ViewletPanel;\n\t}\n\n\tprotected getView(id: string): ViewletPanel {\n\t\treturn this.panels.filter(view => view.id === id)[0];\n\t}\n\n\tprotected onDidAddViews(added: IAddedViewDescriptorRef[]): ViewletPanel[] {\n\t\tconst panelsToAdd: { panel: ViewletPanel, size: number, index: number }[] = [];\n\t\tfor (const { viewDescriptor, collapsed, index, size } of added) {\n\t\t\tconst panel = this.createView(viewDescriptor,\n\t\t\t\t{\n\t\t\t\t\tid: viewDescriptor.id,\n\t\t\t\t\ttitle: viewDescriptor.name,\n\t\t\t\t\tactionRunner: this.getActionRunner(),\n\t\t\t\t\texpanded: !collapsed,\n\t\t\t\t\tviewletState: this.viewletState\n\t\t\t\t});\n\t\t\tpanel.render();\n\t\t\tconst contextMenuDisposable = DOM.addDisposableListener(panel.draggableElement, 'contextmenu', e => {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.onContextMenu(new StandardMouseEvent(e), viewDescriptor);\n\t\t\t});\n\n\t\t\tconst collapseDisposable = Event.latch(Event.map(panel.onDidChange, () => !panel.isExpanded()))(collapsed => {\n\t\t\t\tthis.viewsModel.setCollapsed(viewDescriptor.id, collapsed);\n\t\t\t});\n\n\t\t\tthis.viewDisposables.splice(index, 0, combinedDisposable([contextMenuDisposable, collapseDisposable]));\n\t\t\tpanelsToAdd.push({ panel, size: size || panel.minimumSize, index });\n\t\t}\n\n\t\tthis.addPanels(panelsToAdd);\n\t\tthis.restoreViewSizes();\n\n\t\tconst panels: ViewletPanel[] = [];\n\t\tfor (const { panel } of panelsToAdd) {\n\t\t\tpanel.setVisible(this.isVisible());\n\t\t\tpanels.push(panel);\n\t\t}\n\t\treturn panels;\n\t}\n\n\tprivate onDidRemoveViews(removed: IViewDescriptorRef[]): void {\n\t\tremoved = removed.sort((a, b) => b.index - a.index);\n\t\tconst panelsToRemove: ViewletPanel[] = [];\n\t\tfor (const { index } of removed) {\n\t\t\tconst [disposable] = this.viewDisposables.splice(index, 1);\n\t\t\tdisposable.dispose();\n\t\t\tpanelsToRemove.push(this.panels[index]);\n\t\t}\n\t\tthis.removePanels(panelsToRemove);\n\t\tdispose(panelsToRemove);\n\t}\n\n\tprivate onContextMenu(event: StandardMouseEvent, viewDescriptor: IViewDescriptor): void {\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\n\t\tconst actions: IAction[] = [];\n\t\tactions.push(<IAction>{\n\t\t\tid: `${viewDescriptor.id}.removeView`,\n\t\t\tlabel: localize('hideView', \"Hide\"),\n\t\t\tenabled: viewDescriptor.canToggleVisibility,\n\t\t\trun: () => this.toggleViewVisibility(viewDescriptor.id)\n\t\t});\n\t\tconst otherActions = this.getContextMenuActions();\n\t\tif (otherActions.length) {\n\t\t\tactions.push(...[new Separator(), ...otherActions]);\n\t\t}\n\n\t\tlet anchor: { x: number, y: number } = { x: event.posx, y: event.posy };\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => anchor,\n\t\t\tgetActions: () => actions\n\t\t});\n\t}\n\n\tprivate toggleViewVisibility(viewId: string): void {\n\t\tconst visible = !this.viewsModel.isVisible(viewId);\n\t\t/* __GDPR__\n\t\t\t\"views.toggleVisibility\" : {\n\t\t\t\t\"viewId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"visible\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('views.toggledVisibility', { viewId, visible });\n\t\tthis.viewsModel.setVisible(viewId, visible);\n\t}\n\n\tprivate saveViewSizes(): void {\n\t\t// Save size only when the layout has happened\n\t\tif (this.didLayout) {\n\t\t\tfor (const view of this.panels) {\n\t\t\t\tthis.viewsModel.setSize(view.id, this.getPanelSize(view));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate restoreViewSizes(): void {\n\t\t// Restore sizes only when the layout has happened\n\t\tif (this.didLayout) {\n\t\t\tlet initialSizes;\n\t\t\tfor (let i = 0; i < this.viewsModel.visibleViewDescriptors.length; i++) {\n\t\t\t\tconst panel = this.panels[i];\n\t\t\t\tconst viewDescriptor = this.viewsModel.visibleViewDescriptors[i];\n\t\t\t\tconst size = this.viewsModel.getSize(viewDescriptor.id);\n\n\t\t\t\tif (typeof size === 'number') {\n\t\t\t\t\tthis.resizePanel(panel, size);\n\t\t\t\t} else {\n\t\t\t\t\tinitialSizes = initialSizes ? initialSizes : this.computeInitialSizes();\n\t\t\t\t\tthis.resizePanel(panel, initialSizes[panel.id] || 200);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate computeInitialSizes(): { [id: string]: number } {\n\t\tlet sizes = {};\n\t\tif (this.dimension) {\n\t\t\tconst totalWeight = this.viewsModel.visibleViewDescriptors.reduce((totalWeight, { weight }) => totalWeight + (weight || 20), 0);\n\t\t\tfor (const viewDescriptor of this.viewsModel.visibleViewDescriptors) {\n\t\t\t\tsizes[viewDescriptor.id] = this.dimension.height * (viewDescriptor.weight || 20) / totalWeight;\n\t\t\t}\n\t\t}\n\t\treturn sizes;\n\t}\n\n\tprotected saveState(): void {\n\t\tthis.panels.forEach((view) => view.saveState());\n\t\tthis.storageService.store(this.visibleViewsStorageId, this.length, StorageScope.WORKSPACE);\n\n\t\tsuper.saveState();\n\t}\n}\n\nexport class FileIconThemableWorkbenchTree extends WorkbenchTree {\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tconfiguration: ITreeConfiguration,\n\t\toptions: ITreeOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IWorkbenchThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper(container, configuration, { ...options, ...{ showTwistie: false, twistiePixels: 12 } }, contextKeyService, listService, themeService, instantiationService, configurationService);\n\n\t\tDOM.addClass(container, 'file-icon-themable-tree');\n\t\tDOM.addClass(container, 'show-file-icons');\n\n\t\tconst onFileIconThemeChange = (fileIconTheme: IFileIconTheme) => {\n\t\t\tDOM.toggleClass(container, 'align-icons-and-twisties', fileIconTheme.hasFileIcons && !fileIconTheme.hasFolderIcons);\n\t\t\tDOM.toggleClass(container, 'hide-arrows', fileIconTheme.hidesExplorerArrows === true);\n\t\t};\n\n\t\tthis.disposables.push(themeService.onDidFileIconThemeChange(onFileIconThemeChange));\n\t\tonFileIconThemeChange(themeService.getFileIconTheme());\n\t}\n}\n"]}]}