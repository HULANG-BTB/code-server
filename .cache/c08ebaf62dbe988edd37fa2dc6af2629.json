{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowsService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/electron-browser/windowsService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/workspaces/common/workspaces\", \"vs/platform/history/common/history\", \"vs/base/common/uri\", \"vs/platform/ipc/electron-browser/mainProcessService\"], function (require, exports, workspaces_1, history_1, uri_1, mainProcessService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WindowsService = class WindowsService {\n        constructor(mainProcessService) {\n            this.channel = mainProcessService.getChannel('windows');\n        }\n        get onWindowOpen() { return this.channel.listen('onWindowOpen'); }\n        get onWindowFocus() { return this.channel.listen('onWindowFocus'); }\n        get onWindowBlur() { return this.channel.listen('onWindowBlur'); }\n        get onWindowMaximize() { return this.channel.listen('onWindowMaximize'); }\n        get onWindowUnmaximize() { return this.channel.listen('onWindowUnmaximize'); }\n        get onRecentlyOpenedChange() { return this.channel.listen('onRecentlyOpenedChange'); }\n        pickFileFolderAndOpen(options) {\n            return this.channel.call('pickFileFolderAndOpen', options);\n        }\n        pickFileAndOpen(options) {\n            return this.channel.call('pickFileAndOpen', options);\n        }\n        pickFolderAndOpen(options) {\n            return this.channel.call('pickFolderAndOpen', options);\n        }\n        pickWorkspaceAndOpen(options) {\n            return this.channel.call('pickWorkspaceAndOpen', options);\n        }\n        showMessageBox(windowId, options) {\n            return this.channel.call('showMessageBox', [windowId, options]);\n        }\n        showSaveDialog(windowId, options) {\n            return this.channel.call('showSaveDialog', [windowId, options]);\n        }\n        showOpenDialog(windowId, options) {\n            return this.channel.call('showOpenDialog', [windowId, options]);\n        }\n        reloadWindow(windowId, args) {\n            return this.channel.call('reloadWindow', [windowId, args]);\n        }\n        openDevTools(windowId, options) {\n            return this.channel.call('openDevTools', [windowId, options]);\n        }\n        toggleDevTools(windowId) {\n            return this.channel.call('toggleDevTools', windowId);\n        }\n        closeWorkspace(windowId) {\n            return this.channel.call('closeWorkspace', windowId);\n        }\n        enterWorkspace(windowId, path) {\n            return this.channel.call('enterWorkspace', [windowId, path]).then((result) => {\n                result.workspace = workspaces_1.reviveWorkspaceIdentifier(result.workspace);\n                return result;\n            });\n        }\n        toggleFullScreen(windowId) {\n            return this.channel.call('toggleFullScreen', windowId);\n        }\n        setRepresentedFilename(windowId, fileName) {\n            return this.channel.call('setRepresentedFilename', [windowId, fileName]);\n        }\n        addRecentlyOpened(recent) {\n            return this.channel.call('addRecentlyOpened', recent);\n        }\n        removeFromRecentlyOpened(paths) {\n            return this.channel.call('removeFromRecentlyOpened', paths);\n        }\n        clearRecentlyOpened() {\n            return this.channel.call('clearRecentlyOpened');\n        }\n        getRecentlyOpened(windowId) {\n            return this.channel.call('getRecentlyOpened', windowId)\n                .then((recentlyOpened) => {\n                recentlyOpened.workspaces.forEach(recent => history_1.isRecentWorkspace(recent) ? recent.workspace = workspaces_1.reviveWorkspaceIdentifier(recent.workspace) : recent.folderUri = uri_1.URI.revive(recent.folderUri));\n                recentlyOpened.files.forEach(recent => recent.fileUri = uri_1.URI.revive(recent.fileUri));\n                return recentlyOpened;\n            });\n        }\n        newWindowTab() {\n            return this.channel.call('newWindowTab');\n        }\n        showPreviousWindowTab() {\n            return this.channel.call('showPreviousWindowTab');\n        }\n        showNextWindowTab() {\n            return this.channel.call('showNextWindowTab');\n        }\n        moveWindowTabToNewWindow() {\n            return this.channel.call('moveWindowTabToNewWindow');\n        }\n        mergeAllWindowTabs() {\n            return this.channel.call('mergeAllWindowTabs');\n        }\n        toggleWindowTabsBar() {\n            return this.channel.call('toggleWindowTabsBar');\n        }\n        focusWindow(windowId) {\n            return this.channel.call('focusWindow', windowId);\n        }\n        closeWindow(windowId) {\n            return this.channel.call('closeWindow', windowId);\n        }\n        isFocused(windowId) {\n            return this.channel.call('isFocused', windowId);\n        }\n        isMaximized(windowId) {\n            return this.channel.call('isMaximized', windowId);\n        }\n        maximizeWindow(windowId) {\n            return this.channel.call('maximizeWindow', windowId);\n        }\n        unmaximizeWindow(windowId) {\n            return this.channel.call('unmaximizeWindow', windowId);\n        }\n        minimizeWindow(windowId) {\n            return this.channel.call('minimizeWindow', windowId);\n        }\n        onWindowTitleDoubleClick(windowId) {\n            return this.channel.call('onWindowTitleDoubleClick', windowId);\n        }\n        setDocumentEdited(windowId, flag) {\n            return this.channel.call('setDocumentEdited', [windowId, flag]);\n        }\n        quit() {\n            return this.channel.call('quit');\n        }\n        relaunch(options) {\n            return this.channel.call('relaunch', [options]);\n        }\n        whenSharedProcessReady() {\n            return this.channel.call('whenSharedProcessReady');\n        }\n        toggleSharedProcess() {\n            return this.channel.call('toggleSharedProcess');\n        }\n        openWindow(windowId, uris, options) {\n            return this.channel.call('openWindow', [windowId, uris, options]);\n        }\n        openNewWindow(options) {\n            return this.channel.call('openNewWindow', options);\n        }\n        getWindows() {\n            return this.channel.call('getWindows').then(result => {\n                for (const win of result) {\n                    if (win.folderUri) {\n                        win.folderUri = uri_1.URI.revive(win.folderUri);\n                    }\n                    if (win.workspace) {\n                        win.workspace = workspaces_1.reviveWorkspaceIdentifier(win.workspace);\n                    }\n                }\n                return result;\n            });\n        }\n        getWindowCount() {\n            return this.channel.call('getWindowCount');\n        }\n        log(severity, ...messages) {\n            return this.channel.call('log', [severity, messages]);\n        }\n        showItemInFolder(path) {\n            return this.channel.call('showItemInFolder', path);\n        }\n        getActiveWindowId() {\n            return this.channel.call('getActiveWindowId');\n        }\n        openExternal(url) {\n            return this.channel.call('openExternal', url);\n        }\n        startCrashReporter(config) {\n            return this.channel.call('startCrashReporter', config);\n        }\n        updateTouchBar(windowId, items) {\n            return this.channel.call('updateTouchBar', [windowId, items]);\n        }\n        openAboutDialog() {\n            return this.channel.call('openAboutDialog');\n        }\n        resolveProxy(windowId, url) {\n            return Promise.resolve(this.channel.call('resolveProxy', [windowId, url]));\n        }\n    };\n    WindowsService = __decorate([\n        __param(0, mainProcessService_1.IMainProcessService)\n    ], WindowsService);\n    exports.WindowsService = WindowsService;\n});\n",null]}