{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os = require(\"os\");\nvar platform = require(\"vs/base/common/platform\");\nvar processes = require(\"vs/base/node/processes\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nfunction getDefaultShell(p) {\n    if (p === platform.Platform.Windows) {\n        if (platform.isWindows) {\n            return getTerminalDefaultShellWindows();\n        }\n        // Don't detect Windows shell when not on Windows\n        return processes.getWindowsShell();\n    }\n    // Only use $SHELL for the current OS\n    if (platform.isLinux && p === platform.Platform.Mac || platform.isMacintosh && p === platform.Platform.Linux) {\n        return '/bin/bash';\n    }\n    return getTerminalDefaultShellUnixLike();\n}\nexports.getDefaultShell = getDefaultShell;\nvar _TERMINAL_DEFAULT_SHELL_UNIX_LIKE = null;\nfunction getTerminalDefaultShellUnixLike() {\n    if (!_TERMINAL_DEFAULT_SHELL_UNIX_LIKE) {\n        var unixLikeTerminal = 'sh';\n        if (!platform.isWindows && process.env.SHELL) {\n            unixLikeTerminal = process.env.SHELL;\n            // Some systems have $SHELL set to /bin/false which breaks the terminal\n            if (unixLikeTerminal === '/bin/false') {\n                unixLikeTerminal = '/bin/bash';\n            }\n        }\n        if (platform.isWindows) {\n            unixLikeTerminal = '/bin/bash'; // for WSL\n        }\n        _TERMINAL_DEFAULT_SHELL_UNIX_LIKE = unixLikeTerminal;\n    }\n    return _TERMINAL_DEFAULT_SHELL_UNIX_LIKE;\n}\nvar _TERMINAL_DEFAULT_SHELL_WINDOWS = null;\nfunction getTerminalDefaultShellWindows() {\n    if (!_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n        var isAtLeastWindows10 = platform.isWindows && parseFloat(os.release()) >= 10;\n        var is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n        var powerShellPath = process.env.windir + \"\\\\\" + (is32ProcessOn64Windows ? 'Sysnative' : 'System32') + \"\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\";\n        _TERMINAL_DEFAULT_SHELL_WINDOWS = isAtLeastWindows10 ? powerShellPath : processes.getWindowsShell();\n    }\n    return _TERMINAL_DEFAULT_SHELL_WINDOWS;\n}\nvar detectedDistro = terminal_1.LinuxDistro.Unknown;\nif (platform.isLinux) {\n    var file_1 = '/etc/os-release';\n    pfs_1.fileExists(file_1).then(function (exists) {\n        if (!exists) {\n            return;\n        }\n        pfs_1.readFile(file_1).then(function (b) {\n            var contents = b.toString();\n            if (/NAME=\"?Fedora\"?/.test(contents)) {\n                detectedDistro = terminal_1.LinuxDistro.Fedora;\n            }\n            else if (/NAME=\"?Ubuntu\"?/.test(contents)) {\n                detectedDistro = terminal_1.LinuxDistro.Ubuntu;\n            }\n        });\n    });\n}\nexports.linuxDistro = detectedDistro;\nfunction getWindowsBuildNumber() {\n    var osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n    var buildNumber = 0;\n    if (osVersion && osVersion.length === 4) {\n        buildNumber = parseInt(osVersion[3]);\n    }\n    return buildNumber;\n}\nexports.getWindowsBuildNumber = getWindowsBuildNumber;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from 'os';\nimport * as platform from 'vs/base/common/platform';\nimport * as processes from 'vs/base/node/processes';\nimport { readFile, fileExists } from 'vs/base/node/pfs';\nimport { LinuxDistro } from 'vs/workbench/contrib/terminal/common/terminal';\n\nexport function getDefaultShell(p: platform.Platform): string {\n\tif (p === platform.Platform.Windows) {\n\t\tif (platform.isWindows) {\n\t\t\treturn getTerminalDefaultShellWindows();\n\t\t}\n\t\t// Don't detect Windows shell when not on Windows\n\t\treturn processes.getWindowsShell();\n\t}\n\t// Only use $SHELL for the current OS\n\tif (platform.isLinux && p === platform.Platform.Mac || platform.isMacintosh && p === platform.Platform.Linux) {\n\t\treturn '/bin/bash';\n\t}\n\treturn getTerminalDefaultShellUnixLike();\n}\n\nlet _TERMINAL_DEFAULT_SHELL_UNIX_LIKE: string | null = null;\nfunction getTerminalDefaultShellUnixLike(): string {\n\tif (!_TERMINAL_DEFAULT_SHELL_UNIX_LIKE) {\n\t\tlet unixLikeTerminal = 'sh';\n\t\tif (!platform.isWindows && process.env.SHELL) {\n\t\t\tunixLikeTerminal = process.env.SHELL;\n\t\t\t// Some systems have $SHELL set to /bin/false which breaks the terminal\n\t\t\tif (unixLikeTerminal === '/bin/false') {\n\t\t\t\tunixLikeTerminal = '/bin/bash';\n\t\t\t}\n\t\t}\n\t\tif (platform.isWindows) {\n\t\t\tunixLikeTerminal = '/bin/bash'; // for WSL\n\t\t}\n\t\t_TERMINAL_DEFAULT_SHELL_UNIX_LIKE = unixLikeTerminal;\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_UNIX_LIKE;\n}\n\nlet _TERMINAL_DEFAULT_SHELL_WINDOWS: string | null = null;\nfunction getTerminalDefaultShellWindows(): string {\n\tif (!_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n\t\tconst isAtLeastWindows10 = platform.isWindows && parseFloat(os.release()) >= 10;\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\tconst powerShellPath = `${process.env.windir}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`;\n\t\t_TERMINAL_DEFAULT_SHELL_WINDOWS = isAtLeastWindows10 ? powerShellPath : processes.getWindowsShell();\n\t}\n\treturn _TERMINAL_DEFAULT_SHELL_WINDOWS;\n}\n\nlet detectedDistro = LinuxDistro.Unknown;\nif (platform.isLinux) {\n\tconst file = '/etc/os-release';\n\tfileExists(file).then(exists => {\n\t\tif (!exists) {\n\t\t\treturn;\n\t\t}\n\t\treadFile(file).then(b => {\n\t\t\tconst contents = b.toString();\n\t\t\tif (/NAME=\"?Fedora\"?/.test(contents)) {\n\t\t\t\tdetectedDistro = LinuxDistro.Fedora;\n\t\t\t} else if (/NAME=\"?Ubuntu\"?/.test(contents)) {\n\t\t\t\tdetectedDistro = LinuxDistro.Ubuntu;\n\t\t\t}\n\t\t});\n\t});\n}\n\nexport const linuxDistro = detectedDistro;\n\nexport function getWindowsBuildNumber(): number {\n\tconst osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n\tlet buildNumber: number = 0;\n\tif (osVersion && osVersion.length === 4) {\n\t\tbuildNumber = parseInt(osVersion[3]);\n\t}\n\treturn buildNumber;\n}\n"]}]}