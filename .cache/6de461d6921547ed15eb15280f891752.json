{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/apiCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/apiCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar typeConverters = require(\"vs/workbench/api/node/extHostTypeConverters\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar download_1 = require(\"vs/platform/download/common/download\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nfunction adjustHandler(handler) {\n    return function (accessor) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return handler.apply(void 0, [accessor.get(commands_1.ICommandService)].concat(args));\n    };\n}\nvar OpenFolderAPICommand = /** @class */ (function () {\n    function OpenFolderAPICommand() {\n    }\n    OpenFolderAPICommand.execute = function (executor, uri, arg) {\n        if (arg === void 0) { arg = {}; }\n        if (typeof arg === 'boolean') {\n            arg = { forceNewWindow: arg };\n        }\n        if (!uri) {\n            return executor.executeCommand('_files.pickFolderAndOpen', arg.forceNewWindow);\n        }\n        var options = { forceNewWindow: arg.forceNewWindow, noRecentEntry: arg.noRecentEntry };\n        uri = uri_1.URI.revive(uri);\n        return executor.executeCommand('_files.windowOpen', [{ uri: uri }], options);\n    };\n    OpenFolderAPICommand.ID = 'vscode.openFolder';\n    return OpenFolderAPICommand;\n}());\nexports.OpenFolderAPICommand = OpenFolderAPICommand;\ncommands_1.CommandsRegistry.registerCommand({\n    id: OpenFolderAPICommand.ID,\n    handler: adjustHandler(OpenFolderAPICommand.execute),\n    description: {\n        description: 'Open a folder or workspace in the current window or new window depending on the newWindow argument. Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.',\n        args: [\n            { name: 'uri', description: '(optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder', constraint: function (value) { return value === undefined || value instanceof uri_1.URI; } },\n            { name: 'options', description: '(optional) Options. Object with the following properties: `forceNewWindow `: Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window. `noRecentEntry`: Wheter the opened URI will appear in the \\'Open Recent\\' list. Defaults to true.  Note, for backward compatibility, options can also be of type boolean, representing the `forceNewWindow` setting.', constraint: function (value) { return value === undefined || typeof value === 'object' || typeof value === 'boolean'; } }\n        ]\n    }\n});\nvar NewWindowAPICommand = /** @class */ (function () {\n    function NewWindowAPICommand() {\n    }\n    NewWindowAPICommand.execute = function (executor, options) {\n        return executor.executeCommand('_files.newWindow', options);\n    };\n    NewWindowAPICommand.ID = 'vscode.newWindow';\n    return NewWindowAPICommand;\n}());\nexports.NewWindowAPICommand = NewWindowAPICommand;\ncommands_1.CommandsRegistry.registerCommand({\n    id: NewWindowAPICommand.ID,\n    handler: adjustHandler(NewWindowAPICommand.execute),\n    description: {\n        description: 'Opens an new window',\n        args: []\n    }\n});\nvar DiffAPICommand = /** @class */ (function () {\n    function DiffAPICommand() {\n    }\n    DiffAPICommand.execute = function (executor, left, right, label, options) {\n        return executor.executeCommand('_workbench.diff', [\n            left, right,\n            label,\n            undefined,\n            typeConverters.TextEditorOptions.from(options),\n            options ? typeConverters.ViewColumn.from(options.viewColumn) : undefined\n        ]);\n    };\n    DiffAPICommand.ID = 'vscode.diff';\n    return DiffAPICommand;\n}());\nexports.DiffAPICommand = DiffAPICommand;\ncommands_1.CommandsRegistry.registerCommand(DiffAPICommand.ID, adjustHandler(DiffAPICommand.execute));\nvar OpenAPICommand = /** @class */ (function () {\n    function OpenAPICommand() {\n    }\n    OpenAPICommand.execute = function (executor, resource, columnOrOptions, label) {\n        var options;\n        var position;\n        if (columnOrOptions) {\n            if (typeof columnOrOptions === 'number') {\n                position = typeConverters.ViewColumn.from(columnOrOptions);\n            }\n            else {\n                options = typeConverters.TextEditorOptions.from(columnOrOptions);\n                position = typeConverters.ViewColumn.from(columnOrOptions.viewColumn);\n            }\n        }\n        return executor.executeCommand('_workbench.open', [\n            resource,\n            options,\n            position,\n            label\n        ]);\n    };\n    OpenAPICommand.ID = 'vscode.open';\n    return OpenAPICommand;\n}());\nexports.OpenAPICommand = OpenAPICommand;\ncommands_1.CommandsRegistry.registerCommand(OpenAPICommand.ID, adjustHandler(OpenAPICommand.execute));\ncommands_1.CommandsRegistry.registerCommand('_workbench.removeFromRecentlyOpened', function (accessor, uri) {\n    var windowsService = accessor.get(windows_1.IWindowsService);\n    return windowsService.removeFromRecentlyOpened([uri]).then(function () { return undefined; });\n});\nvar RemoveFromRecentlyOpenedAPICommand = /** @class */ (function () {\n    function RemoveFromRecentlyOpenedAPICommand() {\n    }\n    RemoveFromRecentlyOpenedAPICommand.execute = function (executor, path) {\n        if (typeof path === 'string') {\n            path = path.match(/^[^:/?#]+:\\/\\//) ? uri_1.URI.parse(path) : uri_1.URI.file(path);\n        }\n        else {\n            path = uri_1.URI.revive(path); // called from extension host\n        }\n        return executor.executeCommand('_workbench.removeFromRecentlyOpened', path);\n    };\n    RemoveFromRecentlyOpenedAPICommand.ID = 'vscode.removeFromRecentlyOpened';\n    return RemoveFromRecentlyOpenedAPICommand;\n}());\nexports.RemoveFromRecentlyOpenedAPICommand = RemoveFromRecentlyOpenedAPICommand;\ncommands_1.CommandsRegistry.registerCommand(RemoveFromRecentlyOpenedAPICommand.ID, adjustHandler(RemoveFromRecentlyOpenedAPICommand.execute));\ncommands_1.CommandsRegistry.registerCommand('_workbench.addToRecentlyOpened', function (accessor, recentEntry) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var windowsService, workspacesService, recent, uri, label, workspace;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    windowsService = accessor.get(windows_1.IWindowsService);\n                    workspacesService = accessor.get(workspaces_1.IWorkspacesService);\n                    recent = undefined;\n                    uri = recentEntry.uri;\n                    label = recentEntry.label;\n                    if (!(recentEntry.type === 'workspace')) return [3 /*break*/, 2];\n                    return [4 /*yield*/, workspacesService.getWorkspaceIdentifier(uri)];\n                case 1:\n                    workspace = _a.sent();\n                    recent = { workspace: workspace, label: label };\n                    return [3 /*break*/, 3];\n                case 2:\n                    if (recentEntry.type === 'folder') {\n                        recent = { folderUri: uri, label: label };\n                    }\n                    else {\n                        recent = { fileUri: uri, label: label };\n                    }\n                    _a.label = 3;\n                case 3: return [2 /*return*/, windowsService.addRecentlyOpened([recent])];\n            }\n        });\n    });\n});\nvar SetEditorLayoutAPICommand = /** @class */ (function () {\n    function SetEditorLayoutAPICommand() {\n    }\n    SetEditorLayoutAPICommand.execute = function (executor, layout) {\n        return executor.executeCommand('layoutEditorGroups', layout);\n    };\n    SetEditorLayoutAPICommand.ID = 'vscode.setEditorLayout';\n    return SetEditorLayoutAPICommand;\n}());\nexports.SetEditorLayoutAPICommand = SetEditorLayoutAPICommand;\ncommands_1.CommandsRegistry.registerCommand({\n    id: SetEditorLayoutAPICommand.ID,\n    handler: adjustHandler(SetEditorLayoutAPICommand.execute),\n    description: {\n        description: 'Set Editor Layout',\n        args: [{\n                name: 'args',\n                schema: {\n                    'type': 'object',\n                    'required': ['groups'],\n                    'properties': {\n                        'orientation': {\n                            'type': 'number',\n                            'default': 0,\n                            'enum': [0, 1]\n                        },\n                        'groups': {\n                            '$ref': '#/definitions/editorGroupsSchema',\n                            'default': [{}, {}],\n                        }\n                    }\n                }\n            }]\n    }\n});\ncommands_1.CommandsRegistry.registerCommand('_workbench.downloadResource', function (accessor, resource) {\n    var downloadService = accessor.get(download_1.IDownloadService);\n    return downloadService.download(resource).then(function (location) { return uri_1.URI.file(location); });\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/apiCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/apiCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { URI } from 'vs/base/common/uri';\nimport * as typeConverters from 'vs/workbench/api/node/extHostTypeConverters';\nimport { CommandsRegistry, ICommandService, ICommandHandler } from 'vs/platform/commands/common/commands';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { EditorViewColumn } from 'vs/workbench/api/common/shared/editor';\nimport { EditorGroupLayout } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IWindowsService, IOpenSettings } from 'vs/platform/windows/common/windows';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';\nimport { IRecent } from 'vs/platform/history/common/history';\n\n// -----------------------------------------------------------------\n// The following commands are registered on both sides separately.\n//\n// We are trying to maintain backwards compatibility for cases where\n// API commands are encoded as markdown links, for example.\n// -----------------------------------------------------------------\n\nexport interface ICommandsExecutor {\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T | undefined>;\n}\n\nfunction adjustHandler(handler: (executor: ICommandsExecutor, ...args: any[]) => any): ICommandHandler {\n\treturn (accessor, ...args: any[]) => {\n\t\treturn handler(accessor.get(ICommandService), ...args);\n\t};\n}\n\ninterface IOpenFolderAPICommandOptions {\n\tforceNewWindow?: boolean;\n\tnoRecentEntry?: boolean;\n}\n\nexport class OpenFolderAPICommand {\n\tpublic static ID = 'vscode.openFolder';\n\tpublic static execute(executor: ICommandsExecutor, uri?: URI, forceNewWindow?: boolean): Promise<any>;\n\tpublic static execute(executor: ICommandsExecutor, uri?: URI, options?: IOpenFolderAPICommandOptions): Promise<any>;\n\tpublic static execute(executor: ICommandsExecutor, uri?: URI, arg: boolean | IOpenFolderAPICommandOptions = {}): Promise<any> {\n\t\tif (typeof arg === 'boolean') {\n\t\t\targ = { forceNewWindow: arg };\n\t\t}\n\t\tif (!uri) {\n\t\t\treturn executor.executeCommand('_files.pickFolderAndOpen', arg.forceNewWindow);\n\t\t}\n\t\tconst options: IOpenSettings = { forceNewWindow: arg.forceNewWindow, noRecentEntry: arg.noRecentEntry };\n\t\turi = URI.revive(uri);\n\t\treturn executor.executeCommand('_files.windowOpen', [{ uri }], options);\n\t}\n}\nCommandsRegistry.registerCommand({\n\tid: OpenFolderAPICommand.ID,\n\thandler: adjustHandler(OpenFolderAPICommand.execute),\n\tdescription: {\n\t\tdescription: 'Open a folder or workspace in the current window or new window depending on the newWindow argument. Note that opening in the same window will shutdown the current extension host process and start a new one on the given folder/workspace unless the newWindow parameter is set to true.',\n\t\targs: [\n\t\t\t{ name: 'uri', description: '(optional) Uri of the folder or workspace file to open. If not provided, a native dialog will ask the user for the folder', constraint: (value: any) => value === undefined || value instanceof URI },\n\t\t\t{ name: 'options', description: '(optional) Options. Object with the following properties: `forceNewWindow `: Whether to open the folder/workspace in a new window or the same. Defaults to opening in the same window. `noRecentEntry`: Wheter the opened URI will appear in the \\'Open Recent\\' list. Defaults to true.  Note, for backward compatibility, options can also be of type boolean, representing the `forceNewWindow` setting.', constraint: (value: any) => value === undefined || typeof value === 'object' || typeof value === 'boolean' }\n\t\t]\n\t}\n});\n\ninterface INewWindowAPICommandOptions {\n\treuseWindow?: boolean;\n}\n\nexport class NewWindowAPICommand {\n\tpublic static ID = 'vscode.newWindow';\n\tpublic static execute(executor: ICommandsExecutor, options?: INewWindowAPICommandOptions): Promise<any> {\n\t\treturn executor.executeCommand('_files.newWindow', options);\n\t}\n}\nCommandsRegistry.registerCommand({\n\tid: NewWindowAPICommand.ID,\n\thandler: adjustHandler(NewWindowAPICommand.execute),\n\tdescription: {\n\t\tdescription: 'Opens an new window',\n\t\targs: [\n\t\t]\n\t}\n});\n\nexport class DiffAPICommand {\n\tpublic static ID = 'vscode.diff';\n\tpublic static execute(executor: ICommandsExecutor, left: URI, right: URI, label: string, options?: vscode.TextDocumentShowOptions): Promise<any> {\n\t\treturn executor.executeCommand('_workbench.diff', [\n\t\t\tleft, right,\n\t\t\tlabel,\n\t\t\tundefined,\n\t\t\ttypeConverters.TextEditorOptions.from(options),\n\t\t\toptions ? typeConverters.ViewColumn.from(options.viewColumn) : undefined\n\t\t]);\n\t}\n}\nCommandsRegistry.registerCommand(DiffAPICommand.ID, adjustHandler(DiffAPICommand.execute));\n\nexport class OpenAPICommand {\n\tpublic static ID = 'vscode.open';\n\tpublic static execute(executor: ICommandsExecutor, resource: URI, columnOrOptions?: vscode.ViewColumn | vscode.TextDocumentShowOptions, label?: string): Promise<any> {\n\t\tlet options: ITextEditorOptions | undefined;\n\t\tlet position: EditorViewColumn | undefined;\n\n\t\tif (columnOrOptions) {\n\t\t\tif (typeof columnOrOptions === 'number') {\n\t\t\t\tposition = typeConverters.ViewColumn.from(columnOrOptions);\n\t\t\t} else {\n\t\t\t\toptions = typeConverters.TextEditorOptions.from(columnOrOptions);\n\t\t\t\tposition = typeConverters.ViewColumn.from(columnOrOptions.viewColumn);\n\t\t\t}\n\t\t}\n\n\t\treturn executor.executeCommand('_workbench.open', [\n\t\t\tresource,\n\t\t\toptions,\n\t\t\tposition,\n\t\t\tlabel\n\t\t]);\n\t}\n}\nCommandsRegistry.registerCommand(OpenAPICommand.ID, adjustHandler(OpenAPICommand.execute));\n\nCommandsRegistry.registerCommand('_workbench.removeFromRecentlyOpened', function (accessor: ServicesAccessor, uri: URI) {\n\tconst windowsService = accessor.get(IWindowsService);\n\treturn windowsService.removeFromRecentlyOpened([uri]).then(() => undefined);\n});\n\nexport class RemoveFromRecentlyOpenedAPICommand {\n\tpublic static ID = 'vscode.removeFromRecentlyOpened';\n\tpublic static execute(executor: ICommandsExecutor, path: string | URI): Promise<any> {\n\t\tif (typeof path === 'string') {\n\t\t\tpath = path.match(/^[^:/?#]+:\\/\\//) ? URI.parse(path) : URI.file(path);\n\t\t} else {\n\t\t\tpath = URI.revive(path); // called from extension host\n\t\t}\n\t\treturn executor.executeCommand('_workbench.removeFromRecentlyOpened', path);\n\t}\n}\nCommandsRegistry.registerCommand(RemoveFromRecentlyOpenedAPICommand.ID, adjustHandler(RemoveFromRecentlyOpenedAPICommand.execute));\n\ninterface RecentEntry {\n\turi: URI;\n\ttype: 'workspace' | 'folder' | 'file';\n\tlabel?: string;\n}\n\nCommandsRegistry.registerCommand('_workbench.addToRecentlyOpened', async function (accessor: ServicesAccessor, recentEntry: RecentEntry) {\n\tconst windowsService = accessor.get(IWindowsService);\n\tconst workspacesService = accessor.get(IWorkspacesService);\n\tlet recent: IRecent | undefined = undefined;\n\tconst uri = recentEntry.uri;\n\tconst label = recentEntry.label;\n\tif (recentEntry.type === 'workspace') {\n\t\tconst workspace = await workspacesService.getWorkspaceIdentifier(uri);\n\t\trecent = { workspace, label };\n\t} else if (recentEntry.type === 'folder') {\n\t\trecent = { folderUri: uri, label };\n\t} else {\n\t\trecent = { fileUri: uri, label };\n\t}\n\treturn windowsService.addRecentlyOpened([recent]);\n});\n\nexport class SetEditorLayoutAPICommand {\n\tpublic static ID = 'vscode.setEditorLayout';\n\tpublic static execute(executor: ICommandsExecutor, layout: EditorGroupLayout): Promise<any> {\n\t\treturn executor.executeCommand('layoutEditorGroups', layout);\n\t}\n}\nCommandsRegistry.registerCommand({\n\tid: SetEditorLayoutAPICommand.ID,\n\thandler: adjustHandler(SetEditorLayoutAPICommand.execute),\n\tdescription: {\n\t\tdescription: 'Set Editor Layout',\n\t\targs: [{\n\t\t\tname: 'args',\n\t\t\tschema: {\n\t\t\t\t'type': 'object',\n\t\t\t\t'required': ['groups'],\n\t\t\t\t'properties': {\n\t\t\t\t\t'orientation': {\n\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t'default': 0,\n\t\t\t\t\t\t'enum': [0, 1]\n\t\t\t\t\t},\n\t\t\t\t\t'groups': {\n\t\t\t\t\t\t'$ref': '#/definitions/editorGroupsSchema', // defined in keybindingService.ts ...\n\t\t\t\t\t\t'default': [{}, {}],\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}]\n\t}\n});\n\nCommandsRegistry.registerCommand('_workbench.downloadResource', function (accessor: ServicesAccessor, resource: URI) {\n\tconst downloadService = accessor.get(IDownloadService);\n\treturn downloadService.download(resource).then(location => URI.file(location));\n});\n"]}]}