{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/browser/extensionsQuickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/browser/extensionsQuickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar SimpleEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(SimpleEntry, _super);\n    function SimpleEntry(label, action) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        _this.action = action;\n        return _this;\n    }\n    SimpleEntry.prototype.getLabel = function () {\n        return this.label;\n    };\n    SimpleEntry.prototype.getAriaLabel = function () {\n        return this.label;\n    };\n    SimpleEntry.prototype.run = function (mode) {\n        if (mode === quickOpen_1.Mode.PREVIEW) {\n            return false;\n        }\n        this.action();\n        return true;\n    };\n    return SimpleEntry;\n}(quickOpenModel_1.QuickOpenEntry));\nvar ExtensionsHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionsHandler, _super);\n    function ExtensionsHandler(viewletService) {\n        var _this = _super.call(this) || this;\n        _this.viewletService = viewletService;\n        return _this;\n    }\n    ExtensionsHandler.prototype.getResults = function (text, token) {\n        var _this = this;\n        var label = nls.localize('manage', \"Press Enter to manage your extensions.\");\n        var action = function () {\n            _this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                .then(function (viewlet) { return viewlet; })\n                .then(function (viewlet) {\n                viewlet.search('');\n                viewlet.focus();\n            });\n        };\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel([new SimpleEntry(label, action)]));\n    };\n    ExtensionsHandler.prototype.getEmptyLabel = function (input) {\n        return '';\n    };\n    ExtensionsHandler.prototype.getAutoFocus = function (searchValue) {\n        return { autoFocusFirstEntry: true };\n    };\n    ExtensionsHandler.ID = 'workbench.picker.extensions';\n    ExtensionsHandler = tslib_1.__decorate([\n        tslib_1.__param(0, viewlet_1.IViewletService)\n    ], ExtensionsHandler);\n    return ExtensionsHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.ExtensionsHandler = ExtensionsHandler;\nvar GalleryExtensionsHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(GalleryExtensionsHandler, _super);\n    function GalleryExtensionsHandler(viewletService, galleryService, extensionsService, notificationService) {\n        var _this = _super.call(this) || this;\n        _this.viewletService = viewletService;\n        _this.galleryService = galleryService;\n        _this.extensionsService = extensionsService;\n        _this.notificationService = notificationService;\n        return _this;\n    }\n    GalleryExtensionsHandler.prototype.getResults = function (text, token) {\n        var _this = this;\n        if (/\\./.test(text)) {\n            return this.galleryService.query({ names: [text], pageSize: 1 }, token)\n                .then(function (galleryResult) {\n                var entries = [];\n                var galleryExtension = galleryResult.firstPage[0];\n                if (!galleryExtension) {\n                    var label = nls.localize('notfound', \"Extension '{0}' not found in the Marketplace.\", text);\n                    entries.push(new SimpleEntry(label, function () { return null; }));\n                }\n                else {\n                    var label = nls.localize('install', \"Press Enter to install '{0}' from the Marketplace.\", text);\n                    var action = function () {\n                        return _this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                            .then(function (viewlet) { return viewlet; })\n                            .then(function (viewlet) { return viewlet.search(\"@id:\" + text); })\n                            .then(function () { return _this.extensionsService.installFromGallery(galleryExtension); })\n                            .then(undefined, function (err) { return _this.notificationService.error(err); });\n                    };\n                    entries.push(new SimpleEntry(label, action));\n                }\n                return new quickOpenModel_1.QuickOpenModel(entries);\n            });\n        }\n        var entries = [];\n        if (text) {\n            var label = nls.localize('searchFor', \"Press Enter to search for '{0}' in the Marketplace.\", text);\n            var action = function () {\n                _this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                    .then(function (viewlet) { return viewlet; })\n                    .then(function (viewlet) {\n                    viewlet.search(text);\n                    viewlet.focus();\n                });\n            };\n            entries.push(new SimpleEntry(label, action));\n        }\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(entries));\n    };\n    GalleryExtensionsHandler.prototype.getEmptyLabel = function (input) {\n        return nls.localize('noExtensionsToInstall', \"Type an extension name\");\n    };\n    GalleryExtensionsHandler.prototype.getAutoFocus = function (searchValue) {\n        return { autoFocusFirstEntry: true };\n    };\n    GalleryExtensionsHandler.ID = 'workbench.picker.gallery';\n    GalleryExtensionsHandler = tslib_1.__decorate([\n        tslib_1.__param(0, viewlet_1.IViewletService),\n        tslib_1.__param(1, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(2, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(3, notification_1.INotificationService)\n    ], GalleryExtensionsHandler);\n    return GalleryExtensionsHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.GalleryExtensionsHandler = GalleryExtensionsHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/browser/extensionsQuickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/browser/extensionsQuickOpen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IAutoFocus, Mode, IModel } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenEntry, QuickOpenModel } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { QuickOpenHandler } from 'vs/workbench/browser/quickopen';\nimport { IExtensionsViewlet, VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nclass SimpleEntry extends QuickOpenEntry {\n\n\tconstructor(private label: string, private action: Function) {\n\t\tsuper();\n\t}\n\n\tgetLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn this.label;\n\t}\n\n\trun(mode: Mode): boolean {\n\t\tif (mode === Mode.PREVIEW) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.action();\n\n\t\treturn true;\n\t}\n}\n\nexport class ExtensionsHandler extends QuickOpenHandler {\n\n\tpublic static readonly ID = 'workbench.picker.extensions';\n\n\tconstructor(@IViewletService private readonly viewletService: IViewletService) {\n\t\tsuper();\n\t}\n\n\tgetResults(text: string, token: CancellationToken): Promise<IModel<any>> {\n\t\tconst label = nls.localize('manage', \"Press Enter to manage your extensions.\");\n\t\tconst action = () => {\n\t\t\tthis.viewletService.openViewlet(VIEWLET_ID, true)\n\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t.then(viewlet => {\n\t\t\t\t\tviewlet.search('');\n\t\t\t\t\tviewlet.focus();\n\t\t\t\t});\n\t\t};\n\n\t\treturn Promise.resolve(new QuickOpenModel([new SimpleEntry(label, action)]));\n\t}\n\n\tgetEmptyLabel(input: string): string {\n\t\treturn '';\n\t}\n\n\tgetAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn { autoFocusFirstEntry: true };\n\t}\n}\n\nexport class GalleryExtensionsHandler extends QuickOpenHandler {\n\n\tpublic static readonly ID = 'workbench.picker.gallery';\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IExtensionManagementService private readonly extensionsService: IExtensionManagementService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tgetResults(text: string, token: CancellationToken): Promise<IModel<any>> {\n\t\tif (/\\./.test(text)) {\n\t\t\treturn this.galleryService.query({ names: [text], pageSize: 1 }, token)\n\t\t\t\t.then(galleryResult => {\n\t\t\t\t\tconst entries: SimpleEntry[] = [];\n\t\t\t\t\tconst galleryExtension = galleryResult.firstPage[0];\n\n\t\t\t\t\tif (!galleryExtension) {\n\t\t\t\t\t\tconst label = nls.localize('notfound', \"Extension '{0}' not found in the Marketplace.\", text);\n\t\t\t\t\t\tentries.push(new SimpleEntry(label, () => null));\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst label = nls.localize('install', \"Press Enter to install '{0}' from the Marketplace.\", text);\n\t\t\t\t\t\tconst action = () => {\n\t\t\t\t\t\t\treturn this.viewletService.openViewlet(VIEWLET_ID, true)\n\t\t\t\t\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t\t\t\t\t.then(viewlet => viewlet.search(`@id:${text}`))\n\t\t\t\t\t\t\t\t.then(() => this.extensionsService.installFromGallery(galleryExtension))\n\t\t\t\t\t\t\t\t.then(undefined, err => this.notificationService.error(err));\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tentries.push(new SimpleEntry(label, action));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new QuickOpenModel(entries);\n\t\t\t\t});\n\t\t}\n\n\t\tconst entries: SimpleEntry[] = [];\n\n\t\tif (text) {\n\t\t\tconst label = nls.localize('searchFor', \"Press Enter to search for '{0}' in the Marketplace.\", text);\n\t\t\tconst action = () => {\n\t\t\t\tthis.viewletService.openViewlet(VIEWLET_ID, true)\n\t\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\tviewlet.search(text);\n\t\t\t\t\t\tviewlet.focus();\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\tentries.push(new SimpleEntry(label, action));\n\t\t}\n\n\t\treturn Promise.resolve(new QuickOpenModel(entries));\n\t}\n\n\tgetEmptyLabel(input: string): string {\n\t\treturn nls.localize('noExtensionsToInstall', \"Type an extension name\");\n\t}\n\n\tgetAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn { autoFocusFirstEntry: true };\n\t}\n}"]}]}