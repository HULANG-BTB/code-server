{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/workbench/services/workspace/common/workspaceEditing\", \"vs/nls\", \"vs/platform/workspace/common/workspace\", \"vs/platform/windows/common/windows\", \"vs/workbench/services/configuration/common/jsonEditing\", \"vs/platform/workspaces/common/workspaces\", \"vs/platform/storage/common/storage\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/platform/registry/common/platform\", \"vs/workbench/services/extensions/common/extensions\", \"vs/workbench/services/backup/common/backup\", \"vs/workbench/services/backup/node/backupFileService\", \"vs/platform/commands/common/commands\", \"vs/base/common/arrays\", \"vs/base/common/platform\", \"vs/base/common/resources\", \"vs/platform/notification/common/notification\", \"vs/platform/files/common/files\", \"vs/platform/environment/common/environment\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/dialogs/common/dialogs\", \"vs/base/common/labels\", \"vs/platform/configuration/common/configuration\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/label/common/label\"], function (require, exports, workspaceEditing_1, nls, workspace_1, windows_1, jsonEditing_1, workspaces_1, storage_1, configurationRegistry_1, platform_1, extensions_1, backup_1, backupFileService_1, commands_1, arrays_1, platform_2, resources_1, notification_1, files_1, environment_1, lifecycle_1, dialogs_1, labels_1, configuration_1, extensions_2, label_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WorkspaceEditingService = class WorkspaceEditingService {\n        constructor(jsonEditingService, contextService, windowService, configurationService, storageService, extensionService, backupFileService, notificationService, commandService, fileSystemService, windowsService, workspaceService, environmentService, fileDialogService, dialogService, lifecycleService, labelService) {\n            this.jsonEditingService = jsonEditingService;\n            this.contextService = contextService;\n            this.windowService = windowService;\n            this.configurationService = configurationService;\n            this.storageService = storageService;\n            this.extensionService = extensionService;\n            this.backupFileService = backupFileService;\n            this.notificationService = notificationService;\n            this.commandService = commandService;\n            this.fileSystemService = fileSystemService;\n            this.windowsService = windowsService;\n            this.workspaceService = workspaceService;\n            this.environmentService = environmentService;\n            this.fileDialogService = fileDialogService;\n            this.dialogService = dialogService;\n            this.lifecycleService = lifecycleService;\n            this.labelService = labelService;\n            lifecycleService.onBeforeShutdown((e) => __awaiter(this, void 0, void 0, function* () {\n                const saveOperation = this.saveUntitedBeforeShutdown(e.reason);\n                if (saveOperation) {\n                    e.veto(saveOperation);\n                }\n            }));\n        }\n        saveUntitedBeforeShutdown(reason) {\n            if (reason !== lifecycle_1.ShutdownReason.LOAD && reason !== lifecycle_1.ShutdownReason.CLOSE) {\n                return undefined; // only interested when window is closing or loading\n            }\n            const workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n            if (!workspaceIdentifier || !resources_1.isEqualOrParent(workspaceIdentifier.configPath, this.environmentService.untitledWorkspacesHome)) {\n                return undefined; // only care about untitled workspaces to ask for saving\n            }\n            return this.windowsService.getWindowCount().then(windowCount => {\n                if (reason === lifecycle_1.ShutdownReason.CLOSE && !platform_2.isMacintosh && windowCount === 1) {\n                    return false; // Windows/Linux: quits when last window is closed, so do not ask then\n                }\n                let ConfirmResult;\n                (function (ConfirmResult) {\n                    ConfirmResult[ConfirmResult[\"SAVE\"] = 0] = \"SAVE\";\n                    ConfirmResult[ConfirmResult[\"DONT_SAVE\"] = 1] = \"DONT_SAVE\";\n                    ConfirmResult[ConfirmResult[\"CANCEL\"] = 2] = \"CANCEL\";\n                })(ConfirmResult || (ConfirmResult = {}));\n                const save = { label: labels_1.mnemonicButtonLabel(nls.localize('save', \"Save\")), result: ConfirmResult.SAVE };\n                const dontSave = { label: labels_1.mnemonicButtonLabel(nls.localize('doNotSave', \"Don't Save\")), result: ConfirmResult.DONT_SAVE };\n                const cancel = { label: nls.localize('cancel', \"Cancel\"), result: ConfirmResult.CANCEL };\n                const buttons = [];\n                if (platform_2.isWindows) {\n                    buttons.push(save, dontSave, cancel);\n                }\n                else if (platform_2.isLinux) {\n                    buttons.push(dontSave, cancel, save);\n                }\n                else {\n                    buttons.push(save, cancel, dontSave);\n                }\n                const message = nls.localize('saveWorkspaceMessage', \"Do you want to save your workspace configuration as a file?\");\n                const detail = nls.localize('saveWorkspaceDetail', \"Save your workspace if you plan to open it again.\");\n                const cancelId = buttons.indexOf(cancel);\n                return this.dialogService.show(notification_1.Severity.Warning, message, buttons.map(button => button.label), { detail, cancelId }).then(res => {\n                    switch (buttons[res].result) {\n                        // Cancel: veto unload\n                        case ConfirmResult.CANCEL:\n                            return true;\n                        // Don't Save: delete workspace\n                        case ConfirmResult.DONT_SAVE:\n                            this.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n                            return false;\n                        // Save: save workspace, but do not veto unload\n                        case ConfirmResult.SAVE: {\n                            return this.pickNewWorkspacePath().then(newWorkspacePath => {\n                                if (newWorkspacePath) {\n                                    return this.saveWorkspaceAs(workspaceIdentifier, newWorkspacePath).then(_ => {\n                                        return this.workspaceService.getWorkspaceIdentifier(newWorkspacePath).then(newWorkspaceIdentifier => {\n                                            const label = this.labelService.getWorkspaceLabel(newWorkspaceIdentifier, { verbose: true });\n                                            this.windowsService.addRecentlyOpened([{ label, workspace: newWorkspaceIdentifier }]);\n                                            this.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n                                            return false;\n                                        });\n                                    }, () => false);\n                                }\n                                return true; // keep veto if no target was provided\n                            });\n                        }\n                    }\n                });\n            });\n        }\n        pickNewWorkspacePath() {\n            return this.fileDialogService.showSaveDialog({\n                saveLabel: labels_1.mnemonicButtonLabel(nls.localize('save', \"Save\")),\n                title: nls.localize('saveWorkspace', \"Save Workspace\"),\n                filters: workspaces_1.WORKSPACE_FILTER,\n                defaultUri: this.fileDialogService.defaultWorkspacePath()\n            });\n        }\n        updateFolders(index, deleteCount, foldersToAdd, donotNotifyError) {\n            const folders = this.contextService.getWorkspace().folders;\n            let foldersToDelete = [];\n            if (typeof deleteCount === 'number') {\n                foldersToDelete = folders.slice(index, index + deleteCount).map(f => f.uri);\n            }\n            const wantsToDelete = foldersToDelete.length > 0;\n            const wantsToAdd = Array.isArray(foldersToAdd) && foldersToAdd.length > 0;\n            if (!wantsToAdd && !wantsToDelete) {\n                return Promise.resolve(); // return early if there is nothing to do\n            }\n            // Add Folders\n            if (wantsToAdd && !wantsToDelete && Array.isArray(foldersToAdd)) {\n                return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n            }\n            // Delete Folders\n            if (wantsToDelete && !wantsToAdd) {\n                return this.removeFolders(foldersToDelete);\n            }\n            // Add & Delete Folders\n            else {\n                // if we are in single-folder state and the folder is replaced with\n                // other folders, we handle this specially and just enter workspace\n                // mode with the folders that are being added.\n                if (this.includesSingleFolderWorkspace(foldersToDelete)) {\n                    return this.createAndEnterWorkspace(foldersToAdd);\n                }\n                // if we are not in workspace-state, we just add the folders\n                if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.WORKSPACE) {\n                    return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n                }\n                // finally, update folders within the workspace\n                return this.doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError);\n            }\n        }\n        doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError = false) {\n            return this.contextService.updateFolders(foldersToAdd, foldersToDelete, index)\n                .then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n        }\n        addFolders(foldersToAdd, donotNotifyError = false) {\n            return this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n        }\n        doAddFolders(foldersToAdd, index, donotNotifyError = false) {\n            const state = this.contextService.getWorkbenchState();\n            // If we are in no-workspace or single-folder workspace, adding folders has to\n            // enter a workspace.\n            if (state !== workspace_1.WorkbenchState.WORKSPACE) {\n                let newWorkspaceFolders = this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri }));\n                newWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n                newWorkspaceFolders = arrays_1.distinct(newWorkspaceFolders, folder => resources_1.getComparisonKey(folder.uri));\n                if (state === workspace_1.WorkbenchState.EMPTY && newWorkspaceFolders.length === 0 || state === workspace_1.WorkbenchState.FOLDER && newWorkspaceFolders.length === 1) {\n                    return Promise.resolve(); // return if the operation is a no-op for the current state\n                }\n                return this.createAndEnterWorkspace(newWorkspaceFolders);\n            }\n            // Delegate addition of folders to workspace service otherwise\n            return this.contextService.addFolders(foldersToAdd, index)\n                .then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n        }\n        removeFolders(foldersToRemove, donotNotifyError = false) {\n            // If we are in single-folder state and the opened folder is to be removed,\n            // we create an empty workspace and enter it.\n            if (this.includesSingleFolderWorkspace(foldersToRemove)) {\n                return this.createAndEnterWorkspace([]);\n            }\n            // Delegate removal of folders to workspace service otherwise\n            return this.contextService.removeFolders(foldersToRemove)\n                .then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n        }\n        includesSingleFolderWorkspace(folders) {\n            if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                const workspaceFolder = this.contextService.getWorkspace().folders[0];\n                return (folders.some(folder => resources_1.isEqual(folder, workspaceFolder.uri)));\n            }\n            return false;\n        }\n        createAndEnterWorkspace(folders, path) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (path && !this.isValidTargetWorkspacePath(path)) {\n                    return Promise.reject(null);\n                }\n                const remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n                const untitledWorkspace = yield this.workspaceService.createUntitledWorkspace(folders, remoteAuthority);\n                if (path) {\n                    yield this.saveWorkspaceAs(untitledWorkspace, path);\n                }\n                else {\n                    path = untitledWorkspace.configPath;\n                }\n                return this.enterWorkspace(path);\n            });\n        }\n        saveAndEnterWorkspace(path) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!this.isValidTargetWorkspacePath(path)) {\n                    return Promise.reject(null);\n                }\n                const workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n                if (!workspaceIdentifier) {\n                    return Promise.reject(null);\n                }\n                yield this.saveWorkspaceAs(workspaceIdentifier, path);\n                return this.enterWorkspace(path);\n            });\n        }\n        isValidTargetWorkspacePath(path) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const windows = yield this.windowsService.getWindows();\n                // Prevent overwriting a workspace that is currently opened in another window\n                if (windows.some(window => !!window.workspace && resources_1.isEqual(window.workspace.configPath, path))) {\n                    const options = {\n                        type: 'info',\n                        buttons: [nls.localize('ok', \"OK\")],\n                        message: nls.localize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", resources_1.basename(path)),\n                        detail: nls.localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\"),\n                        noLink: true\n                    };\n                    return this.windowService.showMessageBox(options).then(() => false);\n                }\n                return Promise.resolve(true); // OK\n            });\n        }\n        saveWorkspaceAs(workspace, targetConfigPathURI) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const configPathURI = workspace.configPath;\n                // Return early if target is same as source\n                if (resources_1.isEqual(configPathURI, targetConfigPathURI)) {\n                    return Promise.resolve(null);\n                }\n                // Read the contents of the workspace file, update it to new location and save it.\n                const raw = yield this.fileSystemService.resolveContent(configPathURI);\n                const newRawWorkspaceContents = workspaces_1.rewriteWorkspaceFileForNewLocation(raw.value, configPathURI, targetConfigPathURI);\n                yield this.fileSystemService.createFile(targetConfigPathURI, newRawWorkspaceContents, { overwrite: true });\n            });\n        }\n        handleWorkspaceConfigurationEditingError(error) {\n            switch (error.code) {\n                case jsonEditing_1.JSONEditingErrorCode.ERROR_INVALID_FILE:\n                    this.onInvalidWorkspaceConfigurationFileError();\n                    return Promise.resolve();\n                case jsonEditing_1.JSONEditingErrorCode.ERROR_FILE_DIRTY:\n                    this.onWorkspaceConfigurationFileDirtyError();\n                    return Promise.resolve();\n            }\n            this.notificationService.error(error.message);\n            return Promise.resolve();\n        }\n        onInvalidWorkspaceConfigurationFileError() {\n            const message = nls.localize('errorInvalidTaskConfiguration', \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\");\n            this.askToOpenWorkspaceConfigurationFile(message);\n        }\n        onWorkspaceConfigurationFileDirtyError() {\n            const message = nls.localize('errorWorkspaceConfigurationFileDirty', \"Unable to write into workspace configuration file because the file is dirty. Please save it and try again.\");\n            this.askToOpenWorkspaceConfigurationFile(message);\n        }\n        askToOpenWorkspaceConfigurationFile(message) {\n            this.notificationService.prompt(notification_1.Severity.Error, message, [{\n                    label: nls.localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\"),\n                    run: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n                }]);\n        }\n        enterWorkspace(path) {\n            if (!!this.environmentService.extensionTestsLocationURI) {\n                return Promise.reject(new Error('Entering a new workspace is not possible in tests.'));\n            }\n            // Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n            // Stop the extension host first to give extensions most time to shutdown\n            this.extensionService.stopExtensionHost();\n            let extensionHostStarted = false;\n            const startExtensionHost = () => {\n                if (this.windowService.getConfiguration().remoteAuthority) {\n                    this.windowService.reloadWindow(); // TODO aeschli: workaround until restarting works\n                }\n                this.extensionService.startExtensionHost();\n                extensionHostStarted = true;\n            };\n            return this.windowService.enterWorkspace(path).then(result => {\n                // Migrate storage and settings if we are to enter a workspace\n                if (result) {\n                    return this.migrate(result.workspace).then(() => {\n                        // Reinitialize backup service\n                        if (this.backupFileService instanceof backupFileService_1.BackupFileService) {\n                            this.backupFileService.initialize(result.backupPath);\n                        }\n                        // Reinitialize configuration service\n                        const workspaceImpl = this.contextService;\n                        return workspaceImpl.initialize(result.workspace, startExtensionHost);\n                    });\n                }\n                return Promise.resolve();\n            }).then(undefined, error => {\n                if (!extensionHostStarted) {\n                    startExtensionHost(); // start the extension host if not started\n                }\n                return Promise.reject(error);\n            });\n        }\n        migrate(toWorkspace) {\n            // Storage migration\n            return this.migrateStorage(toWorkspace).then(() => {\n                // Settings migration (only if we come from a folder workspace)\n                if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                    return this.migrateWorkspaceSettings(toWorkspace);\n                }\n                return undefined;\n            });\n        }\n        migrateStorage(toWorkspace) {\n            const storageImpl = this.storageService;\n            return storageImpl.migrate(toWorkspace);\n        }\n        migrateWorkspaceSettings(toWorkspace) {\n            return this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === configurationRegistry_1.ConfigurationScope.WINDOW);\n        }\n        copyWorkspaceSettings(toWorkspace) {\n            return this.doCopyWorkspaceSettings(toWorkspace);\n        }\n        doCopyWorkspaceSettings(toWorkspace, filter) {\n            const configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n            const targetWorkspaceConfiguration = {};\n            for (const key of this.configurationService.keys().workspace) {\n                if (configurationProperties[key]) {\n                    if (filter && !filter(configurationProperties[key])) {\n                        continue;\n                    }\n                    targetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspace;\n                }\n            }\n            return this.jsonEditingService.write(toWorkspace.configPath, { key: 'settings', value: targetWorkspaceConfiguration }, true);\n        }\n        getCurrentWorkspaceIdentifier() {\n            const workspace = this.contextService.getWorkspace();\n            if (workspace && workspace.configuration) {\n                return { id: workspace.id, configPath: workspace.configuration };\n            }\n            return undefined;\n        }\n    };\n    WorkspaceEditingService = __decorate([\n        __param(0, jsonEditing_1.IJSONEditingService),\n        __param(1, workspace_1.IWorkspaceContextService),\n        __param(2, windows_1.IWindowService),\n        __param(3, configuration_1.IConfigurationService),\n        __param(4, storage_1.IStorageService),\n        __param(5, extensions_1.IExtensionService),\n        __param(6, backup_1.IBackupFileService),\n        __param(7, notification_1.INotificationService),\n        __param(8, commands_1.ICommandService),\n        __param(9, files_1.IFileService),\n        __param(10, windows_1.IWindowsService),\n        __param(11, workspaces_1.IWorkspacesService),\n        __param(12, environment_1.IEnvironmentService),\n        __param(13, dialogs_1.IFileDialogService),\n        __param(14, dialogs_1.IDialogService),\n        __param(15, lifecycle_1.ILifecycleService),\n        __param(16, label_1.ILabelService)\n    ], WorkspaceEditingService);\n    exports.WorkspaceEditingService = WorkspaceEditingService;\n    extensions_2.registerSingleton(workspaceEditing_1.IWorkspaceEditingService, WorkspaceEditingService, true);\n});\n",null]}