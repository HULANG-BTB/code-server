{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/contextkeys.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/contextkeys.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contextkeys_1 = require(\"vs/platform/contextkey/common/contextkeys\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar contextkeys_2 = require(\"vs/workbench/common/contextkeys\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar viewlet_1 = require(\"vs/workbench/common/viewlet\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar viewlet_2 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar WorkbenchContextKeysHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchContextKeysHandler, _super);\n    function WorkbenchContextKeysHandler(contextKeyService, contextService, configurationService, environmentService, windowService, editorService, editorGroupService, layoutService, viewletService) {\n        var _this = _super.call(this) || this;\n        _this.contextKeyService = contextKeyService;\n        _this.contextService = contextService;\n        _this.configurationService = configurationService;\n        _this.environmentService = environmentService;\n        _this.windowService = windowService;\n        _this.editorService = editorService;\n        _this.editorGroupService = editorGroupService;\n        _this.layoutService = layoutService;\n        _this.viewletService = viewletService;\n        _this.initContextKeys();\n        _this.registerListeners();\n        return _this;\n    }\n    WorkbenchContextKeysHandler.prototype.registerListeners = function () {\n        var _this = this;\n        this.editorGroupService.whenRestored.then(function () { return _this.updateEditorContextKeys(); });\n        this._register(this.editorService.onDidActiveEditorChange(function () { return _this.updateEditorContextKeys(); }));\n        this._register(this.editorService.onDidVisibleEditorsChange(function () { return _this.updateEditorContextKeys(); }));\n        this._register(this.editorGroupService.onDidAddGroup(function () { return _this.updateEditorContextKeys(); }));\n        this._register(this.editorGroupService.onDidRemoveGroup(function () { return _this.updateEditorContextKeys(); }));\n        this._register(dom_1.addDisposableListener(window, dom_1.EventType.FOCUS_IN, function () { return _this.updateInputContextKeys(); }, true));\n        this._register(this.contextService.onDidChangeWorkbenchState(function () { return _this.updateWorkbenchStateContextKey(); }));\n        this._register(this.contextService.onDidChangeWorkspaceFolders(function () { return _this.updateWorkspaceFolderCountContextKey(); }));\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('workbench.editor.openSideBySideDirection')) {\n                _this.updateSplitEditorsVerticallyContext();\n            }\n        }));\n        this._register(this.layoutService.onZenModeChange(function (enabled) { return _this.inZenModeContext.set(enabled); }));\n        this._register(this.viewletService.onDidViewletClose(function () { return _this.updateSideBarContextKeys(); }));\n        this._register(this.viewletService.onDidViewletOpen(function () { return _this.updateSideBarContextKeys(); }));\n    };\n    WorkbenchContextKeysHandler.prototype.initContextKeys = function () {\n        // Platform\n        contextkeys_2.IsMacContext.bindTo(this.contextKeyService);\n        contextkeys_2.IsLinuxContext.bindTo(this.contextKeyService);\n        contextkeys_2.IsWindowsContext.bindTo(this.contextKeyService);\n        contextkeys_2.IsRemoteContext.bindTo(this.contextKeyService).set(!!this.windowService.getConfiguration().remoteAuthority);\n        // macOS Native Tabs\n        var windowConfig = this.configurationService.getValue();\n        contextkeys_2.HasMacNativeTabsContext.bindTo(this.contextKeyService).set(windowConfig && windowConfig.window && windowConfig.window.nativeTabs);\n        // Development\n        contextkeys_2.IsDevelopmentContext.bindTo(this.contextKeyService).set(!this.environmentService.isBuilt || this.environmentService.isExtensionDevelopment);\n        // File Pickers\n        contextkeys_2.SupportsWorkspacesContext.bindTo(this.contextKeyService);\n        contextkeys_2.SupportsOpenFileFolderContext.bindTo(this.contextKeyService).set(!!this.windowService.getConfiguration().remoteAuthority);\n        // Editors\n        this.activeEditorContext = editor_1.ActiveEditorContext.bindTo(this.contextKeyService);\n        this.editorsVisibleContext = editor_1.EditorsVisibleContext.bindTo(this.contextKeyService);\n        this.textCompareEditorVisibleContext = editor_1.TextCompareEditorVisibleContext.bindTo(this.contextKeyService);\n        this.textCompareEditorActiveContext = editor_1.TextCompareEditorActiveContext.bindTo(this.contextKeyService);\n        this.activeEditorGroupEmpty = editor_1.ActiveEditorGroupEmptyContext.bindTo(this.contextKeyService);\n        this.multipleEditorGroupsContext = editor_1.MultipleEditorGroupsContext.bindTo(this.contextKeyService);\n        // Inputs\n        this.inputFocusedContext = contextkeys_1.InputFocusedContext.bindTo(this.contextKeyService);\n        // Workbench State\n        this.workbenchStateContext = contextkeys_2.WorkbenchStateContext.bindTo(this.contextKeyService);\n        this.updateWorkbenchStateContextKey();\n        // Workspace Folder Count\n        this.workspaceFolderCountContext = contextkeys_2.WorkspaceFolderCountContext.bindTo(this.contextKeyService);\n        this.updateWorkspaceFolderCountContextKey();\n        // Editor Layout\n        this.splitEditorsVerticallyContext = editor_1.SplitEditorsVertically.bindTo(this.contextKeyService);\n        this.updateSplitEditorsVerticallyContext();\n        // Zen Mode\n        this.inZenModeContext = editor_1.InEditorZenModeContext.bindTo(this.contextKeyService);\n        // Sidebar\n        this.sideBarVisibleContext = viewlet_1.SideBarVisibleContext.bindTo(this.contextKeyService);\n        this.sidebarVisibleContext = viewlet_1.SidebarVisibleContext.bindTo(this.contextKeyService);\n    };\n    WorkbenchContextKeysHandler.prototype.updateEditorContextKeys = function () {\n        var activeControl = this.editorService.activeControl;\n        var visibleEditors = this.editorService.visibleControls;\n        this.textCompareEditorActiveContext.set(!!activeControl && activeControl.getId() === editor_1.TEXT_DIFF_EDITOR_ID);\n        this.textCompareEditorVisibleContext.set(visibleEditors.some(function (control) { return control.getId() === editor_1.TEXT_DIFF_EDITOR_ID; }));\n        if (visibleEditors.length > 0) {\n            this.editorsVisibleContext.set(true);\n        }\n        else {\n            this.editorsVisibleContext.reset();\n        }\n        if (!this.editorService.activeEditor) {\n            this.activeEditorGroupEmpty.set(true);\n        }\n        else {\n            this.activeEditorGroupEmpty.reset();\n        }\n        if (this.editorGroupService.count > 1) {\n            this.multipleEditorGroupsContext.set(true);\n        }\n        else {\n            this.multipleEditorGroupsContext.reset();\n        }\n        if (activeControl) {\n            this.activeEditorContext.set(activeControl.getId());\n        }\n        else {\n            this.activeEditorContext.reset();\n        }\n    };\n    WorkbenchContextKeysHandler.prototype.updateInputContextKeys = function () {\n        var _this = this;\n        function activeElementIsInput() {\n            return !!document.activeElement && (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA');\n        }\n        var isInputFocused = activeElementIsInput();\n        this.inputFocusedContext.set(isInputFocused);\n        if (isInputFocused) {\n            var tracker_1 = dom_1.trackFocus(document.activeElement);\n            event_1.Event.once(tracker_1.onDidBlur)(function () {\n                _this.inputFocusedContext.set(activeElementIsInput());\n                tracker_1.dispose();\n            });\n        }\n    };\n    WorkbenchContextKeysHandler.prototype.updateWorkbenchStateContextKey = function () {\n        this.workbenchStateContext.set(this.getWorkbenchStateString());\n    };\n    WorkbenchContextKeysHandler.prototype.updateWorkspaceFolderCountContextKey = function () {\n        this.workspaceFolderCountContext.set(this.contextService.getWorkspace().folders.length);\n    };\n    WorkbenchContextKeysHandler.prototype.updateSplitEditorsVerticallyContext = function () {\n        var direction = editorGroupsService_1.preferredSideBySideGroupDirection(this.configurationService);\n        this.splitEditorsVerticallyContext.set(direction === editorGroupsService_1.GroupDirection.DOWN);\n    };\n    WorkbenchContextKeysHandler.prototype.getWorkbenchStateString = function () {\n        switch (this.contextService.getWorkbenchState()) {\n            case workspace_1.WorkbenchState.EMPTY: return 'empty';\n            case workspace_1.WorkbenchState.FOLDER: return 'folder';\n            case workspace_1.WorkbenchState.WORKSPACE: return 'workspace';\n        }\n    };\n    WorkbenchContextKeysHandler.prototype.updateSideBarContextKeys = function () {\n        this.sideBarVisibleContext.set(this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART));\n        this.sidebarVisibleContext.set(this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART));\n    };\n    WorkbenchContextKeysHandler = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, windows_1.IWindowService),\n        tslib_1.__param(5, editorService_1.IEditorService),\n        tslib_1.__param(6, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(7, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(8, viewlet_2.IViewletService)\n    ], WorkbenchContextKeysHandler);\n    return WorkbenchContextKeysHandler;\n}(lifecycle_1.Disposable));\nexports.WorkbenchContextKeysHandler = WorkbenchContextKeysHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/contextkeys.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/contextkeys.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { InputFocusedContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { IWindowConfiguration, IWindowService } from 'vs/platform/windows/common/windows';\nimport { ActiveEditorContext, EditorsVisibleContext, TextCompareEditorVisibleContext, TextCompareEditorActiveContext, ActiveEditorGroupEmptyContext, MultipleEditorGroupsContext, TEXT_DIFF_EDITOR_ID, SplitEditorsVertically, InEditorZenModeContext } from 'vs/workbench/common/editor';\nimport { IsMacContext, IsLinuxContext, IsWindowsContext, HasMacNativeTabsContext, IsDevelopmentContext, SupportsWorkspacesContext, SupportsOpenFileFolderContext, WorkbenchStateContext, WorkspaceFolderCountContext, IsRemoteContext } from 'vs/workbench/common/contextkeys';\nimport { trackFocus, addDisposableListener, EventType } from 'vs/base/browser/dom';\nimport { preferredSideBySideGroupDirection, GroupDirection, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { WorkbenchState, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { SidebarVisibleContext, SideBarVisibleContext } from 'vs/workbench/common/viewlet';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\n\nexport class WorkbenchContextKeysHandler extends Disposable {\n\tprivate inputFocusedContext: IContextKey<boolean>;\n\n\tprivate activeEditorContext: IContextKey<string | null>;\n\tprivate editorsVisibleContext: IContextKey<boolean>;\n\tprivate textCompareEditorVisibleContext: IContextKey<boolean>;\n\tprivate textCompareEditorActiveContext: IContextKey<boolean>;\n\tprivate activeEditorGroupEmpty: IContextKey<boolean>;\n\tprivate multipleEditorGroupsContext: IContextKey<boolean>;\n\tprivate splitEditorsVerticallyContext: IContextKey<boolean>;\n\n\tprivate workbenchStateContext: IContextKey<string>;\n\tprivate workspaceFolderCountContext: IContextKey<number>;\n\n\n\tprivate inZenModeContext: IContextKey<boolean>;\n\n\tprivate sideBarVisibleContext: IContextKey<boolean>;\n\t//TODO@Isidor remove in May\n\tprivate sidebarVisibleContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IEnvironmentService private environmentService: IEnvironmentService,\n\t\t@IWindowService private windowService: IWindowService,\n\t\t@IEditorService private editorService: IEditorService,\n\t\t@IEditorGroupsService private editorGroupService: IEditorGroupsService,\n\t\t@IWorkbenchLayoutService private layoutService: IWorkbenchLayoutService,\n\t\t@IViewletService private viewletService: IViewletService\n\t) {\n\t\tsuper();\n\n\t\tthis.initContextKeys();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.editorGroupService.whenRestored.then(() => this.updateEditorContextKeys());\n\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.updateEditorContextKeys()));\n\t\tthis._register(this.editorService.onDidVisibleEditorsChange(() => this.updateEditorContextKeys()));\n\t\tthis._register(this.editorGroupService.onDidAddGroup(() => this.updateEditorContextKeys()));\n\t\tthis._register(this.editorGroupService.onDidRemoveGroup(() => this.updateEditorContextKeys()));\n\n\t\tthis._register(addDisposableListener(window, EventType.FOCUS_IN, () => this.updateInputContextKeys(), true));\n\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateWorkbenchStateContextKey()));\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.updateWorkspaceFolderCountContextKey()));\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('workbench.editor.openSideBySideDirection')) {\n\t\t\t\tthis.updateSplitEditorsVerticallyContext();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.layoutService.onZenModeChange(enabled => this.inZenModeContext.set(enabled)));\n\n\t\tthis._register(this.viewletService.onDidViewletClose(() => this.updateSideBarContextKeys()));\n\t\tthis._register(this.viewletService.onDidViewletOpen(() => this.updateSideBarContextKeys()));\n\t}\n\n\tprivate initContextKeys(): void {\n\n\t\t// Platform\n\t\tIsMacContext.bindTo(this.contextKeyService);\n\t\tIsLinuxContext.bindTo(this.contextKeyService);\n\t\tIsWindowsContext.bindTo(this.contextKeyService);\n\n\t\tIsRemoteContext.bindTo(this.contextKeyService).set(!!this.windowService.getConfiguration().remoteAuthority);\n\n\t\t// macOS Native Tabs\n\t\tconst windowConfig = this.configurationService.getValue<IWindowConfiguration>();\n\t\tHasMacNativeTabsContext.bindTo(this.contextKeyService).set(windowConfig && windowConfig.window && windowConfig.window.nativeTabs);\n\n\t\t// Development\n\t\tIsDevelopmentContext.bindTo(this.contextKeyService).set(!this.environmentService.isBuilt || this.environmentService.isExtensionDevelopment);\n\n\t\t// File Pickers\n\t\tSupportsWorkspacesContext.bindTo(this.contextKeyService);\n\t\tSupportsOpenFileFolderContext.bindTo(this.contextKeyService).set(!!this.windowService.getConfiguration().remoteAuthority);\n\n\t\t// Editors\n\t\tthis.activeEditorContext = ActiveEditorContext.bindTo(this.contextKeyService);\n\t\tthis.editorsVisibleContext = EditorsVisibleContext.bindTo(this.contextKeyService);\n\t\tthis.textCompareEditorVisibleContext = TextCompareEditorVisibleContext.bindTo(this.contextKeyService);\n\t\tthis.textCompareEditorActiveContext = TextCompareEditorActiveContext.bindTo(this.contextKeyService);\n\t\tthis.activeEditorGroupEmpty = ActiveEditorGroupEmptyContext.bindTo(this.contextKeyService);\n\t\tthis.multipleEditorGroupsContext = MultipleEditorGroupsContext.bindTo(this.contextKeyService);\n\n\t\t// Inputs\n\t\tthis.inputFocusedContext = InputFocusedContext.bindTo(this.contextKeyService);\n\n\t\t// Workbench State\n\t\tthis.workbenchStateContext = WorkbenchStateContext.bindTo(this.contextKeyService);\n\t\tthis.updateWorkbenchStateContextKey();\n\n\t\t// Workspace Folder Count\n\t\tthis.workspaceFolderCountContext = WorkspaceFolderCountContext.bindTo(this.contextKeyService);\n\t\tthis.updateWorkspaceFolderCountContextKey();\n\n\t\t// Editor Layout\n\t\tthis.splitEditorsVerticallyContext = SplitEditorsVertically.bindTo(this.contextKeyService);\n\t\tthis.updateSplitEditorsVerticallyContext();\n\n\t\t// Zen Mode\n\t\tthis.inZenModeContext = InEditorZenModeContext.bindTo(this.contextKeyService);\n\n\t\t// Sidebar\n\t\tthis.sideBarVisibleContext = SideBarVisibleContext.bindTo(this.contextKeyService);\n\t\tthis.sidebarVisibleContext = SidebarVisibleContext.bindTo(this.contextKeyService);\n\t}\n\n\tprivate updateEditorContextKeys(): void {\n\t\tconst activeControl = this.editorService.activeControl;\n\t\tconst visibleEditors = this.editorService.visibleControls;\n\n\t\tthis.textCompareEditorActiveContext.set(!!activeControl && activeControl.getId() === TEXT_DIFF_EDITOR_ID);\n\t\tthis.textCompareEditorVisibleContext.set(visibleEditors.some(control => control.getId() === TEXT_DIFF_EDITOR_ID));\n\n\t\tif (visibleEditors.length > 0) {\n\t\t\tthis.editorsVisibleContext.set(true);\n\t\t} else {\n\t\t\tthis.editorsVisibleContext.reset();\n\t\t}\n\n\t\tif (!this.editorService.activeEditor) {\n\t\t\tthis.activeEditorGroupEmpty.set(true);\n\t\t} else {\n\t\t\tthis.activeEditorGroupEmpty.reset();\n\t\t}\n\n\t\tif (this.editorGroupService.count > 1) {\n\t\t\tthis.multipleEditorGroupsContext.set(true);\n\t\t} else {\n\t\t\tthis.multipleEditorGroupsContext.reset();\n\t\t}\n\n\t\tif (activeControl) {\n\t\t\tthis.activeEditorContext.set(activeControl.getId());\n\t\t} else {\n\t\t\tthis.activeEditorContext.reset();\n\t\t}\n\t}\n\n\tprivate updateInputContextKeys(): void {\n\n\t\tfunction activeElementIsInput(): boolean {\n\t\t\treturn !!document.activeElement && (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA');\n\t\t}\n\n\t\tconst isInputFocused = activeElementIsInput();\n\t\tthis.inputFocusedContext.set(isInputFocused);\n\n\t\tif (isInputFocused) {\n\t\t\tconst tracker = trackFocus(document.activeElement as HTMLElement);\n\t\t\tEvent.once(tracker.onDidBlur)(() => {\n\t\t\t\tthis.inputFocusedContext.set(activeElementIsInput());\n\n\t\t\t\ttracker.dispose();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateWorkbenchStateContextKey(): void {\n\t\tthis.workbenchStateContext.set(this.getWorkbenchStateString());\n\t}\n\n\tprivate updateWorkspaceFolderCountContextKey(): void {\n\t\tthis.workspaceFolderCountContext.set(this.contextService.getWorkspace().folders.length);\n\t}\n\n\tprivate updateSplitEditorsVerticallyContext(): void {\n\t\tconst direction = preferredSideBySideGroupDirection(this.configurationService);\n\t\tthis.splitEditorsVerticallyContext.set(direction === GroupDirection.DOWN);\n\t}\n\n\tprivate getWorkbenchStateString(): string {\n\t\tswitch (this.contextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.EMPTY: return 'empty';\n\t\t\tcase WorkbenchState.FOLDER: return 'folder';\n\t\t\tcase WorkbenchState.WORKSPACE: return 'workspace';\n\t\t}\n\t}\n\n\tprivate updateSideBarContextKeys(): void {\n\t\tthis.sideBarVisibleContext.set(this.layoutService.isVisible(Parts.SIDEBAR_PART));\n\t\tthis.sidebarVisibleContext.set(this.layoutService.isVisible(Parts.SIDEBAR_PART));\n\t}\n}"]}]}