{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionDevOptions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionDevOptions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar network_1 = require(\"vs/base/common/network\");\nfunction parseExtensionDevOptions(environmentService) {\n    // handle extension host lifecycle a bit special when we know we are developing an extension that runs inside\n    var isExtensionDevHost = environmentService.isExtensionDevelopment;\n    var extDevLoc = environmentService.extensionDevelopmentLocationURI;\n    var debugOk = !extDevLoc || extDevLoc.scheme === network_1.Schemas.file;\n    var isExtensionDevDebug = debugOk && typeof environmentService.debugExtensionHost.port === 'number';\n    var isExtensionDevDebugBrk = debugOk && !!environmentService.debugExtensionHost.break;\n    var isExtensionDevTestFromCli = isExtensionDevHost && !!environmentService.extensionTestsLocationURI && !environmentService.debugExtensionHost.break;\n    return {\n        isExtensionDevHost: isExtensionDevHost,\n        isExtensionDevDebug: isExtensionDevDebug,\n        isExtensionDevDebugBrk: isExtensionDevDebugBrk,\n        isExtensionDevTestFromCli: isExtensionDevTestFromCli,\n    };\n}\nexports.parseExtensionDevOptions = parseExtensionDevOptions;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionDevOptions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionDevOptions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,kDAAiD;AAUjD,SAAgB,wBAAwB,CAAC,kBAAuC;IAC/E,6GAA6G;IAC7G,IAAI,kBAAkB,GAAG,kBAAkB,CAAC,sBAAsB,CAAC;IACnE,IAAM,SAAS,GAAG,kBAAkB,CAAC,+BAA+B,CAAC;IACrE,IAAM,OAAO,GAAG,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC;IAChE,IAAI,mBAAmB,GAAG,OAAO,IAAI,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,KAAK,QAAQ,CAAC;IACpG,IAAI,sBAAsB,GAAG,OAAO,IAAI,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,KAAK,CAAC;IACtF,IAAI,yBAAyB,GAAG,kBAAkB,IAAI,CAAC,CAAC,kBAAkB,CAAC,yBAAyB,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,KAAK,CAAC;IACrJ,OAAO;QACN,kBAAkB,oBAAA;QAClB,mBAAmB,qBAAA;QACnB,sBAAsB,wBAAA;QACtB,yBAAyB,2BAAA;KACzB,CAAC;AACH,CAAC;AAdD,4DAcC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport interface IExtensionDevOptions {\n\treadonly isExtensionDevHost: boolean;\n\treadonly isExtensionDevDebug: boolean;\n\treadonly isExtensionDevDebugBrk: boolean;\n\treadonly isExtensionDevTestFromCli: boolean;\n}\n\nexport function parseExtensionDevOptions(environmentService: IEnvironmentService): IExtensionDevOptions {\n\t// handle extension host lifecycle a bit special when we know we are developing an extension that runs inside\n\tlet isExtensionDevHost = environmentService.isExtensionDevelopment;\n\tconst extDevLoc = environmentService.extensionDevelopmentLocationURI;\n\tconst debugOk = !extDevLoc || extDevLoc.scheme === Schemas.file;\n\tlet isExtensionDevDebug = debugOk && typeof environmentService.debugExtensionHost.port === 'number';\n\tlet isExtensionDevDebugBrk = debugOk && !!environmentService.debugExtensionHost.break;\n\tlet isExtensionDevTestFromCli = isExtensionDevHost && !!environmentService.extensionTestsLocationURI && !environmentService.debugExtensionHost.break;\n\treturn {\n\t\tisExtensionDevHost,\n\t\tisExtensionDevDebug,\n\t\tisExtensionDevDebugBrk,\n\t\tisExtensionDevTestFromCli,\n\t};\n}\n"]}]}