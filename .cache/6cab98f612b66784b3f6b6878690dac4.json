{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar path_1 = require(\"vs/base/common/path\");\nvar resources = require(\"vs/base/common/resources\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar map_1 = require(\"vs/base/common/map\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar platform_1 = require(\"vs/base/common/platform\");\nexports.IWorkspaceContextService = instantiation_1.createDecorator('contextService');\nvar WorkbenchState;\n(function (WorkbenchState) {\n    WorkbenchState[WorkbenchState[\"EMPTY\"] = 1] = \"EMPTY\";\n    WorkbenchState[WorkbenchState[\"FOLDER\"] = 2] = \"FOLDER\";\n    WorkbenchState[WorkbenchState[\"WORKSPACE\"] = 3] = \"WORKSPACE\";\n})(WorkbenchState = exports.WorkbenchState || (exports.WorkbenchState = {}));\nvar IWorkspace;\n(function (IWorkspace) {\n    function isIWorkspace(thing) {\n        return thing && typeof thing === 'object'\n            && typeof thing.id === 'string'\n            && Array.isArray(thing.folders);\n    }\n    IWorkspace.isIWorkspace = isIWorkspace;\n})(IWorkspace = exports.IWorkspace || (exports.IWorkspace = {}));\nvar IWorkspaceFolder;\n(function (IWorkspaceFolder) {\n    function isIWorkspaceFolder(thing) {\n        return thing && typeof thing === 'object'\n            && uri_1.URI.isUri(thing.uri)\n            && typeof thing.name === 'string'\n            && typeof thing.toResource === 'function';\n    }\n    IWorkspaceFolder.isIWorkspaceFolder = isIWorkspaceFolder;\n})(IWorkspaceFolder = exports.IWorkspaceFolder || (exports.IWorkspaceFolder = {}));\nvar Workspace = /** @class */ (function () {\n    function Workspace(_id, folders, _configuration) {\n        if (folders === void 0) { folders = []; }\n        if (_configuration === void 0) { _configuration = null; }\n        this._id = _id;\n        this._configuration = _configuration;\n        this._foldersMap = map_1.TernarySearchTree.forPaths();\n        this.folders = folders;\n    }\n    Workspace.prototype.update = function (workspace) {\n        this._id = workspace.id;\n        this._configuration = workspace.configuration;\n        this.folders = workspace.folders;\n    };\n    Object.defineProperty(Workspace.prototype, \"folders\", {\n        get: function () {\n            return this._folders;\n        },\n        set: function (folders) {\n            this._folders = folders;\n            this.updateFoldersMap();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workspace.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workspace.prototype, \"configuration\", {\n        get: function () {\n            return this._configuration;\n        },\n        set: function (configuration) {\n            this._configuration = configuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Workspace.prototype.getFolder = function (resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource.toString()) || null;\n    };\n    Workspace.prototype.updateFoldersMap = function () {\n        this._foldersMap = map_1.TernarySearchTree.forPaths();\n        for (var _i = 0, _a = this.folders; _i < _a.length; _i++) {\n            var folder = _a[_i];\n            this._foldersMap.set(folder.uri.toString(), folder);\n        }\n    };\n    Workspace.prototype.toJSON = function () {\n        return { id: this.id, folders: this.folders, configuration: this.configuration };\n    };\n    return Workspace;\n}());\nexports.Workspace = Workspace;\nvar WorkspaceFolder = /** @class */ (function () {\n    function WorkspaceFolder(data, raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    WorkspaceFolder.prototype.toResource = function (relativePath) {\n        return resources.joinPath(this.uri, relativePath);\n    };\n    WorkspaceFolder.prototype.toJSON = function () {\n        return { uri: this.uri, name: this.name, index: this.index };\n    };\n    return WorkspaceFolder;\n}());\nexports.WorkspaceFolder = WorkspaceFolder;\nfunction toWorkspaceFolders(configuredFolders, relativeTo) {\n    var workspaceFolders = parseWorkspaceFolders(configuredFolders, relativeTo);\n    return ensureUnique(arrays_1.coalesce(workspaceFolders))\n        .map(function (_a, index) {\n        var uri = _a.uri, raw = _a.raw, name = _a.name;\n        return new WorkspaceFolder({ uri: uri, name: name || resources.basenameOrAuthority(uri), index: index }, raw);\n    });\n}\nexports.toWorkspaceFolders = toWorkspaceFolders;\nfunction parseWorkspaceFolders(configuredFolders, relativeTo) {\n    return configuredFolders.map(function (configuredFolder, index) {\n        var uri = null;\n        if (workspaces_1.isRawFileWorkspaceFolder(configuredFolder)) {\n            uri = toUri(configuredFolder.path, relativeTo);\n        }\n        else if (workspaces_1.isRawUriWorkspaceFolder(configuredFolder)) {\n            try {\n                uri = uri_1.URI.parse(configuredFolder.uri);\n                // this makes sure all workspace folder are absolute\n                if (uri.path[0] !== '/') {\n                    uri = uri.with({ path: '/' + uri.path });\n                }\n            }\n            catch (e) {\n                console.warn(e);\n                // ignore\n            }\n        }\n        if (!uri) {\n            return undefined;\n        }\n        return new WorkspaceFolder({ uri: uri, name: configuredFolder.name /*is ensured in caller*/, index: index }, configuredFolder);\n    });\n}\nfunction toUri(path, relativeTo) {\n    if (path) {\n        if (path_1.isAbsolute(path)) {\n            return uri_1.URI.file(path);\n        }\n        if (relativeTo) {\n            return resources.joinPath(relativeTo, path);\n        }\n    }\n    return null;\n}\nfunction ensureUnique(folders) {\n    return arrays_1.distinct(folders, function (folder) { return platform_1.isLinux ? folder.uri.toString() : folder.uri.toString().toLowerCase(); });\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { isAbsolute } from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { TernarySearchTree } from 'vs/base/common/map';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkspaceIdentifier, IStoredWorkspaceFolder, isRawFileWorkspaceFolder, isRawUriWorkspaceFolder, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { coalesce, distinct } from 'vs/base/common/arrays';\nimport { isLinux } from 'vs/base/common/platform';\n\nexport const IWorkspaceContextService = createDecorator<IWorkspaceContextService>('contextService');\n\nexport const enum WorkbenchState {\n\tEMPTY = 1,\n\tFOLDER,\n\tWORKSPACE\n}\n\nexport interface IWorkspaceFoldersChangeEvent {\n\tadded: IWorkspaceFolder[];\n\tremoved: IWorkspaceFolder[];\n\tchanged: IWorkspaceFolder[];\n}\n\nexport interface IWorkspaceContextService {\n\t_serviceBrand: any;\n\n\t/**\n\t * An event which fires on workbench state changes.\n\t */\n\tonDidChangeWorkbenchState: Event<WorkbenchState>;\n\n\t/**\n\t * An event which fires on workspace name changes.\n\t */\n\tonDidChangeWorkspaceName: Event<void>;\n\n\t/**\n\t * An event which fires on workspace folders change.\n\t */\n\tonDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent>;\n\n\t/**\n\t * Provides access to the complete workspace object.\n\t */\n\tgetCompleteWorkspace(): Promise<IWorkspace>;\n\n\t/**\n\t * Provides access to the workspace object the window is running with.\n\t * Use `getCompleteWorkspace` to get complete workspace object.\n\t */\n\tgetWorkspace(): IWorkspace;\n\n\t/**\n\t * Return the state of the workbench.\n\t *\n\t * WorkbenchState.EMPTY - if the workbench was opened with empty window or file\n\t * WorkbenchState.FOLDER - if the workbench was opened with a folder\n\t * WorkbenchState.WORKSPACE - if the workbench was opened with a workspace\n\t */\n\tgetWorkbenchState(): WorkbenchState;\n\n\t/**\n\t * Returns the folder for the given resource from the workspace.\n\t * Can be null if there is no workspace or the resource is not inside the workspace.\n\t */\n\tgetWorkspaceFolder(resource: URI): IWorkspaceFolder | null;\n\n\t/**\n\t * Return `true` if the current workspace has the given identifier otherwise `false`.\n\t */\n\tisCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean;\n\n\t/**\n\t * Returns if the provided resource is inside the workspace or not.\n\t */\n\tisInsideWorkspace(resource: URI): boolean;\n}\n\nexport namespace IWorkspace {\n\texport function isIWorkspace(thing: any): thing is IWorkspace {\n\t\treturn thing && typeof thing === 'object'\n\t\t\t&& typeof (thing as IWorkspace).id === 'string'\n\t\t\t&& Array.isArray((thing as IWorkspace).folders);\n\t}\n}\n\nexport interface IWorkspace {\n\n\t/**\n\t * the unique identifier of the workspace.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Folders in the workspace.\n\t */\n\treadonly folders: IWorkspaceFolder[];\n\n\t/**\n\t * the location of the workspace configuration\n\t */\n\treadonly configuration?: URI | null;\n}\n\nexport interface IWorkspaceFolderData {\n\t/**\n\t * The associated URI for this workspace folder.\n\t */\n\treadonly uri: URI;\n\n\t/**\n\t * The name of this workspace folder. Defaults to\n\t * the basename its [uri-path](#Uri.path)\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The ordinal number of this workspace folder.\n\t */\n\treadonly index: number;\n}\n\nexport namespace IWorkspaceFolder {\n\texport function isIWorkspaceFolder(thing: any): thing is IWorkspaceFolder {\n\t\treturn thing && typeof thing === 'object'\n\t\t\t&& URI.isUri((thing as IWorkspaceFolder).uri)\n\t\t\t&& typeof (thing as IWorkspaceFolder).name === 'string'\n\t\t\t&& typeof (thing as IWorkspaceFolder).toResource === 'function';\n\t}\n}\n\nexport interface IWorkspaceFolder extends IWorkspaceFolderData {\n\n\t/**\n\t * Given workspace folder relative path, returns the resource with the absolute path.\n\t */\n\ttoResource: (relativePath: string) => URI;\n}\n\nexport class Workspace implements IWorkspace {\n\n\tprivate _foldersMap: TernarySearchTree<WorkspaceFolder> = TernarySearchTree.forPaths<WorkspaceFolder>();\n\tprivate _folders: WorkspaceFolder[];\n\n\tconstructor(\n\t\tprivate _id: string,\n\t\tfolders: WorkspaceFolder[] = [],\n\t\tprivate _configuration: URI | null = null\n\t) {\n\t\tthis.folders = folders;\n\t}\n\n\tupdate(workspace: Workspace) {\n\t\tthis._id = workspace.id;\n\t\tthis._configuration = workspace.configuration;\n\t\tthis.folders = workspace.folders;\n\t}\n\n\tget folders(): WorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tset folders(folders: WorkspaceFolder[]) {\n\t\tthis._folders = folders;\n\t\tthis.updateFoldersMap();\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget configuration(): URI | null {\n\t\treturn this._configuration;\n\t}\n\n\tset configuration(configuration: URI | null) {\n\t\tthis._configuration = configuration;\n\t}\n\n\tgetFolder(resource: URI): IWorkspaceFolder | null {\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._foldersMap.findSubstr(resource.toString()) || null;\n\t}\n\n\tprivate updateFoldersMap(): void {\n\t\tthis._foldersMap = TernarySearchTree.forPaths<WorkspaceFolder>();\n\t\tfor (const folder of this.folders) {\n\t\t\tthis._foldersMap.set(folder.uri.toString(), folder);\n\t\t}\n\t}\n\n\ttoJSON(): IWorkspace {\n\t\treturn { id: this.id, folders: this.folders, configuration: this.configuration };\n\t}\n}\n\nexport class WorkspaceFolder implements IWorkspaceFolder {\n\n\treadonly uri: URI;\n\tname: string;\n\tindex: number;\n\n\tconstructor(data: IWorkspaceFolderData,\n\t\treadonly raw?: IStoredWorkspaceFolder) {\n\t\tthis.uri = data.uri;\n\t\tthis.index = data.index;\n\t\tthis.name = data.name;\n\t}\n\n\ttoResource(relativePath: string): URI {\n\t\treturn resources.joinPath(this.uri, relativePath);\n\t}\n\n\ttoJSON(): IWorkspaceFolderData {\n\t\treturn { uri: this.uri, name: this.name, index: this.index };\n\t}\n}\n\nexport function toWorkspaceFolders(configuredFolders: IStoredWorkspaceFolder[], relativeTo?: URI): WorkspaceFolder[] {\n\tlet workspaceFolders = parseWorkspaceFolders(configuredFolders, relativeTo);\n\treturn ensureUnique(coalesce(workspaceFolders))\n\t\t.map(({ uri, raw, name }, index) => new WorkspaceFolder({ uri, name: name || resources.basenameOrAuthority(uri), index }, raw));\n}\n\nfunction parseWorkspaceFolders(configuredFolders: IStoredWorkspaceFolder[], relativeTo: URI | undefined): Array<WorkspaceFolder | undefined> {\n\treturn configuredFolders.map((configuredFolder, index) => {\n\t\tlet uri: URI | null = null;\n\t\tif (isRawFileWorkspaceFolder(configuredFolder)) {\n\t\t\turi = toUri(configuredFolder.path, relativeTo);\n\t\t} else if (isRawUriWorkspaceFolder(configuredFolder)) {\n\t\t\ttry {\n\t\t\t\turi = URI.parse(configuredFolder.uri);\n\t\t\t\t// this makes sure all workspace folder are absolute\n\t\t\t\tif (uri.path[0] !== '/') {\n\t\t\t\t\turi = uri.with({ path: '/' + uri.path });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(e);\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\tif (!uri) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new WorkspaceFolder({ uri, name: configuredFolder.name! /*is ensured in caller*/, index }, configuredFolder);\n\t});\n}\n\nfunction toUri(path: string, relativeTo: URI | undefined): URI | null {\n\tif (path) {\n\t\tif (isAbsolute(path)) {\n\t\t\treturn URI.file(path);\n\t\t}\n\t\tif (relativeTo) {\n\t\t\treturn resources.joinPath(relativeTo, path);\n\t\t}\n\t}\n\treturn null;\n}\n\nfunction ensureUnique(folders: WorkspaceFolder[]): WorkspaceFolder[] {\n\treturn distinct(folders, folder => isLinux ? folder.uri.toString() : folder.uri.toString().toLowerCase());\n}\n"]}]}