{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/searchModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/async\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/base/common/event\", \"vs/base/common/labels\", \"vs/base/common/lifecycle\", \"vs/base/common/map\", \"vs/base/common/objects\", \"vs/base/common/strings\", \"vs/base/common/uri\", \"vs/editor/common/core/range\", \"vs/editor/common/model\", \"vs/editor/common/model/textModel\", \"vs/editor/common/services/modelService\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/services/search/common/replace\", \"vs/workbench/services/search/common/search\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/workbench/contrib/search/common/replace\", \"vs/workbench/services/search/common/searchHelpers\", \"vs/base/common/types\"], function (require, exports, async_1, cancellation_1, errors, event_1, labels_1, lifecycle_1, map_1, objects, strings_1, uri_1, range_1, model_1, textModel_1, modelService_1, instantiation_1, replace_1, search_1, telemetry_1, colorRegistry_1, themeService_1, replace_2, searchHelpers_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Match {\n        constructor(_parent, _fullPreviewLines, _fullPreviewRange, _documentRange) {\n            this._parent = _parent;\n            this._fullPreviewLines = _fullPreviewLines;\n            this._oneLinePreviewText = _fullPreviewLines[_fullPreviewRange.startLineNumber];\n            const adjustedEndCol = _fullPreviewRange.startLineNumber === _fullPreviewRange.endLineNumber ?\n                _fullPreviewRange.endColumn :\n                this._oneLinePreviewText.length;\n            this._rangeInPreviewText = new search_1.OneLineRange(1, _fullPreviewRange.startColumn + 1, adjustedEndCol + 1);\n            this._range = new range_1.Range(_documentRange.startLineNumber + 1, _documentRange.startColumn + 1, _documentRange.endLineNumber + 1, _documentRange.endColumn + 1);\n            this._fullPreviewRange = _fullPreviewRange;\n            this._id = this._parent.id() + '>' + this._range + this.getMatchString();\n        }\n        id() {\n            return this._id;\n        }\n        parent() {\n            return this._parent;\n        }\n        text() {\n            return this._oneLinePreviewText;\n        }\n        range() {\n            return this._range;\n        }\n        preview() {\n            let before = this._oneLinePreviewText.substring(0, this._rangeInPreviewText.startColumn - 1), inside = this.getMatchString(), after = this._oneLinePreviewText.substring(this._rangeInPreviewText.endColumn - 1);\n            before = strings_1.lcut(before, 26);\n            before = before.trimLeft();\n            let charsRemaining = Match.MAX_PREVIEW_CHARS - before.length;\n            inside = inside.substr(0, charsRemaining);\n            charsRemaining -= inside.length;\n            after = after.substr(0, charsRemaining);\n            return {\n                before,\n                inside,\n                after,\n            };\n        }\n        get replaceString() {\n            const searchModel = this.parent().parent().searchModel;\n            if (!searchModel.replacePattern) {\n                throw new Error('searchModel.replacePattern must be set before accessing replaceString');\n            }\n            const fullMatchText = this.fullMatchText();\n            let replaceString = searchModel.replacePattern.getReplaceString(fullMatchText);\n            // If match string is not matching then regex pattern has a lookahead expression\n            if (replaceString === null) {\n                const fullMatchTextWithTrailingContent = this.fullMatchText(true);\n                replaceString = searchModel.replacePattern.getReplaceString(fullMatchTextWithTrailingContent);\n                // Search/find normalize line endings - check whether \\r prevents regex from matching\n                if (replaceString === null) {\n                    const fullMatchTextWithoutCR = fullMatchTextWithTrailingContent.replace(/\\r\\n/g, '\\n');\n                    replaceString = searchModel.replacePattern.getReplaceString(fullMatchTextWithoutCR);\n                }\n            }\n            // Match string is still not matching. Could be unsupported matches (multi-line).\n            if (replaceString === null) {\n                replaceString = searchModel.replacePattern.pattern;\n            }\n            return replaceString;\n        }\n        fullMatchText(includeTrailing = false) {\n            let thisMatchPreviewLines;\n            if (includeTrailing) {\n                thisMatchPreviewLines = this._fullPreviewLines.slice(this._fullPreviewRange.startLineNumber);\n            }\n            else {\n                thisMatchPreviewLines = this._fullPreviewLines.slice(this._fullPreviewRange.startLineNumber, this._fullPreviewRange.endLineNumber + 1);\n                thisMatchPreviewLines[thisMatchPreviewLines.length - 1] = thisMatchPreviewLines[thisMatchPreviewLines.length - 1].slice(0, this._fullPreviewRange.endColumn);\n            }\n            thisMatchPreviewLines[0] = thisMatchPreviewLines[0].slice(this._fullPreviewRange.startColumn);\n            return thisMatchPreviewLines.join('\\n');\n        }\n        fullPreviewLines() {\n            return this._fullPreviewLines.slice(this._fullPreviewRange.startLineNumber, this._fullPreviewRange.endLineNumber + 1);\n        }\n        getMatchString() {\n            return this._oneLinePreviewText.substring(this._rangeInPreviewText.startColumn - 1, this._rangeInPreviewText.endColumn - 1);\n        }\n    }\n    Match.MAX_PREVIEW_CHARS = 250;\n    exports.Match = Match;\n    let FileMatch = class FileMatch extends lifecycle_1.Disposable {\n        constructor(_query, _previewOptions, _maxResults, _parent, rawMatch, modelService, replaceService) {\n            super();\n            this._query = _query;\n            this._previewOptions = _previewOptions;\n            this._maxResults = _maxResults;\n            this._parent = _parent;\n            this.rawMatch = rawMatch;\n            this.modelService = modelService;\n            this.replaceService = replaceService;\n            this._onChange = this._register(new event_1.Emitter());\n            this.onChange = this._onChange.event;\n            this._onDispose = this._register(new event_1.Emitter());\n            this.onDispose = this._onDispose.event;\n            this._modelDecorations = [];\n            this._resource = this.rawMatch.resource;\n            this._matches = new Map();\n            this._removedMatches = new Set();\n            this._updateScheduler = new async_1.RunOnceScheduler(this.updateMatchesForModel.bind(this), 250);\n            this.createMatches();\n        }\n        static getDecorationOption(selected) {\n            return (selected ? FileMatch._CURRENT_FIND_MATCH : FileMatch._FIND_MATCH);\n        }\n        createMatches() {\n            const model = this.modelService.getModel(this._resource);\n            if (model) {\n                this.bindModel(model);\n                this.updateMatchesForModel();\n            }\n            else {\n                this.rawMatch.results\n                    .filter(search_1.resultIsMatch)\n                    .forEach(rawMatch => {\n                    textSearchResultToMatches(rawMatch, this)\n                        .forEach(m => this.add(m));\n                });\n            }\n        }\n        bindModel(model) {\n            this._model = model;\n            this._modelListener = this._model.onDidChangeContent(() => {\n                this._updateScheduler.schedule();\n            });\n            this._model.onWillDispose(() => this.onModelWillDispose());\n            this.updateHighlights();\n        }\n        onModelWillDispose() {\n            // Update matches because model might have some dirty changes\n            this.updateMatchesForModel();\n            this.unbindModel();\n        }\n        unbindModel() {\n            if (this._model) {\n                this._updateScheduler.cancel();\n                this._model.deltaDecorations(this._modelDecorations, []);\n                this._model = null;\n                this._modelListener.dispose();\n            }\n        }\n        updateMatchesForModel() {\n            // this is called from a timeout and might fire\n            // after the model has been disposed\n            if (!this._model) {\n                return;\n            }\n            this._matches = new Map();\n            const wordSeparators = this._query.isWordMatch && this._query.wordSeparators ? this._query.wordSeparators : null;\n            const matches = this._model\n                .findMatches(this._query.pattern, this._model.getFullModelRange(), !!this._query.isRegExp, !!this._query.isCaseSensitive, wordSeparators, false, this._maxResults);\n            this.updateMatches(matches, true);\n        }\n        updatesMatchesForLineAfterReplace(lineNumber, modelChange) {\n            if (!this._model) {\n                return;\n            }\n            const range = {\n                startLineNumber: lineNumber,\n                startColumn: this._model.getLineMinColumn(lineNumber),\n                endLineNumber: lineNumber,\n                endColumn: this._model.getLineMaxColumn(lineNumber)\n            };\n            const oldMatches = map_1.values(this._matches).filter(match => match.range().startLineNumber === lineNumber);\n            oldMatches.forEach(match => this._matches.delete(match.id()));\n            const wordSeparators = this._query.isWordMatch && this._query.wordSeparators ? this._query.wordSeparators : null;\n            const matches = this._model.findMatches(this._query.pattern, range, !!this._query.isRegExp, !!this._query.isCaseSensitive, wordSeparators, false, this._maxResults);\n            this.updateMatches(matches, modelChange);\n        }\n        updateMatches(matches, modelChange) {\n            if (!this._model) {\n                return;\n            }\n            const textSearchResults = searchHelpers_1.editorMatchesToTextSearchResults(matches, this._model, this._previewOptions);\n            textSearchResults.forEach(textSearchResult => {\n                textSearchResultToMatches(textSearchResult, this).forEach(match => {\n                    if (!this._removedMatches.has(match.id())) {\n                        this.add(match);\n                        if (this.isMatchSelected(match)) {\n                            this._selectedMatch = match;\n                        }\n                    }\n                });\n            });\n            this._onChange.fire(modelChange);\n            this.updateHighlights();\n        }\n        updateHighlights() {\n            if (!this._model) {\n                return;\n            }\n            if (this.parent().showHighlights) {\n                this._modelDecorations = this._model.deltaDecorations(this._modelDecorations, this.matches().map(match => ({\n                    range: match.range(),\n                    options: FileMatch.getDecorationOption(this.isMatchSelected(match))\n                })));\n            }\n            else {\n                this._modelDecorations = this._model.deltaDecorations(this._modelDecorations, []);\n            }\n        }\n        id() {\n            return this.resource().toString();\n        }\n        parent() {\n            return this._parent;\n        }\n        matches() {\n            return map_1.values(this._matches);\n        }\n        remove(match) {\n            this.removeMatch(match);\n            this._removedMatches.add(match.id());\n            this._onChange.fire(false);\n        }\n        replace(toReplace) {\n            return this.replaceService.replace(toReplace)\n                .then(() => this.updatesMatchesForLineAfterReplace(toReplace.range().startLineNumber, false));\n        }\n        setSelectedMatch(match) {\n            if (match) {\n                if (!this._matches.has(match.id())) {\n                    return;\n                }\n                if (this.isMatchSelected(match)) {\n                    return;\n                }\n            }\n            this._selectedMatch = match;\n            this.updateHighlights();\n        }\n        getSelectedMatch() {\n            return this._selectedMatch;\n        }\n        isMatchSelected(match) {\n            return !!this._selectedMatch && this._selectedMatch.id() === match.id();\n        }\n        count() {\n            return this.matches().length;\n        }\n        resource() {\n            return this._resource;\n        }\n        name() {\n            return labels_1.getBaseLabel(this.resource());\n        }\n        add(match, trigger) {\n            this._matches.set(match.id(), match);\n            if (trigger) {\n                this._onChange.fire(true);\n            }\n        }\n        removeMatch(match) {\n            this._matches.delete(match.id());\n            if (this.isMatchSelected(match)) {\n                this.setSelectedMatch(null);\n            }\n            else {\n                this.updateHighlights();\n            }\n        }\n        dispose() {\n            this.setSelectedMatch(null);\n            this.unbindModel();\n            this._onDispose.fire();\n            super.dispose();\n        }\n    };\n    FileMatch._CURRENT_FIND_MATCH = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        zIndex: 13,\n        className: 'currentFindMatch',\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerFindMatchForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    FileMatch._FIND_MATCH = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'findMatch',\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerFindMatchForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    FileMatch = __decorate([\n        __param(5, modelService_1.IModelService), __param(6, replace_2.IReplaceService)\n    ], FileMatch);\n    exports.FileMatch = FileMatch;\n    let BaseFolderMatch = class BaseFolderMatch extends lifecycle_1.Disposable {\n        constructor(_resource, _id, _index, _query, _parent, _searchModel, replaceService, instantiationService) {\n            super();\n            this._resource = _resource;\n            this._id = _id;\n            this._index = _index;\n            this._query = _query;\n            this._parent = _parent;\n            this._searchModel = _searchModel;\n            this.replaceService = replaceService;\n            this.instantiationService = instantiationService;\n            this._onChange = this._register(new event_1.Emitter());\n            this.onChange = this._onChange.event;\n            this._onDispose = this._register(new event_1.Emitter());\n            this.onDispose = this._onDispose.event;\n            this._replacingAll = false;\n            this._fileMatches = new map_1.ResourceMap();\n            this._unDisposedFileMatches = new map_1.ResourceMap();\n        }\n        get searchModel() {\n            return this._searchModel;\n        }\n        get showHighlights() {\n            return this._parent.showHighlights;\n        }\n        set replacingAll(b) {\n            this._replacingAll = b;\n        }\n        id() {\n            return this._id;\n        }\n        resource() {\n            return this._resource;\n        }\n        index() {\n            return this._index;\n        }\n        name() {\n            return labels_1.getBaseLabel(types_1.withNullAsUndefined(this.resource())) || '';\n        }\n        parent() {\n            return this._parent;\n        }\n        hasResource() {\n            return !!this._resource;\n        }\n        bindModel(model) {\n            const fileMatch = this._fileMatches.get(model.uri);\n            if (fileMatch) {\n                fileMatch.bindModel(model);\n            }\n        }\n        add(raw, silent) {\n            const added = [];\n            const updated = [];\n            raw.forEach(rawFileMatch => {\n                const existingFileMatch = this._fileMatches.get(rawFileMatch.resource);\n                if (existingFileMatch) {\n                    rawFileMatch\n                        .results\n                        .filter(search_1.resultIsMatch)\n                        .forEach(m => {\n                        textSearchResultToMatches(m, existingFileMatch)\n                            .forEach(m => existingFileMatch.add(m));\n                    });\n                    updated.push(existingFileMatch);\n                }\n                else {\n                    const fileMatch = this.instantiationService.createInstance(FileMatch, this._query.contentPattern, this._query.previewOptions, this._query.maxResults, this, rawFileMatch);\n                    this.doAdd(fileMatch);\n                    added.push(fileMatch);\n                    const disposable = fileMatch.onChange(() => this.onFileChange(fileMatch));\n                    fileMatch.onDispose(() => disposable.dispose());\n                }\n            });\n            const elements = [...added, ...updated];\n            if (!silent && elements.length) {\n                this._onChange.fire({ elements, added: !!added.length });\n            }\n        }\n        clear() {\n            const changed = this.matches();\n            this.disposeMatches();\n            this._onChange.fire({ elements: changed, removed: true });\n        }\n        remove(match) {\n            this.doRemove(match);\n        }\n        replace(match) {\n            return this.replaceService.replace([match]).then(() => {\n                this.doRemove(match, false, true);\n            });\n        }\n        replaceAll() {\n            const matches = this.matches();\n            return this.replaceService.replace(matches).then(() => {\n                matches.forEach(match => this.doRemove(match, false, true));\n            });\n        }\n        matches() {\n            return this._fileMatches.values();\n        }\n        isEmpty() {\n            return this.fileCount() === 0;\n        }\n        fileCount() {\n            return this._fileMatches.size;\n        }\n        count() {\n            return this.matches().reduce((prev, match) => prev + match.count(), 0);\n        }\n        onFileChange(fileMatch) {\n            let added = false;\n            let removed = false;\n            if (!this._fileMatches.has(fileMatch.resource())) {\n                this.doAdd(fileMatch);\n                added = true;\n            }\n            if (fileMatch.count() === 0) {\n                this.doRemove(fileMatch, false, false);\n                added = false;\n                removed = true;\n            }\n            if (!this._replacingAll) {\n                this._onChange.fire({ elements: [fileMatch], added: added, removed: removed });\n            }\n        }\n        doAdd(fileMatch) {\n            this._fileMatches.set(fileMatch.resource(), fileMatch);\n            if (this._unDisposedFileMatches.has(fileMatch.resource())) {\n                this._unDisposedFileMatches.delete(fileMatch.resource());\n            }\n        }\n        doRemove(fileMatch, dispose = true, trigger = true) {\n            this._fileMatches.delete(fileMatch.resource());\n            if (dispose) {\n                fileMatch.dispose();\n            }\n            else {\n                this._unDisposedFileMatches.set(fileMatch.resource(), fileMatch);\n            }\n            if (trigger) {\n                this._onChange.fire({ elements: [fileMatch], removed: true });\n            }\n        }\n        disposeMatches() {\n            this._fileMatches.values().forEach((fileMatch) => fileMatch.dispose());\n            this._unDisposedFileMatches.values().forEach((fileMatch) => fileMatch.dispose());\n            this._fileMatches.clear();\n            this._unDisposedFileMatches.clear();\n        }\n        dispose() {\n            this.disposeMatches();\n            this._onDispose.fire();\n            super.dispose();\n        }\n    };\n    BaseFolderMatch = __decorate([\n        __param(6, replace_2.IReplaceService),\n        __param(7, instantiation_1.IInstantiationService)\n    ], BaseFolderMatch);\n    exports.BaseFolderMatch = BaseFolderMatch;\n    /**\n     * BaseFolderMatch => optional resource (\"other files\" node)\n     * FolderMatch => required resource (normal folder node)\n     */\n    let FolderMatch = class FolderMatch extends BaseFolderMatch {\n        constructor(_resource, _id, _index, _query, _parent, _searchModel, replaceService, instantiationService) {\n            super(_resource, _id, _index, _query, _parent, _searchModel, replaceService, instantiationService);\n        }\n        resource() {\n            return this._resource;\n        }\n    };\n    FolderMatch = __decorate([\n        __param(6, replace_2.IReplaceService),\n        __param(7, instantiation_1.IInstantiationService)\n    ], FolderMatch);\n    exports.FolderMatch = FolderMatch;\n    /**\n     * Compares instances of the same match type. Different match types should not be siblings\n     * and their sort order is undefined.\n     */\n    function searchMatchComparer(elementA, elementB) {\n        if (elementA instanceof BaseFolderMatch && elementB instanceof BaseFolderMatch) {\n            return elementA.index() - elementB.index();\n        }\n        if (elementA instanceof FileMatch && elementB instanceof FileMatch) {\n            return elementA.resource().fsPath.localeCompare(elementB.resource().fsPath) || elementA.name().localeCompare(elementB.name());\n        }\n        if (elementA instanceof Match && elementB instanceof Match) {\n            return range_1.Range.compareRangesUsingStarts(elementA.range(), elementB.range());\n        }\n        return 0;\n    }\n    exports.searchMatchComparer = searchMatchComparer;\n    let SearchResult = class SearchResult extends lifecycle_1.Disposable {\n        constructor(_searchModel, replaceService, telemetryService, instantiationService, modelService) {\n            super();\n            this._searchModel = _searchModel;\n            this.replaceService = replaceService;\n            this.telemetryService = telemetryService;\n            this.instantiationService = instantiationService;\n            this.modelService = modelService;\n            this._onChange = this._register(new event_1.Emitter());\n            this.onChange = this._onChange.event;\n            this._folderMatches = [];\n            this._folderMatchesMap = map_1.TernarySearchTree.forPaths();\n            this._rangeHighlightDecorations = this.instantiationService.createInstance(RangeHighlightDecorations);\n            this._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));\n        }\n        get query() {\n            return this._query;\n        }\n        set query(query) {\n            // When updating the query we could change the roots, so ensure we clean up the old roots first.\n            this.clear();\n            this._folderMatches = (query.folderQueries || [])\n                .map(fq => fq.folder)\n                .map((resource, index) => this.createFolderMatch(resource, resource.toString(), index, query));\n            this._folderMatches.forEach(fm => this._folderMatchesMap.set(fm.resource().toString(), fm));\n            this._otherFilesMatch = this.createOtherFilesFolderMatch('otherFiles', this._folderMatches.length + 1, query);\n            this._query = query;\n        }\n        onModelAdded(model) {\n            const folderMatch = this._folderMatchesMap.findSubstr(model.uri.toString());\n            if (folderMatch) {\n                folderMatch.bindModel(model);\n            }\n        }\n        createFolderMatch(resource, id, index, query) {\n            return this._createBaseFolderMatch(FolderMatch, resource, id, index, query);\n        }\n        createOtherFilesFolderMatch(id, index, query) {\n            return this._createBaseFolderMatch(BaseFolderMatch, null, id, index, query);\n        }\n        _createBaseFolderMatch(folderMatchClass, resource, id, index, query) {\n            const folderMatch = this.instantiationService.createInstance(folderMatchClass, resource, id, index, query, this, this._searchModel);\n            const disposable = folderMatch.onChange((event) => this._onChange.fire(event));\n            folderMatch.onDispose(() => disposable.dispose());\n            return folderMatch;\n        }\n        get searchModel() {\n            return this._searchModel;\n        }\n        add(allRaw, silent = false) {\n            // Split up raw into a list per folder so we can do a batch add per folder.\n            const rawPerFolder = new map_1.ResourceMap();\n            const otherFileMatches = [];\n            this._folderMatches.forEach(fm => rawPerFolder.set(fm.resource(), []));\n            allRaw.forEach(rawFileMatch => {\n                const folderMatch = this.getFolderMatch(rawFileMatch.resource);\n                if (!folderMatch) {\n                    // foldermatch was previously removed by user or disposed for some reason\n                    return;\n                }\n                const resource = folderMatch.resource();\n                if (resource) {\n                    rawPerFolder.get(resource).push(rawFileMatch);\n                }\n                else {\n                    otherFileMatches.push(rawFileMatch);\n                }\n            });\n            rawPerFolder.forEach((raw) => {\n                if (!raw.length) {\n                    return;\n                }\n                const folderMatch = this.getFolderMatch(raw[0].resource);\n                if (folderMatch) {\n                    folderMatch.add(raw, silent);\n                }\n            });\n            this._otherFilesMatch.add(otherFileMatches, silent);\n        }\n        clear() {\n            this.folderMatches().forEach((folderMatch) => folderMatch.clear());\n            this.disposeMatches();\n        }\n        remove(match) {\n            if (match instanceof FileMatch) {\n                this.getFolderMatch(match.resource()).remove(match);\n            }\n            else {\n                match.clear();\n            }\n        }\n        replace(match) {\n            return this.getFolderMatch(match.resource()).replace(match);\n        }\n        replaceAll(progressRunner) {\n            this.replacingAll = true;\n            const promise = this.replaceService.replace(this.matches(), progressRunner);\n            const onDone = event_1.Event.stopwatch(event_1.Event.fromPromise(promise));\n            /* __GDPR__\n                \"replaceAll.started\" : {\n                    \"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n                }\n            */\n            onDone(duration => this.telemetryService.publicLog('replaceAll.started', { duration }));\n            return promise.then(() => {\n                this.replacingAll = false;\n                this.clear();\n            }, () => {\n                this.replacingAll = false;\n            });\n        }\n        folderMatches() {\n            return this._otherFilesMatch ?\n                [\n                    ...this._folderMatches,\n                    this._otherFilesMatch\n                ] :\n                [\n                    ...this._folderMatches\n                ];\n        }\n        matches() {\n            const matches = [];\n            this.folderMatches().forEach(folderMatch => {\n                matches.push(folderMatch.matches());\n            });\n            return [].concat(...matches);\n        }\n        isEmpty() {\n            return this.folderMatches().every((folderMatch) => folderMatch.isEmpty());\n        }\n        fileCount() {\n            return this.folderMatches().reduce((prev, match) => prev + match.fileCount(), 0);\n        }\n        count() {\n            return this.matches().reduce((prev, match) => prev + match.count(), 0);\n        }\n        get showHighlights() {\n            return this._showHighlights;\n        }\n        toggleHighlights(value) {\n            if (this._showHighlights === value) {\n                return;\n            }\n            this._showHighlights = value;\n            let selectedMatch = null;\n            this.matches().forEach((fileMatch) => {\n                fileMatch.updateHighlights();\n                if (!selectedMatch) {\n                    selectedMatch = fileMatch.getSelectedMatch();\n                }\n            });\n            if (this._showHighlights && selectedMatch) {\n                // TS?\n                this._rangeHighlightDecorations.highlightRange(selectedMatch.parent().resource(), selectedMatch.range());\n            }\n            else {\n                this._rangeHighlightDecorations.removeHighlightRange();\n            }\n        }\n        get rangeHighlightDecorations() {\n            return this._rangeHighlightDecorations;\n        }\n        getFolderMatch(resource) {\n            const folderMatch = this._folderMatchesMap.findSubstr(resource.toString());\n            return folderMatch ? folderMatch : this._otherFilesMatch;\n        }\n        set replacingAll(running) {\n            this.folderMatches().forEach((folderMatch) => {\n                folderMatch.replacingAll = running;\n            });\n        }\n        disposeMatches() {\n            this.folderMatches().forEach(folderMatch => folderMatch.dispose());\n            this._folderMatches = [];\n            this._folderMatchesMap = map_1.TernarySearchTree.forPaths();\n            this._rangeHighlightDecorations.removeHighlightRange();\n        }\n        dispose() {\n            this.disposeMatches();\n            this._rangeHighlightDecorations.dispose();\n            super.dispose();\n        }\n    };\n    SearchResult = __decorate([\n        __param(1, replace_2.IReplaceService),\n        __param(2, telemetry_1.ITelemetryService),\n        __param(3, instantiation_1.IInstantiationService),\n        __param(4, modelService_1.IModelService)\n    ], SearchResult);\n    exports.SearchResult = SearchResult;\n    let SearchModel = class SearchModel extends lifecycle_1.Disposable {\n        constructor(searchService, telemetryService, instantiationService) {\n            super();\n            this.searchService = searchService;\n            this.telemetryService = telemetryService;\n            this.instantiationService = instantiationService;\n            this._searchQuery = null;\n            this._replaceActive = false;\n            this._replaceString = null;\n            this._replacePattern = null;\n            this._onReplaceTermChanged = this._register(new event_1.Emitter());\n            this.onReplaceTermChanged = this._onReplaceTermChanged.event;\n            this._searchResult = this.instantiationService.createInstance(SearchResult, this);\n        }\n        isReplaceActive() {\n            return this._replaceActive;\n        }\n        set replaceActive(replaceActive) {\n            this._replaceActive = replaceActive;\n        }\n        get replacePattern() {\n            return this._replacePattern;\n        }\n        get replaceString() {\n            return this._replaceString || '';\n        }\n        set replaceString(replaceString) {\n            this._replaceString = replaceString;\n            if (this._searchQuery) {\n                this._replacePattern = new replace_1.ReplacePattern(replaceString, this._searchQuery.contentPattern);\n            }\n            this._onReplaceTermChanged.fire();\n        }\n        get searchResult() {\n            return this._searchResult;\n        }\n        search(query, onProgress) {\n            this.cancelSearch();\n            this._searchQuery = query;\n            this.searchResult.clear();\n            this._searchResult.query = this._searchQuery;\n            const progressEmitter = new event_1.Emitter();\n            this._replacePattern = new replace_1.ReplacePattern(this.replaceString, this._searchQuery.contentPattern);\n            const tokenSource = this.currentCancelTokenSource = new cancellation_1.CancellationTokenSource();\n            const currentRequest = this.searchService.textSearch(this._searchQuery, this.currentCancelTokenSource.token, p => {\n                progressEmitter.fire();\n                this.onSearchProgress(p);\n                if (onProgress) {\n                    onProgress(p);\n                }\n            });\n            const dispose = () => tokenSource.dispose();\n            currentRequest.then(dispose, dispose);\n            const onDone = event_1.Event.fromPromise(currentRequest);\n            const onFirstRender = event_1.Event.any(onDone, progressEmitter.event);\n            const onFirstRenderStopwatch = event_1.Event.stopwatch(onFirstRender);\n            /* __GDPR__\n                \"searchResultsFirstRender\" : {\n                    \"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n                }\n            */\n            onFirstRenderStopwatch(duration => this.telemetryService.publicLog('searchResultsFirstRender', { duration }));\n            const onDoneStopwatch = event_1.Event.stopwatch(onDone);\n            const start = Date.now();\n            /* __GDPR__\n                \"searchResultsFinished\" : {\n                    \"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true }\n                }\n            */\n            onDoneStopwatch(duration => this.telemetryService.publicLog('searchResultsFinished', { duration }));\n            currentRequest.then(value => this.onSearchCompleted(value, Date.now() - start), e => this.onSearchError(e, Date.now() - start));\n            return currentRequest;\n        }\n        onSearchCompleted(completed, duration) {\n            if (!this._searchQuery) {\n                throw new Error('onSearchCompleted must be called after a search is started');\n            }\n            const options = objects.assign({}, this._searchQuery.contentPattern);\n            delete options.pattern;\n            const stats = completed && completed.stats;\n            const fileSchemeOnly = this._searchQuery.folderQueries.every(fq => fq.folder.scheme === 'file');\n            const otherSchemeOnly = this._searchQuery.folderQueries.every(fq => fq.folder.scheme !== 'file');\n            const scheme = fileSchemeOnly ? 'file' :\n                otherSchemeOnly ? 'other' :\n                    'mixed';\n            /* __GDPR__\n                \"searchResultsShown\" : {\n                    \"count\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"fileCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"options\": { \"${inline}\": [ \"${IPatternInfo}\" ] },\n                    \"duration\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                    \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                }\n            */\n            this.telemetryService.publicLog('searchResultsShown', {\n                count: this._searchResult.count(),\n                fileCount: this._searchResult.fileCount(),\n                options,\n                duration,\n                type: stats && stats.type,\n                scheme\n            });\n            return completed;\n        }\n        onSearchError(e, duration) {\n            if (errors.isPromiseCanceledError(e)) {\n                this.onSearchCompleted(null, duration);\n            }\n        }\n        onSearchProgress(p) {\n            if (p.resource) {\n                this._searchResult.add([p], true);\n            }\n        }\n        cancelSearch() {\n            if (this.currentCancelTokenSource) {\n                this.currentCancelTokenSource.cancel();\n                return true;\n            }\n            return false;\n        }\n        dispose() {\n            this.cancelSearch();\n            this.searchResult.dispose();\n            super.dispose();\n        }\n    };\n    SearchModel = __decorate([\n        __param(0, search_1.ISearchService),\n        __param(1, telemetry_1.ITelemetryService),\n        __param(2, instantiation_1.IInstantiationService)\n    ], SearchModel);\n    exports.SearchModel = SearchModel;\n    let SearchWorkbenchService = class SearchWorkbenchService {\n        constructor(instantiationService) {\n            this.instantiationService = instantiationService;\n        }\n        get searchModel() {\n            if (!this._searchModel) {\n                this._searchModel = this.instantiationService.createInstance(SearchModel);\n            }\n            return this._searchModel;\n        }\n    };\n    SearchWorkbenchService = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], SearchWorkbenchService);\n    exports.SearchWorkbenchService = SearchWorkbenchService;\n    exports.ISearchWorkbenchService = instantiation_1.createDecorator('searchWorkbenchService');\n    /**\n     * Can add a range highlight decoration to a model.\n     * It will automatically remove it when the model has its decorations changed.\n     */\n    let RangeHighlightDecorations = class RangeHighlightDecorations {\n        constructor(_modelService) {\n            this._modelService = _modelService;\n            this._decorationId = null;\n            this._model = null;\n            this._modelDisposables = [];\n        }\n        removeHighlightRange() {\n            if (this._model && this._decorationId) {\n                this._model.deltaDecorations([this._decorationId], []);\n            }\n            this._decorationId = null;\n        }\n        highlightRange(resource, range, ownerId = 0) {\n            let model;\n            if (uri_1.URI.isUri(resource)) {\n                model = this._modelService.getModel(resource);\n            }\n            else {\n                model = resource;\n            }\n            if (model) {\n                this.doHighlightRange(model, range);\n            }\n        }\n        doHighlightRange(model, range) {\n            this.removeHighlightRange();\n            this._decorationId = model.deltaDecorations([], [{ range: range, options: RangeHighlightDecorations._RANGE_HIGHLIGHT_DECORATION }])[0];\n            this.setModel(model);\n        }\n        setModel(model) {\n            if (this._model !== model) {\n                this.disposeModelListeners();\n                this._model = model;\n                this._modelDisposables.push(this._model.onDidChangeDecorations((e) => {\n                    this.disposeModelListeners();\n                    this.removeHighlightRange();\n                    this._model = null;\n                }));\n                this._modelDisposables.push(this._model.onWillDispose(() => {\n                    this.disposeModelListeners();\n                    this.removeHighlightRange();\n                    this._model = null;\n                }));\n            }\n        }\n        disposeModelListeners() {\n            this._modelDisposables.forEach(disposable => disposable.dispose());\n            this._modelDisposables = [];\n        }\n        dispose() {\n            if (this._model) {\n                this.removeHighlightRange();\n                this.disposeModelListeners();\n                this._model = null;\n            }\n        }\n    };\n    RangeHighlightDecorations._RANGE_HIGHLIGHT_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'rangeHighlight',\n        isWholeLine: true\n    });\n    RangeHighlightDecorations = __decorate([\n        __param(0, modelService_1.IModelService)\n    ], RangeHighlightDecorations);\n    exports.RangeHighlightDecorations = RangeHighlightDecorations;\n    function textSearchResultToMatches(rawMatch, fileMatch) {\n        const previewLines = rawMatch.preview.text.split('\\n');\n        if (Array.isArray(rawMatch.ranges)) {\n            return rawMatch.ranges.map((r, i) => {\n                const previewRange = rawMatch.preview.matches[i];\n                return new Match(fileMatch, previewLines, previewRange, r);\n            });\n        }\n        else {\n            const previewRange = rawMatch.preview.matches;\n            const match = new Match(fileMatch, previewLines, previewRange, rawMatch.ranges);\n            return [match];\n        }\n    }\n});\n",null]}