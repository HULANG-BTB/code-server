{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/electron-browser/keybindingService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/electron-browser/keybindingService.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar nativeKeymap = require(\"native-keymap\");\nvar os_1 = require(\"os\");\nvar dom = require(\"vs/base/browser/dom\");\nvar keyboardEvent_1 = require(\"vs/base/browser/keyboardEvent\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar event_1 = require(\"vs/base/common/event\");\nvar keybindingParser_1 = require(\"vs/base/common/keybindingParser\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar config_1 = require(\"vs/base/node/config\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar abstractKeybindingService_1 = require(\"vs/platform/keybinding/common/abstractKeybindingService\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar keybindingResolver_1 = require(\"vs/platform/keybinding/common/keybindingResolver\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar resolvedKeybindingItem_1 = require(\"vs/platform/keybinding/common/resolvedKeybindingItem\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar telemetryUtils_1 = require(\"vs/platform/telemetry/common/telemetryUtils\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar keybindingIO_1 = require(\"vs/workbench/services/keybinding/common/keybindingIO\");\nvar keyboardMapper_1 = require(\"vs/workbench/services/keybinding/common/keyboardMapper\");\nvar macLinuxFallbackKeyboardMapper_1 = require(\"vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper\");\nvar macLinuxKeyboardMapper_1 = require(\"vs/workbench/services/keybinding/common/macLinuxKeyboardMapper\");\nvar windowsKeyboardMapper_1 = require(\"vs/workbench/services/keybinding/common/windowsKeyboardMapper\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\nvar KeyboardMapperFactory = /** @class */ (function () {\n    function KeyboardMapperFactory() {\n        this._onDidChangeKeyboardMapper = new event_1.Emitter();\n        this.onDidChangeKeyboardMapper = this._onDidChangeKeyboardMapper.event;\n        this._layoutInfo = null;\n        this._rawMapping = null;\n        this._keyboardMapper = null;\n        this._initialized = false;\n    }\n    KeyboardMapperFactory.prototype._onKeyboardLayoutChanged = function () {\n        if (this._initialized) {\n            this._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n        }\n    };\n    KeyboardMapperFactory.prototype.getKeyboardMapper = function (dispatchConfig) {\n        if (!this._initialized) {\n            this._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n        }\n        if (dispatchConfig === DispatchConfig.KeyCode) {\n            // Forcefully set to use keyCode\n            return new macLinuxFallbackKeyboardMapper_1.MacLinuxFallbackKeyboardMapper(platform_1.OS);\n        }\n        return this._keyboardMapper;\n    };\n    KeyboardMapperFactory.prototype.getCurrentKeyboardLayout = function () {\n        if (!this._initialized) {\n            this._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n        }\n        return this._layoutInfo;\n    };\n    KeyboardMapperFactory._isUSStandard = function (_kbInfo) {\n        if (platform_1.OS === platform_1.OperatingSystem.Linux) {\n            var kbInfo = _kbInfo;\n            return (kbInfo && kbInfo.layout === 'us');\n        }\n        if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n            var kbInfo = _kbInfo;\n            return (kbInfo && kbInfo.id === 'com.apple.keylayout.US');\n        }\n        if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n            var kbInfo = _kbInfo;\n            return (kbInfo && kbInfo.name === '00000409');\n        }\n        return false;\n    };\n    KeyboardMapperFactory.prototype.getRawKeyboardMapping = function () {\n        if (!this._initialized) {\n            this._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n        }\n        return this._rawMapping;\n    };\n    KeyboardMapperFactory.prototype._setKeyboardData = function (layoutInfo, rawMapping) {\n        this._layoutInfo = layoutInfo;\n        if (this._initialized && KeyboardMapperFactory._equals(this._rawMapping, rawMapping)) {\n            // nothing to do...\n            return;\n        }\n        this._initialized = true;\n        this._rawMapping = rawMapping;\n        this._keyboardMapper = new keyboardMapper_1.CachedKeyboardMapper(KeyboardMapperFactory._createKeyboardMapper(this._layoutInfo, this._rawMapping));\n        this._onDidChangeKeyboardMapper.fire();\n    };\n    KeyboardMapperFactory._createKeyboardMapper = function (layoutInfo, rawMapping) {\n        var isUSStandard = KeyboardMapperFactory._isUSStandard(layoutInfo);\n        if (platform_1.isNative && platform_1.OS === platform_1.OperatingSystem.Windows) {\n            return new windowsKeyboardMapper_1.WindowsKeyboardMapper(isUSStandard, rawMapping);\n        }\n        if (Object.keys(rawMapping).length === 0) {\n            // Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n            return new macLinuxFallbackKeyboardMapper_1.MacLinuxFallbackKeyboardMapper(platform_1.OS);\n        }\n        if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n            var kbInfo = layoutInfo;\n            if (kbInfo.id === 'com.apple.keylayout.DVORAK-QWERTYCMD') {\n                // Use keyCode based dispatching for DVORAK - QWERTY âŒ˜\n                return new macLinuxFallbackKeyboardMapper_1.MacLinuxFallbackKeyboardMapper(platform_1.OS);\n            }\n        }\n        return new macLinuxKeyboardMapper_1.MacLinuxKeyboardMapper(isUSStandard, rawMapping, platform_1.OS);\n    };\n    KeyboardMapperFactory._equals = function (a, b) {\n        if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n            return windowsKeyboardMapper_1.windowsKeyboardMappingEquals(a, b);\n        }\n        return macLinuxKeyboardMapper_1.macLinuxKeyboardMappingEquals(a, b);\n    };\n    KeyboardMapperFactory.INSTANCE = new KeyboardMapperFactory();\n    return KeyboardMapperFactory;\n}());\nexports.KeyboardMapperFactory = KeyboardMapperFactory;\nfunction isContributedKeyBindingsArray(thing) {\n    return Array.isArray(thing);\n}\nfunction isValidContributedKeyBinding(keyBinding, rejects) {\n    if (!keyBinding) {\n        rejects.push(nls.localize('nonempty', \"expected non-empty value.\"));\n        return false;\n    }\n    if (typeof keyBinding.command !== 'string') {\n        rejects.push(nls.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'command'));\n        return false;\n    }\n    if (keyBinding.key && typeof keyBinding.key !== 'string') {\n        rejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'key'));\n        return false;\n    }\n    if (keyBinding.when && typeof keyBinding.when !== 'string') {\n        rejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n        return false;\n    }\n    if (keyBinding.mac && typeof keyBinding.mac !== 'string') {\n        rejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'mac'));\n        return false;\n    }\n    if (keyBinding.linux && typeof keyBinding.linux !== 'string') {\n        rejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'linux'));\n        return false;\n    }\n    if (keyBinding.win && typeof keyBinding.win !== 'string') {\n        rejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'win'));\n        return false;\n    }\n    return true;\n}\nvar keybindingType = {\n    type: 'object',\n    default: { command: '', key: '' },\n    properties: {\n        command: {\n            description: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),\n            type: 'string'\n        },\n        args: {\n            description: nls.localize('vscode.extension.contributes.keybindings.args', \"Arguments to pass to the command to execute.\")\n        },\n        key: {\n            description: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g Ctrl+O and Ctrl+L L for a chord).'),\n            type: 'string'\n        },\n        mac: {\n            description: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),\n            type: 'string'\n        },\n        linux: {\n            description: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),\n            type: 'string'\n        },\n        win: {\n            description: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),\n            type: 'string'\n        },\n        when: {\n            description: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),\n            type: 'string'\n        },\n    }\n};\nvar keybindingsExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'keybindings',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.keybindings', \"Contributes keybindings.\"),\n        oneOf: [\n            keybindingType,\n            {\n                type: 'array',\n                items: keybindingType\n            }\n        ]\n    }\n});\nvar DispatchConfig;\n(function (DispatchConfig) {\n    DispatchConfig[DispatchConfig[\"Code\"] = 0] = \"Code\";\n    DispatchConfig[DispatchConfig[\"KeyCode\"] = 1] = \"KeyCode\";\n})(DispatchConfig = exports.DispatchConfig || (exports.DispatchConfig = {}));\nfunction getDispatchConfig(configurationService) {\n    var keyboard = configurationService.getValue('keyboard');\n    var r = (keyboard ? keyboard.dispatch : null);\n    return (r === 'keyCode' ? DispatchConfig.KeyCode : DispatchConfig.Code);\n}\nvar WorkbenchKeybindingService = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchKeybindingService, _super);\n    function WorkbenchKeybindingService(contextKeyService, commandService, telemetryService, notificationService, environmentService, statusBarService, configurationService, windowService, extensionService) {\n        var _this = _super.call(this, contextKeyService, commandService, telemetryService, notificationService, statusBarService) || this;\n        _this.windowService = windowService;\n        updateSchema();\n        var dispatchConfig = getDispatchConfig(configurationService);\n        configurationService.onDidChangeConfiguration(function (e) {\n            var newDispatchConfig = getDispatchConfig(configurationService);\n            if (dispatchConfig === newDispatchConfig) {\n                return;\n            }\n            dispatchConfig = newDispatchConfig;\n            _this._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n            _this.updateResolver({ source: keybinding_1.KeybindingSource.Default });\n        });\n        _this._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n        KeyboardMapperFactory.INSTANCE.onDidChangeKeyboardMapper(function () {\n            _this._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n            _this.updateResolver({ source: keybinding_1.KeybindingSource.Default });\n        });\n        _this._cachedResolver = null;\n        _this._firstTimeComputingResolver = true;\n        _this.userKeybindings = _this._register(new config_1.ConfigWatcher(environmentService.appKeybindingsPath, { defaultConfig: [], onError: function (error) { return errors_1.onUnexpectedError(error); } }));\n        keybindingsExtPoint.setHandler(function (extensions) {\n            var keybindings = [];\n            for (var _i = 0, extensions_3 = extensions; _i < extensions_3.length; _i++) {\n                var extension = extensions_3[_i];\n                _this._handleKeybindingsExtensionPointUser(extension.description.isBuiltin, extension.value, extension.collector, keybindings);\n            }\n            keybindingsRegistry_1.KeybindingsRegistry.setExtensionKeybindings(keybindings);\n            _this.updateResolver({ source: keybinding_1.KeybindingSource.Default });\n        });\n        updateSchema();\n        _this._register(extensionService.onDidRegisterExtensions(function () { return updateSchema(); }));\n        _this._register(_this.userKeybindings.onDidUpdateConfiguration(function (event) { return _this.updateResolver({\n            source: keybinding_1.KeybindingSource.User,\n            keybindings: event.config\n        }); }));\n        _this._register(dom.addDisposableListener(window, dom.EventType.KEY_DOWN, function (e) {\n            var keyEvent = new keyboardEvent_1.StandardKeyboardEvent(e);\n            var shouldPreventDefault = _this._dispatch(keyEvent, keyEvent.target);\n            if (shouldPreventDefault) {\n                keyEvent.preventDefault();\n            }\n        }));\n        telemetryUtils_1.keybindingsTelemetry(telemetryService, _this);\n        var data = KeyboardMapperFactory.INSTANCE.getCurrentKeyboardLayout();\n        /* __GDPR__\n            \"keyboardLayout\" : {\n                \"currentKeyboardLayout\": { \"${inline}\": [ \"${IKeyboardLayoutInfo}\" ] }\n            }\n        */\n        telemetryService.publicLog('keyboardLayout', {\n            currentKeyboardLayout: data\n        });\n        return _this;\n    }\n    WorkbenchKeybindingService.prototype._dumpDebugInfo = function () {\n        var layoutInfo = JSON.stringify(KeyboardMapperFactory.INSTANCE.getCurrentKeyboardLayout(), null, '\\t');\n        var mapperInfo = this._keyboardMapper.dumpDebugInfo();\n        var rawMapping = JSON.stringify(KeyboardMapperFactory.INSTANCE.getRawKeyboardMapping(), null, '\\t');\n        return \"Layout info:\\n\" + layoutInfo + \"\\n\" + mapperInfo + \"\\n\\nRaw mapping:\\n\" + rawMapping;\n    };\n    WorkbenchKeybindingService.prototype._safeGetConfig = function () {\n        var rawConfig = this.userKeybindings.getConfig();\n        if (Array.isArray(rawConfig)) {\n            return rawConfig;\n        }\n        return [];\n    };\n    WorkbenchKeybindingService.prototype.customKeybindingsCount = function () {\n        var userKeybindings = this._safeGetConfig();\n        return userKeybindings.length;\n    };\n    WorkbenchKeybindingService.prototype.updateResolver = function (event) {\n        this._cachedResolver = null;\n        this._onDidUpdateKeybindings.fire(event);\n    };\n    WorkbenchKeybindingService.prototype._getResolver = function () {\n        if (!this._cachedResolver) {\n            var defaults = this._resolveKeybindingItems(keybindingsRegistry_1.KeybindingsRegistry.getDefaultKeybindings(), true);\n            var overrides = this._resolveUserKeybindingItems(this._getExtraKeybindings(this._firstTimeComputingResolver), false);\n            this._cachedResolver = new keybindingResolver_1.KeybindingResolver(defaults, overrides);\n            this._firstTimeComputingResolver = false;\n        }\n        return this._cachedResolver;\n    };\n    WorkbenchKeybindingService.prototype._documentHasFocus = function () {\n        // it is possible that the document has lost focus, but the\n        // window is still focused, e.g. when a <webview> element\n        // has focus\n        return this.windowService.hasFocus;\n    };\n    WorkbenchKeybindingService.prototype._resolveKeybindingItems = function (items, isDefault) {\n        var result = [], resultLen = 0;\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            var when = (item.when ? item.when.normalize() : undefined);\n            var keybinding = item.keybinding;\n            if (!keybinding) {\n                // This might be a removal keybinding item in user settings => accept it\n                result[resultLen++] = new resolvedKeybindingItem_1.ResolvedKeybindingItem(null, item.command, item.commandArgs, when, isDefault);\n            }\n            else {\n                var resolvedKeybindings = this.resolveKeybinding(keybinding);\n                for (var _a = 0, resolvedKeybindings_1 = resolvedKeybindings; _a < resolvedKeybindings_1.length; _a++) {\n                    var resolvedKeybinding = resolvedKeybindings_1[_a];\n                    result[resultLen++] = new resolvedKeybindingItem_1.ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);\n                }\n            }\n        }\n        return result;\n    };\n    WorkbenchKeybindingService.prototype._resolveUserKeybindingItems = function (items, isDefault) {\n        var result = [], resultLen = 0;\n        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {\n            var item = items_2[_i];\n            var when = (item.when ? item.when.normalize() : undefined);\n            var parts = item.parts;\n            if (parts.length === 0) {\n                // This might be a removal keybinding item in user settings => accept it\n                result[resultLen++] = new resolvedKeybindingItem_1.ResolvedKeybindingItem(null, item.command, item.commandArgs, when, isDefault);\n            }\n            else {\n                var resolvedKeybindings = this._keyboardMapper.resolveUserBinding(parts);\n                for (var _a = 0, resolvedKeybindings_2 = resolvedKeybindings; _a < resolvedKeybindings_2.length; _a++) {\n                    var resolvedKeybinding = resolvedKeybindings_2[_a];\n                    result[resultLen++] = new resolvedKeybindingItem_1.ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);\n                }\n            }\n        }\n        return result;\n    };\n    WorkbenchKeybindingService.prototype._getExtraKeybindings = function (isFirstTime) {\n        var extraUserKeybindings = this._safeGetConfig();\n        if (!isFirstTime) {\n            var cnt = extraUserKeybindings.length;\n            /* __GDPR__\n                \"customKeybindingsChanged\" : {\n                    \"keyCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                }\n            */\n            this._telemetryService.publicLog('customKeybindingsChanged', {\n                keyCount: cnt\n            });\n        }\n        return extraUserKeybindings.map(function (k) { return keybindingIO_1.KeybindingIO.readUserKeybindingItem(k); });\n    };\n    WorkbenchKeybindingService.prototype.resolveKeybinding = function (kb) {\n        return this._keyboardMapper.resolveKeybinding(kb);\n    };\n    WorkbenchKeybindingService.prototype.resolveKeyboardEvent = function (keyboardEvent) {\n        return this._keyboardMapper.resolveKeyboardEvent(keyboardEvent);\n    };\n    WorkbenchKeybindingService.prototype.resolveUserBinding = function (userBinding) {\n        var parts = keybindingParser_1.KeybindingParser.parseUserBinding(userBinding);\n        return this._keyboardMapper.resolveUserBinding(parts);\n    };\n    WorkbenchKeybindingService.prototype._handleKeybindingsExtensionPointUser = function (isBuiltin, keybindings, collector, result) {\n        if (isContributedKeyBindingsArray(keybindings)) {\n            for (var i = 0, len = keybindings.length; i < len; i++) {\n                this._handleKeybinding(isBuiltin, i + 1, keybindings[i], collector, result);\n            }\n        }\n        else {\n            this._handleKeybinding(isBuiltin, 1, keybindings, collector, result);\n        }\n    };\n    WorkbenchKeybindingService.prototype._handleKeybinding = function (isBuiltin, idx, keybindings, collector, result) {\n        var rejects = [];\n        if (isValidContributedKeyBinding(keybindings, rejects)) {\n            var rule = this._asCommandRule(isBuiltin, idx++, keybindings);\n            if (rule) {\n                result.push(rule);\n            }\n        }\n        if (rejects.length > 0) {\n            collector.error(nls.localize('invalid.keybindings', \"Invalid `contributes.{0}`: {1}\", keybindingsExtPoint.name, rejects.join('\\n')));\n        }\n    };\n    WorkbenchKeybindingService.prototype._asCommandRule = function (isBuiltin, idx, binding) {\n        var command = binding.command, args = binding.args, when = binding.when, key = binding.key, mac = binding.mac, linux = binding.linux, win = binding.win;\n        var weight;\n        if (isBuiltin) {\n            weight = keybindingsRegistry_1.KeybindingWeight.BuiltinExtension + idx;\n        }\n        else {\n            weight = keybindingsRegistry_1.KeybindingWeight.ExternalExtension + idx;\n        }\n        var desc = {\n            id: command,\n            args: args,\n            when: contextkey_1.ContextKeyExpr.deserialize(when),\n            weight: weight,\n            primary: keybindingParser_1.KeybindingParser.parseKeybinding(key, platform_1.OS),\n            mac: mac ? { primary: keybindingParser_1.KeybindingParser.parseKeybinding(mac, platform_1.OS) } : null,\n            linux: linux ? { primary: keybindingParser_1.KeybindingParser.parseKeybinding(linux, platform_1.OS) } : null,\n            win: win ? { primary: keybindingParser_1.KeybindingParser.parseKeybinding(win, platform_1.OS) } : null\n        };\n        if (!desc.primary && !desc.mac && !desc.linux && !desc.win) {\n            return undefined;\n        }\n        return desc;\n    };\n    WorkbenchKeybindingService.prototype.getDefaultKeybindingsContent = function () {\n        var resolver = this._getResolver();\n        var defaultKeybindings = resolver.getDefaultKeybindings();\n        var boundCommands = resolver.getDefaultBoundCommands();\n        return (WorkbenchKeybindingService._getDefaultKeybindings(defaultKeybindings)\n            + '\\n\\n'\n            + WorkbenchKeybindingService._getAllCommandsAsComment(boundCommands));\n    };\n    WorkbenchKeybindingService._getDefaultKeybindings = function (defaultKeybindings) {\n        var out = new keybindingIO_1.OutputBuilder();\n        out.writeLine('[');\n        var lastIndex = defaultKeybindings.length - 1;\n        defaultKeybindings.forEach(function (k, index) {\n            keybindingIO_1.KeybindingIO.writeKeybindingItem(out, k);\n            if (index !== lastIndex) {\n                out.writeLine(',');\n            }\n            else {\n                out.writeLine();\n            }\n        });\n        out.writeLine(']');\n        return out.toString();\n    };\n    WorkbenchKeybindingService._getAllCommandsAsComment = function (boundCommands) {\n        var unboundCommands = keybindingResolver_1.KeybindingResolver.getAllUnboundCommands(boundCommands);\n        var pretty = unboundCommands.sort().join('\\n// - ');\n        return '// ' + nls.localize('unboundCommands', \"Here are other available commands: \") + '\\n// - ' + pretty;\n    };\n    WorkbenchKeybindingService.prototype.mightProducePrintableCharacter = function (event) {\n        if (event.ctrlKey || event.metaKey) {\n            // ignore ctrl/cmd-combination but not shift/alt-combinatios\n            return false;\n        }\n        // consult the KeyboardMapperFactory to check the given event for\n        // a printable value.\n        var mapping = KeyboardMapperFactory.INSTANCE.getRawKeyboardMapping();\n        if (!mapping) {\n            return false;\n        }\n        var keyInfo = mapping[event.code];\n        if (!keyInfo) {\n            return false;\n        }\n        if (!keyInfo.value || /\\s/.test(keyInfo.value)) {\n            return false;\n        }\n        return true;\n    };\n    WorkbenchKeybindingService = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, commands_1.ICommandService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, environment_1.IEnvironmentService),\n        tslib_1.__param(5, statusbar_1.IStatusbarService),\n        tslib_1.__param(6, configuration_1.IConfigurationService),\n        tslib_1.__param(7, windows_1.IWindowService),\n        tslib_1.__param(8, extensions_1.IExtensionService)\n    ], WorkbenchKeybindingService);\n    return WorkbenchKeybindingService;\n}(abstractKeybindingService_1.AbstractKeybindingService));\nexports.WorkbenchKeybindingService = WorkbenchKeybindingService;\nvar schemaId = 'vscode://schemas/keybindings';\nvar commandsSchemas = [];\nvar commandsEnum = [];\nvar commandsEnumDescriptions = [];\nvar schema = {\n    'id': schemaId,\n    'type': 'array',\n    'title': nls.localize('keybindings.json.title', \"Keybindings configuration\"),\n    'definitions': {\n        'editorGroupsSchema': {\n            'type': 'array',\n            'items': {\n                'type': 'object',\n                'properties': {\n                    'groups': {\n                        '$ref': '#/definitions/editorGroupsSchema',\n                        'default': [{}, {}]\n                    },\n                    'size': {\n                        'type': 'number',\n                        'default': 0.5\n                    }\n                }\n            }\n        }\n    },\n    'items': {\n        'required': ['key'],\n        'type': 'object',\n        'defaultSnippets': [{ 'body': { 'key': '$1', 'command': '$2', 'when': '$3' } }],\n        'properties': {\n            'key': {\n                'type': 'string',\n                'description': nls.localize('keybindings.json.key', \"Key or key sequence (separated by space)\"),\n            },\n            'command': {\n                'type': 'string',\n                'enum': commandsEnum,\n                'enumDescriptions': commandsEnumDescriptions,\n                'description': nls.localize('keybindings.json.command', \"Name of the command to execute\"),\n            },\n            'when': {\n                'type': 'string',\n                'description': nls.localize('keybindings.json.when', \"Condition when the key is active.\")\n            },\n            'args': {\n                'description': nls.localize('keybindings.json.args', \"Arguments to pass to the command to execute.\")\n            }\n        },\n        'allOf': commandsSchemas\n    }\n};\nvar schemaRegistry = platform_2.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\nschemaRegistry.registerSchema(schemaId, schema);\nfunction updateSchema() {\n    commandsSchemas.length = 0;\n    commandsEnum.length = 0;\n    commandsEnumDescriptions.length = 0;\n    var knownCommands = new Set();\n    var addKnownCommand = function (commandId, description) {\n        if (!/^_/.test(commandId)) {\n            if (!knownCommands.has(commandId)) {\n                knownCommands.add(commandId);\n                commandsEnum.push(commandId);\n                commandsEnumDescriptions.push(description);\n                // Also add the negative form for keybinding removal\n                commandsEnum.push(\"-\" + commandId);\n                commandsEnumDescriptions.push(description);\n            }\n        }\n    };\n    var allCommands = commands_1.CommandsRegistry.getCommands();\n    for (var commandId in allCommands) {\n        var commandDescription = allCommands[commandId].description;\n        addKnownCommand(commandId, commandDescription ? commandDescription.description : undefined);\n        if (!commandDescription || !commandDescription.args || commandDescription.args.length !== 1 || !commandDescription.args[0].schema) {\n            continue;\n        }\n        var argsSchema = commandDescription.args[0].schema;\n        var argsRequired = Array.isArray(argsSchema.required) && argsSchema.required.length > 0;\n        var addition = {\n            'if': {\n                'properties': {\n                    'command': { 'const': commandId }\n                }\n            },\n            'then': {\n                'required': [].concat(argsRequired ? ['args'] : []),\n                'properties': {\n                    'args': argsSchema\n                }\n            }\n        };\n        commandsSchemas.push(addition);\n    }\n    var menuCommands = actions_1.MenuRegistry.getCommands();\n    for (var commandId in menuCommands) {\n        addKnownCommand(commandId);\n    }\n}\nvar configurationRegistry = platform_2.Registry.as(configurationRegistry_1.Extensions.Configuration);\nvar keyboardConfiguration = {\n    'id': 'keyboard',\n    'order': 15,\n    'type': 'object',\n    'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n    'overridable': true,\n    'properties': {\n        'keyboard.dispatch': {\n            'type': 'string',\n            'enum': ['code', 'keyCode'],\n            'default': 'code',\n            'markdownDescription': nls.localize('dispatch', \"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\"),\n            'included': platform_1.OS === platform_1.OperatingSystem.Macintosh || platform_1.OS === platform_1.OperatingSystem.Linux\n        },\n        'keyboard.touchbar.enabled': {\n            'type': 'boolean',\n            'default': true,\n            'description': nls.localize('touchbar.enabled', \"Enables the macOS touchbar buttons on the keyboard if available.\"),\n            'included': platform_1.OS === platform_1.OperatingSystem.Macintosh && parseFloat(os_1.release()) >= 16 // Minimum: macOS Sierra (10.12.x = darwin 16.x)\n        }\n    }\n};\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\nextensions_2.registerSingleton(keybinding_1.IKeybindingService, WorkbenchKeybindingService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/electron-browser/keybindingService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/electron-browser/keybindingService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,4CAA8C;AAC9C,yBAA6B;AAC7B,yCAA2C;AAC3C,+DAAsE;AACtE,gDAA0D;AAC1D,8CAAsD;AAGtD,oEAAmE;AACnE,oDAAwE;AACxE,8CAAoD;AACpD,iEAAyF;AACzF,gFAAuF;AACvF,gGAAoJ;AACpJ,uEAA8F;AAC9F,0EAAiF;AACjF,oGAAgH;AAChH,qGAAoG;AACpG,uEAA2J;AAC3J,uFAAsF;AACtF,yFAA6I;AAC7I,+FAA8F;AAC9F,6EAAoF;AACpF,iEAAgE;AAChE,oEAA2E;AAC3E,oEAA2E;AAC3E,8EAAmF;AACnF,iGAA2H;AAC3H,qFAAwH;AACxH,yFAA+G;AAC/G,yHAAwH;AACxH,yGAAiK;AACjK,uGAA6J;AAC7J,8DAAoE;AACpE,iFAAuF;AACvF,8DAAkE;AAClE,0EAAgF;AAEhF;IAWC;QAHiB,+BAA0B,GAAG,IAAI,eAAO,EAAQ,CAAC;QAClD,8BAAyB,GAAgB,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC;QAG9F,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC3B,CAAC;IAEM,wDAAwB,GAA/B;QACC,IAAI,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,wBAAwB,EAAE,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;SACzF;IACF,CAAC;IAEM,iDAAiB,GAAxB,UAAyB,cAA8B;QACtD,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,wBAAwB,EAAE,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;SACzF;QACD,IAAI,cAAc,KAAK,cAAc,CAAC,OAAO,EAAE;YAC9C,gCAAgC;YAChC,OAAO,IAAI,+DAA8B,CAAC,aAAE,CAAC,CAAC;SAC9C;QACD,OAAO,IAAI,CAAC,eAAgB,CAAC;IAC9B,CAAC;IAEM,wDAAwB,GAA/B;QACC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,wBAAwB,EAAE,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;SACzF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAEc,mCAAa,GAA5B,UAA6B,OAAyC;QACrE,IAAI,aAAE,KAAK,0BAAe,CAAC,KAAK,EAAE;YACjC,IAAM,MAAM,GAA0C,OAAO,CAAC;YAC9D,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;SAC1C;QAED,IAAI,aAAE,KAAK,0BAAe,CAAC,SAAS,EAAE;YACrC,IAAM,MAAM,GAAwC,OAAO,CAAC;YAC5D,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,wBAAwB,CAAC,CAAC;SAC1D;QAED,IAAI,aAAE,KAAK,0BAAe,CAAC,OAAO,EAAE;YACnC,IAAM,MAAM,GAA4C,OAAO,CAAC;YAChE,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;SAC9C;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,qDAAqB,GAA5B;QACC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,wBAAwB,EAAE,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC;SACzF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAEO,gDAAgB,GAAxB,UAAyB,UAA4C,EAAE,UAAyC;QAC/G,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAE9B,IAAI,IAAI,CAAC,YAAY,IAAI,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE;YACrF,mBAAmB;YACnB,OAAO;SACP;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,qCAAoB,CAC9C,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAC/E,CAAC;QACF,IAAI,CAAC,0BAA0B,CAAC,IAAI,EAAE,CAAC;IACxC,CAAC;IAEc,2CAAqB,GAApC,UAAqC,UAA4C,EAAE,UAAyC;QAC3H,IAAM,YAAY,GAAG,qBAAqB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACrE,IAAI,mBAAQ,IAAI,aAAE,KAAK,0BAAe,CAAC,OAAO,EAAE;YAC/C,OAAO,IAAI,6CAAqB,CAAC,YAAY,EAA2B,UAAU,CAAC,CAAC;SACpF;QAED,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACzC,+FAA+F;YAC/F,OAAO,IAAI,+DAA8B,CAAC,aAAE,CAAC,CAAC;SAC9C;QAED,IAAI,aAAE,KAAK,0BAAe,CAAC,SAAS,EAAE;YACrC,IAAM,MAAM,GAAwC,UAAU,CAAC;YAC/D,IAAI,MAAM,CAAC,EAAE,KAAK,sCAAsC,EAAE;gBACzD,sDAAsD;gBACtD,OAAO,IAAI,+DAA8B,CAAC,aAAE,CAAC,CAAC;aAC9C;SACD;QAED,OAAO,IAAI,+CAAsB,CAAC,YAAY,EAA4B,UAAU,EAAE,aAAE,CAAC,CAAC;IAC3F,CAAC;IAEc,6BAAO,GAAtB,UAAuB,CAAuC,EAAE,CAAuC;QACtG,IAAI,aAAE,KAAK,0BAAe,CAAC,OAAO,EAAE;YACnC,OAAO,oDAA4B,CAA0B,CAAC,EAA2B,CAAC,CAAC,CAAC;SAC5F;QAED,OAAO,sDAA6B,CAA2B,CAAC,EAA4B,CAAC,CAAC,CAAC;IAChG,CAAC;IA/GsB,8BAAQ,GAAG,IAAI,qBAAqB,EAAE,CAAC;IAgH/D,4BAAC;CAAA,AAjHD,IAiHC;AAjHY,sDAAqB;AA6HlC,SAAS,6BAA6B,CAAC,KAAsD;IAC5F,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,SAAS,4BAA4B,CAAC,UAAiC,EAAE,OAAiB;IACzF,IAAI,CAAC,UAAU,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,2BAA2B,CAAC,CAAC,CAAC;QACpE,OAAO,KAAK,CAAC;KACb;IACD,IAAI,OAAO,UAAU,CAAC,OAAO,KAAK,QAAQ,EAAE;QAC3C,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,0DAA0D,EAAE,SAAS,CAAC,CAAC,CAAC;QACnH,OAAO,KAAK,CAAC;KACb;IACD,IAAI,UAAU,CAAC,GAAG,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,QAAQ,EAAE;QACzD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,2DAA2D,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,OAAO,KAAK,CAAC;KACb;IACD,IAAI,UAAU,CAAC,IAAI,IAAI,OAAO,UAAU,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC3D,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,2DAA2D,EAAE,MAAM,CAAC,CAAC,CAAC;QAC7G,OAAO,KAAK,CAAC;KACb;IACD,IAAI,UAAU,CAAC,GAAG,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,QAAQ,EAAE;QACzD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,2DAA2D,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,OAAO,KAAK,CAAC;KACb;IACD,IAAI,UAAU,CAAC,KAAK,IAAI,OAAO,UAAU,CAAC,KAAK,KAAK,QAAQ,EAAE;QAC7D,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,2DAA2D,EAAE,OAAO,CAAC,CAAC,CAAC;QAC9G,OAAO,KAAK,CAAC;KACb;IACD,IAAI,UAAU,CAAC,GAAG,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,QAAQ,EAAE;QACzD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,2DAA2D,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5G,OAAO,KAAK,CAAC;KACb;IACD,OAAO,IAAI,CAAC;AACb,CAAC;AAED,IAAI,cAAc,GAAgB;IACjC,IAAI,EAAE,QAAQ;IACd,OAAO,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;IACjC,UAAU,EAAE;QACX,OAAO,EAAE;YACR,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,kDAAkD,EAAE,gEAAgE,CAAC;YAC/I,IAAI,EAAE,QAAQ;SACd;QACD,IAAI,EAAE;YACL,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,+CAA+C,EAAE,8CAA8C,CAAC;SAC1H;QACD,GAAG,EAAE;YACJ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8CAA8C,EAAE,mHAAmH,CAAC;YAC9L,IAAI,EAAE,QAAQ;SACd;QACD,GAAG,EAAE;YACJ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8CAA8C,EAAE,mCAAmC,CAAC;YAC9G,IAAI,EAAE,QAAQ;SACd;QACD,KAAK,EAAE;YACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gDAAgD,EAAE,qCAAqC,CAAC;YAClH,IAAI,EAAE,QAAQ;SACd;QACD,GAAG,EAAE;YACJ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8CAA8C,EAAE,uCAAuC,CAAC;YAClH,IAAI,EAAE,QAAQ;SACd;QACD,IAAI,EAAE;YACL,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,+CAA+C,EAAE,mCAAmC,CAAC;YAC/G,IAAI,EAAE,QAAQ;SACd;KACD;CACD,CAAC;AAEF,IAAM,mBAAmB,GAAG,uCAAkB,CAAC,sBAAsB,CAAkD;IACtH,cAAc,EAAE,aAAa;IAC7B,UAAU,EAAE;QACX,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0CAA0C,EAAE,0BAA0B,CAAC;QACjG,KAAK,EAAE;YACN,cAAc;YACd;gBACC,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,cAAc;aACrB;SACD;KACD;CACD,CAAC,CAAC;AAEH,IAAkB,cAGjB;AAHD,WAAkB,cAAc;IAC/B,mDAAI,CAAA;IACJ,yDAAO,CAAA;AACR,CAAC,EAHiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAG/B;AAED,SAAS,iBAAiB,CAAC,oBAA2C;IACrE,IAAM,QAAQ,GAAG,oBAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC3D,IAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAO,QAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACvD,OAAO,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACzE,CAAC;AAED;IAAgD,sDAAyB;IAOxE,oCACqB,iBAAqC,EACxC,cAA+B,EAC7B,gBAAmC,EAChC,mBAAyC,EAC1C,kBAAuC,EACzC,gBAAmC,EAC/B,oBAA2C,EACjC,aAA6B,EAC3C,gBAAmC;QATvD,YAWC,kBAAM,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,SAgEjG;QAnEiC,mBAAa,GAAb,aAAa,CAAgB;QAK9D,YAAY,EAAE,CAAC;QAEf,IAAI,cAAc,GAAG,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;QAC7D,oBAAoB,CAAC,wBAAwB,CAAC,UAAC,CAAC;YAC/C,IAAI,iBAAiB,GAAG,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;YAChE,IAAI,cAAc,KAAK,iBAAiB,EAAE;gBACzC,OAAO;aACP;YAED,cAAc,GAAG,iBAAiB,CAAC;YACnC,KAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YACxF,KAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,6BAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,KAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;QACxF,qBAAqB,CAAC,QAAQ,CAAC,yBAAyB,CAAC;YACxD,KAAI,CAAC,eAAe,GAAG,qBAAqB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YACxF,KAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,6BAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,KAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC;QAExC,KAAI,CAAC,eAAe,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,sBAAa,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,OAAO,EAAE,UAAA,KAAK,IAAI,OAAA,0BAAiB,CAAC,KAAK,CAAC,EAAxB,CAAwB,EAAE,CAAC,CAAC,CAAC;QAEnK,mBAAmB,CAAC,UAAU,CAAC,UAAC,UAAU;YAEzC,IAAI,WAAW,GAAuB,EAAE,CAAC;YACzC,KAAsB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;gBAA7B,IAAI,SAAS,mBAAA;gBACjB,KAAI,CAAC,oCAAoC,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;aAC9H;YAED,yCAAmB,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;YACzD,KAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,6BAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,YAAY,EAAE,CAAC;QACf,KAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,cAAM,OAAA,YAAY,EAAE,EAAd,CAAc,CAAC,CAAC,CAAC;QAE/E,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,eAAe,CAAC,wBAAwB,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC;YACzF,MAAM,EAAE,6BAAgB,CAAC,IAAI;YAC7B,WAAW,EAAE,KAAK,CAAC,MAAM;SACzB,CAAC,EAHoE,CAGpE,CAAC,CAAC,CAAC;QAEL,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,MAAM,EAAE,GAAG,CAAC,SAAS,CAAC,QAAQ,EAAE,UAAC,CAAgB;YACzF,IAAI,QAAQ,GAAG,IAAI,qCAAqB,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,oBAAoB,GAAG,KAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YACrE,IAAI,oBAAoB,EAAE;gBACzB,QAAQ,CAAC,cAAc,EAAE,CAAC;aAC1B;QACF,CAAC,CAAC,CAAC,CAAC;QAEJ,qCAAoB,CAAC,gBAAgB,EAAE,KAAI,CAAC,CAAC;QAC7C,IAAI,IAAI,GAAG,qBAAqB,CAAC,QAAQ,CAAC,wBAAwB,EAAE,CAAC;QACrE;;;;UAIE;QACF,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,EAAE;YAC5C,qBAAqB,EAAE,IAAI;SAC3B,CAAC,CAAC;;IACJ,CAAC;IAEM,mDAAc,GAArB;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzG,IAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QACxD,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,QAAQ,CAAC,qBAAqB,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACtG,OAAO,mBAAiB,UAAU,UAAK,UAAU,0BAAqB,UAAY,CAAC;IACpF,CAAC;IAEO,mDAAc,GAAtB;QACC,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;QACjD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC7B,OAAO,SAAS,CAAC;SACjB;QACD,OAAO,EAAE,CAAC;IACX,CAAC;IAEM,2DAAsB,GAA7B;QACC,IAAI,eAAe,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5C,OAAO,eAAe,CAAC,MAAM,CAAC;IAC/B,CAAC;IAEO,mDAAc,GAAtB,UAAuB,KAAuB;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAES,iDAAY,GAAtB;QACC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC1B,IAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,yCAAmB,CAAC,qBAAqB,EAAE,EAAE,IAAI,CAAC,CAAC;YACjG,IAAM,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,2BAA2B,CAAC,EAAE,KAAK,CAAC,CAAC;YACvH,IAAI,CAAC,eAAe,GAAG,IAAI,uCAAkB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnE,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;SACzC;QACD,OAAO,IAAI,CAAC,eAAe,CAAC;IAC7B,CAAC;IAES,sDAAiB,GAA3B;QACC,2DAA2D;QAC3D,yDAAyD;QACzD,YAAY;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACpC,CAAC;IAEO,4DAAuB,GAA/B,UAAgC,KAAwB,EAAE,SAAkB;QAC3E,IAAI,MAAM,GAA6B,EAAE,EAAE,SAAS,GAAG,CAAC,CAAC;QACzD,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;YAArB,IAAM,IAAI,cAAA;YACd,IAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC7D,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,UAAU,EAAE;gBAChB,wEAAwE;gBACxE,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,+CAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;aACxG;iBAAM;gBACN,IAAM,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBAC/D,KAAiC,UAAmB,EAAnB,2CAAmB,EAAnB,iCAAmB,EAAnB,IAAmB,EAAE;oBAAjD,IAAM,kBAAkB,4BAAA;oBAC5B,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,+CAAsB,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;iBACtH;aACD;SACD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,gEAA2B,GAAnC,UAAoC,KAA4B,EAAE,SAAkB;QACnF,IAAI,MAAM,GAA6B,EAAE,EAAE,SAAS,GAAG,CAAC,CAAC;QACzD,KAAmB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,EAAE;YAArB,IAAM,IAAI,cAAA;YACd,IAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC7D,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,wEAAwE;gBACxE,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,+CAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;aACxG;iBAAM;gBACN,IAAM,mBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAC3E,KAAiC,UAAmB,EAAnB,2CAAmB,EAAnB,iCAAmB,EAAnB,IAAmB,EAAE;oBAAjD,IAAM,kBAAkB,4BAAA;oBAC5B,MAAM,CAAC,SAAS,EAAE,CAAC,GAAG,IAAI,+CAAsB,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;iBACtH;aACD;SACD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,yDAAoB,GAA5B,UAA6B,WAAoB;QAChD,IAAI,oBAAoB,GAA8B,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5E,IAAI,CAAC,WAAW,EAAE;YACjB,IAAI,GAAG,GAAG,oBAAoB,CAAC,MAAM,CAAC;YAEtC;;;;cAIE;YACF,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,0BAA0B,EAAE;gBAC5D,QAAQ,EAAE,GAAG;aACb,CAAC,CAAC;SACH;QAED,OAAO,oBAAoB,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,2BAAY,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAAtC,CAAsC,CAAC,CAAC;IAChF,CAAC;IAEM,sDAAiB,GAAxB,UAAyB,EAAc;QACtC,OAAO,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAEM,yDAAoB,GAA3B,UAA4B,aAA6B;QACxD,OAAO,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IACjE,CAAC;IAEM,uDAAkB,GAAzB,UAA0B,WAAmB;QAC5C,IAAM,KAAK,GAAG,mCAAgB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACvD,CAAC;IAEO,yEAAoC,GAA5C,UAA6C,SAAkB,EAAE,WAA4D,EAAE,SAAoC,EAAE,MAA0B;QAC9L,IAAI,6BAA6B,CAAC,WAAW,CAAC,EAAE;YAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACvD,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;aAC5E;SACD;aAAM;YACN,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;SACrE;IACF,CAAC;IAEO,sDAAiB,GAAzB,UAA0B,SAAkB,EAAE,GAAW,EAAE,WAAkC,EAAE,SAAoC,EAAE,MAA0B;QAE9J,IAAI,OAAO,GAAa,EAAE,CAAC;QAE3B,IAAI,4BAA4B,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE;YACvD,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;YAC9D,IAAI,IAAI,EAAE;gBACT,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;SACD;QAED,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAC3B,qBAAqB,EACrB,gCAAgC,EAChC,mBAAmB,CAAC,IAAI,EACxB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAClB,CAAC,CAAC;SACH;IACF,CAAC;IAEO,mDAAc,GAAtB,UAAuB,SAAkB,EAAE,GAAW,EAAE,OAA8B;QAE/E,IAAA,yBAAO,EAAE,mBAAI,EAAE,mBAAI,EAAE,iBAAG,EAAE,iBAAG,EAAE,qBAAK,EAAE,iBAAG,CAAa;QAE5D,IAAI,MAAc,CAAC;QACnB,IAAI,SAAS,EAAE;YACd,MAAM,GAAG,sCAAgB,CAAC,gBAAgB,GAAG,GAAG,CAAC;SACjD;aAAM;YACN,MAAM,GAAG,sCAAgB,CAAC,iBAAiB,GAAG,GAAG,CAAC;SAClD;QAED,IAAI,IAAI,GAAqB;YAC5B,EAAE,EAAE,OAAO;YACX,IAAI,MAAA;YACJ,IAAI,EAAE,2BAAc,CAAC,WAAW,CAAC,IAAI,CAAC;YACtC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,mCAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,aAAE,CAAC;YAClD,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,mCAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,aAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;YACxE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,mCAAgB,CAAC,eAAe,CAAC,KAAK,EAAE,aAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;YAC9E,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,mCAAgB,CAAC,eAAe,CAAC,GAAG,EAAE,aAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI;SACxE,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YAC3D,OAAO,SAAS,CAAC;SACjB;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,iEAA4B,GAAnC;QACC,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACrC,IAAM,kBAAkB,GAAG,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QAC5D,IAAM,aAAa,GAAG,QAAQ,CAAC,uBAAuB,EAAE,CAAC;QACzD,OAAO,CACN,0BAA0B,CAAC,sBAAsB,CAAC,kBAAkB,CAAC;cACnE,MAAM;cACN,0BAA0B,CAAC,wBAAwB,CAAC,aAAa,CAAC,CACpE,CAAC;IACH,CAAC;IAEc,iDAAsB,GAArC,UAAsC,kBAA4C;QACjF,IAAI,GAAG,GAAG,IAAI,4BAAa,EAAE,CAAC;QAC9B,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAEnB,IAAI,SAAS,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC;QAC9C,kBAAkB,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,KAAK;YACnC,2BAAY,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YACzC,IAAI,KAAK,KAAK,SAAS,EAAE;gBACxB,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACnB;iBAAM;gBACN,GAAG,CAAC,SAAS,EAAE,CAAC;aAChB;QACF,CAAC,CAAC,CAAC;QACH,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;IACvB,CAAC;IAEc,mDAAwB,GAAvC,UAAwC,aAAmC;QAC1E,IAAM,eAAe,GAAG,uCAAkB,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;QAChF,IAAI,MAAM,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpD,OAAO,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,qCAAqC,CAAC,GAAG,SAAS,GAAG,MAAM,CAAC;IAC5G,CAAC;IAED,mEAA8B,GAA9B,UAA+B,KAAqB;QACnD,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,EAAE;YACnC,4DAA4D;YAC5D,OAAO,KAAK,CAAC;SACb;QACD,iEAAiE;QACjE,qBAAqB;QACrB,IAAM,OAAO,GAAG,qBAAqB,CAAC,QAAQ,CAAC,qBAAqB,EAAE,CAAC;QACvE,IAAI,CAAC,OAAO,EAAE;YACb,OAAO,KAAK,CAAC;SACb;QACD,IAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,OAAO,EAAE;YACb,OAAO,KAAK,CAAC;SACb;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC/C,OAAO,KAAK,CAAC;SACb;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IArTW,0BAA0B;QAQpC,mBAAA,+BAAkB,CAAA;QAClB,mBAAA,0BAAe,CAAA;QACf,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,wBAAc,CAAA;QACd,mBAAA,8BAAiB,CAAA;OAhBP,0BAA0B,CAsTtC;IAAD,iCAAC;CAAA,AAtTD,CAAgD,qDAAyB,GAsTxE;AAtTY,gEAA0B;AAwTvC,IAAI,QAAQ,GAAG,8BAA8B,CAAC;AAC9C,IAAI,eAAe,GAAkB,EAAE,CAAC;AACxC,IAAI,YAAY,GAAa,EAAE,CAAC;AAChC,IAAI,wBAAwB,GAA2B,EAAE,CAAC;AAC1D,IAAI,MAAM,GAAgB;IACzB,IAAI,EAAE,QAAQ;IACd,MAAM,EAAE,OAAO;IACf,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,wBAAwB,EAAE,2BAA2B,CAAC;IAC5E,aAAa,EAAE;QACd,oBAAoB,EAAE;YACrB,MAAM,EAAE,OAAO;YACf,OAAO,EAAE;gBACR,MAAM,EAAE,QAAQ;gBAChB,YAAY,EAAE;oBACb,QAAQ,EAAE;wBACT,MAAM,EAAE,kCAAkC;wBAC1C,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;qBACnB;oBACD,MAAM,EAAE;wBACP,MAAM,EAAE,QAAQ;wBAChB,SAAS,EAAE,GAAG;qBACd;iBACD;aACD;SACD;KACD;IACD,OAAO,EAAE;QACR,UAAU,EAAE,CAAC,KAAK,CAAC;QACnB,MAAM,EAAE,QAAQ;QAChB,iBAAiB,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;QAC/E,YAAY,EAAE;YACb,KAAK,EAAE;gBACN,MAAM,EAAE,QAAQ;gBAChB,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,0CAA0C,CAAC;aAC/F;YACD,SAAS,EAAE;gBACV,MAAM,EAAE,QAAQ;gBAChB,MAAM,EAAE,YAAY;gBACpB,kBAAkB,EAAO,wBAAwB;gBACjD,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,gCAAgC,CAAC;aACzF;YACD,MAAM,EAAE;gBACP,MAAM,EAAE,QAAQ;gBAChB,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,mCAAmC,CAAC;aACzF;YACD,MAAM,EAAE;gBACP,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,8CAA8C,CAAC;aACpG;SACD;QACD,OAAO,EAAE,eAAe;KACxB;CACD,CAAC;AAEF,IAAI,cAAc,GAAG,mBAAQ,CAAC,EAAE,CAA4B,qCAAU,CAAC,gBAAgB,CAAC,CAAC;AACzF,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAEhD,SAAS,YAAY;IACpB,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;IAC3B,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IACxB,wBAAwB,CAAC,MAAM,GAAG,CAAC,CAAC;IAEpC,IAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;IACxC,IAAM,eAAe,GAAG,UAAC,SAAiB,EAAE,WAAgC;QAC3E,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;gBAClC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAE7B,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC7B,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE3C,oDAAoD;gBACpD,YAAY,CAAC,IAAI,CAAC,MAAI,SAAW,CAAC,CAAC;gBACnC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC3C;SACD;IACF,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG,2BAAgB,CAAC,WAAW,EAAE,CAAC;IACnD,KAAK,IAAI,SAAS,IAAI,WAAW,EAAE;QAClC,IAAM,kBAAkB,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC;QAE9D,eAAe,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAE5F,IAAI,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,CAAC,IAAI,IAAI,kBAAkB,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;YAClI,SAAS;SACT;QAED,IAAM,UAAU,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACrD,IAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1F,IAAM,QAAQ,GAAG;YAChB,IAAI,EAAE;gBACL,YAAY,EAAE;oBACb,SAAS,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE;iBACjC;aACD;YACD,MAAM,EAAE;gBACP,UAAU,EAAa,EAAG,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC/D,YAAY,EAAE;oBACb,MAAM,EAAE,UAAU;iBAClB;aACD;SACD,CAAC;QAEF,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/B;IAED,IAAM,YAAY,GAAG,sBAAY,CAAC,WAAW,EAAE,CAAC;IAChD,KAAK,IAAI,SAAS,IAAI,YAAY,EAAE;QACnC,eAAe,CAAC,SAAS,CAAC,CAAC;KAC3B;AACF,CAAC;AAED,IAAM,qBAAqB,GAAG,mBAAQ,CAAC,EAAE,CAAyB,kCAAgB,CAAC,aAAa,CAAC,CAAC;AAClG,IAAM,qBAAqB,GAAuB;IACjD,IAAI,EAAE,UAAU;IAChB,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,4BAA4B,EAAE,UAAU,CAAC;IAC/D,aAAa,EAAE,IAAI;IACnB,YAAY,EAAE;QACb,mBAAmB,EAAE;YACpB,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;YAC3B,SAAS,EAAE,MAAM;YACjB,qBAAqB,EAAE,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,iGAAiG,CAAC;YAClJ,UAAU,EAAE,aAAE,KAAK,0BAAe,CAAC,SAAS,IAAI,aAAE,KAAK,0BAAe,CAAC,KAAK;SAC5E;QACD,2BAA2B,EAAE;YAC5B,MAAM,EAAE,SAAS;YACjB,SAAS,EAAE,IAAI;YACf,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,kEAAkE,CAAC;YACnH,UAAU,EAAE,aAAE,KAAK,0BAAe,CAAC,SAAS,IAAI,UAAU,CAAC,YAAO,EAAE,CAAC,IAAI,EAAE,CAAC,gDAAgD;SAC5H;KACD;CACD,CAAC;AAEF,qBAAqB,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;AAEnE,8BAAiB,CAAC,+BAAkB,EAAE,0BAA0B,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as nativeKeymap from 'native-keymap';\nimport { release } from 'os';\nimport * as dom from 'vs/base/browser/dom';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Keybinding, ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { OS, OperatingSystem, isNative } from 'vs/base/common/platform';\nimport { ConfigWatcher } from 'vs/base/node/config';\nimport { ICommandService, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Extensions as ConfigExtensions, IConfigurationNode, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { Extensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { AbstractKeybindingService } from 'vs/platform/keybinding/common/abstractKeybindingService';\nimport { IKeybindingEvent, IKeyboardEvent, IUserFriendlyKeybinding, KeybindingSource, IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { IKeybindingItem, IKeybindingRule2, KeybindingWeight, KeybindingsRegistry } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { keybindingsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { ExtensionMessageCollector, ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IUserKeybindingItem, KeybindingIO, OutputBuilder } from 'vs/workbench/services/keybinding/common/keybindingIO';\nimport { CachedKeyboardMapper, IKeyboardMapper } from 'vs/workbench/services/keybinding/common/keyboardMapper';\nimport { MacLinuxFallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper';\nimport { IMacLinuxKeyboardMapping, MacLinuxKeyboardMapper, macLinuxKeyboardMappingEquals } from 'vs/workbench/services/keybinding/common/macLinuxKeyboardMapper';\nimport { IWindowsKeyboardMapping, WindowsKeyboardMapper, windowsKeyboardMappingEquals } from 'vs/workbench/services/keybinding/common/windowsKeyboardMapper';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class KeyboardMapperFactory {\n\tpublic static readonly INSTANCE = new KeyboardMapperFactory();\n\n\tprivate _layoutInfo: nativeKeymap.IKeyboardLayoutInfo | null;\n\tprivate _rawMapping: nativeKeymap.IKeyboardMapping | null;\n\tprivate _keyboardMapper: IKeyboardMapper | null;\n\tprivate _initialized: boolean;\n\n\tprivate readonly _onDidChangeKeyboardMapper = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardMapper: Event<void> = this._onDidChangeKeyboardMapper.event;\n\n\tprivate constructor() {\n\t\tthis._layoutInfo = null;\n\t\tthis._rawMapping = null;\n\t\tthis._keyboardMapper = null;\n\t\tthis._initialized = false;\n\t}\n\n\tpublic _onKeyboardLayoutChanged(): void {\n\t\tif (this._initialized) {\n\t\t\tthis._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n\t\t}\n\t}\n\n\tpublic getKeyboardMapper(dispatchConfig: DispatchConfig): IKeyboardMapper {\n\t\tif (!this._initialized) {\n\t\t\tthis._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n\t\t}\n\t\tif (dispatchConfig === DispatchConfig.KeyCode) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t\t}\n\t\treturn this._keyboardMapper!;\n\t}\n\n\tpublic getCurrentKeyboardLayout(): nativeKeymap.IKeyboardLayoutInfo | null {\n\t\tif (!this._initialized) {\n\t\t\tthis._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n\t\t}\n\t\treturn this._layoutInfo;\n\t}\n\n\tprivate static _isUSStandard(_kbInfo: nativeKeymap.IKeyboardLayoutInfo): boolean {\n\t\tif (OS === OperatingSystem.Linux) {\n\t\t\tconst kbInfo = <nativeKeymap.ILinuxKeyboardLayoutInfo>_kbInfo;\n\t\t\treturn (kbInfo && kbInfo.layout === 'us');\n\t\t}\n\n\t\tif (OS === OperatingSystem.Macintosh) {\n\t\t\tconst kbInfo = <nativeKeymap.IMacKeyboardLayoutInfo>_kbInfo;\n\t\t\treturn (kbInfo && kbInfo.id === 'com.apple.keylayout.US');\n\t\t}\n\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tconst kbInfo = <nativeKeymap.IWindowsKeyboardLayoutInfo>_kbInfo;\n\t\t\treturn (kbInfo && kbInfo.name === '00000409');\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic getRawKeyboardMapping(): nativeKeymap.IKeyboardMapping | null {\n\t\tif (!this._initialized) {\n\t\t\tthis._setKeyboardData(nativeKeymap.getCurrentKeyboardLayout(), nativeKeymap.getKeyMap());\n\t\t}\n\t\treturn this._rawMapping;\n\t}\n\n\tprivate _setKeyboardData(layoutInfo: nativeKeymap.IKeyboardLayoutInfo, rawMapping: nativeKeymap.IKeyboardMapping): void {\n\t\tthis._layoutInfo = layoutInfo;\n\n\t\tif (this._initialized && KeyboardMapperFactory._equals(this._rawMapping, rawMapping)) {\n\t\t\t// nothing to do...\n\t\t\treturn;\n\t\t}\n\n\t\tthis._initialized = true;\n\t\tthis._rawMapping = rawMapping;\n\t\tthis._keyboardMapper = new CachedKeyboardMapper(\n\t\t\tKeyboardMapperFactory._createKeyboardMapper(this._layoutInfo, this._rawMapping)\n\t\t);\n\t\tthis._onDidChangeKeyboardMapper.fire();\n\t}\n\n\tprivate static _createKeyboardMapper(layoutInfo: nativeKeymap.IKeyboardLayoutInfo, rawMapping: nativeKeymap.IKeyboardMapping): IKeyboardMapper {\n\t\tconst isUSStandard = KeyboardMapperFactory._isUSStandard(layoutInfo);\n\t\tif (isNative && OS === OperatingSystem.Windows) {\n\t\t\treturn new WindowsKeyboardMapper(isUSStandard, <IWindowsKeyboardMapping>rawMapping);\n\t\t}\n\n\t\tif (Object.keys(rawMapping).length === 0) {\n\t\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t\t}\n\n\t\tif (OS === OperatingSystem.Macintosh) {\n\t\t\tconst kbInfo = <nativeKeymap.IMacKeyboardLayoutInfo>layoutInfo;\n\t\t\tif (kbInfo.id === 'com.apple.keylayout.DVORAK-QWERTYCMD') {\n\t\t\t\t// Use keyCode based dispatching for DVORAK - QWERTY âŒ˜\n\t\t\t\treturn new MacLinuxFallbackKeyboardMapper(OS);\n\t\t\t}\n\t\t}\n\n\t\treturn new MacLinuxKeyboardMapper(isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, OS);\n\t}\n\n\tprivate static _equals(a: nativeKeymap.IKeyboardMapping | null, b: nativeKeymap.IKeyboardMapping | null): boolean {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\treturn windowsKeyboardMappingEquals(<IWindowsKeyboardMapping>a, <IWindowsKeyboardMapping>b);\n\t\t}\n\n\t\treturn macLinuxKeyboardMappingEquals(<IMacLinuxKeyboardMapping>a, <IMacLinuxKeyboardMapping>b);\n\t}\n}\n\ninterface ContributedKeyBinding {\n\tcommand: string;\n\targs?: any;\n\tkey: string;\n\twhen?: string;\n\tmac?: string;\n\tlinux?: string;\n\twin?: string;\n}\n\nfunction isContributedKeyBindingsArray(thing: ContributedKeyBinding | ContributedKeyBinding[]): thing is ContributedKeyBinding[] {\n\treturn Array.isArray(thing);\n}\n\nfunction isValidContributedKeyBinding(keyBinding: ContributedKeyBinding, rejects: string[]): boolean {\n\tif (!keyBinding) {\n\t\trejects.push(nls.localize('nonempty', \"expected non-empty value.\"));\n\t\treturn false;\n\t}\n\tif (typeof keyBinding.command !== 'string') {\n\t\trejects.push(nls.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'command'));\n\t\treturn false;\n\t}\n\tif (keyBinding.key && typeof keyBinding.key !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'key'));\n\t\treturn false;\n\t}\n\tif (keyBinding.when && typeof keyBinding.when !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n\t\treturn false;\n\t}\n\tif (keyBinding.mac && typeof keyBinding.mac !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'mac'));\n\t\treturn false;\n\t}\n\tif (keyBinding.linux && typeof keyBinding.linux !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'linux'));\n\t\treturn false;\n\t}\n\tif (keyBinding.win && typeof keyBinding.win !== 'string') {\n\t\trejects.push(nls.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'win'));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nlet keybindingType: IJSONSchema = {\n\ttype: 'object',\n\tdefault: { command: '', key: '' },\n\tproperties: {\n\t\tcommand: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.command', 'Identifier of the command to run when keybinding is triggered.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\targs: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.args', \"Arguments to pass to the command to execute.\")\n\t\t},\n\t\tkey: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.key', 'Key or key sequence (separate keys with plus-sign and sequences with space, e.g Ctrl+O and Ctrl+L L for a chord).'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tmac: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.mac', 'Mac specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tlinux: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.linux', 'Linux specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twin: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.win', 'Windows specific key or key sequence.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.keybindings.when', 'Condition when the key is active.'),\n\t\t\ttype: 'string'\n\t\t},\n\t}\n};\n\nconst keybindingsExtPoint = ExtensionsRegistry.registerExtensionPoint<ContributedKeyBinding | ContributedKeyBinding[]>({\n\textensionPoint: 'keybindings',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.keybindings', \"Contributes keybindings.\"),\n\t\toneOf: [\n\t\t\tkeybindingType,\n\t\t\t{\n\t\t\t\ttype: 'array',\n\t\t\t\titems: keybindingType\n\t\t\t}\n\t\t]\n\t}\n});\n\nexport const enum DispatchConfig {\n\tCode,\n\tKeyCode\n}\n\nfunction getDispatchConfig(configurationService: IConfigurationService): DispatchConfig {\n\tconst keyboard = configurationService.getValue('keyboard');\n\tconst r = (keyboard ? (<any>keyboard).dispatch : null);\n\treturn (r === 'keyCode' ? DispatchConfig.KeyCode : DispatchConfig.Code);\n}\n\nexport class WorkbenchKeybindingService extends AbstractKeybindingService {\n\n\tprivate _keyboardMapper: IKeyboardMapper;\n\tprivate _cachedResolver: KeybindingResolver | null;\n\tprivate _firstTimeComputingResolver: boolean;\n\tprivate userKeybindings: ConfigWatcher<IUserFriendlyKeybinding[]>;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IStatusbarService statusBarService: IStatusbarService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tsuper(contextKeyService, commandService, telemetryService, notificationService, statusBarService);\n\n\t\tupdateSchema();\n\n\t\tlet dispatchConfig = getDispatchConfig(configurationService);\n\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\tlet newDispatchConfig = getDispatchConfig(configurationService);\n\t\t\tif (dispatchConfig === newDispatchConfig) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdispatchConfig = newDispatchConfig;\n\t\t\tthis._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n\t\t\tthis.updateResolver({ source: KeybindingSource.Default });\n\t\t});\n\n\t\tthis._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n\t\tKeyboardMapperFactory.INSTANCE.onDidChangeKeyboardMapper(() => {\n\t\t\tthis._keyboardMapper = KeyboardMapperFactory.INSTANCE.getKeyboardMapper(dispatchConfig);\n\t\t\tthis.updateResolver({ source: KeybindingSource.Default });\n\t\t});\n\n\t\tthis._cachedResolver = null;\n\t\tthis._firstTimeComputingResolver = true;\n\n\t\tthis.userKeybindings = this._register(new ConfigWatcher(environmentService.appKeybindingsPath, { defaultConfig: [], onError: error => onUnexpectedError(error) }));\n\n\t\tkeybindingsExtPoint.setHandler((extensions) => {\n\n\t\t\tlet keybindings: IKeybindingRule2[] = [];\n\t\t\tfor (let extension of extensions) {\n\t\t\t\tthis._handleKeybindingsExtensionPointUser(extension.description.isBuiltin, extension.value, extension.collector, keybindings);\n\t\t\t}\n\n\t\t\tKeybindingsRegistry.setExtensionKeybindings(keybindings);\n\t\t\tthis.updateResolver({ source: KeybindingSource.Default });\n\t\t});\n\n\t\tupdateSchema();\n\t\tthis._register(extensionService.onDidRegisterExtensions(() => updateSchema()));\n\n\t\tthis._register(this.userKeybindings.onDidUpdateConfiguration(event => this.updateResolver({\n\t\t\tsource: KeybindingSource.User,\n\t\t\tkeybindings: event.config\n\t\t})));\n\n\t\tthis._register(dom.addDisposableListener(window, dom.EventType.KEY_DOWN, (e: KeyboardEvent) => {\n\t\t\tlet keyEvent = new StandardKeyboardEvent(e);\n\t\t\tlet shouldPreventDefault = this._dispatch(keyEvent, keyEvent.target);\n\t\t\tif (shouldPreventDefault) {\n\t\t\t\tkeyEvent.preventDefault();\n\t\t\t}\n\t\t}));\n\n\t\tkeybindingsTelemetry(telemetryService, this);\n\t\tlet data = KeyboardMapperFactory.INSTANCE.getCurrentKeyboardLayout();\n\t\t/* __GDPR__\n\t\t\t\"keyboardLayout\" : {\n\t\t\t\t\"currentKeyboardLayout\": { \"${inline}\": [ \"${IKeyboardLayoutInfo}\" ] }\n\t\t\t}\n\t\t*/\n\t\ttelemetryService.publicLog('keyboardLayout', {\n\t\t\tcurrentKeyboardLayout: data\n\t\t});\n\t}\n\n\tpublic _dumpDebugInfo(): string {\n\t\tconst layoutInfo = JSON.stringify(KeyboardMapperFactory.INSTANCE.getCurrentKeyboardLayout(), null, '\\t');\n\t\tconst mapperInfo = this._keyboardMapper.dumpDebugInfo();\n\t\tconst rawMapping = JSON.stringify(KeyboardMapperFactory.INSTANCE.getRawKeyboardMapping(), null, '\\t');\n\t\treturn `Layout info:\\n${layoutInfo}\\n${mapperInfo}\\n\\nRaw mapping:\\n${rawMapping}`;\n\t}\n\n\tprivate _safeGetConfig(): IUserFriendlyKeybinding[] {\n\t\tlet rawConfig = this.userKeybindings.getConfig();\n\t\tif (Array.isArray(rawConfig)) {\n\t\t\treturn rawConfig;\n\t\t}\n\t\treturn [];\n\t}\n\n\tpublic customKeybindingsCount(): number {\n\t\tlet userKeybindings = this._safeGetConfig();\n\n\t\treturn userKeybindings.length;\n\t}\n\n\tprivate updateResolver(event: IKeybindingEvent): void {\n\t\tthis._cachedResolver = null;\n\t\tthis._onDidUpdateKeybindings.fire(event);\n\t}\n\n\tprotected _getResolver(): KeybindingResolver {\n\t\tif (!this._cachedResolver) {\n\t\t\tconst defaults = this._resolveKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);\n\t\t\tconst overrides = this._resolveUserKeybindingItems(this._getExtraKeybindings(this._firstTimeComputingResolver), false);\n\t\t\tthis._cachedResolver = new KeybindingResolver(defaults, overrides);\n\t\t\tthis._firstTimeComputingResolver = false;\n\t\t}\n\t\treturn this._cachedResolver;\n\t}\n\n\tprotected _documentHasFocus(): boolean {\n\t\t// it is possible that the document has lost focus, but the\n\t\t// window is still focused, e.g. when a <webview> element\n\t\t// has focus\n\t\treturn this.windowService.hasFocus;\n\t}\n\n\tprivate _resolveKeybindingItems(items: IKeybindingItem[], isDefault: boolean): ResolvedKeybindingItem[] {\n\t\tlet result: ResolvedKeybindingItem[] = [], resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = (item.when ? item.when.normalize() : undefined);\n\t\t\tconst keybinding = item.keybinding;\n\t\t\tif (!keybinding) {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(null, item.command, item.commandArgs, when, isDefault);\n\t\t\t} else {\n\t\t\t\tconst resolvedKeybindings = this.resolveKeybinding(keybinding);\n\t\t\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _resolveUserKeybindingItems(items: IUserKeybindingItem[], isDefault: boolean): ResolvedKeybindingItem[] {\n\t\tlet result: ResolvedKeybindingItem[] = [], resultLen = 0;\n\t\tfor (const item of items) {\n\t\t\tconst when = (item.when ? item.when.normalize() : undefined);\n\t\t\tconst parts = item.parts;\n\t\t\tif (parts.length === 0) {\n\t\t\t\t// This might be a removal keybinding item in user settings => accept it\n\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(null, item.command, item.commandArgs, when, isDefault);\n\t\t\t} else {\n\t\t\t\tconst resolvedKeybindings = this._keyboardMapper.resolveUserBinding(parts);\n\t\t\t\tfor (const resolvedKeybinding of resolvedKeybindings) {\n\t\t\t\t\tresult[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getExtraKeybindings(isFirstTime: boolean): IUserKeybindingItem[] {\n\t\tlet extraUserKeybindings: IUserFriendlyKeybinding[] = this._safeGetConfig();\n\t\tif (!isFirstTime) {\n\t\t\tlet cnt = extraUserKeybindings.length;\n\n\t\t\t/* __GDPR__\n\t\t\t\t\"customKeybindingsChanged\" : {\n\t\t\t\t\t\"keyCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('customKeybindingsChanged', {\n\t\t\t\tkeyCount: cnt\n\t\t\t});\n\t\t}\n\n\t\treturn extraUserKeybindings.map((k) => KeybindingIO.readUserKeybindingItem(k));\n\t}\n\n\tpublic resolveKeybinding(kb: Keybinding): ResolvedKeybinding[] {\n\t\treturn this._keyboardMapper.resolveKeybinding(kb);\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\treturn this._keyboardMapper.resolveKeyboardEvent(keyboardEvent);\n\t}\n\n\tpublic resolveUserBinding(userBinding: string): ResolvedKeybinding[] {\n\t\tconst parts = KeybindingParser.parseUserBinding(userBinding);\n\t\treturn this._keyboardMapper.resolveUserBinding(parts);\n\t}\n\n\tprivate _handleKeybindingsExtensionPointUser(isBuiltin: boolean, keybindings: ContributedKeyBinding | ContributedKeyBinding[], collector: ExtensionMessageCollector, result: IKeybindingRule2[]): void {\n\t\tif (isContributedKeyBindingsArray(keybindings)) {\n\t\t\tfor (let i = 0, len = keybindings.length; i < len; i++) {\n\t\t\t\tthis._handleKeybinding(isBuiltin, i + 1, keybindings[i], collector, result);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._handleKeybinding(isBuiltin, 1, keybindings, collector, result);\n\t\t}\n\t}\n\n\tprivate _handleKeybinding(isBuiltin: boolean, idx: number, keybindings: ContributedKeyBinding, collector: ExtensionMessageCollector, result: IKeybindingRule2[]): void {\n\n\t\tlet rejects: string[] = [];\n\n\t\tif (isValidContributedKeyBinding(keybindings, rejects)) {\n\t\t\tlet rule = this._asCommandRule(isBuiltin, idx++, keybindings);\n\t\t\tif (rule) {\n\t\t\t\tresult.push(rule);\n\t\t\t}\n\t\t}\n\n\t\tif (rejects.length > 0) {\n\t\t\tcollector.error(nls.localize(\n\t\t\t\t'invalid.keybindings',\n\t\t\t\t\"Invalid `contributes.{0}`: {1}\",\n\t\t\t\tkeybindingsExtPoint.name,\n\t\t\t\trejects.join('\\n')\n\t\t\t));\n\t\t}\n\t}\n\n\tprivate _asCommandRule(isBuiltin: boolean, idx: number, binding: ContributedKeyBinding): IKeybindingRule2 | undefined {\n\n\t\tlet { command, args, when, key, mac, linux, win } = binding;\n\n\t\tlet weight: number;\n\t\tif (isBuiltin) {\n\t\t\tweight = KeybindingWeight.BuiltinExtension + idx;\n\t\t} else {\n\t\t\tweight = KeybindingWeight.ExternalExtension + idx;\n\t\t}\n\n\t\tlet desc: IKeybindingRule2 = {\n\t\t\tid: command,\n\t\t\targs,\n\t\t\twhen: ContextKeyExpr.deserialize(when),\n\t\t\tweight: weight,\n\t\t\tprimary: KeybindingParser.parseKeybinding(key, OS),\n\t\t\tmac: mac ? { primary: KeybindingParser.parseKeybinding(mac, OS) } : null,\n\t\t\tlinux: linux ? { primary: KeybindingParser.parseKeybinding(linux, OS) } : null,\n\t\t\twin: win ? { primary: KeybindingParser.parseKeybinding(win, OS) } : null\n\t\t};\n\n\t\tif (!desc.primary && !desc.mac && !desc.linux && !desc.win) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn desc;\n\t}\n\n\tpublic getDefaultKeybindingsContent(): string {\n\t\tconst resolver = this._getResolver();\n\t\tconst defaultKeybindings = resolver.getDefaultKeybindings();\n\t\tconst boundCommands = resolver.getDefaultBoundCommands();\n\t\treturn (\n\t\t\tWorkbenchKeybindingService._getDefaultKeybindings(defaultKeybindings)\n\t\t\t+ '\\n\\n'\n\t\t\t+ WorkbenchKeybindingService._getAllCommandsAsComment(boundCommands)\n\t\t);\n\t}\n\n\tprivate static _getDefaultKeybindings(defaultKeybindings: ResolvedKeybindingItem[]): string {\n\t\tlet out = new OutputBuilder();\n\t\tout.writeLine('[');\n\n\t\tlet lastIndex = defaultKeybindings.length - 1;\n\t\tdefaultKeybindings.forEach((k, index) => {\n\t\t\tKeybindingIO.writeKeybindingItem(out, k);\n\t\t\tif (index !== lastIndex) {\n\t\t\t\tout.writeLine(',');\n\t\t\t} else {\n\t\t\t\tout.writeLine();\n\t\t\t}\n\t\t});\n\t\tout.writeLine(']');\n\t\treturn out.toString();\n\t}\n\n\tprivate static _getAllCommandsAsComment(boundCommands: Map<string, boolean>): string {\n\t\tconst unboundCommands = KeybindingResolver.getAllUnboundCommands(boundCommands);\n\t\tlet pretty = unboundCommands.sort().join('\\n// - ');\n\t\treturn '// ' + nls.localize('unboundCommands', \"Here are other available commands: \") + '\\n// - ' + pretty;\n\t}\n\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean {\n\t\tif (event.ctrlKey || event.metaKey) {\n\t\t\t// ignore ctrl/cmd-combination but not shift/alt-combinatios\n\t\t\treturn false;\n\t\t}\n\t\t// consult the KeyboardMapperFactory to check the given event for\n\t\t// a printable value.\n\t\tconst mapping = KeyboardMapperFactory.INSTANCE.getRawKeyboardMapping();\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\t\tconst keyInfo = mapping[event.code];\n\t\tif (!keyInfo) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!keyInfo.value || /\\s/.test(keyInfo.value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nlet schemaId = 'vscode://schemas/keybindings';\nlet commandsSchemas: IJSONSchema[] = [];\nlet commandsEnum: string[] = [];\nlet commandsEnumDescriptions: (string | undefined)[] = [];\nlet schema: IJSONSchema = {\n\t'id': schemaId,\n\t'type': 'array',\n\t'title': nls.localize('keybindings.json.title', \"Keybindings configuration\"),\n\t'definitions': {\n\t\t'editorGroupsSchema': {\n\t\t\t'type': 'array',\n\t\t\t'items': {\n\t\t\t\t'type': 'object',\n\t\t\t\t'properties': {\n\t\t\t\t\t'groups': {\n\t\t\t\t\t\t'$ref': '#/definitions/editorGroupsSchema',\n\t\t\t\t\t\t'default': [{}, {}]\n\t\t\t\t\t},\n\t\t\t\t\t'size': {\n\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t'default': 0.5\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'items': {\n\t\t'required': ['key'],\n\t\t'type': 'object',\n\t\t'defaultSnippets': [{ 'body': { 'key': '$1', 'command': '$2', 'when': '$3' } }],\n\t\t'properties': {\n\t\t\t'key': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'description': nls.localize('keybindings.json.key', \"Key or key sequence (separated by space)\"),\n\t\t\t},\n\t\t\t'command': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': commandsEnum,\n\t\t\t\t'enumDescriptions': <any>commandsEnumDescriptions,\n\t\t\t\t'description': nls.localize('keybindings.json.command', \"Name of the command to execute\"),\n\t\t\t},\n\t\t\t'when': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'description': nls.localize('keybindings.json.when', \"Condition when the key is active.\")\n\t\t\t},\n\t\t\t'args': {\n\t\t\t\t'description': nls.localize('keybindings.json.args', \"Arguments to pass to the command to execute.\")\n\t\t\t}\n\t\t},\n\t\t'allOf': commandsSchemas\n\t}\n};\n\nlet schemaRegistry = Registry.as<IJSONContributionRegistry>(Extensions.JSONContribution);\nschemaRegistry.registerSchema(schemaId, schema);\n\nfunction updateSchema() {\n\tcommandsSchemas.length = 0;\n\tcommandsEnum.length = 0;\n\tcommandsEnumDescriptions.length = 0;\n\n\tconst knownCommands = new Set<string>();\n\tconst addKnownCommand = (commandId: string, description?: string | undefined) => {\n\t\tif (!/^_/.test(commandId)) {\n\t\t\tif (!knownCommands.has(commandId)) {\n\t\t\t\tknownCommands.add(commandId);\n\n\t\t\t\tcommandsEnum.push(commandId);\n\t\t\t\tcommandsEnumDescriptions.push(description);\n\n\t\t\t\t// Also add the negative form for keybinding removal\n\t\t\t\tcommandsEnum.push(`-${commandId}`);\n\t\t\t\tcommandsEnumDescriptions.push(description);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst allCommands = CommandsRegistry.getCommands();\n\tfor (let commandId in allCommands) {\n\t\tconst commandDescription = allCommands[commandId].description;\n\n\t\taddKnownCommand(commandId, commandDescription ? commandDescription.description : undefined);\n\n\t\tif (!commandDescription || !commandDescription.args || commandDescription.args.length !== 1 || !commandDescription.args[0].schema) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst argsSchema = commandDescription.args[0].schema;\n\t\tconst argsRequired = Array.isArray(argsSchema.required) && argsSchema.required.length > 0;\n\t\tconst addition = {\n\t\t\t'if': {\n\t\t\t\t'properties': {\n\t\t\t\t\t'command': { 'const': commandId }\n\t\t\t\t}\n\t\t\t},\n\t\t\t'then': {\n\t\t\t\t'required': (<string[]>[]).concat(argsRequired ? ['args'] : []),\n\t\t\t\t'properties': {\n\t\t\t\t\t'args': argsSchema\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tcommandsSchemas.push(addition);\n\t}\n\n\tconst menuCommands = MenuRegistry.getCommands();\n\tfor (let commandId in menuCommands) {\n\t\taddKnownCommand(commandId);\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigExtensions.Configuration);\nconst keyboardConfiguration: IConfigurationNode = {\n\t'id': 'keyboard',\n\t'order': 15,\n\t'type': 'object',\n\t'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n\t'overridable': true,\n\t'properties': {\n\t\t'keyboard.dispatch': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['code', 'keyCode'],\n\t\t\t'default': 'code',\n\t\t\t'markdownDescription': nls.localize('dispatch', \"Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.\"),\n\t\t\t'included': OS === OperatingSystem.Macintosh || OS === OperatingSystem.Linux\n\t\t},\n\t\t'keyboard.touchbar.enabled': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\t'description': nls.localize('touchbar.enabled', \"Enables the macOS touchbar buttons on the keyboard if available.\"),\n\t\t\t'included': OS === OperatingSystem.Macintosh && parseFloat(release()) >= 16 // Minimum: macOS Sierra (10.12.x = darwin 16.x)\n\t\t}\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n\nregisterSingleton(IKeybindingService, WorkbenchKeybindingService);"]}]}