{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar Objects = require(\"vs/base/common/objects\");\nvar jsonSchemaCommon_1 = require(\"./jsonSchemaCommon\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar taskDefinitionRegistry_1 = require(\"./taskDefinitionRegistry\");\nvar ConfigurationResolverUtils = require(\"vs/workbench/services/configurationResolver/common/configurationResolverUtils\");\nvar configurationResolverSchema_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolverSchema\");\nfunction fixReferences(literal) {\n    if (Array.isArray(literal)) {\n        literal.forEach(fixReferences);\n    }\n    else if (typeof literal === 'object') {\n        if (literal['$ref']) {\n            literal['$ref'] = literal['$ref'] + '2';\n        }\n        Object.getOwnPropertyNames(literal).forEach(function (property) {\n            var value = literal[property];\n            if (Array.isArray(value) || typeof value === 'object') {\n                fixReferences(value);\n            }\n        });\n    }\n}\nvar shellCommand = {\n    anyOf: [\n        {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n        },\n        {\n            $ref: '#definitions/shellConfiguration'\n        }\n    ],\n    deprecationMessage: nls.localize('JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.')\n};\nvar taskIdentifier = {\n    type: 'object',\n    additionalProperties: true,\n    properties: {\n        type: {\n            type: 'string',\n            description: nls.localize('JsonSchema.tasks.dependsOn.identifier', 'The task indentifier.')\n        }\n    }\n};\nvar dependsOn = {\n    anyOf: [\n        {\n            type: 'string',\n            description: nls.localize('JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.')\n        },\n        taskIdentifier,\n        {\n            type: 'array',\n            description: nls.localize('JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'),\n            items: {\n                anyOf: [\n                    {\n                        type: 'string',\n                    },\n                    taskIdentifier\n                ]\n            }\n        }\n    ]\n};\nvar presentation = {\n    type: 'object',\n    default: {\n        echo: true,\n        reveal: 'always',\n        focus: false,\n        panel: 'shared',\n        showReuseMessage: true,\n        clear: false,\n    },\n    description: nls.localize('JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\\'s ouput and reads its input.'),\n    additionalProperties: false,\n    properties: {\n        echo: {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.')\n        },\n        focus: {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.')\n        },\n        reveal: {\n            type: 'string',\n            enum: ['always', 'silent', 'never'],\n            enumDescriptions: [\n                nls.localize('JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'),\n                nls.localize('JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error.'),\n                nls.localize('JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'),\n            ],\n            default: 'always',\n            description: nls.localize('JsonSchema.tasks.presentation.reveals', 'Controls whether the panel running the task is revealed or not. Default is \\\"always\\\".')\n        },\n        panel: {\n            type: 'string',\n            enum: ['shared', 'dedicated', 'new'],\n            default: 'shared',\n            description: nls.localize('JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.')\n        },\n        showReuseMessage: {\n            type: 'boolean',\n            default: true,\n            description: nls.localize('JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.')\n        },\n        clear: {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.')\n        },\n        group: {\n            type: 'string',\n            description: nls.localize('JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.')\n        },\n    }\n};\nvar terminal = Objects.deepClone(presentation);\nterminal.deprecationMessage = nls.localize('JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead');\nvar group = {\n    oneOf: [\n        {\n            type: 'string',\n        },\n        {\n            type: 'object',\n            properties: {\n                kind: {\n                    type: 'string',\n                    default: 'none',\n                    description: nls.localize('JsonSchema.tasks.group.kind', 'The task\\'s execution group.')\n                },\n                isDefault: {\n                    type: 'boolean',\n                    default: false,\n                    description: nls.localize('JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group.')\n                }\n            }\n        },\n    ],\n    enum: [\n        { kind: 'build', isDefault: true },\n        { kind: 'test', isDefault: true },\n        'build',\n        'test',\n        'none'\n    ],\n    enumDescriptions: [\n        nls.localize('JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.'),\n        nls.localize('JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.'),\n        nls.localize('JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \\'Run Build Task\\' command.'),\n        nls.localize('JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \\'Run Test Task\\' command.'),\n        nls.localize('JsonSchema.tasks.group.none', 'Assigns the task to no group')\n    ],\n    description: nls.localize('JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.')\n};\nvar taskType = {\n    type: 'string',\n    enum: ['shell'],\n    default: 'shell',\n    description: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\nvar command = {\n    oneOf: [\n        {\n            oneOf: [\n                {\n                    type: 'string'\n                },\n                {\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    },\n                    description: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n                }\n            ]\n        },\n        {\n            type: 'object',\n            required: ['value', 'quoting'],\n            properties: {\n                value: {\n                    oneOf: [\n                        {\n                            type: 'string'\n                        },\n                        {\n                            type: 'array',\n                            items: {\n                                type: 'string'\n                            },\n                            description: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n                        }\n                    ],\n                    description: nls.localize('JsonSchema.command.quotedString.value', 'The actual command value')\n                },\n                quoting: {\n                    type: 'string',\n                    enum: ['escape', 'strong', 'weak'],\n                    enumDescriptions: [\n                        nls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n                        nls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \" under PowerShell and bash).'),\n                        nls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \\' under PowerShell and bash).'),\n                    ],\n                    default: 'strong',\n                    description: nls.localize('JsonSchema.command.quotesString.quote', 'How the command value should be quoted.')\n                }\n            }\n        }\n    ],\n    description: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n};\nvar args = {\n    type: 'array',\n    items: {\n        oneOf: [\n            {\n                type: 'string',\n            },\n            {\n                type: 'object',\n                required: ['value', 'quoting'],\n                properties: {\n                    value: {\n                        type: 'string',\n                        description: nls.localize('JsonSchema.args.quotedString.value', 'The actual argument value')\n                    },\n                    quoting: {\n                        type: 'string',\n                        enum: ['escape', 'strong', 'weak'],\n                        enumDescriptions: [\n                            nls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n                            nls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \" under PowerShell and bash).'),\n                            nls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \\' under PowerShell and bash).'),\n                        ],\n                        default: 'strong',\n                        description: nls.localize('JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.')\n                    }\n                }\n            }\n        ]\n    },\n    description: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.')\n};\nvar label = {\n    type: 'string',\n    description: nls.localize('JsonSchema.tasks.label', \"The task's user interface label\")\n};\nvar version = {\n    type: 'string',\n    enum: ['2.0.0'],\n    description: nls.localize('JsonSchema.version', 'The config\\'s version number.')\n};\nvar identifier = {\n    type: 'string',\n    description: nls.localize('JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'),\n    deprecationMessage: nls.localize('JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.')\n};\nvar runOptions = {\n    type: 'object',\n    properties: {\n        reevaluateOnRerun: {\n            type: 'boolean',\n            description: nls.localize('JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'),\n            default: true\n        },\n        runOn: {\n            type: 'string',\n            enum: ['default', 'folderOpen'],\n            description: nls.localize('JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'),\n            default: 'default'\n        },\n    },\n    description: nls.localize('JsonSchema.tasks.runOptions', 'The task\\'s run related options')\n};\nvar commonSchemaDefinitions = jsonSchemaCommon_1.default.definitions;\nvar options = Objects.deepClone(commonSchemaDefinitions.options);\nvar optionsProperties = options.properties;\noptionsProperties.shell = Objects.deepClone(commonSchemaDefinitions.shellConfiguration);\nvar taskConfiguration = {\n    type: 'object',\n    additionalProperties: false,\n    properties: {\n        label: {\n            type: 'string',\n            description: nls.localize('JsonSchema.tasks.taskLabel', \"The task's label\")\n        },\n        taskName: {\n            type: 'string',\n            description: nls.localize('JsonSchema.tasks.taskName', 'The task\\'s name'),\n            deprecationMessage: nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\\'s name property is deprecated. Use the label property instead.')\n        },\n        identifier: Objects.deepClone(identifier),\n        group: Objects.deepClone(group),\n        isBackground: {\n            type: 'boolean',\n            description: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n            default: true\n        },\n        promptOnClose: {\n            type: 'boolean',\n            description: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n            default: false\n        },\n        presentation: Objects.deepClone(presentation),\n        options: options,\n        problemMatcher: {\n            $ref: '#/definitions/problemMatcherType',\n            description: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n        },\n        runOptions: Objects.deepClone(runOptions),\n        dependsOn: Objects.deepClone(dependsOn),\n    }\n};\nvar taskDefinitions = [];\ntaskDefinitionRegistry_1.TaskDefinitionRegistry.onReady().then(function () {\n    for (var _i = 0, _a = taskDefinitionRegistry_1.TaskDefinitionRegistry.all(); _i < _a.length; _i++) {\n        var taskType_1 = _a[_i];\n        var schema_1 = Objects.deepClone(taskConfiguration);\n        var schemaProperties = schema_1.properties;\n        // Since we do this after the schema is assigned we need to patch the refs.\n        schemaProperties.type = {\n            type: 'string',\n            description: nls.localize('JsonSchema.customizations.customizes.type', 'The task type to customize'),\n            enum: [taskType_1.taskType]\n        };\n        if (taskType_1.required) {\n            schema_1.required = taskType_1.required.slice();\n        }\n        else {\n            schema_1.required = [];\n        }\n        // Customized tasks require that the task type be set.\n        schema_1.required.push('type');\n        if (taskType_1.properties) {\n            for (var _b = 0, _c = Object.keys(taskType_1.properties); _b < _c.length; _b++) {\n                var key = _c[_b];\n                var property = taskType_1.properties[key];\n                schemaProperties[key] = Objects.deepClone(property);\n            }\n        }\n        fixReferences(schema_1);\n        taskDefinitions.push(schema_1);\n    }\n});\nvar customize = Objects.deepClone(taskConfiguration);\ncustomize.properties.customize = {\n    type: 'string',\n    deprecationMessage: nls.localize('JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach')\n};\nif (!customize.required) {\n    customize.required = [];\n}\ncustomize.required.push('customize');\ntaskDefinitions.push(customize);\nvar definitions = Objects.deepClone(commonSchemaDefinitions);\nvar taskDescription = definitions.taskDescription;\ntaskDescription.required = ['label'];\nvar taskDescriptionProperties = taskDescription.properties;\ntaskDescriptionProperties.label = Objects.deepClone(label);\ntaskDescriptionProperties.command = Objects.deepClone(command);\ntaskDescriptionProperties.args = Objects.deepClone(args);\ntaskDescriptionProperties.isShellCommand = Objects.deepClone(shellCommand);\ntaskDescriptionProperties.dependsOn = dependsOn;\ntaskDescriptionProperties.identifier = Objects.deepClone(identifier);\ntaskDescriptionProperties.type = Objects.deepClone(taskType);\ntaskDescriptionProperties.presentation = Objects.deepClone(presentation);\ntaskDescriptionProperties.terminal = terminal;\ntaskDescriptionProperties.group = Objects.deepClone(group);\ntaskDescriptionProperties.runOptions = Objects.deepClone(runOptions);\ntaskDescriptionProperties.taskName.deprecationMessage = nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\\'s name property is deprecated. Use the label property instead.');\ntaskDescription.default = {\n    label: 'My Task',\n    type: 'shell',\n    command: 'echo Hello',\n    problemMatcher: []\n};\ndefinitions.showOutputType.deprecationMessage = nls.localize('JsonSchema.tasks.showOputput.deprecated', 'The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.');\ntaskDescriptionProperties.echoCommand.deprecationMessage = nls.localize('JsonSchema.tasks.echoCommand.deprecated', 'The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.');\ntaskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize('JsonSchema.tasks.suppressTaskName.deprecated', 'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.');\ntaskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize('JsonSchema.tasks.isBuildCommand.deprecated', 'The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.');\ntaskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize('JsonSchema.tasks.isTestCommand.deprecated', 'The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.');\n// Process tasks are almost identical schema-wise to shell tasks, but they are required to have a command\nvar processTask = Objects.deepClone(taskDescription);\nprocessTask.properties.type = {\n    type: 'string',\n    enum: ['process'],\n    default: 'shell',\n    description: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\nprocessTask.required.push('command');\nprocessTask.required.push('type');\ntaskDefinitions.push(processTask);\ntaskDefinitions.push({\n    $ref: '#/definitions/taskDescription'\n});\nvar definitionsTaskRunnerConfigurationProperties = definitions.taskRunnerConfiguration.properties;\nvar tasks = definitionsTaskRunnerConfigurationProperties.tasks;\ntasks.items = {\n    oneOf: taskDefinitions\n};\ndefinitionsTaskRunnerConfigurationProperties.inputs = configurationResolverSchema_1.inputsSchema.definitions.inputs;\ndefinitions.commandConfiguration.properties.isShellCommand = Objects.deepClone(shellCommand);\ndefinitions.options.properties.shell = {\n    $ref: '#/definitions/shellConfiguration'\n};\ndefinitionsTaskRunnerConfigurationProperties.isShellCommand = Objects.deepClone(shellCommand);\ndefinitionsTaskRunnerConfigurationProperties.type = Objects.deepClone(taskType);\ndefinitionsTaskRunnerConfigurationProperties.group = Objects.deepClone(group);\ndefinitionsTaskRunnerConfigurationProperties.presentation = Objects.deepClone(presentation);\ndefinitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize('JsonSchema.tasks.suppressTaskName.deprecated', 'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.');\ndefinitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize('JsonSchema.tasks.taskSelector.deprecated', 'The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.');\nvar osSpecificTaskRunnerConfiguration = Objects.deepClone(definitions.taskRunnerConfiguration);\ndelete osSpecificTaskRunnerConfiguration.properties.tasks;\nosSpecificTaskRunnerConfiguration.additionalProperties = false;\ndefinitions.osSpecificTaskRunnerConfiguration = osSpecificTaskRunnerConfiguration;\ndefinitionsTaskRunnerConfigurationProperties.version = Objects.deepClone(version);\nvar schema = {\n    oneOf: [\n        {\n            'allOf': [\n                {\n                    type: 'object',\n                    required: ['version'],\n                    properties: {\n                        version: Objects.deepClone(version),\n                        windows: {\n                            '$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n                            'description': nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n                        },\n                        osx: {\n                            '$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n                            'description': nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n                        },\n                        linux: {\n                            '$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n                            'description': nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n                        }\n                    }\n                },\n                {\n                    $ref: '#/definitions/taskRunnerConfiguration'\n                }\n            ]\n        }\n    ]\n};\nschema.definitions = definitions;\nfunction deprecatedVariableMessage(schemaMap, property) {\n    var mapAtProperty = schemaMap[property].properties;\n    if (mapAtProperty) {\n        Object.keys(mapAtProperty).forEach(function (name) {\n            deprecatedVariableMessage(mapAtProperty, name);\n        });\n    }\n    else {\n        ConfigurationResolverUtils.applyDeprecatedVariableMessage(schemaMap[property]);\n    }\n}\nObject.getOwnPropertyNames(definitions).forEach(function (key) {\n    var newKey = key + '2';\n    definitions[newKey] = definitions[key];\n    delete definitions[key];\n    deprecatedVariableMessage(definitions, newKey);\n});\nfixReferences(schema);\nfunction updateProblemMatchers() {\n    try {\n        var matcherIds = problemMatcher_1.ProblemMatcherRegistry.keys().map(function (key) { return '$' + key; });\n        definitions.problemMatcherType2.oneOf[0].enum = matcherIds;\n        definitions.problemMatcherType2.oneOf[2].items.anyOf[1].enum = matcherIds;\n    }\n    catch (err) {\n        console.log('Installing problem matcher ids failed');\n    }\n}\nexports.updateProblemMatchers = updateProblemMatchers;\nproblemMatcher_1.ProblemMatcherRegistry.onReady().then(function () {\n    updateProblemMatchers();\n});\nexports.default = schema;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v2.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\n\nimport commonSchema from './jsonSchemaCommon';\n\nimport { ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { TaskDefinitionRegistry } from './taskDefinitionRegistry';\nimport * as ConfigurationResolverUtils from 'vs/workbench/services/configurationResolver/common/configurationResolverUtils';\nimport { inputsSchema } from 'vs/workbench/services/configurationResolver/common/configurationResolverSchema';\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '2';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tlet value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nconst shellCommand: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n\t\t},\n\t\t{\n\t\t\t$ref: '#definitions/shellConfiguration'\n\t\t}\n\t],\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.isShellCommand.deprecated', 'The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.')\n};\n\nconst taskIdentifier: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: true,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.identifier', 'The task indentifier.')\n\t\t}\n\t}\n};\n\nconst dependsOn: IJSONSchema = {\n\tanyOf: [\n\t\t{\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.string', 'Another task this task depends on.')\n\t\t},\n\t\ttaskIdentifier,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.dependsOn.array', 'The other tasks this task depends on.'),\n\t\t\titems: {\n\t\t\t\tanyOf: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\ttaskIdentifier\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t]\n};\n\nconst presentation: IJSONSchema = {\n\ttype: 'object',\n\tdefault: {\n\t\techo: true,\n\t\treveal: 'always',\n\t\tfocus: false,\n\t\tpanel: 'shared',\n\t\tshowReuseMessage: true,\n\t\tclear: false,\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.presentation', 'Configures the panel that is used to present the task\\'s ouput and reads its input.'),\n\tadditionalProperties: false,\n\tproperties: {\n\t\techo: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.echo', 'Controls whether the executed command is echoed to the panel. Default is true.')\n\t\t},\n\t\tfocus: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.focus', 'Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.')\n\t\t},\n\t\treveal: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['always', 'silent', 'never'],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.always', 'Always reveals the terminal when this task is executed.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.silent', 'Only reveals the terminal if the task exits with an error.'),\n\t\t\t\tnls.localize('JsonSchema.tasks.presentation.reveal.never', 'Never reveals the terminal when this task is executed.'),\n\t\t\t],\n\t\t\tdefault: 'always',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.reveals', 'Controls whether the panel running the task is revealed or not. Default is \\\"always\\\".')\n\t\t},\n\t\tpanel: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['shared', 'dedicated', 'new'],\n\t\t\tdefault: 'shared',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.instance', 'Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.')\n\t\t},\n\t\tshowReuseMessage: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.showReuseMessage', 'Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.')\n\t\t},\n\t\tclear: {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.clear', 'Controls whether the terminal is cleared before executing the task.')\n\t\t},\n\t\tgroup: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.presentation.group', 'Controls whether the task is executed in a specific terminal group using split panes.')\n\t\t},\n\t}\n};\n\nconst terminal: IJSONSchema = Objects.deepClone(presentation);\nterminal.deprecationMessage = nls.localize('JsonSchema.tasks.terminal', 'The terminal property is deprecated. Use presentation instead');\n\nconst group: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'string',\n\t\t},\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tkind: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'none',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.group.kind', 'The task\\'s execution group.')\n\t\t\t\t},\n\t\t\t\tisDefault: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t\tdescription: nls.localize('JsonSchema.tasks.group.isDefault', 'Defines if this task is the default task in the group.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t],\n\tenum: [\n\t\t{ kind: 'build', isDefault: true },\n\t\t{ kind: 'test', isDefault: true },\n\t\t'build',\n\t\t'test',\n\t\t'none'\n\t],\n\tenumDescriptions: [\n\t\tnls.localize('JsonSchema.tasks.group.defaultBuild', 'Marks the task as the default build task.'),\n\t\tnls.localize('JsonSchema.tasks.group.defaultTest', 'Marks the task as the default test task.'),\n\t\tnls.localize('JsonSchema.tasks.group.build', 'Marks the task as a build task accessible through the \\'Run Build Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.test', 'Marks the task as a test task accessible through the \\'Run Test Task\\' command.'),\n\t\tnls.localize('JsonSchema.tasks.group.none', 'Assigns the task to no group')\n\t],\n\tdescription: nls.localize('JsonSchema.tasks.group', 'Defines to which execution group this task belongs to. It supports \"build\" to add it to the build group and \"test\" to add it to the test group.')\n};\n\nconst taskType: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['shell'],\n\tdefault: 'shell',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\n\nconst command: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t},\n\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttype: 'object',\n\t\t\trequired: ['value', 'quoting'],\n\t\t\tproperties: {\n\t\t\t\tvalue: {\n\t\t\t\t\toneOf: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.commandArray', 'The shell command to be executed. Array items will be joined using a space character')\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotedString.value', 'The actual command value')\n\t\t\t\t},\n\t\t\t\tquoting: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t],\n\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\tdescription: nls.localize('JsonSchema.command.quotesString.quote', 'How the command value should be quoted.')\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t],\n\tdescription: nls.localize('JsonSchema.command', 'The command to be executed. Can be an external program or a shell command.')\n};\n\nconst args: IJSONSchema = {\n\ttype: 'array',\n\titems: {\n\t\toneOf: [\n\t\t\t{\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['value', 'quoting'],\n\t\t\t\tproperties: {\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotedString.value', 'The actual argument value')\n\t\t\t\t\t},\n\t\t\t\t\tquoting: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tenum: ['escape', 'strong', 'weak'],\n\t\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.escape', 'Escapes characters using the shell\\'s escape character (e.g. ` under PowerShell and \\\\ under bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.strong', 'Quotes the argument using the shell\\'s strong quote character (e.g. \" under PowerShell and bash).'),\n\t\t\t\t\t\t\tnls.localize('JsonSchema.tasks.quoting.weak', 'Quotes the argument using the shell\\'s weak quote character (e.g. \\' under PowerShell and bash).'),\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'strong',\n\t\t\t\t\t\tdescription: nls.localize('JsonSchema.args.quotesString.quote', 'How the argument value should be quoted.')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t]\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.args', 'Arguments passed to the command when this task is invoked.')\n};\n\nconst label: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.label', \"The task's user interface label\")\n};\n\nconst version: IJSONSchema = {\n\ttype: 'string',\n\tenum: ['2.0.0'],\n\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number.')\n};\n\nconst identifier: IJSONSchema = {\n\ttype: 'string',\n\tdescription: nls.localize('JsonSchema.tasks.identifier', 'A user defined identifier to reference the task in launch.json or a dependsOn clause.'),\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.identifier.deprecated', 'User defined identifiers are deprecated. For custom task use the name as a reference and for tasks provided by extensions use their defined task identifier.')\n};\n\nconst runOptions: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\treevaluateOnRerun: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.reevaluateOnRerun', 'Whether to reevaluate task variables on rerun.'),\n\t\t\tdefault: true\n\t\t},\n\t\trunOn: {\n\t\t\ttype: 'string',\n\t\t\tenum: ['default', 'folderOpen'],\n\t\t\tdescription: nls.localize('JsonSchema.tasks.runOn', 'Configures when the task should be run. If set to folderOpen, then the task will be run automatically when the folder is opened.'),\n\t\t\tdefault: 'default'\n\t\t},\n\t},\n\tdescription: nls.localize('JsonSchema.tasks.runOptions', 'The task\\'s run related options')\n};\n\nconst commonSchemaDefinitions = commonSchema.definitions!;\nconst options: IJSONSchema = Objects.deepClone(commonSchemaDefinitions.options);\nconst optionsProperties = options.properties!;\noptionsProperties.shell = Objects.deepClone(commonSchemaDefinitions.shellConfiguration);\n\nlet taskConfiguration: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\tlabel: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskLabel', \"The task's label\")\n\t\t},\n\t\ttaskName: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.taskName', 'The task\\'s name'),\n\t\t\tdeprecationMessage: nls.localize('JsonSchema.tasks.taskName.deprecated', 'The task\\'s name property is deprecated. Use the label property instead.')\n\t\t},\n\t\tidentifier: Objects.deepClone(identifier),\n\t\tgroup: Objects.deepClone(group),\n\t\tisBackground: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.background', 'Whether the executed task is kept alive and is running in the background.'),\n\t\t\tdefault: true\n\t\t},\n\t\tpromptOnClose: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.promptOnClose', 'Whether the user is prompted when VS Code closes with a running task.'),\n\t\t\tdefault: false\n\t\t},\n\t\tpresentation: Objects.deepClone(presentation),\n\t\toptions: options,\n\t\tproblemMatcher: {\n\t\t\t$ref: '#/definitions/problemMatcherType',\n\t\t\tdescription: nls.localize('JsonSchema.tasks.matchers', 'The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.')\n\t\t},\n\t\trunOptions: Objects.deepClone(runOptions),\n\t\tdependsOn: Objects.deepClone(dependsOn),\n\t}\n};\n\nlet taskDefinitions: IJSONSchema[] = [];\nTaskDefinitionRegistry.onReady().then(() => {\n\tfor (let taskType of TaskDefinitionRegistry.all()) {\n\t\tlet schema: IJSONSchema = Objects.deepClone(taskConfiguration);\n\t\tconst schemaProperties = schema.properties!;\n\t\t// Since we do this after the schema is assigned we need to patch the refs.\n\t\tschemaProperties.type = {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('JsonSchema.customizations.customizes.type', 'The task type to customize'),\n\t\t\tenum: [taskType.taskType]\n\t\t};\n\t\tif (taskType.required) {\n\t\t\tschema.required = taskType.required.slice();\n\t\t} else {\n\t\t\tschema.required = [];\n\t\t}\n\t\t// Customized tasks require that the task type be set.\n\t\tschema.required.push('type');\n\t\tif (taskType.properties) {\n\t\t\tfor (let key of Object.keys(taskType.properties)) {\n\t\t\t\tlet property = taskType.properties[key];\n\t\t\t\tschemaProperties[key] = Objects.deepClone(property);\n\t\t\t}\n\t\t}\n\t\tfixReferences(schema);\n\t\ttaskDefinitions.push(schema);\n\t}\n});\n\nlet customize = Objects.deepClone(taskConfiguration);\ncustomize.properties!.customize = {\n\ttype: 'string',\n\tdeprecationMessage: nls.localize('JsonSchema.tasks.customize.deprecated', 'The customize property is deprecated. See the 1.14 release notes on how to migrate to the new task customization approach')\n};\nif (!customize.required) {\n\tcustomize.required = [];\n}\ncustomize.required.push('customize');\ntaskDefinitions.push(customize);\n\nlet definitions = Objects.deepClone(commonSchemaDefinitions);\nlet taskDescription: IJSONSchema = definitions.taskDescription;\ntaskDescription.required = ['label'];\nconst taskDescriptionProperties = taskDescription.properties!;\ntaskDescriptionProperties.label = Objects.deepClone(label);\ntaskDescriptionProperties.command = Objects.deepClone(command);\ntaskDescriptionProperties.args = Objects.deepClone(args);\ntaskDescriptionProperties.isShellCommand = Objects.deepClone(shellCommand);\ntaskDescriptionProperties.dependsOn = dependsOn;\ntaskDescriptionProperties.identifier = Objects.deepClone(identifier);\ntaskDescriptionProperties.type = Objects.deepClone(taskType);\ntaskDescriptionProperties.presentation = Objects.deepClone(presentation);\ntaskDescriptionProperties.terminal = terminal;\ntaskDescriptionProperties.group = Objects.deepClone(group);\ntaskDescriptionProperties.runOptions = Objects.deepClone(runOptions);\ntaskDescriptionProperties.taskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskName.deprecated',\n\t'The task\\'s name property is deprecated. Use the label property instead.'\n);\ntaskDescription.default = {\n\tlabel: 'My Task',\n\ttype: 'shell',\n\tcommand: 'echo Hello',\n\tproblemMatcher: []\n};\ndefinitions.showOutputType.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.showOputput.deprecated',\n\t'The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.echoCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.echoCommand.deprecated',\n\t'The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isBuildCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isBuildCommand.deprecated',\n\t'The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\ntaskDescriptionProperties.isTestCommand.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.isTestCommand.deprecated',\n\t'The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.'\n);\n\n// Process tasks are almost identical schema-wise to shell tasks, but they are required to have a command\nconst processTask = Objects.deepClone(taskDescription);\nprocessTask.properties!.type = {\n\ttype: 'string',\n\tenum: ['process'],\n\tdefault: 'shell',\n\tdescription: nls.localize('JsonSchema.tasks.type', 'Defines whether the task is run as a process or as a command inside a shell.')\n};\nprocessTask.required!.push('command');\nprocessTask.required!.push('type');\n\ntaskDefinitions.push(processTask);\n\ntaskDefinitions.push({\n\t$ref: '#/definitions/taskDescription'\n} as IJSONSchema);\n\nconst definitionsTaskRunnerConfigurationProperties = definitions.taskRunnerConfiguration.properties!;\nlet tasks = definitionsTaskRunnerConfigurationProperties.tasks;\ntasks.items = {\n\toneOf: taskDefinitions\n};\n\ndefinitionsTaskRunnerConfigurationProperties.inputs = inputsSchema.definitions!.inputs;\n\ndefinitions.commandConfiguration.properties!.isShellCommand = Objects.deepClone(shellCommand);\ndefinitions.options.properties!.shell = {\n\t$ref: '#/definitions/shellConfiguration'\n};\n\ndefinitionsTaskRunnerConfigurationProperties.isShellCommand = Objects.deepClone(shellCommand);\ndefinitionsTaskRunnerConfigurationProperties.type = Objects.deepClone(taskType);\ndefinitionsTaskRunnerConfigurationProperties.group = Objects.deepClone(group);\ndefinitionsTaskRunnerConfigurationProperties.presentation = Objects.deepClone(presentation);\ndefinitionsTaskRunnerConfigurationProperties.suppressTaskName.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.suppressTaskName.deprecated',\n\t'The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\ndefinitionsTaskRunnerConfigurationProperties.taskSelector.deprecationMessage = nls.localize(\n\t'JsonSchema.tasks.taskSelector.deprecated',\n\t'The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.'\n);\n\nlet osSpecificTaskRunnerConfiguration = Objects.deepClone(definitions.taskRunnerConfiguration);\ndelete osSpecificTaskRunnerConfiguration.properties!.tasks;\nosSpecificTaskRunnerConfiguration.additionalProperties = false;\ndefinitions.osSpecificTaskRunnerConfiguration = osSpecificTaskRunnerConfiguration;\ndefinitionsTaskRunnerConfigurationProperties.version = Objects.deepClone(version);\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\t'allOf': [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: Objects.deepClone(version),\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t'$ref': '#/definitions/osSpecificTaskRunnerConfiguration',\n\t\t\t\t\t\t\t'description': nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nschema.definitions = definitions;\n\nfunction deprecatedVariableMessage(schemaMap: IJSONSchemaMap, property: string) {\n\tconst mapAtProperty = schemaMap[property].properties!;\n\tif (mapAtProperty) {\n\t\tObject.keys(mapAtProperty).forEach(name => {\n\t\t\tdeprecatedVariableMessage(mapAtProperty, name);\n\t\t});\n\t} else {\n\t\tConfigurationResolverUtils.applyDeprecatedVariableMessage(schemaMap[property]);\n\t}\n}\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tlet newKey = key + '2';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n\tdeprecatedVariableMessage(definitions, newKey);\n});\nfixReferences(schema);\n\nexport function updateProblemMatchers() {\n\ttry {\n\t\tlet matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType2.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType2.oneOf![2].items as IJSONSchema).anyOf![1].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n}\n\nProblemMatcherRegistry.onReady().then(() => {\n\tupdateProblemMatchers();\n});\n\nexport default schema;\n"]}]}