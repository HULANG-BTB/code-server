{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostProgress.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostProgress.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\ndefine([\"require\", \"exports\", \"./extHostTypeConverters\", \"vs/platform/progress/common/progress\", \"vs/nls\", \"vs/base/common/cancellation\", \"vs/base/common/decorators\"], function (require, exports, extHostTypeConverters_1, progress_1, nls_1, cancellation_1, decorators_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostProgress {\n        constructor(proxy) {\n            this._handles = 0;\n            this._mapHandleToCancellationSource = new Map();\n            this._proxy = proxy;\n        }\n        withProgress(extension, options, task) {\n            const handle = this._handles++;\n            const { title, location, cancellable } = options;\n            const source = nls_1.localize('extensionSource', \"{0} (Extension)\", extension.displayName || extension.name);\n            this._proxy.$startProgress(handle, { location: extHostTypeConverters_1.ProgressLocation.from(location), title, source, cancellable });\n            return this._withProgress(handle, task, !!cancellable);\n        }\n        _withProgress(handle, task, cancellable) {\n            let source;\n            if (cancellable) {\n                source = new cancellation_1.CancellationTokenSource();\n                this._mapHandleToCancellationSource.set(handle, source);\n            }\n            const progressEnd = (handle) => {\n                this._proxy.$progressEnd(handle);\n                this._mapHandleToCancellationSource.delete(handle);\n                if (source) {\n                    source.dispose();\n                }\n            };\n            let p;\n            try {\n                p = task(new ProgressCallback(this._proxy, handle), cancellable && source ? source.token : cancellation_1.CancellationToken.None);\n            }\n            catch (err) {\n                progressEnd(handle);\n                throw err;\n            }\n            p.then(result => progressEnd(handle), err => progressEnd(handle));\n            return p;\n        }\n        $acceptProgressCanceled(handle) {\n            const source = this._mapHandleToCancellationSource.get(handle);\n            if (source) {\n                source.cancel();\n                this._mapHandleToCancellationSource.delete(handle);\n            }\n        }\n    }\n    exports.ExtHostProgress = ExtHostProgress;\n    function mergeProgress(result, currentValue) {\n        result.message = currentValue.message;\n        if (typeof currentValue.increment === 'number') {\n            if (typeof result.increment === 'number') {\n                result.increment += currentValue.increment;\n            }\n            else {\n                result.increment = currentValue.increment;\n            }\n        }\n        return result;\n    }\n    class ProgressCallback extends progress_1.Progress {\n        constructor(_proxy, _handle) {\n            super(p => this.throttledReport(p));\n            this._proxy = _proxy;\n            this._handle = _handle;\n        }\n        throttledReport(p) {\n            this._proxy.$progressReport(this._handle, p);\n        }\n    }\n    __decorate([\n        decorators_1.debounce(100, (result, currentValue) => mergeProgress(result, currentValue), () => Object.create(null))\n    ], ProgressCallback.prototype, \"throttledReport\", null);\n});\n",null]}