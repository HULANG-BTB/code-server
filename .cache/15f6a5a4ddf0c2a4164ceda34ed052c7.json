{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/node/experimentService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/node/experimentService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar request_1 = require(\"vs/platform/request/node/request\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar lifecycle_2 = require(\"vs/base/common/lifecycle\");\nvar glob_1 = require(\"vs/base/common/glob\");\nvar request_2 = require(\"vs/base/node/request\");\nvar event_1 = require(\"vs/base/common/event\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar workspaceStats_1 = require(\"vs/workbench/contrib/stats/node/workspaceStats\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar workbenchCommonProperties_1 = require(\"vs/platform/telemetry/node/workbenchCommonProperties\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar ExperimentState;\n(function (ExperimentState) {\n    ExperimentState[ExperimentState[\"Evaluating\"] = 0] = \"Evaluating\";\n    ExperimentState[ExperimentState[\"NoRun\"] = 1] = \"NoRun\";\n    ExperimentState[ExperimentState[\"Run\"] = 2] = \"Run\";\n    ExperimentState[ExperimentState[\"Complete\"] = 3] = \"Complete\";\n})(ExperimentState = exports.ExperimentState || (exports.ExperimentState = {}));\nvar ExperimentActionType;\n(function (ExperimentActionType) {\n    ExperimentActionType[\"Custom\"] = \"Custom\";\n    ExperimentActionType[\"Prompt\"] = \"Prompt\";\n    ExperimentActionType[\"AddToRecommendations\"] = \"AddToRecommendations\";\n    ExperimentActionType[\"ExtensionSearchResults\"] = \"ExtensionSearchResults\";\n})(ExperimentActionType = exports.ExperimentActionType || (exports.ExperimentActionType = {}));\nexports.IExperimentService = instantiation_1.createDecorator('experimentService');\nvar ExperimentService = /** @class */ (function (_super) {\n    tslib_1.__extends(ExperimentService, _super);\n    function ExperimentService(storageService, extensionManagementService, textFileService, environmentService, telemetryService, lifecycleService, requestService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.storageService = storageService;\n        _this.extensionManagementService = extensionManagementService;\n        _this.textFileService = textFileService;\n        _this.environmentService = environmentService;\n        _this.telemetryService = telemetryService;\n        _this.lifecycleService = lifecycleService;\n        _this.requestService = requestService;\n        _this.configurationService = configurationService;\n        _this._experiments = [];\n        _this._curatedMapping = Object.create(null);\n        _this._disposables = [];\n        _this._onExperimentEnabled = new event_1.Emitter();\n        _this.onExperimentEnabled = _this._onExperimentEnabled.event;\n        _this._loadExperimentsPromise = Promise.resolve(_this.lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually)).then(function () { return _this.loadExperiments(); });\n        return _this;\n    }\n    ExperimentService.prototype.getExperimentById = function (id) {\n        var _this = this;\n        return this._loadExperimentsPromise.then(function () {\n            return _this._experiments.filter(function (x) { return x.id === id; })[0];\n        });\n    };\n    ExperimentService.prototype.getExperimentsByType = function (type) {\n        var _this = this;\n        return this._loadExperimentsPromise.then(function () {\n            if (type === ExperimentActionType.Custom) {\n                return _this._experiments.filter(function (x) { return x.enabled && (!x.action || x.action.type === type); });\n            }\n            return _this._experiments.filter(function (x) { return x.enabled && x.action && x.action.type === type; });\n        });\n    };\n    ExperimentService.prototype.getCuratedExtensionsList = function (curatedExtensionsKey) {\n        var _this = this;\n        return this._loadExperimentsPromise.then(function () {\n            for (var _i = 0, _a = _this._experiments; _i < _a.length; _i++) {\n                var experiment = _a[_i];\n                if (experiment.enabled\n                    && experiment.state === ExperimentState.Run\n                    && _this._curatedMapping[experiment.id]\n                    && _this._curatedMapping[experiment.id].curatedExtensionsKey === curatedExtensionsKey) {\n                    return _this._curatedMapping[experiment.id].curatedExtensionsList;\n                }\n            }\n            return [];\n        });\n    };\n    ExperimentService.prototype.markAsCompleted = function (experimentId) {\n        var storageKey = 'experiments.' + experimentId;\n        var experimentState = safeParse(this.storageService.get(storageKey, storage_1.StorageScope.GLOBAL), {});\n        experimentState.state = ExperimentState.Complete;\n        this.storageService.store(storageKey, JSON.stringify(experimentState), storage_1.StorageScope.GLOBAL);\n    };\n    ExperimentService.prototype.getExperiments = function () {\n        if (!product_1.default.experimentsUrl || this.configurationService.getValue('workbench.enableExperiments') === false) {\n            return Promise.resolve([]);\n        }\n        return this.requestService.request({ type: 'GET', url: product_1.default.experimentsUrl }, cancellation_1.CancellationToken.None).then(function (context) {\n            if (context.res.statusCode !== 200) {\n                return Promise.resolve(null);\n            }\n            return request_2.asJson(context).then(function (result) {\n                return result && Array.isArray(result['experiments']) ? result['experiments'] : [];\n            });\n        }, function () { return Promise.resolve(null); });\n    };\n    ExperimentService.prototype.loadExperiments = function () {\n        var _this = this;\n        return this.getExperiments().then(function (rawExperiments) {\n            // Offline mode\n            if (!rawExperiments) {\n                var allExperimentIdsFromStorage_1 = safeParse(_this.storageService.get('allExperiments', storage_1.StorageScope.GLOBAL), []);\n                if (Array.isArray(allExperimentIdsFromStorage_1)) {\n                    allExperimentIdsFromStorage_1.forEach(function (experimentId) {\n                        var storageKey = 'experiments.' + experimentId;\n                        var experimentState = safeParse(_this.storageService.get(storageKey, storage_1.StorageScope.GLOBAL), null);\n                        if (experimentState) {\n                            _this._experiments.push({\n                                id: experimentId,\n                                enabled: experimentState.enabled,\n                                state: experimentState.state\n                            });\n                        }\n                    });\n                }\n                return Promise.resolve(null);\n            }\n            // Clear disbaled/deleted experiments from storage\n            var allExperimentIdsFromStorage = safeParse(_this.storageService.get('allExperiments', storage_1.StorageScope.GLOBAL), []);\n            var enabledExperiments = rawExperiments.filter(function (experiment) { return !!experiment.enabled; }).map(function (experiment) { return experiment.id.toLowerCase(); });\n            if (Array.isArray(allExperimentIdsFromStorage)) {\n                allExperimentIdsFromStorage.forEach(function (experiment) {\n                    if (enabledExperiments.indexOf(experiment) === -1) {\n                        _this.storageService.remove(\"experiments.\" + experiment, storage_1.StorageScope.GLOBAL);\n                    }\n                });\n            }\n            if (enabledExperiments.length) {\n                _this.storageService.store('allExperiments', JSON.stringify(enabledExperiments), storage_1.StorageScope.GLOBAL);\n            }\n            else {\n                _this.storageService.remove('allExperiments', storage_1.StorageScope.GLOBAL);\n            }\n            var promises = rawExperiments.map(function (experiment) {\n                var processedExperiment = {\n                    id: experiment.id,\n                    enabled: !!experiment.enabled,\n                    state: !!experiment.enabled ? ExperimentState.Evaluating : ExperimentState.NoRun\n                };\n                if (experiment.action) {\n                    processedExperiment.action = {\n                        type: ExperimentActionType[experiment.action.type] || ExperimentActionType.Custom,\n                        properties: experiment.action.properties\n                    };\n                    if (processedExperiment.action.type === ExperimentActionType.Prompt) {\n                        (processedExperiment.action.properties.commands || []).forEach(function (x) {\n                            if (x.curatedExtensionsKey && Array.isArray(x.curatedExtensionsList)) {\n                                _this._curatedMapping[experiment.id] = x;\n                            }\n                        });\n                    }\n                    if (!processedExperiment.action.properties) {\n                        processedExperiment.action.properties = {};\n                    }\n                }\n                _this._experiments.push(processedExperiment);\n                if (!processedExperiment.enabled) {\n                    return Promise.resolve(null);\n                }\n                var storageKey = 'experiments.' + experiment.id;\n                var experimentState = safeParse(_this.storageService.get(storageKey, storage_1.StorageScope.GLOBAL), {});\n                if (!experimentState.hasOwnProperty('enabled')) {\n                    experimentState.enabled = processedExperiment.enabled;\n                }\n                if (!experimentState.hasOwnProperty('state')) {\n                    experimentState.state = processedExperiment.enabled ? ExperimentState.Evaluating : ExperimentState.NoRun;\n                }\n                else {\n                    processedExperiment.state = experimentState.state;\n                }\n                return _this.shouldRunExperiment(experiment, processedExperiment).then(function (state) {\n                    experimentState.state = processedExperiment.state = state;\n                    _this.storageService.store(storageKey, JSON.stringify(experimentState), storage_1.StorageScope.GLOBAL);\n                    if (state === ExperimentState.Run) {\n                        _this.fireRunExperiment(processedExperiment);\n                    }\n                    return Promise.resolve(null);\n                });\n            });\n            return Promise.all(promises).then(function () {\n                /* __GDPR__\n                    \"experiments\" : {\n                        \"experiments\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                _this.telemetryService.publicLog('experiments', { experiments: _this._experiments });\n            });\n        });\n    };\n    ExperimentService.prototype.fireRunExperiment = function (experiment) {\n        this._onExperimentEnabled.fire(experiment);\n        var runExperimentIdsFromStorage = safeParse(this.storageService.get('currentOrPreviouslyRunExperiments', storage_1.StorageScope.GLOBAL), []);\n        if (runExperimentIdsFromStorage.indexOf(experiment.id) === -1) {\n            runExperimentIdsFromStorage.push(experiment.id);\n        }\n        // Ensure we dont store duplicates\n        var distinctExperiments = arrays_1.distinct(runExperimentIdsFromStorage);\n        if (runExperimentIdsFromStorage.length !== distinctExperiments.length) {\n            this.storageService.store('currentOrPreviouslyRunExperiments', JSON.stringify(distinctExperiments), storage_1.StorageScope.GLOBAL);\n        }\n    };\n    ExperimentService.prototype.checkExperimentDependencies = function (experiment) {\n        var experimentsPreviouslyRun = experiment.condition ? experiment.condition.experimentsPreviouslyRun : undefined;\n        if (experimentsPreviouslyRun) {\n            var runExperimentIdsFromStorage = safeParse(this.storageService.get('currentOrPreviouslyRunExperiments', storage_1.StorageScope.GLOBAL), []);\n            var includeCheck = true;\n            var excludeCheck = true;\n            var includes_1 = experimentsPreviouslyRun.includes;\n            if (Array.isArray(includes_1)) {\n                includeCheck = runExperimentIdsFromStorage.some(function (x) { return includes_1.indexOf(x) > -1; });\n            }\n            var excludes_1 = experimentsPreviouslyRun.excludes;\n            if (includeCheck && Array.isArray(excludes_1)) {\n                excludeCheck = !runExperimentIdsFromStorage.some(function (x) { return excludes_1.indexOf(x) > -1; });\n            }\n            if (!includeCheck || !excludeCheck) {\n                return false;\n            }\n        }\n        return true;\n    };\n    ExperimentService.prototype.shouldRunExperiment = function (experiment, processedExperiment) {\n        var _this = this;\n        if (processedExperiment.state !== ExperimentState.Evaluating) {\n            return Promise.resolve(processedExperiment.state);\n        }\n        if (!experiment.enabled) {\n            return Promise.resolve(ExperimentState.NoRun);\n        }\n        var condition = experiment.condition;\n        if (!condition) {\n            return Promise.resolve(ExperimentState.Run);\n        }\n        if (!this.checkExperimentDependencies(experiment)) {\n            return Promise.resolve(ExperimentState.NoRun);\n        }\n        if (this.environmentService.appQuality === 'stable' && condition.insidersOnly === true) {\n            return Promise.resolve(ExperimentState.NoRun);\n        }\n        var isNewUser = !this.storageService.get(workbenchCommonProperties_1.lastSessionDateStorageKey, storage_1.StorageScope.GLOBAL);\n        if ((condition.newUser === true && !isNewUser)\n            || (condition.newUser === false && isNewUser)) {\n            return Promise.resolve(ExperimentState.NoRun);\n        }\n        if (typeof condition.displayLanguage === 'string') {\n            var localeToCheck = condition.displayLanguage.toLowerCase();\n            var displayLanguage = platform_1.language.toLowerCase();\n            if (localeToCheck !== displayLanguage) {\n                var a = displayLanguage.indexOf('-');\n                var b = localeToCheck.indexOf('-');\n                if (a > -1) {\n                    displayLanguage = displayLanguage.substr(0, a);\n                }\n                if (b > -1) {\n                    localeToCheck = localeToCheck.substr(0, b);\n                }\n                if (displayLanguage !== localeToCheck) {\n                    return Promise.resolve(ExperimentState.NoRun);\n                }\n            }\n        }\n        if (!condition.userProbability) {\n            condition.userProbability = 1;\n        }\n        var extensionsCheckPromise = Promise.resolve(true);\n        var installedExtensions = condition.installedExtensions;\n        if (installedExtensions) {\n            extensionsCheckPromise = this.extensionManagementService.getInstalled(extensions_1.ExtensionType.User).then(function (locals) {\n                var includesCheck = true;\n                var excludesCheck = true;\n                var localExtensions = locals.map(function (local) { return local.manifest.publisher.toLowerCase() + \".\" + local.manifest.name.toLowerCase(); });\n                if (Array.isArray(installedExtensions.includes) && installedExtensions.includes.length) {\n                    var extensionIncludes_1 = installedExtensions.includes.map(function (e) { return e.toLowerCase(); });\n                    includesCheck = localExtensions.some(function (e) { return extensionIncludes_1.indexOf(e) > -1; });\n                }\n                if (Array.isArray(installedExtensions.excludes) && installedExtensions.excludes.length) {\n                    var extensionExcludes_1 = installedExtensions.excludes.map(function (e) { return e.toLowerCase(); });\n                    excludesCheck = !localExtensions.some(function (e) { return extensionExcludes_1.indexOf(e) > -1; });\n                }\n                return includesCheck && excludesCheck;\n            });\n        }\n        var storageKey = 'experiments.' + experiment.id;\n        var experimentState = safeParse(this.storageService.get(storageKey, storage_1.StorageScope.GLOBAL), {});\n        return extensionsCheckPromise.then(function (success) {\n            var fileEdits = condition.fileEdits;\n            if (!success || !fileEdits || typeof fileEdits.minEditCount !== 'number') {\n                var runExperiment = success && typeof condition.userProbability === 'number' && Math.random() < condition.userProbability;\n                return runExperiment ? ExperimentState.Run : ExperimentState.NoRun;\n            }\n            experimentState.editCount = experimentState.editCount || 0;\n            if (experimentState.editCount >= fileEdits.minEditCount) {\n                return ExperimentState.Run;\n            }\n            var onSaveHandler = _this.textFileService.models.onModelsSaved(function (e) {\n                var date = new Date().toDateString();\n                var latestExperimentState = safeParse(_this.storageService.get(storageKey, storage_1.StorageScope.GLOBAL), {});\n                if (latestExperimentState.state !== ExperimentState.Evaluating) {\n                    onSaveHandler.dispose();\n                    return;\n                }\n                e.forEach(function (event) {\n                    if (event.kind !== textfiles_1.StateChange.SAVED\n                        || latestExperimentState.state !== ExperimentState.Evaluating\n                        || date === latestExperimentState.lastEditedDate\n                        || (typeof latestExperimentState.editCount === 'number' && latestExperimentState.editCount >= fileEdits.minEditCount)) {\n                        return;\n                    }\n                    var filePathCheck = true;\n                    var workspaceCheck = true;\n                    if (typeof fileEdits.filePathPattern === 'string') {\n                        filePathCheck = glob_1.match(fileEdits.filePathPattern, event.resource.fsPath);\n                    }\n                    if (Array.isArray(fileEdits.workspaceIncludes) && fileEdits.workspaceIncludes.length) {\n                        workspaceCheck = !!workspaceStats_1.WorkspaceStats.TAGS && fileEdits.workspaceIncludes.some(function (x) { return !!workspaceStats_1.WorkspaceStats.TAGS[x]; });\n                    }\n                    if (workspaceCheck && Array.isArray(fileEdits.workspaceExcludes) && fileEdits.workspaceExcludes.length) {\n                        workspaceCheck = !!workspaceStats_1.WorkspaceStats.TAGS && !fileEdits.workspaceExcludes.some(function (x) { return !!workspaceStats_1.WorkspaceStats.TAGS[x]; });\n                    }\n                    if (filePathCheck && workspaceCheck) {\n                        latestExperimentState.editCount = (latestExperimentState.editCount || 0) + 1;\n                        latestExperimentState.lastEditedDate = date;\n                        _this.storageService.store(storageKey, JSON.stringify(latestExperimentState), storage_1.StorageScope.GLOBAL);\n                    }\n                });\n                if (typeof latestExperimentState.editCount === 'number' && latestExperimentState.editCount >= fileEdits.minEditCount) {\n                    processedExperiment.state = latestExperimentState.state = (typeof condition.userProbability === 'number' && Math.random() < condition.userProbability && _this.checkExperimentDependencies(experiment)) ? ExperimentState.Run : ExperimentState.NoRun;\n                    _this.storageService.store(storageKey, JSON.stringify(latestExperimentState), storage_1.StorageScope.GLOBAL);\n                    if (latestExperimentState.state === ExperimentState.Run && experiment.action && ExperimentActionType[experiment.action.type] === ExperimentActionType.Prompt) {\n                        _this.fireRunExperiment(processedExperiment);\n                    }\n                }\n            });\n            _this._disposables.push(onSaveHandler);\n            return ExperimentState.Evaluating;\n        });\n    };\n    ExperimentService.prototype.dispose = function () {\n        this._disposables = lifecycle_2.dispose(this._disposables);\n    };\n    ExperimentService = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(2, textfiles_1.ITextFileService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, telemetry_1.ITelemetryService),\n        tslib_1.__param(5, lifecycle_1.ILifecycleService),\n        tslib_1.__param(6, request_1.IRequestService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], ExperimentService);\n    return ExperimentService;\n}(lifecycle_2.Disposable));\nexports.ExperimentService = ExperimentService;\nfunction safeParse(text, defaultObject) {\n    try {\n        return text ? JSON.parse(text) || defaultObject : defaultObject;\n    }\n    catch (e) {\n        return defaultObject;\n    }\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/node/experimentService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/node/experimentService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport product from 'vs/platform/product/node/product';\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IRequestService } from 'vs/platform/request/node/request';\nimport { language } from 'vs/base/common/platform';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { match } from 'vs/base/common/glob';\nimport { asJson } from 'vs/base/node/request';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ITextFileService, StateChange } from 'vs/workbench/services/textfile/common/textfiles';\nimport { WorkspaceStats } from 'vs/workbench/contrib/stats/node/workspaceStats';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { distinct } from 'vs/base/common/arrays';\nimport { lastSessionDateStorageKey } from 'vs/platform/telemetry/node/workbenchCommonProperties';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\n\ninterface IExperimentStorageState {\n\tenabled: boolean;\n\tstate: ExperimentState;\n\teditCount?: number;\n\tlastEditedDate?: string;\n}\n\nexport const enum ExperimentState {\n\tEvaluating,\n\tNoRun,\n\tRun,\n\tComplete\n}\n\ninterface IRawExperiment {\n\tid: string;\n\tenabled?: boolean;\n\tcondition?: {\n\t\tinsidersOnly?: boolean;\n\t\tnewUser?: boolean;\n\t\tdisplayLanguage?: string;\n\t\tinstalledExtensions?: {\n\t\t\texcludes?: string[];\n\t\t\tincludes?: string[];\n\t\t},\n\t\tfileEdits?: {\n\t\t\tfilePathPattern?: string;\n\t\t\tworkspaceIncludes?: string[];\n\t\t\tworkspaceExcludes?: string[];\n\t\t\tminEditCount: number;\n\t\t},\n\t\texperimentsPreviouslyRun?: {\n\t\t\texcludes?: string[];\n\t\t\tincludes?: string[];\n\t\t}\n\t\tuserProbability?: number;\n\t};\n\taction?: IExperimentAction;\n}\n\ninterface IExperimentAction {\n\ttype: ExperimentActionType;\n\tproperties: any;\n}\n\nexport enum ExperimentActionType {\n\tCustom = 'Custom',\n\tPrompt = 'Prompt',\n\tAddToRecommendations = 'AddToRecommendations',\n\tExtensionSearchResults = 'ExtensionSearchResults'\n}\n\nexport interface IExperimentActionPromptProperties {\n\tpromptText: string | { [key: string]: string };\n\tcommands: IExperimentActionPromptCommand[];\n}\n\nexport interface IExperimentActionPromptCommand {\n\ttext: string | { [key: string]: string };\n\texternalLink?: string;\n\tcuratedExtensionsKey?: string;\n\tcuratedExtensionsList?: string[];\n}\n\nexport interface IExperiment {\n\tid: string;\n\tenabled: boolean;\n\tstate: ExperimentState;\n\taction?: IExperimentAction;\n}\n\nexport interface IExperimentService {\n\t_serviceBrand: any;\n\tgetExperimentById(id: string): Promise<IExperiment>;\n\tgetExperimentsByType(type: ExperimentActionType): Promise<IExperiment[]>;\n\tgetCuratedExtensionsList(curatedExtensionsKey: string): Promise<string[]>;\n\tmarkAsCompleted(experimentId: string): void;\n\n\tonExperimentEnabled: Event<IExperiment>;\n}\n\nexport const IExperimentService = createDecorator<IExperimentService>('experimentService');\n\nexport class ExperimentService extends Disposable implements IExperimentService {\n\t_serviceBrand: any;\n\tprivate _experiments: IExperiment[] = [];\n\tprivate _loadExperimentsPromise: Promise<void>;\n\tprivate _curatedMapping = Object.create(null);\n\tprivate _disposables: IDisposable[] = [];\n\n\tprivate readonly _onExperimentEnabled = new Emitter<IExperiment>();\n\n\tonExperimentEnabled: Event<IExperiment> = this._onExperimentEnabled.event;\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._loadExperimentsPromise = Promise.resolve(this.lifecycleService.when(LifecyclePhase.Eventually)).then(() => this.loadExperiments());\n\t}\n\n\tpublic getExperimentById(id: string): Promise<IExperiment> {\n\t\treturn this._loadExperimentsPromise.then(() => {\n\t\t\treturn this._experiments.filter(x => x.id === id)[0];\n\t\t});\n\t}\n\n\tpublic getExperimentsByType(type: ExperimentActionType): Promise<IExperiment[]> {\n\t\treturn this._loadExperimentsPromise.then(() => {\n\t\t\tif (type === ExperimentActionType.Custom) {\n\t\t\t\treturn this._experiments.filter(x => x.enabled && (!x.action || x.action.type === type));\n\t\t\t}\n\t\t\treturn this._experiments.filter(x => x.enabled && x.action && x.action.type === type);\n\t\t});\n\t}\n\n\tpublic getCuratedExtensionsList(curatedExtensionsKey: string): Promise<string[]> {\n\t\treturn this._loadExperimentsPromise.then(() => {\n\t\t\tfor (const experiment of this._experiments) {\n\t\t\t\tif (experiment.enabled\n\t\t\t\t\t&& experiment.state === ExperimentState.Run\n\t\t\t\t\t&& this._curatedMapping[experiment.id]\n\t\t\t\t\t&& this._curatedMapping[experiment.id].curatedExtensionsKey === curatedExtensionsKey) {\n\t\t\t\t\treturn this._curatedMapping[experiment.id].curatedExtensionsList;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [];\n\t\t});\n\t}\n\n\tpublic markAsCompleted(experimentId: string): void {\n\t\tconst storageKey = 'experiments.' + experimentId;\n\t\tconst experimentState: IExperimentStorageState = safeParse(this.storageService.get(storageKey, StorageScope.GLOBAL), {});\n\t\texperimentState.state = ExperimentState.Complete;\n\t\tthis.storageService.store(storageKey, JSON.stringify(experimentState), StorageScope.GLOBAL);\n\t}\n\n\tprotected getExperiments(): Promise<IRawExperiment[]> {\n\t\tif (!product.experimentsUrl || this.configurationService.getValue('workbench.enableExperiments') === false) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\t\treturn this.requestService.request({ type: 'GET', url: product.experimentsUrl }, CancellationToken.None).then(context => {\n\t\t\tif (context.res.statusCode !== 200) {\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\t\t\treturn asJson(context).then(result => {\n\t\t\t\treturn result && Array.isArray(result['experiments']) ? result['experiments'] : [];\n\t\t\t});\n\t\t}, () => Promise.resolve(null));\n\t}\n\n\tprivate loadExperiments(): Promise<any> {\n\t\treturn this.getExperiments().then(rawExperiments => {\n\t\t\t// Offline mode\n\t\t\tif (!rawExperiments) {\n\t\t\t\tconst allExperimentIdsFromStorage = safeParse(this.storageService.get('allExperiments', StorageScope.GLOBAL), []);\n\t\t\t\tif (Array.isArray(allExperimentIdsFromStorage)) {\n\t\t\t\t\tallExperimentIdsFromStorage.forEach(experimentId => {\n\t\t\t\t\t\tconst storageKey = 'experiments.' + experimentId;\n\t\t\t\t\t\tconst experimentState: IExperimentStorageState = safeParse(this.storageService.get(storageKey, StorageScope.GLOBAL), null);\n\t\t\t\t\t\tif (experimentState) {\n\t\t\t\t\t\t\tthis._experiments.push({\n\t\t\t\t\t\t\t\tid: experimentId,\n\t\t\t\t\t\t\t\tenabled: experimentState.enabled,\n\t\t\t\t\t\t\t\tstate: experimentState.state\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\n\t\t\t// Clear disbaled/deleted experiments from storage\n\t\t\tconst allExperimentIdsFromStorage = safeParse(this.storageService.get('allExperiments', StorageScope.GLOBAL), []);\n\t\t\tconst enabledExperiments = rawExperiments.filter(experiment => !!experiment.enabled).map(experiment => experiment.id.toLowerCase());\n\t\t\tif (Array.isArray(allExperimentIdsFromStorage)) {\n\t\t\t\tallExperimentIdsFromStorage.forEach(experiment => {\n\t\t\t\t\tif (enabledExperiments.indexOf(experiment) === -1) {\n\t\t\t\t\t\tthis.storageService.remove(`experiments.${experiment}`, StorageScope.GLOBAL);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (enabledExperiments.length) {\n\t\t\t\tthis.storageService.store('allExperiments', JSON.stringify(enabledExperiments), StorageScope.GLOBAL);\n\t\t\t} else {\n\t\t\t\tthis.storageService.remove('allExperiments', StorageScope.GLOBAL);\n\t\t\t}\n\n\t\t\tconst promises = rawExperiments.map(experiment => {\n\t\t\t\tconst processedExperiment: IExperiment = {\n\t\t\t\t\tid: experiment.id,\n\t\t\t\t\tenabled: !!experiment.enabled,\n\t\t\t\t\tstate: !!experiment.enabled ? ExperimentState.Evaluating : ExperimentState.NoRun\n\t\t\t\t};\n\n\t\t\t\tif (experiment.action) {\n\t\t\t\t\tprocessedExperiment.action = {\n\t\t\t\t\t\ttype: ExperimentActionType[experiment.action.type] || ExperimentActionType.Custom,\n\t\t\t\t\t\tproperties: experiment.action.properties\n\t\t\t\t\t};\n\t\t\t\t\tif (processedExperiment.action.type === ExperimentActionType.Prompt) {\n\t\t\t\t\t\t((<IExperimentActionPromptProperties>processedExperiment.action.properties).commands || []).forEach(x => {\n\t\t\t\t\t\t\tif (x.curatedExtensionsKey && Array.isArray(x.curatedExtensionsList)) {\n\t\t\t\t\t\t\t\tthis._curatedMapping[experiment.id] = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (!processedExperiment.action.properties) {\n\t\t\t\t\t\tprocessedExperiment.action.properties = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._experiments.push(processedExperiment);\n\n\t\t\t\tif (!processedExperiment.enabled) {\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\n\t\t\t\tconst storageKey = 'experiments.' + experiment.id;\n\t\t\t\tconst experimentState: IExperimentStorageState = safeParse(this.storageService.get(storageKey, StorageScope.GLOBAL), {});\n\t\t\t\tif (!experimentState.hasOwnProperty('enabled')) {\n\t\t\t\t\texperimentState.enabled = processedExperiment.enabled;\n\t\t\t\t}\n\t\t\t\tif (!experimentState.hasOwnProperty('state')) {\n\t\t\t\t\texperimentState.state = processedExperiment.enabled ? ExperimentState.Evaluating : ExperimentState.NoRun;\n\t\t\t\t} else {\n\t\t\t\t\tprocessedExperiment.state = experimentState.state;\n\t\t\t\t}\n\n\t\t\t\treturn this.shouldRunExperiment(experiment, processedExperiment).then((state: ExperimentState) => {\n\t\t\t\t\texperimentState.state = processedExperiment.state = state;\n\t\t\t\t\tthis.storageService.store(storageKey, JSON.stringify(experimentState), StorageScope.GLOBAL);\n\n\t\t\t\t\tif (state === ExperimentState.Run) {\n\t\t\t\t\t\tthis.fireRunExperiment(processedExperiment);\n\t\t\t\t\t}\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t});\n\n\t\t\t});\n\t\t\treturn Promise.all(promises).then(() => {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"experiments\" : {\n\t\t\t\t\t\t\"experiments\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('experiments', { experiments: this._experiments });\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate fireRunExperiment(experiment: IExperiment) {\n\t\tthis._onExperimentEnabled.fire(experiment);\n\t\tconst runExperimentIdsFromStorage: string[] = safeParse(this.storageService.get('currentOrPreviouslyRunExperiments', StorageScope.GLOBAL), []);\n\t\tif (runExperimentIdsFromStorage.indexOf(experiment.id) === -1) {\n\t\t\trunExperimentIdsFromStorage.push(experiment.id);\n\t\t}\n\n\t\t// Ensure we dont store duplicates\n\t\tconst distinctExperiments = distinct(runExperimentIdsFromStorage);\n\t\tif (runExperimentIdsFromStorage.length !== distinctExperiments.length) {\n\t\t\tthis.storageService.store('currentOrPreviouslyRunExperiments', JSON.stringify(distinctExperiments), StorageScope.GLOBAL);\n\t\t}\n\t}\n\n\tprivate checkExperimentDependencies(experiment: IRawExperiment): boolean {\n\t\tconst experimentsPreviouslyRun = experiment.condition ? experiment.condition.experimentsPreviouslyRun : undefined;\n\t\tif (experimentsPreviouslyRun) {\n\t\t\tconst runExperimentIdsFromStorage: string[] = safeParse(this.storageService.get('currentOrPreviouslyRunExperiments', StorageScope.GLOBAL), []);\n\t\t\tlet includeCheck = true;\n\t\t\tlet excludeCheck = true;\n\t\t\tconst includes = experimentsPreviouslyRun.includes;\n\t\t\tif (Array.isArray(includes)) {\n\t\t\t\tincludeCheck = runExperimentIdsFromStorage.some(x => includes.indexOf(x) > -1);\n\t\t\t}\n\t\t\tconst excludes = experimentsPreviouslyRun.excludes;\n\t\t\tif (includeCheck && Array.isArray(excludes)) {\n\t\t\t\texcludeCheck = !runExperimentIdsFromStorage.some(x => excludes.indexOf(x) > -1);\n\t\t\t}\n\t\t\tif (!includeCheck || !excludeCheck) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate shouldRunExperiment(experiment: IRawExperiment, processedExperiment: IExperiment): Promise<ExperimentState> {\n\t\tif (processedExperiment.state !== ExperimentState.Evaluating) {\n\t\t\treturn Promise.resolve(processedExperiment.state);\n\t\t}\n\n\t\tif (!experiment.enabled) {\n\t\t\treturn Promise.resolve(ExperimentState.NoRun);\n\t\t}\n\n\t\tconst condition = experiment.condition;\n\t\tif (!condition) {\n\t\t\treturn Promise.resolve(ExperimentState.Run);\n\t\t}\n\n\t\tif (!this.checkExperimentDependencies(experiment)) {\n\t\t\treturn Promise.resolve(ExperimentState.NoRun);\n\t\t}\n\n\t\tif (this.environmentService.appQuality === 'stable' && condition.insidersOnly === true) {\n\t\t\treturn Promise.resolve(ExperimentState.NoRun);\n\t\t}\n\n\t\tconst isNewUser = !this.storageService.get(lastSessionDateStorageKey, StorageScope.GLOBAL);\n\t\tif ((condition.newUser === true && !isNewUser)\n\t\t\t|| (condition.newUser === false && isNewUser)) {\n\t\t\treturn Promise.resolve(ExperimentState.NoRun);\n\t\t}\n\n\t\tif (typeof condition.displayLanguage === 'string') {\n\t\t\tlet localeToCheck = condition.displayLanguage.toLowerCase();\n\t\t\tlet displayLanguage = language!.toLowerCase();\n\n\t\t\tif (localeToCheck !== displayLanguage) {\n\t\t\t\tconst a = displayLanguage.indexOf('-');\n\t\t\t\tconst b = localeToCheck.indexOf('-');\n\t\t\t\tif (a > -1) {\n\t\t\t\t\tdisplayLanguage = displayLanguage.substr(0, a);\n\t\t\t\t}\n\t\t\t\tif (b > -1) {\n\t\t\t\t\tlocaleToCheck = localeToCheck.substr(0, b);\n\t\t\t\t}\n\t\t\t\tif (displayLanguage !== localeToCheck) {\n\t\t\t\t\treturn Promise.resolve(ExperimentState.NoRun);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!condition.userProbability) {\n\t\t\tcondition.userProbability = 1;\n\t\t}\n\n\t\tlet extensionsCheckPromise = Promise.resolve(true);\n\t\tconst installedExtensions = condition.installedExtensions;\n\t\tif (installedExtensions) {\n\t\t\textensionsCheckPromise = this.extensionManagementService.getInstalled(ExtensionType.User).then(locals => {\n\t\t\t\tlet includesCheck = true;\n\t\t\t\tlet excludesCheck = true;\n\t\t\t\tconst localExtensions = locals.map(local => `${local.manifest.publisher.toLowerCase()}.${local.manifest.name.toLowerCase()}`);\n\t\t\t\tif (Array.isArray(installedExtensions.includes) && installedExtensions.includes.length) {\n\t\t\t\t\tconst extensionIncludes = installedExtensions.includes.map(e => e.toLowerCase());\n\t\t\t\t\tincludesCheck = localExtensions.some(e => extensionIncludes.indexOf(e) > -1);\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(installedExtensions.excludes) && installedExtensions.excludes.length) {\n\t\t\t\t\tconst extensionExcludes = installedExtensions.excludes.map(e => e.toLowerCase());\n\t\t\t\t\texcludesCheck = !localExtensions.some(e => extensionExcludes.indexOf(e) > -1);\n\t\t\t\t}\n\t\t\t\treturn includesCheck && excludesCheck;\n\t\t\t});\n\t\t}\n\n\t\tconst storageKey = 'experiments.' + experiment.id;\n\t\tconst experimentState: IExperimentStorageState = safeParse(this.storageService.get(storageKey, StorageScope.GLOBAL), {});\n\n\t\treturn extensionsCheckPromise.then(success => {\n\t\t\tconst fileEdits = condition.fileEdits;\n\t\t\tif (!success || !fileEdits || typeof fileEdits.minEditCount !== 'number') {\n\t\t\t\tconst runExperiment = success && typeof condition.userProbability === 'number' && Math.random() < condition.userProbability;\n\t\t\t\treturn runExperiment ? ExperimentState.Run : ExperimentState.NoRun;\n\t\t\t}\n\n\t\t\texperimentState.editCount = experimentState.editCount || 0;\n\t\t\tif (experimentState.editCount >= fileEdits.minEditCount) {\n\t\t\t\treturn ExperimentState.Run;\n\t\t\t}\n\n\t\t\tconst onSaveHandler = this.textFileService.models.onModelsSaved(e => {\n\t\t\t\tconst date = new Date().toDateString();\n\t\t\t\tconst latestExperimentState: IExperimentStorageState = safeParse(this.storageService.get(storageKey, StorageScope.GLOBAL), {});\n\t\t\t\tif (latestExperimentState.state !== ExperimentState.Evaluating) {\n\t\t\t\t\tonSaveHandler.dispose();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\te.forEach(event => {\n\t\t\t\t\tif (event.kind !== StateChange.SAVED\n\t\t\t\t\t\t|| latestExperimentState.state !== ExperimentState.Evaluating\n\t\t\t\t\t\t|| date === latestExperimentState.lastEditedDate\n\t\t\t\t\t\t|| (typeof latestExperimentState.editCount === 'number' && latestExperimentState.editCount >= fileEdits.minEditCount)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlet filePathCheck = true;\n\t\t\t\t\tlet workspaceCheck = true;\n\n\t\t\t\t\tif (typeof fileEdits.filePathPattern === 'string') {\n\t\t\t\t\t\tfilePathCheck = match(fileEdits.filePathPattern, event.resource.fsPath);\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(fileEdits.workspaceIncludes) && fileEdits.workspaceIncludes.length) {\n\t\t\t\t\t\tworkspaceCheck = !!WorkspaceStats.TAGS && fileEdits.workspaceIncludes.some(x => !!WorkspaceStats.TAGS[x]);\n\t\t\t\t\t}\n\t\t\t\t\tif (workspaceCheck && Array.isArray(fileEdits.workspaceExcludes) && fileEdits.workspaceExcludes.length) {\n\t\t\t\t\t\tworkspaceCheck = !!WorkspaceStats.TAGS && !fileEdits.workspaceExcludes.some(x => !!WorkspaceStats.TAGS[x]);\n\t\t\t\t\t}\n\t\t\t\t\tif (filePathCheck && workspaceCheck) {\n\t\t\t\t\t\tlatestExperimentState.editCount = (latestExperimentState.editCount || 0) + 1;\n\t\t\t\t\t\tlatestExperimentState.lastEditedDate = date;\n\t\t\t\t\t\tthis.storageService.store(storageKey, JSON.stringify(latestExperimentState), StorageScope.GLOBAL);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (typeof latestExperimentState.editCount === 'number' && latestExperimentState.editCount >= fileEdits.minEditCount) {\n\t\t\t\t\tprocessedExperiment.state = latestExperimentState.state = (typeof condition.userProbability === 'number' && Math.random() < condition.userProbability && this.checkExperimentDependencies(experiment)) ? ExperimentState.Run : ExperimentState.NoRun;\n\t\t\t\t\tthis.storageService.store(storageKey, JSON.stringify(latestExperimentState), StorageScope.GLOBAL);\n\t\t\t\t\tif (latestExperimentState.state === ExperimentState.Run && experiment.action && ExperimentActionType[experiment.action.type] === ExperimentActionType.Prompt) {\n\t\t\t\t\t\tthis.fireRunExperiment(processedExperiment);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._disposables.push(onSaveHandler);\n\t\t\treturn ExperimentState.Evaluating;\n\t\t});\n\t}\n\n\tdispose() {\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n}\n\n\nfunction safeParse(text: string | undefined, defaultObject: any) {\n\ttry {\n\t\treturn text ? JSON.parse(text) || defaultObject : defaultObject;\n\t} catch (e) {\n\t\treturn defaultObject;\n\t}\n}\n"]}]}