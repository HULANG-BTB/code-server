{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issueService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/issue/common/issue\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/colorRegistry\", \"vs/workbench/common/theme\", \"vs/platform/extensionManagement/common/extensionManagement\", \"electron\", \"vs/base/common/objects\", \"vs/platform/windows/common/windows\", \"vs/platform/extensions/common/extensions\"], function (require, exports, issue_1, themeService_1, colorRegistry_1, theme_1, extensionManagement_1, electron_1, objects_1, windows_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WorkbenchIssueService = class WorkbenchIssueService {\n        constructor(issueService, themeService, extensionManagementService, extensionEnablementService, windowService) {\n            this.issueService = issueService;\n            this.themeService = themeService;\n            this.extensionManagementService = extensionManagementService;\n            this.extensionEnablementService = extensionEnablementService;\n            this.windowService = windowService;\n        }\n        openReporter(dataOverrides = {}) {\n            return this.extensionManagementService.getInstalled(extensions_1.ExtensionType.User).then(extensions => {\n                const enabledExtensions = extensions.filter(extension => this.extensionEnablementService.isEnabled(extension));\n                const extensionData = enabledExtensions.map(extension => {\n                    const { manifest } = extension;\n                    const manifestKeys = manifest.contributes ? Object.keys(manifest.contributes) : [];\n                    const isTheme = !manifest.activationEvents && manifestKeys.length === 1 && manifestKeys[0] === 'themes';\n                    return {\n                        name: manifest.name,\n                        publisher: manifest.publisher,\n                        version: manifest.version,\n                        repositoryUrl: manifest.repository && manifest.repository.url,\n                        bugsUrl: manifest.bugs && manifest.bugs.url,\n                        displayName: manifest.displayName,\n                        id: extension.identifier.id,\n                        isTheme: isTheme\n                    };\n                });\n                const theme = this.themeService.getTheme();\n                const issueReporterData = objects_1.assign({\n                    styles: getIssueReporterStyles(theme),\n                    zoomLevel: electron_1.webFrame.getZoomLevel(),\n                    enabledExtensions: extensionData\n                }, dataOverrides);\n                return this.issueService.openReporter(issueReporterData);\n            });\n        }\n        openProcessExplorer() {\n            const theme = this.themeService.getTheme();\n            const data = {\n                pid: this.windowService.getConfiguration().mainPid,\n                zoomLevel: electron_1.webFrame.getZoomLevel(),\n                styles: {\n                    backgroundColor: getColor(theme, colorRegistry_1.editorBackground),\n                    color: getColor(theme, colorRegistry_1.editorForeground),\n                    hoverBackground: getColor(theme, colorRegistry_1.listHoverBackground),\n                    hoverForeground: getColor(theme, colorRegistry_1.listHoverForeground),\n                    highlightForeground: getColor(theme, colorRegistry_1.listHighlightForeground),\n                }\n            };\n            return this.issueService.openProcessExplorer(data);\n        }\n    };\n    WorkbenchIssueService = __decorate([\n        __param(0, issue_1.IIssueService),\n        __param(1, themeService_1.IThemeService),\n        __param(2, extensionManagement_1.IExtensionManagementService),\n        __param(3, extensionManagement_1.IExtensionEnablementService),\n        __param(4, windows_1.IWindowService)\n    ], WorkbenchIssueService);\n    exports.WorkbenchIssueService = WorkbenchIssueService;\n    function getIssueReporterStyles(theme) {\n        return {\n            backgroundColor: getColor(theme, theme_1.SIDE_BAR_BACKGROUND),\n            color: getColor(theme, colorRegistry_1.foreground),\n            textLinkColor: getColor(theme, colorRegistry_1.textLinkForeground),\n            textLinkActiveForeground: getColor(theme, colorRegistry_1.textLinkActiveForeground),\n            inputBackground: getColor(theme, colorRegistry_1.inputBackground),\n            inputForeground: getColor(theme, colorRegistry_1.inputForeground),\n            inputBorder: getColor(theme, colorRegistry_1.inputBorder),\n            inputActiveBorder: getColor(theme, colorRegistry_1.inputActiveOptionBorder),\n            inputErrorBorder: getColor(theme, colorRegistry_1.inputValidationErrorBorder),\n            buttonBackground: getColor(theme, colorRegistry_1.buttonBackground),\n            buttonForeground: getColor(theme, colorRegistry_1.buttonForeground),\n            buttonHoverBackground: getColor(theme, colorRegistry_1.buttonHoverBackground),\n            sliderActiveColor: getColor(theme, colorRegistry_1.scrollbarSliderActiveBackground),\n            sliderBackgroundColor: getColor(theme, colorRegistry_1.scrollbarSliderBackground),\n            sliderHoverColor: getColor(theme, colorRegistry_1.scrollbarSliderHoverBackground),\n        };\n    }\n    exports.getIssueReporterStyles = getIssueReporterStyles;\n    function getColor(theme, key) {\n        const color = theme.getColor(key);\n        return color ? color.toString() : undefined;\n    }\n});\n",null]}