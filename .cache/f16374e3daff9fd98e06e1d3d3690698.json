{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @internal\n */\nvar RawContentChangedType;\n(function (RawContentChangedType) {\n    RawContentChangedType[RawContentChangedType[\"Flush\"] = 1] = \"Flush\";\n    RawContentChangedType[RawContentChangedType[\"LineChanged\"] = 2] = \"LineChanged\";\n    RawContentChangedType[RawContentChangedType[\"LinesDeleted\"] = 3] = \"LinesDeleted\";\n    RawContentChangedType[RawContentChangedType[\"LinesInserted\"] = 4] = \"LinesInserted\";\n    RawContentChangedType[RawContentChangedType[\"EOLChanged\"] = 5] = \"EOLChanged\";\n})(RawContentChangedType = exports.RawContentChangedType || (exports.RawContentChangedType = {}));\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nvar ModelRawFlush = /** @class */ (function () {\n    function ModelRawFlush() {\n        this.changeType = RawContentChangedType.Flush;\n    }\n    return ModelRawFlush;\n}());\nexports.ModelRawFlush = ModelRawFlush;\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nvar ModelRawLineChanged = /** @class */ (function () {\n    function ModelRawLineChanged(lineNumber, detail) {\n        this.changeType = RawContentChangedType.LineChanged;\n        this.lineNumber = lineNumber;\n        this.detail = detail;\n    }\n    return ModelRawLineChanged;\n}());\nexports.ModelRawLineChanged = ModelRawLineChanged;\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nvar ModelRawLinesDeleted = /** @class */ (function () {\n    function ModelRawLinesDeleted(fromLineNumber, toLineNumber) {\n        this.changeType = RawContentChangedType.LinesDeleted;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n    }\n    return ModelRawLinesDeleted;\n}());\nexports.ModelRawLinesDeleted = ModelRawLinesDeleted;\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nvar ModelRawLinesInserted = /** @class */ (function () {\n    function ModelRawLinesInserted(fromLineNumber, toLineNumber, detail) {\n        this.changeType = RawContentChangedType.LinesInserted;\n        this.fromLineNumber = fromLineNumber;\n        this.toLineNumber = toLineNumber;\n        this.detail = detail;\n    }\n    return ModelRawLinesInserted;\n}());\nexports.ModelRawLinesInserted = ModelRawLinesInserted;\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nvar ModelRawEOLChanged = /** @class */ (function () {\n    function ModelRawEOLChanged() {\n        this.changeType = RawContentChangedType.EOLChanged;\n    }\n    return ModelRawEOLChanged;\n}());\nexports.ModelRawEOLChanged = ModelRawEOLChanged;\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nvar ModelRawContentChangedEvent = /** @class */ (function () {\n    function ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing) {\n        this.changes = changes;\n        this.versionId = versionId;\n        this.isUndoing = isUndoing;\n        this.isRedoing = isRedoing;\n    }\n    ModelRawContentChangedEvent.prototype.containsEvent = function (type) {\n        for (var i = 0, len = this.changes.length; i < len; i++) {\n            var change = this.changes[i];\n            if (change.changeType === type) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ModelRawContentChangedEvent.merge = function (a, b) {\n        var changes = [].concat(a.changes).concat(b.changes);\n        var versionId = b.versionId;\n        var isUndoing = (a.isUndoing || b.isUndoing);\n        var isRedoing = (a.isRedoing || b.isRedoing);\n        return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n    };\n    return ModelRawContentChangedEvent;\n}());\nexports.ModelRawContentChangedEvent = ModelRawContentChangedEvent;\n/**\n * @internal\n */\nvar InternalModelContentChangeEvent = /** @class */ (function () {\n    function InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent) {\n        this.rawContentChangedEvent = rawContentChangedEvent;\n        this.contentChangedEvent = contentChangedEvent;\n    }\n    InternalModelContentChangeEvent.prototype.merge = function (other) {\n        var rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n        var contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n        return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n    };\n    InternalModelContentChangeEvent._mergeChangeEvents = function (a, b) {\n        var changes = [].concat(a.changes).concat(b.changes);\n        var eol = b.eol;\n        var versionId = b.versionId;\n        var isUndoing = (a.isUndoing || b.isUndoing);\n        var isRedoing = (a.isRedoing || b.isRedoing);\n        var isFlush = (a.isFlush || b.isFlush);\n        return {\n            changes: changes,\n            eol: eol,\n            versionId: versionId,\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    };\n    return InternalModelContentChangeEvent;\n}());\nexports.InternalModelContentChangeEvent = InternalModelContentChangeEvent;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/model/textModelEvents.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange } from 'vs/editor/common/core/range';\n\n/**\n * An event describing that the current mode associated with a model has changed.\n */\nexport interface IModelLanguageChangedEvent {\n\t/**\n\t * Previous language\n\t */\n\treadonly oldLanguage: string;\n\t/**\n\t * New language\n\t */\n\treadonly newLanguage: string;\n}\n\n/**\n * An event describing that the language configuration associated with a model has changed.\n */\nexport interface IModelLanguageConfigurationChangedEvent {\n}\n\nexport interface IModelContentChange {\n\t/**\n\t * The range that got replaced.\n\t */\n\treadonly range: IRange;\n\t/**\n\t * The offset of the range that got replaced.\n\t */\n\treadonly rangeOffset: number;\n\t/**\n\t * The length of the range that got replaced.\n\t */\n\treadonly rangeLength: number;\n\t/**\n\t * The new text for the range.\n\t */\n\treadonly text: string;\n}\n\n/**\n * An event describing a change in the text of a model.\n */\nexport interface IModelContentChangedEvent {\n\treadonly changes: IModelContentChange[];\n\t/**\n\t * The (new) end-of-line character.\n\t */\n\treadonly eol: string;\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\treadonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n\t/**\n\t * Flag that indicates that all decorations were lost with this edit.\n\t * The model has been reset to a new value.\n\t */\n\treadonly isFlush: boolean;\n}\n\n/**\n * An event describing that model decorations have changed.\n */\nexport interface IModelDecorationsChangedEvent {\n}\n\n/**\n * An event describing that some ranges of lines have been tokenized (their tokens have changed).\n */\nexport interface IModelTokensChangedEvent {\n\treadonly tokenizationSupportChanged: boolean;\n\treadonly ranges: {\n\t\t/**\n\t\t * The start of the range (inclusive)\n\t\t */\n\t\treadonly fromLineNumber: number;\n\t\t/**\n\t\t * The end of the range (inclusive)\n\t\t */\n\t\treadonly toLineNumber: number;\n\t}[];\n}\n\nexport interface IModelOptionsChangedEvent {\n\treadonly tabSize: boolean;\n\treadonly indentSize: boolean;\n\treadonly insertSpaces: boolean;\n\treadonly trimAutoWhitespace: boolean;\n}\n\n/**\n * @internal\n */\nexport const enum RawContentChangedType {\n\tFlush = 1,\n\tLineChanged = 2,\n\tLinesDeleted = 3,\n\tLinesInserted = 4,\n\tEOLChanged = 5\n}\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nexport class ModelRawFlush {\n\tpublic readonly changeType = RawContentChangedType.Flush;\n}\n\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\nexport class ModelRawLineChanged {\n\tpublic readonly changeType = RawContentChangedType.LineChanged;\n\t/**\n\t * The line that has changed.\n\t */\n\tpublic readonly lineNumber: number;\n\t/**\n\t * The new value of the line.\n\t */\n\tpublic readonly detail: string;\n\n\tconstructor(lineNumber: number, detail: string) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\nexport class ModelRawLinesDeleted {\n\tpublic readonly changeType = RawContentChangedType.LinesDeleted;\n\t/**\n\t * At what line the deletion began (inclusive).\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * At what line the deletion stopped (inclusive).\n\t */\n\tpublic readonly toLineNumber: number;\n\n\tconstructor(fromLineNumber: number, toLineNumber: number) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t}\n}\n\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\nexport class ModelRawLinesInserted {\n\tpublic readonly changeType = RawContentChangedType.LinesInserted;\n\t/**\n\t * Before what line did the insertion begin\n\t */\n\tpublic readonly fromLineNumber: number;\n\t/**\n\t * `toLineNumber` - `fromLineNumber` + 1 denotes the number of lines that were inserted\n\t */\n\tpublic readonly toLineNumber: number;\n\t/**\n\t * The text that was inserted\n\t */\n\tpublic readonly detail: string[];\n\n\tconstructor(fromLineNumber: number, toLineNumber: number, detail: string[]) {\n\t\tthis.fromLineNumber = fromLineNumber;\n\t\tthis.toLineNumber = toLineNumber;\n\t\tthis.detail = detail;\n\t}\n}\n\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\nexport class ModelRawEOLChanged {\n\tpublic readonly changeType = RawContentChangedType.EOLChanged;\n}\n\n/**\n * @internal\n */\nexport type ModelRawChange = ModelRawFlush | ModelRawLineChanged | ModelRawLinesDeleted | ModelRawLinesInserted | ModelRawEOLChanged;\n\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\nexport class ModelRawContentChangedEvent {\n\n\tpublic readonly changes: ModelRawChange[];\n\t/**\n\t * The new version id the model has transitioned to.\n\t */\n\tpublic readonly versionId: number;\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\tpublic readonly isUndoing: boolean;\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\tpublic readonly isRedoing: boolean;\n\n\tconstructor(changes: ModelRawChange[], versionId: number, isUndoing: boolean, isRedoing: boolean) {\n\t\tthis.changes = changes;\n\t\tthis.versionId = versionId;\n\t\tthis.isUndoing = isUndoing;\n\t\tthis.isRedoing = isRedoing;\n\t}\n\n\tpublic containsEvent(type: RawContentChangedType): boolean {\n\t\tfor (let i = 0, len = this.changes.length; i < len; i++) {\n\t\t\tconst change = this.changes[i];\n\t\t\tif (change.changeType === type) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static merge(a: ModelRawContentChangedEvent, b: ModelRawContentChangedEvent): ModelRawContentChangedEvent {\n\t\tconst changes = ([] as ModelRawChange[]).concat(a.changes).concat(b.changes);\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\treturn new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n\t}\n}\n\n/**\n * @internal\n */\nexport class InternalModelContentChangeEvent {\n\tconstructor(\n\t\tpublic readonly rawContentChangedEvent: ModelRawContentChangedEvent,\n\t\tpublic readonly contentChangedEvent: IModelContentChangedEvent,\n\t) { }\n\n\tpublic merge(other: InternalModelContentChangeEvent): InternalModelContentChangeEvent {\n\t\tconst rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\t\tconst contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\t\treturn new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n\t}\n\n\tprivate static _mergeChangeEvents(a: IModelContentChangedEvent, b: IModelContentChangedEvent): IModelContentChangedEvent {\n\t\tconst changes = ([] as IModelContentChange[]).concat(a.changes).concat(b.changes);\n\t\tconst eol = b.eol;\n\t\tconst versionId = b.versionId;\n\t\tconst isUndoing = (a.isUndoing || b.isUndoing);\n\t\tconst isRedoing = (a.isRedoing || b.isRedoing);\n\t\tconst isFlush = (a.isFlush || b.isFlush);\n\t\treturn {\n\t\t\tchanges: changes,\n\t\t\teol: eol,\n\t\t\tversionId: versionId,\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush\n\t\t};\n\t}\n}\n"]}]}