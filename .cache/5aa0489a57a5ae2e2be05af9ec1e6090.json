{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionCommands.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar bulkEditService_1 = require(\"vs/editor/browser/services/bulkEditService\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar messageController_1 = require(\"vs/editor/contrib/message/messageController\");\nvar nls = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar codeActionModel_1 = require(\"./codeActionModel\");\nvar codeActionTrigger_1 = require(\"./codeActionTrigger\");\nvar codeActionWidget_1 = require(\"./codeActionWidget\");\nvar lightBulbWidget_1 = require(\"./lightBulbWidget\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar errors_1 = require(\"vs/base/common/errors\");\nfunction contextKeyForSupportedActions(kind) {\n    return contextkey_1.ContextKeyExpr.regex(codeActionModel_1.SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\\\s|^)' + strings_1.escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\nvar QuickFixController = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickFixController, _super);\n    function QuickFixController(editor, markerService, contextKeyService, progressService, contextMenuService, _commandService, _keybindingService, _bulkEditService) {\n        var _this = _super.call(this) || this;\n        _this._commandService = _commandService;\n        _this._keybindingService = _keybindingService;\n        _this._bulkEditService = _bulkEditService;\n        _this._editor = editor;\n        _this._model = new codeActionModel_1.CodeActionModel(_this._editor, markerService, contextKeyService, progressService);\n        _this._codeActionContextMenu = new codeActionWidget_1.CodeActionContextMenu(editor, contextMenuService, function (action) { return _this._onApplyCodeAction(action); });\n        _this._lightBulbWidget = _this._register(new lightBulbWidget_1.LightBulbWidget(editor));\n        _this._updateLightBulbTitle();\n        _this._register(_this._codeActionContextMenu.onDidExecuteCodeAction(function (_) { return _this._model.trigger({ type: 'auto', filter: {} }); }));\n        _this._register(_this._lightBulbWidget.onClick(_this._handleLightBulbSelect, _this));\n        _this._register(_this._model.onDidChangeState(function (e) { return _this._onDidChangeCodeActionsState(e); }));\n        _this._register(_this._keybindingService.onDidUpdateKeybindings(_this._updateLightBulbTitle, _this));\n        return _this;\n    }\n    QuickFixController.get = function (editor) {\n        return editor.getContribution(QuickFixController.ID);\n    };\n    QuickFixController.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._model.dispose();\n    };\n    QuickFixController.prototype._onDidChangeCodeActionsState = function (newState) {\n        var _this = this;\n        if (this._activeRequest) {\n            this._activeRequest.cancel();\n            this._activeRequest = undefined;\n        }\n        if (newState.type === codeActionModel_1.CodeActionsState.Type.Triggered) {\n            this._activeRequest = newState.actions;\n            if (newState.trigger.filter && newState.trigger.filter.kind) {\n                // Triggered for specific scope\n                newState.actions.then(function (fixes) {\n                    if (fixes.actions.length > 0) {\n                        // Apply if we only have one action or requested autoApply\n                        if (newState.trigger.autoApply === codeActionTrigger_1.CodeActionAutoApply.First || (newState.trigger.autoApply === codeActionTrigger_1.CodeActionAutoApply.IfSingle && fixes.actions.length === 1)) {\n                            _this._onApplyCodeAction(fixes.actions[0]);\n                            return;\n                        }\n                    }\n                    _this._codeActionContextMenu.show(newState.actions, newState.position);\n                }).catch(errors_1.onUnexpectedError);\n            }\n            else if (newState.trigger.type === 'manual') {\n                this._codeActionContextMenu.show(newState.actions, newState.position);\n            }\n            else {\n                // auto magically triggered\n                // * update an existing list of code actions\n                // * manage light bulb\n                if (this._codeActionContextMenu.isVisible) {\n                    this._codeActionContextMenu.show(newState.actions, newState.position);\n                }\n                else {\n                    this._lightBulbWidget.tryShow(newState);\n                }\n            }\n        }\n        else {\n            this._lightBulbWidget.hide();\n        }\n    };\n    QuickFixController.prototype.getId = function () {\n        return QuickFixController.ID;\n    };\n    QuickFixController.prototype._handleLightBulbSelect = function (e) {\n        this._codeActionContextMenu.show(e.state.actions, e);\n    };\n    QuickFixController.prototype.triggerFromEditorSelection = function (filter, autoApply) {\n        return this._model.trigger({ type: 'manual', filter: filter, autoApply: autoApply });\n    };\n    QuickFixController.prototype._updateLightBulbTitle = function () {\n        var kb = this._keybindingService.lookupKeybinding(QuickFixAction.Id);\n        var title;\n        if (kb) {\n            title = nls.localize('quickFixWithKb', \"Show Fixes ({0})\", kb.getLabel());\n        }\n        else {\n            title = nls.localize('quickFix', \"Show Fixes\");\n        }\n        this._lightBulbWidget.title = title;\n    };\n    QuickFixController.prototype._onApplyCodeAction = function (action) {\n        return applyCodeAction(action, this._bulkEditService, this._commandService, this._editor);\n    };\n    QuickFixController.ID = 'editor.contrib.quickFixController';\n    QuickFixController = tslib_1.__decorate([\n        tslib_1.__param(1, markers_1.IMarkerService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService),\n        tslib_1.__param(3, progress_1.IProgressService),\n        tslib_1.__param(4, contextView_1.IContextMenuService),\n        tslib_1.__param(5, commands_1.ICommandService),\n        tslib_1.__param(6, keybinding_1.IKeybindingService),\n        tslib_1.__param(7, bulkEditService_1.IBulkEditService)\n    ], QuickFixController);\n    return QuickFixController;\n}(lifecycle_1.Disposable));\nexports.QuickFixController = QuickFixController;\nfunction applyCodeAction(action, bulkEditService, commandService, editor) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!action.edit) return [3 /*break*/, 2];\n                    return [4 /*yield*/, bulkEditService.apply(action.edit, { editor: editor })];\n                case 1:\n                    _a.sent();\n                    _a.label = 2;\n                case 2:\n                    if (!action.command) return [3 /*break*/, 4];\n                    return [4 /*yield*/, commandService.executeCommand.apply(commandService, [action.command.id].concat((action.command.arguments || [])))];\n                case 3:\n                    _a.sent();\n                    _a.label = 4;\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.applyCodeAction = applyCodeAction;\nfunction showCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {\n    if (!editor.hasModel()) {\n        return;\n    }\n    var controller = QuickFixController.get(editor);\n    if (!controller) {\n        return;\n    }\n    var pos = editor.getPosition();\n    controller.triggerFromEditorSelection(filter, autoApply).then(function (codeActions) {\n        if (!codeActions || !codeActions.actions.length) {\n            messageController_1.MessageController.get(editor).showMessage(notAvailableMessage, pos);\n        }\n    });\n}\nvar QuickFixAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickFixAction, _super);\n    function QuickFixAction() {\n        return _super.call(this, {\n            id: QuickFixAction.Id,\n            label: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n            alias: 'Quick Fix',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_DOT,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    QuickFixAction.prototype.run = function (_accessor, editor) {\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"));\n    };\n    QuickFixAction.Id = 'editor.action.quickFix';\n    return QuickFixAction;\n}(editorExtensions_1.EditorAction));\nexports.QuickFixAction = QuickFixAction;\nvar CodeActionCommandArgs = /** @class */ (function () {\n    function CodeActionCommandArgs(kind, apply, preferred) {\n        this.kind = kind;\n        this.apply = apply;\n        this.preferred = preferred;\n    }\n    CodeActionCommandArgs.fromUser = function (arg, defaults) {\n        if (!arg || typeof arg !== 'object') {\n            return new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n        }\n        return new CodeActionCommandArgs(CodeActionCommandArgs.getKindFromUser(arg, defaults.kind), CodeActionCommandArgs.getApplyFromUser(arg, defaults.apply), CodeActionCommandArgs.getPreferredUser(arg));\n    };\n    CodeActionCommandArgs.getApplyFromUser = function (arg, defaultAutoApply) {\n        switch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n            case 'first': return codeActionTrigger_1.CodeActionAutoApply.First;\n            case 'never': return codeActionTrigger_1.CodeActionAutoApply.Never;\n            case 'ifsingle': return codeActionTrigger_1.CodeActionAutoApply.IfSingle;\n            default: return defaultAutoApply;\n        }\n    };\n    CodeActionCommandArgs.getKindFromUser = function (arg, defaultKind) {\n        return typeof arg.kind === 'string'\n            ? new codeActionTrigger_1.CodeActionKind(arg.kind)\n            : defaultKind;\n    };\n    CodeActionCommandArgs.getPreferredUser = function (arg) {\n        return typeof arg.preferred === 'boolean'\n            ? arg.preferred\n            : false;\n    };\n    return CodeActionCommandArgs;\n}());\nvar CodeActionCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(CodeActionCommand, _super);\n    function CodeActionCommand() {\n        return _super.call(this, {\n            id: CodeActionCommand.Id,\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),\n            description: {\n                description: \"Trigger a code action\",\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'object',\n                            'required': ['kind'],\n                            'properties': {\n                                'kind': {\n                                    'type': 'string'\n                                },\n                                'apply': {\n                                    'type': 'string',\n                                    'default': 'ifSingle',\n                                    'enum': ['first', 'ifSingle', 'never']\n                                }\n                            }\n                        }\n                    }]\n            }\n        }) || this;\n    }\n    CodeActionCommand.prototype.runEditorCommand = function (_accessor, editor, userArg) {\n        var args = CodeActionCommandArgs.fromUser(userArg, {\n            kind: codeActionTrigger_1.CodeActionKind.Empty,\n            apply: codeActionTrigger_1.CodeActionAutoApply.IfSingle,\n        });\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), {\n            kind: args.kind,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply);\n    };\n    CodeActionCommand.Id = 'editor.action.codeAction';\n    return CodeActionCommand;\n}(editorExtensions_1.EditorCommand));\nexports.CodeActionCommand = CodeActionCommand;\nvar RefactorAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RefactorAction, _super);\n    function RefactorAction() {\n        return _super.call(this, {\n            id: RefactorAction.Id,\n            label: nls.localize('refactor.label', \"Refactor...\"),\n            alias: 'Refactor',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_R,\n                mac: {\n                    primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_R\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menuOpts: {\n                group: '1_modification',\n                order: 2,\n                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(codeActionTrigger_1.CodeActionKind.Refactor)),\n            },\n            description: {\n                description: 'Refactor...',\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'kind': {\n                                    'type': 'string'\n                                },\n                                'apply': {\n                                    'type': 'string',\n                                    'default': 'never',\n                                    'enum': ['first', 'ifSingle', 'never']\n                                }\n                            }\n                        }\n                    }]\n            }\n        }) || this;\n    }\n    RefactorAction.prototype.run = function (_accessor, editor, userArg) {\n        var args = CodeActionCommandArgs.fromUser(userArg, {\n            kind: codeActionTrigger_1.CodeActionKind.Refactor,\n            apply: codeActionTrigger_1.CodeActionAutoApply.Never\n        });\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"), {\n            kind: codeActionTrigger_1.CodeActionKind.Refactor.contains(args.kind) ? args.kind : codeActionTrigger_1.CodeActionKind.Empty,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply);\n    };\n    RefactorAction.Id = 'editor.action.refactor';\n    return RefactorAction;\n}(editorExtensions_1.EditorAction));\nexports.RefactorAction = RefactorAction;\nvar SourceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SourceAction, _super);\n    function SourceAction() {\n        return _super.call(this, {\n            id: SourceAction.Id,\n            label: nls.localize('source.label', \"Source Action...\"),\n            alias: 'Source Action',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasCodeActionsProvider),\n            menuOpts: {\n                group: '1_modification',\n                order: 2.1,\n                when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(codeActionTrigger_1.CodeActionKind.Source)),\n            },\n            description: {\n                description: 'Source Action...',\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'kind': {\n                                    'type': 'string'\n                                },\n                                'apply': {\n                                    'type': 'string',\n                                    'default': 'never',\n                                    'enum': ['first', 'ifSingle', 'never']\n                                }\n                            }\n                        }\n                    }]\n            }\n        }) || this;\n    }\n    SourceAction.prototype.run = function (_accessor, editor, userArg) {\n        var args = CodeActionCommandArgs.fromUser(userArg, {\n            kind: codeActionTrigger_1.CodeActionKind.Source,\n            apply: codeActionTrigger_1.CodeActionAutoApply.Never\n        });\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.source.noneMessage', \"No source actions available\"), {\n            kind: codeActionTrigger_1.CodeActionKind.Source.contains(args.kind) ? args.kind : codeActionTrigger_1.CodeActionKind.Empty,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply);\n    };\n    SourceAction.Id = 'editor.action.sourceAction';\n    return SourceAction;\n}(editorExtensions_1.EditorAction));\nexports.SourceAction = SourceAction;\nvar OrganizeImportsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OrganizeImportsAction, _super);\n    function OrganizeImportsAction() {\n        return _super.call(this, {\n            id: OrganizeImportsAction.Id,\n            label: nls.localize('organizeImports.label', \"Organize Imports\"),\n            alias: 'Organize Imports',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(codeActionTrigger_1.CodeActionKind.SourceOrganizeImports)),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_O,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    OrganizeImportsAction.prototype.run = function (_accessor, editor) {\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"), { kind: codeActionTrigger_1.CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, codeActionTrigger_1.CodeActionAutoApply.IfSingle);\n    };\n    OrganizeImportsAction.Id = 'editor.action.organizeImports';\n    return OrganizeImportsAction;\n}(editorExtensions_1.EditorAction));\nexports.OrganizeImportsAction = OrganizeImportsAction;\nvar FixAllAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FixAllAction, _super);\n    function FixAllAction() {\n        return _super.call(this, {\n            id: FixAllAction.Id,\n            label: nls.localize('fixAll.label', \"Fix All\"),\n            alias: 'Fix All',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(codeActionTrigger_1.CodeActionKind.SourceFixAll))\n        }) || this;\n    }\n    FixAllAction.prototype.run = function (_accessor, editor) {\n        return showCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', \"No fix all action available\"), { kind: codeActionTrigger_1.CodeActionKind.SourceFixAll, includeSourceActions: true }, codeActionTrigger_1.CodeActionAutoApply.IfSingle);\n    };\n    FixAllAction.Id = 'editor.action.fixAll';\n    return FixAllAction;\n}(editorExtensions_1.EditorAction));\nexports.FixAllAction = FixAllAction;\nvar AutoFixAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AutoFixAction, _super);\n    function AutoFixAction() {\n        return _super.call(this, {\n            id: AutoFixAction.Id,\n            label: nls.localize('autoFix.label', \"Auto Fix...\"),\n            alias: 'Auto Fix',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, contextKeyForSupportedActions(codeActionTrigger_1.CodeActionKind.QuickFix)),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.US_DOT,\n                mac: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.US_DOT\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    AutoFixAction.prototype.run = function (_accessor, editor) {\n        return showCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"), {\n            kind: codeActionTrigger_1.CodeActionKind.QuickFix,\n            onlyIncludePreferredActions: true\n        }, codeActionTrigger_1.CodeActionAutoApply.IfSingle);\n    };\n    AutoFixAction.Id = 'editor.action.autoFix';\n    return AutoFixAction;\n}(editorExtensions_1.EditorAction));\nexports.AutoFixAction = AutoFixAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise } from 'vs/base/common/async';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { CodeAction } from 'vs/editor/common/modes';\nimport { MessageController } from 'vs/editor/contrib/message/messageController';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { CodeActionModel, SUPPORTED_CODE_ACTIONS, CodeActionsState } from './codeActionModel';\nimport { CodeActionAutoApply, CodeActionFilter, CodeActionKind } from './codeActionTrigger';\nimport { CodeActionContextMenu } from './codeActionWidget';\nimport { LightBulbWidget } from './lightBulbWidget';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { CodeActionSet } from 'vs/editor/contrib/codeAction/codeAction';\n\nfunction contextKeyForSupportedActions(kind: CodeActionKind) {\n\treturn ContextKeyExpr.regex(\n\t\tSUPPORTED_CODE_ACTIONS.keys()[0],\n\t\tnew RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\n\nexport class QuickFixController extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.quickFixController';\n\n\tpublic static get(editor: ICodeEditor): QuickFixController {\n\t\treturn editor.getContribution<QuickFixController>(QuickFixController.ID);\n\t}\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _model: CodeActionModel;\n\tprivate readonly _codeActionContextMenu: CodeActionContextMenu;\n\tprivate readonly _lightBulbWidget: LightBulbWidget;\n\n\tprivate _activeRequest: CancelablePromise<CodeActionSet> | undefined;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IMarkerService markerService: IMarkerService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\t\tthis._model = new CodeActionModel(this._editor, markerService, contextKeyService, progressService);\n\t\tthis._codeActionContextMenu = new CodeActionContextMenu(editor, contextMenuService, action => this._onApplyCodeAction(action));\n\t\tthis._lightBulbWidget = this._register(new LightBulbWidget(editor));\n\n\t\tthis._updateLightBulbTitle();\n\n\t\tthis._register(this._codeActionContextMenu.onDidExecuteCodeAction(_ => this._model.trigger({ type: 'auto', filter: {} })));\n\t\tthis._register(this._lightBulbWidget.onClick(this._handleLightBulbSelect, this));\n\t\tthis._register(this._model.onDidChangeState(e => this._onDidChangeCodeActionsState(e)));\n\t\tthis._register(this._keybindingService.onDidUpdateKeybindings(this._updateLightBulbTitle, this));\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._model.dispose();\n\t}\n\n\tprivate _onDidChangeCodeActionsState(newState: CodeActionsState.State): void {\n\t\tif (this._activeRequest) {\n\t\t\tthis._activeRequest.cancel();\n\t\t\tthis._activeRequest = undefined;\n\t\t}\n\n\t\tif (newState.type === CodeActionsState.Type.Triggered) {\n\t\t\tthis._activeRequest = newState.actions;\n\n\t\t\tif (newState.trigger.filter && newState.trigger.filter.kind) {\n\t\t\t\t// Triggered for specific scope\n\t\t\t\tnewState.actions.then(fixes => {\n\t\t\t\t\tif (fixes.actions.length > 0) {\n\t\t\t\t\t\t// Apply if we only have one action or requested autoApply\n\t\t\t\t\t\tif (newState.trigger.autoApply === CodeActionAutoApply.First || (newState.trigger.autoApply === CodeActionAutoApply.IfSingle && fixes.actions.length === 1)) {\n\t\t\t\t\t\t\tthis._onApplyCodeAction(fixes.actions[0]);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._codeActionContextMenu.show(newState.actions, newState.position);\n\n\t\t\t\t}).catch(onUnexpectedError);\n\t\t\t} else if (newState.trigger.type === 'manual') {\n\t\t\t\tthis._codeActionContextMenu.show(newState.actions, newState.position);\n\t\t\t} else {\n\t\t\t\t// auto magically triggered\n\t\t\t\t// * update an existing list of code actions\n\t\t\t\t// * manage light bulb\n\t\t\t\tif (this._codeActionContextMenu.isVisible) {\n\t\t\t\t\tthis._codeActionContextMenu.show(newState.actions, newState.position);\n\t\t\t\t} else {\n\t\t\t\t\tthis._lightBulbWidget.tryShow(newState);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._lightBulbWidget.hide();\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn QuickFixController.ID;\n\t}\n\n\tprivate _handleLightBulbSelect(e: { x: number, y: number, state: CodeActionsState.Triggered }): void {\n\t\tthis._codeActionContextMenu.show(e.state.actions, e);\n\t}\n\n\tpublic triggerFromEditorSelection(filter?: CodeActionFilter, autoApply?: CodeActionAutoApply): Promise<CodeActionSet | undefined> {\n\t\treturn this._model.trigger({ type: 'manual', filter, autoApply });\n\t}\n\n\tprivate _updateLightBulbTitle(): void {\n\t\tconst kb = this._keybindingService.lookupKeybinding(QuickFixAction.Id);\n\t\tlet title: string;\n\t\tif (kb) {\n\t\t\ttitle = nls.localize('quickFixWithKb', \"Show Fixes ({0})\", kb.getLabel());\n\t\t} else {\n\t\t\ttitle = nls.localize('quickFix', \"Show Fixes\");\n\t\t}\n\t\tthis._lightBulbWidget.title = title;\n\t}\n\n\tprivate _onApplyCodeAction(action: CodeAction): Promise<void> {\n\t\treturn applyCodeAction(action, this._bulkEditService, this._commandService, this._editor);\n\t}\n}\n\nexport async function applyCodeAction(\n\taction: CodeAction,\n\tbulkEditService: IBulkEditService,\n\tcommandService: ICommandService,\n\teditor?: ICodeEditor,\n): Promise<void> {\n\tif (action.edit) {\n\t\tawait bulkEditService.apply(action.edit, { editor });\n\t}\n\tif (action.command) {\n\t\tawait commandService.executeCommand(action.command.id, ...(action.command.arguments || []));\n\t}\n}\n\nfunction showCodeActionsForEditorSelection(\n\teditor: ICodeEditor,\n\tnotAvailableMessage: string,\n\tfilter?: CodeActionFilter,\n\tautoApply?: CodeActionAutoApply\n) {\n\tif (!editor.hasModel()) {\n\t\treturn;\n\t}\n\n\tconst controller = QuickFixController.get(editor);\n\tif (!controller) {\n\t\treturn;\n\t}\n\n\tconst pos = editor.getPosition();\n\tcontroller.triggerFromEditorSelection(filter, autoApply).then(codeActions => {\n\t\tif (!codeActions || !codeActions.actions.length) {\n\t\t\tMessageController.get(editor).showMessage(notAvailableMessage, pos);\n\t\t}\n\t});\n}\n\nexport class QuickFixAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.quickFix';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickFixAction.Id,\n\t\t\tlabel: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n\t\t\talias: 'Quick Fix',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.US_DOT,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn showCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"));\n\t}\n}\n\n\nclass CodeActionCommandArgs {\n\tpublic static fromUser(arg: any, defaults: { kind: CodeActionKind, apply: CodeActionAutoApply }): CodeActionCommandArgs {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn new CodeActionCommandArgs(defaults.kind, defaults.apply, false);\n\t\t}\n\t\treturn new CodeActionCommandArgs(\n\t\t\tCodeActionCommandArgs.getKindFromUser(arg, defaults.kind),\n\t\t\tCodeActionCommandArgs.getApplyFromUser(arg, defaults.apply),\n\t\t\tCodeActionCommandArgs.getPreferredUser(arg));\n\t}\n\n\tprivate static getApplyFromUser(arg: any, defaultAutoApply: CodeActionAutoApply) {\n\t\tswitch (typeof arg.apply === 'string' ? arg.apply.toLowerCase() : '') {\n\t\t\tcase 'first': return CodeActionAutoApply.First;\n\t\t\tcase 'never': return CodeActionAutoApply.Never;\n\t\t\tcase 'ifsingle': return CodeActionAutoApply.IfSingle;\n\t\t\tdefault: return defaultAutoApply;\n\t\t}\n\t}\n\n\tprivate static getKindFromUser(arg: any, defaultKind: CodeActionKind) {\n\t\treturn typeof arg.kind === 'string'\n\t\t\t? new CodeActionKind(arg.kind)\n\t\t\t: defaultKind;\n\t}\n\n\tprivate static getPreferredUser(arg: any): boolean {\n\t\treturn typeof arg.preferred === 'boolean'\n\t\t\t? arg.preferred\n\t\t\t: false;\n\t}\n\n\tprivate constructor(\n\t\tpublic readonly kind: CodeActionKind,\n\t\tpublic readonly apply: CodeActionAutoApply,\n\t\tpublic readonly preferred: boolean,\n\t) { }\n}\n\nexport class CodeActionCommand extends EditorCommand {\n\n\tstatic readonly Id = 'editor.action.codeAction';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CodeActionCommand.Id,\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tdescription: {\n\t\t\t\tdescription: `Trigger a code action`,\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'required': ['kind'],\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'kind': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'apply': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t'default': 'ifSingle',\n\t\t\t\t\t\t\t\t'enum': ['first', 'ifSingle', 'never']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor, userArg: any) {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArg, {\n\t\t\tkind: CodeActionKind.Empty,\n\t\t\tapply: CodeActionAutoApply.IfSingle,\n\t\t});\n\t\treturn showCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"),\n\t\t\t{\n\t\t\t\tkind: args.kind,\n\t\t\t\tincludeSourceActions: true,\n\t\t\t\tonlyIncludePreferredActions: args.preferred,\n\t\t\t},\n\t\t\targs.apply);\n\t}\n}\n\n\nexport class RefactorAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.refactor';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: RefactorAction.Id,\n\t\t\tlabel: nls.localize('refactor.label', \"Refactor...\"),\n\t\t\talias: 'Refactor',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_R,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KEY_R\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 2,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tEditorContextKeys.writable,\n\t\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.Refactor)),\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Refactor...',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'kind': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'apply': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t'default': 'never',\n\t\t\t\t\t\t\t\t'enum': ['first', 'ifSingle', 'never']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, userArg: any): void {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArg, {\n\t\t\tkind: CodeActionKind.Refactor,\n\t\t\tapply: CodeActionAutoApply.Never\n\t\t});\n\t\treturn showCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"),\n\t\t\t{\n\t\t\t\tkind: CodeActionKind.Refactor.contains(args.kind) ? args.kind : CodeActionKind.Empty,\n\t\t\t\tonlyIncludePreferredActions: args.preferred,\n\t\t\t},\n\t\t\targs.apply);\n\t}\n}\n\n\nexport class SourceAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.sourceAction';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SourceAction.Id,\n\t\t\tlabel: nls.localize('source.label', \"Source Action...\"),\n\t\t\talias: 'Source Action',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 2.1,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tEditorContextKeys.writable,\n\t\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.Source)),\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Source Action...',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'kind': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'apply': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t'default': 'never',\n\t\t\t\t\t\t\t\t'enum': ['first', 'ifSingle', 'never']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, userArg: any): void {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArg, {\n\t\t\tkind: CodeActionKind.Source,\n\t\t\tapply: CodeActionAutoApply.Never\n\t\t});\n\t\treturn showCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.source.noneMessage', \"No source actions available\"),\n\t\t\t{\n\t\t\t\tkind: CodeActionKind.Source.contains(args.kind) ? args.kind : CodeActionKind.Empty,\n\t\t\t\tincludeSourceActions: true,\n\t\t\t\tonlyIncludePreferredActions: args.preferred,\n\t\t\t},\n\t\t\targs.apply);\n\t}\n}\n\nexport class OrganizeImportsAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.organizeImports';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OrganizeImportsAction.Id,\n\t\t\tlabel: nls.localize('organizeImports.label', \"Organize Imports\"),\n\t\t\talias: 'Organize Imports',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_O,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn showCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"),\n\t\t\t{ kind: CodeActionKind.SourceOrganizeImports, includeSourceActions: true },\n\t\t\tCodeActionAutoApply.IfSingle);\n\t}\n}\n\nexport class FixAllAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.fixAll';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: FixAllAction.Id,\n\t\t\tlabel: nls.localize('fixAll.label', \"Fix All\"),\n\t\t\talias: 'Fix All',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn showCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('fixAll.noneMessage', \"No fix all action available\"),\n\t\t\t{ kind: CodeActionKind.SourceFixAll, includeSourceActions: true },\n\t\t\tCodeActionAutoApply.IfSingle);\n\t}\n}\n\nexport class AutoFixAction extends EditorAction {\n\n\tstatic readonly Id = 'editor.action.autoFix';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: AutoFixAction.Id,\n\t\t\tlabel: nls.localize('autoFix.label', \"Auto Fix...\"),\n\t\t\talias: 'Auto Fix',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.QuickFix)),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.US_DOT,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.US_DOT\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn showCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"),\n\t\t\t{\n\t\t\t\tkind: CodeActionKind.QuickFix,\n\t\t\t\tonlyIncludePreferredActions: true\n\t\t\t},\n\t\t\tCodeActionAutoApply.IfSingle);\n\t}\n}\n"]}]}