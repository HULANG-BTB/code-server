{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/comment/comment.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/comment/comment.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorContextKeys\", \"vs/editor/contrib/comment/blockCommentCommand\", \"vs/editor/contrib/comment/lineCommentCommand\", \"vs/platform/actions/common/actions\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, nls, keyCodes_1, editorExtensions_1, editorContextKeys_1, blockCommentCommand_1, lineCommentCommand_1, actions_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CommentLineAction extends editorExtensions_1.EditorAction {\n        constructor(type, opts) {\n            super(opts);\n            this._type = type;\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            let model = editor.getModel();\n            let commands = [];\n            let selections = editor.getSelections();\n            let opts = model.getOptions();\n            for (const selection of selections) {\n                commands.push(new lineCommentCommand_1.LineCommentCommand(selection, opts.tabSize, this._type));\n            }\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    }\n    class ToggleCommentLineAction extends CommentLineAction {\n        constructor() {\n            super(lineCommentCommand_1.Type.Toggle, {\n                id: 'editor.action.commentLine',\n                label: nls.localize('comment.line', \"Toggle Line Comment\"),\n                alias: 'Toggle Line Comment',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_SLASH,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '5_insert',\n                    title: nls.localize({ key: 'miToggleLineComment', comment: ['&& denotes a mnemonic'] }, \"&&Toggle Line Comment\"),\n                    order: 1\n                }\n            });\n        }\n    }\n    class AddLineCommentAction extends CommentLineAction {\n        constructor() {\n            super(lineCommentCommand_1.Type.ForceAdd, {\n                id: 'editor.action.addCommentLine',\n                label: nls.localize('comment.line.add', \"Add Line Comment\"),\n                alias: 'Add Line Comment',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C),\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    class RemoveLineCommentAction extends CommentLineAction {\n        constructor() {\n            super(lineCommentCommand_1.Type.ForceRemove, {\n                id: 'editor.action.removeCommentLine',\n                label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n                alias: 'Remove Line Comment',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_U),\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    class BlockCommentAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.blockComment',\n                label: nls.localize('comment.block', \"Toggle Block Comment\"),\n                alias: 'Toggle Block Comment',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_A,\n                    linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_A },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '5_insert',\n                    title: nls.localize({ key: 'miToggleBlockComment', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Block Comment\"),\n                    order: 2\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            let commands = [];\n            let selections = editor.getSelections();\n            for (const selection of selections) {\n                commands.push(new blockCommentCommand_1.BlockCommentCommand(selection));\n            }\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    }\n    editorExtensions_1.registerEditorAction(ToggleCommentLineAction);\n    editorExtensions_1.registerEditorAction(AddLineCommentAction);\n    editorExtensions_1.registerEditorAction(RemoveLineCommentAction);\n    editorExtensions_1.registerEditorAction(BlockCommentAction);\n});\n",null]}