{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/processes.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Source;\n    (function (Source) {\n        Source[Source[\"stdout\"] = 0] = \"stdout\";\n        Source[Source[\"stderr\"] = 1] = \"stderr\";\n    })(Source = exports.Source || (exports.Source = {}));\n    var TerminateResponseCode;\n    (function (TerminateResponseCode) {\n        TerminateResponseCode[TerminateResponseCode[\"Success\"] = 0] = \"Success\";\n        TerminateResponseCode[TerminateResponseCode[\"Unknown\"] = 1] = \"Unknown\";\n        TerminateResponseCode[TerminateResponseCode[\"AccessDenied\"] = 2] = \"AccessDenied\";\n        TerminateResponseCode[TerminateResponseCode[\"ProcessNotFound\"] = 3] = \"ProcessNotFound\";\n    })(TerminateResponseCode = exports.TerminateResponseCode || (exports.TerminateResponseCode = {}));\n    /**\n     * Sanitizes a VS Code process environment by removing all Electron/VS Code-related values.\n     */\n    function sanitizeProcessEnvironment(env, ...preserve) {\n        const set = preserve.reduce((set, key) => {\n            set[key] = true;\n            return set;\n        }, {});\n        const keysToRemove = [\n            /^ELECTRON_.+$/,\n            /^GOOGLE_API_KEY$/,\n            /^VSCODE_.+$/,\n            /^SNAP(|_.*)$/\n        ];\n        const envKeys = Object.keys(env);\n        envKeys\n            .filter(key => !set[key])\n            .forEach(envKey => {\n            for (let i = 0; i < keysToRemove.length; i++) {\n                if (envKey.search(keysToRemove[i]) !== -1) {\n                    delete env[envKey];\n                    break;\n                }\n            }\n        });\n    }\n    exports.sanitizeProcessEnvironment = sanitizeProcessEnvironment;\n});\n",null]}