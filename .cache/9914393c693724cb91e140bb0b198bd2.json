{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dnd.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/browser/browser\", \"vs/base/common/keyCodes\", \"vs/editor/browser/editorBrowser\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorCommon\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\", \"vs/editor/contrib/dnd/dragAndDropCommand\", \"vs/editor/common/model/textModel\", \"vs/css!./dnd\"], function (require, exports, lifecycle_1, browser_1, keyCodes_1, editorBrowser_1, editorExtensions_1, editorCommon, position_1, range_1, selection_1, dragAndDropCommand_1, textModel_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function hasTriggerModifier(e) {\n        if (browser_1.isMacintosh) {\n            return e.altKey;\n        }\n        else {\n            return e.ctrlKey;\n        }\n    }\n    class DragAndDropController {\n        constructor(editor) {\n            this._editor = editor;\n            this._toUnhook = [];\n            this._toUnhook.push(this._editor.onMouseDown((e) => this._onEditorMouseDown(e)));\n            this._toUnhook.push(this._editor.onMouseUp((e) => this._onEditorMouseUp(e)));\n            this._toUnhook.push(this._editor.onMouseDrag((e) => this._onEditorMouseDrag(e)));\n            this._toUnhook.push(this._editor.onMouseDrop((e) => this._onEditorMouseDrop(e)));\n            this._toUnhook.push(this._editor.onKeyDown((e) => this.onEditorKeyDown(e)));\n            this._toUnhook.push(this._editor.onKeyUp((e) => this.onEditorKeyUp(e)));\n            this._toUnhook.push(this._editor.onDidBlurEditorWidget(() => this.onEditorBlur()));\n            this._dndDecorationIds = [];\n            this._mouseDown = false;\n            this._modifierPressed = false;\n            this._dragSelection = null;\n        }\n        static get(editor) {\n            return editor.getContribution(DragAndDropController.ID);\n        }\n        onEditorBlur() {\n            this._removeDecoration();\n            this._dragSelection = null;\n            this._mouseDown = false;\n            this._modifierPressed = false;\n        }\n        onEditorKeyDown(e) {\n            if (!this._editor.getConfiguration().dragAndDrop) {\n                return;\n            }\n            if (hasTriggerModifier(e)) {\n                this._modifierPressed = true;\n            }\n            if (this._mouseDown && hasTriggerModifier(e)) {\n                this._editor.updateOptions({\n                    mouseStyle: 'copy'\n                });\n            }\n        }\n        onEditorKeyUp(e) {\n            if (!this._editor.getConfiguration().dragAndDrop) {\n                return;\n            }\n            if (hasTriggerModifier(e)) {\n                this._modifierPressed = false;\n            }\n            if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n                this._editor.updateOptions({\n                    mouseStyle: 'default'\n                });\n            }\n        }\n        _onEditorMouseDown(mouseEvent) {\n            this._mouseDown = true;\n        }\n        _onEditorMouseUp(mouseEvent) {\n            this._mouseDown = false;\n            // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n            this._editor.updateOptions({\n                mouseStyle: 'text'\n            });\n        }\n        _onEditorMouseDrag(mouseEvent) {\n            let target = mouseEvent.target;\n            if (this._dragSelection === null) {\n                const selections = this._editor.getSelections() || [];\n                let possibleSelections = selections.filter(selection => target.position && selection.containsPosition(target.position));\n                if (possibleSelections.length === 1) {\n                    this._dragSelection = possibleSelections[0];\n                }\n                else {\n                    return;\n                }\n            }\n            if (hasTriggerModifier(mouseEvent.event)) {\n                this._editor.updateOptions({\n                    mouseStyle: 'copy'\n                });\n            }\n            else {\n                this._editor.updateOptions({\n                    mouseStyle: 'default'\n                });\n            }\n            if (target.position) {\n                if (this._dragSelection.containsPosition(target.position)) {\n                    this._removeDecoration();\n                }\n                else {\n                    this.showAt(target.position);\n                }\n            }\n        }\n        _onEditorMouseDrop(mouseEvent) {\n            if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n                let newCursorPosition = new position_1.Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n                if (this._dragSelection === null) {\n                    let newSelections = null;\n                    if (mouseEvent.event.shiftKey) {\n                        let primarySelection = this._editor.getSelection();\n                        if (primarySelection) {\n                            const { selectionStartLineNumber, selectionStartColumn } = primarySelection;\n                            newSelections = [new selection_1.Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition.lineNumber, newCursorPosition.column)];\n                        }\n                    }\n                    else {\n                        newSelections = (this._editor.getSelections() || []).map(selection => {\n                            if (selection.containsPosition(newCursorPosition)) {\n                                return new selection_1.Selection(newCursorPosition.lineNumber, newCursorPosition.column, newCursorPosition.lineNumber, newCursorPosition.column);\n                            }\n                            else {\n                                return selection;\n                            }\n                        });\n                    }\n                    // Use `mouse` as the source instead of `api`.\n                    this._editor.setSelections(newSelections || [], 'mouse');\n                }\n                else if (!this._dragSelection.containsPosition(newCursorPosition) ||\n                    ((hasTriggerModifier(mouseEvent.event) ||\n                        this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition) || this._dragSelection.getStartPosition().equals(newCursorPosition)) // we allow users to paste content beside the selection\n                    )) {\n                    this._editor.pushUndoStop();\n                    this._editor.executeCommand(DragAndDropController.ID, new dragAndDropCommand_1.DragAndDropCommand(this._dragSelection, newCursorPosition, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n                    this._editor.pushUndoStop();\n                }\n            }\n            this._editor.updateOptions({\n                mouseStyle: 'text'\n            });\n            this._removeDecoration();\n            this._dragSelection = null;\n            this._mouseDown = false;\n        }\n        showAt(position) {\n            let newDecorations = [{\n                    range: new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column),\n                    options: DragAndDropController._DECORATION_OPTIONS\n                }];\n            this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n            this._editor.revealPosition(position, editorCommon.ScrollType.Immediate);\n        }\n        _removeDecoration() {\n            this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n        }\n        _hitContent(target) {\n            return target.type === editorBrowser_1.MouseTargetType.CONTENT_TEXT ||\n                target.type === editorBrowser_1.MouseTargetType.CONTENT_EMPTY;\n        }\n        _hitMargin(target) {\n            return target.type === editorBrowser_1.MouseTargetType.GUTTER_GLYPH_MARGIN ||\n                target.type === editorBrowser_1.MouseTargetType.GUTTER_LINE_NUMBERS ||\n                target.type === editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS;\n        }\n        getId() {\n            return DragAndDropController.ID;\n        }\n        dispose() {\n            this._removeDecoration();\n            this._dragSelection = null;\n            this._mouseDown = false;\n            this._modifierPressed = false;\n            this._toUnhook = lifecycle_1.dispose(this._toUnhook);\n        }\n    }\n    DragAndDropController.ID = 'editor.contrib.dragAndDrop';\n    DragAndDropController.TRIGGER_KEY_VALUE = browser_1.isMacintosh ? keyCodes_1.KeyCode.Alt : keyCodes_1.KeyCode.Ctrl;\n    DragAndDropController._DECORATION_OPTIONS = textModel_1.ModelDecorationOptions.register({\n        className: 'dnd-target'\n    });\n    exports.DragAndDropController = DragAndDropController;\n    editorExtensions_1.registerEditorContribution(DragAndDropController);\n});\n",null]}