{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar crypto = require(\"crypto\");\nvar fs = require(\"fs\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar integrity_1 = require(\"vs/workbench/services/integrity/common/integrity\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar IntegrityStorage = /** @class */ (function () {\n    function IntegrityStorage(storageService) {\n        this.storageService = storageService;\n        this.value = this._read();\n    }\n    IntegrityStorage.prototype._read = function () {\n        var jsonValue = this.storageService.get(IntegrityStorage.KEY, storage_1.StorageScope.GLOBAL);\n        if (!jsonValue) {\n            return null;\n        }\n        try {\n            return JSON.parse(jsonValue);\n        }\n        catch (err) {\n            return null;\n        }\n    };\n    IntegrityStorage.prototype.get = function () {\n        return this.value;\n    };\n    IntegrityStorage.prototype.set = function (data) {\n        this.value = data;\n        this.storageService.store(IntegrityStorage.KEY, JSON.stringify(this.value), storage_1.StorageScope.GLOBAL);\n    };\n    IntegrityStorage.KEY = 'integrityService';\n    return IntegrityStorage;\n}());\nvar IntegrityServiceImpl = /** @class */ (function () {\n    function IntegrityServiceImpl(notificationService, storageService, lifecycleService) {\n        var _this = this;\n        this.notificationService = notificationService;\n        this.lifecycleService = lifecycleService;\n        this._storage = new IntegrityStorage(storageService);\n        this._isPurePromise = this._isPure();\n        this.isPure().then(function (r) {\n            if (r.isPure) {\n                // all is good\n                return;\n            }\n            _this._prompt();\n        });\n    }\n    IntegrityServiceImpl.prototype._prompt = function () {\n        var _this = this;\n        var storedData = this._storage.get();\n        if (storedData && storedData.dontShowPrompt && storedData.commit === product_1.default.commit) {\n            return; // Do not prompt\n        }\n        this.notificationService.prompt(severity_1.default.Warning, nls.localize('integrity.prompt', \"Your {0} installation appears to be corrupt. Please reinstall.\", product_1.default.nameShort), [\n            {\n                label: nls.localize('integrity.moreInformation', \"More Information\"),\n                run: function () { return window.open(uri_1.URI.parse(product_1.default.checksumFailMoreInfoUrl).toString(true)); }\n            },\n            {\n                label: nls.localize('integrity.dontShowAgain', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () { return _this._storage.set({ dontShowPrompt: true, commit: product_1.default.commit }); }\n            }\n        ], { sticky: true });\n    };\n    IntegrityServiceImpl.prototype.isPure = function () {\n        return this._isPurePromise;\n    };\n    IntegrityServiceImpl.prototype._isPure = function () {\n        var _this = this;\n        var expectedChecksums = product_1.default.checksums || {};\n        return this.lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually).then(function () {\n            var asyncResults = Object.keys(expectedChecksums).map(function (filename) {\n                return _this._resolve(filename, expectedChecksums[filename]);\n            });\n            return Promise.all(asyncResults).then(function (allResults) {\n                var isPure = true;\n                for (var i = 0, len = allResults.length; i < len; i++) {\n                    if (!allResults[i].isPure) {\n                        isPure = false;\n                        break;\n                    }\n                }\n                return {\n                    isPure: isPure,\n                    proof: allResults\n                };\n            });\n        });\n    };\n    IntegrityServiceImpl.prototype._resolve = function (filename, expected) {\n        var _this = this;\n        var fileUri = uri_1.URI.parse(require.toUrl(filename));\n        return new Promise(function (resolve, reject) {\n            fs.readFile(fileUri.fsPath, function (err, buff) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(IntegrityServiceImpl._createChecksumPair(fileUri, _this._computeChecksum(buff), expected));\n            });\n        });\n    };\n    IntegrityServiceImpl.prototype._computeChecksum = function (buff) {\n        var hash = crypto\n            .createHash('md5')\n            .update(buff)\n            .digest('base64')\n            .replace(/=+$/, '');\n        return hash;\n    };\n    IntegrityServiceImpl._createChecksumPair = function (uri, actual, expected) {\n        return {\n            uri: uri,\n            actual: actual,\n            expected: expected,\n            isPure: (actual === expected)\n        };\n    };\n    IntegrityServiceImpl = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, storage_1.IStorageService),\n        tslib_1.__param(2, lifecycle_1.ILifecycleService)\n    ], IntegrityServiceImpl);\n    return IntegrityServiceImpl;\n}());\nexports.IntegrityServiceImpl = IntegrityServiceImpl;\nextensions_1.registerSingleton(integrity_1.IIntegrityService, IntegrityServiceImpl, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/integrity/node/integrityService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport Severity from 'vs/base/common/severity';\nimport { URI } from 'vs/base/common/uri';\nimport { ChecksumPair, IIntegrityService, IntegrityTestResult } from 'vs/workbench/services/integrity/common/integrity';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport product from 'vs/platform/product/node/product';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\ninterface IStorageData {\n\tdontShowPrompt: boolean;\n\tcommit: string | undefined;\n}\n\nclass IntegrityStorage {\n\tprivate static readonly KEY = 'integrityService';\n\n\tprivate storageService: IStorageService;\n\tprivate value: IStorageData | null;\n\n\tconstructor(storageService: IStorageService) {\n\t\tthis.storageService = storageService;\n\t\tthis.value = this._read();\n\t}\n\n\tprivate _read(): IStorageData | null {\n\t\tlet jsonValue = this.storageService.get(IntegrityStorage.KEY, StorageScope.GLOBAL);\n\t\tif (!jsonValue) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn JSON.parse(jsonValue);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tget(): IStorageData | null {\n\t\treturn this.value;\n\t}\n\n\tset(data: IStorageData | null): void {\n\t\tthis.value = data;\n\t\tthis.storageService.store(IntegrityStorage.KEY, JSON.stringify(this.value), StorageScope.GLOBAL);\n\t}\n}\n\nexport class IntegrityServiceImpl implements IIntegrityService {\n\n\t_serviceBrand: any;\n\n\tprivate _storage: IntegrityStorage;\n\tprivate _isPurePromise: Promise<IntegrityTestResult>;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tthis._storage = new IntegrityStorage(storageService);\n\n\t\tthis._isPurePromise = this._isPure();\n\n\t\tthis.isPure().then(r => {\n\t\t\tif (r.isPure) {\n\t\t\t\t// all is good\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._prompt();\n\t\t});\n\t}\n\n\tprivate _prompt(): void {\n\t\tconst storedData = this._storage.get();\n\t\tif (storedData && storedData.dontShowPrompt && storedData.commit === product.commit) {\n\t\t\treturn; // Do not prompt\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Warning,\n\t\t\tnls.localize('integrity.prompt', \"Your {0} installation appears to be corrupt. Please reinstall.\", product.nameShort),\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('integrity.moreInformation', \"More Information\"),\n\t\t\t\t\trun: () => window.open(URI.parse(product.checksumFailMoreInfoUrl).toString(true))\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('integrity.dontShowAgain', \"Don't Show Again\"),\n\t\t\t\t\tisSecondary: true,\n\t\t\t\t\trun: () => this._storage.set({ dontShowPrompt: true, commit: product.commit })\n\t\t\t\t}\n\t\t\t],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n\n\tisPure(): Promise<IntegrityTestResult> {\n\t\treturn this._isPurePromise;\n\t}\n\n\tprivate _isPure(): Promise<IntegrityTestResult> {\n\t\tconst expectedChecksums = product.checksums || {};\n\n\t\treturn this.lifecycleService.when(LifecyclePhase.Eventually).then(() => {\n\t\t\tlet asyncResults: Promise<ChecksumPair>[] = Object.keys(expectedChecksums).map((filename) => {\n\t\t\t\treturn this._resolve(filename, expectedChecksums[filename]);\n\t\t\t});\n\n\t\t\treturn Promise.all(asyncResults).then<IntegrityTestResult>((allResults) => {\n\t\t\t\tlet isPure = true;\n\t\t\t\tfor (let i = 0, len = allResults.length; i < len; i++) {\n\t\t\t\t\tif (!allResults[i].isPure) {\n\t\t\t\t\t\tisPure = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisPure: isPure,\n\t\t\t\t\tproof: allResults\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _resolve(filename: string, expected: string): Promise<ChecksumPair> {\n\t\tlet fileUri = URI.parse(require.toUrl(filename));\n\t\treturn new Promise<ChecksumPair>((resolve, reject) => {\n\t\t\tfs.readFile(fileUri.fsPath, (err, buff) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject(err);\n\t\t\t\t}\n\t\t\t\tresolve(IntegrityServiceImpl._createChecksumPair(fileUri, this._computeChecksum(buff), expected));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _computeChecksum(buff: Buffer): string {\n\t\tlet hash = crypto\n\t\t\t.createHash('md5')\n\t\t\t.update(buff)\n\t\t\t.digest('base64')\n\t\t\t.replace(/=+$/, '');\n\n\t\treturn hash;\n\t}\n\n\tprivate static _createChecksumPair(uri: URI, actual: string, expected: string): ChecksumPair {\n\t\treturn {\n\t\t\turi: uri,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tisPure: (actual === expected)\n\t\t};\n\t}\n}\n\nregisterSingleton(IIntegrityService, IntegrityServiceImpl, true);"]}]}