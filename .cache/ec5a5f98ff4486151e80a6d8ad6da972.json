{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar nls = require(\"vs/nls\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar issueActions_1 = require(\"vs/workbench/contrib/issue/electron-browser/issueActions\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar issue_1 = require(\"vs/workbench/contrib/issue/electron-browser/issue\");\nvar issueService_1 = require(\"vs/workbench/contrib/issue/electron-browser/issueService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar issue_2 = require(\"vs/platform/issue/common/issue\");\nvar helpCategory = nls.localize('help', \"Help\");\nvar workbenchActionsRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nif (!!product_1.default.reportIssueUrl) {\n    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.OpenIssueReporterAction, issueActions_1.OpenIssueReporterAction.ID, issueActions_1.OpenIssueReporterAction.LABEL), 'Help: Open Issue Reporter', helpCategory);\n    workbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.ReportPerformanceIssueUsingReporterAction, issueActions_1.ReportPerformanceIssueUsingReporterAction.ID, issueActions_1.ReportPerformanceIssueUsingReporterAction.LABEL), 'Help: Report Performance Issue', helpCategory);\n}\nvar developerCategory = nls.localize('developer', \"Developer\");\nworkbenchActionsRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(issueActions_1.OpenProcessExplorer, issueActions_1.OpenProcessExplorer.ID, issueActions_1.OpenProcessExplorer.LABEL), 'Developer: Open Process Explorer', developerCategory);\nextensions_1.registerSingleton(issue_1.IWorkbenchIssueService, issueService_1.WorkbenchIssueService, true);\ncommands_1.CommandsRegistry.registerCommand('_issues.getSystemStatus', function (accessor) {\n    return accessor.get(issue_2.IIssueService).getSystemStatus();\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/issue/electron-browser/issue.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,iEAAgE;AAChE,4BAA8B;AAC9B,4DAAuD;AACvD,8DAA0E;AAC1E,uDAAmF;AACnF,yFAAmK;AACnK,0EAAgF;AAChF,2EAA2F;AAC3F,yFAAiG;AACjG,iEAAwE;AACxE,wDAA+D;AAE/D,IAAM,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAClD,IAAM,wBAAwB,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAU,CAAC,gBAAgB,CAAC,CAAC;AAEpG,IAAI,CAAC,CAAC,iBAAO,CAAC,cAAc,EAAE;IAC7B,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,sCAAuB,EAAE,sCAAuB,CAAC,EAAE,EAAE,sCAAuB,CAAC,KAAK,CAAC,EAAE,2BAA2B,EAAE,YAAY,CAAC,CAAC;IAC1M,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,wDAAyC,EAAE,wDAAyC,CAAC,EAAE,EAAE,wDAAyC,CAAC,KAAK,CAAC,EAAE,gCAAgC,EAAE,YAAY,CAAC,CAAC;CACrQ;AAED,IAAM,iBAAiB,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AACjE,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,kCAAmB,EAAE,kCAAmB,CAAC,EAAE,EAAE,kCAAmB,CAAC,KAAK,CAAC,EAAE,kCAAkC,EAAE,iBAAiB,CAAC,CAAC;AAE1M,8BAAiB,CAAC,8BAAsB,EAAE,oCAAqB,EAAE,IAAI,CAAC,CAAC;AAEvE,2BAAgB,CAAC,eAAe,CAAC,yBAAyB,EAAE,UAAC,QAAQ;IACpE,OAAO,QAAQ,CAAC,GAAG,CAAC,qBAAa,CAAC,CAAC,eAAe,EAAE,CAAC;AACtD,CAAC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as nls from 'vs/nls';\nimport product from 'vs/platform/product/node/product';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actions';\nimport { OpenIssueReporterAction, ReportPerformanceIssueUsingReporterAction, OpenProcessExplorer } from 'vs/workbench/contrib/issue/electron-browser/issueActions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchIssueService } from 'vs/workbench/contrib/issue/electron-browser/issue';\nimport { WorkbenchIssueService } from 'vs/workbench/contrib/issue/electron-browser/issueService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IIssueService } from 'vs/platform/issue/common/issue';\n\nconst helpCategory = nls.localize('help', \"Help\");\nconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\n\nif (!!product.reportIssueUrl) {\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenIssueReporterAction, OpenIssueReporterAction.ID, OpenIssueReporterAction.LABEL), 'Help: Open Issue Reporter', helpCategory);\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(ReportPerformanceIssueUsingReporterAction, ReportPerformanceIssueUsingReporterAction.ID, ReportPerformanceIssueUsingReporterAction.LABEL), 'Help: Report Performance Issue', helpCategory);\n}\n\nconst developerCategory = nls.localize('developer', \"Developer\");\nworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(OpenProcessExplorer, OpenProcessExplorer.ID, OpenProcessExplorer.LABEL), 'Developer: Open Process Explorer', developerCategory);\n\nregisterSingleton(IWorkbenchIssueService, WorkbenchIssueService, true);\n\nCommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n\treturn accessor.get(IIssueService).getSystemStatus();\n});"]}]}