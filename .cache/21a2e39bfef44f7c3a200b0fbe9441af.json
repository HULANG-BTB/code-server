{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/mainProcessService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/mainProcessService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar ipc_electron_browser_1 = require(\"vs/base/parts/ipc/electron-browser/ipc.electron-browser\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nexports.IMainProcessService = instantiation_1.createDecorator('mainProcessService');\nvar MainProcessService = /** @class */ (function (_super) {\n    tslib_1.__extends(MainProcessService, _super);\n    function MainProcessService(windowId) {\n        var _this = _super.call(this) || this;\n        _this.mainProcessConnection = _this._register(new ipc_electron_browser_1.Client(\"window:\" + windowId));\n        return _this;\n    }\n    MainProcessService.prototype.getChannel = function (channelName) {\n        return this.mainProcessConnection.getChannel(channelName);\n    };\n    MainProcessService.prototype.registerChannel = function (channelName, channel) {\n        this.mainProcessConnection.registerChannel(channelName, channel);\n    };\n    return MainProcessService;\n}(lifecycle_1.Disposable));\nexports.MainProcessService = MainProcessService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/mainProcessService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/mainProcessService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,gFAAoG;AAEpG,gGAAiF;AACjF,sDAAsD;AAEzC,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;AAW9F;IAAwC,8CAAU;IAMjD,4BACC,QAAgB;QADjB,YAGC,iBAAO,SAGP;QADA,KAAI,CAAC,qBAAqB,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,6BAAM,CAAC,YAAU,QAAU,CAAC,CAAC,CAAC;;IAC/E,CAAC;IAED,uCAAU,GAAV,UAAW,WAAmB;QAC7B,OAAO,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAC3D,CAAC;IAED,4CAAe,GAAf,UAAgB,WAAmB,EAAE,OAA+B;QACnE,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IACF,yBAAC;AAAD,CAAC,AArBD,CAAwC,sBAAU,GAqBjD;AArBY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/electron-browser/ipc.electron-browser';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport const IMainProcessService = createDecorator<IMainProcessService>('mainProcessService');\n\nexport interface IMainProcessService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tgetChannel(channelName: string): IChannel;\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void;\n}\n\nexport class MainProcessService extends Disposable implements IMainProcessService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate mainProcessConnection: Client;\n\n\tconstructor(\n\t\twindowId: number\n\t) {\n\t\tsuper();\n\n\t\tthis.mainProcessConnection = this._register(new Client(`window:${windowId}`));\n\t}\n\n\tgetChannel(channelName: string): IChannel {\n\t\treturn this.mainProcessConnection.getChannel(channelName);\n\t}\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void {\n\t\tthis.mainProcessConnection.registerChannel(channelName, channel);\n\t}\n}"]}]}