{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/node/workspacesIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/workspaces/node/workspacesIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\"], function (require, exports, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class WorkspacesChannel {\n        constructor(service) {\n            this.service = service;\n        }\n        listen(_, event) {\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command, arg) {\n            switch (command) {\n                case 'createUntitledWorkspace': {\n                    const rawFolders = arg[0];\n                    const remoteAuthority = arg[1];\n                    let folders = undefined;\n                    if (Array.isArray(rawFolders)) {\n                        folders = rawFolders.map(rawFolder => {\n                            return {\n                                uri: uri_1.URI.revive(rawFolder.uri),\n                                name: rawFolder.name\n                            };\n                        });\n                    }\n                    return this.service.createUntitledWorkspace(folders, remoteAuthority);\n                }\n                case 'deleteUntitledWorkspace': {\n                    const w = arg;\n                    return this.service.deleteUntitledWorkspace({ id: w.id, configPath: uri_1.URI.revive(w.configPath) });\n                }\n                case 'getWorkspaceIdentifier': {\n                    return this.service.getWorkspaceIdentifier(uri_1.URI.revive(arg));\n                }\n            }\n            throw new Error(`Call not found: ${command}`);\n        }\n    }\n    exports.WorkspacesChannel = WorkspacesChannel;\n});\n",null]}