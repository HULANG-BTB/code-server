{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types = require(\"vs/base/common/types\");\nvar ValidationState;\n(function (ValidationState) {\n    ValidationState[ValidationState[\"OK\"] = 0] = \"OK\";\n    ValidationState[ValidationState[\"Info\"] = 1] = \"Info\";\n    ValidationState[ValidationState[\"Warning\"] = 2] = \"Warning\";\n    ValidationState[ValidationState[\"Error\"] = 3] = \"Error\";\n    ValidationState[ValidationState[\"Fatal\"] = 4] = \"Fatal\";\n})(ValidationState = exports.ValidationState || (exports.ValidationState = {}));\nvar ValidationStatus = /** @class */ (function () {\n    function ValidationStatus() {\n        this._state = ValidationState.OK;\n    }\n    Object.defineProperty(ValidationStatus.prototype, \"state\", {\n        get: function () {\n            return this._state;\n        },\n        set: function (value) {\n            if (value > this._state) {\n                this._state = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ValidationStatus.prototype.isOK = function () {\n        return this._state === ValidationState.OK;\n    };\n    ValidationStatus.prototype.isFatal = function () {\n        return this._state === ValidationState.Fatal;\n    };\n    return ValidationStatus;\n}());\nexports.ValidationStatus = ValidationStatus;\nvar Parser = /** @class */ (function () {\n    function Parser(problemReporter) {\n        this._problemReporter = problemReporter;\n    }\n    Parser.prototype.reset = function () {\n        this._problemReporter.status.state = ValidationState.OK;\n    };\n    Object.defineProperty(Parser.prototype, \"problemReporter\", {\n        get: function () {\n            return this._problemReporter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Parser.prototype.info = function (message) {\n        this._problemReporter.info(message);\n    };\n    Parser.prototype.warn = function (message) {\n        this._problemReporter.warn(message);\n    };\n    Parser.prototype.error = function (message) {\n        this._problemReporter.error(message);\n    };\n    Parser.prototype.fatal = function (message) {\n        this._problemReporter.fatal(message);\n    };\n    Parser.merge = function (destination, source, overwrite) {\n        var _this = this;\n        Object.keys(source).forEach(function (key) {\n            var destValue = destination[key];\n            var sourceValue = source[key];\n            if (Types.isUndefined(sourceValue)) {\n                return;\n            }\n            if (Types.isUndefined(destValue)) {\n                destination[key] = sourceValue;\n            }\n            else {\n                if (overwrite) {\n                    if (Types.isObject(destValue) && Types.isObject(sourceValue)) {\n                        _this.merge(destValue, sourceValue, overwrite);\n                    }\n                    else {\n                        destination[key] = sourceValue;\n                    }\n                }\n            }\n        });\n    };\n    return Parser;\n}());\nexports.Parser = Parser;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/parsers.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4CAA8C;AAE9C,IAAkB,eAMjB;AAND,WAAkB,eAAe;IAChC,iDAAM,CAAA;IACN,qDAAQ,CAAA;IACR,2DAAW,CAAA;IACX,uDAAS,CAAA;IACT,uDAAS,CAAA;AACV,CAAC,EANiB,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAMhC;AAED;IAGC;QACC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,EAAE,CAAC;IAClC,CAAC;IAED,sBAAW,mCAAK;aAAhB;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAiB,KAAsB;YACtC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;gBACxB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aACpB;QACF,CAAC;;;OANA;IAQM,+BAAI,GAAX;QACC,OAAO,IAAI,CAAC,MAAM,KAAK,eAAe,CAAC,EAAE,CAAC;IAC3C,CAAC;IAEM,kCAAO,GAAd;QACC,OAAO,IAAI,CAAC,MAAM,KAAK,eAAe,CAAC,KAAK,CAAC;IAC9C,CAAC;IACF,uBAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,4CAAgB;AAkC7B;IAIC,gBAAY,eAAiC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,sBAAK,GAAZ;QACC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,GAAG,eAAe,CAAC,EAAE,CAAC;IACzD,CAAC;IAED,sBAAW,mCAAe;aAA1B;YACC,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC9B,CAAC;;;OAAA;IAEM,qBAAI,GAAX,UAAY,OAAe;QAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,qBAAI,GAAX,UAAY,OAAe;QAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,sBAAK,GAAZ,UAAa,OAAe;QAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,sBAAK,GAAZ,UAAa,OAAe;QAC3B,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEgB,YAAK,GAAtB,UAA0B,WAAc,EAAE,MAAS,EAAE,SAAkB;QAAvE,iBAmBC;QAlBA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YACvC,IAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;YACnC,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;gBACnC,OAAO;aACP;YACD,IAAI,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;gBACjC,WAAW,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;aAC/B;iBAAM;gBACN,IAAI,SAAS,EAAE;oBACd,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;wBAC7D,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;qBAC9C;yBAAM;wBACN,WAAW,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;qBAC/B;iBACD;aACD;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IACF,aAAC;AAAD,CAAC,AApDD,IAoDC;AApDqB,wBAAM","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as Types from 'vs/base/common/types';\n\nexport const enum ValidationState {\n\tOK = 0,\n\tInfo = 1,\n\tWarning = 2,\n\tError = 3,\n\tFatal = 4\n}\n\nexport class ValidationStatus {\n\tprivate _state: ValidationState;\n\n\tconstructor() {\n\t\tthis._state = ValidationState.OK;\n\t}\n\n\tpublic get state(): ValidationState {\n\t\treturn this._state;\n\t}\n\n\tpublic set state(value: ValidationState) {\n\t\tif (value > this._state) {\n\t\t\tthis._state = value;\n\t\t}\n\t}\n\n\tpublic isOK(): boolean {\n\t\treturn this._state === ValidationState.OK;\n\t}\n\n\tpublic isFatal(): boolean {\n\t\treturn this._state === ValidationState.Fatal;\n\t}\n}\n\nexport interface IProblemReporter {\n\tinfo(message: string): void;\n\twarn(message: string): void;\n\terror(message: string): void;\n\tfatal(message: string): void;\n\tstatus: ValidationStatus;\n}\n\nexport abstract class Parser {\n\n\tprivate _problemReporter: IProblemReporter;\n\n\tconstructor(problemReporter: IProblemReporter) {\n\t\tthis._problemReporter = problemReporter;\n\t}\n\n\tpublic reset(): void {\n\t\tthis._problemReporter.status.state = ValidationState.OK;\n\t}\n\n\tpublic get problemReporter(): IProblemReporter {\n\t\treturn this._problemReporter;\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._problemReporter.info(message);\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._problemReporter.warn(message);\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._problemReporter.error(message);\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._problemReporter.fatal(message);\n\t}\n\n\tprotected static merge<T>(destination: T, source: T, overwrite: boolean): void {\n\t\tObject.keys(source).forEach((key: string) => {\n\t\t\tconst destValue = destination[key];\n\t\t\tconst sourceValue = source[key];\n\t\t\tif (Types.isUndefined(sourceValue)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (Types.isUndefined(destValue)) {\n\t\t\t\tdestination[key] = sourceValue;\n\t\t\t} else {\n\t\t\t\tif (overwrite) {\n\t\t\t\t\tif (Types.isObject(destValue) && Types.isObject(sourceValue)) {\n\t\t\t\t\t\tthis.merge(destValue, sourceValue, overwrite);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestination[key] = sourceValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}"]}]}