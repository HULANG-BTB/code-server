{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/services/backup/common/backup\", \"vs/base/common/lifecycle\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/workbench/services/untitled/common/untitledEditorService\", \"vs/platform/configuration/common/configuration\", \"vs/platform/files/common/files\"], function (require, exports, backup_1, lifecycle_1, textfiles_1, untitledEditorService_1, configuration_1, files_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const AUTO_SAVE_AFTER_DELAY_DISABLED_TIME = files_1.CONTENT_CHANGE_EVENT_BUFFER_DELAY + 500;\n    let BackupModelTracker = class BackupModelTracker extends lifecycle_1.Disposable {\n        constructor(backupFileService, textFileService, untitledEditorService, configurationService) {\n            super();\n            this.backupFileService = backupFileService;\n            this.textFileService = textFileService;\n            this.untitledEditorService = untitledEditorService;\n            this.configurationService = configurationService;\n            this.registerListeners();\n        }\n        registerListeners() {\n            // Listen for text file model changes\n            this._register(this.textFileService.models.onModelContentChanged((e) => this.onTextFileModelChanged(e)));\n            this._register(this.textFileService.models.onModelSaved((e) => this.discardBackup(e.resource)));\n            this._register(this.textFileService.models.onModelDisposed((e) => this.discardBackup(e)));\n            // Listen for untitled model changes\n            this._register(this.untitledEditorService.onDidChangeContent((e) => this.onUntitledModelChanged(e)));\n            this._register(this.untitledEditorService.onDidDisposeModel((e) => this.discardBackup(e)));\n            // Listen to config changes\n            this._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(this.configurationService.getValue())));\n        }\n        onConfigurationChange(configuration) {\n            if (!configuration || !configuration.files) {\n                this.configuredAutoSaveAfterDelay = false;\n                return;\n            }\n            this.configuredAutoSaveAfterDelay =\n                (configuration.files.autoSave === files_1.AutoSaveConfiguration.AFTER_DELAY &&\n                    configuration.files.autoSaveDelay <= AUTO_SAVE_AFTER_DELAY_DISABLED_TIME);\n        }\n        onTextFileModelChanged(event) {\n            if (event.kind === textfiles_1.StateChange.REVERTED) {\n                // This must proceed even if auto save after delay is configured in order to clean up\n                // any backups made before the config change\n                this.discardBackup(event.resource);\n            }\n            else if (event.kind === textfiles_1.StateChange.CONTENT_CHANGE) {\n                // Do not backup when auto save after delay is configured\n                if (!this.configuredAutoSaveAfterDelay) {\n                    const model = this.textFileService.models.get(event.resource);\n                    if (model) {\n                        const snapshot = model.createSnapshot();\n                        if (snapshot) {\n                            this.backupFileService.backupResource(model.getResource(), snapshot, model.getVersionId());\n                        }\n                    }\n                }\n            }\n        }\n        onUntitledModelChanged(resource) {\n            if (this.untitledEditorService.isDirty(resource)) {\n                this.untitledEditorService.loadOrCreate({ resource }).then(model => {\n                    const snapshot = model.createSnapshot();\n                    if (snapshot) {\n                        this.backupFileService.backupResource(resource, snapshot, model.getVersionId());\n                    }\n                });\n            }\n            else {\n                this.discardBackup(resource);\n            }\n        }\n        discardBackup(resource) {\n            this.backupFileService.discardResourceBackup(resource);\n        }\n    };\n    BackupModelTracker = __decorate([\n        __param(0, backup_1.IBackupFileService),\n        __param(1, textfiles_1.ITextFileService),\n        __param(2, untitledEditorService_1.IUntitledEditorService),\n        __param(3, configuration_1.IConfigurationService)\n    ], BackupModelTracker);\n    exports.BackupModelTracker = BackupModelTracker;\n});\n",null]}