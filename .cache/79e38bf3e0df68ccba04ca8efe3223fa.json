{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\n/**\n * Updates are run as a state machine:\n *\n *      Uninitialized\n *           ↓\n *          Idle\n *          ↓  ↑\n *   Checking for Updates  →  Available for Download\n *         ↓\n *     Downloading  →   Ready\n *         ↓               ↑\n *     Downloaded   →  Updating\n *\n * Available: There is an update available for download (linux).\n * Ready: Code will be updated as soon as it restarts (win32, darwin).\n * Donwloaded: There is an update ready to be installed in the background (win32).\n */\nvar StateType;\n(function (StateType) {\n    StateType[\"Uninitialized\"] = \"uninitialized\";\n    StateType[\"Idle\"] = \"idle\";\n    StateType[\"CheckingForUpdates\"] = \"checking for updates\";\n    StateType[\"AvailableForDownload\"] = \"available for download\";\n    StateType[\"Downloading\"] = \"downloading\";\n    StateType[\"Downloaded\"] = \"downloaded\";\n    StateType[\"Updating\"] = \"updating\";\n    StateType[\"Ready\"] = \"ready\";\n})(StateType = exports.StateType || (exports.StateType = {}));\nvar UpdateType;\n(function (UpdateType) {\n    UpdateType[UpdateType[\"Setup\"] = 0] = \"Setup\";\n    UpdateType[UpdateType[\"Archive\"] = 1] = \"Archive\";\n    UpdateType[UpdateType[\"Snap\"] = 2] = \"Snap\";\n})(UpdateType = exports.UpdateType || (exports.UpdateType = {}));\nexports.State = {\n    Uninitialized: { type: StateType.Uninitialized },\n    Idle: function (updateType, error) { return ({ type: StateType.Idle, updateType: updateType, error: error }); },\n    CheckingForUpdates: function (context) { return ({ type: StateType.CheckingForUpdates, context: context }); },\n    AvailableForDownload: function (update) { return ({ type: StateType.AvailableForDownload, update: update }); },\n    Downloading: function (update) { return ({ type: StateType.Downloading, update: update }); },\n    Downloaded: function (update) { return ({ type: StateType.Downloaded, update: update }); },\n    Updating: function (update) { return ({ type: StateType.Updating, update: update }); },\n    Ready: function (update) { return ({ type: StateType.Ready, update: update }); },\n};\nexports.IUpdateService = instantiation_1.createDecorator('updateService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAYjF;;;;;;;;;;;;;;;;GAgBG;AAEH,IAAkB,SASjB;AATD,WAAkB,SAAS;IAC1B,4CAA+B,CAAA;IAC/B,0BAAa,CAAA;IACb,wDAA2C,CAAA;IAC3C,4DAA+C,CAAA;IAC/C,wCAA2B,CAAA;IAC3B,sCAAyB,CAAA;IACzB,kCAAqB,CAAA;IACrB,4BAAe,CAAA;AAChB,CAAC,EATiB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAS1B;AAED,IAAkB,UAIjB;AAJD,WAAkB,UAAU;IAC3B,6CAAK,CAAA;IACL,iDAAO,CAAA;IACP,2CAAI,CAAA;AACL,CAAC,EAJiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAI3B;AAaY,QAAA,KAAK,GAAG;IACpB,aAAa,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,aAAa,EAAmB;IACjE,IAAI,EAAE,UAAC,UAAsB,EAAE,KAAc,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,EAAE,UAAU,YAAA,EAAE,KAAK,OAAA,EAAE,CAAS,EAArD,CAAqD;IACvG,kBAAkB,EAAE,UAAC,OAAY,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,kBAAkB,EAAE,OAAO,SAAA,EAAyB,CAAA,EAAvE,CAAuE;IAC7G,oBAAoB,EAAE,UAAC,MAAe,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,oBAAoB,EAAE,MAAM,QAAA,EAA2B,CAAA,EAA1E,CAA0E;IACrH,WAAW,EAAE,UAAC,MAAe,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,WAAW,EAAE,MAAM,QAAA,EAAkB,CAAA,EAAxD,CAAwD;IAC1F,UAAU,EAAE,UAAC,MAAe,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,UAAU,EAAE,MAAM,QAAA,EAAiB,CAAA,EAAtD,CAAsD;IACvF,QAAQ,EAAE,UAAC,MAAe,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,QAAQ,EAAE,MAAM,QAAA,EAAe,CAAA,EAAlD,CAAkD;IACjF,KAAK,EAAE,UAAC,MAAe,IAAK,OAAA,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,QAAA,EAAY,CAAA,EAA5C,CAA4C;CACxE,CAAC;AASW,QAAA,cAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IUpdate {\n\tversion: string;\n\tproductVersion: string;\n\tdate?: Date;\n\treleaseNotes?: string;\n\tsupportsFastUpdate?: boolean;\n\turl?: string;\n\thash?: string;\n}\n\n/**\n * Updates are run as a state machine:\n *\n *      Uninitialized\n *           ↓\n *          Idle\n *          ↓  ↑\n *   Checking for Updates  →  Available for Download\n *         ↓\n *     Downloading  →   Ready\n *         ↓               ↑\n *     Downloaded   →  Updating\n *\n * Available: There is an update available for download (linux).\n * Ready: Code will be updated as soon as it restarts (win32, darwin).\n * Donwloaded: There is an update ready to be installed in the background (win32).\n */\n\nexport const enum StateType {\n\tUninitialized = 'uninitialized',\n\tIdle = 'idle',\n\tCheckingForUpdates = 'checking for updates',\n\tAvailableForDownload = 'available for download',\n\tDownloading = 'downloading',\n\tDownloaded = 'downloaded',\n\tUpdating = 'updating',\n\tReady = 'ready',\n}\n\nexport const enum UpdateType {\n\tSetup,\n\tArchive,\n\tSnap\n}\n\nexport type Uninitialized = { type: StateType.Uninitialized };\nexport type Idle = { type: StateType.Idle, updateType: UpdateType, error?: string };\nexport type CheckingForUpdates = { type: StateType.CheckingForUpdates, context: any };\nexport type AvailableForDownload = { type: StateType.AvailableForDownload, update: IUpdate };\nexport type Downloading = { type: StateType.Downloading, update: IUpdate };\nexport type Downloaded = { type: StateType.Downloaded, update: IUpdate };\nexport type Updating = { type: StateType.Updating, update: IUpdate };\nexport type Ready = { type: StateType.Ready, update: IUpdate };\n\nexport type State = Uninitialized | Idle | CheckingForUpdates | AvailableForDownload | Downloading | Downloaded | Updating | Ready;\n\nexport const State = {\n\tUninitialized: { type: StateType.Uninitialized } as Uninitialized,\n\tIdle: (updateType: UpdateType, error?: string) => ({ type: StateType.Idle, updateType, error }) as Idle,\n\tCheckingForUpdates: (context: any) => ({ type: StateType.CheckingForUpdates, context } as CheckingForUpdates),\n\tAvailableForDownload: (update: IUpdate) => ({ type: StateType.AvailableForDownload, update } as AvailableForDownload),\n\tDownloading: (update: IUpdate) => ({ type: StateType.Downloading, update } as Downloading),\n\tDownloaded: (update: IUpdate) => ({ type: StateType.Downloaded, update } as Downloaded),\n\tUpdating: (update: IUpdate) => ({ type: StateType.Updating, update } as Updating),\n\tReady: (update: IUpdate) => ({ type: StateType.Ready, update } as Ready),\n};\n\nexport interface IAutoUpdater extends Event.NodeEventEmitter {\n\tsetFeedURL(url: string): void;\n\tcheckForUpdates(): void;\n\tapplyUpdate?(): Promise<void>;\n\tquitAndInstall(): void;\n}\n\nexport const IUpdateService = createDecorator<IUpdateService>('updateService');\n\nexport interface IUpdateService {\n\t_serviceBrand: any;\n\n\treadonly onStateChange: Event<State>;\n\treadonly state: State;\n\n\tcheckForUpdates(context: any): Promise<void>;\n\tdownloadUpdate(): Promise<void>;\n\tapplyUpdate(): Promise<void>;\n\tquitAndInstall(): Promise<void>;\n\n\tisLatestVersion(): Promise<boolean | undefined>;\n}\n"]}]}