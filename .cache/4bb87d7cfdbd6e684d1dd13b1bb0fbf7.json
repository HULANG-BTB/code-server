{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\"], function (require, exports, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class URLServiceChannel {\n        constructor(service) {\n            this.service = service;\n        }\n        listen(_, event) {\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command, arg) {\n            switch (command) {\n                case 'open': return this.service.open(uri_1.URI.revive(arg));\n            }\n            throw new Error(`Call not found: ${command}`);\n        }\n    }\n    exports.URLServiceChannel = URLServiceChannel;\n    class URLServiceChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        open(url) {\n            return this.channel.call('open', url.toJSON());\n        }\n        registerHandler(handler) {\n            throw new Error('Not implemented.');\n        }\n    }\n    exports.URLServiceChannelClient = URLServiceChannelClient;\n    class URLHandlerChannel {\n        constructor(handler) {\n            this.handler = handler;\n        }\n        listen(_, event) {\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command, arg) {\n            switch (command) {\n                case 'handleURL': return this.handler.handleURL(uri_1.URI.revive(arg));\n            }\n            throw new Error(`Call not found: ${command}`);\n        }\n    }\n    exports.URLHandlerChannel = URLHandlerChannel;\n    class URLHandlerChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        handleURL(uri) {\n            return this.channel.call('handleURL', uri.toJSON());\n        }\n    }\n    exports.URLHandlerChannelClient = URLHandlerChannelClient;\n});\n",null]}