{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/workbenchCommonProperties.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/workbenchCommonProperties.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar commonProperties_1 = require(\"vs/platform/telemetry/node/commonProperties\");\nexports.instanceStorageKey = 'telemetry.instanceId';\nexports.currentSessionDateStorageKey = 'telemetry.currentSessionDate';\nexports.firstSessionDateStorageKey = 'telemetry.firstSessionDate';\nexports.lastSessionDateStorageKey = 'telemetry.lastSessionDate';\nfunction resolveWorkbenchCommonProperties(storageService, commit, version, machineId, installSourcePath) {\n    return commonProperties_1.resolveCommonProperties(commit, version, machineId, installSourcePath).then(function (result) {\n        var instanceId = storageService.get(exports.instanceStorageKey, storage_1.StorageScope.GLOBAL);\n        var firstSessionDate = storageService.get(exports.firstSessionDateStorageKey, storage_1.StorageScope.GLOBAL);\n        var lastSessionDate = storageService.get(exports.lastSessionDateStorageKey, storage_1.StorageScope.GLOBAL);\n        // __GDPR__COMMON__ \"common.version.shell\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n        result['common.version.shell'] = process.versions && process.versions['electron'];\n        // __GDPR__COMMON__ \"common.version.renderer\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n        result['common.version.renderer'] = process.versions && process.versions['chrome'];\n        // __GDPR__COMMON__ \"common.firstSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n        result['common.firstSessionDate'] = firstSessionDate;\n        // __GDPR__COMMON__ \"common.lastSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n        result['common.lastSessionDate'] = lastSessionDate || '';\n        // __GDPR__COMMON__ \"common.isNewSession\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n        result['common.isNewSession'] = !lastSessionDate ? '1' : '0';\n        // __GDPR__COMMON__ \"common.instanceId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n        result['common.instanceId'] = instanceId;\n        return result;\n    });\n}\nexports.resolveWorkbenchCommonProperties = resolveWorkbenchCommonProperties;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/workbenchCommonProperties.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/workbenchCommonProperties.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8DAAmF;AACnF,gFAAsF;AAEzE,QAAA,kBAAkB,GAAG,sBAAsB,CAAC;AAC5C,QAAA,4BAA4B,GAAG,8BAA8B,CAAC;AAC9D,QAAA,0BAA0B,GAAG,4BAA4B,CAAC;AAC1D,QAAA,yBAAyB,GAAG,2BAA2B,CAAC;AAErE,SAAgB,gCAAgC,CAAC,cAA+B,EAAE,MAA0B,EAAE,OAA2B,EAAE,SAAiB,EAAE,iBAAyB;IACtL,OAAO,0CAAuB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;QACxF,IAAM,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,0BAAkB,EAAE,sBAAY,CAAC,MAAM,CAAE,CAAC;QAChF,IAAM,gBAAgB,GAAG,cAAc,CAAC,GAAG,CAAC,kCAA0B,EAAE,sBAAY,CAAC,MAAM,CAAE,CAAC;QAC9F,IAAM,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,iCAAyB,EAAE,sBAAY,CAAC,MAAM,CAAE,CAAC;QAE5F,sHAAsH;QACtH,MAAM,CAAC,sBAAsB,CAAC,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAClF,yHAAyH;QACzH,MAAM,CAAC,yBAAyB,CAAC,GAAG,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnF,mHAAmH;QACnH,MAAM,CAAC,yBAAyB,CAAC,GAAG,gBAAgB,CAAC;QACrD,kHAAkH;QAClH,MAAM,CAAC,wBAAwB,CAAC,GAAG,eAAe,IAAI,EAAE,CAAC;QACzD,+GAA+G;QAC/G,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7D,6GAA6G;QAC7G,MAAM,CAAC,mBAAmB,CAAC,GAAG,UAAU,CAAC;QAEzC,OAAO,MAAM,CAAC;IACf,CAAC,CAAC,CAAC;AACJ,CAAC;AArBD,4EAqBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/node/commonProperties';\n\nexport const instanceStorageKey = 'telemetry.instanceId';\nexport const currentSessionDateStorageKey = 'telemetry.currentSessionDate';\nexport const firstSessionDateStorageKey = 'telemetry.firstSessionDate';\nexport const lastSessionDateStorageKey = 'telemetry.lastSessionDate';\n\nexport function resolveWorkbenchCommonProperties(storageService: IStorageService, commit: string | undefined, version: string | undefined, machineId: string, installSourcePath: string): Promise<{ [name: string]: string | undefined }> {\n\treturn resolveCommonProperties(commit, version, machineId, installSourcePath).then(result => {\n\t\tconst instanceId = storageService.get(instanceStorageKey, StorageScope.GLOBAL)!;\n\t\tconst firstSessionDate = storageService.get(firstSessionDateStorageKey, StorageScope.GLOBAL)!;\n\t\tconst lastSessionDate = storageService.get(lastSessionDateStorageKey, StorageScope.GLOBAL)!;\n\n\t\t// __GDPR__COMMON__ \"common.version.shell\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\tresult['common.version.shell'] = process.versions && process.versions['electron'];\n\t\t// __GDPR__COMMON__ \"common.version.renderer\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\tresult['common.version.renderer'] = process.versions && process.versions['chrome'];\n\t\t// __GDPR__COMMON__ \"common.firstSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.firstSessionDate'] = firstSessionDate;\n\t\t// __GDPR__COMMON__ \"common.lastSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.lastSessionDate'] = lastSessionDate || '';\n\t\t// __GDPR__COMMON__ \"common.isNewSession\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.isNewSession'] = !lastSessionDate ? '1' : '0';\n\t\t// __GDPR__COMMON__ \"common.instanceId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\tresult['common.instanceId'] = instanceId;\n\n\t\treturn result;\n\t});\n}\n"]}]}