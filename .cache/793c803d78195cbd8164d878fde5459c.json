{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/decorations/decorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/decorations/decorations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./decorations\");\nvar dynamicViewOverlay_1 = require(\"vs/editor/browser/view/dynamicViewOverlay\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar renderingContext_1 = require(\"vs/editor/common/view/renderingContext\");\nvar DecorationsOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(DecorationsOverlay, _super);\n    function DecorationsOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._lineHeight = _this._context.configuration.editor.lineHeight;\n        _this._typicalHalfwidthCharacterWidth = _this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n        _this._renderResult = null;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    DecorationsOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    DecorationsOverlay.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._lineHeight = this._context.configuration.editor.lineHeight;\n        }\n        if (e.fontInfo) {\n            this._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n        }\n        return true;\n    };\n    DecorationsOverlay.prototype.onDecorationsChanged = function (e) {\n        return true;\n    };\n    DecorationsOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    DecorationsOverlay.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    DecorationsOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    DecorationsOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    DecorationsOverlay.prototype.onScrollChanged = function (e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    };\n    DecorationsOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    DecorationsOverlay.prototype.prepareRender = function (ctx) {\n        var _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        var decorations = [], decorationsLen = 0;\n        for (var i = 0, len = _decorations.length; i < len; i++) {\n            var d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort(function (a, b) {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            var aClassName = a.options.className;\n            var bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return range_1.Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    };\n    DecorationsOverlay.prototype._renderWholeLineDecorations = function (ctx, decorations, output) {\n        var lineHeight = String(this._lineHeight);\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n            var d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            var decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;height:'\n                + lineHeight\n                + 'px;\"></div>');\n            var startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            var endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (var j = startLineNumber; j <= endLineNumber; j++) {\n                var lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    };\n    DecorationsOverlay.prototype._renderNormalDecorations = function (ctx, decorations, output) {\n        var lineHeight = String(this._lineHeight);\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var prevClassName = null;\n        var prevShowIfCollapsed = false;\n        var prevRange = null;\n        for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n            var d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            var className = d.options.className;\n            var showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            var range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new range_1.Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && range_1.Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = range_1.Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n        }\n    };\n    DecorationsOverlay.prototype._renderNormalDecoration = function (ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n        var linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (var j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            var lineVisibleRanges = linesVisibleRanges[j];\n            var lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                var singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width === 0) {\n                    // collapsed range case => make the decoration visible by faking its width\n                    lineVisibleRanges.ranges[0] = new renderingContext_1.HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (var k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                var visibleRange = lineVisibleRanges.ranges[k];\n                var decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + String(visibleRange.width)\n                    + 'px;height:'\n                    + lineHeight\n                    + 'px;\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    };\n    DecorationsOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        var lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    };\n    return DecorationsOverlay;\n}(dynamicViewOverlay_1.DynamicViewOverlay));\nexports.DecorationsOverlay = DecorationsOverlay;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/decorations/decorations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/decorations/decorations.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./decorations';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { Range } from 'vs/editor/common/core/range';\nimport { HorizontalRange, RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { ViewModelDecoration } from 'vs/editor/common/viewModel/viewModel';\n\nexport class DecorationsOverlay extends DynamicViewOverlay {\n\n\tprivate readonly _context: ViewContext;\n\tprivate _lineHeight: number;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\tthis._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._renderResult = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\t}\n\t\tif (e.fontInfo) {\n\t\t\tthis._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged || e.scrollWidthChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tconst _decorations = ctx.getDecorationsInViewport();\n\n\t\t// Keep only decorations with `className`\n\t\tlet decorations: ViewModelDecoration[] = [], decorationsLen = 0;\n\t\tfor (let i = 0, len = _decorations.length; i < len; i++) {\n\t\t\tconst d = _decorations[i];\n\t\t\tif (d.options.className) {\n\t\t\t\tdecorations[decorationsLen++] = d;\n\t\t\t}\n\t\t}\n\n\t\t// Sort decorations for consistent render output\n\t\tdecorations = decorations.sort((a, b) => {\n\t\t\tif (a.options.zIndex! < b.options.zIndex!) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (a.options.zIndex! > b.options.zIndex!) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tconst aClassName = a.options.className!;\n\t\t\tconst bClassName = b.options.className!;\n\n\t\t\tif (aClassName < bClassName) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (aClassName > bClassName) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Range.compareRangesUsingStarts(a.range, b.range);\n\t\t});\n\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = '';\n\t\t}\n\n\t\t// Render first whole line decorations and then regular decorations\n\t\tthis._renderWholeLineDecorations(ctx, decorations, output);\n\t\tthis._renderNormalDecorations(ctx, decorations, output);\n\t\tthis._renderResult = output;\n\t}\n\n\tprivate _renderWholeLineDecorations(ctx: RenderingContext, decorations: ViewModelDecoration[], output: string[]): void {\n\t\tconst lineHeight = String(this._lineHeight);\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (!d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst decorationOutput = (\n\t\t\t\t'<div class=\"cdr '\n\t\t\t\t+ d.options.className\n\t\t\t\t+ '\" style=\"left:0;width:100%;height:'\n\t\t\t\t+ lineHeight\n\t\t\t\t+ 'px;\"></div>'\n\t\t\t);\n\n\t\t\tconst startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n\t\t\tconst endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\t\t\tfor (let j = startLineNumber; j <= endLineNumber; j++) {\n\t\t\t\tconst lineIndex = j - visibleStartLineNumber;\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _renderNormalDecorations(ctx: RenderingContext, decorations: ViewModelDecoration[], output: string[]): void {\n\t\tconst lineHeight = String(this._lineHeight);\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevShowIfCollapsed: boolean = false;\n\t\tlet prevRange: Range | null = null;\n\n\t\tfor (let i = 0, lenI = decorations.length; i < lenI; i++) {\n\t\t\tconst d = decorations[i];\n\n\t\t\tif (d.options.isWholeLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst className = d.options.className!;\n\t\t\tconst showIfCollapsed = Boolean(d.options.showIfCollapsed);\n\n\t\t\tlet range = d.range;\n\t\t\tif (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n\t\t\t\trange = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n\t\t\t}\n\n\t\t\tif (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange!, range)) {\n\t\t\t\t// merge into previous decoration\n\t\t\t\tprevRange = Range.plusRange(prevRange!, range);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// flush previous decoration\n\t\t\tif (prevClassName !== null) {\n\t\t\t\tthis._renderNormalDecoration(ctx, prevRange!, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n\t\t\t}\n\n\t\t\tprevClassName = className;\n\t\t\tprevShowIfCollapsed = showIfCollapsed;\n\t\t\tprevRange = range;\n\t\t}\n\n\t\tif (prevClassName !== null) {\n\t\t\tthis._renderNormalDecoration(ctx, prevRange!, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n\t\t}\n\t}\n\n\tprivate _renderNormalDecoration(ctx: RenderingContext, range: Range, className: string, showIfCollapsed: boolean, lineHeight: string, visibleStartLineNumber: number, output: string[]): void {\n\t\tconst linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/className === 'findMatch');\n\t\tif (!linesVisibleRanges) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n\t\t\tconst lineVisibleRanges = linesVisibleRanges[j];\n\t\t\tconst lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n\t\t\tif (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n\t\t\t\tconst singleVisibleRange = lineVisibleRanges.ranges[0];\n\t\t\t\tif (singleVisibleRange.width === 0) {\n\t\t\t\t\t// collapsed range case => make the decoration visible by faking its width\n\t\t\t\t\tlineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n\t\t\t\tconst visibleRange = lineVisibleRanges.ranges[k];\n\t\t\t\tconst decorationOutput = (\n\t\t\t\t\t'<div class=\"cdr '\n\t\t\t\t\t+ className\n\t\t\t\t\t+ '\" style=\"left:'\n\t\t\t\t\t+ String(visibleRange.left)\n\t\t\t\t\t+ 'px;width:'\n\t\t\t\t\t+ String(visibleRange.width)\n\t\t\t\t\t+ 'px;height:'\n\t\t\t\t\t+ lineHeight\n\t\t\t\t\t+ 'px;\"></div>'\n\t\t\t\t);\n\t\t\t\toutput[lineIndex] += decorationOutput;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n"]}]}