{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/search.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/search.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/workbench/common/editor\", \"vs/base/common/cancellation\"], function (require, exports, errors_1, editor_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var WorkspaceSymbolProviderRegistry;\n    (function (WorkspaceSymbolProviderRegistry) {\n        const _supports = [];\n        function register(provider) {\n            let support = provider;\n            if (support) {\n                _supports.push(support);\n            }\n            return {\n                dispose() {\n                    if (support) {\n                        const idx = _supports.indexOf(support);\n                        if (idx >= 0) {\n                            _supports.splice(idx, 1);\n                            support = undefined;\n                        }\n                    }\n                }\n            };\n        }\n        WorkspaceSymbolProviderRegistry.register = register;\n        function all() {\n            return _supports.slice(0);\n        }\n        WorkspaceSymbolProviderRegistry.all = all;\n    })(WorkspaceSymbolProviderRegistry = exports.WorkspaceSymbolProviderRegistry || (exports.WorkspaceSymbolProviderRegistry = {}));\n    function getWorkspaceSymbols(query, token = cancellation_1.CancellationToken.None) {\n        const result = [];\n        const promises = WorkspaceSymbolProviderRegistry.all().map(support => {\n            return Promise.resolve(support.provideWorkspaceSymbols(query, token)).then(value => {\n                if (Array.isArray(value)) {\n                    result.push([support, value]);\n                }\n            }, errors_1.onUnexpectedError);\n        });\n        return Promise.all(promises).then(_ => result);\n    }\n    exports.getWorkspaceSymbols = getWorkspaceSymbols;\n    /**\n     * Helper to return all opened editors with resources not belonging to the currently opened workspace.\n     */\n    function getOutOfWorkspaceEditorResources(editorService, contextService) {\n        const resources = [];\n        editorService.editors.forEach(editor => {\n            const resource = editor_1.toResource(editor, { supportSideBySide: true });\n            if (resource && !contextService.isInsideWorkspace(resource)) {\n                resources.push(resource);\n            }\n        });\n        return resources;\n    }\n    exports.getOutOfWorkspaceEditorResources = getOutOfWorkspaceEditorResources;\n});\n",null]}