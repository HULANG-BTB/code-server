{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"os\", \"vs/platform/product/node/product\", \"vs/platform/product/node/package\", \"vs/base/common/actions\", \"vs/workbench/browser/parts/editor/baseEditor\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/contrib/extensions/common/extensions\", \"vs/platform/theme/common/themeService\", \"vs/workbench/services/editor/common/editorService\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/list/browser/listService\", \"vs/base/browser/dom\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/base/common/lifecycle\", \"vs/base/common/async\", \"electron\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/windows/common/windows\", \"vs/base/node/pfs\", \"vs/platform/environment/common/environment\", \"vs/base/common/decorators\", \"vs/base/common/arrays\", \"vs/platform/notification/common/notification\", \"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\", \"vs/workbench/contrib/debug/common/debug\", \"vs/platform/dialogs/common/dialogs\", \"vs/base/node/ports\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/storage/common/storage\", \"vs/platform/label/common/label\", \"vs/base/browser/ui/octiconLabel/octiconLabel\", \"vs/base/common/path\", \"vs/base/common/errors\", \"vs/platform/extensions/common/extensions\", \"vs/platform/remote/common/remoteHosts\", \"vs/css!./media/runtimeExtensionsEditor\"], function (require, exports, nls, os, product_1, package_1, actions_1, baseEditor_1, telemetry_1, instantiation_1, extensions_1, themeService_1, editorService_1, extensions_2, listService_1, dom_1, actionbar_1, lifecycle_1, async_1, electron_1, extensionManagement_1, contextView_1, windows_1, pfs_1, environment_1, decorators_1, arrays_1, notification_1, runtimeExtensionsInput_1, debug_1, dialogs_1, ports_1, contextkey_1, storage_1, label_1, octiconLabel_1, path_1, errors_1, extensions_3, remoteHosts_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IExtensionHostProfileService = instantiation_1.createDecorator('extensionHostProfileService');\n    exports.CONTEXT_PROFILE_SESSION_STATE = new contextkey_1.RawContextKey('profileSessionState', 'none');\n    exports.CONTEXT_EXTENSION_HOST_PROFILE_RECORDED = new contextkey_1.RawContextKey('extensionHostProfileRecorded', false);\n    var ProfileSessionState;\n    (function (ProfileSessionState) {\n        ProfileSessionState[ProfileSessionState[\"None\"] = 0] = \"None\";\n        ProfileSessionState[ProfileSessionState[\"Starting\"] = 1] = \"Starting\";\n        ProfileSessionState[ProfileSessionState[\"Running\"] = 2] = \"Running\";\n        ProfileSessionState[ProfileSessionState[\"Stopping\"] = 3] = \"Stopping\";\n    })(ProfileSessionState = exports.ProfileSessionState || (exports.ProfileSessionState = {}));\n    let RuntimeExtensionsEditor = class RuntimeExtensionsEditor extends baseEditor_1.BaseEditor {\n        constructor(telemetryService, themeService, contextKeyService, _extensionsWorkbenchService, _extensionService, _notificationService, _contextMenuService, _instantiationService, _extensionHostProfileService, storageService, _labelService, _windowService) {\n            super(RuntimeExtensionsEditor.ID, telemetryService, themeService, storageService);\n            this._extensionsWorkbenchService = _extensionsWorkbenchService;\n            this._extensionService = _extensionService;\n            this._notificationService = _notificationService;\n            this._contextMenuService = _contextMenuService;\n            this._instantiationService = _instantiationService;\n            this._extensionHostProfileService = _extensionHostProfileService;\n            this._labelService = _labelService;\n            this._windowService = _windowService;\n            this._list = null;\n            this._profileInfo = this._extensionHostProfileService.lastProfile;\n            this._register(this._extensionHostProfileService.onDidChangeLastProfile(() => {\n                this._profileInfo = this._extensionHostProfileService.lastProfile;\n                this._extensionsHostRecorded.set(!!this._profileInfo);\n                this._updateExtensions();\n            }));\n            this._register(this._extensionHostProfileService.onDidChangeState(() => {\n                const state = this._extensionHostProfileService.state;\n                this._profileSessionState.set(ProfileSessionState[state].toLowerCase());\n            }));\n            this._elements = null;\n            this._extensionsDescriptions = [];\n            this._updateExtensions();\n            this._profileSessionState = exports.CONTEXT_PROFILE_SESSION_STATE.bindTo(contextKeyService);\n            this._extensionsHostRecorded = exports.CONTEXT_EXTENSION_HOST_PROFILE_RECORDED.bindTo(contextKeyService);\n            this._updateSoon = this._register(new async_1.RunOnceScheduler(() => this._updateExtensions(), 200));\n            this._extensionService.getExtensions().then((extensions) => {\n                // We only deal with extensions with source code!\n                this._extensionsDescriptions = extensions.filter((extension) => {\n                    return !!extension.main;\n                });\n                this._updateExtensions();\n            });\n            this._register(this._extensionService.onDidChangeExtensionsStatus(() => this._updateSoon.schedule()));\n        }\n        _updateExtensions() {\n            this._elements = this._resolveExtensions();\n            if (this._list) {\n                this._list.splice(0, this._list.length, this._elements);\n            }\n        }\n        _resolveExtensions() {\n            let marketplaceMap = Object.create(null);\n            for (let extension of this._extensionsWorkbenchService.local) {\n                marketplaceMap[extensions_3.ExtensionIdentifier.toKey(extension.identifier.id)] = extension;\n            }\n            let statusMap = this._extensionService.getExtensionsStatus();\n            // group profile segments by extension\n            let segments = Object.create(null);\n            if (this._profileInfo) {\n                let currentStartTime = this._profileInfo.startTime;\n                for (let i = 0, len = this._profileInfo.deltas.length; i < len; i++) {\n                    const id = this._profileInfo.ids[i];\n                    const delta = this._profileInfo.deltas[i];\n                    let extensionSegments = segments[extensions_3.ExtensionIdentifier.toKey(id)];\n                    if (!extensionSegments) {\n                        extensionSegments = [];\n                        segments[extensions_3.ExtensionIdentifier.toKey(id)] = extensionSegments;\n                    }\n                    extensionSegments.push(currentStartTime);\n                    currentStartTime = currentStartTime + delta;\n                    extensionSegments.push(currentStartTime);\n                }\n            }\n            let result = [];\n            for (let i = 0, len = this._extensionsDescriptions.length; i < len; i++) {\n                const extensionDescription = this._extensionsDescriptions[i];\n                let profileInfo = null;\n                if (this._profileInfo) {\n                    let extensionSegments = segments[extensions_3.ExtensionIdentifier.toKey(extensionDescription.identifier)] || [];\n                    let extensionTotalTime = 0;\n                    for (let j = 0, lenJ = extensionSegments.length / 2; j < lenJ; j++) {\n                        const startTime = extensionSegments[2 * j];\n                        const endTime = extensionSegments[2 * j + 1];\n                        extensionTotalTime += (endTime - startTime);\n                    }\n                    profileInfo = {\n                        segments: extensionSegments,\n                        totalTime: extensionTotalTime\n                    };\n                }\n                result[i] = {\n                    originalIndex: i,\n                    description: extensionDescription,\n                    marketplaceInfo: marketplaceMap[extensions_3.ExtensionIdentifier.toKey(extensionDescription.identifier)],\n                    status: statusMap[extensionDescription.identifier.value],\n                    profileInfo: profileInfo || undefined,\n                    unresponsiveProfile: this._extensionHostProfileService.getUnresponsiveProfile(extensionDescription.identifier)\n                };\n            }\n            result = result.filter(element => element.status.activationTimes);\n            // bubble up extensions that have caused slowness\n            result = result.sort((a, b) => {\n                if (a.unresponsiveProfile === this._profileInfo && !b.unresponsiveProfile) {\n                    return -1;\n                }\n                else if (!a.unresponsiveProfile && b.unresponsiveProfile === this._profileInfo) {\n                    return 1;\n                }\n                return a.originalIndex - b.originalIndex;\n            });\n            return result;\n        }\n        createEditor(parent) {\n            dom_1.addClass(parent, 'runtime-extensions-editor');\n            const TEMPLATE_ID = 'runtimeExtensionElementTemplate';\n            const delegate = new class {\n                getHeight(element) {\n                    return 62;\n                }\n                getTemplateId(element) {\n                    return TEMPLATE_ID;\n                }\n            };\n            const renderer = {\n                templateId: TEMPLATE_ID,\n                renderTemplate: (root) => {\n                    const element = dom_1.append(root, dom_1.$('.extension'));\n                    const desc = dom_1.append(element, dom_1.$('div.desc'));\n                    const name = dom_1.append(desc, dom_1.$('div.name'));\n                    const msgContainer = dom_1.append(desc, dom_1.$('div.msg'));\n                    const actionbar = new actionbar_1.ActionBar(desc, { animated: false });\n                    actionbar.onDidRun(({ error }) => error && this._notificationService.error(error));\n                    const timeContainer = dom_1.append(element, dom_1.$('.time'));\n                    const activationTime = dom_1.append(timeContainer, dom_1.$('div.activation-time'));\n                    const profileTime = dom_1.append(timeContainer, dom_1.$('div.profile-time'));\n                    const disposables = [actionbar];\n                    return {\n                        root,\n                        element,\n                        name,\n                        actionbar,\n                        activationTime,\n                        profileTime,\n                        msgContainer,\n                        disposables,\n                        elementDisposables: []\n                    };\n                },\n                renderElement: (element, index, data) => {\n                    data.elementDisposables = lifecycle_1.dispose(data.elementDisposables);\n                    dom_1.toggleClass(data.root, 'odd', index % 2 === 1);\n                    data.name.textContent = element.marketplaceInfo ? element.marketplaceInfo.displayName : element.description.displayName || '';\n                    const activationTimes = element.status.activationTimes;\n                    let syncTime = activationTimes.codeLoadingTime + activationTimes.activateCallTime;\n                    data.activationTime.textContent = activationTimes.startup ? `Startup Activation: ${syncTime}ms` : `Activation: ${syncTime}ms`;\n                    data.actionbar.clear();\n                    if (element.unresponsiveProfile || arrays_1.isNonEmptyArray(element.status.runtimeErrors)) {\n                        data.actionbar.push(new ReportExtensionIssueAction(element), { icon: true, label: true });\n                    }\n                    let title;\n                    if (activationTimes.activationEvent === '*') {\n                        title = nls.localize('starActivation', \"Activated on start-up\");\n                    }\n                    else if (/^workspaceContains:/.test(activationTimes.activationEvent)) {\n                        let fileNameOrGlob = activationTimes.activationEvent.substr('workspaceContains:'.length);\n                        if (fileNameOrGlob.indexOf('*') >= 0 || fileNameOrGlob.indexOf('?') >= 0) {\n                            title = nls.localize({\n                                key: 'workspaceContainsGlobActivation',\n                                comment: [\n                                    '{0} will be a glob pattern'\n                                ]\n                            }, \"Activated because a file matching {0} exists in your workspace\", fileNameOrGlob);\n                        }\n                        else {\n                            title = nls.localize({\n                                key: 'workspaceContainsFileActivation',\n                                comment: [\n                                    '{0} will be a file name'\n                                ]\n                            }, \"Activated because file {0} exists in your workspace\", fileNameOrGlob);\n                        }\n                    }\n                    else if (/^workspaceContainsTimeout:/.test(activationTimes.activationEvent)) {\n                        const glob = activationTimes.activationEvent.substr('workspaceContainsTimeout:'.length);\n                        title = nls.localize({\n                            key: 'workspaceContainsTimeout',\n                            comment: [\n                                '{0} will be a glob pattern'\n                            ]\n                        }, \"Activated because searching for {0} took too long\", glob);\n                    }\n                    else if (/^onLanguage:/.test(activationTimes.activationEvent)) {\n                        let language = activationTimes.activationEvent.substr('onLanguage:'.length);\n                        title = nls.localize('languageActivation', \"Activated because you opened a {0} file\", language);\n                    }\n                    else {\n                        title = nls.localize({\n                            key: 'workspaceGenericActivation',\n                            comment: [\n                                'The {0} placeholder will be an activation event, like e.g. \\'language:typescript\\', \\'debug\\', etc.'\n                            ]\n                        }, \"Activated on {0}\", activationTimes.activationEvent);\n                    }\n                    data.activationTime.title = title;\n                    dom_1.clearNode(data.msgContainer);\n                    if (this._extensionHostProfileService.getUnresponsiveProfile(element.description.identifier)) {\n                        const el = dom_1.$('span');\n                        el.innerHTML = octiconLabel_1.renderOcticons(` $(alert) Unresponsive`);\n                        el.title = nls.localize('unresponsive.title', \"Extension has caused the extension host to freeze.\");\n                        data.msgContainer.appendChild(el);\n                    }\n                    if (arrays_1.isNonEmptyArray(element.status.runtimeErrors)) {\n                        const el = dom_1.$('span');\n                        el.innerHTML = octiconLabel_1.renderOcticons(`$(bug) ${nls.localize('errors', \"{0} uncaught errors\", element.status.runtimeErrors.length)}`);\n                        data.msgContainer.appendChild(el);\n                    }\n                    if (element.status.messages && element.status.messages.length > 0) {\n                        const el = dom_1.$('span');\n                        el.innerHTML = octiconLabel_1.renderOcticons(`$(alert) ${element.status.messages[0].message}`);\n                        data.msgContainer.appendChild(el);\n                    }\n                    if (element.description.extensionLocation.scheme !== 'file') {\n                        const el = dom_1.$('span');\n                        el.innerHTML = octiconLabel_1.renderOcticons(`$(rss) ${element.description.extensionLocation.authority}`);\n                        data.msgContainer.appendChild(el);\n                        const hostLabel = this._labelService.getHostLabel(remoteHosts_1.REMOTE_HOST_SCHEME, this._windowService.getConfiguration().remoteAuthority);\n                        if (hostLabel) {\n                            el.innerHTML = octiconLabel_1.renderOcticons(`$(rss) ${hostLabel}`);\n                        }\n                    }\n                    if (this._profileInfo && element.profileInfo) {\n                        data.profileTime.textContent = `Profile: ${(element.profileInfo.totalTime / 1000).toFixed(2)}ms`;\n                    }\n                    else {\n                        data.profileTime.textContent = '';\n                    }\n                },\n                disposeTemplate: (data) => {\n                    data.disposables = lifecycle_1.dispose(data.disposables);\n                }\n            };\n            this._list = this._instantiationService.createInstance(listService_1.WorkbenchList, parent, delegate, [renderer], {\n                multipleSelectionSupport: false,\n                setRowLineHeight: false,\n                horizontalScrolling: false\n            });\n            this._list.splice(0, this._list.length, this._elements || undefined);\n            this._list.onContextMenu((e) => {\n                if (!e.element) {\n                    return;\n                }\n                const actions = [];\n                actions.push(new ReportExtensionIssueAction(e.element));\n                actions.push(new actionbar_1.Separator());\n                if (e.element.marketplaceInfo) {\n                    actions.push(new actions_1.Action('runtimeExtensionsEditor.action.disableWorkspace', nls.localize('disable workspace', \"Disable (Workspace)\"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element.marketplaceInfo, extensionManagement_1.EnablementState.WorkspaceDisabled)));\n                    actions.push(new actions_1.Action('runtimeExtensionsEditor.action.disable', nls.localize('disable', \"Disable\"), undefined, true, () => this._extensionsWorkbenchService.setEnablement(e.element.marketplaceInfo, extensionManagement_1.EnablementState.Disabled)));\n                    actions.push(new actionbar_1.Separator());\n                }\n                const state = this._extensionHostProfileService.state;\n                if (state === ProfileSessionState.Running) {\n                    actions.push(this._instantiationService.createInstance(StopExtensionHostProfileAction, StopExtensionHostProfileAction.ID, StopExtensionHostProfileAction.LABEL));\n                }\n                else {\n                    actions.push(this._instantiationService.createInstance(StartExtensionHostProfileAction, StartExtensionHostProfileAction.ID, StartExtensionHostProfileAction.LABEL));\n                }\n                actions.push(this.saveExtensionHostProfileAction);\n                this._contextMenuService.showContextMenu({\n                    getAnchor: () => e.anchor,\n                    getActions: () => actions\n                });\n            });\n        }\n        get saveExtensionHostProfileAction() {\n            return this._instantiationService.createInstance(SaveExtensionHostProfileAction, SaveExtensionHostProfileAction.ID, SaveExtensionHostProfileAction.LABEL);\n        }\n        layout(dimension) {\n            if (this._list) {\n                this._list.layout(dimension.height);\n            }\n        }\n    };\n    RuntimeExtensionsEditor.ID = 'workbench.editor.runtimeExtensions';\n    __decorate([\n        decorators_1.memoize\n    ], RuntimeExtensionsEditor.prototype, \"saveExtensionHostProfileAction\", null);\n    RuntimeExtensionsEditor = __decorate([\n        __param(0, telemetry_1.ITelemetryService),\n        __param(1, themeService_1.IThemeService),\n        __param(2, contextkey_1.IContextKeyService),\n        __param(3, extensions_1.IExtensionsWorkbenchService),\n        __param(4, extensions_2.IExtensionService),\n        __param(5, notification_1.INotificationService),\n        __param(6, contextView_1.IContextMenuService),\n        __param(7, instantiation_1.IInstantiationService),\n        __param(8, exports.IExtensionHostProfileService),\n        __param(9, storage_1.IStorageService),\n        __param(10, label_1.ILabelService),\n        __param(11, windows_1.IWindowService)\n    ], RuntimeExtensionsEditor);\n    exports.RuntimeExtensionsEditor = RuntimeExtensionsEditor;\n    let ShowRuntimeExtensionsAction = class ShowRuntimeExtensionsAction extends actions_1.Action {\n        constructor(id, label, _editorService, _instantiationService) {\n            super(id, label);\n            this._editorService = _editorService;\n            this._instantiationService = _instantiationService;\n        }\n        run(e) {\n            return __awaiter(this, void 0, void 0, function* () {\n                yield this._editorService.openEditor(this._instantiationService.createInstance(runtimeExtensionsInput_1.RuntimeExtensionsInput), { revealIfOpened: true });\n            });\n        }\n    };\n    ShowRuntimeExtensionsAction.ID = 'workbench.action.showRuntimeExtensions';\n    ShowRuntimeExtensionsAction.LABEL = nls.localize('showRuntimeExtensions', \"Show Running Extensions\");\n    ShowRuntimeExtensionsAction = __decorate([\n        __param(2, editorService_1.IEditorService),\n        __param(3, instantiation_1.IInstantiationService)\n    ], ShowRuntimeExtensionsAction);\n    exports.ShowRuntimeExtensionsAction = ShowRuntimeExtensionsAction;\n    class ReportExtensionIssueAction extends actions_1.Action {\n        constructor(extension) {\n            super(ReportExtensionIssueAction._id, ReportExtensionIssueAction._label, 'extension-action report-issue');\n            this.enabled = extension.marketplaceInfo\n                && extension.marketplaceInfo.type === extensions_3.ExtensionType.User\n                && !!extension.description.repository && !!extension.description.repository.url;\n            const { url, task } = ReportExtensionIssueAction._generateNewIssueUrl(extension);\n            this._url = url;\n            this._task = task;\n        }\n        run() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (this._task) {\n                    yield this._task();\n                }\n                window.open(this._url);\n            });\n        }\n        static _generateNewIssueUrl(extension) {\n            let task;\n            let baseUrl = extension.marketplaceInfo && extension.marketplaceInfo.type === extensions_3.ExtensionType.User && extension.description.repository ? extension.description.repository.url : undefined;\n            if (!!baseUrl) {\n                baseUrl = `${baseUrl.indexOf('.git') !== -1 ? baseUrl.substr(0, baseUrl.length - 4) : baseUrl}/issues/new/`;\n            }\n            else {\n                baseUrl = product_1.default.reportIssueUrl;\n            }\n            let title;\n            let message;\n            let reason;\n            if (extension.unresponsiveProfile) {\n                // unresponsive extension host caused\n                reason = 'Performance';\n                title = 'Extension causes high cpu load';\n                let path = path_1.join(os.homedir(), `${extension.description.identifier.value}-unresponsive.cpuprofile.txt`);\n                task = () => __awaiter(this, void 0, void 0, function* () {\n                    const profiler = yield new Promise((resolve_1, reject_1) => { require(['v8-inspect-profiler'], resolve_1, reject_1); });\n                    const data = profiler.rewriteAbsolutePaths({ profile: extension.unresponsiveProfile.data }, 'pii_removed');\n                    profiler.writeProfile(data, path).then(undefined, errors_1.onUnexpectedError);\n                });\n                message = `:warning: Make sure to **attach** this file from your *home*-directory:\\n:warning:\\`${path}\\`\\n\\nFind more details here: https://github.com/Microsoft/vscode/wiki/Explain:-extension-causes-high-cpu-load`;\n            }\n            else {\n                // generic\n                reason = 'Bug';\n                title = 'Extension issue';\n                message = ':warning: We have written the needed data into your clipboard. Please paste! :warning:';\n                electron_1.clipboard.writeText('```json \\n' + JSON.stringify(extension.status, null, '\\t') + '\\n```');\n            }\n            const osVersion = `${os.type()} ${os.arch()} ${os.release()}`;\n            const queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';\n            const body = encodeURIComponent(`- Issue Type: \\`${reason}\\`\n- Extension Name: \\`${extension.description.name}\\`\n- Extension Version: \\`${extension.description.version}\\`\n- OS Version: \\`${osVersion}\\`\n- VSCode version: \\`${package_1.default.version}\\`\\n\\n${message}`);\n            return {\n                url: `${baseUrl}${queryStringPrefix}body=${body}&title=${encodeURIComponent(title)}`,\n                task\n            };\n        }\n    }\n    ReportExtensionIssueAction._id = 'workbench.extensions.action.reportExtensionIssue';\n    ReportExtensionIssueAction._label = nls.localize('reportExtensionIssue', \"Report Issue\");\n    exports.ReportExtensionIssueAction = ReportExtensionIssueAction;\n    let DebugExtensionHostAction = class DebugExtensionHostAction extends actions_1.Action {\n        constructor(_debugService, _windowsService, _dialogService, _extensionService) {\n            super(DebugExtensionHostAction.ID, DebugExtensionHostAction.LABEL, DebugExtensionHostAction.CSS_CLASS);\n            this._debugService = _debugService;\n            this._windowsService = _windowsService;\n            this._dialogService = _dialogService;\n            this._extensionService = _extensionService;\n        }\n        run() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const inspectPort = this._extensionService.getInspectPort();\n                if (!inspectPort) {\n                    const res = yield this._dialogService.confirm({\n                        type: 'info',\n                        message: nls.localize('restart1', \"Profile Extensions\"),\n                        detail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", product_1.default.nameLong),\n                        primaryButton: nls.localize('restart3', \"Restart\"),\n                        secondaryButton: nls.localize('cancel', \"Cancel\")\n                    });\n                    if (res.confirmed) {\n                        this._windowsService.relaunch({ addArgs: [`--inspect-extensions=${ports_1.randomPort()}`] });\n                    }\n                }\n                return this._debugService.startDebugging(undefined, {\n                    type: 'node',\n                    name: nls.localize('debugExtensionHost.launch.name', \"Attach Extension Host\"),\n                    request: 'attach',\n                    port: inspectPort\n                });\n            });\n        }\n    };\n    DebugExtensionHostAction.ID = 'workbench.extensions.action.debugExtensionHost';\n    DebugExtensionHostAction.LABEL = nls.localize('debugExtensionHost', \"Start Debugging Extension Host\");\n    DebugExtensionHostAction.CSS_CLASS = 'debug-extension-host';\n    DebugExtensionHostAction = __decorate([\n        __param(0, debug_1.IDebugService),\n        __param(1, windows_1.IWindowsService),\n        __param(2, dialogs_1.IDialogService),\n        __param(3, extensions_2.IExtensionService)\n    ], DebugExtensionHostAction);\n    exports.DebugExtensionHostAction = DebugExtensionHostAction;\n    let StartExtensionHostProfileAction = class StartExtensionHostProfileAction extends actions_1.Action {\n        constructor(id = StartExtensionHostProfileAction.ID, label = StartExtensionHostProfileAction.LABEL, _extensionHostProfileService) {\n            super(id, label);\n            this._extensionHostProfileService = _extensionHostProfileService;\n        }\n        run() {\n            this._extensionHostProfileService.startProfiling();\n            return Promise.resolve();\n        }\n    };\n    StartExtensionHostProfileAction.ID = 'workbench.extensions.action.extensionHostProfile';\n    StartExtensionHostProfileAction.LABEL = nls.localize('extensionHostProfileStart', \"Start Extension Host Profile\");\n    StartExtensionHostProfileAction = __decorate([\n        __param(2, exports.IExtensionHostProfileService)\n    ], StartExtensionHostProfileAction);\n    exports.StartExtensionHostProfileAction = StartExtensionHostProfileAction;\n    let StopExtensionHostProfileAction = class StopExtensionHostProfileAction extends actions_1.Action {\n        constructor(id = StartExtensionHostProfileAction.ID, label = StartExtensionHostProfileAction.LABEL, _extensionHostProfileService) {\n            super(id, label);\n            this._extensionHostProfileService = _extensionHostProfileService;\n        }\n        run() {\n            this._extensionHostProfileService.stopProfiling();\n            return Promise.resolve();\n        }\n    };\n    StopExtensionHostProfileAction.ID = 'workbench.extensions.action.stopExtensionHostProfile';\n    StopExtensionHostProfileAction.LABEL = nls.localize('stopExtensionHostProfileStart', \"Stop Extension Host Profile\");\n    StopExtensionHostProfileAction = __decorate([\n        __param(2, exports.IExtensionHostProfileService)\n    ], StopExtensionHostProfileAction);\n    exports.StopExtensionHostProfileAction = StopExtensionHostProfileAction;\n    let SaveExtensionHostProfileAction = class SaveExtensionHostProfileAction extends actions_1.Action {\n        constructor(id = SaveExtensionHostProfileAction.ID, label = SaveExtensionHostProfileAction.LABEL, _windowService, _environmentService, _extensionHostProfileService) {\n            super(id, label, undefined, false);\n            this._windowService = _windowService;\n            this._environmentService = _environmentService;\n            this._extensionHostProfileService = _extensionHostProfileService;\n            this._extensionHostProfileService.onDidChangeLastProfile(() => {\n                this.enabled = (this._extensionHostProfileService.lastProfile !== null);\n            });\n        }\n        run() {\n            return Promise.resolve(this._asyncRun());\n        }\n        _asyncRun() {\n            return __awaiter(this, void 0, void 0, function* () {\n                let picked = yield this._windowService.showSaveDialog({\n                    title: 'Save Extension Host Profile',\n                    buttonLabel: 'Save',\n                    defaultPath: `CPU-${new Date().toISOString().replace(/[\\-:]/g, '')}.cpuprofile`,\n                    filters: [{\n                            name: 'CPU Profiles',\n                            extensions: ['cpuprofile', 'txt']\n                        }]\n                });\n                if (!picked) {\n                    return;\n                }\n                const profileInfo = this._extensionHostProfileService.lastProfile;\n                let dataToWrite = profileInfo ? profileInfo.data : {};\n                if (this._environmentService.isBuilt) {\n                    const profiler = yield new Promise((resolve_2, reject_2) => { require(['v8-inspect-profiler'], resolve_2, reject_2); });\n                    // when running from a not-development-build we remove\n                    // absolute filenames because we don't want to reveal anything\n                    // about users. We also append the `.txt` suffix to make it\n                    // easier to attach these files to GH issues\n                    let tmp = profiler.rewriteAbsolutePaths({ profile: dataToWrite }, 'piiRemoved');\n                    dataToWrite = tmp.profile;\n                    picked = picked + '.txt';\n                }\n                return pfs_1.writeFile(picked, JSON.stringify(profileInfo ? profileInfo.data : {}, null, '\\t'));\n            });\n        }\n    };\n    SaveExtensionHostProfileAction.LABEL = nls.localize('saveExtensionHostProfile', \"Save Extension Host Profile\");\n    SaveExtensionHostProfileAction.ID = 'workbench.extensions.action.saveExtensionHostProfile';\n    SaveExtensionHostProfileAction = __decorate([\n        __param(2, windows_1.IWindowService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, exports.IExtensionHostProfileService)\n    ], SaveExtensionHostProfileAction);\n    exports.SaveExtensionHostProfileAction = SaveExtensionHostProfileAction;\n});\n",null]}