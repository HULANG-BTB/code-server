{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/cli/node/cli.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/cli/node/cli.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar path = require(\"vs/base/common/path\");\nvar cp = require(\"child_process\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar platform = require(\"vs/base/common/platform\");\nvar async_1 = require(\"vs/base/common/async\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/platform/actions/common/actions\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar amd_1 = require(\"vs/base/common/amd\");\nfunction ignore(code, value) {\n    return function (err) { return err.code === code ? Promise.resolve(value) : Promise.reject(err); };\n}\nvar _source = null;\nfunction getSource() {\n    if (!_source) {\n        var root = amd_1.getPathFromAmdModule(require, '');\n        _source = path.resolve(root, '..', 'bin', 'code');\n    }\n    return _source;\n}\nfunction isAvailable() {\n    return Promise.resolve(pfs.exists(getSource()));\n}\nvar InstallAction = /** @class */ (function (_super) {\n    tslib_1.__extends(InstallAction, _super);\n    function InstallAction(id, label, notificationService, dialogService, logService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.notificationService = notificationService;\n        _this.dialogService = dialogService;\n        _this.logService = logService;\n        return _this;\n    }\n    Object.defineProperty(InstallAction.prototype, \"target\", {\n        get: function () {\n            return \"/usr/local/bin/\" + product_1.default.applicationName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    InstallAction.prototype.run = function () {\n        var _this = this;\n        return isAvailable().then(function (isAvailable) {\n            if (!isAvailable) {\n                var message = nls.localize('not available', \"This command is not available\");\n                _this.notificationService.info(message);\n                return undefined;\n            }\n            return _this.isInstalled()\n                .then(function (isInstalled) {\n                if (!isAvailable || isInstalled) {\n                    return Promise.resolve(null);\n                }\n                else {\n                    return pfs.unlink(_this.target)\n                        .then(undefined, ignore('ENOENT', null))\n                        .then(function () { return pfs.symlink(getSource(), _this.target); })\n                        .then(undefined, function (err) {\n                        if (err.code === 'EACCES' || err.code === 'ENOENT') {\n                            return _this.createBinFolderAndSymlinkAsAdmin();\n                        }\n                        return Promise.reject(err);\n                    });\n                }\n            })\n                .then(function () {\n                _this.logService.trace('cli#install', _this.target);\n                _this.notificationService.info(nls.localize('successIn', \"Shell command '{0}' successfully installed in PATH.\", product_1.default.applicationName));\n            });\n        });\n    };\n    InstallAction.prototype.isInstalled = function () {\n        var _this = this;\n        return pfs.lstat(this.target)\n            .then(function (stat) { return stat.isSymbolicLink(); })\n            .then(function () { return pfs.readlink(_this.target); })\n            .then(function (link) { return link === getSource(); })\n            .then(undefined, ignore('ENOENT', false));\n    };\n    InstallAction.prototype.createBinFolderAndSymlinkAsAdmin = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var buttons = [nls.localize('ok', \"OK\"), nls.localize('cancel2', \"Cancel\")];\n            _this.dialogService.show(severity_1.default.Info, nls.localize('warnEscalation', \"Code will now prompt with 'osascript' for Administrator privileges to install the shell command.\"), buttons, { cancelId: 1 }).then(function (choice) {\n                switch (choice) {\n                    case 0 /* OK */:\n                        var command = 'osascript -e \"do shell script \\\\\"mkdir -p /usr/local/bin && ln -sf \\'' + getSource() + '\\' \\'' + _this.target + '\\'\\\\\" with administrator privileges\"';\n                        async_1.nfcall(cp.exec, command, {})\n                            .then(undefined, function (_) { return Promise.reject(new Error(nls.localize('cantCreateBinFolder', \"Unable to create '/usr/local/bin'.\"))); })\n                            .then(resolve, reject);\n                        break;\n                    case 1 /* Cancel */:\n                        reject(new Error(nls.localize('aborted', \"Aborted\")));\n                        break;\n                }\n            });\n        });\n    };\n    InstallAction.ID = 'workbench.action.installCommandLine';\n    InstallAction.LABEL = nls.localize('install', \"Install '{0}' command in PATH\", product_1.default.applicationName);\n    InstallAction = tslib_1.__decorate([\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, dialogs_1.IDialogService),\n        tslib_1.__param(4, log_1.ILogService)\n    ], InstallAction);\n    return InstallAction;\n}(actions_1.Action));\nvar UninstallAction = /** @class */ (function (_super) {\n    tslib_1.__extends(UninstallAction, _super);\n    function UninstallAction(id, label, notificationService, logService, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.notificationService = notificationService;\n        _this.logService = logService;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    Object.defineProperty(UninstallAction.prototype, \"target\", {\n        get: function () {\n            return \"/usr/local/bin/\" + product_1.default.applicationName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UninstallAction.prototype.run = function () {\n        var _this = this;\n        return isAvailable().then(function (isAvailable) {\n            if (!isAvailable) {\n                var message = nls.localize('not available', \"This command is not available\");\n                _this.notificationService.info(message);\n                return undefined;\n            }\n            var uninstall = function () {\n                return pfs.unlink(_this.target)\n                    .then(undefined, ignore('ENOENT', null));\n            };\n            return uninstall().then(undefined, function (err) {\n                if (err.code === 'EACCES') {\n                    return _this.deleteSymlinkAsAdmin();\n                }\n                return Promise.reject(err);\n            }).then(function () {\n                _this.logService.trace('cli#uninstall', _this.target);\n                _this.notificationService.info(nls.localize('successFrom', \"Shell command '{0}' successfully uninstalled from PATH.\", product_1.default.applicationName));\n            });\n        });\n    };\n    UninstallAction.prototype.deleteSymlinkAsAdmin = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var buttons = [nls.localize('ok', \"OK\"), nls.localize('cancel2', \"Cancel\")];\n            _this.dialogService.show(severity_1.default.Info, nls.localize('warnEscalationUninstall', \"Code will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.\"), buttons, { cancelId: 1 }).then(function (choice) {\n                switch (choice) {\n                    case 0 /* OK */:\n                        var command = 'osascript -e \"do shell script \\\\\"rm \\'' + _this.target + '\\'\\\\\" with administrator privileges\"';\n                        async_1.nfcall(cp.exec, command, {})\n                            .then(undefined, function (_) { return Promise.reject(new Error(nls.localize('cantUninstall', \"Unable to uninstall the shell command '{0}'.\", _this.target))); })\n                            .then(resolve, reject);\n                        break;\n                    case 1 /* Cancel */:\n                        reject(new Error(nls.localize('aborted', \"Aborted\")));\n                        break;\n                }\n            });\n        });\n    };\n    UninstallAction.ID = 'workbench.action.uninstallCommandLine';\n    UninstallAction.LABEL = nls.localize('uninstall', \"Uninstall '{0}' command from PATH\", product_1.default.applicationName);\n    UninstallAction = tslib_1.__decorate([\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, log_1.ILogService),\n        tslib_1.__param(4, dialogs_1.IDialogService)\n    ], UninstallAction);\n    return UninstallAction;\n}(actions_1.Action));\nif (platform.isMacintosh) {\n    var category = nls.localize('shellCommand', \"Shell Command\");\n    var workbenchActionsRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    workbenchActionsRegistry.registerWorkbenchAction(new actions_3.SyncActionDescriptor(InstallAction, InstallAction.ID, InstallAction.LABEL), 'Shell Command: Install \\'code\\' command in PATH', category);\n    workbenchActionsRegistry.registerWorkbenchAction(new actions_3.SyncActionDescriptor(UninstallAction, UninstallAction.ID, UninstallAction.LABEL), 'Shell Command: Uninstall \\'code\\' command from PATH', category);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/cli/node/cli.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/cli/node/cli.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,0CAA4C;AAC5C,kCAAoC;AACpC,sCAAwC;AACxC,kDAAoD;AACpD,8CAA8C;AAC9C,kDAAgD;AAChD,uDAAuG;AACvG,iEAAgE;AAChE,8DAA0E;AAC1E,4DAAuD;AACvD,6EAAoF;AACpF,8DAAoE;AACpE,oDAA+C;AAC/C,kDAAyD;AACzD,0CAA0D;AAE1D,SAAS,MAAM,CAAI,IAAY,EAAE,KAAQ;IACxC,OAAO,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAI,GAAG,CAAC,EAAtE,CAAsE,CAAC;AACtF,CAAC;AAED,IAAI,OAAO,GAAkB,IAAI,CAAC;AAClC,SAAS,SAAS;IACjB,IAAI,CAAC,OAAO,EAAE;QACb,IAAM,IAAI,GAAG,0BAAoB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC/C,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;KAClD;IACD,OAAO,OAAO,CAAC;AAChB,CAAC;AAED,SAAS,WAAW;IACnB,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACjD,CAAC;AAED;IAA4B,yCAAM;IAKjC,uBACC,EAAU,EACV,KAAa,EAC0B,mBAAyC,EAC/C,aAA6B,EAChC,UAAuB;QALtD,YAOC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QALuC,yBAAmB,GAAnB,mBAAmB,CAAsB;QAC/C,mBAAa,GAAb,aAAa,CAAgB;QAChC,gBAAU,GAAV,UAAU,CAAa;;IAGtD,CAAC;IAED,sBAAY,iCAAM;aAAlB;YACC,OAAO,oBAAkB,iBAAO,CAAC,eAAiB,CAAC;QACpD,CAAC;;;OAAA;IAED,2BAAG,GAAH;QAAA,iBA8BC;QA7BA,OAAO,WAAW,EAAE,CAAC,IAAI,CAAC,UAAA,WAAW;YACpC,IAAI,CAAC,WAAW,EAAE;gBACjB,IAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,+BAA+B,CAAC,CAAC;gBAC/E,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvC,OAAO,SAAS,CAAC;aACjB;YAED,OAAO,KAAI,CAAC,WAAW,EAAE;iBACvB,IAAI,CAAC,UAAA,WAAW;gBAChB,IAAI,CAAC,WAAW,IAAI,WAAW,EAAE;oBAChC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC7B;qBAAM;oBACN,OAAO,GAAG,CAAC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC;yBAC5B,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;yBACvC,IAAI,CAAC,cAAM,OAAA,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,KAAI,CAAC,MAAM,CAAC,EAArC,CAAqC,CAAC;yBACjD,IAAI,CAAC,SAAS,EAAE,UAAA,GAAG;wBACnB,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE;4BACnD,OAAO,KAAI,CAAC,gCAAgC,EAAE,CAAC;yBAC/C;wBAED,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC;iBACJ;YACF,CAAC,CAAC;iBACD,IAAI,CAAC;gBACL,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,aAAa,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;gBAClD,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,qDAAqD,EAAE,iBAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YAC1I,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,mCAAW,GAAnB;QAAA,iBAMC;QALA,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;aAC3B,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,CAAC;aACnC,IAAI,CAAC,cAAM,OAAA,GAAG,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,EAAzB,CAAyB,CAAC;aACrC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,SAAS,EAAE,EAApB,CAAoB,CAAC;aAClC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEO,wDAAgC,GAAxC;QAAA,iBAmBC;QAlBA,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACxC,IAAM,OAAO,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE9E,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,kGAAkG,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC/M,QAAQ,MAAM,EAAE;oBACf,KAAK,CAAC,CAAC,QAAQ;wBACd,IAAM,OAAO,GAAG,uEAAuE,GAAG,SAAS,EAAE,GAAG,OAAO,GAAG,KAAI,CAAC,MAAM,GAAG,sCAAsC,CAAC;wBAEvK,cAAM,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;6BAC1B,IAAI,CAAC,SAAS,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,oCAAoC,CAAC,CAAC,CAAC,EAApG,CAAoG,CAAC;6BAC1H,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBACxB,MAAM;oBACP,KAAK,CAAC,CAAC,YAAY;wBAClB,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;wBACtD,MAAM;iBACP;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IA5Ee,gBAAE,GAAG,qCAAqC,CAAC;IACpD,mBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,+BAA+B,EAAE,iBAAO,CAAC,eAAe,CAAC,CAAC;IAH5F,aAAa;QAQhB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,wBAAc,CAAA;QACd,mBAAA,iBAAW,CAAA;OAVR,aAAa,CA+ElB;IAAD,oBAAC;CAAA,AA/ED,CAA4B,gBAAM,GA+EjC;AAED;IAA8B,2CAAM;IAKnC,yBACC,EAAU,EACV,KAAa,EAC0B,mBAAyC,EAClD,UAAuB,EACpB,aAA6B;QAL/D,YAOC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QALuC,yBAAmB,GAAnB,mBAAmB,CAAsB;QAClD,gBAAU,GAAV,UAAU,CAAa;QACpB,mBAAa,GAAb,aAAa,CAAgB;;IAG/D,CAAC;IAED,sBAAY,mCAAM;aAAlB;YACC,OAAO,oBAAkB,iBAAO,CAAC,eAAiB,CAAC;QACpD,CAAC;;;OAAA;IAED,6BAAG,GAAH;QAAA,iBAwBC;QAvBA,OAAO,WAAW,EAAE,CAAC,IAAI,CAAC,UAAA,WAAW;YACpC,IAAI,CAAC,WAAW,EAAE;gBACjB,IAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,+BAA+B,CAAC,CAAC;gBAC/E,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvC,OAAO,SAAS,CAAC;aACjB;YAED,IAAM,SAAS,GAAG;gBACjB,OAAO,GAAG,CAAC,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC;qBAC5B,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;YAC3C,CAAC,CAAC;YAEF,OAAO,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,GAAG;gBACrC,IAAI,GAAG,CAAC,IAAI,KAAK,QAAQ,EAAE;oBAC1B,OAAO,KAAI,CAAC,oBAAoB,EAAE,CAAC;iBACnC;gBAED,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC,IAAI,CAAC;gBACP,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,eAAe,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC;gBACpD,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,yDAAyD,EAAE,iBAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YAChJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,8CAAoB,GAA5B;QAAA,iBAmBC;QAlBA,OAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACxC,IAAM,OAAO,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE9E,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,oGAAoG,CAAC,EAAE,OAAO,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAC1N,QAAQ,MAAM,EAAE;oBACf,KAAK,CAAC,CAAC,QAAQ;wBACd,IAAM,OAAO,GAAG,wCAAwC,GAAG,KAAI,CAAC,MAAM,GAAG,sCAAsC,CAAC;wBAEhH,cAAM,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC;6BAC1B,IAAI,CAAC,SAAS,EAAE,UAAA,CAAC,IAAI,OAAA,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,8CAA8C,EAAE,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAArH,CAAqH,CAAC;6BAC3I,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;wBACxB,MAAM;oBACP,KAAK,CAAC,CAAC,YAAY;wBAClB,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;wBACtD,MAAM;iBACP;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IA9De,kBAAE,GAAG,uCAAuC,CAAC;IACtD,qBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,EAAE,mCAAmC,EAAE,iBAAO,CAAC,eAAe,CAAC,CAAC;IAHlG,eAAe;QAQlB,mBAAA,mCAAoB,CAAA;QACpB,mBAAA,iBAAW,CAAA;QACX,mBAAA,wBAAc,CAAA;OAVX,eAAe,CAiEpB;IAAD,sBAAC;CAAA,AAjED,CAA8B,gBAAM,GAiEnC;AAED,IAAI,QAAQ,CAAC,WAAW,EAAE;IACzB,IAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;IAE/D,IAAM,wBAAwB,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;IAC1G,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE,iDAAiD,EAAE,QAAQ,CAAC,CAAC;IAC9L,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,eAAe,EAAE,eAAe,CAAC,EAAE,EAAE,eAAe,CAAC,KAAK,CAAC,EAAE,qDAAqD,EAAE,QAAQ,CAAC,CAAC;CACxM","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as cp from 'child_process';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as platform from 'vs/base/common/platform';\nimport { nfcall } from 'vs/base/common/async';\nimport { Action } from 'vs/base/common/actions';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport product from 'vs/platform/product/node/product';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport Severity from 'vs/base/common/severity';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\n\nfunction ignore<T>(code: string, value: T): (err: any) => Promise<T> {\n\treturn err => err.code === code ? Promise.resolve<T>(value) : Promise.reject<T>(err);\n}\n\nlet _source: string | null = null;\nfunction getSource(): string {\n\tif (!_source) {\n\t\tconst root = getPathFromAmdModule(require, '');\n\t\t_source = path.resolve(root, '..', 'bin', 'code');\n\t}\n\treturn _source;\n}\n\nfunction isAvailable(): Promise<boolean> {\n\treturn Promise.resolve(pfs.exists(getSource()));\n}\n\nclass InstallAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.installCommandLine';\n\tstatic LABEL = nls.localize('install', \"Install '{0}' command in PATH\", product.applicationName);\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate get target(): string {\n\t\treturn `/usr/local/bin/${product.applicationName}`;\n\t}\n\n\trun(): Promise<void> {\n\t\treturn isAvailable().then(isAvailable => {\n\t\t\tif (!isAvailable) {\n\t\t\t\tconst message = nls.localize('not available', \"This command is not available\");\n\t\t\t\tthis.notificationService.info(message);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn this.isInstalled()\n\t\t\t\t.then(isInstalled => {\n\t\t\t\t\tif (!isAvailable || isInstalled) {\n\t\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn pfs.unlink(this.target)\n\t\t\t\t\t\t\t.then(undefined, ignore('ENOENT', null))\n\t\t\t\t\t\t\t.then(() => pfs.symlink(getSource(), this.target))\n\t\t\t\t\t\t\t.then(undefined, err => {\n\t\t\t\t\t\t\t\tif (err.code === 'EACCES' || err.code === 'ENOENT') {\n\t\t\t\t\t\t\t\t\treturn this.createBinFolderAndSymlinkAsAdmin();\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.logService.trace('cli#install', this.target);\n\t\t\t\t\tthis.notificationService.info(nls.localize('successIn', \"Shell command '{0}' successfully installed in PATH.\", product.applicationName));\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isInstalled(): Promise<boolean> {\n\t\treturn pfs.lstat(this.target)\n\t\t\t.then(stat => stat.isSymbolicLink())\n\t\t\t.then(() => pfs.readlink(this.target))\n\t\t\t.then(link => link === getSource())\n\t\t\t.then(undefined, ignore('ENOENT', false));\n\t}\n\n\tprivate createBinFolderAndSymlinkAsAdmin(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst buttons = [nls.localize('ok', \"OK\"), nls.localize('cancel2', \"Cancel\")];\n\n\t\t\tthis.dialogService.show(Severity.Info, nls.localize('warnEscalation', \"Code will now prompt with 'osascript' for Administrator privileges to install the shell command.\"), buttons, { cancelId: 1 }).then(choice => {\n\t\t\t\tswitch (choice) {\n\t\t\t\t\tcase 0 /* OK */:\n\t\t\t\t\t\tconst command = 'osascript -e \"do shell script \\\\\"mkdir -p /usr/local/bin && ln -sf \\'' + getSource() + '\\' \\'' + this.target + '\\'\\\\\" with administrator privileges\"';\n\n\t\t\t\t\t\tnfcall(cp.exec, command, {})\n\t\t\t\t\t\t\t.then(undefined, _ => Promise.reject(new Error(nls.localize('cantCreateBinFolder', \"Unable to create '/usr/local/bin'.\"))))\n\t\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1 /* Cancel */:\n\t\t\t\t\t\treject(new Error(nls.localize('aborted', \"Aborted\")));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nclass UninstallAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.uninstallCommandLine';\n\tstatic LABEL = nls.localize('uninstall', \"Uninstall '{0}' command from PATH\", product.applicationName);\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate get target(): string {\n\t\treturn `/usr/local/bin/${product.applicationName}`;\n\t}\n\n\trun(): Promise<void> {\n\t\treturn isAvailable().then(isAvailable => {\n\t\t\tif (!isAvailable) {\n\t\t\t\tconst message = nls.localize('not available', \"This command is not available\");\n\t\t\t\tthis.notificationService.info(message);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst uninstall = () => {\n\t\t\t\treturn pfs.unlink(this.target)\n\t\t\t\t\t.then(undefined, ignore('ENOENT', null));\n\t\t\t};\n\n\t\t\treturn uninstall().then(undefined, err => {\n\t\t\t\tif (err.code === 'EACCES') {\n\t\t\t\t\treturn this.deleteSymlinkAsAdmin();\n\t\t\t\t}\n\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}).then(() => {\n\t\t\t\tthis.logService.trace('cli#uninstall', this.target);\n\t\t\t\tthis.notificationService.info(nls.localize('successFrom', \"Shell command '{0}' successfully uninstalled from PATH.\", product.applicationName));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate deleteSymlinkAsAdmin(): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst buttons = [nls.localize('ok', \"OK\"), nls.localize('cancel2', \"Cancel\")];\n\n\t\t\tthis.dialogService.show(Severity.Info, nls.localize('warnEscalationUninstall', \"Code will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.\"), buttons, { cancelId: 1 }).then(choice => {\n\t\t\t\tswitch (choice) {\n\t\t\t\t\tcase 0 /* OK */:\n\t\t\t\t\t\tconst command = 'osascript -e \"do shell script \\\\\"rm \\'' + this.target + '\\'\\\\\" with administrator privileges\"';\n\n\t\t\t\t\t\tnfcall(cp.exec, command, {})\n\t\t\t\t\t\t\t.then(undefined, _ => Promise.reject(new Error(nls.localize('cantUninstall', \"Unable to uninstall the shell command '{0}'.\", this.target))))\n\t\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1 /* Cancel */:\n\t\t\t\t\t\treject(new Error(nls.localize('aborted', \"Aborted\")));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nif (platform.isMacintosh) {\n\tconst category = nls.localize('shellCommand', \"Shell Command\");\n\n\tconst workbenchActionsRegistry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(InstallAction, InstallAction.ID, InstallAction.LABEL), 'Shell Command: Install \\'code\\' command in PATH', category);\n\tworkbenchActionsRegistry.registerWorkbenchAction(new SyncActionDescriptor(UninstallAction, UninstallAction.ID, UninstallAction.LABEL), 'Shell Command: Uninstall \\'code\\' command from PATH', category);\n}\n"]}]}