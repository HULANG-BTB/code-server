{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nexports.Extensions = {\n    WorkbenchActions: 'workbench.contributions.actions'\n};\nplatform_1.Registry.add(exports.Extensions.WorkbenchActions, new /** @class */ (function () {\n    function class_1() {\n    }\n    class_1.prototype.registerWorkbenchAction = function (descriptor, alias, category, when) {\n        return this.registerWorkbenchCommandFromAction(descriptor, alias, category, when);\n    };\n    class_1.prototype.registerWorkbenchCommandFromAction = function (descriptor, alias, category, when) {\n        var registrations = [];\n        // command\n        registrations.push(commands_1.CommandsRegistry.registerCommand(descriptor.id, this.createCommandHandler(descriptor)));\n        // keybinding\n        var weight = (typeof descriptor.keybindingWeight === 'undefined' ? keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib : descriptor.keybindingWeight);\n        var keybindings = descriptor.keybindings;\n        keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({\n            id: descriptor.id,\n            weight: weight,\n            when: (descriptor.keybindingContext || when ? contextkey_1.ContextKeyExpr.and(descriptor.keybindingContext, when) : null),\n            primary: keybindings ? keybindings.primary : 0,\n            secondary: keybindings && keybindings.secondary,\n            win: keybindings && keybindings.win,\n            mac: keybindings && keybindings.mac,\n            linux: keybindings && keybindings.linux\n        });\n        // menu item\n        // TODO@Rob slightly weird if-check required because of\n        // https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/contrib/search/electron-browser/search.contribution.ts#L266\n        if (descriptor.label) {\n            var idx = alias.indexOf(': ');\n            var categoryOriginal = '';\n            if (idx > 0) {\n                categoryOriginal = alias.substr(0, idx);\n                alias = alias.substr(idx + 2);\n            }\n            var command = {\n                id: descriptor.id,\n                title: { value: descriptor.label, original: alias },\n                category: category ? { value: category, original: categoryOriginal } : undefined\n            };\n            actions_1.MenuRegistry.addCommand(command);\n            registrations.push(actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, { command: command, when: when }));\n        }\n        // TODO@alex,joh\n        // support removal of keybinding rule\n        // support removal of command-ui\n        return lifecycle_1.combinedDisposable(registrations);\n    };\n    class_1.prototype.createCommandHandler = function (descriptor) {\n        var _this = this;\n        return function (accessor, args) {\n            var notificationService = accessor.get(notification_1.INotificationService);\n            var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n            var lifecycleService = accessor.get(lifecycle_2.ILifecycleService);\n            Promise.resolve(_this.triggerAndDisposeAction(instantiationService, lifecycleService, descriptor, args)).then(undefined, function (err) {\n                notificationService.error(err);\n            });\n        };\n    };\n    class_1.prototype.triggerAndDisposeAction = function (instantiationService, lifecycleService, descriptor, args) {\n        // run action when workbench is created\n        return lifecycleService.when(lifecycle_2.LifecyclePhase.Ready).then(function () {\n            var actionInstance = instantiationService.createInstance(descriptor.syncDescriptor);\n            try {\n                actionInstance.label = descriptor.label || actionInstance.label;\n                // don't run the action when not enabled\n                if (!actionInstance.enabled) {\n                    actionInstance.dispose();\n                    return undefined;\n                }\n                var from = args && args.from || 'keybinding';\n                return Promise.resolve(actionInstance.run(undefined, { from: from })).then(function () {\n                    actionInstance.dispose();\n                }, function (err) {\n                    actionInstance.dispose();\n                    return Promise.reject(err);\n                });\n            }\n            catch (err) {\n                actionInstance.dispose();\n                return Promise.reject(err);\n            }\n        });\n    };\n    return class_1;\n}()));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/actions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ICommandHandler, CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { SyncActionDescriptor, MenuRegistry, MenuId, ICommandAction } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nexport const Extensions = {\n\tWorkbenchActions: 'workbench.contributions.actions'\n};\n\nexport interface IWorkbenchActionRegistry {\n\n\t/**\n\t * Registers a workbench action to the platform. Workbench actions are not\n\t * visible by default and can only be invoked through a keybinding if provided.\n\t */\n\tregisterWorkbenchAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpr): IDisposable;\n}\n\nRegistry.add(Extensions.WorkbenchActions, new class implements IWorkbenchActionRegistry {\n\n\tregisterWorkbenchAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpr): IDisposable {\n\t\treturn this.registerWorkbenchCommandFromAction(descriptor, alias, category, when);\n\t}\n\n\tprivate registerWorkbenchCommandFromAction(descriptor: SyncActionDescriptor, alias: string, category?: string, when?: ContextKeyExpr): IDisposable {\n\t\tlet registrations: IDisposable[] = [];\n\n\t\t// command\n\t\tregistrations.push(CommandsRegistry.registerCommand(descriptor.id, this.createCommandHandler(descriptor)));\n\n\t\t// keybinding\n\t\tconst weight = (typeof descriptor.keybindingWeight === 'undefined' ? KeybindingWeight.WorkbenchContrib : descriptor.keybindingWeight);\n\t\tconst keybindings = descriptor.keybindings;\n\t\tKeybindingsRegistry.registerKeybindingRule({\n\t\t\tid: descriptor.id,\n\t\t\tweight: weight,\n\t\t\twhen: (descriptor.keybindingContext || when ? ContextKeyExpr.and(descriptor.keybindingContext, when) : null),\n\t\t\tprimary: keybindings ? keybindings.primary : 0,\n\t\t\tsecondary: keybindings && keybindings.secondary,\n\t\t\twin: keybindings && keybindings.win,\n\t\t\tmac: keybindings && keybindings.mac,\n\t\t\tlinux: keybindings && keybindings.linux\n\t\t});\n\n\t\t// menu item\n\t\t// TODO@Rob slightly weird if-check required because of\n\t\t// https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/contrib/search/electron-browser/search.contribution.ts#L266\n\t\tif (descriptor.label) {\n\n\t\t\tlet idx = alias.indexOf(': ');\n\t\t\tlet categoryOriginal = '';\n\t\t\tif (idx > 0) {\n\t\t\t\tcategoryOriginal = alias.substr(0, idx);\n\t\t\t\talias = alias.substr(idx + 2);\n\t\t\t}\n\n\t\t\tconst command: ICommandAction = {\n\t\t\t\tid: descriptor.id,\n\t\t\t\ttitle: { value: descriptor.label, original: alias },\n\t\t\t\tcategory: category ? { value: category, original: categoryOriginal } : undefined\n\t\t\t};\n\n\t\t\tMenuRegistry.addCommand(command);\n\n\t\t\tregistrations.push(MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command, when }));\n\t\t}\n\n\t\t// TODO@alex,joh\n\t\t// support removal of keybinding rule\n\t\t// support removal of command-ui\n\t\treturn combinedDisposable(registrations);\n\t}\n\n\tprivate createCommandHandler(descriptor: SyncActionDescriptor): ICommandHandler {\n\t\treturn (accessor, args) => {\n\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\n\t\t\tPromise.resolve(this.triggerAndDisposeAction(instantiationService, lifecycleService, descriptor, args)).then(undefined, err => {\n\t\t\t\tnotificationService.error(err);\n\t\t\t});\n\t\t};\n\t}\n\n\tprivate triggerAndDisposeAction(instantiationService: IInstantiationService, lifecycleService: ILifecycleService, descriptor: SyncActionDescriptor, args: any): Promise<void> {\n\n\t\t// run action when workbench is created\n\t\treturn lifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\tconst actionInstance = instantiationService.createInstance(descriptor.syncDescriptor);\n\t\t\ttry {\n\t\t\t\tactionInstance.label = descriptor.label || actionInstance.label;\n\n\t\t\t\t// don't run the action when not enabled\n\t\t\t\tif (!actionInstance.enabled) {\n\t\t\t\t\tactionInstance.dispose();\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst from = args && args.from || 'keybinding';\n\n\t\t\t\treturn Promise.resolve(actionInstance.run(undefined, { from })).then(() => {\n\t\t\t\t\tactionInstance.dispose();\n\t\t\t\t}, err => {\n\t\t\t\t\tactionInstance.dispose();\n\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tactionInstance.dispose();\n\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t});\n\t}\n});\n"]}]}