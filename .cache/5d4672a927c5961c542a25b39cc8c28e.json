{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalQuickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalQuickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar actions_1 = require(\"vs/workbench/browser/actions\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar TerminalEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalEntry, _super);\n    function TerminalEntry(instance, label, terminalService) {\n        var _this = _super.call(this) || this;\n        _this.instance = instance;\n        _this.label = label;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    TerminalEntry.prototype.getLabel = function () {\n        return this.label;\n    };\n    TerminalEntry.prototype.getAriaLabel = function () {\n        return nls.localize('termEntryAriaLabel', \"{0}, terminal picker\", this.getLabel());\n    };\n    TerminalEntry.prototype.run = function (mode, context) {\n        var _this = this;\n        if (mode === quickOpen_1.Mode.OPEN) {\n            setTimeout(function () {\n                _this.terminalService.setActiveInstance(_this.instance);\n                _this.terminalService.showPanel(true);\n            }, 0);\n            return true;\n        }\n        return _super.prototype.run.call(this, mode, context);\n    };\n    return TerminalEntry;\n}(quickOpenModel_1.QuickOpenEntry));\nexports.TerminalEntry = TerminalEntry;\nvar CreateTerminal = /** @class */ (function (_super) {\n    tslib_1.__extends(CreateTerminal, _super);\n    function CreateTerminal(label, commandService) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        _this.commandService = commandService;\n        return _this;\n    }\n    CreateTerminal.prototype.getLabel = function () {\n        return this.label;\n    };\n    CreateTerminal.prototype.getAriaLabel = function () {\n        return nls.localize('termCreateEntryAriaLabel', \"{0}, create new terminal\", this.getLabel());\n    };\n    CreateTerminal.prototype.run = function (mode, context) {\n        var _this = this;\n        if (mode === quickOpen_1.Mode.OPEN) {\n            setTimeout(function () { return _this.commandService.executeCommand('workbench.action.terminal.new'); }, 0);\n            return true;\n        }\n        return _super.prototype.run.call(this, mode, context);\n    };\n    return CreateTerminal;\n}(quickOpenModel_1.QuickOpenEntry));\nexports.CreateTerminal = CreateTerminal;\nvar TerminalPickerHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalPickerHandler, _super);\n    function TerminalPickerHandler(terminalService, commandService) {\n        var _this = _super.call(this) || this;\n        _this.terminalService = terminalService;\n        _this.commandService = commandService;\n        return _this;\n    }\n    TerminalPickerHandler.prototype.getResults = function (searchValue, token) {\n        searchValue = searchValue.trim();\n        var normalizedSearchValueLowercase = strings_1.stripWildcards(searchValue).toLowerCase();\n        var terminalEntries = this.getTerminals();\n        terminalEntries.push(new CreateTerminal(nls.localize(\"workbench.action.terminal.newplus\", \"$(plus) Create New Integrated Terminal\"), this.commandService));\n        var entries = terminalEntries.filter(function (e) {\n            if (!searchValue) {\n                return true;\n            }\n            var label = e.getLabel();\n            if (!label) {\n                return false;\n            }\n            var highlights = filters_1.matchesFuzzy(normalizedSearchValueLowercase, label, true);\n            if (!highlights) {\n                return false;\n            }\n            e.setHighlights(highlights);\n            return true;\n        });\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(entries, new actions_1.ContributableActionProvider()));\n    };\n    TerminalPickerHandler.prototype.getTerminals = function () {\n        var _this = this;\n        return this.terminalService.terminalTabs.reduce(function (terminals, tab, tabIndex) {\n            var terminalsInTab = tab.terminalInstances.map(function (terminal, terminalIndex) {\n                var label = tabIndex + 1 + \".\" + (terminalIndex + 1) + \": \" + terminal.title;\n                return new TerminalEntry(terminal, label, _this.terminalService);\n            });\n            return terminals.concat(terminalsInTab);\n        }, []);\n    };\n    TerminalPickerHandler.prototype.getAutoFocus = function (searchValue, context) {\n        return {\n            autoFocusFirstEntry: !!searchValue || !!context.quickNavigateConfiguration\n        };\n    };\n    TerminalPickerHandler.prototype.getEmptyLabel = function (searchString) {\n        if (searchString.length > 0) {\n            return nls.localize('noTerminalsMatching', \"No terminals matching\");\n        }\n        return nls.localize('noTerminalsFound', \"No terminals open\");\n    };\n    TerminalPickerHandler.ID = 'workbench.picker.terminals';\n    TerminalPickerHandler = tslib_1.__decorate([\n        tslib_1.__param(0, terminal_1.ITerminalService),\n        tslib_1.__param(1, commands_1.ICommandService)\n    ], TerminalPickerHandler);\n    return TerminalPickerHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.TerminalPickerHandler = TerminalPickerHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalQuickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalQuickOpen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Mode, IEntryRunContext, IAutoFocus, IQuickNavigateConfiguration, IModel } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenModel, QuickOpenEntry } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { QuickOpenHandler } from 'vs/workbench/browser/quickopen';\nimport { ITerminalService, ITerminalInstance } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ContributableActionProvider } from 'vs/workbench/browser/actions';\nimport { stripWildcards } from 'vs/base/common/strings';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class TerminalEntry extends QuickOpenEntry {\n\n\tconstructor(\n\t\tpublic instance: ITerminalInstance,\n\t\tprivate label: string,\n\t\tprivate terminalService: ITerminalService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('termEntryAriaLabel', \"{0}, terminal picker\", this.getLabel());\n\t}\n\n\tpublic run(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.terminalService.setActiveInstance(this.instance);\n\t\t\t\tthis.terminalService.showPanel(true);\n\t\t\t}, 0);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.run(mode, context);\n\t}\n}\n\nexport class CreateTerminal extends QuickOpenEntry {\n\n\tconstructor(\n\t\tprivate label: string,\n\t\tprivate commandService: ICommandService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('termCreateEntryAriaLabel', \"{0}, create new terminal\", this.getLabel());\n\t}\n\n\tpublic run(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\tsetTimeout(() => this.commandService.executeCommand('workbench.action.terminal.new'), 0);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.run(mode, context);\n\t}\n}\n\nexport class TerminalPickerHandler extends QuickOpenHandler {\n\n\tpublic static readonly ID = 'workbench.picker.terminals';\n\n\tconstructor(\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tsearchValue = searchValue.trim();\n\t\tconst normalizedSearchValueLowercase = stripWildcards(searchValue).toLowerCase();\n\n\t\tconst terminalEntries: QuickOpenEntry[] = this.getTerminals();\n\t\tterminalEntries.push(new CreateTerminal(nls.localize(\"workbench.action.terminal.newplus\", \"$(plus) Create New Integrated Terminal\"), this.commandService));\n\n\t\tconst entries = terminalEntries.filter(e => {\n\t\t\tif (!searchValue) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst label = e.getLabel();\n\t\t\tif (!label) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst highlights = matchesFuzzy(normalizedSearchValueLowercase, label, true);\n\t\t\tif (!highlights) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\te.setHighlights(highlights);\n\n\t\t\treturn true;\n\t\t});\n\n\t\treturn Promise.resolve(new QuickOpenModel(entries, new ContributableActionProvider()));\n\t}\n\n\tprivate getTerminals(): TerminalEntry[] {\n\t\treturn this.terminalService.terminalTabs.reduce((terminals, tab, tabIndex) => {\n\t\t\tconst terminalsInTab = tab.terminalInstances.map((terminal, terminalIndex) => {\n\t\t\t\tconst label = `${tabIndex + 1}.${terminalIndex + 1}: ${terminal.title}`;\n\t\t\t\treturn new TerminalEntry(terminal, label, this.terminalService);\n\t\t\t});\n\t\t\treturn [...terminals, ...terminalsInTab];\n\t\t}, []);\n\t}\n\n\tpublic getAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: !!searchValue || !!context.quickNavigateConfiguration\n\t\t};\n\t}\n\n\tpublic getEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noTerminalsMatching', \"No terminals matching\");\n\t\t}\n\t\treturn nls.localize('noTerminalsFound', \"No terminals open\");\n\t}\n}"]}]}