{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vscodeTextmate = require(\"../../../../lib/vscode/node_modules/vscode-textmate\");\nvar target = vscodeTextmate;\ntarget.Registry = /** @class */ (function (_super) {\n    tslib_1.__extends(Registry, _super);\n    function Registry(opts) {\n        return _super.call(this, tslib_1.__assign({}, opts, { getOnigLib: function () {\n                return new Promise(function (res, rej) {\n                    var onigasm = require(\"onigasm\");\n                    var wasmUrl = require(\"!!file-loader!onigasm/lib/onigasm.wasm\");\n                    return fetch(wasmUrl).then(function (resp) { return resp.arrayBuffer(); }).then(function (buffer) {\n                        return onigasm.loadWASM(buffer);\n                    }).then(function () {\n                        res({\n                            createOnigScanner: function (patterns) { return new onigasm.OnigScanner(patterns); },\n                            createOnigString: function (s) { return new onigasm.OnigString(s); },\n                        });\n                    }).catch(function (reason) { return rej(reason); });\n                });\n            } })) || this;\n    }\n    return Registry;\n}(vscodeTextmate.Registry));\nvar StandardTokenType;\n(function (StandardTokenType) {\n    StandardTokenType[StandardTokenType[\"Other\"] = 0] = \"Other\";\n    StandardTokenType[StandardTokenType[\"Comment\"] = 1] = \"Comment\";\n    StandardTokenType[StandardTokenType[\"String\"] = 2] = \"String\";\n    StandardTokenType[StandardTokenType[\"RegEx\"] = 4] = \"RegEx\";\n})(StandardTokenType || (StandardTokenType = {}));\n// tslint:disable-next-line no-any to override const\ntarget.StandardTokenType = StandardTokenType;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/vscodeTextmate.ts"],"names":[],"mappings":";;;AAAA,oFAAsF;AAEtF,IAAM,MAAM,GAAG,cAAuC,CAAC;AAEvD,MAAM,CAAC,QAAQ;IAA0B,oCAAuB;IAC/D,kBAAmB,IAAoC;eACtD,uCACI,IAAI,IACP,UAAU,EAAE;gBACX,OAAO,IAAI,OAAO,CAA0B,UAAC,GAAG,EAAE,GAAG;oBACpD,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnC,IAAM,OAAO,GAAG,OAAO,CAAC,wCAAwC,CAAC,CAAC;oBAElE,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;wBACjE,OAAO,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACjC,CAAC,CAAC,CAAC,IAAI,CAAC;wBACP,GAAG,CAAC;4BACH,iBAAiB,EAAE,UAAU,QAAQ,IAAI,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BACpF,gBAAgB,EAAE,UAAU,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBACpE,CAAC,CAAC;oBACJ,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,MAAM,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,EAAX,CAAW,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACJ,CAAC,IACA;IACH,CAAC;IACF,eAAC;AAAD,CAAC,AArBiB,CAAuB,cAAc,CAAC,QAAQ,EAqB/D,CAAC;AAEF,IAAK,iBAKJ;AALD,WAAK,iBAAiB;IACrB,2DAAS,CAAA;IACT,+DAAW,CAAA;IACX,6DAAU,CAAA;IACV,2DAAS,CAAA;AACV,CAAC,EALI,iBAAiB,KAAjB,iBAAiB,QAKrB;AAED,oDAAoD;AACnD,MAAc,CAAC,iBAAiB,GAAG,iBAAiB,CAAC","sourcesContent":["import * as vscodeTextmate from \"../../../../lib/vscode/node_modules/vscode-textmate\";\n\nconst target = vscodeTextmate as typeof vscodeTextmate;\n\ntarget.Registry = class Registry extends vscodeTextmate.Registry {\n\tpublic constructor(opts: vscodeTextmate.RegistryOptions) {\n\t\tsuper({\n\t\t\t...opts,\n\t\t\tgetOnigLib: (): Promise<vscodeTextmate.IOnigLib> => {\n\t\t\t\treturn new Promise<vscodeTextmate.IOnigLib>((res, rej) => {\n\t\t\t\t\tconst onigasm = require(\"onigasm\");\n\t\t\t\t\tconst wasmUrl = require(\"!!file-loader!onigasm/lib/onigasm.wasm\");\n\n\t\t\t\t\treturn fetch(wasmUrl).then(resp => resp.arrayBuffer()).then(buffer => {\n\t\t\t\t\t\treturn onigasm.loadWASM(buffer);\n\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tcreateOnigScanner: function (patterns) { return new onigasm.OnigScanner(patterns); },\n\t\t\t\t\t\t\tcreateOnigString: function (s) { return new onigasm.OnigString(s); },\n\t\t\t\t\t\t});\n\t\t\t\t\t}).catch(reason => rej(reason));\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\t}\n};\n\nenum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 4,\n}\n\n// tslint:disable-next-line no-any to override const\n(target as any).StandardTokenType = StandardTokenType;\n"]}]}