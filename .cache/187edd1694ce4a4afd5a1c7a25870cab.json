{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadProgress.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadProgress.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadProgress = /** @class */ (function () {\n    function MainThreadProgress(extHostContext, progressService) {\n        this._progress = new Map();\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostProgress);\n        this._progressService = progressService;\n    }\n    MainThreadProgress.prototype.dispose = function () {\n        this._progress.forEach(function (handle) { return handle.resolve(); });\n        this._progress.clear();\n    };\n    MainThreadProgress.prototype.$startProgress = function (handle, options) {\n        var _this = this;\n        var task = this._createTask(handle);\n        this._progressService.withProgress(options, task, function () { return _this._proxy.$acceptProgressCanceled(handle); });\n    };\n    MainThreadProgress.prototype.$progressReport = function (handle, message) {\n        var entry = this._progress.get(handle);\n        if (entry) {\n            entry.progress.report(message);\n        }\n    };\n    MainThreadProgress.prototype.$progressEnd = function (handle) {\n        var entry = this._progress.get(handle);\n        if (entry) {\n            entry.resolve();\n            this._progress.delete(handle);\n        }\n    };\n    MainThreadProgress.prototype._createTask = function (handle) {\n        var _this = this;\n        return function (progress) {\n            return new Promise(function (resolve) {\n                _this._progress.set(handle, { resolve: resolve, progress: progress });\n            });\n        };\n    };\n    MainThreadProgress = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadProgress),\n        tslib_1.__param(1, progress_1.IProgressService2)\n    ], MainThreadProgress);\n    return MainThreadProgress;\n}());\nexports.MainThreadProgress = MainThreadProgress;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadProgress.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadProgress.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAAqH;AACrH,+DAAyI;AACzI,6EAAgF;AAGhF;IAMC,4BACC,cAA+B,EACZ,eAAkC;QAL9C,cAAS,GAAG,IAAI,GAAG,EAAuE,CAAC;QAOlG,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,eAAe,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IACzC,CAAC;IAED,oCAAO,GAAP;QACC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,OAAO,EAAE,EAAhB,CAAgB,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED,2CAAc,GAAd,UAAe,MAAc,EAAE,OAAyB;QAAxD,iBAIC;QAHA,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAEtC,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,MAAM,CAAC,EAA3C,CAA2C,CAAC,CAAC;IACtG,CAAC;IAED,4CAAe,GAAf,UAAgB,MAAc,EAAE,OAAsB;QACrD,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,KAAK,EAAE;YACV,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC/B;IACF,CAAC;IAED,yCAAY,GAAZ,UAAa,MAAc;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzC,IAAI,KAAK,EAAE;YACV,KAAK,CAAC,OAAO,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC9B;IACF,CAAC;IAEO,wCAAW,GAAnB,UAAoB,MAAc;QAAlC,iBAMC;QALA,OAAO,UAAC,QAAkC;YACzC,OAAO,IAAI,OAAO,CAAM,UAAA,OAAO;gBAC9B,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC;IACH,CAAC;IA9CW,kBAAkB;QAD9B,uCAAoB,CAAC,8BAAW,CAAC,kBAAkB,CAAC;QASlD,mBAAA,4BAAiB,CAAA;OARP,kBAAkB,CA+C9B;IAAD,yBAAC;CAAA,AA/CD,IA+CC;AA/CY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProgress, IProgressService2, IProgressStep, IProgressOptions } from 'vs/platform/progress/common/progress';\nimport { MainThreadProgressShape, MainContext, IExtHostContext, ExtHostProgressShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadProgress)\nexport class MainThreadProgress implements MainThreadProgressShape {\n\n\tprivate readonly _progressService: IProgressService2;\n\tprivate _progress = new Map<number, { resolve: () => void, progress: IProgress<IProgressStep> }>();\n\tprivate readonly _proxy: ExtHostProgressShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IProgressService2 progressService: IProgressService2\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostProgress);\n\t\tthis._progressService = progressService;\n\t}\n\n\tdispose(): void {\n\t\tthis._progress.forEach(handle => handle.resolve());\n\t\tthis._progress.clear();\n\t}\n\n\t$startProgress(handle: number, options: IProgressOptions): void {\n\t\tconst task = this._createTask(handle);\n\n\t\tthis._progressService.withProgress(options, task, () => this._proxy.$acceptProgressCanceled(handle));\n\t}\n\n\t$progressReport(handle: number, message: IProgressStep): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tif (entry) {\n\t\t\tentry.progress.report(message);\n\t\t}\n\t}\n\n\t$progressEnd(handle: number): void {\n\t\tconst entry = this._progress.get(handle);\n\t\tif (entry) {\n\t\t\tentry.resolve();\n\t\t\tthis._progress.delete(handle);\n\t\t}\n\t}\n\n\tprivate _createTask(handle: number) {\n\t\treturn (progress: IProgress<IProgressStep>) => {\n\t\t\treturn new Promise<any>(resolve => {\n\t\t\t\tthis._progress.set(handle, { resolve, progress });\n\t\t\t});\n\t\t};\n\t}\n}\n"]}]}