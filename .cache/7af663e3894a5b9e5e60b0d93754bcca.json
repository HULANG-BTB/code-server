{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = require(\"fs\");\nvar async_1 = require(\"vs/base/common/async\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar update_1 = require(\"vs/platform/update/common/update\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar files = require(\"vs/workbench/contrib/files/common/files\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar timerService_1 = require(\"vs/workbench/services/timer/electron-browser/timerService\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar performance_1 = require(\"vs/base/common/performance\");\nvar StartupTimings = /** @class */ (function () {\n    function StartupTimings(_timerService, _windowsService, _editorService, _viewletService, _panelService, _telemetryService, _lifecycleService, _updateService, _envService) {\n        this._timerService = _timerService;\n        this._windowsService = _windowsService;\n        this._editorService = _editorService;\n        this._viewletService = _viewletService;\n        this._panelService = _panelService;\n        this._telemetryService = _telemetryService;\n        this._lifecycleService = _lifecycleService;\n        this._updateService = _updateService;\n        this._envService = _envService;\n        //\n        this._report().catch(errors_1.onUnexpectedError);\n    }\n    StartupTimings.prototype._report = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isStandardStartup;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._isStandardStartup()];\n                    case 1:\n                        isStandardStartup = _a.sent();\n                        this._reportStartupTimes().catch(errors_1.onUnexpectedError);\n                        this._appendStartupTimes(isStandardStartup).catch(errors_1.onUnexpectedError);\n                        this._reportPerfTicks();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StartupTimings.prototype._reportStartupTimes = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var metrics;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._timerService.startupMetrics];\n                    case 1:\n                        metrics = _a.sent();\n                        /* __GDPR__\n                            \"startupTimeVaried\" : {\n                                \"${include}\": [\n                                    \"${IStartupMetrics}\"\n                                ]\n                            }\n                        */\n                        this._telemetryService.publicLog('startupTimeVaried', metrics);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StartupTimings.prototype._appendStartupTimes = function (isStandardStartup) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var appendTo, sessionId;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        appendTo = this._envService.args['prof-append-timers'];\n                        if (!appendTo) {\n                            // nothing to do\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this._telemetryService.getTelemetryInfo()];\n                    case 1:\n                        sessionId = (_a.sent()).sessionId;\n                        Promise.all([\n                            this._timerService.startupMetrics,\n                            async_1.timeout(15000),\n                        ]).then(function (_a) {\n                            var startupMetrics = _a[0];\n                            return async_1.nfcall(fs_1.appendFile, appendTo, startupMetrics.ellapsed + \"\\t\" + product_1.default.nameShort + \"\\t\" + ((product_1.default.commit || '').slice(0, 10) || '0000000000') + \"\\t\" + sessionId + \"\\t\" + (isStandardStartup ? 'standard_start' : 'NO_standard_start') + \"\\n\");\n                        }).then(function () {\n                            _this._windowsService.quit();\n                        }).catch(function (err) {\n                            console.error(err);\n                            _this._windowsService.quit();\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StartupTimings.prototype._isStandardStartup = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var activeViewlet, visibleControls;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // check for standard startup:\n                        // * new window (no reload)\n                        // * just one window\n                        // * explorer viewlet visible\n                        // * one text editor (not multiple, not webview, welcome etc...)\n                        // * cached data present (not rejected, not created)\n                        if (this._lifecycleService.startupKind !== lifecycle_1.StartupKind.NewWindow) {\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this._windowsService.getWindowCount()];\n                    case 1:\n                        if ((_a.sent()) !== 1) {\n                            return [2 /*return*/, false];\n                        }\n                        activeViewlet = this._viewletService.getActiveViewlet();\n                        if (!activeViewlet || activeViewlet.getId() !== files.VIEWLET_ID) {\n                            return [2 /*return*/, false];\n                        }\n                        visibleControls = this._editorService.visibleControls;\n                        if (visibleControls.length !== 1 || !editorBrowser_1.isCodeEditor(visibleControls[0].getControl())) {\n                            return [2 /*return*/, false];\n                        }\n                        if (this._panelService.getActivePanel()) {\n                            return [2 /*return*/, false];\n                        }\n                        if (!timerService_1.didUseCachedData()) {\n                            return [2 /*return*/, false];\n                        }\n                        return [4 /*yield*/, this._updateService.isLatestVersion()];\n                    case 2:\n                        if (!(_a.sent())) {\n                            return [2 /*return*/, false];\n                        }\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    StartupTimings.prototype._reportPerfTicks = function () {\n        var entries = Object.create(null);\n        for (var _i = 0, _a = performance_1.getEntries(); _i < _a.length; _i++) {\n            var entry = _a[_i];\n            entries[entry.name] = entry.timestamp;\n        }\n        /* __GDPR__\n            \"startupRawTimers\" : {\n                \"entries\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n            }\n        */\n        this._telemetryService.publicLog('startupRawTimers', { entries: entries });\n    };\n    StartupTimings = tslib_1.__decorate([\n        tslib_1.__param(0, timerService_1.ITimerService),\n        tslib_1.__param(1, windows_1.IWindowsService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, viewlet_1.IViewletService),\n        tslib_1.__param(4, panelService_1.IPanelService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, lifecycle_1.ILifecycleService),\n        tslib_1.__param(7, update_1.IUpdateService),\n        tslib_1.__param(8, environment_1.IEnvironmentService)\n    ], StartupTimings);\n    return StartupTimings;\n}());\nexports.StartupTimings = StartupTimings;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupTimings.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { appendFile } from 'fs';\nimport { nfcall, timeout } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILifecycleService, StartupKind } from 'vs/platform/lifecycle/common/lifecycle';\nimport product from 'vs/platform/product/node/product';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport * as files from 'vs/workbench/contrib/files/common/files';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { didUseCachedData, ITimerService } from 'vs/workbench/services/timer/electron-browser/timerService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { getEntries } from 'vs/base/common/performance';\n\nexport class StartupTimings implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITimerService private readonly _timerService: ITimerService,\n\t\t@IWindowsService private readonly _windowsService: IWindowsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IViewletService private readonly _viewletService: IViewletService,\n\t\t@IPanelService private readonly _panelService: IPanelService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IUpdateService private readonly _updateService: IUpdateService,\n\t\t@IEnvironmentService private readonly _envService: IEnvironmentService,\n\t) {\n\t\t//\n\t\tthis._report().catch(onUnexpectedError);\n\t}\n\n\tprivate async _report() {\n\t\tconst isStandardStartup = await this._isStandardStartup();\n\t\tthis._reportStartupTimes().catch(onUnexpectedError);\n\t\tthis._appendStartupTimes(isStandardStartup).catch(onUnexpectedError);\n\t\tthis._reportPerfTicks();\n\t}\n\n\tprivate async _reportStartupTimes(): Promise<void> {\n\t\tconst metrics = await this._timerService.startupMetrics;\n\n\t\t/* __GDPR__\n\t\t\t\"startupTimeVaried\" : {\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${IStartupMetrics}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('startupTimeVaried', metrics);\n\t}\n\n\tprivate async _appendStartupTimes(isStandardStartup: boolean) {\n\t\tlet appendTo = this._envService.args['prof-append-timers'];\n\t\tif (!appendTo) {\n\t\t\t// nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst { sessionId } = await this._telemetryService.getTelemetryInfo();\n\n\t\tPromise.all([\n\t\t\tthis._timerService.startupMetrics,\n\t\t\ttimeout(15000), // wait: cached data creation, telemetry sending\n\t\t]).then(([startupMetrics]) => {\n\t\t\treturn nfcall(appendFile, appendTo, `${startupMetrics.ellapsed}\\t${product.nameShort}\\t${(product.commit || '').slice(0, 10) || '0000000000'}\\t${sessionId}\\t${isStandardStartup ? 'standard_start' : 'NO_standard_start'}\\n`);\n\t\t}).then(() => {\n\t\t\tthis._windowsService.quit();\n\t\t}).catch(err => {\n\t\t\tconsole.error(err);\n\t\t\tthis._windowsService.quit();\n\t\t});\n\t}\n\n\tprivate async _isStandardStartup(): Promise<boolean> {\n\t\t// check for standard startup:\n\t\t// * new window (no reload)\n\t\t// * just one window\n\t\t// * explorer viewlet visible\n\t\t// * one text editor (not multiple, not webview, welcome etc...)\n\t\t// * cached data present (not rejected, not created)\n\t\tif (this._lifecycleService.startupKind !== StartupKind.NewWindow) {\n\t\t\treturn false;\n\t\t}\n\t\tif (await this._windowsService.getWindowCount() !== 1) {\n\t\t\treturn false;\n\t\t}\n\t\tconst activeViewlet = this._viewletService.getActiveViewlet();\n\t\tif (!activeViewlet || activeViewlet.getId() !== files.VIEWLET_ID) {\n\t\t\treturn false;\n\t\t}\n\t\tconst visibleControls = this._editorService.visibleControls;\n\t\tif (visibleControls.length !== 1 || !isCodeEditor(visibleControls[0].getControl())) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._panelService.getActivePanel()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!didUseCachedData()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!await this._updateService.isLatestVersion()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate _reportPerfTicks(): void {\n\t\tconst entries: Record<string, number> = Object.create(null);\n\t\tfor (const entry of getEntries()) {\n\t\t\tentries[entry.name] = entry.timestamp;\n\t\t}\n\t\t/* __GDPR__\n\t\t\t\"startupRawTimers\" : {\n\t\t\t\t\"entries\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('startupRawTimers', { entries });\n\t}\n}\n\n"]}]}