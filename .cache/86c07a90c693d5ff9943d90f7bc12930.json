{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/grid.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/grid.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./gridview\");\nvar sash_1 = require(\"vs/base/browser/ui/sash/sash\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar gridview_1 = require(\"./gridview\");\nvar event_1 = require(\"vs/base/common/event\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar gridview_2 = require(\"./gridview\");\nexports.Orientation = gridview_2.Orientation;\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"Up\"] = 0] = \"Up\";\n    Direction[Direction[\"Down\"] = 1] = \"Down\";\n    Direction[Direction[\"Left\"] = 2] = \"Left\";\n    Direction[Direction[\"Right\"] = 3] = \"Right\";\n})(Direction = exports.Direction || (exports.Direction = {}));\nfunction oppositeDirection(direction) {\n    switch (direction) {\n        case Direction.Up: return Direction.Down;\n        case Direction.Down: return Direction.Up;\n        case Direction.Left: return Direction.Right;\n        case Direction.Right: return Direction.Left;\n    }\n}\nfunction isGridBranchNode(node) {\n    return !!node.children;\n}\nexports.isGridBranchNode = isGridBranchNode;\nfunction getGridNode(node, location) {\n    if (location.length === 0) {\n        return node;\n    }\n    if (!isGridBranchNode(node)) {\n        throw new Error('Invalid location');\n    }\n    var index = location[0], rest = location.slice(1);\n    return getGridNode(node.children[index], rest);\n}\nfunction intersects(one, other) {\n    return !(one.start >= other.end || other.start >= one.end);\n}\nfunction getBoxBoundary(box, direction) {\n    var orientation = getDirectionOrientation(direction);\n    var offset = direction === Direction.Up ? box.top :\n        direction === Direction.Right ? box.left + box.width :\n            direction === Direction.Down ? box.top + box.height :\n                box.left;\n    var range = {\n        start: orientation === sash_1.Orientation.HORIZONTAL ? box.top : box.left,\n        end: orientation === sash_1.Orientation.HORIZONTAL ? box.top + box.height : box.left + box.width\n    };\n    return { offset: offset, range: range };\n}\nfunction findAdjacentBoxLeafNodes(boxNode, direction, boundary) {\n    var result = [];\n    function _(boxNode, direction, boundary) {\n        if (isGridBranchNode(boxNode)) {\n            for (var _i = 0, _a = boxNode.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                _(child, direction, boundary);\n            }\n        }\n        else {\n            var _b = getBoxBoundary(boxNode.box, direction), offset = _b.offset, range = _b.range;\n            if (offset === boundary.offset && intersects(range, boundary.range)) {\n                result.push(boxNode);\n            }\n        }\n    }\n    _(boxNode, direction, boundary);\n    return result;\n}\nfunction getLocationOrientation(rootOrientation, location) {\n    return location.length % 2 === 0 ? gridview_1.orthogonal(rootOrientation) : rootOrientation;\n}\nfunction getDirectionOrientation(direction) {\n    return direction === Direction.Up || direction === Direction.Down ? sash_1.Orientation.VERTICAL : sash_1.Orientation.HORIZONTAL;\n}\nfunction getSize(dimensions, orientation) {\n    return orientation === sash_1.Orientation.HORIZONTAL ? dimensions.width : dimensions.height;\n}\nfunction getRelativeLocation(rootOrientation, location, direction) {\n    var orientation = getLocationOrientation(rootOrientation, location);\n    var directionOrientation = getDirectionOrientation(direction);\n    if (orientation === directionOrientation) {\n        var _a = arrays_1.tail2(location), rest = _a[0], index = _a[1];\n        if (direction === Direction.Right || direction === Direction.Down) {\n            index += 1;\n        }\n        return rest.concat([index]);\n    }\n    else {\n        var index = (direction === Direction.Right || direction === Direction.Down) ? 1 : 0;\n        return location.concat([index]);\n    }\n}\nexports.getRelativeLocation = getRelativeLocation;\nfunction indexInParent(element) {\n    var parentElement = element.parentElement;\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n    var el = parentElement.firstElementChild;\n    var index = 0;\n    while (el !== element && el !== parentElement.lastElementChild && el) {\n        el = el.nextElementSibling;\n        index++;\n    }\n    return index;\n}\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nfunction getGridLocation(element) {\n    var parentElement = element.parentElement;\n    if (!parentElement) {\n        throw new Error('Invalid grid element');\n    }\n    if (/\\bmonaco-grid-view\\b/.test(parentElement.className)) {\n        return [];\n    }\n    var index = indexInParent(parentElement);\n    var ancestor = parentElement.parentElement.parentElement.parentElement;\n    return getGridLocation(ancestor).concat([index]);\n}\nvar Sizing;\n(function (Sizing) {\n    Sizing[\"Distribute\"] = \"distribute\";\n    Sizing[\"Split\"] = \"split\";\n})(Sizing = exports.Sizing || (exports.Sizing = {}));\nvar Grid = /** @class */ (function () {\n    function Grid(view, options) {\n        if (options === void 0) { options = {}; }\n        this.views = new Map();\n        this.disposables = [];\n        this.sashResetSizing = Sizing.Distribute;\n        this.gridview = new gridview_1.GridView(options);\n        this.disposables.push(this.gridview);\n        this.gridview.onDidSashReset(this.doResetViewSize, this, this.disposables);\n        this._addView(view, 0, [0]);\n    }\n    Object.defineProperty(Grid.prototype, \"orientation\", {\n        get: function () { return this.gridview.orientation; },\n        set: function (orientation) { this.gridview.orientation = orientation; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"width\", {\n        get: function () { return this.gridview.width; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"height\", {\n        get: function () { return this.gridview.height; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"minimumWidth\", {\n        get: function () { return this.gridview.minimumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"minimumHeight\", {\n        get: function () { return this.gridview.minimumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"maximumWidth\", {\n        get: function () { return this.gridview.maximumWidth; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"maximumHeight\", {\n        get: function () { return this.gridview.maximumHeight; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"onDidChange\", {\n        get: function () { return this.gridview.onDidChange; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Grid.prototype, \"element\", {\n        get: function () { return this.gridview.element; },\n        enumerable: true,\n        configurable: true\n    });\n    Grid.prototype.style = function (styles) {\n        this.gridview.style(styles);\n    };\n    Grid.prototype.layout = function (width, height) {\n        this.gridview.layout(width, height);\n    };\n    Grid.prototype.hasView = function (view) {\n        return this.views.has(view);\n    };\n    Grid.prototype.addView = function (newView, size, referenceView, direction) {\n        if (this.views.has(newView)) {\n            throw new Error('Can\\'t add same view twice');\n        }\n        var orientation = getDirectionOrientation(direction);\n        if (this.views.size === 1 && this.orientation !== orientation) {\n            this.orientation = orientation;\n        }\n        var referenceLocation = this.getViewLocation(referenceView);\n        var location = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n        var viewSize;\n        if (size === Sizing.Split) {\n            var _a = arrays_1.tail2(referenceLocation), index = _a[1];\n            viewSize = gridview_1.Sizing.Split(index);\n        }\n        else if (size === Sizing.Distribute) {\n            viewSize = gridview_1.Sizing.Distribute;\n        }\n        else {\n            viewSize = size;\n        }\n        this._addView(newView, viewSize, location);\n    };\n    Grid.prototype._addView = function (newView, size, location) {\n        this.views.set(newView, newView.element);\n        this.gridview.addView(newView, size, location);\n    };\n    Grid.prototype.removeView = function (view, sizing) {\n        if (this.views.size === 1) {\n            throw new Error('Can\\'t remove last view');\n        }\n        var location = this.getViewLocation(view);\n        this.gridview.removeView(location, sizing === Sizing.Distribute ? gridview_1.Sizing.Distribute : undefined);\n        this.views.delete(view);\n    };\n    Grid.prototype.moveView = function (view, sizing, referenceView, direction) {\n        var sourceLocation = this.getViewLocation(view);\n        var _a = arrays_1.tail2(sourceLocation), sourceParentLocation = _a[0], from = _a[1];\n        var referenceLocation = this.getViewLocation(referenceView);\n        var targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n        var _b = arrays_1.tail2(targetLocation), targetParentLocation = _b[0], to = _b[1];\n        if (arrays_1.equals(sourceParentLocation, targetParentLocation)) {\n            this.gridview.moveView(sourceParentLocation, from, to);\n        }\n        else {\n            this.removeView(view, typeof sizing === 'number' ? undefined : sizing);\n            this.addView(view, sizing, referenceView, direction);\n        }\n    };\n    Grid.prototype.swapViews = function (from, to) {\n        var fromLocation = this.getViewLocation(from);\n        var toLocation = this.getViewLocation(to);\n        return this.gridview.swapViews(fromLocation, toLocation);\n    };\n    Grid.prototype.resizeView = function (view, size) {\n        var location = this.getViewLocation(view);\n        return this.gridview.resizeView(location, size);\n    };\n    Grid.prototype.getViewSize = function (view) {\n        var location = this.getViewLocation(view);\n        var viewSize = this.gridview.getViewSize(location);\n        return getLocationOrientation(this.orientation, location) === sash_1.Orientation.HORIZONTAL ? viewSize.width : viewSize.height;\n    };\n    // TODO@joao cleanup\n    Grid.prototype.getViewSize2 = function (view) {\n        var location = this.getViewLocation(view);\n        return this.gridview.getViewSize(location);\n    };\n    Grid.prototype.maximizeViewSize = function (view) {\n        var location = this.getViewLocation(view);\n        this.gridview.maximizeViewSize(location);\n    };\n    Grid.prototype.distributeViewSizes = function () {\n        this.gridview.distributeViewSizes();\n    };\n    Grid.prototype.getViews = function () {\n        return this.gridview.getViews();\n    };\n    Grid.prototype.getNeighborViews = function (view, direction, wrap) {\n        if (wrap === void 0) { wrap = false; }\n        var location = this.getViewLocation(view);\n        var root = this.getViews();\n        var node = getGridNode(root, location);\n        var boundary = getBoxBoundary(node.box, direction);\n        if (wrap) {\n            if (direction === Direction.Up && node.box.top === 0) {\n                boundary = { offset: root.box.top + root.box.height, range: boundary.range };\n            }\n            else if (direction === Direction.Right && node.box.left + node.box.width === root.box.width) {\n                boundary = { offset: 0, range: boundary.range };\n            }\n            else if (direction === Direction.Down && node.box.top + node.box.height === root.box.height) {\n                boundary = { offset: 0, range: boundary.range };\n            }\n            else if (direction === Direction.Left && node.box.left === 0) {\n                boundary = { offset: root.box.left + root.box.width, range: boundary.range };\n            }\n        }\n        return findAdjacentBoxLeafNodes(root, oppositeDirection(direction), boundary)\n            .map(function (node) { return node.view; });\n    };\n    Grid.prototype.getViewLocation = function (view) {\n        var element = this.views.get(view);\n        if (!element) {\n            throw new Error('View not found');\n        }\n        return getGridLocation(element);\n    };\n    Grid.prototype.doResetViewSize = function (location) {\n        if (this.sashResetSizing === Sizing.Split) {\n            var orientation = getLocationOrientation(this.orientation, location);\n            var firstViewSize = getSize(this.gridview.getViewSize(location), orientation);\n            var _a = arrays_1.tail2(location), parentLocation = _a[0], index = _a[1];\n            var secondViewSize = getSize(this.gridview.getViewSize(parentLocation.concat([index + 1])), orientation);\n            var totalSize = firstViewSize + secondViewSize;\n            this.gridview.resizeView(location, Math.floor(totalSize / 2));\n        }\n        else {\n            var parentLocation = arrays_1.tail2(location)[0];\n            this.gridview.distributeViewSizes(parentLocation);\n        }\n    };\n    Grid.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\nvar SerializableGrid = /** @class */ (function (_super) {\n    tslib_1.__extends(SerializableGrid, _super);\n    function SerializableGrid() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SerializableGrid.serializeNode = function (node, orientation) {\n        var size = orientation === sash_1.Orientation.VERTICAL ? node.box.width : node.box.height;\n        if (!isGridBranchNode(node)) {\n            return { type: 'leaf', data: node.view.toJSON(), size: size };\n        }\n        return { type: 'branch', data: node.children.map(function (c) { return SerializableGrid.serializeNode(c, gridview_1.orthogonal(orientation)); }), size: size };\n    };\n    SerializableGrid.deserializeNode = function (json, orientation, box, deserializer) {\n        if (!json || typeof json !== 'object') {\n            throw new Error('Invalid JSON');\n        }\n        if (json.type === 'branch') {\n            if (!Array.isArray(json.data)) {\n                throw new Error('Invalid JSON: \\'data\\' property of branch must be an array.');\n            }\n            var children = [];\n            var offset = 0;\n            for (var _i = 0, _a = json.data; _i < _a.length; _i++) {\n                var child = _a[_i];\n                if (typeof child.size !== 'number') {\n                    throw new Error('Invalid JSON: \\'size\\' property of node must be a number.');\n                }\n                var childBox = orientation === sash_1.Orientation.HORIZONTAL\n                    ? { top: box.top, left: box.left + offset, width: child.size, height: box.height }\n                    : { top: box.top + offset, left: box.left, width: box.width, height: child.size };\n                children.push(SerializableGrid.deserializeNode(child, gridview_1.orthogonal(orientation), childBox, deserializer));\n                offset += child.size;\n            }\n            return { children: children, box: box };\n        }\n        else if (json.type === 'leaf') {\n            var view = deserializer.fromJSON(json.data);\n            return { view: view, box: box };\n        }\n        throw new Error('Invalid JSON: \\'type\\' property must be either \\'branch\\' or \\'leaf\\'.');\n    };\n    SerializableGrid.getFirstLeaf = function (node) {\n        if (!isGridBranchNode(node)) {\n            return node;\n        }\n        return SerializableGrid.getFirstLeaf(node.children[0]);\n    };\n    SerializableGrid.deserialize = function (json, deserializer, options) {\n        if (options === void 0) { options = {}; }\n        if (typeof json.orientation !== 'number') {\n            throw new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n        }\n        else if (typeof json.width !== 'number') {\n            throw new Error('Invalid JSON: \\'width\\' property must be a number.');\n        }\n        else if (typeof json.height !== 'number') {\n            throw new Error('Invalid JSON: \\'height\\' property must be a number.');\n        }\n        var orientation = json.orientation;\n        var width = json.width;\n        var height = json.height;\n        var box = { top: 0, left: 0, width: width, height: height };\n        var root = SerializableGrid.deserializeNode(json.root, orientation, box, deserializer);\n        var firstLeaf = SerializableGrid.getFirstLeaf(root);\n        if (!firstLeaf) {\n            throw new Error('Invalid serialized state, first leaf not found');\n        }\n        var result = new SerializableGrid(firstLeaf.view, options);\n        result.orientation = orientation;\n        result.restoreViews(firstLeaf.view, orientation, root);\n        result.initialLayoutContext = { width: width, height: height, root: root };\n        return result;\n    };\n    SerializableGrid.prototype.serialize = function () {\n        return {\n            root: SerializableGrid.serializeNode(this.getViews(), this.orientation),\n            orientation: this.orientation,\n            width: this.width,\n            height: this.height\n        };\n    };\n    SerializableGrid.prototype.layout = function (width, height) {\n        _super.prototype.layout.call(this, width, height);\n        if (this.initialLayoutContext) {\n            var widthScale = width / this.initialLayoutContext.width;\n            var heightScale = height / this.initialLayoutContext.height;\n            this.restoreViewsSize([], this.initialLayoutContext.root, this.orientation, widthScale, heightScale);\n            this.initialLayoutContext = undefined;\n            this.gridview.trySet2x2();\n        }\n    };\n    /**\n     * Recursively restores views which were just deserialized.\n     */\n    SerializableGrid.prototype.restoreViews = function (referenceView, orientation, node) {\n        if (!isGridBranchNode(node)) {\n            return;\n        }\n        var direction = orientation === sash_1.Orientation.VERTICAL ? Direction.Down : Direction.Right;\n        var firstLeaves = node.children.map(function (c) { return SerializableGrid.getFirstLeaf(c); });\n        for (var i = 1; i < firstLeaves.length; i++) {\n            var size = orientation === sash_1.Orientation.VERTICAL ? firstLeaves[i].box.height : firstLeaves[i].box.width;\n            this.addView(firstLeaves[i].view, size, referenceView, direction);\n            referenceView = firstLeaves[i].view;\n        }\n        for (var i = 0; i < node.children.length; i++) {\n            this.restoreViews(firstLeaves[i].view, gridview_1.orthogonal(orientation), node.children[i]);\n        }\n    };\n    /**\n     * Recursively restores view sizes.\n     * This should be called only after the very first layout call.\n     */\n    SerializableGrid.prototype.restoreViewsSize = function (location, node, orientation, widthScale, heightScale) {\n        if (!isGridBranchNode(node)) {\n            return;\n        }\n        var scale = orientation === sash_1.Orientation.VERTICAL ? heightScale : widthScale;\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n            var childLocation = location.concat([i]);\n            if (i < node.children.length - 1) {\n                var size = orientation === sash_1.Orientation.VERTICAL ? child.box.height : child.box.width;\n                this.gridview.resizeView(childLocation, Math.floor(size * scale));\n            }\n            this.restoreViewsSize(childLocation, child, gridview_1.orthogonal(orientation), widthScale, heightScale);\n        }\n    };\n    return SerializableGrid;\n}(Grid));\nexports.SerializableGrid = SerializableGrid;\nfunction sanitizeGridNodeDescriptor(nodeDescriptor) {\n    if (nodeDescriptor.groups && nodeDescriptor.groups.length === 0) {\n        nodeDescriptor.groups = undefined;\n    }\n    if (!nodeDescriptor.groups) {\n        return;\n    }\n    var totalDefinedSize = 0;\n    var totalDefinedSizeCount = 0;\n    for (var _i = 0, _a = nodeDescriptor.groups; _i < _a.length; _i++) {\n        var child = _a[_i];\n        sanitizeGridNodeDescriptor(child);\n        if (child.size) {\n            totalDefinedSize += child.size;\n            totalDefinedSizeCount++;\n        }\n    }\n    var totalUndefinedSize = totalDefinedSizeCount > 0 ? totalDefinedSize : 1;\n    var totalUndefinedSizeCount = nodeDescriptor.groups.length - totalDefinedSizeCount;\n    var eachUndefinedSize = totalUndefinedSize / totalUndefinedSizeCount;\n    for (var _b = 0, _c = nodeDescriptor.groups; _b < _c.length; _b++) {\n        var child = _c[_b];\n        if (!child.size) {\n            child.size = eachUndefinedSize;\n        }\n    }\n}\nexports.sanitizeGridNodeDescriptor = sanitizeGridNodeDescriptor;\nfunction createSerializedNode(nodeDescriptor) {\n    if (nodeDescriptor.groups) {\n        return { type: 'branch', data: nodeDescriptor.groups.map(function (c) { return createSerializedNode(c); }), size: nodeDescriptor.size };\n    }\n    else {\n        return { type: 'leaf', data: null, size: nodeDescriptor.size };\n    }\n}\nfunction getDimensions(node, orientation) {\n    if (node.type === 'branch') {\n        var childrenDimensions = node.data.map(function (c) { return getDimensions(c, gridview_1.orthogonal(orientation)); });\n        if (orientation === sash_1.Orientation.VERTICAL) {\n            var width = node.size || (childrenDimensions.length === 0 ? undefined : Math.max.apply(Math, childrenDimensions.map(function (d) { return d.width || 0; })));\n            var height = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce(function (r, d) { return r + (d.height || 0); }, 0);\n            return { width: width, height: height };\n        }\n        else {\n            var width = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce(function (r, d) { return r + (d.width || 0); }, 0);\n            var height = node.size || (childrenDimensions.length === 0 ? undefined : Math.max.apply(Math, childrenDimensions.map(function (d) { return d.height || 0; })));\n            return { width: width, height: height };\n        }\n    }\n    else {\n        var width = orientation === sash_1.Orientation.VERTICAL ? node.size : undefined;\n        var height = orientation === sash_1.Orientation.VERTICAL ? undefined : node.size;\n        return { width: width, height: height };\n    }\n}\nfunction createSerializedGrid(gridDescriptor) {\n    sanitizeGridNodeDescriptor(gridDescriptor);\n    var root = createSerializedNode(gridDescriptor);\n    var _a = getDimensions(root, gridDescriptor.orientation), width = _a.width, height = _a.height;\n    return {\n        root: root,\n        orientation: gridDescriptor.orientation,\n        width: width || 1,\n        height: height || 1\n    };\n}\nexports.createSerializedGrid = createSerializedGrid;\nvar View = /** @class */ (function () {\n    function View(view) {\n        var _this = this;\n        this.view = view;\n        this.element = dom_1.$('.grid-view-view');\n        this.visible = false;\n        this.orientation = sash_1.Orientation.HORIZONTAL;\n        this.onDidChangeVisibility = new event_1.Emitter();\n        this.show();\n        this.onDidChange = event_1.Event.any(this.onDidChangeVisibility.event, event_1.Event.filter(view.onDidChange, function () { return _this.visible; }));\n    }\n    Object.defineProperty(View.prototype, \"minimumWidth\", {\n        get: function () { return this.visible ? this.view.minimumWidth : 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"maximumWidth\", {\n        get: function () { return this.visible ? this.view.maximumWidth : (this.orientation === sash_1.Orientation.HORIZONTAL ? 0 : Number.POSITIVE_INFINITY); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"minimumHeight\", {\n        get: function () { return this.visible ? this.view.minimumHeight : 0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"maximumHeight\", {\n        get: function () { return this.visible ? this.view.maximumHeight : (this.orientation === sash_1.Orientation.VERTICAL ? 0 : Number.POSITIVE_INFINITY); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"priority\", {\n        get: function () { return this.view.priority; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"snapSize\", {\n        get: function () { return this.visible ? this.view.snapSize : undefined; },\n        enumerable: true,\n        configurable: true\n    });\n    View.prototype.show = function () {\n        if (this.visible) {\n            return;\n        }\n        this.visible = true;\n        this.element.appendChild(this.view.element);\n        this.onDidChangeVisibility.fire(typeof this.width === 'number' ? { width: this.width, height: this.height } : undefined);\n    };\n    View.prototype.hide = function () {\n        if (!this.visible) {\n            return;\n        }\n        this.visible = false;\n        this.element.removeChild(this.view.element);\n        this.onDidChangeVisibility.fire(undefined);\n    };\n    View.prototype.layout = function (width, height, orientation) {\n        this.orientation = orientation;\n        if (!this.visible) {\n            return;\n        }\n        this.view.layout(width, height, orientation);\n        this.width = width;\n        this.height = height;\n    };\n    return View;\n}());\nexports.View = View;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/grid.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/grid/grid.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./gridview';\nimport { Orientation } from 'vs/base/browser/ui/sash/sash';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { tail2 as tail, equals } from 'vs/base/common/arrays';\nimport { orthogonal, IView, GridView, Sizing as GridViewSizing, Box, IGridViewStyles } from './gridview';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { $ } from 'vs/base/browser/dom';\nimport { LayoutPriority } from 'vs/base/browser/ui/splitview/splitview';\n\nexport { Orientation } from './gridview';\n\nexport const enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n\tswitch (direction) {\n\t\tcase Direction.Up: return Direction.Down;\n\t\tcase Direction.Down: return Direction.Up;\n\t\tcase Direction.Left: return Direction.Right;\n\t\tcase Direction.Right: return Direction.Left;\n\t}\n}\n\nexport interface GridLeafNode<T extends IView> {\n\treadonly view: T;\n\treadonly box: Box;\n}\n\nexport interface GridBranchNode<T extends IView> {\n\treadonly children: GridNode<T>[];\n\treadonly box: Box;\n}\n\nexport type GridNode<T extends IView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IView>(node: GridNode<T>): node is GridBranchNode<T> {\n\treturn !!(node as any).children;\n}\n\nfunction getGridNode<T extends IView>(node: GridNode<T>, location: number[]): GridNode<T> {\n\tif (location.length === 0) {\n\t\treturn node;\n\t}\n\n\tif (!isGridBranchNode(node)) {\n\t\tthrow new Error('Invalid location');\n\t}\n\n\tconst [index, ...rest] = location;\n\treturn getGridNode(node.children[index], rest);\n}\n\ninterface Range {\n\treadonly start: number;\n\treadonly end: number;\n}\n\nfunction intersects(one: Range, other: Range): boolean {\n\treturn !(one.start >= other.end || other.start >= one.end);\n}\n\ninterface Boundary {\n\treadonly offset: number;\n\treadonly range: Range;\n}\n\nfunction getBoxBoundary(box: Box, direction: Direction): Boundary {\n\tconst orientation = getDirectionOrientation(direction);\n\tconst offset = direction === Direction.Up ? box.top :\n\t\tdirection === Direction.Right ? box.left + box.width :\n\t\t\tdirection === Direction.Down ? box.top + box.height :\n\t\t\t\tbox.left;\n\n\tconst range = {\n\t\tstart: orientation === Orientation.HORIZONTAL ? box.top : box.left,\n\t\tend: orientation === Orientation.HORIZONTAL ? box.top + box.height : box.left + box.width\n\t};\n\n\treturn { offset, range };\n}\n\nfunction findAdjacentBoxLeafNodes<T extends IView>(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): GridLeafNode<T>[] {\n\tconst result: GridLeafNode<T>[] = [];\n\n\tfunction _(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): void {\n\t\tif (isGridBranchNode(boxNode)) {\n\t\t\tfor (const child of boxNode.children) {\n\t\t\t\t_(child, direction, boundary);\n\t\t\t}\n\t\t} else {\n\t\t\tconst { offset, range } = getBoxBoundary(boxNode.box, direction);\n\n\t\t\tif (offset === boundary.offset && intersects(range, boundary.range)) {\n\t\t\t\tresult.push(boxNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t_(boxNode, direction, boundary);\n\treturn result;\n}\n\nfunction getLocationOrientation(rootOrientation: Orientation, location: number[]): Orientation {\n\treturn location.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;\n}\n\nfunction getDirectionOrientation(direction: Direction): Orientation {\n\treturn direction === Direction.Up || direction === Direction.Down ? Orientation.VERTICAL : Orientation.HORIZONTAL;\n}\n\nfunction getSize(dimensions: { width: number; height: number; }, orientation: Orientation) {\n\treturn orientation === Orientation.HORIZONTAL ? dimensions.width : dimensions.height;\n}\n\nexport function getRelativeLocation(rootOrientation: Orientation, location: number[], direction: Direction): number[] {\n\tconst orientation = getLocationOrientation(rootOrientation, location);\n\tconst directionOrientation = getDirectionOrientation(direction);\n\n\tif (orientation === directionOrientation) {\n\t\tlet [rest, index] = tail(location);\n\n\t\tif (direction === Direction.Right || direction === Direction.Down) {\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn [...rest, index];\n\t} else {\n\t\tconst index = (direction === Direction.Right || direction === Direction.Down) ? 1 : 0;\n\t\treturn [...location, index];\n\t}\n}\n\nfunction indexInParent(element: HTMLElement): number {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tlet el = parentElement.firstElementChild;\n\tlet index = 0;\n\n\twhile (el !== element && el !== parentElement.lastElementChild && el) {\n\t\tel = el.nextElementSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nfunction getGridLocation(element: HTMLElement): number[] {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tif (/\\bmonaco-grid-view\\b/.test(parentElement.className)) {\n\t\treturn [];\n\t}\n\n\tconst index = indexInParent(parentElement);\n\tconst ancestor = parentElement.parentElement!.parentElement!.parentElement!;\n\treturn [...getGridLocation(ancestor), index];\n}\n\nexport const enum Sizing {\n\tDistribute = 'distribute',\n\tSplit = 'split'\n}\n\nexport interface IGridStyles extends IGridViewStyles { }\n\nexport interface IGridOptions {\n\tstyles?: IGridStyles;\n\tproportionalLayout?: boolean;\n}\n\nexport class Grid<T extends IView> implements IDisposable {\n\n\tprotected gridview: GridView;\n\tprivate views = new Map<T, HTMLElement>();\n\tprivate disposables: IDisposable[] = [];\n\n\tget orientation(): Orientation { return this.gridview.orientation; }\n\tset orientation(orientation: Orientation) { this.gridview.orientation = orientation; }\n\n\tget width(): number { return this.gridview.width; }\n\tget height(): number { return this.gridview.height; }\n\n\tget minimumWidth(): number { return this.gridview.minimumWidth; }\n\tget minimumHeight(): number { return this.gridview.minimumHeight; }\n\tget maximumWidth(): number { return this.gridview.maximumWidth; }\n\tget maximumHeight(): number { return this.gridview.maximumHeight; }\n\tget onDidChange(): Event<{ width: number; height: number; } | undefined> { return this.gridview.onDidChange; }\n\n\tget element(): HTMLElement { return this.gridview.element; }\n\n\tsashResetSizing: Sizing = Sizing.Distribute;\n\n\tconstructor(view: T, options: IGridOptions = {}) {\n\t\tthis.gridview = new GridView(options);\n\t\tthis.disposables.push(this.gridview);\n\n\t\tthis.gridview.onDidSashReset(this.doResetViewSize, this, this.disposables);\n\n\t\tthis._addView(view, 0, [0]);\n\t}\n\n\tstyle(styles: IGridStyles): void {\n\t\tthis.gridview.style(styles);\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tthis.gridview.layout(width, height);\n\t}\n\n\thasView(view: T): boolean {\n\t\treturn this.views.has(view);\n\t}\n\n\taddView(newView: T, size: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tconst orientation = getDirectionOrientation(direction);\n\n\t\tif (this.views.size === 1 && this.orientation !== orientation) {\n\t\t\tthis.orientation = orientation;\n\t\t}\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst location = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (size === Sizing.Split) {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Split(index);\n\t\t} else if (size === Sizing.Distribute) {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprotected _addView(newView: T, size: number | GridViewSizing, location: number[]): void {\n\t\tthis.views.set(newView, newView.element);\n\t\tthis.gridview.addView(newView, size, location);\n\t}\n\n\tremoveView(view: T, sizing?: Sizing): void {\n\t\tif (this.views.size === 1) {\n\t\t\tthrow new Error('Can\\'t remove last view');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.removeView(location, sizing === Sizing.Distribute ? GridViewSizing.Distribute : undefined);\n\t\tthis.views.delete(view);\n\t}\n\n\tmoveView(view: T, sizing: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\t\tconst [targetParentLocation, to] = tail(targetLocation);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tthis.removeView(view, typeof sizing === 'number' ? undefined : sizing);\n\t\t\tthis.addView(view, sizing, referenceView, direction);\n\t\t}\n\t}\n\n\tswapViews(from: T, to: T): void {\n\t\tconst fromLocation = this.getViewLocation(from);\n\t\tconst toLocation = this.getViewLocation(to);\n\t\treturn this.gridview.swapViews(fromLocation, toLocation);\n\t}\n\n\tresizeView(view: T, size: number): void {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.resizeView(location, size);\n\t}\n\n\tgetViewSize(view: T): number {\n\t\tconst location = this.getViewLocation(view);\n\t\tconst viewSize = this.gridview.getViewSize(location);\n\t\treturn getLocationOrientation(this.orientation, location) === Orientation.HORIZONTAL ? viewSize.width : viewSize.height;\n\t}\n\n\t// TODO@joao cleanup\n\tgetViewSize2(view: T): { width: number; height: number; } {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewSize(location);\n\t}\n\n\tmaximizeViewSize(view: T): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.maximizeViewSize(location);\n\t}\n\n\tdistributeViewSizes(): void {\n\t\tthis.gridview.distributeViewSizes();\n\t}\n\n\tgetViews(): GridBranchNode<T> {\n\t\treturn this.gridview.getViews() as GridBranchNode<T>;\n\t}\n\n\tgetNeighborViews(view: T, direction: Direction, wrap: boolean = false): T[] {\n\t\tconst location = this.getViewLocation(view);\n\t\tconst root = this.getViews();\n\t\tconst node = getGridNode(root, location);\n\t\tlet boundary = getBoxBoundary(node.box, direction);\n\n\t\tif (wrap) {\n\t\t\tif (direction === Direction.Up && node.box.top === 0) {\n\t\t\t\tboundary = { offset: root.box.top + root.box.height, range: boundary.range };\n\t\t\t} else if (direction === Direction.Right && node.box.left + node.box.width === root.box.width) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Down && node.box.top + node.box.height === root.box.height) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Left && node.box.left === 0) {\n\t\t\t\tboundary = { offset: root.box.left + root.box.width, range: boundary.range };\n\t\t\t}\n\t\t}\n\n\t\treturn findAdjacentBoxLeafNodes(root, oppositeDirection(direction), boundary)\n\t\t\t.map(node => node.view);\n\t}\n\n\tprivate getViewLocation(view: T): number[] {\n\t\tconst element = this.views.get(view);\n\n\t\tif (!element) {\n\t\t\tthrow new Error('View not found');\n\t\t}\n\n\t\treturn getGridLocation(element);\n\t}\n\n\tprivate doResetViewSize(location: number[]): void {\n\t\tif (this.sashResetSizing === Sizing.Split) {\n\t\t\tconst orientation = getLocationOrientation(this.orientation, location);\n\t\t\tconst firstViewSize = getSize(this.gridview.getViewSize(location), orientation);\n\t\t\tconst [parentLocation, index] = tail(location);\n\t\t\tconst secondViewSize = getSize(this.gridview.getViewSize([...parentLocation, index + 1]), orientation);\n\t\t\tconst totalSize = firstViewSize + secondViewSize;\n\t\t\tthis.gridview.resizeView(location, Math.floor(totalSize / 2));\n\n\t\t} else {\n\t\t\tconst [parentLocation,] = tail(location);\n\t\t\tthis.gridview.distributeViewSizes(parentLocation);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: object | null): T;\n}\n\ninterface InitialLayoutContext<T extends ISerializableView> {\n\twidth: number;\n\theight: number;\n\troot: GridBranchNode<T>;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: object | null;\n\tsize: number;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGrid {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\nexport class SerializableGrid<T extends ISerializableView> extends Grid<T> {\n\n\tprivate static serializeNode<T extends ISerializableView>(node: GridNode<T>, orientation: Orientation): ISerializedNode {\n\t\tconst size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n\t\tif (!isGridBranchNode(node)) {\n\t\t\treturn { type: 'leaf', data: node.view.toJSON(), size };\n\t\t}\n\n\t\treturn { type: 'branch', data: node.children.map(c => SerializableGrid.serializeNode(c, orthogonal(orientation))), size };\n\t}\n\n\tprivate static deserializeNode<T extends ISerializableView>(json: ISerializedNode, orientation: Orientation, box: Box, deserializer: IViewDeserializer<T>): GridNode<T> {\n\t\tif (!json || typeof json !== 'object') {\n\t\t\tthrow new Error('Invalid JSON');\n\t\t}\n\n\t\tif (json.type === 'branch') {\n\t\t\tif (!Array.isArray(json.data)) {\n\t\t\t\tthrow new Error('Invalid JSON: \\'data\\' property of branch must be an array.');\n\t\t\t}\n\n\t\t\tconst children: GridNode<T>[] = [];\n\t\t\tlet offset = 0;\n\n\t\t\tfor (const child of json.data) {\n\t\t\t\tif (typeof child.size !== 'number') {\n\t\t\t\t\tthrow new Error('Invalid JSON: \\'size\\' property of node must be a number.');\n\t\t\t\t}\n\n\t\t\t\tconst childBox: Box = orientation === Orientation.HORIZONTAL\n\t\t\t\t\t? { top: box.top, left: box.left + offset, width: child.size, height: box.height }\n\t\t\t\t\t: { top: box.top + offset, left: box.left, width: box.width, height: child.size };\n\n\t\t\t\tchildren.push(SerializableGrid.deserializeNode(child, orthogonal(orientation), childBox, deserializer));\n\t\t\t\toffset += child.size;\n\t\t\t}\n\n\t\t\treturn { children, box };\n\n\t\t} else if (json.type === 'leaf') {\n\t\t\tconst view = deserializer.fromJSON(json.data) as T;\n\t\t\treturn { view, box };\n\t\t}\n\n\t\tthrow new Error('Invalid JSON: \\'type\\' property must be either \\'branch\\' or \\'leaf\\'.');\n\t}\n\n\tprivate static getFirstLeaf<T extends IView>(node: GridNode<T>): GridLeafNode<T> | undefined {\n\t\tif (!isGridBranchNode(node)) {\n\t\t\treturn node;\n\t\t}\n\n\t\treturn SerializableGrid.getFirstLeaf(node.children[0]);\n\t}\n\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGrid, deserializer: IViewDeserializer<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t}\n\n\t\tconst orientation = json.orientation as Orientation;\n\t\tconst width = json.width as number;\n\t\tconst height = json.height as number;\n\t\tconst box: Box = { top: 0, left: 0, width, height };\n\n\t\tconst root = SerializableGrid.deserializeNode(json.root, orientation, box, deserializer) as GridBranchNode<T>;\n\t\tconst firstLeaf = SerializableGrid.getFirstLeaf(root);\n\n\t\tif (!firstLeaf) {\n\t\t\tthrow new Error('Invalid serialized state, first leaf not found');\n\t\t}\n\n\t\tconst result = new SerializableGrid<T>(firstLeaf.view, options);\n\t\tresult.orientation = orientation;\n\t\tresult.restoreViews(firstLeaf.view, orientation, root);\n\t\tresult.initialLayoutContext = { width, height, root };\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Useful information in order to proportionally restore view sizes\n\t * upon the very first layout call.\n\t */\n\tprivate initialLayoutContext: InitialLayoutContext<T> | undefined;\n\n\tserialize(): ISerializedGrid {\n\t\treturn {\n\t\t\troot: SerializableGrid.serializeNode(this.getViews(), this.orientation),\n\t\t\torientation: this.orientation,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tsuper.layout(width, height);\n\n\t\tif (this.initialLayoutContext) {\n\t\t\tconst widthScale = width / this.initialLayoutContext.width;\n\t\t\tconst heightScale = height / this.initialLayoutContext.height;\n\n\t\t\tthis.restoreViewsSize([], this.initialLayoutContext.root, this.orientation, widthScale, heightScale);\n\t\t\tthis.initialLayoutContext = undefined;\n\n\t\t\tthis.gridview.trySet2x2();\n\t\t}\n\t}\n\n\t/**\n\t * Recursively restores views which were just deserialized.\n\t */\n\tprivate restoreViews(referenceView: T, orientation: Orientation, node: GridNode<T>): void {\n\t\tif (!isGridBranchNode(node)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst direction = orientation === Orientation.VERTICAL ? Direction.Down : Direction.Right;\n\t\tconst firstLeaves = node.children.map(c => SerializableGrid.getFirstLeaf(c));\n\n\t\tfor (let i = 1; i < firstLeaves.length; i++) {\n\t\t\tconst size = orientation === Orientation.VERTICAL ? firstLeaves[i]!.box.height : firstLeaves[i]!.box.width;\n\t\t\tthis.addView(firstLeaves[i]!.view, size, referenceView, direction);\n\t\t\treferenceView = firstLeaves[i]!.view;\n\t\t}\n\n\t\tfor (let i = 0; i < node.children.length; i++) {\n\t\t\tthis.restoreViews(firstLeaves[i]!.view, orthogonal(orientation), node.children[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Recursively restores view sizes.\n\t * This should be called only after the very first layout call.\n\t */\n\tprivate restoreViewsSize(location: number[], node: GridNode<T>, orientation: Orientation, widthScale: number, heightScale: number): void {\n\t\tif (!isGridBranchNode(node)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst scale = orientation === Orientation.VERTICAL ? heightScale : widthScale;\n\n\t\tfor (let i = 0; i < node.children.length; i++) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst childLocation = [...location, i];\n\n\t\t\tif (i < node.children.length - 1) {\n\t\t\t\tconst size = orientation === Orientation.VERTICAL ? child.box.height : child.box.width;\n\t\t\t\tthis.gridview.resizeView(childLocation, Math.floor(size * scale));\n\t\t\t}\n\n\t\t\tthis.restoreViewsSize(childLocation, child, orthogonal(orientation), widthScale, heightScale);\n\t\t}\n\t}\n}\n\nexport type GridNodeDescriptor = { size?: number, groups?: GridNodeDescriptor[] };\nexport type GridDescriptor = { orientation: Orientation, groups?: GridNodeDescriptor[] };\n\nexport function sanitizeGridNodeDescriptor(nodeDescriptor: GridNodeDescriptor): void {\n\tif (nodeDescriptor.groups && nodeDescriptor.groups.length === 0) {\n\t\tnodeDescriptor.groups = undefined;\n\t}\n\n\tif (!nodeDescriptor.groups) {\n\t\treturn;\n\t}\n\n\tlet totalDefinedSize = 0;\n\tlet totalDefinedSizeCount = 0;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tsanitizeGridNodeDescriptor(child);\n\n\t\tif (child.size) {\n\t\t\ttotalDefinedSize += child.size;\n\t\t\ttotalDefinedSizeCount++;\n\t\t}\n\t}\n\n\tconst totalUndefinedSize = totalDefinedSizeCount > 0 ? totalDefinedSize : 1;\n\tconst totalUndefinedSizeCount = nodeDescriptor.groups.length - totalDefinedSizeCount;\n\tconst eachUndefinedSize = totalUndefinedSize / totalUndefinedSizeCount;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tif (!child.size) {\n\t\t\tchild.size = eachUndefinedSize;\n\t\t}\n\t}\n}\n\nfunction createSerializedNode(nodeDescriptor: GridNodeDescriptor): ISerializedNode {\n\tif (nodeDescriptor.groups) {\n\t\treturn { type: 'branch', data: nodeDescriptor.groups.map(c => createSerializedNode(c)), size: nodeDescriptor.size! };\n\t} else {\n\t\treturn { type: 'leaf', data: null, size: nodeDescriptor.size! };\n\t}\n}\n\nfunction getDimensions(node: ISerializedNode, orientation: Orientation): { width?: number, height?: number } {\n\tif (node.type === 'branch') {\n\t\tconst childrenDimensions = node.data.map(c => getDimensions(c, orthogonal(orientation)));\n\n\t\tif (orientation === Orientation.VERTICAL) {\n\t\t\tconst width = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.width || 0)));\n\t\t\tconst height = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.height || 0), 0);\n\t\t\treturn { width, height };\n\t\t} else {\n\t\t\tconst width = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.width || 0), 0);\n\t\t\tconst height = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.height || 0)));\n\t\t\treturn { width, height };\n\t\t}\n\t} else {\n\t\tconst width = orientation === Orientation.VERTICAL ? node.size : undefined;\n\t\tconst height = orientation === Orientation.VERTICAL ? undefined : node.size;\n\t\treturn { width, height };\n\t}\n}\n\nexport function createSerializedGrid(gridDescriptor: GridDescriptor): ISerializedGrid {\n\tsanitizeGridNodeDescriptor(gridDescriptor);\n\n\tconst root = createSerializedNode(gridDescriptor);\n\tconst { width, height } = getDimensions(root, gridDescriptor.orientation);\n\n\treturn {\n\t\troot,\n\t\torientation: gridDescriptor.orientation,\n\t\twidth: width || 1,\n\t\theight: height || 1\n\t};\n}\n\nexport class View implements IView {\n\n\treadonly element = $('.grid-view-view');\n\n\tprivate visible = false;\n\tprivate width: number | undefined;\n\tprivate height: number | undefined;\n\tprivate orientation: Orientation = Orientation.HORIZONTAL;\n\n\tget minimumWidth(): number { return this.visible ? this.view.minimumWidth : 0; }\n\tget maximumWidth(): number { return this.visible ? this.view.maximumWidth : (this.orientation === Orientation.HORIZONTAL ? 0 : Number.POSITIVE_INFINITY); }\n\tget minimumHeight(): number { return this.visible ? this.view.minimumHeight : 0; }\n\tget maximumHeight(): number { return this.visible ? this.view.maximumHeight : (this.orientation === Orientation.VERTICAL ? 0 : Number.POSITIVE_INFINITY); }\n\n\tprivate onDidChangeVisibility = new Emitter<{ width: number; height: number; } | undefined>();\n\treadonly onDidChange: Event<{ width: number; height: number; } | undefined>;\n\n\tget priority(): LayoutPriority | undefined { return this.view.priority; }\n\tget snapSize(): number | undefined { return this.visible ? this.view.snapSize : undefined; }\n\n\tconstructor(private view: IView) {\n\t\tthis.show();\n\t\tthis.onDidChange = Event.any(this.onDidChangeVisibility.event, Event.filter(view.onDidChange, () => this.visible));\n\t}\n\n\tshow(): void {\n\t\tif (this.visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visible = true;\n\n\t\tthis.element.appendChild(this.view.element);\n\t\tthis.onDidChangeVisibility.fire(typeof this.width === 'number' ? { width: this.width, height: this.height! } : undefined);\n\t}\n\n\thide(): void {\n\t\tif (!this.visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.visible = false;\n\n\t\tthis.element.removeChild(this.view.element);\n\t\tthis.onDidChangeVisibility.fire(undefined);\n\t}\n\n\tlayout(width: number, height: number, orientation: Orientation): void {\n\t\tthis.orientation = orientation;\n\n\t\tif (!this.visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.view.layout(width, height, orientation);\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n}"]}]}