{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/history/electron-main/historyStorage.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/history/electron-main/historyStorage.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/platform/history/common/history\"], function (require, exports, uri_1, history_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function restoreRecentlyOpened(data) {\n        const result = { workspaces: [], files: [] };\n        if (data) {\n            const storedRecents = data;\n            if (Array.isArray(storedRecents.workspaces3)) {\n                for (let i = 0; i < storedRecents.workspaces3.length; i++) {\n                    const workspace = storedRecents.workspaces3[i];\n                    const label = (Array.isArray(storedRecents.workspaceLabels) && storedRecents.workspaceLabels[i]) || undefined;\n                    if (typeof workspace === 'object' && typeof workspace.id === 'string' && typeof workspace.configURIPath === 'string') {\n                        result.workspaces.push({ label, workspace: { id: workspace.id, configPath: uri_1.URI.parse(workspace.configURIPath) } });\n                    }\n                    else if (typeof workspace === 'string') {\n                        result.workspaces.push({ label, folderUri: uri_1.URI.parse(workspace) });\n                    }\n                }\n            }\n            else if (Array.isArray(storedRecents.workspaces2)) {\n                for (const workspace of storedRecents.workspaces2) {\n                    if (typeof workspace === 'object' && typeof workspace.id === 'string' && typeof workspace.configPath === 'string') {\n                        result.workspaces.push({ workspace: { id: workspace.id, configPath: uri_1.URI.file(workspace.configPath) } });\n                    }\n                    else if (typeof workspace === 'string') {\n                        result.workspaces.push({ folderUri: uri_1.URI.parse(workspace) });\n                    }\n                }\n            }\n            else if (Array.isArray(storedRecents.workspaces)) {\n                // TODO@martin legacy support can be removed at some point (6 month?)\n                // format of 1.25 and before\n                for (const workspace of storedRecents.workspaces) {\n                    if (typeof workspace === 'string') {\n                        result.workspaces.push({ folderUri: uri_1.URI.file(workspace) });\n                    }\n                    else if (typeof workspace === 'object' && typeof workspace['id'] === 'string' && typeof workspace['configPath'] === 'string') {\n                        result.workspaces.push({ workspace: { id: workspace['id'], configPath: uri_1.URI.file(workspace['configPath']) } });\n                    }\n                    else if (workspace && typeof workspace['path'] === 'string' && typeof workspace['scheme'] === 'string') {\n                        // added by 1.26-insiders\n                        result.workspaces.push({ folderUri: uri_1.URI.revive(workspace) });\n                    }\n                }\n            }\n            if (Array.isArray(storedRecents.files2)) {\n                for (let i = 0; i < storedRecents.files2.length; i++) {\n                    const file = storedRecents.files2[i];\n                    const label = (Array.isArray(storedRecents.fileLabels) && storedRecents.fileLabels[i]) || undefined;\n                    if (typeof file === 'string') {\n                        result.files.push({ label, fileUri: uri_1.URI.parse(file) });\n                    }\n                }\n            }\n            else if (Array.isArray(storedRecents.files)) {\n                for (const file of storedRecents.files) {\n                    if (typeof file === 'string') {\n                        result.files.push({ fileUri: uri_1.URI.file(file) });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    exports.restoreRecentlyOpened = restoreRecentlyOpened;\n    function toStoreData(recents) {\n        const serialized = { workspaces3: [], files2: [] };\n        let hasLabel = false;\n        const workspaceLabels = [];\n        for (const recent of recents.workspaces) {\n            if (history_1.isRecentFolder(recent)) {\n                serialized.workspaces3.push(recent.folderUri.toString());\n            }\n            else {\n                serialized.workspaces3.push({ id: recent.workspace.id, configURIPath: recent.workspace.configPath.toString() });\n            }\n            workspaceLabels.push(recent.label || null);\n            hasLabel = hasLabel || !!recent.label;\n        }\n        if (hasLabel) {\n            serialized.workspaceLabels = workspaceLabels;\n        }\n        hasLabel = false;\n        const fileLabels = [];\n        for (const recent of recents.files) {\n            serialized.files2.push(recent.fileUri.toString());\n            fileLabels.push(recent.label || null);\n            hasLabel = hasLabel || !!recent.label;\n        }\n        if (hasLabel) {\n            serialized.fileLabels = fileLabels;\n        }\n        return serialized;\n    }\n    exports.toStoreData = toStoreData;\n});\n",null]}