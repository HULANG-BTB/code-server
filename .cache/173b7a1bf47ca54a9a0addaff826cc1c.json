{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsList.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsList.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/notificationsList\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar notificationsViewer_1 = require(\"vs/workbench/browser/parts/notifications/notificationsViewer\");\nvar notificationsActions_1 = require(\"vs/workbench/browser/parts/notifications/notificationsActions\");\nvar notificationsCommands_1 = require(\"vs/workbench/browser/parts/notifications/notificationsCommands\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar NotificationsList = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsList, _super);\n    function NotificationsList(container, options, instantiationService, themeService, contextMenuService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.container = container;\n        _this.options = options;\n        _this.instantiationService = instantiationService;\n        _this.contextMenuService = contextMenuService;\n        _this.viewModel = [];\n        return _this;\n    }\n    NotificationsList.prototype.show = function (focus) {\n        if (this.isVisible) {\n            if (focus) {\n                this.list.domFocus();\n            }\n            return; // already visible\n        }\n        // Lazily create if showing for the first time\n        if (!this.list) {\n            this.createNotificationsList();\n        }\n        // Make visible\n        this.isVisible = true;\n        // Focus\n        if (focus) {\n            this.list.domFocus();\n        }\n    };\n    NotificationsList.prototype.createNotificationsList = function () {\n        var _this = this;\n        // List Container\n        this.listContainer = document.createElement('div');\n        dom_1.addClass(this.listContainer, 'notifications-list-container');\n        var actionRunner = this._register(this.instantiationService.createInstance(notificationsActions_1.NotificationActionRunner));\n        // Notification Renderer\n        var renderer = this.instantiationService.createInstance(notificationsViewer_1.NotificationRenderer, actionRunner);\n        // List\n        this.list = this._register(this.instantiationService.createInstance(listService_1.WorkbenchList, this.listContainer, new notificationsViewer_1.NotificationsListDelegate(this.listContainer), [renderer], tslib_1.__assign({}, this.options, { setRowLineHeight: false, horizontalScrolling: false })));\n        // Context menu to copy message\n        var copyAction = this._register(this.instantiationService.createInstance(notificationsActions_1.CopyNotificationMessageAction, notificationsActions_1.CopyNotificationMessageAction.ID, notificationsActions_1.CopyNotificationMessageAction.LABEL));\n        this._register((this.list.onContextMenu(function (e) {\n            if (!e.element) {\n                return;\n            }\n            _this.contextMenuService.showContextMenu({\n                getAnchor: function () { return e.anchor; },\n                getActions: function () { return [copyAction]; },\n                getActionsContext: function () { return e.element; },\n                actionRunner: actionRunner\n            });\n        })));\n        // Toggle on double click\n        this._register((this.list.onMouseDblClick(function (event) { return event.element.toggle(); })));\n        // Clear focus when DOM focus moves out\n        // Use document.hasFocus() to not clear the focus when the entire window lost focus\n        // This ensures that when the focus comes back, the notifciation is still focused\n        var listFocusTracker = this._register(dom_1.trackFocus(this.list.getHTMLElement()));\n        this._register(listFocusTracker.onDidBlur(function () {\n            if (document.hasFocus()) {\n                _this.list.setFocus([]);\n            }\n        }));\n        // Context key\n        notificationsCommands_1.NotificationFocusedContext.bindTo(this.list.contextKeyService);\n        // Only allow for focus in notifications, as the\n        // selection is too strong over the contents of\n        // the notification\n        this._register(this.list.onSelectionChange(function (e) {\n            if (e.indexes.length > 0) {\n                _this.list.setSelection([]);\n            }\n        }));\n        this.container.appendChild(this.listContainer);\n        this.updateStyles();\n    };\n    NotificationsList.prototype.updateNotificationsList = function (start, deleteCount, items) {\n        if (items === void 0) { items = []; }\n        var _a;\n        var listHasDOMFocus = dom_1.isAncestor(document.activeElement, this.listContainer);\n        // Remember focus and relative top of that item\n        var focusedIndex = this.list.getFocus()[0];\n        var focusedItem = this.viewModel[focusedIndex];\n        var focusRelativeTop = null;\n        if (typeof focusedIndex === 'number') {\n            focusRelativeTop = this.list.getRelativeTop(focusedIndex);\n        }\n        // Update view model\n        (_a = this.viewModel).splice.apply(_a, [start, deleteCount].concat(items));\n        // Update list\n        this.list.splice(start, deleteCount, items);\n        this.list.layout();\n        // Hide if no more notifications to show\n        if (this.viewModel.length === 0) {\n            this.hide();\n        }\n        // Otherwise restore focus if we had\n        else if (typeof focusedIndex === 'number') {\n            var indexToFocus = 0;\n            if (focusedItem) {\n                var indexToFocusCandidate = this.viewModel.indexOf(focusedItem);\n                if (indexToFocusCandidate === -1) {\n                    indexToFocusCandidate = focusedIndex - 1; // item could have been removed\n                }\n                if (indexToFocusCandidate < this.viewModel.length && indexToFocusCandidate >= 0) {\n                    indexToFocus = indexToFocusCandidate;\n                }\n            }\n            if (typeof focusRelativeTop === 'number') {\n                this.list.reveal(indexToFocus, focusRelativeTop);\n            }\n            this.list.setFocus([indexToFocus]);\n        }\n        // Restore DOM focus if we had focus before\n        if (listHasDOMFocus) {\n            this.list.domFocus();\n        }\n    };\n    NotificationsList.prototype.hide = function () {\n        if (!this.isVisible || !this.list) {\n            return; // already hidden\n        }\n        // Hide\n        this.isVisible = false;\n        // Clear list\n        this.list.splice(0, this.viewModel.length);\n        // Clear view model\n        this.viewModel = [];\n    };\n    NotificationsList.prototype.focusFirst = function () {\n        if (!this.isVisible || !this.list) {\n            return; // hidden\n        }\n        this.list.focusFirst();\n        this.list.domFocus();\n    };\n    NotificationsList.prototype.hasFocus = function () {\n        if (!this.isVisible || !this.list) {\n            return false; // hidden\n        }\n        return dom_1.isAncestor(document.activeElement, this.listContainer);\n    };\n    NotificationsList.prototype.updateStyles = function () {\n        if (this.listContainer) {\n            var foreground = this.getColor(theme_1.NOTIFICATIONS_FOREGROUND);\n            this.listContainer.style.color = foreground ? foreground.toString() : null;\n            var background = this.getColor(theme_1.NOTIFICATIONS_BACKGROUND);\n            this.listContainer.style.background = background ? background.toString() : null;\n            var outlineColor = this.getColor(colorRegistry_1.contrastBorder);\n            this.listContainer.style.outlineColor = outlineColor ? outlineColor.toString() : null;\n        }\n    };\n    NotificationsList.prototype.layout = function (width, maxHeight) {\n        if (this.list) {\n            this.listContainer.style.width = width + \"px\";\n            if (typeof maxHeight === 'number') {\n                this.list.getHTMLElement().style.maxHeight = maxHeight + \"px\";\n            }\n            this.list.layout();\n        }\n    };\n    NotificationsList.prototype.dispose = function () {\n        this.hide();\n        _super.prototype.dispose.call(this);\n    };\n    NotificationsList = tslib_1.__decorate([\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, themeService_1.IThemeService),\n        tslib_1.__param(4, contextView_1.IContextMenuService)\n    ], NotificationsList);\n    return NotificationsList;\n}(theme_1.Themable));\nexports.NotificationsList = NotificationsList;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var linkColor = theme.getColor(theme_1.NOTIFICATIONS_LINKS);\n    if (linkColor) {\n        collector.addRule(\".monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a { color: \" + linkColor + \"; }\");\n    }\n    var focusOutline = theme.getColor(colorRegistry_1.focusBorder);\n    if (focusOutline) {\n        collector.addRule(\"\\n\\t\\t.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a:focus {\\n\\t\\t\\toutline-color: \" + focusOutline + \";\\n\\t\\t}\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsList.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsList.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsList';\nimport { addClass, isAncestor, trackFocus } from 'vs/base/browser/dom';\nimport { WorkbenchList } from 'vs/platform/list/browser/listService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IListOptions } from 'vs/base/browser/ui/list/listWidget';\nimport { Themable, NOTIFICATIONS_LINKS, NOTIFICATIONS_BACKGROUND, NOTIFICATIONS_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';\nimport { contrastBorder, focusBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { INotificationViewItem } from 'vs/workbench/common/notifications';\nimport { NotificationsListDelegate, NotificationRenderer } from 'vs/workbench/browser/parts/notifications/notificationsViewer';\nimport { NotificationActionRunner, CopyNotificationMessageAction } from 'vs/workbench/browser/parts/notifications/notificationsActions';\nimport { NotificationFocusedContext } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\n\nexport class NotificationsList extends Themable {\n\tprivate listContainer: HTMLElement;\n\tprivate list: WorkbenchList<INotificationViewItem>;\n\tprivate viewModel: INotificationViewItem[];\n\tprivate isVisible: boolean;\n\n\tconstructor(\n\t\tprivate container: HTMLElement,\n\t\tprivate options: IListOptions<INotificationViewItem>,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.viewModel = [];\n\t}\n\n\tshow(focus?: boolean): void {\n\t\tif (this.isVisible) {\n\t\t\tif (focus) {\n\t\t\t\tthis.list.domFocus();\n\t\t\t}\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.list) {\n\t\t\tthis.createNotificationsList();\n\t\t}\n\n\t\t// Make visible\n\t\tthis.isVisible = true;\n\n\t\t// Focus\n\t\tif (focus) {\n\t\t\tthis.list.domFocus();\n\t\t}\n\t}\n\n\tprivate createNotificationsList(): void {\n\n\t\t// List Container\n\t\tthis.listContainer = document.createElement('div');\n\t\taddClass(this.listContainer, 'notifications-list-container');\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\t// Notification Renderer\n\t\tconst renderer = this.instantiationService.createInstance(NotificationRenderer, actionRunner);\n\n\t\t// List\n\t\tthis.list = this._register(<WorkbenchList<INotificationViewItem>>this.instantiationService.createInstance(\n\t\t\tWorkbenchList,\n\t\t\tthis.listContainer,\n\t\t\tnew NotificationsListDelegate(this.listContainer),\n\t\t\t[renderer],\n\t\t\t{\n\t\t\t\t...this.options,\n\t\t\t\tsetRowLineHeight: false,\n\t\t\t\thorizontalScrolling: false\n\t\t\t}\n\t\t));\n\n\t\t// Context menu to copy message\n\t\tconst copyAction = this._register(this.instantiationService.createInstance(CopyNotificationMessageAction, CopyNotificationMessageAction.ID, CopyNotificationMessageAction.LABEL));\n\t\tthis._register((this.list.onContextMenu(e => {\n\t\t\tif (!e.element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.contextMenuService.showContextMenu({\n\t\t\t\tgetAnchor: () => e.anchor!,\n\t\t\t\tgetActions: () => [copyAction],\n\t\t\t\tgetActionsContext: () => e.element,\n\t\t\t\tactionRunner\n\t\t\t});\n\t\t})));\n\n\t\t// Toggle on double click\n\t\tthis._register((this.list.onMouseDblClick(event => (event.element as INotificationViewItem).toggle())));\n\n\t\t// Clear focus when DOM focus moves out\n\t\t// Use document.hasFocus() to not clear the focus when the entire window lost focus\n\t\t// This ensures that when the focus comes back, the notifciation is still focused\n\t\tconst listFocusTracker = this._register(trackFocus(this.list.getHTMLElement()));\n\t\tthis._register(listFocusTracker.onDidBlur(() => {\n\t\t\tif (document.hasFocus()) {\n\t\t\t\tthis.list.setFocus([]);\n\t\t\t}\n\t\t}));\n\n\t\t// Context key\n\t\tNotificationFocusedContext.bindTo(this.list.contextKeyService);\n\n\t\t// Only allow for focus in notifications, as the\n\t\t// selection is too strong over the contents of\n\t\t// the notification\n\t\tthis._register(this.list.onSelectionChange(e => {\n\t\t\tif (e.indexes.length > 0) {\n\t\t\t\tthis.list.setSelection([]);\n\t\t\t}\n\t\t}));\n\n\t\tthis.container.appendChild(this.listContainer);\n\n\t\tthis.updateStyles();\n\t}\n\n\tupdateNotificationsList(start: number, deleteCount: number, items: INotificationViewItem[] = []) {\n\t\tconst listHasDOMFocus = isAncestor(document.activeElement, this.listContainer);\n\n\t\t// Remember focus and relative top of that item\n\t\tconst focusedIndex = this.list.getFocus()[0];\n\t\tconst focusedItem = this.viewModel[focusedIndex];\n\n\t\tlet focusRelativeTop: number | null = null;\n\t\tif (typeof focusedIndex === 'number') {\n\t\t\tfocusRelativeTop = this.list.getRelativeTop(focusedIndex);\n\t\t}\n\n\t\t// Update view model\n\t\tthis.viewModel.splice(start, deleteCount, ...items);\n\n\t\t// Update list\n\t\tthis.list.splice(start, deleteCount, items);\n\t\tthis.list.layout();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.viewModel.length === 0) {\n\t\t\tthis.hide();\n\t\t}\n\n\t\t// Otherwise restore focus if we had\n\t\telse if (typeof focusedIndex === 'number') {\n\t\t\tlet indexToFocus = 0;\n\t\t\tif (focusedItem) {\n\t\t\t\tlet indexToFocusCandidate = this.viewModel.indexOf(focusedItem);\n\t\t\t\tif (indexToFocusCandidate === -1) {\n\t\t\t\t\tindexToFocusCandidate = focusedIndex - 1; // item could have been removed\n\t\t\t\t}\n\n\t\t\t\tif (indexToFocusCandidate < this.viewModel.length && indexToFocusCandidate >= 0) {\n\t\t\t\t\tindexToFocus = indexToFocusCandidate;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof focusRelativeTop === 'number') {\n\t\t\t\tthis.list.reveal(indexToFocus, focusRelativeTop);\n\t\t\t}\n\n\t\t\tthis.list.setFocus([indexToFocus]);\n\t\t}\n\n\t\t// Restore DOM focus if we had focus before\n\t\tif (listHasDOMFocus) {\n\t\t\tthis.list.domFocus();\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (!this.isVisible || !this.list) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\t// Hide\n\t\tthis.isVisible = false;\n\n\t\t// Clear list\n\t\tthis.list.splice(0, this.viewModel.length);\n\n\t\t// Clear view model\n\t\tthis.viewModel = [];\n\t}\n\n\tfocusFirst(): void {\n\t\tif (!this.isVisible || !this.list) {\n\t\t\treturn; // hidden\n\t\t}\n\n\t\tthis.list.focusFirst();\n\t\tthis.list.domFocus();\n\t}\n\n\thasFocus(): boolean {\n\t\tif (!this.isVisible || !this.list) {\n\t\t\treturn false; // hidden\n\t\t}\n\n\t\treturn isAncestor(document.activeElement, this.listContainer);\n\t}\n\n\tprotected updateStyles(): void {\n\t\tif (this.listContainer) {\n\t\t\tconst foreground = this.getColor(NOTIFICATIONS_FOREGROUND);\n\t\t\tthis.listContainer.style.color = foreground ? foreground.toString() : null;\n\n\t\t\tconst background = this.getColor(NOTIFICATIONS_BACKGROUND);\n\t\t\tthis.listContainer.style.background = background ? background.toString() : null;\n\n\t\t\tconst outlineColor = this.getColor(contrastBorder);\n\t\t\tthis.listContainer.style.outlineColor = outlineColor ? outlineColor.toString() : null;\n\t\t}\n\t}\n\n\tlayout(width: number, maxHeight?: number): void {\n\t\tif (this.list) {\n\t\t\tthis.listContainer.style.width = `${width}px`;\n\n\t\t\tif (typeof maxHeight === 'number') {\n\t\t\t\tthis.list.getHTMLElement().style.maxHeight = `${maxHeight}px`;\n\t\t\t}\n\n\t\t\tthis.list.layout();\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.hide();\n\n\t\tsuper.dispose();\n\t}\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\tconst linkColor = theme.getColor(NOTIFICATIONS_LINKS);\n\tif (linkColor) {\n\t\tcollector.addRule(`.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a { color: ${linkColor}; }`);\n\t}\n\n\tconst focusOutline = theme.getColor(focusBorder);\n\tif (focusOutline) {\n\t\tcollector.addRule(`\n\t\t.monaco-workbench .notifications-list-container .notification-list-item .notification-list-item-message a:focus {\n\t\t\toutline-color: ${focusOutline};\n\t\t}`);\n\t}\n});\n"]}]}