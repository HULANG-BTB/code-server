{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestMemory.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestMemory.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar map_1 = require(\"vs/base/common/map\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    Memory.prototype.select = function (model, pos, items) {\n        if (items.length === 0) {\n            return 0;\n        }\n        var topScore = items[0].score;\n        for (var i = 1; i < items.length; i++) {\n            var _a = items[i], score = _a.score, suggestion = _a.completion;\n            if (score !== topScore) {\n                // stop when leaving the group of top matches\n                break;\n            }\n            if (suggestion.preselect) {\n                // stop when seeing an auto-select-item\n                return i;\n            }\n        }\n        return 0;\n    };\n    return Memory;\n}());\nexports.Memory = Memory;\nvar NoMemory = /** @class */ (function (_super) {\n    tslib_1.__extends(NoMemory, _super);\n    function NoMemory() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoMemory.prototype.memorize = function (model, pos, item) {\n        // no-op\n    };\n    NoMemory.prototype.toJSON = function () {\n        return undefined;\n    };\n    NoMemory.prototype.fromJSON = function () {\n        //\n    };\n    return NoMemory;\n}(Memory));\nexports.NoMemory = NoMemory;\nvar LRUMemory = /** @class */ (function (_super) {\n    tslib_1.__extends(LRUMemory, _super);\n    function LRUMemory() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._cache = new map_1.LRUCache(300, 0.66);\n        _this._seq = 0;\n        return _this;\n    }\n    LRUMemory.prototype.memorize = function (model, pos, item) {\n        var label = item.completion.label;\n        var key = model.getLanguageIdentifier().language + \"/\" + label;\n        this._cache.set(key, {\n            touch: this._seq++,\n            type: item.completion.kind,\n            insertText: item.completion.insertText\n        });\n    };\n    LRUMemory.prototype.select = function (model, pos, items) {\n        // in order of completions, select the first\n        // that has been used in the past\n        var word = model.getWordUntilPosition(pos).word;\n        if (word.length !== 0) {\n            return _super.prototype.select.call(this, model, pos, items);\n        }\n        var lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n        if (/\\s$/.test(lineSuffix)) {\n            return _super.prototype.select.call(this, model, pos, items);\n        }\n        var res = -1;\n        var seq = -1;\n        for (var i = 0; i < items.length; i++) {\n            var suggestion = items[i].completion;\n            var key = model.getLanguageIdentifier().language + \"/\" + suggestion.label;\n            var item = this._cache.get(key);\n            if (item && item.touch > seq && item.type === suggestion.kind && item.insertText === suggestion.insertText) {\n                seq = item.touch;\n                res = i;\n            }\n        }\n        if (res === -1) {\n            return _super.prototype.select.call(this, model, pos, items);\n        }\n        else {\n            return res;\n        }\n    };\n    LRUMemory.prototype.toJSON = function () {\n        var data = [];\n        this._cache.forEach(function (value, key) {\n            data.push([key, value]);\n        });\n        return data;\n    };\n    LRUMemory.prototype.fromJSON = function (data) {\n        this._cache.clear();\n        var seq = 0;\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n            var _a = data_1[_i], key = _a[0], value = _a[1];\n            value.touch = seq;\n            value.type = typeof value.type === 'number' ? value.type : modes_1.completionKindFromString(value.type);\n            this._cache.set(key, value);\n        }\n        this._seq = this._cache.size;\n    };\n    return LRUMemory;\n}(Memory));\nexports.LRUMemory = LRUMemory;\nvar PrefixMemory = /** @class */ (function (_super) {\n    tslib_1.__extends(PrefixMemory, _super);\n    function PrefixMemory() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._trie = map_1.TernarySearchTree.forStrings();\n        _this._seq = 0;\n        return _this;\n    }\n    PrefixMemory.prototype.memorize = function (model, pos, item) {\n        var word = model.getWordUntilPosition(pos).word;\n        var key = model.getLanguageIdentifier().language + \"/\" + word;\n        this._trie.set(key, {\n            type: item.completion.kind,\n            insertText: item.completion.insertText,\n            touch: this._seq++\n        });\n    };\n    PrefixMemory.prototype.select = function (model, pos, items) {\n        var word = model.getWordUntilPosition(pos).word;\n        if (!word) {\n            return _super.prototype.select.call(this, model, pos, items);\n        }\n        var key = model.getLanguageIdentifier().language + \"/\" + word;\n        var item = this._trie.get(key);\n        if (!item) {\n            item = this._trie.findSubstr(key);\n        }\n        if (item) {\n            for (var i = 0; i < items.length; i++) {\n                var _a = items[i].completion, kind = _a.kind, insertText = _a.insertText;\n                if (kind === item.type && insertText === item.insertText) {\n                    return i;\n                }\n            }\n        }\n        return _super.prototype.select.call(this, model, pos, items);\n    };\n    PrefixMemory.prototype.toJSON = function () {\n        var entries = [];\n        this._trie.forEach(function (value, key) { return entries.push([key, value]); });\n        // sort by last recently used (touch), then\n        // take the top 200 item and normalize their\n        // touch\n        entries\n            .sort(function (a, b) { return -(a[1].touch - b[1].touch); })\n            .forEach(function (value, i) { return value[1].touch = i; });\n        return entries.slice(0, 200);\n    };\n    PrefixMemory.prototype.fromJSON = function (data) {\n        this._trie.clear();\n        if (data.length > 0) {\n            this._seq = data[0][1].touch + 1;\n            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {\n                var _a = data_2[_i], key = _a[0], value = _a[1];\n                value.type = typeof value.type === 'number' ? value.type : modes_1.completionKindFromString(value.type);\n                this._trie.set(key, value);\n            }\n        }\n    };\n    return PrefixMemory;\n}(Memory));\nexports.PrefixMemory = PrefixMemory;\nvar SuggestMemoryService = /** @class */ (function (_super) {\n    tslib_1.__extends(SuggestMemoryService, _super);\n    function SuggestMemoryService(_storageService, _configService) {\n        var _this = _super.call(this) || this;\n        _this._storageService = _storageService;\n        _this._configService = _configService;\n        _this._storagePrefix = 'suggest/memories';\n        var update = function () {\n            var mode = _this._configService.getValue('editor.suggestSelection');\n            var share = _this._configService.getValue('editor.suggest.shareSuggestSelections');\n            _this._update(mode, share, false);\n        };\n        _this._persistSoon = _this._register(new async_1.RunOnceScheduler(function () { return _this._saveState(); }, 500));\n        _this._register(_storageService.onWillSaveState(function () { return _this._saveState(); }));\n        _this._register(_this._configService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('editor.suggestSelection') || e.affectsConfiguration('editor.suggest.shareSuggestSelections')) {\n                update();\n            }\n        }));\n        _this._register(_this._storageService.onDidChangeStorage(function (e) {\n            if (e.scope === storage_1.StorageScope.GLOBAL && e.key.indexOf(_this._storagePrefix) === 0) {\n                if (!document.hasFocus()) {\n                    // windows that aren't focused have to drop their current\n                    // storage value and accept what's stored now\n                    _this._update(_this._mode, _this._shareMem, true);\n                }\n            }\n        }));\n        update();\n        return _this;\n    }\n    SuggestMemoryService.prototype._update = function (mode, shareMem, force) {\n        if (!force && this._mode === mode && this._shareMem === shareMem) {\n            return;\n        }\n        this._shareMem = shareMem;\n        this._mode = mode;\n        this._strategy = mode === 'recentlyUsedByPrefix' ? new PrefixMemory() : mode === 'recentlyUsed' ? new LRUMemory() : new NoMemory();\n        try {\n            var scope = shareMem ? storage_1.StorageScope.GLOBAL : storage_1.StorageScope.WORKSPACE;\n            var raw = this._storageService.get(this._storagePrefix + \"/\" + this._mode, scope);\n            if (raw) {\n                this._strategy.fromJSON(JSON.parse(raw));\n            }\n        }\n        catch (e) {\n            // things can go wrong with JSON...\n        }\n    };\n    SuggestMemoryService.prototype.memorize = function (model, pos, item) {\n        this._strategy.memorize(model, pos, item);\n        this._persistSoon.schedule();\n    };\n    SuggestMemoryService.prototype.select = function (model, pos, items) {\n        return this._strategy.select(model, pos, items);\n    };\n    SuggestMemoryService.prototype._saveState = function () {\n        var raw = JSON.stringify(this._strategy);\n        var scope = this._shareMem ? storage_1.StorageScope.GLOBAL : storage_1.StorageScope.WORKSPACE;\n        this._storageService.store(this._storagePrefix + \"/\" + this._mode, raw, scope);\n    };\n    SuggestMemoryService = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], SuggestMemoryService);\n    return SuggestMemoryService;\n}(lifecycle_1.Disposable));\nexports.SuggestMemoryService = SuggestMemoryService;\nexports.ISuggestMemoryService = instantiation_1.createDecorator('ISuggestMemories');\nextensions_1.registerSingleton(exports.ISuggestMemoryService, SuggestMemoryService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestMemory.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestMemory.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { LRUCache, TernarySearchTree } from 'vs/base/common/map';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { CompletionItemKind, completionKindFromString } from 'vs/editor/common/modes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { CompletionItem } from 'vs/editor/contrib/suggest/suggest';\n\nexport abstract class Memory {\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\tif (items.length === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tlet topScore = items[0].score;\n\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\tconst { score, completion: suggestion } = items[i];\n\t\t\tif (score !== topScore) {\n\t\t\t\t// stop when leaving the group of top matches\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (suggestion.preselect) {\n\t\t\t\t// stop when seeing an auto-select-item\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tabstract memorize(model: ITextModel, pos: IPosition, item: CompletionItem): void;\n\n\tabstract toJSON(): object | undefined;\n\n\tabstract fromJSON(data: object): void;\n}\n\nexport class NoMemory extends Memory {\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\t// no-op\n\t}\n\n\ttoJSON() {\n\t\treturn undefined;\n\t}\n\n\tfromJSON() {\n\t\t//\n\t}\n}\n\nexport interface MemItem {\n\ttype: string | CompletionItemKind;\n\tinsertText: string;\n\ttouch: number;\n}\n\nexport class LRUMemory extends Memory {\n\n\tprivate _cache = new LRUCache<string, MemItem>(300, 0.66);\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst { label } = item.completion;\n\t\tconst key = `${model.getLanguageIdentifier().language}/${label}`;\n\t\tthis._cache.set(key, {\n\t\t\ttouch: this._seq++,\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText\n\t\t});\n\t}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\t// in order of completions, select the first\n\t\t// that has been used in the past\n\t\tlet { word } = model.getWordUntilPosition(pos);\n\t\tif (word.length !== 0) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\n\t\tlet lineSuffix = model.getLineContent(pos.lineNumber).substr(pos.column - 10, pos.column - 1);\n\t\tif (/\\s$/.test(lineSuffix)) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\n\t\tlet res = -1;\n\t\tlet seq = -1;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst { completion: suggestion } = items[i];\n\t\t\tconst key = `${model.getLanguageIdentifier().language}/${suggestion.label}`;\n\t\t\tconst item = this._cache.get(key);\n\t\t\tif (item && item.touch > seq && item.type === suggestion.kind && item.insertText === suggestion.insertText) {\n\t\t\t\tseq = item.touch;\n\t\t\t\tres = i;\n\t\t\t}\n\t\t}\n\t\tif (res === -1) {\n\t\t\treturn super.select(model, pos, items);\n\t\t} else {\n\t\t\treturn res;\n\t\t}\n\t}\n\n\ttoJSON(): object {\n\t\tlet data: [string, MemItem][] = [];\n\t\tthis._cache.forEach((value, key) => {\n\t\t\tdata.push([key, value]);\n\t\t});\n\t\treturn data;\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._cache.clear();\n\t\tlet seq = 0;\n\t\tfor (const [key, value] of data) {\n\t\t\tvalue.touch = seq;\n\t\t\tvalue.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n\t\t\tthis._cache.set(key, value);\n\t\t}\n\t\tthis._seq = this._cache.size;\n\t}\n}\n\n\nexport class PrefixMemory extends Memory {\n\n\tprivate _trie = TernarySearchTree.forStrings<MemItem>();\n\tprivate _seq = 0;\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tconst { word } = model.getWordUntilPosition(pos);\n\t\tconst key = `${model.getLanguageIdentifier().language}/${word}`;\n\t\tthis._trie.set(key, {\n\t\t\ttype: item.completion.kind,\n\t\t\tinsertText: item.completion.insertText,\n\t\t\ttouch: this._seq++\n\t\t});\n\t}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\tlet { word } = model.getWordUntilPosition(pos);\n\t\tif (!word) {\n\t\t\treturn super.select(model, pos, items);\n\t\t}\n\t\tlet key = `${model.getLanguageIdentifier().language}/${word}`;\n\t\tlet item = this._trie.get(key);\n\t\tif (!item) {\n\t\t\titem = this._trie.findSubstr(key);\n\t\t}\n\t\tif (item) {\n\t\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\t\tlet { kind, insertText } = items[i].completion;\n\t\t\t\tif (kind === item.type && insertText === item.insertText) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn super.select(model, pos, items);\n\t}\n\n\ttoJSON(): object {\n\n\t\tlet entries: [string, MemItem][] = [];\n\t\tthis._trie.forEach((value, key) => entries.push([key, value]));\n\n\t\t// sort by last recently used (touch), then\n\t\t// take the top 200 item and normalize their\n\t\t// touch\n\t\tentries\n\t\t\t.sort((a, b) => -(a[1].touch - b[1].touch))\n\t\t\t.forEach((value, i) => value[1].touch = i);\n\n\t\treturn entries.slice(0, 200);\n\t}\n\n\tfromJSON(data: [string, MemItem][]): void {\n\t\tthis._trie.clear();\n\t\tif (data.length > 0) {\n\t\t\tthis._seq = data[0][1].touch + 1;\n\t\t\tfor (const [key, value] of data) {\n\t\t\t\tvalue.type = typeof value.type === 'number' ? value.type : completionKindFromString(value.type);\n\t\t\t\tthis._trie.set(key, value);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport type MemMode = 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';\n\nexport class SuggestMemoryService extends Disposable implements ISuggestMemoryService {\n\n\treadonly _serviceBrand: any;\n\n\tprivate readonly _storagePrefix = 'suggest/memories';\n\n\tprivate readonly _persistSoon: RunOnceScheduler;\n\tprivate _mode: MemMode;\n\tprivate _shareMem: boolean;\n\tprivate _strategy: Memory;\n\n\tconstructor(\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst update = () => {\n\t\t\tconst mode = this._configService.getValue<MemMode>('editor.suggestSelection');\n\t\t\tconst share = this._configService.getValue<boolean>('editor.suggest.shareSuggestSelections');\n\t\t\tthis._update(mode, share, false);\n\t\t};\n\n\t\tthis._persistSoon = this._register(new RunOnceScheduler(() => this._saveState(), 500));\n\t\tthis._register(_storageService.onWillSaveState(() => this._saveState()));\n\n\t\tthis._register(this._configService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('editor.suggestSelection') || e.affectsConfiguration('editor.suggest.shareSuggestSelections')) {\n\t\t\t\tupdate();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._storageService.onDidChangeStorage(e => {\n\t\t\tif (e.scope === StorageScope.GLOBAL && e.key.indexOf(this._storagePrefix) === 0) {\n\t\t\t\tif (!document.hasFocus()) {\n\t\t\t\t\t// windows that aren't focused have to drop their current\n\t\t\t\t\t// storage value and accept what's stored now\n\t\t\t\t\tthis._update(this._mode, this._shareMem, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tupdate();\n\t}\n\n\tprivate _update(mode: MemMode, shareMem: boolean, force: boolean): void {\n\t\tif (!force && this._mode === mode && this._shareMem === shareMem) {\n\t\t\treturn;\n\t\t}\n\t\tthis._shareMem = shareMem;\n\t\tthis._mode = mode;\n\t\tthis._strategy = mode === 'recentlyUsedByPrefix' ? new PrefixMemory() : mode === 'recentlyUsed' ? new LRUMemory() : new NoMemory();\n\n\t\ttry {\n\t\t\tconst scope = shareMem ? StorageScope.GLOBAL : StorageScope.WORKSPACE;\n\t\t\tconst raw = this._storageService.get(`${this._storagePrefix}/${this._mode}`, scope);\n\t\t\tif (raw) {\n\t\t\t\tthis._strategy.fromJSON(JSON.parse(raw));\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// things can go wrong with JSON...\n\t\t}\n\t}\n\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void {\n\t\tthis._strategy.memorize(model, pos, item);\n\t\tthis._persistSoon.schedule();\n\t}\n\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number {\n\t\treturn this._strategy.select(model, pos, items);\n\t}\n\n\tprivate _saveState() {\n\t\tconst raw = JSON.stringify(this._strategy);\n\t\tconst scope = this._shareMem ? StorageScope.GLOBAL : StorageScope.WORKSPACE;\n\t\tthis._storageService.store(`${this._storagePrefix}/${this._mode}`, raw, scope);\n\t}\n}\n\n\nexport const ISuggestMemoryService = createDecorator<ISuggestMemoryService>('ISuggestMemories');\n\nexport interface ISuggestMemoryService {\n\t_serviceBrand: any;\n\tmemorize(model: ITextModel, pos: IPosition, item: CompletionItem): void;\n\tselect(model: ITextModel, pos: IPosition, items: CompletionItem[]): number;\n}\n\nregisterSingleton(ISuggestMemoryService, SuggestMemoryService, true);\n"]}]}