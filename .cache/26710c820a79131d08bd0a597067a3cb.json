{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/label/common/labelService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/label/common/labelService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar event_1 = require(\"vs/base/common/event\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar platform_2 = require(\"vs/base/common/platform\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar network_1 = require(\"vs/base/common/network\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar glob_1 = require(\"vs/base/common/glob\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar resourceLabelFormattersExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'resourceLabelFormatters',\n    jsonSchema: {\n        description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters', 'Contributes resource label formatting rules.'),\n        type: 'array',\n        items: {\n            type: 'object',\n            required: ['scheme', 'formatting'],\n            properties: {\n                scheme: {\n                    type: 'string',\n                    description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.scheme', 'URI scheme on which to match the formatter on. For example \"file\". Simple glob patterns are supported.'),\n                },\n                authority: {\n                    type: 'string',\n                    description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.authority', 'URI authority on which to match the formatter on. Simple glob patterns are supported.'),\n                },\n                formatting: {\n                    description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.formatting', \"Rules for formatting uri resource labels.\"),\n                    type: 'object',\n                    properties: {\n                        label: {\n                            type: 'string',\n                            description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.label', \"Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme} and ${authority} are supported as variables.\")\n                        },\n                        separator: {\n                            type: 'string',\n                            description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.separator', \"Separator to be used in the uri label display. '/' or '\\' as an example.\")\n                        },\n                        tildify: {\n                            type: 'boolean',\n                            description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.tildify', \"Controls if the start of the uri label should be tildified when possible.\")\n                        },\n                        workspaceSuffix: {\n                            type: 'string',\n                            description: nls_1.localize('vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix', \"Suffix appended to the workspace label.\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\nvar sepRegexp = /\\//g;\nvar labelMatchingRegexp = /\\$\\{scheme\\}|\\$\\{authority\\}|\\$\\{path\\}/g;\nfunction hasDriveLetter(path) {\n    return !!(platform_2.isWindows && path && path[2] === ':');\n}\nvar ResourceLabelFormattersHandler = /** @class */ (function () {\n    function ResourceLabelFormattersHandler(labelService) {\n        var _this = this;\n        this.formattersDisposables = new Map();\n        resourceLabelFormattersExtPoint.setHandler(function (extensions, delta) {\n            delta.added.forEach(function (added) { return added.value.forEach(function (formatter) {\n                _this.formattersDisposables.set(formatter, labelService.registerFormatter(formatter));\n            }); });\n            delta.removed.forEach(function (removed) { return removed.value.forEach(function (formatter) {\n                _this.formattersDisposables.get(formatter).dispose();\n            }); });\n        });\n    }\n    ResourceLabelFormattersHandler = tslib_1.__decorate([\n        tslib_1.__param(0, label_1.ILabelService)\n    ], ResourceLabelFormattersHandler);\n    return ResourceLabelFormattersHandler;\n}());\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(ResourceLabelFormattersHandler, lifecycle_1.LifecyclePhase.Restored);\nvar LabelService = /** @class */ (function () {\n    function LabelService(environmentService, contextService) {\n        this.environmentService = environmentService;\n        this.contextService = contextService;\n        this.formatters = [];\n        this._onDidChangeFormatters = new event_1.Emitter();\n    }\n    Object.defineProperty(LabelService.prototype, \"onDidChangeFormatters\", {\n        get: function () {\n            return this._onDidChangeFormatters.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LabelService.prototype.findFormatting = function (resource) {\n        var bestResult;\n        this.formatters.forEach(function (formatter) {\n            if (formatter.scheme === resource.scheme) {\n                if (!bestResult && !formatter.authority) {\n                    bestResult = formatter;\n                    return;\n                }\n                if (!formatter.authority) {\n                    return;\n                }\n                if (glob_1.match(formatter.authority, resource.authority) && (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length || ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n                    bestResult = formatter;\n                }\n            }\n        });\n        return bestResult ? bestResult.formatting : undefined;\n    };\n    LabelService.prototype.getUriLabel = function (resource, options) {\n        if (options === void 0) { options = {}; }\n        var formatting = this.findFormatting(resource);\n        if (!formatting) {\n            return labels_1.getPathLabel(resource.path, this.environmentService, options.relative ? this.contextService : undefined);\n        }\n        var label;\n        var baseResource = this.contextService && this.contextService.getWorkspaceFolder(resource);\n        if (options.relative && baseResource) {\n            var relativeLabel = void 0;\n            if (resources_1.isEqual(baseResource.uri, resource)) {\n                relativeLabel = ''; // no label if resources are identical\n            }\n            else {\n                var baseResourceLabel = this.formatUri(baseResource.uri, formatting, options.noPrefix);\n                relativeLabel = strings_1.ltrim(this.formatUri(resource, formatting, options.noPrefix).substring(baseResourceLabel.length), formatting.separator);\n            }\n            var hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;\n            if (hasMultipleRoots && !options.noPrefix) {\n                var rootName = (baseResource && baseResource.name) ? baseResource.name : resources_1.basenameOrAuthority(baseResource.uri);\n                relativeLabel = relativeLabel ? (rootName + ' â€¢ ' + relativeLabel) : rootName; // always show root basename if there are multiple\n            }\n            label = relativeLabel;\n        }\n        else {\n            label = this.formatUri(resource, formatting, options.noPrefix);\n        }\n        return options.endWithSeparator ? this.appendSeparatorIfMissing(label, formatting) : label;\n    };\n    LabelService.prototype.getWorkspaceLabel = function (workspace, options) {\n        if (!workspaces_1.isWorkspaceIdentifier(workspace) && !workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {\n            var identifier = workspaces_1.toWorkspaceIdentifier(workspace);\n            if (!identifier) {\n                return '';\n            }\n            workspace = identifier;\n        }\n        // Workspace: Single Folder\n        if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {\n            // Folder on disk\n            var label_2 = options && options.verbose ? this.getUriLabel(workspace) : resources_1.basename(workspace) || '/';\n            return this.appendWorkspaceSuffix(label_2, workspace);\n        }\n        // Workspace: Untitled\n        if (resources_1.isEqualOrParent(workspace.configPath, this.environmentService.untitledWorkspacesHome)) {\n            return nls_1.localize('untitledWorkspace', \"Untitled (Workspace)\");\n        }\n        // Workspace: Saved\n        var filename = resources_1.basename(workspace.configPath);\n        var workspaceName = filename.substr(0, filename.length - workspaces_1.WORKSPACE_EXTENSION.length - 1);\n        var label;\n        if (options && options.verbose) {\n            label = nls_1.localize('workspaceNameVerbose', \"{0} (Workspace)\", this.getUriLabel(resources_1.joinPath(resources_1.dirname(workspace.configPath), workspaceName)));\n        }\n        else {\n            label = nls_1.localize('workspaceName', \"{0} (Workspace)\", workspaceName);\n        }\n        return this.appendWorkspaceSuffix(label, workspace.configPath);\n    };\n    LabelService.prototype.getSeparator = function (scheme, authority) {\n        var formatter = this.findFormatting(uri_1.URI.from({ scheme: scheme, authority: authority }));\n        return formatter && formatter.separator || '/';\n    };\n    LabelService.prototype.getHostLabel = function (scheme, authority) {\n        var formatter = this.findFormatting(uri_1.URI.from({ scheme: scheme, authority: authority }));\n        return formatter && formatter.workspaceSuffix || '';\n    };\n    LabelService.prototype.registerFormatter = function (formatter) {\n        var _this = this;\n        this.formatters.push(formatter);\n        this._onDidChangeFormatters.fire();\n        return {\n            dispose: function () {\n                _this.formatters = _this.formatters.filter(function (f) { return f !== formatter; });\n                _this._onDidChangeFormatters.fire();\n            }\n        };\n    };\n    LabelService.prototype.formatUri = function (resource, formatting, forceNoTildify) {\n        var label = formatting.label.replace(labelMatchingRegexp, function (match) {\n            switch (match) {\n                case '${scheme}': return resource.scheme;\n                case '${authority}': return resource.authority;\n                case '${path}': return resource.path;\n                default: return '';\n            }\n        });\n        // convert \\c:\\something => C:\\something\n        if (formatting.normalizeDriveLetter && hasDriveLetter(label)) {\n            label = label.charAt(1).toUpperCase() + label.substr(2);\n        }\n        if (formatting.tildify && !forceNoTildify) {\n            label = labels_1.tildify(label, this.environmentService.userHome);\n        }\n        if (formatting.authorityPrefix && resource.authority) {\n            label = formatting.authorityPrefix + label;\n        }\n        return label.replace(sepRegexp, formatting.separator);\n    };\n    LabelService.prototype.appendSeparatorIfMissing = function (label, formatting) {\n        var appendedLabel = label;\n        if (!strings_1.endsWith(label, formatting.separator)) {\n            appendedLabel += formatting.separator;\n        }\n        return appendedLabel;\n    };\n    LabelService.prototype.appendWorkspaceSuffix = function (label, uri) {\n        if (uri.scheme === network_1.Schemas.file) {\n            return label;\n        }\n        var formatting = this.findFormatting(uri);\n        var suffix = formatting && (typeof formatting.workspaceSuffix === 'string') ? formatting.workspaceSuffix : uri.scheme;\n        return suffix ? label + \" [\" + suffix + \"]\" : label;\n    };\n    LabelService = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService)\n    ], LabelService);\n    return LabelService;\n}());\nexports.LabelService = LabelService;\nextensions_1.registerSingleton(label_1.ILabelService, LabelService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/label/common/labelService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/label/common/labelService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceContextService, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { isEqual, basenameOrAuthority, isEqualOrParent, basename, joinPath, dirname } from 'vs/base/common/resources';\nimport { isWindows } from 'vs/base/common/platform';\nimport { tildify, getPathLabel } from 'vs/base/common/labels';\nimport { ltrim, endsWith } from 'vs/base/common/strings';\nimport { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, WORKSPACE_EXTENSION, toWorkspaceIdentifier, isWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { Schemas } from 'vs/base/common/network';\nimport { ILabelService, ResourceLabelFormatter, ResourceLabelFormatting } from 'vs/platform/label/common/label';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { match } from 'vs/base/common/glob';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nconst resourceLabelFormattersExtPoint = ExtensionsRegistry.registerExtensionPoint<ResourceLabelFormatter[]>({\n\textensionPoint: 'resourceLabelFormatters',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters', 'Contributes resource label formatting rules.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\trequired: ['scheme', 'formatting'],\n\t\t\tproperties: {\n\t\t\t\tscheme: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.scheme', 'URI scheme on which to match the formatter on. For example \"file\". Simple glob patterns are supported.'),\n\t\t\t\t},\n\t\t\t\tauthority: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.authority', 'URI authority on which to match the formatter on. Simple glob patterns are supported.'),\n\t\t\t\t},\n\t\t\t\tformatting: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.formatting', \"Rules for formatting uri resource labels.\"),\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.label', \"Label rules to display. For example: myLabel:/${path}. ${path}, ${scheme} and ${authority} are supported as variables.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tseparator: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.separator', \"Separator to be used in the uri label display. '/' or '\\' as an example.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttildify: {\n\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.tildify', \"Controls if the start of the uri label should be tildified when possible.\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tworkspaceSuffix: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.resourceLabelFormatters.formatting.workspaceSuffix', \"Suffix appended to the workspace label.\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nconst sepRegexp = /\\//g;\nconst labelMatchingRegexp = /\\$\\{scheme\\}|\\$\\{authority\\}|\\$\\{path\\}/g;\n\nfunction hasDriveLetter(path: string): boolean {\n\treturn !!(isWindows && path && path[2] === ':');\n}\n\nclass ResourceLabelFormattersHandler implements IWorkbenchContribution {\n\tprivate formattersDisposables = new Map<ResourceLabelFormatter, IDisposable>();\n\n\tconstructor(@ILabelService labelService: ILabelService) {\n\t\tresourceLabelFormattersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach(added => added.value.forEach(formatter => {\n\t\t\t\tthis.formattersDisposables.set(formatter, labelService.registerFormatter(formatter));\n\t\t\t}));\n\t\t\tdelta.removed.forEach(removed => removed.value.forEach(formatter => {\n\t\t\t\tthis.formattersDisposables.get(formatter)!.dispose();\n\t\t\t}));\n\t\t});\n\t}\n}\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ResourceLabelFormattersHandler, LifecyclePhase.Restored);\n\nexport class LabelService implements ILabelService {\n\t_serviceBrand: any;\n\n\tprivate formatters: ResourceLabelFormatter[] = [];\n\tprivate readonly _onDidChangeFormatters = new Emitter<void>();\n\n\tconstructor(\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t) { }\n\n\tget onDidChangeFormatters(): Event<void> {\n\t\treturn this._onDidChangeFormatters.event;\n\t}\n\n\tfindFormatting(resource: URI): ResourceLabelFormatting | undefined {\n\t\tlet bestResult: ResourceLabelFormatter | undefined;\n\n\t\tthis.formatters.forEach(formatter => {\n\t\t\tif (formatter.scheme === resource.scheme) {\n\t\t\t\tif (!bestResult && !formatter.authority) {\n\t\t\t\t\tbestResult = formatter;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!formatter.authority) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (match(formatter.authority, resource.authority) && (!bestResult || !bestResult.authority || formatter.authority.length > bestResult.authority.length || ((formatter.authority.length === bestResult.authority.length) && formatter.priority))) {\n\t\t\t\t\tbestResult = formatter;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn bestResult ? bestResult.formatting : undefined;\n\t}\n\n\tgetUriLabel(resource: URI, options: { relative?: boolean, noPrefix?: boolean, endWithSeparator?: boolean } = {}): string {\n\t\tconst formatting = this.findFormatting(resource);\n\t\tif (!formatting) {\n\t\t\treturn getPathLabel(resource.path, this.environmentService, options.relative ? this.contextService : undefined);\n\t\t}\n\n\t\tlet label: string | undefined;\n\t\tconst baseResource = this.contextService && this.contextService.getWorkspaceFolder(resource);\n\n\t\tif (options.relative && baseResource) {\n\t\t\tlet relativeLabel: string;\n\t\t\tif (isEqual(baseResource.uri, resource)) {\n\t\t\t\trelativeLabel = ''; // no label if resources are identical\n\t\t\t} else {\n\t\t\t\tconst baseResourceLabel = this.formatUri(baseResource.uri, formatting, options.noPrefix);\n\t\t\t\trelativeLabel = ltrim(this.formatUri(resource, formatting, options.noPrefix).substring(baseResourceLabel.length), formatting.separator);\n\t\t\t}\n\n\t\t\tconst hasMultipleRoots = this.contextService.getWorkspace().folders.length > 1;\n\t\t\tif (hasMultipleRoots && !options.noPrefix) {\n\t\t\t\tconst rootName = (baseResource && baseResource.name) ? baseResource.name : basenameOrAuthority(baseResource.uri);\n\t\t\t\trelativeLabel = relativeLabel ? (rootName + ' â€¢ ' + relativeLabel) : rootName; // always show root basename if there are multiple\n\t\t\t}\n\n\t\t\tlabel = relativeLabel;\n\t\t} else {\n\t\t\tlabel = this.formatUri(resource, formatting, options.noPrefix);\n\t\t}\n\n\t\treturn options.endWithSeparator ? this.appendSeparatorIfMissing(label, formatting) : label;\n\t}\n\n\tgetWorkspaceLabel(workspace: (IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IWorkspace), options?: { verbose: boolean }): string {\n\t\tif (!isWorkspaceIdentifier(workspace) && !isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tconst identifier = toWorkspaceIdentifier(workspace);\n\t\t\tif (!identifier) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tworkspace = identifier;\n\t\t}\n\n\t\t// Workspace: Single Folder\n\t\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\t// Folder on disk\n\t\t\tconst label = options && options.verbose ? this.getUriLabel(workspace) : basename(workspace) || '/';\n\t\t\treturn this.appendWorkspaceSuffix(label, workspace);\n\t\t}\n\n\t\t// Workspace: Untitled\n\t\tif (isEqualOrParent(workspace.configPath, this.environmentService.untitledWorkspacesHome)) {\n\t\t\treturn localize('untitledWorkspace', \"Untitled (Workspace)\");\n\t\t}\n\n\t\t// Workspace: Saved\n\t\tconst filename = basename(workspace.configPath);\n\t\tconst workspaceName = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t\tlet label;\n\t\tif (options && options.verbose) {\n\t\t\tlabel = localize('workspaceNameVerbose', \"{0} (Workspace)\", this.getUriLabel(joinPath(dirname(workspace.configPath), workspaceName)));\n\t\t} else {\n\t\t\tlabel = localize('workspaceName', \"{0} (Workspace)\", workspaceName);\n\t\t}\n\t\treturn this.appendWorkspaceSuffix(label, workspace.configPath);\n\t}\n\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\tconst formatter = this.findFormatting(URI.from({ scheme, authority }));\n\t\treturn formatter && formatter.separator || '/';\n\t}\n\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\tconst formatter = this.findFormatting(URI.from({ scheme, authority }));\n\t\treturn formatter && formatter.workspaceSuffix || '';\n\t}\n\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthis.formatters.push(formatter);\n\t\tthis._onDidChangeFormatters.fire();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.formatters = this.formatters.filter(f => f !== formatter);\n\t\t\t\tthis._onDidChangeFormatters.fire();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate formatUri(resource: URI, formatting: ResourceLabelFormatting, forceNoTildify?: boolean): string {\n\t\tlet label = formatting.label.replace(labelMatchingRegexp, match => {\n\t\t\tswitch (match) {\n\t\t\t\tcase '${scheme}': return resource.scheme;\n\t\t\t\tcase '${authority}': return resource.authority;\n\t\t\t\tcase '${path}': return resource.path;\n\t\t\t\tdefault: return '';\n\t\t\t}\n\t\t});\n\n\t\t// convert \\c:\\something => C:\\something\n\t\tif (formatting.normalizeDriveLetter && hasDriveLetter(label)) {\n\t\t\tlabel = label.charAt(1).toUpperCase() + label.substr(2);\n\t\t}\n\n\t\tif (formatting.tildify && !forceNoTildify) {\n\t\t\tlabel = tildify(label, this.environmentService.userHome);\n\t\t}\n\t\tif (formatting.authorityPrefix && resource.authority) {\n\t\t\tlabel = formatting.authorityPrefix + label;\n\t\t}\n\n\t\treturn label.replace(sepRegexp, formatting.separator);\n\t}\n\n\tprivate appendSeparatorIfMissing(label: string, formatting: ResourceLabelFormatting): string {\n\t\tlet appendedLabel = label;\n\t\tif (!endsWith(label, formatting.separator)) {\n\t\t\tappendedLabel += formatting.separator;\n\t\t}\n\t\treturn appendedLabel;\n\t}\n\n\tprivate appendWorkspaceSuffix(label: string, uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn label;\n\t\t}\n\n\t\tconst formatting = this.findFormatting(uri);\n\t\tconst suffix = formatting && (typeof formatting.workspaceSuffix === 'string') ? formatting.workspaceSuffix : uri.scheme;\n\t\treturn suffix ? `${label} [${suffix}]` : label;\n\t}\n}\n\nregisterSingleton(ILabelService, LabelService, true);"]}]}