{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/getIconClasses.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/network\", \"vs/base/common/resources\", \"vs/editor/common/modes/modesRegistry\", \"vs/platform/files/common/files\"], function (require, exports, network_1, resources_1, modesRegistry_1, files_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getIconClasses(modelService, modeService, resource, fileKind) {\n        // we always set these base classes even if we do not have a path\n        const classes = fileKind === files_1.FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === files_1.FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n        if (resource) {\n            // Get the path and name of the resource. For data-URIs, we need to parse specially\n            let name;\n            let path;\n            if (resource.scheme === network_1.Schemas.data) {\n                const metadata = resources_1.DataUri.parseMetaData(resource);\n                name = metadata.get(resources_1.DataUri.META_DATA_LABEL);\n                path = name;\n            }\n            else {\n                name = cssEscape(resources_1.basenameOrAuthority(resource).toLowerCase());\n                path = resource.path.toLowerCase();\n            }\n            // Folders\n            if (fileKind === files_1.FileKind.FOLDER) {\n                classes.push(`${name}-name-folder-icon`);\n            }\n            // Files\n            else {\n                // Name & Extension(s)\n                if (name) {\n                    classes.push(`${name}-name-file-icon`);\n                    const dotSegments = name.split('.');\n                    for (let i = 1; i < dotSegments.length; i++) {\n                        classes.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n                    }\n                    classes.push(`ext-file-icon`); // extra segment to increase file-ext score\n                }\n                // Configured Language\n                let configuredLangId = getConfiguredLangId(modelService, modeService, resource);\n                configuredLangId = configuredLangId || (path ? modeService.getModeIdByFilepathOrFirstLine(path) : null);\n                if (configuredLangId) {\n                    classes.push(`${cssEscape(configuredLangId)}-lang-file-icon`);\n                }\n            }\n        }\n        return classes;\n    }\n    exports.getIconClasses = getIconClasses;\n    function getConfiguredLangId(modelService, modeService, resource) {\n        let configuredLangId = null;\n        if (resource) {\n            let modeId = null;\n            // Data URI: check for encoded metadata\n            if (resource.scheme === network_1.Schemas.data) {\n                const metadata = resources_1.DataUri.parseMetaData(resource);\n                const mime = metadata.get(resources_1.DataUri.META_DATA_MIME);\n                if (mime) {\n                    modeId = modeService.getModeId(mime);\n                }\n            }\n            // Any other URI: check for model if existing\n            else {\n                const model = modelService.getModel(resource);\n                if (model) {\n                    modeId = model.getLanguageIdentifier().language;\n                }\n            }\n            if (modeId && modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) {\n                configuredLangId = modeId; // only take if the mode is specific (aka no just plain text)\n            }\n        }\n        return configuredLangId;\n    }\n    exports.getConfiguredLangId = getConfiguredLangId;\n    function cssEscape(val) {\n        return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n    }\n    exports.cssEscape = cssEscape;\n});\n",null]}