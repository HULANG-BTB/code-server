{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lines/viewLine.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lines/viewLine.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar browser = require(\"vs/base/browser/browser\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar platform = require(\"vs/base/common/platform\");\nvar rangeUtil_1 = require(\"vs/editor/browser/viewParts/lines/rangeUtil\");\nvar renderingContext_1 = require(\"vs/editor/common/view/renderingContext\");\nvar lineDecorations_1 = require(\"vs/editor/common/viewLayout/lineDecorations\");\nvar viewLineRenderer_1 = require(\"vs/editor/common/viewLayout/viewLineRenderer\");\nvar viewModel_1 = require(\"vs/editor/common/viewModel/viewModel\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar canUseFastRenderedViewLine = (function () {\n    if (platform.isNative) {\n        // In VSCode we know very well when the zoom level changes\n        return true;\n    }\n    if (platform.isLinux || browser.isFirefox || browser.isSafari) {\n        // On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n        // --\n        // Even though we read character widths correctly, having read them at a specific zoom level\n        // does not mean they are the same at the current zoom level.\n        // --\n        // This could be improved if we ever figure out how to get an event when browsers zoom,\n        // but until then we have to stick with reading client rects.\n        // --\n        // The same has been observed with Firefox on Windows7\n        // --\n        // The same has been oversved with Safari\n        return false;\n    }\n    return true;\n})();\nvar alwaysRenderInlineSelection = (browser.isEdgeOrIE);\nvar DomReadingContext = /** @class */ (function () {\n    function DomReadingContext(domNode, endNode) {\n        this._domNode = domNode;\n        this._clientRectDeltaLeft = 0;\n        this._clientRectDeltaLeftRead = false;\n        this.endNode = endNode;\n    }\n    Object.defineProperty(DomReadingContext.prototype, \"clientRectDeltaLeft\", {\n        get: function () {\n            if (!this._clientRectDeltaLeftRead) {\n                this._clientRectDeltaLeftRead = true;\n                this._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\n            }\n            return this._clientRectDeltaLeft;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DomReadingContext;\n}());\nexports.DomReadingContext = DomReadingContext;\nvar ViewLineOptions = /** @class */ (function () {\n    function ViewLineOptions(config, themeType) {\n        this.themeType = themeType;\n        this.renderWhitespace = config.editor.viewInfo.renderWhitespace;\n        this.renderControlCharacters = config.editor.viewInfo.renderControlCharacters;\n        this.spaceWidth = config.editor.fontInfo.spaceWidth;\n        this.useMonospaceOptimizations = (config.editor.fontInfo.isMonospace\n            && !config.editor.viewInfo.disableMonospaceOptimizations);\n        this.canUseHalfwidthRightwardsArrow = config.editor.fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = config.editor.lineHeight;\n        this.stopRenderingLineAfter = config.editor.viewInfo.stopRenderingLineAfter;\n        this.fontLigatures = config.editor.viewInfo.fontLigatures;\n    }\n    ViewLineOptions.prototype.equals = function (other) {\n        return (this.themeType === other.themeType\n            && this.renderWhitespace === other.renderWhitespace\n            && this.renderControlCharacters === other.renderControlCharacters\n            && this.spaceWidth === other.spaceWidth\n            && this.useMonospaceOptimizations === other.useMonospaceOptimizations\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter\n            && this.fontLigatures === other.fontLigatures);\n    };\n    return ViewLineOptions;\n}());\nexports.ViewLineOptions = ViewLineOptions;\nvar ViewLine = /** @class */ (function () {\n    function ViewLine(options) {\n        this._options = options;\n        this._isMaybeInvalid = true;\n        this._renderedViewLine = null;\n    }\n    // --- begin IVisibleLineData\n    ViewLine.prototype.getDomNode = function () {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            return this._renderedViewLine.domNode.domNode;\n        }\n        return null;\n    };\n    ViewLine.prototype.setDomNode = function (domNode) {\n        if (this._renderedViewLine) {\n            this._renderedViewLine.domNode = fastDomNode_1.createFastDomNode(domNode);\n        }\n        else {\n            throw new Error('I have no rendered view line to set the dom node to...');\n        }\n    };\n    ViewLine.prototype.onContentChanged = function () {\n        this._isMaybeInvalid = true;\n    };\n    ViewLine.prototype.onTokensChanged = function () {\n        this._isMaybeInvalid = true;\n    };\n    ViewLine.prototype.onDecorationsChanged = function () {\n        this._isMaybeInvalid = true;\n    };\n    ViewLine.prototype.onOptionsChanged = function (newOptions) {\n        this._isMaybeInvalid = true;\n        this._options = newOptions;\n    };\n    ViewLine.prototype.onSelectionChanged = function () {\n        if (alwaysRenderInlineSelection || this._options.themeType === themeService_1.HIGH_CONTRAST) {\n            this._isMaybeInvalid = true;\n            return true;\n        }\n        return false;\n    };\n    ViewLine.prototype.renderLine = function (lineNumber, deltaTop, viewportData, sb) {\n        if (this._isMaybeInvalid === false) {\n            // it appears that nothing relevant has changed\n            return false;\n        }\n        this._isMaybeInvalid = false;\n        var lineData = viewportData.getViewLineRenderingData(lineNumber);\n        var options = this._options;\n        var actualInlineDecorations = lineDecorations_1.LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n        if (alwaysRenderInlineSelection || options.themeType === themeService_1.HIGH_CONTRAST) {\n            var selections = viewportData.selections;\n            for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n                var selection = selections_1[_i];\n                if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                    // Selection does not intersect line\n                    continue;\n                }\n                var startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                var endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                if (startColumn < endColumn) {\n                    actualInlineDecorations.push(new lineDecorations_1.LineDecoration(startColumn, endColumn, 'inline-selected-text', viewModel_1.InlineDecorationType.Regular));\n                }\n            }\n        }\n        var renderLineInput = new viewLineRenderer_1.RenderLineInput(options.useMonospaceOptimizations, options.canUseHalfwidthRightwardsArrow, lineData.content, lineData.continuesWithWrappedLine, lineData.isBasicASCII, lineData.containsRTL, lineData.minColumn - 1, lineData.tokens, actualInlineDecorations, lineData.tabSize, options.spaceWidth, options.stopRenderingLineAfter, options.renderWhitespace, options.renderControlCharacters, options.fontLigatures);\n        if (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n            // no need to do anything, we have the same render input\n            return false;\n        }\n        sb.appendASCIIString('<div style=\"top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;height:');\n        sb.appendASCIIString(String(this._options.lineHeight));\n        sb.appendASCIIString('px;\" class=\"');\n        sb.appendASCIIString(ViewLine.CLASS_NAME);\n        sb.appendASCIIString('\">');\n        var output = viewLineRenderer_1.renderViewLine(renderLineInput, sb);\n        sb.appendASCIIString('</div>');\n        var renderedViewLine = null;\n        if (canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === viewLineRenderer_1.ForeignElementType.None) {\n            if (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n                // Browser rounding errors have been observed in Chrome and IE, so using the fast\n                // view line only for short lines. Please test before removing the length check...\n                // ---\n                // Another rounding error has been observed on Linux in VSCode, where <span> width\n                // rounding errors add up to an observable large number...\n                // ---\n                // Also see another example of rounding errors on Windows in\n                // https://github.com/Microsoft/vscode/issues/33178\n                renderedViewLine = new FastRenderedViewLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping);\n            }\n        }\n        if (!renderedViewLine) {\n            renderedViewLine = createRenderedLine(this._renderedViewLine ? this._renderedViewLine.domNode : null, renderLineInput, output.characterMapping, output.containsRTL, output.containsForeignElements);\n        }\n        this._renderedViewLine = renderedViewLine;\n        return true;\n    };\n    ViewLine.prototype.layoutLine = function (lineNumber, deltaTop) {\n        if (this._renderedViewLine && this._renderedViewLine.domNode) {\n            this._renderedViewLine.domNode.setTop(deltaTop);\n            this._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n        }\n    };\n    // --- end IVisibleLineData\n    ViewLine.prototype.getWidth = function () {\n        if (!this._renderedViewLine) {\n            return 0;\n        }\n        return this._renderedViewLine.getWidth();\n    };\n    ViewLine.prototype.getWidthIsFast = function () {\n        if (!this._renderedViewLine) {\n            return true;\n        }\n        return this._renderedViewLine.getWidthIsFast();\n    };\n    ViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n        if (!this._renderedViewLine) {\n            return null;\n        }\n        startColumn = startColumn | 0; // @perf\n        endColumn = endColumn | 0; // @perf\n        startColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n        endColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n        var stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter && endColumn > stopRenderingLineAfter) {\n            // This range is obviously not visible\n            return null;\n        }\n        if (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter) {\n            startColumn = stopRenderingLineAfter;\n        }\n        if (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter) {\n            endColumn = stopRenderingLineAfter;\n        }\n        return this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\n    };\n    ViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n        if (!this._renderedViewLine) {\n            return 1;\n        }\n        return this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n    };\n    ViewLine.CLASS_NAME = 'view-line';\n    return ViewLine;\n}());\nexports.ViewLine = ViewLine;\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nvar FastRenderedViewLine = /** @class */ (function () {\n    function FastRenderedViewLine(domNode, renderLineInput, characterMapping) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._charWidth = renderLineInput.spaceWidth;\n    }\n    FastRenderedViewLine.prototype.getWidth = function () {\n        return this._getCharPosition(this._characterMapping.length);\n    };\n    FastRenderedViewLine.prototype.getWidthIsFast = function () {\n        return true;\n    };\n    FastRenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n        var startPosition = this._getCharPosition(startColumn);\n        var endPosition = this._getCharPosition(endColumn);\n        return [new renderingContext_1.HorizontalRange(startPosition, endPosition - startPosition)];\n    };\n    FastRenderedViewLine.prototype._getCharPosition = function (column) {\n        var charOffset = this._characterMapping.getAbsoluteOffsets();\n        if (charOffset.length === 0) {\n            // No characters on this line\n            return 0;\n        }\n        return Math.round(this._charWidth * charOffset[column - 1]);\n    };\n    FastRenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n        var spanNodeTextContentLength = spanNode.textContent.length;\n        var spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n        return charOffset + 1;\n    };\n    return FastRenderedViewLine;\n}());\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nvar RenderedViewLine = /** @class */ (function () {\n    function RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n        this.domNode = domNode;\n        this.input = renderLineInput;\n        this._characterMapping = characterMapping;\n        this._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n        this._containsForeignElements = containsForeignElements;\n        this._cachedWidth = -1;\n        this._pixelOffsetCache = null;\n        if (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n            this._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\n            for (var column = 0, len = this._characterMapping.length; column <= len; column++) {\n                this._pixelOffsetCache[column] = -1;\n            }\n        }\n    }\n    // --- Reading from the DOM methods\n    RenderedViewLine.prototype._getReadingTarget = function () {\n        return this.domNode.domNode.firstChild;\n    };\n    /**\n     * Width of the line in pixels\n     */\n    RenderedViewLine.prototype.getWidth = function () {\n        if (this._cachedWidth === -1) {\n            this._cachedWidth = this._getReadingTarget().offsetWidth;\n        }\n        return this._cachedWidth;\n    };\n    RenderedViewLine.prototype.getWidthIsFast = function () {\n        if (this._cachedWidth === -1) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Visible ranges for a model range\n     */\n    RenderedViewLine.prototype.getVisibleRangesForRange = function (startColumn, endColumn, context) {\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            var startOffset = this._readPixelOffset(startColumn, context);\n            if (startOffset === -1) {\n                return null;\n            }\n            var endOffset = this._readPixelOffset(endColumn, context);\n            if (endOffset === -1) {\n                return null;\n            }\n            return [new renderingContext_1.HorizontalRange(startOffset, endOffset - startOffset)];\n        }\n        return this._readVisibleRangesForRange(startColumn, endColumn, context);\n    };\n    RenderedViewLine.prototype._readVisibleRangesForRange = function (startColumn, endColumn, context) {\n        if (startColumn === endColumn) {\n            var pixelOffset = this._readPixelOffset(startColumn, context);\n            if (pixelOffset === -1) {\n                return null;\n            }\n            else {\n                return [new renderingContext_1.HorizontalRange(pixelOffset, 0)];\n            }\n        }\n        else {\n            return this._readRawVisibleRangesForRange(startColumn, endColumn, context);\n        }\n    };\n    RenderedViewLine.prototype._readPixelOffset = function (column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            if (this._containsForeignElements === viewLineRenderer_1.ForeignElementType.None) {\n                // We can assume the line is really empty\n                return 0;\n            }\n            if (this._containsForeignElements === viewLineRenderer_1.ForeignElementType.After) {\n                // We have foreign elements after the (empty) line\n                return 0;\n            }\n            if (this._containsForeignElements === viewLineRenderer_1.ForeignElementType.Before) {\n                // We have foreign element before the (empty) line\n                return this.getWidth();\n            }\n        }\n        if (this._pixelOffsetCache !== null) {\n            // the text is LTR\n            var cachedPixelOffset = this._pixelOffsetCache[column];\n            if (cachedPixelOffset !== -1) {\n                return cachedPixelOffset;\n            }\n            var result = this._actualReadPixelOffset(column, context);\n            this._pixelOffsetCache[column] = result;\n            return result;\n        }\n        return this._actualReadPixelOffset(column, context);\n    };\n    RenderedViewLine.prototype._actualReadPixelOffset = function (column, context) {\n        if (this._characterMapping.length === 0) {\n            // This line has no content\n            var r_1 = rangeUtil_1.RangeUtil.readHorizontalRanges(this._getReadingTarget(), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\n            if (!r_1 || r_1.length === 0) {\n                return -1;\n            }\n            return r_1[0].left;\n        }\n        if (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === viewLineRenderer_1.ForeignElementType.None) {\n            // This branch helps in the case of whitespace only lines which have a width set\n            return this.getWidth();\n        }\n        var partData = this._characterMapping.charOffsetToPartData(column - 1);\n        var partIndex = viewLineRenderer_1.CharacterMapping.getPartIndex(partData);\n        var charOffsetInPart = viewLineRenderer_1.CharacterMapping.getCharIndex(partData);\n        var r = rangeUtil_1.RangeUtil.readHorizontalRanges(this._getReadingTarget(), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n        if (!r || r.length === 0) {\n            return -1;\n        }\n        return r[0].left;\n    };\n    RenderedViewLine.prototype._readRawVisibleRangesForRange = function (startColumn, endColumn, context) {\n        if (startColumn === 1 && endColumn === this._characterMapping.length) {\n            // This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n            return [new renderingContext_1.HorizontalRange(0, this.getWidth())];\n        }\n        var startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\n        var startPartIndex = viewLineRenderer_1.CharacterMapping.getPartIndex(startPartData);\n        var startCharOffsetInPart = viewLineRenderer_1.CharacterMapping.getCharIndex(startPartData);\n        var endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\n        var endPartIndex = viewLineRenderer_1.CharacterMapping.getPartIndex(endPartData);\n        var endCharOffsetInPart = viewLineRenderer_1.CharacterMapping.getCharIndex(endPartData);\n        return rangeUtil_1.RangeUtil.readHorizontalRanges(this._getReadingTarget(), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n    };\n    /**\n     * Returns the column for the text found at a specific offset inside a rendered dom node\n     */\n    RenderedViewLine.prototype.getColumnOfNodeOffset = function (lineNumber, spanNode, offset) {\n        var spanNodeTextContentLength = spanNode.textContent.length;\n        var spanIndex = -1;\n        while (spanNode) {\n            spanNode = spanNode.previousSibling;\n            spanIndex++;\n        }\n        var charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n        return charOffset + 1;\n    };\n    return RenderedViewLine;\n}());\nvar WebKitRenderedViewLine = /** @class */ (function (_super) {\n    tslib_1.__extends(WebKitRenderedViewLine, _super);\n    function WebKitRenderedViewLine() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WebKitRenderedViewLine.prototype._readVisibleRangesForRange = function (startColumn, endColumn, context) {\n        var output = _super.prototype._readVisibleRangesForRange.call(this, startColumn, endColumn, context);\n        if (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n            return output;\n        }\n        // WebKit is buggy and returns an expanded range (to contain words in some cases)\n        // The last client rect is enlarged (I think)\n        if (!this.input.containsRTL) {\n            // This is an attempt to patch things up\n            // Find position of last column\n            var endPixelOffset = this._readPixelOffset(endColumn, context);\n            if (endPixelOffset !== -1) {\n                var lastRange = output[output.length - 1];\n                if (lastRange.left < endPixelOffset) {\n                    // Trim down the width of the last visible range to not go after the last column's position\n                    lastRange.width = endPixelOffset - lastRange.left;\n                }\n            }\n        }\n        return output;\n    };\n    return WebKitRenderedViewLine;\n}(RenderedViewLine));\nvar createRenderedLine = (function () {\n    if (browser.isWebKit) {\n        return createWebKitRenderedLine;\n    }\n    return createNormalRenderedLine;\n})();\nfunction createWebKitRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\nfunction createNormalRenderedLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements) {\n    return new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lines/viewLine.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lines/viewLine.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from 'vs/base/browser/browser';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport * as platform from 'vs/base/common/platform';\nimport { IVisibleLine } from 'vs/editor/browser/view/viewLayer';\nimport { RangeUtil } from 'vs/editor/browser/viewParts/lines/rangeUtil';\nimport { IStringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { IConfiguration } from 'vs/editor/common/editorCommon';\nimport { HorizontalRange } from 'vs/editor/common/view/renderingContext';\nimport { LineDecoration } from 'vs/editor/common/viewLayout/lineDecorations';\nimport { CharacterMapping, ForeignElementType, RenderLineInput, renderViewLine } from 'vs/editor/common/viewLayout/viewLineRenderer';\nimport { ViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { InlineDecorationType } from 'vs/editor/common/viewModel/viewModel';\nimport { HIGH_CONTRAST, ThemeType } from 'vs/platform/theme/common/themeService';\n\nconst canUseFastRenderedViewLine = (function () {\n\tif (platform.isNative) {\n\t\t// In VSCode we know very well when the zoom level changes\n\t\treturn true;\n\t}\n\n\tif (platform.isLinux || browser.isFirefox || browser.isSafari) {\n\t\t// On Linux, it appears that zooming affects char widths (in pixels), which is unexpected.\n\t\t// --\n\t\t// Even though we read character widths correctly, having read them at a specific zoom level\n\t\t// does not mean they are the same at the current zoom level.\n\t\t// --\n\t\t// This could be improved if we ever figure out how to get an event when browsers zoom,\n\t\t// but until then we have to stick with reading client rects.\n\t\t// --\n\t\t// The same has been observed with Firefox on Windows7\n\t\t// --\n\t\t// The same has been oversved with Safari\n\t\treturn false;\n\t}\n\n\treturn true;\n})();\n\nconst alwaysRenderInlineSelection = (browser.isEdgeOrIE);\n\nexport class DomReadingContext {\n\n\tprivate readonly _domNode: HTMLElement;\n\tprivate _clientRectDeltaLeft: number;\n\tprivate _clientRectDeltaLeftRead: boolean;\n\tpublic get clientRectDeltaLeft(): number {\n\t\tif (!this._clientRectDeltaLeftRead) {\n\t\t\tthis._clientRectDeltaLeftRead = true;\n\t\t\tthis._clientRectDeltaLeft = this._domNode.getBoundingClientRect().left;\n\t\t}\n\t\treturn this._clientRectDeltaLeft;\n\t}\n\n\tpublic readonly endNode: HTMLElement;\n\n\tconstructor(domNode: HTMLElement, endNode: HTMLElement) {\n\t\tthis._domNode = domNode;\n\t\tthis._clientRectDeltaLeft = 0;\n\t\tthis._clientRectDeltaLeftRead = false;\n\t\tthis.endNode = endNode;\n\t}\n\n}\n\nexport class ViewLineOptions {\n\tpublic readonly themeType: ThemeType;\n\tpublic readonly renderWhitespace: 'none' | 'boundary' | 'all';\n\tpublic readonly renderControlCharacters: boolean;\n\tpublic readonly spaceWidth: number;\n\tpublic readonly useMonospaceOptimizations: boolean;\n\tpublic readonly canUseHalfwidthRightwardsArrow: boolean;\n\tpublic readonly lineHeight: number;\n\tpublic readonly stopRenderingLineAfter: number;\n\tpublic readonly fontLigatures: boolean;\n\n\tconstructor(config: IConfiguration, themeType: ThemeType) {\n\t\tthis.themeType = themeType;\n\t\tthis.renderWhitespace = config.editor.viewInfo.renderWhitespace;\n\t\tthis.renderControlCharacters = config.editor.viewInfo.renderControlCharacters;\n\t\tthis.spaceWidth = config.editor.fontInfo.spaceWidth;\n\t\tthis.useMonospaceOptimizations = (\n\t\t\tconfig.editor.fontInfo.isMonospace\n\t\t\t&& !config.editor.viewInfo.disableMonospaceOptimizations\n\t\t);\n\t\tthis.canUseHalfwidthRightwardsArrow = config.editor.fontInfo.canUseHalfwidthRightwardsArrow;\n\t\tthis.lineHeight = config.editor.lineHeight;\n\t\tthis.stopRenderingLineAfter = config.editor.viewInfo.stopRenderingLineAfter;\n\t\tthis.fontLigatures = config.editor.viewInfo.fontLigatures;\n\t}\n\n\tpublic equals(other: ViewLineOptions): boolean {\n\t\treturn (\n\t\t\tthis.themeType === other.themeType\n\t\t\t&& this.renderWhitespace === other.renderWhitespace\n\t\t\t&& this.renderControlCharacters === other.renderControlCharacters\n\t\t\t&& this.spaceWidth === other.spaceWidth\n\t\t\t&& this.useMonospaceOptimizations === other.useMonospaceOptimizations\n\t\t\t&& this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n\t\t\t&& this.lineHeight === other.lineHeight\n\t\t\t&& this.stopRenderingLineAfter === other.stopRenderingLineAfter\n\t\t\t&& this.fontLigatures === other.fontLigatures\n\t\t);\n\t}\n}\n\nexport class ViewLine implements IVisibleLine {\n\n\tpublic static readonly CLASS_NAME = 'view-line';\n\n\tprivate _options: ViewLineOptions;\n\tprivate _isMaybeInvalid: boolean;\n\tprivate _renderedViewLine: IRenderedViewLine | null;\n\n\tconstructor(options: ViewLineOptions) {\n\t\tthis._options = options;\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._renderedViewLine = null;\n\t}\n\n\t// --- begin IVisibleLineData\n\n\tpublic getDomNode(): HTMLElement | null {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\treturn this._renderedViewLine.domNode.domNode;\n\t\t}\n\t\treturn null;\n\t}\n\tpublic setDomNode(domNode: HTMLElement): void {\n\t\tif (this._renderedViewLine) {\n\t\t\tthis._renderedViewLine.domNode = createFastDomNode(domNode);\n\t\t} else {\n\t\t\tthrow new Error('I have no rendered view line to set the dom node to...');\n\t\t}\n\t}\n\n\tpublic onContentChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onTokensChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onDecorationsChanged(): void {\n\t\tthis._isMaybeInvalid = true;\n\t}\n\tpublic onOptionsChanged(newOptions: ViewLineOptions): void {\n\t\tthis._isMaybeInvalid = true;\n\t\tthis._options = newOptions;\n\t}\n\tpublic onSelectionChanged(): boolean {\n\t\tif (alwaysRenderInlineSelection || this._options.themeType === HIGH_CONTRAST) {\n\t\t\tthis._isMaybeInvalid = true;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic renderLine(lineNumber: number, deltaTop: number, viewportData: ViewportData, sb: IStringBuilder): boolean {\n\t\tif (this._isMaybeInvalid === false) {\n\t\t\t// it appears that nothing relevant has changed\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._isMaybeInvalid = false;\n\n\t\tconst lineData = viewportData.getViewLineRenderingData(lineNumber);\n\t\tconst options = this._options;\n\t\tconst actualInlineDecorations = LineDecoration.filter(lineData.inlineDecorations, lineNumber, lineData.minColumn, lineData.maxColumn);\n\n\t\tif (alwaysRenderInlineSelection || options.themeType === HIGH_CONTRAST) {\n\t\t\tconst selections = viewportData.selections;\n\t\t\tfor (const selection of selections) {\n\n\t\t\t\tif (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n\t\t\t\t\t// Selection does not intersect line\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n\t\t\t\tconst endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n\n\t\t\t\tif (startColumn < endColumn) {\n\t\t\t\t\tactualInlineDecorations.push(new LineDecoration(startColumn, endColumn, 'inline-selected-text', InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst renderLineInput = new RenderLineInput(\n\t\t\toptions.useMonospaceOptimizations,\n\t\t\toptions.canUseHalfwidthRightwardsArrow,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tlineData.isBasicASCII,\n\t\t\tlineData.containsRTL,\n\t\t\tlineData.minColumn - 1,\n\t\t\tlineData.tokens,\n\t\t\tactualInlineDecorations,\n\t\t\tlineData.tabSize,\n\t\t\toptions.spaceWidth,\n\t\t\toptions.stopRenderingLineAfter,\n\t\t\toptions.renderWhitespace,\n\t\t\toptions.renderControlCharacters,\n\t\t\toptions.fontLigatures\n\t\t);\n\n\t\tif (this._renderedViewLine && this._renderedViewLine.input.equals(renderLineInput)) {\n\t\t\t// no need to do anything, we have the same render input\n\t\t\treturn false;\n\t\t}\n\n\t\tsb.appendASCIIString('<div style=\"top:');\n\t\tsb.appendASCIIString(String(deltaTop));\n\t\tsb.appendASCIIString('px;height:');\n\t\tsb.appendASCIIString(String(this._options.lineHeight));\n\t\tsb.appendASCIIString('px;\" class=\"');\n\t\tsb.appendASCIIString(ViewLine.CLASS_NAME);\n\t\tsb.appendASCIIString('\">');\n\n\t\tconst output = renderViewLine(renderLineInput, sb);\n\n\t\tsb.appendASCIIString('</div>');\n\n\t\tlet renderedViewLine: IRenderedViewLine | null = null;\n\t\tif (canUseFastRenderedViewLine && lineData.isBasicASCII && options.useMonospaceOptimizations && output.containsForeignElements === ForeignElementType.None) {\n\t\t\tif (lineData.content.length < 300 && renderLineInput.lineTokens.getCount() < 100) {\n\t\t\t\t// Browser rounding errors have been observed in Chrome and IE, so using the fast\n\t\t\t\t// view line only for short lines. Please test before removing the length check...\n\t\t\t\t// ---\n\t\t\t\t// Another rounding error has been observed on Linux in VSCode, where <span> width\n\t\t\t\t// rounding errors add up to an observable large number...\n\t\t\t\t// ---\n\t\t\t\t// Also see another example of rounding errors on Windows in\n\t\t\t\t// https://github.com/Microsoft/vscode/issues/33178\n\t\t\t\trenderedViewLine = new FastRenderedViewLine(\n\t\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\t\trenderLineInput,\n\t\t\t\t\toutput.characterMapping\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!renderedViewLine) {\n\t\t\trenderedViewLine = createRenderedLine(\n\t\t\t\tthis._renderedViewLine ? this._renderedViewLine.domNode : null,\n\t\t\t\trenderLineInput,\n\t\t\t\toutput.characterMapping,\n\t\t\t\toutput.containsRTL,\n\t\t\t\toutput.containsForeignElements\n\t\t\t);\n\t\t}\n\n\t\tthis._renderedViewLine = renderedViewLine;\n\n\t\treturn true;\n\t}\n\n\tpublic layoutLine(lineNumber: number, deltaTop: number): void {\n\t\tif (this._renderedViewLine && this._renderedViewLine.domNode) {\n\t\t\tthis._renderedViewLine.domNode.setTop(deltaTop);\n\t\t\tthis._renderedViewLine.domNode.setHeight(this._options.lineHeight);\n\t\t}\n\t}\n\n\t// --- end IVisibleLineData\n\n\tpublic getWidth(): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._renderedViewLine.getWidth();\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._renderedViewLine.getWidthIsFast();\n\t}\n\n\tpublic getVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn null;\n\t\t}\n\t\tstartColumn = startColumn | 0; // @perf\n\t\tendColumn = endColumn | 0; // @perf\n\n\t\tstartColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, startColumn));\n\t\tendColumn = Math.min(this._renderedViewLine.input.lineContent.length + 1, Math.max(1, endColumn));\n\n\t\tconst stopRenderingLineAfter = this._renderedViewLine.input.stopRenderingLineAfter | 0; // @perf\n\n\t\tif (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter && endColumn > stopRenderingLineAfter) {\n\t\t\t// This range is obviously not visible\n\t\t\treturn null;\n\t\t}\n\n\t\tif (stopRenderingLineAfter !== -1 && startColumn > stopRenderingLineAfter) {\n\t\t\tstartColumn = stopRenderingLineAfter;\n\t\t}\n\n\t\tif (stopRenderingLineAfter !== -1 && endColumn > stopRenderingLineAfter) {\n\t\t\tendColumn = stopRenderingLineAfter;\n\t\t}\n\n\t\treturn this._renderedViewLine.getVisibleRangesForRange(startColumn, endColumn, context);\n\t}\n\n\tpublic getColumnOfNodeOffset(lineNumber: number, spanNode: HTMLElement, offset: number): number {\n\t\tif (!this._renderedViewLine) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn this._renderedViewLine.getColumnOfNodeOffset(lineNumber, spanNode, offset);\n\t}\n}\n\ninterface IRenderedViewLine {\n\tdomNode: FastDomNode<HTMLElement> | null;\n\treadonly input: RenderLineInput;\n\tgetWidth(): number;\n\tgetWidthIsFast(): boolean;\n\tgetVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null;\n\tgetColumnOfNodeOffset(lineNumber: number, spanNode: HTMLElement, offset: number): number;\n}\n\n/**\n * A rendered line which is guaranteed to contain only regular ASCII and is rendered with a monospace font.\n */\nclass FastRenderedViewLine implements IRenderedViewLine {\n\n\tpublic domNode: FastDomNode<HTMLElement> | null;\n\tpublic readonly input: RenderLineInput;\n\n\tprivate readonly _characterMapping: CharacterMapping;\n\tprivate readonly _charWidth: number;\n\n\tconstructor(domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._charWidth = renderLineInput.spaceWidth;\n\t}\n\n\tpublic getWidth(): number {\n\t\treturn this._getCharPosition(this._characterMapping.length);\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic getVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\t\tconst startPosition = this._getCharPosition(startColumn);\n\t\tconst endPosition = this._getCharPosition(endColumn);\n\t\treturn [new HorizontalRange(startPosition, endPosition - startPosition)];\n\t}\n\n\tprivate _getCharPosition(column: number): number {\n\t\tconst charOffset = this._characterMapping.getAbsoluteOffsets();\n\t\tif (charOffset.length === 0) {\n\t\t\t// No characters on this line\n\t\t\treturn 0;\n\t\t}\n\t\treturn Math.round(this._charWidth * charOffset[column - 1]);\n\t}\n\n\tpublic getColumnOfNodeOffset(lineNumber: number, spanNode: HTMLElement, offset: number): number {\n\t\tconst spanNodeTextContentLength = spanNode.textContent!.length;\n\n\t\tlet spanIndex = -1;\n\t\twhile (spanNode) {\n\t\t\tspanNode = <HTMLElement>spanNode.previousSibling;\n\t\t\tspanIndex++;\n\t\t}\n\n\t\tconst charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\t\treturn charOffset + 1;\n\t}\n}\n\n/**\n * Every time we render a line, we save what we have rendered in an instance of this class.\n */\nclass RenderedViewLine implements IRenderedViewLine {\n\n\tpublic domNode: FastDomNode<HTMLElement>;\n\tpublic readonly input: RenderLineInput;\n\n\tprotected readonly _characterMapping: CharacterMapping;\n\tprivate readonly _isWhitespaceOnly: boolean;\n\tprivate readonly _containsForeignElements: ForeignElementType;\n\tprivate _cachedWidth: number;\n\n\t/**\n\t * This is a map that is used only when the line is guaranteed to have no RTL text.\n\t */\n\tprivate readonly _pixelOffsetCache: Int32Array | null;\n\n\tconstructor(domNode: FastDomNode<HTMLElement>, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType) {\n\t\tthis.domNode = domNode;\n\t\tthis.input = renderLineInput;\n\t\tthis._characterMapping = characterMapping;\n\t\tthis._isWhitespaceOnly = /^\\s*$/.test(renderLineInput.lineContent);\n\t\tthis._containsForeignElements = containsForeignElements;\n\t\tthis._cachedWidth = -1;\n\n\t\tthis._pixelOffsetCache = null;\n\t\tif (!containsRTL || this._characterMapping.length === 0 /* the line is empty */) {\n\t\t\tthis._pixelOffsetCache = new Int32Array(Math.max(2, this._characterMapping.length + 1));\n\t\t\tfor (let column = 0, len = this._characterMapping.length; column <= len; column++) {\n\t\t\t\tthis._pixelOffsetCache[column] = -1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// --- Reading from the DOM methods\n\n\tprotected _getReadingTarget(): HTMLElement {\n\t\treturn <HTMLSpanElement>this.domNode.domNode.firstChild;\n\t}\n\n\t/**\n\t * Width of the line in pixels\n\t */\n\tpublic getWidth(): number {\n\t\tif (this._cachedWidth === -1) {\n\t\t\tthis._cachedWidth = this._getReadingTarget().offsetWidth;\n\t\t}\n\t\treturn this._cachedWidth;\n\t}\n\n\tpublic getWidthIsFast(): boolean {\n\t\tif (this._cachedWidth === -1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Visible ranges for a model range\n\t */\n\tpublic getVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\t\t\tconst startOffset = this._readPixelOffset(startColumn, context);\n\t\t\tif (startOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst endOffset = this._readPixelOffset(endColumn, context);\n\t\t\tif (endOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn [new HorizontalRange(startOffset, endOffset - startOffset)];\n\t\t}\n\n\t\treturn this._readVisibleRangesForRange(startColumn, endColumn, context);\n\t}\n\n\tprotected _readVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\t\tif (startColumn === endColumn) {\n\t\t\tconst pixelOffset = this._readPixelOffset(startColumn, context);\n\t\t\tif (pixelOffset === -1) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn [new HorizontalRange(pixelOffset, 0)];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._readRawVisibleRangesForRange(startColumn, endColumn, context);\n\t\t}\n\t}\n\n\tprotected _readPixelOffset(column: number, context: DomReadingContext): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tif (this._containsForeignElements === ForeignElementType.None) {\n\t\t\t\t// We can assume the line is really empty\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.After) {\n\t\t\t\t// We have foreign elements after the (empty) line\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (this._containsForeignElements === ForeignElementType.Before) {\n\t\t\t\t// We have foreign element before the (empty) line\n\t\t\t\treturn this.getWidth();\n\t\t\t}\n\t\t}\n\n\t\tif (this._pixelOffsetCache !== null) {\n\t\t\t// the text is LTR\n\n\t\t\tconst cachedPixelOffset = this._pixelOffsetCache[column];\n\t\t\tif (cachedPixelOffset !== -1) {\n\t\t\t\treturn cachedPixelOffset;\n\t\t\t}\n\n\t\t\tconst result = this._actualReadPixelOffset(column, context);\n\t\t\tthis._pixelOffsetCache[column] = result;\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this._actualReadPixelOffset(column, context);\n\t}\n\n\tprivate _actualReadPixelOffset(column: number, context: DomReadingContext): number {\n\t\tif (this._characterMapping.length === 0) {\n\t\t\t// This line has no content\n\t\t\tconst r = RangeUtil.readHorizontalRanges(this._getReadingTarget(), 0, 0, 0, 0, context.clientRectDeltaLeft, context.endNode);\n\t\t\tif (!r || r.length === 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn r[0].left;\n\t\t}\n\n\t\tif (column === this._characterMapping.length && this._isWhitespaceOnly && this._containsForeignElements === ForeignElementType.None) {\n\t\t\t// This branch helps in the case of whitespace only lines which have a width set\n\t\t\treturn this.getWidth();\n\t\t}\n\n\t\tconst partData = this._characterMapping.charOffsetToPartData(column - 1);\n\t\tconst partIndex = CharacterMapping.getPartIndex(partData);\n\t\tconst charOffsetInPart = CharacterMapping.getCharIndex(partData);\n\n\t\tconst r = RangeUtil.readHorizontalRanges(this._getReadingTarget(), partIndex, charOffsetInPart, partIndex, charOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n\t\tif (!r || r.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn r[0].left;\n\t}\n\n\tprivate _readRawVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\n\t\tif (startColumn === 1 && endColumn === this._characterMapping.length) {\n\t\t\t// This branch helps IE with bidi text & gives a performance boost to other browsers when reading visible ranges for an entire line\n\n\t\t\treturn [new HorizontalRange(0, this.getWidth())];\n\t\t}\n\n\t\tconst startPartData = this._characterMapping.charOffsetToPartData(startColumn - 1);\n\t\tconst startPartIndex = CharacterMapping.getPartIndex(startPartData);\n\t\tconst startCharOffsetInPart = CharacterMapping.getCharIndex(startPartData);\n\n\t\tconst endPartData = this._characterMapping.charOffsetToPartData(endColumn - 1);\n\t\tconst endPartIndex = CharacterMapping.getPartIndex(endPartData);\n\t\tconst endCharOffsetInPart = CharacterMapping.getCharIndex(endPartData);\n\n\t\treturn RangeUtil.readHorizontalRanges(this._getReadingTarget(), startPartIndex, startCharOffsetInPart, endPartIndex, endCharOffsetInPart, context.clientRectDeltaLeft, context.endNode);\n\t}\n\n\t/**\n\t * Returns the column for the text found at a specific offset inside a rendered dom node\n\t */\n\tpublic getColumnOfNodeOffset(lineNumber: number, spanNode: HTMLElement, offset: number): number {\n\t\tconst spanNodeTextContentLength = spanNode.textContent!.length;\n\n\t\tlet spanIndex = -1;\n\t\twhile (spanNode) {\n\t\t\tspanNode = <HTMLElement>spanNode.previousSibling;\n\t\t\tspanIndex++;\n\t\t}\n\n\t\tconst charOffset = this._characterMapping.partDataToCharOffset(spanIndex, spanNodeTextContentLength, offset);\n\t\treturn charOffset + 1;\n\t}\n}\n\nclass WebKitRenderedViewLine extends RenderedViewLine {\n\tprotected _readVisibleRangesForRange(startColumn: number, endColumn: number, context: DomReadingContext): HorizontalRange[] | null {\n\t\tconst output = super._readVisibleRangesForRange(startColumn, endColumn, context);\n\n\t\tif (!output || output.length === 0 || startColumn === endColumn || (startColumn === 1 && endColumn === this._characterMapping.length)) {\n\t\t\treturn output;\n\t\t}\n\n\t\t// WebKit is buggy and returns an expanded range (to contain words in some cases)\n\t\t// The last client rect is enlarged (I think)\n\t\tif (!this.input.containsRTL) {\n\t\t\t// This is an attempt to patch things up\n\t\t\t// Find position of last column\n\t\t\tconst endPixelOffset = this._readPixelOffset(endColumn, context);\n\t\t\tif (endPixelOffset !== -1) {\n\t\t\t\tconst lastRange = output[output.length - 1];\n\t\t\t\tif (lastRange.left < endPixelOffset) {\n\t\t\t\t\t// Trim down the width of the last visible range to not go after the last column's position\n\t\t\t\t\tlastRange.width = endPixelOffset - lastRange.left;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nconst createRenderedLine: (domNode: FastDomNode<HTMLElement> | null, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType) => RenderedViewLine = (function () {\n\tif (browser.isWebKit) {\n\t\treturn createWebKitRenderedLine;\n\t}\n\treturn createNormalRenderedLine;\n})();\n\nfunction createWebKitRenderedLine(domNode: FastDomNode<HTMLElement>, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType): RenderedViewLine {\n\treturn new WebKitRenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n\nfunction createNormalRenderedLine(domNode: FastDomNode<HTMLElement>, renderLineInput: RenderLineInput, characterMapping: CharacterMapping, containsRTL: boolean, containsForeignElements: ForeignElementType): RenderedViewLine {\n\treturn new RenderedViewLine(domNode, renderLineInput, characterMapping, containsRTL, containsForeignElements);\n}\n"]}]}