{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/workspaceActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/workspaceActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar nls = require(\"vs/nls\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar workspaceCommands_1 = require(\"vs/workbench/browser/actions/workspaceCommands\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar network_1 = require(\"vs/base/common/network\");\nvar OpenFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenFileAction, _super);\n    function OpenFileAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenFileAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFileAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n    };\n    OpenFileAction.ID = 'workbench.action.files.openFile';\n    OpenFileAction.LABEL = nls.localize('openFile', \"Open File...\");\n    OpenFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenFileAction);\n    return OpenFileAction;\n}(actions_1.Action));\nexports.OpenFileAction = OpenFileAction;\nvar OpenLocalFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenLocalFileAction, _super);\n    function OpenLocalFileAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenLocalFileAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFileAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [network_1.Schemas.file] });\n    };\n    OpenLocalFileAction.ID = 'workbench.action.files.openLocalFile';\n    OpenLocalFileAction.LABEL = nls.localize('openLocalFile', \"Open Local File...\");\n    OpenLocalFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenLocalFileAction);\n    return OpenLocalFileAction;\n}(actions_1.Action));\nexports.OpenLocalFileAction = OpenLocalFileAction;\nvar OpenFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenFolderAction, _super);\n    function OpenFolderAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenFolderAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n    };\n    OpenFolderAction.ID = 'workbench.action.files.openFolder';\n    OpenFolderAction.LABEL = nls.localize('openFolder', \"Open Folder...\");\n    OpenFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenFolderAction);\n    return OpenFolderAction;\n}(actions_1.Action));\nexports.OpenFolderAction = OpenFolderAction;\nvar OpenLocalFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenLocalFolderAction, _super);\n    function OpenLocalFolderAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenLocalFolderAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [network_1.Schemas.file] });\n    };\n    OpenLocalFolderAction.ID = 'workbench.action.files.openLocalFolder';\n    OpenLocalFolderAction.LABEL = nls.localize('openLocalFolder', \"Open Local Folder...\");\n    OpenLocalFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenLocalFolderAction);\n    return OpenLocalFolderAction;\n}(actions_1.Action));\nexports.OpenLocalFolderAction = OpenLocalFolderAction;\nvar OpenFileFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenFileFolderAction, _super);\n    function OpenFileFolderAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenFileFolderAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFileFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n    };\n    OpenFileFolderAction.ID = 'workbench.action.files.openFileFolder';\n    OpenFileFolderAction.LABEL = nls.localize('openFileFolder', \"Open...\");\n    OpenFileFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenFileFolderAction);\n    return OpenFileFolderAction;\n}(actions_1.Action));\nexports.OpenFileFolderAction = OpenFileFolderAction;\nvar OpenLocalFileFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenLocalFileFolderAction, _super);\n    function OpenLocalFileFolderAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenLocalFileFolderAction.prototype.run = function (event, data) {\n        return this.dialogService.pickFileFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [network_1.Schemas.file] });\n    };\n    OpenLocalFileFolderAction.ID = 'workbench.action.files.openLocalFileFolder';\n    OpenLocalFileFolderAction.LABEL = nls.localize('openLocalFileFolder', \"Open Local...\");\n    OpenLocalFileFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenLocalFileFolderAction);\n    return OpenLocalFileFolderAction;\n}(actions_1.Action));\nexports.OpenLocalFileFolderAction = OpenLocalFileFolderAction;\nvar AddRootFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AddRootFolderAction, _super);\n    function AddRootFolderAction(id, label, commandService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    AddRootFolderAction.prototype.run = function () {\n        return this.commandService.executeCommand(workspaceCommands_1.ADD_ROOT_FOLDER_COMMAND_ID);\n    };\n    AddRootFolderAction.ID = 'workbench.action.addRootFolder';\n    AddRootFolderAction.LABEL = workspaceCommands_1.ADD_ROOT_FOLDER_LABEL;\n    AddRootFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], AddRootFolderAction);\n    return AddRootFolderAction;\n}(actions_1.Action));\nexports.AddRootFolderAction = AddRootFolderAction;\nvar GlobalRemoveRootFolderAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalRemoveRootFolderAction, _super);\n    function GlobalRemoveRootFolderAction(id, label, workspaceEditingService, contextService, commandService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.workspaceEditingService = workspaceEditingService;\n        _this.contextService = contextService;\n        _this.commandService = commandService;\n        return _this;\n    }\n    GlobalRemoveRootFolderAction.prototype.run = function () {\n        var _this = this;\n        var state = this.contextService.getWorkbenchState();\n        // Workspace / Folder\n        if (state === workspace_1.WorkbenchState.WORKSPACE || state === workspace_1.WorkbenchState.FOLDER) {\n            return this.commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID).then(function (folder) {\n                if (folder) {\n                    return _this.workspaceEditingService.removeFolders([folder.uri]).then(function () { return true; });\n                }\n                return true;\n            });\n        }\n        return Promise.resolve(true);\n    };\n    GlobalRemoveRootFolderAction.ID = 'workbench.action.removeRootFolder';\n    GlobalRemoveRootFolderAction.LABEL = nls.localize('globalRemoveFolderFromWorkspace', \"Remove Folder from Workspace...\");\n    GlobalRemoveRootFolderAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspaceEditing_1.IWorkspaceEditingService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, commands_1.ICommandService)\n    ], GlobalRemoveRootFolderAction);\n    return GlobalRemoveRootFolderAction;\n}(actions_1.Action));\nexports.GlobalRemoveRootFolderAction = GlobalRemoveRootFolderAction;\nvar SaveWorkspaceAsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SaveWorkspaceAsAction, _super);\n    function SaveWorkspaceAsAction(id, label, contextService, workspaceEditingService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.contextService = contextService;\n        _this.workspaceEditingService = workspaceEditingService;\n        return _this;\n    }\n    SaveWorkspaceAsAction.prototype.run = function () {\n        var _this = this;\n        return this.workspaceEditingService.pickNewWorkspacePath().then(function (configPathUri) {\n            if (configPathUri) {\n                switch (_this.contextService.getWorkbenchState()) {\n                    case workspace_1.WorkbenchState.EMPTY:\n                    case workspace_1.WorkbenchState.FOLDER:\n                        var folders = _this.contextService.getWorkspace().folders.map(function (folder) { return ({ uri: folder.uri }); });\n                        return _this.workspaceEditingService.createAndEnterWorkspace(folders, configPathUri);\n                    case workspace_1.WorkbenchState.WORKSPACE:\n                        return _this.workspaceEditingService.saveAndEnterWorkspace(configPathUri);\n                }\n            }\n        });\n    };\n    SaveWorkspaceAsAction.ID = 'workbench.action.saveWorkspaceAs';\n    SaveWorkspaceAsAction.LABEL = nls.localize('saveWorkspaceAsAction', \"Save Workspace As...\");\n    SaveWorkspaceAsAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, workspaceEditing_1.IWorkspaceEditingService)\n    ], SaveWorkspaceAsAction);\n    return SaveWorkspaceAsAction;\n}(actions_1.Action));\nexports.SaveWorkspaceAsAction = SaveWorkspaceAsAction;\nvar OpenWorkspaceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenWorkspaceAction, _super);\n    function OpenWorkspaceAction(id, label, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    OpenWorkspaceAction.prototype.run = function (event, data) {\n        return this.dialogService.pickWorkspaceAndOpen({ telemetryExtraData: data });\n    };\n    OpenWorkspaceAction.ID = 'workbench.action.openWorkspace';\n    OpenWorkspaceAction.LABEL = nls.localize('openWorkspaceAction', \"Open Workspace...\");\n    OpenWorkspaceAction = tslib_1.__decorate([\n        tslib_1.__param(2, dialogs_1.IFileDialogService)\n    ], OpenWorkspaceAction);\n    return OpenWorkspaceAction;\n}(actions_1.Action));\nexports.OpenWorkspaceAction = OpenWorkspaceAction;\nvar CloseWorkspaceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CloseWorkspaceAction, _super);\n    function CloseWorkspaceAction(id, label, contextService, notificationService, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.contextService = contextService;\n        _this.notificationService = notificationService;\n        _this.windowService = windowService;\n        return _this;\n    }\n    CloseWorkspaceAction.prototype.run = function () {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            this.notificationService.info(nls.localize('noWorkspaceOpened', \"There is currently no workspace opened in this instance to close.\"));\n            return Promise.resolve(undefined);\n        }\n        return this.windowService.closeWorkspace();\n    };\n    CloseWorkspaceAction.ID = 'workbench.action.closeFolder';\n    CloseWorkspaceAction.LABEL = nls.localize('closeWorkspace', \"Close Workspace\");\n    CloseWorkspaceAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, notification_1.INotificationService),\n        tslib_1.__param(4, windows_1.IWindowService)\n    ], CloseWorkspaceAction);\n    return CloseWorkspaceAction;\n}(actions_1.Action));\nexports.CloseWorkspaceAction = CloseWorkspaceAction;\nvar OpenWorkspaceConfigFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenWorkspaceConfigFileAction, _super);\n    function OpenWorkspaceConfigFileAction(id, label, workspaceContextService, editorService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.workspaceContextService = workspaceContextService;\n        _this.editorService = editorService;\n        _this.enabled = !!_this.workspaceContextService.getWorkspace().configuration;\n        return _this;\n    }\n    OpenWorkspaceConfigFileAction.prototype.run = function () {\n        var configuration = this.workspaceContextService.getWorkspace().configuration;\n        if (configuration) {\n            return this.editorService.openEditor({ resource: configuration });\n        }\n        return Promise.resolve();\n    };\n    OpenWorkspaceConfigFileAction.ID = 'workbench.action.openWorkspaceConfigFile';\n    OpenWorkspaceConfigFileAction.LABEL = nls.localize('openWorkspaceConfigFile', \"Open Workspace Configuration File\");\n    OpenWorkspaceConfigFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, editorService_1.IEditorService)\n    ], OpenWorkspaceConfigFileAction);\n    return OpenWorkspaceConfigFileAction;\n}(actions_1.Action));\nexports.OpenWorkspaceConfigFileAction = OpenWorkspaceConfigFileAction;\nvar DuplicateWorkspaceInNewWindowAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DuplicateWorkspaceInNewWindowAction, _super);\n    function DuplicateWorkspaceInNewWindowAction(id, label, workspaceContextService, workspaceEditingService, windowService, workspacesService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.workspaceContextService = workspaceContextService;\n        _this.workspaceEditingService = workspaceEditingService;\n        _this.windowService = windowService;\n        _this.workspacesService = workspacesService;\n        return _this;\n    }\n    DuplicateWorkspaceInNewWindowAction.prototype.run = function () {\n        var _this = this;\n        var folders = this.workspaceContextService.getWorkspace().folders;\n        var remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n        return this.workspacesService.createUntitledWorkspace(folders, remoteAuthority).then(function (newWorkspace) {\n            return _this.workspaceEditingService.copyWorkspaceSettings(newWorkspace).then(function () {\n                return _this.windowService.openWindow([{ uri: newWorkspace.configPath, typeHint: 'file' }], { forceNewWindow: true });\n            });\n        });\n    };\n    DuplicateWorkspaceInNewWindowAction.ID = 'workbench.action.duplicateWorkspaceInNewWindow';\n    DuplicateWorkspaceInNewWindowAction.LABEL = nls.localize('duplicateWorkspaceInNewWindow', \"Duplicate Workspace in New Window\");\n    DuplicateWorkspaceInNewWindowAction = tslib_1.__decorate([\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, workspaceEditing_1.IWorkspaceEditingService),\n        tslib_1.__param(4, windows_1.IWindowService),\n        tslib_1.__param(5, workspaces_1.IWorkspacesService)\n    ], DuplicateWorkspaceInNewWindowAction);\n    return DuplicateWorkspaceInNewWindowAction;\n}(actions_1.Action));\nexports.DuplicateWorkspaceInNewWindowAction = DuplicateWorkspaceInNewWindowAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/workspaceActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions/workspaceActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport * as nls from 'vs/nls';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ADD_ROOT_FOLDER_COMMAND_ID, ADD_ROOT_FOLDER_LABEL, PICK_WORKSPACE_FOLDER_COMMAND_ID } from 'vs/workbench/browser/actions/workspaceCommands';\nimport { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class OpenFileAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openFile';\n\tstatic LABEL = nls.localize('openFile', \"Open File...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFileAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n\t}\n}\n\nexport class OpenLocalFileAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openLocalFile';\n\tstatic LABEL = nls.localize('openLocalFile', \"Open Local File...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFileAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [Schemas.file] });\n\t}\n}\n\nexport class OpenFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openFolder';\n\tstatic LABEL = nls.localize('openFolder', \"Open Folder...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n\t}\n}\n\nexport class OpenLocalFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openLocalFolder';\n\tstatic LABEL = nls.localize('openLocalFolder', \"Open Local Folder...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [Schemas.file] });\n\t}\n}\n\n\nexport class OpenFileFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openFileFolder';\n\tstatic LABEL = nls.localize('openFileFolder', \"Open...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFileFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data });\n\t}\n}\n\nexport class OpenLocalFileFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.files.openLocalFileFolder';\n\tstatic LABEL = nls.localize('openLocalFileFolder', \"Open Local...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickFileFolderAndOpen({ forceNewWindow: false, telemetryExtraData: data, availableFileSystems: [Schemas.file] });\n\t}\n}\n\nexport class AddRootFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.addRootFolder';\n\tstatic LABEL = ADD_ROOT_FOLDER_LABEL;\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn this.commandService.executeCommand(ADD_ROOT_FOLDER_COMMAND_ID);\n\t}\n}\n\nexport class GlobalRemoveRootFolderAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.removeRootFolder';\n\tstatic LABEL = nls.localize('globalRemoveFolderFromWorkspace', \"Remove Folder from Workspace...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceEditingService private readonly workspaceEditingService: IWorkspaceEditingService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst state = this.contextService.getWorkbenchState();\n\n\t\t// Workspace / Folder\n\t\tif (state === WorkbenchState.WORKSPACE || state === WorkbenchState.FOLDER) {\n\t\t\treturn this.commandService.executeCommand<IWorkspaceFolder>(PICK_WORKSPACE_FOLDER_COMMAND_ID).then(folder => {\n\t\t\t\tif (folder) {\n\t\t\t\t\treturn this.workspaceEditingService.removeFolders([folder.uri]).then(() => true);\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class SaveWorkspaceAsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.saveWorkspaceAs';\n\tstatic LABEL = nls.localize('saveWorkspaceAsAction', \"Save Workspace As...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IWorkspaceEditingService private readonly workspaceEditingService: IWorkspaceEditingService\n\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\treturn this.workspaceEditingService.pickNewWorkspacePath().then((configPathUri): Promise<void> | void => {\n\t\t\tif (configPathUri) {\n\t\t\t\tswitch (this.contextService.getWorkbenchState()) {\n\t\t\t\t\tcase WorkbenchState.EMPTY:\n\t\t\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\t\t\tconst folders = this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri }));\n\t\t\t\t\t\treturn this.workspaceEditingService.createAndEnterWorkspace(folders, configPathUri);\n\n\t\t\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\t\t\treturn this.workspaceEditingService.saveAndEnterWorkspace(configPathUri);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class OpenWorkspaceAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openWorkspace';\n\tstatic LABEL = nls.localize('openWorkspaceAction', \"Open Workspace...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IFileDialogService private readonly dialogService: IFileDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(event?: any, data?: ITelemetryData): Promise<any> {\n\t\treturn this.dialogService.pickWorkspaceAndOpen({ telemetryExtraData: data });\n\t}\n}\n\nexport class CloseWorkspaceAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.closeFolder';\n\tstatic LABEL = nls.localize('closeWorkspace', \"Close Workspace\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\tthis.notificationService.info(nls.localize('noWorkspaceOpened', \"There is currently no workspace opened in this instance to close.\"));\n\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this.windowService.closeWorkspace();\n\t}\n}\n\nexport class OpenWorkspaceConfigFileAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.openWorkspaceConfigFile';\n\tstatic readonly LABEL = nls.localize('openWorkspaceConfigFile', \"Open Workspace Configuration File\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.enabled = !!this.workspaceContextService.getWorkspace().configuration;\n\t}\n\n\trun(): Promise<any> {\n\t\tconst configuration = this.workspaceContextService.getWorkspace().configuration;\n\t\tif (configuration) {\n\t\t\treturn this.editorService.openEditor({ resource: configuration });\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class DuplicateWorkspaceInNewWindowAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.duplicateWorkspaceInNewWindow';\n\tstatic readonly LABEL = nls.localize('duplicateWorkspaceInNewWindow', \"Duplicate Workspace in New Window\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkspaceEditingService private readonly workspaceEditingService: IWorkspaceEditingService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IWorkspacesService private readonly workspacesService: IWorkspacesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst folders = this.workspaceContextService.getWorkspace().folders;\n\t\tconst remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n\n\t\treturn this.workspacesService.createUntitledWorkspace(folders, remoteAuthority).then(newWorkspace => {\n\t\t\treturn this.workspaceEditingService.copyWorkspaceSettings(newWorkspace).then(() => {\n\t\t\t\treturn this.windowService.openWindow([{ uri: newWorkspace.configPath, typeHint: 'file' }], { forceNewWindow: true });\n\t\t\t});\n\t\t});\n\t}\n}\n"]}]}