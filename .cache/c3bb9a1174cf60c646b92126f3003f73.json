{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/electron-browser/mainThreadWebview.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/electron-browser/mainThreadWebview.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map = require(\"vs/base/common/map\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar nls_1 = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar editor_1 = require(\"vs/workbench/api/common/shared/editor\");\nvar codeInset_contribution_1 = require(\"vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution\");\nvar webviewEditor_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewEditor\");\nvar webviewEditorInput_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewEditorInput\");\nvar webviewEditorService_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewEditorService\");\nvar webviewElement_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewElement\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar extHostCustomers_1 = require(\"../common/extHostCustomers\");\nvar MainThreadWebviews = /** @class */ (function (_super) {\n    tslib_1.__extends(MainThreadWebviews, _super);\n    function MainThreadWebviews(context, lifecycleService, extensionService, _editorGroupService, _editorService, _webviewService, _openerService, _telemetryService, _instantiationService, _codeEditorService, _layoutService) {\n        var _this = _super.call(this) || this;\n        _this._editorGroupService = _editorGroupService;\n        _this._editorService = _editorService;\n        _this._webviewService = _webviewService;\n        _this._openerService = _openerService;\n        _this._telemetryService = _telemetryService;\n        _this._instantiationService = _instantiationService;\n        _this._codeEditorService = _codeEditorService;\n        _this._layoutService = _layoutService;\n        _this._webviews = new Map();\n        _this._webviewsElements = new Map();\n        _this._revivers = new Map();\n        _this._activeWebview = undefined;\n        _this._proxy = context.getProxy(extHost_protocol_1.ExtHostContext.ExtHostWebviews);\n        _editorService.onDidActiveEditorChange(_this.onActiveEditorChanged, _this, _this._toDispose);\n        _editorService.onDidVisibleEditorsChange(_this.onVisibleEditorsChanged, _this, _this._toDispose);\n        // This reviver's only job is to activate webview extensions\n        // This should trigger the real reviver to be registered from the extension host side.\n        _this._toDispose.push(_webviewService.registerReviver({\n            canRevive: function (webview) {\n                var viewType = webview.state.viewType;\n                if (viewType) {\n                    extensionService.activateByEvent(\"onWebviewPanel:\" + viewType);\n                }\n                return false;\n            },\n            reviveWebview: function () { throw new Error('not implemented'); }\n        }));\n        lifecycleService.onBeforeShutdown(function (e) {\n            e.veto(_this._onBeforeShutdown());\n        }, _this, _this._toDispose);\n        return _this;\n    }\n    MainThreadWebviews_1 = MainThreadWebviews;\n    MainThreadWebviews.prototype.$createWebviewPanel = function (handle, viewType, title, showOptions, options, extensionId, extensionLocation) {\n        var mainThreadShowOptions = Object.create(null);\n        if (showOptions) {\n            mainThreadShowOptions.preserveFocus = !!showOptions.preserveFocus;\n            mainThreadShowOptions.group = editor_1.viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn);\n        }\n        var webview = this._webviewService.createWebview(this.getInternalWebviewId(viewType), title, mainThreadShowOptions, reviveWebviewOptions(options), {\n            location: uri_1.URI.revive(extensionLocation),\n            id: extensionId\n        }, this.createWebviewEventDelegate(handle));\n        webview.state = {\n            viewType: viewType,\n            state: undefined\n        };\n        this._webviews.set(handle, webview);\n        this._activeWebview = handle;\n        /* __GDPR__\n            \"webviews:createWebviewPanel\" : {\n                \"extensionId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this._telemetryService.publicLog('webviews:createWebviewPanel', { extensionId: extensionId.value });\n    };\n    MainThreadWebviews.prototype.$createWebviewCodeInset = function (handle, symbolId, options, extensionId, extensionLocation) {\n        // todo@joh main is for the lack of a code-inset service\n        // which we maybe wanna have... this is how it now works\n        // 1) create webview element\n        // 2) find the code inset controller that request it\n        // 3) let the controller adopt the widget\n        // 4) continue to forward messages to the webview\n        var webview = this._instantiationService.createInstance(webviewElement_1.WebviewElement, this._layoutService.getContainer(layoutService_1.Parts.EDITOR_PART), {\n            extension: {\n                location: uri_1.URI.revive(extensionLocation),\n                id: extensionId\n            },\n            enableFindWidget: false,\n        }, {\n            allowScripts: options.enableScripts,\n        });\n        var found = false;\n        for (var _i = 0, _a = this._codeEditorService.listCodeEditors(); _i < _a.length; _i++) {\n            var editor = _a[_i];\n            var ctrl = codeInset_contribution_1.CodeInsetController.get(editor);\n            if (ctrl && ctrl.acceptWebview(symbolId, webview)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            webview.dispose();\n            return;\n        }\n        // this will leak... the adopted webview will be disposed by the\n        // code inset controller. we might need a dispose-event here so that\n        // we can clean up things.\n        this._webviewsElements.set(handle, webview);\n    };\n    MainThreadWebviews.prototype.$disposeWebview = function (handle) {\n        var webview = this.getWebview(handle);\n        webview.dispose();\n    };\n    MainThreadWebviews.prototype.$setTitle = function (handle, value) {\n        var webview = this.getWebview(handle);\n        webview.setName(value);\n    };\n    MainThreadWebviews.prototype.$setIconPath = function (handle, value) {\n        var webview = this.getWebview(handle);\n        webview.iconPath = reviveWebviewIcon(value);\n    };\n    MainThreadWebviews.prototype.$setHtml = function (handle, value) {\n        if (typeof handle === 'number') {\n            this.getWebviewElement(handle).contents = value;\n        }\n        else {\n            var webview = this.getWebview(handle);\n            webview.html = value;\n        }\n    };\n    MainThreadWebviews.prototype.$setOptions = function (handle, options) {\n        if (typeof handle === 'number') {\n            this.getWebviewElement(handle).options = reviveWebviewOptions(options /*todo@mat */);\n        }\n        else {\n            var webview = this.getWebview(handle);\n            webview.setOptions(reviveWebviewOptions(options /*todo@mat */));\n        }\n    };\n    MainThreadWebviews.prototype.$reveal = function (handle, showOptions) {\n        var webview = this.getWebview(handle);\n        if (webview.isDisposed()) {\n            return;\n        }\n        var targetGroup = this._editorGroupService.getGroup(editor_1.viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn)) || this._editorGroupService.getGroup(webview.group || 0);\n        if (targetGroup) {\n            this._webviewService.revealWebview(webview, targetGroup, !!showOptions.preserveFocus);\n        }\n    };\n    MainThreadWebviews.prototype.$postMessage = function (handle, message) {\n        if (typeof handle === 'number') {\n            this.getWebviewElement(handle).sendMessage(message);\n            return Promise.resolve(true);\n        }\n        else {\n            var webview_1 = this.getWebview(handle);\n            var editors = this._editorService.visibleControls\n                .filter(function (e) { return e instanceof webviewEditor_1.WebviewEditor; })\n                .map(function (e) { return e; })\n                .filter(function (e) { return e.input.matches(webview_1); });\n            for (var _i = 0, editors_1 = editors; _i < editors_1.length; _i++) {\n                var editor = editors_1[_i];\n                editor.sendMessage(message);\n            }\n            return Promise.resolve(editors.length > 0);\n        }\n    };\n    MainThreadWebviews.prototype.$registerSerializer = function (viewType) {\n        var _this = this;\n        if (this._revivers.has(viewType)) {\n            throw new Error(\"Reviver for \" + viewType + \" already registered\");\n        }\n        this._revivers.set(viewType, this._webviewService.registerReviver({\n            canRevive: function (webview) {\n                return webview.state && webview.state.viewType === viewType;\n            },\n            reviveWebview: function (webview) { return tslib_1.__awaiter(_this, void 0, Promise, function () {\n                var viewType, handle, state, error_1;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            viewType = webview.state.viewType;\n                            handle = 'revival-' + MainThreadWebviews_1.revivalPool++;\n                            this._webviews.set(handle, webview);\n                            webview._events = this.createWebviewEventDelegate(handle);\n                            state = undefined;\n                            if (webview.state.state) {\n                                try {\n                                    state = JSON.parse(webview.state.state);\n                                }\n                                catch (_b) {\n                                    // noop\n                                }\n                            }\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, this._proxy.$deserializeWebviewPanel(handle, viewType, webview.getTitle(), state, editor_1.editorGroupToViewColumn(this._editorGroupService, webview.group || 0), webview.options)];\n                        case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                        case 3:\n                            error_1 = _a.sent();\n                            errors_1.onUnexpectedError(error_1);\n                            webview.html = MainThreadWebviews_1.getDeserializationFailedContents(viewType);\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); }\n        }));\n    };\n    MainThreadWebviews.prototype.$unregisterSerializer = function (viewType) {\n        var reviver = this._revivers.get(viewType);\n        if (!reviver) {\n            throw new Error(\"No reviver for \" + viewType + \" registered\");\n        }\n        reviver.dispose();\n        this._revivers.delete(viewType);\n    };\n    MainThreadWebviews.prototype.getInternalWebviewId = function (viewType) {\n        return \"mainThreadWebview-\" + viewType;\n    };\n    MainThreadWebviews.prototype._onBeforeShutdown = function () {\n        var _this = this;\n        this._webviews.forEach(function (webview) {\n            if (!webview.isDisposed() && webview.state && _this._revivers.has(webview.state.viewType)) {\n                webview.state.state = webview.webviewState;\n            }\n        });\n        return false; // Don't veto shutdown\n    };\n    MainThreadWebviews.prototype.createWebviewEventDelegate = function (handle) {\n        var _this = this;\n        return {\n            onDidClickLink: function (uri) { return _this.onDidClickLink(handle, uri); },\n            onMessage: function (message) { return _this._proxy.$onMessage(handle, message); },\n            onDispose: function () {\n                _this._proxy.$onDidDisposeWebviewPanel(handle).finally(function () {\n                    _this._webviews.delete(handle);\n                });\n            }\n        };\n    };\n    MainThreadWebviews.prototype.onActiveEditorChanged = function () {\n        var activeEditor = this._editorService.activeControl;\n        var newActiveWebview = undefined;\n        if (activeEditor && activeEditor.input instanceof webviewEditorInput_1.WebviewEditorInput) {\n            for (var _i = 0, _a = map.keys(this._webviews); _i < _a.length; _i++) {\n                var handle = _a[_i];\n                var input = this._webviews.get(handle);\n                if (input.matches(activeEditor.input)) {\n                    newActiveWebview = { input: input, handle: handle };\n                    break;\n                }\n            }\n        }\n        if (newActiveWebview && newActiveWebview.handle === this._activeWebview) {\n            // Webview itself unchanged but position may have changed\n            this._proxy.$onDidChangeWebviewPanelViewState(newActiveWebview.handle, {\n                active: true,\n                visible: true,\n                position: editor_1.editorGroupToViewColumn(this._editorGroupService, newActiveWebview.input.group || 0)\n            });\n            return;\n        }\n        // Broadcast view state update for currently active\n        if (typeof this._activeWebview !== 'undefined') {\n            var oldActiveWebview_1 = this._webviews.get(this._activeWebview);\n            if (oldActiveWebview_1) {\n                this._proxy.$onDidChangeWebviewPanelViewState(this._activeWebview, {\n                    active: false,\n                    visible: this._editorService.visibleControls.some(function (editor) { return !!editor.input && editor.input.matches(oldActiveWebview_1); }),\n                    position: editor_1.editorGroupToViewColumn(this._editorGroupService, oldActiveWebview_1.group || 0),\n                });\n            }\n        }\n        // Then for newly active\n        if (newActiveWebview) {\n            this._proxy.$onDidChangeWebviewPanelViewState(newActiveWebview.handle, {\n                active: true,\n                visible: true,\n                position: editor_1.editorGroupToViewColumn(this._editorGroupService, activeEditor ? activeEditor.group : editorService_1.ACTIVE_GROUP),\n            });\n            this._activeWebview = newActiveWebview.handle;\n        }\n        else {\n            this._activeWebview = undefined;\n        }\n    };\n    MainThreadWebviews.prototype.onVisibleEditorsChanged = function () {\n        var _this = this;\n        this._webviews.forEach(function (input, handle) {\n            for (var _i = 0, _a = _this._editorService.visibleControls; _i < _a.length; _i++) {\n                var workbenchEditor = _a[_i];\n                if (workbenchEditor.input && workbenchEditor.input.matches(input)) {\n                    var editorPosition = editor_1.editorGroupToViewColumn(_this._editorGroupService, workbenchEditor.group);\n                    input.updateGroup(workbenchEditor.group.id);\n                    _this._proxy.$onDidChangeWebviewPanelViewState(handle, {\n                        active: handle === _this._activeWebview,\n                        visible: true,\n                        position: editorPosition\n                    });\n                    break;\n                }\n            }\n        });\n    };\n    MainThreadWebviews.prototype.onDidClickLink = function (handle, link) {\n        if (!link) {\n            return;\n        }\n        var webview = this.getWebview(handle);\n        var enableCommandUris = webview.options.enableCommandUris;\n        if (MainThreadWebviews_1.standardSupportedLinkSchemes.indexOf(link.scheme) >= 0 || enableCommandUris && link.scheme === 'command') {\n            this._openerService.open(link);\n        }\n    };\n    MainThreadWebviews.prototype.getWebview = function (handle) {\n        var webview = this._webviews.get(handle);\n        if (!webview) {\n            throw new Error('Unknown webview handle:' + handle);\n        }\n        return webview;\n    };\n    MainThreadWebviews.prototype.getWebviewElement = function (handle) {\n        var webview = this._webviewsElements.get(handle);\n        if (!webview) {\n            throw new Error('Unknown webview handle:' + handle);\n        }\n        return webview;\n    };\n    MainThreadWebviews.getDeserializationFailedContents = function (viewType) {\n        return \"<!DOCTYPE html>\\n\\t\\t<html>\\n\\t\\t\\t<head>\\n\\t\\t\\t\\t<base href=\\\"https://code.visualstudio.com/raw/\\\">\\n\\t\\t\\t\\t<meta http-equiv=\\\"Content-type\\\" content=\\\"text/html;charset=UTF-8\\\">\\n\\t\\t\\t\\t<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource: https: 'unsafe-inline'; child-src 'none'; frame-src 'none';\\\">\\n\\t\\t\\t</head>\\n\\t\\t\\t<body>\" + nls_1.localize('errorMessage', \"An error occurred while restoring view:{0}\", viewType) + \"</body>\\n\\t\\t</html>\";\n    };\n    var MainThreadWebviews_1;\n    MainThreadWebviews.standardSupportedLinkSchemes = ['http', 'https', 'mailto'];\n    MainThreadWebviews.revivalPool = 0;\n    MainThreadWebviews = MainThreadWebviews_1 = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadWebviews),\n        tslib_1.__param(1, lifecycle_2.ILifecycleService),\n        tslib_1.__param(2, extensions_1.IExtensionService),\n        tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, webviewEditorService_1.IWebviewEditorService),\n        tslib_1.__param(6, opener_1.IOpenerService),\n        tslib_1.__param(7, telemetry_1.ITelemetryService),\n        tslib_1.__param(8, instantiation_1.IInstantiationService),\n        tslib_1.__param(9, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(10, layoutService_1.IWorkbenchLayoutService)\n    ], MainThreadWebviews);\n    return MainThreadWebviews;\n}(lifecycle_1.Disposable));\nexports.MainThreadWebviews = MainThreadWebviews;\nfunction reviveWebviewOptions(options) {\n    return tslib_1.__assign({}, options, { localResourceRoots: Array.isArray(options.localResourceRoots) ? options.localResourceRoots.map(uri_1.URI.revive) : undefined });\n}\nfunction reviveWebviewIcon(value) {\n    if (!value) {\n        return undefined;\n    }\n    return {\n        light: uri_1.URI.revive(value.light),\n        dark: uri_1.URI.revive(value.dark)\n    };\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/electron-browser/mainThreadWebview.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/electron-browser/mainThreadWebview.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport * as map from 'vs/base/common/map';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { localize } from 'vs/nls';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ExtHostContext, ExtHostWebviewsShape, IExtHostContext, MainContext, MainThreadWebviewsShape, WebviewInsetHandle, WebviewPanelHandle, WebviewPanelShowOptions } from 'vs/workbench/api/common/extHost.protocol';\nimport { editorGroupToViewColumn, EditorViewColumn, viewColumnToEditorGroup } from 'vs/workbench/api/common/shared/editor';\nimport { CodeInsetController } from 'vs/workbench/contrib/codeinset/electron-browser/codeInset.contribution';\nimport { WebviewEditor } from 'vs/workbench/contrib/webview/electron-browser/webviewEditor';\nimport { WebviewEditorInput } from 'vs/workbench/contrib/webview/electron-browser/webviewEditorInput';\nimport { ICreateWebViewShowOptions, IWebviewEditorService, WebviewInputOptions } from 'vs/workbench/contrib/webview/electron-browser/webviewEditorService';\nimport { WebviewElement } from 'vs/workbench/contrib/webview/electron-browser/webviewElement';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP, IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { extHostNamedCustomer } from '../common/extHostCustomers';\nimport { IWebviewOptions } from 'vs/editor/common/modes';\n\n@extHostNamedCustomer(MainContext.MainThreadWebviews)\nexport class MainThreadWebviews extends Disposable implements MainThreadWebviewsShape {\n\n\tprivate static readonly standardSupportedLinkSchemes = ['http', 'https', 'mailto'];\n\n\tprivate static revivalPool = 0;\n\n\n\tprivate readonly _proxy: ExtHostWebviewsShape;\n\tprivate readonly _webviews = new Map<WebviewPanelHandle, WebviewEditorInput>();\n\tprivate readonly _webviewsElements = new Map<WebviewInsetHandle, WebviewElement>();\n\tprivate readonly _revivers = new Map<string, IDisposable>();\n\n\tprivate _activeWebview: WebviewPanelHandle | undefined = undefined;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IWebviewEditorService private readonly _webviewService: IWebviewEditorService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IWorkbenchLayoutService private readonly _layoutService: IWorkbenchLayoutService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostWebviews);\n\t\t_editorService.onDidActiveEditorChange(this.onActiveEditorChanged, this, this._toDispose);\n\t\t_editorService.onDidVisibleEditorsChange(this.onVisibleEditorsChanged, this, this._toDispose);\n\n\t\t// This reviver's only job is to activate webview extensions\n\t\t// This should trigger the real reviver to be registered from the extension host side.\n\t\tthis._toDispose.push(_webviewService.registerReviver({\n\t\t\tcanRevive: (webview) => {\n\t\t\t\tconst viewType = webview.state.viewType;\n\t\t\t\tif (viewType) {\n\t\t\t\t\textensionService.activateByEvent(`onWebviewPanel:${viewType}`);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\treviveWebview: () => { throw new Error('not implemented'); }\n\t\t}));\n\n\t\tlifecycleService.onBeforeShutdown(e => {\n\t\t\te.veto(this._onBeforeShutdown());\n\t\t}, this, this._toDispose);\n\t}\n\n\tpublic $createWebviewPanel(\n\t\thandle: WebviewPanelHandle,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: { viewColumn?: EditorViewColumn, preserveFocus?: boolean },\n\t\toptions: WebviewInputOptions,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionLocation: UriComponents\n\t): void {\n\t\tconst mainThreadShowOptions: ICreateWebViewShowOptions = Object.create(null);\n\t\tif (showOptions) {\n\t\t\tmainThreadShowOptions.preserveFocus = !!showOptions.preserveFocus;\n\t\t\tmainThreadShowOptions.group = viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn);\n\t\t}\n\n\t\tconst webview = this._webviewService.createWebview(this.getInternalWebviewId(viewType), title, mainThreadShowOptions, reviveWebviewOptions(options), {\n\t\t\tlocation: URI.revive(extensionLocation),\n\t\t\tid: extensionId\n\t\t}, this.createWebviewEventDelegate(handle));\n\t\twebview.state = {\n\t\t\tviewType: viewType,\n\t\t\tstate: undefined\n\t\t};\n\n\t\tthis._webviews.set(handle, webview);\n\t\tthis._activeWebview = handle;\n\n\t\t/* __GDPR__\n\t\t\t\"webviews:createWebviewPanel\" : {\n\t\t\t\t\"extensionId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('webviews:createWebviewPanel', { extensionId: extensionId.value });\n\t}\n\n\t$createWebviewCodeInset(\n\t\thandle: WebviewInsetHandle,\n\t\tsymbolId: string,\n\t\toptions: IWebviewOptions,\n\t\textensionId: ExtensionIdentifier,\n\t\textensionLocation: UriComponents\n\t): void {\n\t\t// todo@joh main is for the lack of a code-inset service\n\t\t// which we maybe wanna have... this is how it now works\n\t\t// 1) create webview element\n\t\t// 2) find the code inset controller that request it\n\t\t// 3) let the controller adopt the widget\n\t\t// 4) continue to forward messages to the webview\n\t\tconst webview = this._instantiationService.createInstance(\n\t\t\tWebviewElement,\n\t\t\tthis._layoutService.getContainer(Parts.EDITOR_PART),\n\t\t\t{\n\t\t\t\textension: {\n\t\t\t\t\tlocation: URI.revive(extensionLocation),\n\t\t\t\t\tid: extensionId\n\t\t\t\t},\n\t\t\t\tenableFindWidget: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tallowScripts: options.enableScripts,\n\t\t\t}\n\t\t);\n\n\t\tlet found = false;\n\t\tfor (const editor of this._codeEditorService.listCodeEditors()) {\n\t\t\tconst ctrl = CodeInsetController.get(editor);\n\t\t\tif (ctrl && ctrl.acceptWebview(symbolId, webview)) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!found) {\n\t\t\twebview.dispose();\n\t\t\treturn;\n\t\t}\n\t\t// this will leak... the adopted webview will be disposed by the\n\t\t// code inset controller. we might need a dispose-event here so that\n\t\t// we can clean up things.\n\t\tthis._webviewsElements.set(handle, webview);\n\t}\n\n\tpublic $disposeWebview(handle: WebviewPanelHandle): void {\n\t\tconst webview = this.getWebview(handle);\n\t\twebview.dispose();\n\t}\n\n\tpublic $setTitle(handle: WebviewPanelHandle, value: string): void {\n\t\tconst webview = this.getWebview(handle);\n\t\twebview.setName(value);\n\t}\n\n\tpublic $setIconPath(handle: WebviewPanelHandle, value: { light: UriComponents, dark: UriComponents } | undefined): void {\n\t\tconst webview = this.getWebview(handle);\n\t\twebview.iconPath = reviveWebviewIcon(value);\n\t}\n\n\tpublic $setHtml(handle: WebviewPanelHandle | WebviewInsetHandle, value: string): void {\n\t\tif (typeof handle === 'number') {\n\t\t\tthis.getWebviewElement(handle).contents = value;\n\t\t} else {\n\t\t\tconst webview = this.getWebview(handle);\n\t\t\twebview.html = value;\n\t\t}\n\t}\n\n\tpublic $setOptions(handle: WebviewPanelHandle | WebviewInsetHandle, options: IWebviewOptions): void {\n\t\tif (typeof handle === 'number') {\n\t\t\tthis.getWebviewElement(handle).options = reviveWebviewOptions(options as any /*todo@mat */);\n\t\t} else {\n\t\t\tconst webview = this.getWebview(handle);\n\t\t\twebview.setOptions(reviveWebviewOptions(options as any /*todo@mat */));\n\t\t}\n\t}\n\n\tpublic $reveal(handle: WebviewPanelHandle, showOptions: WebviewPanelShowOptions): void {\n\t\tconst webview = this.getWebview(handle);\n\t\tif (webview.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst targetGroup = this._editorGroupService.getGroup(viewColumnToEditorGroup(this._editorGroupService, showOptions.viewColumn)) || this._editorGroupService.getGroup(webview.group || 0);\n\t\tif (targetGroup) {\n\t\t\tthis._webviewService.revealWebview(webview, targetGroup, !!showOptions.preserveFocus);\n\t\t}\n\t}\n\n\tpublic $postMessage(handle: WebviewPanelHandle | WebviewInsetHandle, message: any): Promise<boolean> {\n\t\tif (typeof handle === 'number') {\n\t\t\tthis.getWebviewElement(handle).sendMessage(message);\n\t\t\treturn Promise.resolve(true);\n\n\t\t} else {\n\t\t\tconst webview = this.getWebview(handle);\n\t\t\tconst editors = this._editorService.visibleControls\n\t\t\t\t.filter(e => e instanceof WebviewEditor)\n\t\t\t\t.map(e => e as WebviewEditor)\n\t\t\t\t.filter(e => e.input!.matches(webview));\n\n\t\t\tfor (const editor of editors) {\n\t\t\t\teditor.sendMessage(message);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(editors.length > 0);\n\t\t}\n\t}\n\n\tpublic $registerSerializer(viewType: string): void {\n\t\tif (this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`Reviver for ${viewType} already registered`);\n\t\t}\n\n\t\tthis._revivers.set(viewType, this._webviewService.registerReviver({\n\t\t\tcanRevive: (webview) => {\n\t\t\t\treturn webview.state && webview.state.viewType === viewType;\n\t\t\t},\n\t\t\treviveWebview: async (webview): Promise<void> => {\n\t\t\t\tconst viewType = webview.state.viewType;\n\t\t\t\tconst handle = 'revival-' + MainThreadWebviews.revivalPool++;\n\t\t\t\tthis._webviews.set(handle, webview);\n\t\t\t\twebview._events = this.createWebviewEventDelegate(handle);\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webview.state.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webview.state.state);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// noop\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$deserializeWebviewPanel(handle, viewType, webview.getTitle(), state, editorGroupToViewColumn(this._editorGroupService, webview.group || 0), webview.options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebview.html = MainThreadWebviews.getDeserializationFailedContents(viewType);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterSerializer(viewType: string): void {\n\t\tconst reviver = this._revivers.get(viewType);\n\t\tif (!reviver) {\n\t\t\tthrow new Error(`No reviver for ${viewType} registered`);\n\t\t}\n\n\t\treviver.dispose();\n\t\tthis._revivers.delete(viewType);\n\t}\n\n\tprivate getInternalWebviewId(viewType: string): string {\n\t\treturn `mainThreadWebview-${viewType}`;\n\t}\n\n\tprivate _onBeforeShutdown(): boolean {\n\t\tthis._webviews.forEach((webview) => {\n\t\t\tif (!webview.isDisposed() && webview.state && this._revivers.has(webview.state.viewType)) {\n\t\t\t\twebview.state.state = webview.webviewState;\n\t\t\t}\n\t\t});\n\t\treturn false; // Don't veto shutdown\n\t}\n\n\tprivate createWebviewEventDelegate(handle: WebviewPanelHandle) {\n\t\treturn {\n\t\t\tonDidClickLink: (uri: URI) => this.onDidClickLink(handle, uri),\n\t\t\tonMessage: (message: any) => this._proxy.$onMessage(handle, message),\n\t\t\tonDispose: () => {\n\t\t\t\tthis._proxy.$onDidDisposeWebviewPanel(handle).finally(() => {\n\t\t\t\t\tthis._webviews.delete(handle);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate onActiveEditorChanged() {\n\t\tconst activeEditor = this._editorService.activeControl;\n\t\tlet newActiveWebview: { input: WebviewEditorInput, handle: WebviewPanelHandle } | undefined = undefined;\n\t\tif (activeEditor && activeEditor.input instanceof WebviewEditorInput) {\n\t\t\tfor (const handle of map.keys(this._webviews)) {\n\t\t\t\tconst input = this._webviews.get(handle)!;\n\t\t\t\tif (input.matches(activeEditor.input)) {\n\t\t\t\t\tnewActiveWebview = { input, handle };\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (newActiveWebview && newActiveWebview.handle === this._activeWebview) {\n\t\t\t// Webview itself unchanged but position may have changed\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewState(newActiveWebview.handle, {\n\t\t\t\tactive: true,\n\t\t\t\tvisible: true,\n\t\t\t\tposition: editorGroupToViewColumn(this._editorGroupService, newActiveWebview.input.group || 0)\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\t// Broadcast view state update for currently active\n\t\tif (typeof this._activeWebview !== 'undefined') {\n\t\t\tconst oldActiveWebview = this._webviews.get(this._activeWebview);\n\t\t\tif (oldActiveWebview) {\n\t\t\t\tthis._proxy.$onDidChangeWebviewPanelViewState(this._activeWebview, {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisible: this._editorService.visibleControls.some(editor => !!editor.input && editor.input.matches(oldActiveWebview)),\n\t\t\t\t\tposition: editorGroupToViewColumn(this._editorGroupService, oldActiveWebview.group || 0),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Then for newly active\n\t\tif (newActiveWebview) {\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewState(newActiveWebview.handle, {\n\t\t\t\tactive: true,\n\t\t\t\tvisible: true,\n\t\t\t\tposition: editorGroupToViewColumn(this._editorGroupService, activeEditor ? activeEditor.group : ACTIVE_GROUP),\n\t\t\t});\n\t\t\tthis._activeWebview = newActiveWebview.handle;\n\t\t} else {\n\t\t\tthis._activeWebview = undefined;\n\t\t}\n\t}\n\n\tprivate onVisibleEditorsChanged(): void {\n\t\tthis._webviews.forEach((input, handle) => {\n\t\t\tfor (const workbenchEditor of this._editorService.visibleControls) {\n\t\t\t\tif (workbenchEditor.input && workbenchEditor.input.matches(input)) {\n\t\t\t\t\tconst editorPosition = editorGroupToViewColumn(this._editorGroupService, workbenchEditor.group!);\n\n\t\t\t\t\tinput.updateGroup(workbenchEditor.group!.id);\n\t\t\t\t\tthis._proxy.$onDidChangeWebviewPanelViewState(handle, {\n\t\t\t\t\t\tactive: handle === this._activeWebview,\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tposition: editorPosition\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate onDidClickLink(handle: WebviewPanelHandle, link: URI): void {\n\t\tif (!link) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst webview = this.getWebview(handle);\n\t\tconst enableCommandUris = webview.options.enableCommandUris;\n\t\tif (MainThreadWebviews.standardSupportedLinkSchemes.indexOf(link.scheme) >= 0 || enableCommandUris && link.scheme === 'command') {\n\t\t\tthis._openerService.open(link);\n\t\t}\n\t}\n\n\tprivate getWebview(handle: WebviewPanelHandle): WebviewEditorInput {\n\t\tconst webview = this._webviews.get(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error('Unknown webview handle:' + handle);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tprivate getWebviewElement(handle: number): WebviewElement {\n\t\tconst webview = this._webviewsElements.get(handle);\n\t\tif (!webview) {\n\t\t\tthrow new Error('Unknown webview handle:' + handle);\n\t\t}\n\t\treturn webview;\n\t}\n\n\tprivate static getDeserializationFailedContents(viewType: string) {\n\t\treturn `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<base href=\"https://code.visualstudio.com/raw/\">\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource: https: 'unsafe-inline'; child-src 'none'; frame-src 'none';\">\n\t\t\t</head>\n\t\t\t<body>${localize('errorMessage', \"An error occurred while restoring view:{0}\", viewType)}</body>\n\t\t</html>`;\n\t}\n}\n\nfunction reviveWebviewOptions(options: WebviewInputOptions): WebviewInputOptions {\n\treturn {\n\t\t...options,\n\t\tlocalResourceRoots: Array.isArray(options.localResourceRoots) ? options.localResourceRoots.map(URI.revive) : undefined,\n\t};\n}\n\nfunction reviveWebviewIcon(\n\tvalue: { light: UriComponents, dark: UriComponents } | undefined\n): { light: URI, dark: URI } | undefined {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tlight: URI.revive(value.light),\n\t\tdark: URI.revive(value.dark)\n\t};\n}\n"]}]}