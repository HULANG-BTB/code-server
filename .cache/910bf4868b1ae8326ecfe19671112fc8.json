{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/actions/windowActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/actions/windowActions.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/actions\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar nls = require(\"vs/nls\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar browser = require(\"vs/base/browser/browser\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar electron_1 = require(\"electron\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar getIconClasses_1 = require(\"vs/editor/common/services/getIconClasses\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar history_1 = require(\"vs/platform/history/common/history\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar CloseCurrentWindowAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CloseCurrentWindowAction, _super);\n    function CloseCurrentWindowAction(id, label, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowService = windowService;\n        return _this;\n    }\n    CloseCurrentWindowAction.prototype.run = function () {\n        this.windowService.closeWindow();\n        return Promise.resolve(true);\n    };\n    CloseCurrentWindowAction.ID = 'workbench.action.closeWindow';\n    CloseCurrentWindowAction.LABEL = nls.localize('closeWindow', \"Close Window\");\n    CloseCurrentWindowAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService)\n    ], CloseCurrentWindowAction);\n    return CloseCurrentWindowAction;\n}(actions_1.Action));\nexports.CloseCurrentWindowAction = CloseCurrentWindowAction;\nvar NewWindowAction = /** @class */ (function (_super) {\n    tslib_1.__extends(NewWindowAction, _super);\n    function NewWindowAction(id, label, windowsService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowsService = windowsService;\n        return _this;\n    }\n    NewWindowAction.prototype.run = function () {\n        return this.windowsService.openNewWindow();\n    };\n    NewWindowAction.ID = 'workbench.action.newWindow';\n    NewWindowAction.LABEL = nls.localize('newWindow', \"New Window\");\n    NewWindowAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowsService)\n    ], NewWindowAction);\n    return NewWindowAction;\n}(actions_1.Action));\nexports.NewWindowAction = NewWindowAction;\nvar ToggleFullScreenAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleFullScreenAction, _super);\n    function ToggleFullScreenAction(id, label, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowService = windowService;\n        return _this;\n    }\n    ToggleFullScreenAction.prototype.run = function () {\n        return this.windowService.toggleFullScreen();\n    };\n    ToggleFullScreenAction.ID = 'workbench.action.toggleFullScreen';\n    ToggleFullScreenAction.LABEL = nls.localize('toggleFullScreen', \"Toggle Full Screen\");\n    ToggleFullScreenAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService)\n    ], ToggleFullScreenAction);\n    return ToggleFullScreenAction;\n}(actions_1.Action));\nexports.ToggleFullScreenAction = ToggleFullScreenAction;\nvar BaseZoomAction = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseZoomAction, _super);\n    function BaseZoomAction(id, label, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    BaseZoomAction.prototype.setConfiguredZoomLevel = function (level) {\n        level = Math.round(level); // when reaching smallest zoom, prevent fractional zoom levels\n        var applyZoom = function () {\n            electron_1.webFrame.setZoomLevel(level);\n            browser.setZoomFactor(electron_1.webFrame.getZoomFactor());\n            // See https://github.com/Microsoft/vscode/issues/26151\n            // Cannot be trusted because the webFrame might take some time\n            // until it really applies the new zoom level\n            browser.setZoomLevel(electron_1.webFrame.getZoomLevel(), /*isTrusted*/ false);\n        };\n        this.configurationService.updateValue(BaseZoomAction.SETTING_KEY, level).then(function () { return applyZoom(); });\n    };\n    BaseZoomAction.SETTING_KEY = 'window.zoomLevel';\n    BaseZoomAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], BaseZoomAction);\n    return BaseZoomAction;\n}(actions_1.Action));\nexports.BaseZoomAction = BaseZoomAction;\nvar ZoomInAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ZoomInAction, _super);\n    function ZoomInAction(id, label, configurationService) {\n        return _super.call(this, id, label, configurationService) || this;\n    }\n    ZoomInAction.prototype.run = function () {\n        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() + 1);\n        return Promise.resolve(true);\n    };\n    ZoomInAction.ID = 'workbench.action.zoomIn';\n    ZoomInAction.LABEL = nls.localize('zoomIn', \"Zoom In\");\n    ZoomInAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ZoomInAction);\n    return ZoomInAction;\n}(BaseZoomAction));\nexports.ZoomInAction = ZoomInAction;\nvar ZoomOutAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ZoomOutAction, _super);\n    function ZoomOutAction(id, label, configurationService) {\n        return _super.call(this, id, label, configurationService) || this;\n    }\n    ZoomOutAction.prototype.run = function () {\n        this.setConfiguredZoomLevel(electron_1.webFrame.getZoomLevel() - 1);\n        return Promise.resolve(true);\n    };\n    ZoomOutAction.ID = 'workbench.action.zoomOut';\n    ZoomOutAction.LABEL = nls.localize('zoomOut', \"Zoom Out\");\n    ZoomOutAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ZoomOutAction);\n    return ZoomOutAction;\n}(BaseZoomAction));\nexports.ZoomOutAction = ZoomOutAction;\nvar ZoomResetAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ZoomResetAction, _super);\n    function ZoomResetAction(id, label, configurationService) {\n        return _super.call(this, id, label, configurationService) || this;\n    }\n    ZoomResetAction.prototype.run = function () {\n        this.setConfiguredZoomLevel(0);\n        return Promise.resolve(true);\n    };\n    ZoomResetAction.ID = 'workbench.action.zoomReset';\n    ZoomResetAction.LABEL = nls.localize('zoomReset', \"Reset Zoom\");\n    ZoomResetAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ZoomResetAction);\n    return ZoomResetAction;\n}(BaseZoomAction));\nexports.ZoomResetAction = ZoomResetAction;\nvar ReloadWindowAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReloadWindowAction, _super);\n    function ReloadWindowAction(id, label, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowService = windowService;\n        return _this;\n    }\n    ReloadWindowAction.prototype.run = function () {\n        return this.windowService.reloadWindow().then(function () { return true; });\n    };\n    ReloadWindowAction.ID = 'workbench.action.reloadWindow';\n    ReloadWindowAction.LABEL = nls.localize('reloadWindow', \"Reload Window\");\n    ReloadWindowAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService)\n    ], ReloadWindowAction);\n    return ReloadWindowAction;\n}(actions_1.Action));\nexports.ReloadWindowAction = ReloadWindowAction;\nvar ReloadWindowWithExtensionsDisabledAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReloadWindowWithExtensionsDisabledAction, _super);\n    function ReloadWindowWithExtensionsDisabledAction(id, label, windowService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowService = windowService;\n        return _this;\n    }\n    ReloadWindowWithExtensionsDisabledAction.prototype.run = function () {\n        return this.windowService.reloadWindow({ _: [], 'disable-extensions': true }).then(function () { return true; });\n    };\n    ReloadWindowWithExtensionsDisabledAction.ID = 'workbench.action.reloadWindowWithExtensionsDisabled';\n    ReloadWindowWithExtensionsDisabledAction.LABEL = nls.localize('reloadWindowWithExntesionsDisabled', \"Reload Window With Extensions Disabled\");\n    ReloadWindowWithExtensionsDisabledAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService)\n    ], ReloadWindowWithExtensionsDisabledAction);\n    return ReloadWindowWithExtensionsDisabledAction;\n}(actions_1.Action));\nexports.ReloadWindowWithExtensionsDisabledAction = ReloadWindowWithExtensionsDisabledAction;\nvar BaseSwitchWindow = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseSwitchWindow, _super);\n    function BaseSwitchWindow(id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowsService = windowsService;\n        _this.windowService = windowService;\n        _this.quickInputService = quickInputService;\n        _this.keybindingService = keybindingService;\n        _this.modelService = modelService;\n        _this.modeService = modeService;\n        _this.closeWindowAction = {\n            iconClass: 'action-remove-from-recently-opened',\n            tooltip: nls.localize('close', \"Close Window\")\n        };\n        return _this;\n    }\n    BaseSwitchWindow.prototype.run = function () {\n        var _this = this;\n        var currentWindowId = this.windowService.getCurrentWindowId();\n        return this.windowsService.getWindows().then(function (windows) {\n            var placeHolder = nls.localize('switchWindowPlaceHolder', \"Select a window to switch to\");\n            var picks = windows.map(function (win) {\n                var resource = win.filename ? uri_1.URI.file(win.filename) : win.folderUri ? win.folderUri : win.workspace ? win.workspace.configPath : undefined;\n                var fileKind = win.filename ? files_1.FileKind.FILE : win.workspace ? files_1.FileKind.ROOT_FOLDER : win.folderUri ? files_1.FileKind.FOLDER : files_1.FileKind.FILE;\n                return {\n                    payload: win.id,\n                    label: win.title,\n                    iconClasses: getIconClasses_1.getIconClasses(_this.modelService, _this.modeService, resource, fileKind),\n                    description: (currentWindowId === win.id) ? nls.localize('current', \"Current Window\") : undefined,\n                    buttons: (!_this.isQuickNavigate() && currentWindowId !== win.id) ? [_this.closeWindowAction] : undefined\n                };\n            });\n            var autoFocusIndex = (picks.indexOf(picks.filter(function (pick) { return pick.payload === currentWindowId; })[0]) + 1) % picks.length;\n            return _this.quickInputService.pick(picks, {\n                contextKey: 'inWindowsPicker',\n                activeItem: picks[autoFocusIndex],\n                placeHolder: placeHolder,\n                quickNavigate: _this.isQuickNavigate() ? { keybindings: _this.keybindingService.lookupKeybindings(_this.id) } : undefined,\n                onDidTriggerItemButton: function (context) {\n                    _this.windowsService.closeWindow(context.item.payload).then(function () {\n                        context.removeItem();\n                    });\n                }\n            });\n        }).then(function (pick) {\n            if (pick) {\n                _this.windowsService.focusWindow(pick.payload);\n            }\n        });\n    };\n    return BaseSwitchWindow;\n}(actions_1.Action));\nexports.BaseSwitchWindow = BaseSwitchWindow;\nvar SwitchWindow = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchWindow, _super);\n    function SwitchWindow(id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService) {\n        return _super.call(this, id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService) || this;\n    }\n    SwitchWindow.prototype.isQuickNavigate = function () {\n        return false;\n    };\n    SwitchWindow.ID = 'workbench.action.switchWindow';\n    SwitchWindow.LABEL = nls.localize('switchWindow', \"Switch Window...\");\n    SwitchWindow = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowsService),\n        tslib_1.__param(3, windows_1.IWindowService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, keybinding_1.IKeybindingService),\n        tslib_1.__param(6, modelService_1.IModelService),\n        tslib_1.__param(7, modeService_1.IModeService)\n    ], SwitchWindow);\n    return SwitchWindow;\n}(BaseSwitchWindow));\nexports.SwitchWindow = SwitchWindow;\nvar QuickSwitchWindow = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickSwitchWindow, _super);\n    function QuickSwitchWindow(id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService) {\n        return _super.call(this, id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService) || this;\n    }\n    QuickSwitchWindow.prototype.isQuickNavigate = function () {\n        return true;\n    };\n    QuickSwitchWindow.ID = 'workbench.action.quickSwitchWindow';\n    QuickSwitchWindow.LABEL = nls.localize('quickSwitchWindow', \"Quick Switch Window...\");\n    QuickSwitchWindow = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowsService),\n        tslib_1.__param(3, windows_1.IWindowService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, keybinding_1.IKeybindingService),\n        tslib_1.__param(6, modelService_1.IModelService),\n        tslib_1.__param(7, modeService_1.IModeService)\n    ], QuickSwitchWindow);\n    return QuickSwitchWindow;\n}(BaseSwitchWindow));\nexports.QuickSwitchWindow = QuickSwitchWindow;\nexports.inRecentFilesPickerContextKey = 'inRecentFilesPicker';\nvar BaseOpenRecentAction = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseOpenRecentAction, _super);\n    function BaseOpenRecentAction(id, label, windowService, windowsService, quickInputService, contextService, labelService, keybindingService, modelService, modeService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowService = windowService;\n        _this.windowsService = windowsService;\n        _this.quickInputService = quickInputService;\n        _this.contextService = contextService;\n        _this.labelService = labelService;\n        _this.keybindingService = keybindingService;\n        _this.modelService = modelService;\n        _this.modeService = modeService;\n        _this.removeFromRecentlyOpened = {\n            iconClass: 'action-remove-from-recently-opened',\n            tooltip: nls.localize('remove', \"Remove from Recently Opened\")\n        };\n        return _this;\n    }\n    BaseOpenRecentAction.prototype.run = function () {\n        var _this = this;\n        return this.windowService.getRecentlyOpened()\n            .then(function (_a) {\n            var workspaces = _a.workspaces, files = _a.files;\n            return _this.openRecent(workspaces, files);\n        });\n    };\n    BaseOpenRecentAction.prototype.openRecent = function (recentWorkspaces, recentFiles) {\n        var _this = this;\n        var toPick = function (recent, labelService, buttons) {\n            var resource;\n            var fullLabel;\n            var fileKind;\n            if (history_1.isRecentFolder(recent)) {\n                resource = recent.folderUri;\n                fullLabel = recent.label || labelService.getWorkspaceLabel(recent.folderUri, { verbose: true });\n                fileKind = files_1.FileKind.FOLDER;\n            }\n            else if (history_1.isRecentWorkspace(recent)) {\n                resource = recent.workspace.configPath;\n                fullLabel = recent.label || labelService.getWorkspaceLabel(recent.workspace, { verbose: true });\n                fileKind = files_1.FileKind.ROOT_FOLDER;\n            }\n            else {\n                resource = recent.fileUri;\n                fullLabel = recent.label || labelService.getUriLabel(recent.fileUri);\n                fileKind = files_1.FileKind.FILE;\n            }\n            var _a = labels_1.splitName(fullLabel), name = _a.name, parentPath = _a.parentPath;\n            return {\n                iconClasses: getIconClasses_1.getIconClasses(_this.modelService, _this.modeService, resource, fileKind),\n                label: name,\n                description: parentPath,\n                buttons: buttons,\n                resource: resource,\n                fileKind: fileKind,\n            };\n        };\n        var runPick = function (uri, isFile, keyMods) {\n            var forceNewWindow = keyMods.ctrlCmd;\n            return _this.windowService.openWindow([{ uri: uri, typeHint: isFile ? 'file' : 'folder' }], { forceNewWindow: forceNewWindow, forceOpenWorkspaceAsFile: isFile });\n        };\n        var workspacePicks = recentWorkspaces.map(function (workspace) { return toPick(workspace, _this.labelService, !_this.isQuickNavigate() ? [_this.removeFromRecentlyOpened] : undefined); });\n        var filePicks = recentFiles.map(function (p) { return toPick(p, _this.labelService, !_this.isQuickNavigate() ? [_this.removeFromRecentlyOpened] : undefined); });\n        // focus second entry if the first recent workspace is the current workspace\n        var firstEntry = recentWorkspaces[0];\n        var autoFocusSecondEntry = firstEntry && this.contextService.isCurrentWorkspace(history_1.isRecentWorkspace(firstEntry) ? firstEntry.workspace : firstEntry.folderUri);\n        var keyMods;\n        var workspaceSeparator = { type: 'separator', label: nls.localize('workspaces', \"workspaces\") };\n        var fileSeparator = { type: 'separator', label: nls.localize('files', \"files\") };\n        var picks = [workspaceSeparator].concat(workspacePicks, [fileSeparator], filePicks);\n        this.quickInputService.pick(picks, {\n            contextKey: exports.inRecentFilesPickerContextKey,\n            activeItem: workspacePicks.concat(filePicks)[autoFocusSecondEntry ? 1 : 0],\n            placeHolder: browser.isMacintosh ? nls.localize('openRecentPlaceHolderMac', \"Select to open (hold Cmd-key to open in new window)\") : nls.localize('openRecentPlaceHolder', \"Select to open (hold Ctrl-key to open in new window)\"),\n            matchOnDescription: true,\n            onKeyMods: function (mods) { return keyMods = mods; },\n            quickNavigate: this.isQuickNavigate() ? { keybindings: this.keybindingService.lookupKeybindings(this.id) } : undefined,\n            onDidTriggerItemButton: function (context) {\n                _this.windowsService.removeFromRecentlyOpened([context.item.resource]).then(function () { return context.removeItem(); });\n            }\n        }).then(function (pick) {\n            if (pick) {\n                return runPick(pick.resource, pick.fileKind === files_1.FileKind.FILE, keyMods);\n            }\n        });\n    };\n    return BaseOpenRecentAction;\n}(actions_1.Action));\nexports.BaseOpenRecentAction = BaseOpenRecentAction;\nvar OpenRecentAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenRecentAction, _super);\n    function OpenRecentAction(id, label, windowService, windowsService, quickInputService, contextService, keybindingService, modelService, modeService, labelService) {\n        return _super.call(this, id, label, windowService, windowsService, quickInputService, contextService, labelService, keybindingService, modelService, modeService) || this;\n    }\n    OpenRecentAction.prototype.isQuickNavigate = function () {\n        return false;\n    };\n    OpenRecentAction.ID = 'workbench.action.openRecent';\n    OpenRecentAction.LABEL = nls.localize('openRecent', \"Open Recent...\");\n    OpenRecentAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, windows_1.IWindowsService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, keybinding_1.IKeybindingService),\n        tslib_1.__param(7, modelService_1.IModelService),\n        tslib_1.__param(8, modeService_1.IModeService),\n        tslib_1.__param(9, label_1.ILabelService)\n    ], OpenRecentAction);\n    return OpenRecentAction;\n}(BaseOpenRecentAction));\nexports.OpenRecentAction = OpenRecentAction;\nvar QuickOpenRecentAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenRecentAction, _super);\n    function QuickOpenRecentAction(id, label, windowService, windowsService, quickInputService, contextService, keybindingService, modelService, modeService, labelService) {\n        return _super.call(this, id, label, windowService, windowsService, quickInputService, contextService, labelService, keybindingService, modelService, modeService) || this;\n    }\n    QuickOpenRecentAction.prototype.isQuickNavigate = function () {\n        return true;\n    };\n    QuickOpenRecentAction.ID = 'workbench.action.quickOpenRecent';\n    QuickOpenRecentAction.LABEL = nls.localize('quickOpenRecent', \"Quick Open Recent...\");\n    QuickOpenRecentAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, windows_1.IWindowsService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, keybinding_1.IKeybindingService),\n        tslib_1.__param(7, modelService_1.IModelService),\n        tslib_1.__param(8, modeService_1.IModeService),\n        tslib_1.__param(9, label_1.ILabelService)\n    ], QuickOpenRecentAction);\n    return QuickOpenRecentAction;\n}(BaseOpenRecentAction));\nexports.QuickOpenRecentAction = QuickOpenRecentAction;\nvar ShowAboutDialogAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowAboutDialogAction, _super);\n    function ShowAboutDialogAction(id, label, windowsService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.windowsService = windowsService;\n        return _this;\n    }\n    ShowAboutDialogAction.prototype.run = function () {\n        return this.windowsService.openAboutDialog();\n    };\n    ShowAboutDialogAction.ID = 'workbench.action.showAboutDialog';\n    ShowAboutDialogAction.LABEL = nls.localize('about', \"About {0}\", product_1.default.applicationName);\n    ShowAboutDialogAction = tslib_1.__decorate([\n        tslib_1.__param(2, windows_1.IWindowsService)\n    ], ShowAboutDialogAction);\n    return ShowAboutDialogAction;\n}(actions_1.Action));\nexports.ShowAboutDialogAction = ShowAboutDialogAction;\nexports.NewWindowTabHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).newWindowTab();\n};\nexports.ShowPreviousWindowTabHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).showPreviousWindowTab();\n};\nexports.ShowNextWindowTabHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).showNextWindowTab();\n};\nexports.MoveWindowTabToNewWindowHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).moveWindowTabToNewWindow();\n};\nexports.MergeWindowTabsHandlerHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).mergeAllWindowTabs();\n};\nexports.ToggleWindowTabsBarHandler = function (accessor) {\n    return accessor.get(windows_1.IWindowsService).toggleWindowTabsBar();\n};\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/actions/windowActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/electron-browser/actions/windowActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/actions';\n\nimport { URI } from 'vs/base/common/uri';\nimport { Action } from 'vs/base/common/actions';\nimport { IWindowService, IWindowsService } from 'vs/platform/windows/common/windows';\nimport * as nls from 'vs/nls';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport * as browser from 'vs/base/browser/browser';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { webFrame } from 'electron';\nimport { FileKind } from 'vs/platform/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IQuickInputService, IQuickPickItem, IQuickInputButton, IQuickPickSeparator, IKeyMods } from 'vs/platform/quickinput/common/quickInput';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport product from 'vs/platform/product/node/product';\nimport { ICommandHandler } from 'vs/platform/commands/common/commands';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IRecentFolder, IRecentFile, IRecentWorkspace, IRecent, isRecentFolder, isRecentWorkspace } from 'vs/platform/history/common/history';\nimport { splitName } from 'vs/base/common/labels';\n\nexport class CloseCurrentWindowAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.closeWindow';\n\tstatic readonly LABEL = nls.localize('closeWindow', \"Close Window\");\n\n\tconstructor(id: string, label: string, @IWindowService private readonly windowService: IWindowService) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.windowService.closeWindow();\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class NewWindowAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.newWindow';\n\tstatic LABEL = nls.localize('newWindow', \"New Window\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowsService private readonly windowsService: IWindowsService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.windowsService.openNewWindow();\n\t}\n}\n\nexport class ToggleFullScreenAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.toggleFullScreen';\n\tstatic LABEL = nls.localize('toggleFullScreen', \"Toggle Full Screen\");\n\n\tconstructor(id: string, label: string, @IWindowService private readonly windowService: IWindowService) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.windowService.toggleFullScreen();\n\t}\n}\n\nexport abstract class BaseZoomAction extends Action {\n\tprivate static readonly SETTING_KEY = 'window.zoomLevel';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprotected setConfiguredZoomLevel(level: number): void {\n\t\tlevel = Math.round(level); // when reaching smallest zoom, prevent fractional zoom levels\n\n\t\tconst applyZoom = () => {\n\t\t\twebFrame.setZoomLevel(level);\n\t\t\tbrowser.setZoomFactor(webFrame.getZoomFactor());\n\t\t\t// See https://github.com/Microsoft/vscode/issues/26151\n\t\t\t// Cannot be trusted because the webFrame might take some time\n\t\t\t// until it really applies the new zoom level\n\t\t\tbrowser.setZoomLevel(webFrame.getZoomLevel(), /*isTrusted*/false);\n\t\t};\n\n\t\tthis.configurationService.updateValue(BaseZoomAction.SETTING_KEY, level).then(() => applyZoom());\n\t}\n}\n\nexport class ZoomInAction extends BaseZoomAction {\n\n\tstatic readonly ID = 'workbench.action.zoomIn';\n\tstatic readonly LABEL = nls.localize('zoomIn', \"Zoom In\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label, configurationService);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.setConfiguredZoomLevel(webFrame.getZoomLevel() + 1);\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class ZoomOutAction extends BaseZoomAction {\n\n\tstatic readonly ID = 'workbench.action.zoomOut';\n\tstatic readonly LABEL = nls.localize('zoomOut', \"Zoom Out\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label, configurationService);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.setConfiguredZoomLevel(webFrame.getZoomLevel() - 1);\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class ZoomResetAction extends BaseZoomAction {\n\n\tstatic readonly ID = 'workbench.action.zoomReset';\n\tstatic readonly LABEL = nls.localize('zoomReset', \"Reset Zoom\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label, configurationService);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tthis.setConfiguredZoomLevel(0);\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class ReloadWindowAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.reloadWindow';\n\tstatic LABEL = nls.localize('reloadWindow', \"Reload Window\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\treturn this.windowService.reloadWindow().then(() => true);\n\t}\n}\n\nexport class ReloadWindowWithExtensionsDisabledAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.reloadWindowWithExtensionsDisabled';\n\tstatic LABEL = nls.localize('reloadWindowWithExntesionsDisabled', \"Reload Window With Extensions Disabled\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\treturn this.windowService.reloadWindow({ _: [], 'disable-extensions': true }).then(() => true);\n\t}\n}\n\nexport abstract class BaseSwitchWindow extends Action {\n\n\tprivate closeWindowAction: IQuickInputButton = {\n\t\ticonClass: 'action-remove-from-recently-opened',\n\t\ttooltip: nls.localize('close', \"Close Window\")\n\t};\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate windowsService: IWindowsService,\n\t\tprivate windowService: IWindowService,\n\t\tprivate quickInputService: IQuickInputService,\n\t\tprivate keybindingService: IKeybindingService,\n\t\tprivate modelService: IModelService,\n\t\tprivate modeService: IModeService,\n\t) {\n\t\tsuper(id, label);\n\n\t}\n\n\tprotected abstract isQuickNavigate(): boolean;\n\n\trun(): Promise<void> {\n\t\tconst currentWindowId = this.windowService.getCurrentWindowId();\n\n\t\treturn this.windowsService.getWindows().then(windows => {\n\t\t\tconst placeHolder = nls.localize('switchWindowPlaceHolder', \"Select a window to switch to\");\n\t\t\tconst picks = windows.map(win => {\n\t\t\t\tconst resource = win.filename ? URI.file(win.filename) : win.folderUri ? win.folderUri : win.workspace ? win.workspace.configPath : undefined;\n\t\t\t\tconst fileKind = win.filename ? FileKind.FILE : win.workspace ? FileKind.ROOT_FOLDER : win.folderUri ? FileKind.FOLDER : FileKind.FILE;\n\t\t\t\treturn {\n\t\t\t\t\tpayload: win.id,\n\t\t\t\t\tlabel: win.title,\n\t\t\t\t\ticonClasses: getIconClasses(this.modelService, this.modeService, resource, fileKind),\n\t\t\t\t\tdescription: (currentWindowId === win.id) ? nls.localize('current', \"Current Window\") : undefined,\n\t\t\t\t\tbuttons: (!this.isQuickNavigate() && currentWindowId !== win.id) ? [this.closeWindowAction] : undefined\n\t\t\t\t} as (IQuickPickItem & { payload: number });\n\t\t\t});\n\n\t\t\tconst autoFocusIndex = (picks.indexOf(picks.filter(pick => pick.payload === currentWindowId)[0]) + 1) % picks.length;\n\n\t\t\treturn this.quickInputService.pick(picks, {\n\t\t\t\tcontextKey: 'inWindowsPicker',\n\t\t\t\tactiveItem: picks[autoFocusIndex],\n\t\t\t\tplaceHolder,\n\t\t\t\tquickNavigate: this.isQuickNavigate() ? { keybindings: this.keybindingService.lookupKeybindings(this.id) } : undefined,\n\t\t\t\tonDidTriggerItemButton: context => {\n\t\t\t\t\tthis.windowsService.closeWindow(context.item.payload).then(() => {\n\t\t\t\t\t\tcontext.removeItem();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(pick => {\n\t\t\tif (pick) {\n\t\t\t\tthis.windowsService.focusWindow(pick.payload);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class SwitchWindow extends BaseSwitchWindow {\n\n\tstatic readonly ID = 'workbench.action.switchWindow';\n\tstatic LABEL = nls.localize('switchWindow', \"Switch Window...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t) {\n\t\tsuper(id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService);\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn false;\n\t}\n}\n\nexport class QuickSwitchWindow extends BaseSwitchWindow {\n\n\tstatic readonly ID = 'workbench.action.quickSwitchWindow';\n\tstatic LABEL = nls.localize('quickSwitchWindow', \"Quick Switch Window...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t) {\n\t\tsuper(id, label, windowsService, windowService, quickInputService, keybindingService, modelService, modeService);\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport const inRecentFilesPickerContextKey = 'inRecentFilesPicker';\n\nexport abstract class BaseOpenRecentAction extends Action {\n\n\tprivate removeFromRecentlyOpened: IQuickInputButton = {\n\t\ticonClass: 'action-remove-from-recently-opened',\n\t\ttooltip: nls.localize('remove', \"Remove from Recently Opened\")\n\t};\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate windowService: IWindowService,\n\t\tprivate windowsService: IWindowsService,\n\t\tprivate quickInputService: IQuickInputService,\n\t\tprivate contextService: IWorkspaceContextService,\n\t\tprivate labelService: ILabelService,\n\t\tprivate keybindingService: IKeybindingService,\n\t\tprivate modelService: IModelService,\n\t\tprivate modeService: IModeService,\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprotected abstract isQuickNavigate(): boolean;\n\n\trun(): Promise<void> {\n\t\treturn this.windowService.getRecentlyOpened()\n\t\t\t.then(({ workspaces, files }) => this.openRecent(workspaces, files));\n\t}\n\n\tprivate openRecent(recentWorkspaces: Array<IRecentWorkspace | IRecentFolder>, recentFiles: IRecentFile[]): void {\n\n\t\tconst toPick = (recent: IRecent, labelService: ILabelService, buttons: IQuickInputButton[] | undefined) => {\n\t\t\tlet resource: URI | undefined;\n\t\t\tlet fullLabel: string | undefined;\n\t\t\tlet fileKind: FileKind | undefined;\n\t\t\tif (isRecentFolder(recent)) {\n\t\t\t\tresource = recent.folderUri;\n\t\t\t\tfullLabel = recent.label || labelService.getWorkspaceLabel(recent.folderUri, { verbose: true });\n\t\t\t\tfileKind = FileKind.FOLDER;\n\t\t\t} else if (isRecentWorkspace(recent)) {\n\t\t\t\tresource = recent.workspace.configPath;\n\t\t\t\tfullLabel = recent.label || labelService.getWorkspaceLabel(recent.workspace, { verbose: true });\n\t\t\t\tfileKind = FileKind.ROOT_FOLDER;\n\t\t\t} else {\n\t\t\t\tresource = recent.fileUri;\n\t\t\t\tfullLabel = recent.label || labelService.getUriLabel(recent.fileUri);\n\t\t\t\tfileKind = FileKind.FILE;\n\t\t\t}\n\t\t\tconst { name, parentPath } = splitName(fullLabel);\n\t\t\treturn {\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.modeService, resource, fileKind),\n\t\t\t\tlabel: name,\n\t\t\t\tdescription: parentPath,\n\t\t\t\tbuttons,\n\t\t\t\tresource,\n\t\t\t\tfileKind,\n\t\t\t};\n\t\t};\n\n\t\tconst runPick = (uri: URI, isFile: boolean, keyMods: IKeyMods) => {\n\t\t\tconst forceNewWindow = keyMods.ctrlCmd;\n\t\t\treturn this.windowService.openWindow([{ uri, typeHint: isFile ? 'file' : 'folder' }], { forceNewWindow, forceOpenWorkspaceAsFile: isFile });\n\t\t};\n\n\t\tconst workspacePicks = recentWorkspaces.map(workspace => toPick(workspace, this.labelService, !this.isQuickNavigate() ? [this.removeFromRecentlyOpened] : undefined));\n\t\tconst filePicks = recentFiles.map(p => toPick(p, this.labelService, !this.isQuickNavigate() ? [this.removeFromRecentlyOpened] : undefined));\n\n\t\t// focus second entry if the first recent workspace is the current workspace\n\t\tconst firstEntry = recentWorkspaces[0];\n\t\tlet autoFocusSecondEntry: boolean = firstEntry && this.contextService.isCurrentWorkspace(isRecentWorkspace(firstEntry) ? firstEntry.workspace : firstEntry.folderUri);\n\n\t\tlet keyMods: IKeyMods;\n\t\tconst workspaceSeparator: IQuickPickSeparator = { type: 'separator', label: nls.localize('workspaces', \"workspaces\") };\n\t\tconst fileSeparator: IQuickPickSeparator = { type: 'separator', label: nls.localize('files', \"files\") };\n\t\tconst picks = [workspaceSeparator, ...workspacePicks, fileSeparator, ...filePicks];\n\t\tthis.quickInputService.pick(picks, {\n\t\t\tcontextKey: inRecentFilesPickerContextKey,\n\t\t\tactiveItem: [...workspacePicks, ...filePicks][autoFocusSecondEntry ? 1 : 0],\n\t\t\tplaceHolder: browser.isMacintosh ? nls.localize('openRecentPlaceHolderMac', \"Select to open (hold Cmd-key to open in new window)\") : nls.localize('openRecentPlaceHolder', \"Select to open (hold Ctrl-key to open in new window)\"),\n\t\t\tmatchOnDescription: true,\n\t\t\tonKeyMods: mods => keyMods = mods,\n\t\t\tquickNavigate: this.isQuickNavigate() ? { keybindings: this.keybindingService.lookupKeybindings(this.id) } : undefined,\n\t\t\tonDidTriggerItemButton: context => {\n\t\t\t\tthis.windowsService.removeFromRecentlyOpened([context.item.resource]).then(() => context.removeItem());\n\t\t\t}\n\t\t}).then((pick): Promise<void> | void => {\n\t\t\tif (pick) {\n\t\t\t\treturn runPick(pick.resource, pick.fileKind === FileKind.FILE, keyMods);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class OpenRecentAction extends BaseOpenRecentAction {\n\n\tstatic readonly ID = 'workbench.action.openRecent';\n\tstatic readonly LABEL = nls.localize('openRecent', \"Open Recent...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ILabelService labelService: ILabelService\n\t) {\n\t\tsuper(id, label, windowService, windowsService, quickInputService, contextService, labelService, keybindingService, modelService, modeService);\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn false;\n\t}\n}\n\nexport class QuickOpenRecentAction extends BaseOpenRecentAction {\n\n\tstatic readonly ID = 'workbench.action.quickOpenRecent';\n\tstatic readonly LABEL = nls.localize('quickOpenRecent', \"Quick Open Recent...\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ILabelService labelService: ILabelService\n\t) {\n\t\tsuper(id, label, windowService, windowsService, quickInputService, contextService, labelService, keybindingService, modelService, modeService);\n\t}\n\n\tprotected isQuickNavigate(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport class ShowAboutDialogAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.showAboutDialog';\n\tstatic LABEL = nls.localize('about', \"About {0}\", product.applicationName);\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IWindowsService private readonly windowsService: IWindowsService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.windowsService.openAboutDialog();\n\t}\n}\n\nexport const NewWindowTabHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).newWindowTab();\n};\n\nexport const ShowPreviousWindowTabHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).showPreviousWindowTab();\n};\n\nexport const ShowNextWindowTabHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).showNextWindowTab();\n};\n\nexport const MoveWindowTabToNewWindowHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).moveWindowTabToNewWindow();\n};\n\nexport const MergeWindowTabsHandlerHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).mergeAllWindowTabs();\n};\n\nexport const ToggleWindowTabsBarHandler: ICommandHandler = function (accessor: ServicesAccessor) {\n\treturn accessor.get(IWindowsService).toggleWindowTabsBar();\n};\n"]}]}