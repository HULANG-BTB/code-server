{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/bracketSelections.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/bracketSelections.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar linkedList_1 = require(\"vs/base/common/linkedList\");\nvar BracketSelectionRangeProvider = /** @class */ (function () {\n    function BracketSelectionRangeProvider() {\n    }\n    BracketSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result, _loop_1, _i, positions_1, position;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        result = [];\n                        _loop_1 = function (position) {\n                            var bucket, ranges;\n                            return tslib_1.__generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0:\n                                        bucket = [];\n                                        result.push(bucket);\n                                        ranges = new Map();\n                                        return [4 /*yield*/, new Promise(function (resolve) { return BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges); })];\n                                    case 1:\n                                        _a.sent();\n                                        return [4 /*yield*/, new Promise(function (resolve) { return BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket); })];\n                                    case 2:\n                                        _a.sent();\n                                        return [2 /*return*/];\n                                }\n                            });\n                        };\n                        _i = 0, positions_1 = positions;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < positions_1.length)) return [3 /*break*/, 4];\n                        position = positions_1[_i];\n                        return [5 /*yield**/, _loop_1(position)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    BracketSelectionRangeProvider._bracketsRightYield = function (resolve, round, model, pos, ranges) {\n        var counts = new Map();\n        var t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            var bracket = model.findNextBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            var d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(function () { return BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges); });\n                break;\n            }\n            var key = bracket.close;\n            if (bracket.isOpen) {\n                // wait for closing\n                var val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                // process closing\n                var val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    var list = ranges.get(key);\n                    if (!list) {\n                        list = new linkedList_1.LinkedList();\n                        ranges.set(key, list);\n                    }\n                    list.push(bracket.range);\n                }\n            }\n            pos = bracket.range.getEndPosition();\n        }\n    };\n    BracketSelectionRangeProvider._bracketsLeftYield = function (resolve, round, model, pos, ranges, bucket) {\n        var counts = new Map();\n        var t1 = Date.now();\n        while (true) {\n            if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n                resolve();\n                break;\n            }\n            if (!pos) {\n                resolve();\n                break;\n            }\n            var bracket = model.findPrevBracket(pos);\n            if (!bracket) {\n                resolve();\n                break;\n            }\n            var d = Date.now() - t1;\n            if (d > BracketSelectionRangeProvider._maxDuration) {\n                setTimeout(function () { return BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket); });\n                break;\n            }\n            var key = bracket.close;\n            if (!bracket.isOpen) {\n                // wait for opening\n                var val = counts.has(key) ? counts.get(key) : 0;\n                counts.set(key, val + 1);\n            }\n            else {\n                // opening\n                var val = counts.has(key) ? counts.get(key) : 0;\n                val -= 1;\n                counts.set(key, Math.max(0, val));\n                if (val < 0) {\n                    var list = ranges.get(key);\n                    if (list) {\n                        var closing = list.shift();\n                        if (list.size === 0) {\n                            ranges.delete(key);\n                        }\n                        var innerBracket = range_1.Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n                        var outerBracket = range_1.Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n                        bucket.push({ range: innerBracket, kind: 'statement.brackets' });\n                        bucket.push({ range: outerBracket, kind: 'statement.brackets.full' });\n                        BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n                    }\n                }\n            }\n            pos = bracket.range.getStartPosition();\n        }\n    };\n    BracketSelectionRangeProvider._addBracketLeading = function (model, bracket, bucket) {\n        if (bracket.startLineNumber === bracket.endLineNumber) {\n            return;\n        }\n        // xxxxxxxx {\n        //\n        // }\n        var startLine = bracket.startLineNumber;\n        var column = model.getLineFirstNonWhitespaceColumn(startLine);\n        if (column !== 0 && column !== bracket.startColumn) {\n            bucket.push({ range: range_1.Range.fromPositions(new position_1.Position(startLine, column), bracket.getEndPosition()), kind: 'statement.brackets.leading' });\n            bucket.push({ range: range_1.Range.fromPositions(new position_1.Position(startLine, 1), bracket.getEndPosition()), kind: 'statement.brackets.leading.full' });\n        }\n        // xxxxxxxx\n        // {\n        //\n        // }\n        var aboveLine = startLine - 1;\n        if (aboveLine > 0) {\n            var column_1 = model.getLineFirstNonWhitespaceColumn(aboveLine);\n            if (column_1 === bracket.startColumn && column_1 !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n                bucket.push({ range: range_1.Range.fromPositions(new position_1.Position(aboveLine, column_1), bracket.getEndPosition()), kind: 'statement.brackets.leading' });\n                bucket.push({ range: range_1.Range.fromPositions(new position_1.Position(aboveLine, 1), bracket.getEndPosition()), kind: 'statement.brackets.leading.full' });\n            }\n        }\n    };\n    BracketSelectionRangeProvider._maxDuration = 30;\n    BracketSelectionRangeProvider._maxRounds = 2;\n    return BracketSelectionRangeProvider;\n}());\nexports.BracketSelectionRangeProvider = BracketSelectionRangeProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/bracketSelections.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/smartSelect/bracketSelections.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SelectionRangeProvider, SelectionRange } from 'vs/editor/common/modes';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { LinkedList } from 'vs/base/common/linkedList';\n\nexport class BracketSelectionRangeProvider implements SelectionRangeProvider {\n\n\tasync provideSelectionRanges(model: ITextModel, positions: Position[]): Promise<SelectionRange[][]> {\n\t\tconst result: SelectionRange[][] = [];\n\n\t\tfor (const position of positions) {\n\t\t\tconst bucket: SelectionRange[] = [];\n\t\t\tresult.push(bucket);\n\n\t\t\tconst ranges = new Map<string, LinkedList<Range>>();\n\t\t\tawait new Promise(resolve => BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges));\n\t\t\tawait new Promise(resolve => BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static readonly _maxDuration = 30;\n\tprivate static readonly _maxRounds = 2;\n\n\tprivate static _bracketsRightYield(resolve: () => void, round: number, model: ITextModel, pos: Position, ranges: Map<string, LinkedList<Range>>): void {\n\t\tconst counts = new Map<string, number>();\n\t\tconst t1 = Date.now();\n\t\twhile (true) {\n\t\t\tif (round >= BracketSelectionRangeProvider._maxRounds) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!pos) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet bracket = model.findNextBracket(pos);\n\t\t\tif (!bracket) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet d = Date.now() - t1;\n\t\t\tif (d > BracketSelectionRangeProvider._maxDuration) {\n\t\t\t\tsetTimeout(() => BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst key = bracket.close;\n\t\t\tif (bracket.isOpen) {\n\t\t\t\t// wait for closing\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tcounts.set(key, val + 1);\n\t\t\t} else {\n\t\t\t\t// process closing\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tval -= 1;\n\t\t\t\tcounts.set(key, Math.max(0, val));\n\t\t\t\tif (val < 0) {\n\t\t\t\t\tlet list = ranges.get(key);\n\t\t\t\t\tif (!list) {\n\t\t\t\t\t\tlist = new LinkedList();\n\t\t\t\t\t\tranges.set(key, list);\n\t\t\t\t\t}\n\t\t\t\t\tlist.push(bracket.range);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos = bracket.range.getEndPosition();\n\t\t}\n\t}\n\n\tprivate static _bracketsLeftYield(resolve: () => void, round: number, model: ITextModel, pos: Position, ranges: Map<string, LinkedList<Range>>, bucket: SelectionRange[]): void {\n\t\tconst counts = new Map<string, number>();\n\t\tconst t1 = Date.now();\n\t\twhile (true) {\n\t\t\tif (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!pos) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet bracket = model.findPrevBracket(pos);\n\t\t\tif (!bracket) {\n\t\t\t\tresolve();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlet d = Date.now() - t1;\n\t\t\tif (d > BracketSelectionRangeProvider._maxDuration) {\n\t\t\t\tsetTimeout(() => BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst key = bracket.close;\n\t\t\tif (!bracket.isOpen) {\n\t\t\t\t// wait for opening\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tcounts.set(key, val + 1);\n\t\t\t} else {\n\t\t\t\t// opening\n\t\t\t\tlet val = counts.has(key) ? counts.get(key)! : 0;\n\t\t\t\tval -= 1;\n\t\t\t\tcounts.set(key, Math.max(0, val));\n\t\t\t\tif (val < 0) {\n\t\t\t\t\tlet list = ranges.get(key);\n\t\t\t\t\tif (list) {\n\t\t\t\t\t\tlet closing = list.shift();\n\t\t\t\t\t\tif (list.size === 0) {\n\t\t\t\t\t\t\tranges.delete(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing!.getStartPosition());\n\t\t\t\t\t\tconst outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing!.getEndPosition());\n\t\t\t\t\t\tbucket.push({ range: innerBracket, kind: 'statement.brackets' });\n\t\t\t\t\t\tbucket.push({ range: outerBracket, kind: 'statement.brackets.full' });\n\t\t\t\t\t\tBracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos = bracket.range.getStartPosition();\n\t\t}\n\t}\n\n\tprivate static _addBracketLeading(model: ITextModel, bracket: Range, bucket: SelectionRange[]): void {\n\t\tif (bracket.startLineNumber === bracket.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\t\t// xxxxxxxx {\n\t\t//\n\t\t// }\n\t\tconst startLine = bracket.startLineNumber;\n\t\tconst column = model.getLineFirstNonWhitespaceColumn(startLine);\n\t\tif (column !== 0 && column !== bracket.startColumn) {\n\t\t\tbucket.push({ range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition()), kind: 'statement.brackets.leading' });\n\t\t\tbucket.push({ range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition()), kind: 'statement.brackets.leading.full' });\n\t\t}\n\n\t\t// xxxxxxxx\n\t\t// {\n\t\t//\n\t\t// }\n\t\tconst aboveLine = startLine - 1;\n\t\tif (aboveLine > 0) {\n\t\t\tconst column = model.getLineFirstNonWhitespaceColumn(aboveLine);\n\t\t\tif (column === bracket.startColumn && column !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n\t\t\t\tbucket.push({ range: Range.fromPositions(new Position(aboveLine, column), bracket.getEndPosition()), kind: 'statement.brackets.leading' });\n\t\t\t\tbucket.push({ range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition()), kind: 'statement.brackets.leading.full' });\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}