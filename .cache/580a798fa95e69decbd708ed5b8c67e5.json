{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar os_1 = require(\"os\");\nvar path_1 = require(\"vs/base/common/path\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar runtimeExtensionsEditor_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar nls_1 = require(\"vs/nls\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar runtimeExtensionsInput_1 = require(\"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar extensions_2 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar extensions_3 = require(\"vs/platform/extensions/common/extensions\");\nvar ExtensionsAutoProfiler = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionsAutoProfiler, _super);\n    function ExtensionsAutoProfiler(_extensionService, _extensionProfileService, _anotherExtensionService, _telemetryService, _logService, _notificationService, _editorService) {\n        var _this = _super.call(this) || this;\n        _this._extensionService = _extensionService;\n        _this._extensionProfileService = _extensionProfileService;\n        _this._anotherExtensionService = _anotherExtensionService;\n        _this._telemetryService = _telemetryService;\n        _this._logService = _logService;\n        _this._notificationService = _notificationService;\n        _this._editorService = _editorService;\n        _this._session = new Map();\n        _this._blame = new Set();\n        _this._register(_extensionService.onDidChangeResponsiveChange(_this._onDidChangeResponsiveChange, _this));\n        return _this;\n    }\n    ExtensionsAutoProfiler.prototype._onDidChangeResponsiveChange = function (event) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var target, token_1, session, err_1, _a, err_2;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        target = event.target;\n                        if (!target.canProfileExtensionHost()) {\n                            return [2 /*return*/];\n                        }\n                        if (!(event.isResponsive && this._session.has(target))) return [3 /*break*/, 1];\n                        // stop profiling when responsive again\n                        this._session.get(target).cancel();\n                        return [3 /*break*/, 11];\n                    case 1:\n                        if (!(!event.isResponsive && !this._session.has(target))) return [3 /*break*/, 11];\n                        token_1 = new cancellation_1.CancellationTokenSource();\n                        this._session.set(target, token_1);\n                        session = void 0;\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, target.startExtensionHostProfile()];\n                    case 3:\n                        session = _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _b.sent();\n                        this._session.delete(target);\n                        // fail silent as this is often\n                        // caused by another party being\n                        // connected already\n                        return [2 /*return*/];\n                    case 5: \n                    // wait 5 seconds or until responsive again\n                    return [4 /*yield*/, new Promise(function (resolve) {\n                            token_1.token.onCancellationRequested(resolve);\n                            setTimeout(resolve, 5e3);\n                        })];\n                    case 6:\n                        // wait 5 seconds or until responsive again\n                        _b.sent();\n                        _b.label = 7;\n                    case 7:\n                        _b.trys.push([7, 9, 10, 11]);\n                        // stop profiling and analyse results\n                        _a = this._processCpuProfile;\n                        return [4 /*yield*/, session.stop()];\n                    case 8:\n                        // stop profiling and analyse results\n                        _a.apply(this, [_b.sent()]);\n                        return [3 /*break*/, 11];\n                    case 9:\n                        err_2 = _b.sent();\n                        errors_1.onUnexpectedError(err_2);\n                        return [3 /*break*/, 11];\n                    case 10:\n                        this._session.delete(target);\n                        return [7 /*endfinally*/];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionsAutoProfiler.prototype._processCpuProfile = function (profile) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var data, i, id_1, total, anchor, i, duration, percentage, top, _i, data_1, slice, extension, path, id, reportAction;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        data = [];\n                        for (i = 0; i < profile.ids.length; i++) {\n                            id_1 = profile.ids[i];\n                            total = profile.deltas[i];\n                            data.push({ id: id_1, total: total, percentage: 0 });\n                        }\n                        anchor = 0;\n                        data.sort(function (a, b) { return a.id.localeCompare(b.id); });\n                        for (i = 1; i < data.length; i++) {\n                            if (data[anchor].id === data[i].id) {\n                                data[anchor].total += data[i].total;\n                            }\n                            else {\n                                anchor += 1;\n                                data[anchor] = data[i];\n                            }\n                        }\n                        data = data.slice(0, anchor + 1);\n                        duration = profile.endTime - profile.startTime;\n                        percentage = duration / 100;\n                        for (_i = 0, data_1 = data; _i < data_1.length; _i++) {\n                            slice = data_1[_i];\n                            slice.percentage = Math.round(slice.total / percentage);\n                            if (!top || top.percentage < slice.percentage) {\n                                top = slice;\n                            }\n                        }\n                        if (!top) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this._extensionService.getExtension(top.id)];\n                    case 1:\n                        extension = _a.sent();\n                        if (!extension) {\n                            // not an extension => idle, gc, self?\n                            return [2 /*return*/];\n                        }\n                        // add to running extensions view\n                        this._extensionProfileService.setUnresponsiveProfile(extension.identifier, profile);\n                        path = path_1.join(os_1.tmpdir(), \"exthost-\" + Math.random().toString(16).slice(2, 8) + \".cpuprofile\");\n                        return [4 /*yield*/, pfs_1.writeFile(path, JSON.stringify(profile.data))];\n                    case 2:\n                        _a.sent();\n                        this._logService.warn(\"UNRESPONSIVE extension host, '\" + top.id + \"' took \" + top.percentage + \"% of \" + duration / 1e3 + \"ms, saved PROFILE here: '\" + path + \"'\", data);\n                        id = uuid_1.generateUuid();\n                        /* __GDPR__\n                            \"exthostunresponsive\" : {\n                                \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                                \"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                                \"data\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                            }\n                        */\n                        this._telemetryService.publicLog('exthostunresponsive', {\n                            id: id,\n                            duration: duration,\n                            data: data,\n                        });\n                        // prompt: when really slow/greedy\n                        if (!(top.percentage >= 99 && top.total >= 5e6)) {\n                            return [2 /*return*/];\n                        }\n                        reportAction = new runtimeExtensionsEditor_1.ReportExtensionIssueAction({\n                            marketplaceInfo: this._anotherExtensionService.local.filter(function (value) { return extensions_3.ExtensionIdentifier.equals(value.identifier.id, extension.identifier); })[0],\n                            description: extension,\n                            unresponsiveProfile: profile,\n                            status: undefined,\n                        });\n                        if (!reportAction.enabled) {\n                            return [2 /*return*/];\n                        }\n                        // only blame once per extension, don't blame too often\n                        if (this._blame.has(extensions_3.ExtensionIdentifier.toKey(extension.identifier)) || this._blame.size >= 3) {\n                            return [2 /*return*/];\n                        }\n                        this._blame.add(extensions_3.ExtensionIdentifier.toKey(extension.identifier));\n                        // user-facing message when very bad...\n                        this._notificationService.prompt(notification_1.Severity.Warning, nls_1.localize('unresponsive-exthost', \"The extension '{0}' took a very long time to complete its last operation and it has prevented other extensions from running.\", extension.displayName || extension.name), [{\n                                label: nls_1.localize('show', 'Show Extensions'),\n                                run: function () { return _this._editorService.openEditor(new runtimeExtensionsInput_1.RuntimeExtensionsInput()); }\n                            },\n                            {\n                                label: nls_1.localize('report', \"Report Issue\"),\n                                run: function () {\n                                    /* __GDPR__\n                                        \"exthostunresponsive/report\" : {\n                                            \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                                        }\n                                    */\n                                    _this._telemetryService.publicLog('exthostunresponsive/report', { id: id });\n                                    return reportAction.run();\n                                }\n                            }], { silent: true });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionsAutoProfiler = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService),\n        tslib_1.__param(1, runtimeExtensionsEditor_1.IExtensionHostProfileService),\n        tslib_1.__param(2, extensions_2.IExtensionsWorkbenchService),\n        tslib_1.__param(3, telemetry_1.ITelemetryService),\n        tslib_1.__param(4, log_1.ILogService),\n        tslib_1.__param(5, notification_1.INotificationService),\n        tslib_1.__param(6, editorService_1.IEditorService)\n    ], ExtensionsAutoProfiler);\n    return ExtensionsAutoProfiler;\n}(lifecycle_1.Disposable));\nexports.ExtensionsAutoProfiler = ExtensionsAutoProfiler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService, IResponsiveStateChangeEvent, ICpuProfilerTarget, IExtensionHostProfile, ProfileSession } from 'vs/workbench/services/extensions/common/extensions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { tmpdir } from 'os';\nimport { join } from 'vs/base/common/path';\nimport { writeFile } from 'vs/base/node/pfs';\nimport { IExtensionHostProfileService, ReportExtensionIssueAction } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { localize } from 'vs/nls';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { RuntimeExtensionsInput } from 'vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport class ExtensionsAutoProfiler extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly _session = new Map<ICpuProfilerTarget, CancellationTokenSource>();\n\tprivate readonly _blame = new Set<string>();\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IExtensionHostProfileService private readonly _extensionProfileService: IExtensionHostProfileService,\n\t\t@IExtensionsWorkbenchService private readonly _anotherExtensionService: IExtensionsWorkbenchService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_extensionService.onDidChangeResponsiveChange(this._onDidChangeResponsiveChange, this));\n\t}\n\n\tprivate async _onDidChangeResponsiveChange(event: IResponsiveStateChangeEvent): Promise<void> {\n\t\tconst { target } = event;\n\n\t\tif (!target.canProfileExtensionHost()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.isResponsive && this._session.has(target)) {\n\t\t\t// stop profiling when responsive again\n\t\t\tthis._session.get(target)!.cancel();\n\n\t\t} else if (!event.isResponsive && !this._session.has(target)) {\n\t\t\t// start profiling if not yet profiling\n\t\t\tconst token = new CancellationTokenSource();\n\t\t\tthis._session.set(target, token);\n\n\t\t\tlet session: ProfileSession;\n\t\t\ttry {\n\t\t\t\tsession = await target.startExtensionHostProfile();\n\t\t\t} catch (err) {\n\t\t\t\tthis._session.delete(target);\n\t\t\t\t// fail silent as this is often\n\t\t\t\t// caused by another party being\n\t\t\t\t// connected already\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// wait 5 seconds or until responsive again\n\t\t\tawait new Promise(resolve => {\n\t\t\t\ttoken.token.onCancellationRequested(resolve);\n\t\t\t\tsetTimeout(resolve, 5e3);\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\t// stop profiling and analyse results\n\t\t\t\tthis._processCpuProfile(await session.stop());\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t} finally {\n\t\t\t\tthis._session.delete(target);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _processCpuProfile(profile: IExtensionHostProfile) {\n\n\t\tinterface NamedSlice {\n\t\t\tid: string;\n\t\t\ttotal: number;\n\t\t\tpercentage: number;\n\t\t}\n\n\t\tlet data: NamedSlice[] = [];\n\t\tfor (let i = 0; i < profile.ids.length; i++) {\n\t\t\tlet id = profile.ids[i];\n\t\t\tlet total = profile.deltas[i];\n\t\t\tdata.push({ id, total, percentage: 0 });\n\t\t}\n\n\t\t// merge data by identifier\n\t\tlet anchor = 0;\n\t\tdata.sort((a, b) => a.id.localeCompare(b.id));\n\t\tfor (let i = 1; i < data.length; i++) {\n\t\t\tif (data[anchor].id === data[i].id) {\n\t\t\t\tdata[anchor].total += data[i].total;\n\t\t\t} else {\n\t\t\t\tanchor += 1;\n\t\t\t\tdata[anchor] = data[i];\n\t\t\t}\n\t\t}\n\t\tdata = data.slice(0, anchor + 1);\n\n\t\tconst duration = profile.endTime - profile.startTime;\n\t\tconst percentage = duration / 100;\n\t\tlet top: NamedSlice | undefined;\n\t\tfor (const slice of data) {\n\t\t\tslice.percentage = Math.round(slice.total / percentage);\n\t\t\tif (!top || top.percentage < slice.percentage) {\n\t\t\t\ttop = slice;\n\t\t\t}\n\t\t}\n\n\t\tif (!top) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst extension = await this._extensionService.getExtension(top.id);\n\t\tif (!extension) {\n\t\t\t// not an extension => idle, gc, self?\n\t\t\treturn;\n\t\t}\n\n\t\t// add to running extensions view\n\t\tthis._extensionProfileService.setUnresponsiveProfile(extension.identifier, profile);\n\n\t\t// print message to log\n\t\tconst path = join(tmpdir(), `exthost-${Math.random().toString(16).slice(2, 8)}.cpuprofile`);\n\t\tawait writeFile(path, JSON.stringify(profile.data));\n\t\tthis._logService.warn(`UNRESPONSIVE extension host, '${top.id}' took ${top!.percentage}% of ${duration / 1e3}ms, saved PROFILE here: '${path}'`, data);\n\n\t\t// send telemetry\n\t\tconst id = generateUuid();\n\n\t\t/* __GDPR__\n\t\t\t\"exthostunresponsive\" : {\n\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\"duration\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\"data\": { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('exthostunresponsive', {\n\t\t\tid,\n\t\t\tduration,\n\t\t\tdata,\n\t\t});\n\n\t\t// prompt: when really slow/greedy\n\t\tif (!(top.percentage >= 99 && top.total >= 5e6)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// prompt: only when you can file an issue\n\t\tconst reportAction = new ReportExtensionIssueAction({\n\t\t\tmarketplaceInfo: this._anotherExtensionService.local.filter(value => ExtensionIdentifier.equals(value.identifier.id, extension.identifier))[0],\n\t\t\tdescription: extension,\n\t\t\tunresponsiveProfile: profile,\n\t\t\tstatus: undefined,\n\t\t});\n\t\tif (!reportAction.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\t// only blame once per extension, don't blame too often\n\t\tif (this._blame.has(ExtensionIdentifier.toKey(extension.identifier)) || this._blame.size >= 3) {\n\t\t\treturn;\n\t\t}\n\t\tthis._blame.add(ExtensionIdentifier.toKey(extension.identifier));\n\n\t\t// user-facing message when very bad...\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Warning,\n\t\t\tlocalize(\n\t\t\t\t'unresponsive-exthost',\n\t\t\t\t\"The extension '{0}' took a very long time to complete its last operation and it has prevented other extensions from running.\",\n\t\t\t\textension.displayName || extension.name\n\t\t\t),\n\t\t\t[{\n\t\t\t\tlabel: localize('show', 'Show Extensions'),\n\t\t\t\trun: () => this._editorService.openEditor(new RuntimeExtensionsInput())\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('report', \"Report Issue\"),\n\t\t\t\trun: () => {\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"exthostunresponsive/report\" : {\n\t\t\t\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tthis._telemetryService.publicLog('exthostunresponsive/report', { id });\n\t\t\t\t\treturn reportAction.run();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ silent: true }\n\t\t);\n\t}\n}\n"]}]}