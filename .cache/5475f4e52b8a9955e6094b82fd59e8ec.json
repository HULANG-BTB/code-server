{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files/node/watcher/nsfw/watcherService.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/parts/ipc/common/ipc\", \"vs/base/parts/ipc/node/ipc.cp\", \"vs/workbench/services/files/node/watcher/common\", \"vs/workbench/services/files/node/watcher/nsfw/watcherIpc\", \"vs/base/common/lifecycle\", \"vs/base/common/network\", \"vs/base/common/event\", \"vs/base/common/amd\"], function (require, exports, ipc_1, ipc_cp_1, common_1, watcherIpc_1, lifecycle_1, network_1, event_1, amd_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FileWatcher {\n        constructor(contextService, configurationService, onFileChanges, errorLogger, verboseLogging) {\n            this.contextService = contextService;\n            this.configurationService = configurationService;\n            this.onFileChanges = onFileChanges;\n            this.errorLogger = errorLogger;\n            this.verboseLogging = verboseLogging;\n            this.toDispose = [];\n            this.retry = require('vs/../../../../packages/vscode/src/workbench').workbench.retry.register('Watcher', () => this.startWatching());\n            this.isDisposed = false;\n            this.restartCounter = 0;\n        }\n        startWatching() {\n            const client = new ipc_cp_1.Client(amd_1.getPathFromAmdModule(require, 'bootstrap-fork'), {\n                serverName: 'File Watcher (nsfw)',\n                args: ['--type=watcherService'],\n                env: {\n                    AMD_ENTRYPOINT: 'vs/workbench/services/files/node/watcher/nsfw/watcherApp',\n                    PIPE_LOGGING: 'true',\n                    VERBOSE_LOGGING: this.verboseLogging\n                }\n            });\n            this.toDispose.push(client);\n            client.onDidProcessExit(() => {\n                // our watcher app should never be completed because it keeps on watching. being in here indicates\n                // that the watcher process died and we want to restart it here. we only do it a max number of times\n                if (!this.isDisposed) {\n                    this.toDispose = lifecycle_1.dispose(this.toDispose);\n                    return this.retry.run();\n                    if (this.restartCounter <= FileWatcher.MAX_RESTARTS) {\n                        this.errorLogger('[FileWatcher] terminated unexpectedly and is restarted again...');\n                        this.restartCounter++;\n                        this.startWatching();\n                    }\n                    else {\n                        this.errorLogger('[FileWatcher] failed to start after retrying for some time, giving up. Please report this as a bug report!');\n                    }\n                }\n            }, null, this.toDispose);\n            // Initialize watcher\n            const channel = ipc_1.getNextTickChannel(client.getChannel('watcher'));\n            this.service = new watcherIpc_1.WatcherChannelClient(channel);\n            const options = { verboseLogging: this.verboseLogging };\n            const onWatchEvent = event_1.Event.filter(this.service.watch(options), () => !this.isDisposed);\n            const onError = event_1.Event.filter(onWatchEvent, (e) => typeof e.message === 'string');\n            onError(err => this.errorLogger(err.message), null, this.toDispose);\n            const onFileChanges = event_1.Event.filter(onWatchEvent, (e) => Array.isArray(e) && e.length > 0);\n            onFileChanges(e => this.onFileChanges(common_1.toFileChangesEvent(e)), null, this.toDispose);\n            // Start watching\n            this.updateFolders();\n            this.toDispose.push(this.contextService.onDidChangeWorkspaceFolders(() => this.updateFolders()));\n            this.toDispose.push(this.configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration('files.watcherExclude')) {\n                    this.updateFolders();\n                }\n            }));\n            return () => this.dispose();\n        }\n        updateFolders() {\n            if (this.isDisposed) {\n                return;\n            }\n            this.service.setRoots(this.contextService.getWorkspace().folders.filter(folder => {\n                // Only workspace folders on disk\n                return folder.uri.scheme === network_1.Schemas.file;\n            }).map(folder => {\n                // Fetch the root's watcherExclude setting and return it\n                const configuration = this.configurationService.getValue({\n                    resource: folder.uri\n                });\n                let ignored = [];\n                if (configuration.files && configuration.files.watcherExclude) {\n                    ignored = Object.keys(configuration.files.watcherExclude).filter(k => !!configuration.files.watcherExclude[k]);\n                }\n                return {\n                    basePath: folder.uri.fsPath,\n                    ignored\n                };\n            })).then(() => this.retry.recover());\n        }\n        dispose() {\n            this.isDisposed = true;\n            this.toDispose = lifecycle_1.dispose(this.toDispose);\n        }\n    }\n    FileWatcher.MAX_RESTARTS = 5;\n    exports.FileWatcher = FileWatcher;\n});\n",null]}