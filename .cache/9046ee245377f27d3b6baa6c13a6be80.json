{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaState.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaState.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar TextAreaState = /** @class */ (function () {\n    function TextAreaState(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selectionStartPosition = selectionStartPosition;\n        this.selectionEndPosition = selectionEndPosition;\n    }\n    TextAreaState.prototype.toString = function () {\n        return '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ']';\n    };\n    TextAreaState.readFromTextArea = function (textArea) {\n        return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n    };\n    TextAreaState.prototype.collapseSelection = function () {\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n    };\n    TextAreaState.prototype.writeToTextArea = function (reason, textArea, select) {\n        // console.log(Date.now() + ': writeToTextArea ' + reason + ': ' + this.toString());\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    };\n    TextAreaState.prototype.deduceEditorPosition = function (offset) {\n        if (offset <= this.selectionStart) {\n            var str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            var str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n        }\n        var str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n        }\n        var str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n    };\n    TextAreaState.prototype._finishDeduceEditorPosition = function (anchor, deltaText, signum) {\n        var lineFeedCnt = 0;\n        var lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    };\n    TextAreaState.selectedText = function (text) {\n        return new TextAreaState(text, 0, text.length, null, null);\n    };\n    TextAreaState.deduceInput = function (previousState, currentState, couldBeEmojiInput, couldBeTypingAtOffset0) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replaceCharCnt: 0\n            };\n        }\n        // console.log('------------------------deduceInput');\n        // console.log('PREVIOUS STATE: ' + previousState.toString());\n        // console.log('CURRENT STATE: ' + currentState.toString());\n        var previousValue = previousState.value;\n        var previousSelectionStart = previousState.selectionStart;\n        var previousSelectionEnd = previousState.selectionEnd;\n        var currentValue = currentState.value;\n        var currentSelectionStart = currentState.selectionStart;\n        var currentSelectionEnd = currentState.selectionEnd;\n        if (couldBeTypingAtOffset0 && previousValue.length > 0 && previousSelectionStart === previousSelectionEnd && currentSelectionStart === currentSelectionEnd) {\n            // See https://github.com/Microsoft/vscode/issues/42251\n            // where typing always happens at offset 0 in the textarea\n            // when using a custom title area in OSX and moving the window\n            if (!strings.startsWith(currentValue, previousValue) && strings.endsWith(currentValue, previousValue)) {\n                // Looks like something was typed at offset 0\n                // ==> pretend we placed the cursor at offset 0 to begin with...\n                previousSelectionStart = 0;\n                previousSelectionEnd = 0;\n            }\n        }\n        // Strip the previous suffix from the value (without interfering with the current selection)\n        var previousSuffix = previousValue.substring(previousSelectionEnd);\n        var currentSuffix = currentValue.substring(currentSelectionEnd);\n        var suffixLength = strings.commonSuffixLength(previousSuffix, currentSuffix);\n        currentValue = currentValue.substring(0, currentValue.length - suffixLength);\n        previousValue = previousValue.substring(0, previousValue.length - suffixLength);\n        var previousPrefix = previousValue.substring(0, previousSelectionStart);\n        var currentPrefix = currentValue.substring(0, currentSelectionStart);\n        var prefixLength = strings.commonPrefixLength(previousPrefix, currentPrefix);\n        currentValue = currentValue.substring(prefixLength);\n        previousValue = previousValue.substring(prefixLength);\n        currentSelectionStart -= prefixLength;\n        previousSelectionStart -= prefixLength;\n        currentSelectionEnd -= prefixLength;\n        previousSelectionEnd -= prefixLength;\n        // console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\n        // console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\n        if (couldBeEmojiInput && currentSelectionStart === currentSelectionEnd && previousValue.length > 0) {\n            // on OSX, emojis from the emoji picker are inserted at random locations\n            // the only hints we can use is that the selection is immediately after the inserted emoji\n            // and that none of the old text has been deleted\n            var potentialEmojiInput = null;\n            if (currentSelectionStart === currentValue.length) {\n                // emoji potentially inserted \"somewhere\" after the previous selection => it should appear at the end of `currentValue`\n                if (strings.startsWith(currentValue, previousValue)) {\n                    // only if all of the old text is accounted for\n                    potentialEmojiInput = currentValue.substring(previousValue.length);\n                }\n            }\n            else {\n                // emoji potentially inserted \"somewhere\" before the previous selection => it should appear at the start of `currentValue`\n                if (strings.endsWith(currentValue, previousValue)) {\n                    // only if all of the old text is accounted for\n                    potentialEmojiInput = currentValue.substring(0, currentValue.length - previousValue.length);\n                }\n            }\n            if (potentialEmojiInput !== null && potentialEmojiInput.length > 0) {\n                // now we check that this is indeed an emoji\n                // emojis can grow quite long, so a length check is of no help\n                // e.g. 1F3F4 E0067 E0062 E0065 E006E E0067 E007F  ; fully-qualified     # 🏴󠁧󠁢󠁥󠁮󠁧󠁿 England\n                // Oftentimes, emojis use Variation Selector-16 (U+FE0F), so that is a good hint\n                // http://emojipedia.org/variation-selector-16/\n                // > An invisible codepoint which specifies that the preceding character\n                // > should be displayed with emoji presentation. Only required if the\n                // > preceding character defaults to text presentation.\n                if (/\\uFE0F/.test(potentialEmojiInput) || strings.containsEmoji(potentialEmojiInput)) {\n                    return {\n                        text: potentialEmojiInput,\n                        replaceCharCnt: 0\n                    };\n                }\n            }\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // composition accept case (noticed in FF + Japanese)\n            // [blahblah] => blahblah|\n            if (previousValue === currentValue\n                && previousSelectionStart === 0\n                && previousSelectionEnd === previousValue.length\n                && currentSelectionStart === currentValue.length\n                && currentValue.indexOf('\\n') === -1) {\n                if (strings.containsFullWidthCharacter(currentValue)) {\n                    return {\n                        text: '',\n                        replaceCharCnt: 0\n                    };\n                }\n            }\n            // no current selection\n            var replacePreviousCharacters_1 = (previousPrefix.length - prefixLength);\n            // console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\n            return {\n                text: currentValue,\n                replaceCharCnt: replacePreviousCharacters_1\n            };\n        }\n        // there is a current selection => composition case\n        var replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replaceCharCnt: replacePreviousCharacters\n        };\n    };\n    TextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\n    return TextAreaState;\n}());\nexports.TextAreaState = TextAreaState;\nvar PagedScreenReaderStrategy = /** @class */ (function () {\n    function PagedScreenReaderStrategy() {\n    }\n    PagedScreenReaderStrategy._getPageOfLine = function (lineNumber) {\n        return Math.floor((lineNumber - 1) / PagedScreenReaderStrategy._LINES_PER_PAGE);\n    };\n    PagedScreenReaderStrategy._getRangeForPage = function (page) {\n        var offset = page * PagedScreenReaderStrategy._LINES_PER_PAGE;\n        var startLineNumber = offset + 1;\n        var endLineNumber = offset + PagedScreenReaderStrategy._LINES_PER_PAGE;\n        return new range_1.Range(startLineNumber, 1, endLineNumber + 1, 1);\n    };\n    PagedScreenReaderStrategy.fromEditorSelection = function (previousState, model, selection, trimLongText) {\n        var selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber);\n        var selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage);\n        var selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber);\n        var selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage);\n        var pretextRange = selectionStartPageRange.intersectRanges(new range_1.Range(1, 1, selection.startLineNumber, selection.startColumn));\n        var pretext = model.getValueInRange(pretextRange, model_1.EndOfLinePreference.LF);\n        var lastLine = model.getLineCount();\n        var lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        var posttextRange = selectionEndPageRange.intersectRanges(new range_1.Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        var posttext = model.getValueInRange(posttextRange, model_1.EndOfLinePreference.LF);\n        var text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, model_1.EndOfLinePreference.LF);\n        }\n        else {\n            var selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            var selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, model_1.EndOfLinePreference.LF)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, model_1.EndOfLinePreference.LF));\n        }\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        if (trimLongText) {\n            var LIMIT_CHARS = 500;\n            if (pretext.length > LIMIT_CHARS) {\n                pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n            }\n            if (posttext.length > LIMIT_CHARS) {\n                posttext = posttext.substring(0, LIMIT_CHARS);\n            }\n            if (text.length > 2 * LIMIT_CHARS) {\n                text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n            }\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new position_1.Position(selection.startLineNumber, selection.startColumn), new position_1.Position(selection.endLineNumber, selection.endColumn));\n    };\n    PagedScreenReaderStrategy._LINES_PER_PAGE = 10;\n    return PagedScreenReaderStrategy;\n}());\nexports.PagedScreenReaderStrategy = PagedScreenReaderStrategy;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaState.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/textAreaState.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gDAAkD;AAClD,2DAA0D;AAC1D,qDAAoD;AACpD,gDAA6D;AAsB7D;IAUC,uBAAY,KAAa,EAAE,cAAsB,EAAE,YAAoB,EAAE,sBAAuC,EAAE,oBAAqC;QACtJ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACrD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IAClD,CAAC;IAEM,gCAAQ,GAAf;QACC,OAAO,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,qBAAqB,GAAG,IAAI,CAAC,cAAc,GAAG,kBAAkB,GAAG,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IACxH,CAAC;IAEa,8BAAgB,GAA9B,UAA+B,QAA0B;QACxD,OAAO,IAAI,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,EAAE,QAAQ,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACrH,CAAC;IAEM,yCAAiB,GAAxB;QACC,OAAO,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACxF,CAAC;IAEM,uCAAe,GAAtB,UAAuB,MAAc,EAAE,QAA0B,EAAE,MAAe;QACjF,oFAAoF;QACpF,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE;YACX,QAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SAC3E;IACF,CAAC;IAEM,4CAAoB,GAA3B,UAA4B,MAAc;QACzC,IAAI,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;YAClC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC9D,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;SAC9E;QACD,IAAI,MAAM,IAAI,IAAI,CAAC,YAAY,EAAE;YAChC,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAC5D,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;SAC3E;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QAC/D,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YACnD,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SAC9E;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,OAAO,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEO,mDAA2B,GAAnC,UAAoC,MAAuB,EAAE,SAAiB,EAAE,MAAc;QAC7F,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;QAC3B,OAAO,CAAC,iBAAiB,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;YACnF,WAAW,EAAE,CAAC;SACd;QACD,OAAO,CAAC,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IACzD,CAAC;IAEa,0BAAY,GAA1B,UAA2B,IAAY;QACtC,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAEa,yBAAW,GAAzB,UAA0B,aAA4B,EAAE,YAA2B,EAAE,iBAA0B,EAAE,sBAA+B;QAC/I,IAAI,CAAC,aAAa,EAAE;YACnB,0BAA0B;YAC1B,OAAO;gBACN,IAAI,EAAE,EAAE;gBACR,cAAc,EAAE,CAAC;aACjB,CAAC;SACF;QAED,sDAAsD;QACtD,8DAA8D;QAC9D,4DAA4D;QAE5D,IAAI,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC;QACxC,IAAI,sBAAsB,GAAG,aAAa,CAAC,cAAc,CAAC;QAC1D,IAAI,oBAAoB,GAAG,aAAa,CAAC,YAAY,CAAC;QACtD,IAAI,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC;QACtC,IAAI,qBAAqB,GAAG,YAAY,CAAC,cAAc,CAAC;QACxD,IAAI,mBAAmB,GAAG,YAAY,CAAC,YAAY,CAAC;QAEpD,IAAI,sBAAsB,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,IAAI,sBAAsB,KAAK,oBAAoB,IAAI,qBAAqB,KAAK,mBAAmB,EAAE;YAC3J,uDAAuD;YACvD,0DAA0D;YAC1D,8DAA8D;YAC9D,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,EAAE,aAAa,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;gBACtG,6CAA6C;gBAC7C,gEAAgE;gBAChE,sBAAsB,GAAG,CAAC,CAAC;gBAC3B,oBAAoB,GAAG,CAAC,CAAC;aACzB;SACD;QAED,4FAA4F;QAC5F,IAAM,cAAc,GAAG,aAAa,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;QACrE,IAAM,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAClE,IAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC/E,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;QAC7E,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;QAEhF,IAAM,cAAc,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;QAC1E,IAAM,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAC;QACvE,IAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC/E,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACpD,aAAa,GAAG,aAAa,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACtD,qBAAqB,IAAI,YAAY,CAAC;QACtC,sBAAsB,IAAI,YAAY,CAAC;QACvC,mBAAmB,IAAI,YAAY,CAAC;QACpC,oBAAoB,IAAI,YAAY,CAAC;QAErC,+JAA+J;QAC/J,2JAA2J;QAE3J,IAAI,iBAAiB,IAAI,qBAAqB,KAAK,mBAAmB,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;YACnG,wEAAwE;YACxE,0FAA0F;YAC1F,iDAAiD;YAEjD,IAAI,mBAAmB,GAAkB,IAAI,CAAC;YAE9C,IAAI,qBAAqB,KAAK,YAAY,CAAC,MAAM,EAAE;gBAClD,uHAAuH;gBACvH,IAAI,OAAO,CAAC,UAAU,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;oBACpD,+CAA+C;oBAC/C,mBAAmB,GAAG,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;iBACnE;aACD;iBAAM;gBACN,0HAA0H;gBAC1H,IAAI,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,EAAE;oBAClD,+CAA+C;oBAC/C,mBAAmB,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;iBAC5F;aACD;YAED,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnE,4CAA4C;gBAC5C,8DAA8D;gBAC9D,iGAAiG;gBAEjG,gFAAgF;gBAChF,+CAA+C;gBAC/C,wEAAwE;gBACxE,sEAAsE;gBACtE,uDAAuD;gBACvD,IAAI,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE;oBACrF,OAAO;wBACN,IAAI,EAAE,mBAAmB;wBACzB,cAAc,EAAE,CAAC;qBACjB,CAAC;iBACF;aACD;SACD;QAED,IAAI,qBAAqB,KAAK,mBAAmB,EAAE;YAClD,qDAAqD;YACrD,0BAA0B;YAC1B,IACC,aAAa,KAAK,YAAY;mBAC3B,sBAAsB,KAAK,CAAC;mBAC5B,oBAAoB,KAAK,aAAa,CAAC,MAAM;mBAC7C,qBAAqB,KAAK,YAAY,CAAC,MAAM;mBAC7C,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EACnC;gBACD,IAAI,OAAO,CAAC,0BAA0B,CAAC,YAAY,CAAC,EAAE;oBACrD,OAAO;wBACN,IAAI,EAAE,EAAE;wBACR,cAAc,EAAE,CAAC;qBACjB,CAAC;iBACF;aACD;YAED,uBAAuB;YACvB,IAAM,2BAAyB,GAAG,CAAC,cAAc,CAAC,MAAM,GAAG,YAAY,CAAC,CAAC;YACzE,wFAAwF;YAExF,OAAO;gBACN,IAAI,EAAE,YAAY;gBAClB,cAAc,EAAE,2BAAyB;aACzC,CAAC;SACF;QAED,mDAAmD;QACnD,IAAM,yBAAyB,GAAG,oBAAoB,GAAG,sBAAsB,CAAC;QAChF,OAAO;YACN,IAAI,EAAE,YAAY;YAClB,cAAc,EAAE,yBAAyB;SACzC,CAAC;IACH,CAAC;IAhMsB,mBAAK,GAAG,IAAI,aAAa,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAiMxE,oBAAC;CAAA,AAnMD,IAmMC;AAnMY,sCAAa;AAqM1B;IAAA;IA8DA,CAAC;IA3De,wCAAc,GAA7B,UAA8B,UAAkB;QAC/C,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,yBAAyB,CAAC,eAAe,CAAC,CAAC;IACjF,CAAC;IAEc,0CAAgB,GAA/B,UAAgC,IAAY;QAC3C,IAAM,MAAM,GAAG,IAAI,GAAG,yBAAyB,CAAC,eAAe,CAAC;QAChE,IAAM,eAAe,GAAG,MAAM,GAAG,CAAC,CAAC;QACnC,IAAM,aAAa,GAAG,MAAM,GAAG,yBAAyB,CAAC,eAAe,CAAC;QACzE,OAAO,IAAI,aAAK,CAAC,eAAe,EAAE,CAAC,EAAE,aAAa,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEa,6CAAmB,GAAjC,UAAkC,aAA4B,EAAE,KAAmB,EAAE,SAAgB,EAAE,YAAqB;QAE3H,IAAM,kBAAkB,GAAG,yBAAyB,CAAC,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC/F,IAAM,uBAAuB,GAAG,yBAAyB,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAE/F,IAAM,gBAAgB,GAAG,yBAAyB,CAAC,cAAc,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;QAC3F,IAAM,qBAAqB,GAAG,yBAAyB,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;QAE3F,IAAM,YAAY,GAAG,uBAAuB,CAAC,eAAe,CAAC,IAAI,aAAK,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,WAAW,CAAC,CAAE,CAAC;QACjI,IAAI,OAAO,GAAG,KAAK,CAAC,eAAe,CAAC,YAAY,EAAE,2BAAmB,CAAC,EAAE,CAAC,CAAC;QAE1E,IAAM,QAAQ,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QACtC,IAAM,iBAAiB,GAAG,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC3D,IAAM,aAAa,GAAG,qBAAqB,CAAC,eAAe,CAAC,IAAI,aAAK,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAAE,CAAC;QACnJ,IAAI,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC,aAAa,EAAE,2BAAmB,CAAC,EAAE,CAAC,CAAC;QAG5E,IAAI,IAAY,CAAC;QACjB,IAAI,kBAAkB,KAAK,gBAAgB,IAAI,kBAAkB,GAAG,CAAC,KAAK,gBAAgB,EAAE;YAC3F,sBAAsB;YACtB,IAAI,GAAG,KAAK,CAAC,eAAe,CAAC,SAAS,EAAE,2BAAmB,CAAC,EAAE,CAAC,CAAC;SAChE;aAAM;YACN,IAAM,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC,SAAS,CAAE,CAAC;YAC5E,IAAM,eAAe,GAAG,qBAAqB,CAAC,eAAe,CAAC,SAAS,CAAE,CAAC;YAC1E,IAAI,GAAG,CACN,KAAK,CAAC,eAAe,CAAC,eAAe,EAAE,2BAAmB,CAAC,EAAE,CAAC;kBAC5D,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;kBACzB,KAAK,CAAC,eAAe,CAAC,eAAe,EAAE,2BAAmB,CAAC,EAAE,CAAC,CAChE,CAAC;SACF;QAED,iEAAiE;QACjE,2CAA2C;QAC3C,IAAI,YAAY,EAAE;YACjB,IAAM,WAAW,GAAG,GAAG,CAAC;YACxB,IAAI,OAAO,CAAC,MAAM,GAAG,WAAW,EAAE;gBACjC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,WAAW,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;aAC1E;YACD,IAAI,QAAQ,CAAC,MAAM,GAAG,WAAW,EAAE;gBAClC,QAAQ,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;aAC9C;YACD,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,EAAE;gBAClC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aAC3H;SACD;QAED,OAAO,IAAI,aAAa,CAAC,OAAO,GAAG,IAAI,GAAG,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,mBAAQ,CAAC,SAAS,CAAC,eAAe,EAAE,SAAS,CAAC,WAAW,CAAC,EAAE,IAAI,mBAAQ,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC/N,CAAC;IA5DuB,yCAAe,GAAG,EAAE,CAAC;IA6D9C,gCAAC;CAAA,AA9DD,IA8DC;AA9DY,8DAAyB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EndOfLinePreference } from 'vs/editor/common/model';\n\nexport interface ITextAreaWrapper {\n\tgetValue(): string;\n\tsetValue(reason: string, value: string): void;\n\n\tgetSelectionStart(): number;\n\tgetSelectionEnd(): number;\n\tsetSelectionRange(reason: string, selectionStart: number, selectionEnd: number): void;\n}\n\nexport interface ISimpleModel {\n\tgetLineCount(): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n}\n\nexport interface ITypeData {\n\ttext: string;\n\treplaceCharCnt: number;\n}\n\nexport class TextAreaState {\n\n\tpublic static readonly EMPTY = new TextAreaState('', 0, 0, null, null);\n\n\tpublic readonly value: string;\n\tpublic readonly selectionStart: number;\n\tpublic readonly selectionEnd: number;\n\tpublic readonly selectionStartPosition: Position | null;\n\tpublic readonly selectionEndPosition: Position | null;\n\n\tconstructor(value: string, selectionStart: number, selectionEnd: number, selectionStartPosition: Position | null, selectionEndPosition: Position | null) {\n\t\tthis.value = value;\n\t\tthis.selectionStart = selectionStart;\n\t\tthis.selectionEnd = selectionEnd;\n\t\tthis.selectionStartPosition = selectionStartPosition;\n\t\tthis.selectionEndPosition = selectionEndPosition;\n\t}\n\n\tpublic toString(): string {\n\t\treturn '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ']';\n\t}\n\n\tpublic static readFromTextArea(textArea: ITextAreaWrapper): TextAreaState {\n\t\treturn new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n\t}\n\n\tpublic collapseSelection(): TextAreaState {\n\t\treturn new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n\t}\n\n\tpublic writeToTextArea(reason: string, textArea: ITextAreaWrapper, select: boolean): void {\n\t\t// console.log(Date.now() + ': writeToTextArea ' + reason + ': ' + this.toString());\n\t\ttextArea.setValue(reason, this.value);\n\t\tif (select) {\n\t\t\ttextArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n\t\t}\n\t}\n\n\tpublic deduceEditorPosition(offset: number): [Position | null, number, number] {\n\t\tif (offset <= this.selectionStart) {\n\t\t\tconst str = this.value.substring(offset, this.selectionStart);\n\t\t\treturn this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n\t\t}\n\t\tif (offset >= this.selectionEnd) {\n\t\t\tconst str = this.value.substring(this.selectionEnd, offset);\n\t\t\treturn this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n\t\t}\n\t\tconst str1 = this.value.substring(this.selectionStart, offset);\n\t\tif (str1.indexOf(String.fromCharCode(8230)) === -1) {\n\t\t\treturn this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n\t\t}\n\t\tconst str2 = this.value.substring(offset, this.selectionEnd);\n\t\treturn this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n\t}\n\n\tprivate _finishDeduceEditorPosition(anchor: Position | null, deltaText: string, signum: number): [Position | null, number, number] {\n\t\tlet lineFeedCnt = 0;\n\t\tlet lastLineFeedIndex = -1;\n\t\twhile ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n\t\t\tlineFeedCnt++;\n\t\t}\n\t\treturn [anchor, signum * deltaText.length, lineFeedCnt];\n\t}\n\n\tpublic static selectedText(text: string): TextAreaState {\n\t\treturn new TextAreaState(text, 0, text.length, null, null);\n\t}\n\n\tpublic static deduceInput(previousState: TextAreaState, currentState: TextAreaState, couldBeEmojiInput: boolean, couldBeTypingAtOffset0: boolean): ITypeData {\n\t\tif (!previousState) {\n\t\t\t// This is the EMPTY state\n\t\t\treturn {\n\t\t\t\ttext: '',\n\t\t\t\treplaceCharCnt: 0\n\t\t\t};\n\t\t}\n\n\t\t// console.log('------------------------deduceInput');\n\t\t// console.log('PREVIOUS STATE: ' + previousState.toString());\n\t\t// console.log('CURRENT STATE: ' + currentState.toString());\n\n\t\tlet previousValue = previousState.value;\n\t\tlet previousSelectionStart = previousState.selectionStart;\n\t\tlet previousSelectionEnd = previousState.selectionEnd;\n\t\tlet currentValue = currentState.value;\n\t\tlet currentSelectionStart = currentState.selectionStart;\n\t\tlet currentSelectionEnd = currentState.selectionEnd;\n\n\t\tif (couldBeTypingAtOffset0 && previousValue.length > 0 && previousSelectionStart === previousSelectionEnd && currentSelectionStart === currentSelectionEnd) {\n\t\t\t// See https://github.com/Microsoft/vscode/issues/42251\n\t\t\t// where typing always happens at offset 0 in the textarea\n\t\t\t// when using a custom title area in OSX and moving the window\n\t\t\tif (!strings.startsWith(currentValue, previousValue) && strings.endsWith(currentValue, previousValue)) {\n\t\t\t\t// Looks like something was typed at offset 0\n\t\t\t\t// ==> pretend we placed the cursor at offset 0 to begin with...\n\t\t\t\tpreviousSelectionStart = 0;\n\t\t\t\tpreviousSelectionEnd = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Strip the previous suffix from the value (without interfering with the current selection)\n\t\tconst previousSuffix = previousValue.substring(previousSelectionEnd);\n\t\tconst currentSuffix = currentValue.substring(currentSelectionEnd);\n\t\tconst suffixLength = strings.commonSuffixLength(previousSuffix, currentSuffix);\n\t\tcurrentValue = currentValue.substring(0, currentValue.length - suffixLength);\n\t\tpreviousValue = previousValue.substring(0, previousValue.length - suffixLength);\n\n\t\tconst previousPrefix = previousValue.substring(0, previousSelectionStart);\n\t\tconst currentPrefix = currentValue.substring(0, currentSelectionStart);\n\t\tconst prefixLength = strings.commonPrefixLength(previousPrefix, currentPrefix);\n\t\tcurrentValue = currentValue.substring(prefixLength);\n\t\tpreviousValue = previousValue.substring(prefixLength);\n\t\tcurrentSelectionStart -= prefixLength;\n\t\tpreviousSelectionStart -= prefixLength;\n\t\tcurrentSelectionEnd -= prefixLength;\n\t\tpreviousSelectionEnd -= prefixLength;\n\n\t\t// console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\n\t\t// console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\n\n\t\tif (couldBeEmojiInput && currentSelectionStart === currentSelectionEnd && previousValue.length > 0) {\n\t\t\t// on OSX, emojis from the emoji picker are inserted at random locations\n\t\t\t// the only hints we can use is that the selection is immediately after the inserted emoji\n\t\t\t// and that none of the old text has been deleted\n\n\t\t\tlet potentialEmojiInput: string | null = null;\n\n\t\t\tif (currentSelectionStart === currentValue.length) {\n\t\t\t\t// emoji potentially inserted \"somewhere\" after the previous selection => it should appear at the end of `currentValue`\n\t\t\t\tif (strings.startsWith(currentValue, previousValue)) {\n\t\t\t\t\t// only if all of the old text is accounted for\n\t\t\t\t\tpotentialEmojiInput = currentValue.substring(previousValue.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// emoji potentially inserted \"somewhere\" before the previous selection => it should appear at the start of `currentValue`\n\t\t\t\tif (strings.endsWith(currentValue, previousValue)) {\n\t\t\t\t\t// only if all of the old text is accounted for\n\t\t\t\t\tpotentialEmojiInput = currentValue.substring(0, currentValue.length - previousValue.length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (potentialEmojiInput !== null && potentialEmojiInput.length > 0) {\n\t\t\t\t// now we check that this is indeed an emoji\n\t\t\t\t// emojis can grow quite long, so a length check is of no help\n\t\t\t\t// e.g. 1F3F4 E0067 E0062 E0065 E006E E0067 E007F  ; fully-qualified     # 🏴󠁧󠁢󠁥󠁮󠁧󠁿 England\n\n\t\t\t\t// Oftentimes, emojis use Variation Selector-16 (U+FE0F), so that is a good hint\n\t\t\t\t// http://emojipedia.org/variation-selector-16/\n\t\t\t\t// > An invisible codepoint which specifies that the preceding character\n\t\t\t\t// > should be displayed with emoji presentation. Only required if the\n\t\t\t\t// > preceding character defaults to text presentation.\n\t\t\t\tif (/\\uFE0F/.test(potentialEmojiInput) || strings.containsEmoji(potentialEmojiInput)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: potentialEmojiInput,\n\t\t\t\t\t\treplaceCharCnt: 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSelectionStart === currentSelectionEnd) {\n\t\t\t// composition accept case (noticed in FF + Japanese)\n\t\t\t// [blahblah] => blahblah|\n\t\t\tif (\n\t\t\t\tpreviousValue === currentValue\n\t\t\t\t&& previousSelectionStart === 0\n\t\t\t\t&& previousSelectionEnd === previousValue.length\n\t\t\t\t&& currentSelectionStart === currentValue.length\n\t\t\t\t&& currentValue.indexOf('\\n') === -1\n\t\t\t) {\n\t\t\t\tif (strings.containsFullWidthCharacter(currentValue)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\treplaceCharCnt: 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// no current selection\n\t\t\tconst replacePreviousCharacters = (previousPrefix.length - prefixLength);\n\t\t\t// console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\n\n\t\t\treturn {\n\t\t\t\ttext: currentValue,\n\t\t\t\treplaceCharCnt: replacePreviousCharacters\n\t\t\t};\n\t\t}\n\n\t\t// there is a current selection => composition case\n\t\tconst replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n\t\treturn {\n\t\t\ttext: currentValue,\n\t\t\treplaceCharCnt: replacePreviousCharacters\n\t\t};\n\t}\n}\n\nexport class PagedScreenReaderStrategy {\n\tprivate static readonly _LINES_PER_PAGE = 10;\n\n\tprivate static _getPageOfLine(lineNumber: number): number {\n\t\treturn Math.floor((lineNumber - 1) / PagedScreenReaderStrategy._LINES_PER_PAGE);\n\t}\n\n\tprivate static _getRangeForPage(page: number): Range {\n\t\tconst offset = page * PagedScreenReaderStrategy._LINES_PER_PAGE;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = offset + PagedScreenReaderStrategy._LINES_PER_PAGE;\n\t\treturn new Range(startLineNumber, 1, endLineNumber + 1, 1);\n\t}\n\n\tpublic static fromEditorSelection(previousState: TextAreaState, model: ISimpleModel, selection: Range, trimLongText: boolean): TextAreaState {\n\n\t\tconst selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber);\n\t\tconst selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage);\n\n\t\tconst selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber);\n\t\tconst selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage);\n\n\t\tconst pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn))!;\n\t\tlet pretext = model.getValueInRange(pretextRange, EndOfLinePreference.LF);\n\n\t\tconst lastLine = model.getLineCount();\n\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tconst posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn))!;\n\t\tlet posttext = model.getValueInRange(posttextRange, EndOfLinePreference.LF);\n\n\n\t\tlet text: string;\n\t\tif (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n\t\t\t// take full selection\n\t\t\ttext = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\t} else {\n\t\t\tconst selectionRange1 = selectionStartPageRange.intersectRanges(selection)!;\n\t\t\tconst selectionRange2 = selectionEndPageRange.intersectRanges(selection)!;\n\t\t\ttext = (\n\t\t\t\tmodel.getValueInRange(selectionRange1, EndOfLinePreference.LF)\n\t\t\t\t+ String.fromCharCode(8230)\n\t\t\t\t+ model.getValueInRange(selectionRange2, EndOfLinePreference.LF)\n\t\t\t);\n\t\t}\n\n\t\t// Chromium handles very poorly text even of a few thousand chars\n\t\t// Cut text to avoid stalling the entire UI\n\t\tif (trimLongText) {\n\t\t\tconst LIMIT_CHARS = 500;\n\t\t\tif (pretext.length > LIMIT_CHARS) {\n\t\t\t\tpretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n\t\t\t}\n\t\t\tif (posttext.length > LIMIT_CHARS) {\n\t\t\t\tposttext = posttext.substring(0, LIMIT_CHARS);\n\t\t\t}\n\t\t\tif (text.length > 2 * LIMIT_CHARS) {\n\t\t\t\ttext = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n\t\t\t}\n\t\t}\n\n\t\treturn new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n\t}\n}\n"]}]}