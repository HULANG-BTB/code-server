{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/state/node/stateService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/state/node/stateService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"fs\", \"vs/platform/environment/common/environment\", \"vs/base/node/extfs\", \"vs/base/common/types\", \"vs/platform/log/common/log\", \"vs/base/node/pfs\"], function (require, exports, path, fs, environment_1, extfs_1, types_1, log_1, pfs_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FileStorage {\n        constructor(dbPath, onError) {\n            this.dbPath = dbPath;\n            this.onError = onError;\n            this._database = null;\n            this.lastFlushedSerializedDatabase = null;\n        }\n        get database() {\n            if (!this._database) {\n                this._database = this.loadSync();\n            }\n            return this._database;\n        }\n        init() {\n            return pfs_1.readFile(this.dbPath).then(contents => {\n                try {\n                    this.lastFlushedSerializedDatabase = contents.toString();\n                    this._database = JSON.parse(this.lastFlushedSerializedDatabase);\n                }\n                catch (error) {\n                    this._database = {};\n                }\n            }, error => {\n                if (error.code !== 'ENOENT') {\n                    this.onError(error);\n                }\n                this._database = {};\n            });\n        }\n        loadSync() {\n            try {\n                this.lastFlushedSerializedDatabase = fs.readFileSync(this.dbPath).toString();\n                return JSON.parse(this.lastFlushedSerializedDatabase);\n            }\n            catch (error) {\n                if (error.code !== 'ENOENT') {\n                    this.onError(error);\n                }\n                return {};\n            }\n        }\n        getItem(key, defaultValue) {\n            const res = this.database[key];\n            if (types_1.isUndefinedOrNull(res)) {\n                return defaultValue;\n            }\n            return res;\n        }\n        setItem(key, data) {\n            // Remove an item when it is undefined or null\n            if (types_1.isUndefinedOrNull(data)) {\n                return this.removeItem(key);\n            }\n            // Shortcut for primitives that did not change\n            if (typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {\n                if (this.database[key] === data) {\n                    return;\n                }\n            }\n            this.database[key] = data;\n            this.saveSync();\n        }\n        removeItem(key) {\n            // Only update if the key is actually present (not undefined)\n            if (!types_1.isUndefined(this.database[key])) {\n                this.database[key] = undefined;\n                this.saveSync();\n            }\n        }\n        saveSync() {\n            const serializedDatabase = JSON.stringify(this.database, null, 4);\n            if (serializedDatabase === this.lastFlushedSerializedDatabase) {\n                return; // return early if the database has not changed\n            }\n            try {\n                extfs_1.writeFileAndFlushSync(this.dbPath, serializedDatabase); // permission issue can happen here\n                this.lastFlushedSerializedDatabase = serializedDatabase;\n            }\n            catch (error) {\n                this.onError(error);\n            }\n        }\n    }\n    exports.FileStorage = FileStorage;\n    let StateService = class StateService {\n        constructor(environmentService, logService) {\n            this.fileStorage = new FileStorage(path.join(environmentService.userDataPath, StateService.STATE_FILE), error => logService.error(error));\n        }\n        init() {\n            return this.fileStorage.init();\n        }\n        getItem(key, defaultValue) {\n            return this.fileStorage.getItem(key, defaultValue);\n        }\n        setItem(key, data) {\n            this.fileStorage.setItem(key, data);\n        }\n        removeItem(key) {\n            this.fileStorage.removeItem(key);\n        }\n    };\n    StateService.STATE_FILE = 'storage.json';\n    StateService = __decorate([\n        __param(0, environment_1.IEnvironmentService),\n        __param(1, log_1.ILogService)\n    ], StateService);\n    exports.StateService = StateService;\n});\n",null]}