{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/tokenizationRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/editor/common/modes\", \"vs/base/common/types\", \"vs/base/common/map\"], function (require, exports, event_1, lifecycle_1, modes_1, types_1, map_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TokenizationRegistryImpl {\n        constructor() {\n            this._map = new Map();\n            this._promises = new Map();\n            this._onDidChange = new event_1.Emitter();\n            this.onDidChange = this._onDidChange.event;\n            this._colorMap = null;\n        }\n        fire(languages) {\n            this._onDidChange.fire({\n                changedLanguages: languages,\n                changedColorMap: false\n            });\n        }\n        register(language, support) {\n            this._map.set(language, support);\n            this.fire([language]);\n            return lifecycle_1.toDisposable(() => {\n                if (this._map.get(language) !== support) {\n                    return;\n                }\n                this._map.delete(language);\n                this.fire([language]);\n            });\n        }\n        registerPromise(language, supportPromise) {\n            let registration = null;\n            let isDisposed = false;\n            this._promises.set(language, supportPromise.then(support => {\n                this._promises.delete(language);\n                if (isDisposed || !support) {\n                    return;\n                }\n                registration = this.register(language, support);\n            }));\n            return lifecycle_1.toDisposable(() => {\n                isDisposed = true;\n                if (registration) {\n                    registration.dispose();\n                }\n            });\n        }\n        getPromise(language) {\n            const support = this.get(language);\n            if (support) {\n                return Promise.resolve(support);\n            }\n            const promise = this._promises.get(language);\n            if (promise) {\n                return promise.then(_ => this.get(language));\n            }\n            return null;\n        }\n        get(language) {\n            return types_1.withUndefinedAsNull(this._map.get(language));\n        }\n        setColorMap(colorMap) {\n            this._colorMap = colorMap;\n            this._onDidChange.fire({\n                changedLanguages: map_1.keys(this._map),\n                changedColorMap: true\n            });\n        }\n        getColorMap() {\n            return this._colorMap;\n        }\n        getDefaultBackground() {\n            if (this._colorMap && this._colorMap.length > modes_1.ColorId.DefaultBackground) {\n                return this._colorMap[modes_1.ColorId.DefaultBackground];\n            }\n            return null;\n        }\n    }\n    exports.TokenizationRegistryImpl = TokenizationRegistryImpl;\n});\n",null]}