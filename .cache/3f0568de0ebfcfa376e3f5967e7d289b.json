{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorWorkerServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorWorkerServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar simpleWorker_1 = require(\"vs/base/common/worker/simpleWorker\");\nvar defaultWorkerFactory_1 = require(\"vs/base/worker/defaultWorkerFactory\");\nvar modes = require(\"vs/editor/common/modes\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar editorSimpleWorker_1 = require(\"vs/editor/common/services/editorSimpleWorker\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\n/**\n * Stop syncing a model to the worker if it was not needed for 1 min.\n */\nvar STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nvar STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\nfunction canSyncModel(modelService, resource) {\n    var model = modelService.getModel(resource);\n    if (!model) {\n        return false;\n    }\n    if (model.isTooLargeForSyncing()) {\n        return false;\n    }\n    return true;\n}\nvar EditorWorkerServiceImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorWorkerServiceImpl, _super);\n    function EditorWorkerServiceImpl(modelService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this._modelService = modelService;\n        _this._workerManager = _this._register(new WorkerManager(_this._modelService));\n        // todo@joh make sure this happens only once\n        _this._register(modes.LinkProviderRegistry.register('*', {\n            provideLinks: function (model, token) {\n                if (!canSyncModel(_this._modelService, model.uri)) {\n                    return Promise.resolve([]); // File too large\n                }\n                return _this._workerManager.withWorker().then(function (client) { return client.computeLinks(model.uri); });\n            }\n        }));\n        _this._register(modes.CompletionProviderRegistry.register('*', new WordBasedCompletionItemProvider(_this._workerManager, configurationService, _this._modelService)));\n        return _this;\n    }\n    EditorWorkerServiceImpl.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    EditorWorkerServiceImpl.prototype.canComputeDiff = function (original, modified) {\n        return (canSyncModel(this._modelService, original) && canSyncModel(this._modelService, modified));\n    };\n    EditorWorkerServiceImpl.prototype.computeDiff = function (original, modified, ignoreTrimWhitespace) {\n        return this._workerManager.withWorker().then(function (client) { return client.computeDiff(original, modified, ignoreTrimWhitespace); });\n    };\n    EditorWorkerServiceImpl.prototype.canComputeDirtyDiff = function (original, modified) {\n        return (canSyncModel(this._modelService, original) && canSyncModel(this._modelService, modified));\n    };\n    EditorWorkerServiceImpl.prototype.computeDirtyDiff = function (original, modified, ignoreTrimWhitespace) {\n        return this._workerManager.withWorker().then(function (client) { return client.computeDirtyDiff(original, modified, ignoreTrimWhitespace); });\n    };\n    EditorWorkerServiceImpl.prototype.computeMoreMinimalEdits = function (resource, edits) {\n        if (arrays_1.isNonEmptyArray(edits)) {\n            if (!canSyncModel(this._modelService, resource)) {\n                return Promise.resolve(edits); // File too large\n            }\n            return this._workerManager.withWorker().then(function (client) { return client.computeMoreMinimalEdits(resource, edits); });\n        }\n        else {\n            return Promise.resolve(undefined);\n        }\n    };\n    EditorWorkerServiceImpl.prototype.canNavigateValueSet = function (resource) {\n        return (canSyncModel(this._modelService, resource));\n    };\n    EditorWorkerServiceImpl.prototype.navigateValueSet = function (resource, range, up) {\n        return this._workerManager.withWorker().then(function (client) { return client.navigateValueSet(resource, range, up); });\n    };\n    EditorWorkerServiceImpl.prototype.canComputeWordRanges = function (resource) {\n        return canSyncModel(this._modelService, resource);\n    };\n    EditorWorkerServiceImpl.prototype.computeWordRanges = function (resource, range) {\n        return this._workerManager.withWorker().then(function (client) { return client.computeWordRanges(resource, range); });\n    };\n    EditorWorkerServiceImpl = tslib_1.__decorate([\n        tslib_1.__param(0, modelService_1.IModelService),\n        tslib_1.__param(1, resourceConfiguration_1.ITextResourceConfigurationService)\n    ], EditorWorkerServiceImpl);\n    return EditorWorkerServiceImpl;\n}(lifecycle_1.Disposable));\nexports.EditorWorkerServiceImpl = EditorWorkerServiceImpl;\nvar WordBasedCompletionItemProvider = /** @class */ (function () {\n    function WordBasedCompletionItemProvider(workerManager, configurationService, modelService) {\n        this._workerManager = workerManager;\n        this._configurationService = configurationService;\n        this._modelService = modelService;\n    }\n    WordBasedCompletionItemProvider.prototype.provideCompletionItems = function (model, position) {\n        var wordBasedSuggestions = this._configurationService.getValue(model.uri, position, 'editor').wordBasedSuggestions;\n        if (!wordBasedSuggestions) {\n            return undefined;\n        }\n        if (!canSyncModel(this._modelService, model.uri)) {\n            return undefined; // File too large\n        }\n        return this._workerManager.withWorker().then(function (client) { return client.textualSuggest(model.uri, position); });\n    };\n    return WordBasedCompletionItemProvider;\n}());\nvar WorkerManager = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkerManager, _super);\n    function WorkerManager(modelService) {\n        var _this = _super.call(this) || this;\n        _this._modelService = modelService;\n        _this._editorWorkerClient = null;\n        var stopWorkerInterval = _this._register(new async_1.IntervalTimer());\n        stopWorkerInterval.cancelAndSet(function () { return _this._checkStopIdleWorker(); }, Math.round(STOP_WORKER_DELTA_TIME_MS / 2));\n        _this._register(_this._modelService.onModelRemoved(function (_) { return _this._checkStopEmptyWorker(); }));\n        return _this;\n    }\n    WorkerManager.prototype.dispose = function () {\n        if (this._editorWorkerClient) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    /**\n     * Check if the model service has no more models and stop the worker if that is the case.\n     */\n    WorkerManager.prototype._checkStopEmptyWorker = function () {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        var models = this._modelService.getModels();\n        if (models.length === 0) {\n            // There are no more models => nothing possible for me to do\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    };\n    /**\n     * Check if the worker has been idle for a while and then stop it.\n     */\n    WorkerManager.prototype._checkStopIdleWorker = function () {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        var timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;\n        if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    };\n    WorkerManager.prototype.withWorker = function () {\n        this._lastWorkerUsedTime = (new Date()).getTime();\n        if (!this._editorWorkerClient) {\n            this._editorWorkerClient = new EditorWorkerClient(this._modelService, 'editorWorkerService');\n        }\n        return Promise.resolve(this._editorWorkerClient);\n    };\n    return WorkerManager;\n}(lifecycle_1.Disposable));\nvar EditorModelManager = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorModelManager, _super);\n    function EditorModelManager(proxy, modelService, keepIdleModels) {\n        var _this = _super.call(this) || this;\n        _this._syncedModels = Object.create(null);\n        _this._syncedModelsLastUsedTime = Object.create(null);\n        _this._proxy = proxy;\n        _this._modelService = modelService;\n        if (!keepIdleModels) {\n            var timer = new async_1.IntervalTimer();\n            timer.cancelAndSet(function () { return _this._checkStopModelSync(); }, Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2));\n            _this._register(timer);\n        }\n        return _this;\n    }\n    EditorModelManager.prototype.dispose = function () {\n        for (var modelUrl in this._syncedModels) {\n            lifecycle_1.dispose(this._syncedModels[modelUrl]);\n        }\n        this._syncedModels = Object.create(null);\n        this._syncedModelsLastUsedTime = Object.create(null);\n        _super.prototype.dispose.call(this);\n    };\n    EditorModelManager.prototype.esureSyncedResources = function (resources) {\n        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n            var resource = resources_1[_i];\n            var resourceStr = resource.toString();\n            if (!this._syncedModels[resourceStr]) {\n                this._beginModelSync(resource);\n            }\n            if (this._syncedModels[resourceStr]) {\n                this._syncedModelsLastUsedTime[resourceStr] = (new Date()).getTime();\n            }\n        }\n    };\n    EditorModelManager.prototype._checkStopModelSync = function () {\n        var currentTime = (new Date()).getTime();\n        var toRemove = [];\n        for (var modelUrl in this._syncedModelsLastUsedTime) {\n            var elapsedTime = currentTime - this._syncedModelsLastUsedTime[modelUrl];\n            if (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {\n                toRemove.push(modelUrl);\n            }\n        }\n        for (var _i = 0, toRemove_1 = toRemove; _i < toRemove_1.length; _i++) {\n            var e = toRemove_1[_i];\n            this._stopModelSync(e);\n        }\n    };\n    EditorModelManager.prototype._beginModelSync = function (resource) {\n        var _this = this;\n        var model = this._modelService.getModel(resource);\n        if (!model) {\n            return;\n        }\n        if (model.isTooLargeForSyncing()) {\n            return;\n        }\n        var modelUrl = resource.toString();\n        this._proxy.acceptNewModel({\n            url: model.uri.toString(),\n            lines: model.getLinesContent(),\n            EOL: model.getEOL(),\n            versionId: model.getVersionId()\n        });\n        var toDispose = [];\n        toDispose.push(model.onDidChangeContent(function (e) {\n            _this._proxy.acceptModelChanged(modelUrl.toString(), e);\n        }));\n        toDispose.push(model.onWillDispose(function () {\n            _this._stopModelSync(modelUrl);\n        }));\n        toDispose.push(lifecycle_1.toDisposable(function () {\n            _this._proxy.acceptRemovedModel(modelUrl);\n        }));\n        this._syncedModels[modelUrl] = toDispose;\n    };\n    EditorModelManager.prototype._stopModelSync = function (modelUrl) {\n        var toDispose = this._syncedModels[modelUrl];\n        delete this._syncedModels[modelUrl];\n        delete this._syncedModelsLastUsedTime[modelUrl];\n        lifecycle_1.dispose(toDispose);\n    };\n    return EditorModelManager;\n}(lifecycle_1.Disposable));\nvar SynchronousWorkerClient = /** @class */ (function () {\n    function SynchronousWorkerClient(instance) {\n        this._instance = instance;\n        this._proxyObj = Promise.resolve(this._instance);\n    }\n    SynchronousWorkerClient.prototype.dispose = function () {\n        this._instance.dispose();\n    };\n    SynchronousWorkerClient.prototype.getProxyObject = function () {\n        return this._proxyObj;\n    };\n    return SynchronousWorkerClient;\n}());\nvar EditorWorkerClient = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorWorkerClient, _super);\n    function EditorWorkerClient(modelService, label) {\n        var _this = _super.call(this) || this;\n        _this._modelService = modelService;\n        _this._workerFactory = new defaultWorkerFactory_1.DefaultWorkerFactory(label);\n        _this._worker = null;\n        _this._modelManager = null;\n        return _this;\n    }\n    EditorWorkerClient.prototype._getOrCreateWorker = function () {\n        if (!this._worker) {\n            try {\n                this._worker = this._register(new simpleWorker_1.SimpleWorkerClient(this._workerFactory, 'vs/editor/common/services/editorSimpleWorker'));\n            }\n            catch (err) {\n                simpleWorker_1.logOnceWebWorkerWarning(err);\n                this._worker = new SynchronousWorkerClient(new editorSimpleWorker_1.EditorSimpleWorkerImpl(null));\n            }\n        }\n        return this._worker;\n    };\n    EditorWorkerClient.prototype._getProxy = function () {\n        var _this = this;\n        return this._getOrCreateWorker().getProxyObject().then(undefined, function (err) {\n            simpleWorker_1.logOnceWebWorkerWarning(err);\n            _this._worker = new SynchronousWorkerClient(new editorSimpleWorker_1.EditorSimpleWorkerImpl(null));\n            return _this._getOrCreateWorker().getProxyObject();\n        });\n    };\n    EditorWorkerClient.prototype._getOrCreateModelManager = function (proxy) {\n        if (!this._modelManager) {\n            this._modelManager = this._register(new EditorModelManager(proxy, this._modelService, false));\n        }\n        return this._modelManager;\n    };\n    EditorWorkerClient.prototype._withSyncedResources = function (resources) {\n        var _this = this;\n        return this._getProxy().then(function (proxy) {\n            _this._getOrCreateModelManager(proxy).esureSyncedResources(resources);\n            return proxy;\n        });\n    };\n    EditorWorkerClient.prototype.computeDiff = function (original, modified, ignoreTrimWhitespace) {\n        return this._withSyncedResources([original, modified]).then(function (proxy) {\n            return proxy.computeDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);\n        });\n    };\n    EditorWorkerClient.prototype.computeDirtyDiff = function (original, modified, ignoreTrimWhitespace) {\n        return this._withSyncedResources([original, modified]).then(function (proxy) {\n            return proxy.computeDirtyDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);\n        });\n    };\n    EditorWorkerClient.prototype.computeMoreMinimalEdits = function (resource, edits) {\n        return this._withSyncedResources([resource]).then(function (proxy) {\n            return proxy.computeMoreMinimalEdits(resource.toString(), edits);\n        });\n    };\n    EditorWorkerClient.prototype.computeLinks = function (resource) {\n        return this._withSyncedResources([resource]).then(function (proxy) {\n            return proxy.computeLinks(resource.toString());\n        });\n    };\n    EditorWorkerClient.prototype.textualSuggest = function (resource, position) {\n        var _this = this;\n        return this._withSyncedResources([resource]).then(function (proxy) {\n            var model = _this._modelService.getModel(resource);\n            if (!model) {\n                return null;\n            }\n            var wordDefRegExp = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n            var wordDef = wordDefRegExp.source;\n            var wordDefFlags = strings_1.regExpFlags(wordDefRegExp);\n            return proxy.textualSuggest(resource.toString(), position, wordDef, wordDefFlags);\n        });\n    };\n    EditorWorkerClient.prototype.computeWordRanges = function (resource, range) {\n        var _this = this;\n        return this._withSyncedResources([resource]).then(function (proxy) {\n            var model = _this._modelService.getModel(resource);\n            if (!model) {\n                return Promise.resolve(null);\n            }\n            var wordDefRegExp = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n            var wordDef = wordDefRegExp.source;\n            var wordDefFlags = strings_1.regExpFlags(wordDefRegExp);\n            return proxy.computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n        });\n    };\n    EditorWorkerClient.prototype.navigateValueSet = function (resource, range, up) {\n        var _this = this;\n        return this._withSyncedResources([resource]).then(function (proxy) {\n            var model = _this._modelService.getModel(resource);\n            if (!model) {\n                return null;\n            }\n            var wordDefRegExp = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n            var wordDef = wordDefRegExp.source;\n            var wordDefFlags = strings_1.regExpFlags(wordDefRegExp);\n            return proxy.navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n        });\n    };\n    return EditorWorkerClient;\n}(lifecycle_1.Disposable));\nexports.EditorWorkerClient = EditorWorkerClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorWorkerServiceImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/editorWorkerServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IntervalTimer } from 'vs/base/common/async';\nimport { Disposable, IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { SimpleWorkerClient, logOnceWebWorkerWarning } from 'vs/base/common/worker/simpleWorker';\nimport { DefaultWorkerFactory } from 'vs/base/worker/defaultWorkerFactory';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange } from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport * as modes from 'vs/editor/common/modes';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { EditorSimpleWorkerImpl } from 'vs/editor/common/services/editorSimpleWorker';\nimport { IDiffComputationResult, IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { regExpFlags } from 'vs/base/common/strings';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\n\n/**\n * Stop syncing a model to the worker if it was not needed for 1 min.\n */\nconst STOP_SYNC_MODEL_DELTA_TIME_MS = 60 * 1000;\n\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\n\nfunction canSyncModel(modelService: IModelService, resource: URI): boolean {\n\tlet model = modelService.getModel(resource);\n\tif (!model) {\n\t\treturn false;\n\t}\n\tif (model.isTooLargeForSyncing()) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport class EditorWorkerServiceImpl extends Disposable implements IEditorWorkerService {\n\tpublic _serviceBrand: any;\n\n\tprivate readonly _modelService: IModelService;\n\tprivate readonly _workerManager: WorkerManager;\n\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._workerManager = this._register(new WorkerManager(this._modelService));\n\n\t\t// todo@joh make sure this happens only once\n\t\tthis._register(modes.LinkProviderRegistry.register('*', <modes.LinkProvider>{\n\t\t\tprovideLinks: (model, token) => {\n\t\t\t\tif (!canSyncModel(this._modelService, model.uri)) {\n\t\t\t\t\treturn Promise.resolve([]); // File too large\n\t\t\t\t}\n\t\t\t\treturn this._workerManager.withWorker().then(client => client.computeLinks(model.uri));\n\t\t\t}\n\t\t}));\n\t\tthis._register(modes.CompletionProviderRegistry.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService)));\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic canComputeDiff(original: URI, modified: URI): boolean {\n\t\treturn (canSyncModel(this._modelService, original) && canSyncModel(this._modelService, modified));\n\t}\n\n\tpublic computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IDiffComputationResult | null> {\n\t\treturn this._workerManager.withWorker().then(client => client.computeDiff(original, modified, ignoreTrimWhitespace));\n\t}\n\n\tpublic canComputeDirtyDiff(original: URI, modified: URI): boolean {\n\t\treturn (canSyncModel(this._modelService, original) && canSyncModel(this._modelService, modified));\n\t}\n\n\tpublic computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<editorCommon.IChange[] | null> {\n\t\treturn this._workerManager.withWorker().then(client => client.computeDirtyDiff(original, modified, ignoreTrimWhitespace));\n\t}\n\n\tpublic computeMoreMinimalEdits(resource: URI, edits: modes.TextEdit[] | null | undefined): Promise<modes.TextEdit[] | undefined> {\n\t\tif (isNonEmptyArray(edits)) {\n\t\t\tif (!canSyncModel(this._modelService, resource)) {\n\t\t\t\treturn Promise.resolve(edits); // File too large\n\t\t\t}\n\t\t\treturn this._workerManager.withWorker().then(client => client.computeMoreMinimalEdits(resource, edits));\n\n\t\t} else {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t}\n\n\tpublic canNavigateValueSet(resource: URI): boolean {\n\t\treturn (canSyncModel(this._modelService, resource));\n\t}\n\n\tpublic navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<modes.IInplaceReplaceSupportResult | null> {\n\t\treturn this._workerManager.withWorker().then(client => client.navigateValueSet(resource, range, up));\n\t}\n\n\tcanComputeWordRanges(resource: URI): boolean {\n\t\treturn canSyncModel(this._modelService, resource);\n\t}\n\n\tcomputeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> {\n\t\treturn this._workerManager.withWorker().then(client => client.computeWordRanges(resource, range));\n\t}\n}\n\nclass WordBasedCompletionItemProvider implements modes.CompletionItemProvider {\n\n\tprivate readonly _workerManager: WorkerManager;\n\tprivate readonly _configurationService: ITextResourceConfigurationService;\n\tprivate readonly _modelService: IModelService;\n\n\tconstructor(\n\t\tworkerManager: WorkerManager,\n\t\tconfigurationService: ITextResourceConfigurationService,\n\t\tmodelService: IModelService\n\t) {\n\t\tthis._workerManager = workerManager;\n\t\tthis._configurationService = configurationService;\n\t\tthis._modelService = modelService;\n\t}\n\n\tprovideCompletionItems(model: ITextModel, position: Position): Promise<modes.CompletionList | null> | undefined {\n\t\tconst { wordBasedSuggestions } = this._configurationService.getValue<IEditorOptions>(model.uri, position, 'editor');\n\t\tif (!wordBasedSuggestions) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!canSyncModel(this._modelService, model.uri)) {\n\t\t\treturn undefined; // File too large\n\t\t}\n\t\treturn this._workerManager.withWorker().then(client => client.textualSuggest(model.uri, position));\n\t}\n}\n\nclass WorkerManager extends Disposable {\n\n\tprivate readonly _modelService: IModelService;\n\tprivate _editorWorkerClient: EditorWorkerClient | null;\n\tprivate _lastWorkerUsedTime: number;\n\n\tconstructor(modelService: IModelService) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._editorWorkerClient = null;\n\n\t\tlet stopWorkerInterval = this._register(new IntervalTimer());\n\t\tstopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2));\n\n\t\tthis._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._editorWorkerClient) {\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\t/**\n\t * Check if the model service has no more models and stop the worker if that is the case.\n\t */\n\tprivate _checkStopEmptyWorker(): void {\n\t\tif (!this._editorWorkerClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet models = this._modelService.getModels();\n\t\tif (models.length === 0) {\n\t\t\t// There are no more models => nothing possible for me to do\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t}\n\n\t/**\n\t * Check if the worker has been idle for a while and then stop it.\n\t */\n\tprivate _checkStopIdleWorker(): void {\n\t\tif (!this._editorWorkerClient) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;\n\t\tif (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n\t\t\tthis._editorWorkerClient.dispose();\n\t\t\tthis._editorWorkerClient = null;\n\t\t}\n\t}\n\n\tpublic withWorker(): Promise<EditorWorkerClient> {\n\t\tthis._lastWorkerUsedTime = (new Date()).getTime();\n\t\tif (!this._editorWorkerClient) {\n\t\t\tthis._editorWorkerClient = new EditorWorkerClient(this._modelService, 'editorWorkerService');\n\t\t}\n\t\treturn Promise.resolve(this._editorWorkerClient);\n\t}\n}\n\nclass EditorModelManager extends Disposable {\n\n\tprivate readonly _proxy: EditorSimpleWorkerImpl;\n\tprivate readonly _modelService: IModelService;\n\tprivate _syncedModels: { [modelUrl: string]: IDisposable[]; } = Object.create(null);\n\tprivate _syncedModelsLastUsedTime: { [modelUrl: string]: number; } = Object.create(null);\n\n\tconstructor(proxy: EditorSimpleWorkerImpl, modelService: IModelService, keepIdleModels: boolean) {\n\t\tsuper();\n\t\tthis._proxy = proxy;\n\t\tthis._modelService = modelService;\n\n\t\tif (!keepIdleModels) {\n\t\t\tlet timer = new IntervalTimer();\n\t\t\ttimer.cancelAndSet(() => this._checkStopModelSync(), Math.round(STOP_SYNC_MODEL_DELTA_TIME_MS / 2));\n\t\t\tthis._register(timer);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tfor (let modelUrl in this._syncedModels) {\n\t\t\tdispose(this._syncedModels[modelUrl]);\n\t\t}\n\t\tthis._syncedModels = Object.create(null);\n\t\tthis._syncedModelsLastUsedTime = Object.create(null);\n\t\tsuper.dispose();\n\t}\n\n\tpublic esureSyncedResources(resources: URI[]): void {\n\t\tfor (const resource of resources) {\n\t\t\tlet resourceStr = resource.toString();\n\n\t\t\tif (!this._syncedModels[resourceStr]) {\n\t\t\t\tthis._beginModelSync(resource);\n\t\t\t}\n\t\t\tif (this._syncedModels[resourceStr]) {\n\t\t\t\tthis._syncedModelsLastUsedTime[resourceStr] = (new Date()).getTime();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _checkStopModelSync(): void {\n\t\tlet currentTime = (new Date()).getTime();\n\n\t\tlet toRemove: string[] = [];\n\t\tfor (let modelUrl in this._syncedModelsLastUsedTime) {\n\t\t\tlet elapsedTime = currentTime - this._syncedModelsLastUsedTime[modelUrl];\n\t\t\tif (elapsedTime > STOP_SYNC_MODEL_DELTA_TIME_MS) {\n\t\t\t\ttoRemove.push(modelUrl);\n\t\t\t}\n\t\t}\n\n\t\tfor (const e of toRemove) {\n\t\t\tthis._stopModelSync(e);\n\t\t}\n\t}\n\n\tprivate _beginModelSync(resource: URI): void {\n\t\tlet model = this._modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tif (model.isTooLargeForSyncing()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet modelUrl = resource.toString();\n\n\t\tthis._proxy.acceptNewModel({\n\t\t\turl: model.uri.toString(),\n\t\t\tlines: model.getLinesContent(),\n\t\t\tEOL: model.getEOL(),\n\t\t\tversionId: model.getVersionId()\n\t\t});\n\n\t\tlet toDispose: IDisposable[] = [];\n\t\ttoDispose.push(model.onDidChangeContent((e) => {\n\t\t\tthis._proxy.acceptModelChanged(modelUrl.toString(), e);\n\t\t}));\n\t\ttoDispose.push(model.onWillDispose(() => {\n\t\t\tthis._stopModelSync(modelUrl);\n\t\t}));\n\t\ttoDispose.push(toDisposable(() => {\n\t\t\tthis._proxy.acceptRemovedModel(modelUrl);\n\t\t}));\n\n\t\tthis._syncedModels[modelUrl] = toDispose;\n\t}\n\n\tprivate _stopModelSync(modelUrl: string): void {\n\t\tlet toDispose = this._syncedModels[modelUrl];\n\t\tdelete this._syncedModels[modelUrl];\n\t\tdelete this._syncedModelsLastUsedTime[modelUrl];\n\t\tdispose(toDispose);\n\t}\n}\n\ninterface IWorkerClient<T> {\n\tgetProxyObject(): Promise<T>;\n\tdispose(): void;\n}\n\nclass SynchronousWorkerClient<T extends IDisposable> implements IWorkerClient<T> {\n\tprivate readonly _instance: T;\n\tprivate readonly _proxyObj: Promise<T>;\n\n\tconstructor(instance: T) {\n\t\tthis._instance = instance;\n\t\tthis._proxyObj = Promise.resolve(this._instance);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._instance.dispose();\n\t}\n\n\tpublic getProxyObject(): Promise<T> {\n\t\treturn this._proxyObj;\n\t}\n}\n\nexport class EditorWorkerClient extends Disposable {\n\n\tprivate readonly _modelService: IModelService;\n\tprivate _worker: IWorkerClient<EditorSimpleWorkerImpl> | null;\n\tprivate readonly _workerFactory: DefaultWorkerFactory;\n\tprivate _modelManager: EditorModelManager | null;\n\n\tconstructor(modelService: IModelService, label: string | undefined) {\n\t\tsuper();\n\t\tthis._modelService = modelService;\n\t\tthis._workerFactory = new DefaultWorkerFactory(label);\n\t\tthis._worker = null;\n\t\tthis._modelManager = null;\n\t}\n\n\tprivate _getOrCreateWorker(): IWorkerClient<EditorSimpleWorkerImpl> {\n\t\tif (!this._worker) {\n\t\t\ttry {\n\t\t\t\tthis._worker = this._register(new SimpleWorkerClient<EditorSimpleWorkerImpl>(\n\t\t\t\t\tthis._workerFactory,\n\t\t\t\t\t'vs/editor/common/services/editorSimpleWorker'\n\t\t\t\t));\n\t\t\t} catch (err) {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthis._worker = new SynchronousWorkerClient(new EditorSimpleWorkerImpl(null));\n\t\t\t}\n\t\t}\n\t\treturn this._worker;\n\t}\n\n\tprotected _getProxy(): Promise<EditorSimpleWorkerImpl> {\n\t\treturn this._getOrCreateWorker().getProxyObject().then(undefined, (err) => {\n\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\tthis._worker = new SynchronousWorkerClient(new EditorSimpleWorkerImpl(null));\n\t\t\treturn this._getOrCreateWorker().getProxyObject();\n\t\t});\n\t}\n\n\tprivate _getOrCreateModelManager(proxy: EditorSimpleWorkerImpl): EditorModelManager {\n\t\tif (!this._modelManager) {\n\t\t\tthis._modelManager = this._register(new EditorModelManager(proxy, this._modelService, false));\n\t\t}\n\t\treturn this._modelManager;\n\t}\n\n\tprotected _withSyncedResources(resources: URI[]): Promise<EditorSimpleWorkerImpl> {\n\t\treturn this._getProxy().then((proxy) => {\n\t\t\tthis._getOrCreateModelManager(proxy).esureSyncedResources(resources);\n\t\t\treturn proxy;\n\t\t});\n\t}\n\n\tpublic computeDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IDiffComputationResult | null> {\n\t\treturn this._withSyncedResources([original, modified]).then(proxy => {\n\t\t\treturn proxy.computeDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);\n\t\t});\n\t}\n\n\tpublic computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<editorCommon.IChange[] | null> {\n\t\treturn this._withSyncedResources([original, modified]).then(proxy => {\n\t\t\treturn proxy.computeDirtyDiff(original.toString(), modified.toString(), ignoreTrimWhitespace);\n\t\t});\n\t}\n\n\tpublic computeMoreMinimalEdits(resource: URI, edits: modes.TextEdit[]): Promise<modes.TextEdit[]> {\n\t\treturn this._withSyncedResources([resource]).then(proxy => {\n\t\t\treturn proxy.computeMoreMinimalEdits(resource.toString(), edits);\n\t\t});\n\t}\n\n\tpublic computeLinks(resource: URI): Promise<modes.ILink[] | null> {\n\t\treturn this._withSyncedResources([resource]).then(proxy => {\n\t\t\treturn proxy.computeLinks(resource.toString());\n\t\t});\n\t}\n\n\tpublic textualSuggest(resource: URI, position: IPosition): Promise<modes.CompletionList | null> {\n\t\treturn this._withSyncedResources([resource]).then(proxy => {\n\t\t\tlet model = this._modelService.getModel(resource);\n\t\t\tif (!model) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlet wordDefRegExp = LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n\t\t\tlet wordDef = wordDefRegExp.source;\n\t\t\tlet wordDefFlags = regExpFlags(wordDefRegExp);\n\t\t\treturn proxy.textualSuggest(resource.toString(), position, wordDef, wordDefFlags);\n\t\t});\n\t}\n\n\tcomputeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> {\n\t\treturn this._withSyncedResources([resource]).then(proxy => {\n\t\t\tlet model = this._modelService.getModel(resource);\n\t\t\tif (!model) {\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\t\t\tlet wordDefRegExp = LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n\t\t\tlet wordDef = wordDefRegExp.source;\n\t\t\tlet wordDefFlags = regExpFlags(wordDefRegExp);\n\t\t\treturn proxy.computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n\t\t});\n\t}\n\n\tpublic navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<modes.IInplaceReplaceSupportResult | null> {\n\t\treturn this._withSyncedResources([resource]).then(proxy => {\n\t\t\tlet model = this._modelService.getModel(resource);\n\t\t\tif (!model) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlet wordDefRegExp = LanguageConfigurationRegistry.getWordDefinition(model.getLanguageIdentifier().id);\n\t\t\tlet wordDef = wordDefRegExp.source;\n\t\t\tlet wordDefFlags = regExpFlags(wordDefRegExp);\n\t\t\treturn proxy.navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n\t\t});\n\t}\n}\n"]}]}