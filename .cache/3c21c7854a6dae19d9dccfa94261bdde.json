{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar hasOwnProperty = Object.hasOwnProperty;\nvar schemaRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\nvar ExtensionMessageCollector = /** @class */ (function () {\n    function ExtensionMessageCollector(messageHandler, extension, extensionPointId) {\n        this._messageHandler = messageHandler;\n        this._extension = extension;\n        this._extensionPointId = extensionPointId;\n    }\n    ExtensionMessageCollector.prototype._msg = function (type, message) {\n        this._messageHandler({\n            type: type,\n            message: message,\n            extensionId: this._extension.identifier,\n            extensionPointId: this._extensionPointId\n        });\n    };\n    ExtensionMessageCollector.prototype.error = function (message) {\n        this._msg(severity_1.default.Error, message);\n    };\n    ExtensionMessageCollector.prototype.warn = function (message) {\n        this._msg(severity_1.default.Warning, message);\n    };\n    ExtensionMessageCollector.prototype.info = function (message) {\n        this._msg(severity_1.default.Info, message);\n    };\n    return ExtensionMessageCollector;\n}());\nexports.ExtensionMessageCollector = ExtensionMessageCollector;\nvar ExtensionPointUserDelta = /** @class */ (function () {\n    function ExtensionPointUserDelta(added, removed) {\n        this.added = added;\n        this.removed = removed;\n    }\n    ExtensionPointUserDelta._toSet = function (arr) {\n        var result = new Set();\n        for (var i = 0, len = arr.length; i < len; i++) {\n            result.add(extensions_1.ExtensionIdentifier.toKey(arr[i].description.identifier));\n        }\n        return result;\n    };\n    ExtensionPointUserDelta.compute = function (previous, current) {\n        if (!previous || !previous.length) {\n            return new ExtensionPointUserDelta(current, []);\n        }\n        if (!current || !current.length) {\n            return new ExtensionPointUserDelta([], previous);\n        }\n        var previousSet = this._toSet(previous);\n        var currentSet = this._toSet(current);\n        var added = current.filter(function (user) { return !previousSet.has(extensions_1.ExtensionIdentifier.toKey(user.description.identifier)); });\n        var removed = previous.filter(function (user) { return !currentSet.has(extensions_1.ExtensionIdentifier.toKey(user.description.identifier)); });\n        return new ExtensionPointUserDelta(added, removed);\n    };\n    return ExtensionPointUserDelta;\n}());\nexports.ExtensionPointUserDelta = ExtensionPointUserDelta;\nvar ExtensionPoint = /** @class */ (function () {\n    function ExtensionPoint(name, defaultExtensionKind) {\n        this.name = name;\n        this.defaultExtensionKind = defaultExtensionKind;\n        this._handler = null;\n        this._users = null;\n        this._delta = null;\n    }\n    ExtensionPoint.prototype.setHandler = function (handler) {\n        if (this._handler !== null) {\n            throw new Error('Handler already set!');\n        }\n        this._handler = handler;\n        this._handle();\n    };\n    ExtensionPoint.prototype.acceptUsers = function (users) {\n        this._delta = ExtensionPointUserDelta.compute(this._users, users);\n        this._users = users;\n        this._handle();\n    };\n    ExtensionPoint.prototype._handle = function () {\n        if (this._handler === null || this._users === null || this._delta === null) {\n            return;\n        }\n        try {\n            this._handler(this._users, this._delta);\n        }\n        catch (err) {\n            errors_1.onUnexpectedError(err);\n        }\n    };\n    return ExtensionPoint;\n}());\nexports.ExtensionPoint = ExtensionPoint;\nvar schemaId = 'vscode://schemas/vscode-extensions';\nexports.schema = {\n    properties: {\n        engines: {\n            type: 'object',\n            description: nls.localize('vscode.extension.engines', \"Engine compatibility.\"),\n            properties: {\n                'vscode': {\n                    type: 'string',\n                    description: nls.localize('vscode.extension.engines.vscode', 'For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.'),\n                    default: '^1.22.0',\n                }\n            }\n        },\n        publisher: {\n            description: nls.localize('vscode.extension.publisher', 'The publisher of the VS Code extension.'),\n            type: 'string'\n        },\n        displayName: {\n            description: nls.localize('vscode.extension.displayName', 'The display name for the extension used in the VS Code gallery.'),\n            type: 'string'\n        },\n        categories: {\n            description: nls.localize('vscode.extension.categories', 'The categories used by the VS Code gallery to categorize the extension.'),\n            type: 'array',\n            uniqueItems: true,\n            items: {\n                oneOf: [{\n                        type: 'string',\n                        enum: ['Programming Languages', 'Snippets', 'Linters', 'Themes', 'Debuggers', 'Other', 'Keymaps', 'Formatters', 'Extension Packs', 'SCM Providers', 'Azure', 'Language Packs'],\n                    },\n                    {\n                        type: 'string',\n                        const: 'Languages',\n                        deprecationMessage: nls.localize('vscode.extension.category.languages.deprecated', 'Use \\'Programming  Languages\\' instead'),\n                    }]\n            }\n        },\n        galleryBanner: {\n            type: 'object',\n            description: nls.localize('vscode.extension.galleryBanner', 'Banner used in the VS Code marketplace.'),\n            properties: {\n                color: {\n                    description: nls.localize('vscode.extension.galleryBanner.color', 'The banner color on the VS Code marketplace page header.'),\n                    type: 'string'\n                },\n                theme: {\n                    description: nls.localize('vscode.extension.galleryBanner.theme', 'The color theme for the font used in the banner.'),\n                    type: 'string',\n                    enum: ['dark', 'light']\n                }\n            }\n        },\n        contributes: {\n            description: nls.localize('vscode.extension.contributes', 'All contributions of the VS Code extension represented by this package.'),\n            type: 'object',\n            properties: {\n            // extensions will fill in\n            },\n            default: {}\n        },\n        preview: {\n            type: 'boolean',\n            description: nls.localize('vscode.extension.preview', 'Sets the extension to be flagged as a Preview in the Marketplace.'),\n        },\n        activationEvents: {\n            description: nls.localize('vscode.extension.activationEvents', 'Activation events for the VS Code extension.'),\n            type: 'array',\n            items: {\n                type: 'string',\n                defaultSnippets: [\n                    {\n                        label: 'onLanguage',\n                        description: nls.localize('vscode.extension.activationEvents.onLanguage', 'An activation event emitted whenever a file that resolves to the specified language gets opened.'),\n                        body: 'onLanguage:${1:languageId}'\n                    },\n                    {\n                        label: 'onCommand',\n                        description: nls.localize('vscode.extension.activationEvents.onCommand', 'An activation event emitted whenever the specified command gets invoked.'),\n                        body: 'onCommand:${2:commandId}'\n                    },\n                    {\n                        label: 'onDebug',\n                        description: nls.localize('vscode.extension.activationEvents.onDebug', 'An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.'),\n                        body: 'onDebug'\n                    },\n                    {\n                        label: 'onDebugInitialConfigurations',\n                        description: nls.localize('vscode.extension.activationEvents.onDebugInitialConfigurations', 'An activation event emitted whenever a \"launch.json\" needs to be created (and all provideDebugConfigurations methods need to be called).'),\n                        body: 'onDebugInitialConfigurations'\n                    },\n                    {\n                        label: 'onDebugResolve',\n                        description: nls.localize('vscode.extension.activationEvents.onDebugResolve', 'An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).'),\n                        body: 'onDebugResolve:${6:type}'\n                    },\n                    {\n                        label: 'onDebugAdapterProtocolTracker',\n                        description: nls.localize('vscode.extension.activationEvents.onDebugAdapterProtocolTracker', 'An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.'),\n                        body: 'onDebugAdapterProtocolTracker:${6:type}'\n                    },\n                    {\n                        label: 'workspaceContains',\n                        description: nls.localize('vscode.extension.activationEvents.workspaceContains', 'An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.'),\n                        body: 'workspaceContains:${4:filePattern}'\n                    },\n                    {\n                        label: 'onFileSystem',\n                        description: nls.localize('vscode.extension.activationEvents.onFileSystem', 'An activation event emitted whenever a file or folder is accessed with the given scheme.'),\n                        body: 'onFileSystem:${1:scheme}'\n                    },\n                    {\n                        label: 'onSearch',\n                        description: nls.localize('vscode.extension.activationEvents.onSearch', 'An activation event emitted whenever a search is started in the folder with the given scheme.'),\n                        body: 'onSearch:${7:scheme}'\n                    },\n                    {\n                        label: 'onView',\n                        body: 'onView:${5:viewId}',\n                        description: nls.localize('vscode.extension.activationEvents.onView', 'An activation event emitted whenever the specified view is expanded.'),\n                    },\n                    {\n                        label: 'onUri',\n                        body: 'onUri',\n                        description: nls.localize('vscode.extension.activationEvents.onUri', 'An activation event emitted whenever a system-wide Uri directed towards this extension is open.'),\n                    },\n                    {\n                        label: '*',\n                        description: nls.localize('vscode.extension.activationEvents.star', 'An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.'),\n                        body: '*'\n                    }\n                ],\n            }\n        },\n        badges: {\n            type: 'array',\n            description: nls.localize('vscode.extension.badges', 'Array of badges to display in the sidebar of the Marketplace\\'s extension page.'),\n            items: {\n                type: 'object',\n                required: ['url', 'href', 'description'],\n                properties: {\n                    url: {\n                        type: 'string',\n                        description: nls.localize('vscode.extension.badges.url', 'Badge image URL.')\n                    },\n                    href: {\n                        type: 'string',\n                        description: nls.localize('vscode.extension.badges.href', 'Badge link.')\n                    },\n                    description: {\n                        type: 'string',\n                        description: nls.localize('vscode.extension.badges.description', 'Badge description.')\n                    }\n                }\n            }\n        },\n        markdown: {\n            type: 'string',\n            description: nls.localize('vscode.extension.markdown', \"Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard.\"),\n            enum: ['github', 'standard'],\n            default: 'github'\n        },\n        qna: {\n            default: 'marketplace',\n            description: nls.localize('vscode.extension.qna', \"Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether.\"),\n            anyOf: [\n                {\n                    type: ['string', 'boolean'],\n                    enum: ['marketplace', false]\n                },\n                {\n                    type: 'string'\n                }\n            ]\n        },\n        extensionDependencies: {\n            description: nls.localize('vscode.extension.extensionDependencies', 'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'),\n            type: 'array',\n            uniqueItems: true,\n            items: {\n                type: 'string',\n                pattern: extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN\n            }\n        },\n        extensionPack: {\n            description: nls.localize('vscode.extension.contributes.extensionPack', \"A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.\"),\n            type: 'array',\n            uniqueItems: true,\n            items: {\n                type: 'string',\n                pattern: extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN\n            }\n        },\n        scripts: {\n            type: 'object',\n            properties: {\n                'vscode:prepublish': {\n                    description: nls.localize('vscode.extension.scripts.prepublish', 'Script executed before the package is published as a VS Code extension.'),\n                    type: 'string'\n                },\n                'vscode:uninstall': {\n                    description: nls.localize('vscode.extension.scripts.uninstall', 'Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.'),\n                    type: 'string'\n                }\n            }\n        },\n        icon: {\n            type: 'string',\n            description: nls.localize('vscode.extension.icon', 'The path to a 128x128 pixel icon.')\n        }\n    }\n};\nvar ExtensionsRegistryImpl = /** @class */ (function () {\n    function ExtensionsRegistryImpl() {\n        this._extensionPoints = {};\n    }\n    ExtensionsRegistryImpl.prototype.registerExtensionPoint = function (desc) {\n        if (hasOwnProperty.call(this._extensionPoints, desc.extensionPoint)) {\n            throw new Error('Duplicate extension point: ' + desc.extensionPoint);\n        }\n        var result = new ExtensionPoint(desc.extensionPoint, desc.defaultExtensionKind);\n        this._extensionPoints[desc.extensionPoint] = result;\n        exports.schema.properties['contributes'].properties[desc.extensionPoint] = desc.jsonSchema;\n        schemaRegistry.registerSchema(schemaId, exports.schema);\n        return result;\n    };\n    ExtensionsRegistryImpl.prototype.getExtensionPoints = function () {\n        var _this = this;\n        return Object.keys(this._extensionPoints).map(function (point) { return _this._extensionPoints[point]; });\n    };\n    ExtensionsRegistryImpl.prototype.getExtensionPointsMap = function () {\n        return this._extensionPoints;\n    };\n    return ExtensionsRegistryImpl;\n}());\nexports.ExtensionsRegistryImpl = ExtensionsRegistryImpl;\nvar PRExtensions = {\n    ExtensionsRegistry: 'ExtensionsRegistry'\n};\nplatform_1.Registry.add(PRExtensions.ExtensionsRegistry, new ExtensionsRegistryImpl());\nexports.ExtensionsRegistry = platform_1.Registry.as(PRExtensions.ExtensionsRegistry);\nschemaRegistry.registerSchema(schemaId, exports.schema);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,gDAA0D;AAE1D,oDAA+C;AAC/C,kGAA0G;AAC1G,oGAAgH;AAChH,iEAAgE;AAEhE,uEAAsG;AAEtG,IAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;AAC7C,IAAM,cAAc,GAAG,mBAAQ,CAAC,EAAE,CAA4B,qCAAU,CAAC,gBAAgB,CAAC,CAAC;AAG3F;IAMC,mCACC,cAAuC,EACvC,SAAgC,EAChC,gBAAwB;QAExB,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEO,wCAAI,GAAZ,UAAa,IAAc,EAAE,OAAe;QAC3C,IAAI,CAAC,eAAe,CAAC;YACpB,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,OAAO;YAChB,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,UAAU;YACvC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB;SACxC,CAAC,CAAC;IACJ,CAAC;IAEM,yCAAK,GAAZ,UAAa,OAAe;QAC3B,IAAI,CAAC,IAAI,CAAC,kBAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,wCAAI,GAAX,UAAY,OAAe;QAC1B,IAAI,CAAC,IAAI,CAAC,kBAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,wCAAI,GAAX,UAAY,OAAe;QAC1B,IAAI,CAAC,IAAI,CAAC,kBAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IACF,gCAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,8DAAyB;AAsDtC;IA2BC,iCACiB,KAA+B,EAC/B,OAAiC;QADjC,UAAK,GAAL,KAAK,CAA0B;QAC/B,YAAO,GAAP,OAAO,CAA0B;IAC9C,CAAC;IA5BU,8BAAM,GAArB,UAAyB,GAA6B;QACrD,IAAM,MAAM,GAAG,IAAI,GAAG,EAAU,CAAC;QACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC/C,MAAM,CAAC,GAAG,CAAC,gCAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;SACrE;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEa,+BAAO,GAArB,UAAyB,QAAyC,EAAE,OAAiC;QACpG,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAClC,OAAO,IAAI,uBAAuB,CAAI,OAAO,EAAE,EAAE,CAAC,CAAC;SACnD;QACD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAChC,OAAO,IAAI,uBAAuB,CAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;SACpD;QAED,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,WAAW,CAAC,GAAG,CAAC,gCAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,EAAxE,CAAwE,CAAC,CAAC;QAC7G,IAAI,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,UAAU,CAAC,GAAG,CAAC,gCAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,EAAvE,CAAuE,CAAC,CAAC;QAE/G,OAAO,IAAI,uBAAuB,CAAI,KAAK,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;IAMF,8BAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,0DAAuB;AAiCpC;IASC,wBAAY,IAAY,EAAE,oBAAmC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,mCAAU,GAAV,UAAW,OAAkC;QAC5C,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAED,oCAAW,GAAX,UAAY,KAA+B;QAC1C,IAAI,CAAC,MAAM,GAAG,uBAAuB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAClE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAEO,gCAAO,GAAf;QACC,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;YAC3E,OAAO;SACP;QAED,IAAI;YACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SACxC;QAAC,OAAO,GAAG,EAAE;YACb,0BAAiB,CAAC,GAAG,CAAC,CAAC;SACvB;IACF,CAAC;IACF,qBAAC;AAAD,CAAC,AA1CD,IA0CC;AA1CY,wCAAc;AA4C3B,IAAM,QAAQ,GAAG,oCAAoC,CAAC;AACzC,QAAA,MAAM,GAAG;IACrB,UAAU,EAAE;QACX,OAAO,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,uBAAuB,CAAC;YAC9E,UAAU,EAAE;gBACX,QAAQ,EAAE;oBACT,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,iCAAiC,EAAE,kMAAkM,CAAC;oBAChQ,OAAO,EAAE,SAAS;iBAClB;aACD;SACD;QACD,SAAS,EAAE;YACV,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,4BAA4B,EAAE,yCAAyC,CAAC;YAClG,IAAI,EAAE,QAAQ;SACd;QACD,WAAW,EAAE;YACZ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8BAA8B,EAAE,iEAAiE,CAAC;YAC5H,IAAI,EAAE,QAAQ;SACd;QACD,UAAU,EAAE;YACX,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,yEAAyE,CAAC;YACnI,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE;gBACN,KAAK,EAAE,CAAC;wBACP,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,CAAC,uBAAuB,EAAE,UAAU,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,iBAAiB,EAAE,eAAe,EAAE,OAAO,EAAE,gBAAgB,CAAC;qBAC9K;oBACD;wBACC,IAAI,EAAE,QAAQ;wBACd,KAAK,EAAE,WAAW;wBAClB,kBAAkB,EAAE,GAAG,CAAC,QAAQ,CAAC,gDAAgD,EAAE,wCAAwC,CAAC;qBAC5H,CAAC;aACF;SACD;QACD,aAAa,EAAE;YACd,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,yCAAyC,CAAC;YACtG,UAAU,EAAE;gBACX,KAAK,EAAE;oBACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,sCAAsC,EAAE,0DAA0D,CAAC;oBAC7H,IAAI,EAAE,QAAQ;iBACd;gBACD,KAAK,EAAE;oBACN,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,sCAAsC,EAAE,kDAAkD,CAAC;oBACrH,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;iBACvB;aACD;SACD;QACD,WAAW,EAAE;YACZ,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8BAA8B,EAAE,yEAAyE,CAAC;YACpI,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;YACX,0BAA0B;aAC1B;YACD,OAAO,EAAE,EAAE;SACX;QACD,OAAO,EAAE;YACR,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,mEAAmE,CAAC;SAC1H;QACD,gBAAgB,EAAE;YACjB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,mCAAmC,EAAE,8CAA8C,CAAC;YAC9G,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,eAAe,EAAE;oBAChB;wBACC,KAAK,EAAE,YAAY;wBACnB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8CAA8C,EAAE,kGAAkG,CAAC;wBAC7K,IAAI,EAAE,4BAA4B;qBAClC;oBACD;wBACC,KAAK,EAAE,WAAW;wBAClB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,6CAA6C,EAAE,0EAA0E,CAAC;wBACpJ,IAAI,EAAE,0BAA0B;qBAChC;oBACD;wBACC,KAAK,EAAE,SAAS;wBAChB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,2CAA2C,EAAE,iHAAiH,CAAC;wBACzL,IAAI,EAAE,SAAS;qBACf;oBACD;wBACC,KAAK,EAAE,8BAA8B;wBACrC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gEAAgE,EAAE,0IAA0I,CAAC;wBACvO,IAAI,EAAE,8BAA8B;qBACpC;oBACD;wBACC,KAAK,EAAE,gBAAgB;wBACvB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,kDAAkD,EAAE,gLAAgL,CAAC;wBAC/P,IAAI,EAAE,0BAA0B;qBAChC;oBACD;wBACC,KAAK,EAAE,+BAA+B;wBACtC,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,iEAAiE,EAAE,mJAAmJ,CAAC;wBACjP,IAAI,EAAE,yCAAyC;qBAC/C;oBACD;wBACC,KAAK,EAAE,mBAAmB;wBAC1B,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,qDAAqD,EAAE,4HAA4H,CAAC;wBAC9M,IAAI,EAAE,oCAAoC;qBAC1C;oBACD;wBACC,KAAK,EAAE,cAAc;wBACrB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gDAAgD,EAAE,0FAA0F,CAAC;wBACvK,IAAI,EAAE,0BAA0B;qBAChC;oBACD;wBACC,KAAK,EAAE,UAAU;wBACjB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,4CAA4C,EAAE,+FAA+F,CAAC;wBACxK,IAAI,EAAE,sBAAsB;qBAC5B;oBACD;wBACC,KAAK,EAAE,QAAQ;wBACf,IAAI,EAAE,oBAAoB;wBAC1B,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,0CAA0C,EAAE,sEAAsE,CAAC;qBAC7I;oBACD;wBACC,KAAK,EAAE,OAAO;wBACd,IAAI,EAAE,OAAO;wBACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,yCAAyC,EAAE,iGAAiG,CAAC;qBACvK;oBACD;wBACC,KAAK,EAAE,GAAG;wBACV,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,wCAAwC,EAAE,oNAAoN,CAAC;wBACzR,IAAI,EAAE,GAAG;qBACT;iBACD;aACD;SACD;QACD,MAAM,EAAE;YACP,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,yBAAyB,EAAE,iFAAiF,CAAC;YACvI,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC;gBACxC,UAAU,EAAE;oBACX,GAAG,EAAE;wBACJ,IAAI,EAAE,QAAQ;wBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,kBAAkB,CAAC;qBAC5E;oBACD,IAAI,EAAE;wBACL,IAAI,EAAE,QAAQ;wBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,8BAA8B,EAAE,aAAa,CAAC;qBACxE;oBACD,WAAW,EAAE;wBACZ,IAAI,EAAE,QAAQ;wBACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,qCAAqC,EAAE,oBAAoB,CAAC;qBACtF;iBACD;aACD;SACD;QACD,QAAQ,EAAE;YACT,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,2BAA2B,EAAE,sGAAsG,CAAC;YAC9J,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC;YAC5B,OAAO,EAAE,QAAQ;SACjB;QACD,GAAG,EAAE;YACJ,OAAO,EAAE,aAAa;YACtB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,iNAAiN,CAAC;YACpQ,KAAK,EAAE;gBACN;oBACC,IAAI,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;oBAC3B,IAAI,EAAE,CAAC,aAAa,EAAE,KAAK,CAAC;iBAC5B;gBACD;oBACC,IAAI,EAAE,QAAQ;iBACd;aACD;SACD;QACD,qBAAqB,EAAE;YACtB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,wCAAwC,EAAE,8HAA8H,CAAC;YACnM,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,kDAA4B;aACrC;SACD;QACD,aAAa,EAAE;YACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,4CAA4C,EAAE,gJAAgJ,CAAC;YACzN,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,IAAI;YACjB,KAAK,EAAE;gBACN,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,kDAA4B;aACrC;SACD;QACD,OAAO,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACX,mBAAmB,EAAE;oBACpB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,qCAAqC,EAAE,yEAAyE,CAAC;oBAC3I,IAAI,EAAE,QAAQ;iBACd;gBACD,kBAAkB,EAAE;oBACnB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,oCAAoC,EAAE,wPAAwP,CAAC;oBACzT,IAAI,EAAE,QAAQ;iBACd;aACD;SACD;QACD,IAAI,EAAE;YACL,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,mCAAmC,CAAC;SACvF;KACD;CACD,CAAC;AASF;IAIC;QACC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC5B,CAAC;IAEM,uDAAsB,GAA7B,UAAiC,IAA+B;QAC/D,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,EAAE;YACpE,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;SACrE;QACD,IAAI,MAAM,GAAG,IAAI,cAAc,CAAI,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACnF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;QAEpD,cAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;QACnF,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAM,CAAC,CAAC;QAEhD,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,mDAAkB,GAAzB;QAAA,iBAEC;QADA,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACtF,CAAC;IAEM,sDAAqB,GAA5B;QACC,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC9B,CAAC;IACF,6BAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,wDAAsB;AA8BnC,IAAM,YAAY,GAAG;IACpB,kBAAkB,EAAE,oBAAoB;CACxC,CAAC;AACF,mBAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,EAAE,IAAI,sBAAsB,EAAE,CAAC,CAAC;AAC/D,QAAA,kBAAkB,GAA2B,mBAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;AAEvG,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAM,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport Severity from 'vs/base/common/severity';\nimport { EXTENSION_IDENTIFIER_PATTERN } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { Extensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IMessage } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst schemaRegistry = Registry.as<IJSONContributionRegistry>(Extensions.JSONContribution);\nexport type ExtensionKind = 'workspace' | 'ui' | undefined;\n\nexport class ExtensionMessageCollector {\n\n\tprivate readonly _messageHandler: (msg: IMessage) => void;\n\tprivate readonly _extension: IExtensionDescription;\n\tprivate readonly _extensionPointId: string;\n\n\tconstructor(\n\t\tmessageHandler: (msg: IMessage) => void,\n\t\textension: IExtensionDescription,\n\t\textensionPointId: string\n\t) {\n\t\tthis._messageHandler = messageHandler;\n\t\tthis._extension = extension;\n\t\tthis._extensionPointId = extensionPointId;\n\t}\n\n\tprivate _msg(type: Severity, message: string): void {\n\t\tthis._messageHandler({\n\t\t\ttype: type,\n\t\t\tmessage: message,\n\t\t\textensionId: this._extension.identifier,\n\t\t\textensionPointId: this._extensionPointId\n\t\t});\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._msg(Severity.Error, message);\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._msg(Severity.Warning, message);\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._msg(Severity.Info, message);\n\t}\n}\n\nexport interface IExtensionPointUser<T> {\n\tdescription: IExtensionDescription;\n\tvalue: T;\n\tcollector: ExtensionMessageCollector;\n}\n\nexport interface IExtensionPointHandler<T> {\n\t(extensions: IExtensionPointUser<T>[], delta: ExtensionPointUserDelta<T>): void;\n}\n\nexport interface IExtensionPoint<T> {\n\tname: string;\n\tsetHandler(handler: IExtensionPointHandler<T>): void;\n\tdefaultExtensionKind: ExtensionKind;\n}\n\nexport class ExtensionPointUserDelta<T> {\n\n\tprivate static _toSet<T>(arr: IExtensionPointUser<T>[]): Set<string> {\n\t\tconst result = new Set<string>();\n\t\tfor (let i = 0, len = arr.length; i < len; i++) {\n\t\t\tresult.add(ExtensionIdentifier.toKey(arr[i].description.identifier));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static compute<T>(previous: IExtensionPointUser<T>[] | null, current: IExtensionPointUser<T>[]): ExtensionPointUserDelta<T> {\n\t\tif (!previous || !previous.length) {\n\t\t\treturn new ExtensionPointUserDelta<T>(current, []);\n\t\t}\n\t\tif (!current || !current.length) {\n\t\t\treturn new ExtensionPointUserDelta<T>([], previous);\n\t\t}\n\n\t\tconst previousSet = this._toSet(previous);\n\t\tconst currentSet = this._toSet(current);\n\n\t\tlet added = current.filter(user => !previousSet.has(ExtensionIdentifier.toKey(user.description.identifier)));\n\t\tlet removed = previous.filter(user => !currentSet.has(ExtensionIdentifier.toKey(user.description.identifier)));\n\n\t\treturn new ExtensionPointUserDelta<T>(added, removed);\n\t}\n\n\tconstructor(\n\t\tpublic readonly added: IExtensionPointUser<T>[],\n\t\tpublic readonly removed: IExtensionPointUser<T>[],\n\t) { }\n}\n\nexport class ExtensionPoint<T> implements IExtensionPoint<T> {\n\n\tpublic readonly name: string;\n\tpublic readonly defaultExtensionKind: ExtensionKind;\n\n\tprivate _handler: IExtensionPointHandler<T> | null;\n\tprivate _users: IExtensionPointUser<T>[] | null;\n\tprivate _delta: ExtensionPointUserDelta<T> | null;\n\n\tconstructor(name: string, defaultExtensionKind: ExtensionKind) {\n\t\tthis.name = name;\n\t\tthis.defaultExtensionKind = defaultExtensionKind;\n\t\tthis._handler = null;\n\t\tthis._users = null;\n\t\tthis._delta = null;\n\t}\n\n\tsetHandler(handler: IExtensionPointHandler<T>): void {\n\t\tif (this._handler !== null) {\n\t\t\tthrow new Error('Handler already set!');\n\t\t}\n\t\tthis._handler = handler;\n\t\tthis._handle();\n\t}\n\n\tacceptUsers(users: IExtensionPointUser<T>[]): void {\n\t\tthis._delta = ExtensionPointUserDelta.compute(this._users, users);\n\t\tthis._users = users;\n\t\tthis._handle();\n\t}\n\n\tprivate _handle(): void {\n\t\tif (this._handler === null || this._users === null || this._delta === null) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis._handler(this._users, this._delta);\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n\nconst schemaId = 'vscode://schemas/vscode-extensions';\nexport const schema = {\n\tproperties: {\n\t\tengines: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('vscode.extension.engines', \"Engine compatibility.\"),\n\t\t\tproperties: {\n\t\t\t\t'vscode': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('vscode.extension.engines.vscode', 'For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.'),\n\t\t\t\t\tdefault: '^1.22.0',\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tpublisher: {\n\t\t\tdescription: nls.localize('vscode.extension.publisher', 'The publisher of the VS Code extension.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tdisplayName: {\n\t\t\tdescription: nls.localize('vscode.extension.displayName', 'The display name for the extension used in the VS Code gallery.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tcategories: {\n\t\t\tdescription: nls.localize('vscode.extension.categories', 'The categories used by the VS Code gallery to categorize the extension.'),\n\t\t\ttype: 'array',\n\t\t\tuniqueItems: true,\n\t\t\titems: {\n\t\t\t\toneOf: [{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['Programming Languages', 'Snippets', 'Linters', 'Themes', 'Debuggers', 'Other', 'Keymaps', 'Formatters', 'Extension Packs', 'SCM Providers', 'Azure', 'Language Packs'],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tconst: 'Languages',\n\t\t\t\t\tdeprecationMessage: nls.localize('vscode.extension.category.languages.deprecated', 'Use \\'Programming  Languages\\' instead'),\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tgalleryBanner: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('vscode.extension.galleryBanner', 'Banner used in the VS Code marketplace.'),\n\t\t\tproperties: {\n\t\t\t\tcolor: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.galleryBanner.color', 'The banner color on the VS Code marketplace page header.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\ttheme: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.galleryBanner.theme', 'The color theme for the font used in the banner.'),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['dark', 'light']\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcontributes: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes', 'All contributions of the VS Code extension represented by this package.'),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t// extensions will fill in\n\t\t\t},\n\t\t\tdefault: {}\n\t\t},\n\t\tpreview: {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize('vscode.extension.preview', 'Sets the extension to be flagged as a Preview in the Marketplace.'),\n\t\t},\n\t\tactivationEvents: {\n\t\t\tdescription: nls.localize('vscode.extension.activationEvents', 'Activation events for the VS Code extension.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string',\n\t\t\t\tdefaultSnippets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onLanguage',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onLanguage', 'An activation event emitted whenever a file that resolves to the specified language gets opened.'),\n\t\t\t\t\t\tbody: 'onLanguage:${1:languageId}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onCommand',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onCommand', 'An activation event emitted whenever the specified command gets invoked.'),\n\t\t\t\t\t\tbody: 'onCommand:${2:commandId}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onDebug',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onDebug', 'An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.'),\n\t\t\t\t\t\tbody: 'onDebug'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onDebugInitialConfigurations',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onDebugInitialConfigurations', 'An activation event emitted whenever a \"launch.json\" needs to be created (and all provideDebugConfigurations methods need to be called).'),\n\t\t\t\t\t\tbody: 'onDebugInitialConfigurations'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onDebugResolve',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onDebugResolve', 'An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).'),\n\t\t\t\t\t\tbody: 'onDebugResolve:${6:type}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onDebugAdapterProtocolTracker',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onDebugAdapterProtocolTracker', 'An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.'),\n\t\t\t\t\t\tbody: 'onDebugAdapterProtocolTracker:${6:type}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'workspaceContains',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.workspaceContains', 'An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.'),\n\t\t\t\t\t\tbody: 'workspaceContains:${4:filePattern}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onFileSystem',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onFileSystem', 'An activation event emitted whenever a file or folder is accessed with the given scheme.'),\n\t\t\t\t\t\tbody: 'onFileSystem:${1:scheme}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onSearch',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onSearch', 'An activation event emitted whenever a search is started in the folder with the given scheme.'),\n\t\t\t\t\t\tbody: 'onSearch:${7:scheme}'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onView',\n\t\t\t\t\t\tbody: 'onView:${5:viewId}',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onView', 'An activation event emitted whenever the specified view is expanded.'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: 'onUri',\n\t\t\t\t\t\tbody: 'onUri',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.onUri', 'An activation event emitted whenever a system-wide Uri directed towards this extension is open.'),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '*',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.activationEvents.star', 'An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.'),\n\t\t\t\t\t\tbody: '*'\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t}\n\t\t},\n\t\tbadges: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('vscode.extension.badges', 'Array of badges to display in the sidebar of the Marketplace\\'s extension page.'),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['url', 'href', 'description'],\n\t\t\t\tproperties: {\n\t\t\t\t\turl: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.badges.url', 'Badge image URL.')\n\t\t\t\t\t},\n\t\t\t\t\thref: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.badges.href', 'Badge link.')\n\t\t\t\t\t},\n\t\t\t\t\tdescription: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('vscode.extension.badges.description', 'Badge description.')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmarkdown: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('vscode.extension.markdown', \"Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard.\"),\n\t\t\tenum: ['github', 'standard'],\n\t\t\tdefault: 'github'\n\t\t},\n\t\tqna: {\n\t\t\tdefault: 'marketplace',\n\t\t\tdescription: nls.localize('vscode.extension.qna', \"Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether.\"),\n\t\t\tanyOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: ['string', 'boolean'],\n\t\t\t\t\tenum: ['marketplace', false]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\textensionDependencies: {\n\t\t\tdescription: nls.localize('vscode.extension.extensionDependencies', 'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'),\n\t\t\ttype: 'array',\n\t\t\tuniqueItems: true,\n\t\t\titems: {\n\t\t\t\ttype: 'string',\n\t\t\t\tpattern: EXTENSION_IDENTIFIER_PATTERN\n\t\t\t}\n\t\t},\n\t\textensionPack: {\n\t\t\tdescription: nls.localize('vscode.extension.contributes.extensionPack', \"A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.\"),\n\t\t\ttype: 'array',\n\t\t\tuniqueItems: true,\n\t\t\titems: {\n\t\t\t\ttype: 'string',\n\t\t\t\tpattern: EXTENSION_IDENTIFIER_PATTERN\n\t\t\t}\n\t\t},\n\t\tscripts: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t'vscode:prepublish': {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.scripts.prepublish', 'Script executed before the package is published as a VS Code extension.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\t'vscode:uninstall': {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.scripts.uninstall', 'Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ticon: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('vscode.extension.icon', 'The path to a 128x128 pixel icon.')\n\t\t}\n\t}\n};\n\nexport interface IExtensionPointDescriptor {\n\textensionPoint: string;\n\tdeps?: IExtensionPoint<any>[];\n\tjsonSchema: IJSONSchema;\n\tdefaultExtensionKind?: ExtensionKind;\n}\n\nexport class ExtensionsRegistryImpl {\n\n\tprivate _extensionPoints: { [extPoint: string]: ExtensionPoint<any>; };\n\n\tconstructor() {\n\t\tthis._extensionPoints = {};\n\t}\n\n\tpublic registerExtensionPoint<T>(desc: IExtensionPointDescriptor): IExtensionPoint<T> {\n\t\tif (hasOwnProperty.call(this._extensionPoints, desc.extensionPoint)) {\n\t\t\tthrow new Error('Duplicate extension point: ' + desc.extensionPoint);\n\t\t}\n\t\tlet result = new ExtensionPoint<T>(desc.extensionPoint, desc.defaultExtensionKind);\n\t\tthis._extensionPoints[desc.extensionPoint] = result;\n\n\t\tschema.properties['contributes'].properties[desc.extensionPoint] = desc.jsonSchema;\n\t\tschemaRegistry.registerSchema(schemaId, schema);\n\n\t\treturn result;\n\t}\n\n\tpublic getExtensionPoints(): ExtensionPoint<any>[] {\n\t\treturn Object.keys(this._extensionPoints).map(point => this._extensionPoints[point]);\n\t}\n\n\tpublic getExtensionPointsMap(): { [extPoint: string]: ExtensionPoint<any>; } {\n\t\treturn this._extensionPoints;\n\t}\n}\n\nconst PRExtensions = {\n\tExtensionsRegistry: 'ExtensionsRegistry'\n};\nRegistry.add(PRExtensions.ExtensionsRegistry, new ExtensionsRegistryImpl());\nexport const ExtensionsRegistry: ExtensionsRegistryImpl = Registry.as(PRExtensions.ExtensionsRegistry);\n\nschemaRegistry.registerSchema(schemaId, schema);\n"]}]}