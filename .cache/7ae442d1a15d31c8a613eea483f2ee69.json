{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TelemetryAppenderChannel = /** @class */ (function () {\n    function TelemetryAppenderChannel(appender) {\n        this.appender = appender;\n    }\n    TelemetryAppenderChannel.prototype.listen = function (_, event) {\n        throw new Error(\"Event not found: \" + event);\n    };\n    TelemetryAppenderChannel.prototype.call = function (_, command, _a) {\n        var eventName = _a.eventName, data = _a.data;\n        this.appender.log(eventName, data);\n        return Promise.resolve(null);\n    };\n    return TelemetryAppenderChannel;\n}());\nexports.TelemetryAppenderChannel = TelemetryAppenderChannel;\nvar TelemetryAppenderClient = /** @class */ (function () {\n    function TelemetryAppenderClient(channel) {\n        this.channel = channel;\n    }\n    TelemetryAppenderClient.prototype.log = function (eventName, data) {\n        this.channel.call('log', { eventName: eventName, data: data })\n            .then(undefined, function (err) { return \"Failed to log telemetry: \" + console.warn(err); });\n        return Promise.resolve(null);\n    };\n    TelemetryAppenderClient.prototype.dispose = function () {\n        // TODO\n    };\n    return TelemetryAppenderClient;\n}());\nexports.TelemetryAppenderClient = TelemetryAppenderClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAWhG;IAEC,kCAAoB,QAA4B;QAA5B,aAAQ,GAAR,QAAQ,CAAoB;IAAI,CAAC;IAErD,yCAAM,GAAN,UAAU,CAAU,EAAE,KAAa;QAClC,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,uCAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,EAAkC;YAAhC,wBAAS,EAAE,cAAI;QAClD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IACF,+BAAC;AAAD,CAAC,AAZD,IAYC;AAZY,4DAAwB;AAcrC;IAEC,iCAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,qCAAG,GAAH,UAAI,SAAiB,EAAE,IAAU;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,SAAS,WAAA,EAAE,IAAI,MAAA,EAAE,CAAC;aAC3C,IAAI,CAAC,SAAS,EAAE,UAAA,GAAG,IAAI,OAAA,8BAA4B,OAAO,CAAC,IAAI,CAAC,GAAG,CAAG,EAA/C,CAA+C,CAAC,CAAC;QAE1E,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,yCAAO,GAAP;QACC,OAAO;IACR,CAAC;IACF,8BAAC;AAAD,CAAC,AAdD,IAcC;AAdY,0DAAuB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { Event } from 'vs/base/common/event';\n\nexport interface ITelemetryLog {\n\teventName: string;\n\tdata?: any;\n}\n\nexport class TelemetryAppenderChannel implements IServerChannel {\n\n\tconstructor(private appender: ITelemetryAppender) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, { eventName, data }: ITelemetryLog): Promise<any> {\n\t\tthis.appender.log(eventName, data);\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TelemetryAppenderClient implements ITelemetryAppender {\n\n\tconstructor(private channel: IChannel) { }\n\n\tlog(eventName: string, data?: any): any {\n\t\tthis.channel.call('log', { eventName, data })\n\t\t\t.then(undefined, err => `Failed to log telemetry: ${console.warn(err)}`);\n\n\t\treturn Promise.resolve(null);\n\t}\n\n\tdispose(): any {\n\t\t// TODO\n\t}\n}\n"]}]}