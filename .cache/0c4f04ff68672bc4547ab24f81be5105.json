{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/contextmenu/electron-main/contextmenu.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/contextmenu/electron-main/contextmenu.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"electron\", \"vs/base/parts/contextmenu/common/contextmenu\"], function (require, exports, electron_1, contextmenu_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function registerContextMenuListener() {\n        electron_1.ipcMain.on(contextmenu_1.CONTEXT_MENU_CHANNEL, (event, contextMenuId, items, onClickChannel, options) => {\n            const menu = createMenu(event, onClickChannel, items);\n            menu.popup({\n                window: electron_1.BrowserWindow.fromWebContents(event.sender),\n                x: options ? options.x : undefined,\n                y: options ? options.y : undefined,\n                positioningItem: options ? options.positioningItem : undefined,\n                callback: () => {\n                    event.sender.send(contextmenu_1.CONTEXT_MENU_CLOSE_CHANNEL, contextMenuId);\n                }\n            });\n        });\n    }\n    exports.registerContextMenuListener = registerContextMenuListener;\n    function createMenu(event, onClickChannel, items) {\n        const menu = new electron_1.Menu();\n        items.forEach(item => {\n            let menuitem;\n            // Separator\n            if (item.type === 'separator') {\n                menuitem = new electron_1.MenuItem({\n                    type: item.type,\n                });\n            }\n            // Sub Menu\n            else if (Array.isArray(item.submenu)) {\n                menuitem = new electron_1.MenuItem({\n                    submenu: createMenu(event, onClickChannel, item.submenu),\n                    label: item.label\n                });\n            }\n            // Normal Menu Item\n            else {\n                menuitem = new electron_1.MenuItem({\n                    label: item.label,\n                    type: item.type,\n                    accelerator: item.accelerator,\n                    checked: item.checked,\n                    enabled: item.enabled,\n                    visible: item.visible,\n                    click: (menuItem, win, contextmenuEvent) => event.sender.send(onClickChannel, item.id, contextmenuEvent)\n                });\n            }\n            menu.append(menuitem);\n        });\n        return menu;\n    }\n});\n",null]}