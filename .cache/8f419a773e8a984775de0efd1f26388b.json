{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/actions/showEmmetCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/actions/showEmmetCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar EMMET_COMMANDS_PREFIX = '>Emmet: ';\nvar ShowEmmetCommandsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowEmmetCommandsAction, _super);\n    function ShowEmmetCommandsAction() {\n        return _super.call(this, {\n            id: 'workbench.action.showEmmetCommands',\n            label: nls.localize('showEmmetCommands', \"Show Emmet Commands\"),\n            alias: 'Show Emmet Commands',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarEditMenu,\n                group: '5_insert',\n                title: nls.localize({ key: 'miShowEmmetCommands', comment: ['&& denotes a mnemonic'] }, \"E&&mmet...\"),\n                order: 4\n            }\n        }) || this;\n    }\n    ShowEmmetCommandsAction.prototype.run = function (accessor, editor) {\n        var quickOpenService = accessor.get(quickOpen_1.IQuickOpenService);\n        quickOpenService.show(EMMET_COMMANDS_PREFIX);\n        return Promise.resolve(undefined);\n    };\n    return ShowEmmetCommandsAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(ShowEmmetCommandsAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/actions/showEmmetCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/actions/showEmmetCommands.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,uEAA0G;AAC1G,oEAA2E;AAC3E,wEAAuE;AAEvE,8DAA4D;AAE5D,IAAM,qBAAqB,GAAG,UAAU,CAAC;AAEzC;IAAsC,mDAAY;IAEjD;eACC,kBAAM;YACL,EAAE,EAAE,oCAAoC;YACxC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;YAC/D,KAAK,EAAE,qBAAqB;YAC5B,YAAY,EAAE,qCAAiB,CAAC,QAAQ;YACxC,WAAW,EAAE;gBACZ,MAAM,EAAE,gBAAM,CAAC,eAAe;gBAC9B,KAAK,EAAE,UAAU;gBACjB,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,qBAAqB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,YAAY,CAAC;gBACrG,KAAK,EAAE,CAAC;aACR;SACD,CAAC;IACH,CAAC;IAEM,qCAAG,GAAV,UAAW,QAA0B,EAAE,MAAmB;QACzD,IAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,6BAAiB,CAAC,CAAC;QACzD,gBAAgB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC7C,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;IACF,8BAAC;AAAD,CAAC,AAtBD,CAAsC,+BAAY,GAsBjD;AAED,uCAAoB,CAAC,uBAAuB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport { registerEditorAction, EditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { MenuId } from 'vs/platform/actions/common/actions';\n\nconst EMMET_COMMANDS_PREFIX = '>Emmet: ';\n\nclass ShowEmmetCommandsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.showEmmetCommands',\n\t\t\tlabel: nls.localize('showEmmetCommands', \"Show Emmet Commands\"),\n\t\t\talias: 'Show Emmet Commands',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarEditMenu,\n\t\t\t\tgroup: '5_insert',\n\t\t\t\ttitle: nls.localize({ key: 'miShowEmmetCommands', comment: ['&& denotes a mnemonic'] }, \"E&&mmet...\"),\n\t\t\t\torder: 4\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst quickOpenService = accessor.get(IQuickOpenService);\n\t\tquickOpenService.show(EMMET_COMMANDS_PREFIX);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nregisterEditorAction(ShowEmmetCommandsAction);\n"]}]}