{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/position.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/position.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A position in the editor.\n     */\n    class Position {\n        constructor(lineNumber, column) {\n            this.lineNumber = lineNumber;\n            this.column = column;\n        }\n        /**\n         * Create a new postion from this position.\n         *\n         * @param newLineNumber new line number\n         * @param newColumn new column\n         */\n        with(newLineNumber = this.lineNumber, newColumn = this.column) {\n            if (newLineNumber === this.lineNumber && newColumn === this.column) {\n                return this;\n            }\n            else {\n                return new Position(newLineNumber, newColumn);\n            }\n        }\n        /**\n         * Derive a new position from this position.\n         *\n         * @param deltaLineNumber line number delta\n         * @param deltaColumn column delta\n         */\n        delta(deltaLineNumber = 0, deltaColumn = 0) {\n            return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n        }\n        /**\n         * Test if this position equals other position\n         */\n        equals(other) {\n            return Position.equals(this, other);\n        }\n        /**\n         * Test if position `a` equals position `b`\n         */\n        static equals(a, b) {\n            if (!a && !b) {\n                return true;\n            }\n            return (!!a &&\n                !!b &&\n                a.lineNumber === b.lineNumber &&\n                a.column === b.column);\n        }\n        /**\n         * Test if this position is before other position.\n         * If the two positions are equal, the result will be false.\n         */\n        isBefore(other) {\n            return Position.isBefore(this, other);\n        }\n        /**\n         * Test if position `a` is before position `b`.\n         * If the two positions are equal, the result will be false.\n         */\n        static isBefore(a, b) {\n            if (a.lineNumber < b.lineNumber) {\n                return true;\n            }\n            if (b.lineNumber < a.lineNumber) {\n                return false;\n            }\n            return a.column < b.column;\n        }\n        /**\n         * Test if this position is before other position.\n         * If the two positions are equal, the result will be true.\n         */\n        isBeforeOrEqual(other) {\n            return Position.isBeforeOrEqual(this, other);\n        }\n        /**\n         * Test if position `a` is before position `b`.\n         * If the two positions are equal, the result will be true.\n         */\n        static isBeforeOrEqual(a, b) {\n            if (a.lineNumber < b.lineNumber) {\n                return true;\n            }\n            if (b.lineNumber < a.lineNumber) {\n                return false;\n            }\n            return a.column <= b.column;\n        }\n        /**\n         * A function that compares positions, useful for sorting\n         */\n        static compare(a, b) {\n            let aLineNumber = a.lineNumber | 0;\n            let bLineNumber = b.lineNumber | 0;\n            if (aLineNumber === bLineNumber) {\n                let aColumn = a.column | 0;\n                let bColumn = b.column | 0;\n                return aColumn - bColumn;\n            }\n            return aLineNumber - bLineNumber;\n        }\n        /**\n         * Clone this position.\n         */\n        clone() {\n            return new Position(this.lineNumber, this.column);\n        }\n        /**\n         * Convert to a human-readable representation.\n         */\n        toString() {\n            return '(' + this.lineNumber + ',' + this.column + ')';\n        }\n        // ---\n        /**\n         * Create a `Position` from an `IPosition`.\n         */\n        static lift(pos) {\n            return new Position(pos.lineNumber, pos.column);\n        }\n        /**\n         * Test if `obj` is an `IPosition`.\n         */\n        static isIPosition(obj) {\n            return (obj\n                && (typeof obj.lineNumber === 'number')\n                && (typeof obj.column === 'number'));\n        }\n    }\n    exports.Position = Position;\n});\n",null]}