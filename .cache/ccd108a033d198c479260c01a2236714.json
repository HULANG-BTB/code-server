{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/common/update.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\"], function (require, exports, instantiation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Updates are run as a state machine:\n     *\n     *      Uninitialized\n     *           ↓\n     *          Idle\n     *          ↓  ↑\n     *   Checking for Updates  →  Available for Download\n     *         ↓\n     *     Downloading  →   Ready\n     *         ↓               ↑\n     *     Downloaded   →  Updating\n     *\n     * Available: There is an update available for download (linux).\n     * Ready: Code will be updated as soon as it restarts (win32, darwin).\n     * Donwloaded: There is an update ready to be installed in the background (win32).\n     */\n    var StateType;\n    (function (StateType) {\n        StateType[\"Uninitialized\"] = \"uninitialized\";\n        StateType[\"Idle\"] = \"idle\";\n        StateType[\"CheckingForUpdates\"] = \"checking for updates\";\n        StateType[\"AvailableForDownload\"] = \"available for download\";\n        StateType[\"Downloading\"] = \"downloading\";\n        StateType[\"Downloaded\"] = \"downloaded\";\n        StateType[\"Updating\"] = \"updating\";\n        StateType[\"Ready\"] = \"ready\";\n    })(StateType = exports.StateType || (exports.StateType = {}));\n    var UpdateType;\n    (function (UpdateType) {\n        UpdateType[UpdateType[\"Setup\"] = 0] = \"Setup\";\n        UpdateType[UpdateType[\"Archive\"] = 1] = \"Archive\";\n        UpdateType[UpdateType[\"Snap\"] = 2] = \"Snap\";\n    })(UpdateType = exports.UpdateType || (exports.UpdateType = {}));\n    exports.State = {\n        Uninitialized: { type: StateType.Uninitialized },\n        Idle: (updateType, error) => ({ type: StateType.Idle, updateType, error }),\n        CheckingForUpdates: (context) => ({ type: StateType.CheckingForUpdates, context }),\n        AvailableForDownload: (update) => ({ type: StateType.AvailableForDownload, update }),\n        Downloading: (update) => ({ type: StateType.Downloading, update }),\n        Downloaded: (update) => ({ type: StateType.Downloaded, update }),\n        Updating: (update) => ({ type: StateType.Updating, update }),\n        Ready: (update) => ({ type: StateType.Ready, update }),\n    };\n    exports.IUpdateService = instantiation_1.createDecorator('updateService');\n});\n",null]}