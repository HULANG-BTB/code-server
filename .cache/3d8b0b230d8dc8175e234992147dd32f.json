{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/actions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/actions.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/event\"], function (require, exports, lifecycle_1, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Action {\n        constructor(id, label = '', cssClass = '', enabled = true, actionCallback) {\n            this._onDidChange = new event_1.Emitter();\n            this.onDidChange = this._onDidChange.event;\n            this._id = id;\n            this._label = label;\n            this._cssClass = cssClass;\n            this._enabled = enabled;\n            this._actionCallback = actionCallback;\n        }\n        get id() {\n            return this._id;\n        }\n        get label() {\n            return this._label;\n        }\n        set label(value) {\n            this._setLabel(value);\n        }\n        _setLabel(value) {\n            if (this._label !== value) {\n                this._label = value;\n                this._onDidChange.fire({ label: value });\n            }\n        }\n        get tooltip() {\n            return this._tooltip;\n        }\n        set tooltip(value) {\n            this._setTooltip(value);\n        }\n        _setTooltip(value) {\n            if (this._tooltip !== value) {\n                this._tooltip = value;\n                this._onDidChange.fire({ tooltip: value });\n            }\n        }\n        get class() {\n            return this._cssClass;\n        }\n        set class(value) {\n            this._setClass(value);\n        }\n        _setClass(value) {\n            if (this._cssClass !== value) {\n                this._cssClass = value;\n                this._onDidChange.fire({ class: value });\n            }\n        }\n        get enabled() {\n            return this._enabled;\n        }\n        set enabled(value) {\n            this._setEnabled(value);\n        }\n        _setEnabled(value) {\n            if (this._enabled !== value) {\n                this._enabled = value;\n                this._onDidChange.fire({ enabled: value });\n            }\n        }\n        get checked() {\n            return this._checked;\n        }\n        set checked(value) {\n            this._setChecked(value);\n        }\n        get radio() {\n            return this._radio;\n        }\n        set radio(value) {\n            this._setRadio(value);\n        }\n        _setChecked(value) {\n            if (this._checked !== value) {\n                this._checked = value;\n                this._onDidChange.fire({ checked: value });\n            }\n        }\n        _setRadio(value) {\n            if (this._radio !== value) {\n                this._radio = value;\n                this._onDidChange.fire({ radio: value });\n            }\n        }\n        run(event, _data) {\n            if (this._actionCallback) {\n                return this._actionCallback(event);\n            }\n            return Promise.resolve(true);\n        }\n        dispose() {\n            this._onDidChange.dispose();\n        }\n    }\n    exports.Action = Action;\n    class ActionRunner extends lifecycle_1.Disposable {\n        constructor() {\n            super(...arguments);\n            this._onDidBeforeRun = this._register(new event_1.Emitter());\n            this.onDidBeforeRun = this._onDidBeforeRun.event;\n            this._onDidRun = this._register(new event_1.Emitter());\n            this.onDidRun = this._onDidRun.event;\n        }\n        run(action, context) {\n            if (!action.enabled) {\n                return Promise.resolve(null);\n            }\n            this._onDidBeforeRun.fire({ action: action });\n            return this.runAction(action, context).then((result) => {\n                this._onDidRun.fire({ action: action, result: result });\n            }, (error) => {\n                this._onDidRun.fire({ action: action, error: error });\n            });\n        }\n        runAction(action, context) {\n            const res = context ? action.run(context) : action.run();\n            return Promise.resolve(res);\n        }\n    }\n    exports.ActionRunner = ActionRunner;\n    class RadioGroup extends lifecycle_1.Disposable {\n        constructor(actions) {\n            super();\n            this.actions = actions;\n            this._register(lifecycle_1.combinedDisposable(actions.map(action => {\n                return action.onDidChange(e => {\n                    if (e.checked && action.checked) {\n                        for (const candidate of actions) {\n                            if (candidate !== action) {\n                                candidate.checked = false;\n                            }\n                        }\n                    }\n                });\n            })));\n        }\n    }\n    exports.RadioGroup = RadioGroup;\n});\n",null]}