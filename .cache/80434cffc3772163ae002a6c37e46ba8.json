{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/platform/instantiation/common/instantiation\", \"vs/editor/common/editorContextKeys\", \"vs/platform/contextkey/common/contextkey\", \"vs/editor/browser/editorExtensions\", \"./parameterHintsWidget\", \"vs/editor/contrib/parameterHints/provideSignatureHelp\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/editor/common/modes\"], function (require, exports, nls, keyCodes_1, lifecycle_1, instantiation_1, editorContextKeys_1, contextkey_1, editorExtensions_1, parameterHintsWidget_1, provideSignatureHelp_1, keybindingsRegistry_1, modes) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ParameterHintsController = class ParameterHintsController {\n        constructor(editor, instantiationService) {\n            this.editor = editor;\n            this.widget = instantiationService.createInstance(parameterHintsWidget_1.ParameterHintsWidget, this.editor);\n        }\n        static get(editor) {\n            return editor.getContribution(ParameterHintsController.ID);\n        }\n        getId() {\n            return ParameterHintsController.ID;\n        }\n        cancel() {\n            this.widget.cancel();\n        }\n        previous() {\n            this.widget.previous();\n        }\n        next() {\n            this.widget.next();\n        }\n        trigger(context) {\n            this.widget.trigger(context);\n        }\n        dispose() {\n            lifecycle_1.dispose(this.widget);\n        }\n    };\n    ParameterHintsController.ID = 'editor.controller.parameterHints';\n    ParameterHintsController = __decorate([\n        __param(1, instantiation_1.IInstantiationService)\n    ], ParameterHintsController);\n    class TriggerParameterHintsAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.triggerParameterHints',\n                label: nls.localize('parameterHints.trigger.label', \"Trigger Parameter Hints\"),\n                alias: 'Trigger Parameter Hints',\n                precondition: editorContextKeys_1.EditorContextKeys.hasSignatureHelpProvider,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Space,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            let controller = ParameterHintsController.get(editor);\n            if (controller) {\n                controller.trigger({\n                    triggerKind: modes.SignatureHelpTriggerKind.Invoke\n                });\n            }\n        }\n    }\n    exports.TriggerParameterHintsAction = TriggerParameterHintsAction;\n    editorExtensions_1.registerEditorContribution(ParameterHintsController);\n    editorExtensions_1.registerEditorAction(TriggerParameterHintsAction);\n    const weight = keybindingsRegistry_1.KeybindingWeight.EditorContrib + 75;\n    const ParameterHintsCommand = editorExtensions_1.EditorCommand.bindToContribution(ParameterHintsController.get);\n    editorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n        id: 'closeParameterHints',\n        precondition: provideSignatureHelp_1.Context.Visible,\n        handler: x => x.cancel(),\n        kbOpts: {\n            weight: weight,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyCode.Escape,\n            secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n        id: 'showPrevParameterHint',\n        precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),\n        handler: x => x.previous(),\n        kbOpts: {\n            weight: weight,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyCode.UpArrow,\n            secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow],\n            mac: { primary: keyCodes_1.KeyCode.UpArrow, secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_P] }\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n        id: 'showNextParameterHint',\n        precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),\n        handler: x => x.next(),\n        kbOpts: {\n            weight: weight,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyCode.DownArrow,\n            secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow],\n            mac: { primary: keyCodes_1.KeyCode.DownArrow, secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_N] }\n        }\n    }));\n});\n",null]}