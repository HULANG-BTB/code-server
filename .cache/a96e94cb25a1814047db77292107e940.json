{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/node/configuration.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/node/configuration.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/errors\", \"vs/platform/configuration/common/configurationModels\", \"vs/base/node/config\", \"vs/base/common/event\", \"vs/base/common/async\", \"vs/base/common/resources\"], function (require, exports, lifecycle_1, errors_1, configurationModels_1, config_1, event_1, async_1, resources) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class NodeBasedUserConfiguration extends lifecycle_1.Disposable {\n        constructor(settingsPath) {\n            super();\n            this.settingsPath = settingsPath;\n            this._onDidChangeConfiguration = this._register(new event_1.Emitter());\n            this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n        }\n        initialize() {\n            if (!this.initializePromise) {\n                this.initializePromise = new Promise((c, e) => {\n                    this.userConfigModelWatcher = new config_1.ConfigWatcher(this.settingsPath, {\n                        changeBufferDelay: 300, onError: error => errors_1.onUnexpectedError(error), defaultConfig: new configurationModels_1.ConfigurationModelParser(this.settingsPath), parse: (content, parseErrors) => {\n                            const userConfigModelParser = new configurationModels_1.ConfigurationModelParser(this.settingsPath);\n                            userConfigModelParser.parse(content);\n                            parseErrors = [...userConfigModelParser.errors];\n                            return userConfigModelParser;\n                        }, initCallback: () => c(undefined)\n                    });\n                    this._register(this.userConfigModelWatcher);\n                    // Listeners\n                    this._register(this.userConfigModelWatcher.onDidUpdateConfiguration(() => this._onDidChangeConfiguration.fire(this.userConfigModelWatcher.getConfig().configurationModel)));\n                });\n            }\n            return this.initializePromise.then(() => this.userConfigModelWatcher.getConfig().configurationModel);\n        }\n        initializeSync() {\n            this.initialize();\n            return this.userConfigModelWatcher.getConfig().configurationModel;\n        }\n        reload() {\n            return this.initialize().then(() => new Promise(c => this.userConfigModelWatcher.reload(userConfigModelParser => c(userConfigModelParser.configurationModel))));\n        }\n    }\n    exports.NodeBasedUserConfiguration = NodeBasedUserConfiguration;\n    class FileServiceBasedUserConfiguration extends lifecycle_1.Disposable {\n        constructor(configurationResource, fileService) {\n            super();\n            this.configurationResource = configurationResource;\n            this.fileService = fileService;\n            this._onDidChangeConfiguration = this._register(new event_1.Emitter());\n            this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n            this._register(fileService.onFileChanges(e => this.handleFileEvents(e)));\n            this.reloadConfigurationScheduler = this._register(new async_1.RunOnceScheduler(() => this.reload().then(configurationModel => this._onDidChangeConfiguration.fire(configurationModel)), 50));\n            this.fileService.watchFileChanges(this.configurationResource);\n            this._register(lifecycle_1.toDisposable(() => this.fileService.unwatchFileChanges(this.configurationResource)));\n        }\n        initialize() {\n            return this.reload();\n        }\n        reload() {\n            return this.fileService.resolveContent(this.configurationResource)\n                .then(content => content.value, () => {\n                // File not found\n                return '';\n            }).then(content => {\n                const parser = new configurationModels_1.ConfigurationModelParser(this.configurationResource.toString());\n                parser.parse(content);\n                return parser.configurationModel;\n            });\n        }\n        handleFileEvents(event) {\n            const events = event.changes;\n            let affectedByChanges = false;\n            // Find changes that affect workspace file\n            for (let i = 0, len = events.length; i < len && !affectedByChanges; i++) {\n                affectedByChanges = resources.isEqual(this.configurationResource, events[i].resource);\n            }\n            if (affectedByChanges) {\n                this.reloadConfigurationScheduler.schedule();\n            }\n        }\n    }\n    exports.FileServiceBasedUserConfiguration = FileServiceBasedUserConfiguration;\n});\n",null]}