{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/marshalling.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/base/common/strings\"], function (require, exports, uri_1, strings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function stringify(obj) {\n        return JSON.stringify(obj, replacer);\n    }\n    exports.stringify = stringify;\n    function parse(text) {\n        let data = JSON.parse(text);\n        data = revive(data, 0);\n        return data;\n    }\n    exports.parse = parse;\n    function replacer(key, value) {\n        // URI is done via toJSON-member\n        if (value instanceof RegExp) {\n            return {\n                $mid: 2,\n                source: value.source,\n                flags: strings_1.regExpFlags(value),\n            };\n        }\n        return value;\n    }\n    function revive(obj, depth) {\n        if (!obj || depth > 200) {\n            return obj;\n        }\n        if (typeof obj === 'object') {\n            switch (obj.$mid) {\n                case 1: return uri_1.URI.revive(obj);\n                case 2: return new RegExp(obj.source, obj.flags);\n            }\n            // walk object (or array)\n            for (let key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    obj[key] = revive(obj[key], depth + 1);\n                }\n            }\n        }\n        return obj;\n    }\n    exports.revive = revive;\n});\n",null]}