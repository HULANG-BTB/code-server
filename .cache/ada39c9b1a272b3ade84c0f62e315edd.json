{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar abstractMode_1 = require(\"vs/editor/common/modes/abstractMode\");\nvar nullMode_1 = require(\"vs/editor/common/modes/nullMode\");\nvar languagesRegistry_1 = require(\"vs/editor/common/services/languagesRegistry\");\nvar LanguageSelection = /** @class */ (function (_super) {\n    tslib_1.__extends(LanguageSelection, _super);\n    function LanguageSelection(onLanguagesMaybeChanged, selector) {\n        var _this = _super.call(this) || this;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChange = _this._onDidChange.event;\n        _this._selector = selector;\n        _this.languageIdentifier = _this._selector();\n        _this._register(onLanguagesMaybeChanged(function () { return _this._evaluate(); }));\n        return _this;\n    }\n    LanguageSelection.prototype._evaluate = function () {\n        var languageIdentifier = this._selector();\n        if (languageIdentifier.id === this.languageIdentifier.id) {\n            // no change\n            return;\n        }\n        this.languageIdentifier = languageIdentifier;\n        this._onDidChange.fire(this.languageIdentifier);\n    };\n    return LanguageSelection;\n}(lifecycle_1.Disposable));\nvar ModeServiceImpl = /** @class */ (function () {\n    function ModeServiceImpl(warnOnOverwrite) {\n        if (warnOnOverwrite === void 0) { warnOnOverwrite = false; }\n        var _this = this;\n        this._onDidCreateMode = new event_1.Emitter();\n        this.onDidCreateMode = this._onDidCreateMode.event;\n        this._onLanguagesMaybeChanged = new event_1.Emitter();\n        this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n        this._instantiatedModes = {};\n        this._registry = new languagesRegistry_1.LanguagesRegistry(true, warnOnOverwrite);\n        this._registry.onDidChange(function () { return _this._onLanguagesMaybeChanged.fire(); });\n    }\n    ModeServiceImpl.prototype._onReady = function () {\n        return Promise.resolve(true);\n    };\n    ModeServiceImpl.prototype.isRegisteredMode = function (mimetypeOrModeId) {\n        return this._registry.isRegisteredMode(mimetypeOrModeId);\n    };\n    ModeServiceImpl.prototype.getRegisteredModes = function () {\n        return this._registry.getRegisteredModes();\n    };\n    ModeServiceImpl.prototype.getRegisteredLanguageNames = function () {\n        return this._registry.getRegisteredLanguageNames();\n    };\n    ModeServiceImpl.prototype.getExtensions = function (alias) {\n        return this._registry.getExtensions(alias);\n    };\n    ModeServiceImpl.prototype.getFilenames = function (alias) {\n        return this._registry.getFilenames(alias);\n    };\n    ModeServiceImpl.prototype.getMimeForMode = function (modeId) {\n        return this._registry.getMimeForMode(modeId);\n    };\n    ModeServiceImpl.prototype.getLanguageName = function (modeId) {\n        return this._registry.getLanguageName(modeId);\n    };\n    ModeServiceImpl.prototype.getModeIdForLanguageName = function (alias) {\n        return this._registry.getModeIdForLanguageNameLowercase(alias);\n    };\n    ModeServiceImpl.prototype.getModeIdByFilepathOrFirstLine = function (filepath, firstLine) {\n        var modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(filepath, firstLine);\n        if (modeIds.length > 0) {\n            return modeIds[0];\n        }\n        return null;\n    };\n    ModeServiceImpl.prototype.getModeId = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n        var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n        if (modeIds.length > 0) {\n            return modeIds[0];\n        }\n        return null;\n    };\n    ModeServiceImpl.prototype.getLanguageIdentifier = function (modeId) {\n        return this._registry.getLanguageIdentifier(modeId);\n    };\n    ModeServiceImpl.prototype.getConfigurationFiles = function (modeId) {\n        return this._registry.getConfigurationFiles(modeId);\n    };\n    // --- instantiation\n    ModeServiceImpl.prototype.create = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n        var _this = this;\n        return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n            var modeId = _this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n            return _this._createModeAndGetLanguageIdentifier(modeId);\n        });\n    };\n    ModeServiceImpl.prototype.createByLanguageName = function (languageName) {\n        var _this = this;\n        return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n            var modeId = _this._getModeIdByLanguageName(languageName);\n            return _this._createModeAndGetLanguageIdentifier(modeId);\n        });\n    };\n    ModeServiceImpl.prototype.createByFilepathOrFirstLine = function (filepath, firstLine) {\n        var _this = this;\n        return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n            var modeId = _this.getModeIdByFilepathOrFirstLine(filepath, firstLine);\n            return _this._createModeAndGetLanguageIdentifier(modeId);\n        });\n    };\n    ModeServiceImpl.prototype._createModeAndGetLanguageIdentifier = function (modeId) {\n        // Fall back to plain text if no mode was found\n        var languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n        this._getOrCreateMode(languageIdentifier.language);\n        return languageIdentifier;\n    };\n    ModeServiceImpl.prototype.triggerMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n        var modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n        // Fall back to plain text if no mode was found\n        this._getOrCreateMode(modeId || 'plaintext');\n    };\n    ModeServiceImpl.prototype.waitForLanguageRegistration = function () {\n        return this._onReady().then(function () { });\n    };\n    ModeServiceImpl.prototype._getModeIdByLanguageName = function (languageName) {\n        var modeIds = this._registry.getModeIdsFromLanguageName(languageName);\n        if (modeIds.length > 0) {\n            return modeIds[0];\n        }\n        return null;\n    };\n    ModeServiceImpl.prototype._getOrCreateMode = function (modeId) {\n        if (!this._instantiatedModes.hasOwnProperty(modeId)) {\n            var languageIdentifier = this.getLanguageIdentifier(modeId) || nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n            this._instantiatedModes[modeId] = new abstractMode_1.FrankensteinMode(languageIdentifier);\n            this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n        }\n        return this._instantiatedModes[modeId];\n    };\n    return ModeServiceImpl;\n}());\nexports.ModeServiceImpl = ModeServiceImpl;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modeServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IMode, LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { FrankensteinMode } from 'vs/editor/common/modes/abstractMode';\nimport { NULL_LANGUAGE_IDENTIFIER } from 'vs/editor/common/modes/nullMode';\nimport { LanguagesRegistry } from 'vs/editor/common/services/languagesRegistry';\nimport { ILanguageSelection, IModeService } from 'vs/editor/common/services/modeService';\n\nclass LanguageSelection extends Disposable implements ILanguageSelection {\n\n\tpublic languageIdentifier: LanguageIdentifier;\n\n\tprivate readonly _selector: () => LanguageIdentifier;\n\n\tprivate readonly _onDidChange: Emitter<LanguageIdentifier> = this._register(new Emitter<LanguageIdentifier>());\n\tpublic readonly onDidChange: Event<LanguageIdentifier> = this._onDidChange.event;\n\n\tconstructor(onLanguagesMaybeChanged: Event<void>, selector: () => LanguageIdentifier) {\n\t\tsuper();\n\t\tthis._selector = selector;\n\t\tthis.languageIdentifier = this._selector();\n\t\tthis._register(onLanguagesMaybeChanged(() => this._evaluate()));\n\t}\n\n\tprivate _evaluate(): void {\n\t\tlet languageIdentifier = this._selector();\n\t\tif (languageIdentifier.id === this.languageIdentifier.id) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis.languageIdentifier = languageIdentifier;\n\t\tthis._onDidChange.fire(this.languageIdentifier);\n\t}\n}\n\nexport class ModeServiceImpl implements IModeService {\n\tpublic _serviceBrand: any;\n\n\tprivate readonly _instantiatedModes: { [modeId: string]: IMode; };\n\tprivate readonly _registry: LanguagesRegistry;\n\n\tprivate readonly _onDidCreateMode = new Emitter<IMode>();\n\tpublic readonly onDidCreateMode: Event<IMode> = this._onDidCreateMode.event;\n\n\tprotected readonly _onLanguagesMaybeChanged = new Emitter<void>();\n\tprivate readonly onLanguagesMaybeChanged: Event<void> = this._onLanguagesMaybeChanged.event;\n\n\tconstructor(warnOnOverwrite = false) {\n\t\tthis._instantiatedModes = {};\n\n\t\tthis._registry = new LanguagesRegistry(true, warnOnOverwrite);\n\t\tthis._registry.onDidChange(() => this._onLanguagesMaybeChanged.fire());\n\t}\n\n\tprotected _onReady(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\tpublic isRegisteredMode(mimetypeOrModeId: string): boolean {\n\t\treturn this._registry.isRegisteredMode(mimetypeOrModeId);\n\t}\n\n\tpublic getRegisteredModes(): string[] {\n\t\treturn this._registry.getRegisteredModes();\n\t}\n\n\tpublic getRegisteredLanguageNames(): string[] {\n\t\treturn this._registry.getRegisteredLanguageNames();\n\t}\n\n\tpublic getExtensions(alias: string): string[] {\n\t\treturn this._registry.getExtensions(alias);\n\t}\n\n\tpublic getFilenames(alias: string): string[] {\n\t\treturn this._registry.getFilenames(alias);\n\t}\n\n\tpublic getMimeForMode(modeId: string): string | null {\n\t\treturn this._registry.getMimeForMode(modeId);\n\t}\n\n\tpublic getLanguageName(modeId: string): string | null {\n\t\treturn this._registry.getLanguageName(modeId);\n\t}\n\n\tpublic getModeIdForLanguageName(alias: string): string | null {\n\t\treturn this._registry.getModeIdForLanguageNameLowercase(alias);\n\t}\n\n\tpublic getModeIdByFilepathOrFirstLine(filepath: string | null, firstLine?: string): string | null {\n\t\tconst modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(filepath, firstLine);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getModeId(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): string | null {\n\t\tconst modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier | null {\n\t\treturn this._registry.getLanguageIdentifier(modeId);\n\t}\n\n\tpublic getConfigurationFiles(modeId: string): URI[] {\n\t\treturn this._registry.getConfigurationFiles(modeId);\n\t}\n\n\t// --- instantiation\n\n\tpublic create(commaSeparatedMimetypesOrCommaSeparatedIds: string | undefined): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tpublic createByLanguageName(languageName: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this._getModeIdByLanguageName(languageName);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tpublic createByFilepathOrFirstLine(filepath: string | null, firstLine?: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onLanguagesMaybeChanged, () => {\n\t\t\tconst modeId = this.getModeIdByFilepathOrFirstLine(filepath, firstLine);\n\t\t\treturn this._createModeAndGetLanguageIdentifier(modeId);\n\t\t});\n\t}\n\n\tprivate _createModeAndGetLanguageIdentifier(modeId: string | null): LanguageIdentifier {\n\t\t// Fall back to plain text if no mode was found\n\t\tconst languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\n\t\tthis._getOrCreateMode(languageIdentifier.language);\n\t\treturn languageIdentifier;\n\t}\n\n\tpublic triggerMode(commaSeparatedMimetypesOrCommaSeparatedIds: string): void {\n\t\tconst modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\t\t// Fall back to plain text if no mode was found\n\t\tthis._getOrCreateMode(modeId || 'plaintext');\n\t}\n\n\tpublic waitForLanguageRegistration(): Promise<void> {\n\t\treturn this._onReady().then(() => { });\n\t}\n\n\tprivate _getModeIdByLanguageName(languageName: string): string | null {\n\t\tconst modeIds = this._registry.getModeIdsFromLanguageName(languageName);\n\n\t\tif (modeIds.length > 0) {\n\t\t\treturn modeIds[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _getOrCreateMode(modeId: string): IMode {\n\t\tif (!this._instantiatedModes.hasOwnProperty(modeId)) {\n\t\t\tlet languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\n\t\t\tthis._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\n\n\t\t\tthis._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n\t\t}\n\t\treturn this._instantiatedModes[modeId];\n\t}\n}\n"]}]}