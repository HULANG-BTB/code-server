{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/request/electron-browser/requestService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/request/electron-browser/requestService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar stream_1 = require(\"stream\");\nvar requestService_1 = require(\"vs/platform/request/node/requestService\");\nvar errors_1 = require(\"vs/base/common/errors\");\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nvar RequestService = /** @class */ (function (_super) {\n    tslib_1.__extends(RequestService, _super);\n    function RequestService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RequestService.prototype.request = function (options, token) {\n        return _super.prototype.request.call(this, options, token, exports.xhrRequest);\n    };\n    return RequestService;\n}(requestService_1.RequestService));\nexports.RequestService = RequestService;\nexports.xhrRequest = function (options, token) {\n    var xhr = new XMLHttpRequest();\n    return new Promise(function (resolve, reject) {\n        xhr.open(options.type || 'GET', options.url || '', true, options.user, options.password);\n        setRequestHeaders(xhr, options);\n        xhr.responseType = 'arraybuffer';\n        xhr.onerror = function (e) { return reject(new Error(xhr.statusText && ('XHR failed: ' + xhr.statusText))); };\n        xhr.onload = function (e) {\n            resolve({\n                res: {\n                    statusCode: xhr.status,\n                    headers: getResponseHeaders(xhr)\n                },\n                stream: new /** @class */ (function (_super) {\n                    tslib_1.__extends(ArrayBufferStream, _super);\n                    function ArrayBufferStream(arraybuffer) {\n                        var _this = _super.call(this) || this;\n                        _this._buffer = Buffer.from(new Uint8Array(arraybuffer));\n                        _this._offset = 0;\n                        _this._length = _this._buffer.length;\n                        return _this;\n                    }\n                    ArrayBufferStream.prototype._read = function (size) {\n                        if (this._offset < this._length) {\n                            this.push(this._buffer.slice(this._offset, (this._offset + size)));\n                            this._offset += size;\n                        }\n                        else {\n                            this.push(null);\n                        }\n                    };\n                    return ArrayBufferStream;\n                }(stream_1.Readable))(xhr.response)\n            });\n        };\n        xhr.ontimeout = function (e) { return reject(new Error(\"XHR timeout: \" + options.timeout + \"ms\")); };\n        if (options.timeout) {\n            xhr.timeout = options.timeout;\n        }\n        // TODO: remove any\n        xhr.send(options.data);\n        // cancel\n        token.onCancellationRequested(function () {\n            xhr.abort();\n            reject(errors_1.canceled());\n        });\n    });\n};\nfunction setRequestHeaders(xhr, options) {\n    if (options.headers) {\n        outer: for (var k in options.headers) {\n            switch (k) {\n                case 'User-Agent':\n                case 'Accept-Encoding':\n                case 'Content-Length':\n                    // unsafe headers\n                    continue outer;\n            }\n            xhr.setRequestHeader(k, options.headers[k]);\n        }\n    }\n}\nfunction getResponseHeaders(xhr) {\n    var headers = Object.create(null);\n    for (var _i = 0, _a = xhr.getAllResponseHeaders().split(/\\r\\n|\\n|\\r/g); _i < _a.length; _i++) {\n        var line = _a[_i];\n        if (line) {\n            var idx = line.indexOf(':');\n            headers[line.substr(0, idx).trim().toLowerCase()] = line.substr(idx + 1).trim();\n        }\n    }\n    return headers;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/request/electron-browser/requestService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/request/electron-browser/requestService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRequestOptions, IRequestContext, IRequestFunction } from 'vs/base/node/request';\nimport { Readable } from 'stream';\nimport { RequestService as NodeRequestService } from 'vs/platform/request/node/requestService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService extends NodeRequestService {\n\trequest(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\treturn super.request(options, token, xhrRequest);\n\t}\n}\n\nexport const xhrRequest: IRequestFunction = (options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> => {\n\n\tconst xhr = new XMLHttpRequest();\n\treturn new Promise<IRequestContext>((resolve, reject) => {\n\n\t\txhr.open(options.type || 'GET', options.url || '', true, options.user, options.password);\n\t\tsetRequestHeaders(xhr, options);\n\n\t\txhr.responseType = 'arraybuffer';\n\t\txhr.onerror = e => reject(new Error(xhr.statusText && ('XHR failed: ' + xhr.statusText)));\n\t\txhr.onload = (e) => {\n\t\t\tresolve({\n\t\t\t\tres: {\n\t\t\t\t\tstatusCode: xhr.status,\n\t\t\t\t\theaders: getResponseHeaders(xhr)\n\t\t\t\t},\n\t\t\t\tstream: new class ArrayBufferStream extends Readable {\n\n\t\t\t\t\tprivate _buffer: Buffer;\n\t\t\t\t\tprivate _offset: number;\n\t\t\t\t\tprivate _length: number;\n\n\t\t\t\t\tconstructor(arraybuffer: ArrayBuffer) {\n\t\t\t\t\t\tsuper();\n\t\t\t\t\t\tthis._buffer = Buffer.from(new Uint8Array(arraybuffer));\n\t\t\t\t\t\tthis._offset = 0;\n\t\t\t\t\t\tthis._length = this._buffer.length;\n\t\t\t\t\t}\n\n\t\t\t\t\t_read(size: number) {\n\t\t\t\t\t\tif (this._offset < this._length) {\n\t\t\t\t\t\t\tthis.push(this._buffer.slice(this._offset, (this._offset + size)));\n\t\t\t\t\t\t\tthis._offset += size;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}(xhr.response)\n\t\t\t});\n\t\t};\n\t\txhr.ontimeout = e => reject(new Error(`XHR timeout: ${options.timeout}ms`));\n\n\t\tif (options.timeout) {\n\t\t\txhr.timeout = options.timeout;\n\t\t}\n\n\t\t// TODO: remove any\n\t\txhr.send(options.data as any);\n\n\t\t// cancel\n\t\ttoken.onCancellationRequested(() => {\n\t\t\txhr.abort();\n\t\t\treject(canceled());\n\t\t});\n\t});\n};\n\nfunction setRequestHeaders(xhr: XMLHttpRequest, options: IRequestOptions): void {\n\tif (options.headers) {\n\t\touter: for (let k in options.headers) {\n\t\t\tswitch (k) {\n\t\t\t\tcase 'User-Agent':\n\t\t\t\tcase 'Accept-Encoding':\n\t\t\t\tcase 'Content-Length':\n\t\t\t\t\t// unsafe headers\n\t\t\t\t\tcontinue outer;\n\t\t\t}\n\t\t\txhr.setRequestHeader(k, options.headers[k]);\n\n\t\t}\n\t}\n}\n\nfunction getResponseHeaders(xhr: XMLHttpRequest): { [name: string]: string } {\n\tconst headers: { [name: string]: string } = Object.create(null);\n\tfor (const line of xhr.getAllResponseHeaders().split(/\\r\\n|\\n|\\r/g)) {\n\t\tif (line) {\n\t\t\tconst idx = line.indexOf(':');\n\t\t\theaders[line.substr(0, idx).trim().toLowerCase()] = line.substr(idx + 1).trim();\n\t\t}\n\t}\n\treturn headers;\n}\n"]}]}