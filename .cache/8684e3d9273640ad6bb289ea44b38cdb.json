{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostStatusBar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostStatusBar.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/statusbar/common/statusbar\", \"./extHostTypes\", \"../common/extHost.protocol\"], function (require, exports, statusbar_1, extHostTypes_1, extHost_protocol_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostStatusBarEntry {\n        constructor(proxy, extensionId, alignment = extHostTypes_1.StatusBarAlignment.Left, priority) {\n            this._id = ExtHostStatusBarEntry.ID_GEN++;\n            this._proxy = proxy;\n            this._alignment = alignment;\n            this._priority = priority;\n            this._extensionId = extensionId;\n        }\n        get id() {\n            return this._id;\n        }\n        get alignment() {\n            return this._alignment;\n        }\n        get priority() {\n            return this._priority;\n        }\n        get text() {\n            return this._text;\n        }\n        get tooltip() {\n            return this._tooltip;\n        }\n        get color() {\n            return this._color;\n        }\n        get command() {\n            return this._command;\n        }\n        set text(text) {\n            this._text = text;\n            this.update();\n        }\n        set tooltip(tooltip) {\n            this._tooltip = tooltip;\n            this.update();\n        }\n        set color(color) {\n            this._color = color;\n            this.update();\n        }\n        set command(command) {\n            this._command = command;\n            this.update();\n        }\n        show() {\n            this._visible = true;\n            this.update();\n        }\n        hide() {\n            clearTimeout(this._timeoutHandle);\n            this._visible = false;\n            this._proxy.$dispose(this.id);\n        }\n        update() {\n            if (this._disposed || !this._visible) {\n                return;\n            }\n            clearTimeout(this._timeoutHandle);\n            // Defer the update so that multiple changes to setters dont cause a redraw each\n            this._timeoutHandle = setTimeout(() => {\n                this._timeoutHandle = undefined;\n                // Set to status bar\n                this._proxy.$setEntry(this.id, this._extensionId, this.text, this.tooltip, this.command, this.color, this._alignment === extHostTypes_1.StatusBarAlignment.Left ? statusbar_1.StatusbarAlignment.LEFT : statusbar_1.StatusbarAlignment.RIGHT, this._priority);\n            }, 0);\n        }\n        dispose() {\n            this.hide();\n            this._disposed = true;\n        }\n    }\n    ExtHostStatusBarEntry.ID_GEN = 0;\n    exports.ExtHostStatusBarEntry = ExtHostStatusBarEntry;\n    class StatusBarMessage {\n        constructor(statusBar) {\n            this._messages = [];\n            this._item = statusBar.createStatusBarEntry(undefined, extHostTypes_1.StatusBarAlignment.Left, Number.MIN_VALUE);\n        }\n        dispose() {\n            this._messages.length = 0;\n            this._item.dispose();\n        }\n        setMessage(message) {\n            const data = { message }; // use object to not confuse equal strings\n            this._messages.unshift(data);\n            this._update();\n            return new extHostTypes_1.Disposable(() => {\n                const idx = this._messages.indexOf(data);\n                if (idx >= 0) {\n                    this._messages.splice(idx, 1);\n                    this._update();\n                }\n            });\n        }\n        _update() {\n            if (this._messages.length > 0) {\n                this._item.text = this._messages[0].message;\n                this._item.show();\n            }\n            else {\n                this._item.hide();\n            }\n        }\n    }\n    class ExtHostStatusBar {\n        constructor(mainContext) {\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadStatusBar);\n            this._statusMessage = new StatusBarMessage(this);\n        }\n        createStatusBarEntry(extensionId, alignment, priority) {\n            return new ExtHostStatusBarEntry(this._proxy, extensionId, alignment, priority);\n        }\n        setStatusBarMessage(text, timeoutOrThenable) {\n            const d = this._statusMessage.setMessage(text);\n            let handle;\n            if (typeof timeoutOrThenable === 'number') {\n                handle = setTimeout(() => d.dispose(), timeoutOrThenable);\n            }\n            else if (typeof timeoutOrThenable !== 'undefined') {\n                timeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n            }\n            return new extHostTypes_1.Disposable(() => {\n                d.dispose();\n                clearTimeout(handle);\n            });\n        }\n    }\n    exports.ExtHostStatusBar = ExtHostStatusBar;\n});\n",null]}