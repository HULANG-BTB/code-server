{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/clipboard/clipboard.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/browser/browser\", \"vs/base/common/keyCodes\", \"vs/base/common/platform\", \"vs/editor/browser/controller/textAreaInput\", \"vs/editor/browser/editorExtensions\", \"vs/editor/browser/services/codeEditorService\", \"vs/editor/common/editorContextKeys\", \"vs/platform/actions/common/actions\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/css!./clipboard\"], function (require, exports, nls, browser, keyCodes_1, platform, textAreaInput_1, editorExtensions_1, codeEditorService_1, editorContextKeys_1, actions_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\n    const supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\n    const supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n    // IE and Edge have trouble with setting html content in clipboard\n    const supportsCopyWithSyntaxHighlighting = (supportsCopy && !browser.isEdgeOrIE);\n    // Chrome incorrectly returns true for document.queryCommandSupported('paste')\n    // when the paste feature is available but the calling script has insufficient\n    // privileges to actually perform the action\n    // const supportsPaste = (platform.isNative || (!browser.isChrome && document.queryCommandSupported('paste')));\n    const supportsPaste = true;\n    class ExecCommandAction extends editorExtensions_1.EditorAction {\n        constructor(browserCommand, opts) {\n            super(opts);\n            this.browserCommand = browserCommand;\n        }\n        runCommand(accessor, args) {\n            let focusedEditor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                focusedEditor.trigger('keyboard', this.id, args);\n                return;\n            }\n            document.execCommand(this.browserCommand);\n        }\n        run(accessor, editor) {\n            editor.focus();\n            document.execCommand(this.browserCommand);\n        }\n    }\n    class ExecCommandCutAction extends ExecCommandAction {\n        constructor() {\n            let kbOpts = {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X,\n                win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Delete] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            };\n            // Do not bind cut keybindings in the browser,\n            // since browsers do that for us and it avoids security prompts\n            if (!platform.isNative) {\n                kbOpts = null;\n            }\n            super('cut', {\n                id: 'editor.action.clipboardCutAction',\n                label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n                alias: 'Cut',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: kbOpts,\n                menuOpts: {\n                    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                    order: 1\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '2_ccp',\n                    title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n                    order: 1\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n            if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n                return;\n            }\n            super.run(accessor, editor);\n        }\n    }\n    class ExecCommandCopyAction extends ExecCommandAction {\n        constructor() {\n            let kbOpts = {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n                win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Insert] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            };\n            // Do not bind copy keybindings in the browser,\n            // since browsers do that for us and it avoids security prompts\n            if (!platform.isNative) {\n                kbOpts = null;\n            }\n            super('copy', {\n                id: 'editor.action.clipboardCopyAction',\n                label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n                alias: 'Copy',\n                precondition: null,\n                kbOpts: kbOpts,\n                menuOpts: {\n                    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                    order: 2\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '2_ccp',\n                    title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n                    order: 2\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n            if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n                return;\n            }\n            // Prevent copying an empty line by accident\n            if (editor.getSelections().length === 1 && editor.getSelection().isEmpty()) {\n                if (editor.getModel().getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber) === 0) {\n                    return;\n                }\n            }\n            super.run(accessor, editor);\n        }\n    }\n    class ExecCommandPasteAction extends ExecCommandAction {\n        constructor() {\n            let kbOpts = {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n                win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Insert] },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            };\n            // Do not bind paste keybindings in the browser,\n            // since browsers do that for us and it avoids security prompts\n            if (!platform.isNative) {\n                kbOpts = null;\n            }\n            const { workbench } = require('vs/../../../../packages/vscode/src/workbench');\n            super('paste', {\n                id: 'editor.action.clipboardPasteAction',\n                label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n                alias: 'Paste',\n                precondition: require('vs/platform/contextkey/common/contextkey').ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, workbench.clipboardContextKey),\n                kbOpts: kbOpts,\n                menuOpts: {\n                    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n                    order: 3\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '2_ccp',\n                    title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n                    order: 3,\n                    when: workbench.clipboardContextKey,\n                }\n            });\n        }\n        run(accessor, editor) {\n            const _super = Object.create(null, {\n                run: { get: () => super.run }\n            });\n            return __awaiter(this, void 0, void 0, function* () {\n                if (editor instanceof require('vs/editor/browser/widget/codeEditorWidget').CodeEditorWidget) {\n                    try {\n                        editor.trigger('', require('vs/editor/common/editorCommon').Handler.Paste, {\n                            text: yield require('vs/../../../../packages/vscode/src/workbench').workbench.clipboardText,\n                        });\n                    }\n                    catch (ex) {\n                        _super.run.call(this, accessor, editor);\n                    }\n                }\n                else {\n                    _super.run.call(this, accessor, editor);\n                }\n            });\n        }\n    }\n    class ExecCommandCopyWithSyntaxHighlightingAction extends ExecCommandAction {\n        constructor() {\n            super('copy', {\n                id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n                label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n                alias: 'Copy With Syntax Highlighting',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            const emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n            if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n                return;\n            }\n            textAreaInput_1.CopyOptions.forceCopyWithSyntaxHighlighting = true;\n            super.run(accessor, editor);\n            textAreaInput_1.CopyOptions.forceCopyWithSyntaxHighlighting = false;\n        }\n    }\n    if (supportsCut) {\n        editorExtensions_1.registerEditorAction(ExecCommandCutAction);\n    }\n    if (supportsCopy) {\n        editorExtensions_1.registerEditorAction(ExecCommandCopyAction);\n    }\n    if (supportsPaste) {\n        editorExtensions_1.registerEditorAction(ExecCommandPasteAction);\n    }\n    if (supportsCopyWithSyntaxHighlighting) {\n        editorExtensions_1.registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n    }\n});\n",null]}