{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/collections.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/collections.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Returns an array which contains all values that reside\n * in the given set.\n */\nfunction values(from) {\n    var result = [];\n    for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n            result.push(from[key]);\n        }\n    }\n    return result;\n}\nexports.values = values;\nfunction size(from) {\n    var count = 0;\n    for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n            count += 1;\n        }\n    }\n    return count;\n}\nexports.size = size;\nfunction first(from) {\n    for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n            return from[key];\n        }\n    }\n    return undefined;\n}\nexports.first = first;\n/**\n * Iterates over each entry in the provided set. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\nfunction forEach(from, callback) {\n    var _loop_1 = function (key) {\n        if (hasOwnProperty.call(from, key)) {\n            var result = callback({ key: key, value: from[key] }, function () {\n                delete from[key];\n            });\n            if (result === false) {\n                return { value: void 0 };\n            }\n        }\n    };\n    for (var key in from) {\n        var state_1 = _loop_1(key);\n        if (typeof state_1 === \"object\")\n            return state_1.value;\n    }\n}\nexports.forEach = forEach;\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nfunction groupBy(data, groupFn) {\n    var result = Object.create(null);\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n        var element = data_1[_i];\n        var key = groupFn(element);\n        var target = result[key];\n        if (!target) {\n            target = result[key] = [];\n        }\n        target.push(element);\n    }\n    return result;\n}\nexports.groupBy = groupBy;\nfunction fromMap(original) {\n    var result = Object.create(null);\n    if (original) {\n        original.forEach(function (value, key) {\n            result[key] = value;\n        });\n    }\n    return result;\n}\nexports.fromMap = fromMap;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/collections.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/collections.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAkBhG,IAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;AAEvD;;;GAGG;AACH,SAAgB,MAAM,CAAI,IAAiD;IAC1E,IAAM,MAAM,GAAQ,EAAE,CAAC;IACvB,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;QACrB,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;YACnC,MAAM,CAAC,IAAI,CAAE,IAAY,CAAC,GAAG,CAAC,CAAC,CAAC;SAChC;KACD;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AARD,wBAQC;AAED,SAAgB,IAAI,CAAI,IAAiD;IACxE,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;QACrB,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;YACnC,KAAK,IAAI,CAAC,CAAC;SACX;KACD;IACD,OAAO,KAAK,CAAC;AACd,CAAC;AARD,oBAQC;AAED,SAAgB,KAAK,CAAI,IAAiD;IACzE,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;QACrB,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACjB;KACD;IACD,OAAO,SAAS,CAAC;AAClB,CAAC;AAPD,sBAOC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAI,IAAiD,EAAE,QAAqE;4BACzI,GAAG;QACX,IAAI,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAG,IAAY,CAAC,GAAG,CAAC,EAAE,EAAE;gBAChE,OAAQ,IAAY,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YACH,IAAI,MAAM,KAAK,KAAK,EAAE;;aAErB;SACD;;IARF,KAAK,IAAI,GAAG,IAAI,IAAI;8BAAX,GAAG;;;KASX;AACF,CAAC;AAXD,0BAWC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAI,IAAS,EAAE,OAA+B;IACpE,IAAM,MAAM,GAA2B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC3D,KAAsB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;QAAvB,IAAM,OAAO,aAAA;QACjB,IAAM,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SAC1B;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACrB;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AAXD,0BAWC;AAED,SAAgB,OAAO,CAAI,QAAwB;IAClD,IAAM,MAAM,GAAyB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACzD,IAAI,QAAQ,EAAE;QACb,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;YAC3B,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACrB,CAAC,CAAC,CAAC;KACH;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AARD,0BAQC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are strings.\n */\nexport interface IStringDictionary<V> {\n\t[name: string]: V;\n}\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are numbers.\n */\nexport interface INumberDictionary<V> {\n\t[idx: number]: V;\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Returns an array which contains all values that reside\n * in the given set.\n */\nexport function values<T>(from: IStringDictionary<T> | INumberDictionary<T>): T[] {\n\tconst result: T[] = [];\n\tfor (let key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tresult.push((from as any)[key]);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function size<T>(from: IStringDictionary<T> | INumberDictionary<T>): number {\n\tlet count = 0;\n\tfor (let key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n\nexport function first<T>(from: IStringDictionary<T> | INumberDictionary<T>): T | undefined {\n\tfor (let key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\treturn from[key];\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Iterates over each entry in the provided set. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\nexport function forEach<T>(from: IStringDictionary<T> | INumberDictionary<T>, callback: (entry: { key: any; value: T; }, remove: () => void) => any): void {\n\tfor (let key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tconst result = callback({ key: key, value: (from as any)[key] }, function () {\n\t\t\t\tdelete (from as any)[key];\n\t\t\t});\n\t\t\tif (result === false) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nexport function groupBy<T>(data: T[], groupFn: (element: T) => string): IStringDictionary<T[]> {\n\tconst result: IStringDictionary<T[]> = Object.create(null);\n\tfor (const element of data) {\n\t\tconst key = groupFn(element);\n\t\tlet target = result[key];\n\t\tif (!target) {\n\t\t\ttarget = result[key] = [];\n\t\t}\n\t\ttarget.push(element);\n\t}\n\treturn result;\n}\n\nexport function fromMap<T>(original: Map<string, T>): IStringDictionary<T> {\n\tconst result: IStringDictionary<T> = Object.create(null);\n\tif (original) {\n\t\toriginal.forEach((value, key) => {\n\t\t\tresult[key] = value;\n\t\t});\n\t}\n\treturn result;\n}"]}]}