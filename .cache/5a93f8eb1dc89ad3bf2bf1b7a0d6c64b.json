{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"./webviewEditorInput\", \"./webviewEditorService\", \"vs/base/common/uri\", \"vs/platform/extensions/common/extensions\"], function (require, exports, webviewEditorInput_1, webviewEditorService_1, uri_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WebviewEditorInputFactory = class WebviewEditorInputFactory {\n        constructor(_webviewService) {\n            this._webviewService = _webviewService;\n        }\n        serialize(input) {\n            if (!this._webviewService.shouldPersist(input)) {\n                return undefined;\n            }\n            const data = {\n                viewType: input.viewType,\n                id: input.getId(),\n                title: input.getName(),\n                options: input.options,\n                extensionLocation: input.extension ? input.extension.location : undefined,\n                extensionId: input.extension ? input.extension.id.value : undefined,\n                state: input.state,\n                iconPath: input.iconPath ? { light: input.iconPath.light, dark: input.iconPath.dark, } : undefined,\n                group: input.group\n            };\n            try {\n                return JSON.stringify(data);\n            }\n            catch (_a) {\n                return undefined;\n            }\n        }\n        deserialize(_instantiationService, serializedEditorInput) {\n            const data = JSON.parse(serializedEditorInput);\n            const extensionLocation = reviveUri(data.extensionLocation);\n            const extensionId = data.extensionId ? new extensions_1.ExtensionIdentifier(data.extensionId) : undefined;\n            const iconPath = reviveIconPath(data.iconPath);\n            return this._webviewService.reviveWebview(data.viewType, data.id, data.title, iconPath, data.state, data.options, extensionLocation ? {\n                location: extensionLocation,\n                id: extensionId\n            } : undefined, data.group);\n        }\n    };\n    WebviewEditorInputFactory.ID = webviewEditorInput_1.WebviewEditorInput.typeId;\n    WebviewEditorInputFactory = __decorate([\n        __param(0, webviewEditorService_1.IWebviewEditorService)\n    ], WebviewEditorInputFactory);\n    exports.WebviewEditorInputFactory = WebviewEditorInputFactory;\n    function reviveIconPath(data) {\n        if (!data) {\n            return undefined;\n        }\n        const light = reviveUri(data.light);\n        const dark = reviveUri(data.dark);\n        return light && dark ? { light, dark } : undefined;\n    }\n    function reviveUri(data) {\n        if (!data) {\n            return undefined;\n        }\n        try {\n            if (typeof data === 'string') {\n                return uri_1.URI.parse(data);\n            }\n            return uri_1.URI.from(data);\n        }\n        catch (_a) {\n            return undefined;\n        }\n    }\n});\n",null]}