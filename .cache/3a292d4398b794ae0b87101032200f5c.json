{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path_1 = require(\"vs/base/common/path\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar nls_1 = require(\"vs/nls\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar perfviewEditor_1 = require(\"vs/workbench/contrib/performance/electron-browser/perfviewEditor\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar StartupProfiler = /** @class */ (function () {\n    function StartupProfiler(_windowsService, _dialogService, _environmentService, _textModelResolverService, _clipboardService, lifecycleService, extensionService) {\n        var _this = this;\n        this._windowsService = _windowsService;\n        this._dialogService = _dialogService;\n        this._environmentService = _environmentService;\n        this._textModelResolverService = _textModelResolverService;\n        this._clipboardService = _clipboardService;\n        // wait for everything to be ready\n        Promise.all([\n            lifecycleService.when(lifecycle_1.LifecyclePhase.Eventually),\n            extensionService.whenInstalledExtensionsRegistered()\n        ]).then(function () {\n            _this._stopProfiling();\n        });\n    }\n    StartupProfiler.prototype._stopProfiling = function () {\n        var _this = this;\n        var profileFilenamePrefix = this._environmentService.args['prof-startup-prefix'];\n        if (!profileFilenamePrefix) {\n            return;\n        }\n        var dir = path_1.dirname(profileFilenamePrefix);\n        var prefix = path_1.basename(profileFilenamePrefix);\n        var removeArgs = ['--prof-startup'];\n        var markerFile = pfs_1.readFile(profileFilenamePrefix).then(function (value) { return removeArgs.push.apply(removeArgs, value.toString().split('|')); })\n            .then(function () { return pfs_1.del(profileFilenamePrefix); }) // (1) delete the file to tell the main process to stop profiling\n            .then(function () { return new Promise(function (resolve) {\n            var check = function () {\n                pfs_1.exists(profileFilenamePrefix).then(function (exists) {\n                    if (exists) {\n                        resolve();\n                    }\n                    else {\n                        setTimeout(check, 500);\n                    }\n                });\n            };\n            check();\n        }); })\n            .then(function () { return pfs_1.del(profileFilenamePrefix); }); // (3) finally delete the file again\n        markerFile.then(function () {\n            return pfs_1.readdir(dir).then(function (files) { return files.filter(function (value) { return value.indexOf(prefix) === 0; }); });\n        }).then(function (files) {\n            var profileFiles = files.reduce(function (prev, cur) { return \"\" + prev + path_1.join(dir, cur) + \"\\n\"; }, '\\n');\n            return _this._dialogService.confirm({\n                type: 'info',\n                message: nls_1.localize('prof.message', \"Successfully created profiles.\"),\n                detail: nls_1.localize('prof.detail', \"Please create an issue and manually attach the following files:\\n{0}\", profileFiles),\n                primaryButton: nls_1.localize('prof.restartAndFileIssue', \"Create Issue and Restart\"),\n                secondaryButton: nls_1.localize('prof.restart', \"Restart\")\n            }).then(function (res) {\n                if (res.confirmed) {\n                    Promise.all([\n                        _this._windowsService.showItemInFolder(uri_1.URI.file(path_1.join(dir, files[0]))),\n                        _this._createPerfIssue(files)\n                    ]).then(function () {\n                        // keep window stable until restart is selected\n                        return _this._dialogService.confirm({\n                            type: 'info',\n                            message: nls_1.localize('prof.thanks', \"Thanks for helping us.\"),\n                            detail: nls_1.localize('prof.detail.restart', \"A final restart is required to continue to use '{0}'. Again, thank you for your contribution.\", _this._environmentService.appNameLong),\n                            primaryButton: nls_1.localize('prof.restart', \"Restart\"),\n                            secondaryButton: undefined\n                        }).then(function () {\n                            // now we are ready to restart\n                            _this._windowsService.relaunch({ removeArgs: removeArgs });\n                        });\n                    });\n                }\n                else {\n                    // simply restart\n                    _this._windowsService.relaunch({ removeArgs: removeArgs });\n                }\n            });\n        });\n    };\n    StartupProfiler.prototype._createPerfIssue = function (files) {\n        var _this = this;\n        return this._textModelResolverService.createModelReference(perfviewEditor_1.PerfviewInput.Uri).then(function (ref) {\n            _this._clipboardService.writeText(ref.object.textEditorModel.getValue());\n            ref.dispose();\n            var body = \"\\n1. :warning: We have copied additional data to your clipboard. Make sure to **paste** here. :warning:\\n1. :warning: Make sure to **attach** these files from your *home*-directory: :warning:\\n\" + files.map(function (file) { return \"-`\" + file + \"`\"; }).join('\\n') + \"\\n\";\n            var baseUrl = product_1.default.reportIssueUrl;\n            var queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';\n            window.open(\"\" + baseUrl + queryStringPrefix + \"body=\" + encodeURIComponent(body));\n        });\n    };\n    StartupProfiler = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowsService),\n        tslib_1.__param(1, dialogs_1.IDialogService),\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, resolverService_1.ITextModelService),\n        tslib_1.__param(4, clipboardService_1.IClipboardService),\n        tslib_1.__param(5, lifecycle_1.ILifecycleService),\n        tslib_1.__param(6, extensions_1.IExtensionService)\n    ], StartupProfiler);\n    return StartupProfiler;\n}());\nexports.StartupProfiler = StartupProfiler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/performance/electron-browser/startupProfiler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dirname, join, basename } from 'vs/base/common/path';\nimport { del, exists, readdir, readFile } from 'vs/base/node/pfs';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport product from 'vs/platform/product/node/product';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { PerfviewInput } from 'vs/workbench/contrib/performance/electron-browser/perfviewEditor';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { URI } from 'vs/base/common/uri';\n\nexport class StartupProfiler implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWindowsService private readonly _windowsService: IWindowsService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t) {\n\t\t// wait for everything to be ready\n\t\tPromise.all([\n\t\t\tlifecycleService.when(LifecyclePhase.Eventually),\n\t\t\textensionService.whenInstalledExtensionsRegistered()\n\t\t]).then(() => {\n\t\t\tthis._stopProfiling();\n\t\t});\n\t}\n\n\tprivate _stopProfiling(): void {\n\n\t\tconst profileFilenamePrefix = this._environmentService.args['prof-startup-prefix'];\n\t\tif (!profileFilenamePrefix) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst dir = dirname(profileFilenamePrefix);\n\t\tconst prefix = basename(profileFilenamePrefix);\n\n\t\tconst removeArgs: string[] = ['--prof-startup'];\n\t\tconst markerFile = readFile(profileFilenamePrefix).then(value => removeArgs.push(...value.toString().split('|')))\n\t\t\t.then(() => del(profileFilenamePrefix)) // (1) delete the file to tell the main process to stop profiling\n\t\t\t.then(() => new Promise(resolve => { // (2) wait for main that recreates the fail to signal profiling has stopped\n\t\t\t\tconst check = () => {\n\t\t\t\t\texists(profileFilenamePrefix).then(exists => {\n\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetTimeout(check, 500);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tcheck();\n\t\t\t}))\n\t\t\t.then(() => del(profileFilenamePrefix)); // (3) finally delete the file again\n\n\t\tmarkerFile.then(() => {\n\t\t\treturn readdir(dir).then(files => files.filter(value => value.indexOf(prefix) === 0));\n\t\t}).then(files => {\n\t\t\tconst profileFiles = files.reduce((prev, cur) => `${prev}${join(dir, cur)}\\n`, '\\n');\n\n\t\t\treturn this._dialogService.confirm({\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: localize('prof.message', \"Successfully created profiles.\"),\n\t\t\t\tdetail: localize('prof.detail', \"Please create an issue and manually attach the following files:\\n{0}\", profileFiles),\n\t\t\t\tprimaryButton: localize('prof.restartAndFileIssue', \"Create Issue and Restart\"),\n\t\t\t\tsecondaryButton: localize('prof.restart', \"Restart\")\n\t\t\t}).then(res => {\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tPromise.all<any>([\n\t\t\t\t\t\tthis._windowsService.showItemInFolder(URI.file(join(dir, files[0]))),\n\t\t\t\t\t\tthis._createPerfIssue(files)\n\t\t\t\t\t]).then(() => {\n\t\t\t\t\t\t// keep window stable until restart is selected\n\t\t\t\t\t\treturn this._dialogService.confirm({\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tmessage: localize('prof.thanks', \"Thanks for helping us.\"),\n\t\t\t\t\t\t\tdetail: localize('prof.detail.restart', \"A final restart is required to continue to use '{0}'. Again, thank you for your contribution.\", this._environmentService.appNameLong),\n\t\t\t\t\t\t\tprimaryButton: localize('prof.restart', \"Restart\"),\n\t\t\t\t\t\t\tsecondaryButton: undefined\n\t\t\t\t\t\t}).then(() => {\n\t\t\t\t\t\t\t// now we are ready to restart\n\t\t\t\t\t\t\tthis._windowsService.relaunch({ removeArgs });\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t} else {\n\t\t\t\t\t// simply restart\n\t\t\t\t\tthis._windowsService.relaunch({ removeArgs });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _createPerfIssue(files: string[]): Promise<void> {\n\t\treturn this._textModelResolverService.createModelReference(PerfviewInput.Uri).then(ref => {\n\n\t\t\tthis._clipboardService.writeText(ref.object.textEditorModel.getValue());\n\t\t\tref.dispose();\n\n\t\t\tconst body = `\n1. :warning: We have copied additional data to your clipboard. Make sure to **paste** here. :warning:\n1. :warning: Make sure to **attach** these files from your *home*-directory: :warning:\\n${files.map(file => `-\\`${file}\\``).join('\\n')}\n`;\n\n\t\t\tconst baseUrl = product.reportIssueUrl;\n\t\t\tconst queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';\n\n\t\t\twindow.open(`${baseUrl}${queryStringPrefix}body=${encodeURIComponent(body)}`);\n\t\t});\n\t}\n}\n"]}]}