{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/colorPickerModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\"], function (require, exports, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ColorPickerModel {\n        constructor(color, availableColorPresentations, presentationIndex) {\n            this.presentationIndex = presentationIndex;\n            this._onColorFlushed = new event_1.Emitter();\n            this.onColorFlushed = this._onColorFlushed.event;\n            this._onDidChangeColor = new event_1.Emitter();\n            this.onDidChangeColor = this._onDidChangeColor.event;\n            this._onDidChangePresentation = new event_1.Emitter();\n            this.onDidChangePresentation = this._onDidChangePresentation.event;\n            this.originalColor = color;\n            this._color = color;\n            this._colorPresentations = availableColorPresentations;\n        }\n        get color() {\n            return this._color;\n        }\n        set color(color) {\n            if (this._color.equals(color)) {\n                return;\n            }\n            this._color = color;\n            this._onDidChangeColor.fire(color);\n        }\n        get presentation() { return this.colorPresentations[this.presentationIndex]; }\n        get colorPresentations() {\n            return this._colorPresentations;\n        }\n        set colorPresentations(colorPresentations) {\n            this._colorPresentations = colorPresentations;\n            if (this.presentationIndex > colorPresentations.length - 1) {\n                this.presentationIndex = 0;\n            }\n            this._onDidChangePresentation.fire(this.presentation);\n        }\n        selectNextColorPresentation() {\n            this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n            this.flushColor();\n            this._onDidChangePresentation.fire(this.presentation);\n        }\n        guessColorPresentation(color, originalText) {\n            for (let i = 0; i < this.colorPresentations.length; i++) {\n                if (originalText === this.colorPresentations[i].label) {\n                    this.presentationIndex = i;\n                    this._onDidChangePresentation.fire(this.presentation);\n                    break;\n                }\n            }\n        }\n        flushColor() {\n            this._onColorFlushed.fire(this._color);\n        }\n    }\n    exports.ColorPickerModel = ColorPickerModel;\n});\n",null]}