{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentContentProviders.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentContentProviders.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorWorkerService_1 = require(\"vs/editor/common/services/editorWorkerService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar MainThreadDocumentContentProviders = /** @class */ (function () {\n    function MainThreadDocumentContentProviders(extHostContext, _textModelResolverService, _modeService, _modelService, _editorWorkerService) {\n        this._textModelResolverService = _textModelResolverService;\n        this._modeService = _modeService;\n        this._modelService = _modelService;\n        this._editorWorkerService = _editorWorkerService;\n        this._resourceContentProvider = new Map();\n        this._pendingUpdate = new Map();\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostDocumentContentProviders);\n    }\n    MainThreadDocumentContentProviders.prototype.dispose = function () {\n        this._resourceContentProvider.forEach(function (p) { return p.dispose(); });\n        this._pendingUpdate.forEach(function (source) { return source.dispose(); });\n    };\n    MainThreadDocumentContentProviders.prototype.$registerTextContentProvider = function (handle, scheme) {\n        var _this = this;\n        var registration = this._textModelResolverService.registerTextModelContentProvider(scheme, {\n            provideTextContent: function (uri) {\n                return _this._proxy.$provideTextDocumentContent(handle, uri).then(function (value) {\n                    if (typeof value === 'string') {\n                        var firstLineText = value.substr(0, 1 + value.search(/\\r?\\n/));\n                        var languageSelection = _this._modeService.createByFilepathOrFirstLine(uri.fsPath, firstLineText);\n                        return _this._modelService.createModel(value, languageSelection, uri);\n                    }\n                    return null;\n                });\n            }\n        });\n        this._resourceContentProvider.set(handle, registration);\n    };\n    MainThreadDocumentContentProviders.prototype.$unregisterTextContentProvider = function (handle) {\n        var registration = this._resourceContentProvider.get(handle);\n        if (registration) {\n            registration.dispose();\n            this._resourceContentProvider.delete(handle);\n        }\n    };\n    MainThreadDocumentContentProviders.prototype.$onVirtualDocumentChange = function (uri, value) {\n        var _this = this;\n        var model = this._modelService.getModel(uri_1.URI.revive(uri));\n        if (!model) {\n            return;\n        }\n        // cancel and dispose an existing update\n        var pending = this._pendingUpdate.get(model.id);\n        if (pending) {\n            pending.cancel();\n        }\n        // create and keep update token\n        var myToken = new cancellation_1.CancellationTokenSource();\n        this._pendingUpdate.set(model.id, myToken);\n        this._editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: value, range: model.getFullModelRange() }]).then(function (edits) {\n            // remove token\n            _this._pendingUpdate.delete(model.id);\n            if (myToken.token.isCancellationRequested) {\n                // ignore this\n                return;\n            }\n            if (edits && edits.length > 0) {\n                // use the evil-edit as these models show in readonly-editor only\n                model.applyEdits(edits.map(function (edit) { return editOperation_1.EditOperation.replace(range_1.Range.lift(edit.range), edit.text); }));\n            }\n        }).catch(errors_1.onUnexpectedError);\n    };\n    MainThreadDocumentContentProviders = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadDocumentContentProviders),\n        tslib_1.__param(1, resolverService_1.ITextModelService),\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, modelService_1.IModelService),\n        tslib_1.__param(4, editorWorkerService_1.IEditorWorkerService)\n    ], MainThreadDocumentContentProviders);\n    return MainThreadDocumentContentProviders;\n}());\nexports.MainThreadDocumentContentProviders = MainThreadDocumentContentProviders;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentContentProviders.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadDocumentContentProviders.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorkerService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, ExtHostDocumentContentProvidersShape, IExtHostContext, MainContext, MainThreadDocumentContentProvidersShape } from '../common/extHost.protocol';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\n\n@extHostNamedCustomer(MainContext.MainThreadDocumentContentProviders)\nexport class MainThreadDocumentContentProviders implements MainThreadDocumentContentProvidersShape {\n\n\tprivate readonly _resourceContentProvider = new Map<number, IDisposable>();\n\tprivate readonly _pendingUpdate = new Map<string, CancellationTokenSource>();\n\tprivate readonly _proxy: ExtHostDocumentContentProvidersShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDocumentContentProviders);\n\t}\n\n\tdispose(): void {\n\t\tthis._resourceContentProvider.forEach(p => p.dispose());\n\t\tthis._pendingUpdate.forEach(source => source.dispose());\n\t}\n\n\t$registerTextContentProvider(handle: number, scheme: string): void {\n\t\tconst registration = this._textModelResolverService.registerTextModelContentProvider(scheme, {\n\t\t\tprovideTextContent: (uri: URI): Promise<ITextModel | null> => {\n\t\t\t\treturn this._proxy.$provideTextDocumentContent(handle, uri).then(value => {\n\t\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\t\tconst firstLineText = value.substr(0, 1 + value.search(/\\r?\\n/));\n\t\t\t\t\t\tconst languageSelection = this._modeService.createByFilepathOrFirstLine(uri.fsPath, firstLineText);\n\t\t\t\t\t\treturn this._modelService.createModel(value, languageSelection, uri);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis._resourceContentProvider.set(handle, registration);\n\t}\n\n\t$unregisterTextContentProvider(handle: number): void {\n\t\tconst registration = this._resourceContentProvider.get(handle);\n\t\tif (registration) {\n\t\t\tregistration.dispose();\n\t\t\tthis._resourceContentProvider.delete(handle);\n\t\t}\n\t}\n\n\t$onVirtualDocumentChange(uri: UriComponents, value: string): void {\n\t\tconst model = this._modelService.getModel(URI.revive(uri));\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\t// cancel and dispose an existing update\n\t\tconst pending = this._pendingUpdate.get(model.id);\n\t\tif (pending) {\n\t\t\tpending.cancel();\n\t\t}\n\n\t\t// create and keep update token\n\t\tconst myToken = new CancellationTokenSource();\n\t\tthis._pendingUpdate.set(model.id, myToken);\n\n\t\tthis._editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: value, range: model.getFullModelRange() }]).then(edits => {\n\t\t\t// remove token\n\t\t\tthis._pendingUpdate.delete(model.id);\n\n\t\t\tif (myToken.token.isCancellationRequested) {\n\t\t\t\t// ignore this\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (edits && edits.length > 0) {\n\t\t\t\t// use the evil-edit as these models show in readonly-editor only\n\t\t\t\tmodel.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n\t\t\t}\n\t\t}).catch(onUnexpectedError);\n\t}\n}\n"]}]}