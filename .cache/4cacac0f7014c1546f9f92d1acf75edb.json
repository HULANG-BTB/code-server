{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/breakpointWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/breakpointWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/breakpointWidget\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar selectBox_1 = require(\"vs/base/browser/ui/selectBox/selectBox\");\nvar lifecycle = require(\"vs/base/common/lifecycle\");\nvar dom = require(\"vs/base/browser/dom\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar zoneWidget_1 = require(\"vs/editor/contrib/zoneWidget/zoneWidget\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar suggest_1 = require(\"vs/editor/contrib/suggest/suggest\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar simpleEditorOptions_1 = require(\"vs/workbench/contrib/codeEditor/browser/simpleEditorOptions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar $ = dom.$;\nvar IPrivateBreakpointWidgetService = instantiation_1.createDecorator('privateBreakopintWidgetService');\nvar DECORATION_KEY = 'breakpointwidgetdecoration';\nvar BreakpointWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(BreakpointWidget, _super);\n    function BreakpointWidget(editor, lineNumber, context, contextViewService, debugService, themeService, contextKeyService, instantiationService, modelService, codeEditorService) {\n        var _this = _super.call(this, editor, { showFrame: true, showArrow: false, frameWidth: 1 }) || this;\n        _this.lineNumber = lineNumber;\n        _this.context = context;\n        _this.contextViewService = contextViewService;\n        _this.debugService = debugService;\n        _this.themeService = themeService;\n        _this.contextKeyService = contextKeyService;\n        _this.instantiationService = instantiationService;\n        _this.modelService = modelService;\n        _this.codeEditorService = codeEditorService;\n        _this.conditionInput = '';\n        _this.hitCountInput = '';\n        _this.logMessageInput = '';\n        _this.toDispose = [];\n        var model = _this.editor.getModel();\n        if (model) {\n            var uri_2 = model.uri;\n            var breakpoints = _this.debugService.getModel().getBreakpoints({ lineNumber: _this.lineNumber, uri: uri_2 });\n            _this.breakpoint = breakpoints.length ? breakpoints[0] : undefined;\n        }\n        if (_this.context === undefined) {\n            if (_this.breakpoint && !_this.breakpoint.condition && !_this.breakpoint.hitCondition && _this.breakpoint.logMessage) {\n                _this.context = debug_1.BreakpointWidgetContext.LOG_MESSAGE;\n            }\n            else if (_this.breakpoint && !_this.breakpoint.condition && _this.breakpoint.hitCondition) {\n                _this.context = debug_1.BreakpointWidgetContext.HIT_COUNT;\n            }\n            else {\n                _this.context = debug_1.BreakpointWidgetContext.CONDITION;\n            }\n        }\n        _this.toDispose.push(_this.debugService.getModel().onDidChangeBreakpoints(function (e) {\n            if (_this.breakpoint && e && e.removed && e.removed.indexOf(_this.breakpoint) >= 0) {\n                _this.dispose();\n            }\n        }));\n        _this.codeEditorService.registerDecorationType(DECORATION_KEY, {});\n        _this.create();\n        return _this;\n    }\n    Object.defineProperty(BreakpointWidget.prototype, \"placeholder\", {\n        get: function () {\n            switch (this.context) {\n                case debug_1.BreakpointWidgetContext.LOG_MESSAGE:\n                    return nls.localize('breakpointWidgetLogMessagePlaceholder', \"Message to log when breakpoint is hit. Expressions within {} are interpolated. 'Enter' to accept, 'esc' to cancel.\");\n                case debug_1.BreakpointWidgetContext.HIT_COUNT:\n                    return nls.localize('breakpointWidgetHitCountPlaceholder', \"Break when hit count condition is met. 'Enter' to accept, 'esc' to cancel.\");\n                default:\n                    return nls.localize('breakpointWidgetExpressionPlaceholder', \"Break when expression evaluates to true. 'Enter' to accept, 'esc' to cancel.\");\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BreakpointWidget.prototype.getInputValue = function (breakpoint) {\n        switch (this.context) {\n            case debug_1.BreakpointWidgetContext.LOG_MESSAGE:\n                return breakpoint && breakpoint.logMessage ? breakpoint.logMessage : this.logMessageInput;\n            case debug_1.BreakpointWidgetContext.HIT_COUNT:\n                return breakpoint && breakpoint.hitCondition ? breakpoint.hitCondition : this.hitCountInput;\n            default:\n                return breakpoint && breakpoint.condition ? breakpoint.condition : this.conditionInput;\n        }\n    };\n    BreakpointWidget.prototype.rememberInput = function () {\n        var value = this.input.getModel().getValue();\n        switch (this.context) {\n            case debug_1.BreakpointWidgetContext.LOG_MESSAGE:\n                this.logMessageInput = value;\n                break;\n            case debug_1.BreakpointWidgetContext.HIT_COUNT:\n                this.hitCountInput = value;\n                break;\n            default:\n                this.conditionInput = value;\n        }\n    };\n    BreakpointWidget.prototype.show = function (rangeOrPos, heightInLines) {\n        var lineNum = this.input.getModel().getLineCount();\n        _super.prototype.show.call(this, rangeOrPos, lineNum + 1);\n    };\n    BreakpointWidget.prototype.fitHeightToContent = function () {\n        var lineNum = this.input.getModel().getLineCount();\n        this._relayout(lineNum + 1);\n    };\n    BreakpointWidget.prototype._fillContainer = function (container) {\n        var _this = this;\n        this.setCssClass('breakpoint-widget');\n        var selectBox = new selectBox_1.SelectBox([{ text: nls.localize('expression', \"Expression\") }, { text: nls.localize('hitCount', \"Hit Count\") }, { text: nls.localize('logMessage', \"Log Message\") }], this.context, this.contextViewService, undefined, { ariaLabel: nls.localize('breakpointType', 'Breakpoint Type') });\n        this.toDispose.push(styler_1.attachSelectBoxStyler(selectBox, this.themeService));\n        this.selectContainer = $('.breakpoint-select-container');\n        selectBox.render(dom.append(container, this.selectContainer));\n        selectBox.onDidSelect(function (e) {\n            _this.rememberInput();\n            _this.context = e.index;\n            var value = _this.getInputValue(_this.breakpoint);\n            _this.input.getModel().setValue(value);\n        });\n        this.createBreakpointInput(dom.append(container, $('.inputContainer')));\n        this.input.getModel().setValue(this.getInputValue(this.breakpoint));\n        this.toDispose.push(this.input.getModel().onDidChangeContent(function () {\n            _this.fitHeightToContent();\n        }));\n        this.input.setPosition({ lineNumber: 1, column: this.input.getModel().getLineMaxColumn(1) });\n        // Due to an electron bug we have to do the timeout, otherwise we do not get focus\n        setTimeout(function () { return _this.input.focus(); }, 150);\n    };\n    BreakpointWidget.prototype.close = function (success) {\n        var _a;\n        if (success) {\n            // if there is already a breakpoint on this location - remove it.\n            var condition = this.breakpoint && this.breakpoint.condition;\n            var hitCondition = this.breakpoint && this.breakpoint.hitCondition;\n            var logMessage = this.breakpoint && this.breakpoint.logMessage;\n            this.rememberInput();\n            if (this.conditionInput || this.context === debug_1.BreakpointWidgetContext.CONDITION) {\n                condition = this.conditionInput;\n            }\n            if (this.hitCountInput || this.context === debug_1.BreakpointWidgetContext.HIT_COUNT) {\n                hitCondition = this.hitCountInput;\n            }\n            if (this.logMessageInput || this.context === debug_1.BreakpointWidgetContext.LOG_MESSAGE) {\n                logMessage = this.logMessageInput;\n            }\n            if (this.breakpoint) {\n                this.debugService.updateBreakpoints(this.breakpoint.uri, (_a = {},\n                    _a[this.breakpoint.getId()] = {\n                        condition: condition,\n                        hitCondition: hitCondition,\n                        logMessage: logMessage\n                    },\n                    _a), false);\n            }\n            else {\n                var model = this.editor.getModel();\n                if (model) {\n                    this.debugService.addBreakpoints(model.uri, [{\n                            lineNumber: this.lineNumber,\n                            enabled: true,\n                            condition: condition,\n                            hitCondition: hitCondition,\n                            logMessage: logMessage\n                        }], \"breakpointWidget\");\n                }\n            }\n        }\n        this.dispose();\n    };\n    BreakpointWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {\n        this.input.layout({ height: heightInPixel, width: widthInPixel - 113 });\n    };\n    BreakpointWidget.prototype.createBreakpointInput = function (container) {\n        var _this = this;\n        var scopedContextKeyService = this.contextKeyService.createScoped(container);\n        this.toDispose.push(scopedContextKeyService);\n        var scopedInstatiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, scopedContextKeyService], [IPrivateBreakpointWidgetService, this]));\n        var options = simpleEditorOptions_1.getSimpleEditorOptions();\n        var codeEditorWidgetOptions = simpleEditorOptions_1.getSimpleCodeEditorWidgetOptions();\n        this.input = scopedInstatiationService.createInstance(codeEditorWidget_1.CodeEditorWidget, container, options, codeEditorWidgetOptions);\n        debug_1.CONTEXT_IN_BREAKPOINT_WIDGET.bindTo(scopedContextKeyService).set(true);\n        var model = this.modelService.createModel('', null, uri_1.URI.parse(debug_1.DEBUG_SCHEME + \":\" + this.editor.getId() + \":breakpointinput\"), true);\n        this.input.setModel(model);\n        this.toDispose.push(model);\n        var setDecorations = function () {\n            var value = _this.input.getModel().getValue();\n            var decorations = !!value ? [] : _this.createDecorations();\n            _this.input.setDecorations(DECORATION_KEY, decorations);\n        };\n        this.input.getModel().onDidChangeContent(function () { return setDecorations(); });\n        this.themeService.onThemeChange(function () { return setDecorations(); });\n        this.toDispose.push(modes_1.CompletionProviderRegistry.register({ scheme: debug_1.DEBUG_SCHEME, hasAccessToAllModels: true }, {\n            provideCompletionItems: function (model, position, _context, token) {\n                var suggestionsPromise;\n                var underlyingModel = _this.editor.getModel();\n                if (underlyingModel && (_this.context === debug_1.BreakpointWidgetContext.CONDITION || _this.context === debug_1.BreakpointWidgetContext.LOG_MESSAGE && _this.isCurlyBracketOpen())) {\n                    suggestionsPromise = suggest_1.provideSuggestionItems(underlyingModel, new position_1.Position(_this.lineNumber, 1), new suggest_1.CompletionOptions(undefined, new Set().add(modes_1.CompletionItemKind.Snippet)), _context, token).then(function (suggestions) {\n                        var overwriteBefore = 0;\n                        if (_this.context === debug_1.BreakpointWidgetContext.CONDITION) {\n                            overwriteBefore = position.column - 1;\n                        }\n                        else {\n                            // Inside the currly brackets, need to count how many useful characters are behind the position so they would all be taken into account\n                            var value = _this.input.getModel().getValue();\n                            while ((position.column - 2 - overwriteBefore >= 0) && value[position.column - 2 - overwriteBefore] !== '{' && value[position.column - 2 - overwriteBefore] !== ' ') {\n                                overwriteBefore++;\n                            }\n                        }\n                        return {\n                            suggestions: suggestions.map(function (s) {\n                                s.completion.range = range_1.Range.fromPositions(position.delta(0, -overwriteBefore), position);\n                                return s.completion;\n                            })\n                        };\n                    });\n                }\n                else {\n                    suggestionsPromise = Promise.resolve({ suggestions: [] });\n                }\n                return suggestionsPromise;\n            }\n        }));\n    };\n    BreakpointWidget.prototype.createDecorations = function () {\n        var transparentForeground = colorRegistry_1.transparent(colorRegistry_1.editorForeground, 0.4)(this.themeService.getTheme());\n        return [{\n                range: {\n                    startLineNumber: 0,\n                    endLineNumber: 0,\n                    startColumn: 0,\n                    endColumn: 1\n                },\n                renderOptions: {\n                    after: {\n                        contentText: this.placeholder,\n                        color: transparentForeground ? transparentForeground.toString() : undefined\n                    }\n                }\n            }];\n    };\n    BreakpointWidget.prototype.isCurlyBracketOpen = function () {\n        var value = this.input.getModel().getValue();\n        var position = this.input.getPosition();\n        if (position) {\n            for (var i = position.column - 2; i >= 0; i--) {\n                if (value[i] === '{') {\n                    return true;\n                }\n                if (value[i] === '}') {\n                    return false;\n                }\n            }\n        }\n        return false;\n    };\n    BreakpointWidget.prototype.dispose = function () {\n        var _this = this;\n        _super.prototype.dispose.call(this);\n        this.input.dispose();\n        lifecycle.dispose(this.toDispose);\n        setTimeout(function () { return _this.editor.focus(); }, 0);\n    };\n    BreakpointWidget = tslib_1.__decorate([\n        tslib_1.__param(3, contextView_1.IContextViewService),\n        tslib_1.__param(4, debug_1.IDebugService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, contextkey_1.IContextKeyService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, modelService_1.IModelService),\n        tslib_1.__param(9, codeEditorService_1.ICodeEditorService)\n    ], BreakpointWidget);\n    return BreakpointWidget;\n}(zoneWidget_1.ZoneWidget));\nexports.BreakpointWidget = BreakpointWidget;\nvar AcceptBreakpointWidgetInputAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AcceptBreakpointWidgetInputAction, _super);\n    function AcceptBreakpointWidgetInputAction() {\n        return _super.call(this, {\n            id: 'breakpointWidget.action.acceptInput',\n            precondition: debug_1.CONTEXT_BREAKPOINT_WIDGET_VISIBLE,\n            kbOpts: {\n                kbExpr: debug_1.CONTEXT_IN_BREAKPOINT_WIDGET,\n                primary: keyCodes_1.KeyCode.Enter,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    AcceptBreakpointWidgetInputAction.prototype.runEditorCommand = function (accessor, editor) {\n        accessor.get(IPrivateBreakpointWidgetService).close(true);\n    };\n    return AcceptBreakpointWidgetInputAction;\n}(editorExtensions_1.EditorCommand));\nvar CloseBreakpointWidgetCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(CloseBreakpointWidgetCommand, _super);\n    function CloseBreakpointWidgetCommand() {\n        return _super.call(this, {\n            id: 'closeBreakpointWidget',\n            precondition: debug_1.CONTEXT_BREAKPOINT_WIDGET_VISIBLE,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyCode.Escape,\n                secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape],\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    CloseBreakpointWidgetCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n        var debugContribution = editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID);\n        if (debugContribution) {\n            // if focus is in outer editor we need to use the debug contribution to close\n            return debugContribution.closeBreakpointWidget();\n        }\n        accessor.get(IPrivateBreakpointWidgetService).close(false);\n    };\n    return CloseBreakpointWidgetCommand;\n}(editorExtensions_1.EditorCommand));\neditorExtensions_1.registerEditorCommand(new AcceptBreakpointWidgetInputAction());\neditorExtensions_1.registerEditorCommand(new CloseBreakpointWidgetCommand());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/breakpointWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/breakpointWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/breakpointWidget';\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { SelectBox, ISelectOptionItem } from 'vs/base/browser/ui/selectBox/selectBox';\nimport * as lifecycle from 'vs/base/common/lifecycle';\nimport * as dom from 'vs/base/browser/dom';\nimport { Position, IPosition } from 'vs/editor/common/core/position';\nimport { ICodeEditor, IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ZoneWidget } from 'vs/editor/contrib/zoneWidget/zoneWidget';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IDebugService, IBreakpoint, BreakpointWidgetContext as Context, CONTEXT_BREAKPOINT_WIDGET_VISIBLE, DEBUG_SCHEME, IDebugEditorContribution, EDITOR_CONTRIBUTION_ID, CONTEXT_IN_BREAKPOINT_WIDGET } from 'vs/workbench/contrib/debug/common/debug';\nimport { attachSelectBoxStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor, EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { CompletionProviderRegistry, CompletionList, CompletionContext, CompletionItemKind } from 'vs/editor/common/modes';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { provideSuggestionItems, CompletionOptions } from 'vs/editor/contrib/suggest/suggest';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { transparent, editorForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IDecorationOptions } from 'vs/editor/common/editorCommon';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { getSimpleEditorOptions, getSimpleCodeEditorWidgetOptions } from 'vs/workbench/contrib/codeEditor/browser/simpleEditorOptions';\nimport { IRange, Range } from 'vs/editor/common/core/range';\n\nconst $ = dom.$;\nconst IPrivateBreakpointWidgetService = createDecorator<IPrivateBreakpointWidgetService>('privateBreakopintWidgetService');\nexport interface IPrivateBreakpointWidgetService {\n\t_serviceBrand: any;\n\tclose(success: boolean): void;\n}\nconst DECORATION_KEY = 'breakpointwidgetdecoration';\n\nexport class BreakpointWidget extends ZoneWidget implements IPrivateBreakpointWidgetService {\n\tpublic _serviceBrand: any;\n\n\tprivate selectContainer: HTMLElement;\n\tprivate input: IActiveCodeEditor;\n\tprivate toDispose: lifecycle.IDisposable[];\n\tprivate conditionInput = '';\n\tprivate hitCountInput = '';\n\tprivate logMessageInput = '';\n\tprivate breakpoint: IBreakpoint | undefined;\n\n\tconstructor(editor: ICodeEditor, private lineNumber: number, private context: Context,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t) {\n\t\tsuper(editor, { showFrame: true, showArrow: false, frameWidth: 1 });\n\n\t\tthis.toDispose = [];\n\t\tconst model = this.editor.getModel();\n\t\tif (model) {\n\t\t\tconst uri = model.uri;\n\t\t\tconst breakpoints = this.debugService.getModel().getBreakpoints({ lineNumber: this.lineNumber, uri });\n\t\t\tthis.breakpoint = breakpoints.length ? breakpoints[0] : undefined;\n\t\t}\n\n\t\tif (this.context === undefined) {\n\t\t\tif (this.breakpoint && !this.breakpoint.condition && !this.breakpoint.hitCondition && this.breakpoint.logMessage) {\n\t\t\t\tthis.context = Context.LOG_MESSAGE;\n\t\t\t} else if (this.breakpoint && !this.breakpoint.condition && this.breakpoint.hitCondition) {\n\t\t\t\tthis.context = Context.HIT_COUNT;\n\t\t\t} else {\n\t\t\t\tthis.context = Context.CONDITION;\n\t\t\t}\n\t\t}\n\n\t\tthis.toDispose.push(this.debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\tif (this.breakpoint && e && e.removed && e.removed.indexOf(this.breakpoint) >= 0) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\t\tthis.codeEditorService.registerDecorationType(DECORATION_KEY, {});\n\n\t\tthis.create();\n\t}\n\n\tprivate get placeholder(): string {\n\t\tswitch (this.context) {\n\t\t\tcase Context.LOG_MESSAGE:\n\t\t\t\treturn nls.localize('breakpointWidgetLogMessagePlaceholder', \"Message to log when breakpoint is hit. Expressions within {} are interpolated. 'Enter' to accept, 'esc' to cancel.\");\n\t\t\tcase Context.HIT_COUNT:\n\t\t\t\treturn nls.localize('breakpointWidgetHitCountPlaceholder', \"Break when hit count condition is met. 'Enter' to accept, 'esc' to cancel.\");\n\t\t\tdefault:\n\t\t\t\treturn nls.localize('breakpointWidgetExpressionPlaceholder', \"Break when expression evaluates to true. 'Enter' to accept, 'esc' to cancel.\");\n\t\t}\n\t}\n\n\tprivate getInputValue(breakpoint: IBreakpoint | undefined): string {\n\t\tswitch (this.context) {\n\t\t\tcase Context.LOG_MESSAGE:\n\t\t\t\treturn breakpoint && breakpoint.logMessage ? breakpoint.logMessage : this.logMessageInput;\n\t\t\tcase Context.HIT_COUNT:\n\t\t\t\treturn breakpoint && breakpoint.hitCondition ? breakpoint.hitCondition : this.hitCountInput;\n\t\t\tdefault:\n\t\t\t\treturn breakpoint && breakpoint.condition ? breakpoint.condition : this.conditionInput;\n\t\t}\n\t}\n\n\tprivate rememberInput(): void {\n\t\tconst value = this.input.getModel().getValue();\n\t\tswitch (this.context) {\n\t\t\tcase Context.LOG_MESSAGE:\n\t\t\t\tthis.logMessageInput = value;\n\t\t\t\tbreak;\n\t\t\tcase Context.HIT_COUNT:\n\t\t\t\tthis.hitCountInput = value;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.conditionInput = value;\n\t\t}\n\t}\n\n\tpublic show(rangeOrPos: IRange | IPosition, heightInLines: number) {\n\t\tconst lineNum = this.input.getModel().getLineCount();\n\t\tsuper.show(rangeOrPos, lineNum + 1);\n\t}\n\n\tpublic fitHeightToContent() {\n\t\tconst lineNum = this.input.getModel().getLineCount();\n\t\tthis._relayout(lineNum + 1);\n\t}\n\n\tprotected _fillContainer(container: HTMLElement): void {\n\t\tthis.setCssClass('breakpoint-widget');\n\t\tconst selectBox = new SelectBox(<ISelectOptionItem[]>[{ text: nls.localize('expression', \"Expression\") }, { text: nls.localize('hitCount', \"Hit Count\") }, { text: nls.localize('logMessage', \"Log Message\") }], this.context, this.contextViewService, undefined, { ariaLabel: nls.localize('breakpointType', 'Breakpoint Type') });\n\t\tthis.toDispose.push(attachSelectBoxStyler(selectBox, this.themeService));\n\t\tthis.selectContainer = $('.breakpoint-select-container');\n\t\tselectBox.render(dom.append(container, this.selectContainer));\n\t\tselectBox.onDidSelect(e => {\n\t\t\tthis.rememberInput();\n\t\t\tthis.context = e.index;\n\n\t\t\tconst value = this.getInputValue(this.breakpoint);\n\t\t\tthis.input.getModel().setValue(value);\n\t\t});\n\n\t\tthis.createBreakpointInput(dom.append(container, $('.inputContainer')));\n\n\t\tthis.input.getModel().setValue(this.getInputValue(this.breakpoint));\n\t\tthis.toDispose.push(this.input.getModel().onDidChangeContent(() => {\n\t\t\tthis.fitHeightToContent();\n\t\t}));\n\t\tthis.input.setPosition({ lineNumber: 1, column: this.input.getModel().getLineMaxColumn(1) });\n\t\t// Due to an electron bug we have to do the timeout, otherwise we do not get focus\n\t\tsetTimeout(() => this.input.focus(), 150);\n\t}\n\n\tpublic close(success: boolean): void {\n\t\tif (success) {\n\t\t\t// if there is already a breakpoint on this location - remove it.\n\n\t\t\tlet condition = this.breakpoint && this.breakpoint.condition;\n\t\t\tlet hitCondition = this.breakpoint && this.breakpoint.hitCondition;\n\t\t\tlet logMessage = this.breakpoint && this.breakpoint.logMessage;\n\t\t\tthis.rememberInput();\n\n\t\t\tif (this.conditionInput || this.context === Context.CONDITION) {\n\t\t\t\tcondition = this.conditionInput;\n\t\t\t}\n\t\t\tif (this.hitCountInput || this.context === Context.HIT_COUNT) {\n\t\t\t\thitCondition = this.hitCountInput;\n\t\t\t}\n\t\t\tif (this.logMessageInput || this.context === Context.LOG_MESSAGE) {\n\t\t\t\tlogMessage = this.logMessageInput;\n\t\t\t}\n\n\t\t\tif (this.breakpoint) {\n\t\t\t\tthis.debugService.updateBreakpoints(this.breakpoint.uri, {\n\t\t\t\t\t[this.breakpoint.getId()]: {\n\t\t\t\t\t\tcondition,\n\t\t\t\t\t\thitCondition,\n\t\t\t\t\t\tlogMessage\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t} else {\n\t\t\t\tconst model = this.editor.getModel();\n\t\t\t\tif (model) {\n\t\t\t\t\tthis.debugService.addBreakpoints(model.uri, [{\n\t\t\t\t\t\tlineNumber: this.lineNumber,\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tcondition,\n\t\t\t\t\t\thitCondition,\n\t\t\t\t\t\tlogMessage\n\t\t\t\t\t}], `breakpointWidget`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose();\n\t}\n\n\tprotected _doLayout(heightInPixel: number, widthInPixel: number): void {\n\t\tthis.input.layout({ height: heightInPixel, width: widthInPixel - 113 });\n\t}\n\n\tprivate createBreakpointInput(container: HTMLElement): void {\n\t\tconst scopedContextKeyService = this.contextKeyService.createScoped(container);\n\t\tthis.toDispose.push(scopedContextKeyService);\n\n\t\tconst scopedInstatiationService = this.instantiationService.createChild(new ServiceCollection(\n\t\t\t[IContextKeyService, scopedContextKeyService], [IPrivateBreakpointWidgetService, this]));\n\n\t\tconst options = getSimpleEditorOptions();\n\t\tconst codeEditorWidgetOptions = getSimpleCodeEditorWidgetOptions();\n\t\tthis.input = <IActiveCodeEditor>scopedInstatiationService.createInstance(CodeEditorWidget, container, options, codeEditorWidgetOptions);\n\t\tCONTEXT_IN_BREAKPOINT_WIDGET.bindTo(scopedContextKeyService).set(true);\n\t\tconst model = this.modelService.createModel('', null, uri.parse(`${DEBUG_SCHEME}:${this.editor.getId()}:breakpointinput`), true);\n\t\tthis.input.setModel(model);\n\t\tthis.toDispose.push(model);\n\t\tconst setDecorations = () => {\n\t\t\tconst value = this.input.getModel().getValue();\n\t\t\tconst decorations = !!value ? [] : this.createDecorations();\n\t\t\tthis.input.setDecorations(DECORATION_KEY, decorations);\n\t\t};\n\t\tthis.input.getModel().onDidChangeContent(() => setDecorations());\n\t\tthis.themeService.onThemeChange(() => setDecorations());\n\n\t\tthis.toDispose.push(CompletionProviderRegistry.register({ scheme: DEBUG_SCHEME, hasAccessToAllModels: true }, {\n\t\t\tprovideCompletionItems: (model: ITextModel, position: Position, _context: CompletionContext, token: CancellationToken): Promise<CompletionList> => {\n\t\t\t\tlet suggestionsPromise: Promise<CompletionList>;\n\t\t\t\tconst underlyingModel = this.editor.getModel();\n\t\t\t\tif (underlyingModel && (this.context === Context.CONDITION || this.context === Context.LOG_MESSAGE && this.isCurlyBracketOpen())) {\n\t\t\t\t\tsuggestionsPromise = provideSuggestionItems(underlyingModel, new Position(this.lineNumber, 1), new CompletionOptions(undefined, new Set<CompletionItemKind>().add(CompletionItemKind.Snippet)), _context, token).then(suggestions => {\n\n\t\t\t\t\t\tlet overwriteBefore = 0;\n\t\t\t\t\t\tif (this.context === Context.CONDITION) {\n\t\t\t\t\t\t\toverwriteBefore = position.column - 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Inside the currly brackets, need to count how many useful characters are behind the position so they would all be taken into account\n\t\t\t\t\t\t\tconst value = this.input.getModel().getValue();\n\t\t\t\t\t\t\twhile ((position.column - 2 - overwriteBefore >= 0) && value[position.column - 2 - overwriteBefore] !== '{' && value[position.column - 2 - overwriteBefore] !== ' ') {\n\t\t\t\t\t\t\t\toverwriteBefore++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tsuggestions: suggestions.map(s => {\n\t\t\t\t\t\t\t\ts.completion.range = Range.fromPositions(position.delta(0, -overwriteBefore), position);\n\t\t\t\t\t\t\t\treturn s.completion;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tsuggestionsPromise = Promise.resolve({ suggestions: [] });\n\t\t\t\t}\n\n\t\t\t\treturn suggestionsPromise;\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createDecorations(): IDecorationOptions[] {\n\t\tconst transparentForeground = transparent(editorForeground, 0.4)(this.themeService.getTheme());\n\t\treturn [{\n\t\t\trange: {\n\t\t\t\tstartLineNumber: 0,\n\t\t\t\tendLineNumber: 0,\n\t\t\t\tstartColumn: 0,\n\t\t\t\tendColumn: 1\n\t\t\t},\n\t\t\trenderOptions: {\n\t\t\t\tafter: {\n\t\t\t\t\tcontentText: this.placeholder,\n\t\t\t\t\tcolor: transparentForeground ? transparentForeground.toString() : undefined\n\t\t\t\t}\n\t\t\t}\n\t\t}];\n\t}\n\n\tprivate isCurlyBracketOpen(): boolean {\n\t\tconst value = this.input.getModel().getValue();\n\t\tconst position = this.input.getPosition();\n\t\tif (position) {\n\t\t\tfor (let i = position.column - 2; i >= 0; i--) {\n\t\t\t\tif (value[i] === '{') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (value[i] === '}') {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tlifecycle.dispose(this.toDispose);\n\t\tsetTimeout(() => this.editor.focus(), 0);\n\t}\n}\n\nclass AcceptBreakpointWidgetInputAction extends EditorCommand {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'breakpointWidget.action.acceptInput',\n\t\t\tprecondition: CONTEXT_BREAKPOINT_WIDGET_VISIBLE,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: CONTEXT_IN_BREAKPOINT_WIDGET,\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\taccessor.get(IPrivateBreakpointWidgetService).close(true);\n\t}\n}\n\nclass CloseBreakpointWidgetCommand extends EditorCommand {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'closeBreakpointWidget',\n\t\t\tprecondition: CONTEXT_BREAKPOINT_WIDGET_VISIBLE,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tsecondary: [KeyMod.Shift | KeyCode.Escape],\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tconst debugContribution = editor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID);\n\t\tif (debugContribution) {\n\t\t\t// if focus is in outer editor we need to use the debug contribution to close\n\t\t\treturn debugContribution.closeBreakpointWidget();\n\t\t}\n\n\t\taccessor.get(IPrivateBreakpointWidgetService).close(false);\n\t}\n}\n\nregisterEditorCommand(new AcceptBreakpointWidgetInputAction());\nregisterEditorCommand(new CloseBreakpointWidgetCommand());\n"]}]}