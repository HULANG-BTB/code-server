{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/arrays\", \"vs/editor/common/modes/languageFeatureRegistry\"], function (require, exports, errors_1, arrays_1, languageFeatureRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.CodeInsetProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    function getCodeInsetData(model, token) {\n        const symbols = [];\n        const providers = exports.CodeInsetProviderRegistry.ordered(model);\n        const promises = providers.map(provider => Promise.resolve(provider.provideCodeInsets(model, token)).then(result => {\n            if (Array.isArray(result)) {\n                for (let symbol of result) {\n                    symbols.push({ symbol, provider });\n                }\n            }\n        }).catch(errors_1.onUnexpectedExternalError));\n        return Promise.all(promises).then(() => {\n            return arrays_1.mergeSort(symbols, (a, b) => {\n                // sort by lineNumber, provider-rank, and column\n                if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n                    return -1;\n                }\n                else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n                    return 1;\n                }\n                else if (providers.indexOf(a.provider) < providers.indexOf(b.provider)) {\n                    return -1;\n                }\n                else if (providers.indexOf(a.provider) > providers.indexOf(b.provider)) {\n                    return 1;\n                }\n                else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n                    return -1;\n                }\n                else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n        });\n    }\n    exports.getCodeInsetData = getCodeInsetData;\n});\n",null]}