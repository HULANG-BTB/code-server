{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textMate/common/TMGrammars.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/services/extensions/common/extensionsRegistry\", \"vs/workbench/services/mode/common/workbenchModeService\"], function (require, exports, nls, extensionsRegistry_1, workbenchModeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.grammarsExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'grammars',\n        deps: [workbenchModeService_1.languagesExtPoint],\n        jsonSchema: {\n            description: nls.localize('vscode.extension.contributes.grammars', 'Contributes textmate tokenizers.'),\n            type: 'array',\n            defaultSnippets: [{ body: [{ language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' }] }],\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { language: '${1:id}', scopeName: 'source.${2:id}', path: './syntaxes/${3:id}.tmLanguage.' } }],\n                properties: {\n                    language: {\n                        description: nls.localize('vscode.extension.contributes.grammars.language', 'Language identifier for which this syntax is contributed to.'),\n                        type: 'string'\n                    },\n                    scopeName: {\n                        description: nls.localize('vscode.extension.contributes.grammars.scopeName', 'Textmate scope name used by the tmLanguage file.'),\n                        type: 'string'\n                    },\n                    path: {\n                        description: nls.localize('vscode.extension.contributes.grammars.path', 'Path of the tmLanguage file. The path is relative to the extension folder and typically starts with \\'./syntaxes/\\'.'),\n                        type: 'string'\n                    },\n                    embeddedLanguages: {\n                        description: nls.localize('vscode.extension.contributes.grammars.embeddedLanguages', 'A map of scope name to language id if this grammar contains embedded languages.'),\n                        type: 'object'\n                    },\n                    tokenTypes: {\n                        description: nls.localize('vscode.extension.contributes.grammars.tokenTypes', 'A map of scope name to token types.'),\n                        type: 'object',\n                        additionalProperties: {\n                            enum: ['string', 'comment', 'other']\n                        }\n                    },\n                    injectTo: {\n                        description: nls.localize('vscode.extension.contributes.grammars.injectTo', 'List of language scope names to which this grammar is injected to.'),\n                        type: 'array',\n                        items: {\n                            type: 'string'\n                        }\n                    }\n                },\n                required: ['scopeName', 'path']\n            }\n        }\n    });\n});\n",null]}