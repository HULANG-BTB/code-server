{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestAlternatives.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggestAlternatives.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, lifecycle_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let SuggestAlternatives = class SuggestAlternatives {\n        constructor(_editor, contextKeyService) {\n            this._editor = _editor;\n            this._ckOtherSuggestions = SuggestAlternatives.OtherSuggestions.bindTo(contextKeyService);\n        }\n        dispose() {\n            this.reset();\n        }\n        reset() {\n            this._ckOtherSuggestions.reset();\n            lifecycle_1.dispose(this._listener);\n            this._model = undefined;\n            this._acceptNext = undefined;\n            this._ignore = false;\n        }\n        set({ model, index }, acceptNext) {\n            // no suggestions -> nothing to do\n            if (model.items.length === 0) {\n                this.reset();\n                return;\n            }\n            // no alternative suggestions -> nothing to do\n            let nextIndex = SuggestAlternatives._moveIndex(true, model, index);\n            if (nextIndex === index) {\n                this.reset();\n                return;\n            }\n            this._acceptNext = acceptNext;\n            this._model = model;\n            this._index = index;\n            this._listener = this._editor.onDidChangeCursorPosition(() => {\n                if (!this._ignore) {\n                    this.reset();\n                }\n            });\n            this._ckOtherSuggestions.set(true);\n        }\n        static _moveIndex(fwd, model, index) {\n            let newIndex = index;\n            while (true) {\n                newIndex = (newIndex + model.items.length + (fwd ? +1 : -1)) % model.items.length;\n                if (newIndex === index) {\n                    break;\n                }\n                if (!model.items[newIndex].completion.additionalTextEdits) {\n                    break;\n                }\n            }\n            return newIndex;\n        }\n        next() {\n            this._move(true);\n        }\n        prev() {\n            this._move(false);\n        }\n        _move(fwd) {\n            if (!this._model) {\n                // nothing to reason about\n                return;\n            }\n            try {\n                this._ignore = true;\n                this._index = SuggestAlternatives._moveIndex(fwd, this._model, this._index);\n                this._acceptNext({ index: this._index, item: this._model.items[this._index], model: this._model });\n            }\n            finally {\n                this._ignore = false;\n            }\n        }\n    };\n    SuggestAlternatives.OtherSuggestions = new contextkey_1.RawContextKey('hasOtherSuggestions', false);\n    SuggestAlternatives = __decorate([\n        __param(1, contextkey_1.IContextKeyService)\n    ], SuggestAlternatives);\n    exports.SuggestAlternatives = SuggestAlternatives;\n});\n",null]}