{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextView.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextView.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IContextViewService = instantiation_1.createDecorator('contextViewService');\nexports.IContextMenuService = instantiation_1.createDecorator('contextMenuService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextView.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextView.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,gFAAiF;AAIpE,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;AAwBjF,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextMenuDelegate } from 'vs/base/browser/contextmenu';\nimport { AnchorAlignment } from 'vs/base/browser/ui/contextview/contextview';\n\nexport const IContextViewService = createDecorator<IContextViewService>('contextViewService');\n\nexport interface IContextViewService {\n\n\t_serviceBrand: any;\n\n\tshowContextView(delegate: IContextViewDelegate): void;\n\thideContextView(data?: any): void;\n\tlayout(): void;\n\tanchorAlignment?: AnchorAlignment;\n}\n\nexport interface IContextViewDelegate {\n\n\tcanRelayout?: boolean; // Default: true\n\n\tgetAnchor(): HTMLElement | { x: number; y: number; width?: number; height?: number; };\n\trender(container: HTMLElement): IDisposable;\n\tonDOMEvent?(e: any, activeElement: HTMLElement): void;\n\tonHide?(data?: any): void;\n\tfocus?(): void;\n\tanchorAlignment?: AnchorAlignment;\n}\n\nexport const IContextMenuService = createDecorator<IContextMenuService>('contextMenuService');\n\nexport interface IContextMenuService {\n\n\t_serviceBrand: any;\n\n\tshowContextMenu(delegate: IContextMenuDelegate): void;\n\tonDidContextMenu: Event<void>; // TODO@isidor these event should be removed once we get async context menus\n}"]}]}