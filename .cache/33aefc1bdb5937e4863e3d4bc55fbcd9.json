{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/activitybarpart\");\nvar nls = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar activity_1 = require(\"vs/workbench/common/activity\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar part_1 = require(\"vs/workbench/browser/part\");\nvar activitybarActions_1 = require(\"vs/workbench/browser/parts/activitybar/activitybarActions\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar layoutActions_1 = require(\"vs/workbench/browser/actions/layoutActions\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar compositeBar_1 = require(\"vs/workbench/browser/parts/compositeBar\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar compositeBarActions_1 = require(\"vs/workbench/browser/parts/compositeBarActions\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar types_1 = require(\"vs/base/common/types\");\nvar activityBarService_1 = require(\"vs/workbench/services/activityBar/browser/activityBarService\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\nvar network_1 = require(\"vs/base/common/network\");\nvar ActivitybarPart = /** @class */ (function (_super) {\n    tslib_1.__extends(ActivitybarPart, _super);\n    function ActivitybarPart(viewletService, instantiationService, layoutService, themeService, storageService, extensionService, viewsService, contextKeyService) {\n        var _this = _super.call(this, layoutService_1.Parts.ACTIVITYBAR_PART, { hasTitle: false }, themeService, storageService, layoutService) || this;\n        _this.viewletService = viewletService;\n        _this.instantiationService = instantiationService;\n        _this.layoutService = layoutService;\n        _this.storageService = storageService;\n        _this.extensionService = extensionService;\n        _this.viewsService = viewsService;\n        _this.contextKeyService = contextKeyService;\n        //#region IView\n        _this.minimumWidth = 50;\n        _this.maximumWidth = 50;\n        _this.minimumHeight = 0;\n        _this.maximumHeight = Number.POSITIVE_INFINITY;\n        _this.globalActivityIdToActions = Object.create(null);\n        _this.cachedViewlets = [];\n        _this.compositeActions = Object.create(null);\n        _this.viewletDisposables = new Map();\n        _this.cachedViewlets = _this.getCachedViewlets();\n        for (var _i = 0, _a = _this.cachedViewlets; _i < _a.length; _i++) {\n            var cachedViewlet = _a[_i];\n            if (_this.shouldBeHidden(cachedViewlet.id, cachedViewlet)) {\n                cachedViewlet.visible = false;\n            }\n        }\n        _this.compositeBar = _this._register(_this.instantiationService.createInstance(compositeBar_1.CompositeBar, _this.cachedViewlets.map(function (v) { return ({ id: v.id, name: undefined, visible: v.visible, order: v.order, pinned: v.pinned }); }), {\n            icon: true,\n            orientation: actionbar_1.ActionsOrientation.VERTICAL,\n            openComposite: function (compositeId) { return _this.viewletService.openViewlet(compositeId, true); },\n            getActivityAction: function (compositeId) { return _this.getCompositeActions(compositeId).activityAction; },\n            getCompositePinnedAction: function (compositeId) { return _this.getCompositeActions(compositeId).pinnedAction; },\n            getOnCompositeClickAction: function (compositeId) { return _this.instantiationService.createInstance(activitybarActions_1.ToggleViewletAction, _this.viewletService.getViewlet(compositeId)); },\n            getContextMenuActions: function () { return [_this.instantiationService.createInstance(layoutActions_1.ToggleActivityBarVisibilityAction, layoutActions_1.ToggleActivityBarVisibilityAction.ID, nls.localize('hideActivitBar', \"Hide Activity Bar\"))]; },\n            getDefaultCompositeId: function () { return _this.viewletService.getDefaultViewletId(); },\n            hidePart: function () { return _this.layoutService.setSideBarHidden(true); },\n            compositeSize: 50,\n            colors: function (theme) { return _this.getActivitybarItemColors(theme); },\n            overflowActionSize: ActivitybarPart.ACTION_HEIGHT\n        }));\n        _this.registerListeners();\n        _this.onDidRegisterViewlets(viewletService.getViewlets());\n        return _this;\n    }\n    ActivitybarPart.prototype.registerListeners = function () {\n        var _this = this;\n        // Viewlet registration\n        this._register(this.viewletService.onDidViewletRegister(function (viewlet) { return _this.onDidRegisterViewlets([viewlet]); }));\n        this._register(this.viewletService.onDidViewletDeregister(function (_a) {\n            var id = _a.id;\n            return _this.onDidDeregisterViewlet(id);\n        }));\n        // Activate viewlet action on opening of a viewlet\n        this._register(this.viewletService.onDidViewletOpen(function (viewlet) { return _this.onDidViewletOpen(viewlet); }));\n        // Deactivate viewlet action on close\n        this._register(this.viewletService.onDidViewletClose(function (viewlet) { return _this.compositeBar.deactivateComposite(viewlet.getId()); }));\n        // Extension registration\n        var disposables = [];\n        this._register(this.extensionService.onDidRegisterExtensions(function () {\n            disposables = lifecycle_1.dispose(disposables);\n            _this.onDidRegisterExtensions();\n            _this.compositeBar.onDidChange(function () { return _this.saveCachedViewlets(); }, _this, disposables);\n            _this.storageService.onDidChangeStorage(function (e) { return _this.onDidStorageChange(e); }, _this, disposables);\n        }));\n        this._register(lifecycle_1.toDisposable(function () { return lifecycle_1.dispose(disposables); }));\n    };\n    ActivitybarPart.prototype.onDidRegisterExtensions = function () {\n        this.removeNotExistingComposites();\n        this.saveCachedViewlets();\n    };\n    ActivitybarPart.prototype.onDidViewletOpen = function (viewlet) {\n        // Update the composite bar by adding\n        var foundViewlet = this.viewletService.getViewlet(viewlet.getId());\n        if (foundViewlet) {\n            this.compositeBar.addComposite(foundViewlet);\n        }\n        this.compositeBar.activateComposite(viewlet.getId());\n        var viewletDescriptor = this.viewletService.getViewlet(viewlet.getId());\n        if (viewletDescriptor) {\n            var viewContainer = this.getViewContainer(viewletDescriptor.id);\n            if (viewContainer && viewContainer.hideIfEmpty) {\n                var viewDescriptors = this.viewsService.getViewDescriptors(viewContainer);\n                if (viewDescriptors && viewDescriptors.activeViewDescriptors.length === 0) {\n                    this.removeComposite(viewletDescriptor.id, true); // Update the composite bar by hiding\n                }\n            }\n        }\n    };\n    ActivitybarPart.prototype.showActivity = function (viewletOrActionId, badge, clazz, priority) {\n        if (this.viewletService.getViewlet(viewletOrActionId)) {\n            return this.compositeBar.showActivity(viewletOrActionId, badge, clazz, priority);\n        }\n        return this.showGlobalActivity(viewletOrActionId, badge, clazz);\n    };\n    ActivitybarPart.prototype.showGlobalActivity = function (globalActivityId, badge, clazz) {\n        if (!badge) {\n            throw errors_1.illegalArgument('badge');\n        }\n        var action = this.globalActivityIdToActions[globalActivityId];\n        if (!action) {\n            throw errors_1.illegalArgument('globalActivityId');\n        }\n        action.setBadge(badge, clazz);\n        return lifecycle_1.toDisposable(function () { return action.setBadge(undefined); });\n    };\n    ActivitybarPart.prototype.createContentArea = function (parent) {\n        this.element = parent;\n        var content = document.createElement('div');\n        dom_1.addClass(content, 'content');\n        parent.appendChild(content);\n        // Top Actionbar with action items for each viewlet action\n        this.compositeBar.create(content);\n        // Top Actionbar with action items for each viewlet action\n        var globalActivities = document.createElement('div');\n        dom_1.addClass(globalActivities, 'global-activity');\n        content.appendChild(globalActivities);\n        this.createGlobalActivityActionBar(globalActivities);\n        return content;\n    };\n    ActivitybarPart.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n        // Part container\n        var container = this.getContainer();\n        var background = this.getColor(theme_1.ACTIVITY_BAR_BACKGROUND);\n        container.style.backgroundColor = background;\n        var borderColor = this.getColor(theme_1.ACTIVITY_BAR_BORDER) || this.getColor(colorRegistry_1.contrastBorder);\n        var isPositionLeft = this.layoutService.getSideBarPosition() === layoutService_1.Position.LEFT;\n        container.style.boxSizing = borderColor && isPositionLeft ? 'border-box' : null;\n        container.style.borderRightWidth = borderColor && isPositionLeft ? '1px' : null;\n        container.style.borderRightStyle = borderColor && isPositionLeft ? 'solid' : null;\n        container.style.borderRightColor = isPositionLeft ? borderColor : null;\n        container.style.borderLeftWidth = borderColor && !isPositionLeft ? '1px' : null;\n        container.style.borderLeftStyle = borderColor && !isPositionLeft ? 'solid' : null;\n        container.style.borderLeftColor = !isPositionLeft ? borderColor : null;\n    };\n    ActivitybarPart.prototype.getActivitybarItemColors = function (theme) {\n        return {\n            activeForegroundColor: theme.getColor(theme_1.ACTIVITY_BAR_FOREGROUND),\n            inactiveForegroundColor: theme.getColor(theme_1.ACTIVITY_BAR_INACTIVE_FOREGROUND),\n            badgeBackground: theme.getColor(theme_1.ACTIVITY_BAR_BADGE_BACKGROUND),\n            badgeForeground: theme.getColor(theme_1.ACTIVITY_BAR_BADGE_FOREGROUND),\n            dragAndDropBackground: theme.getColor(theme_1.ACTIVITY_BAR_DRAG_AND_DROP_BACKGROUND),\n            activeBackgroundColor: undefined, inactiveBackgroundColor: undefined, activeBorderBottomColor: undefined,\n        };\n    };\n    ActivitybarPart.prototype.createGlobalActivityActionBar = function (container) {\n        var _this = this;\n        var activityRegistry = platform_1.Registry.as(activity_1.GlobalActivityExtensions);\n        var descriptors = activityRegistry.getActivities();\n        var actions = descriptors\n            .map(function (d) { return _this.instantiationService.createInstance(d); })\n            .map(function (a) { return new activitybarActions_1.GlobalActivityAction(a); });\n        this.globalActionBar = this._register(new actionbar_1.ActionBar(container, {\n            actionItemProvider: function (a) { return _this.instantiationService.createInstance(activitybarActions_1.GlobalActivityActionItem, a, function (theme) { return _this.getActivitybarItemColors(theme); }); },\n            orientation: actionbar_1.ActionsOrientation.VERTICAL,\n            ariaLabel: nls.localize('globalActions', \"Global Actions\"),\n            animated: false\n        }));\n        actions.forEach(function (a) {\n            _this.globalActivityIdToActions[a.id] = a;\n            _this.globalActionBar.push(a);\n        });\n    };\n    ActivitybarPart.prototype.getCompositeActions = function (compositeId) {\n        var compositeActions = this.compositeActions[compositeId];\n        if (!compositeActions) {\n            var viewlet = this.viewletService.getViewlet(compositeId);\n            if (viewlet) {\n                compositeActions = {\n                    activityAction: this.instantiationService.createInstance(activitybarActions_1.ViewletActivityAction, viewlet),\n                    pinnedAction: new compositeBarActions_1.ToggleCompositePinnedAction(viewlet, this.compositeBar)\n                };\n            }\n            else {\n                var cachedComposite = this.cachedViewlets.filter(function (c) { return c.id === compositeId; })[0];\n                compositeActions = {\n                    activityAction: this.instantiationService.createInstance(activitybarActions_1.PlaceHolderViewletActivityAction, compositeId, cachedComposite && cachedComposite.iconUrl ? uri_1.URI.revive(cachedComposite.iconUrl) : undefined),\n                    pinnedAction: new activitybarActions_1.PlaceHolderToggleCompositePinnedAction(compositeId, this.compositeBar)\n                };\n            }\n            this.compositeActions[compositeId] = compositeActions;\n        }\n        return compositeActions;\n    };\n    ActivitybarPart.prototype.onDidRegisterViewlets = function (viewlets) {\n        var _this = this;\n        var _loop_1 = function (viewlet) {\n            var cachedViewlet = this_1.cachedViewlets.filter(function (_a) {\n                var id = _a.id;\n                return id === viewlet.id;\n            })[0];\n            var activeViewlet = this_1.viewletService.getActiveViewlet();\n            var isActive = activeViewlet && activeViewlet.getId() === viewlet.id;\n            if (isActive || !this_1.shouldBeHidden(viewlet.id, cachedViewlet)) {\n                this_1.compositeBar.addComposite(viewlet);\n                // Pin it by default if it is new\n                if (!cachedViewlet) {\n                    this_1.compositeBar.pin(viewlet.id);\n                }\n                if (isActive) {\n                    this_1.compositeBar.activateComposite(viewlet.id);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, viewlets_1 = viewlets; _i < viewlets_1.length; _i++) {\n            var viewlet = viewlets_1[_i];\n            _loop_1(viewlet);\n        }\n        var _loop_2 = function (viewlet) {\n            this_2.enableCompositeActions(viewlet);\n            var viewContainer = this_2.getViewContainer(viewlet.id);\n            if (viewContainer && viewContainer.hideIfEmpty) {\n                var viewDescriptors_1 = this_2.viewsService.getViewDescriptors(viewContainer);\n                if (viewDescriptors_1) {\n                    this_2.onDidChangeActiveViews(viewlet, viewDescriptors_1);\n                    this_2.viewletDisposables.set(viewlet.id, viewDescriptors_1.onDidChangeActiveViews(function () { return _this.onDidChangeActiveViews(viewlet, viewDescriptors_1); }));\n                }\n            }\n        };\n        var this_2 = this;\n        for (var _a = 0, viewlets_2 = viewlets; _a < viewlets_2.length; _a++) {\n            var viewlet = viewlets_2[_a];\n            _loop_2(viewlet);\n        }\n    };\n    ActivitybarPart.prototype.onDidDeregisterViewlet = function (viewletId) {\n        var disposable = this.viewletDisposables.get(viewletId);\n        if (disposable) {\n            disposable.dispose();\n        }\n        this.viewletDisposables.delete(viewletId);\n        this.removeComposite(viewletId, true);\n    };\n    ActivitybarPart.prototype.onDidChangeActiveViews = function (viewlet, viewDescriptors) {\n        if (viewDescriptors.activeViewDescriptors.length) {\n            this.compositeBar.addComposite(viewlet);\n        }\n        else {\n            this.removeComposite(viewlet.id, true);\n        }\n    };\n    ActivitybarPart.prototype.shouldBeHidden = function (viewletId, cachedViewlet) {\n        var _this = this;\n        var viewContainer = this.getViewContainer(viewletId);\n        if (!viewContainer || !viewContainer.hideIfEmpty) {\n            return false;\n        }\n        return cachedViewlet && cachedViewlet.views && cachedViewlet.views.length\n            ? cachedViewlet.views.every(function (_a) {\n                var when = _a.when;\n                return !!when && !_this.contextKeyService.contextMatchesRules(contextkey_1.ContextKeyExpr.deserialize(when));\n            })\n            : viewletId === views_1.TEST_VIEW_CONTAINER_ID /* Hide Test viewlet for the first time or it had no views registered before */;\n    };\n    ActivitybarPart.prototype.removeNotExistingComposites = function () {\n        var viewlets = this.viewletService.getViewlets();\n        var _loop_3 = function (id) {\n            if (viewlets.every(function (viewlet) { return viewlet.id !== id; })) {\n                this_3.removeComposite(id, false);\n            }\n        };\n        var this_3 = this;\n        for (var _i = 0, _a = this.cachedViewlets; _i < _a.length; _i++) {\n            var id = _a[_i].id;\n            _loop_3(id);\n        }\n    };\n    ActivitybarPart.prototype.removeComposite = function (compositeId, hide) {\n        if (hide) {\n            this.compositeBar.hideComposite(compositeId);\n        }\n        else {\n            this.compositeBar.removeComposite(compositeId);\n        }\n        var compositeActions = this.compositeActions[compositeId];\n        if (compositeActions) {\n            compositeActions.activityAction.dispose();\n            compositeActions.pinnedAction.dispose();\n            delete this.compositeActions[compositeId];\n        }\n    };\n    ActivitybarPart.prototype.enableCompositeActions = function (viewlet) {\n        var _a = this.getCompositeActions(viewlet.id), activityAction = _a.activityAction, pinnedAction = _a.pinnedAction;\n        if (activityAction instanceof activitybarActions_1.PlaceHolderViewletActivityAction) {\n            activityAction.setActivity(viewlet);\n        }\n        if (pinnedAction instanceof activitybarActions_1.PlaceHolderToggleCompositePinnedAction) {\n            pinnedAction.setActivity(viewlet);\n        }\n    };\n    ActivitybarPart.prototype.getPinnedViewletIds = function () {\n        var _this = this;\n        var pinnedCompositeIds = this.compositeBar.getPinnedComposites().map(function (v) { return v.id; });\n        return this.viewletService.getViewlets()\n            .filter(function (v) { return _this.compositeBar.isPinned(v.id); })\n            .sort(function (v1, v2) { return pinnedCompositeIds.indexOf(v1.id) - pinnedCompositeIds.indexOf(v2.id); })\n            .map(function (v) { return v.id; });\n    };\n    ActivitybarPart.prototype.layout = function (width, height) {\n        if (!this.layoutService.isVisible(layoutService_1.Parts.ACTIVITYBAR_PART)) {\n            return;\n        }\n        // Layout contents\n        var contentAreaSize = _super.prototype.layoutContents.call(this, width, height).contentSize;\n        // Layout composite bar\n        var availableHeight = contentAreaSize.height;\n        if (this.globalActionBar) {\n            availableHeight -= (this.globalActionBar.items.length * ActivitybarPart.ACTION_HEIGHT); // adjust height for global actions showing\n        }\n        this.compositeBar.layout(new dom_1.Dimension(width, availableHeight));\n    };\n    ActivitybarPart.prototype.onDidStorageChange = function (e) {\n        if (e.key === ActivitybarPart.PINNED_VIEWLETS && e.scope === storage_1.StorageScope.GLOBAL\n            && this.cachedViewletsValue !== this.getStoredCachedViewletsValue() /* This checks if current window changed the value or not */) {\n            this._cachedViewletsValue = null;\n            var newCompositeItems = [];\n            var compositeItems_1 = this.compositeBar.getCompositeBarItems();\n            var cachedViewlets = this.getCachedViewlets();\n            var _loop_4 = function (cachedViewlet) {\n                // Add and update existing items\n                var existingItem = compositeItems_1.filter(function (_a) {\n                    var id = _a.id;\n                    return id === cachedViewlet.id;\n                })[0];\n                if (existingItem) {\n                    newCompositeItems.push({\n                        id: existingItem.id,\n                        name: existingItem.name,\n                        order: existingItem.order,\n                        pinned: cachedViewlet.pinned,\n                        visible: existingItem.visible\n                    });\n                }\n            };\n            for (var _i = 0, cachedViewlets_1 = cachedViewlets; _i < cachedViewlets_1.length; _i++) {\n                var cachedViewlet = cachedViewlets_1[_i];\n                _loop_4(cachedViewlet);\n            }\n            var _loop_5 = function (index) {\n                // Add items currently exists but does not exist in new.\n                if (!newCompositeItems.some(function (_a) {\n                    var id = _a.id;\n                    return id === compositeItems_1[index].id;\n                })) {\n                    newCompositeItems.splice(index, 0, compositeItems_1[index]);\n                }\n            };\n            for (var index = 0; index < compositeItems_1.length; index++) {\n                _loop_5(index);\n            }\n            this.compositeBar.setCompositeBarItems(newCompositeItems);\n        }\n    };\n    ActivitybarPart.prototype.saveCachedViewlets = function () {\n        var state = [];\n        var allViewlets = this.viewletService.getViewlets();\n        var compositeItems = this.compositeBar.getCompositeBarItems();\n        var _loop_6 = function (compositeItem) {\n            var viewContainer = this_4.getViewContainer(compositeItem.id);\n            var viewlet = allViewlets.filter(function (_a) {\n                var id = _a.id;\n                return id === compositeItem.id;\n            })[0];\n            if (viewlet) {\n                var views = [];\n                if (viewContainer) {\n                    var viewDescriptors = this_4.viewsService.getViewDescriptors(viewContainer);\n                    if (viewDescriptors) {\n                        for (var _i = 0, _a = viewDescriptors.allViewDescriptors; _i < _a.length; _i++) {\n                            var when = _a[_i].when;\n                            views.push({ when: when ? when.serialize() : undefined });\n                        }\n                    }\n                }\n                state.push({ id: compositeItem.id, iconUrl: viewlet.iconUrl && viewlet.iconUrl.scheme === network_1.Schemas.file ? viewlet.iconUrl : undefined, views: views, pinned: compositeItem && compositeItem.pinned, order: compositeItem ? compositeItem.order : undefined, visible: compositeItem && compositeItem.visible });\n            }\n        };\n        var this_4 = this;\n        for (var _i = 0, compositeItems_2 = compositeItems; _i < compositeItems_2.length; _i++) {\n            var compositeItem = compositeItems_2[_i];\n            _loop_6(compositeItem);\n        }\n        this.cachedViewletsValue = JSON.stringify(state);\n    };\n    ActivitybarPart.prototype.getCachedViewlets = function () {\n        var storedStates = JSON.parse(this.cachedViewletsValue);\n        var cachedViewlets = storedStates.map(function (c) {\n            var serialized = typeof c === 'string' /* migration from pinned states to composites states */ ? { id: c, pinned: true, order: undefined, visible: true, iconUrl: undefined, views: undefined } : c;\n            serialized.visible = types_1.isUndefinedOrNull(serialized.visible) ? true : serialized.visible;\n            return serialized;\n        });\n        var _loop_7 = function (old) {\n            var cachedViewlet = cachedViewlets.filter(function (cached) { return cached.id === old.id; })[0];\n            if (cachedViewlet) {\n                cachedViewlet.iconUrl = old.iconUrl;\n                cachedViewlet.views = old.views;\n            }\n        };\n        for (var _i = 0, _a = this.loadOldCachedViewlets(); _i < _a.length; _i++) {\n            var old = _a[_i];\n            _loop_7(old);\n        }\n        return cachedViewlets;\n    };\n    ActivitybarPart.prototype.loadOldCachedViewlets = function () {\n        var previousState = this.storageService.get('workbench.activity.placeholderViewlets', storage_1.StorageScope.GLOBAL, '[]');\n        var result = JSON.parse(previousState);\n        this.storageService.remove('workbench.activity.placeholderViewlets', storage_1.StorageScope.GLOBAL);\n        return result;\n    };\n    Object.defineProperty(ActivitybarPart.prototype, \"cachedViewletsValue\", {\n        get: function () {\n            if (!this._cachedViewletsValue) {\n                this._cachedViewletsValue = this.getStoredCachedViewletsValue();\n            }\n            return this._cachedViewletsValue;\n        },\n        set: function (cachedViewletsValue) {\n            if (this.cachedViewletsValue !== cachedViewletsValue) {\n                this._cachedViewletsValue = cachedViewletsValue;\n                this.setStoredCachedViewletsValue(cachedViewletsValue);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ActivitybarPart.prototype.getStoredCachedViewletsValue = function () {\n        return this.storageService.get(ActivitybarPart.PINNED_VIEWLETS, storage_1.StorageScope.GLOBAL, '[]');\n    };\n    ActivitybarPart.prototype.setStoredCachedViewletsValue = function (value) {\n        this.storageService.store(ActivitybarPart.PINNED_VIEWLETS, value, storage_1.StorageScope.GLOBAL);\n    };\n    ActivitybarPart.prototype.getViewContainer = function (viewletId) {\n        var viewContainerRegistry = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry);\n        return viewContainerRegistry.get(viewletId);\n    };\n    ActivitybarPart.prototype.toJSON = function () {\n        return {\n            type: layoutService_1.Parts.ACTIVITYBAR_PART\n        };\n    };\n    ActivitybarPart.ACTION_HEIGHT = 50;\n    ActivitybarPart.PINNED_VIEWLETS = 'workbench.activity.pinnedViewlets';\n    ActivitybarPart = tslib_1.__decorate([\n        tslib_1.__param(0, viewlet_1.IViewletService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, themeService_1.IThemeService),\n        tslib_1.__param(4, storage_1.IStorageService),\n        tslib_1.__param(5, extensions_1.IExtensionService),\n        tslib_1.__param(6, views_1.IViewsService),\n        tslib_1.__param(7, contextkey_1.IContextKeyService)\n    ], ActivitybarPart);\n    return ActivitybarPart;\n}(part_1.Part));\nexports.ActivitybarPart = ActivitybarPart;\nextensions_2.registerSingleton(activityBarService_1.IActivityBarService, ActivitybarPart);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/activitybar/activitybarPart.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/activitybarpart';\nimport * as nls from 'vs/nls';\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { ActionsOrientation, ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { GlobalActivityExtensions, IGlobalActivityRegistry } from 'vs/workbench/common/activity';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Part } from 'vs/workbench/browser/part';\nimport { GlobalActivityActionItem, GlobalActivityAction, ViewletActivityAction, ToggleViewletAction, PlaceHolderToggleCompositePinnedAction, PlaceHolderViewletActivityAction } from 'vs/workbench/browser/parts/activitybar/activitybarActions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IWorkbenchLayoutService, Parts, Position as SideBarPosition } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IInstantiationService, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable, toDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ToggleActivityBarVisibilityAction } from 'vs/workbench/browser/actions/layoutActions';\nimport { IThemeService, ITheme } from 'vs/platform/theme/common/themeService';\nimport { ACTIVITY_BAR_BACKGROUND, ACTIVITY_BAR_BORDER, ACTIVITY_BAR_FOREGROUND, ACTIVITY_BAR_BADGE_BACKGROUND, ACTIVITY_BAR_BADGE_FOREGROUND, ACTIVITY_BAR_DRAG_AND_DROP_BACKGROUND, ACTIVITY_BAR_INACTIVE_FOREGROUND } from 'vs/workbench/common/theme';\nimport { contrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { CompositeBar, ICompositeBarItem } from 'vs/workbench/browser/parts/compositeBar';\nimport { Dimension, addClass } from 'vs/base/browser/dom';\nimport { IStorageService, StorageScope, IWorkspaceStorageChangeEvent } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ToggleCompositePinnedAction, ICompositeBarColors } from 'vs/workbench/browser/parts/compositeBarActions';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { IViewsService, IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainer, TEST_VIEW_CONTAINER_ID, IViewDescriptorCollection } from 'vs/workbench/common/views';\nimport { IContextKeyService, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { IActivityBarService } from 'vs/workbench/services/activityBar/browser/activityBarService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Schemas } from 'vs/base/common/network';\n\ninterface ICachedViewlet {\n\tid: string;\n\ticonUrl?: UriComponents;\n\tpinned: boolean;\n\torder?: number;\n\tvisible: boolean;\n\tviews?: { when?: string }[];\n}\n\nexport class ActivitybarPart extends Part implements IActivityBarService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate static readonly ACTION_HEIGHT = 50;\n\tprivate static readonly PINNED_VIEWLETS = 'workbench.activity.pinnedViewlets';\n\n\t//#region IView\n\n\treadonly minimumWidth: number = 50;\n\treadonly maximumWidth: number = 50;\n\treadonly minimumHeight: number = 0;\n\treadonly maximumHeight: number = Number.POSITIVE_INFINITY;\n\n\t//#endregion\n\n\tprivate globalActionBar: ActionBar;\n\tprivate globalActivityIdToActions: { [globalActivityId: string]: GlobalActivityAction; } = Object.create(null);\n\n\tprivate cachedViewlets: ICachedViewlet[] = [];\n\tprivate compositeBar: CompositeBar;\n\tprivate compositeActions: { [compositeId: string]: { activityAction: ViewletActivityAction, pinnedAction: ToggleCompositePinnedAction } } = Object.create(null);\n\tprivate readonly viewletDisposables: Map<string, IDisposable> = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(Parts.ACTIVITYBAR_PART, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.cachedViewlets = this.getCachedViewlets();\n\t\tfor (const cachedViewlet of this.cachedViewlets) {\n\t\t\tif (this.shouldBeHidden(cachedViewlet.id, cachedViewlet)) {\n\t\t\t\tcachedViewlet.visible = false;\n\t\t\t}\n\t\t}\n\n\t\tthis.compositeBar = this._register(this.instantiationService.createInstance(CompositeBar, this.cachedViewlets.map(v => (<ICompositeBarItem>{ id: v.id, name: undefined, visible: v.visible, order: v.order, pinned: v.pinned })), {\n\t\t\ticon: true,\n\t\t\torientation: ActionsOrientation.VERTICAL,\n\t\t\topenComposite: (compositeId: string) => this.viewletService.openViewlet(compositeId, true),\n\t\t\tgetActivityAction: (compositeId: string) => this.getCompositeActions(compositeId).activityAction,\n\t\t\tgetCompositePinnedAction: (compositeId: string) => this.getCompositeActions(compositeId).pinnedAction,\n\t\t\tgetOnCompositeClickAction: (compositeId: string) => this.instantiationService.createInstance(ToggleViewletAction, this.viewletService.getViewlet(compositeId)),\n\t\t\tgetContextMenuActions: () => [this.instantiationService.createInstance(ToggleActivityBarVisibilityAction, ToggleActivityBarVisibilityAction.ID, nls.localize('hideActivitBar', \"Hide Activity Bar\"))],\n\t\t\tgetDefaultCompositeId: () => this.viewletService.getDefaultViewletId(),\n\t\t\thidePart: () => this.layoutService.setSideBarHidden(true),\n\t\t\tcompositeSize: 50,\n\t\t\tcolors: (theme: ITheme) => this.getActivitybarItemColors(theme),\n\t\t\toverflowActionSize: ActivitybarPart.ACTION_HEIGHT\n\t\t}));\n\n\t\tthis.registerListeners();\n\t\tthis.onDidRegisterViewlets(viewletService.getViewlets());\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Viewlet registration\n\t\tthis._register(this.viewletService.onDidViewletRegister(viewlet => this.onDidRegisterViewlets([viewlet])));\n\t\tthis._register(this.viewletService.onDidViewletDeregister(({ id }) => this.onDidDeregisterViewlet(id)));\n\n\t\t// Activate viewlet action on opening of a viewlet\n\t\tthis._register(this.viewletService.onDidViewletOpen(viewlet => this.onDidViewletOpen(viewlet)));\n\n\t\t// Deactivate viewlet action on close\n\t\tthis._register(this.viewletService.onDidViewletClose(viewlet => this.compositeBar.deactivateComposite(viewlet.getId())));\n\n\t\t// Extension registration\n\t\tlet disposables: IDisposable[] = [];\n\t\tthis._register(this.extensionService.onDidRegisterExtensions(() => {\n\t\t\tdisposables = dispose(disposables);\n\t\t\tthis.onDidRegisterExtensions();\n\t\t\tthis.compositeBar.onDidChange(() => this.saveCachedViewlets(), this, disposables);\n\t\t\tthis.storageService.onDidChangeStorage(e => this.onDidStorageChange(e), this, disposables);\n\t\t}));\n\n\t\tthis._register(toDisposable(() => dispose(disposables)));\n\t}\n\n\tprivate onDidRegisterExtensions(): void {\n\t\tthis.removeNotExistingComposites();\n\n\t\tthis.saveCachedViewlets();\n\t}\n\n\tprivate onDidViewletOpen(viewlet: IViewlet): void {\n\n\t\t// Update the composite bar by adding\n\t\tconst foundViewlet = this.viewletService.getViewlet(viewlet.getId());\n\t\tif (foundViewlet) {\n\t\t\tthis.compositeBar.addComposite(foundViewlet);\n\t\t}\n\t\tthis.compositeBar.activateComposite(viewlet.getId());\n\t\tconst viewletDescriptor = this.viewletService.getViewlet(viewlet.getId());\n\t\tif (viewletDescriptor) {\n\t\t\tconst viewContainer = this.getViewContainer(viewletDescriptor.id);\n\t\t\tif (viewContainer && viewContainer.hideIfEmpty) {\n\t\t\t\tconst viewDescriptors = this.viewsService.getViewDescriptors(viewContainer);\n\t\t\t\tif (viewDescriptors && viewDescriptors.activeViewDescriptors.length === 0) {\n\t\t\t\t\tthis.removeComposite(viewletDescriptor.id, true); // Update the composite bar by hiding\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tshowActivity(viewletOrActionId: string, badge: IBadge, clazz?: string, priority?: number): IDisposable {\n\t\tif (this.viewletService.getViewlet(viewletOrActionId)) {\n\t\t\treturn this.compositeBar.showActivity(viewletOrActionId, badge, clazz, priority);\n\t\t}\n\n\t\treturn this.showGlobalActivity(viewletOrActionId, badge, clazz);\n\t}\n\n\tprivate showGlobalActivity(globalActivityId: string, badge: IBadge, clazz?: string): IDisposable {\n\t\tif (!badge) {\n\t\t\tthrow illegalArgument('badge');\n\t\t}\n\n\t\tconst action = this.globalActivityIdToActions[globalActivityId];\n\t\tif (!action) {\n\t\t\tthrow illegalArgument('globalActivityId');\n\t\t}\n\n\t\taction.setBadge(badge, clazz);\n\n\t\treturn toDisposable(() => action.setBadge(undefined));\n\t}\n\n\tcreateContentArea(parent: HTMLElement): HTMLElement {\n\t\tthis.element = parent;\n\t\tconst content = document.createElement('div');\n\t\taddClass(content, 'content');\n\t\tparent.appendChild(content);\n\n\t\t// Top Actionbar with action items for each viewlet action\n\t\tthis.compositeBar.create(content);\n\n\t\t// Top Actionbar with action items for each viewlet action\n\t\tconst globalActivities = document.createElement('div');\n\t\taddClass(globalActivities, 'global-activity');\n\t\tcontent.appendChild(globalActivities);\n\n\t\tthis.createGlobalActivityActionBar(globalActivities);\n\n\t\treturn content;\n\t}\n\n\tupdateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\t// Part container\n\t\tconst container = this.getContainer();\n\t\tconst background = this.getColor(ACTIVITY_BAR_BACKGROUND);\n\t\tcontainer.style.backgroundColor = background;\n\n\t\tconst borderColor = this.getColor(ACTIVITY_BAR_BORDER) || this.getColor(contrastBorder);\n\t\tconst isPositionLeft = this.layoutService.getSideBarPosition() === SideBarPosition.LEFT;\n\t\tcontainer.style.boxSizing = borderColor && isPositionLeft ? 'border-box' : null;\n\t\tcontainer.style.borderRightWidth = borderColor && isPositionLeft ? '1px' : null;\n\t\tcontainer.style.borderRightStyle = borderColor && isPositionLeft ? 'solid' : null;\n\t\tcontainer.style.borderRightColor = isPositionLeft ? borderColor : null;\n\t\tcontainer.style.borderLeftWidth = borderColor && !isPositionLeft ? '1px' : null;\n\t\tcontainer.style.borderLeftStyle = borderColor && !isPositionLeft ? 'solid' : null;\n\t\tcontainer.style.borderLeftColor = !isPositionLeft ? borderColor : null;\n\t}\n\n\tprivate getActivitybarItemColors(theme: ITheme): ICompositeBarColors {\n\t\treturn <ICompositeBarColors>{\n\t\t\tactiveForegroundColor: theme.getColor(ACTIVITY_BAR_FOREGROUND),\n\t\t\tinactiveForegroundColor: theme.getColor(ACTIVITY_BAR_INACTIVE_FOREGROUND),\n\t\t\tbadgeBackground: theme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND),\n\t\t\tbadgeForeground: theme.getColor(ACTIVITY_BAR_BADGE_FOREGROUND),\n\t\t\tdragAndDropBackground: theme.getColor(ACTIVITY_BAR_DRAG_AND_DROP_BACKGROUND),\n\t\t\tactiveBackgroundColor: undefined, inactiveBackgroundColor: undefined, activeBorderBottomColor: undefined,\n\t\t};\n\t}\n\n\tprivate createGlobalActivityActionBar(container: HTMLElement): void {\n\t\tconst activityRegistry = Registry.as<IGlobalActivityRegistry>(GlobalActivityExtensions);\n\t\tconst descriptors = activityRegistry.getActivities();\n\t\tconst actions = descriptors\n\t\t\t.map(d => this.instantiationService.createInstance(d))\n\t\t\t.map(a => new GlobalActivityAction(a));\n\n\t\tthis.globalActionBar = this._register(new ActionBar(container, {\n\t\t\tactionItemProvider: a => this.instantiationService.createInstance(GlobalActivityActionItem, a, (theme: ITheme) => this.getActivitybarItemColors(theme)),\n\t\t\torientation: ActionsOrientation.VERTICAL,\n\t\t\tariaLabel: nls.localize('globalActions', \"Global Actions\"),\n\t\t\tanimated: false\n\t\t}));\n\n\t\tactions.forEach(a => {\n\t\t\tthis.globalActivityIdToActions[a.id] = a;\n\t\t\tthis.globalActionBar.push(a);\n\t\t});\n\t}\n\n\tprivate getCompositeActions(compositeId: string): { activityAction: ViewletActivityAction, pinnedAction: ToggleCompositePinnedAction } {\n\t\tlet compositeActions = this.compositeActions[compositeId];\n\t\tif (!compositeActions) {\n\t\t\tconst viewlet = this.viewletService.getViewlet(compositeId);\n\t\t\tif (viewlet) {\n\t\t\t\tcompositeActions = {\n\t\t\t\t\tactivityAction: this.instantiationService.createInstance(ViewletActivityAction, viewlet),\n\t\t\t\t\tpinnedAction: new ToggleCompositePinnedAction(viewlet, this.compositeBar)\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst cachedComposite = this.cachedViewlets.filter(c => c.id === compositeId)[0];\n\t\t\t\tcompositeActions = {\n\t\t\t\t\tactivityAction: this.instantiationService.createInstance(PlaceHolderViewletActivityAction, compositeId, cachedComposite && cachedComposite.iconUrl ? URI.revive(cachedComposite.iconUrl) : undefined),\n\t\t\t\t\tpinnedAction: new PlaceHolderToggleCompositePinnedAction(compositeId, this.compositeBar)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.compositeActions[compositeId] = compositeActions;\n\t\t}\n\n\t\treturn compositeActions;\n\t}\n\n\tprivate onDidRegisterViewlets(viewlets: ViewletDescriptor[]): void {\n\t\tfor (const viewlet of viewlets) {\n\t\t\tconst cachedViewlet = this.cachedViewlets.filter(({ id }) => id === viewlet.id)[0];\n\t\t\tconst activeViewlet = this.viewletService.getActiveViewlet();\n\t\t\tconst isActive = activeViewlet && activeViewlet.getId() === viewlet.id;\n\n\t\t\tif (isActive || !this.shouldBeHidden(viewlet.id, cachedViewlet)) {\n\t\t\t\tthis.compositeBar.addComposite(viewlet);\n\n\t\t\t\t// Pin it by default if it is new\n\t\t\t\tif (!cachedViewlet) {\n\t\t\t\t\tthis.compositeBar.pin(viewlet.id);\n\t\t\t\t}\n\n\t\t\t\tif (isActive) {\n\t\t\t\t\tthis.compositeBar.activateComposite(viewlet.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const viewlet of viewlets) {\n\t\t\tthis.enableCompositeActions(viewlet);\n\t\t\tconst viewContainer = this.getViewContainer(viewlet.id);\n\t\t\tif (viewContainer && viewContainer.hideIfEmpty) {\n\t\t\t\tconst viewDescriptors = this.viewsService.getViewDescriptors(viewContainer);\n\t\t\t\tif (viewDescriptors) {\n\t\t\t\t\tthis.onDidChangeActiveViews(viewlet, viewDescriptors);\n\t\t\t\t\tthis.viewletDisposables.set(viewlet.id, viewDescriptors.onDidChangeActiveViews(() => this.onDidChangeActiveViews(viewlet, viewDescriptors)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidDeregisterViewlet(viewletId: string): void {\n\t\tconst disposable = this.viewletDisposables.get(viewletId);\n\t\tif (disposable) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.viewletDisposables.delete(viewletId);\n\t\tthis.removeComposite(viewletId, true);\n\t}\n\n\tprivate onDidChangeActiveViews(viewlet: ViewletDescriptor, viewDescriptors: IViewDescriptorCollection): void {\n\t\tif (viewDescriptors.activeViewDescriptors.length) {\n\t\t\tthis.compositeBar.addComposite(viewlet);\n\t\t} else {\n\t\t\tthis.removeComposite(viewlet.id, true);\n\t\t}\n\t}\n\n\tprivate shouldBeHidden(viewletId: string, cachedViewlet: ICachedViewlet): boolean {\n\t\tconst viewContainer = this.getViewContainer(viewletId);\n\t\tif (!viewContainer || !viewContainer.hideIfEmpty) {\n\t\t\treturn false;\n\t\t}\n\t\treturn cachedViewlet && cachedViewlet.views && cachedViewlet.views.length\n\t\t\t? cachedViewlet.views.every(({ when }) => !!when && !this.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(when)))\n\t\t\t: viewletId === TEST_VIEW_CONTAINER_ID /* Hide Test viewlet for the first time or it had no views registered before */;\n\t}\n\n\tprivate removeNotExistingComposites(): void {\n\t\tconst viewlets = this.viewletService.getViewlets();\n\t\tfor (const { id } of this.cachedViewlets) {\n\t\t\tif (viewlets.every(viewlet => viewlet.id !== id)) {\n\t\t\t\tthis.removeComposite(id, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeComposite(compositeId: string, hide: boolean): void {\n\t\tif (hide) {\n\t\t\tthis.compositeBar.hideComposite(compositeId);\n\t\t} else {\n\t\t\tthis.compositeBar.removeComposite(compositeId);\n\t\t}\n\n\t\tconst compositeActions = this.compositeActions[compositeId];\n\t\tif (compositeActions) {\n\t\t\tcompositeActions.activityAction.dispose();\n\t\t\tcompositeActions.pinnedAction.dispose();\n\t\t\tdelete this.compositeActions[compositeId];\n\t\t}\n\t}\n\n\tprivate enableCompositeActions(viewlet: ViewletDescriptor): void {\n\t\tconst { activityAction, pinnedAction } = this.getCompositeActions(viewlet.id);\n\t\tif (activityAction instanceof PlaceHolderViewletActivityAction) {\n\t\t\tactivityAction.setActivity(viewlet);\n\t\t}\n\n\t\tif (pinnedAction instanceof PlaceHolderToggleCompositePinnedAction) {\n\t\t\tpinnedAction.setActivity(viewlet);\n\t\t}\n\t}\n\n\tgetPinnedViewletIds(): string[] {\n\t\tconst pinnedCompositeIds = this.compositeBar.getPinnedComposites().map(v => v.id);\n\n\t\treturn this.viewletService.getViewlets()\n\t\t\t.filter(v => this.compositeBar.isPinned(v.id))\n\t\t\t.sort((v1, v2) => pinnedCompositeIds.indexOf(v1.id) - pinnedCompositeIds.indexOf(v2.id))\n\t\t\t.map(v => v.id);\n\t}\n\n\tlayout(width: number, height: number): void {\n\t\tif (!this.layoutService.isVisible(Parts.ACTIVITYBAR_PART)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Layout contents\n\t\tconst contentAreaSize = super.layoutContents(width, height).contentSize;\n\n\t\t// Layout composite bar\n\t\tlet availableHeight = contentAreaSize.height;\n\t\tif (this.globalActionBar) {\n\t\t\tavailableHeight -= (this.globalActionBar.items.length * ActivitybarPart.ACTION_HEIGHT); // adjust height for global actions showing\n\t\t}\n\t\tthis.compositeBar.layout(new Dimension(width, availableHeight));\n\t}\n\n\tprivate onDidStorageChange(e: IWorkspaceStorageChangeEvent): void {\n\t\tif (e.key === ActivitybarPart.PINNED_VIEWLETS && e.scope === StorageScope.GLOBAL\n\t\t\t&& this.cachedViewletsValue !== this.getStoredCachedViewletsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._cachedViewletsValue = null;\n\t\t\tconst newCompositeItems: ICompositeBarItem[] = [];\n\t\t\tconst compositeItems = this.compositeBar.getCompositeBarItems();\n\t\t\tconst cachedViewlets = this.getCachedViewlets();\n\n\t\t\tfor (const cachedViewlet of cachedViewlets) {\n\t\t\t\t// Add and update existing items\n\t\t\t\tconst existingItem = compositeItems.filter(({ id }) => id === cachedViewlet.id)[0];\n\t\t\t\tif (existingItem) {\n\t\t\t\t\tnewCompositeItems.push({\n\t\t\t\t\t\tid: existingItem.id,\n\t\t\t\t\t\tname: existingItem.name,\n\t\t\t\t\t\torder: existingItem.order,\n\t\t\t\t\t\tpinned: cachedViewlet.pinned,\n\t\t\t\t\t\tvisible: existingItem.visible\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let index = 0; index < compositeItems.length; index++) {\n\t\t\t\t// Add items currently exists but does not exist in new.\n\t\t\t\tif (!newCompositeItems.some(({ id }) => id === compositeItems[index].id)) {\n\t\t\t\t\tnewCompositeItems.splice(index, 0, compositeItems[index]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.compositeBar.setCompositeBarItems(newCompositeItems);\n\t\t}\n\t}\n\n\tprivate saveCachedViewlets(): void {\n\t\tconst state: ICachedViewlet[] = [];\n\t\tconst allViewlets = this.viewletService.getViewlets();\n\n\t\tconst compositeItems = this.compositeBar.getCompositeBarItems();\n\t\tfor (const compositeItem of compositeItems) {\n\t\t\tconst viewContainer = this.getViewContainer(compositeItem.id);\n\t\t\tconst viewlet = allViewlets.filter(({ id }) => id === compositeItem.id)[0];\n\t\t\tif (viewlet) {\n\t\t\t\tconst views: { when: string | undefined }[] = [];\n\t\t\t\tif (viewContainer) {\n\t\t\t\t\tconst viewDescriptors = this.viewsService.getViewDescriptors(viewContainer);\n\t\t\t\t\tif (viewDescriptors) {\n\t\t\t\t\t\tfor (const { when } of viewDescriptors.allViewDescriptors) {\n\t\t\t\t\t\t\tviews.push({ when: when ? when.serialize() : undefined });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstate.push({ id: compositeItem.id, iconUrl: viewlet.iconUrl && viewlet.iconUrl.scheme === Schemas.file ? viewlet.iconUrl : undefined, views, pinned: compositeItem && compositeItem.pinned, order: compositeItem ? compositeItem.order : undefined, visible: compositeItem && compositeItem.visible });\n\t\t\t}\n\t\t}\n\n\t\tthis.cachedViewletsValue = JSON.stringify(state);\n\t}\n\n\tprivate getCachedViewlets(): ICachedViewlet[] {\n\t\tconst storedStates = <Array<string | ICachedViewlet>>JSON.parse(this.cachedViewletsValue);\n\t\tconst cachedViewlets = <ICachedViewlet[]>storedStates.map(c => {\n\t\t\tconst serialized: ICachedViewlet = typeof c === 'string' /* migration from pinned states to composites states */ ? <ICachedViewlet>{ id: c, pinned: true, order: undefined, visible: true, iconUrl: undefined, views: undefined } : c;\n\t\t\tserialized.visible = isUndefinedOrNull(serialized.visible) ? true : serialized.visible;\n\t\t\treturn serialized;\n\t\t});\n\n\t\tfor (const old of this.loadOldCachedViewlets()) {\n\t\t\tconst cachedViewlet = cachedViewlets.filter(cached => cached.id === old.id)[0];\n\t\t\tif (cachedViewlet) {\n\t\t\t\tcachedViewlet.iconUrl = old.iconUrl;\n\t\t\t\tcachedViewlet.views = old.views;\n\t\t\t}\n\t\t}\n\n\t\treturn cachedViewlets;\n\t}\n\n\tprivate loadOldCachedViewlets(): ICachedViewlet[] {\n\t\tconst previousState = this.storageService.get('workbench.activity.placeholderViewlets', StorageScope.GLOBAL, '[]');\n\t\tconst result = (<ICachedViewlet[]>JSON.parse(previousState));\n\t\tthis.storageService.remove('workbench.activity.placeholderViewlets', StorageScope.GLOBAL);\n\n\t\treturn result;\n\t}\n\n\tprivate _cachedViewletsValue: string | null;\n\tprivate get cachedViewletsValue(): string {\n\t\tif (!this._cachedViewletsValue) {\n\t\t\tthis._cachedViewletsValue = this.getStoredCachedViewletsValue();\n\t\t}\n\n\t\treturn this._cachedViewletsValue;\n\t}\n\n\tprivate set cachedViewletsValue(cachedViewletsValue: string) {\n\t\tif (this.cachedViewletsValue !== cachedViewletsValue) {\n\t\t\tthis._cachedViewletsValue = cachedViewletsValue;\n\t\t\tthis.setStoredCachedViewletsValue(cachedViewletsValue);\n\t\t}\n\t}\n\n\tprivate getStoredCachedViewletsValue(): string {\n\t\treturn this.storageService.get(ActivitybarPart.PINNED_VIEWLETS, StorageScope.GLOBAL, '[]');\n\t}\n\n\tprivate setStoredCachedViewletsValue(value: string): void {\n\t\tthis.storageService.store(ActivitybarPart.PINNED_VIEWLETS, value, StorageScope.GLOBAL);\n\t}\n\n\tprivate getViewContainer(viewletId: string): ViewContainer | undefined {\n\t\tconst viewContainerRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\treturn viewContainerRegistry.get(viewletId);\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.ACTIVITYBAR_PART\n\t\t};\n\t}\n}\n\nregisterSingleton(IActivityBarService, ActivitybarPart);"]}]}