{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/server/src/vscode/sharedProcess.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/vscode/sharedProcess.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst bootstrapFork_1 = require(\"./bootstrapFork\");\nconst ipc_1 = require(\"../ipc\");\nconst src_1 = require(\"@coder/events/src\");\nconst retry_1 = require(\"@coder/ide/src/retry\");\nconst logger_1 = require(\"@coder/logger\");\nvar SharedProcessState;\n(function (SharedProcessState) {\n    SharedProcessState[SharedProcessState[\"Stopped\"] = 0] = \"Stopped\";\n    SharedProcessState[SharedProcessState[\"Starting\"] = 1] = \"Starting\";\n    SharedProcessState[SharedProcessState[\"Ready\"] = 2] = \"Ready\";\n})(SharedProcessState = exports.SharedProcessState || (exports.SharedProcessState = {}));\nclass SharedProcess {\n    constructor(userDataDir, extensionsDir, builtInExtensionsDir) {\n        this.userDataDir = userDataDir;\n        this.extensionsDir = extensionsDir;\n        this.builtInExtensionsDir = builtInExtensionsDir;\n        this.socketPath = os.platform() === \"win32\"\n            ? path.join(\"\\\\\\\\?\\\\pipe\", os.tmpdir(), `.code-server${Math.random().toString()}`)\n            : path.join(os.tmpdir(), `.code-server${Math.random().toString()}`);\n        this._state = SharedProcessState.Stopped;\n        this.onStateEmitter = new src_1.Emitter();\n        this.onState = this.onStateEmitter.event;\n        this.logger = logger_1.logger.named(\"shared\");\n        this.retry = retry_1.retry.register(\"Shared process\", () => this.connect());\n        this.disposed = false;\n        this.retry.run();\n    }\n    get state() {\n        return this._state;\n    }\n    /**\n     * Signal the shared process to terminate.\n     */\n    dispose() {\n        this.disposed = true;\n        if (this.ipcHandler) {\n            this.ipcHandler.send(\"handshake:goodbye\");\n        }\n        this.ipcHandler = undefined;\n    }\n    /**\n     * Start and connect to the shared process.\n     */\n    async connect() {\n        this.setState({ state: SharedProcessState.Starting });\n        const activeProcess = await this.restart();\n        activeProcess.on(\"exit\", (exitCode) => {\n            const error = new Error(`Exited with ${exitCode}`);\n            this.setState({\n                error: error.message,\n                state: SharedProcessState.Stopped,\n            });\n            if (!this.disposed) {\n                this.retry.run(error);\n            }\n        });\n        this.setState({ state: SharedProcessState.Ready });\n    }\n    /**\n     * Restart the shared process. Kill existing process if running. Resolve when\n     * the shared process is ready and reject when it errors or dies before being\n     * ready.\n     */\n    async restart() {\n        if (this.activeProcess && !this.activeProcess.killed) {\n            this.activeProcess.kill();\n        }\n        const activeProcess = bootstrapFork_1.forkModule(\"vs/code/electron-browser/sharedProcess/sharedProcessMain\", [], {\n            env: {\n                VSCODE_ALLOW_IO: \"true\",\n                VSCODE_LOGS: process.env.VSCODE_LOGS,\n                DISABLE_TELEMETRY: process.env.DISABLE_TELEMETRY,\n            },\n        }, this.userDataDir);\n        this.activeProcess = activeProcess;\n        await new Promise((resolve, reject) => {\n            const doReject = (error) => {\n                if (error === null) {\n                    error = new Error(\"Exited unexpectedly\");\n                }\n                else if (typeof error === \"number\") {\n                    error = new Error(`Exited with ${error}`);\n                }\n                activeProcess.removeAllListeners();\n                this.setState({\n                    error: error.message,\n                    state: SharedProcessState.Stopped,\n                });\n                reject(error);\n            };\n            activeProcess.on(\"error\", doReject);\n            activeProcess.on(\"exit\", doReject);\n            activeProcess.stdout.on(\"data\", (data) => {\n                logger_1.logger.trace(\"stdout\", logger_1.field(\"data\", data.toString()));\n            });\n            activeProcess.stderr.on(\"data\", (data) => {\n                // Warn instead of error to prevent panic. It's unlikely stderr here is\n                // about anything critical to the functioning of the editor.\n                logger_1.logger.warn(\"stderr\", logger_1.field(\"data\", data.toString()));\n            });\n            this.ipcHandler = new ipc_1.StdioIpcHandler(activeProcess);\n            this.ipcHandler.once(\"handshake:hello\", () => {\n                const data = {\n                    args: {\n                        \"builtin-extensions-dir\": this.builtInExtensionsDir,\n                        \"user-data-dir\": this.userDataDir,\n                        \"extensions-dir\": this.extensionsDir,\n                    },\n                    logLevel: this.logger.level,\n                    sharedIPCHandle: this.socketPath,\n                };\n                this.ipcHandler.send(\"handshake:hey there\", \"\", data);\n            });\n            this.ipcHandler.once(\"handshake:im ready\", () => {\n                activeProcess.removeListener(\"error\", doReject);\n                activeProcess.removeListener(\"exit\", doReject);\n                resolve();\n            });\n        });\n        return activeProcess;\n    }\n    /**\n     * Set the internal shared process state and emit the state event.\n     */\n    setState(event) {\n        this._state = event.state;\n        this.onStateEmitter.emit(event);\n    }\n}\nexports.SharedProcess = SharedProcess;\n",{"version":3,"file":"/home/coding/workspace/packages/server/src/vscode/sharedProcess.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/server/src/vscode/sharedProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess } from \"child_process\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport { forkModule } from \"./bootstrapFork\";\nimport { StdioIpcHandler } from \"../ipc\";\nimport { ParsedArgs } from \"vs/platform/environment/common/environment\";\nimport { Emitter } from \"@coder/events/src\";\nimport { retry } from \"@coder/ide/src/retry\";\nimport { logger, field, Level } from \"@coder/logger\";\n\nexport enum SharedProcessState {\n\tStopped,\n\tStarting,\n\tReady,\n}\n\nexport type SharedProcessEvent = {\n\treadonly state: SharedProcessState.Ready | SharedProcessState.Starting;\n} | {\n\treadonly state: SharedProcessState.Stopped;\n\treadonly error: string;\n};\n\nexport class SharedProcess {\n\tpublic readonly socketPath: string = os.platform() === \"win32\"\n\t\t? path.join(\"\\\\\\\\?\\\\pipe\", os.tmpdir(), `.code-server${Math.random().toString()}`)\n\t\t: path.join(os.tmpdir(), `.code-server${Math.random().toString()}`);\n\tprivate _state: SharedProcessState = SharedProcessState.Stopped;\n\tprivate activeProcess: ChildProcess | undefined;\n\tprivate ipcHandler: StdioIpcHandler | undefined;\n\tprivate readonly onStateEmitter = new Emitter<SharedProcessEvent>();\n\tpublic readonly onState = this.onStateEmitter.event;\n\tprivate readonly logger = logger.named(\"shared\");\n\tprivate readonly retry = retry.register(\"Shared process\", () => this.connect());\n\tprivate disposed: boolean = false;\n\n\tpublic constructor(\n\t\tprivate readonly userDataDir: string,\n\t\tprivate readonly extensionsDir: string,\n\t\tprivate readonly builtInExtensionsDir: string,\n\t) {\n\t\tthis.retry.run();\n\t}\n\n\tpublic get state(): SharedProcessState {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Signal the shared process to terminate.\n\t */\n\tpublic dispose(): void {\n\t\tthis.disposed = true;\n\t\tif (this.ipcHandler) {\n\t\t\tthis.ipcHandler.send(\"handshake:goodbye\");\n\t\t}\n\t\tthis.ipcHandler = undefined;\n\t}\n\n\t/**\n\t * Start and connect to the shared process.\n\t */\n\tprivate async connect(): Promise<void> {\n\t\tthis.setState({ state: SharedProcessState.Starting });\n\t\tconst activeProcess = await this.restart();\n\n\t\tactiveProcess.on(\"exit\", (exitCode) => {\n\t\t\tconst error = new Error(`Exited with ${exitCode}`);\n\t\t\tthis.setState({\n\t\t\t\terror: error.message,\n\t\t\t\tstate: SharedProcessState.Stopped,\n\t\t\t});\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis.retry.run(error);\n\t\t\t}\n\t\t});\n\n\t\tthis.setState({ state: SharedProcessState.Ready });\n\t}\n\n\t/**\n\t * Restart the shared process. Kill existing process if running. Resolve when\n\t * the shared process is ready and reject when it errors or dies before being\n\t * ready.\n\t */\n\tprivate async restart(): Promise<ChildProcess> {\n\t\tif (this.activeProcess && !this.activeProcess.killed) {\n\t\t\tthis.activeProcess.kill();\n\t\t}\n\n\t\tconst activeProcess = forkModule(\"vs/code/electron-browser/sharedProcess/sharedProcessMain\", [], {\n\t\t\tenv: {\n\t\t\t\tVSCODE_ALLOW_IO: \"true\",\n\t\t\t\tVSCODE_LOGS: process.env.VSCODE_LOGS,\n\t\t\t\tDISABLE_TELEMETRY: process.env.DISABLE_TELEMETRY,\n\t\t\t},\n\t\t}, this.userDataDir);\n\t\tthis.activeProcess = activeProcess;\n\n\t\tawait new Promise((resolve, reject): void => {\n\t\t\tconst doReject = (error: Error | number | null): void => {\n\t\t\t\tif (error === null) {\n\t\t\t\t\terror = new Error(\"Exited unexpectedly\");\n\t\t\t\t} else if (typeof error === \"number\") {\n\t\t\t\t\terror = new Error(`Exited with ${error}`);\n\t\t\t\t}\n\t\t\t\tactiveProcess.removeAllListeners();\n\t\t\t\tthis.setState({\n\t\t\t\t\terror: error.message,\n\t\t\t\t\tstate: SharedProcessState.Stopped,\n\t\t\t\t});\n\t\t\t\treject(error);\n\t\t\t};\n\n\t\t\tactiveProcess.on(\"error\", doReject);\n\t\t\tactiveProcess.on(\"exit\", doReject);\n\n\t\t\tactiveProcess.stdout.on(\"data\", (data) => {\n\t\t\t\tlogger.trace(\"stdout\", field(\"data\", data.toString()));\n\t\t\t});\n\n\t\t\tactiveProcess.stderr.on(\"data\", (data) => {\n\t\t\t\t// Warn instead of error to prevent panic. It's unlikely stderr here is\n\t\t\t\t// about anything critical to the functioning of the editor.\n\t\t\t\tlogger.warn(\"stderr\", field(\"data\", data.toString()));\n\t\t\t});\n\n\t\t\tthis.ipcHandler = new StdioIpcHandler(activeProcess);\n\t\t\tthis.ipcHandler.once(\"handshake:hello\", () => {\n\t\t\t\tconst data: {\n\t\t\t\t\tsharedIPCHandle: string;\n\t\t\t\t\targs: Partial<ParsedArgs>;\n\t\t\t\t\tlogLevel: Level;\n\t\t\t\t} = {\n\t\t\t\t\targs: {\n\t\t\t\t\t\t\"builtin-extensions-dir\": this.builtInExtensionsDir,\n\t\t\t\t\t\t\"user-data-dir\": this.userDataDir,\n\t\t\t\t\t\t\"extensions-dir\": this.extensionsDir,\n\t\t\t\t\t},\n\t\t\t\t\tlogLevel: this.logger.level,\n\t\t\t\t\tsharedIPCHandle: this.socketPath,\n\t\t\t\t};\n\t\t\t\tthis.ipcHandler!.send(\"handshake:hey there\", \"\", data);\n\t\t\t});\n\t\t\tthis.ipcHandler.once(\"handshake:im ready\", () => {\n\t\t\t\tactiveProcess.removeListener(\"error\", doReject);\n\t\t\t\tactiveProcess.removeListener(\"exit\", doReject);\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\n\t\treturn activeProcess;\n\t}\n\n\t/**\n\t * Set the internal shared process state and emit the state event.\n\t */\n\tprivate setState(event: SharedProcessEvent): void {\n\t\tthis._state = event.state;\n\t\tthis.onStateEmitter.emit(event);\n\t}\n}\n"]}]}