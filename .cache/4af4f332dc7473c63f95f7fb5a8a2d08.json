{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nexports.IProgressService = instantiation_1.createDecorator('progressService');\nvar ProgressLocation;\n(function (ProgressLocation) {\n    ProgressLocation[ProgressLocation[\"Explorer\"] = 1] = \"Explorer\";\n    ProgressLocation[ProgressLocation[\"Scm\"] = 3] = \"Scm\";\n    ProgressLocation[ProgressLocation[\"Extensions\"] = 5] = \"Extensions\";\n    ProgressLocation[ProgressLocation[\"Window\"] = 10] = \"Window\";\n    ProgressLocation[ProgressLocation[\"Notification\"] = 15] = \"Notification\";\n})(ProgressLocation = exports.ProgressLocation || (exports.ProgressLocation = {}));\nexports.IProgressService2 = instantiation_1.createDecorator('progressService2');\nexports.emptyProgressRunner = Object.freeze({\n    total: function () { },\n    worked: function () { },\n    done: function () { }\n});\nexports.emptyProgress = Object.freeze({ report: function () { } });\nvar Progress = /** @class */ (function () {\n    function Progress(callback) {\n        this._callback = callback;\n    }\n    Object.defineProperty(Progress.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Progress.prototype.report = function (item) {\n        this._value = item;\n        this._callback(this._value);\n    };\n    return Progress;\n}());\nexports.Progress = Progress;\nvar LongRunningOperation = /** @class */ (function () {\n    function LongRunningOperation(progressService) {\n        this.progressService = progressService;\n        this.currentOperationId = 0;\n        this.currentOperationDisposables = [];\n    }\n    LongRunningOperation.prototype.start = function (progressDelay) {\n        var _this = this;\n        // Stop any previous operation\n        this.stop();\n        // Start new\n        var newOperationId = ++this.currentOperationId;\n        var newOperationToken = new cancellation_1.CancellationTokenSource();\n        this.currentProgressTimeout = setTimeout(function () {\n            if (newOperationId === _this.currentOperationId) {\n                _this.currentProgressRunner = _this.progressService.show(true);\n            }\n        }, progressDelay);\n        this.currentOperationDisposables.push(lifecycle_1.toDisposable(function () { return clearTimeout(_this.currentProgressTimeout); }), lifecycle_1.toDisposable(function () { return newOperationToken.cancel(); }), lifecycle_1.toDisposable(function () { return _this.currentProgressRunner ? _this.currentProgressRunner.done() : undefined; }));\n        return {\n            id: newOperationId,\n            token: newOperationToken.token,\n            stop: function () { return _this.doStop(newOperationId); },\n            isCurrent: function () { return _this.currentOperationId === newOperationId; }\n        };\n    };\n    LongRunningOperation.prototype.stop = function () {\n        this.doStop(this.currentOperationId);\n    };\n    LongRunningOperation.prototype.doStop = function (operationId) {\n        if (this.currentOperationId === operationId) {\n            this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);\n        }\n    };\n    LongRunningOperation.prototype.dispose = function () {\n        this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);\n    };\n    return LongRunningOperation;\n}());\nexports.LongRunningOperation = LongRunningOperation;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\nexport interface IProgressService {\n\t_serviceBrand: any;\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<any>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15\n}\n\nexport interface IProgressOptions {\n\tlocation: ProgressLocation | string;\n\ttitle?: string;\n\tsource?: string;\n\ttotal?: number;\n\tcancellable?: boolean;\n}\n\nexport interface IProgressStep {\n\tmessage?: string;\n\tincrement?: number;\n}\n\nexport const IProgressService2 = createDecorator<IProgressService2>('progressService2');\n\nexport interface IProgressService2 {\n\n\t_serviceBrand: any;\n\n\twithProgress<R=any>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: () => void): Promise<R>;\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner: IProgressRunner = Object.freeze({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport const emptyProgress: IProgress<any> = Object.freeze({ report() { } });\n\nexport class Progress<T> implements IProgress<T> {\n\n\tprivate _callback: (data: T) => void;\n\tprivate _value: T;\n\n\tconstructor(callback: (data: T) => void) {\n\t\tthis._callback = callback;\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis._callback(this._value);\n\t}\n}\n\n/**\n * A helper to show progress during a long running operation. If the operation\n * is started multiple times, only the last invocation will drive the progress.\n */\nexport interface IOperation {\n\tid: number;\n\tisCurrent: () => boolean;\n\ttoken: CancellationToken;\n\tstop(): void;\n}\n\nexport class LongRunningOperation {\n\tprivate currentOperationId = 0;\n\tprivate currentOperationDisposables: IDisposable[] = [];\n\tprivate currentProgressRunner: IProgressRunner;\n\tprivate currentProgressTimeout: any;\n\n\tconstructor(\n\t\tprivate progressService: IProgressService\n\t) { }\n\n\tstart(progressDelay: number): IOperation {\n\n\t\t// Stop any previous operation\n\t\tthis.stop();\n\n\t\t// Start new\n\t\tconst newOperationId = ++this.currentOperationId;\n\t\tconst newOperationToken = new CancellationTokenSource();\n\t\tthis.currentProgressTimeout = setTimeout(() => {\n\t\t\tif (newOperationId === this.currentOperationId) {\n\t\t\t\tthis.currentProgressRunner = this.progressService.show(true);\n\t\t\t}\n\t\t}, progressDelay);\n\n\t\tthis.currentOperationDisposables.push(\n\t\t\ttoDisposable(() => clearTimeout(this.currentProgressTimeout)),\n\t\t\ttoDisposable(() => newOperationToken.cancel()),\n\t\t\ttoDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined)\n\t\t);\n\n\t\treturn {\n\t\t\tid: newOperationId,\n\t\t\ttoken: newOperationToken.token,\n\t\t\tstop: () => this.doStop(newOperationId),\n\t\t\tisCurrent: () => this.currentOperationId === newOperationId\n\t\t};\n\t}\n\n\tstop(): void {\n\t\tthis.doStop(this.currentOperationId);\n\t}\n\n\tprivate doStop(operationId: number): void {\n\t\tif (this.currentOperationId === operationId) {\n\t\t\tthis.currentOperationDisposables = dispose(this.currentOperationDisposables);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.currentOperationDisposables = dispose(this.currentOperationDisposables);\n\t}\n}\n"]}]}