{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/common/walkThroughContentProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/common/walkThroughContentProvider.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/editor/common/services/resolverService\", \"vs/editor/common/services/modelService\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/editor/common/services/modeService\", \"vs/base/common/marked/marked\", \"vs/base/common/network\"], function (require, exports, uri_1, resolverService_1, modelService_1, textfiles_1, modeService_1, marked, network_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WalkThroughContentProvider = class WalkThroughContentProvider {\n        constructor(textModelResolverService, textFileService, modeService, modelService) {\n            this.textModelResolverService = textModelResolverService;\n            this.textFileService = textFileService;\n            this.modeService = modeService;\n            this.modelService = modelService;\n            this.textModelResolverService.registerTextModelContentProvider(network_1.Schemas.walkThrough, this);\n        }\n        provideTextContent(resource) {\n            const query = resource.query ? JSON.parse(resource.query) : {};\n            const content = (query.moduleId ? new Promise((resolve, reject) => {\n                /*\n                require([query.moduleId], content => {\n                    try {\n                        resolve(content.default());\n                    } catch (err) {\n                        reject(err);\n                    }\n                });\n                */\n                // This works because the only walkthrough that is a module is the welcome page.\n                // We have to explicitly import it or Webpack won't pick it up.\n                new Promise((resolve_1, reject_1) => { require([\"vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page\"], resolve_1, reject_1); }).then((content) => {\n                    resolve(content.default());\n                }).catch((err) => {\n                    reject(err);\n                });\n            }) : (resource.scheme !== \"file\"\n                ? fetch(resource.path).then((res) => res.text())\n                : this.textFileService.resolveTextContent(uri_1.URI.file(resource.fsPath)).then(content => content.value)));\n            return content.then(content => {\n                let codeEditorModel = this.modelService.getModel(resource);\n                if (!codeEditorModel) {\n                    codeEditorModel = this.modelService.createModel(content, this.modeService.createByFilepathOrFirstLine(resource.fsPath), resource);\n                }\n                else {\n                    this.modelService.updateModel(codeEditorModel, content);\n                }\n                return codeEditorModel;\n            });\n        }\n    };\n    WalkThroughContentProvider = __decorate([\n        __param(0, resolverService_1.ITextModelService),\n        __param(1, textfiles_1.ITextFileService),\n        __param(2, modeService_1.IModeService),\n        __param(3, modelService_1.IModelService)\n    ], WalkThroughContentProvider);\n    exports.WalkThroughContentProvider = WalkThroughContentProvider;\n    let WalkThroughSnippetContentProvider = class WalkThroughSnippetContentProvider {\n        constructor(textModelResolverService, textFileService, modeService, modelService) {\n            this.textModelResolverService = textModelResolverService;\n            this.textFileService = textFileService;\n            this.modeService = modeService;\n            this.modelService = modelService;\n            this.textModelResolverService.registerTextModelContentProvider(network_1.Schemas.walkThroughSnippet, this);\n        }\n        provideTextContent(resource) {\n            return fetch(resource.path).then((res) => res.text()).then((content) => {\n                let codeEditorModel = this.modelService.getModel(resource);\n                if (!codeEditorModel) {\n                    const j = parseInt(resource.fragment);\n                    let codeSnippet = '';\n                    let languageName = '';\n                    let i = 0;\n                    const renderer = new marked.Renderer();\n                    renderer.code = (code, lang) => {\n                        if (i++ === j) {\n                            codeSnippet = code;\n                            languageName = lang;\n                        }\n                        return '';\n                    };\n                    /*\n                    const textBuffer = content.value.create(DefaultEndOfLine.LF);\n                    const lineCount = textBuffer.getLineCount();\n                    const range = new Range(1, 1, lineCount, textBuffer.getLineLength(lineCount) + 1);\n                    const markdown = textBuffer.getValueInRange(range, EndOfLinePreference.TextDefined);\n                    */\n                    marked(content, { renderer });\n                    const languageId = this.modeService.getModeIdForLanguageName(languageName) || '';\n                    const languageSelection = this.modeService.create(languageId);\n                    codeEditorModel = this.modelService.createModel(codeSnippet, languageSelection, resource);\n                }\n                else {\n                    this.modelService.updateModel(codeEditorModel, content);\n                }\n                return codeEditorModel;\n            });\n        }\n    };\n    WalkThroughSnippetContentProvider = __decorate([\n        __param(0, resolverService_1.ITextModelService),\n        __param(1, textfiles_1.ITextFileService),\n        __param(2, modeService_1.IModeService),\n        __param(3, modelService_1.IModelService)\n    ], WalkThroughSnippetContentProvider);\n    exports.WalkThroughSnippetContentProvider = WalkThroughSnippetContentProvider;\n});\n",null]}