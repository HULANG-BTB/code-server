{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/problemCollectors.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/problemCollectors.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar event_1 = require(\"vs/base/common/event\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar ProblemCollectorEventKind;\n(function (ProblemCollectorEventKind) {\n    ProblemCollectorEventKind[\"BackgroundProcessingBegins\"] = \"backgroundProcessingBegins\";\n    ProblemCollectorEventKind[\"BackgroundProcessingEnds\"] = \"backgroundProcessingEnds\";\n})(ProblemCollectorEventKind = exports.ProblemCollectorEventKind || (exports.ProblemCollectorEventKind = {}));\nvar ProblemCollectorEvent;\n(function (ProblemCollectorEvent) {\n    function create(kind) {\n        return Object.freeze({ kind: kind });\n    }\n    ProblemCollectorEvent.create = create;\n})(ProblemCollectorEvent || (ProblemCollectorEvent = {}));\nvar AbstractProblemCollector = /** @class */ (function () {\n    function AbstractProblemCollector(problemMatchers, markerService, modelService) {\n        var _this = this;\n        this.markerService = markerService;\n        this.modelService = modelService;\n        this.matchers = Object.create(null);\n        this.bufferLength = 1;\n        problemMatchers.map(function (elem) { return problemMatcher_1.createLineMatcher(elem); }).forEach(function (matcher) {\n            var length = matcher.matchLength;\n            if (length > _this.bufferLength) {\n                _this.bufferLength = length;\n            }\n            var value = _this.matchers[length];\n            if (!value) {\n                value = [];\n                _this.matchers[length] = value;\n            }\n            value.push(matcher);\n        });\n        this.buffer = [];\n        this.activeMatcher = null;\n        this._numberOfMatches = 0;\n        this._maxMarkerSeverity = undefined;\n        this.openModels = Object.create(null);\n        this.modelListeners = [];\n        this.applyToByOwner = new Map();\n        for (var _i = 0, problemMatchers_1 = problemMatchers; _i < problemMatchers_1.length; _i++) {\n            var problemMatcher = problemMatchers_1[_i];\n            var current = this.applyToByOwner.get(problemMatcher.owner);\n            if (current === undefined) {\n                this.applyToByOwner.set(problemMatcher.owner, problemMatcher.applyTo);\n            }\n            else {\n                this.applyToByOwner.set(problemMatcher.owner, this.mergeApplyTo(current, problemMatcher.applyTo));\n            }\n        }\n        this.resourcesToClean = new Map();\n        this.markers = new Map();\n        this.deliveredMarkers = new Map();\n        this.modelService.onModelAdded(function (model) {\n            _this.openModels[model.uri.toString()] = true;\n        }, this, this.modelListeners);\n        this.modelService.onModelRemoved(function (model) {\n            delete _this.openModels[model.uri.toString()];\n        }, this, this.modelListeners);\n        this.modelService.getModels().forEach(function (model) { return _this.openModels[model.uri.toString()] = true; });\n        this._onDidStateChange = new event_1.Emitter();\n    }\n    Object.defineProperty(AbstractProblemCollector.prototype, \"onDidStateChange\", {\n        get: function () {\n            return this._onDidStateChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractProblemCollector.prototype.dispose = function () {\n        this.modelListeners.forEach(function (disposable) { return disposable.dispose(); });\n    };\n    Object.defineProperty(AbstractProblemCollector.prototype, \"numberOfMatches\", {\n        get: function () {\n            return this._numberOfMatches;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractProblemCollector.prototype, \"maxMarkerSeverity\", {\n        get: function () {\n            return this._maxMarkerSeverity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractProblemCollector.prototype.tryFindMarker = function (line) {\n        var result = null;\n        if (this.activeMatcher) {\n            result = this.activeMatcher.next(line);\n            if (result) {\n                this.captureMatch(result);\n                return result;\n            }\n            this.clearBuffer();\n            this.activeMatcher = null;\n        }\n        if (this.buffer.length < this.bufferLength) {\n            this.buffer.push(line);\n        }\n        else {\n            var end = this.buffer.length - 1;\n            for (var i = 0; i < end; i++) {\n                this.buffer[i] = this.buffer[i + 1];\n            }\n            this.buffer[end] = line;\n        }\n        result = this.tryMatchers();\n        if (result) {\n            this.clearBuffer();\n        }\n        return result;\n    };\n    AbstractProblemCollector.prototype.shouldApplyMatch = function (result) {\n        switch (result.description.applyTo) {\n            case problemMatcher_1.ApplyToKind.allDocuments:\n                return true;\n            case problemMatcher_1.ApplyToKind.openDocuments:\n                return !!this.openModels[result.resource.toString()];\n            case problemMatcher_1.ApplyToKind.closedDocuments:\n                return !this.openModels[result.resource.toString()];\n            default:\n                return true;\n        }\n    };\n    AbstractProblemCollector.prototype.mergeApplyTo = function (current, value) {\n        if (current === value || current === problemMatcher_1.ApplyToKind.allDocuments) {\n            return current;\n        }\n        return problemMatcher_1.ApplyToKind.allDocuments;\n    };\n    AbstractProblemCollector.prototype.tryMatchers = function () {\n        this.activeMatcher = null;\n        var length = this.buffer.length;\n        for (var startIndex = 0; startIndex < length; startIndex++) {\n            var candidates = this.matchers[length - startIndex];\n            if (!candidates) {\n                continue;\n            }\n            for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n                var matcher = candidates_1[_i];\n                var result = matcher.handle(this.buffer, startIndex);\n                if (result.match) {\n                    this.captureMatch(result.match);\n                    if (result.continue) {\n                        this.activeMatcher = matcher;\n                    }\n                    return result.match;\n                }\n            }\n        }\n        return null;\n    };\n    AbstractProblemCollector.prototype.captureMatch = function (match) {\n        this._numberOfMatches++;\n        if (this._maxMarkerSeverity === undefined || match.marker.severity > this._maxMarkerSeverity) {\n            this._maxMarkerSeverity = match.marker.severity;\n        }\n    };\n    AbstractProblemCollector.prototype.clearBuffer = function () {\n        if (this.buffer.length > 0) {\n            this.buffer = [];\n        }\n    };\n    AbstractProblemCollector.prototype.recordResourcesToClean = function (owner) {\n        var resourceSetToClean = this.getResourceSetToClean(owner);\n        this.markerService.read({ owner: owner }).forEach(function (marker) { return resourceSetToClean.set(marker.resource.toString(), marker.resource); });\n    };\n    AbstractProblemCollector.prototype.recordResourceToClean = function (owner, resource) {\n        this.getResourceSetToClean(owner).set(resource.toString(), resource);\n    };\n    AbstractProblemCollector.prototype.removeResourceToClean = function (owner, resource) {\n        var resourceSet = this.resourcesToClean.get(owner);\n        if (resourceSet) {\n            resourceSet.delete(resource);\n        }\n    };\n    AbstractProblemCollector.prototype.getResourceSetToClean = function (owner) {\n        var result = this.resourcesToClean.get(owner);\n        if (!result) {\n            result = new Map();\n            this.resourcesToClean.set(owner, result);\n        }\n        return result;\n    };\n    AbstractProblemCollector.prototype.cleanAllMarkers = function () {\n        var _this = this;\n        this.resourcesToClean.forEach(function (value, owner) {\n            _this._cleanMarkers(owner, value);\n        });\n        this.resourcesToClean = new Map();\n    };\n    AbstractProblemCollector.prototype.cleanMarkers = function (owner) {\n        var toClean = this.resourcesToClean.get(owner);\n        if (toClean) {\n            this._cleanMarkers(owner, toClean);\n            this.resourcesToClean.delete(owner);\n        }\n    };\n    AbstractProblemCollector.prototype._cleanMarkers = function (owner, toClean) {\n        var _this = this;\n        var uris = [];\n        var applyTo = this.applyToByOwner.get(owner);\n        toClean.forEach(function (uri, uriAsString) {\n            if (applyTo === problemMatcher_1.ApplyToKind.allDocuments ||\n                (applyTo === problemMatcher_1.ApplyToKind.openDocuments && _this.openModels[uriAsString]) ||\n                (applyTo === problemMatcher_1.ApplyToKind.closedDocuments && !_this.openModels[uriAsString])) {\n                uris.push(uri);\n            }\n        });\n        this.markerService.remove(owner, uris);\n    };\n    AbstractProblemCollector.prototype.recordMarker = function (marker, owner, resourceAsString) {\n        var markersPerOwner = this.markers.get(owner);\n        if (!markersPerOwner) {\n            markersPerOwner = new Map();\n            this.markers.set(owner, markersPerOwner);\n        }\n        var markersPerResource = markersPerOwner.get(resourceAsString);\n        if (!markersPerResource) {\n            markersPerResource = new Map();\n            markersPerOwner.set(resourceAsString, markersPerResource);\n        }\n        var key = markers_1.IMarkerData.makeKey(marker);\n        if (!markersPerResource.has(key)) {\n            markersPerResource.set(key, marker);\n        }\n    };\n    AbstractProblemCollector.prototype.reportMarkers = function () {\n        var _this = this;\n        this.markers.forEach(function (markersPerOwner, owner) {\n            var develieredMarkersPerOwner = _this.getDeliveredMarkersPerOwner(owner);\n            markersPerOwner.forEach(function (markers, resource) {\n                _this.deliverMarkersPerOwnerAndResourceResolved(owner, resource, markers, develieredMarkersPerOwner);\n            });\n        });\n    };\n    AbstractProblemCollector.prototype.deliverMarkersPerOwnerAndResource = function (owner, resource) {\n        var markersPerOwner = this.markers.get(owner);\n        if (!markersPerOwner) {\n            return;\n        }\n        var deliveredMarkersPerOwner = this.getDeliveredMarkersPerOwner(owner);\n        var markersPerResource = markersPerOwner.get(resource);\n        if (!markersPerResource) {\n            return;\n        }\n        this.deliverMarkersPerOwnerAndResourceResolved(owner, resource, markersPerResource, deliveredMarkersPerOwner);\n    };\n    AbstractProblemCollector.prototype.deliverMarkersPerOwnerAndResourceResolved = function (owner, resource, markers, reported) {\n        if (markers.size !== reported.get(resource)) {\n            var toSet_1 = [];\n            markers.forEach(function (value) { return toSet_1.push(value); });\n            this.markerService.changeOne(owner, uri_1.URI.parse(resource), toSet_1);\n            reported.set(resource, markers.size);\n        }\n    };\n    AbstractProblemCollector.prototype.getDeliveredMarkersPerOwner = function (owner) {\n        var result = this.deliveredMarkers.get(owner);\n        if (!result) {\n            result = new Map();\n            this.deliveredMarkers.set(owner, result);\n        }\n        return result;\n    };\n    AbstractProblemCollector.prototype.cleanMarkerCaches = function () {\n        this._numberOfMatches = 0;\n        this._maxMarkerSeverity = undefined;\n        this.markers.clear();\n        this.deliveredMarkers.clear();\n    };\n    AbstractProblemCollector.prototype.done = function () {\n        this.reportMarkers();\n        this.cleanAllMarkers();\n    };\n    return AbstractProblemCollector;\n}());\nexports.AbstractProblemCollector = AbstractProblemCollector;\nvar ProblemHandlingStrategy;\n(function (ProblemHandlingStrategy) {\n    ProblemHandlingStrategy[ProblemHandlingStrategy[\"Clean\"] = 0] = \"Clean\";\n})(ProblemHandlingStrategy = exports.ProblemHandlingStrategy || (exports.ProblemHandlingStrategy = {}));\nvar StartStopProblemCollector = /** @class */ (function (_super) {\n    tslib_1.__extends(StartStopProblemCollector, _super);\n    function StartStopProblemCollector(problemMatchers, markerService, modelService, _strategy) {\n        if (_strategy === void 0) { _strategy = ProblemHandlingStrategy.Clean; }\n        var _this = _super.call(this, problemMatchers, markerService, modelService) || this;\n        var ownerSet = Object.create(null);\n        problemMatchers.forEach(function (description) { return ownerSet[description.owner] = true; });\n        _this.owners = Object.keys(ownerSet);\n        _this.owners.forEach(function (owner) {\n            _this.recordResourcesToClean(owner);\n        });\n        return _this;\n    }\n    StartStopProblemCollector.prototype.processLine = function (line) {\n        var markerMatch = this.tryFindMarker(line);\n        if (!markerMatch) {\n            return;\n        }\n        var owner = markerMatch.description.owner;\n        var resource = markerMatch.resource;\n        var resourceAsString = resource.toString();\n        this.removeResourceToClean(owner, resourceAsString);\n        var shouldApplyMatch = this.shouldApplyMatch(markerMatch);\n        if (shouldApplyMatch) {\n            this.recordMarker(markerMatch.marker, owner, resourceAsString);\n            if (this.currentOwner !== owner || this.currentResource !== resourceAsString) {\n                if (this.currentOwner && this.currentResource) {\n                    this.deliverMarkersPerOwnerAndResource(this.currentOwner, this.currentResource);\n                }\n                this.currentOwner = owner;\n                this.currentResource = resourceAsString;\n            }\n        }\n    };\n    return StartStopProblemCollector;\n}(AbstractProblemCollector));\nexports.StartStopProblemCollector = StartStopProblemCollector;\nvar WatchingProblemCollector = /** @class */ (function (_super) {\n    tslib_1.__extends(WatchingProblemCollector, _super);\n    function WatchingProblemCollector(problemMatchers, markerService, modelService) {\n        var _this = _super.call(this, problemMatchers, markerService, modelService) || this;\n        _this.problemMatchers = problemMatchers;\n        _this.resetCurrentResource();\n        _this.backgroundPatterns = [];\n        _this._activeBackgroundMatchers = new Set();\n        _this.problemMatchers.forEach(function (matcher) {\n            if (matcher.watching) {\n                var key = uuid_1.generateUuid();\n                _this.backgroundPatterns.push({\n                    key: key,\n                    matcher: matcher,\n                    begin: matcher.watching.beginsPattern,\n                    end: matcher.watching.endsPattern\n                });\n            }\n        });\n        return _this;\n    }\n    WatchingProblemCollector.prototype.aboutToStart = function () {\n        for (var _i = 0, _a = this.backgroundPatterns; _i < _a.length; _i++) {\n            var background = _a[_i];\n            if (background.matcher.watching && background.matcher.watching.activeOnStart) {\n                this._activeBackgroundMatchers.add(background.key);\n                this._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingBegins));\n                this.recordResourcesToClean(background.matcher.owner);\n            }\n        }\n    };\n    WatchingProblemCollector.prototype.processLine = function (line) {\n        if (this.tryBegin(line) || this.tryFinish(line)) {\n            return;\n        }\n        var markerMatch = this.tryFindMarker(line);\n        if (!markerMatch) {\n            return;\n        }\n        var resource = markerMatch.resource;\n        var owner = markerMatch.description.owner;\n        var resourceAsString = resource.toString();\n        this.removeResourceToClean(owner, resourceAsString);\n        var shouldApplyMatch = this.shouldApplyMatch(markerMatch);\n        if (shouldApplyMatch) {\n            this.recordMarker(markerMatch.marker, owner, resourceAsString);\n            if (this.currentOwner !== owner || this.currentResource !== resourceAsString) {\n                this.reportMarkersForCurrentResource();\n                this.currentOwner = owner;\n                this.currentResource = resourceAsString;\n            }\n        }\n    };\n    WatchingProblemCollector.prototype.forceDelivery = function () {\n        this.reportMarkersForCurrentResource();\n    };\n    WatchingProblemCollector.prototype.tryBegin = function (line) {\n        var result = false;\n        for (var _i = 0, _a = this.backgroundPatterns; _i < _a.length; _i++) {\n            var background = _a[_i];\n            var matches = background.begin.regexp.exec(line);\n            if (matches) {\n                if (this._activeBackgroundMatchers.has(background.key)) {\n                    continue;\n                }\n                this._activeBackgroundMatchers.add(background.key);\n                result = true;\n                this._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingBegins));\n                this.cleanMarkerCaches();\n                this.resetCurrentResource();\n                var owner = background.matcher.owner;\n                var file = matches[background.begin.file];\n                if (file) {\n                    var resource = problemMatcher_1.getResource(file, background.matcher);\n                    this.recordResourceToClean(owner, resource);\n                }\n                else {\n                    this.recordResourcesToClean(owner);\n                }\n            }\n        }\n        return result;\n    };\n    WatchingProblemCollector.prototype.tryFinish = function (line) {\n        var result = false;\n        for (var _i = 0, _a = this.backgroundPatterns; _i < _a.length; _i++) {\n            var background = _a[_i];\n            var matches = background.end.regexp.exec(line);\n            if (matches) {\n                if (this._activeBackgroundMatchers.has(background.key)) {\n                    this._activeBackgroundMatchers.delete(background.key);\n                    this.resetCurrentResource();\n                    this._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingEnds));\n                    result = true;\n                    var owner = background.matcher.owner;\n                    this.cleanMarkers(owner);\n                    this.cleanMarkerCaches();\n                }\n            }\n        }\n        return result;\n    };\n    WatchingProblemCollector.prototype.resetCurrentResource = function () {\n        this.reportMarkersForCurrentResource();\n        this.currentOwner = null;\n        this.currentResource = null;\n    };\n    WatchingProblemCollector.prototype.reportMarkersForCurrentResource = function () {\n        if (this.currentOwner && this.currentResource) {\n            this.deliverMarkersPerOwnerAndResource(this.currentOwner, this.currentResource);\n        }\n    };\n    return WatchingProblemCollector;\n}(AbstractProblemCollector));\nexports.WatchingProblemCollector = WatchingProblemCollector;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/problemCollectors.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/problemCollectors.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,0CAAyC;AACzC,8CAAsD;AAKtD,mFAA4K;AAC5K,8DAAiG;AACjG,4CAAmD;AAEnD,IAAkB,yBAGjB;AAHD,WAAkB,yBAAyB;IAC1C,sFAAyD,CAAA;IACzD,kFAAqD,CAAA;AACtD,CAAC,EAHiB,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAG1C;AAMD,IAAU,qBAAqB,CAI9B;AAJD,WAAU,qBAAqB;IAC9B,SAAgB,MAAM,CAAC,IAA+B;QACrD,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAChC,CAAC;IAFe,4BAAM,SAErB,CAAA;AACF,CAAC,EAJS,qBAAqB,KAArB,qBAAqB,QAI9B;AAMD;IAsBC,kCAAY,eAAiC,EAAY,aAA6B,EAAU,YAA2B;QAA3H,iBA0CC;QA1CwD,kBAAa,GAAb,aAAa,CAAgB;QAAU,iBAAY,GAAZ,YAAY,CAAe;QAC1H,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,eAAe,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,kCAAiB,CAAC,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO;YACpE,IAAI,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC;YACjC,IAAI,MAAM,GAAG,KAAI,CAAC,YAAY,EAAE;gBAC/B,KAAI,CAAC,YAAY,GAAG,MAAM,CAAC;aAC3B;YACD,IAAI,KAAK,GAAG,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,EAAE;gBACX,KAAK,GAAG,EAAE,CAAC;gBACX,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;aAC9B;YACD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAuB,CAAC;QACrD,KAA2B,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe,EAAE;YAAvC,IAAI,cAAc,wBAAA;YACtB,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC5D,IAAI,OAAO,KAAK,SAAS,EAAE;gBAC1B,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;aACtE;iBAAM;gBACN,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;aAClG;SACD;QACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAA4B,CAAC;QAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAiD,CAAC;QACxE,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAA+B,CAAC;QAC/D,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAC,KAAK;YACpC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC;QAC9C,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,UAAC,KAAK;YACtC,OAAO,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC9C,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9B,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,EAA5C,CAA4C,CAAC,CAAC;QAE7F,IAAI,CAAC,iBAAiB,GAAG,IAAI,eAAO,EAAE,CAAC;IACxC,CAAC;IAED,sBAAW,sDAAgB;aAA3B;YACC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;QACrC,CAAC;;;OAAA;IAEM,0CAAO,GAAd;QACC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,EAApB,CAAoB,CAAC,CAAC;IACjE,CAAC;IAED,sBAAW,qDAAe;aAA1B;YACC,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAW,uDAAiB;aAA5B;YACC,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;;;OAAA;IAES,gDAAa,GAAvB,UAAwB,IAAY;QACnC,IAAI,MAAM,GAAwB,IAAI,CAAC;QACvC,IAAI,IAAI,CAAC,aAAa,EAAE;YACvB,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,MAAM,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAC1B,OAAO,MAAM,CAAC;aACd;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE;YAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;aAAM;YACN,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC7B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACpC;YACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACxB;QAED,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5B,IAAI,MAAM,EAAE;YACX,IAAI,CAAC,WAAW,EAAE,CAAC;SACnB;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAES,mDAAgB,GAA1B,UAA2B,MAAoB;QAC9C,QAAQ,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE;YACnC,KAAK,4BAAW,CAAC,YAAY;gBAC5B,OAAO,IAAI,CAAC;YACb,KAAK,4BAAW,CAAC,aAAa;gBAC7B,OAAO,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACtD,KAAK,4BAAW,CAAC,eAAe;gBAC/B,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrD;gBACC,OAAO,IAAI,CAAC;SACb;IACF,CAAC;IAEO,+CAAY,GAApB,UAAqB,OAAoB,EAAE,KAAkB;QAC5D,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,4BAAW,CAAC,YAAY,EAAE;YAC9D,OAAO,OAAO,CAAC;SACf;QACD,OAAO,4BAAW,CAAC,YAAY,CAAC;IACjC,CAAC;IAEO,8CAAW,GAAnB;QACC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QAChC,KAAK,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,GAAG,MAAM,EAAE,UAAU,EAAE,EAAE;YAC3D,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC;YACpD,IAAI,CAAC,UAAU,EAAE;gBAChB,SAAS;aACT;YACD,KAAsB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;gBAA7B,IAAM,OAAO,mBAAA;gBACjB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBACrD,IAAI,MAAM,CAAC,KAAK,EAAE;oBACjB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAChC,IAAI,MAAM,CAAC,QAAQ,EAAE;wBACpB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;qBAC7B;oBACD,OAAO,MAAM,CAAC,KAAK,CAAC;iBACpB;aACD;SACD;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAEO,+CAAY,GAApB,UAAqB,KAAmB;QACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,IAAI,CAAC,kBAAkB,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,kBAAkB,EAAE;YAC7F,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;SAChD;IACF,CAAC;IAEO,8CAAW,GAAnB;QACC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;SACjB;IACF,CAAC;IAES,yDAAsB,GAAhC,UAAiC,KAAa;QAC7C,IAAI,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAnE,CAAmE,CAAC,CAAC;IAClI,CAAC;IAES,wDAAqB,GAA/B,UAAgC,KAAa,EAAE,QAAa;QAC3D,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;IACtE,CAAC;IAES,wDAAqB,GAA/B,UAAgC,KAAa,EAAE,QAAgB;QAC9D,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,WAAW,EAAE;YAChB,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SAC7B;IACF,CAAC;IAEO,wDAAqB,GAA7B,UAA8B,KAAa;QAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,GAAG,IAAI,GAAG,EAAe,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SACzC;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAES,kDAAe,GAAzB;QAAA,iBAKC;QAJA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,KAAK;YAC1C,KAAI,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,EAA4B,CAAC;IAC7D,CAAC;IAES,+CAAY,GAAtB,UAAuB,KAAa;QACnC,IAAI,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,OAAO,EAAE;YACZ,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpC;IACF,CAAC;IAEO,gDAAa,GAArB,UAAsB,KAAa,EAAE,OAAyB;QAA9D,iBAaC;QAZA,IAAI,IAAI,GAAU,EAAE,CAAC;QACrB,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC7C,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,WAAW;YAChC,IACC,OAAO,KAAK,4BAAW,CAAC,YAAY;gBACpC,CAAC,OAAO,KAAK,4BAAW,CAAC,aAAa,IAAI,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;gBACvE,CAAC,OAAO,KAAK,4BAAW,CAAC,eAAe,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,EACzE;gBACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACf;QACF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAES,+CAAY,GAAtB,UAAuB,MAAmB,EAAE,KAAa,EAAE,gBAAwB;QAClF,IAAI,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,eAAe,EAAE;YACrB,eAAe,GAAG,IAAI,GAAG,EAAoC,CAAC;YAC9D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;SACzC;QACD,IAAI,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC/D,IAAI,CAAC,kBAAkB,EAAE;YACxB,kBAAkB,GAAG,IAAI,GAAG,EAAuB,CAAC;YACpD,eAAe,CAAC,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,CAAC;SAC1D;QACD,IAAI,GAAG,GAAG,qBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjC,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SACpC;IACF,CAAC;IAES,gDAAa,GAAvB;QAAA,iBAOC;QANA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,eAAe,EAAE,KAAK;YAC3C,IAAI,yBAAyB,GAAG,KAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;YACxE,eAAe,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,QAAQ;gBACzC,KAAI,CAAC,yCAAyC,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,yBAAyB,CAAC,CAAC;YACrG,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAES,oEAAiC,GAA3C,UAA4C,KAAa,EAAE,QAAgB;QAC1E,IAAI,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,eAAe,EAAE;YACrB,OAAO;SACP;QACD,IAAI,wBAAwB,GAAG,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QACvE,IAAI,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,CAAC,kBAAkB,EAAE;YACxB,OAAO;SACP;QACD,IAAI,CAAC,yCAAyC,CAAC,KAAK,EAAE,QAAQ,EAAE,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;IAC/G,CAAC;IAEO,4EAAyC,GAAjD,UAAkD,KAAa,EAAE,QAAgB,EAAE,OAAiC,EAAE,QAA6B;QAClJ,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC5C,IAAI,OAAK,GAAkB,EAAE,CAAC;YAC9B,OAAO,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,OAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAjB,CAAiB,CAAC,CAAC;YAC5C,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,OAAK,CAAC,CAAC;YAChE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;SACrC;IACF,CAAC;IAEO,8DAA2B,GAAnC,UAAoC,KAAa;QAChD,IAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,GAAG,IAAI,GAAG,EAAkB,CAAC;YACnC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SACzC;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAES,oDAAiB,GAA3B;QACC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IAEM,uCAAI,GAAX;QACC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,eAAe,EAAE,CAAC;IACxB,CAAC;IACF,+BAAC;AAAD,CAAC,AAhSD,IAgSC;AAhSY,4DAAwB;AAkSrC,IAAkB,uBAEjB;AAFD,WAAkB,uBAAuB;IACxC,uEAAK,CAAA;AACN,CAAC,EAFiB,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAExC;AAED;IAA+C,qDAAwB;IAMtE,mCAAY,eAAiC,EAAE,aAA6B,EAAE,YAA2B,EAAE,SAAkE;QAAlE,0BAAA,EAAA,YAAqC,uBAAuB,CAAC,KAAK;QAA7K,YACC,kBAAM,eAAe,EAAE,aAAa,EAAE,YAAY,CAAC,SAOnD;QANA,IAAI,QAAQ,GAAgC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChE,eAAe,CAAC,OAAO,CAAC,UAAA,WAAW,IAAI,OAAA,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,EAAlC,CAAkC,CAAC,CAAC;QAC3E,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;YACzB,KAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;;IACJ,CAAC;IAEM,+CAAW,GAAlB,UAAmB,IAAY;QAC9B,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO;SACP;QAED,IAAI,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC;QAC1C,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACpC,IAAI,gBAAgB,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QACpD,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAI,gBAAgB,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAC/D,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,IAAI,IAAI,CAAC,eAAe,KAAK,gBAAgB,EAAE;gBAC7E,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe,EAAE;oBAC9C,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;iBAChF;gBACD,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC;aACxC;SACD;IACF,CAAC;IACF,gCAAC;AAAD,CAAC,AAtCD,CAA+C,wBAAwB,GAsCtE;AAtCY,8DAAyB;AA+CtC;IAA8C,oDAAwB;IAYrE,kCAAY,eAAiC,EAAE,aAA6B,EAAE,YAA2B;QAAzG,YACC,kBAAM,eAAe,EAAE,aAAa,EAAE,YAAY,CAAC,SAgBnD;QAfA,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,KAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,KAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;QAC7B,KAAI,CAAC,yBAAyB,GAAG,IAAI,GAAG,EAAU,CAAC;QACnD,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,OAAO;YACnC,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACrB,IAAM,GAAG,GAAW,mBAAY,EAAE,CAAC;gBACnC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;oBAC5B,GAAG,KAAA;oBACH,OAAO,EAAE,OAAO;oBAChB,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,aAAa;oBACrC,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,WAAW;iBACjC,CAAC,CAAC;aACH;QACF,CAAC,CAAC,CAAC;;IACJ,CAAC;IAEM,+CAAY,GAAnB;QACC,KAAuB,UAAuB,EAAvB,KAAA,IAAI,CAAC,kBAAkB,EAAvB,cAAuB,EAAvB,IAAuB,EAAE;YAA3C,IAAI,UAAU,SAAA;YAClB,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE;gBAC7E,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACnD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBAChH,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACtD;SACD;IACF,CAAC;IAEM,8CAAW,GAAlB,UAAmB,IAAY;QAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAChD,OAAO;SACP;QACD,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO;SACP;QACD,IAAI,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACpC,IAAI,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC;QAC1C,IAAI,gBAAgB,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;QACpD,IAAI,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC1D,IAAI,gBAAgB,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,gBAAgB,CAAC,CAAC;YAC/D,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,IAAI,IAAI,CAAC,eAAe,KAAK,gBAAgB,EAAE;gBAC7E,IAAI,CAAC,+BAA+B,EAAE,CAAC;gBACvC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;gBAC1B,IAAI,CAAC,eAAe,GAAG,gBAAgB,CAAC;aACxC;SACD;IACF,CAAC;IAEM,gDAAa,GAApB;QACC,IAAI,CAAC,+BAA+B,EAAE,CAAC;IACxC,CAAC;IAEO,2CAAQ,GAAhB,UAAiB,IAAY;QAC5B,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAyB,UAAuB,EAAvB,KAAA,IAAI,CAAC,kBAAkB,EAAvB,cAAuB,EAAvB,IAAuB,EAAE;YAA7C,IAAM,UAAU,SAAA;YACpB,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,OAAO,EAAE;gBACZ,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACvD,SAAS;iBACT;gBACD,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACnD,MAAM,GAAG,IAAI,CAAC;gBACd,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,yBAAyB,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBAChH,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC5B,IAAI,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;gBACrC,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,IAAK,CAAC,CAAC;gBAC3C,IAAI,IAAI,EAAE;oBACT,IAAI,QAAQ,GAAG,4BAAW,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;oBACrD,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;iBAC5C;qBAAM;oBACN,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;iBACnC;aACD;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,4CAAS,GAAjB,UAAkB,IAAY;QAC7B,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAyB,UAAuB,EAAvB,KAAA,IAAI,CAAC,kBAAkB,EAAvB,cAAuB,EAAvB,IAAuB,EAAE;YAA7C,IAAM,UAAU,SAAA;YACpB,IAAI,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,OAAO,EAAE;gBACZ,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;oBACvD,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBACtD,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,yBAAyB,CAAC,wBAAwB,CAAC,CAAC,CAAC;oBAC9G,MAAM,GAAG,IAAI,CAAC;oBACd,IAAI,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;oBACrC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBACzB;aACD;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,uDAAoB,GAA5B;QACC,IAAI,CAAC,+BAA+B,EAAE,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEO,kEAA+B,GAAvC;QACC,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,eAAe,EAAE;YAC9C,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;SAChF;IACF,CAAC;IACF,+BAAC;AAAD,CAAC,AA5HD,CAA8C,wBAAwB,GA4HrE;AA5HY,4DAAwB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary, INumberDictionary } from 'vs/base/common/collections';\nimport { URI } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nimport { IModelService } from 'vs/editor/common/services/modelService';\n\nimport { ILineMatcher, createLineMatcher, ProblemMatcher, ProblemMatch, ApplyToKind, WatchingPattern, getResource } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { IMarkerService, IMarkerData, MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { generateUuid } from 'vs/base/common/uuid';\n\nexport const enum ProblemCollectorEventKind {\n\tBackgroundProcessingBegins = 'backgroundProcessingBegins',\n\tBackgroundProcessingEnds = 'backgroundProcessingEnds'\n}\n\nexport interface ProblemCollectorEvent {\n\tkind: ProblemCollectorEventKind;\n}\n\nnamespace ProblemCollectorEvent {\n\texport function create(kind: ProblemCollectorEventKind) {\n\t\treturn Object.freeze({ kind });\n\t}\n}\n\nexport interface IProblemMatcher {\n\tprocessLine(line: string): void;\n}\n\nexport class AbstractProblemCollector implements IDisposable {\n\n\tprivate matchers: INumberDictionary<ILineMatcher[]>;\n\tprivate activeMatcher: ILineMatcher | null;\n\tprivate _numberOfMatches: number;\n\tprivate _maxMarkerSeverity?: MarkerSeverity;\n\tprivate buffer: string[];\n\tprivate bufferLength: number;\n\tprivate openModels: IStringDictionary<boolean>;\n\tprivate modelListeners: IDisposable[];\n\n\t// [owner] -> AppyToKind\n\tprivate applyToByOwner: Map<string, ApplyToKind>;\n\t// [owner] -> [resource] -> URI\n\tprivate resourcesToClean: Map<string, Map<string, URI>>;\n\t// [owner] -> [resource] -> [markerkey] -> markerData\n\tprivate markers: Map<string, Map<string, Map<string, IMarkerData>>>;\n\t// [owner] -> [resource] -> number;\n\tprivate deliveredMarkers: Map<string, Map<string, number>>;\n\n\tprotected _onDidStateChange: Emitter<ProblemCollectorEvent>;\n\n\tconstructor(problemMatchers: ProblemMatcher[], protected markerService: IMarkerService, private modelService: IModelService) {\n\t\tthis.matchers = Object.create(null);\n\t\tthis.bufferLength = 1;\n\t\tproblemMatchers.map(elem => createLineMatcher(elem)).forEach((matcher) => {\n\t\t\tlet length = matcher.matchLength;\n\t\t\tif (length > this.bufferLength) {\n\t\t\t\tthis.bufferLength = length;\n\t\t\t}\n\t\t\tlet value = this.matchers[length];\n\t\t\tif (!value) {\n\t\t\t\tvalue = [];\n\t\t\t\tthis.matchers[length] = value;\n\t\t\t}\n\t\t\tvalue.push(matcher);\n\t\t});\n\t\tthis.buffer = [];\n\t\tthis.activeMatcher = null;\n\t\tthis._numberOfMatches = 0;\n\t\tthis._maxMarkerSeverity = undefined;\n\t\tthis.openModels = Object.create(null);\n\t\tthis.modelListeners = [];\n\t\tthis.applyToByOwner = new Map<string, ApplyToKind>();\n\t\tfor (let problemMatcher of problemMatchers) {\n\t\t\tlet current = this.applyToByOwner.get(problemMatcher.owner);\n\t\t\tif (current === undefined) {\n\t\t\t\tthis.applyToByOwner.set(problemMatcher.owner, problemMatcher.applyTo);\n\t\t\t} else {\n\t\t\t\tthis.applyToByOwner.set(problemMatcher.owner, this.mergeApplyTo(current, problemMatcher.applyTo));\n\t\t\t}\n\t\t}\n\t\tthis.resourcesToClean = new Map<string, Map<string, URI>>();\n\t\tthis.markers = new Map<string, Map<string, Map<string, IMarkerData>>>();\n\t\tthis.deliveredMarkers = new Map<string, Map<string, number>>();\n\t\tthis.modelService.onModelAdded((model) => {\n\t\t\tthis.openModels[model.uri.toString()] = true;\n\t\t}, this, this.modelListeners);\n\t\tthis.modelService.onModelRemoved((model) => {\n\t\t\tdelete this.openModels[model.uri.toString()];\n\t\t}, this, this.modelListeners);\n\t\tthis.modelService.getModels().forEach(model => this.openModels[model.uri.toString()] = true);\n\n\t\tthis._onDidStateChange = new Emitter();\n\t}\n\n\tpublic get onDidStateChange(): Event<ProblemCollectorEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic dispose() {\n\t\tthis.modelListeners.forEach(disposable => disposable.dispose());\n\t}\n\n\tpublic get numberOfMatches(): number {\n\t\treturn this._numberOfMatches;\n\t}\n\n\tpublic get maxMarkerSeverity(): MarkerSeverity | undefined {\n\t\treturn this._maxMarkerSeverity;\n\t}\n\n\tprotected tryFindMarker(line: string): ProblemMatch | null {\n\t\tlet result: ProblemMatch | null = null;\n\t\tif (this.activeMatcher) {\n\t\t\tresult = this.activeMatcher.next(line);\n\t\t\tif (result) {\n\t\t\t\tthis.captureMatch(result);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthis.clearBuffer();\n\t\t\tthis.activeMatcher = null;\n\t\t}\n\t\tif (this.buffer.length < this.bufferLength) {\n\t\t\tthis.buffer.push(line);\n\t\t} else {\n\t\t\tlet end = this.buffer.length - 1;\n\t\t\tfor (let i = 0; i < end; i++) {\n\t\t\t\tthis.buffer[i] = this.buffer[i + 1];\n\t\t\t}\n\t\t\tthis.buffer[end] = line;\n\t\t}\n\n\t\tresult = this.tryMatchers();\n\t\tif (result) {\n\t\t\tthis.clearBuffer();\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected shouldApplyMatch(result: ProblemMatch): boolean {\n\t\tswitch (result.description.applyTo) {\n\t\t\tcase ApplyToKind.allDocuments:\n\t\t\t\treturn true;\n\t\t\tcase ApplyToKind.openDocuments:\n\t\t\t\treturn !!this.openModels[result.resource.toString()];\n\t\t\tcase ApplyToKind.closedDocuments:\n\t\t\t\treturn !this.openModels[result.resource.toString()];\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate mergeApplyTo(current: ApplyToKind, value: ApplyToKind): ApplyToKind {\n\t\tif (current === value || current === ApplyToKind.allDocuments) {\n\t\t\treturn current;\n\t\t}\n\t\treturn ApplyToKind.allDocuments;\n\t}\n\n\tprivate tryMatchers(): ProblemMatch | null {\n\t\tthis.activeMatcher = null;\n\t\tlet length = this.buffer.length;\n\t\tfor (let startIndex = 0; startIndex < length; startIndex++) {\n\t\t\tlet candidates = this.matchers[length - startIndex];\n\t\t\tif (!candidates) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const matcher of candidates) {\n\t\t\t\tlet result = matcher.handle(this.buffer, startIndex);\n\t\t\t\tif (result.match) {\n\t\t\t\t\tthis.captureMatch(result.match);\n\t\t\t\t\tif (result.continue) {\n\t\t\t\t\t\tthis.activeMatcher = matcher;\n\t\t\t\t\t}\n\t\t\t\t\treturn result.match;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate captureMatch(match: ProblemMatch): void {\n\t\tthis._numberOfMatches++;\n\t\tif (this._maxMarkerSeverity === undefined || match.marker.severity > this._maxMarkerSeverity) {\n\t\t\tthis._maxMarkerSeverity = match.marker.severity;\n\t\t}\n\t}\n\n\tprivate clearBuffer(): void {\n\t\tif (this.buffer.length > 0) {\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n\n\tprotected recordResourcesToClean(owner: string): void {\n\t\tlet resourceSetToClean = this.getResourceSetToClean(owner);\n\t\tthis.markerService.read({ owner: owner }).forEach(marker => resourceSetToClean.set(marker.resource.toString(), marker.resource));\n\t}\n\n\tprotected recordResourceToClean(owner: string, resource: URI): void {\n\t\tthis.getResourceSetToClean(owner).set(resource.toString(), resource);\n\t}\n\n\tprotected removeResourceToClean(owner: string, resource: string): void {\n\t\tlet resourceSet = this.resourcesToClean.get(owner);\n\t\tif (resourceSet) {\n\t\t\tresourceSet.delete(resource);\n\t\t}\n\t}\n\n\tprivate getResourceSetToClean(owner: string): Map<string, URI> {\n\t\tlet result = this.resourcesToClean.get(owner);\n\t\tif (!result) {\n\t\t\tresult = new Map<string, URI>();\n\t\t\tthis.resourcesToClean.set(owner, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected cleanAllMarkers(): void {\n\t\tthis.resourcesToClean.forEach((value, owner) => {\n\t\t\tthis._cleanMarkers(owner, value);\n\t\t});\n\t\tthis.resourcesToClean = new Map<string, Map<string, URI>>();\n\t}\n\n\tprotected cleanMarkers(owner: string): void {\n\t\tlet toClean = this.resourcesToClean.get(owner);\n\t\tif (toClean) {\n\t\t\tthis._cleanMarkers(owner, toClean);\n\t\t\tthis.resourcesToClean.delete(owner);\n\t\t}\n\t}\n\n\tprivate _cleanMarkers(owner: string, toClean: Map<string, URI>): void {\n\t\tlet uris: URI[] = [];\n\t\tlet applyTo = this.applyToByOwner.get(owner);\n\t\ttoClean.forEach((uri, uriAsString) => {\n\t\t\tif (\n\t\t\t\tapplyTo === ApplyToKind.allDocuments ||\n\t\t\t\t(applyTo === ApplyToKind.openDocuments && this.openModels[uriAsString]) ||\n\t\t\t\t(applyTo === ApplyToKind.closedDocuments && !this.openModels[uriAsString])\n\t\t\t) {\n\t\t\t\turis.push(uri);\n\t\t\t}\n\t\t});\n\t\tthis.markerService.remove(owner, uris);\n\t}\n\n\tprotected recordMarker(marker: IMarkerData, owner: string, resourceAsString: string): void {\n\t\tlet markersPerOwner = this.markers.get(owner);\n\t\tif (!markersPerOwner) {\n\t\t\tmarkersPerOwner = new Map<string, Map<string, IMarkerData>>();\n\t\t\tthis.markers.set(owner, markersPerOwner);\n\t\t}\n\t\tlet markersPerResource = markersPerOwner.get(resourceAsString);\n\t\tif (!markersPerResource) {\n\t\t\tmarkersPerResource = new Map<string, IMarkerData>();\n\t\t\tmarkersPerOwner.set(resourceAsString, markersPerResource);\n\t\t}\n\t\tlet key = IMarkerData.makeKey(marker);\n\t\tif (!markersPerResource.has(key)) {\n\t\t\tmarkersPerResource.set(key, marker);\n\t\t}\n\t}\n\n\tprotected reportMarkers(): void {\n\t\tthis.markers.forEach((markersPerOwner, owner) => {\n\t\t\tlet develieredMarkersPerOwner = this.getDeliveredMarkersPerOwner(owner);\n\t\t\tmarkersPerOwner.forEach((markers, resource) => {\n\t\t\t\tthis.deliverMarkersPerOwnerAndResourceResolved(owner, resource, markers, develieredMarkersPerOwner);\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected deliverMarkersPerOwnerAndResource(owner: string, resource: string): void {\n\t\tlet markersPerOwner = this.markers.get(owner);\n\t\tif (!markersPerOwner) {\n\t\t\treturn;\n\t\t}\n\t\tlet deliveredMarkersPerOwner = this.getDeliveredMarkersPerOwner(owner);\n\t\tlet markersPerResource = markersPerOwner.get(resource);\n\t\tif (!markersPerResource) {\n\t\t\treturn;\n\t\t}\n\t\tthis.deliverMarkersPerOwnerAndResourceResolved(owner, resource, markersPerResource, deliveredMarkersPerOwner);\n\t}\n\n\tprivate deliverMarkersPerOwnerAndResourceResolved(owner: string, resource: string, markers: Map<string, IMarkerData>, reported: Map<string, number>): void {\n\t\tif (markers.size !== reported.get(resource)) {\n\t\t\tlet toSet: IMarkerData[] = [];\n\t\t\tmarkers.forEach(value => toSet.push(value));\n\t\t\tthis.markerService.changeOne(owner, URI.parse(resource), toSet);\n\t\t\treported.set(resource, markers.size);\n\t\t}\n\t}\n\n\tprivate getDeliveredMarkersPerOwner(owner: string): Map<string, number> {\n\t\tlet result = this.deliveredMarkers.get(owner);\n\t\tif (!result) {\n\t\t\tresult = new Map<string, number>();\n\t\t\tthis.deliveredMarkers.set(owner, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected cleanMarkerCaches(): void {\n\t\tthis._numberOfMatches = 0;\n\t\tthis._maxMarkerSeverity = undefined;\n\t\tthis.markers.clear();\n\t\tthis.deliveredMarkers.clear();\n\t}\n\n\tpublic done(): void {\n\t\tthis.reportMarkers();\n\t\tthis.cleanAllMarkers();\n\t}\n}\n\nexport const enum ProblemHandlingStrategy {\n\tClean\n}\n\nexport class StartStopProblemCollector extends AbstractProblemCollector implements IProblemMatcher {\n\tprivate owners: string[];\n\n\tprivate currentOwner: string;\n\tprivate currentResource: string;\n\n\tconstructor(problemMatchers: ProblemMatcher[], markerService: IMarkerService, modelService: IModelService, _strategy: ProblemHandlingStrategy = ProblemHandlingStrategy.Clean) {\n\t\tsuper(problemMatchers, markerService, modelService);\n\t\tlet ownerSet: { [key: string]: boolean; } = Object.create(null);\n\t\tproblemMatchers.forEach(description => ownerSet[description.owner] = true);\n\t\tthis.owners = Object.keys(ownerSet);\n\t\tthis.owners.forEach((owner) => {\n\t\t\tthis.recordResourcesToClean(owner);\n\t\t});\n\t}\n\n\tpublic processLine(line: string): void {\n\t\tlet markerMatch = this.tryFindMarker(line);\n\t\tif (!markerMatch) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet owner = markerMatch.description.owner;\n\t\tlet resource = markerMatch.resource;\n\t\tlet resourceAsString = resource.toString();\n\t\tthis.removeResourceToClean(owner, resourceAsString);\n\t\tlet shouldApplyMatch = this.shouldApplyMatch(markerMatch);\n\t\tif (shouldApplyMatch) {\n\t\t\tthis.recordMarker(markerMatch.marker, owner, resourceAsString);\n\t\t\tif (this.currentOwner !== owner || this.currentResource !== resourceAsString) {\n\t\t\t\tif (this.currentOwner && this.currentResource) {\n\t\t\t\t\tthis.deliverMarkersPerOwnerAndResource(this.currentOwner, this.currentResource);\n\t\t\t\t}\n\t\t\t\tthis.currentOwner = owner;\n\t\t\t\tthis.currentResource = resourceAsString;\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface BackgroundPatterns {\n\tkey: string;\n\tmatcher: ProblemMatcher;\n\tbegin: WatchingPattern;\n\tend: WatchingPattern;\n}\n\nexport class WatchingProblemCollector extends AbstractProblemCollector implements IProblemMatcher {\n\n\tprivate problemMatchers: ProblemMatcher[];\n\tprivate backgroundPatterns: BackgroundPatterns[];\n\n\t// workaround for https://github.com/Microsoft/vscode/issues/44018\n\tprivate _activeBackgroundMatchers: Set<string>;\n\n\t// Current State\n\tprivate currentOwner: string | null;\n\tprivate currentResource: string | null;\n\n\tconstructor(problemMatchers: ProblemMatcher[], markerService: IMarkerService, modelService: IModelService) {\n\t\tsuper(problemMatchers, markerService, modelService);\n\t\tthis.problemMatchers = problemMatchers;\n\t\tthis.resetCurrentResource();\n\t\tthis.backgroundPatterns = [];\n\t\tthis._activeBackgroundMatchers = new Set<string>();\n\t\tthis.problemMatchers.forEach(matcher => {\n\t\t\tif (matcher.watching) {\n\t\t\t\tconst key: string = generateUuid();\n\t\t\t\tthis.backgroundPatterns.push({\n\t\t\t\t\tkey,\n\t\t\t\t\tmatcher: matcher,\n\t\t\t\t\tbegin: matcher.watching.beginsPattern,\n\t\t\t\t\tend: matcher.watching.endsPattern\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic aboutToStart(): void {\n\t\tfor (let background of this.backgroundPatterns) {\n\t\t\tif (background.matcher.watching && background.matcher.watching.activeOnStart) {\n\t\t\t\tthis._activeBackgroundMatchers.add(background.key);\n\t\t\t\tthis._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingBegins));\n\t\t\t\tthis.recordResourcesToClean(background.matcher.owner);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic processLine(line: string): void {\n\t\tif (this.tryBegin(line) || this.tryFinish(line)) {\n\t\t\treturn;\n\t\t}\n\t\tlet markerMatch = this.tryFindMarker(line);\n\t\tif (!markerMatch) {\n\t\t\treturn;\n\t\t}\n\t\tlet resource = markerMatch.resource;\n\t\tlet owner = markerMatch.description.owner;\n\t\tlet resourceAsString = resource.toString();\n\t\tthis.removeResourceToClean(owner, resourceAsString);\n\t\tlet shouldApplyMatch = this.shouldApplyMatch(markerMatch);\n\t\tif (shouldApplyMatch) {\n\t\t\tthis.recordMarker(markerMatch.marker, owner, resourceAsString);\n\t\t\tif (this.currentOwner !== owner || this.currentResource !== resourceAsString) {\n\t\t\t\tthis.reportMarkersForCurrentResource();\n\t\t\t\tthis.currentOwner = owner;\n\t\t\t\tthis.currentResource = resourceAsString;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic forceDelivery(): void {\n\t\tthis.reportMarkersForCurrentResource();\n\t}\n\n\tprivate tryBegin(line: string): boolean {\n\t\tlet result = false;\n\t\tfor (const background of this.backgroundPatterns) {\n\t\t\tlet matches = background.begin.regexp.exec(line);\n\t\t\tif (matches) {\n\t\t\t\tif (this._activeBackgroundMatchers.has(background.key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._activeBackgroundMatchers.add(background.key);\n\t\t\t\tresult = true;\n\t\t\t\tthis._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingBegins));\n\t\t\t\tthis.cleanMarkerCaches();\n\t\t\t\tthis.resetCurrentResource();\n\t\t\t\tlet owner = background.matcher.owner;\n\t\t\t\tlet file = matches[background.begin.file!];\n\t\t\t\tif (file) {\n\t\t\t\t\tlet resource = getResource(file, background.matcher);\n\t\t\t\t\tthis.recordResourceToClean(owner, resource);\n\t\t\t\t} else {\n\t\t\t\t\tthis.recordResourcesToClean(owner);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate tryFinish(line: string): boolean {\n\t\tlet result = false;\n\t\tfor (const background of this.backgroundPatterns) {\n\t\t\tlet matches = background.end.regexp.exec(line);\n\t\t\tif (matches) {\n\t\t\t\tif (this._activeBackgroundMatchers.has(background.key)) {\n\t\t\t\t\tthis._activeBackgroundMatchers.delete(background.key);\n\t\t\t\t\tthis.resetCurrentResource();\n\t\t\t\t\tthis._onDidStateChange.fire(ProblemCollectorEvent.create(ProblemCollectorEventKind.BackgroundProcessingEnds));\n\t\t\t\t\tresult = true;\n\t\t\t\t\tlet owner = background.matcher.owner;\n\t\t\t\t\tthis.cleanMarkers(owner);\n\t\t\t\t\tthis.cleanMarkerCaches();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate resetCurrentResource(): void {\n\t\tthis.reportMarkersForCurrentResource();\n\t\tthis.currentOwner = null;\n\t\tthis.currentResource = null;\n\t}\n\n\tprivate reportMarkersForCurrentResource(): void {\n\t\tif (this.currentOwner && this.currentResource) {\n\t\t\tthis.deliverMarkersPerOwnerAndResource(this.currentOwner, this.currentResource);\n\t\t}\n\t}\n}"]}]}