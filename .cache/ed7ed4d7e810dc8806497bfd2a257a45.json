{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/electron-browser/lifecycleService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/electron-browser/lifecycleService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar electron_1 = require(\"electron\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycleService_1 = require(\"vs/platform/lifecycle/common/lifecycleService\");\nvar LifecycleService = /** @class */ (function (_super) {\n    tslib_1.__extends(LifecycleService, _super);\n    function LifecycleService(notificationService, windowService, storageService, logService) {\n        var _this = _super.call(this, logService) || this;\n        _this.notificationService = notificationService;\n        _this.windowService = windowService;\n        _this.storageService = storageService;\n        _this.logService = logService;\n        _this._startupKind = _this.resolveStartupKind();\n        _this.registerListeners();\n        return _this;\n    }\n    LifecycleService.prototype.resolveStartupKind = function () {\n        var lastShutdownReason = this.storageService.getNumber(LifecycleService.LAST_SHUTDOWN_REASON_KEY, storage_1.StorageScope.WORKSPACE);\n        this.storageService.remove(LifecycleService.LAST_SHUTDOWN_REASON_KEY, storage_1.StorageScope.WORKSPACE);\n        var startupKind;\n        if (lastShutdownReason === lifecycle_1.ShutdownReason.RELOAD) {\n            startupKind = lifecycle_1.StartupKind.ReloadedWindow;\n        }\n        else if (lastShutdownReason === lifecycle_1.ShutdownReason.LOAD) {\n            startupKind = lifecycle_1.StartupKind.ReopenedWindow;\n        }\n        else {\n            startupKind = lifecycle_1.StartupKind.NewWindow;\n        }\n        this.logService.trace(\"lifecycle: starting up (startup kind: \" + this._startupKind + \")\");\n        return startupKind;\n    };\n    LifecycleService.prototype.registerListeners = function () {\n        var _this = this;\n        var windowId = this.windowService.getCurrentWindowId();\n        // Main side indicates that window is about to unload, check for vetos\n        electron_1.ipcRenderer.on('vscode:onBeforeUnload', function (_event, reply) {\n            _this.logService.trace(\"lifecycle: onBeforeUnload (reason: \" + reply.reason + \")\");\n            // trigger onBeforeShutdown events and veto collecting\n            _this.handleBeforeShutdown(reply.reason).then(function (veto) {\n                if (veto) {\n                    _this.logService.trace('lifecycle: onBeforeUnload prevented via veto');\n                    electron_1.ipcRenderer.send(reply.cancelChannel, windowId);\n                }\n                else {\n                    _this.logService.trace('lifecycle: onBeforeUnload continues without veto');\n                    _this.shutdownReason = reply.reason;\n                    electron_1.ipcRenderer.send(reply.okChannel, windowId);\n                }\n            });\n        });\n        // Main side indicates that we will indeed shutdown\n        electron_1.ipcRenderer.on('vscode:onWillUnload', function (_event, reply) {\n            _this.logService.trace(\"lifecycle: onWillUnload (reason: \" + reply.reason + \")\");\n            // trigger onWillShutdown events and joining\n            return _this.handleWillShutdown(reply.reason).then(function () {\n                // trigger onShutdown event now that we know we will quit\n                _this._onShutdown.fire();\n                // acknowledge to main side\n                electron_1.ipcRenderer.send(reply.replyChannel, windowId);\n            });\n        });\n        // Save shutdown reason to retrieve on next startup\n        this.storageService.onWillSaveState(function () {\n            _this.storageService.store(LifecycleService.LAST_SHUTDOWN_REASON_KEY, _this.shutdownReason, storage_1.StorageScope.WORKSPACE);\n        });\n    };\n    LifecycleService.prototype.handleBeforeShutdown = function (reason) {\n        var _this = this;\n        var vetos = [];\n        this._onBeforeShutdown.fire({\n            veto: function (value) {\n                vetos.push(value);\n            },\n            reason: reason\n        });\n        return lifecycle_1.handleVetos(vetos, function (err) {\n            _this.notificationService.error(errorMessage_1.toErrorMessage(err));\n            errors_1.onUnexpectedError(err);\n        });\n    };\n    LifecycleService.prototype.handleWillShutdown = function (reason) {\n        var _this = this;\n        var joiners = [];\n        this._onWillShutdown.fire({\n            join: function (promise) {\n                if (promise) {\n                    joiners.push(promise);\n                }\n            },\n            reason: reason\n        });\n        return Promise.all(joiners).then(function () { return undefined; }, function (err) {\n            _this.notificationService.error(errorMessage_1.toErrorMessage(err));\n            errors_1.onUnexpectedError(err);\n        });\n    };\n    LifecycleService.LAST_SHUTDOWN_REASON_KEY = 'lifecyle.lastShutdownReason';\n    LifecycleService = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, windows_1.IWindowService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, log_1.ILogService)\n    ], LifecycleService);\n    return LifecycleService;\n}(lifecycleService_1.AbstractLifecycleService));\nexports.LifecycleService = LifecycleService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/electron-browser/lifecycleService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/electron-browser/lifecycleService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { ShutdownReason, StartupKind, handleVetos } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ipcRenderer as ipc } from 'electron';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { AbstractLifecycleService } from 'vs/platform/lifecycle/common/lifecycleService';\n\nexport class LifecycleService extends AbstractLifecycleService {\n\n\tprivate static readonly LAST_SHUTDOWN_REASON_KEY = 'lifecyle.lastShutdownReason';\n\n\t_serviceBrand: any;\n\n\tprivate shutdownReason: ShutdownReason;\n\n\tconstructor(\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IStorageService readonly storageService: IStorageService,\n\t\t@ILogService readonly logService: ILogService\n\t) {\n\t\tsuper(logService);\n\n\t\tthis._startupKind = this.resolveStartupKind();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate resolveStartupKind(): StartupKind {\n\t\tconst lastShutdownReason = this.storageService.getNumber(LifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(LifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\n\t\tlet startupKind: StartupKind;\n\t\tif (lastShutdownReason === ShutdownReason.RELOAD) {\n\t\t\tstartupKind = StartupKind.ReloadedWindow;\n\t\t} else if (lastShutdownReason === ShutdownReason.LOAD) {\n\t\t\tstartupKind = StartupKind.ReopenedWindow;\n\t\t} else {\n\t\t\tstartupKind = StartupKind.NewWindow;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: starting up (startup kind: ${this._startupKind})`);\n\n\t\treturn startupKind;\n\t}\n\n\tprivate registerListeners(): void {\n\t\tconst windowId = this.windowService.getCurrentWindowId();\n\n\t\t// Main side indicates that window is about to unload, check for vetos\n\t\tipc.on('vscode:onBeforeUnload', (_event: unknown, reply: { okChannel: string, cancelChannel: string, reason: ShutdownReason }) => {\n\t\t\tthis.logService.trace(`lifecycle: onBeforeUnload (reason: ${reply.reason})`);\n\n\t\t\t// trigger onBeforeShutdown events and veto collecting\n\t\t\tthis.handleBeforeShutdown(reply.reason).then(veto => {\n\t\t\t\tif (veto) {\n\t\t\t\t\tthis.logService.trace('lifecycle: onBeforeUnload prevented via veto');\n\n\t\t\t\t\tipc.send(reply.cancelChannel, windowId);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace('lifecycle: onBeforeUnload continues without veto');\n\n\t\t\t\t\tthis.shutdownReason = reply.reason;\n\t\t\t\t\tipc.send(reply.okChannel, windowId);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Main side indicates that we will indeed shutdown\n\t\tipc.on('vscode:onWillUnload', (_event: unknown, reply: { replyChannel: string, reason: ShutdownReason }) => {\n\t\t\tthis.logService.trace(`lifecycle: onWillUnload (reason: ${reply.reason})`);\n\n\t\t\t// trigger onWillShutdown events and joining\n\t\t\treturn this.handleWillShutdown(reply.reason).then(() => {\n\n\t\t\t\t// trigger onShutdown event now that we know we will quit\n\t\t\t\tthis._onShutdown.fire();\n\n\t\t\t\t// acknowledge to main side\n\t\t\t\tipc.send(reply.replyChannel, windowId);\n\t\t\t});\n\t\t});\n\n\t\t// Save shutdown reason to retrieve on next startup\n\t\tthis.storageService.onWillSaveState(() => {\n\t\t\tthis.storageService.store(LifecycleService.LAST_SHUTDOWN_REASON_KEY, this.shutdownReason, StorageScope.WORKSPACE);\n\t\t});\n\t}\n\n\tprivate handleBeforeShutdown(reason: ShutdownReason): Promise<boolean> {\n\t\tconst vetos: (boolean | Promise<boolean>)[] = [];\n\n\t\tthis._onBeforeShutdown.fire({\n\t\t\tveto(value) {\n\t\t\t\tvetos.push(value);\n\t\t\t},\n\t\t\treason\n\t\t});\n\n\t\treturn handleVetos(vetos, err => {\n\t\t\tthis.notificationService.error(toErrorMessage(err));\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n\n\tprivate handleWillShutdown(reason: ShutdownReason): Promise<void> {\n\t\tconst joiners: Promise<void>[] = [];\n\n\t\tthis._onWillShutdown.fire({\n\t\t\tjoin(promise) {\n\t\t\t\tif (promise) {\n\t\t\t\t\tjoiners.push(promise);\n\t\t\t\t}\n\t\t\t},\n\t\t\treason\n\t\t});\n\n\t\treturn Promise.all(joiners).then(() => undefined, err => {\n\t\t\tthis.notificationService.error(toErrorMessage(err));\n\t\t\tonUnexpectedError(err);\n\t\t});\n\t}\n}\n"]}]}