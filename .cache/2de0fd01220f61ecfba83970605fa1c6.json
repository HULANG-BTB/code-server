{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/remote/electron-browser/remoteAuthorityResolverService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/remote/electron-browser/remoteAuthorityResolverService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"electron\"], function (require, exports, electron_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class PendingResolveAuthorityRequest {\n        constructor(resolve, reject, promise) {\n            this.resolve = resolve;\n            this.reject = reject;\n            this.promise = promise;\n        }\n    }\n    class RemoteAuthorityResolverService {\n        constructor() {\n            this._resolveAuthorityRequests = Object.create(null);\n        }\n        resolveAuthority(authority) {\n            if (!this._resolveAuthorityRequests[authority]) {\n                let resolve;\n                let reject;\n                let promise = new Promise((_resolve, _reject) => {\n                    resolve = _resolve;\n                    reject = _reject;\n                });\n                this._resolveAuthorityRequests[authority] = new PendingResolveAuthorityRequest(resolve, reject, promise);\n            }\n            return this._resolveAuthorityRequests[authority].promise;\n        }\n        setResolvedAuthority(resolvedAuthority) {\n            if (this._resolveAuthorityRequests[resolvedAuthority.authority]) {\n                let request = this._resolveAuthorityRequests[resolvedAuthority.authority];\n                electron_1.ipcRenderer.send('vscode:remoteAuthorityResolved', resolvedAuthority);\n                request.resolve(resolvedAuthority);\n            }\n        }\n        setResolvedAuthorityError(authority, err) {\n            if (this._resolveAuthorityRequests[authority]) {\n                let request = this._resolveAuthorityRequests[authority];\n                request.reject(err);\n            }\n        }\n    }\n    exports.RemoteAuthorityResolverService = RemoteAuthorityResolverService;\n});\n",null]}