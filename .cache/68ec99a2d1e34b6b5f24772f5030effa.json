{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar Objects = require(\"vs/base/common/objects\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar jsonSchemaCommon_1 = require(\"./jsonSchemaCommon\");\nvar schema = {\n    oneOf: [\n        {\n            allOf: [\n                {\n                    type: 'object',\n                    required: ['version'],\n                    properties: {\n                        version: {\n                            type: 'string',\n                            enum: ['0.1.0'],\n                            deprecationMessage: nls.localize('JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'),\n                            description: nls.localize('JsonSchema.version', 'The config\\'s version number')\n                        },\n                        _runner: {\n                            deprecationMessage: nls.localize('JsonSchema._runner', 'The runner has graduated. Use the offical runner property')\n                        },\n                        runner: {\n                            type: 'string',\n                            enum: ['process', 'terminal'],\n                            default: 'process',\n                            description: nls.localize('JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.')\n                        },\n                        windows: {\n                            $ref: '#/definitions/taskRunnerConfiguration',\n                            description: nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n                        },\n                        osx: {\n                            $ref: '#/definitions/taskRunnerConfiguration',\n                            description: nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n                        },\n                        linux: {\n                            $ref: '#/definitions/taskRunnerConfiguration',\n                            description: nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n                        }\n                    }\n                },\n                {\n                    $ref: '#/definitions/taskRunnerConfiguration'\n                }\n            ]\n        }\n    ]\n};\nvar shellCommand = {\n    type: 'boolean',\n    default: true,\n    description: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n};\nschema.definitions = Objects.deepClone(jsonSchemaCommon_1.default.definitions);\nvar definitions = schema.definitions;\ndefinitions['commandConfiguration']['properties']['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskDescription']['properties']['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskRunnerConfiguration']['properties']['isShellCommand'] = Objects.deepClone(shellCommand);\nObject.getOwnPropertyNames(definitions).forEach(function (key) {\n    var newKey = key + '1';\n    definitions[newKey] = definitions[key];\n    delete definitions[key];\n});\nfunction fixReferences(literal) {\n    if (Array.isArray(literal)) {\n        literal.forEach(fixReferences);\n    }\n    else if (typeof literal === 'object') {\n        if (literal['$ref']) {\n            literal['$ref'] = literal['$ref'] + '1';\n        }\n        Object.getOwnPropertyNames(literal).forEach(function (property) {\n            var value = literal[property];\n            if (Array.isArray(value) || typeof value === 'object') {\n                fixReferences(value);\n            }\n        });\n    }\n}\nfixReferences(schema);\nproblemMatcher_1.ProblemMatcherRegistry.onReady().then(function () {\n    try {\n        var matcherIds = problemMatcher_1.ProblemMatcherRegistry.keys().map(function (key) { return '$' + key; });\n        definitions.problemMatcherType1.oneOf[0].enum = matcherIds;\n        definitions.problemMatcherType1.oneOf[2].items.anyOf[1].enum = matcherIds;\n    }\n    catch (err) {\n        console.log('Installing problem matcher ids failed');\n    }\n});\nexports.default = schema;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/jsonSchema_v1.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,gDAAkD;AAGlD,mFAA0F;AAE1F,uDAA8C;AAE9C,IAAM,MAAM,GAAgB;IAC3B,KAAK,EAAE;QACN;YACC,KAAK,EAAE;gBACN;oBACC,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,CAAC,SAAS,CAAC;oBACrB,UAAU,EAAE;wBACX,OAAO,EAAE;4BACR,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,CAAC,OAAO,CAAC;4BACf,kBAAkB,EAAE,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAE,oDAAoD,CAAC;4BACvH,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,8BAA8B,CAAC;yBAC/E;wBACD,OAAO,EAAE;4BACR,kBAAkB,EAAE,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,2DAA2D,CAAC;yBACnH;wBACD,MAAM,EAAE;4BACP,IAAI,EAAE,QAAQ;4BACd,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;4BAC7B,OAAO,EAAE,SAAS;4BAClB,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,wHAAwH,CAAC;yBACxK;wBACD,OAAO,EAAE;4BACR,IAAI,EAAE,uCAAuC;4BAC7C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,wCAAwC,CAAC;yBACzF;wBACD,GAAG,EAAE;4BACJ,IAAI,EAAE,uCAAuC;4BAC7C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,oCAAoC,CAAC;yBACjF;wBACD,KAAK,EAAE;4BACN,IAAI,EAAE,uCAAuC;4BAC7C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,sCAAsC,CAAC;yBACrF;qBACD;iBACD;gBACD;oBACC,IAAI,EAAE,uCAAuC;iBAC7C;aACD;SACD;KACD;CACD,CAAC;AAEF,IAAM,YAAY,GAAgB;IACjC,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,IAAI;IACb,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,wGAAwG,CAAC;CACvJ,CAAC;AAEF,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,0BAAY,CAAC,WAAW,CAAC,CAAC;AACjE,IAAI,WAAW,GAAG,MAAM,CAAC,WAAY,CAAC;AACtC,WAAW,CAAC,sBAAsB,CAAC,CAAC,YAAY,CAAE,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACvG,WAAW,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAE,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAClG,WAAW,CAAC,yBAAyB,CAAC,CAAC,YAAY,CAAE,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAE1G,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;IAClD,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC;IACvB,WAAW,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;IACvC,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC;AAEH,SAAS,aAAa,CAAC,OAAY;IAClC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QAC3B,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;KAC/B;SAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QACvC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACpB,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;SACxC;QACD,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;YACnD,IAAI,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBACtD,aAAa,CAAC,KAAK,CAAC,CAAC;aACrB;QACF,CAAC,CAAC,CAAC;KACH;AACF,CAAC;AACD,aAAa,CAAC,MAAM,CAAC,CAAC;AAEtB,uCAAsB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;IACrC,IAAI;QACH,IAAI,UAAU,GAAG,uCAAsB,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,GAAG,EAAT,CAAS,CAAC,CAAC;QACrE,WAAW,CAAC,mBAAmB,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;QAC3D,WAAW,CAAC,mBAAmB,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,KAAqB,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,UAAU,CAAC;KAC7F;IAAC,OAAO,GAAG,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;KACrD;AACF,CAAC,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\n\nimport { ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nimport commonSchema from './jsonSchemaCommon';\n\nconst schema: IJSONSchema = {\n\toneOf: [\n\t\t{\n\t\t\tallOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\trequired: ['version'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tversion: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['0.1.0'],\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema.version.deprecated', 'Task version 0.1.0 is deprecated. Please use 2.0.0'),\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.version', 'The config\\'s version number')\n\t\t\t\t\t\t},\n\t\t\t\t\t\t_runner: {\n\t\t\t\t\t\t\tdeprecationMessage: nls.localize('JsonSchema._runner', 'The runner has graduated. Use the offical runner property')\n\t\t\t\t\t\t},\n\t\t\t\t\t\trunner: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tenum: ['process', 'terminal'],\n\t\t\t\t\t\t\tdefault: 'process',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.runner', 'Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.')\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.windows', 'Windows specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tosx: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.mac', 'Mac specific command configuration')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {\n\t\t\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration',\n\t\t\t\t\t\t\tdescription: nls.localize('JsonSchema.linux', 'Linux specific command configuration')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t$ref: '#/definitions/taskRunnerConfiguration'\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n};\n\nconst shellCommand: IJSONSchema = {\n\ttype: 'boolean',\n\tdefault: true,\n\tdescription: nls.localize('JsonSchema.shell', 'Specifies whether the command is a shell command or an external program. Defaults to false if omitted.')\n};\n\nschema.definitions = Objects.deepClone(commonSchema.definitions);\nlet definitions = schema.definitions!;\ndefinitions['commandConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskDescription']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\ndefinitions['taskRunnerConfiguration']['properties']!['isShellCommand'] = Objects.deepClone(shellCommand);\n\nObject.getOwnPropertyNames(definitions).forEach(key => {\n\tlet newKey = key + '1';\n\tdefinitions[newKey] = definitions[key];\n\tdelete definitions[key];\n});\n\nfunction fixReferences(literal: any) {\n\tif (Array.isArray(literal)) {\n\t\tliteral.forEach(fixReferences);\n\t} else if (typeof literal === 'object') {\n\t\tif (literal['$ref']) {\n\t\t\tliteral['$ref'] = literal['$ref'] + '1';\n\t\t}\n\t\tObject.getOwnPropertyNames(literal).forEach(property => {\n\t\t\tlet value = literal[property];\n\t\t\tif (Array.isArray(value) || typeof value === 'object') {\n\t\t\t\tfixReferences(value);\n\t\t\t}\n\t\t});\n\t}\n}\nfixReferences(schema);\n\nProblemMatcherRegistry.onReady().then(() => {\n\ttry {\n\t\tlet matcherIds = ProblemMatcherRegistry.keys().map(key => '$' + key);\n\t\tdefinitions.problemMatcherType1.oneOf![0].enum = matcherIds;\n\t\t(definitions.problemMatcherType1.oneOf![2].items as IJSONSchema).anyOf![1].enum = matcherIds;\n\t} catch (err) {\n\t\tconsole.log('Installing problem matcher ids failed');\n\t}\n});\n\nexport default schema;\n"]}]}