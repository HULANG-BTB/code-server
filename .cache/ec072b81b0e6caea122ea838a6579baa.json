{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar token_1 = require(\"vs/editor/common/core/token\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar NullStateImpl = /** @class */ (function () {\n    function NullStateImpl() {\n    }\n    NullStateImpl.prototype.clone = function () {\n        return this;\n    };\n    NullStateImpl.prototype.equals = function (other) {\n        return (this === other);\n    };\n    return NullStateImpl;\n}());\nexports.NULL_STATE = new NullStateImpl();\nexports.NULL_MODE_ID = 'vs.editor.nullMode';\nexports.NULL_LANGUAGE_IDENTIFIER = new modes_1.LanguageIdentifier(exports.NULL_MODE_ID, modes_1.LanguageId.Null);\nfunction nullTokenize(modeId, buffer, state, deltaOffset) {\n    return new token_1.TokenizationResult([new token_1.Token(deltaOffset, '', modeId)], state);\n}\nexports.nullTokenize = nullTokenize;\nfunction nullTokenize2(languageId, buffer, state, deltaOffset) {\n    var tokens = new Uint32Array(2);\n    tokens[0] = deltaOffset;\n    tokens[1] = ((languageId << modes_1.MetadataConsts.LANGUAGEID_OFFSET)\n        | (modes_1.StandardTokenType.Other << modes_1.MetadataConsts.TOKEN_TYPE_OFFSET)\n        | (modes_1.FontStyle.None << modes_1.MetadataConsts.FONT_STYLE_OFFSET)\n        | (modes_1.ColorId.DefaultForeground << modes_1.MetadataConsts.FOREGROUND_OFFSET)\n        | (modes_1.ColorId.DefaultBackground << modes_1.MetadataConsts.BACKGROUND_OFFSET)) >>> 0;\n    return new token_1.TokenizationResult2(tokens, state === null ? exports.NULL_STATE : state);\n}\nexports.nullTokenize2 = nullTokenize2;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/nullMode.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,qDAA6F;AAC7F,gDAAuI;AAEvI;IAAA;IASA,CAAC;IAPO,6BAAK,GAAZ;QACC,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,8BAAM,GAAb,UAAc,KAAa;QAC1B,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;IACzB,CAAC;IACF,oBAAC;AAAD,CAAC,AATD,IASC;AAEY,QAAA,UAAU,GAAW,IAAI,aAAa,EAAE,CAAC;AAEzC,QAAA,YAAY,GAAG,oBAAoB,CAAC;AAEpC,QAAA,wBAAwB,GAAG,IAAI,0BAAkB,CAAC,oBAAY,EAAE,kBAAU,CAAC,IAAI,CAAC,CAAC;AAE9F,SAAgB,YAAY,CAAC,MAAc,EAAE,MAAc,EAAE,KAAa,EAAE,WAAmB;IAC9F,OAAO,IAAI,0BAAkB,CAAC,CAAC,IAAI,aAAK,CAAC,WAAW,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAC5E,CAAC;AAFD,oCAEC;AAED,SAAgB,aAAa,CAAC,UAAsB,EAAE,MAAc,EAAE,KAAoB,EAAE,WAAmB;IAC9G,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,MAAM,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;IACxB,MAAM,CAAC,CAAC,CAAC,GAAG,CACX,CAAC,UAAU,IAAI,sBAAc,CAAC,iBAAiB,CAAC;UAC9C,CAAC,yBAAiB,CAAC,KAAK,IAAI,sBAAc,CAAC,iBAAiB,CAAC;UAC7D,CAAC,iBAAS,CAAC,IAAI,IAAI,sBAAc,CAAC,iBAAiB,CAAC;UACpD,CAAC,eAAO,CAAC,iBAAiB,IAAI,sBAAc,CAAC,iBAAiB,CAAC;UAC/D,CAAC,eAAO,CAAC,iBAAiB,IAAI,sBAAc,CAAC,iBAAiB,CAAC,CACjE,KAAK,CAAC,CAAC;IAER,OAAO,IAAI,2BAAmB,CAAC,MAAM,EAAE,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,kBAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC7E,CAAC;AAZD,sCAYC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Token, TokenizationResult, TokenizationResult2 } from 'vs/editor/common/core/token';\nimport { ColorId, FontStyle, IState, LanguageId, LanguageIdentifier, MetadataConsts, StandardTokenType } from 'vs/editor/common/modes';\n\nclass NullStateImpl implements IState {\n\n\tpublic clone(): IState {\n\t\treturn this;\n\t}\n\n\tpublic equals(other: IState): boolean {\n\t\treturn (this === other);\n\t}\n}\n\nexport const NULL_STATE: IState = new NullStateImpl();\n\nexport const NULL_MODE_ID = 'vs.editor.nullMode';\n\nexport const NULL_LANGUAGE_IDENTIFIER = new LanguageIdentifier(NULL_MODE_ID, LanguageId.Null);\n\nexport function nullTokenize(modeId: string, buffer: string, state: IState, deltaOffset: number): TokenizationResult {\n\treturn new TokenizationResult([new Token(deltaOffset, '', modeId)], state);\n}\n\nexport function nullTokenize2(languageId: LanguageId, buffer: string, state: IState | null, deltaOffset: number): TokenizationResult2 {\n\tlet tokens = new Uint32Array(2);\n\ttokens[0] = deltaOffset;\n\ttokens[1] = (\n\t\t(languageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t| (StandardTokenType.Other << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t| (FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\treturn new TokenizationResult2(tokens, state === null ? NULL_STATE : state);\n}\n"]}]}