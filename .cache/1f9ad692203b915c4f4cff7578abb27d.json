{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nfunction viewColumnToEditorGroup(editorGroupService, position) {\n    if (typeof position !== 'number' || position === editorService_1.ACTIVE_GROUP) {\n        return editorService_1.ACTIVE_GROUP; // prefer active group when position is undefined or passed in as such\n    }\n    var groups = editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n    var candidate = groups[position];\n    if (candidate) {\n        return candidate.id; // found direct match\n    }\n    var firstGroup = groups[0];\n    if (groups.length === 1 && firstGroup.count === 0) {\n        return firstGroup.id; // first editor should always open in first group independent from position provided\n    }\n    return editorService_1.SIDE_GROUP; // open to the side if group not found or we are instructed to\n}\nexports.viewColumnToEditorGroup = viewColumnToEditorGroup;\nfunction editorGroupToViewColumn(editorGroupService, editorGroup) {\n    var group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n    if (!group) {\n        throw new Error('Invalid group provided');\n    }\n    return editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE).indexOf(group);\n}\nexports.editorGroupToViewColumn = editorGroupToViewColumn;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/shared/editor.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,+FAA0H;AAE1H,mFAA6F;AAI7F,SAAgB,uBAAuB,CAAC,kBAAwC,EAAE,QAA2B;IAC5G,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,4BAAY,EAAE;QAC9D,OAAO,4BAAY,CAAC,CAAC,sEAAsE;KAC3F;IAED,IAAM,MAAM,GAAG,kBAAkB,CAAC,SAAS,CAAC,iCAAW,CAAC,eAAe,CAAC,CAAC;IAEzE,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,IAAI,SAAS,EAAE;QACd,OAAO,SAAS,CAAC,EAAE,CAAC,CAAC,qBAAqB;KAC1C;IAED,IAAI,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,KAAK,KAAK,CAAC,EAAE;QAClD,OAAO,UAAU,CAAC,EAAE,CAAC,CAAC,oFAAoF;KAC1G;IAED,OAAO,0BAAU,CAAC,CAAC,8DAA8D;AAClF,CAAC;AAlBD,0DAkBC;AAED,SAAgB,uBAAuB,CAAC,kBAAwC,EAAE,WAA2C;IAC5H,IAAM,KAAK,GAAG,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;IACzG,IAAI,CAAC,KAAK,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC1C;IAED,OAAO,kBAAkB,CAAC,SAAS,CAAC,iCAAW,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACjF,CAAC;AAPD,0DAOC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorGroupsService, IEditorGroup, GroupsOrder } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { GroupIdentifier } from 'vs/workbench/common/editor';\nimport { ACTIVE_GROUP, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\n\nexport type EditorViewColumn = number;\n\nexport function viewColumnToEditorGroup(editorGroupService: IEditorGroupsService, position?: EditorViewColumn): GroupIdentifier {\n\tif (typeof position !== 'number' || position === ACTIVE_GROUP) {\n\t\treturn ACTIVE_GROUP; // prefer active group when position is undefined or passed in as such\n\t}\n\n\tconst groups = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\n\tlet candidate = groups[position];\n\tif (candidate) {\n\t\treturn candidate.id; // found direct match\n\t}\n\n\tlet firstGroup = groups[0];\n\tif (groups.length === 1 && firstGroup.count === 0) {\n\t\treturn firstGroup.id; // first editor should always open in first group independent from position provided\n\t}\n\n\treturn SIDE_GROUP; // open to the side if group not found or we are instructed to\n}\n\nexport function editorGroupToViewColumn(editorGroupService: IEditorGroupsService, editorGroup: IEditorGroup | GroupIdentifier): EditorViewColumn {\n\tconst group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n\tif (!group) {\n\t\tthrow new Error('Invalid group provided');\n\t}\n\n\treturn editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE).indexOf(group);\n}"]}]}