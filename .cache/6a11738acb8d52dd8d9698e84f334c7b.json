{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar htmlContent_1 = require(\"vs/base/common/htmlContent\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar smartSnippetInserter_1 = require(\"vs/workbench/contrib/preferences/common/smartSnippetInserter\");\nvar keybindingWidgets_1 = require(\"vs/workbench/contrib/preferences/browser/keybindingWidgets\");\nvar editorWidgets_1 = require(\"vs/workbench/browser/parts/editor/editorWidgets\");\nvar json_1 = require(\"vs/base/common/json\");\nvar scanCode_1 = require(\"vs/base/common/scanCode\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar windowsKeyboardMapper_1 = require(\"vs/workbench/services/keybinding/common/windowsKeyboardMapper\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar keybindingParser_1 = require(\"vs/base/common/keybindingParser\");\nvar NLS_LAUNCH_MESSAGE = nls.localize('defineKeybinding.start', \"Define Keybinding\");\nvar NLS_KB_LAYOUT_ERROR_MESSAGE = nls.localize('defineKeybinding.kbLayoutErrorMessage', \"You won't be able to produce this key combination under your current keyboard layout.\");\nvar INTERESTING_FILE = /keybindings\\.json$/;\nvar DefineKeybindingController = /** @class */ (function (_super) {\n    tslib_1.__extends(DefineKeybindingController, _super);\n    function DefineKeybindingController(_editor, _instantiationService) {\n        var _this = _super.call(this) || this;\n        _this._editor = _editor;\n        _this._instantiationService = _instantiationService;\n        _this._register(_this._editor.onDidChangeModel(function (e) { return _this._update(); }));\n        _this._update();\n        return _this;\n    }\n    DefineKeybindingController.get = function (editor) {\n        return editor.getContribution(DefineKeybindingController.ID);\n    };\n    DefineKeybindingController.prototype.getId = function () {\n        return DefineKeybindingController.ID;\n    };\n    Object.defineProperty(DefineKeybindingController.prototype, \"keybindingWidgetRenderer\", {\n        get: function () {\n            return this._keybindingWidgetRenderer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DefineKeybindingController.prototype.dispose = function () {\n        this._disposeKeybindingWidgetRenderer();\n        this._disposeKeybindingDecorationRenderer();\n        _super.prototype.dispose.call(this);\n    };\n    DefineKeybindingController.prototype._update = function () {\n        if (!isInterestingEditorModel(this._editor)) {\n            this._disposeKeybindingWidgetRenderer();\n            this._disposeKeybindingDecorationRenderer();\n            return;\n        }\n        // Decorations are shown for the default keybindings.json **and** for the user keybindings.json\n        this._createKeybindingDecorationRenderer();\n        // The button to define keybindings is shown only for the user keybindings.json\n        if (!this._editor.getConfiguration().readOnly) {\n            this._createKeybindingWidgetRenderer();\n        }\n        else {\n            this._disposeKeybindingWidgetRenderer();\n        }\n    };\n    DefineKeybindingController.prototype._createKeybindingWidgetRenderer = function () {\n        if (!this._keybindingWidgetRenderer) {\n            this._keybindingWidgetRenderer = this._instantiationService.createInstance(KeybindingWidgetRenderer, this._editor);\n        }\n    };\n    DefineKeybindingController.prototype._disposeKeybindingWidgetRenderer = function () {\n        if (this._keybindingWidgetRenderer) {\n            this._keybindingWidgetRenderer.dispose();\n            this._keybindingWidgetRenderer = undefined;\n        }\n    };\n    DefineKeybindingController.prototype._createKeybindingDecorationRenderer = function () {\n        if (!this._keybindingDecorationRenderer) {\n            this._keybindingDecorationRenderer = this._instantiationService.createInstance(KeybindingEditorDecorationsRenderer, this._editor);\n        }\n    };\n    DefineKeybindingController.prototype._disposeKeybindingDecorationRenderer = function () {\n        if (this._keybindingDecorationRenderer) {\n            this._keybindingDecorationRenderer.dispose();\n            this._keybindingDecorationRenderer = undefined;\n        }\n    };\n    DefineKeybindingController.ID = 'editor.contrib.defineKeybinding';\n    DefineKeybindingController = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], DefineKeybindingController);\n    return DefineKeybindingController;\n}(lifecycle_1.Disposable));\nexports.DefineKeybindingController = DefineKeybindingController;\nvar KeybindingWidgetRenderer = /** @class */ (function (_super) {\n    tslib_1.__extends(KeybindingWidgetRenderer, _super);\n    function KeybindingWidgetRenderer(_editor, _instantiationService) {\n        var _this = _super.call(this) || this;\n        _this._editor = _editor;\n        _this._instantiationService = _instantiationService;\n        _this._launchWidget = _this._register(_this._instantiationService.createInstance(editorWidgets_1.FloatingClickWidget, _this._editor, NLS_LAUNCH_MESSAGE, DefineKeybindingCommand.ID));\n        _this._register(_this._launchWidget.onClick(function () { return _this.showDefineKeybindingWidget(); }));\n        _this._defineWidget = _this._register(_this._instantiationService.createInstance(keybindingWidgets_1.DefineKeybindingOverlayWidget, _this._editor));\n        _this._launchWidget.render();\n        return _this;\n    }\n    KeybindingWidgetRenderer.prototype.showDefineKeybindingWidget = function () {\n        var _this = this;\n        this._defineWidget.start().then(function (keybinding) { return _this._onAccepted(keybinding); });\n    };\n    KeybindingWidgetRenderer.prototype._onAccepted = function (keybinding) {\n        this._editor.focus();\n        if (keybinding && this._editor.hasModel()) {\n            var regexp = new RegExp(/\\\\/g);\n            var backslash = regexp.test(keybinding);\n            if (backslash) {\n                keybinding = keybinding.slice(0, -1) + '\\\\\\\\';\n            }\n            var snippetText = [\n                '{',\n                '\\t\"key\": ' + JSON.stringify(keybinding) + ',',\n                '\\t\"command\": \"${1:commandId}\",',\n                '\\t\"when\": \"${2:editorTextFocus}\"',\n                '}$0'\n            ].join('\\n');\n            var smartInsertInfo = smartSnippetInserter_1.SmartSnippetInserter.insertSnippet(this._editor.getModel(), this._editor.getPosition());\n            snippetText = smartInsertInfo.prepend + snippetText + smartInsertInfo.append;\n            this._editor.setPosition(smartInsertInfo.position);\n            snippetController2_1.SnippetController2.get(this._editor).insert(snippetText, 0, 0);\n        }\n    };\n    KeybindingWidgetRenderer = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], KeybindingWidgetRenderer);\n    return KeybindingWidgetRenderer;\n}(lifecycle_1.Disposable));\nexports.KeybindingWidgetRenderer = KeybindingWidgetRenderer;\nvar KeybindingEditorDecorationsRenderer = /** @class */ (function (_super) {\n    tslib_1.__extends(KeybindingEditorDecorationsRenderer, _super);\n    function KeybindingEditorDecorationsRenderer(_editor, _keybindingService) {\n        var _this = _super.call(this) || this;\n        _this._editor = _editor;\n        _this._keybindingService = _keybindingService;\n        _this._dec = [];\n        _this._updateDecorations = _this._register(new async_1.RunOnceScheduler(function () { return _this._updateDecorationsNow(); }, 500));\n        var model = _this._editor.getModel();\n        _this._register(model.onDidChangeContent(function () { return _this._updateDecorations.schedule(); }));\n        _this._register(_this._keybindingService.onDidUpdateKeybindings(function (e) { return _this._updateDecorations.schedule(); }));\n        _this._register({\n            dispose: function () {\n                _this._dec = _this._editor.deltaDecorations(_this._dec, []);\n                _this._updateDecorations.cancel();\n            }\n        });\n        _this._updateDecorations.schedule();\n        return _this;\n    }\n    KeybindingEditorDecorationsRenderer.prototype._updateDecorationsNow = function () {\n        var model = this._editor.getModel();\n        var newDecorations = [];\n        var root = json_1.parseTree(model.getValue());\n        if (root && Array.isArray(root.children)) {\n            for (var i = 0, len = root.children.length; i < len; i++) {\n                var entry = root.children[i];\n                var dec = this._getDecorationForEntry(model, entry);\n                if (dec !== null) {\n                    newDecorations.push(dec);\n                }\n            }\n        }\n        this._dec = this._editor.deltaDecorations(this._dec, newDecorations);\n    };\n    KeybindingEditorDecorationsRenderer.prototype._getDecorationForEntry = function (model, entry) {\n        if (!Array.isArray(entry.children)) {\n            return null;\n        }\n        for (var i = 0, len = entry.children.length; i < len; i++) {\n            var prop = entry.children[i];\n            if (prop.type !== 'property') {\n                continue;\n            }\n            if (!Array.isArray(prop.children) || prop.children.length !== 2) {\n                continue;\n            }\n            var key = prop.children[0];\n            if (key.value !== 'key') {\n                continue;\n            }\n            var value = prop.children[1];\n            if (value.type !== 'string') {\n                continue;\n            }\n            var resolvedKeybindings = this._keybindingService.resolveUserBinding(value.value);\n            if (resolvedKeybindings.length === 0) {\n                return this._createDecoration(true, null, null, model, value);\n            }\n            var resolvedKeybinding = resolvedKeybindings[0];\n            var usLabel = null;\n            if (resolvedKeybinding instanceof windowsKeyboardMapper_1.WindowsNativeResolvedKeybinding) {\n                usLabel = resolvedKeybinding.getUSLabel();\n            }\n            if (!resolvedKeybinding.isWYSIWYG()) {\n                var uiLabel = resolvedKeybinding.getLabel();\n                if (typeof uiLabel === 'string' && value.value.toLowerCase() === uiLabel.toLowerCase()) {\n                    // coincidentally, this is actually WYSIWYG\n                    return null;\n                }\n                return this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n            }\n            if (/abnt_|oem_/.test(value.value)) {\n                return this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n            }\n            var expectedUserSettingsLabel = resolvedKeybinding.getUserSettingsLabel();\n            if (typeof expectedUserSettingsLabel === 'string' && !KeybindingEditorDecorationsRenderer._userSettingsFuzzyEquals(value.value, expectedUserSettingsLabel)) {\n                return this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n            }\n            return null;\n        }\n        return null;\n    };\n    KeybindingEditorDecorationsRenderer._userSettingsFuzzyEquals = function (a, b) {\n        a = a.trim().toLowerCase();\n        b = b.trim().toLowerCase();\n        if (a === b) {\n            return true;\n        }\n        var aParts = keybindingParser_1.KeybindingParser.parseUserBinding(a);\n        var bParts = keybindingParser_1.KeybindingParser.parseUserBinding(b);\n        if (aParts.length !== bParts.length) {\n            return false;\n        }\n        for (var i = 0, len = aParts.length; i < len; i++) {\n            if (!this._userBindingEquals(aParts[i], bParts[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    KeybindingEditorDecorationsRenderer._userBindingEquals = function (a, b) {\n        if (a === null && b === null) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        if (a instanceof keyCodes_1.SimpleKeybinding && b instanceof keyCodes_1.SimpleKeybinding) {\n            return a.equals(b);\n        }\n        if (a instanceof scanCode_1.ScanCodeBinding && b instanceof scanCode_1.ScanCodeBinding) {\n            return a.equals(b);\n        }\n        return false;\n    };\n    KeybindingEditorDecorationsRenderer.prototype._createDecoration = function (isError, uiLabel, usLabel, model, keyNode) {\n        var msg;\n        var className;\n        var beforeContentClassName;\n        var overviewRulerColor;\n        if (isError) {\n            // this is the error case\n            msg = new htmlContent_1.MarkdownString().appendText(NLS_KB_LAYOUT_ERROR_MESSAGE);\n            className = 'keybindingError';\n            beforeContentClassName = 'inlineKeybindingError';\n            overviewRulerColor = themeService_1.themeColorFromId(editorColorRegistry_1.overviewRulerError);\n        }\n        else {\n            // this is the info case\n            if (usLabel && uiLabel !== usLabel) {\n                msg = new htmlContent_1.MarkdownString(nls.localize({\n                    key: 'defineKeybinding.kbLayoutLocalAndUSMessage',\n                    comment: [\n                        'Please translate maintaining the stars (*) around the placeholders such that they will be rendered in bold.',\n                        'The placeholders will contain a keyboard combination e.g. Ctrl+Shift+/'\n                    ]\n                }, \"**{0}** for your current keyboard layout (**{1}** for US standard).\", uiLabel, usLabel));\n            }\n            else {\n                msg = new htmlContent_1.MarkdownString(nls.localize({\n                    key: 'defineKeybinding.kbLayoutLocalMessage',\n                    comment: [\n                        'Please translate maintaining the stars (*) around the placeholder such that it will be rendered in bold.',\n                        'The placeholder will contain a keyboard combination e.g. Ctrl+Shift+/'\n                    ]\n                }, \"**{0}** for your current keyboard layout.\", uiLabel));\n            }\n            className = 'keybindingInfo';\n            beforeContentClassName = 'inlineKeybindingInfo';\n            overviewRulerColor = themeService_1.themeColorFromId(editorColorRegistry_1.overviewRulerInfo);\n        }\n        var startPosition = model.getPositionAt(keyNode.offset);\n        var endPosition = model.getPositionAt(keyNode.offset + keyNode.length);\n        var range = new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n        // icon + highlight + message decoration\n        return {\n            range: range,\n            options: {\n                stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n                className: className,\n                beforeContentClassName: beforeContentClassName,\n                hoverMessage: msg,\n                overviewRuler: {\n                    color: overviewRulerColor,\n                    position: model_1.OverviewRulerLane.Right\n                }\n            }\n        };\n    };\n    KeybindingEditorDecorationsRenderer = tslib_1.__decorate([\n        tslib_1.__param(1, keybinding_1.IKeybindingService)\n    ], KeybindingEditorDecorationsRenderer);\n    return KeybindingEditorDecorationsRenderer;\n}(lifecycle_1.Disposable));\nexports.KeybindingEditorDecorationsRenderer = KeybindingEditorDecorationsRenderer;\nvar DefineKeybindingCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(DefineKeybindingCommand, _super);\n    function DefineKeybindingCommand() {\n        return _super.call(this, {\n            id: DefineKeybindingCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.languageId.isEqualTo('jsonc')),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    DefineKeybindingCommand.prototype.runEditorCommand = function (accessor, editor) {\n        if (!isInterestingEditorModel(editor) || editor.getConfiguration().readOnly) {\n            return;\n        }\n        var controller = DefineKeybindingController.get(editor);\n        if (controller && controller.keybindingWidgetRenderer) {\n            controller.keybindingWidgetRenderer.showDefineKeybindingWidget();\n        }\n    };\n    DefineKeybindingCommand.ID = 'editor.action.defineKeybinding';\n    return DefineKeybindingCommand;\n}(editorExtensions_1.EditorCommand));\nfunction isInterestingEditorModel(editor) {\n    var model = editor.getModel();\n    if (!model) {\n        return false;\n    }\n    var url = model.uri.toString();\n    return INTERESTING_FILE.test(url);\n}\neditorExtensions_1.registerEditorContribution(DefineKeybindingController);\neditorExtensions_1.registerEditorCommand(new DefineKeybindingCommand());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/keybindingsEditorContribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { KeyCode, KeyMod, KeyChord, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { registerEditorContribution, ServicesAccessor, registerEditorCommand, EditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor, IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { SmartSnippetInserter } from 'vs/workbench/contrib/preferences/common/smartSnippetInserter';\nimport { DefineKeybindingOverlayWidget } from 'vs/workbench/contrib/preferences/browser/keybindingWidgets';\nimport { FloatingClickWidget } from 'vs/workbench/browser/parts/editor/editorWidgets';\nimport { parseTree, Node } from 'vs/base/common/json';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { WindowsNativeResolvedKeybinding } from 'vs/workbench/services/keybinding/common/windowsKeyboardMapper';\nimport { themeColorFromId, ThemeColor } from 'vs/platform/theme/common/themeService';\nimport { overviewRulerInfo, overviewRulerError } from 'vs/editor/common/view/editorColorRegistry';\nimport { IModelDeltaDecoration, ITextModel, TrackedRangeStickiness, OverviewRulerLane } from 'vs/editor/common/model';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\n\nconst NLS_LAUNCH_MESSAGE = nls.localize('defineKeybinding.start', \"Define Keybinding\");\nconst NLS_KB_LAYOUT_ERROR_MESSAGE = nls.localize('defineKeybinding.kbLayoutErrorMessage', \"You won't be able to produce this key combination under your current keyboard layout.\");\n\nconst INTERESTING_FILE = /keybindings\\.json$/;\n\nexport class DefineKeybindingController extends Disposable implements editorCommon.IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.defineKeybinding';\n\n\tstatic get(editor: ICodeEditor): DefineKeybindingController {\n\t\treturn editor.getContribution<DefineKeybindingController>(DefineKeybindingController.ID);\n\t}\n\n\tprivate _keybindingWidgetRenderer?: KeybindingWidgetRenderer;\n\tprivate _keybindingDecorationRenderer?: KeybindingEditorDecorationsRenderer;\n\n\tconstructor(\n\t\tprivate _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._editor.onDidChangeModel(e => this._update()));\n\t\tthis._update();\n\t}\n\n\tgetId(): string {\n\t\treturn DefineKeybindingController.ID;\n\t}\n\n\tget keybindingWidgetRenderer(): KeybindingWidgetRenderer | undefined {\n\t\treturn this._keybindingWidgetRenderer;\n\t}\n\n\tdispose(): void {\n\t\tthis._disposeKeybindingWidgetRenderer();\n\t\tthis._disposeKeybindingDecorationRenderer();\n\t\tsuper.dispose();\n\t}\n\n\tprivate _update(): void {\n\t\tif (!isInterestingEditorModel(this._editor)) {\n\t\t\tthis._disposeKeybindingWidgetRenderer();\n\t\t\tthis._disposeKeybindingDecorationRenderer();\n\t\t\treturn;\n\t\t}\n\n\t\t// Decorations are shown for the default keybindings.json **and** for the user keybindings.json\n\t\tthis._createKeybindingDecorationRenderer();\n\n\t\t// The button to define keybindings is shown only for the user keybindings.json\n\t\tif (!this._editor.getConfiguration().readOnly) {\n\t\t\tthis._createKeybindingWidgetRenderer();\n\t\t} else {\n\t\t\tthis._disposeKeybindingWidgetRenderer();\n\t\t}\n\t}\n\n\tprivate _createKeybindingWidgetRenderer(): void {\n\t\tif (!this._keybindingWidgetRenderer) {\n\t\t\tthis._keybindingWidgetRenderer = this._instantiationService.createInstance(KeybindingWidgetRenderer, this._editor);\n\t\t}\n\t}\n\n\tprivate _disposeKeybindingWidgetRenderer(): void {\n\t\tif (this._keybindingWidgetRenderer) {\n\t\t\tthis._keybindingWidgetRenderer.dispose();\n\t\t\tthis._keybindingWidgetRenderer = undefined;\n\t\t}\n\t}\n\n\tprivate _createKeybindingDecorationRenderer(): void {\n\t\tif (!this._keybindingDecorationRenderer) {\n\t\t\tthis._keybindingDecorationRenderer = this._instantiationService.createInstance(KeybindingEditorDecorationsRenderer, this._editor);\n\t\t}\n\t}\n\n\tprivate _disposeKeybindingDecorationRenderer(): void {\n\t\tif (this._keybindingDecorationRenderer) {\n\t\t\tthis._keybindingDecorationRenderer.dispose();\n\t\t\tthis._keybindingDecorationRenderer = undefined;\n\t\t}\n\t}\n}\n\nexport class KeybindingWidgetRenderer extends Disposable {\n\n\tprivate _launchWidget: FloatingClickWidget;\n\tprivate _defineWidget: DefineKeybindingOverlayWidget;\n\n\tconstructor(\n\t\tprivate _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._launchWidget = this._register(this._instantiationService.createInstance(FloatingClickWidget, this._editor, NLS_LAUNCH_MESSAGE, DefineKeybindingCommand.ID));\n\t\tthis._register(this._launchWidget.onClick(() => this.showDefineKeybindingWidget()));\n\t\tthis._defineWidget = this._register(this._instantiationService.createInstance(DefineKeybindingOverlayWidget, this._editor));\n\n\t\tthis._launchWidget.render();\n\t}\n\n\tshowDefineKeybindingWidget(): void {\n\t\tthis._defineWidget.start().then(keybinding => this._onAccepted(keybinding));\n\t}\n\n\tprivate _onAccepted(keybinding: string | null): void {\n\t\tthis._editor.focus();\n\t\tif (keybinding && this._editor.hasModel()) {\n\t\t\tconst regexp = new RegExp(/\\\\/g);\n\t\t\tconst backslash = regexp.test(keybinding);\n\t\t\tif (backslash) {\n\t\t\t\tkeybinding = keybinding.slice(0, -1) + '\\\\\\\\';\n\t\t\t}\n\t\t\tlet snippetText = [\n\t\t\t\t'{',\n\t\t\t\t'\\t\"key\": ' + JSON.stringify(keybinding) + ',',\n\t\t\t\t'\\t\"command\": \"${1:commandId}\",',\n\t\t\t\t'\\t\"when\": \"${2:editorTextFocus}\"',\n\t\t\t\t'}$0'\n\t\t\t].join('\\n');\n\n\t\t\tconst smartInsertInfo = SmartSnippetInserter.insertSnippet(this._editor.getModel(), this._editor.getPosition());\n\t\t\tsnippetText = smartInsertInfo.prepend + snippetText + smartInsertInfo.append;\n\t\t\tthis._editor.setPosition(smartInsertInfo.position);\n\n\t\t\tSnippetController2.get(this._editor).insert(snippetText, 0, 0);\n\t\t}\n\t}\n}\n\nexport class KeybindingEditorDecorationsRenderer extends Disposable {\n\n\tprivate _updateDecorations: RunOnceScheduler;\n\tprivate _dec: string[] = [];\n\n\tconstructor(\n\t\tprivate _editor: IActiveCodeEditor,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tthis._updateDecorations = this._register(new RunOnceScheduler(() => this._updateDecorationsNow(), 500));\n\n\t\tconst model = this._editor.getModel();\n\t\tthis._register(model.onDidChangeContent(() => this._updateDecorations.schedule()));\n\t\tthis._register(this._keybindingService.onDidUpdateKeybindings((e) => this._updateDecorations.schedule()));\n\t\tthis._register({\n\t\t\tdispose: () => {\n\t\t\t\tthis._dec = this._editor.deltaDecorations(this._dec, []);\n\t\t\t\tthis._updateDecorations.cancel();\n\t\t\t}\n\t\t});\n\t\tthis._updateDecorations.schedule();\n\t}\n\n\tprivate _updateDecorationsNow(): void {\n\t\tconst model = this._editor.getModel();\n\n\t\tconst newDecorations: IModelDeltaDecoration[] = [];\n\n\t\tconst root = parseTree(model.getValue());\n\t\tif (root && Array.isArray(root.children)) {\n\t\t\tfor (let i = 0, len = root.children.length; i < len; i++) {\n\t\t\t\tconst entry = root.children[i];\n\t\t\t\tconst dec = this._getDecorationForEntry(model, entry);\n\t\t\t\tif (dec !== null) {\n\t\t\t\t\tnewDecorations.push(dec);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._dec = this._editor.deltaDecorations(this._dec, newDecorations);\n\t}\n\n\tprivate _getDecorationForEntry(model: ITextModel, entry: Node): IModelDeltaDecoration | null {\n\t\tif (!Array.isArray(entry.children)) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (let i = 0, len = entry.children.length; i < len; i++) {\n\t\t\tconst prop = entry.children[i];\n\t\t\tif (prop.type !== 'property') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!Array.isArray(prop.children) || prop.children.length !== 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst key = prop.children[0];\n\t\t\tif (key.value !== 'key') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst value = prop.children[1];\n\t\t\tif (value.type !== 'string') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst resolvedKeybindings = this._keybindingService.resolveUserBinding(value.value);\n\t\t\tif (resolvedKeybindings.length === 0) {\n\t\t\t\treturn this._createDecoration(true, null, null, model, value);\n\t\t\t}\n\t\t\tconst resolvedKeybinding = resolvedKeybindings[0];\n\t\t\tlet usLabel: string | null = null;\n\t\t\tif (resolvedKeybinding instanceof WindowsNativeResolvedKeybinding) {\n\t\t\t\tusLabel = resolvedKeybinding.getUSLabel();\n\t\t\t}\n\t\t\tif (!resolvedKeybinding.isWYSIWYG()) {\n\t\t\t\tconst uiLabel = resolvedKeybinding.getLabel();\n\t\t\t\tif (typeof uiLabel === 'string' && value.value.toLowerCase() === uiLabel.toLowerCase()) {\n\t\t\t\t\t// coincidentally, this is actually WYSIWYG\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\tif (/abnt_|oem_/.test(value.value)) {\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\tconst expectedUserSettingsLabel = resolvedKeybinding.getUserSettingsLabel();\n\t\t\tif (typeof expectedUserSettingsLabel === 'string' && !KeybindingEditorDecorationsRenderer._userSettingsFuzzyEquals(value.value, expectedUserSettingsLabel)) {\n\t\t\t\treturn this._createDecoration(false, resolvedKeybinding.getLabel(), usLabel, model, value);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t\treturn null;\n\t}\n\n\tstatic _userSettingsFuzzyEquals(a: string, b: string): boolean {\n\t\ta = a.trim().toLowerCase();\n\t\tb = b.trim().toLowerCase();\n\n\t\tif (a === b) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst aParts = KeybindingParser.parseUserBinding(a);\n\t\tconst bParts = KeybindingParser.parseUserBinding(b);\n\n\t\tif (aParts.length !== bParts.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = aParts.length; i < len; i++) {\n\t\t\tif (!this._userBindingEquals(aParts[i], bParts[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate static _userBindingEquals(a: SimpleKeybinding | ScanCodeBinding, b: SimpleKeybinding | ScanCodeBinding): boolean {\n\t\tif (a === null && b === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (a instanceof SimpleKeybinding && b instanceof SimpleKeybinding) {\n\t\t\treturn a.equals(b);\n\t\t}\n\n\t\tif (a instanceof ScanCodeBinding && b instanceof ScanCodeBinding) {\n\t\t\treturn a.equals(b);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _createDecoration(isError: boolean, uiLabel: string | null, usLabel: string | null, model: ITextModel, keyNode: Node): IModelDeltaDecoration {\n\t\tlet msg: MarkdownString;\n\t\tlet className: string;\n\t\tlet beforeContentClassName: string;\n\t\tlet overviewRulerColor: ThemeColor;\n\n\t\tif (isError) {\n\t\t\t// this is the error case\n\t\t\tmsg = new MarkdownString().appendText(NLS_KB_LAYOUT_ERROR_MESSAGE);\n\t\t\tclassName = 'keybindingError';\n\t\t\tbeforeContentClassName = 'inlineKeybindingError';\n\t\t\toverviewRulerColor = themeColorFromId(overviewRulerError);\n\t\t} else {\n\t\t\t// this is the info case\n\t\t\tif (usLabel && uiLabel !== usLabel) {\n\t\t\t\tmsg = new MarkdownString(\n\t\t\t\t\tnls.localize({\n\t\t\t\t\t\tkey: 'defineKeybinding.kbLayoutLocalAndUSMessage',\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'Please translate maintaining the stars (*) around the placeholders such that they will be rendered in bold.',\n\t\t\t\t\t\t\t'The placeholders will contain a keyboard combination e.g. Ctrl+Shift+/'\n\t\t\t\t\t\t]\n\t\t\t\t\t}, \"**{0}** for your current keyboard layout (**{1}** for US standard).\", uiLabel, usLabel)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmsg = new MarkdownString(\n\t\t\t\t\tnls.localize({\n\t\t\t\t\t\tkey: 'defineKeybinding.kbLayoutLocalMessage',\n\t\t\t\t\t\tcomment: [\n\t\t\t\t\t\t\t'Please translate maintaining the stars (*) around the placeholder such that it will be rendered in bold.',\n\t\t\t\t\t\t\t'The placeholder will contain a keyboard combination e.g. Ctrl+Shift+/'\n\t\t\t\t\t\t]\n\t\t\t\t\t}, \"**{0}** for your current keyboard layout.\", uiLabel)\n\t\t\t\t);\n\t\t\t}\n\t\t\tclassName = 'keybindingInfo';\n\t\t\tbeforeContentClassName = 'inlineKeybindingInfo';\n\t\t\toverviewRulerColor = themeColorFromId(overviewRulerInfo);\n\t\t}\n\n\t\tconst startPosition = model.getPositionAt(keyNode.offset);\n\t\tconst endPosition = model.getPositionAt(keyNode.offset + keyNode.length);\n\t\tconst range = new Range(\n\t\t\tstartPosition.lineNumber, startPosition.column,\n\t\t\tendPosition.lineNumber, endPosition.column\n\t\t);\n\n\t\t// icon + highlight + message decoration\n\t\treturn {\n\t\t\trange: range,\n\t\t\toptions: {\n\t\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\t\tclassName: className,\n\t\t\t\tbeforeContentClassName: beforeContentClassName,\n\t\t\t\thoverMessage: msg,\n\t\t\t\toverviewRuler: {\n\t\t\t\t\tcolor: overviewRulerColor,\n\t\t\t\t\tposition: OverviewRulerLane.Right\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n}\n\nclass DefineKeybindingCommand extends EditorCommand {\n\n\tstatic readonly ID = 'editor.action.defineKeybinding';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DefineKeybindingCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.languageId.isEqualTo('jsonc')),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_K),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!isInterestingEditorModel(editor) || editor.getConfiguration().readOnly) {\n\t\t\treturn;\n\t\t}\n\t\tconst controller = DefineKeybindingController.get(editor);\n\t\tif (controller && controller.keybindingWidgetRenderer) {\n\t\t\tcontroller.keybindingWidgetRenderer.showDefineKeybindingWidget();\n\t\t}\n\t}\n}\n\nfunction isInterestingEditorModel(editor: ICodeEditor): boolean {\n\tconst model = editor.getModel();\n\tif (!model) {\n\t\treturn false;\n\t}\n\tconst url = model.uri.toString();\n\treturn INTERESTING_FILE.test(url);\n}\n\nregisterEditorContribution(DefineKeybindingController);\nregisterEditorCommand(new DefineKeybindingCommand());\n"]}]}