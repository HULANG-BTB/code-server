{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostSCM.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostSCM.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/base/common/event\", \"vs/base/common/decorators\", \"vs/base/common/lifecycle\", \"vs/base/common/async\", \"../common/extHost.protocol\", \"vs/base/common/arrays\", \"vs/base/common/comparers\", \"vs/platform/log/common/log\", \"vs/platform/extensions/common/extensions\"], function (require, exports, uri_1, event_1, decorators_1, lifecycle_1, async_1, extHost_protocol_1, arrays_1, comparers_1, log_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getIconPath(decorations) {\n        if (!decorations) {\n            return undefined;\n        }\n        else if (typeof decorations.iconPath === 'string') {\n            return uri_1.URI.file(decorations.iconPath).toString();\n        }\n        else if (decorations.iconPath) {\n            return `${decorations.iconPath}`;\n        }\n        return undefined;\n    }\n    function compareResourceThemableDecorations(a, b) {\n        if (!a.iconPath && !b.iconPath) {\n            return 0;\n        }\n        else if (!a.iconPath) {\n            return -1;\n        }\n        else if (!b.iconPath) {\n            return 1;\n        }\n        const aPath = typeof a.iconPath === 'string' ? a.iconPath : a.iconPath.fsPath;\n        const bPath = typeof b.iconPath === 'string' ? b.iconPath : b.iconPath.fsPath;\n        return comparers_1.comparePaths(aPath, bPath);\n    }\n    function compareResourceStatesDecorations(a, b) {\n        let result = 0;\n        if (a.strikeThrough !== b.strikeThrough) {\n            return a.strikeThrough ? 1 : -1;\n        }\n        if (a.faded !== b.faded) {\n            return a.faded ? 1 : -1;\n        }\n        if (a.tooltip !== b.tooltip) {\n            return (a.tooltip || '').localeCompare(b.tooltip || '');\n        }\n        result = compareResourceThemableDecorations(a, b);\n        if (result !== 0) {\n            return result;\n        }\n        if (a.light && b.light) {\n            result = compareResourceThemableDecorations(a.light, b.light);\n        }\n        else if (a.light) {\n            return 1;\n        }\n        else if (b.light) {\n            return -1;\n        }\n        if (result !== 0) {\n            return result;\n        }\n        if (a.dark && b.dark) {\n            result = compareResourceThemableDecorations(a.dark, b.dark);\n        }\n        else if (a.dark) {\n            return 1;\n        }\n        else if (b.dark) {\n            return -1;\n        }\n        return result;\n    }\n    function compareResourceStates(a, b) {\n        let result = comparers_1.comparePaths(a.resourceUri.fsPath, b.resourceUri.fsPath, true);\n        if (result !== 0) {\n            return result;\n        }\n        if (a.decorations && b.decorations) {\n            result = compareResourceStatesDecorations(a.decorations, b.decorations);\n        }\n        else if (a.decorations) {\n            return 1;\n        }\n        else if (b.decorations) {\n            return -1;\n        }\n        return result;\n    }\n    function compareArgs(a, b) {\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] !== b[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function commandEquals(a, b) {\n        return a.command === b.command\n            && a.title === b.title\n            && a.tooltip === b.tooltip\n            && (a.arguments && b.arguments ? compareArgs(a.arguments, b.arguments) : a.arguments === b.arguments);\n    }\n    function commandListEquals(a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (!commandEquals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    class ExtHostSCMInputBox {\n        constructor(_extension, _proxy, _sourceControlHandle) {\n            this._extension = _extension;\n            this._proxy = _proxy;\n            this._sourceControlHandle = _sourceControlHandle;\n            this._value = '';\n            this._onDidChange = new event_1.Emitter();\n            this._placeholder = '';\n            this._visible = true;\n            // noop\n        }\n        get value() {\n            return this._value;\n        }\n        set value(value) {\n            this._proxy.$setInputBoxValue(this._sourceControlHandle, value);\n            this.updateValue(value);\n        }\n        get onDidChange() {\n            return this._onDidChange.event;\n        }\n        get placeholder() {\n            return this._placeholder;\n        }\n        set placeholder(placeholder) {\n            this._proxy.$setInputBoxPlaceholder(this._sourceControlHandle, placeholder);\n            this._placeholder = placeholder;\n        }\n        get validateInput() {\n            if (!this._extension.enableProposedApi) {\n                throw new Error(`[${this._extension.identifier.value}]: Proposed API is only available when running out of dev or with the following command line switch: --enable-proposed-api ${this._extension.identifier.value}`);\n            }\n            return this._validateInput;\n        }\n        set validateInput(fn) {\n            if (!this._extension.enableProposedApi) {\n                throw new Error(`[${this._extension.identifier.value}]: Proposed API is only available when running out of dev or with the following command line switch: --enable-proposed-api ${this._extension.identifier.value}`);\n            }\n            if (fn && typeof fn !== 'function') {\n                console.warn('Invalid SCM input box validation function');\n                return;\n            }\n            this._validateInput = fn;\n            this._proxy.$setValidationProviderIsEnabled(this._sourceControlHandle, !!fn);\n        }\n        get visible() {\n            return this._visible;\n        }\n        set visible(visible) {\n            visible = !!visible;\n            this._visible = visible;\n            this._proxy.$setInputBoxVisibility(this._sourceControlHandle, visible);\n        }\n        $onInputBoxValueChange(value) {\n            this.updateValue(value);\n        }\n        updateValue(value) {\n            this._value = value;\n            this._onDidChange.fire(value);\n        }\n    }\n    exports.ExtHostSCMInputBox = ExtHostSCMInputBox;\n    class ExtHostSourceControlResourceGroup {\n        constructor(_proxy, _commands, _sourceControlHandle, _id, _label) {\n            this._proxy = _proxy;\n            this._commands = _commands;\n            this._sourceControlHandle = _sourceControlHandle;\n            this._id = _id;\n            this._label = _label;\n            this._resourceHandlePool = 0;\n            this._resourceStates = [];\n            this._resourceStatesMap = new Map();\n            this._resourceStatesCommandsMap = new Map();\n            this._onDidUpdateResourceStates = new event_1.Emitter();\n            this.onDidUpdateResourceStates = this._onDidUpdateResourceStates.event;\n            this._onDidDispose = new event_1.Emitter();\n            this.onDidDispose = this._onDidDispose.event;\n            this._handlesSnapshot = [];\n            this._resourceSnapshot = [];\n            this._hideWhenEmpty = undefined;\n            this.handle = ExtHostSourceControlResourceGroup._handlePool++;\n            this._disposables = [];\n            this._proxy.$registerGroup(_sourceControlHandle, this.handle, _id, _label);\n        }\n        get id() { return this._id; }\n        get label() { return this._label; }\n        set label(label) {\n            this._label = label;\n            this._proxy.$updateGroupLabel(this._sourceControlHandle, this.handle, label);\n        }\n        get hideWhenEmpty() { return this._hideWhenEmpty; }\n        set hideWhenEmpty(hideWhenEmpty) {\n            this._hideWhenEmpty = hideWhenEmpty;\n            this._proxy.$updateGroup(this._sourceControlHandle, this.handle, { hideWhenEmpty });\n        }\n        get resourceStates() { return [...this._resourceStates]; }\n        set resourceStates(resources) {\n            this._resourceStates = [...resources];\n            this._onDidUpdateResourceStates.fire();\n        }\n        getResourceState(handle) {\n            return this._resourceStatesMap.get(handle);\n        }\n        $executeResourceCommand(handle) {\n            const command = this._resourceStatesCommandsMap.get(handle);\n            if (!command) {\n                return Promise.resolve(undefined);\n            }\n            return async_1.asPromise(() => this._commands.executeCommand(command.command, ...(command.arguments || [])));\n        }\n        _takeResourceStateSnapshot() {\n            const snapshot = [...this._resourceStates].sort(compareResourceStates);\n            const diffs = arrays_1.sortedDiff(this._resourceSnapshot, snapshot, compareResourceStates);\n            const splices = diffs.map(diff => {\n                const toInsert = diff.toInsert.map(r => {\n                    const handle = this._resourceHandlePool++;\n                    this._resourceStatesMap.set(handle, r);\n                    const sourceUri = r.resourceUri;\n                    const iconPath = getIconPath(r.decorations);\n                    const lightIconPath = r.decorations && getIconPath(r.decorations.light) || iconPath;\n                    const darkIconPath = r.decorations && getIconPath(r.decorations.dark) || iconPath;\n                    const icons = [];\n                    if (r.command) {\n                        this._resourceStatesCommandsMap.set(handle, r.command);\n                    }\n                    if (lightIconPath) {\n                        icons.push(lightIconPath);\n                    }\n                    if (darkIconPath && (darkIconPath !== lightIconPath)) {\n                        icons.push(darkIconPath);\n                    }\n                    const tooltip = (r.decorations && r.decorations.tooltip) || '';\n                    const strikeThrough = r.decorations && !!r.decorations.strikeThrough;\n                    const faded = r.decorations && !!r.decorations.faded;\n                    const source = r.decorations && r.decorations.source || undefined;\n                    const letter = r.decorations && r.decorations.letter || undefined;\n                    const color = r.decorations && r.decorations.color || undefined;\n                    const rawResource = [handle, sourceUri, icons, tooltip, strikeThrough, faded, source, letter, color];\n                    return { rawResource, handle };\n                });\n                return { start: diff.start, deleteCount: diff.deleteCount, toInsert };\n            });\n            const rawResourceSplices = splices\n                .map(({ start, deleteCount, toInsert }) => [start, deleteCount, toInsert.map(i => i.rawResource)]);\n            const reverseSplices = splices.reverse();\n            for (const { start, deleteCount, toInsert } of reverseSplices) {\n                const handles = toInsert.map(i => i.handle);\n                const handlesToDelete = this._handlesSnapshot.splice(start, deleteCount, ...handles);\n                for (const handle of handlesToDelete) {\n                    this._resourceStatesMap.delete(handle);\n                    this._resourceStatesCommandsMap.delete(handle);\n                }\n            }\n            this._resourceSnapshot = snapshot;\n            return rawResourceSplices;\n        }\n        dispose() {\n            this._proxy.$unregisterGroup(this._sourceControlHandle, this.handle);\n            this._disposables = lifecycle_1.dispose(this._disposables);\n            this._onDidDispose.fire();\n        }\n    }\n    ExtHostSourceControlResourceGroup._handlePool = 0;\n    class ExtHostSourceControl {\n        constructor(_extension, _proxy, _commands, _id, _label, _rootUri) {\n            this._proxy = _proxy;\n            this._commands = _commands;\n            this._id = _id;\n            this._label = _label;\n            this._rootUri = _rootUri;\n            this._groups = new Map();\n            this._count = undefined;\n            this._quickDiffProvider = undefined;\n            this._commitTemplate = undefined;\n            this._acceptInputCommand = undefined;\n            this._statusBarCommands = undefined;\n            this._selected = false;\n            this._onDidChangeSelection = new event_1.Emitter();\n            this.onDidChangeSelection = this._onDidChangeSelection.event;\n            this.handle = ExtHostSourceControl._handlePool++;\n            this.updatedResourceGroups = new Set();\n            this._inputBox = new ExtHostSCMInputBox(_extension, this._proxy, this.handle);\n            this._proxy.$registerSourceControl(this.handle, _id, _label, _rootUri);\n        }\n        get id() {\n            return this._id;\n        }\n        get label() {\n            return this._label;\n        }\n        get rootUri() {\n            return this._rootUri;\n        }\n        get inputBox() { return this._inputBox; }\n        get count() {\n            return this._count;\n        }\n        set count(count) {\n            if (this._count === count) {\n                return;\n            }\n            this._count = count;\n            this._proxy.$updateSourceControl(this.handle, { count });\n        }\n        get quickDiffProvider() {\n            return this._quickDiffProvider;\n        }\n        set quickDiffProvider(quickDiffProvider) {\n            this._quickDiffProvider = quickDiffProvider;\n            this._proxy.$updateSourceControl(this.handle, { hasQuickDiffProvider: !!quickDiffProvider });\n        }\n        get commitTemplate() {\n            return this._commitTemplate;\n        }\n        set commitTemplate(commitTemplate) {\n            this._commitTemplate = commitTemplate;\n            this._proxy.$updateSourceControl(this.handle, { commitTemplate });\n        }\n        get acceptInputCommand() {\n            return this._acceptInputCommand;\n        }\n        set acceptInputCommand(acceptInputCommand) {\n            this._acceptInputCommand = acceptInputCommand;\n            const internal = this._commands.converter.toInternal(acceptInputCommand);\n            this._proxy.$updateSourceControl(this.handle, { acceptInputCommand: internal });\n        }\n        get statusBarCommands() {\n            return this._statusBarCommands;\n        }\n        set statusBarCommands(statusBarCommands) {\n            if (this._statusBarCommands && statusBarCommands && commandListEquals(this._statusBarCommands, statusBarCommands)) {\n                return;\n            }\n            this._statusBarCommands = statusBarCommands;\n            const internal = (statusBarCommands || []).map(c => this._commands.converter.toInternal(c));\n            this._proxy.$updateSourceControl(this.handle, { statusBarCommands: internal });\n        }\n        get selected() {\n            return this._selected;\n        }\n        createResourceGroup(id, label) {\n            const group = new ExtHostSourceControlResourceGroup(this._proxy, this._commands, this.handle, id, label);\n            const updateListener = group.onDidUpdateResourceStates(() => {\n                this.updatedResourceGroups.add(group);\n                this.eventuallyUpdateResourceStates();\n            });\n            event_1.Event.once(group.onDidDispose)(() => {\n                this.updatedResourceGroups.delete(group);\n                updateListener.dispose();\n                this._groups.delete(group.handle);\n            });\n            this._groups.set(group.handle, group);\n            return group;\n        }\n        eventuallyUpdateResourceStates() {\n            const splices = [];\n            this.updatedResourceGroups.forEach(group => {\n                const snapshot = group._takeResourceStateSnapshot();\n                if (snapshot.length === 0) {\n                    return;\n                }\n                splices.push([group.handle, snapshot]);\n            });\n            if (splices.length > 0) {\n                this._proxy.$spliceResourceStates(this.handle, splices);\n            }\n            this.updatedResourceGroups.clear();\n        }\n        getResourceGroup(handle) {\n            return this._groups.get(handle);\n        }\n        setSelectionState(selected) {\n            this._selected = selected;\n            this._onDidChangeSelection.fire(selected);\n        }\n        dispose() {\n            this._groups.forEach(group => group.dispose());\n            this._proxy.$unregisterSourceControl(this.handle);\n        }\n    }\n    ExtHostSourceControl._handlePool = 0;\n    __decorate([\n        decorators_1.debounce(100)\n    ], ExtHostSourceControl.prototype, \"eventuallyUpdateResourceStates\", null);\n    let ExtHostSCM = class ExtHostSCM {\n        constructor(mainContext, _commands, logService) {\n            this._commands = _commands;\n            this.logService = logService;\n            this._sourceControls = new Map();\n            this._sourceControlsByExtension = new Map();\n            this._onDidChangeActiveProvider = new event_1.Emitter();\n            this._selectedSourceControlHandles = new Set();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadSCM);\n            _commands.registerArgumentProcessor({\n                processArgument: arg => {\n                    if (arg && arg.$mid === 3) {\n                        const sourceControl = this._sourceControls.get(arg.sourceControlHandle);\n                        if (!sourceControl) {\n                            return arg;\n                        }\n                        const group = sourceControl.getResourceGroup(arg.groupHandle);\n                        if (!group) {\n                            return arg;\n                        }\n                        return group.getResourceState(arg.handle);\n                    }\n                    else if (arg && arg.$mid === 4) {\n                        const sourceControl = this._sourceControls.get(arg.sourceControlHandle);\n                        if (!sourceControl) {\n                            return arg;\n                        }\n                        return sourceControl.getResourceGroup(arg.groupHandle);\n                    }\n                    else if (arg && arg.$mid === 5) {\n                        const sourceControl = this._sourceControls.get(arg.handle);\n                        if (!sourceControl) {\n                            return arg;\n                        }\n                        return sourceControl;\n                    }\n                    return arg;\n                }\n            });\n        }\n        get onDidChangeActiveProvider() { return this._onDidChangeActiveProvider.event; }\n        createSourceControl(extension, id, label, rootUri) {\n            this.logService.trace('ExtHostSCM#createSourceControl', extension.identifier.value, id, label, rootUri);\n            const handle = ExtHostSCM._handlePool++;\n            const sourceControl = new ExtHostSourceControl(extension, this._proxy, this._commands, id, label, rootUri);\n            this._sourceControls.set(handle, sourceControl);\n            const sourceControls = this._sourceControlsByExtension.get(extensions_1.ExtensionIdentifier.toKey(extension.identifier)) || [];\n            sourceControls.push(sourceControl);\n            this._sourceControlsByExtension.set(extensions_1.ExtensionIdentifier.toKey(extension.identifier), sourceControls);\n            return sourceControl;\n        }\n        // Deprecated\n        getLastInputBox(extension) {\n            this.logService.trace('ExtHostSCM#getLastInputBox', extension.identifier.value);\n            const sourceControls = this._sourceControlsByExtension.get(extensions_1.ExtensionIdentifier.toKey(extension.identifier));\n            const sourceControl = sourceControls && sourceControls[sourceControls.length - 1];\n            return sourceControl && sourceControl.inputBox;\n        }\n        $provideOriginalResource(sourceControlHandle, uriComponents, token) {\n            const uri = uri_1.URI.revive(uriComponents);\n            this.logService.trace('ExtHostSCM#$provideOriginalResource', sourceControlHandle, uri.toString());\n            const sourceControl = this._sourceControls.get(sourceControlHandle);\n            if (!sourceControl || !sourceControl.quickDiffProvider || !sourceControl.quickDiffProvider.provideOriginalResource) {\n                return Promise.resolve(null);\n            }\n            return async_1.asPromise(() => sourceControl.quickDiffProvider.provideOriginalResource(uri, token))\n                .then(r => r || null);\n        }\n        $onInputBoxValueChange(sourceControlHandle, value) {\n            this.logService.trace('ExtHostSCM#$onInputBoxValueChange', sourceControlHandle);\n            const sourceControl = this._sourceControls.get(sourceControlHandle);\n            if (!sourceControl) {\n                return Promise.resolve(undefined);\n            }\n            sourceControl.inputBox.$onInputBoxValueChange(value);\n            return Promise.resolve(undefined);\n        }\n        $executeResourceCommand(sourceControlHandle, groupHandle, handle) {\n            this.logService.trace('ExtHostSCM#$executeResourceCommand', sourceControlHandle, groupHandle, handle);\n            const sourceControl = this._sourceControls.get(sourceControlHandle);\n            if (!sourceControl) {\n                return Promise.resolve(undefined);\n            }\n            const group = sourceControl.getResourceGroup(groupHandle);\n            if (!group) {\n                return Promise.resolve(undefined);\n            }\n            return group.$executeResourceCommand(handle);\n        }\n        $validateInput(sourceControlHandle, value, cursorPosition) {\n            this.logService.trace('ExtHostSCM#$validateInput', sourceControlHandle);\n            const sourceControl = this._sourceControls.get(sourceControlHandle);\n            if (!sourceControl) {\n                return Promise.resolve(undefined);\n            }\n            if (!sourceControl.inputBox.validateInput) {\n                return Promise.resolve(undefined);\n            }\n            return async_1.asPromise(() => sourceControl.inputBox.validateInput(value, cursorPosition)).then(result => {\n                if (!result) {\n                    return Promise.resolve(undefined);\n                }\n                return Promise.resolve([result.message, result.type]);\n            });\n        }\n        $setSelectedSourceControls(selectedSourceControlHandles) {\n            this.logService.trace('ExtHostSCM#$setSelectedSourceControls', selectedSourceControlHandles);\n            const set = new Set();\n            for (const handle of selectedSourceControlHandles) {\n                set.add(handle);\n            }\n            set.forEach(handle => {\n                if (!this._selectedSourceControlHandles.has(handle)) {\n                    const sourceControl = this._sourceControls.get(handle);\n                    if (!sourceControl) {\n                        return;\n                    }\n                    sourceControl.setSelectionState(true);\n                }\n            });\n            this._selectedSourceControlHandles.forEach(handle => {\n                if (!set.has(handle)) {\n                    const sourceControl = this._sourceControls.get(handle);\n                    if (!sourceControl) {\n                        return;\n                    }\n                    sourceControl.setSelectionState(false);\n                }\n            });\n            this._selectedSourceControlHandles = set;\n            return Promise.resolve(undefined);\n        }\n    };\n    ExtHostSCM._handlePool = 0;\n    ExtHostSCM = __decorate([\n        __param(2, log_1.ILogService)\n    ], ExtHostSCM);\n    exports.ExtHostSCM = ExtHostSCM;\n});\n",null]}