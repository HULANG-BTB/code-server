{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/contrib/terminal/node/windowsShellHelper\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/contrib/terminal/browser/terminalProcessManager\", \"vs/workbench/contrib/terminal/node/terminalProcess\"], function (require, exports, nls, windowsShellHelper_1, instantiation_1, terminalProcessManager_1, terminalProcess_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let Terminal;\n    /**\n     * A service used by TerminalInstance (and components owned by it) that allows it to break its\n     * dependency on electron-browser and node layers, while at the same time avoiding a cyclic\n     * dependency on ITerminalService.\n     */\n    let TerminalInstanceService = class TerminalInstanceService {\n        constructor(_instantiationService) {\n            this._instantiationService = _instantiationService;\n        }\n        getXtermConstructor() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!Terminal) {\n                    Terminal = (yield new Promise((resolve_1, reject_1) => { require(['vscode-xterm'], resolve_1, reject_1); })).Terminal;\n                    // Enable xterm.js addons\n                    Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/search/search'));\n                    Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/webLinks/webLinks'));\n                    Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/winptyCompat/winptyCompat'));\n                    // Localize strings\n                    Terminal.strings.blankLine = nls.localize('terminal.integrated.a11yBlankLine', 'Blank line');\n                    Terminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');\n                    Terminal.strings.tooMuchOutput = nls.localize('terminal.integrated.a11yTooMuchOutput', 'Too much output to announce, navigate to rows manually to read');\n                }\n                return Terminal;\n            });\n        }\n        createWindowsShellHelper(shellProcessId, instance, xterm) {\n            return new windowsShellHelper_1.WindowsShellHelper(shellProcessId, instance, xterm);\n        }\n        createTerminalProcessManager(id, configHelper) {\n            return this._instantiationService.createInstance(terminalProcessManager_1.TerminalProcessManager, id, configHelper);\n        }\n        createTerminalProcess(shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty) {\n            return new terminalProcess_1.TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty);\n        }\n    };\n    TerminalInstanceService = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], TerminalInstanceService);\n    exports.TerminalInstanceService = TerminalInstanceService;\n});\n",null]}