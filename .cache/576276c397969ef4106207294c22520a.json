{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar keybindingLabels_1 = require(\"vs/base/common/keybindingLabels\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar BaseResolvedKeybinding = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseResolvedKeybinding, _super);\n    function BaseResolvedKeybinding(os, parts) {\n        var _this = _super.call(this) || this;\n        if (parts.length === 0) {\n            throw errors_1.illegalArgument(\"parts\");\n        }\n        _this._os = os;\n        _this._parts = parts;\n        return _this;\n    }\n    BaseResolvedKeybinding.prototype.getLabel = function () {\n        var _this = this;\n        return keybindingLabels_1.UILabelProvider.toLabel(this._os, this._parts, function (keybinding) { return _this._getLabel(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype.getAriaLabel = function () {\n        var _this = this;\n        return keybindingLabels_1.AriaLabelProvider.toLabel(this._os, this._parts, function (keybinding) { return _this._getAriaLabel(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype.getElectronAccelerator = function () {\n        var _this = this;\n        if (this._parts.length > 1) {\n            // Electron cannot handle chords\n            return null;\n        }\n        return keybindingLabels_1.ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, function (keybinding) { return _this._getElectronAccelerator(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype.getUserSettingsLabel = function () {\n        var _this = this;\n        return keybindingLabels_1.UserSettingsLabelProvider.toLabel(this._os, this._parts, function (keybinding) { return _this._getUserSettingsLabel(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype.isWYSIWYG = function () {\n        var _this = this;\n        return this._parts.every(function (keybinding) { return _this._isWYSIWYG(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype.isChord = function () {\n        return (this._parts.length > 1);\n    };\n    BaseResolvedKeybinding.prototype.getParts = function () {\n        var _this = this;\n        return this._parts.map(function (keybinding) { return _this._getPart(keybinding); });\n    };\n    BaseResolvedKeybinding.prototype._getPart = function (keybinding) {\n        return new keyCodes_1.ResolvedKeybindingPart(keybinding.ctrlKey, keybinding.shiftKey, keybinding.altKey, keybinding.metaKey, this._getLabel(keybinding), this._getAriaLabel(keybinding));\n    };\n    BaseResolvedKeybinding.prototype.getDispatchParts = function () {\n        var _this = this;\n        return this._parts.map(function (keybinding) { return _this._getDispatchPart(keybinding); });\n    };\n    return BaseResolvedKeybinding;\n}(keyCodes_1.ResolvedKeybinding));\nexports.BaseResolvedKeybinding = BaseResolvedKeybinding;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/baseResolvedKeybinding.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,gDAAwD;AACxD,oEAA6J;AAC7J,oDAAqF;AAErF;IAA0E,kDAAkB;IAK3F,gCAAY,EAAmB,EAAE,KAAU;QAA3C,YACC,iBAAO,SAMP;QALA,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,wBAAe,CAAC,OAAO,CAAC,CAAC;SAC/B;QACD,KAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;IACrB,CAAC;IAEM,yCAAQ,GAAf;QAAA,iBAEC;QADA,OAAO,kCAAe,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAA1B,CAA0B,CAAC,CAAC;IACnG,CAAC;IAEM,6CAAY,GAAnB;QAAA,iBAEC;QADA,OAAO,oCAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,UAAU,CAAC,EAA9B,CAA8B,CAAC,CAAC;IACzG,CAAC;IAEM,uDAAsB,GAA7B;QAAA,iBAMC;QALA,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,gCAAgC;YAChC,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,mDAAgC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,EAAxC,CAAwC,CAAC,CAAC;IAClI,CAAC;IAEM,qDAAoB,GAA3B;QAAA,iBAEC;QADA,OAAO,4CAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAtC,CAAsC,CAAC,CAAC;IACzH,CAAC;IAEM,0CAAS,GAAhB;QAAA,iBAEC;QADA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAA3B,CAA2B,CAAC,CAAC;IACvE,CAAC;IAEM,wCAAO,GAAd;QACC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACjC,CAAC;IAEM,yCAAQ,GAAf;QAAA,iBAEC;QADA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;IACnE,CAAC;IAEO,yCAAQ,GAAhB,UAAiB,UAAa;QAC7B,OAAO,IAAI,iCAAsB,CAChC,UAAU,CAAC,OAAO,EAClB,UAAU,CAAC,QAAQ,EACnB,UAAU,CAAC,MAAM,EACjB,UAAU,CAAC,OAAO,EAClB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAC1B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAC9B,CAAC;IACH,CAAC;IAEM,iDAAgB,GAAvB;QAAA,iBAEC;QADA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,UAAU,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,EAAjC,CAAiC,CAAC,CAAC;IAC3E,CAAC;IAQF,6BAAC;AAAD,CAAC,AAnED,CAA0E,6BAAkB,GAmE3F;AAnEqB,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { Modifiers, UILabelProvider, AriaLabelProvider, ElectronAcceleratorLabelProvider, UserSettingsLabelProvider } from 'vs/base/common/keybindingLabels';\nimport { ResolvedKeybinding, ResolvedKeybindingPart } from 'vs/base/common/keyCodes';\n\nexport abstract class BaseResolvedKeybinding<T extends Modifiers> extends ResolvedKeybinding {\n\n\tprotected readonly _os: OperatingSystem;\n\tprotected readonly _parts: T[];\n\n\tconstructor(os: OperatingSystem, parts: T[]) {\n\t\tsuper();\n\t\tif (parts.length === 0) {\n\t\t\tthrow illegalArgument(`parts`);\n\t\t}\n\t\tthis._os = os;\n\t\tthis._parts = parts;\n\t}\n\n\tpublic getLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getLabel(keybinding));\n\t}\n\n\tpublic getAriaLabel(): string | null {\n\t\treturn AriaLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getAriaLabel(keybinding));\n\t}\n\n\tpublic getElectronAccelerator(): string | null {\n\t\tif (this._parts.length > 1) {\n\t\t\t// Electron cannot handle chords\n\t\t\treturn null;\n\t\t}\n\t\treturn ElectronAcceleratorLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getElectronAccelerator(keybinding));\n\t}\n\n\tpublic getUserSettingsLabel(): string | null {\n\t\treturn UserSettingsLabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUserSettingsLabel(keybinding));\n\t}\n\n\tpublic isWYSIWYG(): boolean {\n\t\treturn this._parts.every((keybinding) => this._isWYSIWYG(keybinding));\n\t}\n\n\tpublic isChord(): boolean {\n\t\treturn (this._parts.length > 1);\n\t}\n\n\tpublic getParts(): ResolvedKeybindingPart[] {\n\t\treturn this._parts.map((keybinding) => this._getPart(keybinding));\n\t}\n\n\tprivate _getPart(keybinding: T): ResolvedKeybindingPart {\n\t\treturn new ResolvedKeybindingPart(\n\t\t\tkeybinding.ctrlKey,\n\t\t\tkeybinding.shiftKey,\n\t\t\tkeybinding.altKey,\n\t\t\tkeybinding.metaKey,\n\t\t\tthis._getLabel(keybinding),\n\t\t\tthis._getAriaLabel(keybinding)\n\t\t);\n\t}\n\n\tpublic getDispatchParts(): (string | null)[] {\n\t\treturn this._parts.map((keybinding) => this._getDispatchPart(keybinding));\n\t}\n\n\tprotected abstract _getLabel(keybinding: T): string | null;\n\tprotected abstract _getAriaLabel(keybinding: T): string | null;\n\tprotected abstract _getElectronAccelerator(keybinding: T): string | null;\n\tprotected abstract _getUserSettingsLabel(keybinding: T): string | null;\n\tprotected abstract _isWYSIWYG(keybinding: T): boolean;\n\tprotected abstract _getDispatchPart(keybinding: T): string | null;\n}\n"]}]}