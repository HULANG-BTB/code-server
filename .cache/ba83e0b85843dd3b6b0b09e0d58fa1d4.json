{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar nls_1 = require(\"vs/nls\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar async_1 = require(\"vs/base/common/async\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar platform_2 = require(\"vs/base/common/platform\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar SettingsChangeRelauncher = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsChangeRelauncher, _super);\n    function SettingsChangeRelauncher(windowsService, windowService, configurationService, envService, dialogService, contextService) {\n        var _this = _super.call(this) || this;\n        _this.windowsService = windowsService;\n        _this.windowService = windowService;\n        _this.configurationService = configurationService;\n        _this.envService = envService;\n        _this.dialogService = dialogService;\n        _this.contextService = contextService;\n        _this.onConfigurationChange(configurationService.getValue(), false);\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationChange(_this.configurationService.getValue(), true); }));\n        return _this;\n    }\n    SettingsChangeRelauncher.prototype.onConfigurationChange = function (config, notify) {\n        var _this = this;\n        var changed = false;\n        // Titlebar style\n        if (config.window && config.window.titleBarStyle !== this.titleBarStyle && (config.window.titleBarStyle === 'native' || config.window.titleBarStyle === 'custom')) {\n            this.titleBarStyle = config.window.titleBarStyle;\n            changed = true;\n        }\n        // macOS: Native tabs\n        if (platform_2.isNative && browser_1.isMacintosh && config.window && typeof config.window.nativeTabs === 'boolean' && config.window.nativeTabs !== this.nativeTabs) {\n            this.nativeTabs = config.window.nativeTabs;\n            changed = true;\n        }\n        // macOS: Native fullscreen\n        if (platform_2.isNative && browser_1.isMacintosh && config.window && typeof config.window.nativeFullScreen === 'boolean' && config.window.nativeFullScreen !== this.nativeFullScreen) {\n            this.nativeFullScreen = config.window.nativeFullScreen;\n            changed = true;\n        }\n        // macOS: Click through (accept first mouse)\n        if (browser_1.isMacintosh && config.window && typeof config.window.clickThroughInactive === 'boolean' && config.window.clickThroughInactive !== this.clickThroughInactive) {\n            this.clickThroughInactive = config.window.clickThroughInactive;\n            changed = true;\n        }\n        // Update channel\n        if (config.update && typeof config.update.mode === 'string' && config.update.mode !== this.updateMode) {\n            this.updateMode = config.update.mode;\n            changed = true;\n        }\n        // Crash reporter\n        if (config.telemetry && typeof config.telemetry.enableCrashReporter === 'boolean' && config.telemetry.enableCrashReporter !== this.enableCrashReporter) {\n            this.enableCrashReporter = config.telemetry.enableCrashReporter;\n            changed = true;\n        }\n        // Experimental File Watcher\n        if (config.files && typeof config.files.useExperimentalFileWatcher === 'boolean' && config.files.useExperimentalFileWatcher !== this.experimentalFileWatcher) {\n            this.experimentalFileWatcher = config.files.useExperimentalFileWatcher;\n            changed = true;\n        }\n        // File Watcher Excludes (only if in folder workspace mode)\n        if (!this.experimentalFileWatcher && this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n            if (config.files && typeof config.files.watcherExclude === 'object' && !objects_1.equals(config.files.watcherExclude, this.fileWatcherExclude)) {\n                this.fileWatcherExclude = config.files.watcherExclude;\n                changed = true;\n            }\n        }\n        // macOS: Touchbar config\n        if (browser_1.isMacintosh && config.keyboard && config.keyboard.touchbar && typeof config.keyboard.touchbar.enabled === 'boolean' && config.keyboard.touchbar.enabled !== this.touchbarEnabled) {\n            this.touchbarEnabled = config.keyboard.touchbar.enabled;\n            changed = true;\n        }\n        // Tree horizontal scrolling support\n        if (config.workbench && config.workbench.list && typeof config.workbench.list.horizontalScrolling === 'boolean' && config.workbench.list.horizontalScrolling !== this.treeHorizontalScrolling) {\n            this.treeHorizontalScrolling = config.workbench.list.horizontalScrolling;\n            changed = true;\n        }\n        // Workbench Grid Layout\n        if (config.workbench && typeof config.workbench.useExperimentalGridLayout === 'boolean' && config.workbench.useExperimentalGridLayout !== this.useGridLayout) {\n            this.useGridLayout = config.workbench.useExperimentalGridLayout;\n            changed = true;\n        }\n        // Notify only when changed and we are the focused window (avoids notification spam across windows)\n        if (notify && changed) {\n            this.doConfirm(nls_1.localize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\"), nls_1.localize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.envService.appNameLong), nls_1.localize('restart', \"&&Restart\"), function () { return _this.windowsService.relaunch(Object.create(null)); });\n        }\n    };\n    SettingsChangeRelauncher.prototype.doConfirm = function (message, detail, primaryButton, confirmed) {\n        var _this = this;\n        this.windowService.isFocused().then(function (focused) {\n            if (focused) {\n                return _this.dialogService.confirm({\n                    type: 'info',\n                    message: message,\n                    detail: detail,\n                    primaryButton: primaryButton\n                }).then(function (res) {\n                    if (res.confirmed) {\n                        confirmed();\n                    }\n                });\n            }\n            return undefined;\n        });\n    };\n    SettingsChangeRelauncher = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowsService),\n        tslib_1.__param(1, windows_1.IWindowService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, dialogs_1.IDialogService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService)\n    ], SettingsChangeRelauncher);\n    return SettingsChangeRelauncher;\n}(lifecycle_1.Disposable));\nexports.SettingsChangeRelauncher = SettingsChangeRelauncher;\nvar WorkspaceChangeExtHostRelauncher = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceChangeExtHostRelauncher, _super);\n    function WorkspaceChangeExtHostRelauncher(contextService, extensionService, windowSevice, environmentService) {\n        var _this = _super.call(this) || this;\n        _this.contextService = contextService;\n        _this.extensionHostRestarter = _this._register(new async_1.RunOnceScheduler(function () {\n            if (!!environmentService.extensionTestsLocationURI) {\n                return; // no restart when in tests: see https://github.com/Microsoft/vscode/issues/66936\n            }\n            if (windowSevice.getConfiguration().remoteAuthority) {\n                windowSevice.reloadWindow(); // TODO aeschli, workaround\n            }\n            else {\n                extensionService.restartExtensionHost();\n            }\n        }, 10));\n        _this.contextService.getCompleteWorkspace()\n            .then(function (workspace) {\n            _this.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n            _this.handleWorkbenchState();\n            _this._register(_this.contextService.onDidChangeWorkbenchState(function () { return setTimeout(function () { return _this.handleWorkbenchState(); }); }));\n        });\n        _this._register(lifecycle_1.toDisposable(function () {\n            if (_this.onDidChangeWorkspaceFoldersUnbind) {\n                _this.onDidChangeWorkspaceFoldersUnbind.dispose();\n            }\n        }));\n        return _this;\n    }\n    WorkspaceChangeExtHostRelauncher.prototype.handleWorkbenchState = function () {\n        var _this = this;\n        // React to folder changes when we are in workspace state\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            // Update our known first folder path if we entered workspace\n            var workspace = this.contextService.getWorkspace();\n            this.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n            // Install workspace folder listener\n            if (!this.onDidChangeWorkspaceFoldersUnbind) {\n                this.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(function () { return _this.onDidChangeWorkspaceFolders(); });\n            }\n        }\n        // Ignore the workspace folder changes in EMPTY or FOLDER state\n        else {\n            this.onDidChangeWorkspaceFoldersUnbind = lifecycle_1.dispose(this.onDidChangeWorkspaceFoldersUnbind);\n        }\n    };\n    WorkspaceChangeExtHostRelauncher.prototype.onDidChangeWorkspaceFolders = function () {\n        var workspace = this.contextService.getWorkspace();\n        // Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n        var newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n        if (!resources_1.isEqual(this.firstFolderResource, newFirstFolderResource, !platform_2.isLinux)) {\n            this.firstFolderResource = newFirstFolderResource;\n            this.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n        }\n    };\n    WorkspaceChangeExtHostRelauncher = tslib_1.__decorate([\n        tslib_1.__param(0, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(1, extensions_1.IExtensionService),\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, environment_1.IEnvironmentService)\n    ], WorkspaceChangeExtHostRelauncher);\n    return WorkspaceChangeExtHostRelauncher;\n}(lifecycle_1.Disposable));\nexports.WorkspaceChangeExtHostRelauncher = WorkspaceChangeExtHostRelauncher;\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, lifecycle_2.LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, lifecycle_2.LifecyclePhase.Restored);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWindowsService, IWindowService, IWindowsConfiguration } from 'vs/platform/windows/common/windows';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { localize } from 'vs/nls';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { URI } from 'vs/base/common/uri';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isNative, isLinux } from 'vs/base/common/platform';\nimport { isMacintosh } from 'vs/base/browser/browser';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { equals } from 'vs/base/common/objects';\n\ninterface IConfiguration extends IWindowsConfiguration {\n\tupdate: { mode: string; };\n\ttelemetry: { enableCrashReporter: boolean };\n\tkeyboard: { touchbar: { enabled: boolean } };\n\tworkbench: { list: { horizontalScrolling: boolean }, useExperimentalGridLayout: boolean };\n\tfiles: { useExperimentalFileWatcher: boolean, watcherExclude: object };\n}\n\nexport class SettingsChangeRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate titleBarStyle: 'native' | 'custom';\n\tprivate nativeTabs: boolean;\n\tprivate nativeFullScreen: boolean;\n\tprivate clickThroughInactive: boolean;\n\tprivate updateMode: string;\n\tprivate enableCrashReporter: boolean;\n\tprivate touchbarEnabled: boolean;\n\tprivate treeHorizontalScrolling: boolean;\n\tprivate experimentalFileWatcher: boolean;\n\tprivate fileWatcherExclude: object;\n\tprivate useGridLayout: boolean;\n\n\tconstructor(\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly envService: IEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\n\t\tthis.onConfigurationChange(configurationService.getValue<IConfiguration>(), false);\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(this.configurationService.getValue<IConfiguration>(), true)));\n\t}\n\n\tprivate onConfigurationChange(config: IConfiguration, notify: boolean): void {\n\t\tlet changed = false;\n\n\t\t// Titlebar style\n\t\tif (config.window && config.window.titleBarStyle !== this.titleBarStyle && (config.window.titleBarStyle === 'native' || config.window.titleBarStyle === 'custom')) {\n\t\t\tthis.titleBarStyle = config.window.titleBarStyle;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// macOS: Native tabs\n\t\tif (isNative && isMacintosh && config.window && typeof config.window.nativeTabs === 'boolean' && config.window.nativeTabs !== this.nativeTabs) {\n\t\t\tthis.nativeTabs = config.window.nativeTabs;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// macOS: Native fullscreen\n\t\tif (isNative && isMacintosh && config.window && typeof config.window.nativeFullScreen === 'boolean' && config.window.nativeFullScreen !== this.nativeFullScreen) {\n\t\t\tthis.nativeFullScreen = config.window.nativeFullScreen;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// macOS: Click through (accept first mouse)\n\t\tif (isMacintosh && config.window && typeof config.window.clickThroughInactive === 'boolean' && config.window.clickThroughInactive !== this.clickThroughInactive) {\n\t\t\tthis.clickThroughInactive = config.window.clickThroughInactive;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Update channel\n\t\tif (config.update && typeof config.update.mode === 'string' && config.update.mode !== this.updateMode) {\n\t\t\tthis.updateMode = config.update.mode;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Crash reporter\n\t\tif (config.telemetry && typeof config.telemetry.enableCrashReporter === 'boolean' && config.telemetry.enableCrashReporter !== this.enableCrashReporter) {\n\t\t\tthis.enableCrashReporter = config.telemetry.enableCrashReporter;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Experimental File Watcher\n\t\tif (config.files && typeof config.files.useExperimentalFileWatcher === 'boolean' && config.files.useExperimentalFileWatcher !== this.experimentalFileWatcher) {\n\t\t\tthis.experimentalFileWatcher = config.files.useExperimentalFileWatcher;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// File Watcher Excludes (only if in folder workspace mode)\n\t\tif (!this.experimentalFileWatcher && this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tif (config.files && typeof config.files.watcherExclude === 'object' && !equals(config.files.watcherExclude, this.fileWatcherExclude)) {\n\t\t\t\tthis.fileWatcherExclude = config.files.watcherExclude;\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// macOS: Touchbar config\n\t\tif (isMacintosh && config.keyboard && config.keyboard.touchbar && typeof config.keyboard.touchbar.enabled === 'boolean' && config.keyboard.touchbar.enabled !== this.touchbarEnabled) {\n\t\t\tthis.touchbarEnabled = config.keyboard.touchbar.enabled;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Tree horizontal scrolling support\n\t\tif (config.workbench && config.workbench.list && typeof config.workbench.list.horizontalScrolling === 'boolean' && config.workbench.list.horizontalScrolling !== this.treeHorizontalScrolling) {\n\t\t\tthis.treeHorizontalScrolling = config.workbench.list.horizontalScrolling;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Workbench Grid Layout\n\t\tif (config.workbench && typeof config.workbench.useExperimentalGridLayout === 'boolean' && config.workbench.useExperimentalGridLayout !== this.useGridLayout) {\n\t\t\tthis.useGridLayout = config.workbench.useExperimentalGridLayout;\n\t\t\tchanged = true;\n\t\t}\n\n\t\t// Notify only when changed and we are the focused window (avoids notification spam across windows)\n\t\tif (notify && changed) {\n\t\t\tthis.doConfirm(\n\t\t\t\tlocalize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\"),\n\t\t\t\tlocalize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.envService.appNameLong),\n\t\t\t\tlocalize('restart', \"&&Restart\"),\n\t\t\t\t() => this.windowsService.relaunch(Object.create(null))\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate doConfirm(message: string, detail: string, primaryButton: string, confirmed: () => void): void {\n\t\tthis.windowService.isFocused().then(focused => {\n\t\t\tif (focused) {\n\t\t\t\treturn this.dialogService.confirm({\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tmessage,\n\t\t\t\t\tdetail,\n\t\t\t\t\tprimaryButton\n\t\t\t\t}).then(res => {\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\tconfirmed();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n\nexport class WorkspaceChangeExtHostRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate firstFolderResource?: URI;\n\tprivate extensionHostRestarter: RunOnceScheduler;\n\n\tprivate onDidChangeWorkspaceFoldersUnbind: IDisposable;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWindowService windowSevice: IWindowService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.extensionHostRestarter = this._register(new RunOnceScheduler(() => {\n\t\t\tif (!!environmentService.extensionTestsLocationURI) {\n\t\t\t\treturn; // no restart when in tests: see https://github.com/Microsoft/vscode/issues/66936\n\t\t\t}\n\t\t\tif (windowSevice.getConfiguration().remoteAuthority) {\n\t\t\t\twindowSevice.reloadWindow(); // TODO aeschli, workaround\n\t\t\t} else {\n\t\t\t\textensionService.restartExtensionHost();\n\t\t\t}\n\t\t}, 10));\n\n\t\tthis.contextService.getCompleteWorkspace()\n\t\t\t.then(workspace => {\n\t\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\t\t\tthis.handleWorkbenchState();\n\t\t\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => setTimeout(() => this.handleWorkbenchState())));\n\t\t\t});\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate handleWorkbenchState(): void {\n\n\t\t// React to folder changes when we are in workspace state\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\n\t\t\t// Update our known first folder path if we entered workspace\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\n\t\t\t// Install workspace folder listener\n\t\t\tif (!this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(() => this.onDidChangeWorkspaceFolders());\n\t\t\t}\n\t\t}\n\n\t\t// Ignore the workspace folder changes in EMPTY or FOLDER state\n\t\telse {\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = dispose(this.onDidChangeWorkspaceFoldersUnbind);\n\t\t}\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n\t\tconst newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\tif (!isEqual(this.firstFolderResource, newFirstFolderResource, !isLinux)) {\n\t\t\tthis.firstFolderResource = newFirstFolderResource;\n\n\t\t\tthis.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, LifecyclePhase.Restored);\n"]}]}