{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditingService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditingService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar json = require(\"vs/base/common/json\");\nvar strings = require(\"vs/base/common/strings\");\nvar jsonEdit_1 = require(\"vs/base/common/jsonEdit\");\nvar async_1 = require(\"vs/base/common/async\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar jsonEditing_1 = require(\"vs/workbench/services/configuration/common/jsonEditing\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar JSONEditingService = /** @class */ (function () {\n    function JSONEditingService(fileService, textModelResolverService, textFileService) {\n        this.fileService = fileService;\n        this.textModelResolverService = textModelResolverService;\n        this.textFileService = textFileService;\n        this.queue = new async_1.Queue();\n    }\n    JSONEditingService.prototype.write = function (resource, value, save) {\n        var _this = this;\n        return Promise.resolve(this.queue.queue(function () { return _this.doWriteConfiguration(resource, value, save); })); // queue up writes to prevent race conditions\n    };\n    JSONEditingService.prototype.doWriteConfiguration = function (resource, value, save) {\n        var _this = this;\n        return this.resolveAndValidate(resource, save)\n            .then(function (reference) { return _this.writeToBuffer(reference.object.textEditorModel, value)\n            .then(function () { return reference.dispose(); }); });\n    };\n    JSONEditingService.prototype.writeToBuffer = function (model, value) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var edit;\n            return tslib_1.__generator(this, function (_a) {\n                edit = this.getEdits(model, value)[0];\n                if (this.applyEditsToBuffer(edit, model)) {\n                    return [2 /*return*/, this.textFileService.save(model.uri)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    JSONEditingService.prototype.applyEditsToBuffer = function (edit, model) {\n        var startPosition = model.getPositionAt(edit.offset);\n        var endPosition = model.getPositionAt(edit.offset + edit.length);\n        var range = new range_1.Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n        var currentText = model.getValueInRange(range);\n        if (edit.content !== currentText) {\n            var editOperation = currentText ? editOperation_1.EditOperation.replace(range, edit.content) : editOperation_1.EditOperation.insert(startPosition, edit.content);\n            model.pushEditOperations([new selection_1.Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], function () { return []; });\n            return true;\n        }\n        return false;\n    };\n    JSONEditingService.prototype.getEdits = function (model, configurationValue) {\n        var _a = model.getOptions(), tabSize = _a.tabSize, insertSpaces = _a.insertSpaces;\n        var eol = model.getEOL();\n        var key = configurationValue.key, value = configurationValue.value;\n        // Without key, the entire settings file is being replaced, so we just use JSON.stringify\n        if (!key) {\n            var content = JSON.stringify(value, null, insertSpaces ? strings.repeat(' ', tabSize) : '\\t');\n            return [{\n                    content: content,\n                    length: content.length,\n                    offset: 0\n                }];\n        }\n        return jsonEdit_1.setProperty(model.getValue(), [key], value, { tabSize: tabSize, insertSpaces: insertSpaces, eol: eol });\n    };\n    JSONEditingService.prototype.resolveModelReference = function (resource) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var exists;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.fileService.existsFile(resource)];\n                    case 1:\n                        exists = _a.sent();\n                        if (!!exists) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.fileService.updateContent(resource, '{}', { encoding: 'utf8' })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/, this.textModelResolverService.createModelReference(resource)];\n                }\n            });\n        });\n    };\n    JSONEditingService.prototype.hasParseErrors = function (model) {\n        var parseErrors = [];\n        json.parse(model.getValue(), parseErrors);\n        return parseErrors.length > 0;\n    };\n    JSONEditingService.prototype.resolveAndValidate = function (resource, checkDirty) {\n        var _this = this;\n        return this.resolveModelReference(resource)\n            .then(function (reference) {\n            var model = reference.object.textEditorModel;\n            if (_this.hasParseErrors(model)) {\n                return _this.reject(jsonEditing_1.JSONEditingErrorCode.ERROR_INVALID_FILE);\n            }\n            // Target cannot be dirty if not writing into buffer\n            if (checkDirty && _this.textFileService.isDirty(resource)) {\n                return _this.reject(jsonEditing_1.JSONEditingErrorCode.ERROR_FILE_DIRTY);\n            }\n            return reference;\n        });\n    };\n    JSONEditingService.prototype.reject = function (code) {\n        var message = this.toErrorMessage(code);\n        return Promise.reject(new jsonEditing_1.JSONEditingError(message, code));\n    };\n    JSONEditingService.prototype.toErrorMessage = function (error) {\n        switch (error) {\n            // User issues\n            case jsonEditing_1.JSONEditingErrorCode.ERROR_INVALID_FILE: {\n                return nls.localize('errorInvalidFile', \"Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.\");\n            }\n            case jsonEditing_1.JSONEditingErrorCode.ERROR_FILE_DIRTY: {\n                return nls.localize('errorFileDirty', \"Unable to write into the file because the file is dirty. Please save the file and try again.\");\n            }\n        }\n    };\n    JSONEditingService = tslib_1.__decorate([\n        tslib_1.__param(0, files_1.IFileService),\n        tslib_1.__param(1, resolverService_1.ITextModelService),\n        tslib_1.__param(2, textfiles_1.ITextFileService)\n    ], JSONEditingService);\n    return JSONEditingService;\n}());\nexports.JSONEditingService = JSONEditingService;\nextensions_1.registerSingleton(jsonEditing_1.IJSONEditingService, JSONEditingService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditingService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditingService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,0CAA4C;AAC5C,gDAAkD;AAClD,oDAAsD;AACtD,8CAA6C;AAG7C,qEAAoE;AACpE,qDAAoD;AACpD,6DAA4D;AAC5D,6EAAmF;AACnF,wDAA8D;AAC9D,6EAAwG;AACxG,sFAAiJ;AAEjJ,0EAAgF;AAEhF;IAMC,4BACgC,WAAyB,EACpB,wBAA2C,EAC5C,eAAiC;QAFrC,gBAAW,GAAX,WAAW,CAAc;QACpB,6BAAwB,GAAxB,wBAAwB,CAAmB;QAC5C,oBAAe,GAAf,eAAe,CAAkB;QAEpE,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,EAAQ,CAAC;IAChC,CAAC;IAED,kCAAK,GAAL,UAAM,QAAa,EAAE,KAAiB,EAAE,IAAa;QAArD,iBAEC;QADA,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAM,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,EAAhD,CAAgD,CAAC,CAAC,CAAC,CAAC,6CAA6C;IAChJ,CAAC;IAEO,iDAAoB,GAA5B,UAA6B,QAAa,EAAE,KAAiB,EAAE,IAAa;QAA5E,iBAIC;QAHA,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC;aAC5C,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,EAAE,KAAK,CAAC;aAC5E,IAAI,CAAC,cAAM,OAAA,SAAS,CAAC,OAAO,EAAE,EAAnB,CAAmB,CAAC,EADd,CACc,CAAC,CAAC;IACrC,CAAC;IAEa,0CAAa,GAA3B,UAA4B,KAAiB,EAAE,KAAiB;+CAAG,OAAO;;;gBACnE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;oBACzC,sBAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAC;iBAC5C;;;;KACD;IAEO,+CAAkB,GAA1B,UAA2B,IAAU,EAAE,KAAiB;QACvD,IAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvD,IAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;QACnE,IAAM,KAAK,GAAG,IAAI,aAAK,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QACpH,IAAI,WAAW,GAAG,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,OAAO,KAAK,WAAW,EAAE;YACjC,IAAM,aAAa,GAAG,WAAW,CAAC,CAAC,CAAC,6BAAa,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,6BAAa,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACnI,KAAK,CAAC,kBAAkB,CAAC,CAAC,IAAI,qBAAS,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,cAAM,OAAA,EAAE,EAAF,CAAE,CAAC,CAAC;YACrK,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,qCAAQ,GAAhB,UAAiB,KAAiB,EAAE,kBAA8B;QAC3D,IAAA,uBAA8C,EAA5C,oBAAO,EAAE,8BAAmC,CAAC;QACrD,IAAM,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QACnB,IAAA,4BAAG,EAAE,gCAAK,CAAwB;QAE1C,yFAAyF;QACzF,IAAI,CAAC,GAAG,EAAE;YACT,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAChG,OAAO,CAAC;oBACP,OAAO,SAAA;oBACP,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,MAAM,EAAE,CAAC;iBACT,CAAC,CAAC;SACH;QAED,OAAO,sBAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,SAAA,EAAE,YAAY,cAAA,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;IACpF,CAAC;IAEa,kDAAqB,GAAnC,UAAoC,QAAa;+CAAG,OAAO;;;;4BAC3C,qBAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAA;;wBAApD,MAAM,GAAG,SAA2C;6BACtD,CAAC,MAAM,EAAP,wBAAO;wBACV,qBAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAA;;wBAA1E,SAA0E,CAAC;;4BAE5E,sBAAO,IAAI,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAC;;;;KACpE;IAEO,2CAAc,GAAtB,UAAuB,KAAiB;QACvC,IAAM,WAAW,GAAsB,EAAE,CAAC;QAC1C,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;QAC1C,OAAO,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEO,+CAAkB,GAA1B,UAA2B,QAAa,EAAE,UAAmB;QAA7D,iBAeC;QAdA,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC;aACzC,IAAI,CAAC,UAAA,SAAS;YACd,IAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC;YAE/C,IAAI,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBAC/B,OAAO,KAAI,CAAC,MAAM,CAAuC,kCAAoB,CAAC,kBAAkB,CAAC,CAAC;aAClG;YAED,oDAAoD;YACpD,IAAI,UAAU,IAAI,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACzD,OAAO,KAAI,CAAC,MAAM,CAAuC,kCAAoB,CAAC,gBAAgB,CAAC,CAAC;aAChG;YACD,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mCAAM,GAAd,UAAkB,IAA0B;QAC3C,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,8BAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEO,2CAAc,GAAtB,UAAuB,KAA2B;QACjD,QAAQ,KAAK,EAAE;YACd,cAAc;YACd,KAAK,kCAAoB,CAAC,kBAAkB,CAAC,CAAC;gBAC7C,OAAO,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,2GAA2G,CAAC,CAAC;aACrJ;YACD,KAAK,kCAAoB,CAAC,gBAAgB,CAAC,CAAC;gBAC3C,OAAO,GAAG,CAAC,QAAQ,CAAC,gBAAgB,EAAE,8FAA8F,CAAC,CAAC;aACtI;SACD;IACF,CAAC;IA5GW,kBAAkB;QAO5B,mBAAA,oBAAY,CAAA;QACZ,mBAAA,mCAAiB,CAAA;QACjB,mBAAA,4BAAgB,CAAA;OATN,kBAAkB,CA6G9B;IAAD,yBAAC;CAAA,AA7GD,IA6GC;AA7GY,gDAAkB;AA+G/B,8BAAiB,CAAC,iCAAmB,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as json from 'vs/base/common/json';\nimport * as strings from 'vs/base/common/strings';\nimport { setProperty } from 'vs/base/common/jsonEdit';\nimport { Queue } from 'vs/base/common/async';\nimport { Edit } from 'vs/base/common/jsonFormatter';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IJSONEditingService, IJSONValue, JSONEditingError, JSONEditingErrorCode } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class JSONEditingService implements IJSONEditingService {\n\n\tpublic _serviceBrand: any;\n\n\tprivate queue: Queue<void>;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\twrite(resource: URI, value: IJSONValue, save: boolean): Promise<void> {\n\t\treturn Promise.resolve(this.queue.queue(() => this.doWriteConfiguration(resource, value, save))); // queue up writes to prevent race conditions\n\t}\n\n\tprivate doWriteConfiguration(resource: URI, value: IJSONValue, save: boolean): Promise<void> {\n\t\treturn this.resolveAndValidate(resource, save)\n\t\t\t.then(reference => this.writeToBuffer(reference.object.textEditorModel, value)\n\t\t\t\t.then(() => reference.dispose()));\n\t}\n\n\tprivate async writeToBuffer(model: ITextModel, value: IJSONValue): Promise<any> {\n\t\tconst edit = this.getEdits(model, value)[0];\n\t\tif (this.applyEditsToBuffer(edit, model)) {\n\t\t\treturn this.textFileService.save(model.uri);\n\t\t}\n\t}\n\n\tprivate applyEditsToBuffer(edit: Edit, model: ITextModel): boolean {\n\t\tconst startPosition = model.getPositionAt(edit.offset);\n\t\tconst endPosition = model.getPositionAt(edit.offset + edit.length);\n\t\tconst range = new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t\tlet currentText = model.getValueInRange(range);\n\t\tif (edit.content !== currentText) {\n\t\t\tconst editOperation = currentText ? EditOperation.replace(range, edit.content) : EditOperation.insert(startPosition, edit.content);\n\t\t\tmodel.pushEditOperations([new Selection(startPosition.lineNumber, startPosition.column, startPosition.lineNumber, startPosition.column)], [editOperation], () => []);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate getEdits(model: ITextModel, configurationValue: IJSONValue): Edit[] {\n\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\tconst eol = model.getEOL();\n\t\tconst { key, value } = configurationValue;\n\n\t\t// Without key, the entire settings file is being replaced, so we just use JSON.stringify\n\t\tif (!key) {\n\t\t\tconst content = JSON.stringify(value, null, insertSpaces ? strings.repeat(' ', tabSize) : '\\t');\n\t\t\treturn [{\n\t\t\t\tcontent,\n\t\t\t\tlength: content.length,\n\t\t\t\toffset: 0\n\t\t\t}];\n\t\t}\n\n\t\treturn setProperty(model.getValue(), [key], value, { tabSize, insertSpaces, eol });\n\t}\n\n\tprivate async resolveModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\t\tconst exists = await this.fileService.existsFile(resource);\n\t\tif (!exists) {\n\t\t\tawait this.fileService.updateContent(resource, '{}', { encoding: 'utf8' });\n\t\t}\n\t\treturn this.textModelResolverService.createModelReference(resource);\n\t}\n\n\tprivate hasParseErrors(model: ITextModel): boolean {\n\t\tconst parseErrors: json.ParseError[] = [];\n\t\tjson.parse(model.getValue(), parseErrors);\n\t\treturn parseErrors.length > 0;\n\t}\n\n\tprivate resolveAndValidate(resource: URI, checkDirty: boolean): Promise<IReference<IResolvedTextEditorModel>> {\n\t\treturn this.resolveModelReference(resource)\n\t\t\t.then(reference => {\n\t\t\t\tconst model = reference.object.textEditorModel;\n\n\t\t\t\tif (this.hasParseErrors(model)) {\n\t\t\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(JSONEditingErrorCode.ERROR_INVALID_FILE);\n\t\t\t\t}\n\n\t\t\t\t// Target cannot be dirty if not writing into buffer\n\t\t\t\tif (checkDirty && this.textFileService.isDirty(resource)) {\n\t\t\t\t\treturn this.reject<IReference<IResolvedTextEditorModel>>(JSONEditingErrorCode.ERROR_FILE_DIRTY);\n\t\t\t\t}\n\t\t\t\treturn reference;\n\t\t\t});\n\t}\n\n\tprivate reject<T>(code: JSONEditingErrorCode): Promise<T> {\n\t\tconst message = this.toErrorMessage(code);\n\t\treturn Promise.reject(new JSONEditingError(message, code));\n\t}\n\n\tprivate toErrorMessage(error: JSONEditingErrorCode): string {\n\t\tswitch (error) {\n\t\t\t// User issues\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE: {\n\t\t\t\treturn nls.localize('errorInvalidFile', \"Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.\");\n\t\t\t}\n\t\t\tcase JSONEditingErrorCode.ERROR_FILE_DIRTY: {\n\t\t\t\treturn nls.localize('errorFileDirty', \"Unable to write into the file because the file is dirty. Please save the file and try again.\");\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterSingleton(IJSONEditingService, JSONEditingService, true);"]}]}