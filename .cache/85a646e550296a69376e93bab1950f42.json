{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensions/common/extensions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensions/common/extensions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/base/common/strings\"], function (require, exports, extensionManagementUtil_1, strings) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.MANIFEST_CACHE_FOLDER = 'CachedExtensions';\n    exports.USER_MANIFEST_CACHE_FILE = 'user';\n    exports.BUILTIN_MANIFEST_CACHE_FILE = 'builtin';\n    class ExtensionIdentifierWithVersion {\n        constructor(identifier, version) {\n            this.identifier = identifier;\n            this.version = version;\n        }\n        key() {\n            return `${this.identifier.id}-${this.version}`;\n        }\n        equals(o) {\n            if (!(o instanceof ExtensionIdentifierWithVersion)) {\n                return false;\n            }\n            return extensionManagementUtil_1.areSameExtensions(this.identifier, o.identifier) && this.version === o.version;\n        }\n    }\n    exports.ExtensionIdentifierWithVersion = ExtensionIdentifierWithVersion;\n    function isIExtensionIdentifier(thing) {\n        return thing\n            && typeof thing === 'object'\n            && typeof thing.id === 'string'\n            && (!thing.uuid || typeof thing.uuid === 'string');\n    }\n    exports.isIExtensionIdentifier = isIExtensionIdentifier;\n    var ExtensionType;\n    (function (ExtensionType) {\n        ExtensionType[ExtensionType[\"System\"] = 0] = \"System\";\n        ExtensionType[ExtensionType[\"User\"] = 1] = \"User\";\n    })(ExtensionType = exports.ExtensionType || (exports.ExtensionType = {}));\n    /**\n     * **!Do not construct directly!**\n     *\n     * **!Only static methods because it gets serialized!**\n     *\n     * This represents the \"canonical\" version for an extension identifier. Extension ids\n     * have to be case-insensitive (due to the marketplace), but we must ensure case\n     * preservation because the extension API is already public at this time.\n     *\n     * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\n     * its canonical extension identifier is `\"Hello.World\"`. This extension could be\n     * referenced in some other extension's dependencies using the string `\"hello.world\"`.\n     *\n     * To make matters more complicated, an extension can optionally have an UUID. When two\n     * extensions have the same UUID, they are considered equal even if their identifier is different.\n     */\n    class ExtensionIdentifier {\n        constructor(value) {\n            this.value = value;\n            this._lower = value.toLowerCase();\n        }\n        static equals(a, b) {\n            if (typeof a === 'undefined' || a === null) {\n                return (typeof b === 'undefined' || b === null);\n            }\n            if (typeof b === 'undefined' || b === null) {\n                return false;\n            }\n            if (typeof a === 'string' || typeof b === 'string') {\n                // At least one of the arguments is an extension id in string form,\n                // so we have to use the string comparison which ignores case.\n                let aValue = (typeof a === 'string' ? a : a.value);\n                let bValue = (typeof b === 'string' ? b : b.value);\n                return strings.equalsIgnoreCase(aValue, bValue);\n            }\n            // Now we know both arguments are ExtensionIdentifier\n            return (a._lower === b._lower);\n        }\n        /**\n         * Gives the value by which to index (for equality).\n         */\n        static toKey(id) {\n            if (typeof id === 'string') {\n                return id.toLowerCase();\n            }\n            return id._lower;\n        }\n    }\n    exports.ExtensionIdentifier = ExtensionIdentifier;\n    function isLanguagePackExtension(manifest) {\n        return manifest.contributes && manifest.contributes.localizations ? manifest.contributes.localizations.length > 0 : false;\n    }\n    exports.isLanguagePackExtension = isLanguagePackExtension;\n});\n",null]}