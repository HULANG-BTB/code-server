{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar replaceCommand_1 = require(\"vs/editor/common/commands/replaceCommand\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar TransposeLettersAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TransposeLettersAction, _super);\n    function TransposeLettersAction() {\n        return _super.call(this, {\n            id: 'editor.action.transposeLetters',\n            label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n            alias: 'Transpose Letters',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: {\n                    primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_T\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    TransposeLettersAction.prototype.positionLeftOf = function (start, model) {\n        var column = start.column;\n        var lineNumber = start.lineNumber;\n        if (column > model.getLineMinColumn(lineNumber)) {\n            if (strings_1.isLowSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 2))) {\n                // character before column is a low surrogate\n                column = column - 2;\n            }\n            else {\n                column = column - 1;\n            }\n        }\n        else if (lineNumber > 1) {\n            lineNumber = lineNumber - 1;\n            column = model.getLineMaxColumn(lineNumber);\n        }\n        return new position_1.Position(lineNumber, column);\n    };\n    TransposeLettersAction.prototype.positionRightOf = function (start, model) {\n        var column = start.column;\n        var lineNumber = start.lineNumber;\n        if (column < model.getLineMaxColumn(lineNumber)) {\n            if (strings_1.isHighSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 1))) {\n                // character after column is a high surrogate\n                column = column + 2;\n            }\n            else {\n                column = column + 1;\n            }\n        }\n        else if (lineNumber < model.getLineCount()) {\n            lineNumber = lineNumber + 1;\n            column = 0;\n        }\n        return new position_1.Position(lineNumber, column);\n    };\n    TransposeLettersAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var model = editor.getModel();\n        var commands = [];\n        var selections = editor.getSelections();\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            var lineNumber = selection.startLineNumber;\n            var column = selection.startColumn;\n            var lastColumn = model.getLineMaxColumn(lineNumber);\n            if (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {\n                // at beginning of file, nothing to do\n                continue;\n            }\n            // handle special case: when at end of line, transpose left two chars\n            // otherwise, transpose left and right chars\n            var endPosition = (column === lastColumn) ?\n                selection.getPosition() :\n                this.positionRightOf(selection.getPosition(), model);\n            var middlePosition = this.positionLeftOf(endPosition, model);\n            var beginPosition = this.positionLeftOf(middlePosition, model);\n            var leftChar = model.getValueInRange(range_1.Range.fromPositions(beginPosition, middlePosition));\n            var rightChar = model.getValueInRange(range_1.Range.fromPositions(middlePosition, endPosition));\n            var replaceRange = range_1.Range.fromPositions(beginPosition, endPosition);\n            commands.push(new replaceCommand_1.ReplaceCommand(replaceRange, rightChar + leftChar));\n        }\n        if (commands.length > 0) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    };\n    return TransposeLettersAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(TransposeLettersAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { isHighSurrogate, isLowSurrogate } from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ReplaceCommand } from 'vs/editor/common/commands/replaceCommand';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nclass TransposeLettersAction extends EditorAction {\n\n\tprivate positionLeftOf(start: IPosition, model: ITextModel): Position {\n\t\tlet column = start.column;\n\t\tlet lineNumber = start.lineNumber;\n\n\t\tif (column > model.getLineMinColumn(lineNumber)) {\n\t\t\tif (isLowSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 2))) {\n\t\t\t\t// character before column is a low surrogate\n\t\t\t\tcolumn = column - 2;\n\t\t\t} else {\n\t\t\t\tcolumn = column - 1;\n\t\t\t}\n\t\t} else if (lineNumber > 1) {\n\t\t\tlineNumber = lineNumber - 1;\n\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tprivate positionRightOf(start: IPosition, model: ITextModel): Position {\n\t\tlet column = start.column;\n\t\tlet lineNumber = start.lineNumber;\n\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tif (isHighSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 1))) {\n\t\t\t\t// character after column is a high surrogate\n\t\t\t\tcolumn = column + 2;\n\t\t\t} else {\n\t\t\t\tcolumn = column + 1;\n\t\t\t}\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = 0;\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.transposeLetters',\n\t\t\tlabel: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n\t\t\talias: 'Transpose Letters',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: 0,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyCode.KEY_T\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet model = editor.getModel();\n\t\tlet commands: ICommand[] = [];\n\t\tlet selections = editor.getSelections();\n\n\t\tfor (let selection of selections) {\n\t\t\tif (!selection.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet lineNumber = selection.startLineNumber;\n\t\t\tlet column = selection.startColumn;\n\n\t\t\tlet lastColumn = model.getLineMaxColumn(lineNumber);\n\n\t\t\tif (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {\n\t\t\t\t// at beginning of file, nothing to do\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// handle special case: when at end of line, transpose left two chars\n\t\t\t// otherwise, transpose left and right chars\n\t\t\tlet endPosition = (column === lastColumn) ?\n\t\t\t\tselection.getPosition() :\n\t\t\t\tthis.positionRightOf(selection.getPosition(), model);\n\n\t\t\tlet middlePosition = this.positionLeftOf(endPosition, model);\n\t\t\tlet beginPosition = this.positionLeftOf(middlePosition, model);\n\n\t\t\tlet leftChar = model.getValueInRange(Range.fromPositions(beginPosition, middlePosition));\n\t\t\tlet rightChar = model.getValueInRange(Range.fromPositions(middlePosition, endPosition));\n\n\t\t\tlet replaceRange = Range.fromPositions(beginPosition, endPosition);\n\t\t\tcommands.push(new ReplaceCommand(replaceRange, rightChar + leftChar));\n\t\t}\n\n\t\tif (commands.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeCommands(this.id, commands);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nregisterEditorAction(TransposeLettersAction);\n"]}]}