{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/languagePackCachedDataCleaner.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/languagePackCachedDataCleaner.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/base/node/pfs\", \"vs/platform/product/node/product\", \"vs/base/common/lifecycle\", \"vs/base/common/errors\", \"vs/platform/log/common/log\", \"vs/platform/environment/common/environment\"], function (require, exports, path, pfs, product_1, lifecycle_1, errors_1, log_1, environment_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let LanguagePackCachedDataCleaner = class LanguagePackCachedDataCleaner {\n        constructor(_environmentService, _logService) {\n            this._environmentService = _environmentService;\n            this._logService = _logService;\n            this._disposables = [];\n            // We have no Language pack support for dev version (run from source)\n            // So only cleanup when we have a build version.\n            if (this._environmentService.isBuilt) {\n                this._manageCachedDataSoon();\n            }\n        }\n        dispose() {\n            this._disposables = lifecycle_1.dispose(this._disposables);\n        }\n        _manageCachedDataSoon() {\n            let handle = setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                handle = undefined;\n                this._logService.info('Starting to clean up unused language packs.');\n                const maxAge = product_1.default.nameLong.indexOf('Insiders') >= 0\n                    ? 1000 * 60 * 60 * 24 * 7 // roughly 1 week\n                    : 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months\n                try {\n                    const installed = Object.create(null);\n                    const metaData = JSON.parse(yield pfs.readFile(path.join(this._environmentService.userDataPath, 'languagepacks.json'), 'utf8'));\n                    for (let locale of Object.keys(metaData)) {\n                        const entry = metaData[locale];\n                        installed[`${entry.hash}.${locale}`] = true;\n                    }\n                    // Cleanup entries for language packs that aren't installed anymore\n                    const cacheDir = path.join(this._environmentService.userDataPath, 'clp');\n                    const exists = yield pfs.exists(cacheDir);\n                    if (!exists) {\n                        return;\n                    }\n                    for (let entry of yield pfs.readdir(cacheDir)) {\n                        if (installed[entry]) {\n                            this._logService.info(`Skipping directory ${entry}. Language pack still in use.`);\n                            continue;\n                        }\n                        this._logService.info('Removing unused language pack:', entry);\n                        yield pfs.rimraf(path.join(cacheDir, entry));\n                    }\n                    const now = Date.now();\n                    for (let packEntry of Object.keys(installed)) {\n                        const folder = path.join(cacheDir, packEntry);\n                        for (let entry of yield pfs.readdir(folder)) {\n                            if (entry === 'tcf.json') {\n                                continue;\n                            }\n                            const candidate = path.join(folder, entry);\n                            const stat = yield pfs.stat(candidate);\n                            if (stat.isDirectory()) {\n                                const diff = now - stat.mtime.getTime();\n                                if (diff > maxAge) {\n                                    this._logService.info('Removing language pack cache entry: ', path.join(packEntry, entry));\n                                    yield pfs.rimraf(candidate);\n                                }\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    errors_1.onUnexpectedError(error);\n                }\n            }), 40 * 1000);\n            this._disposables.push({\n                dispose() {\n                    if (handle !== undefined) {\n                        clearTimeout(handle);\n                    }\n                }\n            });\n        }\n    };\n    LanguagePackCachedDataCleaner = __decorate([\n        __param(0, environment_1.IEnvironmentService),\n        __param(1, log_1.ILogService)\n    ], LanguagePackCachedDataCleaner);\n    exports.LanguagePackCachedDataCleaner = LanguagePackCachedDataCleaner;\n});\n",null]}