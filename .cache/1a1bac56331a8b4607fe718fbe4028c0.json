{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\", \"vs/editor/common/services/modeService\", \"vs/editor/common/services/modelService\"], function (require, exports, editor_1, modeService_1, modelService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n     */\n    let BaseTextEditorModel = class BaseTextEditorModel extends editor_1.EditorModel {\n        constructor(modelService, modeService, textEditorModelHandle) {\n            super();\n            this.modelService = modelService;\n            this.modeService = modeService;\n            if (textEditorModelHandle) {\n                this.handleExistingModel(textEditorModelHandle);\n            }\n        }\n        handleExistingModel(textEditorModelHandle) {\n            // We need the resource to point to an existing model\n            const model = this.modelService.getModel(textEditorModelHandle);\n            if (!model) {\n                throw new Error(`Document with resource ${textEditorModelHandle.toString()} does not exist`);\n            }\n            this.textEditorModelHandle = textEditorModelHandle;\n            // Make sure we clean up when this model gets disposed\n            this.registerModelDisposeListener(model);\n        }\n        registerModelDisposeListener(model) {\n            if (this.modelDisposeListener) {\n                this.modelDisposeListener.dispose();\n            }\n            this.modelDisposeListener = model.onWillDispose(() => {\n                this.textEditorModelHandle = null; // make sure we do not dispose code editor model again\n                this.dispose();\n            });\n        }\n        get textEditorModel() {\n            return this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n        }\n        /**\n         * Creates the text editor model with the provided value, modeId (can be comma separated for multiple values) and optional resource URL.\n         */\n        createTextEditorModel(value, resource, modeId) {\n            const firstLineText = this.getFirstLineText(value);\n            const languageSelection = this.getOrCreateMode(this.modeService, modeId, firstLineText);\n            return this.doCreateTextEditorModel(value, languageSelection, resource);\n        }\n        doCreateTextEditorModel(value, languageSelection, resource) {\n            let model = resource && this.modelService.getModel(resource);\n            if (!model) {\n                model = this.modelService.createModel(value, languageSelection, resource);\n                this.createdEditorModel = true;\n                // Make sure we clean up when this model gets disposed\n                this.registerModelDisposeListener(model);\n            }\n            else {\n                this.modelService.updateModel(model, value);\n                this.modelService.setMode(model, languageSelection);\n            }\n            this.textEditorModelHandle = model.uri;\n            return this;\n        }\n        getFirstLineText(value) {\n            // text buffer factory\n            const textBufferFactory = value;\n            if (typeof textBufferFactory.getFirstLineText === 'function') {\n                return textBufferFactory.getFirstLineText(100);\n            }\n            // text model\n            const textSnapshot = value;\n            return textSnapshot.getLineContent(1).substr(0, 100);\n        }\n        /**\n         * Gets the mode for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n         *\n         * @param firstLineText optional first line of the text buffer to set the mode on. This can be used to guess a mode from content.\n         */\n        getOrCreateMode(modeService, modeId, firstLineText) {\n            return modeService.create(modeId);\n        }\n        /**\n         * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n         */\n        updateTextEditorModel(newValue) {\n            if (!this.textEditorModel) {\n                return;\n            }\n            this.modelService.updateModel(this.textEditorModel, newValue);\n        }\n        createSnapshot() {\n            const model = this.textEditorModel;\n            if (model) {\n                return model.createSnapshot(true /* Preserve BOM */);\n            }\n            return null;\n        }\n        isResolved() {\n            return !!this.textEditorModelHandle;\n        }\n        dispose() {\n            if (this.modelDisposeListener) {\n                this.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n                this.modelDisposeListener = null;\n            }\n            if (this.textEditorModelHandle && this.createdEditorModel) {\n                this.modelService.destroyModel(this.textEditorModelHandle);\n            }\n            this.textEditorModelHandle = null;\n            this.createdEditorModel = false;\n            super.dispose();\n        }\n    };\n    BaseTextEditorModel = __decorate([\n        __param(0, modelService_1.IModelService),\n        __param(1, modeService_1.IModeService)\n    ], BaseTextEditorModel);\n    exports.BaseTextEditorModel = BaseTextEditorModel;\n});\n",null]}