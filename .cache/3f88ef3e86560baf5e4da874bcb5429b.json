{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/common/fileIconThemeData.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/nls\", \"vs/base/common/path\", \"vs/base/common/resources\", \"vs/base/common/json\", \"vs/base/common/jsonErrorMessages\"], function (require, exports, uri_1, nls, Paths, resources, Json, jsonErrorMessages_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FileIconThemeData {\n        constructor(id, label, settingsId) {\n            this.id = id;\n            this.label = label;\n            this.settingsId = settingsId;\n            this.isLoaded = false;\n            this.hasFileIcons = false;\n            this.hasFolderIcons = false;\n            this.hidesExplorerArrows = false;\n        }\n        ensureLoaded(fileService) {\n            return !this.isLoaded ? this.load(fileService) : Promise.resolve(this.styleSheetContent);\n        }\n        reload(fileService) {\n            return this.load(fileService);\n        }\n        load(fileService) {\n            if (!this.location) {\n                return Promise.resolve(this.styleSheetContent);\n            }\n            return _loadIconThemeDocument(fileService, this.location).then(iconThemeDocument => {\n                const result = _processIconThemeDocument(this.id, this.location, iconThemeDocument);\n                this.styleSheetContent = result.content;\n                this.hasFileIcons = result.hasFileIcons;\n                this.hasFolderIcons = result.hasFolderIcons;\n                this.hidesExplorerArrows = result.hidesExplorerArrows;\n                this.isLoaded = true;\n                return this.styleSheetContent;\n            });\n        }\n        static fromExtensionTheme(iconTheme, iconThemeLocation, extensionData) {\n            const id = extensionData.extensionId + '-' + iconTheme.id;\n            const label = iconTheme.label || Paths.basename(iconTheme.path);\n            const settingsId = iconTheme.id;\n            const themeData = new FileIconThemeData(id, label, settingsId);\n            themeData.description = iconTheme.description;\n            themeData.location = iconThemeLocation;\n            themeData.extensionData = extensionData;\n            themeData.watch = iconTheme._watch;\n            themeData.isLoaded = false;\n            return themeData;\n        }\n        static noIconTheme() {\n            let themeData = FileIconThemeData._noIconTheme;\n            if (!themeData) {\n                themeData = FileIconThemeData._noIconTheme = new FileIconThemeData('', '', null);\n                themeData.hasFileIcons = false;\n                themeData.hasFolderIcons = false;\n                themeData.hidesExplorerArrows = false;\n                themeData.isLoaded = true;\n                themeData.extensionData = undefined;\n                themeData.watch = false;\n            }\n            return themeData;\n        }\n        static createUnloadedTheme(id) {\n            const themeData = new FileIconThemeData(id, '', '__' + id);\n            themeData.isLoaded = false;\n            themeData.hasFileIcons = false;\n            themeData.hasFolderIcons = false;\n            themeData.hidesExplorerArrows = false;\n            themeData.extensionData = undefined;\n            themeData.watch = false;\n            return themeData;\n        }\n        static fromStorageData(input) {\n            try {\n                let data = JSON.parse(input);\n                const theme = new FileIconThemeData('', '', null);\n                for (let key in data) {\n                    switch (key) {\n                        case 'id':\n                        case 'label':\n                        case 'description':\n                        case 'settingsId':\n                        case 'extensionData':\n                        case 'styleSheetContent':\n                        case 'hasFileIcons':\n                        case 'hidesExplorerArrows':\n                        case 'hasFolderIcons':\n                        case 'watch':\n                            theme[key] = data[key];\n                            break;\n                        case 'location':\n                            theme.location = uri_1.URI.revive(data.location);\n                            break;\n                    }\n                }\n                return theme;\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        toStorageData() {\n            return JSON.stringify({\n                id: this.id,\n                label: this.label,\n                description: this.description,\n                settingsId: this.settingsId,\n                location: this.location,\n                styleSheetContent: this.styleSheetContent,\n                hasFileIcons: this.hasFileIcons,\n                hasFolderIcons: this.hasFolderIcons,\n                hidesExplorerArrows: this.hidesExplorerArrows,\n                watch: this.watch\n            });\n        }\n    }\n    FileIconThemeData._noIconTheme = null;\n    exports.FileIconThemeData = FileIconThemeData;\n    function _loadIconThemeDocument(fileService, location) {\n        return fileService.resolveContent(location, { encoding: 'utf8' }).then((content) => {\n            let errors = [];\n            let contentValue = Json.parse(content.value.toString(), errors);\n            if (errors.length > 0 || !contentValue) {\n                return Promise.reject(new Error(nls.localize('error.cannotparseicontheme', \"Problems parsing file icons file: {0}\", errors.map(e => jsonErrorMessages_1.getParseErrorMessage(e.error)).join(', '))));\n            }\n            return Promise.resolve(contentValue);\n        });\n    }\n    function _processIconThemeDocument(id, iconThemeDocumentLocation, iconThemeDocument) {\n        const result = { content: '', hasFileIcons: false, hasFolderIcons: false, hidesExplorerArrows: !!iconThemeDocument.hidesExplorerArrows };\n        if (!iconThemeDocument.iconDefinitions) {\n            return result;\n        }\n        let selectorByDefinitionId = {};\n        const iconThemeDocumentLocationDirname = resources.dirname(iconThemeDocumentLocation);\n        function resolvePath(path) {\n            return resources.joinPath(iconThemeDocumentLocationDirname, path);\n        }\n        function collectSelectors(associations, baseThemeClassName) {\n            function addSelector(selector, defId) {\n                if (defId) {\n                    let list = selectorByDefinitionId[defId];\n                    if (!list) {\n                        list = selectorByDefinitionId[defId] = [];\n                    }\n                    list.push(selector);\n                }\n            }\n            if (associations) {\n                let qualifier = '.show-file-icons';\n                if (baseThemeClassName) {\n                    qualifier = baseThemeClassName + ' ' + qualifier;\n                }\n                const expanded = '.monaco-tree-row.expanded'; // workaround for #11453\n                const expanded2 = '.monaco-tl-twistie.collapsible:not(.collapsed) + .monaco-tl-contents'; // new tree\n                if (associations.folder) {\n                    addSelector(`${qualifier} .folder-icon::before`, associations.folder);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.folderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .folder-icon::before`, associations.folderExpanded);\n                    addSelector(`${qualifier} ${expanded2} .folder-icon::before`, associations.folderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                let rootFolder = associations.rootFolder || associations.folder;\n                let rootFolderExpanded = associations.rootFolderExpanded || associations.folderExpanded;\n                if (rootFolder) {\n                    addSelector(`${qualifier} .rootfolder-icon::before`, rootFolder);\n                    result.hasFolderIcons = true;\n                }\n                if (rootFolderExpanded) {\n                    addSelector(`${qualifier} ${expanded} .rootfolder-icon::before`, rootFolderExpanded);\n                    addSelector(`${qualifier} ${expanded2} .rootfolder-icon::before`, rootFolderExpanded);\n                    result.hasFolderIcons = true;\n                }\n                if (associations.file) {\n                    addSelector(`${qualifier} .file-icon::before`, associations.file);\n                    result.hasFileIcons = true;\n                }\n                let folderNames = associations.folderNames;\n                if (folderNames) {\n                    for (let folderName in folderNames) {\n                        addSelector(`${qualifier} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNames[folderName]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                let folderNamesExpanded = associations.folderNamesExpanded;\n                if (folderNamesExpanded) {\n                    for (let folderName in folderNamesExpanded) {\n                        addSelector(`${qualifier} ${expanded} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNamesExpanded[folderName]);\n                        addSelector(`${qualifier} ${expanded2} .${escapeCSS(folderName.toLowerCase())}-name-folder-icon.folder-icon::before`, folderNamesExpanded[folderName]);\n                        result.hasFolderIcons = true;\n                    }\n                }\n                let languageIds = associations.languageIds;\n                if (languageIds) {\n                    if (!languageIds.jsonc && languageIds.json) {\n                        languageIds.jsonc = languageIds.json;\n                    }\n                    for (let languageId in languageIds) {\n                        addSelector(`${qualifier} .${escapeCSS(languageId)}-lang-file-icon.file-icon::before`, languageIds[languageId]);\n                        result.hasFileIcons = true;\n                    }\n                }\n                let fileExtensions = associations.fileExtensions;\n                if (fileExtensions) {\n                    for (let fileExtension in fileExtensions) {\n                        let selectors = [];\n                        let segments = fileExtension.toLowerCase().split('.');\n                        if (segments.length) {\n                            for (let i = 0; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileExtensions[fileExtension]);\n                        result.hasFileIcons = true;\n                    }\n                }\n                let fileNames = associations.fileNames;\n                if (fileNames) {\n                    for (let fileName in fileNames) {\n                        let selectors = [];\n                        fileName = fileName.toLowerCase();\n                        selectors.push(`.${escapeCSS(fileName)}-name-file-icon`);\n                        let segments = fileName.split('.');\n                        if (segments.length) {\n                            for (let i = 1; i < segments.length; i++) {\n                                selectors.push(`.${escapeCSS(segments.slice(i).join('.'))}-ext-file-icon`);\n                            }\n                            selectors.push('.ext-file-icon'); // extra segment to increase file-ext score\n                        }\n                        addSelector(`${qualifier} ${selectors.join('')}.file-icon::before`, fileNames[fileName]);\n                        result.hasFileIcons = true;\n                    }\n                }\n            }\n        }\n        collectSelectors(iconThemeDocument);\n        collectSelectors(iconThemeDocument.light, '.vs');\n        collectSelectors(iconThemeDocument.highContrast, '.hc-black');\n        if (!result.hasFileIcons && !result.hasFolderIcons) {\n            return result;\n        }\n        let cssRules = [];\n        let fonts = iconThemeDocument.fonts;\n        if (Array.isArray(fonts)) {\n            fonts.forEach(font => {\n                let src = font.src.map(l => `url('${resolvePath(l.path)}') format('${l.format}')`).join(', ');\n                cssRules.push(`@font-face { src: ${src}; font-family: '${font.id}'; font-weight: ${font.weight}; font-style: ${font.style}; }`);\n            });\n            cssRules.push(`.show-file-icons .file-icon::before, .show-file-icons .folder-icon::before, .show-file-icons .rootfolder-icon::before { font-family: '${fonts[0].id}'; font-size: ${fonts[0].size || '150%'}}`);\n        }\n        for (let defId in selectorByDefinitionId) {\n            let selectors = selectorByDefinitionId[defId];\n            let definition = iconThemeDocument.iconDefinitions[defId];\n            if (definition) {\n                if (definition.iconPath) {\n                    cssRules.push(`${selectors.join(', ')} { content: ' '; background-image: url(\"${resolvePath(definition.iconPath)}\"); }`);\n                }\n                if (definition.fontCharacter || definition.fontColor) {\n                    let body = '';\n                    if (definition.fontColor) {\n                        body += ` color: ${definition.fontColor};`;\n                    }\n                    if (definition.fontCharacter) {\n                        body += ` content: '${definition.fontCharacter}';`;\n                    }\n                    if (definition.fontSize) {\n                        body += ` font-size: ${definition.fontSize};`;\n                    }\n                    if (definition.fontId) {\n                        body += ` font-family: ${definition.fontId};`;\n                    }\n                    cssRules.push(`${selectors.join(', ')} { ${body} }`);\n                }\n            }\n        }\n        result.content = cssRules.join('\\n');\n        return result;\n    }\n    function escapeCSS(str) {\n        return window['CSS'].escape(str);\n    }\n});\n",null]}