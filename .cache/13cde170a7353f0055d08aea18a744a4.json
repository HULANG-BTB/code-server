{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/charWidthReader.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/charWidthReader.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CharWidthRequestType;\n(function (CharWidthRequestType) {\n    CharWidthRequestType[CharWidthRequestType[\"Regular\"] = 0] = \"Regular\";\n    CharWidthRequestType[CharWidthRequestType[\"Italic\"] = 1] = \"Italic\";\n    CharWidthRequestType[CharWidthRequestType[\"Bold\"] = 2] = \"Bold\";\n})(CharWidthRequestType = exports.CharWidthRequestType || (exports.CharWidthRequestType = {}));\nvar CharWidthRequest = /** @class */ (function () {\n    function CharWidthRequest(chr, type) {\n        this.chr = chr;\n        this.type = type;\n        this.width = 0;\n    }\n    CharWidthRequest.prototype.fulfill = function (width) {\n        this.width = width;\n    };\n    return CharWidthRequest;\n}());\nexports.CharWidthRequest = CharWidthRequest;\nvar DomCharWidthReader = /** @class */ (function () {\n    function DomCharWidthReader(bareFontInfo, requests) {\n        this._bareFontInfo = bareFontInfo;\n        this._requests = requests;\n        this._container = null;\n        this._testElements = null;\n    }\n    DomCharWidthReader.prototype.read = function () {\n        // Create a test container with all these test elements\n        this._createDomElements();\n        // Add the container to the DOM\n        document.body.appendChild(this._container);\n        // Read character widths\n        this._readFromDomElements();\n        // Remove the container from the DOM\n        document.body.removeChild(this._container);\n        this._container = null;\n        this._testElements = null;\n    };\n    DomCharWidthReader.prototype._createDomElements = function () {\n        var container = document.createElement('div');\n        container.style.position = 'absolute';\n        container.style.top = '-50000px';\n        container.style.width = '50000px';\n        var regularDomNode = document.createElement('div');\n        regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n        regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n        regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        container.appendChild(regularDomNode);\n        var boldDomNode = document.createElement('div');\n        boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n        boldDomNode.style.fontWeight = 'bold';\n        boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        container.appendChild(boldDomNode);\n        var italicDomNode = document.createElement('div');\n        italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n        italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n        italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n        italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n        italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n        italicDomNode.style.fontStyle = 'italic';\n        container.appendChild(italicDomNode);\n        var testElements = [];\n        for (var i = 0, len = this._requests.length; i < len; i++) {\n            var request = this._requests[i];\n            var parent = void 0;\n            if (request.type === CharWidthRequestType.Regular) {\n                parent = regularDomNode;\n            }\n            if (request.type === CharWidthRequestType.Bold) {\n                parent = boldDomNode;\n            }\n            if (request.type === CharWidthRequestType.Italic) {\n                parent = italicDomNode;\n            }\n            parent.appendChild(document.createElement('br'));\n            var testElement = document.createElement('span');\n            DomCharWidthReader._render(testElement, request);\n            parent.appendChild(testElement);\n            testElements[i] = testElement;\n        }\n        this._container = container;\n        this._testElements = testElements;\n    };\n    DomCharWidthReader._render = function (testElement, request) {\n        if (request.chr === ' ') {\n            var htmlString = '&nbsp;';\n            // Repeat character 256 (2^8) times\n            for (var i = 0; i < 8; i++) {\n                htmlString += htmlString;\n            }\n            testElement.innerHTML = htmlString;\n        }\n        else {\n            var testString = request.chr;\n            // Repeat character 256 (2^8) times\n            for (var i = 0; i < 8; i++) {\n                testString += testString;\n            }\n            testElement.textContent = testString;\n        }\n    };\n    DomCharWidthReader.prototype._readFromDomElements = function () {\n        for (var i = 0, len = this._requests.length; i < len; i++) {\n            var request = this._requests[i];\n            var testElement = this._testElements[i];\n            request.fulfill(testElement.offsetWidth / 256);\n        }\n    };\n    return DomCharWidthReader;\n}());\nfunction readCharWidths(bareFontInfo, requests) {\n    var reader = new DomCharWidthReader(bareFontInfo, requests);\n    reader.read();\n}\nexports.readCharWidths = readCharWidths;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/charWidthReader.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/config/charWidthReader.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BareFontInfo } from 'vs/editor/common/config/fontInfo';\n\nexport const enum CharWidthRequestType {\n\tRegular = 0,\n\tItalic = 1,\n\tBold = 2\n}\n\nexport class CharWidthRequest {\n\n\tpublic readonly chr: string;\n\tpublic readonly type: CharWidthRequestType;\n\tpublic width: number;\n\n\tconstructor(chr: string, type: CharWidthRequestType) {\n\t\tthis.chr = chr;\n\t\tthis.type = type;\n\t\tthis.width = 0;\n\t}\n\n\tpublic fulfill(width: number) {\n\t\tthis.width = width;\n\t}\n}\n\nclass DomCharWidthReader {\n\n\tprivate readonly _bareFontInfo: BareFontInfo;\n\tprivate readonly _requests: CharWidthRequest[];\n\n\tprivate _container: HTMLElement | null;\n\tprivate _testElements: HTMLSpanElement[] | null;\n\n\tconstructor(bareFontInfo: BareFontInfo, requests: CharWidthRequest[]) {\n\t\tthis._bareFontInfo = bareFontInfo;\n\t\tthis._requests = requests;\n\n\t\tthis._container = null;\n\t\tthis._testElements = null;\n\t}\n\n\tpublic read(): void {\n\t\t// Create a test container with all these test elements\n\t\tthis._createDomElements();\n\n\t\t// Add the container to the DOM\n\t\tdocument.body.appendChild(this._container!);\n\n\t\t// Read character widths\n\t\tthis._readFromDomElements();\n\n\t\t// Remove the container from the DOM\n\t\tdocument.body.removeChild(this._container!);\n\n\t\tthis._container = null;\n\t\tthis._testElements = null;\n\t}\n\n\tprivate _createDomElements(): void {\n\t\tconst container = document.createElement('div');\n\t\tcontainer.style.position = 'absolute';\n\t\tcontainer.style.top = '-50000px';\n\t\tcontainer.style.width = '50000px';\n\n\t\tconst regularDomNode = document.createElement('div');\n\t\tregularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n\t\tregularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n\t\tregularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n\t\tregularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n\t\tregularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n\t\tcontainer.appendChild(regularDomNode);\n\n\t\tconst boldDomNode = document.createElement('div');\n\t\tboldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n\t\tboldDomNode.style.fontWeight = 'bold';\n\t\tboldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n\t\tboldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n\t\tboldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n\t\tcontainer.appendChild(boldDomNode);\n\n\t\tconst italicDomNode = document.createElement('div');\n\t\titalicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n\t\titalicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n\t\titalicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n\t\titalicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n\t\titalicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n\t\titalicDomNode.style.fontStyle = 'italic';\n\t\tcontainer.appendChild(italicDomNode);\n\n\t\tconst testElements: HTMLSpanElement[] = [];\n\t\tfor (let i = 0, len = this._requests.length; i < len; i++) {\n\t\t\tconst request = this._requests[i];\n\n\t\t\tlet parent: HTMLElement;\n\t\t\tif (request.type === CharWidthRequestType.Regular) {\n\t\t\t\tparent = regularDomNode;\n\t\t\t}\n\t\t\tif (request.type === CharWidthRequestType.Bold) {\n\t\t\t\tparent = boldDomNode;\n\t\t\t}\n\t\t\tif (request.type === CharWidthRequestType.Italic) {\n\t\t\t\tparent = italicDomNode;\n\t\t\t}\n\n\t\t\tparent!.appendChild(document.createElement('br'));\n\n\t\t\tconst testElement = document.createElement('span');\n\t\t\tDomCharWidthReader._render(testElement, request);\n\t\t\tparent!.appendChild(testElement);\n\n\t\t\ttestElements[i] = testElement;\n\t\t}\n\n\t\tthis._container = container;\n\t\tthis._testElements = testElements;\n\t}\n\n\tprivate static _render(testElement: HTMLElement, request: CharWidthRequest): void {\n\t\tif (request.chr === ' ') {\n\t\t\tlet htmlString = '&nbsp;';\n\t\t\t// Repeat character 256 (2^8) times\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\thtmlString += htmlString;\n\t\t\t}\n\t\t\ttestElement.innerHTML = htmlString;\n\t\t} else {\n\t\t\tlet testString = request.chr;\n\t\t\t// Repeat character 256 (2^8) times\n\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\ttestString += testString;\n\t\t\t}\n\t\t\ttestElement.textContent = testString;\n\t\t}\n\t}\n\n\tprivate _readFromDomElements(): void {\n\t\tfor (let i = 0, len = this._requests.length; i < len; i++) {\n\t\t\tconst request = this._requests[i];\n\t\t\tconst testElement = this._testElements![i];\n\n\t\t\trequest.fulfill(testElement.offsetWidth / 256);\n\t\t}\n\t}\n}\n\nexport function readCharWidths(bareFontInfo: BareFontInfo, requests: CharWidthRequest[]): void {\n\tconst reader = new DomCharWidthReader(bareFontInfo, requests);\n\treader.read();\n}\n"]}]}