{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/richEditBrackets.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/richEditBrackets.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar RichEditBracket = /** @class */ (function () {\n    function RichEditBracket(languageIdentifier, open, close, forwardRegex, reversedRegex) {\n        this.languageIdentifier = languageIdentifier;\n        this.open = open;\n        this.close = close;\n        this.forwardRegex = forwardRegex;\n        this.reversedRegex = reversedRegex;\n    }\n    return RichEditBracket;\n}());\nexports.RichEditBracket = RichEditBracket;\nvar RichEditBrackets = /** @class */ (function () {\n    function RichEditBrackets(languageIdentifier, brackets) {\n        var _this = this;\n        this.brackets = brackets.map(function (b) {\n            return new RichEditBracket(languageIdentifier, b[0], b[1], getRegexForBracketPair({ open: b[0], close: b[1] }), getReversedRegexForBracketPair({ open: b[0], close: b[1] }));\n        });\n        this.forwardRegex = getRegexForBrackets(this.brackets);\n        this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n        this.textIsBracket = {};\n        this.textIsOpenBracket = {};\n        var maxBracketLength = 0;\n        this.brackets.forEach(function (b) {\n            _this.textIsBracket[b.open.toLowerCase()] = b;\n            _this.textIsBracket[b.close.toLowerCase()] = b;\n            _this.textIsOpenBracket[b.open.toLowerCase()] = true;\n            _this.textIsOpenBracket[b.close.toLowerCase()] = false;\n            maxBracketLength = Math.max(maxBracketLength, b.open.length);\n            maxBracketLength = Math.max(maxBracketLength, b.close.length);\n        });\n        this.maxBracketLength = maxBracketLength;\n    }\n    return RichEditBrackets;\n}());\nexports.RichEditBrackets = RichEditBrackets;\nfunction once(keyFn, computeFn) {\n    var cache = {};\n    return function (input) {\n        var key = keyFn(input);\n        if (!cache.hasOwnProperty(key)) {\n            cache[key] = computeFn(input);\n        }\n        return cache[key];\n    };\n}\nvar getRegexForBracketPair = once(function (input) { return input.open + \";\" + input.close; }, function (input) {\n    return createBracketOrRegExp([input.open, input.close]);\n});\nvar getReversedRegexForBracketPair = once(function (input) { return input.open + \";\" + input.close; }, function (input) {\n    return createBracketOrRegExp([toReversedString(input.open), toReversedString(input.close)]);\n});\nvar getRegexForBrackets = once(function (input) { return input.map(function (b) { return b.open + \";\" + b.close; }).join(';'); }, function (input) {\n    var pieces = [];\n    input.forEach(function (b) {\n        pieces.push(b.open);\n        pieces.push(b.close);\n    });\n    return createBracketOrRegExp(pieces);\n});\nvar getReversedRegexForBrackets = once(function (input) { return input.map(function (b) { return b.open + \";\" + b.close; }).join(';'); }, function (input) {\n    var pieces = [];\n    input.forEach(function (b) {\n        pieces.push(toReversedString(b.open));\n        pieces.push(toReversedString(b.close));\n    });\n    return createBracketOrRegExp(pieces);\n});\nfunction prepareBracketForRegExp(str) {\n    // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n    var insertWordBoundaries = (/^[\\w]+$/.test(str));\n    str = strings.escapeRegExpCharacters(str);\n    return (insertWordBoundaries ? \"\\\\b\" + str + \"\\\\b\" : str);\n}\nfunction createBracketOrRegExp(pieces) {\n    var regexStr = \"(\" + pieces.map(prepareBracketForRegExp).join(')|(') + \")\";\n    return strings.createRegExp(regexStr, true);\n}\nvar toReversedString = (function () {\n    function reverse(str) {\n        var reversedStr = '';\n        for (var i = str.length - 1; i >= 0; i--) {\n            reversedStr += str.charAt(i);\n        }\n        return reversedStr;\n    }\n    var lastInput = null;\n    var lastOutput = null;\n    return function toReversedString(str) {\n        if (lastInput !== str) {\n            lastInput = str;\n            lastOutput = reverse(lastInput);\n        }\n        return lastOutput;\n    };\n})();\nvar BracketsUtils = /** @class */ (function () {\n    function BracketsUtils() {\n    }\n    BracketsUtils._findPrevBracketInText = function (reversedBracketRegex, lineNumber, reversedText, offset) {\n        var m = reversedText.match(reversedBracketRegex);\n        if (!m) {\n            return null;\n        }\n        var matchOffset = reversedText.length - (m.index || 0);\n        var matchLength = m[0].length;\n        var absoluteMatchOffset = offset + matchOffset;\n        return new range_1.Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n    };\n    BracketsUtils.findPrevBracketInToken = function (reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\n        // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n        var reversedLineText = toReversedString(lineText);\n        var reversedTokenText = reversedLineText.substring(lineText.length - currentTokenEnd, lineText.length - currentTokenStart);\n        return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedTokenText, currentTokenStart);\n    };\n    BracketsUtils.findNextBracketInText = function (bracketRegex, lineNumber, text, offset) {\n        var m = text.match(bracketRegex);\n        if (!m) {\n            return null;\n        }\n        var matchOffset = m.index || 0;\n        var matchLength = m[0].length;\n        if (matchLength === 0) {\n            return null;\n        }\n        var absoluteMatchOffset = offset + matchOffset;\n        return new range_1.Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n    };\n    BracketsUtils.findNextBracketInToken = function (bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\n        var currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\n        return this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\n    };\n    return BracketsUtils;\n}());\nexports.BracketsUtils = BracketsUtils;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/richEditBrackets.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/richEditBrackets.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { LanguageIdentifier } from 'vs/editor/common/modes';\nimport { CharacterPair } from 'vs/editor/common/modes/languageConfiguration';\n\ninterface ISimpleInternalBracket {\n\topen: string;\n\tclose: string;\n}\n\nexport class RichEditBracket {\n\t_richEditBracketBrand: void;\n\n\treadonly languageIdentifier: LanguageIdentifier;\n\treadonly open: string;\n\treadonly close: string;\n\treadonly forwardRegex: RegExp;\n\treadonly reversedRegex: RegExp;\n\n\tconstructor(languageIdentifier: LanguageIdentifier, open: string, close: string, forwardRegex: RegExp, reversedRegex: RegExp) {\n\t\tthis.languageIdentifier = languageIdentifier;\n\t\tthis.open = open;\n\t\tthis.close = close;\n\t\tthis.forwardRegex = forwardRegex;\n\t\tthis.reversedRegex = reversedRegex;\n\t}\n}\n\nexport class RichEditBrackets {\n\t_richEditBracketsBrand: void;\n\n\tpublic readonly brackets: RichEditBracket[];\n\tpublic readonly forwardRegex: RegExp;\n\tpublic readonly reversedRegex: RegExp;\n\tpublic readonly maxBracketLength: number;\n\tpublic readonly textIsBracket: { [text: string]: RichEditBracket; };\n\tpublic readonly textIsOpenBracket: { [text: string]: boolean; };\n\n\tconstructor(languageIdentifier: LanguageIdentifier, brackets: CharacterPair[]) {\n\t\tthis.brackets = brackets.map((b) => {\n\t\t\treturn new RichEditBracket(\n\t\t\t\tlanguageIdentifier,\n\t\t\t\tb[0],\n\t\t\t\tb[1],\n\t\t\t\tgetRegexForBracketPair({ open: b[0], close: b[1] }),\n\t\t\t\tgetReversedRegexForBracketPair({ open: b[0], close: b[1] })\n\t\t\t);\n\t\t});\n\t\tthis.forwardRegex = getRegexForBrackets(this.brackets);\n\t\tthis.reversedRegex = getReversedRegexForBrackets(this.brackets);\n\n\t\tthis.textIsBracket = {};\n\t\tthis.textIsOpenBracket = {};\n\n\t\tlet maxBracketLength = 0;\n\t\tthis.brackets.forEach((b) => {\n\t\t\tthis.textIsBracket[b.open.toLowerCase()] = b;\n\t\t\tthis.textIsBracket[b.close.toLowerCase()] = b;\n\t\t\tthis.textIsOpenBracket[b.open.toLowerCase()] = true;\n\t\t\tthis.textIsOpenBracket[b.close.toLowerCase()] = false;\n\t\t\tmaxBracketLength = Math.max(maxBracketLength, b.open.length);\n\t\t\tmaxBracketLength = Math.max(maxBracketLength, b.close.length);\n\t\t});\n\t\tthis.maxBracketLength = maxBracketLength;\n\t}\n}\n\nfunction once<T, R>(keyFn: (input: T) => string, computeFn: (input: T) => R): (input: T) => R {\n\tlet cache: { [key: string]: R; } = {};\n\treturn (input: T): R => {\n\t\tlet key = keyFn(input);\n\t\tif (!cache.hasOwnProperty(key)) {\n\t\t\tcache[key] = computeFn(input);\n\t\t}\n\t\treturn cache[key];\n\t};\n}\n\nconst getRegexForBracketPair = once<ISimpleInternalBracket, RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createBracketOrRegExp([input.open, input.close]);\n\t}\n);\n\nconst getReversedRegexForBracketPair = once<ISimpleInternalBracket, RegExp>(\n\t(input) => `${input.open};${input.close}`,\n\t(input) => {\n\t\treturn createBracketOrRegExp([toReversedString(input.open), toReversedString(input.close)]);\n\t}\n);\n\nconst getRegexForBrackets = once<ISimpleInternalBracket[], RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(b.open);\n\t\t\tpieces.push(b.close);\n\t\t});\n\t\treturn createBracketOrRegExp(pieces);\n\t}\n);\n\nconst getReversedRegexForBrackets = once<ISimpleInternalBracket[], RegExp>(\n\t(input) => input.map(b => `${b.open};${b.close}`).join(';'),\n\t(input) => {\n\t\tlet pieces: string[] = [];\n\t\tinput.forEach((b) => {\n\t\t\tpieces.push(toReversedString(b.open));\n\t\t\tpieces.push(toReversedString(b.close));\n\t\t});\n\t\treturn createBracketOrRegExp(pieces);\n\t}\n);\n\nfunction prepareBracketForRegExp(str: string): string {\n\t// This bracket pair uses letters like e.g. \"begin\" - \"end\"\n\tconst insertWordBoundaries = (/^[\\w]+$/.test(str));\n\tstr = strings.escapeRegExpCharacters(str);\n\treturn (insertWordBoundaries ? `\\\\b${str}\\\\b` : str);\n}\n\nfunction createBracketOrRegExp(pieces: string[]): RegExp {\n\tlet regexStr = `(${pieces.map(prepareBracketForRegExp).join(')|(')})`;\n\treturn strings.createRegExp(regexStr, true);\n}\n\nlet toReversedString = (function () {\n\n\tfunction reverse(str: string): string {\n\t\tlet reversedStr = '';\n\t\tfor (let i = str.length - 1; i >= 0; i--) {\n\t\t\treversedStr += str.charAt(i);\n\t\t}\n\t\treturn reversedStr;\n\t}\n\n\tlet lastInput: string | null = null;\n\tlet lastOutput: string | null = null;\n\treturn function toReversedString(str: string): string {\n\t\tif (lastInput !== str) {\n\t\t\tlastInput = str;\n\t\t\tlastOutput = reverse(lastInput);\n\t\t}\n\t\treturn lastOutput!;\n\t};\n})();\n\nexport class BracketsUtils {\n\n\tprivate static _findPrevBracketInText(reversedBracketRegex: RegExp, lineNumber: number, reversedText: string, offset: number): Range | null {\n\t\tlet m = reversedText.match(reversedBracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = reversedText.length - (m.index || 0);\n\t\tlet matchLength = m[0].length;\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n\t}\n\n\tpublic static findPrevBracketInToken(reversedBracketRegex: RegExp, lineNumber: number, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\t// Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n\t\tlet reversedLineText = toReversedString(lineText);\n\t\tlet reversedTokenText = reversedLineText.substring(lineText.length - currentTokenEnd, lineText.length - currentTokenStart);\n\n\t\treturn this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedTokenText, currentTokenStart);\n\t}\n\n\tpublic static findNextBracketInText(bracketRegex: RegExp, lineNumber: number, text: string, offset: number): Range | null {\n\t\tlet m = text.match(bracketRegex);\n\n\t\tif (!m) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet matchOffset = m.index || 0;\n\t\tlet matchLength = m[0].length;\n\t\tif (matchLength === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tlet absoluteMatchOffset = offset + matchOffset;\n\n\t\treturn new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n\t}\n\n\tpublic static findNextBracketInToken(bracketRegex: RegExp, lineNumber: number, lineText: string, currentTokenStart: number, currentTokenEnd: number): Range | null {\n\t\tlet currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\n\n\t\treturn this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\n\t}\n\n}\n"]}]}