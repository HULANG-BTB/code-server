{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/layout/browser/layoutService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/layout/browser/layoutService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IWorkbenchLayoutService = instantiation_1.createDecorator('layoutService');\nvar Parts;\n(function (Parts) {\n    Parts[\"TITLEBAR_PART\"] = \"workbench.parts.titlebar\";\n    Parts[\"ACTIVITYBAR_PART\"] = \"workbench.parts.activitybar\";\n    Parts[\"SIDEBAR_PART\"] = \"workbench.parts.sidebar\";\n    Parts[\"PANEL_PART\"] = \"workbench.parts.panel\";\n    Parts[\"EDITOR_PART\"] = \"workbench.parts.editor\";\n    Parts[\"STATUSBAR_PART\"] = \"workbench.parts.statusbar\";\n})(Parts = exports.Parts || (exports.Parts = {}));\nvar Position;\n(function (Position) {\n    Position[Position[\"LEFT\"] = 0] = \"LEFT\";\n    Position[Position[\"RIGHT\"] = 1] = \"RIGHT\";\n    Position[Position[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(Position = exports.Position || (exports.Position = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/layout/browser/layoutService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/layout/browser/layoutService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAoG;AAMvF,QAAA,uBAAuB,GAAG,+BAAe,CAA0B,eAAe,CAAC,CAAC;AAEjG,IAAkB,KAOjB;AAPD,WAAkB,KAAK;IACtB,mDAA0C,CAAA;IAC1C,yDAAgD,CAAA;IAChD,iDAAwC,CAAA;IACxC,6CAAoC,CAAA;IACpC,+CAAsC,CAAA;IACtC,qDAA4C,CAAA;AAC7C,CAAC,EAPiB,KAAK,GAAL,aAAK,KAAL,aAAK,QAOtB;AAED,IAAkB,QAIjB;AAJD,WAAkB,QAAQ;IACzB,uCAAI,CAAA;IACJ,yCAAK,CAAA;IACL,2CAAM,CAAA;AACP,CAAC,EAJiB,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAIzB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServiceIdentifier, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { MenuBarVisibility } from 'vs/platform/windows/common/windows';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { Part } from 'vs/workbench/browser/part';\n\nexport const IWorkbenchLayoutService = createDecorator<IWorkbenchLayoutService>('layoutService');\n\nexport const enum Parts {\n\tTITLEBAR_PART = 'workbench.parts.titlebar',\n\tACTIVITYBAR_PART = 'workbench.parts.activitybar',\n\tSIDEBAR_PART = 'workbench.parts.sidebar',\n\tPANEL_PART = 'workbench.parts.panel',\n\tEDITOR_PART = 'workbench.parts.editor',\n\tSTATUSBAR_PART = 'workbench.parts.statusbar'\n}\n\nexport const enum Position {\n\tLEFT,\n\tRIGHT,\n\tBOTTOM\n}\n\nexport interface ILayoutOptions {\n\ttoggleMaximizedPanel?: boolean;\n\tsource?: Parts;\n}\n\nexport interface IWorkbenchLayoutService extends ILayoutService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\t/**\n\t * Emits when the visibility of the title bar changes.\n\t */\n\treadonly onTitleBarVisibilityChange: Event<void>;\n\n\t/**\n\t * Emits when the zen mode is enabled or disabled.\n\t */\n\treadonly onZenModeChange: Event<boolean>;\n\n\t/**\n\t * Asks the part service if all parts have been fully restored. For editor part\n\t * this means that the contents of editors have loaded.\n\t */\n\tisRestored(): boolean;\n\n\t/**\n\t * Returns whether the given part has the keyboard focus or not.\n\t */\n\thasFocus(part: Parts): boolean;\n\n\t/**\n\t * Returns the parts HTML element, if there is one.\n\t */\n\tgetContainer(part: Parts): HTMLElement;\n\n\t/**\n\t * Returns if the part is visible.\n\t */\n\tisVisible(part: Parts): boolean;\n\n\t/**\n\t * Set activity bar hidden or not\n\t */\n\tsetActivityBarHidden(hidden: boolean): void;\n\n\t/**\n\t * Number of pixels (adjusted for zooming) that the title bar (if visible) pushes down the workbench contents.\n\t */\n\tgetTitleBarOffset(): number;\n\n\t/**\n\t *\n\t * Set editor area hidden or not\n\t */\n\tsetEditorHidden(hidden: boolean): void;\n\n\t/**\n\t * Set sidebar hidden or not\n\t */\n\tsetSideBarHidden(hidden: boolean): void;\n\n\t/**\n\t * Set panel part hidden or not\n\t */\n\tsetPanelHidden(hidden: boolean): void;\n\n\t/**\n\t * Maximizes the panel height if the panel is not already maximized.\n\t * Shrinks the panel to the default starting size if the panel is maximized.\n\t */\n\ttoggleMaximizedPanel(): void;\n\n\t/**\n\t * Returns true if the panel is maximized.\n\t */\n\tisPanelMaximized(): boolean;\n\n\t/**\n\t * Gets the current side bar position. Note that the sidebar can be hidden too.\n\t */\n\tgetSideBarPosition(): Position;\n\n\t/**\n\t * Gets the current menubar visibility.\n\t */\n\tgetMenubarVisibility(): MenuBarVisibility;\n\n\t/**\n\t * Gets the current panel position. Note that the panel can be hidden too.\n\t */\n\tgetPanelPosition(): Position;\n\n\t/**\n\t * Sets the panel position.\n\t */\n\tsetPanelPosition(position: Position): void;\n\n\t/**\n\t * Returns the element that contains the workbench.\n\t */\n\tgetWorkbenchElement(): HTMLElement;\n\n\t/**\n\t * Toggles the workbench in and out of zen mode - parts get hidden and window goes fullscreen.\n\t */\n\ttoggleZenMode(): void;\n\n\t/**\n\t * Returns whether the centered editor layout is active.\n\t */\n\tisEditorLayoutCentered(): boolean;\n\n\t/**\n\t * Sets the workbench in and out of centered editor layout.\n\t */\n\tcenterEditorLayout(active: boolean): void;\n\n\t/**\n\t * Resizes currently focused part on main access\n\t */\n\tresizePart(part: Parts, sizeChange: number): void;\n\n\t/**\n\t * Register a part to participate in the layout.\n\t */\n\tregisterPart(part: Part): void;\n}\n"]}]}