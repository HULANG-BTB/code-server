{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar keybindingLabels_1 = require(\"vs/base/common/keybindingLabels\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar scanCode_1 = require(\"vs/base/common/scanCode\");\nvar baseResolvedKeybinding_1 = require(\"vs/platform/keybinding/common/baseResolvedKeybinding\");\nvar resolvedKeybindingItem_1 = require(\"vs/platform/keybinding/common/resolvedKeybindingItem\");\nfunction windowsKeyMappingEquals(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    return (a.vkey === b.vkey\n        && a.value === b.value\n        && a.withShift === b.withShift\n        && a.withAltGr === b.withAltGr\n        && a.withShiftAltGr === b.withShiftAltGr);\n}\nfunction windowsKeyboardMappingEquals(a, b) {\n    if (!a && !b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    for (var scanCode = 0; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n        var strScanCode = scanCode_1.ScanCodeUtils.toString(scanCode);\n        var aEntry = a[strScanCode];\n        var bEntry = b[strScanCode];\n        if (!windowsKeyMappingEquals(aEntry, bEntry)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.windowsKeyboardMappingEquals = windowsKeyboardMappingEquals;\nvar LOG = false;\nfunction log(str) {\n    if (LOG) {\n        console.info(str);\n    }\n}\nvar NATIVE_KEY_CODE_TO_KEY_CODE = _getNativeMap();\nvar WindowsNativeResolvedKeybinding = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowsNativeResolvedKeybinding, _super);\n    function WindowsNativeResolvedKeybinding(mapper, parts) {\n        var _this = _super.call(this, platform_1.OperatingSystem.Windows, parts) || this;\n        _this._mapper = mapper;\n        return _this;\n    }\n    WindowsNativeResolvedKeybinding.prototype._getLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._mapper.getUILabelForKeyCode(keybinding.keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype._getUSLabelForKeybinding = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype.getUSLabel = function () {\n        var _this = this;\n        return keybindingLabels_1.UILabelProvider.toLabel(this._os, this._parts, function (keybinding) { return _this._getUSLabelForKeybinding(keybinding); });\n    };\n    WindowsNativeResolvedKeybinding.prototype._getAriaLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._mapper.getAriaLabelForKeyCode(keybinding.keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype._keyCodeToElectronAccelerator = function (keyCode) {\n        if (keyCode >= keyCodes_1.KeyCode.NUMPAD_0 && keyCode <= keyCodes_1.KeyCode.NUMPAD_DIVIDE) {\n            // Electron cannot handle numpad keys\n            return null;\n        }\n        switch (keyCode) {\n            case keyCodes_1.KeyCode.UpArrow:\n                return 'Up';\n            case keyCodes_1.KeyCode.DownArrow:\n                return 'Down';\n            case keyCodes_1.KeyCode.LeftArrow:\n                return 'Left';\n            case keyCodes_1.KeyCode.RightArrow:\n                return 'Right';\n        }\n        // electron menus always do the correct rendering on Windows\n        return keyCodes_1.KeyCodeUtils.toString(keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype._getElectronAccelerator = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return null;\n        }\n        return this._keyCodeToElectronAccelerator(keybinding.keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype._getUserSettingsLabel = function (keybinding) {\n        if (keybinding.isDuplicateModifierCase()) {\n            return '';\n        }\n        var result = this._mapper.getUserSettingsLabelForKeyCode(keybinding.keyCode);\n        return (result ? result.toLowerCase() : result);\n    };\n    WindowsNativeResolvedKeybinding.prototype._isWYSIWYG = function (keybinding) {\n        return this.__isWYSIWYG(keybinding.keyCode);\n    };\n    WindowsNativeResolvedKeybinding.prototype.__isWYSIWYG = function (keyCode) {\n        if (keyCode === keyCodes_1.KeyCode.LeftArrow\n            || keyCode === keyCodes_1.KeyCode.UpArrow\n            || keyCode === keyCodes_1.KeyCode.RightArrow\n            || keyCode === keyCodes_1.KeyCode.DownArrow) {\n            return true;\n        }\n        var ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n        var userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n        return (ariaLabel === userSettingsLabel);\n    };\n    WindowsNativeResolvedKeybinding.prototype._getDispatchPart = function (keybinding) {\n        if (keybinding.isModifierKey()) {\n            return null;\n        }\n        var result = '';\n        if (keybinding.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (keybinding.shiftKey) {\n            result += 'shift+';\n        }\n        if (keybinding.altKey) {\n            result += 'alt+';\n        }\n        if (keybinding.metaKey) {\n            result += 'meta+';\n        }\n        result += keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n        return result;\n    };\n    WindowsNativeResolvedKeybinding.getProducedCharCode = function (kb, mapping) {\n        if (!mapping) {\n            return null;\n        }\n        if (kb.ctrlKey && kb.shiftKey && kb.altKey) {\n            return mapping.withShiftAltGr;\n        }\n        if (kb.ctrlKey && kb.altKey) {\n            return mapping.withAltGr;\n        }\n        if (kb.shiftKey) {\n            return mapping.withShift;\n        }\n        return mapping.value;\n    };\n    WindowsNativeResolvedKeybinding.getProducedChar = function (kb, mapping) {\n        var char = this.getProducedCharCode(kb, mapping);\n        if (char === null || char.length === 0) {\n            return ' --- ';\n        }\n        return '  ' + char + '  ';\n    };\n    return WindowsNativeResolvedKeybinding;\n}(baseResolvedKeybinding_1.BaseResolvedKeybinding));\nexports.WindowsNativeResolvedKeybinding = WindowsNativeResolvedKeybinding;\nvar WindowsKeyboardMapper = /** @class */ (function () {\n    function WindowsKeyboardMapper(isUSStandard, rawMappings) {\n        var _this = this;\n        this._keyCodeToLabel = [];\n        this.isUSStandard = isUSStandard;\n        this._scanCodeToKeyCode = [];\n        this._keyCodeToLabel = [];\n        this._keyCodeExists = [];\n        this._keyCodeToLabel[keyCodes_1.KeyCode.Unknown] = keyCodes_1.KeyCodeUtils.toString(keyCodes_1.KeyCode.Unknown);\n        for (var scanCode = scanCode_1.ScanCode.None; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n            var immutableKeyCode = scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n            if (immutableKeyCode !== -1) {\n                this._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n                this._keyCodeToLabel[immutableKeyCode] = keyCodes_1.KeyCodeUtils.toString(immutableKeyCode);\n                this._keyCodeExists[immutableKeyCode] = true;\n            }\n        }\n        var producesLetter = [];\n        this._codeInfo = [];\n        for (var strCode in rawMappings) {\n            if (rawMappings.hasOwnProperty(strCode)) {\n                var scanCode = scanCode_1.ScanCodeUtils.toEnum(strCode);\n                if (scanCode === scanCode_1.ScanCode.None) {\n                    log(\"Unknown scanCode \" + strCode + \" in mapping.\");\n                    continue;\n                }\n                var rawMapping = rawMappings[strCode];\n                var immutableKeyCode = scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n                if (immutableKeyCode !== -1) {\n                    var keyCode_1 = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || keyCodes_1.KeyCode.Unknown;\n                    if (keyCode_1 === keyCodes_1.KeyCode.Unknown || immutableKeyCode === keyCode_1) {\n                        continue;\n                    }\n                    if (scanCode !== scanCode_1.ScanCode.NumpadComma) {\n                        // Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n                        // e.g. on POR - PTB\n                        continue;\n                    }\n                }\n                var value = rawMapping.value;\n                var withShift = rawMapping.withShift;\n                var withAltGr = rawMapping.withAltGr;\n                var withShiftAltGr = rawMapping.withShiftAltGr;\n                var keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || keyCodes_1.KeyCode.Unknown;\n                var mapping = {\n                    scanCode: scanCode,\n                    keyCode: keyCode,\n                    value: value,\n                    withShift: withShift,\n                    withAltGr: withAltGr,\n                    withShiftAltGr: withShiftAltGr,\n                };\n                this._codeInfo[scanCode] = mapping;\n                this._scanCodeToKeyCode[scanCode] = keyCode;\n                if (keyCode === keyCodes_1.KeyCode.Unknown) {\n                    continue;\n                }\n                this._keyCodeExists[keyCode] = true;\n                if (value.length === 0) {\n                    // This key does not produce strings\n                    this._keyCodeToLabel[keyCode] = null;\n                }\n                else if (value.length > 1) {\n                    // This key produces a letter representable with multiple UTF-16 code units.\n                    this._keyCodeToLabel[keyCode] = value;\n                }\n                else {\n                    var charCode = value.charCodeAt(0);\n                    if (charCode >= charCode_1.CharCode.a && charCode <= charCode_1.CharCode.z) {\n                        var upperCaseValue = charCode_1.CharCode.A + (charCode - charCode_1.CharCode.a);\n                        producesLetter[upperCaseValue] = true;\n                        this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode_1.CharCode.A + (charCode - charCode_1.CharCode.a));\n                    }\n                    else if (charCode >= charCode_1.CharCode.A && charCode <= charCode_1.CharCode.Z) {\n                        producesLetter[charCode] = true;\n                        this._keyCodeToLabel[keyCode] = value;\n                    }\n                    else {\n                        this._keyCodeToLabel[keyCode] = value;\n                    }\n                }\n            }\n        }\n        // Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n        var _registerLetterIfMissing = function (charCode, keyCode) {\n            if (!producesLetter[charCode]) {\n                _this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n            }\n        };\n        _registerLetterIfMissing(charCode_1.CharCode.A, keyCodes_1.KeyCode.KEY_A);\n        _registerLetterIfMissing(charCode_1.CharCode.B, keyCodes_1.KeyCode.KEY_B);\n        _registerLetterIfMissing(charCode_1.CharCode.C, keyCodes_1.KeyCode.KEY_C);\n        _registerLetterIfMissing(charCode_1.CharCode.D, keyCodes_1.KeyCode.KEY_D);\n        _registerLetterIfMissing(charCode_1.CharCode.E, keyCodes_1.KeyCode.KEY_E);\n        _registerLetterIfMissing(charCode_1.CharCode.F, keyCodes_1.KeyCode.KEY_F);\n        _registerLetterIfMissing(charCode_1.CharCode.G, keyCodes_1.KeyCode.KEY_G);\n        _registerLetterIfMissing(charCode_1.CharCode.H, keyCodes_1.KeyCode.KEY_H);\n        _registerLetterIfMissing(charCode_1.CharCode.I, keyCodes_1.KeyCode.KEY_I);\n        _registerLetterIfMissing(charCode_1.CharCode.J, keyCodes_1.KeyCode.KEY_J);\n        _registerLetterIfMissing(charCode_1.CharCode.K, keyCodes_1.KeyCode.KEY_K);\n        _registerLetterIfMissing(charCode_1.CharCode.L, keyCodes_1.KeyCode.KEY_L);\n        _registerLetterIfMissing(charCode_1.CharCode.M, keyCodes_1.KeyCode.KEY_M);\n        _registerLetterIfMissing(charCode_1.CharCode.N, keyCodes_1.KeyCode.KEY_N);\n        _registerLetterIfMissing(charCode_1.CharCode.O, keyCodes_1.KeyCode.KEY_O);\n        _registerLetterIfMissing(charCode_1.CharCode.P, keyCodes_1.KeyCode.KEY_P);\n        _registerLetterIfMissing(charCode_1.CharCode.Q, keyCodes_1.KeyCode.KEY_Q);\n        _registerLetterIfMissing(charCode_1.CharCode.R, keyCodes_1.KeyCode.KEY_R);\n        _registerLetterIfMissing(charCode_1.CharCode.S, keyCodes_1.KeyCode.KEY_S);\n        _registerLetterIfMissing(charCode_1.CharCode.T, keyCodes_1.KeyCode.KEY_T);\n        _registerLetterIfMissing(charCode_1.CharCode.U, keyCodes_1.KeyCode.KEY_U);\n        _registerLetterIfMissing(charCode_1.CharCode.V, keyCodes_1.KeyCode.KEY_V);\n        _registerLetterIfMissing(charCode_1.CharCode.W, keyCodes_1.KeyCode.KEY_W);\n        _registerLetterIfMissing(charCode_1.CharCode.X, keyCodes_1.KeyCode.KEY_X);\n        _registerLetterIfMissing(charCode_1.CharCode.Y, keyCodes_1.KeyCode.KEY_Y);\n        _registerLetterIfMissing(charCode_1.CharCode.Z, keyCodes_1.KeyCode.KEY_Z);\n    }\n    WindowsKeyboardMapper.prototype.dumpDebugInfo = function () {\n        var result = [];\n        var immutableSamples = [\n            scanCode_1.ScanCode.ArrowUp,\n            scanCode_1.ScanCode.Numpad0\n        ];\n        var cnt = 0;\n        result.push(\"-----------------------------------------------------------------------------------------------------------------------------------------\");\n        for (var scanCode = scanCode_1.ScanCode.None; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n            if (scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1) {\n                if (immutableSamples.indexOf(scanCode) === -1) {\n                    continue;\n                }\n            }\n            if (cnt % 6 === 0) {\n                result.push(\"|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |\");\n                result.push(\"-----------------------------------------------------------------------------------------------------------------------------------------\");\n            }\n            cnt++;\n            var mapping = this._codeInfo[scanCode];\n            var strCode = scanCode_1.ScanCodeUtils.toString(scanCode);\n            var mods = [0, 2, 5, 7];\n            for (var _i = 0, mods_1 = mods; _i < mods_1.length; _i++) {\n                var mod = mods_1[_i];\n                var ctrlKey = (mod & 1) ? true : false;\n                var shiftKey = (mod & 2) ? true : false;\n                var altKey = (mod & 4) ? true : false;\n                var scanCodeBinding = new scanCode_1.ScanCodeBinding(ctrlKey, shiftKey, altKey, false, scanCode);\n                var kb = this._resolveSimpleUserBinding(scanCodeBinding);\n                var strKeyCode = (kb ? keyCodes_1.KeyCodeUtils.toString(kb.keyCode) : null);\n                var resolvedKb = (kb ? new WindowsNativeResolvedKeybinding(this, [kb]) : null);\n                var outScanCode = \"\" + (ctrlKey ? 'Ctrl+' : '') + (shiftKey ? 'Shift+' : '') + (altKey ? 'Alt+' : '') + strCode;\n                var ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n                var outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n                var outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n                var outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeBinding, mapping);\n                var outKb = (strKeyCode ? \"\" + (ctrlKey ? 'Ctrl+' : '') + (shiftKey ? 'Shift+' : '') + (altKey ? 'Alt+' : '') + strKeyCode : null);\n                var isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n                var outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n                result.push(\"| \" + this._leftPad(outScanCode, 30) + \" | \" + outKey + \" | \" + this._leftPad(outKb, 25) + \" | \" + this._leftPad(outUILabel, 25) + \" |  \" + this._leftPad(outUserSettings, 25) + \" | \" + outWYSIWYG + \" |\");\n            }\n            result.push(\"-----------------------------------------------------------------------------------------------------------------------------------------\");\n        }\n        return result.join('\\n');\n    };\n    WindowsKeyboardMapper.prototype._leftPad = function (str, cnt) {\n        if (str === null) {\n            str = 'null';\n        }\n        while (str.length < cnt) {\n            str = ' ' + str;\n        }\n        return str;\n    };\n    WindowsKeyboardMapper.prototype.getUILabelForKeyCode = function (keyCode) {\n        return this._getLabelForKeyCode(keyCode);\n    };\n    WindowsKeyboardMapper.prototype.getAriaLabelForKeyCode = function (keyCode) {\n        return this._getLabelForKeyCode(keyCode);\n    };\n    WindowsKeyboardMapper.prototype.getUserSettingsLabelForKeyCode = function (keyCode) {\n        if (this.isUSStandard) {\n            return keyCodes_1.KeyCodeUtils.toUserSettingsUS(keyCode);\n        }\n        return keyCodes_1.KeyCodeUtils.toUserSettingsGeneral(keyCode);\n    };\n    WindowsKeyboardMapper.prototype._getLabelForKeyCode = function (keyCode) {\n        return this._keyCodeToLabel[keyCode] || keyCodes_1.KeyCodeUtils.toString(keyCodes_1.KeyCode.Unknown);\n    };\n    WindowsKeyboardMapper.prototype.resolveKeybinding = function (keybinding) {\n        var parts = keybinding.parts;\n        for (var i = 0, len = parts.length; i < len; i++) {\n            var part = parts[i];\n            if (!this._keyCodeExists[part.keyCode]) {\n                return [];\n            }\n        }\n        return [new WindowsNativeResolvedKeybinding(this, parts)];\n    };\n    WindowsKeyboardMapper.prototype.resolveKeyboardEvent = function (keyboardEvent) {\n        var keybinding = new keyCodes_1.SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n        return new WindowsNativeResolvedKeybinding(this, [keybinding]);\n    };\n    WindowsKeyboardMapper.prototype._resolveSimpleUserBinding = function (binding) {\n        if (!binding) {\n            return null;\n        }\n        if (binding instanceof keyCodes_1.SimpleKeybinding) {\n            if (!this._keyCodeExists[binding.keyCode]) {\n                return null;\n            }\n            return binding;\n        }\n        var keyCode = this._scanCodeToKeyCode[binding.scanCode] || keyCodes_1.KeyCode.Unknown;\n        if (keyCode === keyCodes_1.KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n            return null;\n        }\n        return new keyCodes_1.SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n    };\n    WindowsKeyboardMapper.prototype.resolveUserBinding = function (input) {\n        var _this = this;\n        var parts = resolvedKeybindingItem_1.removeElementsAfterNulls(input.map(function (keybinding) { return _this._resolveSimpleUserBinding(keybinding); }));\n        if (parts.length > 0) {\n            return [new WindowsNativeResolvedKeybinding(this, parts)];\n        }\n        return [];\n    };\n    return WindowsKeyboardMapper;\n}());\nexports.WindowsKeyboardMapper = WindowsKeyboardMapper;\n// See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n// See https://github.com/Microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h\nfunction _getNativeMap() {\n    return {\n        VK_BACK: keyCodes_1.KeyCode.Backspace,\n        VK_TAB: keyCodes_1.KeyCode.Tab,\n        VK_CLEAR: keyCodes_1.KeyCode.Unknown,\n        VK_RETURN: keyCodes_1.KeyCode.Enter,\n        VK_SHIFT: keyCodes_1.KeyCode.Shift,\n        VK_CONTROL: keyCodes_1.KeyCode.Ctrl,\n        VK_MENU: keyCodes_1.KeyCode.Alt,\n        VK_PAUSE: keyCodes_1.KeyCode.PauseBreak,\n        VK_CAPITAL: keyCodes_1.KeyCode.CapsLock,\n        VK_KANA: keyCodes_1.KeyCode.Unknown,\n        VK_HANGUL: keyCodes_1.KeyCode.Unknown,\n        VK_JUNJA: keyCodes_1.KeyCode.Unknown,\n        VK_FINAL: keyCodes_1.KeyCode.Unknown,\n        VK_HANJA: keyCodes_1.KeyCode.Unknown,\n        VK_KANJI: keyCodes_1.KeyCode.Unknown,\n        VK_ESCAPE: keyCodes_1.KeyCode.Escape,\n        VK_CONVERT: keyCodes_1.KeyCode.Unknown,\n        VK_NONCONVERT: keyCodes_1.KeyCode.Unknown,\n        VK_ACCEPT: keyCodes_1.KeyCode.Unknown,\n        VK_MODECHANGE: keyCodes_1.KeyCode.Unknown,\n        VK_SPACE: keyCodes_1.KeyCode.Space,\n        VK_PRIOR: keyCodes_1.KeyCode.PageUp,\n        VK_NEXT: keyCodes_1.KeyCode.PageDown,\n        VK_END: keyCodes_1.KeyCode.End,\n        VK_HOME: keyCodes_1.KeyCode.Home,\n        VK_LEFT: keyCodes_1.KeyCode.LeftArrow,\n        VK_UP: keyCodes_1.KeyCode.UpArrow,\n        VK_RIGHT: keyCodes_1.KeyCode.RightArrow,\n        VK_DOWN: keyCodes_1.KeyCode.DownArrow,\n        VK_SELECT: keyCodes_1.KeyCode.Unknown,\n        VK_PRINT: keyCodes_1.KeyCode.Unknown,\n        VK_EXECUTE: keyCodes_1.KeyCode.Unknown,\n        VK_SNAPSHOT: keyCodes_1.KeyCode.Unknown,\n        VK_INSERT: keyCodes_1.KeyCode.Insert,\n        VK_DELETE: keyCodes_1.KeyCode.Delete,\n        VK_HELP: keyCodes_1.KeyCode.Unknown,\n        VK_0: keyCodes_1.KeyCode.KEY_0,\n        VK_1: keyCodes_1.KeyCode.KEY_1,\n        VK_2: keyCodes_1.KeyCode.KEY_2,\n        VK_3: keyCodes_1.KeyCode.KEY_3,\n        VK_4: keyCodes_1.KeyCode.KEY_4,\n        VK_5: keyCodes_1.KeyCode.KEY_5,\n        VK_6: keyCodes_1.KeyCode.KEY_6,\n        VK_7: keyCodes_1.KeyCode.KEY_7,\n        VK_8: keyCodes_1.KeyCode.KEY_8,\n        VK_9: keyCodes_1.KeyCode.KEY_9,\n        VK_A: keyCodes_1.KeyCode.KEY_A,\n        VK_B: keyCodes_1.KeyCode.KEY_B,\n        VK_C: keyCodes_1.KeyCode.KEY_C,\n        VK_D: keyCodes_1.KeyCode.KEY_D,\n        VK_E: keyCodes_1.KeyCode.KEY_E,\n        VK_F: keyCodes_1.KeyCode.KEY_F,\n        VK_G: keyCodes_1.KeyCode.KEY_G,\n        VK_H: keyCodes_1.KeyCode.KEY_H,\n        VK_I: keyCodes_1.KeyCode.KEY_I,\n        VK_J: keyCodes_1.KeyCode.KEY_J,\n        VK_K: keyCodes_1.KeyCode.KEY_K,\n        VK_L: keyCodes_1.KeyCode.KEY_L,\n        VK_M: keyCodes_1.KeyCode.KEY_M,\n        VK_N: keyCodes_1.KeyCode.KEY_N,\n        VK_O: keyCodes_1.KeyCode.KEY_O,\n        VK_P: keyCodes_1.KeyCode.KEY_P,\n        VK_Q: keyCodes_1.KeyCode.KEY_Q,\n        VK_R: keyCodes_1.KeyCode.KEY_R,\n        VK_S: keyCodes_1.KeyCode.KEY_S,\n        VK_T: keyCodes_1.KeyCode.KEY_T,\n        VK_U: keyCodes_1.KeyCode.KEY_U,\n        VK_V: keyCodes_1.KeyCode.KEY_V,\n        VK_W: keyCodes_1.KeyCode.KEY_W,\n        VK_X: keyCodes_1.KeyCode.KEY_X,\n        VK_Y: keyCodes_1.KeyCode.KEY_Y,\n        VK_Z: keyCodes_1.KeyCode.KEY_Z,\n        VK_LWIN: keyCodes_1.KeyCode.Meta,\n        VK_COMMAND: keyCodes_1.KeyCode.Meta,\n        VK_RWIN: keyCodes_1.KeyCode.Meta,\n        VK_APPS: keyCodes_1.KeyCode.Unknown,\n        VK_SLEEP: keyCodes_1.KeyCode.Unknown,\n        VK_NUMPAD0: keyCodes_1.KeyCode.NUMPAD_0,\n        VK_NUMPAD1: keyCodes_1.KeyCode.NUMPAD_1,\n        VK_NUMPAD2: keyCodes_1.KeyCode.NUMPAD_2,\n        VK_NUMPAD3: keyCodes_1.KeyCode.NUMPAD_3,\n        VK_NUMPAD4: keyCodes_1.KeyCode.NUMPAD_4,\n        VK_NUMPAD5: keyCodes_1.KeyCode.NUMPAD_5,\n        VK_NUMPAD6: keyCodes_1.KeyCode.NUMPAD_6,\n        VK_NUMPAD7: keyCodes_1.KeyCode.NUMPAD_7,\n        VK_NUMPAD8: keyCodes_1.KeyCode.NUMPAD_8,\n        VK_NUMPAD9: keyCodes_1.KeyCode.NUMPAD_9,\n        VK_MULTIPLY: keyCodes_1.KeyCode.NUMPAD_MULTIPLY,\n        VK_ADD: keyCodes_1.KeyCode.NUMPAD_ADD,\n        VK_SEPARATOR: keyCodes_1.KeyCode.NUMPAD_SEPARATOR,\n        VK_SUBTRACT: keyCodes_1.KeyCode.NUMPAD_SUBTRACT,\n        VK_DECIMAL: keyCodes_1.KeyCode.NUMPAD_DECIMAL,\n        VK_DIVIDE: keyCodes_1.KeyCode.NUMPAD_DIVIDE,\n        VK_F1: keyCodes_1.KeyCode.F1,\n        VK_F2: keyCodes_1.KeyCode.F2,\n        VK_F3: keyCodes_1.KeyCode.F3,\n        VK_F4: keyCodes_1.KeyCode.F4,\n        VK_F5: keyCodes_1.KeyCode.F5,\n        VK_F6: keyCodes_1.KeyCode.F6,\n        VK_F7: keyCodes_1.KeyCode.F7,\n        VK_F8: keyCodes_1.KeyCode.F8,\n        VK_F9: keyCodes_1.KeyCode.F9,\n        VK_F10: keyCodes_1.KeyCode.F10,\n        VK_F11: keyCodes_1.KeyCode.F11,\n        VK_F12: keyCodes_1.KeyCode.F12,\n        VK_F13: keyCodes_1.KeyCode.F13,\n        VK_F14: keyCodes_1.KeyCode.F14,\n        VK_F15: keyCodes_1.KeyCode.F15,\n        VK_F16: keyCodes_1.KeyCode.F16,\n        VK_F17: keyCodes_1.KeyCode.F17,\n        VK_F18: keyCodes_1.KeyCode.F18,\n        VK_F19: keyCodes_1.KeyCode.F19,\n        VK_F20: keyCodes_1.KeyCode.Unknown,\n        VK_F21: keyCodes_1.KeyCode.Unknown,\n        VK_F22: keyCodes_1.KeyCode.Unknown,\n        VK_F23: keyCodes_1.KeyCode.Unknown,\n        VK_F24: keyCodes_1.KeyCode.Unknown,\n        VK_NUMLOCK: keyCodes_1.KeyCode.NumLock,\n        VK_SCROLL: keyCodes_1.KeyCode.ScrollLock,\n        VK_LSHIFT: keyCodes_1.KeyCode.Shift,\n        VK_RSHIFT: keyCodes_1.KeyCode.Shift,\n        VK_LCONTROL: keyCodes_1.KeyCode.Ctrl,\n        VK_RCONTROL: keyCodes_1.KeyCode.Ctrl,\n        VK_LMENU: keyCodes_1.KeyCode.Unknown,\n        VK_RMENU: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_BACK: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_FORWARD: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_REFRESH: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_STOP: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_SEARCH: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_FAVORITES: keyCodes_1.KeyCode.Unknown,\n        VK_BROWSER_HOME: keyCodes_1.KeyCode.Unknown,\n        VK_VOLUME_MUTE: keyCodes_1.KeyCode.Unknown,\n        VK_VOLUME_DOWN: keyCodes_1.KeyCode.Unknown,\n        VK_VOLUME_UP: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_NEXT_TRACK: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_PREV_TRACK: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_STOP: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_PLAY_PAUSE: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_LAUNCH_MAIL: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_LAUNCH_MEDIA_SELECT: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_LAUNCH_APP1: keyCodes_1.KeyCode.Unknown,\n        VK_MEDIA_LAUNCH_APP2: keyCodes_1.KeyCode.Unknown,\n        VK_OEM_1: keyCodes_1.KeyCode.US_SEMICOLON,\n        VK_OEM_PLUS: keyCodes_1.KeyCode.US_EQUAL,\n        VK_OEM_COMMA: keyCodes_1.KeyCode.US_COMMA,\n        VK_OEM_MINUS: keyCodes_1.KeyCode.US_MINUS,\n        VK_OEM_PERIOD: keyCodes_1.KeyCode.US_DOT,\n        VK_OEM_2: keyCodes_1.KeyCode.US_SLASH,\n        VK_OEM_3: keyCodes_1.KeyCode.US_BACKTICK,\n        VK_ABNT_C1: keyCodes_1.KeyCode.ABNT_C1,\n        VK_ABNT_C2: keyCodes_1.KeyCode.ABNT_C2,\n        VK_OEM_4: keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET,\n        VK_OEM_5: keyCodes_1.KeyCode.US_BACKSLASH,\n        VK_OEM_6: keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET,\n        VK_OEM_7: keyCodes_1.KeyCode.US_QUOTE,\n        VK_OEM_8: keyCodes_1.KeyCode.OEM_8,\n        VK_OEM_102: keyCodes_1.KeyCode.OEM_102,\n        VK_PROCESSKEY: keyCodes_1.KeyCode.Unknown,\n        VK_PACKET: keyCodes_1.KeyCode.Unknown,\n        VK_DBE_SBCSCHAR: keyCodes_1.KeyCode.Unknown,\n        VK_DBE_DBCSCHAR: keyCodes_1.KeyCode.Unknown,\n        VK_ATTN: keyCodes_1.KeyCode.Unknown,\n        VK_CRSEL: keyCodes_1.KeyCode.Unknown,\n        VK_EXSEL: keyCodes_1.KeyCode.Unknown,\n        VK_EREOF: keyCodes_1.KeyCode.Unknown,\n        VK_PLAY: keyCodes_1.KeyCode.Unknown,\n        VK_ZOOM: keyCodes_1.KeyCode.Unknown,\n        VK_NONAME: keyCodes_1.KeyCode.Unknown,\n        VK_PA1: keyCodes_1.KeyCode.Unknown,\n        VK_OEM_CLEAR: keyCodes_1.KeyCode.Unknown,\n        VK_UNKNOWN: keyCodes_1.KeyCode.Unknown,\n    };\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { KeyCode, KeyCodeUtils, Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { UILabelProvider } from 'vs/base/common/keybindingLabels';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IMMUTABLE_CODE_TO_KEY_CODE, ScanCode, ScanCodeBinding, ScanCodeUtils } from 'vs/base/common/scanCode';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/workbench/services/keybinding/common/keyboardMapper';\nimport { BaseResolvedKeybinding } from 'vs/platform/keybinding/common/baseResolvedKeybinding';\nimport { removeElementsAfterNulls } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport interface IWindowsKeyMapping {\n\tvkey: string;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\n\nfunction windowsKeyMappingEquals(a: IWindowsKeyMapping, b: IWindowsKeyMapping): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\treturn (\n\t\ta.vkey === b.vkey\n\t\t&& a.value === b.value\n\t\t&& a.withShift === b.withShift\n\t\t&& a.withAltGr === b.withAltGr\n\t\t&& a.withShiftAltGr === b.withShiftAltGr\n\t);\n}\n\nexport interface IWindowsKeyboardMapping {\n\t[scanCode: string]: IWindowsKeyMapping;\n}\n\nexport function windowsKeyboardMappingEquals(a: IWindowsKeyboardMapping | null, b: IWindowsKeyboardMapping | null): boolean {\n\tif (!a && !b) {\n\t\treturn true;\n\t}\n\tif (!a || !b) {\n\t\treturn false;\n\t}\n\tfor (let scanCode = 0; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\tconst strScanCode = ScanCodeUtils.toString(scanCode);\n\t\tconst aEntry = a[strScanCode];\n\t\tconst bEntry = b[strScanCode];\n\t\tif (!windowsKeyMappingEquals(aEntry, bEntry)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nconst LOG = false;\nfunction log(str: string): void {\n\tif (LOG) {\n\t\tconsole.info(str);\n\t}\n}\n\nconst NATIVE_KEY_CODE_TO_KEY_CODE: { [nativeKeyCode: string]: KeyCode; } = _getNativeMap();\n\nexport interface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tkeyCode: KeyCode;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\n\nexport class WindowsNativeResolvedKeybinding extends BaseResolvedKeybinding<SimpleKeybinding> {\n\n\tprivate readonly _mapper: WindowsKeyboardMapper;\n\n\tconstructor(mapper: WindowsKeyboardMapper, parts: SimpleKeybinding[]) {\n\t\tsuper(OperatingSystem.Windows, parts);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getUILabelForKeyCode(keybinding.keyCode);\n\t}\n\n\tprivate _getUSLabelForKeybinding(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn KeyCodeUtils.toString(keybinding.keyCode);\n\t}\n\n\tpublic getUSLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUSLabelForKeybinding(keybinding));\n\t}\n\n\tprotected _getAriaLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getAriaLabelForKeyCode(keybinding.keyCode);\n\t}\n\n\tprivate _keyCodeToElectronAccelerator(keyCode: KeyCode): string | null {\n\t\tif (keyCode >= KeyCode.NUMPAD_0 && keyCode <= KeyCode.NUMPAD_DIVIDE) {\n\t\t\t// Electron cannot handle numpad keys\n\t\t\treturn null;\n\t\t}\n\n\t\tswitch (keyCode) {\n\t\t\tcase KeyCode.UpArrow:\n\t\t\t\treturn 'Up';\n\t\t\tcase KeyCode.DownArrow:\n\t\t\t\treturn 'Down';\n\t\t\tcase KeyCode.LeftArrow:\n\t\t\t\treturn 'Left';\n\t\t\tcase KeyCode.RightArrow:\n\t\t\t\treturn 'Right';\n\t\t}\n\n\t\t// electron menus always do the correct rendering on Windows\n\t\treturn KeyCodeUtils.toString(keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._keyCodeToElectronAccelerator(keybinding.keyCode);\n\t}\n\n\tprotected _getUserSettingsLabel(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tconst result = this._mapper.getUserSettingsLabelForKeyCode(keybinding.keyCode);\n\t\treturn (result ? result.toLowerCase() : result);\n\t}\n\n\tprotected _isWYSIWYG(keybinding: SimpleKeybinding): boolean {\n\t\treturn this.__isWYSIWYG(keybinding.keyCode);\n\t}\n\n\tprivate __isWYSIWYG(keyCode: KeyCode): boolean {\n\t\tif (\n\t\t\tkeyCode === KeyCode.LeftArrow\n\t\t\t|| keyCode === KeyCode.UpArrow\n\t\t\t|| keyCode === KeyCode.RightArrow\n\t\t\t|| keyCode === KeyCode.DownArrow\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n\t\tconst userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n\t\treturn (ariaLabel === userSettingsLabel);\n\t}\n\n\tprotected _getDispatchPart(keybinding: SimpleKeybinding): string | null {\n\t\tif (keybinding.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (keybinding.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (keybinding.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (keybinding.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (keybinding.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += KeyCodeUtils.toString(keybinding.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprivate static getProducedCharCode(kb: ScanCodeBinding, mapping: IScanCodeMapping): string | null {\n\t\tif (!mapping) {\n\t\t\treturn null;\n\t\t}\n\t\tif (kb.ctrlKey && kb.shiftKey && kb.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (kb.ctrlKey && kb.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (kb.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic static getProducedChar(kb: ScanCodeBinding, mapping: IScanCodeMapping): string {\n\t\tconst char = this.getProducedCharCode(kb, mapping);\n\t\tif (char === null || char.length === 0) {\n\t\t\treturn ' --- ';\n\t\t}\n\t\treturn '  ' + char + '  ';\n\t}\n}\n\nexport class WindowsKeyboardMapper implements IKeyboardMapper {\n\n\tpublic readonly isUSStandard: boolean;\n\tprivate readonly _codeInfo: IScanCodeMapping[];\n\tprivate readonly _scanCodeToKeyCode: KeyCode[];\n\tprivate readonly _keyCodeToLabel: Array<string | null> = [];\n\tprivate readonly _keyCodeExists: boolean[];\n\n\tconstructor(isUSStandard: boolean, rawMappings: IWindowsKeyboardMapping) {\n\t\tthis.isUSStandard = isUSStandard;\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToLabel = [];\n\t\tthis._keyCodeExists = [];\n\t\tthis._keyCodeToLabel[KeyCode.Unknown] = KeyCodeUtils.toString(KeyCode.Unknown);\n\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (immutableKeyCode !== -1) {\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n\t\t\t\tthis._keyCodeToLabel[immutableKeyCode] = KeyCodeUtils.toString(immutableKeyCode);\n\t\t\t\tthis._keyCodeExists[immutableKeyCode] = true;\n\t\t\t}\n\t\t}\n\n\t\tlet producesLetter: boolean[] = [];\n\n\t\tthis._codeInfo = [];\n\t\tfor (let strCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tlog(`Unknown scanCode ${strCode} in mapping.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst rawMapping = rawMappings[strCode];\n\n\t\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\t\tif (immutableKeyCode !== -1) {\n\t\t\t\t\tconst keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\t\t\t\t\tif (keyCode === KeyCode.Unknown || immutableKeyCode === keyCode) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (scanCode !== ScanCode.NumpadComma) {\n\t\t\t\t\t\t// Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n\t\t\t\t\t\t// e.g. on POR - PTB\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst value = rawMapping.value;\n\t\t\t\tconst withShift = rawMapping.withShift;\n\t\t\t\tconst withAltGr = rawMapping.withAltGr;\n\t\t\t\tconst withShiftAltGr = rawMapping.withShiftAltGr;\n\t\t\t\tconst keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tthis._codeInfo[scanCode] = mapping;\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = keyCode;\n\n\t\t\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._keyCodeExists[keyCode] = true;\n\n\t\t\t\tif (value.length === 0) {\n\t\t\t\t\t// This key does not produce strings\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = null;\n\t\t\t\t}\n\n\t\t\t\telse if (value.length > 1) {\n\t\t\t\t\t// This key produces a letter representable with multiple UTF-16 code units.\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tconst charCode = value.charCodeAt(0);\n\n\t\t\t\t\tif (charCode >= CharCode.a && charCode <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue = CharCode.A + (charCode - CharCode.a);\n\t\t\t\t\t\tproducesLetter[upperCaseValue] = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(CharCode.A + (charCode - CharCode.a));\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (charCode >= CharCode.A && charCode <= CharCode.Z) {\n\t\t\t\t\t\tproducesLetter[charCode] = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n\t\tconst _registerLetterIfMissing = (charCode: CharCode, keyCode: KeyCode): void => {\n\t\t\tif (!producesLetter[charCode]) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t}\n\t\t};\n\t\t_registerLetterIfMissing(CharCode.A, KeyCode.KEY_A);\n\t\t_registerLetterIfMissing(CharCode.B, KeyCode.KEY_B);\n\t\t_registerLetterIfMissing(CharCode.C, KeyCode.KEY_C);\n\t\t_registerLetterIfMissing(CharCode.D, KeyCode.KEY_D);\n\t\t_registerLetterIfMissing(CharCode.E, KeyCode.KEY_E);\n\t\t_registerLetterIfMissing(CharCode.F, KeyCode.KEY_F);\n\t\t_registerLetterIfMissing(CharCode.G, KeyCode.KEY_G);\n\t\t_registerLetterIfMissing(CharCode.H, KeyCode.KEY_H);\n\t\t_registerLetterIfMissing(CharCode.I, KeyCode.KEY_I);\n\t\t_registerLetterIfMissing(CharCode.J, KeyCode.KEY_J);\n\t\t_registerLetterIfMissing(CharCode.K, KeyCode.KEY_K);\n\t\t_registerLetterIfMissing(CharCode.L, KeyCode.KEY_L);\n\t\t_registerLetterIfMissing(CharCode.M, KeyCode.KEY_M);\n\t\t_registerLetterIfMissing(CharCode.N, KeyCode.KEY_N);\n\t\t_registerLetterIfMissing(CharCode.O, KeyCode.KEY_O);\n\t\t_registerLetterIfMissing(CharCode.P, KeyCode.KEY_P);\n\t\t_registerLetterIfMissing(CharCode.Q, KeyCode.KEY_Q);\n\t\t_registerLetterIfMissing(CharCode.R, KeyCode.KEY_R);\n\t\t_registerLetterIfMissing(CharCode.S, KeyCode.KEY_S);\n\t\t_registerLetterIfMissing(CharCode.T, KeyCode.KEY_T);\n\t\t_registerLetterIfMissing(CharCode.U, KeyCode.KEY_U);\n\t\t_registerLetterIfMissing(CharCode.V, KeyCode.KEY_V);\n\t\t_registerLetterIfMissing(CharCode.W, KeyCode.KEY_W);\n\t\t_registerLetterIfMissing(CharCode.X, KeyCode.KEY_X);\n\t\t_registerLetterIfMissing(CharCode.Y, KeyCode.KEY_Y);\n\t\t_registerLetterIfMissing(CharCode.Z, KeyCode.KEY_Z);\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tlet result: string[] = [];\n\n\t\tlet immutableSamples = [\n\t\t\tScanCode.ArrowUp,\n\t\t\tScanCode.Numpad0\n\t\t];\n\n\t\tlet cnt = 0;\n\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 6 === 0) {\n\t\t\t\tresult.push(`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`);\n\t\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\t\t\tconst strCode = ScanCodeUtils.toString(scanCode);\n\n\t\t\tconst mods = [0b000, 0b010, 0b101, 0b111];\n\t\t\tfor (const mod of mods) {\n\t\t\t\tconst ctrlKey = (mod & 0b001) ? true : false;\n\t\t\t\tconst shiftKey = (mod & 0b010) ? true : false;\n\t\t\t\tconst altKey = (mod & 0b100) ? true : false;\n\t\t\t\tconst scanCodeBinding = new ScanCodeBinding(ctrlKey, shiftKey, altKey, false, scanCode);\n\t\t\t\tconst kb = this._resolveSimpleUserBinding(scanCodeBinding);\n\t\t\t\tconst strKeyCode = (kb ? KeyCodeUtils.toString(kb.keyCode) : null);\n\t\t\t\tconst resolvedKb = (kb ? new WindowsNativeResolvedKeybinding(this, [kb]) : null);\n\n\t\t\t\tconst outScanCode = `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strCode}`;\n\t\t\t\tconst ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n\t\t\t\tconst outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n\t\t\t\tconst outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n\t\t\t\tconst outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeBinding, mapping);\n\t\t\t\tconst outKb = (strKeyCode ? `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strKeyCode}` : null);\n\t\t\t\tconst isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n\t\t\t\tconst outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n\t\t\t\tresult.push(`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`);\n\t\t\t}\n\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t}\n\n\n\t\treturn result.join('\\n');\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = 'null';\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = ' ' + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic getUILabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getAriaLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getUserSettingsLabelForKeyCode(keyCode: KeyCode): string {\n\t\tif (this.isUSStandard) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(keyCode);\n\t\t}\n\t\treturn KeyCodeUtils.toUserSettingsGeneral(keyCode);\n\t}\n\n\tprivate _getLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._keyCodeToLabel[keyCode] || KeyCodeUtils.toString(KeyCode.Unknown);\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): WindowsNativeResolvedKeybinding[] {\n\t\tconst parts = keybinding.parts;\n\t\tfor (let i = 0, len = parts.length; i < len; i++) {\n\t\t\tconst part = parts[i];\n\t\t\tif (!this._keyCodeExists[part.keyCode]) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\treturn [new WindowsNativeResolvedKeybinding(this, parts)];\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): WindowsNativeResolvedKeybinding {\n\t\tconst keybinding = new SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n\t\treturn new WindowsNativeResolvedKeybinding(this, [keybinding]);\n\t}\n\n\tprivate _resolveSimpleUserBinding(binding: SimpleKeybinding | ScanCodeBinding | null): SimpleKeybinding | null {\n\t\tif (!binding) {\n\t\t\treturn null;\n\t\t}\n\t\tif (binding instanceof SimpleKeybinding) {\n\t\t\tif (!this._keyCodeExists[binding.keyCode]) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn binding;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode[binding.scanCode] || KeyCode.Unknown;\n\t\tif (keyCode === KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n\t}\n\n\tpublic resolveUserBinding(input: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[] {\n\t\tconst parts: SimpleKeybinding[] = removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n\t\tif (parts.length > 0) {\n\t\t\treturn [new WindowsNativeResolvedKeybinding(this, parts)];\n\t\t}\n\t\treturn [];\n\t}\n}\n\n\n// See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n// See https://github.com/Microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h\nfunction _getNativeMap() {\n\treturn {\n\t\tVK_BACK: KeyCode.Backspace,\n\t\tVK_TAB: KeyCode.Tab,\n\t\tVK_CLEAR: KeyCode.Unknown, // MISSING\n\t\tVK_RETURN: KeyCode.Enter,\n\t\tVK_SHIFT: KeyCode.Shift,\n\t\tVK_CONTROL: KeyCode.Ctrl,\n\t\tVK_MENU: KeyCode.Alt,\n\t\tVK_PAUSE: KeyCode.PauseBreak,\n\t\tVK_CAPITAL: KeyCode.CapsLock,\n\t\tVK_KANA: KeyCode.Unknown, // MISSING\n\t\tVK_HANGUL: KeyCode.Unknown, // MISSING\n\t\tVK_JUNJA: KeyCode.Unknown, // MISSING\n\t\tVK_FINAL: KeyCode.Unknown, // MISSING\n\t\tVK_HANJA: KeyCode.Unknown, // MISSING\n\t\tVK_KANJI: KeyCode.Unknown, // MISSING\n\t\tVK_ESCAPE: KeyCode.Escape,\n\t\tVK_CONVERT: KeyCode.Unknown, // MISSING\n\t\tVK_NONCONVERT: KeyCode.Unknown, // MISSING\n\t\tVK_ACCEPT: KeyCode.Unknown, // MISSING\n\t\tVK_MODECHANGE: KeyCode.Unknown, // MISSING\n\t\tVK_SPACE: KeyCode.Space,\n\t\tVK_PRIOR: KeyCode.PageUp,\n\t\tVK_NEXT: KeyCode.PageDown,\n\t\tVK_END: KeyCode.End,\n\t\tVK_HOME: KeyCode.Home,\n\t\tVK_LEFT: KeyCode.LeftArrow,\n\t\tVK_UP: KeyCode.UpArrow,\n\t\tVK_RIGHT: KeyCode.RightArrow,\n\t\tVK_DOWN: KeyCode.DownArrow,\n\t\tVK_SELECT: KeyCode.Unknown, // MISSING\n\t\tVK_PRINT: KeyCode.Unknown, // MISSING\n\t\tVK_EXECUTE: KeyCode.Unknown, // MISSING\n\t\tVK_SNAPSHOT: KeyCode.Unknown, // MISSING\n\t\tVK_INSERT: KeyCode.Insert,\n\t\tVK_DELETE: KeyCode.Delete,\n\t\tVK_HELP: KeyCode.Unknown, // MISSING\n\n\t\tVK_0: KeyCode.KEY_0,\n\t\tVK_1: KeyCode.KEY_1,\n\t\tVK_2: KeyCode.KEY_2,\n\t\tVK_3: KeyCode.KEY_3,\n\t\tVK_4: KeyCode.KEY_4,\n\t\tVK_5: KeyCode.KEY_5,\n\t\tVK_6: KeyCode.KEY_6,\n\t\tVK_7: KeyCode.KEY_7,\n\t\tVK_8: KeyCode.KEY_8,\n\t\tVK_9: KeyCode.KEY_9,\n\t\tVK_A: KeyCode.KEY_A,\n\t\tVK_B: KeyCode.KEY_B,\n\t\tVK_C: KeyCode.KEY_C,\n\t\tVK_D: KeyCode.KEY_D,\n\t\tVK_E: KeyCode.KEY_E,\n\t\tVK_F: KeyCode.KEY_F,\n\t\tVK_G: KeyCode.KEY_G,\n\t\tVK_H: KeyCode.KEY_H,\n\t\tVK_I: KeyCode.KEY_I,\n\t\tVK_J: KeyCode.KEY_J,\n\t\tVK_K: KeyCode.KEY_K,\n\t\tVK_L: KeyCode.KEY_L,\n\t\tVK_M: KeyCode.KEY_M,\n\t\tVK_N: KeyCode.KEY_N,\n\t\tVK_O: KeyCode.KEY_O,\n\t\tVK_P: KeyCode.KEY_P,\n\t\tVK_Q: KeyCode.KEY_Q,\n\t\tVK_R: KeyCode.KEY_R,\n\t\tVK_S: KeyCode.KEY_S,\n\t\tVK_T: KeyCode.KEY_T,\n\t\tVK_U: KeyCode.KEY_U,\n\t\tVK_V: KeyCode.KEY_V,\n\t\tVK_W: KeyCode.KEY_W,\n\t\tVK_X: KeyCode.KEY_X,\n\t\tVK_Y: KeyCode.KEY_Y,\n\t\tVK_Z: KeyCode.KEY_Z,\n\n\t\tVK_LWIN: KeyCode.Meta,\n\t\tVK_COMMAND: KeyCode.Meta,\n\t\tVK_RWIN: KeyCode.Meta,\n\t\tVK_APPS: KeyCode.Unknown, // MISSING\n\t\tVK_SLEEP: KeyCode.Unknown, // MISSING\n\t\tVK_NUMPAD0: KeyCode.NUMPAD_0,\n\t\tVK_NUMPAD1: KeyCode.NUMPAD_1,\n\t\tVK_NUMPAD2: KeyCode.NUMPAD_2,\n\t\tVK_NUMPAD3: KeyCode.NUMPAD_3,\n\t\tVK_NUMPAD4: KeyCode.NUMPAD_4,\n\t\tVK_NUMPAD5: KeyCode.NUMPAD_5,\n\t\tVK_NUMPAD6: KeyCode.NUMPAD_6,\n\t\tVK_NUMPAD7: KeyCode.NUMPAD_7,\n\t\tVK_NUMPAD8: KeyCode.NUMPAD_8,\n\t\tVK_NUMPAD9: KeyCode.NUMPAD_9,\n\t\tVK_MULTIPLY: KeyCode.NUMPAD_MULTIPLY,\n\t\tVK_ADD: KeyCode.NUMPAD_ADD,\n\t\tVK_SEPARATOR: KeyCode.NUMPAD_SEPARATOR,\n\t\tVK_SUBTRACT: KeyCode.NUMPAD_SUBTRACT,\n\t\tVK_DECIMAL: KeyCode.NUMPAD_DECIMAL,\n\t\tVK_DIVIDE: KeyCode.NUMPAD_DIVIDE,\n\t\tVK_F1: KeyCode.F1,\n\t\tVK_F2: KeyCode.F2,\n\t\tVK_F3: KeyCode.F3,\n\t\tVK_F4: KeyCode.F4,\n\t\tVK_F5: KeyCode.F5,\n\t\tVK_F6: KeyCode.F6,\n\t\tVK_F7: KeyCode.F7,\n\t\tVK_F8: KeyCode.F8,\n\t\tVK_F9: KeyCode.F9,\n\t\tVK_F10: KeyCode.F10,\n\t\tVK_F11: KeyCode.F11,\n\t\tVK_F12: KeyCode.F12,\n\t\tVK_F13: KeyCode.F13,\n\t\tVK_F14: KeyCode.F14,\n\t\tVK_F15: KeyCode.F15,\n\t\tVK_F16: KeyCode.F16,\n\t\tVK_F17: KeyCode.F17,\n\t\tVK_F18: KeyCode.F18,\n\t\tVK_F19: KeyCode.F19,\n\t\tVK_F20: KeyCode.Unknown, // MISSING\n\t\tVK_F21: KeyCode.Unknown, // MISSING\n\t\tVK_F22: KeyCode.Unknown, // MISSING\n\t\tVK_F23: KeyCode.Unknown, // MISSING\n\t\tVK_F24: KeyCode.Unknown, // MISSING\n\t\tVK_NUMLOCK: KeyCode.NumLock,\n\t\tVK_SCROLL: KeyCode.ScrollLock,\n\t\tVK_LSHIFT: KeyCode.Shift,\n\t\tVK_RSHIFT: KeyCode.Shift,\n\t\tVK_LCONTROL: KeyCode.Ctrl,\n\t\tVK_RCONTROL: KeyCode.Ctrl,\n\t\tVK_LMENU: KeyCode.Unknown, // MISSING\n\t\tVK_RMENU: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_BACK: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_FORWARD: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_REFRESH: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_STOP: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_SEARCH: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_FAVORITES: KeyCode.Unknown, // MISSING\n\t\tVK_BROWSER_HOME: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_MUTE: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_DOWN: KeyCode.Unknown, // MISSING\n\t\tVK_VOLUME_UP: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_NEXT_TRACK: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_PREV_TRACK: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_STOP: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_PLAY_PAUSE: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_MAIL: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_MEDIA_SELECT: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_APP1: KeyCode.Unknown, // MISSING\n\t\tVK_MEDIA_LAUNCH_APP2: KeyCode.Unknown, // MISSING\n\t\tVK_OEM_1: KeyCode.US_SEMICOLON,\n\t\tVK_OEM_PLUS: KeyCode.US_EQUAL,\n\t\tVK_OEM_COMMA: KeyCode.US_COMMA,\n\t\tVK_OEM_MINUS: KeyCode.US_MINUS,\n\t\tVK_OEM_PERIOD: KeyCode.US_DOT,\n\t\tVK_OEM_2: KeyCode.US_SLASH,\n\t\tVK_OEM_3: KeyCode.US_BACKTICK,\n\t\tVK_ABNT_C1: KeyCode.ABNT_C1,\n\t\tVK_ABNT_C2: KeyCode.ABNT_C2,\n\t\tVK_OEM_4: KeyCode.US_OPEN_SQUARE_BRACKET,\n\t\tVK_OEM_5: KeyCode.US_BACKSLASH,\n\t\tVK_OEM_6: KeyCode.US_CLOSE_SQUARE_BRACKET,\n\t\tVK_OEM_7: KeyCode.US_QUOTE,\n\t\tVK_OEM_8: KeyCode.OEM_8,\n\t\tVK_OEM_102: KeyCode.OEM_102,\n\t\tVK_PROCESSKEY: KeyCode.Unknown, // MISSING\n\t\tVK_PACKET: KeyCode.Unknown, // MISSING\n\t\tVK_DBE_SBCSCHAR: KeyCode.Unknown, // MISSING\n\t\tVK_DBE_DBCSCHAR: KeyCode.Unknown, // MISSING\n\t\tVK_ATTN: KeyCode.Unknown, // MISSING\n\t\tVK_CRSEL: KeyCode.Unknown, // MISSING\n\t\tVK_EXSEL: KeyCode.Unknown, // MISSING\n\t\tVK_EREOF: KeyCode.Unknown, // MISSING\n\t\tVK_PLAY: KeyCode.Unknown, // MISSING\n\t\tVK_ZOOM: KeyCode.Unknown, // MISSING\n\t\tVK_NONAME: KeyCode.Unknown, // MISSING\n\t\tVK_PA1: KeyCode.Unknown, // MISSING\n\t\tVK_OEM_CLEAR: KeyCode.Unknown, // MISSING\n\t\tVK_UNKNOWN: KeyCode.Unknown,\n\t};\n}\n"]}]}