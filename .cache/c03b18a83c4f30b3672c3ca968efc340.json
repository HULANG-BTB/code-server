{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/trimTrailingWhitespaceCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\", \"vs/editor/common/core/editOperation\", \"vs/editor/common/core/range\"], function (require, exports, strings, editOperation_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TrimTrailingWhitespaceCommand {\n        constructor(selection, cursors) {\n            this.selection = selection;\n            this.cursors = cursors;\n        }\n        getEditOperations(model, builder) {\n            let ops = trimTrailingWhitespace(model, this.cursors);\n            for (let i = 0, len = ops.length; i < len; i++) {\n                let op = ops[i];\n                builder.addEditOperation(op.range, op.text);\n            }\n            this.selectionId = builder.trackSelection(this.selection);\n        }\n        computeCursorState(model, helper) {\n            return helper.getTrackedSelection(this.selectionId);\n        }\n    }\n    exports.TrimTrailingWhitespaceCommand = TrimTrailingWhitespaceCommand;\n    /**\n     * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n     */\n    function trimTrailingWhitespace(model, cursors) {\n        // Sort cursors ascending\n        cursors.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                return a.column - b.column;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        // Reduce multiple cursors on the same line and only keep the last one on the line\n        for (let i = cursors.length - 2; i >= 0; i--) {\n            if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n                // Remove cursor at `i`\n                cursors.splice(i, 1);\n            }\n        }\n        let r = [];\n        let rLen = 0;\n        let cursorIndex = 0;\n        let cursorLen = cursors.length;\n        for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n            let lineContent = model.getLineContent(lineNumber);\n            let maxLineColumn = lineContent.length + 1;\n            let minEditColumn = 0;\n            if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n                minEditColumn = cursors[cursorIndex].column;\n                cursorIndex++;\n                if (minEditColumn === maxLineColumn) {\n                    // The cursor is at the end of the line => no edits for sure on this line\n                    continue;\n                }\n            }\n            if (lineContent.length === 0) {\n                continue;\n            }\n            let lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n            let fromColumn = 0;\n            if (lastNonWhitespaceIndex === -1) {\n                // Entire line is whitespace\n                fromColumn = 1;\n            }\n            else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n                // There is trailing whitespace\n                fromColumn = lastNonWhitespaceIndex + 2;\n            }\n            else {\n                // There is no trailing whitespace\n                continue;\n            }\n            fromColumn = Math.max(minEditColumn, fromColumn);\n            r[rLen++] = editOperation_1.EditOperation.delete(new range_1.Range(lineNumber, fromColumn, lineNumber, maxLineColumn));\n        }\n        return r;\n    }\n    exports.trimTrailingWhitespace = trimTrailingWhitespace;\n});\n",null]}