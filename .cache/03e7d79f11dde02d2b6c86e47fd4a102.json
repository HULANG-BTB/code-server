{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keybindingIO.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keybindingParser\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, keybindingParser_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class KeybindingIO {\n        static writeKeybindingItem(out, item) {\n            if (!item.resolvedKeybinding) {\n                return;\n            }\n            let quotedSerializedKeybinding = JSON.stringify(item.resolvedKeybinding.getUserSettingsLabel());\n            out.write(`{ \"key\": ${rightPaddedString(quotedSerializedKeybinding + ',', 25)} \"command\": `);\n            let quotedSerializedWhen = item.when ? JSON.stringify(item.when.serialize()) : '';\n            let quotedSerializeCommand = JSON.stringify(item.command);\n            if (quotedSerializedWhen.length > 0) {\n                out.write(`${quotedSerializeCommand},`);\n                out.writeLine();\n                out.write(`                                     \"when\": ${quotedSerializedWhen} `);\n            }\n            else {\n                out.write(`${quotedSerializeCommand} `);\n            }\n            // out.write(String(item.weight1 + '-' + item.weight2));\n            out.write('}');\n        }\n        static readUserKeybindingItem(input) {\n            const parts = (typeof input.key === 'string' ? keybindingParser_1.KeybindingParser.parseUserBinding(input.key) : []);\n            const when = (typeof input.when === 'string' ? contextkey_1.ContextKeyExpr.deserialize(input.when) : undefined);\n            const command = (typeof input.command === 'string' ? input.command : null);\n            const commandArgs = (typeof input.args !== 'undefined' ? input.args : undefined);\n            return {\n                parts: parts,\n                command: command,\n                commandArgs: commandArgs,\n                when: when\n            };\n        }\n    }\n    exports.KeybindingIO = KeybindingIO;\n    function rightPaddedString(str, minChars) {\n        if (str.length < minChars) {\n            return str + (new Array(minChars - str.length).join(' '));\n        }\n        return str;\n    }\n    class OutputBuilder {\n        constructor() {\n            this._lines = [];\n            this._currentLine = '';\n        }\n        write(str) {\n            this._currentLine += str;\n        }\n        writeLine(str = '') {\n            this._lines.push(this._currentLine + str);\n            this._currentLine = '';\n        }\n        toString() {\n            this.writeLine();\n            return this._lines.join('\\n');\n        }\n    }\n    exports.OutputBuilder = OutputBuilder;\n});\n",null]}