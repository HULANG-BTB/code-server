{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-browser/updateService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-browser/updateService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar update_1 = require(\"vs/platform/update/common/update\");\nvar mainProcessService_1 = require(\"vs/platform/ipc/electron-browser/mainProcessService\");\nvar UpdateService = /** @class */ (function () {\n    function UpdateService(mainProcessService) {\n        var _this = this;\n        this._onStateChange = new event_1.Emitter();\n        this._state = update_1.State.Uninitialized;\n        this.channel = mainProcessService.getChannel('update');\n        // always set this._state as the state changes\n        this.onStateChange(function (state) { return _this._state = state; });\n        this.channel.call('_getInitialState').then(function (state) {\n            // fire initial state\n            _this._onStateChange.fire(state);\n            // fire subsequent states as they come in from remote\n            _this.channel.listen('onStateChange')(function (state) { return _this._onStateChange.fire(state); });\n        });\n    }\n    Object.defineProperty(UpdateService.prototype, \"onStateChange\", {\n        get: function () { return this._onStateChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UpdateService.prototype, \"state\", {\n        get: function () { return this._state; },\n        enumerable: true,\n        configurable: true\n    });\n    UpdateService.prototype.checkForUpdates = function (context) {\n        return this.channel.call('checkForUpdates', context);\n    };\n    UpdateService.prototype.downloadUpdate = function () {\n        return this.channel.call('downloadUpdate');\n    };\n    UpdateService.prototype.applyUpdate = function () {\n        return this.channel.call('applyUpdate');\n    };\n    UpdateService.prototype.quitAndInstall = function () {\n        return this.channel.call('quitAndInstall');\n    };\n    UpdateService.prototype.isLatestVersion = function () {\n        return this.channel.call('isLatestVersion');\n    };\n    UpdateService = tslib_1.__decorate([\n        tslib_1.__param(0, mainProcessService_1.IMainProcessService)\n    ], UpdateService);\n    return UpdateService;\n}());\nexports.UpdateService = UpdateService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-browser/updateService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-browser/updateService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,8CAAsD;AACtD,2DAAyE;AACzE,0FAA0F;AAG1F;IAYC,uBAAiC,kBAAuC;QAAxE,iBAcC;QAtBO,mBAAc,GAAG,IAAI,eAAO,EAAS,CAAC;QAGtC,WAAM,GAAU,cAAK,CAAC,aAAa,CAAC;QAM3C,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAEvD,8CAA8C;QAC9C,IAAI,CAAC,aAAa,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QAEjD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAQ,kBAAkB,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACtD,qBAAqB;YACrB,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEhC,qDAAqD;YAErD,KAAI,CAAC,OAAO,CAAC,MAAM,CAAQ,eAAe,CAAC,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;IACJ,CAAC;IArBD,sBAAI,wCAAa;aAAjB,cAAoC,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGvE,sBAAI,gCAAK;aAAT,cAAqB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAoB1C,uCAAe,GAAf,UAAgB,OAAY;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAED,sCAAc,GAAd;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5C,CAAC;IAED,mCAAW,GAAX;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACzC,CAAC;IAED,sCAAc,GAAd;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5C,CAAC;IAED,uCAAe,GAAf;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IA9CW,aAAa;QAYZ,mBAAA,wCAAmB,CAAA;OAZpB,aAAa,CA+CzB;IAAD,oBAAC;CAAA,AA/CD,IA+CC;AA/CY,sCAAa","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IUpdateService, State } from 'vs/platform/update/common/update';\nimport { IMainProcessService } from 'vs/platform/ipc/electron-browser/mainProcessService';\nimport { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\n\nexport class UpdateService implements IUpdateService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate _onStateChange = new Emitter<State>();\n\tget onStateChange(): Event<State> { return this._onStateChange.event; }\n\n\tprivate _state: State = State.Uninitialized;\n\tget state(): State { return this._state; }\n\n\tprivate channel: IChannel;\n\n\tconstructor(@IMainProcessService mainProcessService: IMainProcessService) {\n\t\tthis.channel = mainProcessService.getChannel('update');\n\n\t\t// always set this._state as the state changes\n\t\tthis.onStateChange(state => this._state = state);\n\n\t\tthis.channel.call<State>('_getInitialState').then(state => {\n\t\t\t// fire initial state\n\t\t\tthis._onStateChange.fire(state);\n\n\t\t\t// fire subsequent states as they come in from remote\n\n\t\t\tthis.channel.listen<State>('onStateChange')(state => this._onStateChange.fire(state));\n\t\t});\n\t}\n\n\tcheckForUpdates(context: any): Promise<void> {\n\t\treturn this.channel.call('checkForUpdates', context);\n\t}\n\n\tdownloadUpdate(): Promise<void> {\n\t\treturn this.channel.call('downloadUpdate');\n\t}\n\n\tapplyUpdate(): Promise<void> {\n\t\treturn this.channel.call('applyUpdate');\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\treturn this.channel.call('quitAndInstall');\n\t}\n\n\tisLatestVersion(): Promise<boolean> {\n\t\treturn this.channel.call('isLatestVersion');\n\t}\n}\n"]}]}