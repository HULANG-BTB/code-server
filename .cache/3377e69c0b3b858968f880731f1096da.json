{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/event.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/event.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nexports.domEvent = function (element, type, useCapture) {\n    var fn = function (e) { return emitter.fire(e); };\n    var emitter = new event_1.Emitter({\n        onFirstListenerAdd: function () {\n            element.addEventListener(type, fn, useCapture);\n        },\n        onLastListenerRemove: function () {\n            element.removeEventListener(type, fn, useCapture);\n        }\n    });\n    return emitter.event;\n};\nfunction stop(event) {\n    return event_1.Event.map(event, function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        return e;\n    });\n}\nexports.stop = stop;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/event.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/event.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8CAAmE;AAStD,QAAA,QAAQ,GAAc,UAAC,OAAqB,EAAE,IAAY,EAAE,UAAoB;IAC5F,IAAM,EAAE,GAAG,UAAC,CAAQ,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAf,CAAe,CAAC;IACzC,IAAM,OAAO,GAAG,IAAI,eAAO,CAAQ;QAClC,kBAAkB,EAAE;YACnB,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QAChD,CAAC;QACD,oBAAoB,EAAE;YACrB,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;QACnD,CAAC;KACD,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC,KAAK,CAAC;AACtB,CAAC,CAAC;AAOF,SAAgB,IAAI,CAA6B,KAAmB;IACnE,OAAO,aAAS,CAAC,GAAG,CAAC,KAAK,EAAE,UAAA,CAAC;QAC5B,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,OAAO,CAAC,CAAC;IACV,CAAC,CAAC,CAAC;AACJ,CAAC;AAND,oBAMC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event as BaseEvent, Emitter } from 'vs/base/common/event';\n\nexport type EventHandler = HTMLElement | HTMLDocument | Window;\n\nexport interface IDomEvent {\n\t<K extends keyof HTMLElementEventMap>(element: EventHandler, type: K, useCapture?: boolean): BaseEvent<HTMLElementEventMap[K]>;\n\t(element: EventHandler, type: string, useCapture?: boolean): BaseEvent<any>;\n}\n\nexport const domEvent: IDomEvent = (element: EventHandler, type: string, useCapture?: boolean) => {\n\tconst fn = (e: Event) => emitter.fire(e);\n\tconst emitter = new Emitter<Event>({\n\t\tonFirstListenerAdd: () => {\n\t\t\telement.addEventListener(type, fn, useCapture);\n\t\t},\n\t\tonLastListenerRemove: () => {\n\t\t\telement.removeEventListener(type, fn, useCapture);\n\t\t}\n\t});\n\n\treturn emitter.event;\n};\n\nexport interface CancellableEvent {\n\tpreventDefault(): void;\n\tstopPropagation(): void;\n}\n\nexport function stop<T extends CancellableEvent>(event: BaseEvent<T>): BaseEvent<T> {\n\treturn BaseEvent.map(event, e => {\n\t\te.preventDefault();\n\t\te.stopPropagation();\n\t\treturn e;\n\t});\n}"]}]}