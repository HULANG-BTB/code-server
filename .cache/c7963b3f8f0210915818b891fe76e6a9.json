{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/label/common/label.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/label/common/label.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar nls_1 = require(\"vs/nls\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar LABEL_SERVICE_ID = 'label';\nfunction getSimpleWorkspaceLabel(workspace, workspaceHome) {\n    if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {\n        return resources_1.basename(workspace);\n    }\n    // Workspace: Untitled\n    if (resources_1.isEqualOrParent(workspace.configPath, workspaceHome)) {\n        return nls_1.localize('untitledWorkspace', \"Untitled (Workspace)\");\n    }\n    var filename = resources_1.basename(workspace.configPath);\n    var workspaceName = filename.substr(0, filename.length - workspaces_1.WORKSPACE_EXTENSION.length - 1);\n    return nls_1.localize('workspaceName', \"{0} (Workspace)\", workspaceName);\n}\nexports.getSimpleWorkspaceLabel = getSimpleWorkspaceLabel;\nexports.ILabelService = instantiation_1.createDecorator(LABEL_SERVICE_ID);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/label/common/label.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/label/common/label.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAMhG,gFAAiF;AACjF,uEAA0K;AAC1K,8BAAkC;AAClC,sDAAqE;AAiCrE,IAAM,gBAAgB,GAAG,OAAO,CAAC;AAEjC,SAAgB,uBAAuB,CAAC,SAAqC,EAAE,aAAkB;IAChG,IAAI,8CAAiC,CAAC,SAAS,CAAC,EAAE;QACjD,OAAO,oBAAQ,CAAC,SAAS,CAAC,CAAC;KAC3B;IACD,sBAAsB;IACtB,IAAI,2BAAe,CAAC,SAAS,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE;QACzD,OAAO,cAAQ,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;KAC7D;IAED,IAAM,QAAQ,GAAG,oBAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAChD,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,gCAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAC3F,OAAO,cAAQ,CAAC,eAAe,EAAE,iBAAiB,EAAE,aAAa,CAAC,CAAC;AACpE,CAAC;AAZD,0DAYC;AAGY,QAAA,aAAa,GAAG,+BAAe,CAAgB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, WORKSPACE_EXTENSION } from 'vs/platform/workspaces/common/workspaces';\nimport { localize } from 'vs/nls';\nimport { isEqualOrParent, basename } from 'vs/base/common/resources';\n\nexport interface ILabelService {\n\t_serviceBrand: any;\n\t/**\n\t * Gets the human readable label for a uri.\n\t * If relative is passed returns a label relative to the workspace root that the uri belongs to.\n\t * If noPrefix is passed does not tildify the label and also does not prepand the root name for relative labels in a multi root scenario.\n\t */\n\tgetUriLabel(resource: URI, options?: { relative?: boolean, noPrefix?: boolean, endWithSeparator?: boolean }): string;\n\tgetWorkspaceLabel(workspace: (IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | IWorkspace), options?: { verbose: boolean }): string;\n\tgetHostLabel(scheme: string, authority?: string): string;\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\';\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable;\n\tonDidChangeFormatters: Event<void>;\n}\n\nexport interface ResourceLabelFormatter {\n\tscheme: string;\n\tauthority?: string;\n\tpriority?: boolean;\n\tformatting: ResourceLabelFormatting;\n}\n\nexport interface ResourceLabelFormatting {\n\tlabel: string; // myLabel:/${path}\n\tseparator: '/' | '\\\\' | '';\n\ttildify?: boolean;\n\tnormalizeDriveLetter?: boolean;\n\tworkspaceSuffix?: string;\n\tauthorityPrefix?: string;\n}\n\nconst LABEL_SERVICE_ID = 'label';\n\nexport function getSimpleWorkspaceLabel(workspace: IWorkspaceIdentifier | URI, workspaceHome: URI): string {\n\tif (isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\treturn basename(workspace);\n\t}\n\t// Workspace: Untitled\n\tif (isEqualOrParent(workspace.configPath, workspaceHome)) {\n\t\treturn localize('untitledWorkspace', \"Untitled (Workspace)\");\n\t}\n\n\tconst filename = basename(workspace.configPath);\n\tconst workspaceName = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\treturn localize('workspaceName', \"{0} (Workspace)\", workspaceName);\n}\n\n\nexport const ILabelService = createDecorator<ILabelService>(LABEL_SERVICE_ID);\n"]}]}