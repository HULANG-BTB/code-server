{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/multicursor/multicursor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/multicursor/multicursor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar async_1 = require(\"vs/base/common/async\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar cursorMoveCommands_1 = require(\"vs/editor/common/controller/cursorMoveCommands\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar uint_1 = require(\"vs/editor/common/core/uint\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar findController_1 = require(\"vs/editor/contrib/find/findController\");\nvar findState_1 = require(\"vs/editor/contrib/find/findState\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar InsertCursorAbove = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertCursorAbove, _super);\n    function InsertCursorAbove() {\n        return _super.call(this, {\n            id: 'editor.action.insertCursorAbove',\n            label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n            alias: 'Add Cursor Above',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow,\n                linux: {\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow,\n                    secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.UpArrow]\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, \"&&Add Cursor Above\"),\n                order: 2\n            }\n        }) || this;\n    }\n    InsertCursorAbove.prototype.run = function (accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var useLogicalLine = (args && args.logicalLine === true);\n        var cursors = editor._getCursors();\n        var context = cursors.context;\n        if (context.config.readOnly) {\n            return;\n        }\n        context.model.pushStackElement();\n        cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.addCursorUp(context, cursors.getAll(), useLogicalLine));\n        cursors.reveal(true, cursorCommon_1.RevealTarget.TopMost, editorCommon_1.ScrollType.Smooth);\n    };\n    return InsertCursorAbove;\n}(editorExtensions_1.EditorAction));\nexports.InsertCursorAbove = InsertCursorAbove;\nvar InsertCursorBelow = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertCursorBelow, _super);\n    function InsertCursorBelow() {\n        return _super.call(this, {\n            id: 'editor.action.insertCursorBelow',\n            label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n            alias: 'Add Cursor Below',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow,\n                linux: {\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow,\n                    secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.DownArrow]\n                },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, \"A&&dd Cursor Below\"),\n                order: 3\n            }\n        }) || this;\n    }\n    InsertCursorBelow.prototype.run = function (accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var useLogicalLine = (args && args.logicalLine === true);\n        var cursors = editor._getCursors();\n        var context = cursors.context;\n        if (context.config.readOnly) {\n            return;\n        }\n        context.model.pushStackElement();\n        cursors.setStates(args.source, cursorEvents_1.CursorChangeReason.Explicit, cursorMoveCommands_1.CursorMoveCommands.addCursorDown(context, cursors.getAll(), useLogicalLine));\n        cursors.reveal(true, cursorCommon_1.RevealTarget.BottomMost, editorCommon_1.ScrollType.Smooth);\n    };\n    return InsertCursorBelow;\n}(editorExtensions_1.EditorAction));\nexports.InsertCursorBelow = InsertCursorBelow;\nvar InsertCursorAtEndOfEachLineSelected = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertCursorAtEndOfEachLineSelected, _super);\n    function InsertCursorAtEndOfEachLineSelected() {\n        return _super.call(this, {\n            id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n            label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n            alias: 'Add Cursors to Line Ends',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_I,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, \"Add C&&ursors to Line Ends\"),\n                order: 4\n            }\n        }) || this;\n    }\n    InsertCursorAtEndOfEachLineSelected.prototype.getCursorsForSelection = function (selection, model, result) {\n        if (selection.isEmpty()) {\n            return;\n        }\n        for (var i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n            var currentLineMaxColumn = model.getLineMaxColumn(i);\n            result.push(new selection_1.Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n        }\n        if (selection.endColumn > 1) {\n            result.push(new selection_1.Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n        }\n    };\n    InsertCursorAtEndOfEachLineSelected.prototype.run = function (accessor, editor) {\n        var _this = this;\n        if (!editor.hasModel()) {\n            return;\n        }\n        var model = editor.getModel();\n        var selections = editor.getSelections();\n        var newSelections = [];\n        selections.forEach(function (sel) { return _this.getCursorsForSelection(sel, model, newSelections); });\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n    };\n    return InsertCursorAtEndOfEachLineSelected;\n}(editorExtensions_1.EditorAction));\nvar InsertCursorAtEndOfLineSelected = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertCursorAtEndOfLineSelected, _super);\n    function InsertCursorAtEndOfLineSelected() {\n        return _super.call(this, {\n            id: 'editor.action.addCursorsToBottom',\n            label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n            alias: 'Add Cursors To Bottom',\n            precondition: null\n        }) || this;\n    }\n    InsertCursorAtEndOfLineSelected.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var selections = editor.getSelections();\n        var lineCount = editor.getModel().getLineCount();\n        var newSelections = [];\n        for (var i = selections[0].startLineNumber; i <= lineCount; i++) {\n            newSelections.push(new selection_1.Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n    };\n    return InsertCursorAtEndOfLineSelected;\n}(editorExtensions_1.EditorAction));\nvar InsertCursorAtTopOfLineSelected = /** @class */ (function (_super) {\n    tslib_1.__extends(InsertCursorAtTopOfLineSelected, _super);\n    function InsertCursorAtTopOfLineSelected() {\n        return _super.call(this, {\n            id: 'editor.action.addCursorsToTop',\n            label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n            alias: 'Add Cursors To Top',\n            precondition: null\n        }) || this;\n    }\n    InsertCursorAtTopOfLineSelected.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var selections = editor.getSelections();\n        var newSelections = [];\n        for (var i = selections[0].startLineNumber; i >= 1; i--) {\n            newSelections.push(new selection_1.Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n        }\n        if (newSelections.length > 0) {\n            editor.setSelections(newSelections);\n        }\n    };\n    return InsertCursorAtTopOfLineSelected;\n}(editorExtensions_1.EditorAction));\nvar MultiCursorSessionResult = /** @class */ (function () {\n    function MultiCursorSessionResult(selections, revealRange, revealScrollType) {\n        this.selections = selections;\n        this.revealRange = revealRange;\n        this.revealScrollType = revealScrollType;\n    }\n    return MultiCursorSessionResult;\n}());\nexports.MultiCursorSessionResult = MultiCursorSessionResult;\nvar MultiCursorSession = /** @class */ (function () {\n    function MultiCursorSession(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n        this._editor = _editor;\n        this.findController = findController;\n        this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n        this.searchText = searchText;\n        this.wholeWord = wholeWord;\n        this.matchCase = matchCase;\n        this.currentMatch = currentMatch;\n    }\n    MultiCursorSession.create = function (editor, findController) {\n        if (!editor.hasModel()) {\n            return null;\n        }\n        var findState = findController.getState();\n        // Find widget owns entirely what we search for if:\n        //  - focus is not in the editor (i.e. it is in the find widget)\n        //  - and the search widget is visible\n        //  - and the search string is non-empty\n        if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n            // Find widget owns what is searched for\n            return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n        }\n        // Otherwise, the selection gives the search text, and the find widget gives the search settings\n        // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n        var isDisconnectedFromFindController = false;\n        var wholeWord;\n        var matchCase;\n        var selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            isDisconnectedFromFindController = true;\n            wholeWord = true;\n            matchCase = true;\n        }\n        else {\n            wholeWord = findState.wholeWord;\n            matchCase = findState.matchCase;\n        }\n        // Selection owns what is searched for\n        var s = editor.getSelection();\n        var searchText;\n        var currentMatch = null;\n        if (s.isEmpty()) {\n            // selection is empty => expand to current word\n            var word = editor.getModel().getWordAtPosition(s.getStartPosition());\n            if (!word) {\n                return null;\n            }\n            searchText = word.word;\n            currentMatch = new selection_1.Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n        }\n        else {\n            searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n        }\n        return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n    };\n    MultiCursorSession.prototype.addSelectionToNextFindMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        var nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        var allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, editorCommon_1.ScrollType.Smooth);\n    };\n    MultiCursorSession.prototype.moveSelectionToNextFindMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        var nextMatch = this._getNextMatch();\n        if (!nextMatch) {\n            return null;\n        }\n        var allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, editorCommon_1.ScrollType.Smooth);\n    };\n    MultiCursorSession.prototype._getNextMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            var result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        var allSelections = this._editor.getSelections();\n        var lastAddedSelection = allSelections[allSelections.length - 1];\n        var nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n        if (!nextMatch) {\n            return null;\n        }\n        return new selection_1.Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n    };\n    MultiCursorSession.prototype.addSelectionToPreviousFindMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        var previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        var allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, editorCommon_1.ScrollType.Smooth);\n    };\n    MultiCursorSession.prototype.moveSelectionToPreviousFindMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        var previousMatch = this._getPreviousMatch();\n        if (!previousMatch) {\n            return null;\n        }\n        var allSelections = this._editor.getSelections();\n        return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, editorCommon_1.ScrollType.Smooth);\n    };\n    MultiCursorSession.prototype._getPreviousMatch = function () {\n        if (!this._editor.hasModel()) {\n            return null;\n        }\n        if (this.currentMatch) {\n            var result = this.currentMatch;\n            this.currentMatch = null;\n            return result;\n        }\n        this.findController.highlightFindOptions();\n        var allSelections = this._editor.getSelections();\n        var lastAddedSelection = allSelections[allSelections.length - 1];\n        var previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n        if (!previousMatch) {\n            return null;\n        }\n        return new selection_1.Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n    };\n    MultiCursorSession.prototype.selectAll = function () {\n        if (!this._editor.hasModel()) {\n            return [];\n        }\n        this.findController.highlightFindOptions();\n        return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, uint_1.Constants.MAX_SAFE_SMALL_INTEGER);\n    };\n    return MultiCursorSession;\n}());\nexports.MultiCursorSession = MultiCursorSession;\nvar MultiCursorSelectionController = /** @class */ (function (_super) {\n    tslib_1.__extends(MultiCursorSelectionController, _super);\n    function MultiCursorSelectionController(editor) {\n        var _this = _super.call(this) || this;\n        _this._editor = editor;\n        _this._ignoreSelectionChange = false;\n        _this._session = null;\n        _this._sessionDispose = [];\n        return _this;\n    }\n    MultiCursorSelectionController.get = function (editor) {\n        return editor.getContribution(MultiCursorSelectionController.ID);\n    };\n    MultiCursorSelectionController.prototype.dispose = function () {\n        this._endSession();\n        _super.prototype.dispose.call(this);\n    };\n    MultiCursorSelectionController.prototype.getId = function () {\n        return MultiCursorSelectionController.ID;\n    };\n    MultiCursorSelectionController.prototype._beginSessionIfNeeded = function (findController) {\n        var _this = this;\n        if (!this._session) {\n            // Create a new session\n            var session = MultiCursorSession.create(this._editor, findController);\n            if (!session) {\n                return;\n            }\n            this._session = session;\n            var newState = { searchString: this._session.searchText };\n            if (this._session.isDisconnectedFromFindController) {\n                newState.wholeWordOverride = findState_1.FindOptionOverride.True;\n                newState.matchCaseOverride = findState_1.FindOptionOverride.True;\n                newState.isRegexOverride = findState_1.FindOptionOverride.False;\n            }\n            findController.getState().change(newState, false);\n            this._sessionDispose = [\n                this._editor.onDidChangeCursorSelection(function (e) {\n                    if (_this._ignoreSelectionChange) {\n                        return;\n                    }\n                    _this._endSession();\n                }),\n                this._editor.onDidBlurEditorText(function () {\n                    _this._endSession();\n                }),\n                findController.getState().onFindReplaceStateChange(function (e) {\n                    if (e.matchCase || e.wholeWord) {\n                        _this._endSession();\n                    }\n                })\n            ];\n        }\n    };\n    MultiCursorSelectionController.prototype._endSession = function () {\n        this._sessionDispose = lifecycle_1.dispose(this._sessionDispose);\n        if (this._session && this._session.isDisconnectedFromFindController) {\n            var newState = {\n                wholeWordOverride: findState_1.FindOptionOverride.NotSet,\n                matchCaseOverride: findState_1.FindOptionOverride.NotSet,\n                isRegexOverride: findState_1.FindOptionOverride.NotSet,\n            };\n            this._session.findController.getState().change(newState, false);\n        }\n        this._session = null;\n    };\n    MultiCursorSelectionController.prototype._setSelections = function (selections) {\n        this._ignoreSelectionChange = true;\n        this._editor.setSelections(selections);\n        this._ignoreSelectionChange = false;\n    };\n    MultiCursorSelectionController.prototype._expandEmptyToWord = function (model, selection) {\n        if (!selection.isEmpty()) {\n            return selection;\n        }\n        var word = model.getWordAtPosition(selection.getStartPosition());\n        if (!word) {\n            return selection;\n        }\n        return new selection_1.Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    };\n    MultiCursorSelectionController.prototype._applySessionResult = function (result) {\n        if (!result) {\n            return;\n        }\n        this._setSelections(result.selections);\n        if (result.revealRange) {\n            this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n        }\n    };\n    MultiCursorSelectionController.prototype.getSession = function (findController) {\n        return this._session;\n    };\n    MultiCursorSelectionController.prototype.addSelectionToNextFindMatch = function (findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        if (!this._session) {\n            // If there are multiple cursors, handle the case where they do not all select the same text.\n            var allSelections = this._editor.getSelections();\n            if (allSelections.length > 1) {\n                var findState = findController.getState();\n                var matchCase = findState.matchCase;\n                var selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    var model = this._editor.getModel();\n                    var resultingSelections = [];\n                    for (var i = 0, len = allSelections.length; i < len; i++) {\n                        resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n                    }\n                    this._editor.setSelections(resultingSelections);\n                    return;\n                }\n            }\n        }\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToNextFindMatch());\n        }\n    };\n    MultiCursorSelectionController.prototype.addSelectionToPreviousFindMatch = function (findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n        }\n    };\n    MultiCursorSelectionController.prototype.moveSelectionToNextFindMatch = function (findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n        }\n    };\n    MultiCursorSelectionController.prototype.moveSelectionToPreviousFindMatch = function (findController) {\n        this._beginSessionIfNeeded(findController);\n        if (this._session) {\n            this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n        }\n    };\n    MultiCursorSelectionController.prototype.selectAll = function (findController) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        var matches = null;\n        var findState = findController.getState();\n        // Special case: find widget owns entirely what we search for if:\n        // - focus is not in the editor (i.e. it is in the find widget)\n        // - and the search widget is visible\n        // - and the search string is non-empty\n        // - and we're searching for a regex\n        if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n            matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, uint_1.Constants.MAX_SAFE_SMALL_INTEGER);\n        }\n        else {\n            this._beginSessionIfNeeded(findController);\n            if (!this._session) {\n                return;\n            }\n            matches = this._session.selectAll();\n        }\n        if (matches.length > 0) {\n            var editorSelection = this._editor.getSelection();\n            // Have the primary cursor remain the one where the action was invoked\n            for (var i = 0, len = matches.length; i < len; i++) {\n                var match = matches[i];\n                var intersection = match.range.intersectRanges(editorSelection);\n                if (intersection) {\n                    // bingo!\n                    matches[i] = matches[0];\n                    matches[0] = match;\n                    break;\n                }\n            }\n            this._setSelections(matches.map(function (m) { return new selection_1.Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn); }));\n        }\n    };\n    MultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\n    return MultiCursorSelectionController;\n}(lifecycle_1.Disposable));\nexports.MultiCursorSelectionController = MultiCursorSelectionController;\nvar MultiCursorSelectionControllerAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MultiCursorSelectionControllerAction, _super);\n    function MultiCursorSelectionControllerAction() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MultiCursorSelectionControllerAction.prototype.run = function (accessor, editor) {\n        var multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return;\n        }\n        var findController = findController_1.CommonFindController.get(editor);\n        if (!findController) {\n            return;\n        }\n        this._run(multiCursorController, findController);\n    };\n    return MultiCursorSelectionControllerAction;\n}(editorExtensions_1.EditorAction));\nexports.MultiCursorSelectionControllerAction = MultiCursorSelectionControllerAction;\nvar AddSelectionToNextFindMatchAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AddSelectionToNextFindMatchAction, _super);\n    function AddSelectionToNextFindMatchAction() {\n        return _super.call(this, {\n            id: 'editor.action.addSelectionToNextFindMatch',\n            label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n            alias: 'Add Selection To Next Find Match',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_D,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add &&Next Occurrence\"),\n                order: 5\n            }\n        }) || this;\n    }\n    AddSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.addSelectionToNextFindMatch(findController);\n    };\n    return AddSelectionToNextFindMatchAction;\n}(MultiCursorSelectionControllerAction));\nexports.AddSelectionToNextFindMatchAction = AddSelectionToNextFindMatchAction;\nvar AddSelectionToPreviousFindMatchAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AddSelectionToPreviousFindMatchAction, _super);\n    function AddSelectionToPreviousFindMatchAction() {\n        return _super.call(this, {\n            id: 'editor.action.addSelectionToPreviousFindMatch',\n            label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n            alias: 'Add Selection To Previous Find Match',\n            precondition: null,\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add P&&revious Occurrence\"),\n                order: 6\n            }\n        }) || this;\n    }\n    AddSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.addSelectionToPreviousFindMatch(findController);\n    };\n    return AddSelectionToPreviousFindMatchAction;\n}(MultiCursorSelectionControllerAction));\nexports.AddSelectionToPreviousFindMatchAction = AddSelectionToPreviousFindMatchAction;\nvar MoveSelectionToNextFindMatchAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveSelectionToNextFindMatchAction, _super);\n    function MoveSelectionToNextFindMatchAction() {\n        return _super.call(this, {\n            id: 'editor.action.moveSelectionToNextFindMatch',\n            label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n            alias: 'Move Last Selection To Next Find Match',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_D),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    MoveSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.moveSelectionToNextFindMatch(findController);\n    };\n    return MoveSelectionToNextFindMatchAction;\n}(MultiCursorSelectionControllerAction));\nexports.MoveSelectionToNextFindMatchAction = MoveSelectionToNextFindMatchAction;\nvar MoveSelectionToPreviousFindMatchAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveSelectionToPreviousFindMatchAction, _super);\n    function MoveSelectionToPreviousFindMatchAction() {\n        return _super.call(this, {\n            id: 'editor.action.moveSelectionToPreviousFindMatch',\n            label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n            alias: 'Move Last Selection To Previous Find Match',\n            precondition: null\n        }) || this;\n    }\n    MoveSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.moveSelectionToPreviousFindMatch(findController);\n    };\n    return MoveSelectionToPreviousFindMatchAction;\n}(MultiCursorSelectionControllerAction));\nexports.MoveSelectionToPreviousFindMatchAction = MoveSelectionToPreviousFindMatchAction;\nvar SelectHighlightsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectHighlightsAction, _super);\n    function SelectHighlightsAction() {\n        return _super.call(this, {\n            id: 'editor.action.selectHighlights',\n            label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n            alias: 'Select All Occurrences of Find Match',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_L,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menubarOpts: {\n                menuId: actions_1.MenuId.MenubarSelectionMenu,\n                group: '3_multi',\n                title: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, \"Select All &&Occurrences\"),\n                order: 7\n            }\n        }) || this;\n    }\n    SelectHighlightsAction.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    };\n    return SelectHighlightsAction;\n}(MultiCursorSelectionControllerAction));\nexports.SelectHighlightsAction = SelectHighlightsAction;\nvar CompatChangeAll = /** @class */ (function (_super) {\n    tslib_1.__extends(CompatChangeAll, _super);\n    function CompatChangeAll() {\n        return _super.call(this, {\n            id: 'editor.action.changeAll',\n            label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n            alias: 'Change All Occurrences',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F2,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menuOpts: {\n                group: '1_modification',\n                order: 1.2\n            }\n        }) || this;\n    }\n    CompatChangeAll.prototype._run = function (multiCursorController, findController) {\n        multiCursorController.selectAll(findController);\n    };\n    return CompatChangeAll;\n}(MultiCursorSelectionControllerAction));\nexports.CompatChangeAll = CompatChangeAll;\nvar SelectionHighlighterState = /** @class */ (function () {\n    function SelectionHighlighterState(searchText, matchCase, wordSeparators) {\n        this.searchText = searchText;\n        this.matchCase = matchCase;\n        this.wordSeparators = wordSeparators;\n    }\n    /**\n     * Everything equals except for `lastWordUnderCursor`\n     */\n    SelectionHighlighterState.softEquals = function (a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.searchText === b.searchText\n            && a.matchCase === b.matchCase\n            && a.wordSeparators === b.wordSeparators);\n    };\n    return SelectionHighlighterState;\n}());\nvar SelectionHighlighter = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectionHighlighter, _super);\n    function SelectionHighlighter(editor) {\n        var _this = _super.call(this) || this;\n        _this.editor = editor;\n        _this._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n        _this.decorations = [];\n        _this.updateSoon = _this._register(new async_1.RunOnceScheduler(function () { return _this._update(); }, 300));\n        _this.state = null;\n        _this._register(editor.onDidChangeConfiguration(function (e) {\n            _this._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n        }));\n        _this._register(editor.onDidChangeCursorSelection(function (e) {\n            if (!_this._isEnabled) {\n                // Early exit if nothing needs to be done!\n                // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n                return;\n            }\n            if (e.selection.isEmpty()) {\n                if (e.reason === cursorEvents_1.CursorChangeReason.Explicit) {\n                    if (_this.state) {\n                        // no longer valid\n                        _this._setState(null);\n                    }\n                    _this.updateSoon.schedule();\n                }\n                else {\n                    _this._setState(null);\n                }\n            }\n            else {\n                _this._update();\n            }\n        }));\n        _this._register(editor.onDidChangeModel(function (e) {\n            _this._setState(null);\n        }));\n        _this._register(findController_1.CommonFindController.get(editor).getState().onFindReplaceStateChange(function (e) {\n            _this._update();\n        }));\n        return _this;\n    }\n    SelectionHighlighter.prototype.getId = function () {\n        return SelectionHighlighter.ID;\n    };\n    SelectionHighlighter.prototype._update = function () {\n        this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n    };\n    SelectionHighlighter._createState = function (isEnabled, editor) {\n        if (!isEnabled) {\n            return null;\n        }\n        if (!editor.hasModel()) {\n            return null;\n        }\n        var s = editor.getSelection();\n        if (s.startLineNumber !== s.endLineNumber) {\n            // multiline forbidden for perf reasons\n            return null;\n        }\n        var multiCursorController = MultiCursorSelectionController.get(editor);\n        if (!multiCursorController) {\n            return null;\n        }\n        var findController = findController_1.CommonFindController.get(editor);\n        if (!findController) {\n            return null;\n        }\n        var r = multiCursorController.getSession(findController);\n        if (!r) {\n            var allSelections = editor.getSelections();\n            if (allSelections.length > 1) {\n                var findState_2 = findController.getState();\n                var matchCase = findState_2.matchCase;\n                var selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n                if (!selectionsContainSameText) {\n                    return null;\n                }\n            }\n            r = MultiCursorSession.create(editor, findController);\n        }\n        if (!r) {\n            return null;\n        }\n        if (r.currentMatch) {\n            // This is an empty selection\n            // Do not interfere with semantic word highlighting in the no selection case\n            return null;\n        }\n        if (/^[ \\t]+$/.test(r.searchText)) {\n            // whitespace only selection\n            return null;\n        }\n        if (r.searchText.length > 200) {\n            // very long selection\n            return null;\n        }\n        // TODO: better handling of this case\n        var findState = findController.getState();\n        var caseSensitive = findState.matchCase;\n        // Return early if the find widget shows the exact same matches\n        if (findState.isRevealed) {\n            var findStateSearchString = findState.searchString;\n            if (!caseSensitive) {\n                findStateSearchString = findStateSearchString.toLowerCase();\n            }\n            var mySearchString = r.searchText;\n            if (!caseSensitive) {\n                mySearchString = mySearchString.toLowerCase();\n            }\n            if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n                return null;\n            }\n        }\n        return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getConfiguration().wordSeparators : null);\n    };\n    SelectionHighlighter.prototype._setState = function (state) {\n        if (SelectionHighlighterState.softEquals(this.state, state)) {\n            this.state = state;\n            return;\n        }\n        this.state = state;\n        if (!this.state) {\n            this.decorations = this.editor.deltaDecorations(this.decorations, []);\n            return;\n        }\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        var model = this.editor.getModel();\n        if (model.isTooLargeForTokenization()) {\n            // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n            return;\n        }\n        var hasFindOccurrences = modes_1.DocumentHighlightProviderRegistry.has(model);\n        var allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(function (m) { return m.range; });\n        allMatches.sort(range_1.Range.compareRangesUsingStarts);\n        var selections = this.editor.getSelections();\n        selections.sort(range_1.Range.compareRangesUsingStarts);\n        // do not overlap with selection (issue #64 and #512)\n        var matches = [];\n        for (var i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n            var match = allMatches[i];\n            if (j >= lenJ) {\n                // finished all editor selections\n                matches.push(match);\n                i++;\n            }\n            else {\n                var cmp = range_1.Range.compareRangesUsingStarts(match, selections[j]);\n                if (cmp < 0) {\n                    // match is before sel\n                    if (selections[j].isEmpty() || !range_1.Range.areIntersecting(match, selections[j])) {\n                        matches.push(match);\n                    }\n                    i++;\n                }\n                else if (cmp > 0) {\n                    // sel is before match\n                    j++;\n                }\n                else {\n                    // sel is equal to match\n                    i++;\n                    j++;\n                }\n            }\n        }\n        var decorations = matches.map(function (r) {\n            return {\n                range: r,\n                // Show in overviewRuler only if model has no semantic highlighting\n                options: (hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW)\n            };\n        });\n        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n    };\n    SelectionHighlighter.prototype.dispose = function () {\n        this._setState(null);\n        _super.prototype.dispose.call(this);\n    };\n    SelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\n    SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'selectionHighlight',\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerSelectionHighlightForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    SelectionHighlighter._SELECTION_HIGHLIGHT = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'selectionHighlight',\n    });\n    return SelectionHighlighter;\n}(lifecycle_1.Disposable));\nexports.SelectionHighlighter = SelectionHighlighter;\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n    var selectedText = getValueInRange(model, ranges[0], !matchCase);\n    for (var i = 1, len = ranges.length; i < len; i++) {\n        var range = ranges[i];\n        if (range.isEmpty()) {\n            return false;\n        }\n        var thisSelectedText = getValueInRange(model, range, !matchCase);\n        if (selectedText !== thisSelectedText) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getValueInRange(model, range, toLowerCase) {\n    var text = model.getValueInRange(range);\n    return (toLowerCase ? text.toLowerCase() : text);\n}\neditorExtensions_1.registerEditorContribution(MultiCursorSelectionController);\neditorExtensions_1.registerEditorContribution(SelectionHighlighter);\neditorExtensions_1.registerEditorAction(InsertCursorAbove);\neditorExtensions_1.registerEditorAction(InsertCursorBelow);\neditorExtensions_1.registerEditorAction(InsertCursorAtEndOfEachLineSelected);\neditorExtensions_1.registerEditorAction(AddSelectionToNextFindMatchAction);\neditorExtensions_1.registerEditorAction(AddSelectionToPreviousFindMatchAction);\neditorExtensions_1.registerEditorAction(MoveSelectionToNextFindMatchAction);\neditorExtensions_1.registerEditorAction(MoveSelectionToPreviousFindMatchAction);\neditorExtensions_1.registerEditorAction(SelectHighlightsAction);\neditorExtensions_1.registerEditorAction(CompatChangeAll);\neditorExtensions_1.registerEditorAction(InsertCursorAtEndOfLineSelected);\neditorExtensions_1.registerEditorAction(InsertCursorAtTopOfLineSelected);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/multicursor/multicursor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/multicursor/multicursor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { RevealTarget } from 'vs/editor/common/controller/cursorCommon';\nimport { CursorChangeReason, ICursorSelectionChangedEvent } from 'vs/editor/common/controller/cursorEvents';\nimport { CursorMoveCommands } from 'vs/editor/common/controller/cursorMoveCommands';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { Constants } from 'vs/editor/common/core/uint';\nimport { IEditorContribution, ScrollType } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { FindMatch, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { DocumentHighlightProviderRegistry } from 'vs/editor/common/modes';\nimport { CommonFindController } from 'vs/editor/contrib/find/findController';\nimport { FindOptionOverride, INewFindReplaceState } from 'vs/editor/contrib/find/findState';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { overviewRulerSelectionHighlightForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\n\nexport class InsertCursorAbove extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertCursorAbove',\n\t\t\tlabel: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n\t\t\talias: 'Add Cursor Above',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.UpArrow,\n\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.UpArrow]\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miInsertCursorAbove', comment: ['&& denotes a mnemonic'] }, \"&&Add Cursor Above\"),\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst useLogicalLine = (args && args.logicalLine === true);\n\t\tconst cursors = editor._getCursors();\n\t\tconst context = cursors.context;\n\n\t\tif (context.config.readOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontext.model.pushStackElement();\n\t\tcursors.setStates(\n\t\t\targs.source,\n\t\t\tCursorChangeReason.Explicit,\n\t\t\tCursorMoveCommands.addCursorUp(context, cursors.getAll(), useLogicalLine)\n\t\t);\n\t\tcursors.reveal(true, RevealTarget.TopMost, ScrollType.Smooth);\n\t}\n}\n\nexport class InsertCursorBelow extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertCursorBelow',\n\t\t\tlabel: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n\t\t\talias: 'Add Cursor Below',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.DownArrow,\n\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.DownArrow]\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miInsertCursorBelow', comment: ['&& denotes a mnemonic'] }, \"A&&dd Cursor Below\"),\n\t\t\t\torder: 3\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst useLogicalLine = (args && args.logicalLine === true);\n\t\tconst cursors = editor._getCursors();\n\t\tconst context = cursors.context;\n\n\t\tif (context.config.readOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontext.model.pushStackElement();\n\t\tcursors.setStates(\n\t\t\targs.source,\n\t\t\tCursorChangeReason.Explicit,\n\t\t\tCursorMoveCommands.addCursorDown(context, cursors.getAll(), useLogicalLine)\n\t\t);\n\t\tcursors.reveal(true, RevealTarget.BottomMost, ScrollType.Smooth);\n\t}\n}\n\nclass InsertCursorAtEndOfEachLineSelected extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertCursorAtEndOfEachLineSelected',\n\t\t\tlabel: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n\t\t\talias: 'Add Cursors to Line Ends',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_I,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miInsertCursorAtEndOfEachLineSelected', comment: ['&& denotes a mnemonic'] }, \"Add C&&ursors to Line Ends\"),\n\t\t\t\torder: 4\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getCursorsForSelection(selection: Selection, model: ITextModel, result: Selection[]): void {\n\t\tif (selection.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n\t\t\tlet currentLineMaxColumn = model.getLineMaxColumn(i);\n\t\t\tresult.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n\t\t}\n\t\tif (selection.endColumn > 1) {\n\t\t\tresult.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n\t\t}\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\t\tlet newSelections: Selection[] = [];\n\t\tselections.forEach((sel) => this.getCursorsForSelection(sel, model, newSelections));\n\n\t\tif (newSelections.length > 0) {\n\t\t\teditor.setSelections(newSelections);\n\t\t}\n\t}\n}\n\nclass InsertCursorAtEndOfLineSelected extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.addCursorsToBottom',\n\t\t\tlabel: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n\t\t\talias: 'Add Cursors To Bottom',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\t\tconst lineCount = editor.getModel().getLineCount();\n\n\t\tlet newSelections: Selection[] = [];\n\t\tfor (let i = selections[0].startLineNumber; i <= lineCount; i++) {\n\t\t\tnewSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n\t\t}\n\n\t\tif (newSelections.length > 0) {\n\t\t\teditor.setSelections(newSelections);\n\t\t}\n\t}\n}\n\nclass InsertCursorAtTopOfLineSelected extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.addCursorsToTop',\n\t\t\tlabel: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n\t\t\talias: 'Add Cursors To Top',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selections = editor.getSelections();\n\n\t\tlet newSelections: Selection[] = [];\n\t\tfor (let i = selections[0].startLineNumber; i >= 1; i--) {\n\t\t\tnewSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n\t\t}\n\n\t\tif (newSelections.length > 0) {\n\t\t\teditor.setSelections(newSelections);\n\t\t}\n\t}\n}\n\nexport class MultiCursorSessionResult {\n\tconstructor(\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly revealRange: Range,\n\t\tpublic readonly revealScrollType: ScrollType\n\t) { }\n}\n\nexport class MultiCursorSession {\n\n\tpublic static create(editor: ICodeEditor, findController: CommonFindController): MultiCursorSession | null {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst findState = findController.getState();\n\n\t\t// Find widget owns entirely what we search for if:\n\t\t//  - focus is not in the editor (i.e. it is in the find widget)\n\t\t//  - and the search widget is visible\n\t\t//  - and the search string is non-empty\n\t\tif (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n\t\t\t// Find widget owns what is searched for\n\t\t\treturn new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n\t\t}\n\n\t\t// Otherwise, the selection gives the search text, and the find widget gives the search settings\n\t\t// The exception is the find state disassociation case: when beginning with a single, collapsed selection\n\t\tlet isDisconnectedFromFindController = false;\n\t\tlet wholeWord: boolean;\n\t\tlet matchCase: boolean;\n\t\tconst selections = editor.getSelections();\n\t\tif (selections.length === 1 && selections[0].isEmpty()) {\n\t\t\tisDisconnectedFromFindController = true;\n\t\t\twholeWord = true;\n\t\t\tmatchCase = true;\n\t\t} else {\n\t\t\twholeWord = findState.wholeWord;\n\t\t\tmatchCase = findState.matchCase;\n\t\t}\n\n\t\t// Selection owns what is searched for\n\t\tconst s = editor.getSelection();\n\n\t\tlet searchText: string;\n\t\tlet currentMatch: Selection | null = null;\n\n\t\tif (s.isEmpty()) {\n\t\t\t// selection is empty => expand to current word\n\t\t\tconst word = editor.getModel().getWordAtPosition(s.getStartPosition());\n\t\t\tif (!word) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tsearchText = word.word;\n\t\t\tcurrentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n\t\t} else {\n\t\t\tsearchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\treturn new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n\t}\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tpublic readonly findController: CommonFindController,\n\t\tpublic readonly isDisconnectedFromFindController: boolean,\n\t\tpublic readonly searchText: string,\n\t\tpublic readonly wholeWord: boolean,\n\t\tpublic readonly matchCase: boolean,\n\t\tpublic currentMatch: Selection | null\n\t) { }\n\n\tpublic addSelectionToNextFindMatch(): MultiCursorSessionResult | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextMatch = this._getNextMatch();\n\t\tif (!nextMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\treturn new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, ScrollType.Smooth);\n\t}\n\n\tpublic moveSelectionToNextFindMatch(): MultiCursorSessionResult | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextMatch = this._getNextMatch();\n\t\tif (!nextMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\treturn new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, ScrollType.Smooth);\n\t}\n\n\tprivate _getNextMatch(): Selection | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.currentMatch) {\n\t\t\tconst result = this.currentMatch;\n\t\t\tthis.currentMatch = null;\n\t\t\treturn result;\n\t\t}\n\n\t\tthis.findController.highlightFindOptions();\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\tconst lastAddedSelection = allSelections[allSelections.length - 1];\n\t\tconst nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\n\t\tif (!nextMatch) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n\t}\n\n\tpublic addSelectionToPreviousFindMatch(): MultiCursorSessionResult | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst previousMatch = this._getPreviousMatch();\n\t\tif (!previousMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\treturn new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, ScrollType.Smooth);\n\t}\n\n\tpublic moveSelectionToPreviousFindMatch(): MultiCursorSessionResult | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst previousMatch = this._getPreviousMatch();\n\t\tif (!previousMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\treturn new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, ScrollType.Smooth);\n\t}\n\n\tprivate _getPreviousMatch(): Selection | null {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this.currentMatch) {\n\t\t\tconst result = this.currentMatch;\n\t\t\tthis.currentMatch = null;\n\t\t\treturn result;\n\t\t}\n\n\t\tthis.findController.highlightFindOptions();\n\n\t\tconst allSelections = this._editor.getSelections();\n\t\tconst lastAddedSelection = allSelections[allSelections.length - 1];\n\t\tconst previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\n\t\tif (!previousMatch) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n\t}\n\n\tpublic selectAll(): FindMatch[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis.findController.highlightFindOptions();\n\n\t\treturn this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\t}\n}\n\nexport class MultiCursorSelectionController extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.multiCursorController';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate _ignoreSelectionChange: boolean;\n\tprivate _session: MultiCursorSession | null;\n\tprivate _sessionDispose: IDisposable[];\n\n\tpublic static get(editor: ICodeEditor): MultiCursorSelectionController {\n\t\treturn editor.getContribution<MultiCursorSelectionController>(MultiCursorSelectionController.ID);\n\t}\n\n\tconstructor(editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\t\tthis._ignoreSelectionChange = false;\n\t\tthis._session = null;\n\t\tthis._sessionDispose = [];\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._endSession();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getId(): string {\n\t\treturn MultiCursorSelectionController.ID;\n\t}\n\n\tprivate _beginSessionIfNeeded(findController: CommonFindController): void {\n\t\tif (!this._session) {\n\t\t\t// Create a new session\n\t\t\tconst session = MultiCursorSession.create(this._editor, findController);\n\t\t\tif (!session) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._session = session;\n\n\t\t\tconst newState: INewFindReplaceState = { searchString: this._session.searchText };\n\t\t\tif (this._session.isDisconnectedFromFindController) {\n\t\t\t\tnewState.wholeWordOverride = FindOptionOverride.True;\n\t\t\t\tnewState.matchCaseOverride = FindOptionOverride.True;\n\t\t\t\tnewState.isRegexOverride = FindOptionOverride.False;\n\t\t\t}\n\t\t\tfindController.getState().change(newState, false);\n\n\t\t\tthis._sessionDispose = [\n\t\t\t\tthis._editor.onDidChangeCursorSelection((e) => {\n\t\t\t\t\tif (this._ignoreSelectionChange) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._endSession();\n\t\t\t\t}),\n\t\t\t\tthis._editor.onDidBlurEditorText(() => {\n\t\t\t\t\tthis._endSession();\n\t\t\t\t}),\n\t\t\t\tfindController.getState().onFindReplaceStateChange((e) => {\n\t\t\t\t\tif (e.matchCase || e.wholeWord) {\n\t\t\t\t\t\tthis._endSession();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t];\n\t\t}\n\t}\n\n\tprivate _endSession(): void {\n\t\tthis._sessionDispose = dispose(this._sessionDispose);\n\t\tif (this._session && this._session.isDisconnectedFromFindController) {\n\t\t\tconst newState: INewFindReplaceState = {\n\t\t\t\twholeWordOverride: FindOptionOverride.NotSet,\n\t\t\t\tmatchCaseOverride: FindOptionOverride.NotSet,\n\t\t\t\tisRegexOverride: FindOptionOverride.NotSet,\n\t\t\t};\n\t\t\tthis._session.findController.getState().change(newState, false);\n\t\t}\n\t\tthis._session = null;\n\t}\n\n\tprivate _setSelections(selections: Selection[]): void {\n\t\tthis._ignoreSelectionChange = true;\n\t\tthis._editor.setSelections(selections);\n\t\tthis._ignoreSelectionChange = false;\n\t}\n\n\tprivate _expandEmptyToWord(model: ITextModel, selection: Selection): Selection {\n\t\tif (!selection.isEmpty()) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst word = model.getWordAtPosition(selection.getStartPosition());\n\t\tif (!word) {\n\t\t\treturn selection;\n\t\t}\n\t\treturn new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n\t}\n\n\tprivate _applySessionResult(result: MultiCursorSessionResult | null): void {\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tthis._setSelections(result.selections);\n\t\tif (result.revealRange) {\n\t\t\tthis._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n\t\t}\n\t}\n\n\tpublic getSession(findController: CommonFindController): MultiCursorSession | null {\n\t\treturn this._session;\n\t}\n\n\tpublic addSelectionToNextFindMatch(findController: CommonFindController): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._session) {\n\t\t\t// If there are multiple cursors, handle the case where they do not all select the same text.\n\t\t\tconst allSelections = this._editor.getSelections();\n\t\t\tif (allSelections.length > 1) {\n\t\t\t\tconst findState = findController.getState();\n\t\t\t\tconst matchCase = findState.matchCase;\n\t\t\t\tconst selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n\t\t\t\tif (!selectionsContainSameText) {\n\t\t\t\t\tconst model = this._editor.getModel();\n\t\t\t\t\tlet resultingSelections: Selection[] = [];\n\t\t\t\t\tfor (let i = 0, len = allSelections.length; i < len; i++) {\n\t\t\t\t\t\tresultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n\t\t\t\t\t}\n\t\t\t\t\tthis._editor.setSelections(resultingSelections);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._beginSessionIfNeeded(findController);\n\t\tif (this._session) {\n\t\t\tthis._applySessionResult(this._session.addSelectionToNextFindMatch());\n\t\t}\n\t}\n\n\tpublic addSelectionToPreviousFindMatch(findController: CommonFindController): void {\n\t\tthis._beginSessionIfNeeded(findController);\n\t\tif (this._session) {\n\t\t\tthis._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n\t\t}\n\t}\n\n\tpublic moveSelectionToNextFindMatch(findController: CommonFindController): void {\n\t\tthis._beginSessionIfNeeded(findController);\n\t\tif (this._session) {\n\t\t\tthis._applySessionResult(this._session.moveSelectionToNextFindMatch());\n\t\t}\n\t}\n\n\tpublic moveSelectionToPreviousFindMatch(findController: CommonFindController): void {\n\t\tthis._beginSessionIfNeeded(findController);\n\t\tif (this._session) {\n\t\t\tthis._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n\t\t}\n\t}\n\n\tpublic selectAll(findController: CommonFindController): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet matches: FindMatch[] | null = null;\n\n\t\tconst findState = findController.getState();\n\n\t\t// Special case: find widget owns entirely what we search for if:\n\t\t// - focus is not in the editor (i.e. it is in the find widget)\n\t\t// - and the search widget is visible\n\t\t// - and the search string is non-empty\n\t\t// - and we're searching for a regex\n\t\tif (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n\n\t\t\tmatches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\n\t\t} else {\n\n\t\t\tthis._beginSessionIfNeeded(findController);\n\t\t\tif (!this._session) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmatches = this._session.selectAll();\n\t\t}\n\n\t\tif (matches.length > 0) {\n\t\t\tconst editorSelection = this._editor.getSelection();\n\t\t\t// Have the primary cursor remain the one where the action was invoked\n\t\t\tfor (let i = 0, len = matches.length; i < len; i++) {\n\t\t\t\tconst match = matches[i];\n\t\t\t\tconst intersection = match.range.intersectRanges(editorSelection);\n\t\t\t\tif (intersection) {\n\t\t\t\t\t// bingo!\n\t\t\t\t\tmatches[i] = matches[0];\n\t\t\t\t\tmatches[0] = match;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._setSelections(matches.map(m => new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn)));\n\t\t}\n\t}\n}\n\nexport abstract class MultiCursorSelectionControllerAction extends EditorAction {\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst multiCursorController = MultiCursorSelectionController.get(editor);\n\t\tif (!multiCursorController) {\n\t\t\treturn;\n\t\t}\n\t\tconst findController = CommonFindController.get(editor);\n\t\tif (!findController) {\n\t\t\treturn;\n\t\t}\n\t\tthis._run(multiCursorController, findController);\n\t}\n\n\tprotected abstract _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void;\n}\n\nexport class AddSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.addSelectionToNextFindMatch',\n\t\t\tlabel: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n\t\t\talias: 'Add Selection To Next Find Match',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_D,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miAddSelectionToNextFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add &&Next Occurrence\"),\n\t\t\t\torder: 5\n\t\t\t}\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.addSelectionToNextFindMatch(findController);\n\t}\n}\n\nexport class AddSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.addSelectionToPreviousFindMatch',\n\t\t\tlabel: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n\t\t\talias: 'Add Selection To Previous Find Match',\n\t\t\tprecondition: null,\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miAddSelectionToPreviousFindMatch', comment: ['&& denotes a mnemonic'] }, \"Add P&&revious Occurrence\"),\n\t\t\t\torder: 6\n\t\t\t}\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.addSelectionToPreviousFindMatch(findController);\n\t}\n}\n\nexport class MoveSelectionToNextFindMatchAction extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.moveSelectionToNextFindMatch',\n\t\t\tlabel: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n\t\t\talias: 'Move Last Selection To Next Find Match',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_D),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.moveSelectionToNextFindMatch(findController);\n\t}\n}\n\nexport class MoveSelectionToPreviousFindMatchAction extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.moveSelectionToPreviousFindMatch',\n\t\t\tlabel: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n\t\t\talias: 'Move Last Selection To Previous Find Match',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.moveSelectionToPreviousFindMatch(findController);\n\t}\n}\n\nexport class SelectHighlightsAction extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.selectHighlights',\n\t\t\tlabel: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n\t\t\talias: 'Select All Occurrences of Find Match',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_L,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenubarOpts: {\n\t\t\t\tmenuId: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '3_multi',\n\t\t\t\ttitle: nls.localize({ key: 'miSelectHighlights', comment: ['&& denotes a mnemonic'] }, \"Select All &&Occurrences\"),\n\t\t\t\torder: 7\n\t\t\t}\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.selectAll(findController);\n\t}\n}\n\nexport class CompatChangeAll extends MultiCursorSelectionControllerAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.changeAll',\n\t\t\tlabel: nls.localize('changeAll.label', \"Change All Occurrences\"),\n\t\t\talias: 'Change All Occurrences',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.F2,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.2\n\t\t\t}\n\t\t});\n\t}\n\tprotected _run(multiCursorController: MultiCursorSelectionController, findController: CommonFindController): void {\n\t\tmultiCursorController.selectAll(findController);\n\t}\n}\n\nclass SelectionHighlighterState {\n\tpublic readonly searchText: string;\n\tpublic readonly matchCase: boolean;\n\tpublic readonly wordSeparators: string | null;\n\n\tconstructor(searchText: string, matchCase: boolean, wordSeparators: string | null) {\n\t\tthis.searchText = searchText;\n\t\tthis.matchCase = matchCase;\n\t\tthis.wordSeparators = wordSeparators;\n\t}\n\n\t/**\n\t * Everything equals except for `lastWordUnderCursor`\n\t */\n\tpublic static softEquals(a: SelectionHighlighterState | null, b: SelectionHighlighterState | null): boolean {\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!a || !b) {\n\t\t\treturn false;\n\t\t}\n\t\treturn (\n\t\t\ta.searchText === b.searchText\n\t\t\t&& a.matchCase === b.matchCase\n\t\t\t&& a.wordSeparators === b.wordSeparators\n\t\t);\n\t}\n}\n\nexport class SelectionHighlighter extends Disposable implements IEditorContribution {\n\tprivate static readonly ID = 'editor.contrib.selectionHighlighter';\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate _isEnabled: boolean;\n\tprivate decorations: string[];\n\tprivate readonly updateSoon: RunOnceScheduler;\n\tprivate state: SelectionHighlighterState | null;\n\n\tconstructor(editor: ICodeEditor) {\n\t\tsuper();\n\t\tthis.editor = editor;\n\t\tthis._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n\t\tthis.decorations = [];\n\t\tthis.updateSoon = this._register(new RunOnceScheduler(() => this._update(), 300));\n\t\tthis.state = null;\n\n\t\tthis._register(editor.onDidChangeConfiguration((e) => {\n\t\t\tthis._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n\t\t}));\n\t\tthis._register(editor.onDidChangeCursorSelection((e: ICursorSelectionChangedEvent) => {\n\n\t\t\tif (!this._isEnabled) {\n\t\t\t\t// Early exit if nothing needs to be done!\n\t\t\t\t// Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.selection.isEmpty()) {\n\t\t\t\tif (e.reason === CursorChangeReason.Explicit) {\n\t\t\t\t\tif (this.state) {\n\t\t\t\t\t\t// no longer valid\n\t\t\t\t\t\tthis._setState(null);\n\t\t\t\t\t}\n\t\t\t\t\tthis.updateSoon.schedule();\n\t\t\t\t} else {\n\t\t\t\t\tthis._setState(null);\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._register(editor.onDidChangeModel((e) => {\n\t\t\tthis._setState(null);\n\t\t}));\n\t\tthis._register(CommonFindController.get(editor).getState().onFindReplaceStateChange((e) => {\n\t\t\tthis._update();\n\t\t}));\n\t}\n\n\tpublic getId(): string {\n\t\treturn SelectionHighlighter.ID;\n\t}\n\n\tprivate _update(): void {\n\t\tthis._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n\t}\n\n\tprivate static _createState(isEnabled: boolean, editor: ICodeEditor): SelectionHighlighterState | null {\n\t\tif (!isEnabled) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!editor.hasModel()) {\n\t\t\treturn null;\n\t\t}\n\t\tconst s = editor.getSelection();\n\t\tif (s.startLineNumber !== s.endLineNumber) {\n\t\t\t// multiline forbidden for perf reasons\n\t\t\treturn null;\n\t\t}\n\t\tconst multiCursorController = MultiCursorSelectionController.get(editor);\n\t\tif (!multiCursorController) {\n\t\t\treturn null;\n\t\t}\n\t\tconst findController = CommonFindController.get(editor);\n\t\tif (!findController) {\n\t\t\treturn null;\n\t\t}\n\t\tlet r = multiCursorController.getSession(findController);\n\t\tif (!r) {\n\t\t\tconst allSelections = editor.getSelections();\n\t\t\tif (allSelections.length > 1) {\n\t\t\t\tconst findState = findController.getState();\n\t\t\t\tconst matchCase = findState.matchCase;\n\t\t\t\tconst selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n\t\t\t\tif (!selectionsContainSameText) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tr = MultiCursorSession.create(editor, findController);\n\t\t}\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (r.currentMatch) {\n\t\t\t// This is an empty selection\n\t\t\t// Do not interfere with semantic word highlighting in the no selection case\n\t\t\treturn null;\n\t\t}\n\t\tif (/^[ \\t]+$/.test(r.searchText)) {\n\t\t\t// whitespace only selection\n\t\t\treturn null;\n\t\t}\n\t\tif (r.searchText.length > 200) {\n\t\t\t// very long selection\n\t\t\treturn null;\n\t\t}\n\n\t\t// TODO: better handling of this case\n\t\tconst findState = findController.getState();\n\t\tconst caseSensitive = findState.matchCase;\n\n\t\t// Return early if the find widget shows the exact same matches\n\t\tif (findState.isRevealed) {\n\t\t\tlet findStateSearchString = findState.searchString;\n\t\t\tif (!caseSensitive) {\n\t\t\t\tfindStateSearchString = findStateSearchString.toLowerCase();\n\t\t\t}\n\n\t\t\tlet mySearchString = r.searchText;\n\t\t\tif (!caseSensitive) {\n\t\t\t\tmySearchString = mySearchString.toLowerCase();\n\t\t\t}\n\n\t\t\tif (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getConfiguration().wordSeparators : null);\n\t}\n\n\tprivate _setState(state: SelectionHighlighterState | null): void {\n\t\tif (SelectionHighlighterState.softEquals(this.state, state)) {\n\t\t\tthis.state = state;\n\t\t\treturn;\n\t\t}\n\t\tthis.state = state;\n\n\t\tif (!this.state) {\n\t\t\tthis.decorations = this.editor.deltaDecorations(this.decorations, []);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (model.isTooLargeForTokenization()) {\n\t\t\t// the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n\t\t\treturn;\n\t\t}\n\n\t\tconst hasFindOccurrences = DocumentHighlightProviderRegistry.has(model);\n\n\t\tlet allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(m => m.range);\n\t\tallMatches.sort(Range.compareRangesUsingStarts);\n\n\t\tlet selections = this.editor.getSelections();\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t// do not overlap with selection (issue #64 and #512)\n\t\tlet matches: Range[] = [];\n\t\tfor (let i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n\t\t\tconst match = allMatches[i];\n\n\t\t\tif (j >= lenJ) {\n\t\t\t\t// finished all editor selections\n\t\t\t\tmatches.push(match);\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tconst cmp = Range.compareRangesUsingStarts(match, selections[j]);\n\t\t\t\tif (cmp < 0) {\n\t\t\t\t\t// match is before sel\n\t\t\t\t\tif (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n\t\t\t\t\t\tmatches.push(match);\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t} else if (cmp > 0) {\n\t\t\t\t\t// sel is before match\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\t// sel is equal to match\n\t\t\t\t\ti++;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst decorations = matches.map(r => {\n\t\t\treturn {\n\t\t\t\trange: r,\n\t\t\t\t// Show in overviewRuler only if model has no semantic highlighting\n\t\t\t\toptions: (hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW)\n\t\t\t};\n\t\t});\n\n\t\tthis.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n\t}\n\n\tprivate static readonly _SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tclassName: 'selectionHighlight',\n\t\toverviewRuler: {\n\t\t\tcolor: themeColorFromId(overviewRulerSelectionHighlightForeground),\n\t\t\tposition: OverviewRulerLane.Center\n\t\t}\n\t});\n\n\tprivate static readonly _SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\n\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\tclassName: 'selectionHighlight',\n\t});\n\n\tpublic dispose(): void {\n\t\tthis._setState(null);\n\t\tsuper.dispose();\n\t}\n}\n\nfunction modelRangesContainSameText(model: ITextModel, ranges: Range[], matchCase: boolean): boolean {\n\tconst selectedText = getValueInRange(model, ranges[0], !matchCase);\n\tfor (let i = 1, len = ranges.length; i < len; i++) {\n\t\tconst range = ranges[i];\n\t\tif (range.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst thisSelectedText = getValueInRange(model, range, !matchCase);\n\t\tif (selectedText !== thisSelectedText) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction getValueInRange(model: ITextModel, range: Range, toLowerCase: boolean): string {\n\tconst text = model.getValueInRange(range);\n\treturn (toLowerCase ? text.toLowerCase() : text);\n}\n\nregisterEditorContribution(MultiCursorSelectionController);\nregisterEditorContribution(SelectionHighlighter);\n\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);"]}]}