{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar nls_1 = require(\"vs/nls\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar dom_1 = require(\"vs/base/browser/dom\");\n// colors for theming\nexports.STATUS_BAR_DEBUGGING_BACKGROUND = colorRegistry_1.registerColor('statusBar.debuggingBackground', {\n    dark: '#CC6633',\n    light: '#CC6633',\n    hc: '#CC6633'\n}, nls_1.localize('statusBarDebuggingBackground', \"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\"));\nexports.STATUS_BAR_DEBUGGING_FOREGROUND = colorRegistry_1.registerColor('statusBar.debuggingForeground', {\n    dark: theme_1.STATUS_BAR_FOREGROUND,\n    light: theme_1.STATUS_BAR_FOREGROUND,\n    hc: theme_1.STATUS_BAR_FOREGROUND\n}, nls_1.localize('statusBarDebuggingForeground', \"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\"));\nexports.STATUS_BAR_DEBUGGING_BORDER = colorRegistry_1.registerColor('statusBar.debuggingBorder', {\n    dark: theme_1.STATUS_BAR_BORDER,\n    light: theme_1.STATUS_BAR_BORDER,\n    hc: theme_1.STATUS_BAR_BORDER\n}, nls_1.localize('statusBarDebuggingBorder', \"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\"));\nvar StatusBarColorProvider = /** @class */ (function (_super) {\n    tslib_1.__extends(StatusBarColorProvider, _super);\n    function StatusBarColorProvider(themeService, debugService, contextService, layoutService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.debugService = debugService;\n        _this.contextService = contextService;\n        _this.layoutService = layoutService;\n        _this.registerListeners();\n        _this.updateStyles();\n        return _this;\n    }\n    StatusBarColorProvider.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.debugService.onDidChangeState(function (state) { return _this.updateStyles(); }));\n        this._register(this.contextService.onDidChangeWorkbenchState(function (state) { return _this.updateStyles(); }));\n    };\n    StatusBarColorProvider.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n        var container = this.layoutService.getContainer(layoutService_1.Parts.STATUSBAR_PART);\n        if (isStatusbarInDebugMode(this.debugService)) {\n            dom_1.addClass(container, 'debugging');\n        }\n        else {\n            dom_1.removeClass(container, 'debugging');\n        }\n        // Container Colors\n        var backgroundColor = this.getColor(this.getColorKey(theme_1.STATUS_BAR_NO_FOLDER_BACKGROUND, exports.STATUS_BAR_DEBUGGING_BACKGROUND, theme_1.STATUS_BAR_BACKGROUND));\n        container.style.backgroundColor = backgroundColor;\n        container.style.color = this.getColor(this.getColorKey(theme_1.STATUS_BAR_NO_FOLDER_FOREGROUND, exports.STATUS_BAR_DEBUGGING_FOREGROUND, theme_1.STATUS_BAR_FOREGROUND));\n        // Border Color\n        var borderColor = this.getColor(this.getColorKey(theme_1.STATUS_BAR_NO_FOLDER_BORDER, exports.STATUS_BAR_DEBUGGING_BORDER, theme_1.STATUS_BAR_BORDER)) || this.getColor(colorRegistry_1.contrastBorder);\n        container.style.borderTopWidth = borderColor ? '1px' : null;\n        container.style.borderTopStyle = borderColor ? 'solid' : null;\n        container.style.borderTopColor = borderColor;\n        // Notification Beak\n        if (!this.styleElement) {\n            this.styleElement = dom_1.createStyleSheet(container);\n        }\n        this.styleElement.innerHTML = \".monaco-workbench .part.statusbar > .statusbar-item.has-beak:before { border-bottom-color: \" + backgroundColor + \" !important; }\";\n    };\n    StatusBarColorProvider.prototype.getColorKey = function (noFolderColor, debuggingColor, normalColor) {\n        // Not debugging\n        if (!isStatusbarInDebugMode(this.debugService)) {\n            if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY) {\n                return normalColor;\n            }\n            return noFolderColor;\n        }\n        // Debugging\n        return debuggingColor;\n    };\n    StatusBarColorProvider = tslib_1.__decorate([\n        tslib_1.__param(0, themeService_1.IThemeService),\n        tslib_1.__param(1, debug_1.IDebugService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService)\n    ], StatusBarColorProvider);\n    return StatusBarColorProvider;\n}(theme_1.Themable));\nexports.StatusBarColorProvider = StatusBarColorProvider;\nfunction isStatusbarInDebugMode(debugService) {\n    if (debugService.state === debug_1.State.Inactive || debugService.state === debug_1.State.Initializing) {\n        return false;\n    }\n    var session = debugService.getViewModel().focusedSession;\n    var isRunningWithoutDebug = session && session.configuration && session.configuration.noDebug;\n    if (isRunningWithoutDebug) {\n        return false;\n    }\n    return true;\n}\nexports.isStatusbarInDebugMode = isStatusbarInDebugMode;\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var statusBarItemDebuggingForeground = theme.getColor(exports.STATUS_BAR_DEBUGGING_FOREGROUND);\n    if (statusBarItemDebuggingForeground) {\n        collector.addRule(\".monaco-workbench .part.statusbar.debugging > .statusbar-item .mask-icon { background-color: \" + statusBarItemDebuggingForeground + \" !important; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/statusbarColorProvider.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IThemeService, registerThemingParticipant, ITheme, ICssStyleCollector } from 'vs/platform/theme/common/themeService';\nimport { localize } from 'vs/nls';\nimport { registerColor, contrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IDebugService, State } from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_BACKGROUND, Themable, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_BORDER } from 'vs/workbench/common/theme';\nimport { addClass, removeClass, createStyleSheet } from 'vs/base/browser/dom';\n\n// colors for theming\n\nexport const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggingBackground', {\n\tdark: '#CC6633',\n\tlight: '#CC6633',\n\thc: '#CC6633'\n}, localize('statusBarDebuggingBackground', \"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {\n\tdark: STATUS_BAR_FOREGROUND,\n\tlight: STATUS_BAR_FOREGROUND,\n\thc: STATUS_BAR_FOREGROUND\n}, localize('statusBarDebuggingForeground', \"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_BORDER = registerColor('statusBar.debuggingBorder', {\n\tdark: STATUS_BAR_BORDER,\n\tlight: STATUS_BAR_BORDER,\n\thc: STATUS_BAR_BORDER\n}, localize('statusBarDebuggingBorder', \"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport class StatusBarColorProvider extends Themable implements IWorkbenchContribution {\n\tprivate styleElement: HTMLStyleElement;\n\n\tconstructor(\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t\tthis.updateStyles();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.debugService.onDidChangeState(state => this.updateStyles()));\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(state => this.updateStyles()));\n\t}\n\n\tprotected updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tconst container = this.layoutService.getContainer(Parts.STATUSBAR_PART);\n\t\tif (isStatusbarInDebugMode(this.debugService)) {\n\t\t\taddClass(container, 'debugging');\n\t\t} else {\n\t\t\tremoveClass(container, 'debugging');\n\t\t}\n\n\t\t// Container Colors\n\t\tconst backgroundColor = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_DEBUGGING_BACKGROUND, STATUS_BAR_BACKGROUND));\n\t\tcontainer.style.backgroundColor = backgroundColor;\n\t\tcontainer.style.color = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_DEBUGGING_FOREGROUND, STATUS_BAR_FOREGROUND));\n\n\t\t// Border Color\n\t\tconst borderColor = this.getColor(this.getColorKey(STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_DEBUGGING_BORDER, STATUS_BAR_BORDER)) || this.getColor(contrastBorder);\n\t\tcontainer.style.borderTopWidth = borderColor ? '1px' : null;\n\t\tcontainer.style.borderTopStyle = borderColor ? 'solid' : null;\n\t\tcontainer.style.borderTopColor = borderColor;\n\n\t\t// Notification Beak\n\t\tif (!this.styleElement) {\n\t\t\tthis.styleElement = createStyleSheet(container);\n\t\t}\n\n\t\tthis.styleElement.innerHTML = `.monaco-workbench .part.statusbar > .statusbar-item.has-beak:before { border-bottom-color: ${backgroundColor} !important; }`;\n\t}\n\n\tprivate getColorKey(noFolderColor: string, debuggingColor: string, normalColor: string): string {\n\n\t\t// Not debugging\n\t\tif (!isStatusbarInDebugMode(this.debugService)) {\n\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\t\treturn normalColor;\n\t\t\t}\n\n\t\t\treturn noFolderColor;\n\t\t}\n\n\t\t// Debugging\n\t\treturn debuggingColor;\n\t}\n}\n\nexport function isStatusbarInDebugMode(debugService: IDebugService): boolean {\n\tif (debugService.state === State.Inactive || debugService.state === State.Initializing) {\n\t\treturn false;\n\t}\n\n\tconst session = debugService.getViewModel().focusedSession;\n\tconst isRunningWithoutDebug = session && session.configuration && session.configuration.noDebug;\n\tif (isRunningWithoutDebug) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nregisterThemingParticipant((theme: ITheme, collector: ICssStyleCollector) => {\n\tconst statusBarItemDebuggingForeground = theme.getColor(STATUS_BAR_DEBUGGING_FOREGROUND);\n\tif (statusBarItemDebuggingForeground) {\n\t\tcollector.addRule(`.monaco-workbench .part.statusbar.debugging > .statusbar-item .mask-icon { background-color: ${statusBarItemDebuggingForeground} !important; }`);\n\t}\n});\n"]}]}