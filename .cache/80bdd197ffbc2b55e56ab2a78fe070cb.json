{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplaceCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/inPlaceReplace/inPlaceReplaceCommand.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/selection\"], function (require, exports, selection_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class InPlaceReplaceCommand {\n        constructor(editRange, originalSelection, text) {\n            this._editRange = editRange;\n            this._originalSelection = originalSelection;\n            this._text = text;\n        }\n        getEditOperations(model, builder) {\n            builder.addTrackedEditOperation(this._editRange, this._text);\n        }\n        computeCursorState(model, helper) {\n            const inverseEditOperations = helper.getInverseEditOperations();\n            const srcRange = inverseEditOperations[0].range;\n            if (!this._originalSelection.isEmpty()) {\n                // Preserve selection and extends to typed text\n                return new selection_1.Selection(srcRange.endLineNumber, srcRange.endColumn - this._text.length, srcRange.endLineNumber, srcRange.endColumn);\n            }\n            return new selection_1.Selection(srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn), srcRange.endLineNumber, Math.min(this._originalSelection.positionColumn, srcRange.endColumn));\n        }\n    }\n    exports.InPlaceReplaceCommand = InPlaceReplaceCommand;\n});\n",null]}