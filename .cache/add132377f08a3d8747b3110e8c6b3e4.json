{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/goToDefinitionMouse.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/goToDefinitionMouse.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/async\", \"vs/base/common/errors\", \"vs/base/common/htmlContent\", \"vs/editor/common/services/modeService\", \"vs/editor/common/core/range\", \"vs/editor/common/modes\", \"vs/editor/browser/editorBrowser\", \"vs/editor/browser/editorExtensions\", \"./goToDefinition\", \"vs/base/common/lifecycle\", \"vs/editor/common/services/resolverService\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/colorRegistry\", \"vs/editor/browser/core/editorState\", \"./goToDefinitionCommands\", \"vs/editor/contrib/goToDefinition/clickLinkGesture\", \"vs/editor/common/core/position\", \"vs/base/common/types\", \"vs/css!./goToDefinitionMouse\"], function (require, exports, nls, async_1, errors_1, htmlContent_1, modeService_1, range_1, modes_1, editorBrowser_1, editorExtensions_1, goToDefinition_1, lifecycle_1, resolverService_1, themeService_1, colorRegistry_1, editorState_1, goToDefinitionCommands_1, clickLinkGesture_1, position_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let GotoDefinitionWithMouseEditorContribution = class GotoDefinitionWithMouseEditorContribution {\n        constructor(editor, textModelResolverService, modeService) {\n            this.textModelResolverService = textModelResolverService;\n            this.modeService = modeService;\n            this.toUnhook = [];\n            this.decorations = [];\n            this.editor = editor;\n            this.previousPromise = null;\n            let linkGesture = new clickLinkGesture_1.ClickLinkGesture(editor);\n            this.toUnhook.push(linkGesture);\n            this.toUnhook.push(linkGesture.onMouseMoveOrRelevantKeyDown(([mouseEvent, keyboardEvent]) => {\n                this.startFindDefinition(mouseEvent, types_1.withNullAsUndefined(keyboardEvent));\n            }));\n            this.toUnhook.push(linkGesture.onExecute((mouseEvent) => {\n                if (this.isEnabled(mouseEvent)) {\n                    this.gotoDefinition(mouseEvent.target, mouseEvent.hasSideBySideModifier).then(() => {\n                        this.removeDecorations();\n                    }, (error) => {\n                        this.removeDecorations();\n                        errors_1.onUnexpectedError(error);\n                    });\n                }\n            }));\n            this.toUnhook.push(linkGesture.onCancel(() => {\n                this.removeDecorations();\n                this.currentWordUnderMouse = null;\n            }));\n        }\n        startFindDefinition(mouseEvent, withKey) {\n            // check if we are active and on a content widget\n            if (mouseEvent.target.type === editorBrowser_1.MouseTargetType.CONTENT_WIDGET && this.decorations.length > 0) {\n                return;\n            }\n            if (!this.editor.hasModel() || !this.isEnabled(mouseEvent, withKey)) {\n                this.currentWordUnderMouse = null;\n                this.removeDecorations();\n                return;\n            }\n            // Find word at mouse position\n            const word = mouseEvent.target.position ? this.editor.getModel().getWordAtPosition(mouseEvent.target.position) : null;\n            if (!word) {\n                this.currentWordUnderMouse = null;\n                this.removeDecorations();\n                return;\n            }\n            const position = mouseEvent.target.position;\n            // Return early if word at position is still the same\n            if (this.currentWordUnderMouse && this.currentWordUnderMouse.startColumn === word.startColumn && this.currentWordUnderMouse.endColumn === word.endColumn && this.currentWordUnderMouse.word === word.word) {\n                return;\n            }\n            this.currentWordUnderMouse = word;\n            // Find definition and decorate word if found\n            let state = new editorState_1.EditorState(this.editor, editorState_1.CodeEditorStateFlag.Position | editorState_1.CodeEditorStateFlag.Value | editorState_1.CodeEditorStateFlag.Selection | editorState_1.CodeEditorStateFlag.Scroll);\n            if (this.previousPromise) {\n                this.previousPromise.cancel();\n                this.previousPromise = null;\n            }\n            this.previousPromise = async_1.createCancelablePromise(token => this.findDefinition(mouseEvent.target, token));\n            this.previousPromise.then(results => {\n                if (!results || !results.length || !state.validate(this.editor)) {\n                    this.removeDecorations();\n                    return;\n                }\n                // Multiple results\n                if (results.length > 1) {\n                    this.addDecoration(new range_1.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn), new htmlContent_1.MarkdownString().appendText(nls.localize('multipleResults', \"Click to show {0} definitions.\", results.length)));\n                }\n                // Single result\n                else {\n                    let result = results[0];\n                    if (!result.uri) {\n                        return;\n                    }\n                    this.textModelResolverService.createModelReference(result.uri).then(ref => {\n                        if (!ref.object || !ref.object.textEditorModel) {\n                            ref.dispose();\n                            return;\n                        }\n                        const { object: { textEditorModel } } = ref;\n                        const { startLineNumber } = result.range;\n                        if (startLineNumber < 1 || startLineNumber > textEditorModel.getLineCount()) {\n                            // invalid range\n                            ref.dispose();\n                            return;\n                        }\n                        const previewValue = this.getPreviewValue(textEditorModel, startLineNumber);\n                        let wordRange;\n                        if (result.originSelectionRange) {\n                            wordRange = range_1.Range.lift(result.originSelectionRange);\n                        }\n                        else {\n                            wordRange = new range_1.Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n                        }\n                        const modeId = this.modeService.getModeIdByFilepathOrFirstLine(textEditorModel.uri.fsPath);\n                        this.addDecoration(wordRange, new htmlContent_1.MarkdownString().appendCodeblock(modeId ? modeId : '', previewValue));\n                        ref.dispose();\n                    });\n                }\n            }).then(undefined, errors_1.onUnexpectedError);\n        }\n        getPreviewValue(textEditorModel, startLineNumber) {\n            let rangeToUse = this.getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber);\n            const numberOfLinesInRange = rangeToUse.endLineNumber - rangeToUse.startLineNumber;\n            if (numberOfLinesInRange >= GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES) {\n                rangeToUse = this.getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber);\n            }\n            const previewValue = this.stripIndentationFromPreviewRange(textEditorModel, startLineNumber, rangeToUse);\n            return previewValue;\n        }\n        stripIndentationFromPreviewRange(textEditorModel, startLineNumber, previewRange) {\n            const startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);\n            let minIndent = startIndent;\n            for (let endLineNumber = startLineNumber + 1; endLineNumber < previewRange.endLineNumber; endLineNumber++) {\n                const endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);\n                minIndent = Math.min(minIndent, endIndent);\n            }\n            const previewValue = textEditorModel.getValueInRange(previewRange).replace(new RegExp(`^\\\\s{${minIndent - 1}}`, 'gm'), '').trim();\n            return previewValue;\n        }\n        getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber) {\n            const startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);\n            const maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES);\n            let endLineNumber = startLineNumber + 1;\n            for (; endLineNumber < maxLineNumber; endLineNumber++) {\n                let endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);\n                if (startIndent === endIndent) {\n                    break;\n                }\n            }\n            return new range_1.Range(startLineNumber, 1, endLineNumber + 1, 1);\n        }\n        getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber) {\n            const maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES);\n            const brackets = [];\n            let ignoreFirstEmpty = true;\n            let currentBracket = textEditorModel.findNextBracket(new position_1.Position(startLineNumber, 1));\n            while (currentBracket !== null) {\n                if (brackets.length === 0) {\n                    brackets.push(currentBracket);\n                }\n                else {\n                    const lastBracket = brackets[brackets.length - 1];\n                    if (lastBracket.open === currentBracket.open && lastBracket.isOpen && !currentBracket.isOpen) {\n                        brackets.pop();\n                    }\n                    else {\n                        brackets.push(currentBracket);\n                    }\n                    if (brackets.length === 0) {\n                        if (ignoreFirstEmpty) {\n                            ignoreFirstEmpty = false;\n                        }\n                        else {\n                            return new range_1.Range(startLineNumber, 1, currentBracket.range.endLineNumber + 1, 1);\n                        }\n                    }\n                }\n                const maxColumn = textEditorModel.getLineMaxColumn(startLineNumber);\n                let nextLineNumber = currentBracket.range.endLineNumber;\n                let nextColumn = currentBracket.range.endColumn;\n                if (maxColumn === currentBracket.range.endColumn) {\n                    nextLineNumber++;\n                    nextColumn = 1;\n                }\n                if (nextLineNumber > maxLineNumber) {\n                    return new range_1.Range(startLineNumber, 1, maxLineNumber + 1, 1);\n                }\n                currentBracket = textEditorModel.findNextBracket(new position_1.Position(nextLineNumber, nextColumn));\n            }\n            return new range_1.Range(startLineNumber, 1, maxLineNumber + 1, 1);\n        }\n        addDecoration(range, hoverMessage) {\n            const newDecorations = {\n                range: range,\n                options: {\n                    inlineClassName: 'goto-definition-link',\n                    hoverMessage\n                }\n            };\n            this.decorations = this.editor.deltaDecorations(this.decorations, [newDecorations]);\n        }\n        removeDecorations() {\n            if (this.decorations.length > 0) {\n                this.decorations = this.editor.deltaDecorations(this.decorations, []);\n            }\n        }\n        isEnabled(mouseEvent, withKey) {\n            return this.editor.hasModel() &&\n                mouseEvent.isNoneOrSingleMouseDown &&\n                (mouseEvent.target.type === editorBrowser_1.MouseTargetType.CONTENT_TEXT) &&\n                (mouseEvent.hasTriggerModifier || (withKey ? withKey.keyCodeIsTriggerKey : false)) &&\n                modes_1.DefinitionProviderRegistry.has(this.editor.getModel());\n        }\n        findDefinition(target, token) {\n            const model = this.editor.getModel();\n            if (!model) {\n                return Promise.resolve(null);\n            }\n            return goToDefinition_1.getDefinitionsAtPosition(model, target.position, token);\n        }\n        gotoDefinition(target, sideBySide) {\n            this.editor.setPosition(target.position);\n            const action = new goToDefinitionCommands_1.DefinitionAction(new goToDefinitionCommands_1.DefinitionActionConfig(sideBySide, false, true, false), { alias: '', label: '', id: '', precondition: null });\n            return this.editor.invokeWithinContext(accessor => action.run(accessor, this.editor));\n        }\n        getId() {\n            return GotoDefinitionWithMouseEditorContribution.ID;\n        }\n        dispose() {\n            this.toUnhook = lifecycle_1.dispose(this.toUnhook);\n        }\n    };\n    GotoDefinitionWithMouseEditorContribution.ID = 'editor.contrib.gotodefinitionwithmouse';\n    GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES = 8;\n    GotoDefinitionWithMouseEditorContribution = __decorate([\n        __param(1, resolverService_1.ITextModelService),\n        __param(2, modeService_1.IModeService)\n    ], GotoDefinitionWithMouseEditorContribution);\n    editorExtensions_1.registerEditorContribution(GotoDefinitionWithMouseEditorContribution);\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const activeLinkForeground = theme.getColor(colorRegistry_1.editorActiveLinkForeground);\n        if (activeLinkForeground) {\n            collector.addRule(`.monaco-editor .goto-definition-link { color: ${activeLinkForeground} !important; }`);\n        }\n    });\n});\n",null]}