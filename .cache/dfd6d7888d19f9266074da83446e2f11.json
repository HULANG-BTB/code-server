{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar JSONContributionRegistry = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar nls = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.ISnippetsService = instantiation_1.createDecorator('snippetService');\nvar languageScopeSchemaId = 'vscode://schemas/snippets';\nvar languageScopeSchema = {\n    id: languageScopeSchemaId,\n    allowComments: true,\n    defaultSnippets: [{\n            label: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n            body: { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }\n        }],\n    type: 'object',\n    description: nls.localize('snippetSchema.json', 'User snippet configuration'),\n    additionalProperties: {\n        type: 'object',\n        required: ['prefix', 'body'],\n        properties: {\n            prefix: {\n                description: nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),\n                type: ['string', 'array']\n            },\n            body: {\n                description: nls.localize('snippetSchema.json.body', 'The snippet content. Use \\'$1\\', \\'${1:defaultText}\\' to define cursor positions, use \\'$0\\' for the final cursor position. Insert variable values with \\'${varName}\\' and \\'${varName:defaultText}\\', e.g \\'This is file: $TM_FILENAME\\'.'),\n                type: ['string', 'array'],\n                items: {\n                    type: 'string'\n                }\n            },\n            description: {\n                description: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n                type: ['string', 'array']\n            }\n        },\n        additionalProperties: false\n    }\n};\nvar globalSchemaId = 'vscode://schemas/global-snippets';\nvar globalSchema = {\n    id: globalSchemaId,\n    allowComments: true,\n    defaultSnippets: [{\n            label: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n            body: { '${1:snippetName}': { 'scope': '${2:scope}', 'prefix': '${3:prefix}', 'body': '${4:snippet}', 'description': '${5:description}' } }\n        }],\n    type: 'object',\n    description: nls.localize('snippetSchema.json', 'User snippet configuration'),\n    additionalProperties: {\n        type: 'object',\n        required: ['prefix', 'body'],\n        properties: {\n            prefix: {\n                description: nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),\n                type: ['string', 'array']\n            },\n            scope: {\n                description: nls.localize('snippetSchema.json.scope', \"A list of language names to which this snippet applies, e.g 'typescript,javascript'.\"),\n                type: 'string'\n            },\n            body: {\n                description: nls.localize('snippetSchema.json.body', 'The snippet content. Use \\'$1\\', \\'${1:defaultText}\\' to define cursor positions, use \\'$0\\' for the final cursor position. Insert variable values with \\'${varName}\\' and \\'${varName:defaultText}\\', e.g \\'This is file: $TM_FILENAME\\'.'),\n                type: ['string', 'array'],\n                items: {\n                    type: 'string'\n                }\n            },\n            description: {\n                description: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n                type: 'string'\n            }\n        },\n        additionalProperties: false\n    }\n};\nvar reg = platform_1.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\nreg.registerSchema(languageScopeSchemaId, languageScopeSchema);\nreg.registerSchema(globalSchemaId, globalSchema);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/snippets/browser/snippets.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport * as nls from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { LanguageId } from 'vs/editor/common/modes';\nimport { SnippetFile, Snippet } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\n\nexport const ISnippetsService = createDecorator<ISnippetsService>('snippetService');\n\nexport interface ISnippetsService {\n\n\t_serviceBrand: any;\n\n\tgetSnippetFiles(): Promise<SnippetFile[]>;\n\n\tgetSnippets(languageId: LanguageId): Promise<Snippet[]>;\n\n\tgetSnippetsSync(languageId: LanguageId): Snippet[];\n}\n\nconst languageScopeSchemaId = 'vscode://schemas/snippets';\nconst languageScopeSchema: IJSONSchema = {\n\tid: languageScopeSchemaId,\n\tallowComments: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['prefix', 'body'],\n\t\tproperties: {\n\t\t\tprefix: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),\n\t\t\t\ttype: ['string', 'array']\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.body', 'The snippet content. Use \\'$1\\', \\'${1:defaultText}\\' to define cursor positions, use \\'$0\\' for the final cursor position. Insert variable values with \\'${varName}\\' and \\'${varName:defaultText}\\', e.g \\'This is file: $TM_FILENAME\\'.'),\n\t\t\t\ttype: ['string', 'array'],\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n\t\t\t\ttype: ['string', 'array']\n\t\t\t}\n\t\t},\n\t\tadditionalProperties: false\n\t}\n};\n\n\nconst globalSchemaId = 'vscode://schemas/global-snippets';\nconst globalSchema: IJSONSchema = {\n\tid: globalSchemaId,\n\tallowComments: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'scope': '${2:scope}', 'prefix': '${3:prefix}', 'body': '${4:snippet}', 'description': '${5:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['prefix', 'body'],\n\t\tproperties: {\n\t\t\tprefix: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.prefix', 'The prefix to used when selecting the snippet in intellisense'),\n\t\t\t\ttype: ['string', 'array']\n\t\t\t},\n\t\t\tscope: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.scope', \"A list of language names to which this snippet applies, e.g 'typescript,javascript'.\"),\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t\tbody: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.body', 'The snippet content. Use \\'$1\\', \\'${1:defaultText}\\' to define cursor positions, use \\'$0\\' for the final cursor position. Insert variable values with \\'${varName}\\' and \\'${varName:defaultText}\\', e.g \\'This is file: $TM_FILENAME\\'.'),\n\t\t\t\ttype: ['string', 'array'],\n\t\t\t\titems: {\n\t\t\t\t\ttype: 'string'\n\t\t\t\t}\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tadditionalProperties: false\n\t}\n};\n\nconst reg = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\nreg.registerSchema(languageScopeSchemaId, languageScopeSchema);\nreg.registerSchema(globalSchemaId, globalSchema);\n"]}]}