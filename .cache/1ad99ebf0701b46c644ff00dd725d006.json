{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/panel/common/panelService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/panel/common/panelService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IPanelService = instantiation_1.createDecorator('panelService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/panel/common/panelService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/panel/common/panelService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,gFAAoG;AAIvF,QAAA,aAAa,GAAG,+BAAe,CAAgB,cAAc,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IPanel } from 'vs/workbench/common/panel';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nexport const IPanelService = createDecorator<IPanelService>('panelService');\n\nexport interface IPanelIdentifier {\n\tid: string;\n\tname: string;\n\tcssClass?: string;\n}\n\nexport interface IPanelService {\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tonDidPanelOpen: Event<{ panel: IPanel, focus: boolean }>;\n\n\tonDidPanelClose: Event<IPanel>;\n\n\t/**\n\t * Opens a panel with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenPanel(id: string, focus?: boolean): IPanel | null;\n\n\t/**\n\t * Returns the current active panel or null if none\n\t */\n\tgetActivePanel(): IPanel | null;\n\n\t/**\n\t * Returns all built-in panels following the default order (Problems - Output - Debug Console - Terminal)\n\t */\n\tgetPanels(): IPanelIdentifier[];\n\n\t/**\n\t * Returns pinned panels following the visual order\n\t */\n\tgetPinnedPanels(): IPanelIdentifier[];\n\n\t/**\n\t * Show an activity in a panel.\n\t */\n\tshowActivity(panelId: string, badge: IBadge, clazz?: string): IDisposable;\n\n\t/**\n\t * Hide the currently active panel.\n\t */\n\thideActivePanel(): void;\n\n\t/**\n\t * Get the last active panel ID.\n\t */\n\tgetLastActivePanelId(): string;\n}\n"]}]}