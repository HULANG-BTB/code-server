{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/gettingStarted.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/gettingStarted.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar platform = require(\"vs/base/common/platform\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar GettingStarted = /** @class */ (function () {\n    function GettingStarted(storageService, environmentService, telemetryService) {\n        this.storageService = storageService;\n        this.telemetryService = telemetryService;\n        this.appName = product_1.default.nameLong;\n        if (!product_1.default.welcomePage) {\n            return;\n        }\n        if (environmentService.skipGettingStarted) {\n            return;\n        }\n        if (environmentService.isExtensionDevelopment) {\n            return;\n        }\n        this.welcomePageURL = product_1.default.welcomePage;\n        this.handleWelcome();\n    }\n    GettingStarted.prototype.getUrl = function (telemetryInfo) {\n        return this.welcomePageURL + \"&&from=\" + this.appName + \"&&id=\" + telemetryInfo.machineId;\n    };\n    GettingStarted.prototype.openExternal = function (url) {\n        // Don't open the welcome page as the root user on Linux, this is due to a bug with xdg-open\n        // which recommends against running itself as root.\n        if (platform.isLinux && platform.isRootUser()) {\n            return;\n        }\n        window.open(url);\n    };\n    GettingStarted.prototype.handleWelcome = function () {\n        var _this = this;\n        //make sure the user is online, otherwise refer to the next run to show the welcome page\n        if (!navigator.onLine) {\n            return;\n        }\n        var firstStartup = !this.storageService.get(GettingStarted.hideWelcomeSettingskey, storage_1.StorageScope.GLOBAL);\n        if (firstStartup && this.welcomePageURL) {\n            this.telemetryService.getTelemetryInfo().then(function (info) {\n                var url = _this.getUrl(info);\n                _this.openExternal(url);\n                _this.storageService.store(GettingStarted.hideWelcomeSettingskey, true, storage_1.StorageScope.GLOBAL);\n            });\n        }\n    };\n    GettingStarted.hideWelcomeSettingskey = 'workbench.hide.welcome';\n    GettingStarted = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService)\n    ], GettingStarted);\n    return GettingStarted;\n}());\nexports.GettingStarted = GettingStarted;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/gettingStarted.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/gettingStarted/electron-browser/gettingStarted.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,8DAAmF;AACnF,oEAA2F;AAC3F,0EAAiF;AACjF,kDAAoD;AACpD,4DAAuD;AAEvD;IAOC,wBACmC,cAA+B,EAC5C,kBAAuC,EACxB,gBAAmC;QAFrC,mBAAc,GAAd,cAAc,CAAiB;QAE7B,qBAAgB,GAAhB,gBAAgB,CAAmB;QAEvE,IAAI,CAAC,OAAO,GAAG,iBAAO,CAAC,QAAQ,CAAC;QAEhC,IAAI,CAAC,iBAAO,CAAC,WAAW,EAAE;YACzB,OAAO;SACP;QAED,IAAI,kBAAkB,CAAC,kBAAkB,EAAE;YAC1C,OAAO;SACP;QAED,IAAI,kBAAkB,CAAC,sBAAsB,EAAE;YAC9C,OAAO;SACP;QAED,IAAI,CAAC,cAAc,GAAG,iBAAO,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAEO,+BAAM,GAAd,UAAe,aAA6B;QAC3C,OAAU,IAAI,CAAC,cAAc,eAAU,IAAI,CAAC,OAAO,aAAQ,aAAa,CAAC,SAAW,CAAC;IACtF,CAAC;IAEO,qCAAY,GAApB,UAAqB,GAAW;QAC/B,4FAA4F;QAC5F,mDAAmD;QACnD,IAAI,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,UAAU,EAAE,EAAE;YAC9C,OAAO;SACP;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IAEO,sCAAa,GAArB;QAAA,iBAeC;QAdA,wFAAwF;QACxF,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACtB,OAAO;SACP;QAED,IAAI,YAAY,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,sBAAsB,EAAE,sBAAY,CAAC,MAAM,CAAC,CAAC;QAExG,IAAI,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE;YACxC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI;gBACjD,IAAI,GAAG,GAAG,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC5B,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;gBACvB,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,sBAAsB,EAAE,IAAI,EAAE,sBAAY,CAAC,MAAM,CAAC,CAAC;YAC7F,CAAC,CAAC,CAAC;SACH;IACF,CAAC;IAxDuB,qCAAsB,GAAG,wBAAwB,CAAC;IAF9D,cAAc;QAQxB,mBAAA,yBAAe,CAAA;QACf,mBAAA,iCAAmB,CAAA;QACnB,mBAAA,6BAAiB,CAAA;OAVP,cAAc,CA2D1B;IAAD,qBAAC;CAAA,AA3DD,IA2DC;AA3DY,wCAAc","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService, ITelemetryInfo } from 'vs/platform/telemetry/common/telemetry';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport * as platform from 'vs/base/common/platform';\nimport product from 'vs/platform/product/node/product';\n\nexport class GettingStarted implements IWorkbenchContribution {\n\n\tprivate static readonly hideWelcomeSettingskey = 'workbench.hide.welcome';\n\n\tprivate welcomePageURL?: string;\n\tprivate appName: string;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tthis.appName = product.nameLong;\n\n\t\tif (!product.welcomePage) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (environmentService.skipGettingStarted) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (environmentService.isExtensionDevelopment) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.welcomePageURL = product.welcomePage;\n\t\tthis.handleWelcome();\n\t}\n\n\tprivate getUrl(telemetryInfo: ITelemetryInfo): string {\n\t\treturn `${this.welcomePageURL}&&from=${this.appName}&&id=${telemetryInfo.machineId}`;\n\t}\n\n\tprivate openExternal(url: string) {\n\t\t// Don't open the welcome page as the root user on Linux, this is due to a bug with xdg-open\n\t\t// which recommends against running itself as root.\n\t\tif (platform.isLinux && platform.isRootUser()) {\n\t\t\treturn;\n\t\t}\n\t\twindow.open(url);\n\t}\n\n\tprivate handleWelcome(): void {\n\t\t//make sure the user is online, otherwise refer to the next run to show the welcome page\n\t\tif (!navigator.onLine) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet firstStartup = !this.storageService.get(GettingStarted.hideWelcomeSettingskey, StorageScope.GLOBAL);\n\n\t\tif (firstStartup && this.welcomePageURL) {\n\t\t\tthis.telemetryService.getTelemetryInfo().then(info => {\n\t\t\t\tlet url = this.getUrl(info);\n\t\t\t\tthis.openExternal(url);\n\t\t\t\tthis.storageService.store(GettingStarted.hideWelcomeSettingskey, true, StorageScope.GLOBAL);\n\t\t\t});\n\t\t}\n\t}\n}\n"]}]}