{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar electron_1 = require(\"electron\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar ClipboardService = /** @class */ (function () {\n    function ClipboardService() {\n    }\n    ClipboardService.prototype.writeText = function (text, type) {\n        electron_1.clipboard.writeText(text, type);\n    };\n    ClipboardService.prototype.readText = function (type) {\n        return electron_1.clipboard.readText(type);\n    };\n    ClipboardService.prototype.readFindText = function () {\n        if (browser_1.isMacintosh) {\n            return electron_1.clipboard.readFindText();\n        }\n        return '';\n    };\n    ClipboardService.prototype.writeFindText = function (text) {\n        if (browser_1.isMacintosh) {\n            electron_1.clipboard.writeFindText(text);\n        }\n    };\n    ClipboardService.prototype.writeResources = function (resources) {\n        if (resources.length) {\n            electron_1.clipboard.writeBuffer(ClipboardService.FILE_FORMAT, this.resourcesToBuffer(resources));\n        }\n    };\n    ClipboardService.prototype.readResources = function () {\n        return this.bufferToResources(electron_1.clipboard.readBuffer(ClipboardService.FILE_FORMAT));\n    };\n    ClipboardService.prototype.hasResources = function () {\n        return electron_1.clipboard.has(ClipboardService.FILE_FORMAT);\n    };\n    ClipboardService.prototype.resourcesToBuffer = function (resources) {\n        return Buffer.from(resources.map(function (r) { return r.toString(); }).join('\\n'));\n    };\n    ClipboardService.prototype.bufferToResources = function (buffer) {\n        if (!buffer) {\n            return [];\n        }\n        var bufferValue = buffer.toString();\n        if (!bufferValue) {\n            return [];\n        }\n        try {\n            return bufferValue.split('\\n').map(function (f) { return uri_1.URI.parse(f); });\n        }\n        catch (error) {\n            return []; // do not trust clipboard data\n        }\n    };\n    ClipboardService.FILE_FORMAT = 'code/file-list'; // Clipboard format for files\n    return ClipboardService;\n}());\nexports.ClipboardService = ClipboardService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,qCAAqC;AACrC,0CAAyC;AACzC,mDAAsD;AAEtD;IAAA;IA8DA,CAAC;IAxDA,oCAAS,GAAT,UAAU,IAAY,EAAE,IAAa;QACpC,oBAAS,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,mCAAQ,GAAR,UAAS,IAAa;QACrB,OAAO,oBAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,uCAAY,GAAZ;QACC,IAAI,qBAAW,EAAE;YAChB,OAAO,oBAAS,CAAC,YAAY,EAAE,CAAC;SAChC;QAED,OAAO,EAAE,CAAC;IACX,CAAC;IAED,wCAAa,GAAb,UAAc,IAAY;QACzB,IAAI,qBAAW,EAAE;YAChB,oBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC9B;IACF,CAAC;IAED,yCAAc,GAAd,UAAe,SAAgB;QAC9B,IAAI,SAAS,CAAC,MAAM,EAAE;YACrB,oBAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;SACvF;IACF,CAAC;IAED,wCAAa,GAAb;QACC,OAAO,IAAI,CAAC,iBAAiB,CAAC,oBAAS,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;IACnF,CAAC;IAED,uCAAY,GAAZ;QACC,OAAO,oBAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAEO,4CAAiB,GAAzB,UAA0B,SAAgB;QACzC,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,EAAE,EAAZ,CAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;IAEO,4CAAiB,GAAzB,UAA0B,MAAc;QACvC,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO,EAAE,CAAC;SACV;QAED,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC,WAAW,EAAE;YACjB,OAAO,EAAE,CAAC;SACV;QAED,IAAI;YACH,OAAO,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,SAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;SACtD;QAAC,OAAO,KAAK,EAAE;YACf,OAAO,EAAE,CAAC,CAAC,8BAA8B;SACzC;IACF,CAAC;IA3Dc,4BAAW,GAAG,gBAAgB,CAAC,CAAC,6BAA6B;IA4D7E,uBAAC;CAAA,AA9DD,IA8DC;AA9DY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { clipboard } from 'electron';\nimport { URI } from 'vs/base/common/uri';\nimport { isMacintosh } from 'vs/base/browser/browser';\n\nexport class ClipboardService implements IClipboardService {\n\n\tprivate static FILE_FORMAT = 'code/file-list'; // Clipboard format for files\n\n\t_serviceBrand: any;\n\n\twriteText(text: string, type?: string): void {\n\t\tclipboard.writeText(text, type);\n\t}\n\n\treadText(type?: string): string {\n\t\treturn clipboard.readText(type);\n\t}\n\n\treadFindText(): string {\n\t\tif (isMacintosh) {\n\t\t\treturn clipboard.readFindText();\n\t\t}\n\n\t\treturn '';\n\t}\n\n\twriteFindText(text: string): void {\n\t\tif (isMacintosh) {\n\t\t\tclipboard.writeFindText(text);\n\t\t}\n\t}\n\n\twriteResources(resources: URI[]): void {\n\t\tif (resources.length) {\n\t\t\tclipboard.writeBuffer(ClipboardService.FILE_FORMAT, this.resourcesToBuffer(resources));\n\t\t}\n\t}\n\n\treadResources(): URI[] {\n\t\treturn this.bufferToResources(clipboard.readBuffer(ClipboardService.FILE_FORMAT));\n\t}\n\n\thasResources(): boolean {\n\t\treturn clipboard.has(ClipboardService.FILE_FORMAT);\n\t}\n\n\tprivate resourcesToBuffer(resources: URI[]): Buffer {\n\t\treturn Buffer.from(resources.map(r => r.toString()).join('\\n'));\n\t}\n\n\tprivate bufferToResources(buffer: Buffer): URI[] {\n\t\tif (!buffer) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst bufferValue = buffer.toString();\n\t\tif (!bufferValue) {\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\treturn bufferValue.split('\\n').map(f => URI.parse(f));\n\t\t} catch (error) {\n\t\t\treturn []; // do not trust clipboard data\n\t\t}\n\t}\n}\n"]}]}