{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/labels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/labels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar resources = require(\"vs/base/common/resources\");\nvar iconLabel_1 = require(\"vs/base/browser/ui/iconLabel/iconLabel\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar decorations_1 = require(\"vs/workbench/services/decorations/browser/decorations\");\nvar network_1 = require(\"vs/base/common/network\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar event_1 = require(\"vs/base/common/event\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar getIconClasses_1 = require(\"vs/editor/common/services/getIconClasses\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar types_1 = require(\"vs/base/common/types\");\nexports.DEFAULT_LABELS_CONTAINER = {\n    onDidChangeVisibility: event_1.Event.None\n};\nvar ResourceLabels = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceLabels, _super);\n    function ResourceLabels(container, instantiationService, extensionService, configurationService, modelService, decorationsService, themeService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.extensionService = extensionService;\n        _this.configurationService = configurationService;\n        _this.modelService = modelService;\n        _this.decorationsService = decorationsService;\n        _this.themeService = themeService;\n        _this._widgets = [];\n        _this._labels = [];\n        _this.registerListeners(container);\n        return _this;\n    }\n    ResourceLabels.prototype.registerListeners = function (container) {\n        var _this = this;\n        // notify when visibility changes\n        this._register(container.onDidChangeVisibility(function (visible) {\n            _this._widgets.forEach(function (widget) { return widget.notifyVisibilityChanged(visible); });\n        }));\n        // notify when extensions are registered with potentially new languages\n        this._register(this.extensionService.onDidRegisterExtensions(function () { return _this._widgets.forEach(function (widget) { return widget.notifyExtensionsRegistered(); }); }));\n        // notify when model mode changes\n        this._register(this.modelService.onModelModeChanged(function (e) {\n            if (!e.model.uri) {\n                return; // we need the resource to compare\n            }\n            if (e.model.uri.scheme === network_1.Schemas.file && e.oldModeId === modesRegistry_1.PLAINTEXT_MODE_ID) { // todo@remote does this apply?\n                return; // ignore transitions in files from no mode to specific mode because this happens each time a model is created\n            }\n            _this._widgets.forEach(function (widget) { return widget.notifyModelModeChanged(e); });\n        }));\n        // notify when file decoration changes\n        this._register(this.decorationsService.onDidChangeDecorations(function (e) { return _this._widgets.forEach(function (widget) { return widget.notifyFileDecorationsChanges(e); }); }));\n        // notify when theme changes\n        this._register(this.themeService.onThemeChange(function () { return _this._widgets.forEach(function (widget) { return widget.notifyThemeChange(); }); }));\n        // notify when files.associations changes\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(files_1.FILES_ASSOCIATIONS_CONFIG)) {\n                _this._widgets.forEach(function (widget) { return widget.notifyFileAssociationsChange(); });\n            }\n        }));\n    };\n    ResourceLabels.prototype.get = function (index) {\n        return this._labels[index];\n    };\n    ResourceLabels.prototype.create = function (container, options) {\n        var _this = this;\n        var widget = this.instantiationService.createInstance(ResourceLabelWidget, container, options);\n        // Only expose a handle to the outside\n        var label = {\n            element: widget.element,\n            onDidRender: widget.onDidRender,\n            setLabel: function (label, description, options) { return widget.setLabel(label, description, options); },\n            setResource: function (label, options) { return widget.setResource(label, options); },\n            setEditor: function (editor, options) { return widget.setEditor(editor, options); },\n            setFile: function (resource, options) { return widget.setFile(resource, options); },\n            clear: function () { return widget.clear(); },\n            dispose: function () { return _this.disposeWidget(widget); }\n        };\n        // Store\n        this._labels.push(label);\n        this._widgets.push(widget);\n        return label;\n    };\n    ResourceLabels.prototype.disposeWidget = function (widget) {\n        var index = this._widgets.indexOf(widget);\n        if (index > -1) {\n            this._widgets.splice(index, 1);\n            this._labels.splice(index, 1);\n        }\n        lifecycle_1.dispose(widget);\n    };\n    ResourceLabels.prototype.clear = function () {\n        this._widgets = lifecycle_1.dispose(this._widgets);\n        this._labels = [];\n    };\n    ResourceLabels.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.clear();\n    };\n    ResourceLabels = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, extensions_1.IExtensionService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, modelService_1.IModelService),\n        tslib_1.__param(5, decorations_1.IDecorationsService),\n        tslib_1.__param(6, themeService_1.IThemeService)\n    ], ResourceLabels);\n    return ResourceLabels;\n}(lifecycle_1.Disposable));\nexports.ResourceLabels = ResourceLabels;\n/**\n * Note: please consider to use ResourceLabels if you are in need\n * of more than one label for your widget.\n */\nvar ResourceLabel = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceLabel, _super);\n    function ResourceLabel(container, options, instantiationService, extensionService, configurationService, modelService, decorationsService, themeService, labelService) {\n        var _this = _super.call(this, exports.DEFAULT_LABELS_CONTAINER, instantiationService, extensionService, configurationService, modelService, decorationsService, themeService) || this;\n        _this._label = _this._register(_this.create(container, options));\n        return _this;\n    }\n    Object.defineProperty(ResourceLabel.prototype, \"element\", {\n        get: function () {\n            return this._label;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ResourceLabel = tslib_1.__decorate([\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, extensions_1.IExtensionService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, modelService_1.IModelService),\n        tslib_1.__param(6, decorations_1.IDecorationsService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, label_1.ILabelService)\n    ], ResourceLabel);\n    return ResourceLabel;\n}(ResourceLabels));\nexports.ResourceLabel = ResourceLabel;\nvar Redraw;\n(function (Redraw) {\n    Redraw[Redraw[\"Basic\"] = 1] = \"Basic\";\n    Redraw[Redraw[\"Full\"] = 2] = \"Full\";\n})(Redraw || (Redraw = {}));\nvar ResourceLabelWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceLabelWidget, _super);\n    function ResourceLabelWidget(container, options, modeService, modelService, decorationsService, labelService, untitledEditorService, contextService) {\n        var _this = _super.call(this, container, options) || this;\n        _this.modeService = modeService;\n        _this.modelService = modelService;\n        _this.decorationsService = decorationsService;\n        _this.labelService = labelService;\n        _this.untitledEditorService = untitledEditorService;\n        _this.contextService = contextService;\n        _this._onDidRender = _this._register(new event_1.Emitter());\n        _this.isHidden = false;\n        return _this;\n    }\n    Object.defineProperty(ResourceLabelWidget.prototype, \"onDidRender\", {\n        get: function () { return this._onDidRender.event; },\n        enumerable: true,\n        configurable: true\n    });\n    ResourceLabelWidget.prototype.notifyVisibilityChanged = function (visible) {\n        if (visible === this.isHidden) {\n            this.isHidden = !visible;\n            if (visible && this.needsRedraw) {\n                this.render(this.needsRedraw === Redraw.Basic ? false : true);\n                this.needsRedraw = undefined;\n            }\n        }\n    };\n    ResourceLabelWidget.prototype.notifyModelModeChanged = function (e) {\n        if (!this.label || !this.label.resource) {\n            return; // only update if label exists\n        }\n        if (e.model.uri.toString() === this.label.resource.toString()) {\n            if (this.lastKnownConfiguredLangId !== e.model.getLanguageIdentifier().language) {\n                this.render(true); // update if the language id of the model has changed from our last known state\n            }\n        }\n    };\n    ResourceLabelWidget.prototype.notifyFileDecorationsChanges = function (e) {\n        if (!this.options || !this.label || !this.label.resource) {\n            return;\n        }\n        if (this.options.fileDecorations && e.affectsResource(this.label.resource)) {\n            this.render(false);\n        }\n    };\n    ResourceLabelWidget.prototype.notifyExtensionsRegistered = function () {\n        this.render(true);\n    };\n    ResourceLabelWidget.prototype.notifyThemeChange = function () {\n        this.render(false);\n    };\n    ResourceLabelWidget.prototype.notifyFileAssociationsChange = function () {\n        this.render(true);\n    };\n    ResourceLabelWidget.prototype.setResource = function (label, options) {\n        var hasResourceChanged = this.hasResourceChanged(label, options);\n        this.label = label;\n        this.options = options;\n        if (hasResourceChanged) {\n            this.computedPathLabel = undefined; // reset path label due to resource change\n        }\n        this.render(hasResourceChanged);\n    };\n    ResourceLabelWidget.prototype.hasResourceChanged = function (label, options) {\n        var newResource = label ? label.resource : undefined;\n        var oldResource = this.label ? this.label.resource : undefined;\n        var newFileKind = options ? options.fileKind : undefined;\n        var oldFileKind = this.options ? this.options.fileKind : undefined;\n        if (newFileKind !== oldFileKind) {\n            return true; // same resource but different kind (file, folder)\n        }\n        if (newResource && this.computedPathLabel !== this.labelService.getUriLabel(newResource)) {\n            return true;\n        }\n        if (newResource && oldResource) {\n            return newResource.toString() !== oldResource.toString();\n        }\n        if (!newResource && !oldResource) {\n            return false;\n        }\n        return true;\n    };\n    ResourceLabelWidget.prototype.setEditor = function (editor, options) {\n        this.setResource({\n            resource: types_1.withNullAsUndefined(editor_1.toResource(editor, { supportSideBySide: true })),\n            name: types_1.withNullAsUndefined(editor.getName()),\n            description: types_1.withNullAsUndefined(editor.getDescription())\n        }, options);\n    };\n    ResourceLabelWidget.prototype.setFile = function (resource, options) {\n        var hideLabel = options && options.hideLabel;\n        var name;\n        if (!hideLabel) {\n            if (options && options.fileKind === files_1.FileKind.ROOT_FOLDER) {\n                var workspaceFolder = this.contextService.getWorkspaceFolder(resource);\n                if (workspaceFolder) {\n                    name = workspaceFolder.name;\n                }\n            }\n            if (!name) {\n                name = resources.basenameOrAuthority(resource);\n            }\n        }\n        var description;\n        var hidePath = (options && options.hidePath) || (resource.scheme === network_1.Schemas.untitled && !this.untitledEditorService.hasAssociatedFilePath(resource));\n        if (!hidePath) {\n            description = this.labelService.getUriLabel(resources.dirname(resource), { relative: true });\n        }\n        this.setResource({ resource: resource, name: name, description: description }, options);\n    };\n    ResourceLabelWidget.prototype.clear = function () {\n        this.label = undefined;\n        this.options = undefined;\n        this.lastKnownConfiguredLangId = undefined;\n        this.computedIconClasses = undefined;\n        this.computedPathLabel = undefined;\n        this.setLabel();\n    };\n    ResourceLabelWidget.prototype.render = function (clearIconCache) {\n        var _a;\n        if (this.isHidden) {\n            if (!this.needsRedraw) {\n                this.needsRedraw = clearIconCache ? Redraw.Full : Redraw.Basic;\n            }\n            if (this.needsRedraw === Redraw.Basic && clearIconCache) {\n                this.needsRedraw = Redraw.Full;\n            }\n            return;\n        }\n        if (this.label) {\n            var configuredLangId = this.label.resource ? types_1.withNullAsUndefined(getIconClasses_1.getConfiguredLangId(this.modelService, this.modeService, this.label.resource)) : undefined;\n            if (this.lastKnownConfiguredLangId !== configuredLangId) {\n                clearIconCache = true;\n                this.lastKnownConfiguredLangId = configuredLangId;\n            }\n        }\n        if (clearIconCache) {\n            this.computedIconClasses = undefined;\n        }\n        if (!this.label) {\n            return;\n        }\n        var iconLabelOptions = {\n            title: '',\n            italic: this.options && this.options.italic,\n            matches: this.options && this.options.matches,\n            extraClasses: []\n        };\n        var resource = this.label.resource;\n        var label = this.label.name;\n        if (this.options && typeof this.options.title === 'string') {\n            iconLabelOptions.title = this.options.title;\n        }\n        else if (resource && resource.scheme !== network_1.Schemas.data /* do not accidentally inline Data URIs */) {\n            if (!this.computedPathLabel) {\n                this.computedPathLabel = this.labelService.getUriLabel(resource);\n            }\n            iconLabelOptions.title = this.computedPathLabel;\n        }\n        if (this.options && !this.options.hideIcon) {\n            if (!this.computedIconClasses) {\n                this.computedIconClasses = getIconClasses_1.getIconClasses(this.modelService, this.modeService, resource, this.options && this.options.fileKind);\n            }\n            iconLabelOptions.extraClasses = this.computedIconClasses.slice(0);\n        }\n        if (this.options && this.options.extraClasses) {\n            (_a = iconLabelOptions.extraClasses).push.apply(_a, this.options.extraClasses);\n        }\n        if (this.options && this.options.fileDecorations && resource) {\n            var deco = this.decorationsService.getDecoration(resource, this.options.fileKind !== files_1.FileKind.FILE, this.options.fileDecorations.data);\n            if (deco) {\n                if (deco.tooltip) {\n                    iconLabelOptions.title = iconLabelOptions.title + \" \\u2022 \" + deco.tooltip;\n                }\n                if (this.options.fileDecorations.colors) {\n                    iconLabelOptions.extraClasses.push(deco.labelClassName);\n                }\n                if (this.options.fileDecorations.badges) {\n                    iconLabelOptions.extraClasses.push(deco.badgeClassName);\n                }\n            }\n        }\n        this.setLabel(label, this.label.description, iconLabelOptions);\n        this._onDidRender.fire();\n    };\n    ResourceLabelWidget.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.label = undefined;\n        this.options = undefined;\n        this.lastKnownConfiguredLangId = undefined;\n        this.computedIconClasses = undefined;\n        this.computedPathLabel = undefined;\n    };\n    ResourceLabelWidget = tslib_1.__decorate([\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, modelService_1.IModelService),\n        tslib_1.__param(4, decorations_1.IDecorationsService),\n        tslib_1.__param(5, label_1.ILabelService),\n        tslib_1.__param(6, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(7, workspace_1.IWorkspaceContextService)\n    ], ResourceLabelWidget);\n    return ResourceLabelWidget;\n}(iconLabel_1.IconLabel));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/labels.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/labels.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as resources from 'vs/base/common/resources';\nimport { IconLabel, IIconLabelValueOptions, IIconLabelCreationOptions } from 'vs/base/browser/ui/iconLabel/iconLabel';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { toResource, IEditorInput } from 'vs/workbench/common/editor';\nimport { PLAINTEXT_MODE_ID } from 'vs/editor/common/modes/modesRegistry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { IDecorationsService, IResourceDecorationChangeEvent, IDecorationData } from 'vs/workbench/services/decorations/browser/decorations';\nimport { Schemas } from 'vs/base/common/network';\nimport { FileKind, FILES_ASSOCIATIONS_CONFIG } from 'vs/platform/files/common/files';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { getIconClasses, getConfiguredLangId } from 'vs/editor/common/services/getIconClasses';\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport interface IResourceLabelProps {\n\tresource?: uri;\n\tname?: string;\n\tdescription?: string;\n}\n\nexport interface IResourceLabelOptions extends IIconLabelValueOptions {\n\tfileKind?: FileKind;\n\tfileDecorations?: { colors: boolean, badges: boolean, data?: IDecorationData };\n}\n\nexport interface IFileLabelOptions extends IResourceLabelOptions {\n\thideLabel?: boolean;\n\thidePath?: boolean;\n}\n\nexport interface IResourceLabel extends IDisposable {\n\treadonly element: HTMLElement;\n\treadonly onDidRender: Event<void>;\n\n\t/**\n\t * Most generic way to apply a label with raw information.\n\t */\n\tsetLabel(label?: string, description?: string, options?: IIconLabelValueOptions): void;\n\n\t/**\n\t * Convinient method to apply a label by passing a resource along.\n\t *\n\t * Note: for file resources consider to use the #setFile() method instead.\n\t */\n\tsetResource(label: IResourceLabelProps, options?: IResourceLabelOptions): void;\n\n\t/**\n\t * Convinient method to render a file label based on a resource.\n\t */\n\tsetFile(resource: uri, options?: IFileLabelOptions): void;\n\n\t/**\n\t * Convinient method to apply a label by passing an editor along.\n\t */\n\tsetEditor(editor: IEditorInput, options?: IResourceLabelOptions): void;\n\n\t/**\n\t * Resets the label to be empty.\n\t */\n\tclear(): void;\n}\n\nexport interface IResourceLabelsContainer {\n\treadonly onDidChangeVisibility: Event<boolean>;\n}\n\nexport const DEFAULT_LABELS_CONTAINER: IResourceLabelsContainer = {\n\tonDidChangeVisibility: Event.None\n};\n\nexport class ResourceLabels extends Disposable {\n\tprivate _widgets: ResourceLabelWidget[] = [];\n\tprivate _labels: IResourceLabel[] = [];\n\n\tconstructor(\n\t\tcontainer: IResourceLabelsContainer,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IDecorationsService private readonly decorationsService: IDecorationsService,\n\t\t@IThemeService private readonly themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners(container);\n\t}\n\n\tprivate registerListeners(container: IResourceLabelsContainer): void {\n\n\t\t// notify when visibility changes\n\t\tthis._register(container.onDidChangeVisibility(visible => {\n\t\t\tthis._widgets.forEach(widget => widget.notifyVisibilityChanged(visible));\n\t\t}));\n\n\t\t// notify when extensions are registered with potentially new languages\n\t\tthis._register(this.extensionService.onDidRegisterExtensions(() => this._widgets.forEach(widget => widget.notifyExtensionsRegistered())));\n\n\t\t// notify when model mode changes\n\t\tthis._register(this.modelService.onModelModeChanged(e => {\n\t\t\tif (!e.model.uri) {\n\t\t\t\treturn; // we need the resource to compare\n\t\t\t}\n\n\t\t\tif (e.model.uri.scheme === Schemas.file && e.oldModeId === PLAINTEXT_MODE_ID) { // todo@remote does this apply?\n\t\t\t\treturn; // ignore transitions in files from no mode to specific mode because this happens each time a model is created\n\t\t\t}\n\n\t\t\tthis._widgets.forEach(widget => widget.notifyModelModeChanged(e));\n\t\t}));\n\n\t\t// notify when file decoration changes\n\t\tthis._register(this.decorationsService.onDidChangeDecorations(e => this._widgets.forEach(widget => widget.notifyFileDecorationsChanges(e))));\n\n\t\t// notify when theme changes\n\t\tthis._register(this.themeService.onThemeChange(() => this._widgets.forEach(widget => widget.notifyThemeChange())));\n\n\t\t// notify when files.associations changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(FILES_ASSOCIATIONS_CONFIG)) {\n\t\t\t\tthis._widgets.forEach(widget => widget.notifyFileAssociationsChange());\n\t\t\t}\n\t\t}));\n\t}\n\n\tget(index: number): IResourceLabel {\n\t\treturn this._labels[index];\n\t}\n\n\tcreate(container: HTMLElement, options?: IIconLabelCreationOptions): IResourceLabel {\n\t\tconst widget = this.instantiationService.createInstance(ResourceLabelWidget, container, options);\n\n\t\t// Only expose a handle to the outside\n\t\tconst label: IResourceLabel = {\n\t\t\telement: widget.element,\n\t\t\tonDidRender: widget.onDidRender,\n\t\t\tsetLabel: (label?: string, description?: string, options?: IIconLabelValueOptions) => widget.setLabel(label, description, options),\n\t\t\tsetResource: (label: IResourceLabelProps, options?: IResourceLabelOptions) => widget.setResource(label, options),\n\t\t\tsetEditor: (editor: IEditorInput, options?: IResourceLabelOptions) => widget.setEditor(editor, options),\n\t\t\tsetFile: (resource: uri, options?: IFileLabelOptions) => widget.setFile(resource, options),\n\t\t\tclear: () => widget.clear(),\n\t\t\tdispose: () => this.disposeWidget(widget)\n\t\t};\n\n\t\t// Store\n\t\tthis._labels.push(label);\n\t\tthis._widgets.push(widget);\n\n\t\treturn label;\n\t}\n\n\tprivate disposeWidget(widget: ResourceLabelWidget): void {\n\t\tconst index = this._widgets.indexOf(widget);\n\t\tif (index > -1) {\n\t\t\tthis._widgets.splice(index, 1);\n\t\t\tthis._labels.splice(index, 1);\n\t\t}\n\n\t\tdispose(widget);\n\t}\n\n\tclear(): void {\n\t\tthis._widgets = dispose(this._widgets);\n\t\tthis._labels = [];\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.clear();\n\t}\n}\n\n/**\n * Note: please consider to use ResourceLabels if you are in need\n * of more than one label for your widget.\n */\nexport class ResourceLabel extends ResourceLabels {\n\n\tprivate _label: IResourceLabel;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\toptions: IIconLabelCreationOptions,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IDecorationsService decorationsService: IDecorationsService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ILabelService labelService: ILabelService\n\t) {\n\t\tsuper(DEFAULT_LABELS_CONTAINER, instantiationService, extensionService, configurationService, modelService, decorationsService, themeService);\n\n\t\tthis._label = this._register(this.create(container, options));\n\t}\n\n\tget element(): IResourceLabel {\n\t\treturn this._label;\n\t}\n}\n\nenum Redraw {\n\tBasic = 1,\n\tFull = 2\n}\n\nclass ResourceLabelWidget extends IconLabel {\n\n\tprivate _onDidRender = this._register(new Emitter<void>());\n\tget onDidRender(): Event<void> { return this._onDidRender.event; }\n\n\tprivate label?: IResourceLabelProps;\n\tprivate options?: IResourceLabelOptions;\n\tprivate computedIconClasses?: string[];\n\tprivate lastKnownConfiguredLangId?: string;\n\tprivate computedPathLabel?: string;\n\n\tprivate needsRedraw?: Redraw;\n\tprivate isHidden: boolean = false;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\toptions: IIconLabelCreationOptions,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IDecorationsService private readonly decorationsService: IDecorationsService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(container, options);\n\t}\n\n\tnotifyVisibilityChanged(visible: boolean): void {\n\t\tif (visible === this.isHidden) {\n\t\t\tthis.isHidden = !visible;\n\n\t\t\tif (visible && this.needsRedraw) {\n\t\t\t\tthis.render(this.needsRedraw === Redraw.Basic ? false : true);\n\t\t\t\tthis.needsRedraw = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tnotifyModelModeChanged(e: { model: ITextModel; oldModeId: string; }): void {\n\t\tif (!this.label || !this.label.resource) {\n\t\t\treturn; // only update if label exists\n\t\t}\n\n\t\tif (e.model.uri.toString() === this.label.resource.toString()) {\n\t\t\tif (this.lastKnownConfiguredLangId !== e.model.getLanguageIdentifier().language) {\n\t\t\t\tthis.render(true); // update if the language id of the model has changed from our last known state\n\t\t\t}\n\t\t}\n\t}\n\n\tnotifyFileDecorationsChanges(e: IResourceDecorationChangeEvent): void {\n\t\tif (!this.options || !this.label || !this.label.resource) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.options.fileDecorations && e.affectsResource(this.label.resource)) {\n\t\t\tthis.render(false);\n\t\t}\n\t}\n\n\tnotifyExtensionsRegistered(): void {\n\t\tthis.render(true);\n\t}\n\n\tnotifyThemeChange(): void {\n\t\tthis.render(false);\n\t}\n\n\tnotifyFileAssociationsChange(): void {\n\t\tthis.render(true);\n\t}\n\n\tsetResource(label: IResourceLabelProps, options?: IResourceLabelOptions): void {\n\t\tconst hasResourceChanged = this.hasResourceChanged(label, options);\n\n\t\tthis.label = label;\n\t\tthis.options = options;\n\n\t\tif (hasResourceChanged) {\n\t\t\tthis.computedPathLabel = undefined; // reset path label due to resource change\n\t\t}\n\n\t\tthis.render(hasResourceChanged);\n\t}\n\n\tprivate hasResourceChanged(label: IResourceLabelProps, options?: IResourceLabelOptions): boolean {\n\t\tconst newResource = label ? label.resource : undefined;\n\t\tconst oldResource = this.label ? this.label.resource : undefined;\n\n\t\tconst newFileKind = options ? options.fileKind : undefined;\n\t\tconst oldFileKind = this.options ? this.options.fileKind : undefined;\n\n\t\tif (newFileKind !== oldFileKind) {\n\t\t\treturn true; // same resource but different kind (file, folder)\n\t\t}\n\n\t\tif (newResource && this.computedPathLabel !== this.labelService.getUriLabel(newResource)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (newResource && oldResource) {\n\t\t\treturn newResource.toString() !== oldResource.toString();\n\t\t}\n\n\t\tif (!newResource && !oldResource) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tsetEditor(editor: IEditorInput, options?: IResourceLabelOptions): void {\n\t\tthis.setResource({\n\t\t\tresource: withNullAsUndefined(toResource(editor, { supportSideBySide: true })),\n\t\t\tname: withNullAsUndefined(editor.getName()),\n\t\t\tdescription: withNullAsUndefined(editor.getDescription())\n\t\t}, options);\n\t}\n\n\tsetFile(resource: uri, options?: IFileLabelOptions): void {\n\t\tconst hideLabel = options && options.hideLabel;\n\t\tlet name: string | undefined;\n\t\tif (!hideLabel) {\n\t\t\tif (options && options.fileKind === FileKind.ROOT_FOLDER) {\n\t\t\t\tconst workspaceFolder = this.contextService.getWorkspaceFolder(resource);\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tname = workspaceFolder.name;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!name) {\n\t\t\t\tname = resources.basenameOrAuthority(resource);\n\t\t\t}\n\t\t}\n\n\t\tlet description: string | undefined;\n\t\tconst hidePath = (options && options.hidePath) || (resource.scheme === Schemas.untitled && !this.untitledEditorService.hasAssociatedFilePath(resource));\n\t\tif (!hidePath) {\n\t\t\tdescription = this.labelService.getUriLabel(resources.dirname(resource), { relative: true });\n\t\t}\n\n\t\tthis.setResource({ resource, name, description }, options);\n\t}\n\n\tclear(): void {\n\t\tthis.label = undefined;\n\t\tthis.options = undefined;\n\t\tthis.lastKnownConfiguredLangId = undefined;\n\t\tthis.computedIconClasses = undefined;\n\t\tthis.computedPathLabel = undefined;\n\n\t\tthis.setLabel();\n\t}\n\n\tprivate render(clearIconCache: boolean): void {\n\t\tif (this.isHidden) {\n\t\t\tif (!this.needsRedraw) {\n\t\t\t\tthis.needsRedraw = clearIconCache ? Redraw.Full : Redraw.Basic;\n\t\t\t}\n\n\t\t\tif (this.needsRedraw === Redraw.Basic && clearIconCache) {\n\t\t\t\tthis.needsRedraw = Redraw.Full;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.label) {\n\t\t\tconst configuredLangId = this.label.resource ? withNullAsUndefined(getConfiguredLangId(this.modelService, this.modeService, this.label.resource)) : undefined;\n\t\t\tif (this.lastKnownConfiguredLangId !== configuredLangId) {\n\t\t\t\tclearIconCache = true;\n\t\t\t\tthis.lastKnownConfiguredLangId = configuredLangId;\n\t\t\t}\n\t\t}\n\n\t\tif (clearIconCache) {\n\t\t\tthis.computedIconClasses = undefined;\n\t\t}\n\n\t\tif (!this.label) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst iconLabelOptions: IIconLabelValueOptions = {\n\t\t\ttitle: '',\n\t\t\titalic: this.options && this.options.italic,\n\t\t\tmatches: this.options && this.options.matches,\n\t\t\textraClasses: []\n\t\t};\n\n\t\tconst resource = this.label.resource;\n\t\tconst label = this.label.name;\n\n\t\tif (this.options && typeof this.options.title === 'string') {\n\t\t\ticonLabelOptions.title = this.options.title;\n\t\t} else if (resource && resource.scheme !== Schemas.data /* do not accidentally inline Data URIs */) {\n\t\t\tif (!this.computedPathLabel) {\n\t\t\t\tthis.computedPathLabel = this.labelService.getUriLabel(resource);\n\t\t\t}\n\n\t\t\ticonLabelOptions.title = this.computedPathLabel;\n\t\t}\n\n\t\tif (this.options && !this.options.hideIcon) {\n\t\t\tif (!this.computedIconClasses) {\n\t\t\t\tthis.computedIconClasses = getIconClasses(this.modelService, this.modeService, resource, this.options && this.options.fileKind);\n\t\t\t}\n\t\t\ticonLabelOptions.extraClasses = this.computedIconClasses.slice(0);\n\t\t}\n\t\tif (this.options && this.options.extraClasses) {\n\t\t\ticonLabelOptions.extraClasses!.push(...this.options.extraClasses);\n\t\t}\n\n\t\tif (this.options && this.options.fileDecorations && resource) {\n\t\t\tconst deco = this.decorationsService.getDecoration(\n\t\t\t\tresource,\n\t\t\t\tthis.options.fileKind !== FileKind.FILE,\n\t\t\t\tthis.options.fileDecorations.data\n\t\t\t);\n\n\t\t\tif (deco) {\n\t\t\t\tif (deco.tooltip) {\n\t\t\t\t\ticonLabelOptions.title = `${iconLabelOptions.title} • ${deco.tooltip}`;\n\t\t\t\t}\n\n\t\t\t\tif (this.options.fileDecorations.colors) {\n\t\t\t\t\ticonLabelOptions.extraClasses!.push(deco.labelClassName);\n\t\t\t\t}\n\n\t\t\t\tif (this.options.fileDecorations.badges) {\n\t\t\t\t\ticonLabelOptions.extraClasses!.push(deco.badgeClassName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setLabel(label, this.label.description, iconLabelOptions);\n\n\t\tthis._onDidRender.fire();\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.label = undefined;\n\t\tthis.options = undefined;\n\t\tthis.lastKnownConfiguredLangId = undefined;\n\t\tthis.computedIconClasses = undefined;\n\t\tthis.computedPathLabel = undefined;\n\t}\n}\n"]}]}