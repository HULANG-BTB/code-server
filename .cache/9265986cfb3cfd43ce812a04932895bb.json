{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugStatus.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugStatus.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar dom = require(\"vs/base/browser/dom\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar statusbarColorProvider_1 = require(\"vs/workbench/contrib/debug/browser/statusbarColorProvider\");\nvar $ = dom.$;\nvar DebugStatus = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugStatus, _super);\n    function DebugStatus(quickOpenService, debugService, themeService, configurationService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.debugService = debugService;\n        _this._register(_this.debugService.getConfigurationManager().onDidSelectConfiguration(function (e) {\n            _this.setLabel();\n        }));\n        _this._register(_this.debugService.onDidChangeState(function (state) {\n            if (state !== debug_1.State.Inactive && _this.showInStatusBar === 'onFirstSessionStart') {\n                _this.doRender();\n            }\n            else {\n                if (_this.showInStatusBar !== 'never') {\n                    _this.updateStyles();\n                }\n            }\n        }));\n        _this.showInStatusBar = configurationService.getValue('debug').showInStatusBar;\n        _this._register(configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('debug.showInStatusBar')) {\n                _this.showInStatusBar = configurationService.getValue('debug').showInStatusBar;\n                if (_this.showInStatusBar === 'always') {\n                    _this.doRender();\n                }\n                if (_this.statusBarItem) {\n                    dom.toggleClass(_this.statusBarItem, 'hidden', _this.showInStatusBar === 'never');\n                }\n            }\n        }));\n        return _this;\n    }\n    DebugStatus.prototype.updateStyles = function () {\n        if (this.icon) {\n            if (statusbarColorProvider_1.isStatusbarInDebugMode(this.debugService)) {\n                this.icon.style.backgroundColor = this.getColor(statusbarColorProvider_1.STATUS_BAR_DEBUGGING_FOREGROUND);\n            }\n            else {\n                this.icon.style.backgroundColor = this.getColor(theme_1.STATUS_BAR_FOREGROUND);\n            }\n        }\n    };\n    DebugStatus.prototype.render = function (container) {\n        this.container = container;\n        if (this.showInStatusBar === 'always') {\n            this.doRender();\n        }\n        // noop, we render when we decide is best\n        return this;\n    };\n    DebugStatus.prototype.doRender = function () {\n        var _this = this;\n        if (!this.statusBarItem && this.container) {\n            this.statusBarItem = dom.append(this.container, $('.debug-statusbar-item'));\n            this._register(dom.addDisposableListener(this.statusBarItem, 'click', function () { return _this.quickOpenService.show('debug '); }));\n            this.statusBarItem.title = nls.localize('selectAndStartDebug', \"Select and start debug configuration\");\n            var a = dom.append(this.statusBarItem, $('a'));\n            this.icon = dom.append(a, $('.icon'));\n            this.label = dom.append(a, $('span.label'));\n            this.setLabel();\n        }\n        this.updateStyles();\n    };\n    DebugStatus.prototype.setLabel = function () {\n        if (this.label && this.statusBarItem) {\n            var manager = this.debugService.getConfigurationManager();\n            var name = manager.selectedConfiguration.name || '';\n            var nameAndLaunchPresent = name && manager.selectedConfiguration.launch;\n            dom.toggleClass(this.statusBarItem, 'hidden', this.showInStatusBar === 'never' || !nameAndLaunchPresent);\n            if (nameAndLaunchPresent) {\n                this.label.textContent = manager.getLaunches().length > 1 ? name + \" (\" + manager.selectedConfiguration.launch.name + \")\" : name;\n            }\n        }\n    };\n    DebugStatus = tslib_1.__decorate([\n        tslib_1.__param(0, quickOpen_1.IQuickOpenService),\n        tslib_1.__param(1, debug_1.IDebugService),\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], DebugStatus);\n    return DebugStatus;\n}(theme_1.Themable));\nexports.DebugStatus = DebugStatus;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugStatus.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugStatus.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,yCAA2C;AAE3C,oEAA2E;AAC3E,sEAAsE;AAEtE,iEAAoG;AACpG,mDAA4E;AAC5E,gFAAuF;AACvF,oGAAoI;AAEpI,IAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;AAEhB;IAAiC,uCAAQ;IAOxC,qBACqC,gBAAmC,EACvC,YAA2B,EAC5C,YAA2B,EACnB,oBAA2C;QAJnE,YAMC,kBAAM,YAAY,CAAC,SAyBnB;QA9BoC,sBAAgB,GAAhB,gBAAgB,CAAmB;QACvC,kBAAY,GAAZ,YAAY,CAAe;QAK3D,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC,wBAAwB,CAAC,UAAA,CAAC;YACpF,KAAI,CAAC,QAAQ,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,UAAA,KAAK;YACtD,IAAI,KAAK,KAAK,aAAK,CAAC,QAAQ,IAAI,KAAI,CAAC,eAAe,KAAK,qBAAqB,EAAE;gBAC/E,KAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;iBAAM;gBACN,IAAI,KAAI,CAAC,eAAe,KAAK,OAAO,EAAE;oBACrC,KAAI,CAAC,YAAY,EAAE,CAAC;iBACpB;aACD;QACF,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAsB,OAAO,CAAC,CAAC,eAAe,CAAC;QACnG,KAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,UAAA,CAAC;YAC7D,IAAI,CAAC,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,EAAE;gBACpD,KAAI,CAAC,eAAe,GAAG,oBAAoB,CAAC,QAAQ,CAAsB,OAAO,CAAC,CAAC,eAAe,CAAC;gBACnG,IAAI,KAAI,CAAC,eAAe,KAAK,QAAQ,EAAE;oBACtC,KAAI,CAAC,QAAQ,EAAE,CAAC;iBAChB;gBACD,IAAI,KAAI,CAAC,aAAa,EAAE;oBACvB,GAAG,CAAC,WAAW,CAAC,KAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,KAAI,CAAC,eAAe,KAAK,OAAO,CAAC,CAAC;iBAChF;aACD;QACF,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAES,kCAAY,GAAtB;QACC,IAAI,IAAI,CAAC,IAAI,EAAE;YACd,IAAI,+CAAsB,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;gBAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,wDAA+B,CAAC,CAAC;aACjF;iBAAM;gBACN,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,6BAAqB,CAAC,CAAC;aACvE;SACD;IACF,CAAC;IAEM,4BAAM,GAAb,UAAc,SAAsB;QACnC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,IAAI,CAAC,eAAe,KAAK,QAAQ,EAAE;YACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;QACD,yCAAyC;QACzC,OAAO,IAAI,CAAC;IACb,CAAC;IAEO,8BAAQ,GAAhB;QAAA,iBAYC;QAXA,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,SAAS,EAAE;YAC1C,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,cAAM,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAApC,CAAoC,CAAC,CAAC,CAAC;YACnH,IAAI,CAAC,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,qBAAqB,EAAE,sCAAsC,CAAC,CAAC;YACvG,IAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;IACrB,CAAC;IAEO,8BAAQ,GAAhB;QACC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE;YACrC,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE,CAAC;YAC5D,IAAM,IAAI,GAAG,OAAO,CAAC,qBAAqB,CAAC,IAAI,IAAI,EAAE,CAAC;YACtD,IAAM,oBAAoB,GAAG,IAAI,IAAI,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC;YAC1E,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,EAAE,IAAI,CAAC,eAAe,KAAK,OAAO,IAAI,CAAC,oBAAoB,CAAC,CAAC;YACzG,IAAI,oBAAoB,EAAE;gBACzB,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAI,IAAI,UAAK,OAAO,CAAC,qBAAqB,CAAC,MAAO,CAAC,IAAI,MAAG,CAAC,CAAC,CAAC,IAAI,CAAC;aAC7H;SACD;IACF,CAAC;IAnFW,WAAW;QAQrB,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,qBAAa,CAAA;QACb,mBAAA,4BAAa,CAAA;QACb,mBAAA,qCAAqB,CAAA;OAXX,WAAW,CAoFvB;IAAD,kBAAC;CAAA,AApFD,CAAiC,gBAAQ,GAoFxC;AApFY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IStatusbarItem } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { IDebugService, State, IDebugConfiguration } from 'vs/workbench/contrib/debug/common/debug';\nimport { Themable, STATUS_BAR_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { STATUS_BAR_DEBUGGING_FOREGROUND, isStatusbarInDebugMode } from 'vs/workbench/contrib/debug/browser/statusbarColorProvider';\n\nconst $ = dom.$;\n\nexport class DebugStatus extends Themable implements IStatusbarItem {\n\tprivate container: HTMLElement;\n\tprivate statusBarItem: HTMLElement;\n\tprivate label: HTMLElement;\n\tprivate icon: HTMLElement;\n\tprivate showInStatusBar: 'never' | 'always' | 'onFirstSessionStart';\n\n\tconstructor(\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(themeService);\n\t\tthis._register(this.debugService.getConfigurationManager().onDidSelectConfiguration(e => {\n\t\t\tthis.setLabel();\n\t\t}));\n\t\tthis._register(this.debugService.onDidChangeState(state => {\n\t\t\tif (state !== State.Inactive && this.showInStatusBar === 'onFirstSessionStart') {\n\t\t\t\tthis.doRender();\n\t\t\t} else {\n\t\t\t\tif (this.showInStatusBar !== 'never') {\n\t\t\t\t\tthis.updateStyles();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.showInStatusBar = configurationService.getValue<IDebugConfiguration>('debug').showInStatusBar;\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.showInStatusBar')) {\n\t\t\t\tthis.showInStatusBar = configurationService.getValue<IDebugConfiguration>('debug').showInStatusBar;\n\t\t\t\tif (this.showInStatusBar === 'always') {\n\t\t\t\t\tthis.doRender();\n\t\t\t\t}\n\t\t\t\tif (this.statusBarItem) {\n\t\t\t\t\tdom.toggleClass(this.statusBarItem, 'hidden', this.showInStatusBar === 'never');\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected updateStyles(): void {\n\t\tif (this.icon) {\n\t\t\tif (isStatusbarInDebugMode(this.debugService)) {\n\t\t\t\tthis.icon.style.backgroundColor = this.getColor(STATUS_BAR_DEBUGGING_FOREGROUND);\n\t\t\t} else {\n\t\t\t\tthis.icon.style.backgroundColor = this.getColor(STATUS_BAR_FOREGROUND);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic render(container: HTMLElement): IDisposable {\n\t\tthis.container = container;\n\t\tif (this.showInStatusBar === 'always') {\n\t\t\tthis.doRender();\n\t\t}\n\t\t// noop, we render when we decide is best\n\t\treturn this;\n\t}\n\n\tprivate doRender(): void {\n\t\tif (!this.statusBarItem && this.container) {\n\t\t\tthis.statusBarItem = dom.append(this.container, $('.debug-statusbar-item'));\n\t\t\tthis._register(dom.addDisposableListener(this.statusBarItem, 'click', () => this.quickOpenService.show('debug ')));\n\t\t\tthis.statusBarItem.title = nls.localize('selectAndStartDebug', \"Select and start debug configuration\");\n\t\t\tconst a = dom.append(this.statusBarItem, $('a'));\n\t\t\tthis.icon = dom.append(a, $('.icon'));\n\t\t\tthis.label = dom.append(a, $('span.label'));\n\t\t\tthis.setLabel();\n\t\t}\n\n\t\tthis.updateStyles();\n\t}\n\n\tprivate setLabel(): void {\n\t\tif (this.label && this.statusBarItem) {\n\t\t\tconst manager = this.debugService.getConfigurationManager();\n\t\t\tconst name = manager.selectedConfiguration.name || '';\n\t\t\tconst nameAndLaunchPresent = name && manager.selectedConfiguration.launch;\n\t\t\tdom.toggleClass(this.statusBarItem, 'hidden', this.showInStatusBar === 'never' || !nameAndLaunchPresent);\n\t\t\tif (nameAndLaunchPresent) {\n\t\t\t\tthis.label.textContent = manager.getLaunches().length > 1 ? `${name} (${manager.selectedConfiguration.launch!.name})` : name;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}