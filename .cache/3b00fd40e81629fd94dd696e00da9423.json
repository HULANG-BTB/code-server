{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\", \"vs/workbench/common/editor/textEditorModel\", \"vs/workbench/common/editor/diffEditorModel\", \"vs/workbench/common/editor/textDiffEditorModel\"], function (require, exports, editor_1, textEditorModel_1, diffEditorModel_1, textDiffEditorModel_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The base editor input for the diff editor. It is made up of two editor inputs, the original version\n     * and the modified version.\n     */\n    class DiffEditorInput extends editor_1.SideBySideEditorInput {\n        constructor(name, description, original, modified, forceOpenAsBinary) {\n            super(name, description, original, modified);\n            this.forceOpenAsBinary = forceOpenAsBinary;\n        }\n        getTypeId() {\n            return DiffEditorInput.ID;\n        }\n        get originalInput() {\n            return this.details;\n        }\n        get modifiedInput() {\n            return this.master;\n        }\n        resolve() {\n            // Create Model - we never reuse our cached model if refresh is true because we cannot\n            // decide for the inputs within if the cached model can be reused or not. There may be\n            // inputs that need to be loaded again and thus we always recreate the model and dispose\n            // the previous one - if any.\n            return this.createModel().then(resolvedModel => {\n                if (this.cachedModel) {\n                    this.cachedModel.dispose();\n                }\n                this.cachedModel = resolvedModel;\n                return this.cachedModel;\n            });\n        }\n        getPreferredEditorId(candidates) {\n            return this.forceOpenAsBinary ? editor_1.BINARY_DIFF_EDITOR_ID : editor_1.TEXT_DIFF_EDITOR_ID;\n        }\n        createModel() {\n            // Join resolve call over two inputs and build diff editor model\n            return Promise.all([\n                this.originalInput.resolve(),\n                this.modifiedInput.resolve()\n            ]).then(models => {\n                const originalEditorModel = models[0];\n                const modifiedEditorModel = models[1];\n                // If both are text models, return textdiffeditor model\n                if (modifiedEditorModel instanceof textEditorModel_1.BaseTextEditorModel && originalEditorModel instanceof textEditorModel_1.BaseTextEditorModel) {\n                    return new textDiffEditorModel_1.TextDiffEditorModel(originalEditorModel, modifiedEditorModel);\n                }\n                // Otherwise return normal diff model\n                return new diffEditorModel_1.DiffEditorModel(originalEditorModel, modifiedEditorModel);\n            });\n        }\n        dispose() {\n            // Free the diff editor model but do not propagate the dispose() call to the two inputs\n            // We never created the two inputs (original and modified) so we can not dispose\n            // them without sideeffects.\n            if (this.cachedModel) {\n                this.cachedModel.dispose();\n                this.cachedModel = null;\n            }\n            super.dispose();\n        }\n    }\n    DiffEditorInput.ID = 'workbench.editors.diffEditorInput';\n    exports.DiffEditorInput = DiffEditorInput;\n});\n",null]}