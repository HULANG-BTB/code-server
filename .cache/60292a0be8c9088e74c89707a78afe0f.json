{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/workbench/services/extensions/common/extensionsRegistry\", \"vs/base/common/strings\", \"vs/base/common/resources\"], function (require, exports, nls, extensionsRegistry_1, strings, resources) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const configurationExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'jsonValidation',\n        defaultExtensionKind: 'workspace',\n        jsonSchema: {\n            description: nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.'),\n            type: 'array',\n            defaultSnippets: [{ body: [{ fileMatch: '${1:file.json}', url: '${2:url}' }] }],\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { fileMatch: '${1:file.json}', url: '${2:url}' } }],\n                properties: {\n                    fileMatch: {\n                        type: 'string',\n                        description: nls.localize('contributes.jsonValidation.fileMatch', 'The file pattern to match, for example \"package.json\" or \"*.launch\".'),\n                    },\n                    url: {\n                        description: nls.localize('contributes.jsonValidation.url', 'A schema URL (\\'http:\\', \\'https:\\') or relative path to the extension folder (\\'./\\').'),\n                        type: 'string'\n                    }\n                }\n            }\n        }\n    });\n    class JSONValidationExtensionPoint {\n        constructor() {\n            configurationExtPoint.setHandler((extensions) => {\n                for (const extension of extensions) {\n                    const extensionValue = extension.value;\n                    const collector = extension.collector;\n                    const extensionLocation = extension.description.extensionLocation;\n                    if (!extensionValue || !Array.isArray(extensionValue)) {\n                        collector.error(nls.localize('invalid.jsonValidation', \"'configuration.jsonValidation' must be a array\"));\n                        return;\n                    }\n                    extensionValue.forEach(extension => {\n                        if (typeof extension.fileMatch !== 'string') {\n                            collector.error(nls.localize('invalid.fileMatch', \"'configuration.jsonValidation.fileMatch' must be defined\"));\n                            return;\n                        }\n                        let uri = extension.url;\n                        if (typeof extension.url !== 'string') {\n                            collector.error(nls.localize('invalid.url', \"'configuration.jsonValidation.url' must be a URL or relative path\"));\n                            return;\n                        }\n                        if (strings.startsWith(uri, './')) {\n                            try {\n                                const colorThemeLocation = resources.joinPath(extensionLocation, uri);\n                                if (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {\n                                    collector.warn(nls.localize('invalid.path.1', \"Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.\", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));\n                                }\n                            }\n                            catch (e) {\n                                collector.error(nls.localize('invalid.url.fileschema', \"'configuration.jsonValidation.url' is an invalid relative URL: {0}\", e.message));\n                            }\n                        }\n                        else if (!strings.startsWith(uri, 'https:/') && strings.startsWith(uri, 'https:/')) {\n                            collector.error(nls.localize('invalid.url.schema', \"'configuration.jsonValidation.url' must start with 'http:', 'https:' or './' to reference schemas located in the extension\"));\n                            return;\n                        }\n                    });\n                }\n            });\n        }\n    }\n    exports.JSONValidationExtensionPoint = JSONValidationExtensionPoint;\n});\n",null]}