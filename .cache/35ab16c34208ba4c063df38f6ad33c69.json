{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSaveParticipant.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSaveParticipant.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar async_1 = require(\"vs/base/common/async\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar strings = require(\"vs/base/common/strings\");\nvar bulkEditService_1 = require(\"vs/editor/browser/services/bulkEditService\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar trimTrailingWhitespaceCommand_1 = require(\"vs/editor/common/commands/trimTrailingWhitespaceCommand\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar codeAction_1 = require(\"vs/editor/contrib/codeAction/codeAction\");\nvar codeActionCommands_1 = require(\"vs/editor/contrib/codeAction/codeActionCommands\");\nvar codeActionTrigger_1 = require(\"vs/editor/contrib/codeAction/codeActionTrigger\");\nvar format_1 = require(\"vs/editor/contrib/format/format\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar nls_1 = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar textFileEditorModel_1 = require(\"vs/workbench/services/textfile/common/textFileEditorModel\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar TrimWhitespaceParticipant = /** @class */ (function () {\n    function TrimWhitespaceParticipant(configurationService, codeEditorService) {\n        this.configurationService = configurationService;\n        this.codeEditorService = codeEditorService;\n        // Nothing\n    }\n    TrimWhitespaceParticipant.prototype.participate = function (model, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.configurationService.getValue('files.trimTrailingWhitespace', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n                    this.doTrimTrailingWhitespace(model.textEditorModel, env.reason === textfiles_1.SaveReason.AUTO);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    TrimWhitespaceParticipant.prototype.doTrimTrailingWhitespace = function (model, isAutoSaved) {\n        var prevSelection = [];\n        var cursors = [];\n        var editor = findEditor(model, this.codeEditorService);\n        if (editor) {\n            // Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n            // Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n            prevSelection = editor.getSelections();\n            if (isAutoSaved) {\n                cursors = prevSelection.map(function (s) { return s.getPosition(); });\n                var snippetsRange = snippetController2_1.SnippetController2.get(editor).getSessionEnclosingRange();\n                if (snippetsRange) {\n                    for (var lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n                        cursors.push(new position_1.Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n                    }\n                }\n            }\n        }\n        var ops = trimTrailingWhitespaceCommand_1.trimTrailingWhitespace(model, cursors);\n        if (!ops.length) {\n            return; // Nothing to do\n        }\n        model.pushEditOperations(prevSelection, ops, function (edits) { return prevSelection; });\n    };\n    TrimWhitespaceParticipant = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, codeEditorService_1.ICodeEditorService)\n    ], TrimWhitespaceParticipant);\n    return TrimWhitespaceParticipant;\n}());\nfunction findEditor(model, codeEditorService) {\n    var candidate = null;\n    if (model.isAttachedToEditor()) {\n        for (var _i = 0, _a = codeEditorService.listCodeEditors(); _i < _a.length; _i++) {\n            var editor = _a[_i];\n            if (editor.hasModel() && editor.getModel() === model) {\n                if (editor.hasTextFocus()) {\n                    return editor; // favour focused editor if there are multiple\n                }\n                candidate = editor;\n            }\n        }\n    }\n    return candidate;\n}\nvar FinalNewLineParticipant = /** @class */ (function () {\n    function FinalNewLineParticipant(configurationService, codeEditorService) {\n        this.configurationService = configurationService;\n        this.codeEditorService = codeEditorService;\n        // Nothing\n    }\n    FinalNewLineParticipant.prototype.participate = function (model, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.configurationService.getValue('files.insertFinalNewline', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n                    this.doInsertFinalNewLine(model.textEditorModel);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    FinalNewLineParticipant.prototype.doInsertFinalNewLine = function (model) {\n        var lineCount = model.getLineCount();\n        var lastLine = model.getLineContent(lineCount);\n        var lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;\n        if (!lineCount || lastLineIsEmptyOrWhitespace) {\n            return;\n        }\n        var prevSelection = [];\n        var editor = findEditor(model, this.codeEditorService);\n        if (editor) {\n            prevSelection = editor.getSelections();\n        }\n        model.pushEditOperations(prevSelection, [editOperation_1.EditOperation.insert(new position_1.Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())], function (edits) { return prevSelection; });\n        if (editor) {\n            editor.setSelections(prevSelection);\n        }\n    };\n    FinalNewLineParticipant = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, codeEditorService_1.ICodeEditorService)\n    ], FinalNewLineParticipant);\n    return FinalNewLineParticipant;\n}());\nexports.FinalNewLineParticipant = FinalNewLineParticipant;\nvar TrimFinalNewLinesParticipant = /** @class */ (function () {\n    function TrimFinalNewLinesParticipant(configurationService, codeEditorService) {\n        this.configurationService = configurationService;\n        this.codeEditorService = codeEditorService;\n        // Nothing\n    }\n    TrimFinalNewLinesParticipant.prototype.participate = function (model, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                if (this.configurationService.getValue('files.trimFinalNewlines', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n                    this.doTrimFinalNewLines(model.textEditorModel, env.reason === textfiles_1.SaveReason.AUTO);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * returns 0 if the entire file is empty or whitespace only\n     */\n    TrimFinalNewLinesParticipant.prototype.findLastLineWithContent = function (model) {\n        for (var lineNumber = model.getLineCount(); lineNumber >= 1; lineNumber--) {\n            var lineContent = model.getLineContent(lineNumber);\n            if (strings.lastNonWhitespaceIndex(lineContent) !== -1) {\n                // this line has content\n                return lineNumber;\n            }\n        }\n        // no line has content\n        return 0;\n    };\n    TrimFinalNewLinesParticipant.prototype.doTrimFinalNewLines = function (model, isAutoSaved) {\n        var lineCount = model.getLineCount();\n        // Do not insert new line if file does not end with new line\n        if (lineCount === 1) {\n            return;\n        }\n        var prevSelection = [];\n        var cannotTouchLineNumber = 0;\n        var editor = findEditor(model, this.codeEditorService);\n        if (editor) {\n            prevSelection = editor.getSelections();\n            if (isAutoSaved) {\n                for (var i = 0, len = prevSelection.length; i < len; i++) {\n                    var positionLineNumber = prevSelection[i].positionLineNumber;\n                    if (positionLineNumber > cannotTouchLineNumber) {\n                        cannotTouchLineNumber = positionLineNumber;\n                    }\n                }\n            }\n        }\n        var lastLineNumberWithContent = this.findLastLineWithContent(model);\n        var deleteFromLineNumber = Math.max(lastLineNumberWithContent + 1, cannotTouchLineNumber + 1);\n        var deletionRange = model.validateRange(new range_1.Range(deleteFromLineNumber, 1, lineCount, model.getLineMaxColumn(lineCount)));\n        if (deletionRange.isEmpty()) {\n            return;\n        }\n        model.pushEditOperations(prevSelection, [editOperation_1.EditOperation.delete(deletionRange)], function (edits) { return prevSelection; });\n        if (editor) {\n            editor.setSelections(prevSelection);\n        }\n    };\n    TrimFinalNewLinesParticipant = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, codeEditorService_1.ICodeEditorService)\n    ], TrimFinalNewLinesParticipant);\n    return TrimFinalNewLinesParticipant;\n}());\nexports.TrimFinalNewLinesParticipant = TrimFinalNewLinesParticipant;\nvar FormatOnSaveParticipant = /** @class */ (function () {\n    function FormatOnSaveParticipant(_configurationService, _codeEditorService, _instantiationService) {\n        this._configurationService = _configurationService;\n        this._codeEditorService = _codeEditorService;\n        this._instantiationService = _instantiationService;\n        // Nothing\n    }\n    FormatOnSaveParticipant.prototype.participate = function (editorModel, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var model, overrides;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                model = editorModel.textEditorModel;\n                overrides = { overrideIdentifier: model.getLanguageIdentifier().language, resource: model.uri };\n                if (env.reason === textfiles_1.SaveReason.AUTO || !this._configurationService.getValue('editor.formatOnSave', overrides)) {\n                    return [2 /*return*/, undefined];\n                }\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var source = new cancellation_1.CancellationTokenSource();\n                        var editorOrModel = findEditor(model, _this._codeEditorService) || model;\n                        var timeout = _this._configurationService.getValue('editor.formatOnSaveTimeout', overrides);\n                        var request = _this._instantiationService.invokeFunction(format_1.formatDocumentWithSelectedProvider, editorOrModel, format_1.FormattingMode.Silent, source.token);\n                        setTimeout(function () {\n                            reject(nls_1.localize('timeout.formatOnSave', \"Aborted format on save after {0}ms\", timeout));\n                            source.cancel();\n                        }, timeout);\n                        request.then(resolve, reject);\n                    })];\n            });\n        });\n    };\n    FormatOnSaveParticipant = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService)\n    ], FormatOnSaveParticipant);\n    return FormatOnSaveParticipant;\n}());\nvar CodeActionOnSaveParticipant = /** @class */ (function () {\n    function CodeActionOnSaveParticipant(_bulkEditService, _commandService, _configurationService) {\n        this._bulkEditService = _bulkEditService;\n        this._commandService = _commandService;\n        this._configurationService = _configurationService;\n    }\n    CodeActionOnSaveParticipant.prototype.participate = function (editorModel, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var model, settingsOverrides, setting, codeActionsOnSave, tokenSource, timeout;\n            return tslib_1.__generator(this, function (_a) {\n                if (env.reason === textfiles_1.SaveReason.AUTO) {\n                    return [2 /*return*/, undefined];\n                }\n                model = editorModel.textEditorModel;\n                settingsOverrides = { overrideIdentifier: model.getLanguageIdentifier().language, resource: editorModel.getResource() };\n                setting = this._configurationService.getValue('editor.codeActionsOnSave', settingsOverrides);\n                if (!setting) {\n                    return [2 /*return*/, undefined];\n                }\n                codeActionsOnSave = Object.keys(setting)\n                    .filter(function (x) { return setting[x]; }).map(function (x) { return new codeActionTrigger_1.CodeActionKind(x); })\n                    .sort(function (a, b) {\n                    if (a.value === codeActionTrigger_1.CodeActionKind.SourceFixAll.value) {\n                        return -1;\n                    }\n                    if (b.value === codeActionTrigger_1.CodeActionKind.SourceFixAll.value) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                if (!codeActionsOnSave.length) {\n                    return [2 /*return*/, undefined];\n                }\n                tokenSource = new cancellation_1.CancellationTokenSource();\n                timeout = this._configurationService.getValue('editor.codeActionsOnSaveTimeout', settingsOverrides);\n                return [2 /*return*/, Promise.race([\n                        new Promise(function (_resolve, reject) {\n                            return setTimeout(function () {\n                                tokenSource.cancel();\n                                reject(nls_1.localize('codeActionsOnSave.didTimeout', \"Aborted codeActionsOnSave after {0}ms\", timeout));\n                            }, timeout);\n                        }),\n                        this.applyOnSaveActions(model, codeActionsOnSave, tokenSource.token)\n                    ]).then(function () {\n                        tokenSource.cancel();\n                    }, function (e) {\n                        tokenSource.cancel();\n                        return Promise.reject(e);\n                    })];\n            });\n        });\n    };\n    CodeActionOnSaveParticipant.prototype.applyOnSaveActions = function (model, codeActionsOnSave, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _i, codeActionsOnSave_1, codeActionKind, actionsToRun, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _i = 0, codeActionsOnSave_1 = codeActionsOnSave;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < codeActionsOnSave_1.length)) return [3 /*break*/, 7];\n                        codeActionKind = codeActionsOnSave_1[_i];\n                        return [4 /*yield*/, this.getActionsToRun(model, codeActionKind, token)];\n                    case 2:\n                        actionsToRun = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.applyCodeActions(actionsToRun.actions)];\n                    case 4:\n                        _b.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        _a = _b.sent();\n                        return [3 /*break*/, 6];\n                    case 6:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CodeActionOnSaveParticipant.prototype.applyCodeActions = function (actionsToRun) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _i, actionsToRun_1, action;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _i = 0, actionsToRun_1 = actionsToRun;\n                        _a.label = 1;\n                    case 1:\n                        if (!(_i < actionsToRun_1.length)) return [3 /*break*/, 4];\n                        action = actionsToRun_1[_i];\n                        return [4 /*yield*/, codeActionCommands_1.applyCodeAction(action, this._bulkEditService, this._commandService)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CodeActionOnSaveParticipant.prototype.getActionsToRun = function (model, codeActionKind, token) {\n        return codeAction_1.getCodeActions(model, model.getFullModelRange(), {\n            type: 'auto',\n            filter: { kind: codeActionKind, includeSourceActions: true },\n        }, token);\n    };\n    CodeActionOnSaveParticipant = tslib_1.__decorate([\n        tslib_1.__param(0, bulkEditService_1.IBulkEditService),\n        tslib_1.__param(1, commands_1.ICommandService),\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], CodeActionOnSaveParticipant);\n    return CodeActionOnSaveParticipant;\n}());\nvar ExtHostSaveParticipant = /** @class */ (function () {\n    function ExtHostSaveParticipant(extHostContext) {\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostDocumentSaveParticipant);\n    }\n    ExtHostSaveParticipant.prototype.participate = function (editorModel, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                if (!modelService_1.shouldSynchronizeModel(editorModel.textEditorModel)) {\n                    // the model never made it to the extension\n                    // host meaning we cannot participate in its save\n                    return [2 /*return*/, undefined];\n                }\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        setTimeout(function () { return reject(nls_1.localize('timeout.onWillSave', \"Aborted onWillSaveTextDocument-event after 1750ms\")); }, 1750);\n                        _this._proxy.$participateInSave(editorModel.getResource(), env.reason).then(function (values) {\n                            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                                var success = values_1[_i];\n                                if (!success) {\n                                    return Promise.reject(new Error('listener failed'));\n                                }\n                            }\n                            return undefined;\n                        }).then(resolve, reject);\n                    })];\n            });\n        });\n    };\n    return ExtHostSaveParticipant;\n}());\n// The save participant can change a model before its saved to support various scenarios like trimming trailing whitespace\nvar SaveParticipant = /** @class */ (function () {\n    function SaveParticipant(extHostContext, instantiationService, _progressService, _logService) {\n        this._progressService = _progressService;\n        this._logService = _logService;\n        this._saveParticipants = new async_1.IdleValue(function () { return [\n            instantiationService.createInstance(TrimWhitespaceParticipant),\n            instantiationService.createInstance(CodeActionOnSaveParticipant),\n            instantiationService.createInstance(FormatOnSaveParticipant),\n            instantiationService.createInstance(FinalNewLineParticipant),\n            instantiationService.createInstance(TrimFinalNewLinesParticipant),\n            instantiationService.createInstance(ExtHostSaveParticipant, extHostContext),\n        ]; });\n        // Hook into model\n        textFileEditorModel_1.TextFileEditorModel.setSaveParticipant(this);\n    }\n    SaveParticipant.prototype.dispose = function () {\n        textFileEditorModel_1.TextFileEditorModel.setSaveParticipant(null);\n        this._saveParticipants.dispose();\n    };\n    SaveParticipant.prototype.participate = function (model, env) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._progressService.withProgress({ location: progress_1.ProgressLocation.Window }, function (progress) {\n                        progress.report({ message: nls_1.localize('saveParticipants', \"Running Save Participants...\") });\n                        var promiseFactory = _this._saveParticipants.getValue().map(function (p) { return function () {\n                            return p.participate(model, env);\n                        }; });\n                        return async_1.sequence(promiseFactory).then(function () { }, function (err) { return _this._logService.warn(err); });\n                    })];\n            });\n        });\n    };\n    SaveParticipant = tslib_1.__decorate([\n        extHostCustomers_1.extHostCustomer,\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, progress_1.IProgressService2),\n        tslib_1.__param(3, log_1.ILogService)\n    ], SaveParticipant);\n    return SaveParticipant;\n}());\nexports.SaveParticipant = SaveParticipant;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSaveParticipant.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSaveParticipant.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IdleValue, sequence } from 'vs/base/common/async';\nimport { CancellationTokenSource, CancellationToken } from 'vs/base/common/cancellation';\nimport * as strings from 'vs/base/common/strings';\nimport { IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { trimTrailingWhitespace } from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport { ICodeActionsOnSaveOptions } from 'vs/editor/common/config/editorOptions';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CodeAction } from 'vs/editor/common/modes';\nimport { shouldSynchronizeModel } from 'vs/editor/common/services/modelService';\nimport { getCodeActions } from 'vs/editor/contrib/codeAction/codeAction';\nimport { applyCodeAction } from 'vs/editor/contrib/codeAction/codeActionCommands';\nimport { CodeActionKind } from 'vs/editor/contrib/codeAction/codeActionTrigger';\nimport { formatDocumentWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/format';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { localize } from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProgressService2, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { extHostCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { ISaveParticipant, SaveReason, IResolvedTextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ExtHostContext, ExtHostDocumentSaveParticipantShape, IExtHostContext } from '../common/extHost.protocol';\n\nexport interface ISaveParticipantParticipant extends ISaveParticipant {\n\t// progressMessage: string;\n}\n\nclass TrimWhitespaceParticipant implements ISaveParticipantParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (this.configurationService.getValue('files.trimTrailingWhitespace', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n\t\t\tthis.doTrimTrailingWhitespace(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\tprivate doTrimTrailingWhitespace(model: ITextModel, isAutoSaved: boolean): void {\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cursors: Position[] = [];\n\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\t// Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n\t\t\t// Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tcursors = prevSelection.map(s => s.getPosition());\n\t\t\t\tconst snippetsRange = SnippetController2.get(editor).getSessionEnclosingRange();\n\t\t\t\tif (snippetsRange) {\n\t\t\t\t\tfor (let lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tcursors.push(new Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ops = trimTrailingWhitespace(model, cursors);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (edits) => prevSelection);\n\t}\n}\n\nfunction findEditor(model: ITextModel, codeEditorService: ICodeEditorService): IActiveCodeEditor | null {\n\tlet candidate: IActiveCodeEditor | null = null;\n\n\tif (model.isAttachedToEditor()) {\n\t\tfor (const editor of codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.hasModel() && editor.getModel() === model) {\n\t\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t\treturn editor; // favour focused editor if there are multiple\n\t\t\t\t}\n\n\t\t\t\tcandidate = editor;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport class FinalNewLineParticipant implements ISaveParticipantParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (this.configurationService.getValue('files.insertFinalNewline', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n\t\t\tthis.doInsertFinalNewLine(model.textEditorModel);\n\t\t}\n\t}\n\n\tprivate doInsertFinalNewLine(model: ITextModel): void {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst lastLine = model.getLineContent(lineCount);\n\t\tconst lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;\n\n\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, [EditOperation.insert(new Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())], edits => prevSelection);\n\n\t\tif (editor) {\n\t\t\teditor.setSelections(prevSelection);\n\t\t}\n\t}\n}\n\nexport class TrimFinalNewLinesParticipant implements ISaveParticipantParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (this.configurationService.getValue('files.trimFinalNewlines', { overrideIdentifier: model.textEditorModel.getLanguageIdentifier().language, resource: model.getResource() })) {\n\t\t\tthis.doTrimFinalNewLines(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty or whitespace only\n\t */\n\tprivate findLastLineWithContent(model: ITextModel): number {\n\t\tfor (let lineNumber = model.getLineCount(); lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tif (strings.lastNonWhitespaceIndex(lineContent) !== -1) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate doTrimFinalNewLines(model: ITextModel, isAutoSaved: boolean): void {\n\t\tconst lineCount = model.getLineCount();\n\n\t\t// Do not insert new line if file does not end with new line\n\t\tif (lineCount === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cannotTouchLineNumber = 0;\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tfor (let i = 0, len = prevSelection.length; i < len; i++) {\n\t\t\t\t\tconst positionLineNumber = prevSelection[i].positionLineNumber;\n\t\t\t\t\tif (positionLineNumber > cannotTouchLineNumber) {\n\t\t\t\t\t\tcannotTouchLineNumber = positionLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lastLineNumberWithContent = this.findLastLineWithContent(model);\n\t\tconst deleteFromLineNumber = Math.max(lastLineNumberWithContent + 1, cannotTouchLineNumber + 1);\n\t\tconst deletionRange = model.validateRange(new Range(deleteFromLineNumber, 1, lineCount, model.getLineMaxColumn(lineCount)));\n\n\t\tif (deletionRange.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, [EditOperation.delete(deletionRange)], edits => prevSelection);\n\n\t\tif (editor) {\n\t\t\teditor.setSelections(prevSelection);\n\t\t}\n\t}\n}\n\nclass FormatOnSaveParticipant implements ISaveParticipantParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(editorModel: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\n\t\tconst model = editorModel.textEditorModel;\n\t\tconst overrides = { overrideIdentifier: model.getLanguageIdentifier().language, resource: model.uri };\n\n\t\tif (env.reason === SaveReason.AUTO || !this._configurationService.getValue('editor.formatOnSave', overrides)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tconst source = new CancellationTokenSource();\n\t\t\tconst editorOrModel = findEditor(model, this._codeEditorService) || model;\n\t\t\tconst timeout = this._configurationService.getValue<number>('editor.formatOnSaveTimeout', overrides);\n\t\t\tconst request = this._instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, source.token);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\treject(localize('timeout.formatOnSave', \"Aborted format on save after {0}ms\", timeout));\n\t\t\t\tsource.cancel();\n\t\t\t}, timeout);\n\n\t\t\trequest.then(resolve, reject);\n\t\t});\n\t}\n}\n\nclass CodeActionOnSaveParticipant implements ISaveParticipant {\n\n\tconstructor(\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\n\tasync participate(editorModel: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (env.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst model = editorModel.textEditorModel;\n\n\t\tconst settingsOverrides = { overrideIdentifier: model.getLanguageIdentifier().language, resource: editorModel.getResource() };\n\t\tconst setting = this._configurationService.getValue<ICodeActionsOnSaveOptions>('editor.codeActionsOnSave', settingsOverrides);\n\t\tif (!setting) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst codeActionsOnSave = Object.keys(setting)\n\t\t\t.filter(x => setting[x]).map(x => new CodeActionKind(x))\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a.value === CodeActionKind.SourceFixAll.value) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (b.value === CodeActionKind.SourceFixAll.value) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\tif (!codeActionsOnSave.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst tokenSource = new CancellationTokenSource();\n\n\t\tconst timeout = this._configurationService.getValue<number>('editor.codeActionsOnSaveTimeout', settingsOverrides);\n\n\t\treturn Promise.race([\n\t\t\tnew Promise<void>((_resolve, reject) =>\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttokenSource.cancel();\n\t\t\t\t\treject(localize('codeActionsOnSave.didTimeout', \"Aborted codeActionsOnSave after {0}ms\", timeout));\n\t\t\t\t}, timeout)),\n\t\t\tthis.applyOnSaveActions(model, codeActionsOnSave, tokenSource.token)\n\t\t]).then(() => {\n\t\t\ttokenSource.cancel();\n\t\t}, (e) => {\n\t\t\ttokenSource.cancel();\n\t\t\treturn Promise.reject(e);\n\t\t});\n\t}\n\n\tprivate async applyOnSaveActions(model: ITextModel, codeActionsOnSave: CodeActionKind[], token: CancellationToken): Promise<void> {\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst actionsToRun = await this.getActionsToRun(model, codeActionKind, token);\n\t\t\ttry {\n\t\t\t\tawait this.applyCodeActions(actionsToRun.actions);\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async applyCodeActions(actionsToRun: ReadonlyArray<CodeAction>) {\n\t\tfor (const action of actionsToRun) {\n\t\t\tawait applyCodeAction(action, this._bulkEditService, this._commandService);\n\t\t}\n\t}\n\n\tprivate getActionsToRun(model: ITextModel, codeActionKind: CodeActionKind, token: CancellationToken) {\n\t\treturn getCodeActions(model, model.getFullModelRange(), {\n\t\t\ttype: 'auto',\n\t\t\tfilter: { kind: codeActionKind, includeSourceActions: true },\n\t\t}, token);\n\t}\n}\n\nclass ExtHostSaveParticipant implements ISaveParticipantParticipant {\n\n\tprivate readonly _proxy: ExtHostDocumentSaveParticipantShape;\n\n\tconstructor(extHostContext: IExtHostContext) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDocumentSaveParticipant);\n\t}\n\n\tasync participate(editorModel: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\n\t\tif (!shouldSynchronizeModel(editorModel.textEditorModel)) {\n\t\t\t// the model never made it to the extension\n\t\t\t// host meaning we cannot participate in its save\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\tsetTimeout(() => reject(localize('timeout.onWillSave', \"Aborted onWillSaveTextDocument-event after 1750ms\")), 1750);\n\t\t\tthis._proxy.$participateInSave(editorModel.getResource(), env.reason).then(values => {\n\t\t\t\tfor (const success of values) {\n\t\t\t\t\tif (!success) {\n\t\t\t\t\t\treturn Promise.reject(new Error('listener failed'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}).then(resolve, reject);\n\t\t});\n\t}\n}\n\n// The save participant can change a model before its saved to support various scenarios like trimming trailing whitespace\n@extHostCustomer\nexport class SaveParticipant implements ISaveParticipant {\n\n\tprivate readonly _saveParticipants: IdleValue<ISaveParticipantParticipant[]>;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IProgressService2 private readonly _progressService: IProgressService2,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tthis._saveParticipants = new IdleValue(() => [\n\t\t\tinstantiationService.createInstance(TrimWhitespaceParticipant),\n\t\t\tinstantiationService.createInstance(CodeActionOnSaveParticipant),\n\t\t\tinstantiationService.createInstance(FormatOnSaveParticipant),\n\t\t\tinstantiationService.createInstance(FinalNewLineParticipant),\n\t\t\tinstantiationService.createInstance(TrimFinalNewLinesParticipant),\n\t\t\tinstantiationService.createInstance(ExtHostSaveParticipant, extHostContext),\n\t\t]);\n\t\t// Hook into model\n\t\tTextFileEditorModel.setSaveParticipant(this);\n\t}\n\n\tdispose(): void {\n\t\tTextFileEditorModel.setSaveParticipant(null);\n\t\tthis._saveParticipants.dispose();\n\t}\n\n\tasync participate(model: IResolvedTextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\treturn this._progressService.withProgress({ location: ProgressLocation.Window }, progress => {\n\t\t\tprogress.report({ message: localize('saveParticipants', \"Running Save Participants...\") });\n\t\t\tconst promiseFactory = this._saveParticipants.getValue().map(p => () => {\n\t\t\t\treturn p.participate(model, env);\n\t\t\t});\n\t\t\treturn sequence(promiseFactory).then(() => { }, err => this._logService.warn(err));\n\t\t});\n\t}\n}\n"]}]}