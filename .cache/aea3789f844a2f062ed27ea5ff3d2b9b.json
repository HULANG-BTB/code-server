{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar ExtensionsInput = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionsInput, _super);\n    function ExtensionsInput(_extension) {\n        var _this = _super.call(this) || this;\n        _this._extension = _extension;\n        return _this;\n    }\n    Object.defineProperty(ExtensionsInput.prototype, \"extension\", {\n        get: function () { return this._extension; },\n        enumerable: true,\n        configurable: true\n    });\n    ExtensionsInput.prototype.getTypeId = function () {\n        return ExtensionsInput.ID;\n    };\n    ExtensionsInput.prototype.getName = function () {\n        return nls_1.localize('extensionsInputName', \"Extension: {0}\", this.extension.displayName);\n    };\n    ExtensionsInput.prototype.matches = function (other) {\n        if (!(other instanceof ExtensionsInput)) {\n            return false;\n        }\n        var otherExtensionInput = other;\n        // TODO@joao is this correct?\n        return this.extension === otherExtensionInput.extension;\n    };\n    ExtensionsInput.prototype.resolve = function () {\n        return Promise.resolve(null);\n    };\n    ExtensionsInput.prototype.supportsSplitEditor = function () {\n        return false;\n    };\n    ExtensionsInput.prototype.getResource = function () {\n        return uri_1.URI.from({\n            scheme: 'extension',\n            path: this.extension.identifier.id\n        });\n    };\n    ExtensionsInput.ID = 'workbench.extensions.input2';\n    return ExtensionsInput;\n}(editor_1.EditorInput));\nexports.ExtensionsInput = ExtensionsInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsInput.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8BAAkC;AAClC,qDAAyD;AAEzD,0CAAyC;AAEzC;IAAqC,2CAAW;IAK/C,yBACS,UAAsB;QAD/B,YAGC,iBAAO,SACP;QAHQ,gBAAU,GAAV,UAAU,CAAY;;IAG/B,CAAC;IAND,sBAAI,sCAAS;aAAb,cAA8B,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IAQvD,mCAAS,GAAT;QACC,OAAO,eAAe,CAAC,EAAE,CAAC;IAC3B,CAAC;IAED,iCAAO,GAAP;QACC,OAAO,cAAQ,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACtF,CAAC;IAED,iCAAO,GAAP,UAAQ,KAAU;QACjB,IAAI,CAAC,CAAC,KAAK,YAAY,eAAe,CAAC,EAAE;YACxC,OAAO,KAAK,CAAC;SACb;QAED,IAAM,mBAAmB,GAAG,KAAwB,CAAC;QAErD,6BAA6B;QAC7B,OAAO,IAAI,CAAC,SAAS,KAAK,mBAAmB,CAAC,SAAS,CAAC;IACzD,CAAC;IAED,iCAAO,GAAP;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,6CAAmB,GAAnB;QACC,OAAO,KAAK,CAAC;IACd,CAAC;IAED,qCAAW,GAAX;QACC,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,WAAW;YACnB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;SAClC,CAAC,CAAC;IACJ,CAAC;IAzCe,kBAAE,GAAG,6BAA6B,CAAC;IA0CpD,sBAAC;CAAA,AA5CD,CAAqC,oBAAW,GA4C/C;AA5CY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { EditorInput } from 'vs/workbench/common/editor';\nimport { IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { URI } from 'vs/base/common/uri';\n\nexport class ExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.extensions.input2';\n\tget extension(): IExtension { return this._extension; }\n\n\tconstructor(\n\t\tprivate _extension: IExtension,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetTypeId(): string {\n\t\treturn ExtensionsInput.ID;\n\t}\n\n\tgetName(): string {\n\t\treturn localize('extensionsInputName', \"Extension: {0}\", this.extension.displayName);\n\t}\n\n\tmatches(other: any): boolean {\n\t\tif (!(other instanceof ExtensionsInput)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst otherExtensionInput = other as ExtensionsInput;\n\n\t\t// TODO@joao is this correct?\n\t\treturn this.extension === otherExtensionInput.extension;\n\t}\n\n\tresolve(): Promise<any> {\n\t\treturn Promise.resolve(null);\n\t}\n\n\tsupportsSplitEditor(): boolean {\n\t\treturn false;\n\t}\n\n\tgetResource(): URI {\n\t\treturn URI.from({\n\t\t\tscheme: 'extension',\n\t\t\tpath: this.extension.identifier.id\n\t\t});\n\t}\n}"]}]}