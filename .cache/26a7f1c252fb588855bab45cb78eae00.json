{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/cancellation.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/cancellation.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\"], function (require, exports, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const shortcutEvent = Object.freeze(function (callback, context) {\n        const handle = setTimeout(callback.bind(context), 0);\n        return { dispose() { clearTimeout(handle); } };\n    });\n    var CancellationToken;\n    (function (CancellationToken) {\n        function isCancellationToken(thing) {\n            if (thing === CancellationToken.None || thing === CancellationToken.Cancelled) {\n                return true;\n            }\n            if (thing instanceof MutableToken) {\n                return true;\n            }\n            if (!thing || typeof thing !== 'object') {\n                return false;\n            }\n            return typeof thing.isCancellationRequested === 'boolean'\n                && typeof thing.onCancellationRequested === 'function';\n        }\n        CancellationToken.isCancellationToken = isCancellationToken;\n        CancellationToken.None = Object.freeze({\n            isCancellationRequested: false,\n            onCancellationRequested: event_1.Event.None\n        });\n        CancellationToken.Cancelled = Object.freeze({\n            isCancellationRequested: true,\n            onCancellationRequested: shortcutEvent\n        });\n    })(CancellationToken = exports.CancellationToken || (exports.CancellationToken = {}));\n    class MutableToken {\n        constructor() {\n            this._isCancelled = false;\n            this._emitter = null;\n        }\n        cancel() {\n            if (!this._isCancelled) {\n                this._isCancelled = true;\n                if (this._emitter) {\n                    this._emitter.fire(undefined);\n                    this.dispose();\n                }\n            }\n        }\n        get isCancellationRequested() {\n            return this._isCancelled;\n        }\n        get onCancellationRequested() {\n            if (this._isCancelled) {\n                return shortcutEvent;\n            }\n            if (!this._emitter) {\n                this._emitter = new event_1.Emitter();\n            }\n            return this._emitter.event;\n        }\n        dispose() {\n            if (this._emitter) {\n                this._emitter.dispose();\n                this._emitter = null;\n            }\n        }\n    }\n    class CancellationTokenSource {\n        get token() {\n            if (!this._token) {\n                // be lazy and create the token only when\n                // actually needed\n                this._token = new MutableToken();\n            }\n            return this._token;\n        }\n        cancel() {\n            if (!this._token) {\n                // save an object by returning the default\n                // cancelled token when cancellation happens\n                // before someone asks for the token\n                this._token = CancellationToken.Cancelled;\n            }\n            else if (this._token instanceof MutableToken) {\n                // actually cancel\n                this._token.cancel();\n            }\n        }\n        dispose() {\n            if (!this._token) {\n                // ensure to initialize with an empty token if we had none\n                this._token = CancellationToken.None;\n            }\n            else if (this._token instanceof MutableToken) {\n                // actually dispose\n                this._token.dispose();\n            }\n        }\n    }\n    exports.CancellationTokenSource = CancellationTokenSource;\n});\n",null]}