{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/graph.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/graph.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/types\", \"vs/base/common/collections\"], function (require, exports, types_1, collections_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function newNode(data) {\n        return {\n            data: data,\n            incoming: Object.create(null),\n            outgoing: Object.create(null)\n        };\n    }\n    class Graph {\n        constructor(_hashFn) {\n            this._hashFn = _hashFn;\n            this._nodes = Object.create(null);\n            // empty\n        }\n        roots() {\n            const ret = [];\n            collections_1.forEach(this._nodes, entry => {\n                if (types_1.isEmptyObject(entry.value.outgoing)) {\n                    ret.push(entry.value);\n                }\n            });\n            return ret;\n        }\n        insertEdge(from, to) {\n            const fromNode = this.lookupOrInsertNode(from), toNode = this.lookupOrInsertNode(to);\n            fromNode.outgoing[this._hashFn(to)] = toNode;\n            toNode.incoming[this._hashFn(from)] = fromNode;\n        }\n        removeNode(data) {\n            const key = this._hashFn(data);\n            delete this._nodes[key];\n            collections_1.forEach(this._nodes, (entry) => {\n                delete entry.value.outgoing[key];\n                delete entry.value.incoming[key];\n            });\n        }\n        lookupOrInsertNode(data) {\n            const key = this._hashFn(data);\n            let node = this._nodes[key];\n            if (!node) {\n                node = newNode(data);\n                this._nodes[key] = node;\n            }\n            return node;\n        }\n        lookup(data) {\n            return this._nodes[this._hashFn(data)];\n        }\n        isEmpty() {\n            for (const _key in this._nodes) {\n                return false;\n            }\n            return true;\n        }\n        toString() {\n            let data = [];\n            collections_1.forEach(this._nodes, entry => {\n                data.push(`${entry.key}, (incoming)[${Object.keys(entry.value.incoming).join(', ')}], (outgoing)[${Object.keys(entry.value.outgoing).join(',')}]`);\n            });\n            return data.join('\\n');\n        }\n    }\n    exports.Graph = Graph;\n});\n",null]}