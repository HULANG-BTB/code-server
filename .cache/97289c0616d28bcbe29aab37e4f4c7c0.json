{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar nls = require(\"vs/nls\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar jsonEditing_1 = require(\"vs/workbench/services/configuration/common/jsonEditing\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar backup_1 = require(\"vs/workbench/services/backup/common/backup\");\nvar backupFileService_1 = require(\"vs/workbench/services/backup/node/backupFileService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar platform_2 = require(\"vs/base/common/platform\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar labels_1 = require(\"vs/base/common/labels\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar WorkspaceEditingService = /** @class */ (function () {\n    function WorkspaceEditingService(jsonEditingService, contextService, windowService, configurationService, storageService, extensionService, backupFileService, notificationService, commandService, fileSystemService, windowsService, workspaceService, environmentService, fileDialogService, dialogService, lifecycleService, labelService) {\n        var _this = this;\n        this.jsonEditingService = jsonEditingService;\n        this.contextService = contextService;\n        this.windowService = windowService;\n        this.configurationService = configurationService;\n        this.storageService = storageService;\n        this.extensionService = extensionService;\n        this.backupFileService = backupFileService;\n        this.notificationService = notificationService;\n        this.commandService = commandService;\n        this.fileSystemService = fileSystemService;\n        this.windowsService = windowsService;\n        this.workspaceService = workspaceService;\n        this.environmentService = environmentService;\n        this.fileDialogService = fileDialogService;\n        this.dialogService = dialogService;\n        this.lifecycleService = lifecycleService;\n        this.labelService = labelService;\n        lifecycleService.onBeforeShutdown(function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var saveOperation;\n            return tslib_1.__generator(this, function (_a) {\n                saveOperation = this.saveUntitedBeforeShutdown(e.reason);\n                if (saveOperation) {\n                    e.veto(saveOperation);\n                }\n                return [2 /*return*/];\n            });\n        }); });\n    }\n    WorkspaceEditingService.prototype.saveUntitedBeforeShutdown = function (reason) {\n        var _this = this;\n        if (reason !== lifecycle_1.ShutdownReason.LOAD && reason !== lifecycle_1.ShutdownReason.CLOSE) {\n            return undefined; // only interested when window is closing or loading\n        }\n        var workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n        if (!workspaceIdentifier || !resources_1.isEqualOrParent(workspaceIdentifier.configPath, this.environmentService.untitledWorkspacesHome)) {\n            return undefined; // only care about untitled workspaces to ask for saving\n        }\n        return this.windowsService.getWindowCount().then(function (windowCount) {\n            if (reason === lifecycle_1.ShutdownReason.CLOSE && !platform_2.isMacintosh && windowCount === 1) {\n                return false; // Windows/Linux: quits when last window is closed, so do not ask then\n            }\n            var ConfirmResult;\n            (function (ConfirmResult) {\n                ConfirmResult[ConfirmResult[\"SAVE\"] = 0] = \"SAVE\";\n                ConfirmResult[ConfirmResult[\"DONT_SAVE\"] = 1] = \"DONT_SAVE\";\n                ConfirmResult[ConfirmResult[\"CANCEL\"] = 2] = \"CANCEL\";\n            })(ConfirmResult || (ConfirmResult = {}));\n            var save = { label: labels_1.mnemonicButtonLabel(nls.localize('save', \"Save\")), result: ConfirmResult.SAVE };\n            var dontSave = { label: labels_1.mnemonicButtonLabel(nls.localize('doNotSave', \"Don't Save\")), result: ConfirmResult.DONT_SAVE };\n            var cancel = { label: nls.localize('cancel', \"Cancel\"), result: ConfirmResult.CANCEL };\n            var buttons = [];\n            if (platform_2.isWindows) {\n                buttons.push(save, dontSave, cancel);\n            }\n            else if (platform_2.isLinux) {\n                buttons.push(dontSave, cancel, save);\n            }\n            else {\n                buttons.push(save, cancel, dontSave);\n            }\n            var message = nls.localize('saveWorkspaceMessage', \"Do you want to save your workspace configuration as a file?\");\n            var detail = nls.localize('saveWorkspaceDetail', \"Save your workspace if you plan to open it again.\");\n            var cancelId = buttons.indexOf(cancel);\n            return _this.dialogService.show(notification_1.Severity.Warning, message, buttons.map(function (button) { return button.label; }), { detail: detail, cancelId: cancelId }).then(function (res) {\n                switch (buttons[res].result) {\n                    // Cancel: veto unload\n                    case ConfirmResult.CANCEL:\n                        return true;\n                    // Don't Save: delete workspace\n                    case ConfirmResult.DONT_SAVE:\n                        _this.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n                        return false;\n                    // Save: save workspace, but do not veto unload\n                    case ConfirmResult.SAVE: {\n                        return _this.pickNewWorkspacePath().then(function (newWorkspacePath) {\n                            if (newWorkspacePath) {\n                                return _this.saveWorkspaceAs(workspaceIdentifier, newWorkspacePath).then(function (_) {\n                                    return _this.workspaceService.getWorkspaceIdentifier(newWorkspacePath).then(function (newWorkspaceIdentifier) {\n                                        var label = _this.labelService.getWorkspaceLabel(newWorkspaceIdentifier, { verbose: true });\n                                        _this.windowsService.addRecentlyOpened([{ label: label, workspace: newWorkspaceIdentifier }]);\n                                        _this.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n                                        return false;\n                                    });\n                                }, function () { return false; });\n                            }\n                            return true; // keep veto if no target was provided\n                        });\n                    }\n                }\n            });\n        });\n    };\n    WorkspaceEditingService.prototype.pickNewWorkspacePath = function () {\n        return this.fileDialogService.showSaveDialog({\n            saveLabel: labels_1.mnemonicButtonLabel(nls.localize('save', \"Save\")),\n            title: nls.localize('saveWorkspace', \"Save Workspace\"),\n            filters: workspaces_1.WORKSPACE_FILTER,\n            defaultUri: this.fileDialogService.defaultWorkspacePath()\n        });\n    };\n    WorkspaceEditingService.prototype.updateFolders = function (index, deleteCount, foldersToAdd, donotNotifyError) {\n        var folders = this.contextService.getWorkspace().folders;\n        var foldersToDelete = [];\n        if (typeof deleteCount === 'number') {\n            foldersToDelete = folders.slice(index, index + deleteCount).map(function (f) { return f.uri; });\n        }\n        var wantsToDelete = foldersToDelete.length > 0;\n        var wantsToAdd = Array.isArray(foldersToAdd) && foldersToAdd.length > 0;\n        if (!wantsToAdd && !wantsToDelete) {\n            return Promise.resolve(); // return early if there is nothing to do\n        }\n        // Add Folders\n        if (wantsToAdd && !wantsToDelete && Array.isArray(foldersToAdd)) {\n            return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n        }\n        // Delete Folders\n        if (wantsToDelete && !wantsToAdd) {\n            return this.removeFolders(foldersToDelete);\n        }\n        // Add & Delete Folders\n        else {\n            // if we are in single-folder state and the folder is replaced with\n            // other folders, we handle this specially and just enter workspace\n            // mode with the folders that are being added.\n            if (this.includesSingleFolderWorkspace(foldersToDelete)) {\n                return this.createAndEnterWorkspace(foldersToAdd);\n            }\n            // if we are not in workspace-state, we just add the folders\n            if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.WORKSPACE) {\n                return this.doAddFolders(foldersToAdd, index, donotNotifyError);\n            }\n            // finally, update folders within the workspace\n            return this.doUpdateFolders(foldersToAdd, foldersToDelete, index, donotNotifyError);\n        }\n    };\n    WorkspaceEditingService.prototype.doUpdateFolders = function (foldersToAdd, foldersToDelete, index, donotNotifyError) {\n        var _this = this;\n        if (donotNotifyError === void 0) { donotNotifyError = false; }\n        return this.contextService.updateFolders(foldersToAdd, foldersToDelete, index)\n            .then(function () { return null; }, function (error) { return donotNotifyError ? Promise.reject(error) : _this.handleWorkspaceConfigurationEditingError(error); });\n    };\n    WorkspaceEditingService.prototype.addFolders = function (foldersToAdd, donotNotifyError) {\n        if (donotNotifyError === void 0) { donotNotifyError = false; }\n        return this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n    };\n    WorkspaceEditingService.prototype.doAddFolders = function (foldersToAdd, index, donotNotifyError) {\n        var _this = this;\n        if (donotNotifyError === void 0) { donotNotifyError = false; }\n        var state = this.contextService.getWorkbenchState();\n        // If we are in no-workspace or single-folder workspace, adding folders has to\n        // enter a workspace.\n        if (state !== workspace_1.WorkbenchState.WORKSPACE) {\n            var newWorkspaceFolders = this.contextService.getWorkspace().folders.map(function (folder) { return ({ uri: folder.uri }); });\n            newWorkspaceFolders.splice.apply(newWorkspaceFolders, [typeof index === 'number' ? index : newWorkspaceFolders.length, 0].concat(foldersToAdd));\n            newWorkspaceFolders = arrays_1.distinct(newWorkspaceFolders, function (folder) { return resources_1.getComparisonKey(folder.uri); });\n            if (state === workspace_1.WorkbenchState.EMPTY && newWorkspaceFolders.length === 0 || state === workspace_1.WorkbenchState.FOLDER && newWorkspaceFolders.length === 1) {\n                return Promise.resolve(); // return if the operation is a no-op for the current state\n            }\n            return this.createAndEnterWorkspace(newWorkspaceFolders);\n        }\n        // Delegate addition of folders to workspace service otherwise\n        return this.contextService.addFolders(foldersToAdd, index)\n            .then(function () { return null; }, function (error) { return donotNotifyError ? Promise.reject(error) : _this.handleWorkspaceConfigurationEditingError(error); });\n    };\n    WorkspaceEditingService.prototype.removeFolders = function (foldersToRemove, donotNotifyError) {\n        var _this = this;\n        if (donotNotifyError === void 0) { donotNotifyError = false; }\n        // If we are in single-folder state and the opened folder is to be removed,\n        // we create an empty workspace and enter it.\n        if (this.includesSingleFolderWorkspace(foldersToRemove)) {\n            return this.createAndEnterWorkspace([]);\n        }\n        // Delegate removal of folders to workspace service otherwise\n        return this.contextService.removeFolders(foldersToRemove)\n            .then(function () { return null; }, function (error) { return donotNotifyError ? Promise.reject(error) : _this.handleWorkspaceConfigurationEditingError(error); });\n    };\n    WorkspaceEditingService.prototype.includesSingleFolderWorkspace = function (folders) {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n            var workspaceFolder_1 = this.contextService.getWorkspace().folders[0];\n            return (folders.some(function (folder) { return resources_1.isEqual(folder, workspaceFolder_1.uri); }));\n        }\n        return false;\n    };\n    WorkspaceEditingService.prototype.createAndEnterWorkspace = function (folders, path) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var remoteAuthority, untitledWorkspace;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (path && !this.isValidTargetWorkspacePath(path)) {\n                            return [2 /*return*/, Promise.reject(null)];\n                        }\n                        remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n                        return [4 /*yield*/, this.workspaceService.createUntitledWorkspace(folders, remoteAuthority)];\n                    case 1:\n                        untitledWorkspace = _a.sent();\n                        if (!path) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.saveWorkspaceAs(untitledWorkspace, path)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        path = untitledWorkspace.configPath;\n                        _a.label = 4;\n                    case 4: return [2 /*return*/, this.enterWorkspace(path)];\n                }\n            });\n        });\n    };\n    WorkspaceEditingService.prototype.saveAndEnterWorkspace = function (path) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var workspaceIdentifier;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isValidTargetWorkspacePath(path)) {\n                            return [2 /*return*/, Promise.reject(null)];\n                        }\n                        workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n                        if (!workspaceIdentifier) {\n                            return [2 /*return*/, Promise.reject(null)];\n                        }\n                        return [4 /*yield*/, this.saveWorkspaceAs(workspaceIdentifier, path)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, this.enterWorkspace(path)];\n                }\n            });\n        });\n    };\n    WorkspaceEditingService.prototype.isValidTargetWorkspacePath = function (path) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var windows, options;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.windowsService.getWindows()];\n                    case 1:\n                        windows = _a.sent();\n                        // Prevent overwriting a workspace that is currently opened in another window\n                        if (windows.some(function (window) { return !!window.workspace && resources_1.isEqual(window.workspace.configPath, path); })) {\n                            options = {\n                                type: 'info',\n                                buttons: [nls.localize('ok', \"OK\")],\n                                message: nls.localize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", resources_1.basename(path)),\n                                detail: nls.localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\"),\n                                noLink: true\n                            };\n                            return [2 /*return*/, this.windowService.showMessageBox(options).then(function () { return false; })];\n                        }\n                        return [2 /*return*/, Promise.resolve(true)]; // OK\n                }\n            });\n        });\n    };\n    WorkspaceEditingService.prototype.saveWorkspaceAs = function (workspace, targetConfigPathURI) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var configPathURI, raw, newRawWorkspaceContents;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        configPathURI = workspace.configPath;\n                        // Return early if target is same as source\n                        if (resources_1.isEqual(configPathURI, targetConfigPathURI)) {\n                            return [2 /*return*/, Promise.resolve(null)];\n                        }\n                        return [4 /*yield*/, this.fileSystemService.resolveContent(configPathURI)];\n                    case 1:\n                        raw = _a.sent();\n                        newRawWorkspaceContents = workspaces_1.rewriteWorkspaceFileForNewLocation(raw.value, configPathURI, targetConfigPathURI);\n                        return [4 /*yield*/, this.fileSystemService.createFile(targetConfigPathURI, newRawWorkspaceContents, { overwrite: true })];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    WorkspaceEditingService.prototype.handleWorkspaceConfigurationEditingError = function (error) {\n        switch (error.code) {\n            case jsonEditing_1.JSONEditingErrorCode.ERROR_INVALID_FILE:\n                this.onInvalidWorkspaceConfigurationFileError();\n                return Promise.resolve();\n            case jsonEditing_1.JSONEditingErrorCode.ERROR_FILE_DIRTY:\n                this.onWorkspaceConfigurationFileDirtyError();\n                return Promise.resolve();\n        }\n        this.notificationService.error(error.message);\n        return Promise.resolve();\n    };\n    WorkspaceEditingService.prototype.onInvalidWorkspaceConfigurationFileError = function () {\n        var message = nls.localize('errorInvalidTaskConfiguration', \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\");\n        this.askToOpenWorkspaceConfigurationFile(message);\n    };\n    WorkspaceEditingService.prototype.onWorkspaceConfigurationFileDirtyError = function () {\n        var message = nls.localize('errorWorkspaceConfigurationFileDirty', \"Unable to write into workspace configuration file because the file is dirty. Please save it and try again.\");\n        this.askToOpenWorkspaceConfigurationFile(message);\n    };\n    WorkspaceEditingService.prototype.askToOpenWorkspaceConfigurationFile = function (message) {\n        var _this = this;\n        this.notificationService.prompt(notification_1.Severity.Error, message, [{\n                label: nls.localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\"),\n                run: function () { return _this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile'); }\n            }]);\n    };\n    WorkspaceEditingService.prototype.enterWorkspace = function (path) {\n        var _this = this;\n        if (!!this.environmentService.extensionTestsLocationURI) {\n            return Promise.reject(new Error('Entering a new workspace is not possible in tests.'));\n        }\n        // Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n        // Stop the extension host first to give extensions most time to shutdown\n        this.extensionService.stopExtensionHost();\n        var extensionHostStarted = false;\n        var startExtensionHost = function () {\n            if (_this.windowService.getConfiguration().remoteAuthority) {\n                _this.windowService.reloadWindow(); // TODO aeschli: workaround until restarting works\n            }\n            _this.extensionService.startExtensionHost();\n            extensionHostStarted = true;\n        };\n        return this.windowService.enterWorkspace(path).then(function (result) {\n            // Migrate storage and settings if we are to enter a workspace\n            if (result) {\n                return _this.migrate(result.workspace).then(function () {\n                    // Reinitialize backup service\n                    if (_this.backupFileService instanceof backupFileService_1.BackupFileService) {\n                        _this.backupFileService.initialize(result.backupPath);\n                    }\n                    // Reinitialize configuration service\n                    var workspaceImpl = _this.contextService;\n                    return workspaceImpl.initialize(result.workspace, startExtensionHost);\n                });\n            }\n            return Promise.resolve();\n        }).then(undefined, function (error) {\n            if (!extensionHostStarted) {\n                startExtensionHost(); // start the extension host if not started\n            }\n            return Promise.reject(error);\n        });\n    };\n    WorkspaceEditingService.prototype.migrate = function (toWorkspace) {\n        var _this = this;\n        // Storage migration\n        return this.migrateStorage(toWorkspace).then(function () {\n            // Settings migration (only if we come from a folder workspace)\n            if (_this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                return _this.migrateWorkspaceSettings(toWorkspace);\n            }\n            return undefined;\n        });\n    };\n    WorkspaceEditingService.prototype.migrateStorage = function (toWorkspace) {\n        var storageImpl = this.storageService;\n        return storageImpl.migrate(toWorkspace);\n    };\n    WorkspaceEditingService.prototype.migrateWorkspaceSettings = function (toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace, function (setting) { return setting.scope === configurationRegistry_1.ConfigurationScope.WINDOW; });\n    };\n    WorkspaceEditingService.prototype.copyWorkspaceSettings = function (toWorkspace) {\n        return this.doCopyWorkspaceSettings(toWorkspace);\n    };\n    WorkspaceEditingService.prototype.doCopyWorkspaceSettings = function (toWorkspace, filter) {\n        var configurationProperties = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n        var targetWorkspaceConfiguration = {};\n        for (var _i = 0, _a = this.configurationService.keys().workspace; _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (configurationProperties[key]) {\n                if (filter && !filter(configurationProperties[key])) {\n                    continue;\n                }\n                targetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspace;\n            }\n        }\n        return this.jsonEditingService.write(toWorkspace.configPath, { key: 'settings', value: targetWorkspaceConfiguration }, true);\n    };\n    WorkspaceEditingService.prototype.getCurrentWorkspaceIdentifier = function () {\n        var workspace = this.contextService.getWorkspace();\n        if (workspace && workspace.configuration) {\n            return { id: workspace.id, configPath: workspace.configuration };\n        }\n        return undefined;\n    };\n    WorkspaceEditingService = tslib_1.__decorate([\n        tslib_1.__param(0, jsonEditing_1.IJSONEditingService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, storage_1.IStorageService),\n        tslib_1.__param(5, extensions_1.IExtensionService),\n        tslib_1.__param(6, backup_1.IBackupFileService),\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, commands_1.ICommandService),\n        tslib_1.__param(9, files_1.IFileService),\n        tslib_1.__param(10, windows_1.IWindowsService),\n        tslib_1.__param(11, workspaces_1.IWorkspacesService),\n        tslib_1.__param(12, environment_1.IEnvironmentService),\n        tslib_1.__param(13, dialogs_1.IFileDialogService),\n        tslib_1.__param(14, dialogs_1.IDialogService),\n        tslib_1.__param(15, lifecycle_1.ILifecycleService),\n        tslib_1.__param(16, label_1.ILabelService)\n    ], WorkspaceEditingService);\n    return WorkspaceEditingService;\n}());\nexports.WorkspaceEditingService = WorkspaceEditingService;\nextensions_2.registerSingleton(workspaceEditing_1.IWorkspaceEditingService, WorkspaceEditingService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/workspace/node/workspaceEditingService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IWindowService, MessageBoxOptions, IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IJSONEditingService, JSONEditingError, JSONEditingErrorCode } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWorkspaceIdentifier, IWorkspaceFolderCreationData, IWorkspacesService, rewriteWorkspaceFileForNewLocation, WORKSPACE_FILTER } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/node/configurationService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { StorageService } from 'vs/platform/storage/node/storageService';\nimport { ConfigurationScope, IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IBackupFileService } from 'vs/workbench/services/backup/common/backup';\nimport { BackupFileService } from 'vs/workbench/services/backup/node/backupFileService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { distinct } from 'vs/base/common/arrays';\nimport { isLinux, isWindows, isMacintosh } from 'vs/base/common/platform';\nimport { isEqual, basename, isEqualOrParent, getComparisonKey } from 'vs/base/common/resources';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILifecycleService, ShutdownReason } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IFileDialogService, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\nexport class WorkspaceEditingService implements IWorkspaceEditingService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService private readonly contextService: WorkspaceService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IBackupFileService private readonly backupFileService: IBackupFileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IFileService private readonly fileSystemService: IFileService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IWorkspacesService private readonly workspaceService: IWorkspacesService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILifecycleService readonly lifecycleService: ILifecycleService,\n\t\t@ILabelService readonly labelService: ILabelService\n\t) {\n\n\t\tlifecycleService.onBeforeShutdown(async e => {\n\t\t\tconst saveOperation = this.saveUntitedBeforeShutdown(e.reason);\n\t\t\tif (saveOperation) {\n\t\t\t\te.veto(saveOperation);\n\t\t\t}\n\t\t});\n\n\t}\n\n\tprivate saveUntitedBeforeShutdown(reason: ShutdownReason): Promise<boolean> | undefined {\n\t\tif (reason !== ShutdownReason.LOAD && reason !== ShutdownReason.CLOSE) {\n\t\t\treturn undefined; // only interested when window is closing or loading\n\t\t}\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier || !isEqualOrParent(workspaceIdentifier.configPath, this.environmentService.untitledWorkspacesHome)) {\n\t\t\treturn undefined; // only care about untitled workspaces to ask for saving\n\t\t}\n\n\t\treturn this.windowsService.getWindowCount().then(windowCount => {\n\t\t\tif (reason === ShutdownReason.CLOSE && !isMacintosh && windowCount === 1) {\n\t\t\t\treturn false; // Windows/Linux: quits when last window is closed, so do not ask then\n\t\t\t}\n\t\t\tenum ConfirmResult {\n\t\t\t\tSAVE,\n\t\t\t\tDONT_SAVE,\n\t\t\t\tCANCEL\n\t\t\t}\n\n\t\t\tconst save = { label: mnemonicButtonLabel(nls.localize('save', \"Save\")), result: ConfirmResult.SAVE };\n\t\t\tconst dontSave = { label: mnemonicButtonLabel(nls.localize('doNotSave', \"Don't Save\")), result: ConfirmResult.DONT_SAVE };\n\t\t\tconst cancel = { label: nls.localize('cancel', \"Cancel\"), result: ConfirmResult.CANCEL };\n\n\t\t\tconst buttons: { label: string; result: ConfirmResult; }[] = [];\n\t\t\tif (isWindows) {\n\t\t\t\tbuttons.push(save, dontSave, cancel);\n\t\t\t} else if (isLinux) {\n\t\t\t\tbuttons.push(dontSave, cancel, save);\n\t\t\t} else {\n\t\t\t\tbuttons.push(save, cancel, dontSave);\n\t\t\t}\n\n\t\t\tconst message = nls.localize('saveWorkspaceMessage', \"Do you want to save your workspace configuration as a file?\");\n\t\t\tconst detail = nls.localize('saveWorkspaceDetail', \"Save your workspace if you plan to open it again.\");\n\t\t\tconst cancelId = buttons.indexOf(cancel);\n\n\t\t\treturn this.dialogService.show(Severity.Warning, message, buttons.map(button => button.label), { detail, cancelId }).then(res => {\n\t\t\t\tswitch (buttons[res].result) {\n\n\t\t\t\t\t// Cancel: veto unload\n\t\t\t\t\tcase ConfirmResult.CANCEL:\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t// Don't Save: delete workspace\n\t\t\t\t\tcase ConfirmResult.DONT_SAVE:\n\t\t\t\t\t\tthis.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t// Save: save workspace, but do not veto unload\n\t\t\t\t\tcase ConfirmResult.SAVE: {\n\t\t\t\t\t\treturn this.pickNewWorkspacePath().then(newWorkspacePath => {\n\t\t\t\t\t\t\tif (newWorkspacePath) {\n\t\t\t\t\t\t\t\treturn this.saveWorkspaceAs(workspaceIdentifier, newWorkspacePath).then(_ => {\n\t\t\t\t\t\t\t\t\treturn this.workspaceService.getWorkspaceIdentifier(newWorkspacePath).then(newWorkspaceIdentifier => {\n\t\t\t\t\t\t\t\t\t\tconst label = this.labelService.getWorkspaceLabel(newWorkspaceIdentifier, { verbose: true });\n\t\t\t\t\t\t\t\t\t\tthis.windowsService.addRecentlyOpened([{ label, workspace: newWorkspaceIdentifier }]);\n\t\t\t\t\t\t\t\t\t\tthis.workspaceService.deleteUntitledWorkspace(workspaceIdentifier);\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}, () => false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true; // keep veto if no target was provided\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpickNewWorkspacePath(): Promise<URI | undefined> {\n\t\treturn this.fileDialogService.showSaveDialog({\n\t\t\tsaveLabel: mnemonicButtonLabel(nls.localize('save', \"Save\")),\n\t\t\ttitle: nls.localize('saveWorkspace', \"Save Workspace\"),\n\t\t\tfilters: WORKSPACE_FILTER,\n\t\t\tdefaultUri: this.fileDialogService.defaultWorkspacePath()\n\t\t});\n\t}\n\n\tupdateFolders(index: number, deleteCount?: number, foldersToAdd?: IWorkspaceFolderCreationData[], donotNotifyError?: boolean): Promise<void> {\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\n\t\tlet foldersToDelete: URI[] = [];\n\t\tif (typeof deleteCount === 'number') {\n\t\t\tfoldersToDelete = folders.slice(index, index + deleteCount).map(f => f.uri);\n\t\t}\n\n\t\tconst wantsToDelete = foldersToDelete.length > 0;\n\t\tconst wantsToAdd = Array.isArray(foldersToAdd) && foldersToAdd.length > 0;\n\n\t\tif (!wantsToAdd && !wantsToDelete) {\n\t\t\treturn Promise.resolve(); // return early if there is nothing to do\n\t\t}\n\n\t\t// Add Folders\n\t\tif (wantsToAdd && !wantsToDelete && Array.isArray(foldersToAdd)) {\n\t\t\treturn this.doAddFolders(foldersToAdd, index, donotNotifyError);\n\t\t}\n\n\t\t// Delete Folders\n\t\tif (wantsToDelete && !wantsToAdd) {\n\t\t\treturn this.removeFolders(foldersToDelete);\n\t\t}\n\n\t\t// Add & Delete Folders\n\t\telse {\n\n\t\t\t// if we are in single-folder state and the folder is replaced with\n\t\t\t// other folders, we handle this specially and just enter workspace\n\t\t\t// mode with the folders that are being added.\n\t\t\tif (this.includesSingleFolderWorkspace(foldersToDelete)) {\n\t\t\t\treturn this.createAndEnterWorkspace(foldersToAdd!);\n\t\t\t}\n\n\t\t\t// if we are not in workspace-state, we just add the folders\n\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\t\treturn this.doAddFolders(foldersToAdd!, index, donotNotifyError);\n\t\t\t}\n\n\t\t\t// finally, update folders within the workspace\n\t\t\treturn this.doUpdateFolders(foldersToAdd!, foldersToDelete, index, donotNotifyError);\n\t\t}\n\t}\n\n\tprivate doUpdateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToDelete: URI[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\treturn this.contextService.updateFolders(foldersToAdd, foldersToDelete, index)\n\t\t\t.then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n\t}\n\n\taddFolders(foldersToAdd: IWorkspaceFolderCreationData[], donotNotifyError: boolean = false): Promise<void> {\n\t\treturn this.doAddFolders(foldersToAdd, undefined, donotNotifyError);\n\t}\n\n\tprivate doAddFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number, donotNotifyError: boolean = false): Promise<void> {\n\t\tconst state = this.contextService.getWorkbenchState();\n\n\t\t// If we are in no-workspace or single-folder workspace, adding folders has to\n\t\t// enter a workspace.\n\t\tif (state !== WorkbenchState.WORKSPACE) {\n\t\t\tlet newWorkspaceFolders = this.contextService.getWorkspace().folders.map(folder => ({ uri: folder.uri } as IWorkspaceFolderCreationData));\n\t\t\tnewWorkspaceFolders.splice(typeof index === 'number' ? index : newWorkspaceFolders.length, 0, ...foldersToAdd);\n\t\t\tnewWorkspaceFolders = distinct(newWorkspaceFolders, folder => getComparisonKey(folder.uri));\n\n\t\t\tif (state === WorkbenchState.EMPTY && newWorkspaceFolders.length === 0 || state === WorkbenchState.FOLDER && newWorkspaceFolders.length === 1) {\n\t\t\t\treturn Promise.resolve(); // return if the operation is a no-op for the current state\n\t\t\t}\n\n\t\t\treturn this.createAndEnterWorkspace(newWorkspaceFolders);\n\t\t}\n\n\t\t// Delegate addition of folders to workspace service otherwise\n\t\treturn this.contextService.addFolders(foldersToAdd, index)\n\t\t\t.then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n\t}\n\n\tremoveFolders(foldersToRemove: URI[], donotNotifyError: boolean = false): Promise<void> {\n\n\t\t// If we are in single-folder state and the opened folder is to be removed,\n\t\t// we create an empty workspace and enter it.\n\t\tif (this.includesSingleFolderWorkspace(foldersToRemove)) {\n\t\t\treturn this.createAndEnterWorkspace([]);\n\t\t}\n\n\t\t// Delegate removal of folders to workspace service otherwise\n\t\treturn this.contextService.removeFolders(foldersToRemove)\n\t\t\t.then(() => null, error => donotNotifyError ? Promise.reject(error) : this.handleWorkspaceConfigurationEditingError(error));\n\t}\n\n\tprivate includesSingleFolderWorkspace(folders: URI[]): boolean {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder = this.contextService.getWorkspace().folders[0];\n\t\t\treturn (folders.some(folder => isEqual(folder, workspaceFolder.uri)));\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync createAndEnterWorkspace(folders: IWorkspaceFolderCreationData[], path?: URI): Promise<void> {\n\t\tif (path && !this.isValidTargetWorkspacePath(path)) {\n\t\t\treturn Promise.reject(null);\n\t\t}\n\t\tconst remoteAuthority = this.windowService.getConfiguration().remoteAuthority;\n\t\tconst untitledWorkspace = await this.workspaceService.createUntitledWorkspace(folders, remoteAuthority);\n\t\tif (path) {\n\t\t\tawait this.saveWorkspaceAs(untitledWorkspace, path);\n\t\t} else {\n\t\t\tpath = untitledWorkspace.configPath;\n\t\t}\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync saveAndEnterWorkspace(path: URI): Promise<void> {\n\t\tif (!this.isValidTargetWorkspacePath(path)) {\n\t\t\treturn Promise.reject(null);\n\t\t}\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier) {\n\t\t\treturn Promise.reject(null);\n\t\t}\n\t\tawait this.saveWorkspaceAs(workspaceIdentifier, path);\n\n\t\treturn this.enterWorkspace(path);\n\t}\n\n\tasync isValidTargetWorkspacePath(path: URI): Promise<boolean> {\n\n\t\tconst windows = await this.windowsService.getWindows();\n\n\t\t// Prevent overwriting a workspace that is currently opened in another window\n\t\tif (windows.some(window => !!window.workspace && isEqual(window.workspace.configPath, path))) {\n\t\t\tconst options: MessageBoxOptions = {\n\t\t\t\ttype: 'info',\n\t\t\t\tbuttons: [nls.localize('ok', \"OK\")],\n\t\t\t\tmessage: nls.localize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", basename(path)),\n\t\t\t\tdetail: nls.localize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\"),\n\t\t\t\tnoLink: true\n\t\t\t};\n\t\t\treturn this.windowService.showMessageBox(options).then(() => false);\n\t\t}\n\n\t\treturn Promise.resolve(true); // OK\n\t}\n\n\tprivate async saveWorkspaceAs(workspace: IWorkspaceIdentifier, targetConfigPathURI: URI): Promise<any> {\n\t\tconst configPathURI = workspace.configPath;\n\n\t\t// Return early if target is same as source\n\t\tif (isEqual(configPathURI, targetConfigPathURI)) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\t// Read the contents of the workspace file, update it to new location and save it.\n\t\tconst raw = await this.fileSystemService.resolveContent(configPathURI);\n\t\tconst newRawWorkspaceContents = rewriteWorkspaceFileForNewLocation(raw.value, configPathURI, targetConfigPathURI);\n\t\tawait this.fileSystemService.createFile(targetConfigPathURI, newRawWorkspaceContents, { overwrite: true });\n\t}\n\n\tprivate handleWorkspaceConfigurationEditingError(error: JSONEditingError): Promise<void> {\n\t\tswitch (error.code) {\n\t\t\tcase JSONEditingErrorCode.ERROR_INVALID_FILE:\n\t\t\t\tthis.onInvalidWorkspaceConfigurationFileError();\n\t\t\t\treturn Promise.resolve();\n\t\t\tcase JSONEditingErrorCode.ERROR_FILE_DIRTY:\n\t\t\t\tthis.onWorkspaceConfigurationFileDirtyError();\n\t\t\t\treturn Promise.resolve();\n\t\t}\n\t\tthis.notificationService.error(error.message);\n\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate onInvalidWorkspaceConfigurationFileError(): void {\n\t\tconst message = nls.localize('errorInvalidTaskConfiguration', \"Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.\");\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate onWorkspaceConfigurationFileDirtyError(): void {\n\t\tconst message = nls.localize('errorWorkspaceConfigurationFileDirty', \"Unable to write into workspace configuration file because the file is dirty. Please save it and try again.\");\n\t\tthis.askToOpenWorkspaceConfigurationFile(message);\n\t}\n\n\tprivate askToOpenWorkspaceConfigurationFile(message: string): void {\n\t\tthis.notificationService.prompt(Severity.Error, message,\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('openWorkspaceConfigurationFile', \"Open Workspace Configuration\"),\n\t\t\t\trun: () => this.commandService.executeCommand('workbench.action.openWorkspaceConfigFile')\n\t\t\t}]\n\t\t);\n\t}\n\n\tenterWorkspace(path: URI): Promise<void> {\n\t\tif (!!this.environmentService.extensionTestsLocationURI) {\n\t\t\treturn Promise.reject(new Error('Entering a new workspace is not possible in tests.'));\n\t\t}\n\n\t\t// Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n\t\t// Stop the extension host first to give extensions most time to shutdown\n\t\tthis.extensionService.stopExtensionHost();\n\t\tlet extensionHostStarted: boolean = false;\n\n\t\tconst startExtensionHost = () => {\n\t\t\tif (this.windowService.getConfiguration().remoteAuthority) {\n\t\t\t\tthis.windowService.reloadWindow(); // TODO aeschli: workaround until restarting works\n\t\t\t}\n\n\t\t\tthis.extensionService.startExtensionHost();\n\t\t\textensionHostStarted = true;\n\t\t};\n\n\t\treturn this.windowService.enterWorkspace(path).then(result => {\n\n\t\t\t// Migrate storage and settings if we are to enter a workspace\n\t\t\tif (result) {\n\t\t\t\treturn this.migrate(result.workspace).then(() => {\n\n\t\t\t\t\t// Reinitialize backup service\n\t\t\t\t\tif (this.backupFileService instanceof BackupFileService) {\n\t\t\t\t\t\tthis.backupFileService.initialize(result.backupPath!);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reinitialize configuration service\n\t\t\t\t\tconst workspaceImpl = this.contextService as WorkspaceService;\n\t\t\t\t\treturn workspaceImpl.initialize(result.workspace, startExtensionHost);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn Promise.resolve();\n\t\t}).then(undefined, error => {\n\t\t\tif (!extensionHostStarted) {\n\t\t\t\tstartExtensionHost(); // start the extension host if not started\n\t\t\t}\n\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tprivate migrate(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\n\t\t// Storage migration\n\t\treturn this.migrateStorage(toWorkspace).then(() => {\n\n\t\t\t// Settings migration (only if we come from a folder workspace)\n\t\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\treturn this.migrateWorkspaceSettings(toWorkspace);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate migrateStorage(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\tconst storageImpl = this.storageService as StorageService;\n\n\t\treturn storageImpl.migrate(toWorkspace);\n\t}\n\n\tprivate migrateWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace, setting => setting.scope === ConfigurationScope.WINDOW);\n\t}\n\n\tcopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier): Promise<void> {\n\t\treturn this.doCopyWorkspaceSettings(toWorkspace);\n\t}\n\n\tprivate doCopyWorkspaceSettings(toWorkspace: IWorkspaceIdentifier, filter?: (config: IConfigurationPropertySchema) => boolean): Promise<void> {\n\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\tconst targetWorkspaceConfiguration = {};\n\t\tfor (const key of this.configurationService.keys().workspace) {\n\t\t\tif (configurationProperties[key]) {\n\t\t\t\tif (filter && !filter(configurationProperties[key])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttargetWorkspaceConfiguration[key] = this.configurationService.inspect(key).workspace;\n\t\t\t}\n\t\t}\n\n\t\treturn this.jsonEditingService.write(toWorkspace.configPath, { key: 'settings', value: targetWorkspaceConfiguration }, true);\n\t}\n\n\tprivate getCurrentWorkspaceIdentifier(): IWorkspaceIdentifier | undefined {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (workspace && workspace.configuration) {\n\t\t\treturn { id: workspace.id, configPath: workspace.configuration };\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(IWorkspaceEditingService, WorkspaceEditingService, true);"]}]}