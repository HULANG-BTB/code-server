{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/base/common/uri\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/core/range\", \"vs/editor/common/modes\", \"vs/editor/common/services/modelService\", \"./codeActionTrigger\"], function (require, exports, arrays_1, cancellation_1, errors_1, uri_1, editorExtensions_1, range_1, modes_1, modelService_1, codeActionTrigger_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CodeActionSet {\n        static codeActionsComparator(a, b) {\n            if (arrays_1.isNonEmptyArray(a.diagnostics)) {\n                if (arrays_1.isNonEmptyArray(b.diagnostics)) {\n                    return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);\n                }\n                else {\n                    return -1;\n                }\n            }\n            else if (arrays_1.isNonEmptyArray(b.diagnostics)) {\n                return 1;\n            }\n            else {\n                return 0; // both have no diagnostics\n            }\n        }\n        constructor(actions) {\n            this.actions = arrays_1.mergeSort(actions, CodeActionSet.codeActionsComparator);\n        }\n        get hasAutoFix() {\n            return this.actions.some(fix => !!fix.kind && codeActionTrigger_1.CodeActionKind.QuickFix.contains(new codeActionTrigger_1.CodeActionKind(fix.kind)) && !!fix.isPreferred);\n        }\n    }\n    exports.CodeActionSet = CodeActionSet;\n    function getCodeActions(model, rangeOrSelection, trigger, token) {\n        const filter = trigger.filter || {};\n        const codeActionContext = {\n            only: filter.kind ? filter.kind.value : undefined,\n            trigger: trigger.type === 'manual' ? modes_1.CodeActionTrigger.Manual : modes_1.CodeActionTrigger.Automatic\n        };\n        const chainedCancellation = new cancellation_1.CancellationTokenSource();\n        token.onCancellationRequested(() => chainedCancellation.cancel());\n        const providers = getCodeActionProviders(model, filter);\n        const promises = providers.map(provider => {\n            return Promise.resolve(provider.provideCodeActions(model, rangeOrSelection, codeActionContext, chainedCancellation.token)).then(providedCodeActions => {\n                if (!Array.isArray(providedCodeActions)) {\n                    return [];\n                }\n                return providedCodeActions.filter(action => action && codeActionTrigger_1.filtersAction(filter, action));\n            }, (err) => {\n                if (errors_1.isPromiseCanceledError(err)) {\n                    throw err;\n                }\n                errors_1.onUnexpectedExternalError(err);\n                return [];\n            });\n        });\n        const listener = modes_1.CodeActionProviderRegistry.onDidChange(() => {\n            const newProviders = modes_1.CodeActionProviderRegistry.all(model);\n            if (!arrays_1.equals(newProviders, providers)) {\n                chainedCancellation.cancel();\n            }\n        });\n        return Promise.all(promises)\n            .then(arrays_1.flatten)\n            .then(actions => new CodeActionSet(actions))\n            .finally(() => {\n            listener.dispose();\n        });\n    }\n    exports.getCodeActions = getCodeActions;\n    function getCodeActionProviders(model, filter) {\n        return modes_1.CodeActionProviderRegistry.all(model)\n            // Don't include providers that we know will not return code actions of interest\n            .filter(provider => {\n            if (!provider.providedCodeActionKinds) {\n                // We don't know what type of actions this provider will return.\n                return true;\n            }\n            return provider.providedCodeActionKinds.some(kind => codeActionTrigger_1.mayIncludeActionsOfKind(filter, new codeActionTrigger_1.CodeActionKind(kind)));\n        });\n    }\n    editorExtensions_1.registerLanguageCommand('_executeCodeActionProvider', function (accessor, args) {\n        const { resource, range, kind } = args;\n        if (!(resource instanceof uri_1.URI) || !range_1.Range.isIRange(range)) {\n            throw errors_1.illegalArgument();\n        }\n        const model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (!model) {\n            throw errors_1.illegalArgument();\n        }\n        return getCodeActions(model, model.validateRange(range), { type: 'manual', filter: { includeSourceActions: true, kind: kind && kind.value ? new codeActionTrigger_1.CodeActionKind(kind.value) : undefined } }, cancellation_1.CancellationToken.None).then(actions => actions.actions);\n    });\n});\n",null]}