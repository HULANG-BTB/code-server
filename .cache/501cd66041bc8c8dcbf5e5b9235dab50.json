{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/base/common/strings\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/core/range\", \"vs/editor/common/core/selection\", \"vs/editor/common/editorContextKeys\", \"vs/editor/common/modes\", \"vs/editor/contrib/suggest/suggest\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/log/common/log\", \"./snippetSession\", \"vs/editor/browser/core/editorState\"], function (require, exports, keyCodes_1, lifecycle_1, strings_1, editorExtensions_1, range_1, selection_1, editorContextKeys_1, modes_1, suggest_1, contextkey_1, keybindingsRegistry_1, log_1, snippetSession_1, editorState_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let SnippetController2 = class SnippetController2 {\n        constructor(_editor, _logService, contextKeyService) {\n            this._editor = _editor;\n            this._logService = _logService;\n            this._snippetListener = [];\n            this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n            this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n            this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n        }\n        static get(editor) {\n            return editor.getContribution('snippetController2');\n        }\n        dispose() {\n            this._inSnippet.reset();\n            this._hasPrevTabstop.reset();\n            this._hasNextTabstop.reset();\n            lifecycle_1.dispose(this._session);\n        }\n        getId() {\n            return 'snippetController2';\n        }\n        insert(template, overwriteBefore = 0, overwriteAfter = 0, undoStopBefore = true, undoStopAfter = true, adjustWhitespace = true) {\n            // this is here to find out more about the yet-not-understood\n            // error that sometimes happens when we fail to inserted a nested\n            // snippet\n            try {\n                this._doInsert(template, overwriteBefore, overwriteAfter, undoStopBefore, undoStopAfter, adjustWhitespace);\n            }\n            catch (e) {\n                this.cancel();\n                this._logService.error(e);\n                this._logService.error('snippet_error');\n                this._logService.error('insert_template=', template);\n                this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n            }\n        }\n        _doInsert(template, overwriteBefore = 0, overwriteAfter = 0, undoStopBefore = true, undoStopAfter = true, adjustWhitespace = true) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            // don't listen while inserting the snippet\n            // as that is the inflight state causing cancelation\n            this._snippetListener = lifecycle_1.dispose(this._snippetListener);\n            if (undoStopBefore) {\n                this._editor.getModel().pushStackElement();\n            }\n            if (!this._session) {\n                this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n                this._session = new snippetSession_1.SnippetSession(this._editor, template, overwriteBefore, overwriteAfter, adjustWhitespace);\n                this._session.insert();\n            }\n            else {\n                this._session.merge(template, overwriteBefore, overwriteAfter, adjustWhitespace);\n            }\n            if (undoStopAfter) {\n                this._editor.getModel().pushStackElement();\n            }\n            this._updateState();\n            // we listen on model and selection changes. usually\n            // both events come in together and this is to prevent\n            // that we don't call _updateState twice.\n            let state;\n            let dedupedUpdateState = () => {\n                if (!state || !state.validate(this._editor)) {\n                    this._updateState();\n                    state = new editorState_1.EditorState(this._editor, editorState_1.CodeEditorStateFlag.Selection | editorState_1.CodeEditorStateFlag.Value);\n                }\n            };\n            this._snippetListener = [\n                this._editor.onDidChangeModelContent(e => {\n                    if (e.isFlush) {\n                        this.cancel();\n                    }\n                    else {\n                        setTimeout(dedupedUpdateState, 0);\n                    }\n                }),\n                this._editor.onDidChangeCursorSelection(dedupedUpdateState),\n                this._editor.onDidChangeModel(() => this.cancel()),\n            ];\n        }\n        _updateState() {\n            if (!this._session || !this._editor.hasModel()) {\n                // canceled in the meanwhile\n                return;\n            }\n            if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n                // undo until the 'before' state happened\n                // and makes use cancel snippet mode\n                return this.cancel();\n            }\n            if (!this._session.hasPlaceholder) {\n                // don't listen for selection changes and don't\n                // update context keys when the snippet is plain text\n                return this.cancel();\n            }\n            if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n                return this.cancel();\n            }\n            this._inSnippet.set(true);\n            this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n            this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n            this._handleChoice();\n        }\n        _handleChoice() {\n            if (!this._session || !this._editor.hasModel()) {\n                this._currentChoice = undefined;\n                return;\n            }\n            const { choice } = this._session;\n            if (!choice) {\n                this._currentChoice = undefined;\n                return;\n            }\n            if (this._currentChoice !== choice) {\n                this._currentChoice = choice;\n                this._editor.setSelections(this._editor.getSelections()\n                    .map(s => selection_1.Selection.fromPositions(s.getStartPosition())));\n                const [first] = choice.options;\n                suggest_1.showSimpleSuggestions(this._editor, choice.options.map((option, i) => {\n                    // let before = choice.options.slice(0, i);\n                    // let after = choice.options.slice(i);\n                    return {\n                        kind: modes_1.CompletionItemKind.Value,\n                        label: option.value,\n                        insertText: option.value,\n                        // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n                        // snippetType: 'textmate',\n                        sortText: strings_1.repeat('a', i),\n                        range: range_1.Range.fromPositions(this._editor.getPosition(), this._editor.getPosition().delta(0, first.value.length))\n                    };\n                }));\n            }\n        }\n        finish() {\n            while (this._inSnippet.get()) {\n                this.next();\n            }\n        }\n        cancel(resetSelection = false) {\n            this._inSnippet.reset();\n            this._hasPrevTabstop.reset();\n            this._hasNextTabstop.reset();\n            lifecycle_1.dispose(this._snippetListener);\n            lifecycle_1.dispose(this._session);\n            this._session = undefined;\n            this._modelVersionId = -1;\n            if (resetSelection) {\n                // reset selection to the primary cursor when being asked\n                // for. this happens when explicitly cancelling snippet mode,\n                // e.g. when pressing ESC\n                this._editor.setSelections([this._editor.getSelection()]);\n            }\n        }\n        prev() {\n            if (this._session) {\n                this._session.prev();\n            }\n            this._updateState();\n        }\n        next() {\n            if (this._session) {\n                this._session.next();\n            }\n            this._updateState();\n        }\n        isInSnippet() {\n            return Boolean(this._inSnippet.get());\n        }\n        getSessionEnclosingRange() {\n            if (this._session) {\n                return this._session.getEnclosingRange();\n            }\n            return undefined;\n        }\n    };\n    SnippetController2.InSnippetMode = new contextkey_1.RawContextKey('inSnippetMode', false);\n    SnippetController2.HasNextTabstop = new contextkey_1.RawContextKey('hasNextTabstop', false);\n    SnippetController2.HasPrevTabstop = new contextkey_1.RawContextKey('hasPrevTabstop', false);\n    SnippetController2 = __decorate([\n        __param(1, log_1.ILogService),\n        __param(2, contextkey_1.IContextKeyService)\n    ], SnippetController2);\n    exports.SnippetController2 = SnippetController2;\n    editorExtensions_1.registerEditorContribution(SnippetController2);\n    const CommandCtor = editorExtensions_1.EditorCommand.bindToContribution(SnippetController2.get);\n    editorExtensions_1.registerEditorCommand(new CommandCtor({\n        id: 'jumpToNextSnippetPlaceholder',\n        precondition: contextkey_1.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n        handler: ctrl => ctrl.next(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n            kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n            primary: keyCodes_1.KeyCode.Tab\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new CommandCtor({\n        id: 'jumpToPrevSnippetPlaceholder',\n        precondition: contextkey_1.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n        handler: ctrl => ctrl.prev(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n            kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n            primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Tab\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new CommandCtor({\n        id: 'leaveSnippet',\n        precondition: SnippetController2.InSnippetMode,\n        handler: ctrl => ctrl.cancel(true),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n            kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n            primary: keyCodes_1.KeyCode.Escape,\n            secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new CommandCtor({\n        id: 'acceptSnippet',\n        precondition: SnippetController2.InSnippetMode,\n        handler: ctrl => ctrl.finish(),\n    }));\n});\n",null]}