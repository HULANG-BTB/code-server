{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar actions_2 = require(\"vs/workbench/browser/actions\");\nvar terminalQuickOpen_1 = require(\"vs/workbench/contrib/terminal/browser/terminalQuickOpen\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar workspaceCommands_1 = require(\"vs/workbench/browser/actions/workspaceCommands\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar terminalCommands_1 = require(\"vs/workbench/contrib/terminal/common/terminalCommands\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar async_1 = require(\"vs/base/common/async\");\nvar configurationResolver_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolver\");\nvar history_1 = require(\"vs/workbench/services/history/common/history\");\nvar network_1 = require(\"vs/base/common/network\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar types_1 = require(\"vs/base/common/types\");\nexports.TERMINAL_PICKER_PREFIX = 'term ';\nfunction getCwdForSplit(configHelper, instance, folders, commandService) {\n    switch (configHelper.config.splitCwd) {\n        case 'workspaceRoot':\n            var pathPromise = Promise.resolve('');\n            if (folders !== undefined && commandService !== undefined) {\n                if (folders.length === 1) {\n                    pathPromise = Promise.resolve(folders[0].uri);\n                }\n                else if (folders.length > 1) {\n                    // Only choose a path when there's more than 1 folder\n                    var options = {\n                        placeHolder: nls.localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n                    };\n                    pathPromise = commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]).then(function (workspace) {\n                        if (!workspace) {\n                            // Don't split the instance if the workspace picker was canceled\n                            return undefined;\n                        }\n                        return Promise.resolve(workspace.uri);\n                    });\n                }\n            }\n            return pathPromise;\n        case 'initial':\n            return instance.getInitialCwd();\n        case 'inherited':\n            return instance.getCwd();\n    }\n}\nvar ToggleTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleTerminalAction, _super);\n    function ToggleTerminalAction(id, label, panelService, layoutService, terminalService) {\n        var _this = _super.call(this, id, label, terminal_1.TERMINAL_PANEL_ID, panelService, layoutService) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ToggleTerminalAction.prototype.run = function (event) {\n        if (this.terminalService.terminalInstances.length === 0) {\n            // If there is not yet an instance attempt to create it here so that we can suggest a\n            // new shell on Windows (and not do so when the panel is restored on reload).\n            var newTerminalInstance_1 = this.terminalService.createTerminal(undefined, true);\n            var toDispose_1 = newTerminalInstance_1.onProcessIdReady(function () {\n                newTerminalInstance_1.focus();\n                toDispose_1.dispose();\n            });\n        }\n        return _super.prototype.run.call(this);\n    };\n    ToggleTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE;\n    ToggleTerminalAction.LABEL = nls.localize('workbench.action.terminal.toggleTerminal', \"Toggle Integrated Terminal\");\n    ToggleTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(4, terminal_1.ITerminalService)\n    ], ToggleTerminalAction);\n    return ToggleTerminalAction;\n}(panel_1.TogglePanelAction));\nexports.ToggleTerminalAction = ToggleTerminalAction;\nvar KillTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(KillTerminalAction, _super);\n    function KillTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, 'terminal-action kill') || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    KillTerminalAction.prototype.run = function (event) {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.dispose(true);\n            if (this.terminalService.terminalInstances.length > 0) {\n                this.terminalService.showPanel(true);\n            }\n        }\n        return Promise.resolve(undefined);\n    };\n    KillTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.KILL;\n    KillTerminalAction.LABEL = nls.localize('workbench.action.terminal.kill', \"Kill the Active Terminal Instance\");\n    KillTerminalAction.PANEL_LABEL = nls.localize('workbench.action.terminal.kill.short', \"Kill Terminal\");\n    KillTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], KillTerminalAction);\n    return KillTerminalAction;\n}(actions_1.Action));\nexports.KillTerminalAction = KillTerminalAction;\nvar QuickKillTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickKillTerminalAction, _super);\n    function QuickKillTerminalAction(id, label, terminalEntry, quickOpenService) {\n        var _this = _super.call(this, id, label, 'terminal-action kill') || this;\n        _this.terminalEntry = terminalEntry;\n        _this.quickOpenService = quickOpenService;\n        return _this;\n    }\n    QuickKillTerminalAction.prototype.run = function (event) {\n        var _this = this;\n        var instance = this.terminalEntry.instance;\n        if (instance) {\n            instance.dispose(true);\n        }\n        return Promise.resolve(async_1.timeout(50)).then(function (result) { return _this.quickOpenService.show(exports.TERMINAL_PICKER_PREFIX, undefined); });\n    };\n    QuickKillTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.QUICK_KILL;\n    QuickKillTerminalAction.LABEL = nls.localize('workbench.action.terminal.quickKill', \"Kill Terminal Instance\");\n    QuickKillTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(3, quickOpen_1.IQuickOpenService)\n    ], QuickKillTerminalAction);\n    return QuickKillTerminalAction;\n}(actions_1.Action));\nexports.QuickKillTerminalAction = QuickKillTerminalAction;\n/**\n * Copies the terminal selection. Note that since the command palette takes focus from the terminal,\n * this cannot be triggered through the command palette.\n */\nvar CopyTerminalSelectionAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyTerminalSelectionAction, _super);\n    function CopyTerminalSelectionAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    CopyTerminalSelectionAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.copySelection();\n        }\n        return Promise.resolve(undefined);\n    };\n    CopyTerminalSelectionAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.COPY_SELECTION;\n    CopyTerminalSelectionAction.LABEL = nls.localize('workbench.action.terminal.copySelection', \"Copy Selection\");\n    CopyTerminalSelectionAction.SHORT_LABEL = nls.localize('workbench.action.terminal.copySelection.short', \"Copy\");\n    CopyTerminalSelectionAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], CopyTerminalSelectionAction);\n    return CopyTerminalSelectionAction;\n}(actions_1.Action));\nexports.CopyTerminalSelectionAction = CopyTerminalSelectionAction;\nvar SelectAllTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectAllTerminalAction, _super);\n    function SelectAllTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectAllTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.selectAll();\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectAllTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_ALL;\n    SelectAllTerminalAction.LABEL = nls.localize('workbench.action.terminal.selectAll', \"Select All\");\n    SelectAllTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectAllTerminalAction);\n    return SelectAllTerminalAction;\n}(actions_1.Action));\nexports.SelectAllTerminalAction = SelectAllTerminalAction;\nvar BaseSendTextTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseSendTextTerminalAction, _super);\n    function BaseSendTextTerminalAction(id, label, _text, _terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._text = _text;\n        _this._terminalService = _terminalService;\n        return _this;\n    }\n    BaseSendTextTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this._terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.sendText(this._text, false);\n        }\n        return Promise.resolve(undefined);\n    };\n    BaseSendTextTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(3, terminal_1.ITerminalService)\n    ], BaseSendTextTerminalAction);\n    return BaseSendTextTerminalAction;\n}(actions_1.Action));\nexports.BaseSendTextTerminalAction = BaseSendTextTerminalAction;\nvar DeleteWordLeftTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordLeftTerminalAction, _super);\n    function DeleteWordLeftTerminalAction(id, label, terminalService) {\n        // Send ctrl+W\n        return _super.call(this, id, label, String.fromCharCode('W'.charCodeAt(0) - 64), terminalService) || this;\n    }\n    DeleteWordLeftTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_WORD_LEFT;\n    DeleteWordLeftTerminalAction.LABEL = nls.localize('workbench.action.terminal.deleteWordLeft', \"Delete Word Left\");\n    DeleteWordLeftTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], DeleteWordLeftTerminalAction);\n    return DeleteWordLeftTerminalAction;\n}(BaseSendTextTerminalAction));\nexports.DeleteWordLeftTerminalAction = DeleteWordLeftTerminalAction;\nvar DeleteWordRightTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordRightTerminalAction, _super);\n    function DeleteWordRightTerminalAction(id, label, terminalService) {\n        // Send alt+D\n        return _super.call(this, id, label, '\\x1bD', terminalService) || this;\n    }\n    DeleteWordRightTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_WORD_RIGHT;\n    DeleteWordRightTerminalAction.LABEL = nls.localize('workbench.action.terminal.deleteWordRight', \"Delete Word Right\");\n    DeleteWordRightTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], DeleteWordRightTerminalAction);\n    return DeleteWordRightTerminalAction;\n}(BaseSendTextTerminalAction));\nexports.DeleteWordRightTerminalAction = DeleteWordRightTerminalAction;\nvar DeleteToLineStartTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteToLineStartTerminalAction, _super);\n    function DeleteToLineStartTerminalAction(id, label, terminalService) {\n        // Send ctrl+u\n        return _super.call(this, id, label, '\\u0015', terminalService) || this;\n    }\n    DeleteToLineStartTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.DELETE_TO_LINE_START;\n    DeleteToLineStartTerminalAction.LABEL = nls.localize('workbench.action.terminal.deleteToLineStart', \"Delete to Line Start\");\n    DeleteToLineStartTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], DeleteToLineStartTerminalAction);\n    return DeleteToLineStartTerminalAction;\n}(BaseSendTextTerminalAction));\nexports.DeleteToLineStartTerminalAction = DeleteToLineStartTerminalAction;\nvar MoveToLineStartTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveToLineStartTerminalAction, _super);\n    function MoveToLineStartTerminalAction(id, label, terminalService) {\n        // Send ctrl+A\n        return _super.call(this, id, label, String.fromCharCode('A'.charCodeAt(0) - 64), terminalService) || this;\n    }\n    MoveToLineStartTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.MOVE_TO_LINE_START;\n    MoveToLineStartTerminalAction.LABEL = nls.localize('workbench.action.terminal.moveToLineStart', \"Move To Line Start\");\n    MoveToLineStartTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], MoveToLineStartTerminalAction);\n    return MoveToLineStartTerminalAction;\n}(BaseSendTextTerminalAction));\nexports.MoveToLineStartTerminalAction = MoveToLineStartTerminalAction;\nvar MoveToLineEndTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveToLineEndTerminalAction, _super);\n    function MoveToLineEndTerminalAction(id, label, terminalService) {\n        // Send ctrl+E\n        return _super.call(this, id, label, String.fromCharCode('E'.charCodeAt(0) - 64), terminalService) || this;\n    }\n    MoveToLineEndTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.MOVE_TO_LINE_END;\n    MoveToLineEndTerminalAction.LABEL = nls.localize('workbench.action.terminal.moveToLineEnd', \"Move To Line End\");\n    MoveToLineEndTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], MoveToLineEndTerminalAction);\n    return MoveToLineEndTerminalAction;\n}(BaseSendTextTerminalAction));\nexports.MoveToLineEndTerminalAction = MoveToLineEndTerminalAction;\nvar SendSequenceTerminalCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(SendSequenceTerminalCommand, _super);\n    function SendSequenceTerminalCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SendSequenceTerminalCommand.prototype.runCommand = function (accessor, args) {\n        var terminalInstance = accessor.get(terminal_1.ITerminalService).getActiveInstance();\n        if (!terminalInstance) {\n            return;\n        }\n        var configurationResolverService = accessor.get(configurationResolver_1.IConfigurationResolverService);\n        var workspaceContextService = accessor.get(workspace_1.IWorkspaceContextService);\n        var historyService = accessor.get(history_1.IHistoryService);\n        var activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(network_1.Schemas.file);\n        var lastActiveWorkspaceRoot = activeWorkspaceRootUri ? types_1.withNullAsUndefined(workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;\n        var resolvedText = configurationResolverService.resolve(lastActiveWorkspaceRoot, args.text);\n        terminalInstance.sendText(resolvedText, false);\n    };\n    SendSequenceTerminalCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SEND_SEQUENCE;\n    SendSequenceTerminalCommand.LABEL = nls.localize('workbench.action.terminal.sendSequence', \"Send Custom Sequence To Terminal\");\n    return SendSequenceTerminalCommand;\n}(editorExtensions_1.Command));\nexports.SendSequenceTerminalCommand = SendSequenceTerminalCommand;\nvar CreateNewTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CreateNewTerminalAction, _super);\n    function CreateNewTerminalAction(id, label, terminalService, commandService, workspaceContextService) {\n        var _this = _super.call(this, id, label, 'terminal-action new') || this;\n        _this.terminalService = terminalService;\n        _this.commandService = commandService;\n        _this.workspaceContextService = workspaceContextService;\n        return _this;\n    }\n    CreateNewTerminalAction.prototype.run = function (event) {\n        var _this = this;\n        var folders = this.workspaceContextService.getWorkspace().folders;\n        if (event instanceof MouseEvent && (event.altKey || event.ctrlKey)) {\n            var activeInstance_1 = this.terminalService.getActiveInstance();\n            if (activeInstance_1) {\n                return getCwdForSplit(this.terminalService.configHelper, activeInstance_1).then(function (cwd) {\n                    _this.terminalService.splitInstance(activeInstance_1, { cwd: cwd });\n                    return Promise.resolve(null);\n                });\n            }\n        }\n        var instancePromise;\n        if (folders.length <= 1) {\n            // Allow terminal service to handle the path when there is only a\n            // single root\n            instancePromise = Promise.resolve(this.terminalService.createTerminal(undefined, true));\n        }\n        else {\n            var options = {\n                placeHolder: nls.localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n            };\n            instancePromise = this.commandService.executeCommand(workspaceCommands_1.PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]).then(function (workspace) {\n                if (!workspace) {\n                    // Don't create the instance if the workspace picker was canceled\n                    return null;\n                }\n                return _this.terminalService.createTerminal({ cwd: workspace.uri.fsPath }, true);\n            });\n        }\n        return instancePromise.then(function (instance) {\n            if (!instance) {\n                return Promise.resolve(undefined);\n            }\n            _this.terminalService.setActiveInstance(instance);\n            return _this.terminalService.showPanel(true);\n        });\n    };\n    CreateNewTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.NEW;\n    CreateNewTerminalAction.LABEL = nls.localize('workbench.action.terminal.new', \"Create New Integrated Terminal\");\n    CreateNewTerminalAction.SHORT_LABEL = nls.localize('workbench.action.terminal.new.short', \"New Terminal\");\n    CreateNewTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService),\n        tslib_1.__param(3, commands_1.ICommandService),\n        tslib_1.__param(4, workspace_1.IWorkspaceContextService)\n    ], CreateNewTerminalAction);\n    return CreateNewTerminalAction;\n}(actions_1.Action));\nexports.CreateNewTerminalAction = CreateNewTerminalAction;\nvar CreateNewInActiveWorkspaceTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CreateNewInActiveWorkspaceTerminalAction, _super);\n    function CreateNewInActiveWorkspaceTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    CreateNewInActiveWorkspaceTerminalAction.prototype.run = function (event) {\n        var instance = this.terminalService.createTerminal(undefined, true);\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        this.terminalService.setActiveInstance(instance);\n        return this.terminalService.showPanel(true);\n    };\n    CreateNewInActiveWorkspaceTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.NEW_IN_ACTIVE_WORKSPACE;\n    CreateNewInActiveWorkspaceTerminalAction.LABEL = nls.localize('workbench.action.terminal.newInActiveWorkspace', \"Create New Integrated Terminal (In Active Workspace)\");\n    CreateNewInActiveWorkspaceTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], CreateNewInActiveWorkspaceTerminalAction);\n    return CreateNewInActiveWorkspaceTerminalAction;\n}(actions_1.Action));\nexports.CreateNewInActiveWorkspaceTerminalAction = CreateNewInActiveWorkspaceTerminalAction;\nvar SplitTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SplitTerminalAction, _super);\n    function SplitTerminalAction(id, label, _terminalService, commandService, workspaceContextService) {\n        var _this = _super.call(this, id, label, 'terminal-action split') || this;\n        _this._terminalService = _terminalService;\n        _this.commandService = commandService;\n        _this.workspaceContextService = workspaceContextService;\n        return _this;\n    }\n    SplitTerminalAction.prototype.run = function (event) {\n        var _this = this;\n        var instance = this._terminalService.getActiveInstance();\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        return getCwdForSplit(this._terminalService.configHelper, instance, this.workspaceContextService.getWorkspace().folders, this.commandService).then(function (cwd) {\n            if (cwd || (cwd === '')) {\n                _this._terminalService.splitInstance(instance, { cwd: cwd });\n                return _this._terminalService.showPanel(true);\n            }\n            else {\n                return undefined;\n            }\n        });\n    };\n    SplitTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT;\n    SplitTerminalAction.LABEL = nls.localize('workbench.action.terminal.split', \"Split Terminal\");\n    SplitTerminalAction.SHORT_LABEL = nls.localize('workbench.action.terminal.split.short', \"Split\");\n    SplitTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService),\n        tslib_1.__param(3, commands_1.ICommandService),\n        tslib_1.__param(4, workspace_1.IWorkspaceContextService)\n    ], SplitTerminalAction);\n    return SplitTerminalAction;\n}(actions_1.Action));\nexports.SplitTerminalAction = SplitTerminalAction;\nvar SplitInActiveWorkspaceTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SplitInActiveWorkspaceTerminalAction, _super);\n    function SplitInActiveWorkspaceTerminalAction(id, label, _terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._terminalService = _terminalService;\n        return _this;\n    }\n    SplitInActiveWorkspaceTerminalAction.prototype.run = function (event) {\n        var _this = this;\n        var instance = this._terminalService.getActiveInstance();\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        return getCwdForSplit(this._terminalService.configHelper, instance).then(function (cwd) {\n            _this._terminalService.splitInstance(instance, { cwd: cwd });\n            return _this._terminalService.showPanel(true);\n        });\n    };\n    SplitInActiveWorkspaceTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT_IN_ACTIVE_WORKSPACE;\n    SplitInActiveWorkspaceTerminalAction.LABEL = nls.localize('workbench.action.terminal.splitInActiveWorkspace', \"Split Terminal (In Active Workspace)\");\n    SplitInActiveWorkspaceTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SplitInActiveWorkspaceTerminalAction);\n    return SplitInActiveWorkspaceTerminalAction;\n}(actions_1.Action));\nexports.SplitInActiveWorkspaceTerminalAction = SplitInActiveWorkspaceTerminalAction;\nvar FocusPreviousPaneTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusPreviousPaneTerminalAction, _super);\n    function FocusPreviousPaneTerminalAction(id, label, _terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._terminalService = _terminalService;\n        return _this;\n    }\n    FocusPreviousPaneTerminalAction.prototype.run = function (event) {\n        var tab = this._terminalService.getActiveTab();\n        if (!tab) {\n            return Promise.resolve(undefined);\n        }\n        tab.focusPreviousPane();\n        return this._terminalService.showPanel(true);\n    };\n    FocusPreviousPaneTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_PREVIOUS_PANE;\n    FocusPreviousPaneTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusPreviousPane', \"Focus Previous Pane\");\n    FocusPreviousPaneTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusPreviousPaneTerminalAction);\n    return FocusPreviousPaneTerminalAction;\n}(actions_1.Action));\nexports.FocusPreviousPaneTerminalAction = FocusPreviousPaneTerminalAction;\nvar FocusNextPaneTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusNextPaneTerminalAction, _super);\n    function FocusNextPaneTerminalAction(id, label, _terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._terminalService = _terminalService;\n        return _this;\n    }\n    FocusNextPaneTerminalAction.prototype.run = function (event) {\n        var tab = this._terminalService.getActiveTab();\n        if (!tab) {\n            return Promise.resolve(undefined);\n        }\n        tab.focusNextPane();\n        return this._terminalService.showPanel(true);\n    };\n    FocusNextPaneTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_NEXT_PANE;\n    FocusNextPaneTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusNextPane', \"Focus Next Pane\");\n    FocusNextPaneTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusNextPaneTerminalAction);\n    return FocusNextPaneTerminalAction;\n}(actions_1.Action));\nexports.FocusNextPaneTerminalAction = FocusNextPaneTerminalAction;\nvar BaseFocusDirectionTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseFocusDirectionTerminalAction, _super);\n    function BaseFocusDirectionTerminalAction(id, label, _direction, _terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._direction = _direction;\n        _this._terminalService = _terminalService;\n        return _this;\n    }\n    BaseFocusDirectionTerminalAction.prototype.run = function (event) {\n        var tab = this._terminalService.getActiveTab();\n        if (tab) {\n            tab.resizePane(this._direction);\n        }\n        return Promise.resolve(undefined);\n    };\n    BaseFocusDirectionTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(3, terminal_1.ITerminalService)\n    ], BaseFocusDirectionTerminalAction);\n    return BaseFocusDirectionTerminalAction;\n}(actions_1.Action));\nexports.BaseFocusDirectionTerminalAction = BaseFocusDirectionTerminalAction;\nvar ResizePaneLeftTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizePaneLeftTerminalAction, _super);\n    function ResizePaneLeftTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, terminal_1.Direction.Left, terminalService) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ResizePaneLeftTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_LEFT;\n    ResizePaneLeftTerminalAction.LABEL = nls.localize('workbench.action.terminal.resizePaneLeft', \"Resize Pane Left\");\n    ResizePaneLeftTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ResizePaneLeftTerminalAction);\n    return ResizePaneLeftTerminalAction;\n}(BaseFocusDirectionTerminalAction));\nexports.ResizePaneLeftTerminalAction = ResizePaneLeftTerminalAction;\nvar ResizePaneRightTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizePaneRightTerminalAction, _super);\n    function ResizePaneRightTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, terminal_1.Direction.Right, terminalService) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ResizePaneRightTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_RIGHT;\n    ResizePaneRightTerminalAction.LABEL = nls.localize('workbench.action.terminal.resizePaneRight', \"Resize Pane Right\");\n    ResizePaneRightTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ResizePaneRightTerminalAction);\n    return ResizePaneRightTerminalAction;\n}(BaseFocusDirectionTerminalAction));\nexports.ResizePaneRightTerminalAction = ResizePaneRightTerminalAction;\nvar ResizePaneUpTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizePaneUpTerminalAction, _super);\n    function ResizePaneUpTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, terminal_1.Direction.Up, terminalService) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ResizePaneUpTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_UP;\n    ResizePaneUpTerminalAction.LABEL = nls.localize('workbench.action.terminal.resizePaneUp', \"Resize Pane Up\");\n    ResizePaneUpTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ResizePaneUpTerminalAction);\n    return ResizePaneUpTerminalAction;\n}(BaseFocusDirectionTerminalAction));\nexports.ResizePaneUpTerminalAction = ResizePaneUpTerminalAction;\nvar ResizePaneDownTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ResizePaneDownTerminalAction, _super);\n    function ResizePaneDownTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, terminal_1.Direction.Down, terminalService) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ResizePaneDownTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RESIZE_PANE_DOWN;\n    ResizePaneDownTerminalAction.LABEL = nls.localize('workbench.action.terminal.resizePaneDown', \"Resize Pane Down\");\n    ResizePaneDownTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ResizePaneDownTerminalAction);\n    return ResizePaneDownTerminalAction;\n}(BaseFocusDirectionTerminalAction));\nexports.ResizePaneDownTerminalAction = ResizePaneDownTerminalAction;\nvar FocusActiveTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusActiveTerminalAction, _super);\n    function FocusActiveTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FocusActiveTerminalAction.prototype.run = function (event) {\n        var instance = this.terminalService.getActiveOrCreateInstance(true);\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        this.terminalService.setActiveInstance(instance);\n        return this.terminalService.showPanel(true);\n    };\n    FocusActiveTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS;\n    FocusActiveTerminalAction.LABEL = nls.localize('workbench.action.terminal.focus', \"Focus Terminal\");\n    FocusActiveTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusActiveTerminalAction);\n    return FocusActiveTerminalAction;\n}(actions_1.Action));\nexports.FocusActiveTerminalAction = FocusActiveTerminalAction;\nvar FocusNextTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusNextTerminalAction, _super);\n    function FocusNextTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FocusNextTerminalAction.prototype.run = function (event) {\n        this.terminalService.setActiveTabToNext();\n        return this.terminalService.showPanel(true);\n    };\n    FocusNextTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_NEXT;\n    FocusNextTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusNext', \"Focus Next Terminal\");\n    FocusNextTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusNextTerminalAction);\n    return FocusNextTerminalAction;\n}(actions_1.Action));\nexports.FocusNextTerminalAction = FocusNextTerminalAction;\nvar FocusPreviousTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusPreviousTerminalAction, _super);\n    function FocusPreviousTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FocusPreviousTerminalAction.prototype.run = function (event) {\n        this.terminalService.setActiveTabToPrevious();\n        return this.terminalService.showPanel(true);\n    };\n    FocusPreviousTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FOCUS_PREVIOUS;\n    FocusPreviousTerminalAction.LABEL = nls.localize('workbench.action.terminal.focusPrevious', \"Focus Previous Terminal\");\n    FocusPreviousTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusPreviousTerminalAction);\n    return FocusPreviousTerminalAction;\n}(actions_1.Action));\nexports.FocusPreviousTerminalAction = FocusPreviousTerminalAction;\nvar TerminalPasteAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalPasteAction, _super);\n    function TerminalPasteAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    TerminalPasteAction.prototype.run = function (event) {\n        var instance = this.terminalService.getActiveOrCreateInstance();\n        if (instance) {\n            instance.paste();\n        }\n        return Promise.resolve(undefined);\n    };\n    TerminalPasteAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.PASTE;\n    TerminalPasteAction.LABEL = nls.localize('workbench.action.terminal.paste', \"Paste into Active Terminal\");\n    TerminalPasteAction.SHORT_LABEL = nls.localize('workbench.action.terminal.paste.short', \"Paste\");\n    TerminalPasteAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], TerminalPasteAction);\n    return TerminalPasteAction;\n}(actions_1.Action));\nexports.TerminalPasteAction = TerminalPasteAction;\nvar SelectDefaultShellWindowsTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectDefaultShellWindowsTerminalAction, _super);\n    function SelectDefaultShellWindowsTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectDefaultShellWindowsTerminalAction.prototype.run = function (event) {\n        return this.terminalService.selectDefaultWindowsShell();\n    };\n    SelectDefaultShellWindowsTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_DEFAULT_SHELL;\n    SelectDefaultShellWindowsTerminalAction.LABEL = nls.localize('workbench.action.terminal.selectDefaultShell', \"Select Default Shell\");\n    SelectDefaultShellWindowsTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectDefaultShellWindowsTerminalAction);\n    return SelectDefaultShellWindowsTerminalAction;\n}(actions_1.Action));\nexports.SelectDefaultShellWindowsTerminalAction = SelectDefaultShellWindowsTerminalAction;\nvar RunSelectedTextInTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RunSelectedTextInTerminalAction, _super);\n    function RunSelectedTextInTerminalAction(id, label, codeEditorService, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.codeEditorService = codeEditorService;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    RunSelectedTextInTerminalAction.prototype.run = function (event) {\n        var instance = this.terminalService.getActiveOrCreateInstance();\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        var editor = this.codeEditorService.getFocusedCodeEditor();\n        if (!editor || !editor.hasModel()) {\n            return Promise.resolve(undefined);\n        }\n        var selection = editor.getSelection();\n        var text;\n        if (selection.isEmpty()) {\n            text = editor.getModel().getLineContent(selection.selectionStartLineNumber).trim();\n        }\n        else {\n            var endOfLinePreference = platform_1.isWindows ? model_1.EndOfLinePreference.LF : model_1.EndOfLinePreference.CRLF;\n            text = editor.getModel().getValueInRange(selection, endOfLinePreference);\n        }\n        instance.sendText(text, true);\n        return this.terminalService.showPanel();\n    };\n    RunSelectedTextInTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT;\n    RunSelectedTextInTerminalAction.LABEL = nls.localize('workbench.action.terminal.runSelectedText', \"Run Selected Text In Active Terminal\");\n    RunSelectedTextInTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(3, terminal_1.ITerminalService)\n    ], RunSelectedTextInTerminalAction);\n    return RunSelectedTextInTerminalAction;\n}(actions_1.Action));\nexports.RunSelectedTextInTerminalAction = RunSelectedTextInTerminalAction;\nvar RunActiveFileInTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RunActiveFileInTerminalAction, _super);\n    function RunActiveFileInTerminalAction(id, label, codeEditorService, terminalService, notificationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.codeEditorService = codeEditorService;\n        _this.terminalService = terminalService;\n        _this.notificationService = notificationService;\n        return _this;\n    }\n    RunActiveFileInTerminalAction.prototype.run = function (event) {\n        var _this = this;\n        var instance = this.terminalService.getActiveOrCreateInstance();\n        if (!instance) {\n            return Promise.resolve(undefined);\n        }\n        var editor = this.codeEditorService.getActiveCodeEditor();\n        if (!editor || !editor.hasModel()) {\n            return Promise.resolve(undefined);\n        }\n        var uri = editor.getModel().uri;\n        if (uri.scheme !== 'file') {\n            this.notificationService.warn(nls.localize('workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal'));\n            return Promise.resolve(undefined);\n        }\n        return this.terminalService.preparePathForTerminalAsync(uri.fsPath, instance.shellLaunchConfig.executable, instance.title).then(function (path) {\n            instance.sendText(path, true);\n            return _this.terminalService.showPanel();\n        });\n    };\n    RunActiveFileInTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE;\n    RunActiveFileInTerminalAction.LABEL = nls.localize('workbench.action.terminal.runActiveFile', \"Run Active File In Active Terminal\");\n    RunActiveFileInTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(3, terminal_1.ITerminalService),\n        tslib_1.__param(4, notification_1.INotificationService)\n    ], RunActiveFileInTerminalAction);\n    return RunActiveFileInTerminalAction;\n}(actions_1.Action));\nexports.RunActiveFileInTerminalAction = RunActiveFileInTerminalAction;\nvar SwitchTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchTerminalAction, _super);\n    function SwitchTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label, 'terminal-action switch-terminal') || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SwitchTerminalAction.prototype.run = function (item) {\n        if (!item || !item.split) {\n            return Promise.resolve(null);\n        }\n        var selectedTabIndex = parseInt(item.split(':')[0], 10) - 1;\n        this.terminalService.setActiveTabByIndex(selectedTabIndex);\n        return this.terminalService.showPanel(true);\n    };\n    SwitchTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SWITCH_TERMINAL;\n    SwitchTerminalAction.LABEL = nls.localize('workbench.action.terminal.switchTerminal', \"Switch Terminal\");\n    SwitchTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SwitchTerminalAction);\n    return SwitchTerminalAction;\n}(actions_1.Action));\nexports.SwitchTerminalAction = SwitchTerminalAction;\nvar SwitchTerminalActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchTerminalActionItem, _super);\n    function SwitchTerminalActionItem(action, terminalService, themeService, contextViewService) {\n        var _this = _super.call(this, null, action, terminalService.getTabLabels().map(function (label) { return ({ text: label }); }), terminalService.activeTabIndex, contextViewService, { ariaLabel: nls.localize('terminals', 'Open Terminals.') }) || this;\n        _this.terminalService = terminalService;\n        _this.toDispose.push(terminalService.onInstancesChanged(_this._updateItems, _this));\n        _this.toDispose.push(terminalService.onActiveTabChanged(_this._updateItems, _this));\n        _this.toDispose.push(terminalService.onInstanceTitleChanged(_this._updateItems, _this));\n        _this.toDispose.push(styler_1.attachSelectBoxStyler(_this.selectBox, themeService));\n        return _this;\n    }\n    SwitchTerminalActionItem.prototype._updateItems = function () {\n        this.setOptions(this.terminalService.getTabLabels().map(function (label) { return ({ text: label }); }), this.terminalService.activeTabIndex);\n    };\n    SwitchTerminalActionItem = tslib_1.__decorate([\n        tslib_1.__param(1, terminal_1.ITerminalService),\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, contextView_1.IContextViewService)\n    ], SwitchTerminalActionItem);\n    return SwitchTerminalActionItem;\n}(actionbar_1.SelectActionItem));\nexports.SwitchTerminalActionItem = SwitchTerminalActionItem;\nvar ScrollDownTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollDownTerminalAction, _super);\n    function ScrollDownTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollDownTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollDownLine();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollDownTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_DOWN_LINE;\n    ScrollDownTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollDown', \"Scroll Down (Line)\");\n    ScrollDownTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollDownTerminalAction);\n    return ScrollDownTerminalAction;\n}(actions_1.Action));\nexports.ScrollDownTerminalAction = ScrollDownTerminalAction;\nvar ScrollDownPageTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollDownPageTerminalAction, _super);\n    function ScrollDownPageTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollDownPageTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollDownPage();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollDownPageTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_DOWN_PAGE;\n    ScrollDownPageTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollDownPage', \"Scroll Down (Page)\");\n    ScrollDownPageTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollDownPageTerminalAction);\n    return ScrollDownPageTerminalAction;\n}(actions_1.Action));\nexports.ScrollDownPageTerminalAction = ScrollDownPageTerminalAction;\nvar ScrollToBottomTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollToBottomTerminalAction, _super);\n    function ScrollToBottomTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollToBottomTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollToBottom();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollToBottomTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_BOTTOM;\n    ScrollToBottomTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollToBottom', \"Scroll to Bottom\");\n    ScrollToBottomTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollToBottomTerminalAction);\n    return ScrollToBottomTerminalAction;\n}(actions_1.Action));\nexports.ScrollToBottomTerminalAction = ScrollToBottomTerminalAction;\nvar ScrollUpTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollUpTerminalAction, _super);\n    function ScrollUpTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollUpTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollUpLine();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollUpTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_UP_LINE;\n    ScrollUpTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollUp', \"Scroll Up (Line)\");\n    ScrollUpTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollUpTerminalAction);\n    return ScrollUpTerminalAction;\n}(actions_1.Action));\nexports.ScrollUpTerminalAction = ScrollUpTerminalAction;\nvar ScrollUpPageTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollUpPageTerminalAction, _super);\n    function ScrollUpPageTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollUpPageTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollUpPage();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollUpPageTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_UP_PAGE;\n    ScrollUpPageTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollUpPage', \"Scroll Up (Page)\");\n    ScrollUpPageTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollUpPageTerminalAction);\n    return ScrollUpPageTerminalAction;\n}(actions_1.Action));\nexports.ScrollUpPageTerminalAction = ScrollUpPageTerminalAction;\nvar ScrollToTopTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollToTopTerminalAction, _super);\n    function ScrollToTopTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollToTopTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.scrollToTop();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollToTopTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_TOP;\n    ScrollToTopTerminalAction.LABEL = nls.localize('workbench.action.terminal.scrollToTop', \"Scroll to Top\");\n    ScrollToTopTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollToTopTerminalAction);\n    return ScrollToTopTerminalAction;\n}(actions_1.Action));\nexports.ScrollToTopTerminalAction = ScrollToTopTerminalAction;\nvar ClearTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearTerminalAction, _super);\n    function ClearTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ClearTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance) {\n            terminalInstance.clear();\n        }\n        return Promise.resolve(undefined);\n    };\n    ClearTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.CLEAR;\n    ClearTerminalAction.LABEL = nls.localize('workbench.action.terminal.clear', \"Clear\");\n    ClearTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ClearTerminalAction);\n    return ClearTerminalAction;\n}(actions_1.Action));\nexports.ClearTerminalAction = ClearTerminalAction;\nvar ClearSelectionTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearSelectionTerminalAction, _super);\n    function ClearSelectionTerminalAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ClearSelectionTerminalAction.prototype.run = function (event) {\n        var terminalInstance = this.terminalService.getActiveInstance();\n        if (terminalInstance && terminalInstance.hasSelection()) {\n            terminalInstance.clearSelection();\n        }\n        return Promise.resolve(undefined);\n    };\n    ClearSelectionTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.CLEAR_SELECTION;\n    ClearSelectionTerminalAction.LABEL = nls.localize('workbench.action.terminal.clearSelection', \"Clear Selection\");\n    ClearSelectionTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ClearSelectionTerminalAction);\n    return ClearSelectionTerminalAction;\n}(actions_1.Action));\nexports.ClearSelectionTerminalAction = ClearSelectionTerminalAction;\nvar AllowWorkspaceShellTerminalCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(AllowWorkspaceShellTerminalCommand, _super);\n    function AllowWorkspaceShellTerminalCommand(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    AllowWorkspaceShellTerminalCommand.prototype.run = function (event) {\n        this.terminalService.setWorkspaceShellAllowed(true);\n        return Promise.resolve(undefined);\n    };\n    AllowWorkspaceShellTerminalCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.WORKSPACE_SHELL_ALLOW;\n    AllowWorkspaceShellTerminalCommand.LABEL = nls.localize('workbench.action.terminal.allowWorkspaceShell', \"Allow Workspace Shell Configuration\");\n    AllowWorkspaceShellTerminalCommand = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], AllowWorkspaceShellTerminalCommand);\n    return AllowWorkspaceShellTerminalCommand;\n}(actions_1.Action));\nexports.AllowWorkspaceShellTerminalCommand = AllowWorkspaceShellTerminalCommand;\nvar DisallowWorkspaceShellTerminalCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(DisallowWorkspaceShellTerminalCommand, _super);\n    function DisallowWorkspaceShellTerminalCommand(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    DisallowWorkspaceShellTerminalCommand.prototype.run = function (event) {\n        this.terminalService.setWorkspaceShellAllowed(false);\n        return Promise.resolve(undefined);\n    };\n    DisallowWorkspaceShellTerminalCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.WORKSPACE_SHELL_DISALLOW;\n    DisallowWorkspaceShellTerminalCommand.LABEL = nls.localize('workbench.action.terminal.disallowWorkspaceShell', \"Disallow Workspace Shell Configuration\");\n    DisallowWorkspaceShellTerminalCommand = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], DisallowWorkspaceShellTerminalCommand);\n    return DisallowWorkspaceShellTerminalCommand;\n}(actions_1.Action));\nexports.DisallowWorkspaceShellTerminalCommand = DisallowWorkspaceShellTerminalCommand;\nvar RenameTerminalAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RenameTerminalAction, _super);\n    function RenameTerminalAction(id, label, quickOpenService, quickInputService, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.quickInputService = quickInputService;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    RenameTerminalAction.prototype.run = function (entry) {\n        var terminalInstance = entry ? entry.instance : this.terminalService.getActiveInstance();\n        if (!terminalInstance) {\n            return Promise.resolve(undefined);\n        }\n        return this.quickInputService.input({\n            value: terminalInstance.title,\n            prompt: nls.localize('workbench.action.terminal.rename.prompt', \"Enter terminal name\"),\n        }).then(function (name) {\n            if (name) {\n                terminalInstance.setTitle(name, false);\n            }\n        });\n    };\n    RenameTerminalAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.RENAME;\n    RenameTerminalAction.LABEL = nls.localize('workbench.action.terminal.rename', \"Rename\");\n    RenameTerminalAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_1.IQuickOpenService),\n        tslib_1.__param(3, quickInput_1.IQuickInputService),\n        tslib_1.__param(4, terminal_1.ITerminalService)\n    ], RenameTerminalAction);\n    return RenameTerminalAction;\n}(actions_1.Action));\nexports.RenameTerminalAction = RenameTerminalAction;\nvar FocusTerminalFindWidgetAction = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusTerminalFindWidgetAction, _super);\n    function FocusTerminalFindWidgetAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FocusTerminalFindWidgetAction.prototype.run = function () {\n        return this.terminalService.focusFindWidget();\n    };\n    FocusTerminalFindWidgetAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_WIDGET_FOCUS;\n    FocusTerminalFindWidgetAction.LABEL = nls.localize('workbench.action.terminal.focusFindWidget', \"Focus Find Widget\");\n    FocusTerminalFindWidgetAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FocusTerminalFindWidgetAction);\n    return FocusTerminalFindWidgetAction;\n}(actions_1.Action));\nexports.FocusTerminalFindWidgetAction = FocusTerminalFindWidgetAction;\nvar HideTerminalFindWidgetAction = /** @class */ (function (_super) {\n    tslib_1.__extends(HideTerminalFindWidgetAction, _super);\n    function HideTerminalFindWidgetAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    HideTerminalFindWidgetAction.prototype.run = function () {\n        return Promise.resolve(this.terminalService.hideFindWidget());\n    };\n    HideTerminalFindWidgetAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_WIDGET_HIDE;\n    HideTerminalFindWidgetAction.LABEL = nls.localize('workbench.action.terminal.hideFindWidget', \"Hide Find Widget\");\n    HideTerminalFindWidgetAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], HideTerminalFindWidgetAction);\n    return HideTerminalFindWidgetAction;\n}(actions_1.Action));\nexports.HideTerminalFindWidgetAction = HideTerminalFindWidgetAction;\nvar QuickOpenActionTermContributor = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenActionTermContributor, _super);\n    function QuickOpenActionTermContributor(instantiationService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        return _this;\n    }\n    QuickOpenActionTermContributor.prototype.getActions = function (context) {\n        var actions = [];\n        if (context.element instanceof terminalQuickOpen_1.TerminalEntry) {\n            actions.push(this.instantiationService.createInstance(RenameTerminalQuickOpenAction, RenameTerminalQuickOpenAction.ID, RenameTerminalQuickOpenAction.LABEL, context.element));\n            actions.push(this.instantiationService.createInstance(QuickKillTerminalAction, QuickKillTerminalAction.ID, QuickKillTerminalAction.LABEL, context.element));\n        }\n        return actions;\n    };\n    QuickOpenActionTermContributor.prototype.hasActions = function (context) {\n        return true;\n    };\n    QuickOpenActionTermContributor = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService)\n    ], QuickOpenActionTermContributor);\n    return QuickOpenActionTermContributor;\n}(actions_2.ActionBarContributor));\nexports.QuickOpenActionTermContributor = QuickOpenActionTermContributor;\nvar QuickOpenTermAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenTermAction, _super);\n    function QuickOpenTermAction(id, label, quickOpenService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickOpenService = quickOpenService;\n        return _this;\n    }\n    QuickOpenTermAction.prototype.run = function () {\n        return this.quickOpenService.show(exports.TERMINAL_PICKER_PREFIX, undefined);\n    };\n    QuickOpenTermAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.QUICK_OPEN_TERM;\n    QuickOpenTermAction.LABEL = nls.localize('quickOpenTerm', \"Switch Active Terminal\");\n    QuickOpenTermAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_1.IQuickOpenService)\n    ], QuickOpenTermAction);\n    return QuickOpenTermAction;\n}(actions_1.Action));\nexports.QuickOpenTermAction = QuickOpenTermAction;\nvar RenameTerminalQuickOpenAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RenameTerminalQuickOpenAction, _super);\n    function RenameTerminalQuickOpenAction(id, label, terminal, quickOpenService, quickInputService, terminalService) {\n        var _this = _super.call(this, id, label, quickOpenService, quickInputService, terminalService) || this;\n        _this.terminal = terminal;\n        _this.class = 'quick-open-terminal-configure';\n        return _this;\n    }\n    RenameTerminalQuickOpenAction.prototype.run = function () {\n        var _this = this;\n        _super.prototype.run.call(this, this.terminal)\n            // This timeout is needed to make sure the previous quickOpen has time to close before we show the next one\n            .then(function () { return async_1.timeout(50); })\n            .then(function (result) { return _this.quickOpenService.show(exports.TERMINAL_PICKER_PREFIX, undefined); });\n        return Promise.resolve(null);\n    };\n    RenameTerminalQuickOpenAction = tslib_1.__decorate([\n        tslib_1.__param(3, quickOpen_1.IQuickOpenService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, terminal_1.ITerminalService)\n    ], RenameTerminalQuickOpenAction);\n    return RenameTerminalQuickOpenAction;\n}(RenameTerminalAction));\nexports.RenameTerminalQuickOpenAction = RenameTerminalQuickOpenAction;\nvar ScrollToPreviousCommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollToPreviousCommandAction, _super);\n    function ScrollToPreviousCommandAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollToPreviousCommandAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.scrollToPreviousCommand();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollToPreviousCommandAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND;\n    ScrollToPreviousCommandAction.LABEL = nls.localize('workbench.action.terminal.scrollToPreviousCommand', \"Scroll To Previous Command\");\n    ScrollToPreviousCommandAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollToPreviousCommandAction);\n    return ScrollToPreviousCommandAction;\n}(actions_1.Action));\nexports.ScrollToPreviousCommandAction = ScrollToPreviousCommandAction;\nvar ScrollToNextCommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ScrollToNextCommandAction, _super);\n    function ScrollToNextCommandAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ScrollToNextCommandAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.scrollToNextCommand();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    ScrollToNextCommandAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND;\n    ScrollToNextCommandAction.LABEL = nls.localize('workbench.action.terminal.scrollToNextCommand', \"Scroll To Next Command\");\n    ScrollToNextCommandAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ScrollToNextCommandAction);\n    return ScrollToNextCommandAction;\n}(actions_1.Action));\nexports.ScrollToNextCommandAction = ScrollToNextCommandAction;\nvar SelectToPreviousCommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectToPreviousCommandAction, _super);\n    function SelectToPreviousCommandAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectToPreviousCommandAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.selectToPreviousCommand();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectToPreviousCommandAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND;\n    SelectToPreviousCommandAction.LABEL = nls.localize('workbench.action.terminal.selectToPreviousCommand', \"Select To Previous Command\");\n    SelectToPreviousCommandAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectToPreviousCommandAction);\n    return SelectToPreviousCommandAction;\n}(actions_1.Action));\nexports.SelectToPreviousCommandAction = SelectToPreviousCommandAction;\nvar SelectToNextCommandAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectToNextCommandAction, _super);\n    function SelectToNextCommandAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectToNextCommandAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.selectToNextCommand();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectToNextCommandAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND;\n    SelectToNextCommandAction.LABEL = nls.localize('workbench.action.terminal.selectToNextCommand', \"Select To Next Command\");\n    SelectToNextCommandAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectToNextCommandAction);\n    return SelectToNextCommandAction;\n}(actions_1.Action));\nexports.SelectToNextCommandAction = SelectToNextCommandAction;\nvar SelectToPreviousLineAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectToPreviousLineAction, _super);\n    function SelectToPreviousLineAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectToPreviousLineAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.selectToPreviousLine();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectToPreviousLineAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_LINE;\n    SelectToPreviousLineAction.LABEL = nls.localize('workbench.action.terminal.selectToPreviousLine', \"Select To Previous Line\");\n    SelectToPreviousLineAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectToPreviousLineAction);\n    return SelectToPreviousLineAction;\n}(actions_1.Action));\nexports.SelectToPreviousLineAction = SelectToPreviousLineAction;\nvar SelectToNextLineAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectToNextLineAction, _super);\n    function SelectToNextLineAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    SelectToNextLineAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.commandTracker.selectToNextLine();\n            instance.focus();\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectToNextLineAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.SELECT_TO_NEXT_LINE;\n    SelectToNextLineAction.LABEL = nls.localize('workbench.action.terminal.selectToNextLine', \"Select To Next Line\");\n    SelectToNextLineAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], SelectToNextLineAction);\n    return SelectToNextLineAction;\n}(actions_1.Action));\nexports.SelectToNextLineAction = SelectToNextLineAction;\nvar ToggleEscapeSequenceLoggingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleEscapeSequenceLoggingAction, _super);\n    function ToggleEscapeSequenceLoggingAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ToggleEscapeSequenceLoggingAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance) {\n            instance.toggleEscapeSequenceLogging();\n        }\n        return Promise.resolve(undefined);\n    };\n    ToggleEscapeSequenceLoggingAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_ESCAPE_SEQUENCE_LOGGING;\n    ToggleEscapeSequenceLoggingAction.LABEL = nls.localize('workbench.action.terminal.toggleEscapeSequenceLogging', \"Toggle Escape Sequence Logging\");\n    ToggleEscapeSequenceLoggingAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ToggleEscapeSequenceLoggingAction);\n    return ToggleEscapeSequenceLoggingAction;\n}(actions_1.Action));\nexports.ToggleEscapeSequenceLoggingAction = ToggleEscapeSequenceLoggingAction;\nvar ToggleFindOptionCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleFindOptionCommand, _super);\n    function ToggleFindOptionCommand(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    ToggleFindOptionCommand.prototype.run = function () {\n        var state = this.terminalService.getFindState();\n        this.runInner(state);\n        return Promise.resolve(undefined);\n    };\n    ToggleFindOptionCommand = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], ToggleFindOptionCommand);\n    return ToggleFindOptionCommand;\n}(actions_1.Action));\nvar ToggleRegexCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleRegexCommand, _super);\n    function ToggleRegexCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ToggleRegexCommand.prototype.runInner = function (state) {\n        state.change({ isRegex: !state.isRegex }, false);\n    };\n    ToggleRegexCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX;\n    ToggleRegexCommand.ID_TERMINAL_FOCUS = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX_TERMINAL_FOCUS;\n    ToggleRegexCommand.LABEL = nls.localize('workbench.action.terminal.toggleFindRegex', \"Toggle find using regex\");\n    return ToggleRegexCommand;\n}(ToggleFindOptionCommand));\nexports.ToggleRegexCommand = ToggleRegexCommand;\nvar ToggleWholeWordCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleWholeWordCommand, _super);\n    function ToggleWholeWordCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ToggleWholeWordCommand.prototype.runInner = function (state) {\n        state.change({ wholeWord: !state.wholeWord }, false);\n    };\n    ToggleWholeWordCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD;\n    ToggleWholeWordCommand.ID_TERMINAL_FOCUS = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD_TERMINAL_FOCUS;\n    ToggleWholeWordCommand.LABEL = nls.localize('workbench.action.terminal.toggleFindWholeWord', \"Toggle find using whole word\");\n    return ToggleWholeWordCommand;\n}(ToggleFindOptionCommand));\nexports.ToggleWholeWordCommand = ToggleWholeWordCommand;\nvar ToggleCaseSensitiveCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleCaseSensitiveCommand, _super);\n    function ToggleCaseSensitiveCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ToggleCaseSensitiveCommand.prototype.runInner = function (state) {\n        state.change({ matchCase: !state.matchCase }, false);\n    };\n    ToggleCaseSensitiveCommand.ID = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE;\n    ToggleCaseSensitiveCommand.ID_TERMINAL_FOCUS = terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE_TERMINAL_FOCUS;\n    ToggleCaseSensitiveCommand.LABEL = nls.localize('workbench.action.terminal.toggleFindCaseSensitive', \"Toggle find using case sensitive\");\n    return ToggleCaseSensitiveCommand;\n}(ToggleFindOptionCommand));\nexports.ToggleCaseSensitiveCommand = ToggleCaseSensitiveCommand;\nvar FindNext = /** @class */ (function (_super) {\n    tslib_1.__extends(FindNext, _super);\n    function FindNext(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FindNext.prototype.run = function () {\n        this.terminalService.findNext();\n        return Promise.resolve(undefined);\n    };\n    FindNext.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_NEXT;\n    FindNext.ID_TERMINAL_FOCUS = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_NEXT_TERMINAL_FOCUS;\n    FindNext.LABEL = nls.localize('workbench.action.terminal.findNext', \"Find next\");\n    FindNext = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FindNext);\n    return FindNext;\n}(actions_1.Action));\nexports.FindNext = FindNext;\nvar FindPrevious = /** @class */ (function (_super) {\n    tslib_1.__extends(FindPrevious, _super);\n    function FindPrevious(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        return _this;\n    }\n    FindPrevious.prototype.run = function () {\n        this.terminalService.findPrevious();\n        return Promise.resolve(undefined);\n    };\n    FindPrevious.ID = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_PREVIOUS;\n    FindPrevious.ID_TERMINAL_FOCUS = terminalCommands_1.TERMINAL_COMMAND_ID.FIND_PREVIOUS_TERMINAL_FOCUS;\n    FindPrevious.LABEL = nls.localize('workbench.action.terminal.findPrevious', \"Find previous\");\n    FindPrevious = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], FindPrevious);\n    return FindPrevious;\n}(actions_1.Action));\nexports.FindPrevious = FindPrevious;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminalActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { EndOfLinePreference } from 'vs/editor/common/model';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { ITerminalService, TERMINAL_PANEL_ID, ITerminalInstance, Direction, ITerminalConfigHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { SelectActionItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { TogglePanelAction } from 'vs/workbench/browser/panel';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { attachSelectBoxStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { IQuickInputService, IPickOptions, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { ActionBarContributor } from 'vs/workbench/browser/actions';\nimport { TerminalEntry } from 'vs/workbench/contrib/terminal/browser/terminalQuickOpen';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { PICK_WORKSPACE_FOLDER_COMMAND_ID } from 'vs/workbench/browser/actions/workspaceCommands';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TERMINAL_COMMAND_ID } from 'vs/workbench/contrib/terminal/common/terminalCommands';\nimport { Command } from 'vs/editor/browser/editorExtensions';\nimport { timeout } from 'vs/base/common/async';\nimport { FindReplaceState } from 'vs/editor/contrib/find/findState';\nimport { ISelectOptionItem } from 'vs/base/browser/ui/selectBox/selectBox';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { isWindows } from 'vs/base/common/platform';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport const TERMINAL_PICKER_PREFIX = 'term ';\n\nfunction getCwdForSplit(configHelper: ITerminalConfigHelper, instance: ITerminalInstance, folders?: IWorkspaceFolder[], commandService?: ICommandService): Promise<string | URI> {\n\tswitch (configHelper.config.splitCwd) {\n\t\tcase 'workspaceRoot':\n\t\t\tlet pathPromise: Promise<string | URI> = Promise.resolve('');\n\t\t\tif (folders !== undefined && commandService !== undefined) {\n\t\t\t\tif (folders.length === 1) {\n\t\t\t\t\tpathPromise = Promise.resolve(folders[0].uri);\n\t\t\t\t} else if (folders.length > 1) {\n\t\t\t\t\t// Only choose a path when there's more than 1 folder\n\t\t\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\t\t\tplaceHolder: nls.localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n\t\t\t\t\t};\n\t\t\t\t\tpathPromise = commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]).then(workspace => {\n\t\t\t\t\t\tif (!workspace) {\n\t\t\t\t\t\t\t// Don't split the instance if the workspace picker was canceled\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Promise.resolve(workspace.uri);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pathPromise;\n\t\tcase 'initial':\n\t\t\treturn instance.getInitialCwd();\n\t\tcase 'inherited':\n\t\t\treturn instance.getCwd();\n\t}\n}\n\nexport class ToggleTerminalAction extends TogglePanelAction {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.TOGGLE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.toggleTerminal', \"Toggle Integrated Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, TERMINAL_PANEL_ID, panelService, layoutService);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tif (this.terminalService.terminalInstances.length === 0) {\n\t\t\t// If there is not yet an instance attempt to create it here so that we can suggest a\n\t\t\t// new shell on Windows (and not do so when the panel is restored on reload).\n\t\t\tconst newTerminalInstance = this.terminalService.createTerminal(undefined, true);\n\t\t\tconst toDispose = newTerminalInstance.onProcessIdReady(() => {\n\t\t\t\tnewTerminalInstance.focus();\n\t\t\t\ttoDispose.dispose();\n\t\t\t});\n\t\t}\n\t\treturn super.run();\n\t}\n}\n\nexport class KillTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.KILL;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.kill', \"Kill the Active Terminal Instance\");\n\tpublic static readonly PANEL_LABEL = nls.localize('workbench.action.terminal.kill.short', \"Kill Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, 'terminal-action kill');\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.dispose(true);\n\t\t\tif (this.terminalService.terminalInstances.length > 0) {\n\t\t\t\tthis.terminalService.showPanel(true);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class QuickKillTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.QUICK_KILL;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.quickKill', \"Kill Terminal Instance\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\tprivate terminalEntry: TerminalEntry,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService\n\t) {\n\t\tsuper(id, label, 'terminal-action kill');\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalEntry.instance;\n\t\tif (instance) {\n\t\t\tinstance.dispose(true);\n\t\t}\n\t\treturn Promise.resolve(timeout(50)).then(result => this.quickOpenService.show(TERMINAL_PICKER_PREFIX, undefined));\n\t}\n}\n\n/**\n * Copies the terminal selection. Note that since the command palette takes focus from the terminal,\n * this cannot be triggered through the command palette.\n */\nexport class CopyTerminalSelectionAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.COPY_SELECTION;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.copySelection', \"Copy Selection\");\n\tpublic static readonly SHORT_LABEL = nls.localize('workbench.action.terminal.copySelection.short', \"Copy\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.copySelection();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectAllTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_ALL;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectAll', \"Select All\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.selectAll();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport abstract class BaseSendTextTerminalAction extends Action {\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate _text: string,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this._terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.sendText(this._text, false);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class DeleteWordLeftTerminalAction extends BaseSendTextTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.DELETE_WORD_LEFT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.deleteWordLeft', \"Delete Word Left\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\t// Send ctrl+W\n\t\tsuper(id, label, String.fromCharCode('W'.charCodeAt(0) - 64), terminalService);\n\t}\n}\n\nexport class DeleteWordRightTerminalAction extends BaseSendTextTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.DELETE_WORD_RIGHT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.deleteWordRight', \"Delete Word Right\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\t// Send alt+D\n\t\tsuper(id, label, '\\x1bD', terminalService);\n\t}\n}\n\nexport class DeleteToLineStartTerminalAction extends BaseSendTextTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.DELETE_TO_LINE_START;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.deleteToLineStart', \"Delete to Line Start\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\t// Send ctrl+u\n\t\tsuper(id, label, '\\u0015', terminalService);\n\t}\n}\n\nexport class MoveToLineStartTerminalAction extends BaseSendTextTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.MOVE_TO_LINE_START;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.moveToLineStart', \"Move To Line Start\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\t// Send ctrl+A\n\t\tsuper(id, label, String.fromCharCode('A'.charCodeAt(0) - 64), terminalService);\n\t}\n}\n\nexport class MoveToLineEndTerminalAction extends BaseSendTextTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.MOVE_TO_LINE_END;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.moveToLineEnd', \"Move To Line End\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\t// Send ctrl+E\n\t\tsuper(id, label, String.fromCharCode('E'.charCodeAt(0) - 64), terminalService);\n\t}\n}\n\nexport class SendSequenceTerminalCommand extends Command {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SEND_SEQUENCE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.sendSequence', \"Send Custom Sequence To Terminal\");\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst terminalInstance = accessor.get(ITerminalService).getActiveInstance();\n\t\tif (!terminalInstance) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst configurationResolverService = accessor.get(IConfigurationResolverService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? withNullAsUndefined(workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri)) : undefined;\n\t\tconst resolvedText = configurationResolverService.resolve(lastActiveWorkspaceRoot, args.text);\n\t\tterminalInstance.sendText(resolvedText, false);\n\t}\n}\n\nexport class CreateNewTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.NEW;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.new', \"Create New Integrated Terminal\");\n\tpublic static readonly SHORT_LABEL = nls.localize('workbench.action.terminal.new.short', \"New Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(id, label, 'terminal-action new');\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst folders = this.workspaceContextService.getWorkspace().folders;\n\t\tif (event instanceof MouseEvent && (event.altKey || event.ctrlKey)) {\n\t\t\tconst activeInstance = this.terminalService.getActiveInstance();\n\t\t\tif (activeInstance) {\n\t\t\t\treturn getCwdForSplit(this.terminalService.configHelper, activeInstance).then(cwd => {\n\t\t\t\t\tthis.terminalService.splitInstance(activeInstance, { cwd });\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet instancePromise: Promise<ITerminalInstance | null>;\n\t\tif (folders.length <= 1) {\n\t\t\t// Allow terminal service to handle the path when there is only a\n\t\t\t// single root\n\t\t\tinstancePromise = Promise.resolve(this.terminalService.createTerminal(undefined, true));\n\t\t} else {\n\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\tplaceHolder: nls.localize('workbench.action.terminal.newWorkspacePlaceholder', \"Select current working directory for new terminal\")\n\t\t\t};\n\t\t\tinstancePromise = this.commandService.executeCommand(PICK_WORKSPACE_FOLDER_COMMAND_ID, [options]).then(workspace => {\n\t\t\t\tif (!workspace) {\n\t\t\t\t\t// Don't create the instance if the workspace picker was canceled\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn this.terminalService.createTerminal({ cwd: workspace.uri.fsPath }, true);\n\t\t\t});\n\t\t}\n\n\t\treturn instancePromise.then(instance => {\n\t\t\tif (!instance) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\t\t\tthis.terminalService.setActiveInstance(instance);\n\t\t\treturn this.terminalService.showPanel(true);\n\t\t});\n\t}\n}\n\nexport class CreateNewInActiveWorkspaceTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.NEW_IN_ACTIVE_WORKSPACE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.newInActiveWorkspace', \"Create New Integrated Terminal (In Active Workspace)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.createTerminal(undefined, true);\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tthis.terminalService.setActiveInstance(instance);\n\t\treturn this.terminalService.showPanel(true);\n\t}\n}\n\nexport class SplitTerminalAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SPLIT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.split', \"Split Terminal\");\n\tpublic static readonly SHORT_LABEL = nls.localize('workbench.action.terminal.split.short', \"Split\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper(id, label, 'terminal-action split');\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn getCwdForSplit(this._terminalService.configHelper, instance, this.workspaceContextService.getWorkspace().folders, this.commandService).then(cwd => {\n\t\t\tif (cwd || (cwd === '')) {\n\t\t\t\tthis._terminalService.splitInstance(instance, { cwd });\n\t\t\t\treturn this._terminalService.showPanel(true);\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class SplitInActiveWorkspaceTerminalAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SPLIT_IN_ACTIVE_WORKSPACE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.splitInActiveWorkspace', \"Split Terminal (In Active Workspace)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this._terminalService.getActiveInstance();\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn getCwdForSplit(this._terminalService.configHelper, instance).then(cwd => {\n\t\t\tthis._terminalService.splitInstance(instance, { cwd });\n\t\t\treturn this._terminalService.showPanel(true);\n\t\t});\n\t}\n}\n\nexport class FocusPreviousPaneTerminalAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FOCUS_PREVIOUS_PANE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focusPreviousPane', \"Focus Previous Pane\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst tab = this._terminalService.getActiveTab();\n\t\tif (!tab) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\ttab.focusPreviousPane();\n\t\treturn this._terminalService.showPanel(true);\n\t}\n}\n\nexport class FocusNextPaneTerminalAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FOCUS_NEXT_PANE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focusNextPane', \"Focus Next Pane\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst tab = this._terminalService.getActiveTab();\n\t\tif (!tab) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\ttab.focusNextPane();\n\t\treturn this._terminalService.showPanel(true);\n\t}\n}\n\nexport abstract class BaseFocusDirectionTerminalAction extends Action {\n\tconstructor(\n\t\tid: string, label: string,\n\t\tprivate _direction: Direction,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst tab = this._terminalService.getActiveTab();\n\t\tif (tab) {\n\t\t\ttab.resizePane(this._direction);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ResizePaneLeftTerminalAction extends BaseFocusDirectionTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RESIZE_PANE_LEFT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.resizePaneLeft', \"Resize Pane Left\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, Direction.Left, terminalService);\n\t}\n}\n\nexport class ResizePaneRightTerminalAction extends BaseFocusDirectionTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RESIZE_PANE_RIGHT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.resizePaneRight', \"Resize Pane Right\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, Direction.Right, terminalService);\n\t}\n}\n\nexport class ResizePaneUpTerminalAction extends BaseFocusDirectionTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RESIZE_PANE_UP;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.resizePaneUp', \"Resize Pane Up\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, Direction.Up, terminalService);\n\t}\n}\n\nexport class ResizePaneDownTerminalAction extends BaseFocusDirectionTerminalAction {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RESIZE_PANE_DOWN;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.resizePaneDown', \"Resize Pane Down\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, Direction.Down, terminalService);\n\t}\n}\n\nexport class FocusActiveTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focus', \"Focus Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveOrCreateInstance(true);\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tthis.terminalService.setActiveInstance(instance);\n\t\treturn this.terminalService.showPanel(true);\n\t}\n}\n\nexport class FocusNextTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FOCUS_NEXT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focusNext', \"Focus Next Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.terminalService.setActiveTabToNext();\n\t\treturn this.terminalService.showPanel(true);\n\t}\n}\n\nexport class FocusPreviousTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FOCUS_PREVIOUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focusPrevious', \"Focus Previous Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.terminalService.setActiveTabToPrevious();\n\t\treturn this.terminalService.showPanel(true);\n\t}\n}\n\nexport class TerminalPasteAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.PASTE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.paste', \"Paste into Active Terminal\");\n\tpublic static readonly SHORT_LABEL = nls.localize('workbench.action.terminal.paste.short', \"Paste\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveOrCreateInstance();\n\t\tif (instance) {\n\t\t\tinstance.paste();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectDefaultShellWindowsTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_DEFAULT_SHELL;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectDefaultShell', \"Select Default Shell\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\treturn this.terminalService.selectDefaultWindowsShell();\n\t}\n}\n\nexport class RunSelectedTextInTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.runSelectedText', \"Run Selected Text In Active Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveOrCreateInstance();\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tlet editor = this.codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tlet selection = editor.getSelection();\n\t\tlet text: string;\n\t\tif (selection.isEmpty()) {\n\t\t\ttext = editor.getModel().getLineContent(selection.selectionStartLineNumber).trim();\n\t\t} else {\n\t\t\tconst endOfLinePreference = isWindows ? EndOfLinePreference.LF : EndOfLinePreference.CRLF;\n\t\t\ttext = editor.getModel().getValueInRange(selection, endOfLinePreference);\n\t\t}\n\t\tinstance.sendText(text, true);\n\t\treturn this.terminalService.showPanel();\n\t}\n}\n\nexport class RunActiveFileInTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.runActiveFile', \"Run Active File In Active Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveOrCreateInstance();\n\t\tif (!instance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst editor = this.codeEditorService.getActiveCodeEditor();\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst uri = editor.getModel().uri;\n\t\tif (uri.scheme !== 'file') {\n\t\t\tthis.notificationService.warn(nls.localize('workbench.action.terminal.runActiveFile.noFile', 'Only files on disk can be run in the terminal'));\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this.terminalService.preparePathForTerminalAsync(uri.fsPath, instance.shellLaunchConfig.executable, instance.title).then(path => {\n\t\t\tinstance.sendText(path, true);\n\t\t\treturn this.terminalService.showPanel();\n\t\t});\n\t}\n}\n\nexport class SwitchTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SWITCH_TERMINAL;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.switchTerminal', \"Switch Terminal\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, 'terminal-action switch-terminal');\n\t}\n\n\tpublic run(item?: string): Promise<any> {\n\t\tif (!item || !item.split) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst selectedTabIndex = parseInt(item.split(':')[0], 10) - 1;\n\t\tthis.terminalService.setActiveTabByIndex(selectedTabIndex);\n\t\treturn this.terminalService.showPanel(true);\n\t}\n}\n\nexport class SwitchTerminalActionItem extends SelectActionItem {\n\n\tconstructor(\n\t\taction: IAction,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextViewService contextViewService: IContextViewService\n\t) {\n\t\tsuper(null, action, terminalService.getTabLabels().map(label => <ISelectOptionItem>{ text: label }), terminalService.activeTabIndex, contextViewService, { ariaLabel: nls.localize('terminals', 'Open Terminals.') });\n\n\t\tthis.toDispose.push(terminalService.onInstancesChanged(this._updateItems, this));\n\t\tthis.toDispose.push(terminalService.onActiveTabChanged(this._updateItems, this));\n\t\tthis.toDispose.push(terminalService.onInstanceTitleChanged(this._updateItems, this));\n\t\tthis.toDispose.push(attachSelectBoxStyler(this.selectBox, themeService));\n\t}\n\n\tprivate _updateItems(): void {\n\t\tthis.setOptions(this.terminalService.getTabLabels().map(label => <ISelectOptionItem>{ text: label }), this.terminalService.activeTabIndex);\n\t}\n}\n\nexport class ScrollDownTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_DOWN_LINE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollDown', \"Scroll Down (Line)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollDownLine();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollDownPageTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_DOWN_PAGE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollDownPage', \"Scroll Down (Page)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollDownPage();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollToBottomTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_TO_BOTTOM;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollToBottom', \"Scroll to Bottom\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollToBottom();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollUpTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_UP_LINE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollUp', \"Scroll Up (Line)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollUpLine();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollUpPageTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_UP_PAGE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollUpPage', \"Scroll Up (Page)\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollUpPage();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollToTopTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_TO_TOP;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollToTop', \"Scroll to Top\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.scrollToTop();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ClearTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.CLEAR;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.clear', \"Clear\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.clear();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ClearSelectionTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.CLEAR_SELECTION;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.clearSelection', \"Clear Selection\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tconst terminalInstance = this.terminalService.getActiveInstance();\n\t\tif (terminalInstance && terminalInstance.hasSelection()) {\n\t\t\tterminalInstance.clearSelection();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class AllowWorkspaceShellTerminalCommand extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.WORKSPACE_SHELL_ALLOW;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.allowWorkspaceShell', \"Allow Workspace Shell Configuration\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.terminalService.setWorkspaceShellAllowed(true);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class DisallowWorkspaceShellTerminalCommand extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.WORKSPACE_SHELL_DISALLOW;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.disallowWorkspaceShell', \"Disallow Workspace Shell Configuration\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(event?: any): Promise<any> {\n\t\tthis.terminalService.setWorkspaceShellAllowed(false);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class RenameTerminalAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.RENAME;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.rename', \"Rename\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IQuickOpenService protected quickOpenService: IQuickOpenService,\n\t\t@IQuickInputService protected quickInputService: IQuickInputService,\n\t\t@ITerminalService protected terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(entry?: TerminalEntry): Promise<any> {\n\t\tconst terminalInstance = entry ? entry.instance : this.terminalService.getActiveInstance();\n\t\tif (!terminalInstance) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn this.quickInputService.input({\n\t\t\tvalue: terminalInstance.title,\n\t\t\tprompt: nls.localize('workbench.action.terminal.rename.prompt', \"Enter terminal name\"),\n\t\t}).then(name => {\n\t\t\tif (name) {\n\t\t\t\tterminalInstance.setTitle(name, false);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class FocusTerminalFindWidgetAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FIND_WIDGET_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.focusFindWidget', \"Focus Find Widget\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn this.terminalService.focusFindWidget();\n\t}\n}\n\nexport class HideTerminalFindWidgetAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FIND_WIDGET_HIDE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.hideFindWidget', \"Hide Find Widget\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\treturn Promise.resolve(this.terminalService.hideFindWidget());\n\t}\n}\n\nexport class QuickOpenActionTermContributor extends ActionBarContributor {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getActions(context: any): IAction[] {\n\t\tconst actions: Action[] = [];\n\t\tif (context.element instanceof TerminalEntry) {\n\t\t\tactions.push(this.instantiationService.createInstance(RenameTerminalQuickOpenAction, RenameTerminalQuickOpenAction.ID, RenameTerminalQuickOpenAction.LABEL, context.element));\n\t\t\tactions.push(this.instantiationService.createInstance(QuickKillTerminalAction, QuickKillTerminalAction.ID, QuickKillTerminalAction.LABEL, context.element));\n\t\t}\n\t\treturn actions;\n\t}\n\n\tpublic hasActions(context: any): boolean {\n\t\treturn true;\n\t}\n}\n\nexport class QuickOpenTermAction extends Action {\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.QUICK_OPEN_TERM;\n\tpublic static readonly LABEL = nls.localize('quickOpenTerm', \"Switch Active Terminal\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<void> {\n\t\treturn this.quickOpenService.show(TERMINAL_PICKER_PREFIX, undefined);\n\t}\n}\n\nexport class RenameTerminalQuickOpenAction extends RenameTerminalAction {\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\tprivate terminal: TerminalEntry,\n\t\t@IQuickOpenService quickOpenService: IQuickOpenService,\n\t\t@IQuickInputService quickInputService: IQuickInputService,\n\t\t@ITerminalService terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label, quickOpenService, quickInputService, terminalService);\n\t\tthis.class = 'quick-open-terminal-configure';\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tsuper.run(this.terminal)\n\t\t\t// This timeout is needed to make sure the previous quickOpen has time to close before we show the next one\n\t\t\t.then(() => timeout(50))\n\t\t\t.then(result => this.quickOpenService.show(TERMINAL_PICKER_PREFIX, undefined));\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class ScrollToPreviousCommandAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_TO_PREVIOUS_COMMAND;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollToPreviousCommand', \"Scroll To Previous Command\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.scrollToPreviousCommand();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ScrollToNextCommandAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SCROLL_TO_NEXT_COMMAND;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.scrollToNextCommand', \"Scroll To Next Command\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.scrollToNextCommand();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectToPreviousCommandAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_COMMAND;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectToPreviousCommand', \"Select To Previous Command\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.selectToPreviousCommand();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectToNextCommandAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_TO_NEXT_COMMAND;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectToNextCommand', \"Select To Next Command\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.selectToNextCommand();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectToPreviousLineAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_TO_PREVIOUS_LINE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectToPreviousLine', \"Select To Previous Line\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.selectToPreviousLine();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class SelectToNextLineAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.SELECT_TO_NEXT_LINE;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.selectToNextLine', \"Select To Next Line\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.commandTracker.selectToNextLine();\n\t\t\tinstance.focus();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\n\nexport class ToggleEscapeSequenceLoggingAction extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.TOGGLE_ESCAPE_SEQUENCE_LOGGING;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.toggleEscapeSequenceLogging', \"Toggle Escape Sequence Logging\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance) {\n\t\t\tinstance.toggleEscapeSequenceLogging();\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nabstract class ToggleFindOptionCommand extends Action {\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprotected abstract runInner(state: FindReplaceState): void;\n\n\tpublic run(): Promise<any> {\n\t\tconst state = this.terminalService.getFindState();\n\t\tthis.runInner(state);\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ToggleRegexCommand extends ToggleFindOptionCommand {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX;\n\tpublic static readonly ID_TERMINAL_FOCUS = TERMINAL_COMMAND_ID.TOGGLE_FIND_REGEX_TERMINAL_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.toggleFindRegex', \"Toggle find using regex\");\n\n\tprotected runInner(state: FindReplaceState): void {\n\t\tstate.change({ isRegex: !state.isRegex }, false);\n\t}\n}\n\nexport class ToggleWholeWordCommand extends ToggleFindOptionCommand {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD;\n\tpublic static readonly ID_TERMINAL_FOCUS = TERMINAL_COMMAND_ID.TOGGLE_FIND_WHOLE_WORD_TERMINAL_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.toggleFindWholeWord', \"Toggle find using whole word\");\n\n\tprotected runInner(state: FindReplaceState): void {\n\t\tstate.change({ wholeWord: !state.wholeWord }, false);\n\t}\n}\n\nexport class ToggleCaseSensitiveCommand extends ToggleFindOptionCommand {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE;\n\tpublic static readonly ID_TERMINAL_FOCUS = TERMINAL_COMMAND_ID.TOGGLE_FIND_CASE_SENSITIVE_TERMINAL_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.toggleFindCaseSensitive', \"Toggle find using case sensitive\");\n\n\tprotected runInner(state: FindReplaceState): void {\n\t\tstate.change({ matchCase: !state.matchCase }, false);\n\t}\n}\n\nexport class FindNext extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FIND_NEXT;\n\tpublic static readonly ID_TERMINAL_FOCUS = TERMINAL_COMMAND_ID.FIND_NEXT_TERMINAL_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.findNext', \"Find next\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tthis.terminalService.findNext();\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class FindPrevious extends Action {\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.FIND_PREVIOUS;\n\tpublic static readonly ID_TERMINAL_FOCUS = TERMINAL_COMMAND_ID.FIND_PREVIOUS_TERMINAL_FOCUS;\n\tpublic static readonly LABEL = nls.localize('workbench.action.terminal.findPrevious', \"Find previous\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tthis.terminalService.findPrevious();\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}