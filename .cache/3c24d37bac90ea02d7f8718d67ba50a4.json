{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModelImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModelImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar color_1 = require(\"vs/base/common/color\");\nvar strings = require(\"vs/base/common/strings\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar textModelEvents = require(\"vs/editor/common/model/textModelEvents\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar textToHtmlTokenizer_1 = require(\"vs/editor/common/modes/textToHtmlTokenizer\");\nvar minimapCharRenderer_1 = require(\"vs/editor/common/view/minimapCharRenderer\");\nvar viewEvents = require(\"vs/editor/common/view/viewEvents\");\nvar viewLayout_1 = require(\"vs/editor/common/viewLayout/viewLayout\");\nvar characterHardWrappingLineMapper_1 = require(\"vs/editor/common/viewModel/characterHardWrappingLineMapper\");\nvar splitLinesCollection_1 = require(\"vs/editor/common/viewModel/splitLinesCollection\");\nvar viewModel_1 = require(\"vs/editor/common/viewModel/viewModel\");\nvar viewModelDecorations_1 = require(\"vs/editor/common/viewModel/viewModelDecorations\");\nvar async_1 = require(\"vs/base/common/async\");\nvar USE_IDENTITY_LINES_COLLECTION = true;\nvar ViewModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewModel, _super);\n    function ViewModel(editorId, configuration, model, scheduleAtNextAnimationFrame) {\n        var _this = _super.call(this) || this;\n        _this.editorId = editorId;\n        _this.configuration = configuration;\n        _this.model = model;\n        _this._tokenizeViewportSoon = _this._register(new async_1.RunOnceScheduler(function () { return _this.tokenizeViewport(); }, 50));\n        _this.hasFocus = false;\n        _this.viewportStartLine = -1;\n        _this.viewportStartLineTrackedRange = null;\n        _this.viewportStartLineDelta = 0;\n        if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\n            _this.lines = new splitLinesCollection_1.IdentityLinesCollection(_this.model);\n        }\n        else {\n            var conf = _this.configuration.editor;\n            var hardWrappingLineMapperFactory = new characterHardWrappingLineMapper_1.CharacterHardWrappingLineMapperFactory(conf.wrappingInfo.wordWrapBreakBeforeCharacters, conf.wrappingInfo.wordWrapBreakAfterCharacters, conf.wrappingInfo.wordWrapBreakObtrusiveCharacters);\n            _this.lines = new splitLinesCollection_1.SplitLinesCollection(_this.model, hardWrappingLineMapperFactory, _this.model.getOptions().tabSize, conf.wrappingInfo.wrappingColumn, conf.fontInfo.typicalFullwidthCharacterWidth / conf.fontInfo.typicalHalfwidthCharacterWidth, conf.wrappingInfo.wrappingIndent);\n        }\n        _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\n        _this.viewLayout = _this._register(new viewLayout_1.ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\n        _this._register(_this.viewLayout.onDidScroll(function (e) {\n            if (e.scrollTopChanged) {\n                _this._tokenizeViewportSoon.schedule();\n            }\n            try {\n                var eventsCollector = _this._beginEmit();\n                eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\n            }\n            finally {\n                _this._endEmit();\n            }\n        }));\n        _this.decorations = new viewModelDecorations_1.ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\n        _this._registerModelEvents();\n        _this._register(_this.configuration.onDidChange(function (e) {\n            try {\n                var eventsCollector = _this._beginEmit();\n                _this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                _this._endEmit();\n            }\n        }));\n        _this._register(minimapCharRenderer_1.MinimapTokensColorTracker.getInstance().onDidChange(function () {\n            try {\n                var eventsCollector = _this._beginEmit();\n                eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\n            }\n            finally {\n                _this._endEmit();\n            }\n        }));\n        return _this;\n    }\n    ViewModel.prototype.dispose = function () {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        _super.prototype.dispose.call(this);\n        this.decorations.dispose();\n        this.lines.dispose();\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n    };\n    ViewModel.prototype.tokenizeViewport = function () {\n        var linesViewportData = this.viewLayout.getLinesViewportData();\n        var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(linesViewportData.startLineNumber, 1));\n        var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(linesViewportData.endLineNumber, 1));\n        this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\n    };\n    ViewModel.prototype.setHasFocus = function (hasFocus) {\n        this.hasFocus = hasFocus;\n    };\n    ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\n        // We might need to restore the current centered view range, so save it (if available)\n        var previousViewportStartModelPosition = null;\n        if (this.viewportStartLine !== -1) {\n            var previousViewportStartViewPosition = new position_1.Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n        }\n        var restorePreviousViewportStart = false;\n        var conf = this.configuration.editor;\n        if (this.lines.setWrappingSettings(conf.wrappingInfo.wrappingIndent, conf.wrappingInfo.wrappingColumn, conf.fontInfo.typicalFullwidthCharacterWidth / conf.fontInfo.typicalHalfwidthCharacterWidth)) {\n            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n            this.decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\n                // Never change the scroll position from 0 to something else...\n                restorePreviousViewportStart = true;\n            }\n        }\n        if (e.readOnly) {\n            // Must read again all decorations due to readOnly filtering\n            this.decorations.reset();\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n        }\n        eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\n            var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n            var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\n        }\n    };\n    ViewModel.prototype._registerModelEvents = function () {\n        var _this = this;\n        this._register(this.model.onDidChangeRawContentFast(function (e) {\n            try {\n                var eventsCollector = _this._beginEmit();\n                var hadOtherModelChange = false;\n                var hadModelLineChangeThatChangedLineMapping = false;\n                var changes = e.changes;\n                var versionId = e.versionId;\n                for (var j = 0, lenJ = changes.length; j < lenJ; j++) {\n                    var change = changes[j];\n                    switch (change.changeType) {\n                        case textModelEvents.RawContentChangedType.Flush: {\n                            _this.lines.onModelFlushed();\n                            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n                            _this.decorations.reset();\n                            _this.viewLayout.onFlushed(_this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case textModelEvents.RawContentChangedType.LinesDeleted: {\n                            var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emit(linesDeletedEvent);\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case textModelEvents.RawContentChangedType.LinesInserted: {\n                            var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, change.detail);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emit(linesInsertedEvent);\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case textModelEvents.RawContentChangedType.LineChanged: {\n                            var _a = _this.lines.onModelLineChanged(versionId, change.lineNumber, change.detail), lineMappingChanged = _a[0], linesChangedEvent = _a[1], linesInsertedEvent = _a[2], linesDeletedEvent = _a[3];\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emit(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emit(linesInsertedEvent);\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emit(linesDeletedEvent);\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case textModelEvents.RawContentChangedType.EOLChanged: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                _this.lines.acceptVersionId(versionId);\n                _this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n                    _this.decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                _this._endEmit();\n            }\n            // Update the configuration and reset the centered view line\n            _this.viewportStartLine = -1;\n            _this.configuration.setMaxLineNumber(_this.model.getLineCount());\n            // Recover viewport\n            if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\n                var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\n                if (modelRange) {\n                    var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    _this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + _this.viewportStartLineDelta });\n                }\n            }\n        }));\n        this._register(this.model.onDidChangeTokens(function (e) {\n            var viewRanges = [];\n            for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                var modelRange = e.ranges[j];\n                var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new position_1.Position(modelRange.fromLineNumber, 1)).lineNumber;\n                var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new position_1.Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            try {\n                var eventsCollector = _this._beginEmit();\n                eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            }\n            finally {\n                _this._endEmit();\n            }\n            if (e.tokenizationSupportChanged) {\n                _this._tokenizeViewportSoon.schedule();\n            }\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\n            try {\n                var eventsCollector = _this._beginEmit();\n                eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\n            }\n            finally {\n                _this._endEmit();\n            }\n        }));\n        this._register(this.model.onDidChangeOptions(function (e) {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\n                _this.decorations.onLineMappingChanged();\n                _this.viewLayout.onFlushed(_this.getLineCount());\n                try {\n                    var eventsCollector = _this._beginEmit();\n                    eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n                }\n                finally {\n                    _this._endEmit();\n                }\n            }\n        }));\n        this._register(this.model.onDidChangeDecorations(function (e) {\n            _this.decorations.onModelDecorationsChanged();\n            try {\n                var eventsCollector = _this._beginEmit();\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n            }\n            finally {\n                _this._endEmit();\n            }\n        }));\n    };\n    ViewModel.prototype.setHiddenAreas = function (ranges) {\n        try {\n            var eventsCollector = this._beginEmit();\n            var lineMappingChanged = this.lines.setHiddenAreas(ranges);\n            if (lineMappingChanged) {\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n                this.decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n        }\n        finally {\n            this._endEmit();\n        }\n    };\n    ViewModel.prototype.getVisibleRanges = function () {\n        var visibleViewRange = this.getCompletelyVisibleViewRange();\n        var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        var hiddenAreas = this.lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        var result = [], resultLen = 0;\n        var startLineNumber = visibleRange.startLineNumber;\n        var startColumn = visibleRange.startColumn;\n        var endLineNumber = visibleRange.endLineNumber;\n        var endColumn = visibleRange.endColumn;\n        for (var i = 0, len = hiddenAreas.length; i < len; i++) {\n            var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new range_1.Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new range_1.Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    };\n    ViewModel.prototype.getCompletelyVisibleViewRange = function () {\n        var partialData = this.viewLayout.getLinesViewportData();\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new range_1.Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    };\n    ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n        var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new range_1.Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    };\n    ViewModel.prototype.saveState = function () {\n        var compatViewState = this.viewLayout.saveState();\n        var scrollTop = compatViewState.scrollTop;\n        var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    };\n    ViewModel.prototype.reduceRestoreState = function (state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        var modelPosition = this.model.validatePosition(state.firstPosition);\n        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    };\n    ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    };\n    ViewModel.prototype.getTabSize = function () {\n        return this.model.getOptions().tabSize;\n    };\n    ViewModel.prototype.getOptions = function () {\n        return this.model.getOptions();\n    };\n    ViewModel.prototype.getLineCount = function () {\n        return this.lines.getViewLineCount();\n    };\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\n        this.lines.warmUpLookupCache(startLineNumber, endLineNumber);\n        this.viewportStartLine = startLineNumber;\n        var position = this.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column), model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n        var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        var scrollTop = this.viewLayout.getCurrentScrollTop();\n        this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\n    };\n    ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\n        return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    };\n    ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\n        return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    };\n    ViewModel.prototype.getLineContent = function (lineNumber) {\n        return this.lines.getViewLineContent(lineNumber);\n    };\n    ViewModel.prototype.getLineLength = function (lineNumber) {\n        return this.lines.getViewLineLength(lineNumber);\n    };\n    ViewModel.prototype.getLineMinColumn = function (lineNumber) {\n        return this.lines.getViewLineMinColumn(lineNumber);\n    };\n    ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\n        return this.lines.getViewLineMaxColumn(lineNumber);\n    };\n    ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\n        var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    };\n    ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\n        var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    };\n    ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\n        return this.decorations.getDecorationsViewportData(visibleRange).decorations;\n    };\n    ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\n        var mightContainRTL = this.model.mightContainRTL();\n        var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        var tabSize = this.getTabSize();\n        var lineData = this.lines.getViewLineData(lineNumber);\n        var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return new viewModel_1.ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize);\n    };\n    ViewModel.prototype.getViewLineData = function (lineNumber) {\n        return this.lines.getViewLineData(lineNumber);\n    };\n    ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\n        var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new viewModel_1.MinimapLinesRenderingData(this.getTabSize(), result);\n    };\n    ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\n        return this.lines.getAllOverviewRulerDecorations(this.editorId, this.configuration.editor.readOnly, theme);\n    };\n    ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\n        var decorations = this.model.getOverviewRulerDecorations();\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\n            var decoration = decorations_1[_i];\n            var opts = decoration.options.overviewRuler;\n            if (opts) {\n                opts.invalidateCachedColor();\n            }\n        }\n    };\n    ViewModel.prototype.getValueInRange = function (range, eol) {\n        var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    };\n    ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\n        return this.model.getLineMaxColumn(modelLineNumber);\n    };\n    ViewModel.prototype.validateModelPosition = function (position) {\n        return this.model.validatePosition(position);\n    };\n    ViewModel.prototype.validateModelRange = function (range) {\n        return this.model.validateRange(range);\n    };\n    ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        var resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    };\n    ViewModel.prototype.getEOL = function () {\n        return this.model.getEOL();\n    };\n    ViewModel.prototype.getPlainTextToCopy = function (ranges, emptySelectionClipboard, forceCRLF) {\n        var _this = this;\n        var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        ranges = ranges.slice(0);\n        ranges.sort(range_1.Range.compareRangesUsingStarts);\n        var nonEmptyRanges = ranges.filter(function (r) { return !r.isEmpty(); });\n        if (nonEmptyRanges.length === 0) {\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            var modelLineNumbers = ranges.map(function (r) {\n                var viewLineStart = new position_1.Position(r.startLineNumber, 1);\n                return _this.coordinatesConverter.convertViewPositionToModelPosition(viewLineStart).lineNumber;\n            });\n            var result_1 = '';\n            for (var i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result_1;\n        }\n        var result = [];\n        for (var _i = 0, nonEmptyRanges_1 = nonEmptyRanges; _i < nonEmptyRanges_1.length; _i++) {\n            var nonEmptyRange = nonEmptyRanges_1[_i];\n            result.push(this.getValueInRange(nonEmptyRange, forceCRLF ? model_1.EndOfLinePreference.CRLF : model_1.EndOfLinePreference.TextDefined));\n        }\n        return result.length === 1 ? result[0] : result;\n    };\n    ViewModel.prototype.getHTMLToCopy = function (viewRanges, emptySelectionClipboard) {\n        if (this.model.getLanguageIdentifier().id === modes_1.LanguageId.PlainText) {\n            return null;\n        }\n        if (viewRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        var range = this.coordinatesConverter.convertViewRangeToModelRange(viewRanges[0]);\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            var lineNumber = range.startLineNumber;\n            range = new range_1.Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        var fontInfo = this.configuration.editor.fontInfo;\n        var colorMap = this._getColorMap();\n        return (\"<div style=\\\"\"\n            + (\"color: \" + colorMap[modes_1.ColorId.DefaultForeground] + \";\")\n            + (\"background-color: \" + colorMap[modes_1.ColorId.DefaultBackground] + \";\")\n            + (\"font-family: \" + fontInfo.fontFamily + \";\")\n            + (\"font-weight: \" + fontInfo.fontWeight + \";\")\n            + (\"font-size: \" + fontInfo.fontSize + \"px;\")\n            + (\"line-height: \" + fontInfo.lineHeight + \"px;\")\n            + \"white-space: pre;\"\n            + \"\\\">\"\n            + this._getHTMLToCopy(range, colorMap)\n            + '</div>');\n    };\n    ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\n        var startLineNumber = modelRange.startLineNumber;\n        var startColumn = modelRange.startColumn;\n        var endLineNumber = modelRange.endLineNumber;\n        var endColumn = modelRange.endColumn;\n        var tabSize = this.getTabSize();\n        var result = '';\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            var lineTokens = this.model.getLineTokens(lineNumber);\n            var lineContent = lineTokens.getLineContent();\n            var startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            var endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += textToHtmlTokenizer_1.tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize);\n            }\n        }\n        return result;\n    };\n    ViewModel.prototype._getColorMap = function () {\n        var colorMap = modes_1.TokenizationRegistry.getColorMap();\n        var result = ['#000000'];\n        if (colorMap) {\n            for (var i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = color_1.Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    };\n    return ViewModel;\n}(viewEvents.ViewEventEmitter));\nexports.ViewModel = ViewModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModelImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModelImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { IConfigurationChangedEvent } from 'vs/editor/common/config/editorOptions';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference, IActiveIndentGuideInfo, ITextModel, TrackedRangeStickiness, TextModelResolvedOptions } from 'vs/editor/common/model';\nimport { ModelDecorationOverviewRulerOptions } from 'vs/editor/common/model/textModel';\nimport * as textModelEvents from 'vs/editor/common/model/textModelEvents';\nimport { ColorId, LanguageId, TokenizationRegistry } from 'vs/editor/common/modes';\nimport { tokenizeLineToHTML } from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport { MinimapTokensColorTracker } from 'vs/editor/common/view/minimapCharRenderer';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { ViewLayout } from 'vs/editor/common/viewLayout/viewLayout';\nimport { CharacterHardWrappingLineMapperFactory } from 'vs/editor/common/viewModel/characterHardWrappingLineMapper';\nimport { IViewModelLinesCollection, IdentityLinesCollection, SplitLinesCollection } from 'vs/editor/common/viewModel/splitLinesCollection';\nimport { ICoordinatesConverter, IOverviewRulerDecorations, IViewModel, MinimapLinesRenderingData, ViewLineData, ViewLineRenderingData, ViewModelDecoration } from 'vs/editor/common/viewModel/viewModel';\nimport { ViewModelDecorations } from 'vs/editor/common/viewModel/viewModelDecorations';\nimport { ITheme } from 'vs/platform/theme/common/themeService';\nimport { RunOnceScheduler } from 'vs/base/common/async';\n\nconst USE_IDENTITY_LINES_COLLECTION = true;\n\nexport class ViewModel extends viewEvents.ViewEventEmitter implements IViewModel {\n\n\tprivate readonly editorId: number;\n\tprivate readonly configuration: editorCommon.IConfiguration;\n\tprivate readonly model: ITextModel;\n\tprivate readonly _tokenizeViewportSoon: RunOnceScheduler;\n\tprivate hasFocus: boolean;\n\tprivate viewportStartLine: number;\n\tprivate viewportStartLineTrackedRange: string | null;\n\tprivate viewportStartLineDelta: number;\n\tprivate readonly lines: IViewModelLinesCollection;\n\tpublic readonly coordinatesConverter: ICoordinatesConverter;\n\tpublic readonly viewLayout: ViewLayout;\n\tprivate readonly decorations: ViewModelDecorations;\n\n\tconstructor(editorId: number, configuration: editorCommon.IConfiguration, model: ITextModel, scheduleAtNextAnimationFrame: (callback: () => void) => IDisposable) {\n\t\tsuper();\n\n\t\tthis.editorId = editorId;\n\t\tthis.configuration = configuration;\n\t\tthis.model = model;\n\t\tthis._tokenizeViewportSoon = this._register(new RunOnceScheduler(() => this.tokenizeViewport(), 50));\n\t\tthis.hasFocus = false;\n\t\tthis.viewportStartLine = -1;\n\t\tthis.viewportStartLineTrackedRange = null;\n\t\tthis.viewportStartLineDelta = 0;\n\n\t\tif (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n\n\t\t\tthis.lines = new IdentityLinesCollection(this.model);\n\n\t\t} else {\n\t\t\tconst conf = this.configuration.editor;\n\n\t\t\tlet hardWrappingLineMapperFactory = new CharacterHardWrappingLineMapperFactory(\n\t\t\t\tconf.wrappingInfo.wordWrapBreakBeforeCharacters,\n\t\t\t\tconf.wrappingInfo.wordWrapBreakAfterCharacters,\n\t\t\t\tconf.wrappingInfo.wordWrapBreakObtrusiveCharacters\n\t\t\t);\n\n\t\t\tthis.lines = new SplitLinesCollection(\n\t\t\t\tthis.model,\n\t\t\t\thardWrappingLineMapperFactory,\n\t\t\t\tthis.model.getOptions().tabSize,\n\t\t\t\tconf.wrappingInfo.wrappingColumn,\n\t\t\t\tconf.fontInfo.typicalFullwidthCharacterWidth / conf.fontInfo.typicalHalfwidthCharacterWidth,\n\t\t\t\tconf.wrappingInfo.wrappingIndent\n\t\t\t);\n\t\t}\n\n\t\tthis.coordinatesConverter = this.lines.createCoordinatesConverter();\n\n\t\tthis.viewLayout = this._register(new ViewLayout(this.configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n\n\t\tthis._register(this.viewLayout.onDidScroll((e) => {\n\t\t\tif (e.scrollTopChanged) {\n\t\t\t\tthis._tokenizeViewportSoon.schedule();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\teventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\t\t}));\n\n\t\tthis.decorations = new ViewModelDecorations(this.editorId, this.model, this.configuration, this.lines, this.coordinatesConverter);\n\n\t\tthis._registerModelEvents();\n\n\t\tthis._register(this.configuration.onDidChange((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\tthis._onConfigurationChanged(eventsCollector, e);\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\teventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\t// First remove listeners, as disposing the lines might end up sending\n\t\t// model decoration changed events ... and we no longer care about them ...\n\t\tsuper.dispose();\n\t\tthis.decorations.dispose();\n\t\tthis.lines.dispose();\n\t\tthis.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic tokenizeViewport(): void {\n\t\tconst linesViewportData = this.viewLayout.getLinesViewportData();\n\t\tconst startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\n\t\tconst endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\n\t\tthis.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\n\t}\n\n\tpublic setHasFocus(hasFocus: boolean): void {\n\t\tthis.hasFocus = hasFocus;\n\t}\n\n\tprivate _onConfigurationChanged(eventsCollector: viewEvents.ViewEventsCollector, e: IConfigurationChangedEvent): void {\n\n\t\t// We might need to restore the current centered view range, so save it (if available)\n\t\tlet previousViewportStartModelPosition: Position | null = null;\n\t\tif (this.viewportStartLine !== -1) {\n\t\t\tlet previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\n\t\t\tpreviousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n\t\t}\n\t\tlet restorePreviousViewportStart = false;\n\n\t\tconst conf = this.configuration.editor;\n\n\t\tif (this.lines.setWrappingSettings(conf.wrappingInfo.wrappingIndent, conf.wrappingInfo.wrappingColumn, conf.fontInfo.typicalFullwidthCharacterWidth / conf.fontInfo.typicalHalfwidthCharacterWidth)) {\n\t\t\teventsCollector.emit(new viewEvents.ViewFlushedEvent());\n\t\t\teventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t\tthis.decorations.onLineMappingChanged();\n\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\n\t\t\tif (this.viewLayout.getCurrentScrollTop() !== 0) {\n\t\t\t\t// Never change the scroll position from 0 to something else...\n\t\t\t\trestorePreviousViewportStart = true;\n\t\t\t}\n\t\t}\n\n\t\tif (e.readOnly) {\n\t\t\t// Must read again all decorations due to readOnly filtering\n\t\t\tthis.decorations.reset();\n\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t}\n\n\t\teventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\n\t\tthis.viewLayout.onConfigurationChanged(e);\n\n\t\tif (restorePreviousViewportStart && previousViewportStartModelPosition) {\n\t\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\n\t\t\tconst viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\tthis.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\n\t\t}\n\t}\n\n\tprivate _registerModelEvents(): void {\n\n\t\tthis._register(this.model.onDidChangeRawContentFast((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\n\t\t\t\tlet hadOtherModelChange = false;\n\t\t\t\tlet hadModelLineChangeThatChangedLineMapping = false;\n\n\t\t\t\tconst changes = e.changes;\n\t\t\t\tconst versionId = e.versionId;\n\n\t\t\t\tfor (let j = 0, lenJ = changes.length; j < lenJ; j++) {\n\t\t\t\t\tconst change = changes[j];\n\n\t\t\t\t\tswitch (change.changeType) {\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.Flush: {\n\t\t\t\t\t\t\tthis.lines.onModelFlushed();\n\t\t\t\t\t\t\teventsCollector.emit(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\t\t\tthis.decorations.reset();\n\t\t\t\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesDeleted: {\n\t\t\t\t\t\t\tconst linesDeletedEvent = this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n\t\t\t\t\t\t\tif (linesDeletedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emit(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LinesInserted: {\n\t\t\t\t\t\t\tconst linesInsertedEvent = this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, change.detail);\n\t\t\t\t\t\t\tif (linesInsertedEvent !== null) {\n\t\t\t\t\t\t\t\teventsCollector.emit(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thadOtherModelChange = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.LineChanged: {\n\t\t\t\t\t\t\tconst [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this.lines.onModelLineChanged(versionId, change.lineNumber, change.detail);\n\t\t\t\t\t\t\thadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n\t\t\t\t\t\t\tif (linesChangedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emit(linesChangedEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesInsertedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emit(linesInsertedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (linesDeletedEvent) {\n\t\t\t\t\t\t\t\teventsCollector.emit(linesDeletedEvent);\n\t\t\t\t\t\t\t\tthis.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase textModelEvents.RawContentChangedType.EOLChanged: {\n\t\t\t\t\t\t\t// Nothing to do. The new version will be accepted below\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.lines.acceptVersionId(versionId);\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\n\t\t\t\tif (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n\t\t\t\t\teventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t\t\t\tthis.decorations.onLineMappingChanged();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\n\t\t\t// Update the configuration and reset the centered view line\n\t\t\tthis.viewportStartLine = -1;\n\t\t\tthis.configuration.setMaxLineNumber(this.model.getLineCount());\n\n\t\t\t// Recover viewport\n\t\t\tif (!this.hasFocus && this.model.getAttachedEditorCount() >= 2 && this.viewportStartLineTrackedRange) {\n\t\t\t\tconst modelRange = this.model._getTrackedRange(this.viewportStartLineTrackedRange);\n\t\t\t\tif (modelRange) {\n\t\t\t\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n\t\t\t\t\tconst viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n\t\t\t\t\tthis.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeTokens((e) => {\n\t\t\tlet viewRanges: { fromLineNumber: number; toLineNumber: number; }[] = [];\n\t\t\tfor (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst modelRange = e.ranges[j];\n\t\t\t\tconst viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n\t\t\t\tconst viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n\t\t\t\tviewRanges[j] = {\n\t\t\t\t\tfromLineNumber: viewStartLineNumber,\n\t\t\t\t\ttoLineNumber: viewEndLineNumber\n\t\t\t\t};\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\teventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\n\t\t\tif (e.tokenizationSupportChanged) {\n\t\t\t\tthis._tokenizeViewportSoon.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeLanguageConfiguration((e) => {\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\teventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeOptions((e) => {\n\t\t\t// A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n\t\t\tif (this.lines.setTabSize(this.model.getOptions().tabSize)) {\n\t\t\t\tthis.decorations.onLineMappingChanged();\n\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\ttry {\n\t\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\t\teventsCollector.emit(new viewEvents.ViewFlushedEvent());\n\t\t\t\t\teventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t\t\t} finally {\n\t\t\t\t\tthis._endEmit();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.model.onDidChangeDecorations((e) => {\n\t\t\tthis.decorations.onModelDecorationsChanged();\n\t\t\ttry {\n\t\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t\t} finally {\n\t\t\t\tthis._endEmit();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic setHiddenAreas(ranges: Range[]): void {\n\t\ttry {\n\t\t\tconst eventsCollector = this._beginEmit();\n\t\t\tlet lineMappingChanged = this.lines.setHiddenAreas(ranges);\n\t\t\tif (lineMappingChanged) {\n\t\t\t\teventsCollector.emit(new viewEvents.ViewFlushedEvent());\n\t\t\t\teventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\n\t\t\t\teventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\n\t\t\t\tthis.decorations.onLineMappingChanged();\n\t\t\t\tthis.viewLayout.onFlushed(this.getLineCount());\n\t\t\t\tthis.viewLayout.onHeightMaybeChanged();\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._endEmit();\n\t\t}\n\t}\n\n\tpublic getVisibleRanges(): Range[] {\n\t\tconst visibleViewRange = this.getCompletelyVisibleViewRange();\n\t\tconst visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n\t\tconst hiddenAreas = this.lines.getHiddenAreas();\n\n\t\tif (hiddenAreas.length === 0) {\n\t\t\treturn [visibleRange];\n\t\t}\n\n\t\tlet result: Range[] = [], resultLen = 0;\n\t\tlet startLineNumber = visibleRange.startLineNumber;\n\t\tlet startColumn = visibleRange.startColumn;\n\t\tlet endLineNumber = visibleRange.endLineNumber;\n\t\tlet endColumn = visibleRange.endColumn;\n\t\tfor (let i = 0, len = hiddenAreas.length; i < len; i++) {\n\t\t\tconst hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n\t\t\tconst hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n\n\t\t\tif (hiddenEndLineNumber < startLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenStartLineNumber > endLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (startLineNumber < hiddenStartLineNumber) {\n\t\t\t\tresult[resultLen++] = new Range(\n\t\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\t\thiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1)\n\t\t\t\t);\n\t\t\t}\n\t\t\tstartLineNumber = hiddenEndLineNumber + 1;\n\t\t\tstartColumn = 1;\n\t\t}\n\n\t\tif (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n\t\t\tresult[resultLen++] = new Range(\n\t\t\t\tstartLineNumber, startColumn,\n\t\t\t\tendLineNumber, endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getCompletelyVisibleViewRange(): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportData();\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range {\n\t\tconst partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n\t\tconst startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n\t\tconst endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n\n\t\treturn new Range(\n\t\t\tstartViewLineNumber, this.getLineMinColumn(startViewLineNumber),\n\t\t\tendViewLineNumber, this.getLineMaxColumn(endViewLineNumber)\n\t\t);\n\t}\n\n\tpublic saveState(): editorCommon.IViewState {\n\t\tconst compatViewState = this.viewLayout.saveState();\n\n\t\tconst scrollTop = compatViewState.scrollTop;\n\t\tconst firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n\t\tconst firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n\t\tconst firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n\n\t\treturn {\n\t\t\tscrollLeft: compatViewState.scrollLeft,\n\t\t\tfirstPosition: firstPosition,\n\t\t\tfirstPositionDeltaTop: firstPositionDeltaTop\n\t\t};\n\t}\n\n\tpublic reduceRestoreState(state: editorCommon.IViewState): { scrollLeft: number; scrollTop: number; } {\n\t\tif (typeof state.firstPosition === 'undefined') {\n\t\t\t// This is a view state serialized by an older version\n\t\t\treturn this._reduceRestoreStateCompatibility(state);\n\t\t}\n\n\t\tconst modelPosition = this.model.validatePosition(state.firstPosition);\n\t\tconst viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\t\tconst scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: scrollTop\n\t\t};\n\t}\n\n\tprivate _reduceRestoreStateCompatibility(state: editorCommon.IViewState): { scrollLeft: number; scrollTop: number; } {\n\t\treturn {\n\t\t\tscrollLeft: state.scrollLeft,\n\t\t\tscrollTop: state.scrollTopWithoutViewZones!\n\t\t};\n\t}\n\n\tprivate getTabSize(): number {\n\t\treturn this.model.getOptions().tabSize;\n\t}\n\n\tpublic getOptions(): TextModelResolvedOptions {\n\t\treturn this.model.getOptions();\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this.lines.getViewLineCount();\n\t}\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tpublic setViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void {\n\t\tthis.lines.warmUpLookupCache(startLineNumber, endLineNumber);\n\n\t\tthis.viewportStartLine = startLineNumber;\n\t\tlet position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\n\t\tthis.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges);\n\t\tconst viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n\t\tconst scrollTop = this.viewLayout.getCurrentScrollTop();\n\t\tthis.viewportStartLineDelta = scrollTop - viewportStartLineTop;\n\t}\n\n\tpublic getActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n\t}\n\n\tpublic getLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[] {\n\t\treturn this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this.lines.getViewLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this.lines.getViewLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn this.lines.getViewLineMinColumn(lineNumber);\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this.lines.getViewLineMaxColumn(lineNumber);\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tpublic getDecorationsInViewport(visibleRange: Range): ViewModelDecoration[] {\n\t\treturn this.decorations.getDecorationsViewportData(visibleRange).decorations;\n\t}\n\n\tpublic getViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData {\n\t\tlet mightContainRTL = this.model.mightContainRTL();\n\t\tlet mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n\t\tlet tabSize = this.getTabSize();\n\t\tlet lineData = this.lines.getViewLineData(lineNumber);\n\t\tlet allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n\t\tlet inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n\n\t\treturn new ViewLineRenderingData(\n\t\t\tlineData.minColumn,\n\t\t\tlineData.maxColumn,\n\t\t\tlineData.content,\n\t\t\tlineData.continuesWithWrappedLine,\n\t\t\tmightContainRTL,\n\t\t\tmightContainNonBasicASCII,\n\t\t\tlineData.tokens,\n\t\t\tinlineDecorations,\n\t\t\ttabSize\n\t\t);\n\t}\n\n\tpublic getViewLineData(lineNumber: number): ViewLineData {\n\t\treturn this.lines.getViewLineData(lineNumber);\n\t}\n\n\tpublic getMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData {\n\t\tlet result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n\t\treturn new MinimapLinesRenderingData(\n\t\t\tthis.getTabSize(),\n\t\t\tresult\n\t\t);\n\t}\n\n\tpublic getAllOverviewRulerDecorations(theme: ITheme): IOverviewRulerDecorations {\n\t\treturn this.lines.getAllOverviewRulerDecorations(this.editorId, this.configuration.editor.readOnly, theme);\n\t}\n\n\tpublic invalidateOverviewRulerColorCache(): void {\n\t\tconst decorations = this.model.getOverviewRulerDecorations();\n\t\tfor (const decoration of decorations) {\n\t\t\tconst opts = <ModelDecorationOverviewRulerOptions>decoration.options.overviewRuler;\n\t\t\tif (opts) {\n\t\t\t\topts.invalidateCachedColor();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference): string {\n\t\tconst modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n\t\treturn this.model.getValueInRange(modelRange, eol);\n\t}\n\n\tpublic getModelLineMaxColumn(modelLineNumber: number): number {\n\t\treturn this.model.getLineMaxColumn(modelLineNumber);\n\t}\n\n\tpublic validateModelPosition(position: IPosition): Position {\n\t\treturn this.model.validatePosition(position);\n\t}\n\n\tpublic validateModelRange(range: IRange): Range {\n\t\treturn this.model.validateRange(range);\n\t}\n\n\tpublic deduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position {\n\t\tconst modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n\t\tif (this.model.getEOL().length === 2) {\n\t\t\t// This model uses CRLF, so the delta must take that into account\n\t\t\tif (deltaOffset < 0) {\n\t\t\t\tdeltaOffset -= lineFeedCnt;\n\t\t\t} else {\n\t\t\t\tdeltaOffset += lineFeedCnt;\n\t\t\t}\n\t\t}\n\n\t\tconst modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n\t\tconst resultOffset = modelAnchorOffset + deltaOffset;\n\t\treturn this.model.getPositionAt(resultOffset);\n\t}\n\n\tpublic getEOL(): string {\n\t\treturn this.model.getEOL();\n\t}\n\n\tpublic getPlainTextToCopy(ranges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[] {\n\t\tconst newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n\n\t\tranges = ranges.slice(0);\n\t\tranges.sort(Range.compareRangesUsingStarts);\n\t\tconst nonEmptyRanges = ranges.filter((r) => !r.isEmpty());\n\n\t\tif (nonEmptyRanges.length === 0) {\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\tconst modelLineNumbers = ranges.map((r) => {\n\t\t\t\tconst viewLineStart = new Position(r.startLineNumber, 1);\n\t\t\t\treturn this.coordinatesConverter.convertViewPositionToModelPosition(viewLineStart).lineNumber;\n\t\t\t});\n\n\t\t\tlet result = '';\n\t\t\tfor (let i = 0; i < modelLineNumbers.length; i++) {\n\t\t\t\tif (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tlet result: string[] = [];\n\t\tfor (const nonEmptyRange of nonEmptyRanges) {\n\t\t\tresult.push(this.getValueInRange(nonEmptyRange, forceCRLF ? EndOfLinePreference.CRLF : EndOfLinePreference.TextDefined));\n\t\t}\n\t\treturn result.length === 1 ? result[0] : result;\n\t}\n\n\tpublic getHTMLToCopy(viewRanges: Range[], emptySelectionClipboard: boolean): string | null {\n\t\tif (this.model.getLanguageIdentifier().id === LanguageId.PlainText) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (viewRanges.length !== 1) {\n\t\t\t// no multiple selection support at this time\n\t\t\treturn null;\n\t\t}\n\n\t\tlet range = this.coordinatesConverter.convertViewRangeToModelRange(viewRanges[0]);\n\t\tif (range.isEmpty()) {\n\t\t\tif (!emptySelectionClipboard) {\n\t\t\t\t// nothing to copy\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlet lineNumber = range.startLineNumber;\n\t\t\trange = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n\t\t}\n\n\t\tconst fontInfo = this.configuration.editor.fontInfo;\n\t\tconst colorMap = this._getColorMap();\n\n\t\treturn (\n\t\t\t`<div style=\"`\n\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t+ `font-family: ${fontInfo.fontFamily};`\n\t\t\t+ `font-weight: ${fontInfo.fontWeight};`\n\t\t\t+ `font-size: ${fontInfo.fontSize}px;`\n\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t+ `white-space: pre;`\n\t\t\t+ `\">`\n\t\t\t+ this._getHTMLToCopy(range, colorMap)\n\t\t\t+ '</div>'\n\t\t);\n\t}\n\n\tprivate _getHTMLToCopy(modelRange: Range, colorMap: string[]): string {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = this.getTabSize();\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = this.model.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getColorMap(): string[] {\n\t\tlet colorMap = TokenizationRegistry.getColorMap();\n\t\tlet result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"]}]}