{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/rename/rename.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/rename/rename.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar renameInputField_1 = require(\"./renameInputField\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar aria_1 = require(\"vs/base/browser/ui/aria/aria\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar messageController_1 = require(\"vs/editor/contrib/message/messageController\");\nvar editorState_1 = require(\"vs/editor/browser/core/editorState\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar bulkEditService_1 = require(\"vs/editor/browser/services/bulkEditService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nvar RenameSkeleton = /** @class */ (function () {\n    function RenameSkeleton(model, position) {\n        this.model = model;\n        this.position = position;\n        this._providers = modes_1.RenameProviderRegistry.ordered(model);\n    }\n    RenameSkeleton.prototype.hasProvider = function () {\n        return this._providers.length > 0;\n    };\n    RenameSkeleton.prototype.resolveRenameLocation = function (token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var firstProvider, res, word;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        firstProvider = this._providers[0];\n                        if (!firstProvider) {\n                            return [2 /*return*/, undefined];\n                        }\n                        if (!firstProvider.resolveRenameLocation) return [3 /*break*/, 2];\n                        return [4 /*yield*/, firstProvider.resolveRenameLocation(this.model, this.position, token)];\n                    case 1:\n                        res = _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        if (!res) {\n                            word = this.model.getWordAtPosition(this.position);\n                            if (word) {\n                                return [2 /*return*/, {\n                                        range: new range_1.Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),\n                                        text: word.word\n                                    }];\n                            }\n                        }\n                        return [2 /*return*/, res];\n                }\n            });\n        });\n    };\n    RenameSkeleton.prototype.provideRenameEdits = function (newName, i, rejects, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var provider, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        provider = this._providers[i];\n                        if (!provider) {\n                            return [2 /*return*/, {\n                                    edits: [],\n                                    rejectReason: rejects.join('\\n')\n                                }];\n                        }\n                        return [4 /*yield*/, provider.provideRenameEdits(this.model, this.position, newName, token)];\n                    case 1:\n                        result = _a.sent();\n                        if (!result) {\n                            return [2 /*return*/, this.provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', \"No result.\")), token)];\n                        }\n                        else if (result.rejectReason) {\n                            return [2 /*return*/, this.provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token)];\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    return RenameSkeleton;\n}());\nfunction rename(model, position, newName) {\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/, new RenameSkeleton(model, position).provideRenameEdits(newName, 0, [], cancellation_1.CancellationToken.None)];\n        });\n    });\n}\nexports.rename = rename;\n// ---  register actions and commands\nvar RenameController = /** @class */ (function (_super) {\n    tslib_1.__extends(RenameController, _super);\n    function RenameController(editor, _notificationService, _bulkEditService, _progressService, _contextKeyService, _themeService) {\n        var _this = _super.call(this) || this;\n        _this.editor = editor;\n        _this._notificationService = _notificationService;\n        _this._bulkEditService = _bulkEditService;\n        _this._progressService = _progressService;\n        _this._contextKeyService = _contextKeyService;\n        _this._themeService = _themeService;\n        _this._renameOperationIdPool = 1;\n        _this._register(_this.editor.onDidChangeModel(function () { return _this.onModelChanged(); }));\n        _this._register(_this.editor.onDidChangeModelLanguage(function () { return _this.onModelChanged(); }));\n        _this._register(_this.editor.onDidChangeCursorSelection(function () { return _this.onModelChanged(); }));\n        return _this;\n    }\n    RenameController.get = function (editor) {\n        return editor.getContribution(RenameController.ID);\n    };\n    Object.defineProperty(RenameController.prototype, \"renameInputField\", {\n        get: function () {\n            if (!this._renameInputField) {\n                this._renameInputField = this._register(new renameInputField_1.RenameInputField(this.editor, this._themeService, this._contextKeyService));\n            }\n            return this._renameInputField;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RenameController.prototype.getId = function () {\n        return RenameController.ID;\n    };\n    RenameController.prototype.run = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var id;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                if (this._activeRename) {\n                    this._activeRename.operation.cancel();\n                }\n                id = this._renameOperationIdPool++;\n                this._activeRename = {\n                    id: id,\n                    operation: async_1.createCancelablePromise(function (token) { return _this.doRename(token, id); })\n                };\n                return [2 /*return*/, this._activeRename.operation];\n            });\n        });\n    };\n    RenameController.prototype.doRename = function (token, id) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var position, skeleton, loc, resolveLocationOperation, e_1, selection, selectionStart, selectionEnd;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.editor.hasModel()) {\n                            return [2 /*return*/, undefined];\n                        }\n                        position = this.editor.getPosition();\n                        skeleton = new RenameSkeleton(this.editor.getModel(), position);\n                        if (!skeleton.hasProvider()) {\n                            return [2 /*return*/, undefined];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        resolveLocationOperation = skeleton.resolveRenameLocation(token);\n                        this._progressService.showWhile(resolveLocationOperation, 250);\n                        return [4 /*yield*/, resolveLocationOperation];\n                    case 2:\n                        loc = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        messageController_1.MessageController.get(this.editor).showMessage(e_1 || nls.localize('resolveRenameLocationFailed', \"An unknown error occurred while resolving rename location\"), position);\n                        return [2 /*return*/, undefined];\n                    case 4:\n                        if (!loc) {\n                            return [2 /*return*/, undefined];\n                        }\n                        if (loc.rejectReason) {\n                            messageController_1.MessageController.get(this.editor).showMessage(loc.rejectReason, position);\n                            return [2 /*return*/, undefined];\n                        }\n                        if (!this._activeRename || this._activeRename.id !== id) {\n                            return [2 /*return*/, undefined];\n                        }\n                        selection = this.editor.getSelection();\n                        selectionStart = 0;\n                        selectionEnd = loc.text.length;\n                        if (!range_1.Range.isEmpty(selection) && !range_1.Range.spansMultipleLines(selection) && range_1.Range.containsRange(loc.range, selection)) {\n                            selectionStart = Math.max(0, selection.startColumn - loc.range.startColumn);\n                            selectionEnd = Math.min(loc.range.endColumn, selection.endColumn) - loc.range.startColumn;\n                        }\n                        return [2 /*return*/, this.renameInputField.getInput(loc.range, loc.text, selectionStart, selectionEnd).then(function (newNameOrFocusFlag) {\n                                if (typeof newNameOrFocusFlag === 'boolean') {\n                                    if (newNameOrFocusFlag) {\n                                        _this.editor.focus();\n                                    }\n                                    return undefined;\n                                }\n                                _this.editor.focus();\n                                var state = new editorState_1.EditorState(_this.editor, editorState_1.CodeEditorStateFlag.Position | editorState_1.CodeEditorStateFlag.Value | editorState_1.CodeEditorStateFlag.Selection | editorState_1.CodeEditorStateFlag.Scroll);\n                                var renameOperation = Promise.resolve(skeleton.provideRenameEdits(newNameOrFocusFlag, 0, [], token).then(function (result) {\n                                    if (!_this.editor.hasModel()) {\n                                        return undefined;\n                                    }\n                                    if (result.rejectReason) {\n                                        if (state.validate(_this.editor)) {\n                                            messageController_1.MessageController.get(_this.editor).showMessage(result.rejectReason, _this.editor.getPosition());\n                                        }\n                                        else {\n                                            _this._notificationService.info(result.rejectReason);\n                                        }\n                                        return undefined;\n                                    }\n                                    return _this._bulkEditService.apply(result, { editor: _this.editor }).then(function (result) {\n                                        // alert\n                                        if (result.ariaSummary) {\n                                            aria_1.alert(nls.localize('aria', \"Successfully renamed '{0}' to '{1}'. Summary: {2}\", loc.text, newNameOrFocusFlag, result.ariaSummary));\n                                        }\n                                    });\n                                }, function (err) {\n                                    _this._notificationService.error(nls.localize('rename.failed', \"Rename failed to execute.\"));\n                                    return Promise.reject(err);\n                                }));\n                                _this._progressService.showWhile(renameOperation, 250);\n                                return renameOperation;\n                            })];\n                }\n            });\n        });\n    };\n    RenameController.prototype.acceptRenameInput = function () {\n        if (this._renameInputField) {\n            this._renameInputField.acceptInput();\n        }\n    };\n    RenameController.prototype.cancelRenameInput = function () {\n        if (this._renameInputField) {\n            this._renameInputField.cancelInput(true);\n        }\n    };\n    RenameController.prototype.onModelChanged = function () {\n        if (this._activeRename) {\n            this._activeRename.operation.cancel();\n            this._activeRename = undefined;\n        }\n    };\n    RenameController.ID = 'editor.contrib.renameController';\n    RenameController = tslib_1.__decorate([\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, bulkEditService_1.IBulkEditService),\n        tslib_1.__param(3, progress_1.IProgressService),\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, themeService_1.IThemeService)\n    ], RenameController);\n    return RenameController;\n}(lifecycle_1.Disposable));\n// ---- action implementation\nvar RenameAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RenameAction, _super);\n    function RenameAction() {\n        return _super.call(this, {\n            id: 'editor.action.rename',\n            label: nls.localize('rename.label', \"Rename Symbol\"),\n            alias: 'Rename Symbol',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasRenameProvider),\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyCode.F2,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            },\n            menuOpts: {\n                group: '1_modification',\n                order: 1.1\n            }\n        }) || this;\n    }\n    RenameAction.prototype.runCommand = function (accessor, args) {\n        var _this = this;\n        var editorService = accessor.get(codeEditorService_1.ICodeEditorService);\n        var _a = Array.isArray(args) && args || [undefined, undefined], uri = _a[0], pos = _a[1];\n        if (uri_1.URI.isUri(uri) && position_1.Position.isIPosition(pos)) {\n            return editorService.openCodeEditor({ resource: uri }, editorService.getActiveCodeEditor()).then(function (editor) {\n                if (!editor) {\n                    return;\n                }\n                editor.setPosition(pos);\n                editor.invokeWithinContext(function (accessor) {\n                    _this.reportTelemetry(accessor, editor);\n                    return _this.run(accessor, editor);\n                });\n            }, errors_1.onUnexpectedError);\n        }\n        return _super.prototype.runCommand.call(this, accessor, args);\n    };\n    RenameAction.prototype.run = function (accessor, editor) {\n        var controller = RenameController.get(editor);\n        if (controller) {\n            return controller.run();\n        }\n        return Promise.resolve();\n    };\n    return RenameAction;\n}(editorExtensions_1.EditorAction));\nexports.RenameAction = RenameAction;\neditorExtensions_1.registerEditorContribution(RenameController);\neditorExtensions_1.registerEditorAction(RenameAction);\nvar RenameCommand = editorExtensions_1.EditorCommand.bindToContribution(RenameController.get);\neditorExtensions_1.registerEditorCommand(new RenameCommand({\n    id: 'acceptRenameInput',\n    precondition: renameInputField_1.CONTEXT_RENAME_INPUT_VISIBLE,\n    handler: function (x) { return x.acceptRenameInput(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 99,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.Enter\n    }\n}));\neditorExtensions_1.registerEditorCommand(new RenameCommand({\n    id: 'cancelRenameInput',\n    precondition: renameInputField_1.CONTEXT_RENAME_INPUT_VISIBLE,\n    handler: function (x) { return x.cancelRenameInput(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 99,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.Escape,\n        secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n    }\n}));\n// ---- api bridge command\neditorExtensions_1.registerDefaultLanguageCommand('_executeDocumentRenameProvider', function (model, position, args) {\n    var newName = args.newName;\n    if (typeof newName !== 'string') {\n        throw errors_1.illegalArgument('newName');\n    }\n    return rename(model, position, newName);\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/rename/rename.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/rename/rename.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { illegalArgument, onUnexpectedError } from 'vs/base/common/errors';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { IContextKeyService, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { registerEditorAction, registerEditorContribution, ServicesAccessor, EditorAction, EditorCommand, registerEditorCommand, registerDefaultLanguageCommand } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { RenameInputField, CONTEXT_RENAME_INPUT_VISIBLE } from './renameInputField';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { WorkspaceEdit, RenameProviderRegistry, RenameProvider, RenameLocation, Rejection } from 'vs/editor/common/modes';\nimport { Position, IPosition } from 'vs/editor/common/core/position';\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { Range } from 'vs/editor/common/core/range';\nimport { MessageController } from 'vs/editor/contrib/message/messageController';\nimport { EditorState, CodeEditorStateFlag } from 'vs/editor/browser/core/editorState';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\n\nclass RenameSkeleton {\n\n\tprivate readonly _providers: RenameProvider[];\n\n\tconstructor(\n\t\tprivate readonly model: ITextModel,\n\t\tprivate readonly position: Position\n\t) {\n\t\tthis._providers = RenameProviderRegistry.ordered(model);\n\t}\n\n\thasProvider() {\n\t\treturn this._providers.length > 0;\n\t}\n\n\tasync resolveRenameLocation(token: CancellationToken): Promise<RenameLocation & Rejection | null | undefined> {\n\t\tconst firstProvider = this._providers[0];\n\t\tif (!firstProvider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet res: RenameLocation & Rejection | null | undefined;\n\t\tif (firstProvider.resolveRenameLocation) {\n\t\t\tres = await firstProvider.resolveRenameLocation(this.model, this.position, token);\n\t\t}\n\n\t\tif (!res) {\n\t\t\tconst word = this.model.getWordAtPosition(this.position);\n\t\t\tif (word) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(this.position.lineNumber, word.startColumn, this.position.lineNumber, word.endColumn),\n\t\t\t\t\ttext: word.word\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tasync provideRenameEdits(newName: string, i: number, rejects: string[], token: CancellationToken): Promise<WorkspaceEdit & Rejection> {\n\t\tconst provider = this._providers[i];\n\t\tif (!provider) {\n\t\t\treturn {\n\t\t\t\tedits: [],\n\t\t\t\trejectReason: rejects.join('\\n')\n\t\t\t};\n\t\t}\n\n\t\tconst result = await provider.provideRenameEdits(this.model, this.position, newName, token);\n\t\tif (!result) {\n\t\t\treturn this.provideRenameEdits(newName, i + 1, rejects.concat(nls.localize('no result', \"No result.\")), token);\n\t\t} else if (result.rejectReason) {\n\t\t\treturn this.provideRenameEdits(newName, i + 1, rejects.concat(result.rejectReason), token);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport async function rename(model: ITextModel, position: Position, newName: string): Promise<WorkspaceEdit & Rejection> {\n\treturn new RenameSkeleton(model, position).provideRenameEdits(newName, 0, [], CancellationToken.None);\n}\n\n// ---  register actions and commands\n\nclass RenameController extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.renameController';\n\n\tpublic static get(editor: ICodeEditor): RenameController {\n\t\treturn editor.getContribution<RenameController>(RenameController.ID);\n\t}\n\n\tprivate _renameInputField?: RenameInputField;\n\tprivate _renameOperationIdPool = 1;\n\n\tprivate _activeRename?: {\n\t\treadonly id: number;\n\t\treadonly operation: CancelablePromise<void>;\n\t};\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n\t\tthis._register(this.editor.onDidChangeModelLanguage(() => this.onModelChanged()));\n\t\tthis._register(this.editor.onDidChangeCursorSelection(() => this.onModelChanged()));\n\t}\n\n\tprivate get renameInputField(): RenameInputField {\n\t\tif (!this._renameInputField) {\n\t\t\tthis._renameInputField = this._register(new RenameInputField(this.editor, this._themeService, this._contextKeyService));\n\t\t}\n\t\treturn this._renameInputField;\n\t}\n\n\tgetId(): string {\n\t\treturn RenameController.ID;\n\t}\n\n\tasync run(): Promise<void> {\n\t\tif (this._activeRename) {\n\t\t\tthis._activeRename.operation.cancel();\n\t\t}\n\n\t\tconst id = this._renameOperationIdPool++;\n\t\tthis._activeRename = {\n\t\t\tid,\n\t\t\toperation: createCancelablePromise(token => this.doRename(token, id))\n\t\t};\n\t\treturn this._activeRename.operation;\n\t}\n\n\tprivate async doRename(token: CancellationToken, id: number): Promise<void> {\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst position = this.editor.getPosition();\n\t\tconst skeleton = new RenameSkeleton(this.editor.getModel(), position);\n\n\t\tif (!skeleton.hasProvider()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet loc: RenameLocation & Rejection | null | undefined;\n\t\ttry {\n\t\t\tconst resolveLocationOperation = skeleton.resolveRenameLocation(token);\n\t\t\tthis._progressService.showWhile(resolveLocationOperation, 250);\n\t\t\tloc = await resolveLocationOperation;\n\t\t} catch (e) {\n\t\t\tMessageController.get(this.editor).showMessage(e || nls.localize('resolveRenameLocationFailed', \"An unknown error occurred while resolving rename location\"), position);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!loc) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (loc.rejectReason) {\n\t\t\tMessageController.get(this.editor).showMessage(loc.rejectReason, position);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this._activeRename || this._activeRename.id !== id) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet selection = this.editor.getSelection();\n\t\tlet selectionStart = 0;\n\t\tlet selectionEnd = loc.text.length;\n\n\t\tif (!Range.isEmpty(selection) && !Range.spansMultipleLines(selection) && Range.containsRange(loc.range, selection)) {\n\t\t\tselectionStart = Math.max(0, selection.startColumn - loc.range.startColumn);\n\t\t\tselectionEnd = Math.min(loc.range.endColumn, selection.endColumn) - loc.range.startColumn;\n\t\t}\n\n\t\treturn this.renameInputField.getInput(loc.range, loc.text, selectionStart, selectionEnd).then(newNameOrFocusFlag => {\n\n\t\t\tif (typeof newNameOrFocusFlag === 'boolean') {\n\t\t\t\tif (newNameOrFocusFlag) {\n\t\t\t\t\tthis.editor.focus();\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tthis.editor.focus();\n\n\t\t\tconst state = new EditorState(this.editor, CodeEditorStateFlag.Position | CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection | CodeEditorStateFlag.Scroll);\n\n\t\t\tconst renameOperation = Promise.resolve(skeleton.provideRenameEdits(newNameOrFocusFlag, 0, [], token).then(result => {\n\n\t\t\t\tif (!this.editor.hasModel()) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tif (result.rejectReason) {\n\t\t\t\t\tif (state.validate(this.editor)) {\n\t\t\t\t\t\tMessageController.get(this.editor).showMessage(result.rejectReason, this.editor.getPosition());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._notificationService.info(result.rejectReason);\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn this._bulkEditService.apply(result, { editor: this.editor }).then(result => {\n\t\t\t\t\t// alert\n\t\t\t\t\tif (result.ariaSummary) {\n\t\t\t\t\t\talert(nls.localize('aria', \"Successfully renamed '{0}' to '{1}'. Summary: {2}\", loc!.text, newNameOrFocusFlag, result.ariaSummary));\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}, err => {\n\t\t\t\tthis._notificationService.error(nls.localize('rename.failed', \"Rename failed to execute.\"));\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}));\n\n\t\t\tthis._progressService.showWhile(renameOperation, 250);\n\t\t\treturn renameOperation;\n\n\t\t});\n\t}\n\n\tpublic acceptRenameInput(): void {\n\t\tif (this._renameInputField) {\n\t\t\tthis._renameInputField.acceptInput();\n\t\t}\n\t}\n\n\tpublic cancelRenameInput(): void {\n\t\tif (this._renameInputField) {\n\t\t\tthis._renameInputField.cancelInput(true);\n\t\t}\n\t}\n\n\tprivate onModelChanged(): void {\n\t\tif (this._activeRename) {\n\t\t\tthis._activeRename.operation.cancel();\n\t\t\tthis._activeRename = undefined;\n\t\t}\n\t}\n}\n\n// ---- action implementation\n\nexport class RenameAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.rename',\n\t\t\tlabel: nls.localize('rename.label', \"Rename Symbol\"),\n\t\t\talias: 'Rename Symbol',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasRenameProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyCode.F2,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 1.1\n\t\t\t}\n\t\t});\n\t}\n\n\trunCommand(accessor: ServicesAccessor, args: [URI, IPosition]): void | Promise<void> {\n\t\tconst editorService = accessor.get(ICodeEditorService);\n\t\tconst [uri, pos] = Array.isArray(args) && args || [undefined, undefined];\n\n\t\tif (URI.isUri(uri) && Position.isIPosition(pos)) {\n\t\t\treturn editorService.openCodeEditor({ resource: uri }, editorService.getActiveCodeEditor()).then(editor => {\n\t\t\t\tif (!editor) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\teditor.setPosition(pos);\n\t\t\t\teditor.invokeWithinContext(accessor => {\n\t\t\t\t\tthis.reportTelemetry(accessor, editor);\n\t\t\t\t\treturn this.run(accessor, editor);\n\t\t\t\t});\n\t\t\t}, onUnexpectedError);\n\t\t}\n\n\t\treturn super.runCommand(accessor, args);\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = RenameController.get(editor);\n\t\tif (controller) {\n\t\t\treturn controller.run();\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nregisterEditorContribution(RenameController);\nregisterEditorAction(RenameAction);\n\nconst RenameCommand = EditorCommand.bindToContribution<RenameController>(RenameController.get);\n\nregisterEditorCommand(new RenameCommand({\n\tid: 'acceptRenameInput',\n\tprecondition: CONTEXT_RENAME_INPUT_VISIBLE,\n\thandler: x => x.acceptRenameInput(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 99,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Enter\n\t}\n}));\n\nregisterEditorCommand(new RenameCommand({\n\tid: 'cancelRenameInput',\n\tprecondition: CONTEXT_RENAME_INPUT_VISIBLE,\n\thandler: x => x.cancelRenameInput(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 99,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\n// ---- api bridge command\n\nregisterDefaultLanguageCommand('_executeDocumentRenameProvider', function (model, position, args) {\n\tlet { newName } = args;\n\tif (typeof newName !== 'string') {\n\t\tthrow illegalArgument('newName');\n\t}\n\treturn rename(model, position, newName);\n});\n"]}]}