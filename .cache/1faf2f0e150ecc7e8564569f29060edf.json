{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar textEditorModel_1 = require(\"vs/workbench/common/editor/textEditorModel\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\n/**\n * An editor model whith an in-memory, readonly content that is backed by an existing editor model.\n */\nvar ResourceEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ResourceEditorModel, _super);\n    function ResourceEditorModel(resource, modeService, modelService) {\n        var _this = _super.call(this, modelService, modeService, resource) || this;\n        // TODO@Joao: force this class to dispose the underlying model\n        _this.createdEditorModel = true;\n        return _this;\n    }\n    ResourceEditorModel.prototype.isReadonly = function () {\n        return true;\n    };\n    ResourceEditorModel = tslib_1.__decorate([\n        tslib_1.__param(1, modeService_1.IModeService),\n        tslib_1.__param(2, modelService_1.IModelService)\n    ], ResourceEditorModel);\n    return ResourceEditorModel;\n}(textEditorModel_1.BaseTextEditorModel));\nexports.ResourceEditorModel = ResourceEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorModel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8EAAiF;AAEjF,qEAAqE;AACrE,uEAAuE;AAEvE;;GAEG;AACH;IAAyC,+CAAmB;IAE3D,6BACC,QAAa,EACC,WAAyB,EACxB,YAA2B;QAH3C,YAKC,kBAAM,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC,SAI1C;QAFA,8DAA8D;QAC9D,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;;IAChC,CAAC;IAED,wCAAU,GAAV;QACC,OAAO,IAAI,CAAC;IACb,CAAC;IAfW,mBAAmB;QAI7B,mBAAA,0BAAY,CAAA;QACZ,mBAAA,4BAAa,CAAA;OALH,mBAAmB,CAgB/B;IAAD,0BAAC;CAAA,AAhBD,CAAyC,qCAAmB,GAgB3D;AAhBY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { URI } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\n\n/**\n * An editor model whith an in-memory, readonly content that is backed by an existing editor model.\n */\nexport class ResourceEditorModel extends BaseTextEditorModel {\n\n\tconstructor(\n\t\tresource: URI,\n\t\t@IModeService modeService: IModeService,\n\t\t@IModelService modelService: IModelService\n\t) {\n\t\tsuper(modelService, modeService, resource);\n\n\t\t// TODO@Joao: force this class to dispose the underlying model\n\t\tthis.createdEditorModel = true;\n\t}\n\n\tisReadonly(): boolean {\n\t\treturn true;\n\t}\n}"]}]}