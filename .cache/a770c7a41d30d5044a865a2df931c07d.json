{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(piece, color) {\n        this.piece = piece;\n        this.color = color;\n        this.size_left = 0;\n        this.lf_left = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n    }\n    TreeNode.prototype.next = function () {\n        if (this.right !== exports.SENTINEL) {\n            return leftest(this.right);\n        }\n        var node = this;\n        while (node.parent !== exports.SENTINEL) {\n            if (node.parent.left === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === exports.SENTINEL) {\n            return exports.SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    };\n    TreeNode.prototype.prev = function () {\n        if (this.left !== exports.SENTINEL) {\n            return righttest(this.left);\n        }\n        var node = this;\n        while (node.parent !== exports.SENTINEL) {\n            if (node.parent.right === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === exports.SENTINEL) {\n            return exports.SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    };\n    TreeNode.prototype.detach = function () {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    };\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\nvar NodeColor;\n(function (NodeColor) {\n    NodeColor[NodeColor[\"Black\"] = 0] = \"Black\";\n    NodeColor[NodeColor[\"Red\"] = 1] = \"Red\";\n})(NodeColor = exports.NodeColor || (exports.NodeColor = {}));\nexports.SENTINEL = new TreeNode(null, NodeColor.Black);\nexports.SENTINEL.parent = exports.SENTINEL;\nexports.SENTINEL.left = exports.SENTINEL;\nexports.SENTINEL.right = exports.SENTINEL;\nexports.SENTINEL.color = NodeColor.Black;\nfunction leftest(node) {\n    while (node.left !== exports.SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nexports.leftest = leftest;\nfunction righttest(node) {\n    while (node.right !== exports.SENTINEL) {\n        node = node.right;\n    }\n    return node;\n}\nexports.righttest = righttest;\nfunction calculateSize(node) {\n    if (node === exports.SENTINEL) {\n        return 0;\n    }\n    return node.size_left + node.piece.length + calculateSize(node.right);\n}\nexports.calculateSize = calculateSize;\nfunction calculateLF(node) {\n    if (node === exports.SENTINEL) {\n        return 0;\n    }\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nexports.calculateLF = calculateLF;\nfunction resetSentinel() {\n    exports.SENTINEL.parent = exports.SENTINEL;\n}\nexports.resetSentinel = resetSentinel;\nfunction leftRotate(tree, x) {\n    var y = x.right;\n    // fix size_left\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    x.right = y.left;\n    if (y.left !== exports.SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent;\n    if (x.parent === exports.SENTINEL) {\n        tree.root = y;\n    }\n    else if (x.parent.left === x) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n}\nexports.leftRotate = leftRotate;\nfunction rightRotate(tree, y) {\n    var x = y.left;\n    y.left = x.right;\n    if (x.right !== exports.SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    // fix size_left\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    if (y.parent === exports.SENTINEL) {\n        tree.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n}\nexports.rightRotate = rightRotate;\nfunction rbDelete(tree, z) {\n    var x;\n    var y;\n    if (z.left === exports.SENTINEL) {\n        y = z;\n        x = y.right;\n    }\n    else if (z.right === exports.SENTINEL) {\n        y = z;\n        x = y.left;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n    }\n    if (y === tree.root) {\n        tree.root = x;\n        // if x is null, we are removing the only node\n        x.color = NodeColor.Black;\n        z.detach();\n        resetSentinel();\n        tree.root.parent = exports.SENTINEL;\n        return;\n    }\n    var yWasRed = (y.color === NodeColor.Red);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n        recomputeTreeMetadata(tree, x);\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        // as we make changes to x's hierarchy, update size_left of subtree first\n        recomputeTreeMetadata(tree, x);\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        y.color = z.color;\n        if (z === tree.root) {\n            tree.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== exports.SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== exports.SENTINEL) {\n            y.right.parent = y;\n        }\n        // update metadata\n        // we replace z with y, so in this sub tree, the length change is z.item.length\n        y.size_left = z.size_left;\n        y.lf_left = z.lf_left;\n        recomputeTreeMetadata(tree, y);\n    }\n    z.detach();\n    if (x.parent.left === x) {\n        var newSizeLeft = calculateSize(x);\n        var newLFLeft = calculateLF(x);\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n            var delta = newSizeLeft - x.parent.size_left;\n            var lf_delta = newLFLeft - x.parent.lf_left;\n            x.parent.size_left = newSizeLeft;\n            x.parent.lf_left = newLFLeft;\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\n        }\n    }\n    recomputeTreeMetadata(tree, x.parent);\n    if (yWasRed) {\n        resetSentinel();\n        return;\n    }\n    // RB-DELETE-FIXUP\n    var w;\n    while (x !== tree.root && x.color === NodeColor.Black) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (w.color === NodeColor.Red) {\n                w.color = NodeColor.Black;\n                x.parent.color = NodeColor.Red;\n                leftRotate(tree, x.parent);\n                w = x.parent.right;\n            }\n            if (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n                w.color = NodeColor.Red;\n                x = x.parent;\n            }\n            else {\n                if (w.right.color === NodeColor.Black) {\n                    w.left.color = NodeColor.Black;\n                    w.color = NodeColor.Red;\n                    rightRotate(tree, w);\n                    w = x.parent.right;\n                }\n                w.color = x.parent.color;\n                x.parent.color = NodeColor.Black;\n                w.right.color = NodeColor.Black;\n                leftRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (w.color === NodeColor.Red) {\n                w.color = NodeColor.Black;\n                x.parent.color = NodeColor.Red;\n                rightRotate(tree, x.parent);\n                w = x.parent.left;\n            }\n            if (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n                w.color = NodeColor.Red;\n                x = x.parent;\n            }\n            else {\n                if (w.left.color === NodeColor.Black) {\n                    w.right.color = NodeColor.Black;\n                    w.color = NodeColor.Red;\n                    leftRotate(tree, w);\n                    w = x.parent.left;\n                }\n                w.color = x.parent.color;\n                x.parent.color = NodeColor.Black;\n                w.left.color = NodeColor.Black;\n                rightRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n    }\n    x.color = NodeColor.Black;\n    resetSentinel();\n}\nexports.rbDelete = rbDelete;\nfunction fixInsert(tree, x) {\n    recomputeTreeMetadata(tree, x);\n    while (x !== tree.root && x.parent.color === NodeColor.Red) {\n        if (x.parent === x.parent.parent.left) {\n            var y = x.parent.parent.right;\n            if (y.color === NodeColor.Red) {\n                x.parent.color = NodeColor.Black;\n                y.color = NodeColor.Black;\n                x.parent.parent.color = NodeColor.Red;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(tree, x);\n                }\n                x.parent.color = NodeColor.Black;\n                x.parent.parent.color = NodeColor.Red;\n                rightRotate(tree, x.parent.parent);\n            }\n        }\n        else {\n            var y = x.parent.parent.left;\n            if (y.color === NodeColor.Red) {\n                x.parent.color = NodeColor.Black;\n                y.color = NodeColor.Black;\n                x.parent.parent.color = NodeColor.Red;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(tree, x);\n                }\n                x.parent.color = NodeColor.Black;\n                x.parent.parent.color = NodeColor.Red;\n                leftRotate(tree, x.parent.parent);\n            }\n        }\n    }\n    tree.root.color = NodeColor.Black;\n}\nexports.fixInsert = fixInsert;\nfunction updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n    // node length change or line feed count change\n    while (x !== tree.root && x !== exports.SENTINEL) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lineFeedCntDelta;\n        }\n        x = x.parent;\n    }\n}\nexports.updateTreeMetadata = updateTreeMetadata;\nfunction recomputeTreeMetadata(tree, x) {\n    var delta = 0;\n    var lf_delta = 0;\n    if (x === tree.root) {\n        return;\n    }\n    if (delta === 0) {\n        // go upwards till the node whose left subtree is changed.\n        while (x !== tree.root && x === x.parent.right) {\n            x = x.parent;\n        }\n        if (x === tree.root) {\n            // well, it means we add a node to the end (inorder)\n            return;\n        }\n        // x is the node whose right subtree is changed.\n        x = x.parent;\n        delta = calculateSize(x.left) - x.size_left;\n        lf_delta = calculateLF(x.left) - x.lf_left;\n        x.size_left += delta;\n        x.lf_left += lf_delta;\n    }\n    // go upwards till root. O(logN)\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lf_delta;\n        }\n        x = x.parent;\n    }\n}\nexports.recomputeTreeMetadata = recomputeTreeMetadata;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Piece, PieceTreeBase } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\n\nexport class TreeNode {\n\tparent: TreeNode;\n\tleft: TreeNode;\n\tright: TreeNode;\n\tcolor: NodeColor;\n\n\t// Piece\n\tpiece: Piece;\n\tsize_left: number; // size of the left subtree (not inorder)\n\tlf_left: number; // line feeds cnt in the left subtree (not in order)\n\n\tconstructor(piece: Piece, color: NodeColor) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.size_left = 0;\n\t\tthis.lf_left = 0;\n\t\tthis.parent = this;\n\t\tthis.left = this;\n\t\tthis.right = this;\n\t}\n\n\tpublic next(): TreeNode {\n\t\tif (this.right !== SENTINEL) {\n\t\t\treturn leftest(this.right);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.left === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic prev(): TreeNode {\n\t\tif (this.left !== SENTINEL) {\n\t\t\treturn righttest(this.left);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.right === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic detach(): void {\n\t\tthis.parent = null!;\n\t\tthis.left = null!;\n\t\tthis.right = null!;\n\t}\n}\n\nexport const enum NodeColor {\n\tBlack = 0,\n\tRed = 1,\n}\n\nexport const SENTINEL: TreeNode = new TreeNode(null!, NodeColor.Black);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = NodeColor.Black;\n\nexport function leftest(node: TreeNode): TreeNode {\n\twhile (node.left !== SENTINEL) {\n\t\tnode = node.left;\n\t}\n\treturn node;\n}\n\nexport function righttest(node: TreeNode): TreeNode {\n\twhile (node.right !== SENTINEL) {\n\t\tnode = node.right;\n\t}\n\treturn node;\n}\n\nexport function calculateSize(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.size_left + node.piece.length + calculateSize(node.right);\n}\n\nexport function calculateLF(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\n\nexport function resetSentinel(): void {\n\tSENTINEL.parent = SENTINEL;\n}\n\nexport function leftRotate(tree: PieceTreeBase, x: TreeNode) {\n\tlet y = x.right;\n\n\t// fix size_left\n\ty.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\tx.right = y.left;\n\n\tif (y.left !== SENTINEL) {\n\t\ty.left.parent = x;\n\t}\n\ty.parent = x.parent;\n\tif (x.parent === SENTINEL) {\n\t\ttree.root = y;\n\t} else if (x.parent.left === x) {\n\t\tx.parent.left = y;\n\t} else {\n\t\tx.parent.right = y;\n\t}\n\ty.left = x;\n\tx.parent = y;\n}\n\nexport function rightRotate(tree: PieceTreeBase, y: TreeNode) {\n\tlet x = y.left;\n\ty.left = x.right;\n\tif (x.right !== SENTINEL) {\n\t\tx.right.parent = y;\n\t}\n\tx.parent = y.parent;\n\n\t// fix size_left\n\ty.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\n\tif (y.parent === SENTINEL) {\n\t\ttree.root = x;\n\t} else if (y === y.parent.right) {\n\t\ty.parent.right = x;\n\t} else {\n\t\ty.parent.left = x;\n\t}\n\n\tx.right = y;\n\ty.parent = x;\n}\n\nexport function rbDelete(tree: PieceTreeBase, z: TreeNode) {\n\tlet x: TreeNode;\n\tlet y: TreeNode;\n\n\tif (z.left === SENTINEL) {\n\t\ty = z;\n\t\tx = y.right;\n\t} else if (z.right === SENTINEL) {\n\t\ty = z;\n\t\tx = y.left;\n\t} else {\n\t\ty = leftest(z.right);\n\t\tx = y.right;\n\t}\n\n\tif (y === tree.root) {\n\t\ttree.root = x;\n\n\t\t// if x is null, we are removing the only node\n\t\tx.color = NodeColor.Black;\n\t\tz.detach();\n\t\tresetSentinel();\n\t\ttree.root.parent = SENTINEL;\n\n\t\treturn;\n\t}\n\n\tlet yWasRed = (y.color === NodeColor.Red);\n\n\tif (y === y.parent.left) {\n\t\ty.parent.left = x;\n\t} else {\n\t\ty.parent.right = x;\n\t}\n\n\tif (y === z) {\n\t\tx.parent = y.parent;\n\t\trecomputeTreeMetadata(tree, x);\n\t} else {\n\t\tif (y.parent === z) {\n\t\t\tx.parent = y;\n\t\t} else {\n\t\t\tx.parent = y.parent;\n\t\t}\n\n\t\t// as we make changes to x's hierarchy, update size_left of subtree first\n\t\trecomputeTreeMetadata(tree, x);\n\n\t\ty.left = z.left;\n\t\ty.right = z.right;\n\t\ty.parent = z.parent;\n\t\ty.color = z.color;\n\n\t\tif (z === tree.root) {\n\t\t\ttree.root = y;\n\t\t} else {\n\t\t\tif (z === z.parent.left) {\n\t\t\t\tz.parent.left = y;\n\t\t\t} else {\n\t\t\t\tz.parent.right = y;\n\t\t\t}\n\t\t}\n\n\t\tif (y.left !== SENTINEL) {\n\t\t\ty.left.parent = y;\n\t\t}\n\t\tif (y.right !== SENTINEL) {\n\t\t\ty.right.parent = y;\n\t\t}\n\t\t// update metadata\n\t\t// we replace z with y, so in this sub tree, the length change is z.item.length\n\t\ty.size_left = z.size_left;\n\t\ty.lf_left = z.lf_left;\n\t\trecomputeTreeMetadata(tree, y);\n\t}\n\n\tz.detach();\n\n\tif (x.parent.left === x) {\n\t\tlet newSizeLeft = calculateSize(x);\n\t\tlet newLFLeft = calculateLF(x);\n\t\tif (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n\t\t\tlet delta = newSizeLeft - x.parent.size_left;\n\t\t\tlet lf_delta = newLFLeft - x.parent.lf_left;\n\t\t\tx.parent.size_left = newSizeLeft;\n\t\t\tx.parent.lf_left = newLFLeft;\n\t\t\tupdateTreeMetadata(tree, x.parent, delta, lf_delta);\n\t\t}\n\t}\n\n\trecomputeTreeMetadata(tree, x.parent);\n\n\tif (yWasRed) {\n\t\tresetSentinel();\n\t\treturn;\n\t}\n\n\t// RB-DELETE-FIXUP\n\tlet w: TreeNode;\n\twhile (x !== tree.root && x.color === NodeColor.Black) {\n\t\tif (x === x.parent.left) {\n\t\t\tw = x.parent.right;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tw = x.parent.right;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (w.right.color === NodeColor.Black) {\n\t\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\trightRotate(tree, w);\n\t\t\t\t\tw = x.parent.right;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t} else {\n\t\t\tw = x.parent.left;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tw = x.parent.left;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\n\t\t\t} else {\n\t\t\t\tif (w.left.color === NodeColor.Black) {\n\t\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\tleftRotate(tree, w);\n\t\t\t\t\tw = x.parent.left;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t}\n\t}\n\tx.color = NodeColor.Black;\n\tresetSentinel();\n}\n\nexport function fixInsert(tree: PieceTreeBase, x: TreeNode) {\n\trecomputeTreeMetadata(tree, x);\n\n\twhile (x !== tree.root && x.parent.color === NodeColor.Red) {\n\t\tif (x.parent === x.parent.parent.left) {\n\t\t\tconst y = x.parent.parent.right;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.right) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\tleftRotate(tree, x);\n\t\t\t\t}\n\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t} else {\n\t\t\tconst y = x.parent.parent.left;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.left) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\trightRotate(tree, x);\n\t\t\t\t}\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t}\n\t}\n\n\ttree.root.color = NodeColor.Black;\n}\n\nexport function updateTreeMetadata(tree: PieceTreeBase, x: TreeNode, delta: number, lineFeedCntDelta: number): void {\n\t// node length change or line feed count change\n\twhile (x !== tree.root && x !== SENTINEL) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lineFeedCntDelta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n\nexport function recomputeTreeMetadata(tree: PieceTreeBase, x: TreeNode) {\n\tlet delta = 0;\n\tlet lf_delta = 0;\n\tif (x === tree.root) {\n\t\treturn;\n\t}\n\n\tif (delta === 0) {\n\t\t// go upwards till the node whose left subtree is changed.\n\t\twhile (x !== tree.root && x === x.parent.right) {\n\t\t\tx = x.parent;\n\t\t}\n\n\t\tif (x === tree.root) {\n\t\t\t// well, it means we add a node to the end (inorder)\n\t\t\treturn;\n\t\t}\n\n\t\t// x is the node whose right subtree is changed.\n\t\tx = x.parent;\n\n\t\tdelta = calculateSize(x.left) - x.size_left;\n\t\tlf_delta = calculateLF(x.left) - x.lf_left;\n\t\tx.size_left += delta;\n\t\tx.lf_left += lf_delta;\n\t}\n\n\t// go upwards till root. O(logN)\n\twhile (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lf_delta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n"]}]}