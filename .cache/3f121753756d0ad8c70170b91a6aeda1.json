{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/issue/electron-main/issueService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/issue/electron-main/issueService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/objects\", \"vs/platform/environment/node/argv\", \"electron\", \"vs/platform/launch/electron-main/launchService\", \"vs/platform/diagnostics/electron-main/diagnosticsService\", \"vs/platform/environment/common/environment\", \"vs/base/common/platform\", \"vs/platform/log/common/log\", \"vs/platform/windows/common/windows\"], function (require, exports, nls_1, objects, argv_1, electron_1, launchService_1, diagnosticsService_1, environment_1, platform_1, log_1, windows_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const DEFAULT_BACKGROUND_COLOR = '#1E1E1E';\n    let IssueService = class IssueService {\n        constructor(machineId, userEnv, environmentService, launchService, logService, diagnosticsService, windowsService) {\n            this.machineId = machineId;\n            this.userEnv = userEnv;\n            this.environmentService = environmentService;\n            this.launchService = launchService;\n            this.logService = logService;\n            this.diagnosticsService = diagnosticsService;\n            this.windowsService = windowsService;\n            this.registerListeners();\n        }\n        registerListeners() {\n            electron_1.ipcMain.on('vscode:issueSystemInfoRequest', (event) => {\n                this.getSystemInformation().then(msg => {\n                    event.sender.send('vscode:issueSystemInfoResponse', msg);\n                });\n            });\n            electron_1.ipcMain.on('vscode:issuePerformanceInfoRequest', (event) => {\n                this.getPerformanceInfo().then(msg => {\n                    event.sender.send('vscode:issuePerformanceInfoResponse', msg);\n                });\n            });\n            electron_1.ipcMain.on('vscode:issueReporterConfirmClose', () => {\n                const messageOptions = {\n                    message: nls_1.localize('confirmCloseIssueReporter', \"Your input will not be saved. Are you sure you want to close this window?\"),\n                    type: 'warning',\n                    buttons: [\n                        nls_1.localize('yes', \"Yes\"),\n                        nls_1.localize('cancel', \"Cancel\")\n                    ]\n                };\n                if (this._issueWindow) {\n                    electron_1.dialog.showMessageBox(this._issueWindow, messageOptions, (response) => {\n                        if (response === 0) {\n                            if (this._issueWindow) {\n                                this._issueWindow.destroy();\n                                this._issueWindow = null;\n                            }\n                        }\n                    });\n                }\n            });\n            electron_1.ipcMain.on('vscode:workbenchCommand', (_, commandInfo) => {\n                const { id, from, args } = commandInfo;\n                let parentWindow;\n                switch (from) {\n                    case 'issueReporter':\n                        parentWindow = this._issueParentWindow;\n                        break;\n                    case 'processExplorer':\n                        parentWindow = this._processExplorerParentWindow;\n                        break;\n                    default:\n                        throw new Error(`Unexpected command source: ${from}`);\n                }\n                if (parentWindow) {\n                    parentWindow.webContents.send('vscode:runAction', { id, from, args });\n                }\n            });\n            electron_1.ipcMain.on('vscode:openExternal', (_, arg) => {\n                this.windowsService.openExternal(arg);\n            });\n            electron_1.ipcMain.on('vscode:closeIssueReporter', (event) => {\n                if (this._issueWindow) {\n                    this._issueWindow.close();\n                }\n            });\n            electron_1.ipcMain.on('windowsInfoRequest', (event) => {\n                this.launchService.getMainProcessInfo().then(info => {\n                    event.sender.send('vscode:windowsInfoResponse', info.windows);\n                });\n            });\n        }\n        openReporter(data) {\n            return new Promise(_ => {\n                if (!this._issueWindow) {\n                    this._issueParentWindow = electron_1.BrowserWindow.getFocusedWindow();\n                    if (this._issueParentWindow) {\n                        const position = this.getWindowPosition(this._issueParentWindow, 700, 800);\n                        this._issueWindow = new electron_1.BrowserWindow({\n                            fullscreen: false,\n                            width: position.width,\n                            height: position.height,\n                            minWidth: 300,\n                            minHeight: 200,\n                            x: position.x,\n                            y: position.y,\n                            title: nls_1.localize('issueReporter', \"Issue Reporter\"),\n                            backgroundColor: data.styles.backgroundColor || DEFAULT_BACKGROUND_COLOR\n                        });\n                        this._issueWindow.setMenuBarVisibility(false); // workaround for now, until a menu is implemented\n                        // Modified when testing UI\n                        const features = {};\n                        this.logService.trace('issueService#openReporter: opening issue reporter');\n                        this._issueWindow.loadURL(this.getIssueReporterPath(data, features));\n                        this._issueWindow.on('close', () => this._issueWindow = null);\n                        this._issueParentWindow.on('closed', () => {\n                            if (this._issueWindow) {\n                                this._issueWindow.close();\n                                this._issueWindow = null;\n                            }\n                        });\n                    }\n                }\n                if (this._issueWindow) {\n                    this._issueWindow.focus();\n                }\n            });\n        }\n        openProcessExplorer(data) {\n            return new Promise(_ => {\n                // Create as singleton\n                if (!this._processExplorerWindow) {\n                    this._processExplorerParentWindow = electron_1.BrowserWindow.getFocusedWindow();\n                    if (this._processExplorerParentWindow) {\n                        const position = this.getWindowPosition(this._processExplorerParentWindow, 800, 300);\n                        this._processExplorerWindow = new electron_1.BrowserWindow({\n                            skipTaskbar: true,\n                            resizable: true,\n                            fullscreen: false,\n                            width: position.width,\n                            height: position.height,\n                            minWidth: 300,\n                            minHeight: 200,\n                            x: position.x,\n                            y: position.y,\n                            backgroundColor: data.styles.backgroundColor,\n                            title: nls_1.localize('processExplorer', \"Process Explorer\")\n                        });\n                        this._processExplorerWindow.setMenuBarVisibility(false);\n                        const windowConfiguration = {\n                            appRoot: this.environmentService.appRoot,\n                            nodeCachedDataDir: this.environmentService.nodeCachedDataDir,\n                            windowId: this._processExplorerWindow.id,\n                            userEnv: this.userEnv,\n                            machineId: this.machineId,\n                            data\n                        };\n                        const environment = argv_1.parseArgs(process.argv);\n                        const config = objects.assign(environment, windowConfiguration);\n                        for (let key in config) {\n                            if (config[key] === undefined || config[key] === null || config[key] === '') {\n                                delete config[key]; // only send over properties that have a true value\n                            }\n                        }\n                        this._processExplorerWindow.loadURL(`${require.toUrl('vs/code/electron-browser/processExplorer/processExplorer.html')}?config=${encodeURIComponent(JSON.stringify(config))}`);\n                        this._processExplorerWindow.on('close', () => this._processExplorerWindow = null);\n                        this._processExplorerParentWindow.on('close', () => {\n                            if (this._processExplorerWindow) {\n                                this._processExplorerWindow.close();\n                                this._processExplorerWindow = null;\n                            }\n                        });\n                    }\n                }\n                // Focus\n                if (this._processExplorerWindow) {\n                    this._processExplorerWindow.focus();\n                }\n            });\n        }\n        getSystemStatus() {\n            return this.launchService.getMainProcessInfo().then(info => {\n                return this.diagnosticsService.getDiagnostics(info);\n            });\n        }\n        getWindowPosition(parentWindow, defaultWidth, defaultHeight) {\n            // We want the new window to open on the same display that the parent is in\n            let displayToUse;\n            const displays = electron_1.screen.getAllDisplays();\n            // Single Display\n            if (displays.length === 1) {\n                displayToUse = displays[0];\n            }\n            // Multi Display\n            else {\n                // on mac there is 1 menu per window so we need to use the monitor where the cursor currently is\n                if (platform_1.isMacintosh) {\n                    const cursorPoint = electron_1.screen.getCursorScreenPoint();\n                    displayToUse = electron_1.screen.getDisplayNearestPoint(cursorPoint);\n                }\n                // if we have a last active window, use that display for the new window\n                if (!displayToUse && parentWindow) {\n                    displayToUse = electron_1.screen.getDisplayMatching(parentWindow.getBounds());\n                }\n                // fallback to primary display or first display\n                if (!displayToUse) {\n                    displayToUse = electron_1.screen.getPrimaryDisplay() || displays[0];\n                }\n            }\n            const state = {\n                width: defaultWidth,\n                height: defaultHeight\n            };\n            const displayBounds = displayToUse.bounds;\n            state.x = displayBounds.x + (displayBounds.width / 2) - (state.width / 2);\n            state.y = displayBounds.y + (displayBounds.height / 2) - (state.height / 2);\n            if (displayBounds.width > 0 && displayBounds.height > 0 /* Linux X11 sessions sometimes report wrong display bounds */) {\n                if (state.x < displayBounds.x) {\n                    state.x = displayBounds.x; // prevent window from falling out of the screen to the left\n                }\n                if (state.y < displayBounds.y) {\n                    state.y = displayBounds.y; // prevent window from falling out of the screen to the top\n                }\n                if (state.x > (displayBounds.x + displayBounds.width)) {\n                    state.x = displayBounds.x; // prevent window from falling out of the screen to the right\n                }\n                if (state.y > (displayBounds.y + displayBounds.height)) {\n                    state.y = displayBounds.y; // prevent window from falling out of the screen to the bottom\n                }\n                if (state.width > displayBounds.width) {\n                    state.width = displayBounds.width; // prevent window from exceeding display bounds width\n                }\n                if (state.height > displayBounds.height) {\n                    state.height = displayBounds.height; // prevent window from exceeding display bounds height\n                }\n            }\n            return state;\n        }\n        getSystemInformation() {\n            return new Promise((resolve, reject) => {\n                this.launchService.getMainProcessInfo().then(info => {\n                    resolve(this.diagnosticsService.getSystemInfo(info));\n                });\n            });\n        }\n        getPerformanceInfo() {\n            return new Promise((resolve, reject) => {\n                this.launchService.getMainProcessInfo().then(info => {\n                    this.diagnosticsService.getPerformanceInfo(info)\n                        .then(diagnosticInfo => {\n                        resolve(diagnosticInfo);\n                    })\n                        .catch(err => {\n                        this.logService.warn('issueService#getPerformanceInfo ', err.message);\n                        reject(err);\n                    });\n                });\n            });\n        }\n        getIssueReporterPath(data, features) {\n            if (!this._issueWindow) {\n                throw new Error('Issue window has been disposed');\n            }\n            const windowConfiguration = {\n                appRoot: this.environmentService.appRoot,\n                nodeCachedDataDir: this.environmentService.nodeCachedDataDir,\n                windowId: this._issueWindow.id,\n                machineId: this.machineId,\n                userEnv: this.userEnv,\n                data,\n                features\n            };\n            const environment = argv_1.parseArgs(process.argv);\n            const config = objects.assign(environment, windowConfiguration);\n            for (let key in config) {\n                if (config[key] === undefined || config[key] === null || config[key] === '') {\n                    delete config[key]; // only send over properties that have a true value\n                }\n            }\n            return `${require.toUrl('vs/code/electron-browser/issue/issueReporter.html')}?config=${encodeURIComponent(JSON.stringify(config))}`;\n        }\n    };\n    IssueService = __decorate([\n        __param(2, environment_1.IEnvironmentService),\n        __param(3, launchService_1.ILaunchService),\n        __param(4, log_1.ILogService),\n        __param(5, diagnosticsService_1.IDiagnosticsService),\n        __param(6, windows_1.IWindowsService)\n    ], IssueService);\n    exports.IssueService = IssueService;\n});\n",null]}