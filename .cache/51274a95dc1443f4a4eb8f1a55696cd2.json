{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/browser/dialogService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/browser/dialogService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar layoutService_1 = require(\"vs/platform/layout/browser/layoutService\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar dialog_1 = require(\"vs/base/browser/ui/dialog/dialog\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar DialogService = /** @class */ (function () {\n    function DialogService(logService, layoutService, themeService) {\n        this.logService = logService;\n        this.layoutService = layoutService;\n        this.themeService = themeService;\n    }\n    DialogService.prototype.confirm = function (confirmation) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var buttons, severity, result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.logService.trace('DialogService#confirm', confirmation.message);\n                        buttons = [];\n                        if (confirmation.primaryButton) {\n                            buttons.push(confirmation.primaryButton);\n                        }\n                        else {\n                            buttons.push(nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n                        }\n                        if (confirmation.secondaryButton) {\n                            buttons.push(confirmation.secondaryButton);\n                        }\n                        else if (typeof confirmation.secondaryButton === 'undefined') {\n                            buttons.push(nls.localize('cancelButton', \"Cancel\"));\n                        }\n                        severity = this.getSeverity(confirmation.type || 'none');\n                        return [4 /*yield*/, this.show(severity, confirmation.message, buttons, { cancelId: 1, detail: confirmation.detail })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, { confirmed: result === 0 }];\n                }\n            });\n        });\n    };\n    DialogService.prototype.getSeverity = function (type) {\n        switch (type) {\n            case 'error':\n                return severity_1.default.Error;\n            case 'warning':\n                return severity_1.default.Warning;\n            case 'question':\n            case 'info':\n                return severity_1.default.Info;\n            case 'none':\n            default:\n                return severity_1.default.Ignore;\n        }\n    };\n    DialogService.prototype.getDialogType = function (severity) {\n        return (severity === severity_1.default.Info) ? 'question' : (severity === severity_1.default.Error) ? 'error' : (severity === severity_1.default.Warning) ? 'warning' : 'none';\n    };\n    DialogService.prototype.show = function (severity, message, buttons, options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var dialogDisposables, dialog, choice;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.logService.trace('DialogService#show', message);\n                        dialogDisposables = [];\n                        dialog = new dialog_1.Dialog(this.layoutService.container, message, buttons, {\n                            detail: options ? options.detail : undefined,\n                            cancelId: options ? options.cancelId : undefined,\n                            type: this.getDialogType(severity)\n                        });\n                        dialogDisposables.push(dialog);\n                        dialogDisposables.push(styler_1.attachDialogStyler(dialog, this.themeService));\n                        return [4 /*yield*/, dialog.show()];\n                    case 1:\n                        choice = _a.sent();\n                        lifecycle_1.dispose(dialogDisposables);\n                        return [2 /*return*/, choice];\n                }\n            });\n        });\n    };\n    DialogService = tslib_1.__decorate([\n        tslib_1.__param(0, log_1.ILogService),\n        tslib_1.__param(1, layoutService_1.ILayoutService),\n        tslib_1.__param(2, themeService_1.IThemeService)\n    ], DialogService);\n    return DialogService;\n}());\nexports.DialogService = DialogService;\nextensions_1.registerSingleton(dialogs_1.IDialogService, DialogService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/browser/dialogService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/browser/dialogService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IDialogService, IDialogOptions, IConfirmation, IConfirmationResult, DialogType } from 'vs/platform/dialogs/common/dialogs';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport Severity from 'vs/base/common/severity';\nimport { Dialog } from 'vs/base/browser/ui/dialog/dialog';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { attachDialogStyler } from 'vs/platform/theme/common/styler';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\n\nexport class DialogService implements IDialogService {\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IThemeService private readonly themeService: IThemeService\n\t) { }\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace('DialogService#confirm', confirmation.message);\n\n\t\tconst buttons: string[] = [];\n\t\tif (confirmation.primaryButton) {\n\t\t\tbuttons.push(confirmation.primaryButton);\n\t\t} else {\n\t\t\tbuttons.push(nls.localize({ key: 'yesButton', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"));\n\t\t}\n\n\t\tif (confirmation.secondaryButton) {\n\t\t\tbuttons.push(confirmation.secondaryButton);\n\t\t} else if (typeof confirmation.secondaryButton === 'undefined') {\n\t\t\tbuttons.push(nls.localize('cancelButton', \"Cancel\"));\n\t\t}\n\n\t\tconst severity = this.getSeverity(confirmation.type || 'none');\n\t\tconst result = await this.show(severity, confirmation.message, buttons, { cancelId: 1, detail: confirmation.detail });\n\n\t\treturn { confirmed: result === 0 };\n\t}\n\n\tprivate getSeverity(type: DialogType): Severity {\n\t\tswitch (type) {\n\t\t\tcase 'error':\n\t\t\t\treturn Severity.Error;\n\t\t\tcase 'warning':\n\t\t\t\treturn Severity.Warning;\n\t\t\tcase 'question':\n\t\t\tcase 'info':\n\t\t\t\treturn Severity.Info;\n\t\t\tcase 'none':\n\t\t\tdefault:\n\t\t\t\treturn Severity.Ignore;\n\t\t}\n\t}\n\n\tprivate getDialogType(severity: Severity): DialogType {\n\t\treturn (severity === Severity.Info) ? 'question' : (severity === Severity.Error) ? 'error' : (severity === Severity.Warning) ? 'warning' : 'none';\n\t}\n\n\n\tasync show(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<number> {\n\t\tthis.logService.trace('DialogService#show', message);\n\n\t\tconst dialogDisposables: IDisposable[] = [];\n\t\tconst dialog = new Dialog(\n\t\t\tthis.layoutService.container,\n\t\t\tmessage,\n\t\t\tbuttons,\n\t\t\t{\n\t\t\t\tdetail: options ? options.detail : undefined,\n\t\t\t\tcancelId: options ? options.cancelId : undefined,\n\t\t\t\ttype: this.getDialogType(severity)\n\t\t\t});\n\n\t\tdialogDisposables.push(dialog);\n\t\tdialogDisposables.push(attachDialogStyler(dialog, this.themeService));\n\n\t\tconst choice = await dialog.show();\n\t\tdispose(dialogDisposables);\n\n\t\treturn choice;\n\t}\n}\n\nregisterSingleton(IDialogService, DialogService, true);\n"]}]}