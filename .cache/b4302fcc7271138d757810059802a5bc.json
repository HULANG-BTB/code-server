{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminalProcess.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminalProcess.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar os = require(\"os\");\nvar path = require(\"vs/base/common/path\");\nvar platform = require(\"vs/base/common/platform\");\nvar pty = require(\"node-pty\");\nvar fs = require(\"fs\");\nvar event_1 = require(\"vs/base/common/event\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/node/terminal\");\nvar child_process_1 = require(\"child_process\");\nvar TerminalProcess = /** @class */ (function () {\n    function TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty) {\n        var _this = this;\n        this._currentTitle = '';\n        this._isDisposed = false;\n        this._titleInterval = null;\n        this._onProcessData = new event_1.Emitter();\n        this._onProcessExit = new event_1.Emitter();\n        this._onProcessIdReady = new event_1.Emitter();\n        this._onProcessTitleChanged = new event_1.Emitter();\n        var shellName;\n        if (os.platform() === 'win32') {\n            shellName = path.basename(shellLaunchConfig.executable || '');\n        }\n        else {\n            // Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n            // color prompt as defined in the default ~/.bashrc file.\n            shellName = 'xterm-256color';\n        }\n        this._initialCwd = cwd;\n        var useConpty = windowsEnableConpty && process.platform === 'win32' && terminal_1.getWindowsBuildNumber() >= 18309;\n        var options = {\n            name: shellName,\n            cwd: cwd,\n            env: env,\n            cols: cols,\n            rows: rows,\n            experimentalUseConpty: useConpty\n        };\n        try {\n            this._ptyProcess = pty.spawn(shellLaunchConfig.executable, shellLaunchConfig.args || [], options);\n            this._processStartupComplete = new Promise(function (c) {\n                _this.onProcessIdReady(function (pid) {\n                    c();\n                });\n            });\n        }\n        catch (error) {\n            // The only time this is expected to happen is when the file specified to launch with does not exist.\n            this._exitCode = 2;\n            this._queueProcessExit();\n            this._processStartupComplete = Promise.resolve(undefined);\n            return;\n        }\n        this._ptyProcess.on('data', function (data) {\n            _this._onProcessData.fire(data);\n            if (_this._closeTimeout) {\n                clearTimeout(_this._closeTimeout);\n                _this._queueProcessExit();\n            }\n        });\n        this._ptyProcess.on('exit', function (code) {\n            _this._exitCode = code;\n            _this._queueProcessExit();\n        });\n        // TODO: We should no longer need to delay this since pty.spawn is sync\n        setTimeout(function () {\n            _this._sendProcessId();\n        }, 500);\n        this._setupTitlePolling();\n    }\n    Object.defineProperty(TerminalProcess.prototype, \"onProcessData\", {\n        get: function () { return this._onProcessData.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcess.prototype, \"onProcessExit\", {\n        get: function () { return this._onProcessExit.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcess.prototype, \"onProcessIdReady\", {\n        get: function () { return this._onProcessIdReady.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalProcess.prototype, \"onProcessTitleChanged\", {\n        get: function () { return this._onProcessTitleChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalProcess.prototype.dispose = function () {\n        this._isDisposed = true;\n        if (this._titleInterval) {\n            clearInterval(this._titleInterval);\n        }\n        this._titleInterval = null;\n        this._onProcessData.dispose();\n        this._onProcessExit.dispose();\n        this._onProcessIdReady.dispose();\n        this._onProcessTitleChanged.dispose();\n    };\n    TerminalProcess.prototype._setupTitlePolling = function () {\n        var _this = this;\n        // Send initial timeout async to give event listeners a chance to init\n        setTimeout(function () {\n            _this._sendProcessTitle();\n        }, 0);\n        // Setup polling\n        this._titleInterval = setInterval(function () {\n            if (_this._currentTitle !== _this._ptyProcess.process) {\n                _this._sendProcessTitle();\n            }\n        }, 200);\n    };\n    // Allow any trailing data events to be sent before the exit event is sent.\n    // See https://github.com/Tyriar/node-pty/issues/72\n    TerminalProcess.prototype._queueProcessExit = function () {\n        var _this = this;\n        if (this._closeTimeout) {\n            clearTimeout(this._closeTimeout);\n        }\n        this._closeTimeout = setTimeout(function () { return _this._kill(); }, 250);\n    };\n    TerminalProcess.prototype._kill = function () {\n        var _this = this;\n        // Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n        // process start.\n        this._processStartupComplete.then(function () {\n            if (_this._isDisposed) {\n                return;\n            }\n            // Attempt to kill the pty, it may have already been killed at this\n            // point but we want to make sure\n            try {\n                _this._ptyProcess.kill();\n            }\n            catch (ex) {\n                // Swallow, the pty has already been killed\n            }\n            _this._onProcessExit.fire(_this._exitCode);\n            _this.dispose();\n        });\n    };\n    TerminalProcess.prototype._sendProcessId = function () {\n        this._onProcessIdReady.fire(this._ptyProcess.pid);\n    };\n    TerminalProcess.prototype._sendProcessTitle = function () {\n        if (this._isDisposed) {\n            return;\n        }\n        this._currentTitle = this._ptyProcess.process;\n        this._onProcessTitleChanged.fire(this._currentTitle);\n    };\n    TerminalProcess.prototype.shutdown = function (immediate) {\n        if (immediate) {\n            this._kill();\n        }\n        else {\n            this._queueProcessExit();\n        }\n    };\n    TerminalProcess.prototype.input = function (data) {\n        if (this._isDisposed) {\n            return;\n        }\n        this._ptyProcess.write(data);\n    };\n    TerminalProcess.prototype.resize = function (cols, rows) {\n        if (this._isDisposed) {\n            return;\n        }\n        // Ensure that cols and rows are always >= 1, this prevents a native\n        // exception in winpty.\n        this._ptyProcess.resize(Math.max(cols, 1), Math.max(rows, 1));\n    };\n    TerminalProcess.prototype.getInitialCwd = function () {\n        return Promise.resolve(this._initialCwd);\n    };\n    TerminalProcess.prototype.getCwd = function () {\n        var _this = this;\n        if (platform.isMacintosh) {\n            return new Promise(function (resolve) {\n                child_process_1.exec('lsof -p ' + _this._ptyProcess.pid + ' | grep cwd', function (error, stdout, stderr) {\n                    if (stdout !== '') {\n                        resolve(stdout.substring(stdout.indexOf('/'), stdout.length - 1));\n                    }\n                });\n            });\n        }\n        if (platform.isLinux) {\n            return new Promise(function (resolve) {\n                fs.readlink('/proc/' + _this._ptyProcess.pid + '/cwd', function (err, linkedstr) {\n                    if (err) {\n                        resolve(_this._initialCwd);\n                    }\n                    resolve(linkedstr);\n                });\n            });\n        }\n        return new Promise(function (resolve) {\n            resolve(_this._initialCwd);\n        });\n    };\n    TerminalProcess.prototype.getLatency = function () {\n        return Promise.resolve(0);\n    };\n    return TerminalProcess;\n}());\nexports.TerminalProcess = TerminalProcess;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminalProcess.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminalProcess.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from 'os';\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport * as pty from 'node-pty';\nimport * as fs from 'fs';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { getWindowsBuildNumber } from 'vs/workbench/contrib/terminal/node/terminal';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IShellLaunchConfig, ITerminalChildProcess } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { exec } from 'child_process';\n\nexport class TerminalProcess implements ITerminalChildProcess, IDisposable {\n\tprivate _exitCode: number;\n\tprivate _closeTimeout: any;\n\tprivate _ptyProcess: pty.IPty;\n\tprivate _currentTitle: string = '';\n\tprivate _processStartupComplete: Promise<void>;\n\tprivate _isDisposed: boolean = false;\n\tprivate _titleInterval: NodeJS.Timer | null = null;\n\tprivate _initialCwd: string;\n\n\tprivate readonly _onProcessData = new Emitter<string>();\n\tpublic get onProcessData(): Event<string> { return this._onProcessData.event; }\n\tprivate readonly _onProcessExit = new Emitter<number>();\n\tpublic get onProcessExit(): Event<number> { return this._onProcessExit.event; }\n\tprivate readonly _onProcessIdReady = new Emitter<number>();\n\tpublic get onProcessIdReady(): Event<number> { return this._onProcessIdReady.event; }\n\tprivate readonly _onProcessTitleChanged = new Emitter<string>();\n\tpublic get onProcessTitleChanged(): Event<string> { return this._onProcessTitleChanged.event; }\n\n\tconstructor(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: platform.IProcessEnvironment,\n\t\twindowsEnableConpty: boolean\n\t) {\n\t\tlet shellName: string;\n\t\tif (os.platform() === 'win32') {\n\t\t\tshellName = path.basename(shellLaunchConfig.executable || '');\n\t\t} else {\n\t\t\t// Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n\t\t\t// color prompt as defined in the default ~/.bashrc file.\n\t\t\tshellName = 'xterm-256color';\n\t\t}\n\n\t\tthis._initialCwd = cwd;\n\t\tconst useConpty = windowsEnableConpty && process.platform === 'win32' && getWindowsBuildNumber() >= 18309;\n\t\tconst options: pty.IPtyForkOptions = {\n\t\t\tname: shellName,\n\t\t\tcwd,\n\t\t\tenv,\n\t\t\tcols,\n\t\t\trows,\n\t\t\texperimentalUseConpty: useConpty\n\t\t};\n\n\t\ttry {\n\t\t\tthis._ptyProcess = pty.spawn(shellLaunchConfig.executable!, shellLaunchConfig.args || [], options);\n\t\t\tthis._processStartupComplete = new Promise<void>(c => {\n\t\t\t\tthis.onProcessIdReady((pid) => {\n\t\t\t\t\tc();\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\t// The only time this is expected to happen is when the file specified to launch with does not exist.\n\t\t\tthis._exitCode = 2;\n\t\t\tthis._queueProcessExit();\n\t\t\tthis._processStartupComplete = Promise.resolve(undefined);\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyProcess.on('data', (data) => {\n\t\t\tthis._onProcessData.fire(data);\n\t\t\tif (this._closeTimeout) {\n\t\t\t\tclearTimeout(this._closeTimeout);\n\t\t\t\tthis._queueProcessExit();\n\t\t\t}\n\t\t});\n\t\tthis._ptyProcess.on('exit', (code) => {\n\t\t\tthis._exitCode = code;\n\t\t\tthis._queueProcessExit();\n\t\t});\n\n\t\t// TODO: We should no longer need to delay this since pty.spawn is sync\n\t\tsetTimeout(() => {\n\t\t\tthis._sendProcessId();\n\t\t}, 500);\n\t\tthis._setupTitlePolling();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._titleInterval) {\n\t\t\tclearInterval(this._titleInterval);\n\t\t}\n\t\tthis._titleInterval = null;\n\t\tthis._onProcessData.dispose();\n\t\tthis._onProcessExit.dispose();\n\t\tthis._onProcessIdReady.dispose();\n\t\tthis._onProcessTitleChanged.dispose();\n\t}\n\n\tprivate _setupTitlePolling() {\n\t\t// Send initial timeout async to give event listeners a chance to init\n\t\tsetTimeout(() => {\n\t\t\tthis._sendProcessTitle();\n\t\t}, 0);\n\t\t// Setup polling\n\t\tthis._titleInterval = setInterval(() => {\n\t\t\tif (this._currentTitle !== this._ptyProcess.process) {\n\t\t\t\tthis._sendProcessTitle();\n\t\t\t}\n\t\t}, 200);\n\t}\n\n\t// Allow any trailing data events to be sent before the exit event is sent.\n\t// See https://github.com/Tyriar/node-pty/issues/72\n\tprivate _queueProcessExit() {\n\t\tif (this._closeTimeout) {\n\t\t\tclearTimeout(this._closeTimeout);\n\t\t}\n\t\tthis._closeTimeout = setTimeout(() => this._kill(), 250);\n\t}\n\n\tprivate _kill(): void {\n\t\t// Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n\t\t// process start.\n\t\tthis._processStartupComplete.then(() => {\n\t\t\tif (this._isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Attempt to kill the pty, it may have already been killed at this\n\t\t\t// point but we want to make sure\n\t\t\ttry {\n\t\t\t\tthis._ptyProcess.kill();\n\t\t\t} catch (ex) {\n\t\t\t\t// Swallow, the pty has already been killed\n\t\t\t}\n\t\t\tthis._onProcessExit.fire(this._exitCode);\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tprivate _sendProcessId() {\n\t\tthis._onProcessIdReady.fire(this._ptyProcess.pid);\n\t}\n\n\tprivate _sendProcessTitle(): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTitle = this._ptyProcess.process;\n\t\tthis._onProcessTitleChanged.fire(this._currentTitle);\n\t}\n\n\tpublic shutdown(immediate: boolean): void {\n\t\tif (immediate) {\n\t\t\tthis._kill();\n\t\t} else {\n\t\t\tthis._queueProcessExit();\n\t\t}\n\t}\n\n\tpublic input(data: string): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyProcess.write(data);\n\t}\n\n\tpublic resize(cols: number, rows: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// Ensure that cols and rows are always >= 1, this prevents a native\n\t\t// exception in winpty.\n\t\tthis._ptyProcess.resize(Math.max(cols, 1), Math.max(rows, 1));\n\t}\n\n\tpublic getInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd);\n\t}\n\n\tpublic getCwd(): Promise<string> {\n\t\tif (platform.isMacintosh) {\n\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\texec('lsof -p ' + this._ptyProcess.pid + ' | grep cwd', (error, stdout, stderr) => {\n\t\t\t\t\tif (stdout !== '') {\n\t\t\t\t\t\tresolve(stdout.substring(stdout.indexOf('/'), stdout.length - 1));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (platform.isLinux) {\n\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\tfs.readlink('/proc/' + this._ptyProcess.pid + '/cwd', (err, linkedstr) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t}\n\t\t\t\t\tresolve(linkedstr);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise<string>(resolve => {\n\t\t\tresolve(this._initialCwd);\n\t\t});\n\t}\n\n\tpublic getLatency(): Promise<number> {\n\t\treturn Promise.resolve(0);\n\t}\n}\n"]}]}