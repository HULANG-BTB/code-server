{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizationsActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizationsActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar path_1 = require(\"vs/base/common/path\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar localizations_1 = require(\"vs/platform/localizations/common/localizations\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar jsonEditing_1 = require(\"vs/workbench/services/configuration/common/jsonEditing\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar ConfigureLocaleAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigureLocaleAction, _super);\n    function ConfigureLocaleAction(id, label, environmentService, localizationService, quickInputService, jsonEditingService, windowsService, notificationService, viewletService, dialogService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.environmentService = environmentService;\n        _this.localizationService = localizationService;\n        _this.quickInputService = quickInputService;\n        _this.jsonEditingService = jsonEditingService;\n        _this.windowsService = windowsService;\n        _this.notificationService = notificationService;\n        _this.viewletService = viewletService;\n        _this.dialogService = dialogService;\n        return _this;\n    }\n    ConfigureLocaleAction.prototype.getLanguageOptions = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var availableLanguages, _a, _b;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = ['en']).concat;\n                        return [4 /*yield*/, this.localizationService.getLanguageIds(localizations_1.LanguageType.Contributed)];\n                    case 1:\n                        availableLanguages = _b.apply(_a, [_c.sent()]);\n                        availableLanguages.sort();\n                        return [2 /*return*/, availableLanguages\n                                .map(function (language) { return { label: language }; })\n                                .concat({ label: nls_1.localize('installAdditionalLanguages', \"Install additional languages...\") })];\n                }\n            });\n        });\n    };\n    ConfigureLocaleAction.prototype.run = function (event) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var languageOptions, currentLanguageIndex, selectedLanguage, file, restart, e_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getLanguageOptions()];\n                    case 1:\n                        languageOptions = _a.sent();\n                        currentLanguageIndex = arrays_1.firstIndex(languageOptions, function (l) { return l.label === platform_1.language; });\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 7, , 8]);\n                        return [4 /*yield*/, this.quickInputService.pick(languageOptions, {\n                                canPickMany: false,\n                                placeHolder: nls_1.localize('chooseDisplayLanguage', \"Select Display Language\"),\n                                activeItem: languageOptions[currentLanguageIndex]\n                            })];\n                    case 3:\n                        selectedLanguage = _a.sent();\n                        if (selectedLanguage === languageOptions[languageOptions.length - 1]) {\n                            return [2 /*return*/, this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                                    .then(function (viewlet) {\n                                    viewlet.search('@category:\"language packs\"');\n                                    viewlet.focus();\n                                })];\n                        }\n                        if (!selectedLanguage) return [3 /*break*/, 6];\n                        file = uri_1.URI.file(path_1.join(this.environmentService.appSettingsHome, 'locale.json'));\n                        return [4 /*yield*/, this.jsonEditingService.write(file, { key: 'locale', value: selectedLanguage.label }, true)];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this.dialogService.confirm({\n                                type: 'info',\n                                message: nls_1.localize('relaunchDisplayLanguageMessage', \"A restart is required for the change in display language to take effect.\"),\n                                detail: nls_1.localize('relaunchDisplayLanguageDetail', \"Press the restart button to restart {0} and change the display language.\", this.environmentService.appNameLong),\n                                primaryButton: nls_1.localize('restart', \"&&Restart\")\n                            })];\n                    case 5:\n                        restart = _a.sent();\n                        if (restart.confirmed) {\n                            this.windowsService.relaunch({});\n                        }\n                        _a.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        e_1 = _a.sent();\n                        this.notificationService.error(e_1);\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ConfigureLocaleAction.ID = 'workbench.action.configureLocale';\n    ConfigureLocaleAction.LABEL = nls_1.localize('configureLocale', \"Configure Display Language\");\n    ConfigureLocaleAction = tslib_1.__decorate([\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, localizations_1.ILocalizationsService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, jsonEditing_1.IJSONEditingService),\n        tslib_1.__param(6, windows_1.IWindowsService),\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, viewlet_1.IViewletService),\n        tslib_1.__param(9, dialogs_1.IDialogService)\n    ], ConfigureLocaleAction);\n    return ConfigureLocaleAction;\n}(actions_1.Action));\nexports.ConfigureLocaleAction = ConfigureLocaleAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizationsActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizationsActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { join } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { ILocalizationsService, LanguageType } from 'vs/platform/localizations/common/localizations';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { language } from 'vs/base/common/platform';\nimport { firstIndex } from 'vs/base/common/arrays';\nimport { IExtensionsViewlet, VIEWLET_ID as EXTENSIONS_VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\n\nexport class ConfigureLocaleAction extends Action {\n\tpublic static readonly ID = 'workbench.action.configureLocale';\n\tpublic static readonly LABEL = localize('configureLocale', \"Configure Display Language\");\n\n\tconstructor(id: string, label: string,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILocalizationsService private readonly localizationService: ILocalizationsService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tprivate async getLanguageOptions(): Promise<IQuickPickItem[]> {\n\t\t// Contributed languages are those installed via extension packs, so does not include English\n\t\tconst availableLanguages = ['en', ...await this.localizationService.getLanguageIds(LanguageType.Contributed)];\n\t\tavailableLanguages.sort();\n\n\t\treturn availableLanguages\n\t\t\t.map(language => { return { label: language }; })\n\t\t\t.concat({ label: localize('installAdditionalLanguages', \"Install additional languages...\") });\n\t}\n\n\tpublic async run(event?: any): Promise<void> {\n\t\tconst languageOptions = await this.getLanguageOptions();\n\t\tconst currentLanguageIndex = firstIndex(languageOptions, l => l.label === language);\n\n\t\ttry {\n\t\t\tconst selectedLanguage = await this.quickInputService.pick(languageOptions,\n\t\t\t\t{\n\t\t\t\t\tcanPickMany: false,\n\t\t\t\t\tplaceHolder: localize('chooseDisplayLanguage', \"Select Display Language\"),\n\t\t\t\t\tactiveItem: languageOptions[currentLanguageIndex]\n\t\t\t\t});\n\n\t\t\tif (selectedLanguage === languageOptions[languageOptions.length - 1]) {\n\t\t\t\treturn this.viewletService.openViewlet(EXTENSIONS_VIEWLET_ID, true)\n\t\t\t\t\t.then((viewlet: IExtensionsViewlet) => {\n\t\t\t\t\t\tviewlet.search('@category:\"language packs\"');\n\t\t\t\t\t\tviewlet.focus();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (selectedLanguage) {\n\t\t\t\tconst file = URI.file(join(this.environmentService.appSettingsHome, 'locale.json'));\n\t\t\t\tawait this.jsonEditingService.write(file, { key: 'locale', value: selectedLanguage.label }, true);\n\t\t\t\tconst restart = await this.dialogService.confirm({\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\tmessage: localize('relaunchDisplayLanguageMessage', \"A restart is required for the change in display language to take effect.\"),\n\t\t\t\t\tdetail: localize('relaunchDisplayLanguageDetail', \"Press the restart button to restart {0} and change the display language.\", this.environmentService.appNameLong),\n\t\t\t\t\tprimaryButton: localize('restart', \"&&Restart\")\n\t\t\t\t});\n\n\t\t\t\tif (restart.confirmed) {\n\t\t\t\t\tthis.windowsService.relaunch({});\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.notificationService.error(e);\n\t\t}\n\t}\n}\n"]}]}