{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/notification/common/notification.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/notification/common/notification.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar severity_1 = require(\"vs/base/common/severity\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar event_1 = require(\"vs/base/common/event\");\nexports.Severity = severity_1.default;\nexports.INotificationService = instantiation_1.createDecorator('notificationService');\nvar NoOpNotification = /** @class */ (function () {\n    function NoOpNotification() {\n        this.progress = new NoOpProgress();\n        this._onDidClose = new event_1.Emitter();\n    }\n    Object.defineProperty(NoOpNotification.prototype, \"onDidClose\", {\n        get: function () {\n            return this._onDidClose.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NoOpNotification.prototype.updateSeverity = function (severity) { };\n    NoOpNotification.prototype.updateMessage = function (message) { };\n    NoOpNotification.prototype.updateActions = function (actions) { };\n    NoOpNotification.prototype.close = function () {\n        this._onDidClose.dispose();\n    };\n    return NoOpNotification;\n}());\nexports.NoOpNotification = NoOpNotification;\nvar NoOpProgress = /** @class */ (function () {\n    function NoOpProgress() {\n    }\n    NoOpProgress.prototype.infinite = function () { };\n    NoOpProgress.prototype.done = function () { };\n    NoOpProgress.prototype.total = function (value) { };\n    NoOpProgress.prototype.worked = function (value) { };\n    return NoOpProgress;\n}());\nexports.NoOpProgress = NoOpProgress;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/notification/common/notification.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/notification/common/notification.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,oDAAmD;AACnD,gFAAiF;AAEjF,8CAAsD;AAExC,QAAA,QAAQ,GAAG,kBAAY,CAAC;AAEzB,QAAA,oBAAoB,GAAG,+BAAe,CAAuB,qBAAqB,CAAC,CAAC;AAqNjG;IAAA;QACU,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAEtB,gBAAW,GAAkB,IAAI,eAAO,EAAE,CAAC;IAa7D,CAAC;IAXA,sBAAI,wCAAU;aAAd;YACC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAC/B,CAAC;;;OAAA;IAED,yCAAc,GAAd,UAAe,QAAkB,IAAU,CAAC;IAC5C,wCAAa,GAAb,UAAc,OAA4B,IAAU,CAAC;IACrD,wCAAa,GAAb,UAAc,OAA8B,IAAU,CAAC;IAEvD,gCAAK,GAAL;QACC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC5B,CAAC;IACF,uBAAC;AAAD,CAAC,AAhBD,IAgBC;AAhBY,4CAAgB;AAkB7B;IAAA;IAKA,CAAC;IAJA,+BAAQ,GAAR,cAAmB,CAAC;IACpB,2BAAI,GAAJ,cAAe,CAAC;IAChB,4BAAK,GAAL,UAAM,KAAa,IAAU,CAAC;IAC9B,6BAAM,GAAN,UAAO,KAAa,IAAU,CAAC;IAChC,mBAAC;AAAD,CAAC,AALD,IAKC;AALY,oCAAY","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport BaseSeverity from 'vs/base/common/severity';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IAction } from 'vs/base/common/actions';\nimport { Event, Emitter } from 'vs/base/common/event';\n\nexport import Severity = BaseSeverity;\n\nexport const INotificationService = createDecorator<INotificationService>('notificationService');\n\nexport type NotificationMessage = string | Error;\n\nexport interface INotificationProperties {\n\n\t/**\n\t * Sticky notifications are not automatically removed after a certain timeout. By\n\t * default, notifications with primary actions and severity error are always sticky.\n\t */\n\tsticky?: boolean;\n\n\t/**\n\t * Silent notifications are not shown to the user unless the notification center\n\t * is opened. The status bar will still indicate all number of notifications to\n\t * catch some attention.\n\t */\n\tsilent?: boolean;\n}\n\nexport interface INotification extends INotificationProperties {\n\n\t/**\n\t * The severity of the notification. Either `Info`, `Warning` or `Error`.\n\t */\n\tseverity: Severity;\n\n\t/**\n\t * The message of the notification. This can either be a `string` or `Error`. Messages\n\t * can optionally include links in the format: `[text](link)`\n\t */\n\tmessage: NotificationMessage;\n\n\t/**\n\t * The source of the notification appears as additional information.\n\t */\n\tsource?: string;\n\n\t/**\n\t * Actions to show as part of the notification. Primary actions show up as\n\t * buttons as part of the message and will close the notification once clicked.\n\t *\n\t * Secondary actions are meant to provide additional configuration or context\n\t * for the notification and will show up less prominent. A notification does not\n\t * close automatically when invoking a secondary action.\n\t *\n\t * **Note:** If your intent is to show a message with actions to the user, consider\n\t * the `INotificationService.prompt()` method instead which are optimized for\n\t * this usecase and much easier to use!\n\t */\n\tactions?: INotificationActions;\n}\n\nexport interface INotificationActions {\n\n\t/**\n\t * Primary actions show up as buttons as part of the message and will close\n\t * the notification once clicked.\n\t */\n\tprimary?: IAction[];\n\n\t/**\n\t * Secondary actions are meant to provide additional configuration or context\n\t * for the notification and will show up less prominent. A notification does not\n\t * close automatically when invoking a secondary action.\n\t */\n\tsecondary?: IAction[];\n}\n\nexport interface INotificationProgress {\n\n\t/**\n\t * Causes the progress bar to spin infinitley.\n\t */\n\tinfinite(): void;\n\n\t/**\n\t * Indicate the total amount of work.\n\t */\n\ttotal(value: number): void;\n\n\t/**\n\t * Indicate that a specific chunk of work is done.\n\t */\n\tworked(value: number): void;\n\n\t/**\n\t * Indicate that the long running operation is done.\n\t */\n\tdone(): void;\n}\n\nexport interface INotificationHandle {\n\n\t/**\n\t * Will be fired once the notification is closed.\n\t */\n\treadonly onDidClose: Event<void>;\n\n\t/**\n\t * Allows to indicate progress on the notification even after the\n\t * notification is already visible.\n\t */\n\treadonly progress: INotificationProgress;\n\n\t/**\n\t * Allows to update the severity of the notification.\n\t */\n\tupdateSeverity(severity: Severity): void;\n\n\t/**\n\t * Allows to update the message of the notification even after the\n\t * notification is already visible.\n\t */\n\tupdateMessage(message: NotificationMessage): void;\n\n\t/**\n\t * Allows to update the actions of the notification even after the\n\t * notification is already visible.\n\t */\n\tupdateActions(actions?: INotificationActions): void;\n\n\t/**\n\t * Hide the notification and remove it from the notification center.\n\t */\n\tclose(): void;\n}\n\nexport interface IPromptChoice {\n\n\t/**\n\t * Label to show for the choice to the user.\n\t */\n\tlabel: string;\n\n\t/**\n\t * Primary choices show up as buttons in the notification below the message.\n\t * Secondary choices show up under the gear icon in the header of the notification.\n\t */\n\tisSecondary?: boolean;\n\n\t/**\n\t * Wether to keep the notification open after the choice was selected\n\t * by the user. By default, will close the notification upon click.\n\t */\n\tkeepOpen?: boolean;\n\n\t/**\n\t * Triggered when the user selects the choice.\n\t */\n\trun: () => void;\n}\n\nexport interface IPromptOptions extends INotificationProperties {\n\n\t/**\n\t * Will be called if the user closed the notification without picking\n\t * any of the provided choices.\n\t */\n\tonCancel?: () => void;\n}\n\n/**\n * A service to bring up notifications and non-modal prompts.\n *\n * Note: use the `IDialogService` for a modal way to ask the user for input.\n */\nexport interface INotificationService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Show the provided notification to the user. The returned `INotificationHandle`\n\t * can be used to control the notification afterwards.\n\t *\n\t * **Note:** If your intent is to show a message with actions to the user, consider\n\t * the `INotificationService.prompt()` method instead which are optimized for\n\t * this usecase and much easier to use!\n\t *\n\t * @returns a handle on the notification to e.g. hide it or update message, buttons, etc.\n\t */\n\tnotify(notification: INotification): INotificationHandle;\n\n\t/**\n\t * A convinient way of reporting infos. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\tinfo(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * A convinient way of reporting warnings. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\twarn(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * A convinient way of reporting errors. Use the `INotificationService.notify`\n\t * method if you need more control over the notification.\n\t */\n\terror(message: NotificationMessage | NotificationMessage[]): void;\n\n\t/**\n\t * Shows a prompt in the notification area with the provided choices. The prompt\n\t * is non-modal. If you want to show a modal dialog instead, use `IDialogService`.\n\t *\n\t * @param onCancel will be called if the user closed the notification without picking\n\t * any of the provided choices.\n\t *\n\t * @returns a handle on the notification to e.g. hide it or update message, buttons, etc.\n\t */\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle;\n}\n\nexport class NoOpNotification implements INotificationHandle {\n\treadonly progress = new NoOpProgress();\n\n\tprivate readonly _onDidClose: Emitter<void> = new Emitter();\n\n\tget onDidClose(): Event<void> {\n\t\treturn this._onDidClose.event;\n\t}\n\n\tupdateSeverity(severity: Severity): void { }\n\tupdateMessage(message: NotificationMessage): void { }\n\tupdateActions(actions?: INotificationActions): void { }\n\n\tclose(): void {\n\t\tthis._onDidClose.dispose();\n\t}\n}\n\nexport class NoOpProgress implements INotificationProgress {\n\tinfinite(): void { }\n\tdone(): void { }\n\ttotal(value: number): void { }\n\tworked(value: number): void { }\n}"]}]}