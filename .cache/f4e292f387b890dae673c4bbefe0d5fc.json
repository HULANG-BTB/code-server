{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/indentation/indentation.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/indentation/indentation.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings = require(\"vs/base/common/strings\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar shiftCommand_1 = require(\"vs/editor/common/commands/shiftCommand\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar indentRules_1 = require(\"vs/editor/common/modes/supports/indentRules\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar indentUtils = require(\"vs/editor/contrib/indentation/indentUtils\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nfunction getReindentEditOperations(model, startLineNumber, endLineNumber, inheritedIndent) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return [];\n    }\n    var indentationRules = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getIndentationRules(model.getLanguageIdentifier().id);\n    if (!indentationRules) {\n        return [];\n    }\n    endLineNumber = Math.min(endLineNumber, model.getLineCount());\n    // Skip `unIndentedLinePattern` lines\n    while (startLineNumber <= endLineNumber) {\n        if (!indentationRules.unIndentedLinePattern) {\n            break;\n        }\n        var text = model.getLineContent(startLineNumber);\n        if (!indentationRules.unIndentedLinePattern.test(text)) {\n            break;\n        }\n        startLineNumber++;\n    }\n    if (startLineNumber > endLineNumber - 1) {\n        return [];\n    }\n    var _a = model.getOptions(), tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\n    var shiftIndent = function (indentation, count) {\n        count = count || 1;\n        return shiftCommand_1.ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    var unshiftIndent = function (indentation, count) {\n        count = count || 1;\n        return shiftCommand_1.ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    var indentEdits = [];\n    // indentation being passed to lines below\n    var globalIndent;\n    // Calculate indentation for the first line\n    // If there is no passed-in indentation, we use the indentation of the first line as base.\n    var currentLineText = model.getLineContent(startLineNumber);\n    var adjustedLineContent = currentLineText;\n    if (inheritedIndent !== undefined && inheritedIndent !== null) {\n        globalIndent = inheritedIndent;\n        var oldIndentation = strings.getLeadingWhitespace(currentLineText);\n        adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n            globalIndent = unshiftIndent(globalIndent);\n            adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        }\n        if (currentLineText !== adjustedLineContent) {\n            indentEdits.push(editOperation_1.EditOperation.replace(new selection_1.Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), textModel_1.TextModel.normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n        }\n    }\n    else {\n        globalIndent = strings.getLeadingWhitespace(currentLineText);\n    }\n    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n    var idealIndentForNextLine = globalIndent;\n    if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        globalIndent = shiftIndent(globalIndent);\n    }\n    else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    }\n    startLineNumber++;\n    // Calculate indentation adjustment for all following lines\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var text = model.getLineContent(lineNumber);\n        var oldIndentation = strings.getLeadingWhitespace(text);\n        var adjustedLineContent_1 = idealIndentForNextLine + text.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent_1)) {\n            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n            globalIndent = unshiftIndent(globalIndent);\n        }\n        if (oldIndentation !== idealIndentForNextLine) {\n            indentEdits.push(editOperation_1.EditOperation.replace(new selection_1.Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), textModel_1.TextModel.normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n        }\n        // calculate idealIndentForNextLine\n        if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n            // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n            // but don't change globalIndent and idealIndentForNextLine.\n            continue;\n        }\n        else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent_1)) {\n            globalIndent = shiftIndent(globalIndent);\n            idealIndentForNextLine = globalIndent;\n        }\n        else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent_1)) {\n            idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        }\n        else {\n            idealIndentForNextLine = globalIndent;\n        }\n    }\n    return indentEdits;\n}\nexports.getReindentEditOperations = getReindentEditOperations;\nvar IndentationToSpacesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentationToSpacesAction, _super);\n    function IndentationToSpacesAction() {\n        return _super.call(this, {\n            id: IndentationToSpacesAction.ID,\n            label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n            alias: 'Convert Indentation to Spaces',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    IndentationToSpacesAction.prototype.run = function (accessor, editor) {\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var modelOpts = model.getOptions();\n        var selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        var command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: true\n        });\n    };\n    IndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\n    return IndentationToSpacesAction;\n}(editorExtensions_1.EditorAction));\nexports.IndentationToSpacesAction = IndentationToSpacesAction;\nvar IndentationToTabsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentationToTabsAction, _super);\n    function IndentationToTabsAction() {\n        return _super.call(this, {\n            id: IndentationToTabsAction.ID,\n            label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n            alias: 'Convert Indentation to Tabs',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    IndentationToTabsAction.prototype.run = function (accessor, editor) {\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var modelOpts = model.getOptions();\n        var selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        var command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: false\n        });\n    };\n    IndentationToTabsAction.ID = 'editor.action.indentationToTabs';\n    return IndentationToTabsAction;\n}(editorExtensions_1.EditorAction));\nexports.IndentationToTabsAction = IndentationToTabsAction;\nvar ChangeIndentationSizeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChangeIndentationSizeAction, _super);\n    function ChangeIndentationSizeAction(insertSpaces, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.insertSpaces = insertSpaces;\n        return _this;\n    }\n    ChangeIndentationSizeAction.prototype.run = function (accessor, editor) {\n        var _this = this;\n        var quickInputService = accessor.get(quickInput_1.IQuickInputService);\n        var modelService = accessor.get(modelService_1.IModelService);\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n        var picks = [1, 2, 3, 4, 5, 6, 7, 8].map(function (n) { return ({\n            id: n.toString(),\n            label: n.toString(),\n            // add description for tabSize value set in the configuration\n            description: n === creationOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : undefined\n        }); });\n        // auto focus the tabSize set for the current editor\n        var autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n        setTimeout(function () {\n            quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(function (pick) {\n                if (pick) {\n                    if (model && !model.isDisposed()) {\n                        model.updateOptions({\n                            tabSize: parseInt(pick.label, 10),\n                            insertSpaces: _this.insertSpaces\n                        });\n                    }\n                }\n            });\n        }, 50 /* quick open is sensitive to being opened so soon after another */);\n    };\n    return ChangeIndentationSizeAction;\n}(editorExtensions_1.EditorAction));\nexports.ChangeIndentationSizeAction = ChangeIndentationSizeAction;\nvar IndentUsingTabs = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentUsingTabs, _super);\n    function IndentUsingTabs() {\n        return _super.call(this, false, {\n            id: IndentUsingTabs.ID,\n            label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n            alias: 'Indent Using Tabs',\n            precondition: null\n        }) || this;\n    }\n    IndentUsingTabs.ID = 'editor.action.indentUsingTabs';\n    return IndentUsingTabs;\n}(ChangeIndentationSizeAction));\nexports.IndentUsingTabs = IndentUsingTabs;\nvar IndentUsingSpaces = /** @class */ (function (_super) {\n    tslib_1.__extends(IndentUsingSpaces, _super);\n    function IndentUsingSpaces() {\n        return _super.call(this, true, {\n            id: IndentUsingSpaces.ID,\n            label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n            alias: 'Indent Using Spaces',\n            precondition: null\n        }) || this;\n    }\n    IndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\n    return IndentUsingSpaces;\n}(ChangeIndentationSizeAction));\nexports.IndentUsingSpaces = IndentUsingSpaces;\nvar DetectIndentation = /** @class */ (function (_super) {\n    tslib_1.__extends(DetectIndentation, _super);\n    function DetectIndentation() {\n        return _super.call(this, {\n            id: DetectIndentation.ID,\n            label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n            alias: 'Detect Indentation from Content',\n            precondition: null\n        }) || this;\n    }\n    DetectIndentation.prototype.run = function (accessor, editor) {\n        var modelService = accessor.get(modelService_1.IModelService);\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n    };\n    DetectIndentation.ID = 'editor.action.detectIndentation';\n    return DetectIndentation;\n}(editorExtensions_1.EditorAction));\nexports.DetectIndentation = DetectIndentation;\nvar ReindentLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReindentLinesAction, _super);\n    function ReindentLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.reindentlines',\n            label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n            alias: 'Reindent Lines',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    ReindentLinesAction.prototype.run = function (accessor, editor) {\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var edits = getReindentEditOperations(model, 1, model.getLineCount());\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    };\n    return ReindentLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.ReindentLinesAction = ReindentLinesAction;\nvar ReindentSelectedLinesAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReindentSelectedLinesAction, _super);\n    function ReindentSelectedLinesAction() {\n        return _super.call(this, {\n            id: 'editor.action.reindentselectedlines',\n            label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n            alias: 'Reindent Selected Lines',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    ReindentSelectedLinesAction.prototype.run = function (accessor, editor) {\n        var model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        var selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        var edits = [];\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n            var selection = selections_1[_i];\n            var startLineNumber = selection.startLineNumber;\n            var endLineNumber = selection.endLineNumber;\n            if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n                endLineNumber--;\n            }\n            if (startLineNumber === 1) {\n                if (startLineNumber === endLineNumber) {\n                    continue;\n                }\n            }\n            else {\n                startLineNumber--;\n            }\n            var editOperations = getReindentEditOperations(model, startLineNumber, endLineNumber);\n            edits.push.apply(edits, editOperations);\n        }\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    };\n    return ReindentSelectedLinesAction;\n}(editorExtensions_1.EditorAction));\nexports.ReindentSelectedLinesAction = ReindentSelectedLinesAction;\nvar AutoIndentOnPasteCommand = /** @class */ (function () {\n    function AutoIndentOnPasteCommand(edits, initialSelection) {\n        this._initialSelection = initialSelection;\n        this._edits = [];\n        for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {\n            var edit = edits_1[_i];\n            if (edit.range && typeof edit.text === 'string') {\n                this._edits.push(edit);\n            }\n        }\n    }\n    AutoIndentOnPasteCommand.prototype.getEditOperations = function (model, builder) {\n        for (var _i = 0, _a = this._edits; _i < _a.length; _i++) {\n            var edit = _a[_i];\n            builder.addEditOperation(range_1.Range.lift(edit.range), edit.text);\n        }\n        var selectionIsSet = false;\n        if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n            if (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n                this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, true);\n            }\n            else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n                this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, false);\n            }\n        }\n        if (!selectionIsSet) {\n            this._selectionId = builder.trackSelection(this._initialSelection);\n        }\n    };\n    AutoIndentOnPasteCommand.prototype.computeCursorState = function (model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    };\n    return AutoIndentOnPasteCommand;\n}());\nexports.AutoIndentOnPasteCommand = AutoIndentOnPasteCommand;\nvar AutoIndentOnPaste = /** @class */ (function () {\n    function AutoIndentOnPaste(editor) {\n        var _this = this;\n        this.editor = editor;\n        this.callOnDispose = [];\n        this.callOnModel = [];\n        this.callOnDispose.push(editor.onDidChangeConfiguration(function () { return _this.update(); }));\n        this.callOnDispose.push(editor.onDidChangeModel(function () { return _this.update(); }));\n        this.callOnDispose.push(editor.onDidChangeModelLanguage(function () { return _this.update(); }));\n    }\n    AutoIndentOnPaste.prototype.update = function () {\n        var _this = this;\n        // clean up\n        this.callOnModel = lifecycle_1.dispose(this.callOnModel);\n        // we are disabled\n        if (!this.editor.getConfiguration().autoIndent || this.editor.getConfiguration().contribInfo.formatOnPaste) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        this.callOnModel.push(this.editor.onDidPaste(function (range) {\n            _this.trigger(range);\n        }));\n    };\n    AutoIndentOnPaste.prototype.trigger = function (range) {\n        var selections = this.editor.getSelections();\n        if (selections === null || selections.length > 1) {\n            return;\n        }\n        var model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        if (!model.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n            return;\n        }\n        var _a = model.getOptions(), tabSize = _a.tabSize, indentSize = _a.indentSize, insertSpaces = _a.insertSpaces;\n        this.editor.pushUndoStop();\n        var textEdits = [];\n        var indentConverter = {\n            shiftIndent: function (indentation) {\n                return shiftCommand_1.ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: function (indentation) {\n                return shiftCommand_1.ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n        var startLineNumber = range.startLineNumber;\n        while (startLineNumber <= range.endLineNumber) {\n            if (this.shouldIgnoreLine(model, startLineNumber)) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber > range.endLineNumber) {\n            return;\n        }\n        var firstLineText = model.getLineContent(startLineNumber);\n        if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n            var indentOfFirstLine = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getGoodIndentForLine(model, model.getLanguageIdentifier().id, startLineNumber, indentConverter);\n            if (indentOfFirstLine !== null) {\n                var oldIndentation = strings.getLeadingWhitespace(firstLineText);\n                var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                if (newSpaceCnt !== oldSpaceCnt) {\n                    var newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                    textEdits.push({\n                        range: new range_1.Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n                        text: newIndent\n                    });\n                    firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n                }\n                else {\n                    var indentMetadata = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getIndentMetadata(model, startLineNumber);\n                    if (indentMetadata === 0 || indentMetadata === indentRules_1.IndentConsts.UNINDENT_MASK) {\n                        // we paste content into a line where only contains whitespaces\n                        // after pasting, the indentation of the first line is already correct\n                        // the first line doesn't match any indentation rule\n                        // then no-op.\n                        return;\n                    }\n                }\n            }\n        }\n        var firstLineNumber = startLineNumber;\n        // ignore empty or ignored lines\n        while (startLineNumber < range.endLineNumber) {\n            if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber !== range.endLineNumber) {\n            var virtualModel = {\n                getLineTokens: function (lineNumber) {\n                    return model.getLineTokens(lineNumber);\n                },\n                getLanguageIdentifier: function () {\n                    return model.getLanguageIdentifier();\n                },\n                getLanguageIdAtPosition: function (lineNumber, column) {\n                    return model.getLanguageIdAtPosition(lineNumber, column);\n                },\n                getLineContent: function (lineNumber) {\n                    if (lineNumber === firstLineNumber) {\n                        return firstLineText;\n                    }\n                    else {\n                        return model.getLineContent(lineNumber);\n                    }\n                }\n            };\n            var indentOfSecondLine = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdentifier().id, startLineNumber + 1, indentConverter);\n            if (indentOfSecondLine !== null) {\n                var newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n                var oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n                if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n                    var spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n                    for (var i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n                        var lineContent = model.getLineContent(i);\n                        var originalIndent = strings.getLeadingWhitespace(lineContent);\n                        var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n                        var newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n                        var newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n                        if (newIndent !== originalIndent) {\n                            textEdits.push({\n                                range: new range_1.Range(i, 1, i, originalIndent.length + 1),\n                                text: newIndent\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        var cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n        this.editor.executeCommand('autoIndentOnPaste', cmd);\n        this.editor.pushUndoStop();\n    };\n    AutoIndentOnPaste.prototype.shouldIgnoreLine = function (model, lineNumber) {\n        model.forceTokenization(lineNumber);\n        var nonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (nonWhiteSpaceColumn === 0) {\n            return true;\n        }\n        var tokens = model.getLineTokens(lineNumber);\n        if (tokens.getCount() > 0) {\n            var firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhiteSpaceColumn);\n            if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === modes_1.StandardTokenType.Comment) {\n                return true;\n            }\n        }\n        return false;\n    };\n    AutoIndentOnPaste.prototype.getId = function () {\n        return AutoIndentOnPaste.ID;\n    };\n    AutoIndentOnPaste.prototype.dispose = function () {\n        this.callOnDispose = lifecycle_1.dispose(this.callOnDispose);\n        this.callOnModel = lifecycle_1.dispose(this.callOnModel);\n    };\n    AutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\n    return AutoIndentOnPaste;\n}());\nexports.AutoIndentOnPaste = AutoIndentOnPaste;\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return;\n    }\n    var spaces = '';\n    for (var i = 0; i < tabSize; i++) {\n        spaces += ' ';\n    }\n    var spacesRegExp = new RegExp(spaces, 'gi');\n    for (var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        var lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (lastIndentationColumn === 0) {\n            lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n        }\n        if (lastIndentationColumn === 1) {\n            continue;\n        }\n        var originalIndentationRange = new range_1.Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n        var originalIndentation = model.getValueInRange(originalIndentationRange);\n        var newIndentation = (tabsToSpaces\n            ? originalIndentation.replace(/\\t/ig, spaces)\n            : originalIndentation.replace(spacesRegExp, '\\t'));\n        builder.addEditOperation(originalIndentationRange, newIndentation);\n    }\n}\nvar IndentationToSpacesCommand = /** @class */ (function () {\n    function IndentationToSpacesCommand(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n    }\n    IndentationToSpacesCommand.prototype.getEditOperations = function (model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, true);\n    };\n    IndentationToSpacesCommand.prototype.computeCursorState = function (model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    };\n    return IndentationToSpacesCommand;\n}());\nexports.IndentationToSpacesCommand = IndentationToSpacesCommand;\nvar IndentationToTabsCommand = /** @class */ (function () {\n    function IndentationToTabsCommand(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n    }\n    IndentationToTabsCommand.prototype.getEditOperations = function (model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, false);\n    };\n    IndentationToTabsCommand.prototype.computeCursorState = function (model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    };\n    return IndentationToTabsCommand;\n}());\nexports.IndentationToTabsCommand = IndentationToTabsCommand;\neditorExtensions_1.registerEditorContribution(AutoIndentOnPaste);\neditorExtensions_1.registerEditorAction(IndentationToSpacesAction);\neditorExtensions_1.registerEditorAction(IndentationToTabsAction);\neditorExtensions_1.registerEditorAction(IndentUsingTabs);\neditorExtensions_1.registerEditorAction(IndentUsingSpaces);\neditorExtensions_1.registerEditorAction(DetectIndentation);\neditorExtensions_1.registerEditorAction(ReindentLinesAction);\neditorExtensions_1.registerEditorAction(ReindentSelectedLinesAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/indentation/indentation.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/indentation/indentation.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, ServicesAccessor, registerEditorAction, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ShiftCommand } from 'vs/editor/common/commands/shiftCommand';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range, IRange } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder, IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IIdentifiedSingleEditOperation, ITextModel, EndOfLineSequence } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { StandardTokenType, TextEdit } from 'vs/editor/common/modes';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { IndentConsts } from 'vs/editor/common/modes/supports/indentRules';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport * as indentUtils from 'vs/editor/contrib/indentation/indentUtils';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\n\nexport function getReindentEditOperations(model: ITextModel, startLineNumber: number, endLineNumber: number, inheritedIndent?: string): IIdentifiedSingleEditOperation[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tlet indentationRules = LanguageConfigurationRegistry.getIndentationRules(model.getLanguageIdentifier().id);\n\tif (!indentationRules) {\n\t\treturn [];\n\t}\n\n\tendLineNumber = Math.min(endLineNumber, model.getLineCount());\n\n\t// Skip `unIndentedLinePattern` lines\n\twhile (startLineNumber <= endLineNumber) {\n\t\tif (!indentationRules.unIndentedLinePattern) {\n\t\t\tbreak;\n\t\t}\n\n\t\tlet text = model.getLineContent(startLineNumber);\n\t\tif (!indentationRules.unIndentedLinePattern.test(text)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstartLineNumber++;\n\t}\n\n\tif (startLineNumber > endLineNumber - 1) {\n\t\treturn [];\n\t}\n\n\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\tconst shiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst unshiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tlet indentEdits: IIdentifiedSingleEditOperation[] = [];\n\n\t// indentation being passed to lines below\n\tlet globalIndent: string;\n\n\t// Calculate indentation for the first line\n\t// If there is no passed-in indentation, we use the indentation of the first line as base.\n\tlet currentLineText = model.getLineContent(startLineNumber);\n\tlet adjustedLineContent = currentLineText;\n\tif (inheritedIndent !== undefined && inheritedIndent !== null) {\n\t\tglobalIndent = inheritedIndent;\n\t\tlet oldIndentation = strings.getLeadingWhitespace(currentLineText);\n\n\t\tadjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n\t\tif (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t\tadjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n\n\t\t}\n\t\tif (currentLineText !== adjustedLineContent) {\n\t\t\tindentEdits.push(EditOperation.replace(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), TextModel.normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n\t\t}\n\t} else {\n\t\tglobalIndent = strings.getLeadingWhitespace(currentLineText);\n\t}\n\n\t// idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n\tlet idealIndentForNextLine: string = globalIndent;\n\n\tif (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\tglobalIndent = shiftIndent(globalIndent);\n\t}\n\telse if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t}\n\n\tstartLineNumber++;\n\n\t// Calculate indentation adjustment for all following lines\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tlet text = model.getLineContent(lineNumber);\n\t\tlet oldIndentation = strings.getLeadingWhitespace(text);\n\t\tlet adjustedLineContent = idealIndentForNextLine + text.substring(oldIndentation.length);\n\n\t\tif (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tidealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t}\n\n\t\tif (oldIndentation !== idealIndentForNextLine) {\n\t\t\tindentEdits.push(EditOperation.replace(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), TextModel.normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n\t\t}\n\n\t\t// calculate idealIndentForNextLine\n\t\tif (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n\t\t\t// In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n\t\t\t// but don't change globalIndent and idealIndentForNextLine.\n\t\t\tcontinue;\n\t\t} else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n\t\t\tglobalIndent = shiftIndent(globalIndent);\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t} else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n\t\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\t} else {\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t}\n\t}\n\n\treturn indentEdits;\n}\n\nexport class IndentationToSpacesAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToSpaces';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToSpacesAction.ID,\n\t\t\tlabel: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n\t\t\talias: 'Convert Indentation to Spaces',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet modelOpts = model.getOptions();\n\t\tlet selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: true\n\t\t});\n\t}\n}\n\nexport class IndentationToTabsAction extends EditorAction {\n\tpublic static readonly ID = 'editor.action.indentationToTabs';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: IndentationToTabsAction.ID,\n\t\t\tlabel: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n\t\t\talias: 'Convert Indentation to Tabs',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet modelOpts = model.getOptions();\n\t\tlet selection = editor.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, [command]);\n\t\teditor.pushUndoStop();\n\n\t\tmodel.updateOptions({\n\t\t\tinsertSpaces: false\n\t\t});\n\t}\n}\n\nexport class ChangeIndentationSizeAction extends EditorAction {\n\n\tconstructor(private readonly insertSpaces: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n\t\tconst picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n\t\t\tid: n.toString(),\n\t\t\tlabel: n.toString(),\n\t\t\t// add description for tabSize value set in the configuration\n\t\t\tdescription: n === creationOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : undefined\n\t\t}));\n\n\t\t// auto focus the tabSize set for the current editor\n\t\tconst autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n\n\t\tsetTimeout(() => {\n\t\t\tquickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tif (model && !model.isDisposed()) {\n\t\t\t\t\t\tmodel.updateOptions({\n\t\t\t\t\t\t\ttabSize: parseInt(pick.label, 10),\n\t\t\t\t\t\t\tinsertSpaces: this.insertSpaces\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}, 50/* quick open is sensitive to being opened so soon after another */);\n\t}\n}\n\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingTabs';\n\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: IndentUsingTabs.ID,\n\t\t\tlabel: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n\t\t\talias: 'Indent Using Tabs',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n\n\tpublic static readonly ID = 'editor.action.indentUsingSpaces';\n\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: IndentUsingSpaces.ID,\n\t\t\tlabel: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n\t\t\talias: 'Indent Using Spaces',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class DetectIndentation extends EditorAction {\n\n\tpublic static readonly ID = 'editor.action.detectIndentation';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DetectIndentation.ID,\n\t\t\tlabel: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n\t\t\talias: 'Detect Indentation from Content',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst modelService = accessor.get(IModelService);\n\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet creationOpts = modelService.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n\t\tmodel.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n\t}\n}\n\nexport class ReindentLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentlines',\n\t\t\tlabel: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n\t\t\talias: 'Reindent Lines',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tlet edits = getReindentEditOperations(model, 1, model.getLineCount());\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class ReindentSelectedLinesAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.reindentselectedlines',\n\t\t\tlabel: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n\t\t\talias: 'Reindent Selected Lines',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet selections = editor.getSelections();\n\t\tif (selections === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet edits: IIdentifiedSingleEditOperation[] = [];\n\n\t\tfor (let selection of selections) {\n\t\t\tlet startLineNumber = selection.startLineNumber;\n\t\t\tlet endLineNumber = selection.endLineNumber;\n\n\t\t\tif (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n\t\t\t\tendLineNumber--;\n\t\t\t}\n\n\t\t\tif (startLineNumber === 1) {\n\t\t\t\tif (startLineNumber === endLineNumber) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber--;\n\t\t\t}\n\n\t\t\tlet editOperations = getReindentEditOperations(model, startLineNumber, endLineNumber);\n\t\t\tedits.push(...editOperations);\n\t\t}\n\n\t\tif (edits.length > 0) {\n\t\t\teditor.pushUndoStop();\n\t\t\teditor.executeEdits(this.id, edits);\n\t\t\teditor.pushUndoStop();\n\t\t}\n\t}\n}\n\nexport class AutoIndentOnPasteCommand implements ICommand {\n\n\tprivate readonly _edits: { range: IRange; text: string; eol?: EndOfLineSequence; }[];\n\n\tprivate readonly _initialSelection: Selection;\n\tprivate _selectionId: string;\n\n\tconstructor(edits: TextEdit[], initialSelection: Selection) {\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._edits = [];\n\n\t\tfor (let edit of edits) {\n\t\t\tif (edit.range && typeof edit.text === 'string') {\n\t\t\t\tthis._edits.push(edit as { range: IRange; text: string; eol?: EndOfLineSequence; });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tfor (let edit of this._edits) {\n\t\t\tbuilder.addEditOperation(Range.lift(edit.range), edit.text);\n\t\t}\n\n\t\tlet selectionIsSet = false;\n\t\tif (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n\t\t\tif (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n\t\t\t\tthis._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, true);\n\t\t\t} else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n\t\t\t\tthis._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n\t\t\t\tselectionIsSet = true;\n\t\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection, false);\n\t\t\t}\n\t\t}\n\n\t\tif (!selectionIsSet) {\n\t\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId);\n\t}\n}\n\nexport class AutoIndentOnPaste implements IEditorContribution {\n\tprivate static readonly ID = 'editor.contrib.autoIndentOnPaste';\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate callOnDispose: IDisposable[];\n\tprivate callOnModel: IDisposable[];\n\n\tconstructor(editor: ICodeEditor) {\n\t\tthis.editor = editor;\n\t\tthis.callOnDispose = [];\n\t\tthis.callOnModel = [];\n\n\t\tthis.callOnDispose.push(editor.onDidChangeConfiguration(() => this.update()));\n\t\tthis.callOnDispose.push(editor.onDidChangeModel(() => this.update()));\n\t\tthis.callOnDispose.push(editor.onDidChangeModelLanguage(() => this.update()));\n\t}\n\n\tprivate update(): void {\n\n\t\t// clean up\n\t\tthis.callOnModel = dispose(this.callOnModel);\n\n\t\t// we are disabled\n\t\tif (!this.editor.getConfiguration().autoIndent || this.editor.getConfiguration().contribInfo.formatOnPaste) {\n\t\t\treturn;\n\t\t}\n\n\t\t// no model\n\t\tif (!this.editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.callOnModel.push(this.editor.onDidPaste((range: Range) => {\n\t\t\tthis.trigger(range);\n\t\t}));\n\t}\n\n\tprivate trigger(range: Range): void {\n\t\tlet selections = this.editor.getSelections();\n\t\tif (selections === null || selections.length > 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!model.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tthis.editor.pushUndoStop();\n\t\tlet textEdits: TextEdit[] = [];\n\n\t\tlet indentConverter = {\n\t\t\tshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation: string) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\n\t\tlet startLineNumber = range.startLineNumber;\n\n\t\twhile (startLineNumber <= range.endLineNumber) {\n\t\t\tif (this.shouldIgnoreLine(model, startLineNumber)) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber > range.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet firstLineText = model.getLineContent(startLineNumber);\n\t\tif (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n\t\t\tlet indentOfFirstLine = LanguageConfigurationRegistry.getGoodIndentForLine(model, model.getLanguageIdentifier().id, startLineNumber, indentConverter);\n\n\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\tlet oldIndentation = strings.getLeadingWhitespace(firstLineText);\n\t\t\t\tlet newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\tlet oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\n\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\tlet newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\trange: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t});\n\t\t\t\t\tfirstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n\t\t\t\t} else {\n\t\t\t\t\tlet indentMetadata = LanguageConfigurationRegistry.getIndentMetadata(model, startLineNumber);\n\n\t\t\t\t\tif (indentMetadata === 0 || indentMetadata === IndentConsts.UNINDENT_MASK) {\n\t\t\t\t\t\t// we paste content into a line where only contains whitespaces\n\t\t\t\t\t\t// after pasting, the indentation of the first line is already correct\n\t\t\t\t\t\t// the first line doesn't match any indentation rule\n\t\t\t\t\t\t// then no-op.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst firstLineNumber = startLineNumber;\n\n\t\t// ignore empty or ignored lines\n\t\twhile (startLineNumber < range.endLineNumber) {\n\t\t\tif (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n\t\t\t\tstartLineNumber++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (startLineNumber !== range.endLineNumber) {\n\t\t\tlet virtualModel = {\n\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\treturn model.getLineTokens(lineNumber);\n\t\t\t\t},\n\t\t\t\tgetLanguageIdentifier: () => {\n\t\t\t\t\treturn model.getLanguageIdentifier();\n\t\t\t\t},\n\t\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t\t},\n\t\t\t\tgetLineContent: (lineNumber: number) => {\n\t\t\t\t\tif (lineNumber === firstLineNumber) {\n\t\t\t\t\t\treturn firstLineText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tlet indentOfSecondLine = LanguageConfigurationRegistry.getGoodIndentForLine(virtualModel, model.getLanguageIdentifier().id, startLineNumber + 1, indentConverter);\n\t\t\tif (indentOfSecondLine !== null) {\n\t\t\t\tlet newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n\t\t\t\tlet oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n\n\t\t\t\tif (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n\t\t\t\t\tlet spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n\t\t\t\t\tfor (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n\t\t\t\t\t\tlet lineContent = model.getLineContent(i);\n\t\t\t\t\t\tlet originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\t\t\t\tlet originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\t\t\t\tlet newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n\t\t\t\t\t\tlet newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\t\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\t\t\t\ttextEdits.push({\n\t\t\t\t\t\t\t\trange: new Range(i, 1, i, originalIndent.length + 1),\n\t\t\t\t\t\t\t\ttext: newIndent\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection()!);\n\t\tthis.editor.executeCommand('autoIndentOnPaste', cmd);\n\t\tthis.editor.pushUndoStop();\n\t}\n\n\tprivate shouldIgnoreLine(model: ITextModel, lineNumber: number): boolean {\n\t\tmodel.forceTokenization(lineNumber);\n\t\tlet nonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (nonWhiteSpaceColumn === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tlet tokens = model.getLineTokens(lineNumber);\n\t\tif (tokens.getCount() > 0) {\n\t\t\tlet firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhiteSpaceColumn);\n\t\t\tif (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === StandardTokenType.Comment) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic getId(): string {\n\t\treturn AutoIndentOnPaste.ID;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.callOnDispose = dispose(this.callOnDispose);\n\t\tthis.callOnModel = dispose(this.callOnModel);\n\t}\n}\n\nfunction getIndentationEditOperations(model: ITextModel, builder: IEditOperationBuilder, tabSize: number, tabsToSpaces: boolean): void {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn;\n\t}\n\n\tlet spaces = '';\n\tfor (let i = 0; i < tabSize; i++) {\n\t\tspaces += ' ';\n\t}\n\n\tlet spacesRegExp = new RegExp(spaces, 'gi');\n\n\tfor (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n\t\tlet lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\tif (lastIndentationColumn === 0) {\n\t\t\tlastIndentationColumn = model.getLineMaxColumn(lineNumber);\n\t\t}\n\n\t\tif (lastIndentationColumn === 1) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n\t\tconst originalIndentation = model.getValueInRange(originalIndentationRange);\n\t\tconst newIndentation = (\n\t\t\ttabsToSpaces\n\t\t\t\t? originalIndentation.replace(/\\t/ig, spaces)\n\t\t\t\t: originalIndentation.replace(spacesRegExp, '\\t')\n\t\t);\n\n\t\tbuilder.addEditOperation(originalIndentationRange, newIndentation);\n\t}\n}\n\nexport class IndentationToSpacesCommand implements ICommand {\n\n\tprivate selectionId: string;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, true);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\nexport class IndentationToTabsCommand implements ICommand {\n\n\tprivate selectionId: string;\n\n\tconstructor(private readonly selection: Selection, private tabSize: number) { }\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t\tgetIndentationEditOperations(model, builder, this.tabSize, false);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId);\n\t}\n}\n\nregisterEditorContribution(AutoIndentOnPaste);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);"]}]}