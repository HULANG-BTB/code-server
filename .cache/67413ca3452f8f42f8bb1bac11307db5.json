{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/experiments/electron-browser/experimentalPrompt.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/platform/notification/common/notification\", \"vs/workbench/contrib/experiments/node/experimentService\", \"vs/platform/telemetry/common/telemetry\", \"vs/base/common/lifecycle\", \"vs/base/common/platform\"], function (require, exports, viewlet_1, notification_1, experimentService_1, telemetry_1, lifecycle_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ExperimentalPrompts = class ExperimentalPrompts extends lifecycle_1.Disposable {\n        constructor(experimentService, viewletService, notificationService, telemetryService) {\n            super();\n            this.experimentService = experimentService;\n            this.viewletService = viewletService;\n            this.notificationService = notificationService;\n            this.telemetryService = telemetryService;\n            this._disposables = [];\n            this.experimentService.onExperimentEnabled(e => {\n                if (e.action && e.action.type === experimentService_1.ExperimentActionType.Prompt && e.state === experimentService_1.ExperimentState.Run) {\n                    this.showExperimentalPrompts(e);\n                }\n            }, this, this._disposables);\n        }\n        showExperimentalPrompts(experiment) {\n            if (!experiment || !experiment.enabled || !experiment.action || experiment.state !== experimentService_1.ExperimentState.Run) {\n                return;\n            }\n            const logTelemetry = (commandText) => {\n                /* __GDPR__\n                    \"experimentalPrompts\" : {\n                        \"experimentId\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"commandText\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"cancelled\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                    }\n                */\n                this.telemetryService.publicLog('experimentalPrompts', {\n                    experimentId: experiment.id,\n                    commandText,\n                    cancelled: !commandText\n                });\n            };\n            const actionProperties = experiment.action.properties;\n            const promptText = ExperimentalPrompts.getLocalizedText(actionProperties.promptText, platform_1.language || '');\n            if (!actionProperties || !promptText) {\n                return;\n            }\n            if (!actionProperties.commands) {\n                actionProperties.commands = [];\n            }\n            const choices = actionProperties.commands.map((command) => {\n                const commandText = ExperimentalPrompts.getLocalizedText(command.text, platform_1.language || '');\n                return {\n                    label: commandText,\n                    run: () => {\n                        logTelemetry(commandText);\n                        if (command.externalLink) {\n                            window.open(command.externalLink);\n                        }\n                        else if (command.curatedExtensionsKey && Array.isArray(command.curatedExtensionsList)) {\n                            this.viewletService.openViewlet('workbench.view.extensions', true)\n                                .then(viewlet => viewlet)\n                                .then(viewlet => {\n                                if (viewlet) {\n                                    viewlet.search('curated:' + command.curatedExtensionsKey);\n                                }\n                            });\n                        }\n                        this.experimentService.markAsCompleted(experiment.id);\n                    }\n                };\n            });\n            this.notificationService.prompt(notification_1.Severity.Info, promptText, choices, {\n                onCancel: () => {\n                    logTelemetry();\n                    this.experimentService.markAsCompleted(experiment.id);\n                }\n            });\n        }\n        dispose() {\n            this._disposables = lifecycle_1.dispose(this._disposables);\n        }\n        static getLocalizedText(text, displayLanguage) {\n            if (typeof text === 'string') {\n                return text;\n            }\n            const msgInEnglish = text['en'] || text['en-us'];\n            displayLanguage = displayLanguage.toLowerCase();\n            if (!text[displayLanguage] && displayLanguage.indexOf('-') === 2) {\n                displayLanguage = displayLanguage.substr(0, 2);\n            }\n            return text[displayLanguage] || msgInEnglish;\n        }\n    };\n    ExperimentalPrompts = __decorate([\n        __param(0, experimentService_1.IExperimentService),\n        __param(1, viewlet_1.IViewletService),\n        __param(2, notification_1.INotificationService),\n        __param(3, telemetry_1.ITelemetryService)\n    ], ExperimentalPrompts);\n    exports.ExperimentalPrompts = ExperimentalPrompts;\n});\n",null]}