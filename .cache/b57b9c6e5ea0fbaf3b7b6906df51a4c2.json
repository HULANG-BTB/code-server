{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/ide/src/fill/clipboard.ts","dependencies":[{"path":"/home/coding/workspace/packages/ide/src/fill/clipboard.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"@coder/events\"], function (require, exports, events_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Wrapper around the native clipboard with some fallbacks.\n     */\n    class Clipboard {\n        constructor() {\n            this.enableEmitter = new events_1.Emitter();\n            this.onPermissionChange = this.enableEmitter.event;\n            this._isEnabled = false;\n        }\n        /**\n         * Ask for permission to use the clipboard.\n         */\n        initialize() {\n            // tslint:disable no-any\n            const navigatorClip = navigator.clipboard;\n            const navigatorPerms = navigator.permissions;\n            // tslint:enable no-any\n            if (navigatorClip && navigatorPerms) {\n                navigatorPerms.query({\n                    name: \"clipboard-read\",\n                }).then((permissionStatus) => {\n                    const updateStatus = () => {\n                        this._isEnabled = permissionStatus.state !== \"denied\";\n                        this.enableEmitter.emit(this.isEnabled);\n                    };\n                    updateStatus();\n                    permissionStatus.onchange = () => {\n                        updateStatus();\n                    };\n                });\n            }\n        }\n        /**\n         * Paste currently copied text.\n         */\n        paste() {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (this.isEnabled) {\n                    try {\n                        const element = document.activeElement;\n                        const start = element.selectionStart || 0;\n                        const end = element.selectionEnd;\n                        const allText = element.value;\n                        const newText = allText.substring(0, start)\n                            + (yield this.readText())\n                            + allText.substring(end || start);\n                        element.value = newText;\n                        return true;\n                    }\n                    catch (ex) {\n                        // Will try execCommand below.\n                    }\n                }\n                return document.execCommand(\"paste\");\n            });\n        }\n        /**\n         * Return true if the native clipboard is supported.\n         */\n        get isSupported() {\n            // tslint:disable no-any\n            return typeof navigator !== \"undefined\"\n                && typeof navigator.clipboard !== \"undefined\"\n                && typeof navigator.clipboard.readText !== \"undefined\";\n            // tslint:enable no-any\n        }\n        /**\n         * Read text from the clipboard.\n         */\n        readText() {\n            return this.instance ? this.instance.readText() : Promise.resolve(\"\");\n        }\n        /**\n         * Write text to the clipboard.\n         */\n        writeText(value) {\n            return this.instance\n                ? this.instance.writeText(value)\n                : this.writeTextFallback(value);\n        }\n        /**\n         * Return true if the clipboard is currently enabled.\n         */\n        get isEnabled() {\n            return !!this._isEnabled;\n        }\n        /**\n         * Return clipboard instance if there is one.\n         */\n        get instance() {\n            // tslint:disable-next-line no-any\n            return this.isSupported ? navigator.clipboard : undefined;\n        }\n        /**\n         * Fallback for writing text to the clipboard.\n         * Taken from https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n         */\n        writeTextFallback(value) {\n            // Note the current focus and selection.\n            const active = document.activeElement;\n            const selection = document.getSelection();\n            const selected = selection && selection.rangeCount > 0\n                ? selection.getRangeAt(0)\n                : false;\n            // Insert a hidden textarea to put the text to copy in.\n            const el = document.createElement(\"textarea\");\n            el.value = value;\n            el.setAttribute(\"readonly\", \"\");\n            el.style.position = \"absolute\";\n            el.style.left = \"-9999px\";\n            document.body.appendChild(el);\n            // Select the textarea and execute a copy (this will only work as part of a\n            // user interaction).\n            el.select();\n            document.execCommand(\"copy\");\n            // Remove the textarea and put focus and selection back to where it was\n            // previously.\n            document.body.removeChild(el);\n            active.focus();\n            if (selected && selection) {\n                selection.removeAllRanges();\n                selection.addRange(selected);\n            }\n            return Promise.resolve();\n        }\n    }\n    exports.Clipboard = Clipboard;\n    // Global clipboard instance since it's used in the Electron fill.\n    exports.clipboard = new Clipboard();\n});\n",null]}