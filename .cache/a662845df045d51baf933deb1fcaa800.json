{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWindow.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWindow.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar MainThreadWindow = /** @class */ (function () {\n    function MainThreadWindow(extHostContext, windowService, windowsService) {\n        this.windowService = windowService;\n        this.windowsService = windowsService;\n        this.disposables = [];\n        this.proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostWindow);\n        event_1.Event.latch(windowService.onDidChangeFocus)(this.proxy.$onDidChangeWindowFocus, this.proxy, this.disposables);\n    }\n    MainThreadWindow.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    MainThreadWindow.prototype.$getWindowVisibility = function () {\n        return this.windowService.isFocused();\n    };\n    MainThreadWindow.prototype.$openUri = function (uri) {\n        return this.windowsService.openExternal(uri_1.URI.revive(uri).toString(true));\n    };\n    MainThreadWindow = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadWindow),\n        tslib_1.__param(1, windows_1.IWindowService),\n        tslib_1.__param(2, windows_1.IWindowsService)\n    ], MainThreadWindow);\n    return MainThreadWindow;\n}());\nexports.MainThreadWindow = MainThreadWindow;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWindow.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWindow.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAA6C;AAC7C,sDAAgE;AAChE,0CAAwD;AACxD,8DAAqF;AACrF,6EAAgF;AAChF,+DAAqI;AAGrI;IAKC,0BACC,cAA+B,EACE,aAA6B,EAC5B,cAA+B;QADhC,kBAAa,GAAb,aAAa,CAAgB;QAC5B,mBAAc,GAAd,cAAc,CAAiB;QAL1D,gBAAW,GAAkB,EAAE,CAAC;QAOvC,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,aAAa,CAAC,CAAC;QAEnE,aAAK,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,CACzC,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACrE,CAAC;IAED,kCAAO,GAAP;QACC,IAAI,CAAC,WAAW,GAAG,mBAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED,+CAAoB,GAApB;QACC,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;IACvC,CAAC;IAED,mCAAQ,GAAR,UAAS,GAAkB;QAC1B,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACzE,CAAC;IA1BW,gBAAgB;QAD5B,uCAAoB,CAAC,8BAAW,CAAC,gBAAgB,CAAC;QAQhD,mBAAA,wBAAc,CAAA;QACd,mBAAA,yBAAe,CAAA;OARL,gBAAgB,CA2B5B;IAAD,uBAAC;CAAA,AA3BD,IA2BC;AA3BY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IWindowService, IWindowsService } from 'vs/platform/windows/common/windows';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, ExtHostWindowShape, IExtHostContext, MainContext, MainThreadWindowShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadWindow)\nexport class MainThreadWindow implements MainThreadWindowShape {\n\n\tprivate readonly proxy: ExtHostWindowShape;\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostWindow);\n\n\t\tEvent.latch(windowService.onDidChangeFocus)\n\t\t\t(this.proxy.$onDidChangeWindowFocus, this.proxy, this.disposables);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n\n\t$getWindowVisibility(): Promise<boolean> {\n\t\treturn this.windowService.isFocused();\n\t}\n\n\t$openUri(uri: UriComponents): Promise<boolean> {\n\t\treturn this.windowsService.openExternal(URI.revive(uri).toString(true));\n\t}\n}\n"]}]}