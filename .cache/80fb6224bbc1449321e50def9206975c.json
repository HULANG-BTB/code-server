{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar electron_1 = require(\"electron\");\nvar diskFileSystemProvider_1 = require(\"vs/workbench/services/files2/node/diskFileSystemProvider\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar nls_1 = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar DiskFileSystemProvider = /** @class */ (function (_super) {\n    tslib_1.__extends(DiskFileSystemProvider, _super);\n    function DiskFileSystemProvider(logService) {\n        return _super.call(this, logService) || this;\n    }\n    Object.defineProperty(DiskFileSystemProvider.prototype, \"capabilities\", {\n        get: function () {\n            if (!this._capabilities) {\n                this._capabilities = _super.prototype.capabilities | files_1.FileSystemProviderCapabilities.Trash;\n            }\n            return this._capabilities;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DiskFileSystemProvider.prototype.doDelete = function (filePath, opts) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                if (!opts.useTrash) {\n                    return [2 /*return*/, _super.prototype.doDelete.call(this, filePath, opts)];\n                }\n                result = electron_1.shell.moveItemToTrash(filePath);\n                if (!result) {\n                    throw new Error(platform_1.isWindows ? nls_1.localize('binFailed', \"Failed to move '{0}' to the recycle bin\", path_1.basename(filePath)) : nls_1.localize('trashFailed', \"Failed to move '{0}' to the trash\", path_1.basename(filePath)));\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return DiskFileSystemProvider;\n}(diskFileSystemProvider_1.DiskFileSystemProvider));\nexports.DiskFileSystemProvider = DiskFileSystemProvider;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/files2/electron-browser/diskFileSystemProvider.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qCAAiC;AACjC,mGAAgI;AAChI,wDAAmG;AACnG,oDAAoD;AACpD,8BAAkC;AAClC,4CAA+C;AAG/C;IAA4C,kDAA0B;IAErE,gCAAY,UAAuB;eAClC,kBAAM,UAAU,CAAC;IAClB,CAAC;IAED,sBAAI,gDAAY;aAAhB;YACC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACxB,IAAI,CAAC,aAAa,GAAG,iBAAM,YAAY,GAAG,sCAA8B,CAAC,KAAK,CAAC;aAC/E;YAED,OAAO,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;;;OAAA;IAEe,yCAAQ,GAAxB,UAAyB,QAAgB,EAAE,IAAuB;+CAAG,OAAO;;;gBAC3E,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;oBACnB,sBAAO,iBAAM,QAAQ,YAAC,QAAQ,EAAE,IAAI,CAAC,EAAC;iBACtC;gBAEK,MAAM,GAAG,gBAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC/C,IAAI,CAAC,MAAM,EAAE;oBACZ,MAAM,IAAI,KAAK,CAAC,oBAAS,CAAC,CAAC,CAAC,cAAQ,CAAC,WAAW,EAAE,yCAAyC,EAAE,eAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAQ,CAAC,aAAa,EAAE,mCAAmC,EAAE,eAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACrM;;;;KACD;IACF,6BAAC;AAAD,CAAC,AAxBD,CAA4C,+CAA0B,GAwBrE;AAxBY,wDAAsB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shell } from 'electron';\nimport { DiskFileSystemProvider as NodeDiskFileSystemProvider } from 'vs/workbench/services/files2/node/diskFileSystemProvider';\nimport { FileDeleteOptions, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { isWindows } from 'vs/base/common/platform';\nimport { localize } from 'vs/nls';\nimport { basename } from 'vs/base/common/path';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class DiskFileSystemProvider extends NodeDiskFileSystemProvider {\n\n\tconstructor(logService: ILogService) {\n\t\tsuper(logService);\n\t}\n\n\tget capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._capabilities) {\n\t\t\tthis._capabilities = super.capabilities | FileSystemProviderCapabilities.Trash;\n\t\t}\n\n\t\treturn this._capabilities;\n\t}\n\n\tprotected async doDelete(filePath: string, opts: FileDeleteOptions): Promise<void> {\n\t\tif (!opts.useTrash) {\n\t\t\treturn super.doDelete(filePath, opts);\n\t\t}\n\n\t\tconst result = shell.moveItemToTrash(filePath);\n\t\tif (!result) {\n\t\t\tthrow new Error(isWindows ? localize('binFailed', \"Failed to move '{0}' to the recycle bin\", basename(filePath)) : localize('trashFailed', \"Failed to move '{0}' to the trash\", basename(filePath)));\n\t\t}\n\t}\n}"]}]}