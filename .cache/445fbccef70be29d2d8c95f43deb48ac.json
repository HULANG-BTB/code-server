{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/resourceEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\", \"vs/editor/common/services/resolverService\", \"vs/workbench/common/editor/resourceEditorModel\"], function (require, exports, editor_1, resolverService_1, resourceEditorModel_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A read-only text editor input whos contents are made of the provided resource that points to an existing\n     * code editor model.\n     */\n    let ResourceEditorInput = class ResourceEditorInput extends editor_1.EditorInput {\n        constructor(name, description, resource, textModelResolverService) {\n            super();\n            this.name = name;\n            this.description = description;\n            this.resource = resource;\n            this.textModelResolverService = textModelResolverService;\n            this.name = name;\n            this.description = description;\n            this.resource = resource;\n        }\n        getResource() {\n            return this.resource;\n        }\n        getTypeId() {\n            return ResourceEditorInput.ID;\n        }\n        getName() {\n            return this.name;\n        }\n        setName(name) {\n            if (this.name !== name) {\n                this.name = name;\n                this._onDidChangeLabel.fire();\n            }\n        }\n        getDescription() {\n            return this.description;\n        }\n        setDescription(description) {\n            if (this.description !== description) {\n                this.description = description;\n                this._onDidChangeLabel.fire();\n            }\n        }\n        resolve() {\n            if (!this.modelReference) {\n                this.modelReference = this.textModelResolverService.createModelReference(this.resource);\n            }\n            return this.modelReference.then(ref => {\n                const model = ref.object;\n                if (!(model instanceof resourceEditorModel_1.ResourceEditorModel)) {\n                    ref.dispose();\n                    this.modelReference = null;\n                    return Promise.reject(new Error(`Unexpected model for ResourceInput: ${this.resource}`));\n                }\n                return model;\n            });\n        }\n        matches(otherInput) {\n            if (super.matches(otherInput) === true) {\n                return true;\n            }\n            if (otherInput instanceof ResourceEditorInput) {\n                let otherResourceEditorInput = otherInput;\n                // Compare by properties\n                return otherResourceEditorInput.resource.toString() === this.resource.toString();\n            }\n            return false;\n        }\n        dispose() {\n            if (this.modelReference) {\n                this.modelReference.then(ref => ref.dispose());\n                this.modelReference = null;\n            }\n            super.dispose();\n        }\n    };\n    ResourceEditorInput.ID = 'workbench.editors.resourceEditorInput';\n    ResourceEditorInput = __decorate([\n        __param(3, resolverService_1.ITextModelService)\n    ], ResourceEditorInput);\n    exports.ResourceEditorInput = ResourceEditorInput;\n});\n",null]}