{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalMenu.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/actions/common/actions\", \"vs/workbench/contrib/terminal/common/terminalCommands\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, nls, actions_1, terminalCommands_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function setupTerminalMenu() {\n        // View menu\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n            group: '4_panels',\n            command: {\n                id: terminalCommands_1.TERMINAL_COMMAND_ID.TOGGLE,\n                title: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\")\n            },\n            order: 3\n        });\n        // Manage\n        const createGroup = '1_create';\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n            group: createGroup,\n            command: {\n                id: terminalCommands_1.TERMINAL_COMMAND_ID.NEW,\n                title: nls.localize({ key: 'miNewTerminal', comment: ['&& denotes a mnemonic'] }, \"&&New Terminal\")\n            },\n            order: 1\n        });\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n            group: createGroup,\n            command: {\n                id: terminalCommands_1.TERMINAL_COMMAND_ID.SPLIT,\n                title: nls.localize({ key: 'miSplitTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Split Terminal\"),\n                precondition: contextkey_1.ContextKeyExpr.has('terminalIsOpen')\n            },\n            order: 2\n        });\n        // Run\n        const runGroup = '2_run';\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n            group: runGroup,\n            command: {\n                id: terminalCommands_1.TERMINAL_COMMAND_ID.RUN_ACTIVE_FILE,\n                title: nls.localize({ key: 'miRunActiveFile', comment: ['&& denotes a mnemonic'] }, \"Run &&Active File\")\n            },\n            order: 3\n        });\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarTerminalMenu, {\n            group: runGroup,\n            command: {\n                id: terminalCommands_1.TERMINAL_COMMAND_ID.RUN_SELECTED_TEXT,\n                title: nls.localize({ key: 'miRunSelectedText', comment: ['&& denotes a mnemonic'] }, \"Run &&Selected Text\")\n            },\n            order: 4\n        });\n    }\n    exports.setupTerminalMenu = setupTerminalMenu;\n});\n",null]}