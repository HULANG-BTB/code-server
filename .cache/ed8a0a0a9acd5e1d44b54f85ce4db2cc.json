{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchPanel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchPanel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar search_1 = require(\"vs/workbench/services/search/common/search\");\nvar searchView_1 = require(\"vs/workbench/contrib/search/browser/searchView\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar nls_1 = require(\"vs/nls\");\nvar dom = require(\"vs/base/browser/dom\");\nvar SearchPanel = /** @class */ (function (_super) {\n    tslib_1.__extends(SearchPanel, _super);\n    function SearchPanel(telemetryService, themeService, storageService, instantiationService) {\n        var _this = _super.call(this, search_1.PANEL_ID, telemetryService, themeService, storageService) || this;\n        _this.searchView = _this._register(instantiationService.createInstance(searchView_1.SearchView, { id: search_1.PANEL_ID, title: nls_1.localize('search', \"Search\") }));\n        _this._register(_this.searchView.onDidChangeTitleArea(function () { return _this.updateTitleArea(); }));\n        _this._register(_this.onDidChangeVisibility(function (visible) { return _this.searchView.setVisible(visible); }));\n        return _this;\n    }\n    SearchPanel.prototype.create = function (parent) {\n        dom.addClasses(parent, 'monaco-panel-view', 'search-panel');\n        this.searchView.render();\n        dom.append(parent, this.searchView.element);\n        this.searchView.setExpanded(true);\n        this.searchView.headerVisible = false;\n    };\n    SearchPanel.prototype.getTitle = function () {\n        return this.searchView.title;\n    };\n    SearchPanel.prototype.layout = function (dimension) {\n        this.searchView.width = dimension.width;\n        this.searchView.layout(dimension.height);\n    };\n    SearchPanel.prototype.focus = function () {\n        this.searchView.focus();\n    };\n    SearchPanel.prototype.getActions = function () {\n        return this.searchView.getActions();\n    };\n    SearchPanel.prototype.getSecondaryActions = function () {\n        return this.searchView.getSecondaryActions();\n    };\n    SearchPanel.prototype.saveState = function () {\n        this.searchView.saveState();\n        _super.prototype.saveState.call(this);\n    };\n    SearchPanel.prototype.getSearchView = function () {\n        return this.searchView;\n    };\n    SearchPanel = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, themeService_1.IThemeService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], SearchPanel);\n    return SearchPanel;\n}(panel_1.Panel));\nexports.SearchPanel = SearchPanel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchPanel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/browser/searchPanel.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oEAA2E;AAC3E,8DAAqE;AACrE,sEAAsE;AACtE,qEAAsE;AACtE,6EAA4E;AAC5E,oDAAmD;AACnD,gFAAuF;AACvF,8BAAkC;AAClC,yCAA2C;AAG3C;IAAiC,uCAAK;IAIrC,qBACoB,gBAAmC,EACvC,YAA2B,EACzB,cAA+B,EACzB,oBAA2C;QAJnE,YAMC,kBAAM,iBAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE,cAAc,CAAC,SAI/D;QAHA,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,cAAc,CAAC,uBAAU,EAAE,EAAE,EAAE,EAAE,iBAAQ,EAAE,KAAK,EAAE,cAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QACzI,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,cAAM,OAAA,KAAI,CAAC,eAAe,EAAE,EAAtB,CAAsB,CAAC,CAAC,CAAC;QACnF,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,qBAAqB,CAAC,UAAA,OAAO,IAAI,OAAA,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;;IAC5F,CAAC;IAED,4BAAM,GAAN,UAAO,MAAmB;QACzB,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,mBAAmB,EAAE,cAAc,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QACzB,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,KAAK,CAAC;IACvC,CAAC;IAEM,8BAAQ,GAAf;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAC9B,CAAC;IAEM,4BAAM,GAAb,UAAc,SAAwB;QACrC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QACxC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAC;IAEM,2BAAK,GAAZ;QACC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,gCAAU,GAAV;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC;IAED,yCAAmB,GAAnB;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;IAC9C,CAAC;IAED,+BAAS,GAAT;QACC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;QAC5B,iBAAM,SAAS,WAAE,CAAC;IACnB,CAAC;IAED,mCAAa,GAAb;QACC,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IApDW,WAAW;QAKrB,mBAAA,6BAAiB,CAAA;QACjB,mBAAA,4BAAa,CAAA;QACb,mBAAA,yBAAe,CAAA;QACf,mBAAA,qCAAqB,CAAA;OARX,WAAW,CAqDvB;IAAD,kBAAC;CAAA,AArDD,CAAiC,aAAK,GAqDrC;AArDY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { PANEL_ID } from 'vs/workbench/services/search/common/search';\nimport { SearchView } from 'vs/workbench/contrib/search/browser/searchView';\nimport { Panel } from 'vs/workbench/browser/panel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { localize } from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { IAction } from 'vs/base/common/actions';\n\nexport class SearchPanel extends Panel {\n\n\tprivate readonly searchView: SearchView;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper(PANEL_ID, telemetryService, themeService, storageService);\n\t\tthis.searchView = this._register(instantiationService.createInstance(SearchView, { id: PANEL_ID, title: localize('search', \"Search\") }));\n\t\tthis._register(this.searchView.onDidChangeTitleArea(() => this.updateTitleArea()));\n\t\tthis._register(this.onDidChangeVisibility(visible => this.searchView.setVisible(visible)));\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tdom.addClasses(parent, 'monaco-panel-view', 'search-panel');\n\t\tthis.searchView.render();\n\t\tdom.append(parent, this.searchView.element);\n\t\tthis.searchView.setExpanded(true);\n\t\tthis.searchView.headerVisible = false;\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn this.searchView.title;\n\t}\n\n\tpublic layout(dimension: dom.Dimension): void {\n\t\tthis.searchView.width = dimension.width;\n\t\tthis.searchView.layout(dimension.height);\n\t}\n\n\tpublic focus(): void {\n\t\tthis.searchView.focus();\n\t}\n\n\tgetActions(): IAction[] {\n\t\treturn this.searchView.getActions();\n\t}\n\n\tgetSecondaryActions(): IAction[] {\n\t\treturn this.searchView.getSecondaryActions();\n\t}\n\n\tsaveState(): void {\n\t\tthis.searchView.saveState();\n\t\tsuper.saveState();\n\t}\n\n\tgetSearchView(): SearchView {\n\t\treturn this.searchView;\n\t}\n}"]}]}