{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/sharedProcessService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/sharedProcessService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar ipc_net_1 = require(\"vs/base/parts/ipc/node/ipc.net\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar ipc_1 = require(\"vs/base/parts/ipc/common/ipc\");\nexports.ISharedProcessService = instantiation_1.createDecorator('sharedProcessService');\nvar SharedProcessService = /** @class */ (function () {\n    function SharedProcessService(windowsService, windowService, environmentService) {\n        this.withSharedProcessConnection = windowsService.whenSharedProcessReady()\n            .then(function () { return ipc_net_1.connect(environmentService.sharedIPCHandle, \"window:\" + windowService.getCurrentWindowId()); });\n    }\n    SharedProcessService.prototype.getChannel = function (channelName) {\n        return ipc_1.getDelayedChannel(this.withSharedProcessConnection.then(function (connection) { return connection.getChannel(channelName); }));\n    };\n    SharedProcessService.prototype.registerChannel = function (channelName, channel) {\n        this.withSharedProcessConnection.then(function (connection) { return connection.registerChannel(channelName, channel); });\n    };\n    SharedProcessService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowsService),\n        tslib_1.__param(1, windows_1.IWindowService),\n        tslib_1.__param(2, environment_1.IEnvironmentService)\n    ], SharedProcessService);\n    return SharedProcessService;\n}());\nexports.SharedProcessService = SharedProcessService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/sharedProcessService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/ipc/electron-browser/sharedProcessService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,gFAAoG;AAEpG,0DAAyD;AACzD,8DAAqF;AACrF,0EAAiF;AACjF,oDAA2F;AAE9E,QAAA,qBAAqB,GAAG,+BAAe,CAAwB,sBAAsB,CAAC,CAAC;AAWpG;IAMC,8BACkB,cAA+B,EAChC,aAA6B,EACxB,kBAAuC;QAE5D,IAAI,CAAC,2BAA2B,GAAG,cAAc,CAAC,sBAAsB,EAAE;aACxE,IAAI,CAAC,cAAM,OAAA,iBAAO,CAAC,kBAAkB,CAAC,eAAe,EAAE,YAAU,aAAa,CAAC,kBAAkB,EAAI,CAAC,EAA3F,CAA2F,CAAC,CAAC;IAC3G,CAAC;IAED,yCAAU,GAAV,UAAW,WAAmB;QAC7B,OAAO,uBAAiB,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,EAAlC,CAAkC,CAAC,CAAC,CAAC;IACnH,CAAC;IAED,8CAAe,GAAf,UAAgB,WAAmB,EAAE,OAA+B;QACnE,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,EAAhD,CAAgD,CAAC,CAAC;IACvG,CAAC;IArBW,oBAAoB;QAO9B,mBAAA,yBAAe,CAAA;QACf,mBAAA,wBAAc,CAAA;QACd,mBAAA,iCAAmB,CAAA;OATT,oBAAoB,CAsBhC;IAAD,2BAAC;CAAA,AAtBD,IAsBC;AAtBY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { Client } from 'vs/base/parts/ipc/common/ipc.net';\nimport { connect } from 'vs/base/parts/ipc/node/ipc.net';\nimport { IWindowsService, IWindowService } from 'vs/platform/windows/common/windows';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IChannel, IServerChannel, getDelayedChannel } from 'vs/base/parts/ipc/common/ipc';\n\nexport const ISharedProcessService = createDecorator<ISharedProcessService>('sharedProcessService');\n\nexport interface ISharedProcessService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tgetChannel(channelName: string): IChannel;\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void;\n}\n\nexport class SharedProcessService implements ISharedProcessService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate withSharedProcessConnection: Promise<Client<string>>;\n\n\tconstructor(\n\t\t@IWindowsService windowsService: IWindowsService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tthis.withSharedProcessConnection = windowsService.whenSharedProcessReady()\n\t\t\t.then(() => connect(environmentService.sharedIPCHandle, `window:${windowService.getCurrentWindowId()}`));\n\t}\n\n\tgetChannel(channelName: string): IChannel {\n\t\treturn getDelayedChannel(this.withSharedProcessConnection.then(connection => connection.getChannel(channelName)));\n\t}\n\n\tregisterChannel(channelName: string, channel: IServerChannel<string>): void {\n\t\tthis.withSharedProcessConnection.then(connection => connection.registerChannel(channelName, channel));\n\t}\n}"]}]}