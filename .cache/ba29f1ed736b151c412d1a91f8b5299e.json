{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/notificationsActions\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar notificationsCommands_1 = require(\"vs/workbench/browser/parts/notifications/notificationsCommands\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar ClearNotificationAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearNotificationAction, _super);\n    function ClearNotificationAction(id, label, commandService) {\n        var _this = _super.call(this, id, label, 'clear-notification-action') || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    ClearNotificationAction.prototype.run = function (notification) {\n        this.commandService.executeCommand(notificationsCommands_1.CLEAR_NOTIFICATION, notification);\n        return Promise.resolve();\n    };\n    ClearNotificationAction.ID = notificationsCommands_1.CLEAR_NOTIFICATION;\n    ClearNotificationAction.LABEL = nls_1.localize('clearNotification', \"Clear Notification\");\n    ClearNotificationAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], ClearNotificationAction);\n    return ClearNotificationAction;\n}(actions_1.Action));\nexports.ClearNotificationAction = ClearNotificationAction;\nvar ClearAllNotificationsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearAllNotificationsAction, _super);\n    function ClearAllNotificationsAction(id, label, commandService) {\n        var _this = _super.call(this, id, label, 'clear-all-notifications-action') || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    ClearAllNotificationsAction.prototype.run = function (notification) {\n        this.commandService.executeCommand(notificationsCommands_1.CLEAR_ALL_NOTIFICATIONS);\n        return Promise.resolve();\n    };\n    ClearAllNotificationsAction.ID = notificationsCommands_1.CLEAR_ALL_NOTIFICATIONS;\n    ClearAllNotificationsAction.LABEL = nls_1.localize('clearNotifications', \"Clear All Notifications\");\n    ClearAllNotificationsAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], ClearAllNotificationsAction);\n    return ClearAllNotificationsAction;\n}(actions_1.Action));\nexports.ClearAllNotificationsAction = ClearAllNotificationsAction;\nvar HideNotificationsCenterAction = /** @class */ (function (_super) {\n    tslib_1.__extends(HideNotificationsCenterAction, _super);\n    function HideNotificationsCenterAction(id, label, commandService) {\n        var _this = _super.call(this, id, label, 'hide-all-notifications-action') || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    HideNotificationsCenterAction.prototype.run = function (notification) {\n        this.commandService.executeCommand(notificationsCommands_1.HIDE_NOTIFICATIONS_CENTER);\n        return Promise.resolve();\n    };\n    HideNotificationsCenterAction.ID = notificationsCommands_1.HIDE_NOTIFICATIONS_CENTER;\n    HideNotificationsCenterAction.LABEL = nls_1.localize('hideNotificationsCenter', \"Hide Notifications\");\n    HideNotificationsCenterAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], HideNotificationsCenterAction);\n    return HideNotificationsCenterAction;\n}(actions_1.Action));\nexports.HideNotificationsCenterAction = HideNotificationsCenterAction;\nvar ExpandNotificationAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpandNotificationAction, _super);\n    function ExpandNotificationAction(id, label, commandService) {\n        var _this = _super.call(this, id, label, 'expand-notification-action') || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    ExpandNotificationAction.prototype.run = function (notification) {\n        this.commandService.executeCommand(notificationsCommands_1.EXPAND_NOTIFICATION, notification);\n        return Promise.resolve();\n    };\n    ExpandNotificationAction.ID = notificationsCommands_1.EXPAND_NOTIFICATION;\n    ExpandNotificationAction.LABEL = nls_1.localize('expandNotification', \"Expand Notification\");\n    ExpandNotificationAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], ExpandNotificationAction);\n    return ExpandNotificationAction;\n}(actions_1.Action));\nexports.ExpandNotificationAction = ExpandNotificationAction;\nvar CollapseNotificationAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CollapseNotificationAction, _super);\n    function CollapseNotificationAction(id, label, commandService) {\n        var _this = _super.call(this, id, label, 'collapse-notification-action') || this;\n        _this.commandService = commandService;\n        return _this;\n    }\n    CollapseNotificationAction.prototype.run = function (notification) {\n        this.commandService.executeCommand(notificationsCommands_1.COLLAPSE_NOTIFICATION, notification);\n        return Promise.resolve();\n    };\n    CollapseNotificationAction.ID = notificationsCommands_1.COLLAPSE_NOTIFICATION;\n    CollapseNotificationAction.LABEL = nls_1.localize('collapseNotification', \"Collapse Notification\");\n    CollapseNotificationAction = tslib_1.__decorate([\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], CollapseNotificationAction);\n    return CollapseNotificationAction;\n}(actions_1.Action));\nexports.CollapseNotificationAction = CollapseNotificationAction;\nvar ConfigureNotificationAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigureNotificationAction, _super);\n    function ConfigureNotificationAction(id, label, _configurationActions) {\n        var _this = _super.call(this, id, label, 'configure-notification-action') || this;\n        _this._configurationActions = _configurationActions;\n        return _this;\n    }\n    Object.defineProperty(ConfigureNotificationAction.prototype, \"configurationActions\", {\n        get: function () {\n            return this._configurationActions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigureNotificationAction.ID = 'workbench.action.configureNotification';\n    ConfigureNotificationAction.LABEL = nls_1.localize('configureNotification', \"Configure Notification\");\n    return ConfigureNotificationAction;\n}(actions_1.Action));\nexports.ConfigureNotificationAction = ConfigureNotificationAction;\nvar CopyNotificationMessageAction = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyNotificationMessageAction, _super);\n    function CopyNotificationMessageAction(id, label, clipboardService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.clipboardService = clipboardService;\n        return _this;\n    }\n    CopyNotificationMessageAction.prototype.run = function (notification) {\n        this.clipboardService.writeText(notification.message.raw);\n        return Promise.resolve();\n    };\n    CopyNotificationMessageAction.ID = 'workbench.action.copyNotificationMessage';\n    CopyNotificationMessageAction.LABEL = nls_1.localize('copyNotification', \"Copy Text\");\n    CopyNotificationMessageAction = tslib_1.__decorate([\n        tslib_1.__param(2, clipboardService_1.IClipboardService)\n    ], CopyNotificationMessageAction);\n    return CopyNotificationMessageAction;\n}(actions_1.Action));\nexports.CopyNotificationMessageAction = CopyNotificationMessageAction;\nvar NotificationActionRunner = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationActionRunner, _super);\n    function NotificationActionRunner(telemetryService, notificationService) {\n        var _this = _super.call(this) || this;\n        _this.telemetryService = telemetryService;\n        _this.notificationService = notificationService;\n        return _this;\n    }\n    NotificationActionRunner.prototype.runAction = function (action, context) {\n        var _this = this;\n        /* __GDPR__\n            \"workbenchActionExecuted\" : {\n                \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this.telemetryService.publicLog('workbenchActionExecuted', { id: action.id, from: 'message' });\n        // Run and make sure to notify on any error again\n        _super.prototype.runAction.call(this, action, context).then(undefined, function (error) { return _this.notificationService.error(error); });\n        return Promise.resolve();\n    };\n    NotificationActionRunner = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, notification_1.INotificationService)\n    ], NotificationActionRunner);\n    return NotificationActionRunner;\n}(actions_1.ActionRunner));\nexports.NotificationActionRunner = NotificationActionRunner;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsActions';\nimport { INotificationViewItem } from 'vs/workbench/common/notifications';\nimport { localize } from 'vs/nls';\nimport { Action, IAction, ActionRunner } from 'vs/base/common/actions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CLEAR_NOTIFICATION, EXPAND_NOTIFICATION, COLLAPSE_NOTIFICATION, CLEAR_ALL_NOTIFICATIONS, HIDE_NOTIFICATIONS_CENTER } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\n\nexport class ClearNotificationAction extends Action {\n\n\tstatic readonly ID = CLEAR_NOTIFICATION;\n\tstatic readonly LABEL = localize('clearNotification', \"Clear Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, 'clear-notification-action');\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.commandService.executeCommand(CLEAR_NOTIFICATION, notification);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class ClearAllNotificationsAction extends Action {\n\n\tstatic readonly ID = CLEAR_ALL_NOTIFICATIONS;\n\tstatic readonly LABEL = localize('clearNotifications', \"Clear All Notifications\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, 'clear-all-notifications-action');\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.commandService.executeCommand(CLEAR_ALL_NOTIFICATIONS);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class HideNotificationsCenterAction extends Action {\n\n\tstatic readonly ID = HIDE_NOTIFICATIONS_CENTER;\n\tstatic readonly LABEL = localize('hideNotificationsCenter', \"Hide Notifications\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, 'hide-all-notifications-action');\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.commandService.executeCommand(HIDE_NOTIFICATIONS_CENTER);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class ExpandNotificationAction extends Action {\n\n\tstatic readonly ID = EXPAND_NOTIFICATION;\n\tstatic readonly LABEL = localize('expandNotification', \"Expand Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, 'expand-notification-action');\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.commandService.executeCommand(EXPAND_NOTIFICATION, notification);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class CollapseNotificationAction extends Action {\n\n\tstatic readonly ID = COLLAPSE_NOTIFICATION;\n\tstatic readonly LABEL = localize('collapseNotification', \"Collapse Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) {\n\t\tsuper(id, label, 'collapse-notification-action');\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.commandService.executeCommand(COLLAPSE_NOTIFICATION, notification);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class ConfigureNotificationAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureNotification';\n\tstatic readonly LABEL = localize('configureNotification', \"Configure Notification\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate _configurationActions: IAction[]\n\t) {\n\t\tsuper(id, label, 'configure-notification-action');\n\t}\n\n\tget configurationActions(): IAction[] {\n\t\treturn this._configurationActions;\n\t}\n}\n\nexport class CopyNotificationMessageAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.copyNotificationMessage';\n\tstatic readonly LABEL = localize('copyNotification', \"Copy Text\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(notification: INotificationViewItem): Promise<any> {\n\t\tthis.clipboardService.writeText(notification.message.raw);\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class NotificationActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected runAction(action: IAction, context: INotificationViewItem): Promise<any> {\n\n\t\t/* __GDPR__\n\t\t\t\"workbenchActionExecuted\" : {\n\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('workbenchActionExecuted', { id: action.id, from: 'message' });\n\n\t\t// Run and make sure to notify on any error again\n\t\tsuper.runAction(action, context).then(undefined, error => this.notificationService.error(error));\n\n\t\treturn Promise.resolve();\n\t}\n}\n"]}]}