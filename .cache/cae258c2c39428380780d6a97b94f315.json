{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/node/decoder.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/decoder.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar sd = require(\"string_decoder\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\n/**\n * Convenient way to iterate over output line by line. This helper accommodates for the fact that\n * a buffer might not end with new lines all the way.\n *\n * To use:\n * - call the write method\n * - forEach() over the result to get the lines\n */\nvar LineDecoder = /** @class */ (function () {\n    function LineDecoder(encoding) {\n        if (encoding === void 0) { encoding = 'utf8'; }\n        this.stringDecoder = new sd.StringDecoder(encoding);\n        this.remaining = null;\n    }\n    LineDecoder.prototype.write = function (buffer) {\n        var result = [];\n        var value = this.remaining\n            ? this.remaining + this.stringDecoder.write(buffer)\n            : this.stringDecoder.write(buffer);\n        if (value.length < 1) {\n            return result;\n        }\n        var start = 0;\n        var ch;\n        var idx = start;\n        while (idx < value.length) {\n            ch = value.charCodeAt(idx);\n            if (ch === charCode_1.CharCode.CarriageReturn || ch === charCode_1.CharCode.LineFeed) {\n                result.push(value.substring(start, idx));\n                idx++;\n                if (idx < value.length) {\n                    var lastChar = ch;\n                    ch = value.charCodeAt(idx);\n                    if ((lastChar === charCode_1.CharCode.CarriageReturn && ch === charCode_1.CharCode.LineFeed) || (lastChar === charCode_1.CharCode.LineFeed && ch === charCode_1.CharCode.CarriageReturn)) {\n                        idx++;\n                    }\n                }\n                start = idx;\n            }\n            else {\n                idx++;\n            }\n        }\n        this.remaining = start < value.length ? value.substr(start) : null;\n        return result;\n    };\n    LineDecoder.prototype.end = function () {\n        return this.remaining;\n    };\n    return LineDecoder;\n}());\nexports.LineDecoder = LineDecoder;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/node/decoder.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/node/decoder.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,mCAAqC;AACrC,oDAAmD;AAEnD;;;;;;;GAOG;AACH;IAIC,qBAAY,QAAyB;QAAzB,yBAAA,EAAA,iBAAyB;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACvB,CAAC;IAEM,2BAAK,GAAZ,UAAa,MAAc;QAC1B,IAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAM,KAAK,GAAG,IAAI,CAAC,SAAS;YAC3B,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC;YACnD,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEpC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO,MAAM,CAAC;SACd;QACD,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,EAAU,CAAC;QACf,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,OAAO,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE;YAC1B,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC3B,IAAI,EAAE,KAAK,mBAAQ,CAAC,cAAc,IAAI,EAAE,KAAK,mBAAQ,CAAC,QAAQ,EAAE;gBAC/D,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;gBACzC,GAAG,EAAE,CAAC;gBACN,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,EAAE;oBACvB,IAAM,QAAQ,GAAG,EAAE,CAAC;oBACpB,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAI,CAAC,QAAQ,KAAK,mBAAQ,CAAC,cAAc,IAAI,EAAE,KAAK,mBAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,KAAK,mBAAQ,CAAC,QAAQ,IAAI,EAAE,KAAK,mBAAQ,CAAC,cAAc,CAAC,EAAE;wBAC7I,GAAG,EAAE,CAAC;qBACN;iBACD;gBACD,KAAK,GAAG,GAAG,CAAC;aACZ;iBAAM;gBACN,GAAG,EAAE,CAAC;aACN;SACD;QACD,IAAI,CAAC,SAAS,GAAG,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACnE,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,yBAAG,GAAV;QACC,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IACF,kBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sd from 'string_decoder';\nimport { CharCode } from 'vs/base/common/charCode';\n\n/**\n * Convenient way to iterate over output line by line. This helper accommodates for the fact that\n * a buffer might not end with new lines all the way.\n *\n * To use:\n * - call the write method\n * - forEach() over the result to get the lines\n */\nexport class LineDecoder {\n\tprivate stringDecoder: sd.NodeStringDecoder;\n\tprivate remaining: string | null;\n\n\tconstructor(encoding: string = 'utf8') {\n\t\tthis.stringDecoder = new sd.StringDecoder(encoding);\n\t\tthis.remaining = null;\n\t}\n\n\tpublic write(buffer: Buffer): string[] {\n\t\tconst result: string[] = [];\n\t\tconst value = this.remaining\n\t\t\t? this.remaining + this.stringDecoder.write(buffer)\n\t\t\t: this.stringDecoder.write(buffer);\n\n\t\tif (value.length < 1) {\n\t\t\treturn result;\n\t\t}\n\t\tlet start = 0;\n\t\tlet ch: number;\n\t\tlet idx = start;\n\t\twhile (idx < value.length) {\n\t\t\tch = value.charCodeAt(idx);\n\t\t\tif (ch === CharCode.CarriageReturn || ch === CharCode.LineFeed) {\n\t\t\t\tresult.push(value.substring(start, idx));\n\t\t\t\tidx++;\n\t\t\t\tif (idx < value.length) {\n\t\t\t\t\tconst lastChar = ch;\n\t\t\t\t\tch = value.charCodeAt(idx);\n\t\t\t\t\tif ((lastChar === CharCode.CarriageReturn && ch === CharCode.LineFeed) || (lastChar === CharCode.LineFeed && ch === CharCode.CarriageReturn)) {\n\t\t\t\t\t\tidx++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstart = idx;\n\t\t\t} else {\n\t\t\t\tidx++;\n\t\t\t}\n\t\t}\n\t\tthis.remaining = start < value.length ? value.substr(start) : null;\n\t\treturn result;\n\t}\n\n\tpublic end(): string | null {\n\t\treturn this.remaining;\n\t}\n}"]}]}