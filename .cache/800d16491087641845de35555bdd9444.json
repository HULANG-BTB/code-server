{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/update.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/severity\", \"vs/base/common/actions\", \"vs/base/common/lifecycle\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/platform/product/node/package\", \"vs/platform/product/node/product\", \"vs/base/common/uri\", \"vs/workbench/services/activity/common/activity\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/opener/common/opener\", \"vs/platform/commands/common/commands\", \"vs/platform/storage/common/storage\", \"vs/platform/update/common/update\", \"semver\", \"vs/platform/environment/common/environment\", \"vs/platform/notification/common/notification\", \"vs/platform/dialogs/common/dialogs\", \"vs/platform/windows/common/windows\", \"./releaseNotesEditor\", \"vs/base/common/platform\", \"vs/platform/configuration/common/configuration\"], function (require, exports, nls, severity_1, actions_1, lifecycle_1, actionbar_1, package_1, product_1, uri_1, activity_1, instantiation_1, opener_1, commands_1, storage_1, update_1, semver, environment_1, notification_1, dialogs_1, windows_1, releaseNotesEditor_1, platform_1, configuration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let releaseNotesManager = undefined;\n    function showReleaseNotes(instantiationService, version) {\n        if (!releaseNotesManager) {\n            releaseNotesManager = instantiationService.createInstance(releaseNotesEditor_1.ReleaseNotesManager);\n        }\n        return instantiationService.invokeFunction(accessor => releaseNotesManager.show(accessor, version));\n    }\n    let OpenLatestReleaseNotesInBrowserAction = class OpenLatestReleaseNotesInBrowserAction extends actions_1.Action {\n        constructor(openerService) {\n            super('update.openLatestReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), undefined, true);\n            this.openerService = openerService;\n        }\n        run() {\n            if (product_1.default.releaseNotesUrl) {\n                const uri = uri_1.URI.parse(product_1.default.releaseNotesUrl);\n                return this.openerService.open(uri);\n            }\n            return Promise.resolve(false);\n        }\n    };\n    OpenLatestReleaseNotesInBrowserAction = __decorate([\n        __param(0, opener_1.IOpenerService)\n    ], OpenLatestReleaseNotesInBrowserAction);\n    exports.OpenLatestReleaseNotesInBrowserAction = OpenLatestReleaseNotesInBrowserAction;\n    let AbstractShowReleaseNotesAction = class AbstractShowReleaseNotesAction extends actions_1.Action {\n        constructor(id, label, version, instantiationService) {\n            super(id, label, undefined, true);\n            this.version = version;\n            this.instantiationService = instantiationService;\n        }\n        run() {\n            if (!this.enabled) {\n                return Promise.resolve(false);\n            }\n            this.enabled = false;\n            return showReleaseNotes(this.instantiationService, this.version)\n                .then(undefined, () => {\n                const action = this.instantiationService.createInstance(OpenLatestReleaseNotesInBrowserAction);\n                return action.run().then(() => false);\n            });\n        }\n    };\n    AbstractShowReleaseNotesAction = __decorate([\n        __param(3, instantiation_1.IInstantiationService)\n    ], AbstractShowReleaseNotesAction);\n    exports.AbstractShowReleaseNotesAction = AbstractShowReleaseNotesAction;\n    let ShowReleaseNotesAction = class ShowReleaseNotesAction extends AbstractShowReleaseNotesAction {\n        constructor(version, instantiationService) {\n            super('update.showReleaseNotes', nls.localize('releaseNotes', \"Release Notes\"), version, instantiationService);\n        }\n    };\n    ShowReleaseNotesAction = __decorate([\n        __param(1, instantiation_1.IInstantiationService)\n    ], ShowReleaseNotesAction);\n    exports.ShowReleaseNotesAction = ShowReleaseNotesAction;\n    let ShowCurrentReleaseNotesAction = class ShowCurrentReleaseNotesAction extends AbstractShowReleaseNotesAction {\n        constructor(id = ShowCurrentReleaseNotesAction.ID, label = ShowCurrentReleaseNotesAction.LABEL, instantiationService) {\n            super(id, label, package_1.default.version, instantiationService);\n        }\n    };\n    ShowCurrentReleaseNotesAction.ID = 'update.showCurrentReleaseNotes';\n    ShowCurrentReleaseNotesAction.LABEL = nls.localize('showReleaseNotes', \"Show Release Notes\");\n    ShowCurrentReleaseNotesAction = __decorate([\n        __param(2, instantiation_1.IInstantiationService)\n    ], ShowCurrentReleaseNotesAction);\n    exports.ShowCurrentReleaseNotesAction = ShowCurrentReleaseNotesAction;\n    let ProductContribution = class ProductContribution {\n        constructor(storageService, instantiationService, notificationService, environmentService, openerService, configurationService) {\n            const lastVersion = storageService.get(ProductContribution.KEY, storage_1.StorageScope.GLOBAL, '');\n            const shouldShowReleaseNotes = configurationService.getValue('update.showReleaseNotes');\n            // was there an update? if so, open release notes\n            if (shouldShowReleaseNotes && !environmentService.skipReleaseNotes && product_1.default.releaseNotesUrl && lastVersion && package_1.default.version !== lastVersion) {\n                showReleaseNotes(instantiationService, package_1.default.version)\n                    .then(undefined, () => {\n                    notificationService.prompt(severity_1.default.Info, nls.localize('read the release notes', \"Welcome to {0} v{1}! Would you like to read the Release Notes?\", product_1.default.nameLong, package_1.default.version), [{\n                            label: nls.localize('releaseNotes', \"Release Notes\"),\n                            run: () => {\n                                const uri = uri_1.URI.parse(product_1.default.releaseNotesUrl);\n                                openerService.open(uri);\n                            }\n                        }], { sticky: true });\n                });\n            }\n            // should we show the new license?\n            if (product_1.default.licenseUrl && lastVersion && semver.satisfies(lastVersion, '<1.0.0') && semver.satisfies(package_1.default.version, '>=1.0.0')) {\n                notificationService.info(nls.localize('licenseChanged', \"Our license terms have changed, please click [here]({0}) to go through them.\", product_1.default.licenseUrl));\n            }\n            storageService.store(ProductContribution.KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n        }\n    };\n    ProductContribution.KEY = 'releaseNotes/lastVersion';\n    ProductContribution = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, notification_1.INotificationService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, opener_1.IOpenerService),\n        __param(5, configuration_1.IConfigurationService)\n    ], ProductContribution);\n    exports.ProductContribution = ProductContribution;\n    let NeverShowAgain = class NeverShowAgain {\n        constructor(key, storageService) {\n            this.storageService = storageService;\n            this.action = new actions_1.Action(`neverShowAgain:${this.key}`, nls.localize('neveragain', \"Don't Show Again\"), undefined, true, (notification) => {\n                // Hide notification\n                notification.close();\n                this.storageService.store(this.key, true, storage_1.StorageScope.GLOBAL);\n                return Promise.resolve(true);\n            });\n            this.key = `neverShowAgain:${key}`;\n        }\n        shouldShow() {\n            return !this.storageService.getBoolean(this.key, storage_1.StorageScope.GLOBAL, false);\n        }\n    };\n    NeverShowAgain = __decorate([\n        __param(1, storage_1.IStorageService)\n    ], NeverShowAgain);\n    let Win3264BitContribution = class Win3264BitContribution {\n        constructor(storageService, notificationService, environmentService) {\n            if (environmentService.disableUpdates) {\n                return;\n            }\n            const neverShowAgain = new NeverShowAgain(Win3264BitContribution.KEY, storageService);\n            if (!neverShowAgain.shouldShow()) {\n                return;\n            }\n            const url = product_1.default.quality === 'insider'\n                ? Win3264BitContribution.INSIDER_URL\n                : Win3264BitContribution.URL;\n            const handle = notificationService.prompt(severity_1.default.Info, nls.localize('64bitisavailable', \"{0} for 64-bit Windows is now available! Click [here]({1}) to learn more.\", product_1.default.nameShort, url), [{\n                    label: nls.localize('neveragain', \"Don't Show Again\"),\n                    isSecondary: true,\n                    run: () => {\n                        neverShowAgain.action.run(handle);\n                        neverShowAgain.action.dispose();\n                    }\n                }], { sticky: true });\n        }\n    };\n    Win3264BitContribution.KEY = 'update/win32-64bits';\n    Win3264BitContribution.URL = 'https://code.visualstudio.com/updates/v1_15#_windows-64-bit';\n    Win3264BitContribution.INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_15.md#windows-64-bit';\n    Win3264BitContribution = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, notification_1.INotificationService),\n        __param(2, environment_1.IEnvironmentService)\n    ], Win3264BitContribution);\n    exports.Win3264BitContribution = Win3264BitContribution;\n    let Linux32BitContribution = class Linux32BitContribution {\n        constructor(storageService, notificationService, environmentService) {\n            if (environmentService.disableUpdates) {\n                return;\n            }\n            const neverShowAgain = new NeverShowAgain(Linux32BitContribution.KEY, storageService);\n            if (!neverShowAgain.shouldShow()) {\n                return;\n            }\n            const url = product_1.default.quality === 'insider'\n                ? Linux32BitContribution.INSIDER_URL\n                : Linux32BitContribution.URL;\n            const handle = notificationService.prompt(severity_1.default.Info, nls.localize('linux64bits', \"{0} for 32-bit Linux will soon be discontinued. Please update to the 64-bit version.\", product_1.default.nameShort, url), [{\n                    label: nls.localize('learnmore', \"Learn More\"),\n                    run: () => {\n                        window.open(url);\n                    }\n                },\n                {\n                    label: nls.localize('neveragain', \"Don't Show Again\"),\n                    isSecondary: true,\n                    run: () => {\n                        neverShowAgain.action.run(handle);\n                        neverShowAgain.action.dispose();\n                    }\n                }], { sticky: true });\n        }\n    };\n    Linux32BitContribution.KEY = 'update/linux32-64bits';\n    Linux32BitContribution.URL = 'https://code.visualstudio.com/updates/v1_32#_linux-32-bit-support-ends-soon';\n    Linux32BitContribution.INSIDER_URL = 'https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/v1_32.md#linux-32-bit-support-ends-soon';\n    Linux32BitContribution = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, notification_1.INotificationService),\n        __param(2, environment_1.IEnvironmentService)\n    ], Linux32BitContribution);\n    exports.Linux32BitContribution = Linux32BitContribution;\n    let CommandAction = class CommandAction extends actions_1.Action {\n        constructor(commandId, label, commandService) {\n            super(`command-action:${commandId}`, label, undefined, true, () => commandService.executeCommand(commandId));\n        }\n    };\n    CommandAction = __decorate([\n        __param(2, commands_1.ICommandService)\n    ], CommandAction);\n    let UpdateContribution = class UpdateContribution {\n        constructor(storageService, commandService, instantiationService, notificationService, dialogService, updateService, activityService, windowService) {\n            this.storageService = storageService;\n            this.commandService = commandService;\n            this.instantiationService = instantiationService;\n            this.notificationService = notificationService;\n            this.dialogService = dialogService;\n            this.updateService = updateService;\n            this.activityService = activityService;\n            this.windowService = windowService;\n            this.badgeDisposable = lifecycle_1.Disposable.None;\n            this.disposables = [];\n            this.state = updateService.state;\n            updateService.onStateChange(this.onUpdateStateChange, this, this.disposables);\n            this.onUpdateStateChange(this.updateService.state);\n            /*\n            The `update/lastKnownVersion` and `update/updateNotificationTime` storage keys are used in\n            combination to figure out when to show a message to the user that he should update.\n    \n            This message should appear if the user has received an update notification but hasn't\n            updated since 5 days.\n            */\n            const currentVersion = product_1.default.commit;\n            const lastKnownVersion = this.storageService.get('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n            // if current version != stored version, clear both fields\n            if (currentVersion !== lastKnownVersion) {\n                this.storageService.remove('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n                this.storageService.remove('update/updateNotificationTime', storage_1.StorageScope.GLOBAL);\n            }\n        }\n        get id() { return 'vs.update'; }\n        get name() { return nls.localize('manage', \"Manage\"); }\n        get cssClass() { return 'update-activity'; }\n        onUpdateStateChange(state) {\n            switch (state.type) {\n                case update_1.StateType.Idle:\n                    if (state.error) {\n                        this.onError(state.error);\n                    }\n                    else if (this.state.type === update_1.StateType.CheckingForUpdates && this.state.context && this.state.context.windowId === this.windowService.getCurrentWindowId()) {\n                        this.onUpdateNotAvailable();\n                    }\n                    break;\n                case update_1.StateType.AvailableForDownload:\n                    this.onUpdateAvailable(state.update);\n                    break;\n                case update_1.StateType.Downloaded:\n                    this.onUpdateDownloaded(state.update);\n                    break;\n                case update_1.StateType.Updating:\n                    this.onUpdateUpdating(state.update);\n                    break;\n                case update_1.StateType.Ready:\n                    this.onUpdateReady(state.update);\n                    break;\n            }\n            let badge = undefined;\n            let clazz;\n            if (state.type === update_1.StateType.AvailableForDownload || state.type === update_1.StateType.Downloaded || state.type === update_1.StateType.Ready) {\n                badge = new activity_1.NumberBadge(1, () => nls.localize('updateIsReady', \"New {0} update available.\", product_1.default.nameShort));\n            }\n            else if (state.type === update_1.StateType.CheckingForUpdates || state.type === update_1.StateType.Downloading || state.type === update_1.StateType.Updating) {\n                badge = new activity_1.ProgressBadge(() => nls.localize('updateIsReady', \"New {0} update available.\", product_1.default.nameShort));\n                clazz = 'progress-badge';\n            }\n            this.badgeDisposable.dispose();\n            if (badge) {\n                this.badgeDisposable = this.activityService.showActivity(this.id, badge, clazz);\n            }\n            this.state = state;\n        }\n        onError(error) {\n            error = error.replace(/See https:\\/\\/github\\.com\\/Squirrel\\/Squirrel\\.Mac\\/issues\\/182 for more information/, 'See [this link](https://github.com/Microsoft/vscode/issues/7426#issuecomment-425093469) for more information');\n            this.notificationService.notify({\n                severity: notification_1.Severity.Error,\n                message: error,\n                source: nls.localize('update service', \"Update Service\"),\n            });\n        }\n        onUpdateNotAvailable() {\n            this.dialogService.show(severity_1.default.Info, nls.localize('noUpdatesAvailable', \"There are currently no updates available.\"), [nls.localize('ok', \"OK\")]);\n        }\n        // linux\n        onUpdateAvailable(update) {\n            if (!this.shouldShowNotification()) {\n                return;\n            }\n            this.notificationService.prompt(severity_1.default.Info, nls.localize('thereIsUpdateAvailable', \"There is an available update.\"), [{\n                    label: nls.localize('download now', \"Download Now\"),\n                    run: () => this.updateService.downloadUpdate()\n                }, {\n                    label: nls.localize('later', \"Later\"),\n                    run: () => { }\n                }, {\n                    label: nls.localize('releaseNotes', \"Release Notes\"),\n                    run: () => {\n                        const action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                        action.run();\n                        action.dispose();\n                    }\n                }], { sticky: true });\n        }\n        // windows fast updates (target === system)\n        onUpdateDownloaded(update) {\n            if (!this.shouldShowNotification()) {\n                return;\n            }\n            this.notificationService.prompt(severity_1.default.Info, nls.localize('updateAvailable', \"There's an update available: {0} {1}\", product_1.default.nameLong, update.productVersion), [{\n                    label: nls.localize('installUpdate', \"Install Update\"),\n                    run: () => this.updateService.applyUpdate()\n                }, {\n                    label: nls.localize('later', \"Later\"),\n                    run: () => { }\n                }, {\n                    label: nls.localize('releaseNotes', \"Release Notes\"),\n                    run: () => {\n                        const action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                        action.run();\n                        action.dispose();\n                    }\n                }], { sticky: true });\n        }\n        // windows fast updates\n        onUpdateUpdating(update) {\n            if (platform_1.isWindows && product_1.default.target === 'user') {\n                return;\n            }\n            // windows fast updates (target === system)\n            const neverShowAgain = new NeverShowAgain('update/win32-fast-updates', this.storageService);\n            if (!neverShowAgain.shouldShow()) {\n                return;\n            }\n            const handle = this.notificationService.prompt(severity_1.default.Info, nls.localize('updateInstalling', \"{0} {1} is being installed in the background; we'll let you know when it's done.\", product_1.default.nameLong, update.productVersion), [{\n                    label: nls.localize('neveragain', \"Don't Show Again\"),\n                    isSecondary: true,\n                    run: () => {\n                        neverShowAgain.action.run(handle);\n                        neverShowAgain.action.dispose();\n                    }\n                }]);\n        }\n        // windows and mac\n        onUpdateReady(update) {\n            if (!(platform_1.isWindows && product_1.default.target !== 'user') && !this.shouldShowNotification()) {\n                return;\n            }\n            const actions = [{\n                    label: nls.localize('updateNow', \"Update Now\"),\n                    run: () => this.updateService.quitAndInstall()\n                }, {\n                    label: nls.localize('later', \"Later\"),\n                    run: () => { }\n                }];\n            // TODO@joao check why snap updates send `update` as falsy\n            if (update.productVersion) {\n                actions.push({\n                    label: nls.localize('releaseNotes', \"Release Notes\"),\n                    run: () => {\n                        const action = this.instantiationService.createInstance(ShowReleaseNotesAction, update.productVersion);\n                        action.run();\n                        action.dispose();\n                    }\n                });\n            }\n            // windows user fast updates and mac\n            this.notificationService.prompt(severity_1.default.Info, nls.localize('updateAvailableAfterRestart', \"Restart {0} to apply the latest update.\", product_1.default.nameLong), actions, { sticky: true });\n        }\n        shouldShowNotification() {\n            const currentVersion = product_1.default.commit;\n            const currentMillis = new Date().getTime();\n            const lastKnownVersion = this.storageService.get('update/lastKnownVersion', storage_1.StorageScope.GLOBAL);\n            // if version != stored version, save version and date\n            if (currentVersion !== lastKnownVersion) {\n                this.storageService.store('update/lastKnownVersion', currentVersion, storage_1.StorageScope.GLOBAL);\n                this.storageService.store('update/updateNotificationTime', currentMillis, storage_1.StorageScope.GLOBAL);\n            }\n            const updateNotificationMillis = this.storageService.getNumber('update/updateNotificationTime', storage_1.StorageScope.GLOBAL, currentMillis);\n            const diffDays = (currentMillis - updateNotificationMillis) / (1000 * 60 * 60 * 24);\n            return diffDays > 5;\n        }\n        getActions() {\n            const result = [\n                new CommandAction(UpdateContribution.showCommandsId, nls.localize('commandPalette', \"Command Palette...\"), this.commandService),\n                new actionbar_1.Separator(),\n                new CommandAction(UpdateContribution.openSettingsId, nls.localize('settings', \"Settings\"), this.commandService),\n                new CommandAction(UpdateContribution.showExtensionsId, nls.localize('showExtensions', \"Extensions\"), this.commandService),\n                new CommandAction(UpdateContribution.openKeybindingsId, nls.localize('keyboardShortcuts', \"Keyboard Shortcuts\"), this.commandService),\n                new actionbar_1.Separator(),\n                new CommandAction(UpdateContribution.openUserSnippets, nls.localize('userSnippets', \"User Snippets\"), this.commandService),\n                new actionbar_1.Separator(),\n                new CommandAction(UpdateContribution.selectColorThemeId, nls.localize('selectTheme.label', \"Color Theme\"), this.commandService),\n                new CommandAction(UpdateContribution.selectIconThemeId, nls.localize('themes.selectIconTheme.label', \"File Icon Theme\"), this.commandService)\n            ];\n            const updateAction = this.getUpdateAction();\n            if (updateAction) {\n                result.push(new actionbar_1.Separator(), updateAction);\n            }\n            return result;\n        }\n        getUpdateAction() {\n            const state = this.updateService.state;\n            switch (state.type) {\n                case update_1.StateType.Uninitialized:\n                    return null;\n                case update_1.StateType.Idle:\n                    const windowId = this.windowService.getCurrentWindowId();\n                    return new actions_1.Action('update.check', nls.localize('checkForUpdates', \"Check for Updates...\"), undefined, true, () => this.updateService.checkForUpdates({ windowId }));\n                case update_1.StateType.CheckingForUpdates:\n                    return new actions_1.Action('update.checking', nls.localize('checkingForUpdates', \"Checking For Updates...\"), undefined, false);\n                case update_1.StateType.AvailableForDownload:\n                    return new actions_1.Action('update.downloadNow', nls.localize('download now', \"Download Now\"), undefined, true, () => this.updateService.downloadUpdate());\n                case update_1.StateType.Downloading:\n                    return new actions_1.Action('update.downloading', nls.localize('DownloadingUpdate', \"Downloading Update...\"), undefined, false);\n                case update_1.StateType.Downloaded:\n                    return new actions_1.Action('update.install', nls.localize('installUpdate...', \"Install Update...\"), undefined, true, () => this.updateService.applyUpdate());\n                case update_1.StateType.Updating:\n                    return new actions_1.Action('update.updating', nls.localize('installingUpdate', \"Installing Update...\"), undefined, false);\n                case update_1.StateType.Ready:\n                    return new actions_1.Action('update.restart', nls.localize('restartToUpdate', \"Restart to Update\"), undefined, true, () => this.updateService.quitAndInstall());\n            }\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    UpdateContribution.showCommandsId = 'workbench.action.showCommands';\n    UpdateContribution.openSettingsId = 'workbench.action.openSettings';\n    UpdateContribution.openKeybindingsId = 'workbench.action.openGlobalKeybindings';\n    UpdateContribution.openUserSnippets = 'workbench.action.openSnippets';\n    UpdateContribution.selectColorThemeId = 'workbench.action.selectTheme';\n    UpdateContribution.selectIconThemeId = 'workbench.action.selectIconTheme';\n    UpdateContribution.showExtensionsId = 'workbench.view.extensions';\n    UpdateContribution = __decorate([\n        __param(0, storage_1.IStorageService),\n        __param(1, commands_1.ICommandService),\n        __param(2, instantiation_1.IInstantiationService),\n        __param(3, notification_1.INotificationService),\n        __param(4, dialogs_1.IDialogService),\n        __param(5, update_1.IUpdateService),\n        __param(6, activity_1.IActivityService),\n        __param(7, windows_1.IWindowService)\n    ], UpdateContribution);\n    exports.UpdateContribution = UpdateContribution;\n});\n",null]}