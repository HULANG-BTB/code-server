{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/caretOperations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorContextKeys\", \"vs/editor/contrib/caretOperations/moveCaretCommand\"], function (require, exports, nls, editorExtensions_1, editorContextKeys_1, moveCaretCommand_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class MoveCaretAction extends editorExtensions_1.EditorAction {\n        constructor(left, opts) {\n            super(opts);\n            this.left = left;\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            let commands = [];\n            let selections = editor.getSelections();\n            for (const selection of selections) {\n                commands.push(new moveCaretCommand_1.MoveCaretCommand(selection, this.left));\n            }\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, commands);\n            editor.pushUndoStop();\n        }\n    }\n    class MoveCaretLeftAction extends MoveCaretAction {\n        constructor() {\n            super(true, {\n                id: 'editor.action.moveCarretLeftAction',\n                label: nls.localize('caret.moveLeft', \"Move Caret Left\"),\n                alias: 'Move Caret Left',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    class MoveCaretRightAction extends MoveCaretAction {\n        constructor() {\n            super(false, {\n                id: 'editor.action.moveCarretRightAction',\n                label: nls.localize('caret.moveRight', \"Move Caret Right\"),\n                alias: 'Move Caret Right',\n                precondition: editorContextKeys_1.EditorContextKeys.writable\n            });\n        }\n    }\n    editorExtensions_1.registerEditorAction(MoveCaretLeftAction);\n    editorExtensions_1.registerEditorAction(MoveCaretRightAction);\n});\n",null]}