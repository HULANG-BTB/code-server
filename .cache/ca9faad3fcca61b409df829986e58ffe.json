{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _a, _b;\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar errors = require(\"vs/base/common/errors\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar colorThemeData_1 = require(\"./colorThemeData\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar event_1 = require(\"vs/base/common/event\");\nvar fileIconThemeSchema_1 = require(\"vs/workbench/services/themes/common/fileIconThemeSchema\");\nvar colorThemeStore_1 = require(\"vs/workbench/services/themes/browser/colorThemeStore\");\nvar fileIconThemeStore_1 = require(\"vs/workbench/services/themes/common/fileIconThemeStore\");\nvar fileIconThemeData_1 = require(\"vs/workbench/services/themes/common/fileIconThemeData\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar resources = require(\"vs/base/common/resources\");\nvar colorThemeSchema_1 = require(\"vs/workbench/services/themes/common/colorThemeSchema\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\n// implementation\nvar DEFAULT_THEME_ID = 'vs-dark vscode-theme-defaults-themes-dark_plus-json';\nvar DEFAULT_THEME_SETTING_VALUE = 'Default Dark+';\nvar PERSISTED_THEME_STORAGE_KEY = 'colorThemeData';\nvar PERSISTED_ICON_THEME_STORAGE_KEY = 'iconThemeData';\nvar defaultThemeExtensionId = 'vscode-theme-defaults';\nvar oldDefaultThemeExtensionId = 'vscode-theme-colorful-defaults';\nvar DEFAULT_ICON_THEME_SETTING_VALUE = 'vs-seti';\nvar fileIconsEnabledClass = 'file-icons-enabled';\nvar colorThemeRulesClassName = 'contributedColorTheme';\nvar iconThemeRulesClassName = 'contributedIconTheme';\nvar themingRegistry = platform_1.Registry.as(themeService_1.Extensions.ThemingContribution);\nfunction validateThemeId(theme) {\n    // migrations\n    switch (theme) {\n        case workbenchThemeService_1.VS_LIGHT_THEME: return \"vs \" + defaultThemeExtensionId + \"-themes-light_vs-json\";\n        case workbenchThemeService_1.VS_DARK_THEME: return \"vs-dark \" + defaultThemeExtensionId + \"-themes-dark_vs-json\";\n        case workbenchThemeService_1.VS_HC_THEME: return \"hc-black \" + defaultThemeExtensionId + \"-themes-hc_black-json\";\n        case \"vs \" + oldDefaultThemeExtensionId + \"-themes-light_plus-tmTheme\": return \"vs \" + defaultThemeExtensionId + \"-themes-light_plus-json\";\n        case \"vs-dark \" + oldDefaultThemeExtensionId + \"-themes-dark_plus-tmTheme\": return \"vs-dark \" + defaultThemeExtensionId + \"-themes-dark_plus-json\";\n    }\n    return theme;\n}\nvar WorkbenchThemeService = /** @class */ (function () {\n    function WorkbenchThemeService(extensionService, storageService, configurationService, telemetryService, windowService, environmentService, fileService) {\n        var _this = this;\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.telemetryService = telemetryService;\n        this.windowService = windowService;\n        this.environmentService = environmentService;\n        this.fileService = fileService;\n        this.themeExtensionsActivated = new Map();\n        this.container = document.body;\n        this.colorThemeStore = new colorThemeStore_1.ColorThemeStore(extensionService, colorThemeData_1.ColorThemeData.createLoadedEmptyTheme(DEFAULT_THEME_ID, DEFAULT_THEME_SETTING_VALUE));\n        this.onFileIconThemeChange = new event_1.Emitter();\n        this.iconThemeStore = new fileIconThemeStore_1.FileIconThemeStore(extensionService);\n        this.onColorThemeChange = new event_1.Emitter({ leakWarningThreshold: 400 });\n        this.currentIconTheme = fileIconThemeData_1.FileIconThemeData.createUnloadedTheme('');\n        // In order to avoid paint flashing for tokens, because\n        // themes are loaded asynchronously, we need to initialize\n        // a color theme document with good defaults until the theme is loaded\n        var themeData = undefined;\n        var persistedThemeData = this.storageService.get(PERSISTED_THEME_STORAGE_KEY, storage_1.StorageScope.GLOBAL);\n        if (persistedThemeData) {\n            themeData = colorThemeData_1.ColorThemeData.fromStorageData(persistedThemeData);\n        }\n        var containerBaseTheme = this.getBaseThemeFromContainer();\n        if (!themeData || themeData.baseTheme !== containerBaseTheme) {\n            themeData = colorThemeData_1.ColorThemeData.createUnloadedTheme(containerBaseTheme);\n        }\n        themeData.setCustomColors(this.colorCustomizations);\n        themeData.setCustomTokenColors(this.tokenColorCustomizations);\n        this.updateDynamicCSSRules(themeData);\n        this.applyTheme(themeData, undefined, true);\n        var persistedIconThemeData = this.storageService.get(PERSISTED_ICON_THEME_STORAGE_KEY, storage_1.StorageScope.GLOBAL);\n        if (persistedIconThemeData) {\n            var iconData_1 = fileIconThemeData_1.FileIconThemeData.fromStorageData(persistedIconThemeData);\n            if (iconData_1) {\n                _applyIconTheme(iconData_1, function () {\n                    _this.doSetFileIconTheme(iconData_1);\n                    return Promise.resolve(iconData_1);\n                });\n            }\n        }\n        this.initialize().then(undefined, errors.onUnexpectedError).then(function (_) {\n            _this.installConfigurationListener();\n        });\n        var prevColorId = undefined;\n        // update settings schema setting for theme specific settings\n        this.colorThemeStore.onDidChange(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var themeSpecificWorkbenchColors, themeSpecificTokenColors, workbenchColors, tokenColors, _i, _a, t, themeId, themeData_1, _b;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        // updates enum for the 'workbench.colorTheme` setting\n                        colorThemeSettingSchema.enum = event.themes.map(function (t) { return t.settingsId; });\n                        colorThemeSettingSchema.enumDescriptions = event.themes.map(function (t) { return t.description || ''; });\n                        themeSpecificWorkbenchColors = { properties: {} };\n                        themeSpecificTokenColors = { properties: {} };\n                        workbenchColors = { $ref: colorRegistry_1.workbenchColorsSchemaId, additionalProperties: false };\n                        tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n                        for (_i = 0, _a = event.themes; _i < _a.length; _i++) {\n                            t = _a[_i];\n                            themeId = \"[\" + t.settingsId + \"]\";\n                            themeSpecificWorkbenchColors.properties[themeId] = workbenchColors;\n                            themeSpecificTokenColors.properties[themeId] = tokenColors;\n                        }\n                        colorCustomizationsSchema.allOf[1] = themeSpecificWorkbenchColors;\n                        tokenColorCustomizationSchema.allOf[1] = themeSpecificTokenColors;\n                        configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n                        if (!this.currentColorTheme.isLoaded) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.colorThemeStore.findThemeData(this.currentColorTheme.id)];\n                    case 1:\n                        themeData_1 = _c.sent();\n                        if (!!themeData_1) return [3 /*break*/, 2];\n                        // current theme is no longer available\n                        prevColorId = this.currentColorTheme.id;\n                        this.setColorTheme(DEFAULT_THEME_ID, 'auto');\n                        return [3 /*break*/, 5];\n                    case 2:\n                        _b = this.currentColorTheme.id === DEFAULT_THEME_ID && !types.isUndefined(prevColorId);\n                        if (!_b) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.colorThemeStore.findThemeData(prevColorId)];\n                    case 3:\n                        _b = (_c.sent());\n                        _c.label = 4;\n                    case 4:\n                        if (_b) {\n                            // restore color\n                            this.setColorTheme(prevColorId, 'auto');\n                            prevColorId = undefined;\n                        }\n                        _c.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n        var prevFileIconId = undefined;\n        this.iconThemeStore.onDidChange(function (event) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var theme, _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        iconThemeSettingSchema.enum = [null].concat(event.themes.map(function (t) { return t.settingsId; }));\n                        iconThemeSettingSchema.enumDescriptions = [iconThemeSettingSchema.enumDescriptions[0]].concat(event.themes.map(function (t) { return t.description || ''; }));\n                        configurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n                        if (!this.currentIconTheme.isLoaded) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.iconThemeStore.findThemeData(this.currentIconTheme.id)];\n                    case 1:\n                        theme = _b.sent();\n                        if (!!theme) return [3 /*break*/, 2];\n                        // current theme is no longer available\n                        prevFileIconId = this.currentIconTheme.id;\n                        this.setFileIconTheme(DEFAULT_ICON_THEME_SETTING_VALUE, 'auto');\n                        return [3 /*break*/, 5];\n                    case 2:\n                        _a = this.currentIconTheme.id === DEFAULT_ICON_THEME_SETTING_VALUE && !types.isUndefined(prevFileIconId);\n                        if (!_a) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.iconThemeStore.findThemeData(prevFileIconId)];\n                    case 3:\n                        _a = (_b.sent());\n                        _b.label = 4;\n                    case 4:\n                        // restore color\n                        if (_a) {\n                            this.setFileIconTheme(prevFileIconId, 'auto');\n                            prevFileIconId = undefined;\n                        }\n                        _b.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n        this.fileService.onFileChanges(function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.watchedColorThemeLocation && this.currentColorTheme && e.contains(this.watchedColorThemeLocation, files_1.FileChangeType.UPDATED))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.currentColorTheme.reload(this.fileService)];\n                    case 1:\n                        _a.sent();\n                        this.currentColorTheme.setCustomColors(this.colorCustomizations);\n                        this.currentColorTheme.setCustomTokenColors(this.tokenColorCustomizations);\n                        this.updateDynamicCSSRules(this.currentColorTheme);\n                        this.applyTheme(this.currentColorTheme, undefined, false);\n                        _a.label = 2;\n                    case 2:\n                        if (!(this.watchedIconThemeLocation && this.currentIconTheme && e.contains(this.watchedIconThemeLocation, files_1.FileChangeType.UPDATED))) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.currentIconTheme.reload(this.fileService)];\n                    case 3:\n                        _a.sent();\n                        _applyIconTheme(this.currentIconTheme, function () { return Promise.resolve(_this.currentIconTheme); });\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    Object.defineProperty(WorkbenchThemeService.prototype, \"colorCustomizations\", {\n        get: function () {\n            return this.configurationService.getValue(workbenchThemeService_1.CUSTOM_WORKBENCH_COLORS_SETTING) || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchThemeService.prototype, \"tokenColorCustomizations\", {\n        get: function () {\n            return this.configurationService.getValue(workbenchThemeService_1.CUSTOM_EDITOR_COLORS_SETTING) || {};\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchThemeService.prototype, \"onDidColorThemeChange\", {\n        get: function () {\n            return this.onColorThemeChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchThemeService.prototype, \"onDidFileIconThemeChange\", {\n        get: function () {\n            return this.onFileIconThemeChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchThemeService.prototype, \"onIconThemeChange\", {\n        get: function () {\n            return this.onFileIconThemeChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchThemeService.prototype, \"onThemeChange\", {\n        get: function () {\n            return this.onColorThemeChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchThemeService.prototype.initialize = function () {\n        var _this = this;\n        var detectHCThemeSetting = this.configurationService.getValue(workbenchThemeService_1.DETECT_HC_SETTING);\n        var colorThemeSetting;\n        if (this.windowService.getConfiguration().highContrast && detectHCThemeSetting) {\n            colorThemeSetting = workbenchThemeService_1.HC_THEME_ID;\n        }\n        else {\n            colorThemeSetting = this.configurationService.getValue(workbenchThemeService_1.COLOR_THEME_SETTING);\n        }\n        var iconThemeSetting = this.configurationService.getValue(workbenchThemeService_1.ICON_THEME_SETTING);\n        return Promise.all([\n            this.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, DEFAULT_THEME_ID).then(function (theme) {\n                return _this.colorThemeStore.findThemeDataByParentLocation(_this.environmentService.extensionDevelopmentLocationURI).then(function (devThemes) {\n                    if (devThemes.length) {\n                        return _this.setColorTheme(devThemes[0].id, configuration_1.ConfigurationTarget.MEMORY);\n                    }\n                    else {\n                        return _this.setColorTheme(theme && theme.id, undefined);\n                    }\n                });\n            }),\n            this.iconThemeStore.findThemeBySettingsId(iconThemeSetting).then(function (theme) {\n                return _this.iconThemeStore.findThemeDataByParentLocation(_this.environmentService.extensionDevelopmentLocationURI).then(function (devThemes) {\n                    if (devThemes.length) {\n                        return _this.setFileIconTheme(devThemes[0].id, configuration_1.ConfigurationTarget.MEMORY);\n                    }\n                    else {\n                        return _this.setFileIconTheme(theme && theme.id, undefined);\n                    }\n                });\n            }),\n        ]);\n    };\n    WorkbenchThemeService.prototype.installConfigurationListener = function () {\n        var _this = this;\n        this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(workbenchThemeService_1.COLOR_THEME_SETTING)) {\n                var colorThemeSetting = _this.configurationService.getValue(workbenchThemeService_1.COLOR_THEME_SETTING);\n                if (colorThemeSetting !== _this.currentColorTheme.settingsId) {\n                    _this.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, undefined).then(function (theme) {\n                        if (theme) {\n                            _this.setColorTheme(theme.id, undefined);\n                        }\n                    });\n                }\n            }\n            if (e.affectsConfiguration(workbenchThemeService_1.ICON_THEME_SETTING)) {\n                var iconThemeSetting = _this.configurationService.getValue(workbenchThemeService_1.ICON_THEME_SETTING);\n                if (iconThemeSetting !== _this.currentIconTheme.settingsId) {\n                    _this.iconThemeStore.findThemeBySettingsId(iconThemeSetting).then(function (theme) {\n                        _this.setFileIconTheme(theme && theme.id, undefined);\n                    });\n                }\n            }\n            if (_this.currentColorTheme) {\n                var hasColorChanges = false;\n                if (e.affectsConfiguration(workbenchThemeService_1.CUSTOM_WORKBENCH_COLORS_SETTING)) {\n                    _this.currentColorTheme.setCustomColors(_this.colorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (e.affectsConfiguration(workbenchThemeService_1.CUSTOM_EDITOR_COLORS_SETTING)) {\n                    _this.currentColorTheme.setCustomTokenColors(_this.tokenColorCustomizations);\n                    hasColorChanges = true;\n                }\n                if (hasColorChanges) {\n                    _this.updateDynamicCSSRules(_this.currentColorTheme);\n                    _this.onColorThemeChange.fire(_this.currentColorTheme);\n                }\n            }\n        });\n    };\n    WorkbenchThemeService.prototype.getColorTheme = function () {\n        return this.currentColorTheme;\n    };\n    WorkbenchThemeService.prototype.getColorThemes = function () {\n        return this.colorThemeStore.getColorThemes();\n    };\n    WorkbenchThemeService.prototype.getTheme = function () {\n        return this.getColorTheme();\n    };\n    WorkbenchThemeService.prototype.setColorTheme = function (themeId, settingsTarget) {\n        var _this = this;\n        if (!themeId) {\n            return Promise.resolve(null);\n        }\n        if (themeId === this.currentColorTheme.id && this.currentColorTheme.isLoaded) {\n            return this.writeColorThemeConfiguration(settingsTarget);\n        }\n        themeId = validateThemeId(themeId); // migrate theme ids\n        return this.colorThemeStore.findThemeData(themeId, DEFAULT_THEME_ID).then(function (data) {\n            if (!data) {\n                return null;\n            }\n            var themeData = data;\n            return themeData.ensureLoaded(_this.fileService).then(function (_) {\n                if (themeId === _this.currentColorTheme.id && !_this.currentColorTheme.isLoaded && _this.currentColorTheme.hasEqualData(themeData)) {\n                    // the loaded theme is identical to the perisisted theme. Don't need to send an event.\n                    _this.currentColorTheme = themeData;\n                    themeData.setCustomColors(_this.colorCustomizations);\n                    themeData.setCustomTokenColors(_this.tokenColorCustomizations);\n                    return Promise.resolve(themeData);\n                }\n                themeData.setCustomColors(_this.colorCustomizations);\n                themeData.setCustomTokenColors(_this.tokenColorCustomizations);\n                _this.updateDynamicCSSRules(themeData);\n                return _this.applyTheme(themeData, settingsTarget);\n            }, function (error) {\n                return Promise.reject(new Error(nls.localize('error.cannotloadtheme', \"Unable to load {0}: {1}\", themeData.location.toString(), error.message)));\n            });\n        });\n    };\n    WorkbenchThemeService.prototype.restoreColorTheme = function () {\n        var _this = this;\n        var colorThemeSetting = this.configurationService.getValue(workbenchThemeService_1.COLOR_THEME_SETTING);\n        if (colorThemeSetting !== this.currentColorTheme.settingsId) {\n            this.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, undefined).then(function (theme) {\n                if (theme) {\n                    _this.setColorTheme(theme.id, undefined);\n                }\n            });\n        }\n    };\n    WorkbenchThemeService.prototype.updateDynamicCSSRules = function (themeData) {\n        var _this = this;\n        var cssRules = [];\n        var hasRule = {};\n        var ruleCollector = {\n            addRule: function (rule) {\n                if (!hasRule[rule]) {\n                    cssRules.push(rule);\n                    hasRule[rule] = true;\n                }\n            }\n        };\n        themingRegistry.getThemingParticipants().forEach(function (p) { return p(themeData, ruleCollector, _this.environmentService); });\n        _applyRules(cssRules.join('\\n'), colorThemeRulesClassName);\n    };\n    WorkbenchThemeService.prototype.applyTheme = function (newTheme, settingsTarget, silent) {\n        var _this = this;\n        if (silent === void 0) { silent = false; }\n        if (this.container) {\n            if (this.currentColorTheme) {\n                dom_1.removeClasses(this.container, this.currentColorTheme.id);\n            }\n            else {\n                dom_1.removeClasses(this.container, workbenchThemeService_1.VS_DARK_THEME, workbenchThemeService_1.VS_LIGHT_THEME, workbenchThemeService_1.VS_HC_THEME);\n            }\n            dom_1.addClasses(this.container, newTheme.id);\n        }\n        this.currentColorTheme = newTheme;\n        if (!this.themingParticipantChangeListener) {\n            this.themingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(function (_) { return _this.updateDynamicCSSRules(_this.currentColorTheme); });\n        }\n        if (this.fileService && !resources.isEqual(newTheme.location, this.watchedColorThemeLocation)) {\n            if (this.watchedColorThemeLocation) {\n                this.fileService.unwatchFileChanges(this.watchedColorThemeLocation);\n                this.watchedColorThemeLocation = undefined;\n            }\n            if (newTheme.location && (newTheme.watch || !!this.environmentService.extensionDevelopmentLocationURI)) {\n                this.watchedColorThemeLocation = newTheme.location;\n                this.fileService.watchFileChanges(this.watchedColorThemeLocation);\n            }\n        }\n        this.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n        if (silent) {\n            return Promise.resolve(null);\n        }\n        this.onColorThemeChange.fire(this.currentColorTheme);\n        // remember theme data for a quick restore\n        if (newTheme.isLoaded) {\n            this.storageService.store(PERSISTED_THEME_STORAGE_KEY, newTheme.toStorageData(), storage_1.StorageScope.GLOBAL);\n        }\n        return this.writeColorThemeConfiguration(settingsTarget);\n    };\n    WorkbenchThemeService.prototype.writeColorThemeConfiguration = function (settingsTarget) {\n        var _this = this;\n        if (!types.isUndefinedOrNull(settingsTarget)) {\n            return this.writeConfiguration(workbenchThemeService_1.COLOR_THEME_SETTING, this.currentColorTheme.settingsId, settingsTarget).then(function (_) { return _this.currentColorTheme; });\n        }\n        return Promise.resolve(this.currentColorTheme);\n    };\n    WorkbenchThemeService.prototype.sendTelemetry = function (themeId, themeData, themeType) {\n        if (themeData) {\n            var key = themeType + themeData.extensionId;\n            if (!this.themeExtensionsActivated.get(key)) {\n                /* __GDPR__\n                    \"activatePlugin\" : {\n                        \"id\" : { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n                        \"name\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n                        \"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                        \"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"themeId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                this.telemetryService.publicLog('activatePlugin', {\n                    id: themeData.extensionId,\n                    name: themeData.extensionName,\n                    isBuiltin: themeData.extensionIsBuiltin,\n                    publisherDisplayName: themeData.extensionPublisher,\n                    themeId: themeId\n                });\n                this.themeExtensionsActivated.set(key, true);\n            }\n        }\n    };\n    WorkbenchThemeService.prototype.getFileIconThemes = function () {\n        return this.iconThemeStore.getFileIconThemes();\n    };\n    WorkbenchThemeService.prototype.getFileIconTheme = function () {\n        return this.currentIconTheme;\n    };\n    WorkbenchThemeService.prototype.getIconTheme = function () {\n        return this.currentIconTheme;\n    };\n    WorkbenchThemeService.prototype.setFileIconTheme = function (iconTheme, settingsTarget) {\n        var _this = this;\n        iconTheme = iconTheme || '';\n        if (iconTheme === this.currentIconTheme.id && this.currentIconTheme.isLoaded) {\n            return this.writeFileIconConfiguration(settingsTarget);\n        }\n        var onApply = function (newIconTheme) {\n            _this.doSetFileIconTheme(newIconTheme);\n            // remember theme data for a quick restore\n            if (newIconTheme.isLoaded) {\n                _this.storageService.store(PERSISTED_ICON_THEME_STORAGE_KEY, newIconTheme.toStorageData(), storage_1.StorageScope.GLOBAL);\n            }\n            return _this.writeFileIconConfiguration(settingsTarget);\n        };\n        return this.iconThemeStore.findThemeData(iconTheme).then(function (data) {\n            var iconThemeData = data || fileIconThemeData_1.FileIconThemeData.noIconTheme();\n            return iconThemeData.ensureLoaded(_this.fileService).then(function (_) {\n                return _applyIconTheme(iconThemeData, onApply);\n            });\n        });\n    };\n    WorkbenchThemeService.prototype.restoreFileIconTheme = function () {\n        var _this = this;\n        var fileIconThemeSetting = this.configurationService.getValue(workbenchThemeService_1.ICON_THEME_SETTING);\n        if (fileIconThemeSetting !== this.currentIconTheme.settingsId) {\n            this.iconThemeStore.findThemeBySettingsId(fileIconThemeSetting).then(function (theme) {\n                if (theme) {\n                    _this.setFileIconTheme(theme.id, undefined);\n                }\n            });\n        }\n    };\n    WorkbenchThemeService.prototype.doSetFileIconTheme = function (iconThemeData) {\n        this.currentIconTheme = iconThemeData;\n        if (this.container) {\n            if (iconThemeData.id) {\n                dom_1.addClasses(this.container, fileIconsEnabledClass);\n            }\n            else {\n                dom_1.removeClasses(this.container, fileIconsEnabledClass);\n            }\n        }\n        if (this.fileService && !resources.isEqual(iconThemeData.location, this.watchedIconThemeLocation)) {\n            if (this.watchedIconThemeLocation) {\n                this.fileService.unwatchFileChanges(this.watchedIconThemeLocation);\n                this.watchedIconThemeLocation = undefined;\n            }\n            if (iconThemeData.location && (iconThemeData.watch || !!this.environmentService.extensionDevelopmentLocationURI)) {\n                this.watchedIconThemeLocation = iconThemeData.location;\n                this.fileService.watchFileChanges(this.watchedIconThemeLocation);\n            }\n        }\n        if (iconThemeData.id) {\n            this.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n        }\n        this.onFileIconThemeChange.fire(this.currentIconTheme);\n    };\n    WorkbenchThemeService.prototype.writeFileIconConfiguration = function (settingsTarget) {\n        var _this = this;\n        if (!types.isUndefinedOrNull(settingsTarget)) {\n            return this.writeConfiguration(workbenchThemeService_1.ICON_THEME_SETTING, this.currentIconTheme.settingsId, settingsTarget).then(function (_) { return _this.currentIconTheme; });\n        }\n        return Promise.resolve(this.currentIconTheme);\n    };\n    WorkbenchThemeService.prototype.writeConfiguration = function (key, value, settingsTarget) {\n        var settings = this.configurationService.inspect(key);\n        if (settingsTarget === 'auto') {\n            if (!types.isUndefined(settings.workspaceFolder)) {\n                settingsTarget = configuration_1.ConfigurationTarget.WORKSPACE_FOLDER;\n            }\n            else if (!types.isUndefined(settings.workspace)) {\n                settingsTarget = configuration_1.ConfigurationTarget.WORKSPACE;\n            }\n            else {\n                settingsTarget = configuration_1.ConfigurationTarget.USER;\n            }\n        }\n        if (settingsTarget === configuration_1.ConfigurationTarget.USER) {\n            if (value === settings.user) {\n                return Promise.resolve(undefined); // nothing to do\n            }\n            else if (value === settings.default) {\n                if (types.isUndefined(settings.user)) {\n                    return Promise.resolve(undefined); // nothing to do\n                }\n                value = undefined; // remove configuration from user settings\n            }\n        }\n        else if (settingsTarget === configuration_1.ConfigurationTarget.WORKSPACE || settingsTarget === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n            if (value === settings.value) {\n                return Promise.resolve(undefined); // nothing to do\n            }\n        }\n        return this.configurationService.updateValue(key, value, settingsTarget);\n    };\n    WorkbenchThemeService.prototype.getBaseThemeFromContainer = function () {\n        if (this.container) {\n            for (var i = this.container.classList.length - 1; i >= 0; i--) {\n                var item = document.body.classList.item(i);\n                if (item === workbenchThemeService_1.VS_LIGHT_THEME || item === workbenchThemeService_1.VS_DARK_THEME || item === workbenchThemeService_1.VS_HC_THEME) {\n                    return item;\n                }\n            }\n        }\n        return workbenchThemeService_1.VS_DARK_THEME;\n    };\n    WorkbenchThemeService = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService),\n        tslib_1.__param(1, storage_1.IStorageService),\n        tslib_1.__param(2, configuration_1.IConfigurationService),\n        tslib_1.__param(3, telemetry_1.ITelemetryService),\n        tslib_1.__param(4, windows_1.IWindowService),\n        tslib_1.__param(5, environment_1.IEnvironmentService),\n        tslib_1.__param(6, files_1.IFileService)\n    ], WorkbenchThemeService);\n    return WorkbenchThemeService;\n}());\nexports.WorkbenchThemeService = WorkbenchThemeService;\nfunction _applyIconTheme(data, onApply) {\n    _applyRules(data.styleSheetContent, iconThemeRulesClassName);\n    return onApply(data);\n}\nfunction _applyRules(styleSheetContent, rulesClassName) {\n    var themeStyles = document.head.getElementsByClassName(rulesClassName);\n    if (themeStyles.length === 0) {\n        var elStyle = document.createElement('style');\n        elStyle.type = 'text/css';\n        elStyle.className = rulesClassName;\n        elStyle.innerHTML = styleSheetContent;\n        document.head.appendChild(elStyle);\n    }\n    else {\n        themeStyles[0].innerHTML = styleSheetContent;\n    }\n}\ncolorThemeSchema_1.registerColorThemeSchemas();\nfileIconThemeSchema_1.registerFileIconThemeSchemas();\n// Configuration: Themes\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nvar colorThemeSettingSchema = {\n    type: 'string',\n    description: nls.localize('colorTheme', \"Specifies the color theme used in the workbench.\"),\n    default: DEFAULT_THEME_SETTING_VALUE,\n    enum: [],\n    enumDescriptions: [],\n    errorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\nvar iconThemeSettingSchema = {\n    type: ['string', 'null'],\n    default: DEFAULT_ICON_THEME_SETTING_VALUE,\n    description: nls.localize('iconTheme', \"Specifies the icon theme used in the workbench or 'null' to not show any file icons.\"),\n    enum: [null],\n    enumDescriptions: [nls.localize('noIconThemeDesc', 'No file icons')],\n    errorMessage: nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\")\n};\nvar colorCustomizationsSchema = {\n    type: 'object',\n    description: nls.localize('workbenchColors', \"Overrides colors from the currently selected color theme.\"),\n    allOf: [{ $ref: colorRegistry_1.workbenchColorsSchemaId }],\n    default: {},\n    defaultSnippets: [{\n            body: {}\n        }]\n};\nvar themeSettingsConfiguration = {\n    id: 'workbench',\n    order: 7.1,\n    type: 'object',\n    properties: (_a = {},\n        _a[workbenchThemeService_1.COLOR_THEME_SETTING] = colorThemeSettingSchema,\n        _a[workbenchThemeService_1.ICON_THEME_SETTING] = iconThemeSettingSchema,\n        _a[workbenchThemeService_1.CUSTOM_WORKBENCH_COLORS_SETTING] = colorCustomizationsSchema,\n        _a)\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\nfunction tokenGroupSettings(description) {\n    return {\n        description: description,\n        default: '#FF0000',\n        anyOf: [\n            {\n                type: 'string',\n                format: 'color-hex'\n            },\n            {\n                $ref: colorThemeSchema_1.textmateColorSettingsSchemaId\n            }\n        ]\n    };\n}\nvar tokenColorSchema = {\n    properties: {\n        comments: tokenGroupSettings(nls.localize('editorColors.comments', \"Sets the colors and styles for comments\")),\n        strings: tokenGroupSettings(nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\")),\n        keywords: tokenGroupSettings(nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\")),\n        numbers: tokenGroupSettings(nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\")),\n        types: tokenGroupSettings(nls.localize('editorColors.types', \"Sets the colors and styles for type declarations and references.\")),\n        functions: tokenGroupSettings(nls.localize('editorColors.functions', \"Sets the colors and styles for functions declarations and references.\")),\n        variables: tokenGroupSettings(nls.localize('editorColors.variables', \"Sets the colors and styles for variables declarations and references.\")),\n        textMateRules: {\n            description: nls.localize('editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'),\n            $ref: colorThemeSchema_1.textmateColorsSchemaId\n        }\n    }\n};\nvar tokenColorCustomizationSchema = {\n    description: nls.localize('editorColors', \"Overrides editor colors and font style from the currently selected color theme.\"),\n    default: {},\n    allOf: [tokenColorSchema]\n};\nvar tokenColorCustomizationConfiguration = {\n    id: 'editor',\n    order: 7.2,\n    type: 'object',\n    properties: (_b = {},\n        _b[workbenchThemeService_1.CUSTOM_EDITOR_COLORS_SETTING] = tokenColorCustomizationSchema,\n        _b)\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\nextensions_2.registerSingleton(workbenchThemeService_1.IWorkbenchThemeService, WorkbenchThemeService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/themes/browser/workbenchThemeService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkbenchThemeService, IColorTheme, ITokenColorCustomizations, IFileIconTheme, ExtensionData, VS_LIGHT_THEME, VS_DARK_THEME, VS_HC_THEME, COLOR_THEME_SETTING, ICON_THEME_SETTING, CUSTOM_WORKBENCH_COLORS_SETTING, CUSTOM_EDITOR_COLORS_SETTING, DETECT_HC_SETTING, HC_THEME_ID } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as errors from 'vs/base/common/errors';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, IConfigurationPropertySchema, IConfigurationNode } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ColorThemeData } from './colorThemeData';\nimport { ITheme, Extensions as ThemingExtensions, IThemingRegistry } from 'vs/platform/theme/common/themeService';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { registerFileIconThemeSchemas } from 'vs/workbench/services/themes/common/fileIconThemeSchema';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ColorThemeStore } from 'vs/workbench/services/themes/browser/colorThemeStore';\nimport { FileIconThemeStore } from 'vs/workbench/services/themes/common/fileIconThemeStore';\nimport { FileIconThemeData } from 'vs/workbench/services/themes/common/fileIconThemeData';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { removeClasses, addClasses } from 'vs/base/browser/dom';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService, FileChangeType } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport * as resources from 'vs/base/common/resources';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { textmateColorsSchemaId, registerColorThemeSchemas, textmateColorSettingsSchemaId } from 'vs/workbench/services/themes/common/colorThemeSchema';\nimport { workbenchColorsSchemaId } from 'vs/platform/theme/common/colorRegistry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\n// implementation\n\nconst DEFAULT_THEME_ID = 'vs-dark vscode-theme-defaults-themes-dark_plus-json';\nconst DEFAULT_THEME_SETTING_VALUE = 'Default Dark+';\n\nconst PERSISTED_THEME_STORAGE_KEY = 'colorThemeData';\nconst PERSISTED_ICON_THEME_STORAGE_KEY = 'iconThemeData';\n\nconst defaultThemeExtensionId = 'vscode-theme-defaults';\nconst oldDefaultThemeExtensionId = 'vscode-theme-colorful-defaults';\n\nconst DEFAULT_ICON_THEME_SETTING_VALUE = 'vs-seti';\nconst fileIconsEnabledClass = 'file-icons-enabled';\n\nconst colorThemeRulesClassName = 'contributedColorTheme';\nconst iconThemeRulesClassName = 'contributedIconTheme';\n\nconst themingRegistry = Registry.as<IThemingRegistry>(ThemingExtensions.ThemingContribution);\n\nfunction validateThemeId(theme: string): string {\n\t// migrations\n\tswitch (theme) {\n\t\tcase VS_LIGHT_THEME: return `vs ${defaultThemeExtensionId}-themes-light_vs-json`;\n\t\tcase VS_DARK_THEME: return `vs-dark ${defaultThemeExtensionId}-themes-dark_vs-json`;\n\t\tcase VS_HC_THEME: return `hc-black ${defaultThemeExtensionId}-themes-hc_black-json`;\n\t\tcase `vs ${oldDefaultThemeExtensionId}-themes-light_plus-tmTheme`: return `vs ${defaultThemeExtensionId}-themes-light_plus-json`;\n\t\tcase `vs-dark ${oldDefaultThemeExtensionId}-themes-dark_plus-tmTheme`: return `vs-dark ${defaultThemeExtensionId}-themes-dark_plus-json`;\n\t}\n\treturn theme;\n}\n\nexport interface IColorCustomizations {\n\t[colorIdOrThemeSettingsId: string]: string | IColorCustomizations;\n}\n\nexport class WorkbenchThemeService implements IWorkbenchThemeService {\n\t_serviceBrand: any;\n\n\tprivate colorThemeStore: ColorThemeStore;\n\tprivate currentColorTheme: ColorThemeData;\n\tprivate container: HTMLElement;\n\tprivate readonly onColorThemeChange: Emitter<IColorTheme>;\n\tprivate watchedColorThemeLocation: URI | undefined;\n\n\tprivate iconThemeStore: FileIconThemeStore;\n\tprivate currentIconTheme: FileIconThemeData;\n\tprivate readonly onFileIconThemeChange: Emitter<IFileIconTheme>;\n\tprivate watchedIconThemeLocation: URI | undefined;\n\n\tprivate themingParticipantChangeListener: IDisposable;\n\n\tprivate get colorCustomizations(): IColorCustomizations {\n\t\treturn this.configurationService.getValue<IColorCustomizations>(CUSTOM_WORKBENCH_COLORS_SETTING) || {};\n\t}\n\n\tprivate get tokenColorCustomizations(): ITokenColorCustomizations {\n\t\treturn this.configurationService.getValue<ITokenColorCustomizations>(CUSTOM_EDITOR_COLORS_SETTING) || {};\n\t}\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\n\t\tthis.container = document.body;\n\t\tthis.colorThemeStore = new ColorThemeStore(extensionService, ColorThemeData.createLoadedEmptyTheme(DEFAULT_THEME_ID, DEFAULT_THEME_SETTING_VALUE));\n\t\tthis.onFileIconThemeChange = new Emitter<IFileIconTheme>();\n\t\tthis.iconThemeStore = new FileIconThemeStore(extensionService);\n\t\tthis.onColorThemeChange = new Emitter<IColorTheme>({ leakWarningThreshold: 400 });\n\n\t\tthis.currentIconTheme = FileIconThemeData.createUnloadedTheme('');\n\n\t\t// In order to avoid paint flashing for tokens, because\n\t\t// themes are loaded asynchronously, we need to initialize\n\t\t// a color theme document with good defaults until the theme is loaded\n\t\tlet themeData: ColorThemeData | undefined = undefined;\n\t\tlet persistedThemeData = this.storageService.get(PERSISTED_THEME_STORAGE_KEY, StorageScope.GLOBAL);\n\t\tif (persistedThemeData) {\n\t\t\tthemeData = ColorThemeData.fromStorageData(persistedThemeData);\n\t\t}\n\t\tlet containerBaseTheme = this.getBaseThemeFromContainer();\n\t\tif (!themeData || themeData.baseTheme !== containerBaseTheme) {\n\t\t\tthemeData = ColorThemeData.createUnloadedTheme(containerBaseTheme);\n\t\t}\n\t\tthemeData.setCustomColors(this.colorCustomizations);\n\t\tthemeData.setCustomTokenColors(this.tokenColorCustomizations);\n\t\tthis.updateDynamicCSSRules(themeData);\n\t\tthis.applyTheme(themeData, undefined, true);\n\n\t\tlet persistedIconThemeData = this.storageService.get(PERSISTED_ICON_THEME_STORAGE_KEY, StorageScope.GLOBAL);\n\t\tif (persistedIconThemeData) {\n\t\t\tconst iconData = FileIconThemeData.fromStorageData(persistedIconThemeData);\n\t\t\tif (iconData) {\n\t\t\t\t_applyIconTheme(iconData, () => {\n\t\t\t\t\tthis.doSetFileIconTheme(iconData);\n\t\t\t\t\treturn Promise.resolve(iconData);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.initialize().then(undefined, errors.onUnexpectedError).then(_ => {\n\t\t\tthis.installConfigurationListener();\n\t\t});\n\n\t\tlet prevColorId: string | undefined = undefined;\n\n\t\t// update settings schema setting for theme specific settings\n\t\tthis.colorThemeStore.onDidChange(async event => {\n\t\t\t// updates enum for the 'workbench.colorTheme` setting\n\t\t\tcolorThemeSettingSchema.enum = event.themes.map(t => t.settingsId);\n\t\t\tcolorThemeSettingSchema.enumDescriptions = event.themes.map(t => t.description || '');\n\n\t\t\tconst themeSpecificWorkbenchColors: IJSONSchema = { properties: {} };\n\t\t\tconst themeSpecificTokenColors: IJSONSchema = { properties: {} };\n\n\t\t\tconst workbenchColors = { $ref: workbenchColorsSchemaId, additionalProperties: false };\n\t\t\tconst tokenColors = { properties: tokenColorSchema.properties, additionalProperties: false };\n\t\t\tfor (let t of event.themes) {\n\t\t\t\t// add theme specific color customization (\"[Abyss]\":{ ... })\n\t\t\t\tconst themeId = `[${t.settingsId}]`;\n\t\t\t\tthemeSpecificWorkbenchColors.properties![themeId] = workbenchColors;\n\t\t\t\tthemeSpecificTokenColors.properties![themeId] = tokenColors;\n\t\t\t}\n\n\t\t\tcolorCustomizationsSchema.allOf![1] = themeSpecificWorkbenchColors;\n\t\t\ttokenColorCustomizationSchema.allOf![1] = themeSpecificTokenColors;\n\n\t\t\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration, tokenColorCustomizationConfiguration);\n\n\t\t\tif (this.currentColorTheme.isLoaded) {\n\t\t\t\tconst themeData = await this.colorThemeStore.findThemeData(this.currentColorTheme.id);\n\t\t\t\tif (!themeData) {\n\t\t\t\t\t// current theme is no longer available\n\t\t\t\t\tprevColorId = this.currentColorTheme.id;\n\t\t\t\t\tthis.setColorTheme(DEFAULT_THEME_ID, 'auto');\n\t\t\t\t} else {\n\t\t\t\t\tif (this.currentColorTheme.id === DEFAULT_THEME_ID && !types.isUndefined(prevColorId) && await this.colorThemeStore.findThemeData(prevColorId)) {\n\t\t\t\t\t\t// restore color\n\t\t\t\t\t\tthis.setColorTheme(prevColorId, 'auto');\n\t\t\t\t\t\tprevColorId = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tlet prevFileIconId: string | undefined = undefined;\n\t\tthis.iconThemeStore.onDidChange(async event => {\n\t\t\ticonThemeSettingSchema.enum = [null, ...event.themes.map(t => t.settingsId)];\n\t\t\ticonThemeSettingSchema.enumDescriptions = [iconThemeSettingSchema.enumDescriptions![0], ...event.themes.map(t => t.description || '')];\n\t\t\tconfigurationRegistry.notifyConfigurationSchemaUpdated(themeSettingsConfiguration);\n\n\t\t\tif (this.currentIconTheme.isLoaded) {\n\t\t\t\tconst theme = await this.iconThemeStore.findThemeData(this.currentIconTheme.id);\n\t\t\t\tif (!theme) {\n\t\t\t\t\t// current theme is no longer available\n\t\t\t\t\tprevFileIconId = this.currentIconTheme.id;\n\t\t\t\t\tthis.setFileIconTheme(DEFAULT_ICON_THEME_SETTING_VALUE, 'auto');\n\t\t\t\t} else {\n\t\t\t\t\t// restore color\n\t\t\t\t\tif (this.currentIconTheme.id === DEFAULT_ICON_THEME_SETTING_VALUE && !types.isUndefined(prevFileIconId) && await this.iconThemeStore.findThemeData(prevFileIconId)) {\n\t\t\t\t\t\tthis.setFileIconTheme(prevFileIconId, 'auto');\n\t\t\t\t\t\tprevFileIconId = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.fileService.onFileChanges(async e => {\n\t\t\tif (this.watchedColorThemeLocation && this.currentColorTheme && e.contains(this.watchedColorThemeLocation, FileChangeType.UPDATED)) {\n\t\t\t\tawait this.currentColorTheme.reload(this.fileService);\n\t\t\t\tthis.currentColorTheme.setCustomColors(this.colorCustomizations);\n\t\t\t\tthis.currentColorTheme.setCustomTokenColors(this.tokenColorCustomizations);\n\t\t\t\tthis.updateDynamicCSSRules(this.currentColorTheme);\n\t\t\t\tthis.applyTheme(this.currentColorTheme, undefined, false);\n\t\t\t}\n\t\t\tif (this.watchedIconThemeLocation && this.currentIconTheme && e.contains(this.watchedIconThemeLocation, FileChangeType.UPDATED)) {\n\t\t\t\tawait this.currentIconTheme.reload(this.fileService);\n\t\t\t\t_applyIconTheme(this.currentIconTheme, () => Promise.resolve(this.currentIconTheme));\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic get onDidColorThemeChange(): Event<IColorTheme> {\n\t\treturn this.onColorThemeChange.event;\n\t}\n\n\tpublic get onDidFileIconThemeChange(): Event<IFileIconTheme> {\n\t\treturn this.onFileIconThemeChange.event;\n\t}\n\n\tpublic get onIconThemeChange(): Event<IFileIconTheme> {\n\t\treturn this.onFileIconThemeChange.event;\n\t}\n\n\tpublic get onThemeChange(): Event<ITheme> {\n\t\treturn this.onColorThemeChange.event;\n\t}\n\n\tprivate initialize(): Promise<[IColorTheme | null, IFileIconTheme | null]> {\n\t\tlet detectHCThemeSetting = this.configurationService.getValue<boolean>(DETECT_HC_SETTING);\n\n\t\tlet colorThemeSetting: string;\n\t\tif (this.windowService.getConfiguration().highContrast && detectHCThemeSetting) {\n\t\t\tcolorThemeSetting = HC_THEME_ID;\n\t\t} else {\n\t\t\tcolorThemeSetting = this.configurationService.getValue<string>(COLOR_THEME_SETTING);\n\t\t}\n\n\t\tlet iconThemeSetting = this.configurationService.getValue<string | null>(ICON_THEME_SETTING);\n\n\t\treturn Promise.all([\n\t\t\tthis.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, DEFAULT_THEME_ID).then(theme => {\n\t\t\t\treturn this.colorThemeStore.findThemeDataByParentLocation(this.environmentService.extensionDevelopmentLocationURI).then(devThemes => {\n\t\t\t\t\tif (devThemes.length) {\n\t\t\t\t\t\treturn this.setColorTheme(devThemes[0].id, ConfigurationTarget.MEMORY);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.setColorTheme(theme && theme.id, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t\tthis.iconThemeStore.findThemeBySettingsId(iconThemeSetting).then(theme => {\n\t\t\t\treturn this.iconThemeStore.findThemeDataByParentLocation(this.environmentService.extensionDevelopmentLocationURI).then(devThemes => {\n\t\t\t\t\tif (devThemes.length) {\n\t\t\t\t\t\treturn this.setFileIconTheme(devThemes[0].id, ConfigurationTarget.MEMORY);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.setFileIconTheme(theme && theme.id, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}),\n\t\t]);\n\t}\n\n\tprivate installConfigurationListener() {\n\t\tthis.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(COLOR_THEME_SETTING)) {\n\t\t\t\tlet colorThemeSetting = this.configurationService.getValue<string>(COLOR_THEME_SETTING);\n\t\t\t\tif (colorThemeSetting !== this.currentColorTheme.settingsId) {\n\t\t\t\t\tthis.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, undefined).then(theme => {\n\t\t\t\t\t\tif (theme) {\n\t\t\t\t\t\t\tthis.setColorTheme(theme.id, undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (e.affectsConfiguration(ICON_THEME_SETTING)) {\n\t\t\t\tlet iconThemeSetting = this.configurationService.getValue<string | null>(ICON_THEME_SETTING);\n\t\t\t\tif (iconThemeSetting !== this.currentIconTheme.settingsId) {\n\t\t\t\t\tthis.iconThemeStore.findThemeBySettingsId(iconThemeSetting).then(theme => {\n\t\t\t\t\t\tthis.setFileIconTheme(theme && theme.id, undefined);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.currentColorTheme) {\n\t\t\t\tlet hasColorChanges = false;\n\t\t\t\tif (e.affectsConfiguration(CUSTOM_WORKBENCH_COLORS_SETTING)) {\n\t\t\t\t\tthis.currentColorTheme.setCustomColors(this.colorCustomizations);\n\t\t\t\t\thasColorChanges = true;\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(CUSTOM_EDITOR_COLORS_SETTING)) {\n\t\t\t\t\tthis.currentColorTheme.setCustomTokenColors(this.tokenColorCustomizations);\n\t\t\t\t\thasColorChanges = true;\n\t\t\t\t}\n\t\t\t\tif (hasColorChanges) {\n\t\t\t\t\tthis.updateDynamicCSSRules(this.currentColorTheme);\n\t\t\t\t\tthis.onColorThemeChange.fire(this.currentColorTheme);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getColorTheme(): IColorTheme {\n\t\treturn this.currentColorTheme;\n\t}\n\n\tpublic getColorThemes(): Promise<IColorTheme[]> {\n\t\treturn this.colorThemeStore.getColorThemes();\n\t}\n\n\tpublic getTheme(): ITheme {\n\t\treturn this.getColorTheme();\n\t}\n\n\tpublic setColorTheme(themeId: string | undefined, settingsTarget: ConfigurationTarget | undefined | 'auto'): Promise<IColorTheme | null> {\n\t\tif (!themeId) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (themeId === this.currentColorTheme.id && this.currentColorTheme.isLoaded) {\n\t\t\treturn this.writeColorThemeConfiguration(settingsTarget);\n\t\t}\n\n\t\tthemeId = validateThemeId(themeId); // migrate theme ids\n\n\t\treturn this.colorThemeStore.findThemeData(themeId, DEFAULT_THEME_ID).then(data => {\n\t\t\tif (!data) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst themeData = data;\n\t\t\treturn themeData.ensureLoaded(this.fileService).then(_ => {\n\t\t\t\tif (themeId === this.currentColorTheme.id && !this.currentColorTheme.isLoaded && this.currentColorTheme.hasEqualData(themeData)) {\n\t\t\t\t\t// the loaded theme is identical to the perisisted theme. Don't need to send an event.\n\t\t\t\t\tthis.currentColorTheme = themeData;\n\t\t\t\t\tthemeData.setCustomColors(this.colorCustomizations);\n\t\t\t\t\tthemeData.setCustomTokenColors(this.tokenColorCustomizations);\n\t\t\t\t\treturn Promise.resolve(themeData);\n\t\t\t\t}\n\t\t\t\tthemeData.setCustomColors(this.colorCustomizations);\n\t\t\t\tthemeData.setCustomTokenColors(this.tokenColorCustomizations);\n\t\t\t\tthis.updateDynamicCSSRules(themeData);\n\t\t\t\treturn this.applyTheme(themeData, settingsTarget);\n\t\t\t}, error => {\n\t\t\t\treturn Promise.reject(new Error(nls.localize('error.cannotloadtheme', \"Unable to load {0}: {1}\", themeData.location!.toString(), error.message)));\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic restoreColorTheme() {\n\t\tlet colorThemeSetting = this.configurationService.getValue<string>(COLOR_THEME_SETTING);\n\t\tif (colorThemeSetting !== this.currentColorTheme.settingsId) {\n\t\t\tthis.colorThemeStore.findThemeDataBySettingsId(colorThemeSetting, undefined).then(theme => {\n\t\t\t\tif (theme) {\n\t\t\t\t\tthis.setColorTheme(theme.id, undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateDynamicCSSRules(themeData: ITheme) {\n\t\tlet cssRules: string[] = [];\n\t\tlet hasRule: { [rule: string]: boolean } = {};\n\t\tlet ruleCollector = {\n\t\t\taddRule: (rule: string) => {\n\t\t\t\tif (!hasRule[rule]) {\n\t\t\t\t\tcssRules.push(rule);\n\t\t\t\t\thasRule[rule] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthemingRegistry.getThemingParticipants().forEach(p => p(themeData, ruleCollector, this.environmentService));\n\t\t_applyRules(cssRules.join('\\n'), colorThemeRulesClassName);\n\t}\n\n\tprivate applyTheme(newTheme: ColorThemeData, settingsTarget: ConfigurationTarget | undefined | 'auto', silent = false): Promise<IColorTheme | null> {\n\t\tif (this.container) {\n\t\t\tif (this.currentColorTheme) {\n\t\t\t\tremoveClasses(this.container, this.currentColorTheme.id);\n\t\t\t} else {\n\t\t\t\tremoveClasses(this.container, VS_DARK_THEME, VS_LIGHT_THEME, VS_HC_THEME);\n\t\t\t}\n\t\t\taddClasses(this.container, newTheme.id);\n\t\t}\n\t\tthis.currentColorTheme = newTheme;\n\t\tif (!this.themingParticipantChangeListener) {\n\t\t\tthis.themingParticipantChangeListener = themingRegistry.onThemingParticipantAdded(_ => this.updateDynamicCSSRules(this.currentColorTheme));\n\t\t}\n\n\t\tif (this.fileService && !resources.isEqual(newTheme.location, this.watchedColorThemeLocation)) {\n\t\t\tif (this.watchedColorThemeLocation) {\n\t\t\t\tthis.fileService.unwatchFileChanges(this.watchedColorThemeLocation);\n\t\t\t\tthis.watchedColorThemeLocation = undefined;\n\t\t\t}\n\t\t\tif (newTheme.location && (newTheme.watch || !!this.environmentService.extensionDevelopmentLocationURI)) {\n\t\t\t\tthis.watchedColorThemeLocation = newTheme.location;\n\t\t\t\tthis.fileService.watchFileChanges(this.watchedColorThemeLocation);\n\t\t\t}\n\t\t}\n\n\t\tthis.sendTelemetry(newTheme.id, newTheme.extensionData, 'color');\n\n\t\tif (silent) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tthis.onColorThemeChange.fire(this.currentColorTheme);\n\n\t\t// remember theme data for a quick restore\n\t\tif (newTheme.isLoaded) {\n\t\t\tthis.storageService.store(PERSISTED_THEME_STORAGE_KEY, newTheme.toStorageData(), StorageScope.GLOBAL);\n\t\t}\n\n\t\treturn this.writeColorThemeConfiguration(settingsTarget);\n\t}\n\n\tprivate writeColorThemeConfiguration(settingsTarget: ConfigurationTarget | undefined | 'auto'): Promise<IColorTheme> {\n\t\tif (!types.isUndefinedOrNull(settingsTarget)) {\n\t\t\treturn this.writeConfiguration(COLOR_THEME_SETTING, this.currentColorTheme.settingsId, settingsTarget).then(_ => this.currentColorTheme);\n\t\t}\n\t\treturn Promise.resolve(this.currentColorTheme);\n\t}\n\n\tprivate themeExtensionsActivated = new Map<string, boolean>();\n\tprivate sendTelemetry(themeId: string, themeData: ExtensionData | undefined, themeType: string) {\n\t\tif (themeData) {\n\t\t\tlet key = themeType + themeData.extensionId;\n\t\t\tif (!this.themeExtensionsActivated.get(key)) {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"activatePlugin\" : {\n\t\t\t\t\t\t\"id\" : { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\"name\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"publisherDisplayName\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\"themeId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog('activatePlugin', {\n\t\t\t\t\tid: themeData.extensionId,\n\t\t\t\t\tname: themeData.extensionName,\n\t\t\t\t\tisBuiltin: themeData.extensionIsBuiltin,\n\t\t\t\t\tpublisherDisplayName: themeData.extensionPublisher,\n\t\t\t\t\tthemeId: themeId\n\t\t\t\t});\n\t\t\t\tthis.themeExtensionsActivated.set(key, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getFileIconThemes(): Promise<IFileIconTheme[]> {\n\t\treturn this.iconThemeStore.getFileIconThemes();\n\t}\n\n\tpublic getFileIconTheme() {\n\t\treturn this.currentIconTheme;\n\t}\n\n\tpublic getIconTheme() {\n\t\treturn this.currentIconTheme;\n\t}\n\n\tpublic setFileIconTheme(iconTheme: string | undefined, settingsTarget: ConfigurationTarget | undefined | 'auto'): Promise<IFileIconTheme> {\n\t\ticonTheme = iconTheme || '';\n\t\tif (iconTheme === this.currentIconTheme.id && this.currentIconTheme.isLoaded) {\n\t\t\treturn this.writeFileIconConfiguration(settingsTarget);\n\t\t}\n\t\tlet onApply = (newIconTheme: FileIconThemeData) => {\n\t\t\tthis.doSetFileIconTheme(newIconTheme);\n\n\t\t\t// remember theme data for a quick restore\n\t\t\tif (newIconTheme.isLoaded) {\n\t\t\t\tthis.storageService.store(PERSISTED_ICON_THEME_STORAGE_KEY, newIconTheme.toStorageData(), StorageScope.GLOBAL);\n\t\t\t}\n\n\t\t\treturn this.writeFileIconConfiguration(settingsTarget);\n\t\t};\n\n\t\treturn this.iconThemeStore.findThemeData(iconTheme).then(data => {\n\t\t\tconst iconThemeData = data || FileIconThemeData.noIconTheme();\n\t\t\treturn iconThemeData.ensureLoaded(this.fileService).then(_ => {\n\t\t\t\treturn _applyIconTheme(iconThemeData, onApply);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic restoreFileIconTheme() {\n\t\tlet fileIconThemeSetting = this.configurationService.getValue<string | null>(ICON_THEME_SETTING);\n\t\tif (fileIconThemeSetting !== this.currentIconTheme.settingsId) {\n\t\t\tthis.iconThemeStore.findThemeBySettingsId(fileIconThemeSetting).then(theme => {\n\t\t\t\tif (theme) {\n\t\t\t\t\tthis.setFileIconTheme(theme.id, undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate doSetFileIconTheme(iconThemeData: FileIconThemeData): void {\n\t\tthis.currentIconTheme = iconThemeData;\n\n\t\tif (this.container) {\n\t\t\tif (iconThemeData.id) {\n\t\t\t\taddClasses(this.container, fileIconsEnabledClass);\n\t\t\t} else {\n\t\t\t\tremoveClasses(this.container, fileIconsEnabledClass);\n\t\t\t}\n\t\t}\n\n\t\tif (this.fileService && !resources.isEqual(iconThemeData.location, this.watchedIconThemeLocation)) {\n\t\t\tif (this.watchedIconThemeLocation) {\n\t\t\t\tthis.fileService.unwatchFileChanges(this.watchedIconThemeLocation);\n\t\t\t\tthis.watchedIconThemeLocation = undefined;\n\t\t\t}\n\t\t\tif (iconThemeData.location && (iconThemeData.watch || !!this.environmentService.extensionDevelopmentLocationURI)) {\n\t\t\t\tthis.watchedIconThemeLocation = iconThemeData.location;\n\t\t\t\tthis.fileService.watchFileChanges(this.watchedIconThemeLocation);\n\t\t\t}\n\t\t}\n\n\t\tif (iconThemeData.id) {\n\t\t\tthis.sendTelemetry(iconThemeData.id, iconThemeData.extensionData, 'fileIcon');\n\t\t}\n\t\tthis.onFileIconThemeChange.fire(this.currentIconTheme);\n\n\t}\n\n\tprivate writeFileIconConfiguration(settingsTarget: ConfigurationTarget | undefined | 'auto'): Promise<IFileIconTheme> {\n\t\tif (!types.isUndefinedOrNull(settingsTarget)) {\n\t\t\treturn this.writeConfiguration(ICON_THEME_SETTING, this.currentIconTheme.settingsId, settingsTarget).then(_ => this.currentIconTheme);\n\t\t}\n\t\treturn Promise.resolve(this.currentIconTheme);\n\t}\n\n\tpublic writeConfiguration(key: string, value: any, settingsTarget: ConfigurationTarget | 'auto'): Promise<void> {\n\t\tlet settings = this.configurationService.inspect(key);\n\t\tif (settingsTarget === 'auto') {\n\t\t\tif (!types.isUndefined(settings.workspaceFolder)) {\n\t\t\t\tsettingsTarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t} else if (!types.isUndefined(settings.workspace)) {\n\t\t\t\tsettingsTarget = ConfigurationTarget.WORKSPACE;\n\t\t\t} else {\n\t\t\t\tsettingsTarget = ConfigurationTarget.USER;\n\t\t\t}\n\t\t}\n\n\t\tif (settingsTarget === ConfigurationTarget.USER) {\n\t\t\tif (value === settings.user) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t} else if (value === settings.default) {\n\t\t\t\tif (types.isUndefined(settings.user)) {\n\t\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t\t}\n\t\t\t\tvalue = undefined; // remove configuration from user settings\n\t\t\t}\n\t\t} else if (settingsTarget === ConfigurationTarget.WORKSPACE || settingsTarget === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (value === settings.value) {\n\t\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t\t}\n\t\t}\n\t\treturn this.configurationService.updateValue(key, value, settingsTarget);\n\t}\n\n\tprivate getBaseThemeFromContainer() {\n\t\tif (this.container) {\n\t\t\tfor (let i = this.container.classList.length - 1; i >= 0; i--) {\n\t\t\t\tconst item = document.body.classList.item(i);\n\t\t\t\tif (item === VS_LIGHT_THEME || item === VS_DARK_THEME || item === VS_HC_THEME) {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn VS_DARK_THEME;\n\t}\n}\n\nfunction _applyIconTheme(data: FileIconThemeData, onApply: (theme: FileIconThemeData) => Promise<IFileIconTheme>): Promise<IFileIconTheme> {\n\t_applyRules(data.styleSheetContent!, iconThemeRulesClassName);\n\treturn onApply(data);\n}\n\nfunction _applyRules(styleSheetContent: string, rulesClassName: string) {\n\tlet themeStyles = document.head.getElementsByClassName(rulesClassName);\n\tif (themeStyles.length === 0) {\n\t\tlet elStyle = document.createElement('style');\n\t\telStyle.type = 'text/css';\n\t\telStyle.className = rulesClassName;\n\t\telStyle.innerHTML = styleSheetContent;\n\t\tdocument.head.appendChild(elStyle);\n\t} else {\n\t\t(<HTMLStyleElement>themeStyles[0]).innerHTML = styleSheetContent;\n\t}\n}\n\nregisterColorThemeSchemas();\nregisterFileIconThemeSchemas();\n\n// Configuration: Themes\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconst colorThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: 'string',\n\tdescription: nls.localize('colorTheme', \"Specifies the color theme used in the workbench.\"),\n\tdefault: DEFAULT_THEME_SETTING_VALUE,\n\tenum: [],\n\tenumDescriptions: [],\n\terrorMessage: nls.localize('colorThemeError', \"Theme is unknown or not installed.\"),\n};\n\nconst iconThemeSettingSchema: IConfigurationPropertySchema = {\n\ttype: ['string', 'null'],\n\tdefault: DEFAULT_ICON_THEME_SETTING_VALUE,\n\tdescription: nls.localize('iconTheme', \"Specifies the icon theme used in the workbench or 'null' to not show any file icons.\"),\n\tenum: [null],\n\tenumDescriptions: [nls.localize('noIconThemeDesc', 'No file icons')],\n\terrorMessage: nls.localize('iconThemeError', \"File icon theme is unknown or not installed.\")\n};\nconst colorCustomizationsSchema: IConfigurationPropertySchema = {\n\ttype: 'object',\n\tdescription: nls.localize('workbenchColors', \"Overrides colors from the currently selected color theme.\"),\n\tallOf: [{ $ref: workbenchColorsSchemaId }],\n\tdefault: {},\n\tdefaultSnippets: [{\n\t\tbody: {\n\t\t}\n\t}]\n};\n\nconst themeSettingsConfiguration: IConfigurationNode = {\n\tid: 'workbench',\n\torder: 7.1,\n\ttype: 'object',\n\tproperties: {\n\t\t[COLOR_THEME_SETTING]: colorThemeSettingSchema,\n\t\t[ICON_THEME_SETTING]: iconThemeSettingSchema,\n\t\t[CUSTOM_WORKBENCH_COLORS_SETTING]: colorCustomizationsSchema\n\t}\n};\nconfigurationRegistry.registerConfiguration(themeSettingsConfiguration);\n\nfunction tokenGroupSettings(description: string) {\n\treturn {\n\t\tdescription,\n\t\tdefault: '#FF0000',\n\t\tanyOf: [\n\t\t\t{\n\t\t\t\ttype: 'string',\n\t\t\t\tformat: 'color-hex'\n\t\t\t},\n\t\t\t{\n\t\t\t\t$ref: textmateColorSettingsSchemaId\n\t\t\t}\n\t\t]\n\t};\n}\n\nconst tokenColorSchema: IJSONSchema = {\n\tproperties: {\n\t\tcomments: tokenGroupSettings(nls.localize('editorColors.comments', \"Sets the colors and styles for comments\")),\n\t\tstrings: tokenGroupSettings(nls.localize('editorColors.strings', \"Sets the colors and styles for strings literals.\")),\n\t\tkeywords: tokenGroupSettings(nls.localize('editorColors.keywords', \"Sets the colors and styles for keywords.\")),\n\t\tnumbers: tokenGroupSettings(nls.localize('editorColors.numbers', \"Sets the colors and styles for number literals.\")),\n\t\ttypes: tokenGroupSettings(nls.localize('editorColors.types', \"Sets the colors and styles for type declarations and references.\")),\n\t\tfunctions: tokenGroupSettings(nls.localize('editorColors.functions', \"Sets the colors and styles for functions declarations and references.\")),\n\t\tvariables: tokenGroupSettings(nls.localize('editorColors.variables', \"Sets the colors and styles for variables declarations and references.\")),\n\t\ttextMateRules: {\n\t\t\tdescription: nls.localize('editorColors.textMateRules', 'Sets colors and styles using textmate theming rules (advanced).'),\n\t\t\t$ref: textmateColorsSchemaId\n\t\t}\n\t}\n};\nconst tokenColorCustomizationSchema: IConfigurationPropertySchema = {\n\tdescription: nls.localize('editorColors', \"Overrides editor colors and font style from the currently selected color theme.\"),\n\tdefault: {},\n\tallOf: [tokenColorSchema]\n};\nconst tokenColorCustomizationConfiguration: IConfigurationNode = {\n\tid: 'editor',\n\torder: 7.2,\n\ttype: 'object',\n\tproperties: {\n\t\t[CUSTOM_EDITOR_COLORS_SETTING]: tokenColorCustomizationSchema\n\t}\n};\nconfigurationRegistry.registerConfiguration(tokenColorCustomizationConfiguration);\n\nregisterSingleton(IWorkbenchThemeService, WorkbenchThemeService);"]}]}