{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar ToggleMinimapAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleMinimapAction, _super);\n    function ToggleMinimapAction(id, label, _configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this._configurationService = _configurationService;\n        return _this;\n    }\n    ToggleMinimapAction.prototype.run = function () {\n        var newValue = !this._configurationService.getValue('editor.minimap.enabled');\n        return this._configurationService.updateValue('editor.minimap.enabled', newValue, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleMinimapAction.ID = 'editor.action.toggleMinimap';\n    ToggleMinimapAction.LABEL = nls.localize('toggleMinimap', \"View: Toggle Minimap\");\n    ToggleMinimapAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ToggleMinimapAction);\n    return ToggleMinimapAction;\n}(actions_1.Action));\nexports.ToggleMinimapAction = ToggleMinimapAction;\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMinimapAction, ToggleMinimapAction.ID, ToggleMinimapAction.LABEL), 'View: Toggle Minimap');\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarViewMenu, {\n    group: '5_editor',\n    command: {\n        id: ToggleMinimapAction.ID,\n        title: nls.localize({ key: 'miToggleMinimap', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Minimap\"),\n        toggled: contextkey_1.ContextKeyExpr.equals('config.editor.minimap.enabled', true)\n    },\n    order: 2\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAC9B,kDAAgD;AAChD,8DAAgG;AAChG,gFAA4G;AAC5G,uEAA0E;AAC1E,iEAAgE;AAChE,uDAAuG;AAEvG;IAAyC,+CAAM;IAI9C,6BACC,EAAU,EACV,KAAa,EAC2B,qBAA4C;QAHrF,YAKC,kBAAM,EAAE,EAAE,KAAK,CAAC,SAChB;QAHwC,2BAAqB,GAArB,qBAAqB,CAAuB;;IAGrF,CAAC;IAEM,iCAAG,GAAV;QACC,IAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAU,wBAAwB,CAAC,CAAC;QACzF,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,wBAAwB,EAAE,QAAQ,EAAE,mCAAmB,CAAC,IAAI,CAAC,CAAC;IAC7G,CAAC;IAdsB,sBAAE,GAAG,6BAA6B,CAAC;IACnC,yBAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;IAFzE,mBAAmB;QAO7B,mBAAA,qCAAqB,CAAA;OAPX,mBAAmB,CAgB/B;IAAD,0BAAC;CAAA,AAhBD,CAAyC,gBAAM,GAgB9C;AAhBY,kDAAmB;AAkBhC,IAAM,QAAQ,GAAG,mBAAQ,CAAC,EAAE,CAA2B,oBAAgB,CAAC,gBAAgB,CAAC,CAAC;AAC1F,QAAQ,CAAC,uBAAuB,CAAC,IAAI,8BAAoB,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,EAAE,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAE,sBAAsB,CAAC,CAAC;AAE3J,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;IACnD,KAAK,EAAE,UAAU;IACjB,OAAO,EAAE;QACR,EAAE,EAAE,mBAAmB,CAAC,EAAE;QAC1B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,kBAAkB,CAAC;QACvG,OAAO,EAAE,2BAAc,CAAC,MAAM,CAAC,+BAA+B,EAAE,IAAI,CAAC;KACrE;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\n\nexport class ToggleMinimapAction extends Action {\n\tpublic static readonly ID = 'editor.action.toggleMinimap';\n\tpublic static readonly LABEL = nls.localize('toggleMinimap', \"View: Toggle Minimap\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst newValue = !this._configurationService.getValue<boolean>('editor.minimap.enabled');\n\t\treturn this._configurationService.updateValue('editor.minimap.enabled', newValue, ConfigurationTarget.USER);\n\t}\n}\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMinimapAction, ToggleMinimapAction.ID, ToggleMinimapAction.LABEL), 'View: Toggle Minimap');\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '5_editor',\n\tcommand: {\n\t\tid: ToggleMinimapAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleMinimap', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Minimap\"),\n\t\ttoggled: ContextKeyExpr.equals('config.editor.minimap.enabled', true)\n\t},\n\torder: 2\n});\n"]}]}