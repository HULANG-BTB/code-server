{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionValidator.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionValidator.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar VERSION_REGEXP = /^(\\^|>=)?((\\d+)|x)\\.((\\d+)|x)\\.((\\d+)|x)(\\-.*)?$/;\nfunction isValidVersionStr(version) {\n    version = version.trim();\n    return (version === '*' || VERSION_REGEXP.test(version));\n}\nexports.isValidVersionStr = isValidVersionStr;\nfunction parseVersion(version) {\n    if (!isValidVersionStr(version)) {\n        return null;\n    }\n    version = version.trim();\n    if (version === '*') {\n        return {\n            hasCaret: false,\n            hasGreaterEquals: false,\n            majorBase: 0,\n            majorMustEqual: false,\n            minorBase: 0,\n            minorMustEqual: false,\n            patchBase: 0,\n            patchMustEqual: false,\n            preRelease: null\n        };\n    }\n    var m = version.match(VERSION_REGEXP);\n    if (!m) {\n        return null;\n    }\n    return {\n        hasCaret: m[1] === '^',\n        hasGreaterEquals: m[1] === '>=',\n        majorBase: m[2] === 'x' ? 0 : parseInt(m[2], 10),\n        majorMustEqual: (m[2] === 'x' ? false : true),\n        minorBase: m[4] === 'x' ? 0 : parseInt(m[4], 10),\n        minorMustEqual: (m[4] === 'x' ? false : true),\n        patchBase: m[6] === 'x' ? 0 : parseInt(m[6], 10),\n        patchMustEqual: (m[6] === 'x' ? false : true),\n        preRelease: m[8] || null\n    };\n}\nexports.parseVersion = parseVersion;\nfunction normalizeVersion(version) {\n    if (!version) {\n        return null;\n    }\n    var majorBase = version.majorBase, majorMustEqual = version.majorMustEqual, minorBase = version.minorBase, minorMustEqual = version.minorMustEqual, patchBase = version.patchBase, patchMustEqual = version.patchMustEqual;\n    if (version.hasCaret) {\n        if (majorBase === 0) {\n            patchMustEqual = false;\n        }\n        else {\n            minorMustEqual = false;\n            patchMustEqual = false;\n        }\n    }\n    return {\n        majorBase: majorBase,\n        majorMustEqual: majorMustEqual,\n        minorBase: minorBase,\n        minorMustEqual: minorMustEqual,\n        patchBase: patchBase,\n        patchMustEqual: patchMustEqual,\n        isMinimum: version.hasGreaterEquals\n    };\n}\nexports.normalizeVersion = normalizeVersion;\nfunction isValidVersion(_version, _desiredVersion) {\n    var version;\n    if (typeof _version === 'string') {\n        version = normalizeVersion(parseVersion(_version));\n    }\n    else {\n        version = _version;\n    }\n    var desiredVersion;\n    if (typeof _desiredVersion === 'string') {\n        desiredVersion = normalizeVersion(parseVersion(_desiredVersion));\n    }\n    else {\n        desiredVersion = _desiredVersion;\n    }\n    if (!version || !desiredVersion) {\n        return false;\n    }\n    var majorBase = version.majorBase;\n    var minorBase = version.minorBase;\n    var patchBase = version.patchBase;\n    var desiredMajorBase = desiredVersion.majorBase;\n    var desiredMinorBase = desiredVersion.minorBase;\n    var desiredPatchBase = desiredVersion.patchBase;\n    var majorMustEqual = desiredVersion.majorMustEqual;\n    var minorMustEqual = desiredVersion.minorMustEqual;\n    var patchMustEqual = desiredVersion.patchMustEqual;\n    if (desiredVersion.isMinimum) {\n        if (majorBase > desiredMajorBase) {\n            return true;\n        }\n        if (majorBase < desiredMajorBase) {\n            return false;\n        }\n        if (minorBase > desiredMinorBase) {\n            return true;\n        }\n        if (minorBase < desiredMinorBase) {\n            return false;\n        }\n        return patchBase >= desiredPatchBase;\n    }\n    // Anything < 1.0.0 is compatible with >= 1.0.0, except exact matches\n    if (majorBase === 1 && desiredMajorBase === 0 && (!majorMustEqual || !minorMustEqual || !patchMustEqual)) {\n        desiredMajorBase = 1;\n        desiredMinorBase = 0;\n        desiredPatchBase = 0;\n        majorMustEqual = true;\n        minorMustEqual = false;\n        patchMustEqual = false;\n    }\n    if (majorBase < desiredMajorBase) {\n        // smaller major version\n        return false;\n    }\n    if (majorBase > desiredMajorBase) {\n        // higher major version\n        return (!majorMustEqual);\n    }\n    // at this point, majorBase are equal\n    if (minorBase < desiredMinorBase) {\n        // smaller minor version\n        return false;\n    }\n    if (minorBase > desiredMinorBase) {\n        // higher minor version\n        return (!minorMustEqual);\n    }\n    // at this point, minorBase are equal\n    if (patchBase < desiredPatchBase) {\n        // smaller patch version\n        return false;\n    }\n    if (patchBase > desiredPatchBase) {\n        // higher patch version\n        return (!patchMustEqual);\n    }\n    // at this point, patchBase are equal\n    return true;\n}\nexports.isValidVersion = isValidVersion;\nfunction isValidExtensionVersion(version, extensionDesc, notices) {\n    if (extensionDesc.isBuiltin || typeof extensionDesc.main === 'undefined') {\n        // No version check for builtin or declarative extensions\n        return true;\n    }\n    return isVersionValid(version, extensionDesc.engines.vscode, notices);\n}\nexports.isValidExtensionVersion = isValidExtensionVersion;\nfunction isEngineValid(engine) {\n    // TODO@joao: discuss with alex '*' doesn't seem to be a valid engine version\n    return engine === '*' || isVersionValid(package_1.default.version, engine);\n}\nexports.isEngineValid = isEngineValid;\nfunction isVersionValid(currentVersion, requestedVersion, notices) {\n    if (notices === void 0) { notices = []; }\n    var desiredVersion = normalizeVersion(parseVersion(requestedVersion));\n    if (!desiredVersion) {\n        notices.push(nls.localize('versionSyntax', \"Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.\", requestedVersion));\n        return false;\n    }\n    // enforce that a breaking API version is specified.\n    // for 0.X.Y, that means up to 0.X must be specified\n    // otherwise for Z.X.Y, that means Z must be specified\n    if (desiredVersion.majorBase === 0) {\n        // force that major and minor must be specific\n        if (!desiredVersion.majorMustEqual || !desiredVersion.minorMustEqual) {\n            notices.push(nls.localize('versionSpecificity1', \"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.\", requestedVersion));\n            return false;\n        }\n    }\n    else {\n        // force that major must be specific\n        if (!desiredVersion.majorMustEqual) {\n            notices.push(nls.localize('versionSpecificity2', \"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.\", requestedVersion));\n            return false;\n        }\n    }\n    if (!isValidVersion(currentVersion, desiredVersion)) {\n        notices.push(nls.localize('versionMismatch', \"Extension is not compatible with Code {0}. Extension requires: {1}.\", currentVersion, requestedVersion));\n        return false;\n    }\n    return true;\n}\nexports.isVersionValid = isVersionValid;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionValidator.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/extensions/node/extensionValidator.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport pkg from 'vs/platform/product/node/package';\n\nexport interface IParsedVersion {\n\thasCaret: boolean;\n\thasGreaterEquals: boolean;\n\tmajorBase: number;\n\tmajorMustEqual: boolean;\n\tminorBase: number;\n\tminorMustEqual: boolean;\n\tpatchBase: number;\n\tpatchMustEqual: boolean;\n\tpreRelease: string | null;\n}\n\nexport interface INormalizedVersion {\n\tmajorBase: number;\n\tmajorMustEqual: boolean;\n\tminorBase: number;\n\tminorMustEqual: boolean;\n\tpatchBase: number;\n\tpatchMustEqual: boolean;\n\tisMinimum: boolean;\n}\n\nconst VERSION_REGEXP = /^(\\^|>=)?((\\d+)|x)\\.((\\d+)|x)\\.((\\d+)|x)(\\-.*)?$/;\n\nexport function isValidVersionStr(version: string): boolean {\n\tversion = version.trim();\n\treturn (version === '*' || VERSION_REGEXP.test(version));\n}\n\nexport function parseVersion(version: string): IParsedVersion | null {\n\tif (!isValidVersionStr(version)) {\n\t\treturn null;\n\t}\n\n\tversion = version.trim();\n\n\tif (version === '*') {\n\t\treturn {\n\t\t\thasCaret: false,\n\t\t\thasGreaterEquals: false,\n\t\t\tmajorBase: 0,\n\t\t\tmajorMustEqual: false,\n\t\t\tminorBase: 0,\n\t\t\tminorMustEqual: false,\n\t\t\tpatchBase: 0,\n\t\t\tpatchMustEqual: false,\n\t\t\tpreRelease: null\n\t\t};\n\t}\n\n\tlet m = version.match(VERSION_REGEXP);\n\tif (!m) {\n\t\treturn null;\n\t}\n\treturn {\n\t\thasCaret: m[1] === '^',\n\t\thasGreaterEquals: m[1] === '>=',\n\t\tmajorBase: m[2] === 'x' ? 0 : parseInt(m[2], 10),\n\t\tmajorMustEqual: (m[2] === 'x' ? false : true),\n\t\tminorBase: m[4] === 'x' ? 0 : parseInt(m[4], 10),\n\t\tminorMustEqual: (m[4] === 'x' ? false : true),\n\t\tpatchBase: m[6] === 'x' ? 0 : parseInt(m[6], 10),\n\t\tpatchMustEqual: (m[6] === 'x' ? false : true),\n\t\tpreRelease: m[8] || null\n\t};\n}\n\nexport function normalizeVersion(version: IParsedVersion | null): INormalizedVersion | null {\n\tif (!version) {\n\t\treturn null;\n\t}\n\n\tlet majorBase = version.majorBase,\n\t\tmajorMustEqual = version.majorMustEqual,\n\t\tminorBase = version.minorBase,\n\t\tminorMustEqual = version.minorMustEqual,\n\t\tpatchBase = version.patchBase,\n\t\tpatchMustEqual = version.patchMustEqual;\n\n\tif (version.hasCaret) {\n\t\tif (majorBase === 0) {\n\t\t\tpatchMustEqual = false;\n\t\t} else {\n\t\t\tminorMustEqual = false;\n\t\t\tpatchMustEqual = false;\n\t\t}\n\t}\n\n\treturn {\n\t\tmajorBase: majorBase,\n\t\tmajorMustEqual: majorMustEqual,\n\t\tminorBase: minorBase,\n\t\tminorMustEqual: minorMustEqual,\n\t\tpatchBase: patchBase,\n\t\tpatchMustEqual: patchMustEqual,\n\t\tisMinimum: version.hasGreaterEquals\n\t};\n}\n\nexport function isValidVersion(_version: string | INormalizedVersion, _desiredVersion: string | INormalizedVersion): boolean {\n\tlet version: INormalizedVersion | null;\n\tif (typeof _version === 'string') {\n\t\tversion = normalizeVersion(parseVersion(_version));\n\t} else {\n\t\tversion = _version;\n\t}\n\n\tlet desiredVersion: INormalizedVersion | null;\n\tif (typeof _desiredVersion === 'string') {\n\t\tdesiredVersion = normalizeVersion(parseVersion(_desiredVersion));\n\t} else {\n\t\tdesiredVersion = _desiredVersion;\n\t}\n\n\tif (!version || !desiredVersion) {\n\t\treturn false;\n\t}\n\n\tlet majorBase = version.majorBase;\n\tlet minorBase = version.minorBase;\n\tlet patchBase = version.patchBase;\n\n\tlet desiredMajorBase = desiredVersion.majorBase;\n\tlet desiredMinorBase = desiredVersion.minorBase;\n\tlet desiredPatchBase = desiredVersion.patchBase;\n\n\tlet majorMustEqual = desiredVersion.majorMustEqual;\n\tlet minorMustEqual = desiredVersion.minorMustEqual;\n\tlet patchMustEqual = desiredVersion.patchMustEqual;\n\n\tif (desiredVersion.isMinimum) {\n\t\tif (majorBase > desiredMajorBase) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (majorBase < desiredMajorBase) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (minorBase > desiredMinorBase) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (minorBase < desiredMinorBase) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn patchBase >= desiredPatchBase;\n\t}\n\n\t// Anything < 1.0.0 is compatible with >= 1.0.0, except exact matches\n\tif (majorBase === 1 && desiredMajorBase === 0 && (!majorMustEqual || !minorMustEqual || !patchMustEqual)) {\n\t\tdesiredMajorBase = 1;\n\t\tdesiredMinorBase = 0;\n\t\tdesiredPatchBase = 0;\n\t\tmajorMustEqual = true;\n\t\tminorMustEqual = false;\n\t\tpatchMustEqual = false;\n\t}\n\n\tif (majorBase < desiredMajorBase) {\n\t\t// smaller major version\n\t\treturn false;\n\t}\n\n\tif (majorBase > desiredMajorBase) {\n\t\t// higher major version\n\t\treturn (!majorMustEqual);\n\t}\n\n\t// at this point, majorBase are equal\n\n\tif (minorBase < desiredMinorBase) {\n\t\t// smaller minor version\n\t\treturn false;\n\t}\n\n\tif (minorBase > desiredMinorBase) {\n\t\t// higher minor version\n\t\treturn (!minorMustEqual);\n\t}\n\n\t// at this point, minorBase are equal\n\n\tif (patchBase < desiredPatchBase) {\n\t\t// smaller patch version\n\t\treturn false;\n\t}\n\n\tif (patchBase > desiredPatchBase) {\n\t\t// higher patch version\n\t\treturn (!patchMustEqual);\n\t}\n\n\t// at this point, patchBase are equal\n\treturn true;\n}\n\nexport interface IReducedExtensionDescription {\n\tisBuiltin: boolean;\n\tengines: {\n\t\tvscode: string;\n\t};\n\tmain?: string;\n}\n\nexport function isValidExtensionVersion(version: string, extensionDesc: IReducedExtensionDescription, notices: string[]): boolean {\n\n\tif (extensionDesc.isBuiltin || typeof extensionDesc.main === 'undefined') {\n\t\t// No version check for builtin or declarative extensions\n\t\treturn true;\n\t}\n\n\treturn isVersionValid(version, extensionDesc.engines.vscode, notices);\n}\n\nexport function isEngineValid(engine: string): boolean {\n\t// TODO@joao: discuss with alex '*' doesn't seem to be a valid engine version\n\treturn engine === '*' || isVersionValid(pkg.version, engine);\n}\n\nexport function isVersionValid(currentVersion: string, requestedVersion: string, notices: string[] = []): boolean {\n\n\tlet desiredVersion = normalizeVersion(parseVersion(requestedVersion));\n\tif (!desiredVersion) {\n\t\tnotices.push(nls.localize('versionSyntax', \"Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.\", requestedVersion));\n\t\treturn false;\n\t}\n\n\t// enforce that a breaking API version is specified.\n\t// for 0.X.Y, that means up to 0.X must be specified\n\t// otherwise for Z.X.Y, that means Z must be specified\n\tif (desiredVersion.majorBase === 0) {\n\t\t// force that major and minor must be specific\n\t\tif (!desiredVersion.majorMustEqual || !desiredVersion.minorMustEqual) {\n\t\t\tnotices.push(nls.localize('versionSpecificity1', \"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.\", requestedVersion));\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// force that major must be specific\n\t\tif (!desiredVersion.majorMustEqual) {\n\t\t\tnotices.push(nls.localize('versionSpecificity2', \"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.\", requestedVersion));\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!isValidVersion(currentVersion, desiredVersion)) {\n\t\tnotices.push(nls.localize('versionMismatch', \"Extension is not compatible with Code {0}. Extension requires: {1}.\", currentVersion, requestedVersion));\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}]}