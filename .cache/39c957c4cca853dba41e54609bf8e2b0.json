{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-main/ipc.electron-main.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/electron-main/ipc.electron-main.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/parts/ipc/common/ipc\", \"vs/base/parts/ipc/node/ipc.electron\", \"electron\", \"vs/base/common/lifecycle\", \"vs/base/common/buffer\"], function (require, exports, event_1, ipc_1, ipc_electron_1, electron_1, lifecycle_1, buffer_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function createScopedOnMessageEvent(senderId, eventName) {\n        const onMessage = event_1.Event.fromNodeEventEmitter(electron_1.ipcMain, eventName, (event, message) => ({ event, message }));\n        const onMessageFromSender = event_1.Event.filter(onMessage, ({ event }) => event.sender.id === senderId);\n        return event_1.Event.map(onMessageFromSender, ({ message }) => message ? buffer_1.VSBuffer.wrap(message) : message);\n    }\n    class Server extends ipc_1.IPCServer {\n        constructor() {\n            super(Server.getOnDidClientConnect());\n        }\n        static getOnDidClientConnect() {\n            const onHello = event_1.Event.fromNodeEventEmitter(electron_1.ipcMain, 'ipc:hello', ({ sender }) => sender);\n            return event_1.Event.map(onHello, webContents => {\n                const id = webContents.id;\n                const client = Server.Clients.get(id);\n                if (client) {\n                    client.dispose();\n                }\n                const onDidClientReconnect = new event_1.Emitter();\n                Server.Clients.set(id, lifecycle_1.toDisposable(() => onDidClientReconnect.fire()));\n                const onMessage = createScopedOnMessageEvent(id, 'ipc:message');\n                const onDidClientDisconnect = event_1.Event.any(event_1.Event.signal(createScopedOnMessageEvent(id, 'ipc:disconnect')), onDidClientReconnect.event);\n                const protocol = new ipc_electron_1.Protocol(webContents, onMessage);\n                return { protocol, onDidClientDisconnect };\n            });\n        }\n    }\n    Server.Clients = new Map();\n    exports.Server = Server;\n});\n",null]}