{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveCommands.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types = require(\"vs/base/common/types\");\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar cursorMoveOperations_1 = require(\"vs/editor/common/controller/cursorMoveOperations\");\nvar cursorWordOperations_1 = require(\"vs/editor/common/controller/cursorWordOperations\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar CursorMoveCommands = /** @class */ (function () {\n    function CursorMoveCommands() {\n    }\n    CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\n        var result = [], resultLen = 0;\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[resultLen++] = new cursorCommon_1.CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.translateDown(context.config, context.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    };\n    CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\n        var result = [], resultLen = 0;\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[resultLen++] = new cursorCommon_1.CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.translateUp(context.config, context.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    };\n    CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\n        var currentViewStateColumn = cursor.viewState.position.column;\n        var currentModelStateColumn = cursor.modelState.position.column;\n        var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n        var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n        var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n        var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n            return this._moveToLineStartByView(context, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineStartByModel(context, cursor, inSelectionMode);\n        }\n    };\n    CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\n        return cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n    };\n    CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\n        return cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n    };\n    CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\n        var viewStatePosition = cursor.viewState.position;\n        var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n        var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n        var modelStatePosition = cursor.modelState.position;\n        var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\n        var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\n            return this._moveToLineEndByModel(context, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineEndByView(context, cursor, inSelectionMode);\n        }\n    };\n    CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\n        return cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n    };\n    CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\n        return cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n    };\n    CursorMoveCommands.expandLineSelection = function (context, cursors) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewSelection = cursor.viewState.selection;\n            var startLineNumber = viewSelection.startLineNumber;\n            var lineCount = context.viewModel.getLineCount();\n            var endLineNumber = viewSelection.endLineNumber;\n            var endColumn = void 0;\n            if (endLineNumber === lineCount) {\n                endColumn = context.viewModel.getLineMaxColumn(lineCount);\n            }\n            else {\n                endLineNumber++;\n                endColumn = 1;\n            }\n            result[i] = cursorCommon_1.CursorState.fromViewState(new cursorCommon_1.SingleCursorState(new range_1.Range(startLineNumber, 1, startLineNumber, 1), 0, new position_1.Position(endLineNumber, endColumn), 0));\n        }\n        return result;\n    };\n    CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    };\n    CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    };\n    CursorMoveCommands.selectAll = function (context, cursor) {\n        var lineCount = context.model.getLineCount();\n        var maxColumn = context.model.getLineMaxColumn(lineCount);\n        return cursorCommon_1.CursorState.fromModelState(new cursorCommon_1.SingleCursorState(new range_1.Range(1, 1, 1, 1), 0, new position_1.Position(lineCount, maxColumn), 0));\n    };\n    CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n        var position = context.model.validatePosition(_position);\n        var viewPosition = (_viewPosition\n            ? context.validateViewPosition(new position_1.Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : context.convertModelPositionToViewPosition(position));\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n            // Entering line selection for the first time\n            var lineCount = context.model.getLineCount();\n            var selectToLineNumber = position.lineNumber + 1;\n            var selectToColumn = 1;\n            if (selectToLineNumber > lineCount) {\n                selectToLineNumber = lineCount;\n                selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\n            }\n            return cursorCommon_1.CursorState.fromModelState(new cursorCommon_1.SingleCursorState(new range_1.Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new position_1.Position(selectToLineNumber, selectToColumn), 0));\n        }\n        // Continuing line selection\n        var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n        if (position.lineNumber < enteringLineNumber) {\n            return cursorCommon_1.CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n        }\n        else if (position.lineNumber > enteringLineNumber) {\n            var lineCount = context.viewModel.getLineCount();\n            var selectToViewLineNumber = viewPosition.lineNumber + 1;\n            var selectToViewColumn = 1;\n            if (selectToViewLineNumber > lineCount) {\n                selectToViewLineNumber = lineCount;\n                selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\n            }\n            return cursorCommon_1.CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n        }\n        else {\n            var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n            return cursorCommon_1.CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n        }\n    };\n    CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\n        var position = context.model.validatePosition(_position);\n        return cursorCommon_1.CursorState.fromModelState(cursorWordOperations_1.WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\n    };\n    CursorMoveCommands.cancelSelection = function (context, cursor) {\n        if (!cursor.modelState.hasSelection()) {\n            return new cursorCommon_1.CursorState(cursor.modelState, cursor.viewState);\n        }\n        var lineNumber = cursor.viewState.position.lineNumber;\n        var column = cursor.viewState.position.column;\n        return cursorCommon_1.CursorState.fromViewState(new cursorCommon_1.SingleCursorState(new range_1.Range(lineNumber, column, lineNumber, column), 0, new position_1.Position(lineNumber, column), 0));\n    };\n    CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n        var position = context.model.validatePosition(_position);\n        var viewPosition = (_viewPosition\n            ? context.validateViewPosition(new position_1.Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : context.convertModelPositionToViewPosition(position));\n        return cursorCommon_1.CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    };\n    CursorMoveCommands.move = function (context, cursors, args) {\n        var inSelectionMode = args.select;\n        var value = args.value;\n        switch (args.direction) {\n            case CursorMove.Direction.Left: {\n                if (args.unit === CursorMove.Unit.HalfLine) {\n                    // Move left by half the current line length\n                    return this._moveHalfLineLeft(context, cursors, inSelectionMode);\n                }\n                else {\n                    // Move left by `moveParams.value` columns\n                    return this._moveLeft(context, cursors, inSelectionMode, value);\n                }\n            }\n            case CursorMove.Direction.Right: {\n                if (args.unit === CursorMove.Unit.HalfLine) {\n                    // Move right by half the current line length\n                    return this._moveHalfLineRight(context, cursors, inSelectionMode);\n                }\n                else {\n                    // Move right by `moveParams.value` columns\n                    return this._moveRight(context, cursors, inSelectionMode, value);\n                }\n            }\n            case CursorMove.Direction.Up: {\n                if (args.unit === CursorMove.Unit.WrappedLine) {\n                    // Move up by view lines\n                    return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move up by model lines\n                    return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\n                }\n            }\n            case CursorMove.Direction.Down: {\n                if (args.unit === CursorMove.Unit.WrappedLine) {\n                    // Move down by view lines\n                    return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move down by model lines\n                    return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\n                }\n            }\n            case CursorMove.Direction.WrappedLineStart: {\n                // Move to the beginning of the current view line\n                return this._moveToViewMinColumn(context, cursors, inSelectionMode);\n            }\n            case CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter: {\n                // Move to the first non-whitespace column of the current view line\n                return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\n            }\n            case CursorMove.Direction.WrappedLineColumnCenter: {\n                // Move to the \"center\" of the current view line\n                return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\n            }\n            case CursorMove.Direction.WrappedLineEnd: {\n                // Move to the end of the current view line\n                return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\n            }\n            case CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter: {\n                // Move to the last non-whitespace column of the current view line\n                return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\n            }\n            case CursorMove.Direction.ViewPortTop: {\n                // Move to the nth line start in the viewport (from the top)\n                var cursor = cursors[0];\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\n                var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case CursorMove.Direction.ViewPortBottom: {\n                // Move to the nth line start in the viewport (from the bottom)\n                var cursor = cursors[0];\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\n                var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case CursorMove.Direction.ViewPortCenter: {\n                // Move to the line start in the viewport center\n                var cursor = cursors[0];\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\n                var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case CursorMove.Direction.ViewPortIfOutside: {\n                // Move to a position inside the viewport\n                var visibleViewRange = context.getCompletelyVisibleViewRange();\n                var result = [];\n                for (var i = 0, len = cursors.length; i < len; i++) {\n                    var cursor = cursors[i];\n                    result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\n                }\n                return result;\n            }\n        }\n        return null;\n    };\n    CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n            // Nothing to do, cursor is in viewport\n            return new cursorCommon_1.CursorState(cursor.modelState, cursor.viewState);\n        }\n        else {\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n                viewLineNumber = visibleViewRange.endLineNumber - 1;\n            }\n            if (viewLineNumber < visibleViewRange.startLineNumber) {\n                viewLineNumber = visibleViewRange.startLineNumber;\n            }\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n    };\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n    CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\n        var startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    };\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n    CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\n        var startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    };\n    CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var newViewState = cursorMoveOperations_1.MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n                // moved over to the previous view line\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n                    newViewState = cursorMoveOperations_1.MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n                }\n            }\n            result[i] = cursorCommon_1.CursorState.fromViewState(newViewState);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var newViewState = cursorMoveOperations_1.MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n                // moved over to the next view line\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n                    newViewState = cursorMoveOperations_1.MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n                }\n            }\n            result[i] = cursorCommon_1.CursorState.fromViewState(newViewState);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n            result[i] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromViewState(cursorMoveOperations_1.MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = cursorCommon_1.CursorState.fromModelState(cursorMoveOperations_1.MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n        return cursorCommon_1.CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    };\n    CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n        return cursorCommon_1.CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    };\n    CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    };\n    CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            var viewLineNumber = cursor.viewState.position.lineNumber;\n            var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    };\n    return CursorMoveCommands;\n}());\nexports.CursorMoveCommands = CursorMoveCommands;\nvar CursorMove;\n(function (CursorMove) {\n    var isCursorMoveArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        var cursorMoveArg = arg;\n        if (!types.isString(cursorMoveArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n            return false;\n        }\n        return true;\n    };\n    CursorMove.description = {\n        description: 'Move cursor to a logical position in the view',\n        args: [\n            {\n                name: 'Cursor move argument object',\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n                constraint: isCursorMoveArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'select': {\n                            'type': 'boolean',\n                            'default': false\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Positions in the view for cursor move command.\n     */\n    CursorMove.RawDirection = {\n        Left: 'left',\n        Right: 'right',\n        Up: 'up',\n        Down: 'down',\n        WrappedLineStart: 'wrappedLineStart',\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n        WrappedLineEnd: 'wrappedLineEnd',\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n        ViewPortTop: 'viewPortTop',\n        ViewPortCenter: 'viewPortCenter',\n        ViewPortBottom: 'viewPortBottom',\n        ViewPortIfOutside: 'viewPortIfOutside'\n    };\n    /**\n     * Units for Cursor move 'by' argument\n     */\n    CursorMove.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Character: 'character',\n        HalfLine: 'halfLine'\n    };\n    function parse(args) {\n        if (!args.to) {\n            // illegal arguments\n            return null;\n        }\n        var direction;\n        switch (args.to) {\n            case CursorMove.RawDirection.Left:\n                direction = Direction.Left;\n                break;\n            case CursorMove.RawDirection.Right:\n                direction = Direction.Right;\n                break;\n            case CursorMove.RawDirection.Up:\n                direction = Direction.Up;\n                break;\n            case CursorMove.RawDirection.Down:\n                direction = Direction.Down;\n                break;\n            case CursorMove.RawDirection.WrappedLineStart:\n                direction = Direction.WrappedLineStart;\n                break;\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n                direction = Direction.WrappedLineFirstNonWhitespaceCharacter;\n                break;\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\n                direction = Direction.WrappedLineColumnCenter;\n                break;\n            case CursorMove.RawDirection.WrappedLineEnd:\n                direction = Direction.WrappedLineEnd;\n                break;\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n                direction = Direction.WrappedLineLastNonWhitespaceCharacter;\n                break;\n            case CursorMove.RawDirection.ViewPortTop:\n                direction = Direction.ViewPortTop;\n                break;\n            case CursorMove.RawDirection.ViewPortBottom:\n                direction = Direction.ViewPortBottom;\n                break;\n            case CursorMove.RawDirection.ViewPortCenter:\n                direction = Direction.ViewPortCenter;\n                break;\n            case CursorMove.RawDirection.ViewPortIfOutside:\n                direction = Direction.ViewPortIfOutside;\n                break;\n            default:\n                // illegal arguments\n                return null;\n        }\n        var unit = Unit.None;\n        switch (args.by) {\n            case CursorMove.RawUnit.Line:\n                unit = Unit.Line;\n                break;\n            case CursorMove.RawUnit.WrappedLine:\n                unit = Unit.WrappedLine;\n                break;\n            case CursorMove.RawUnit.Character:\n                unit = Unit.Character;\n                break;\n            case CursorMove.RawUnit.HalfLine:\n                unit = Unit.HalfLine;\n                break;\n        }\n        return {\n            direction: direction,\n            unit: unit,\n            select: (!!args.select),\n            value: (args.value || 1)\n        };\n    }\n    CursorMove.parse = parse;\n    var Direction;\n    (function (Direction) {\n        Direction[Direction[\"Left\"] = 0] = \"Left\";\n        Direction[Direction[\"Right\"] = 1] = \"Right\";\n        Direction[Direction[\"Up\"] = 2] = \"Up\";\n        Direction[Direction[\"Down\"] = 3] = \"Down\";\n        Direction[Direction[\"WrappedLineStart\"] = 4] = \"WrappedLineStart\";\n        Direction[Direction[\"WrappedLineFirstNonWhitespaceCharacter\"] = 5] = \"WrappedLineFirstNonWhitespaceCharacter\";\n        Direction[Direction[\"WrappedLineColumnCenter\"] = 6] = \"WrappedLineColumnCenter\";\n        Direction[Direction[\"WrappedLineEnd\"] = 7] = \"WrappedLineEnd\";\n        Direction[Direction[\"WrappedLineLastNonWhitespaceCharacter\"] = 8] = \"WrappedLineLastNonWhitespaceCharacter\";\n        Direction[Direction[\"ViewPortTop\"] = 9] = \"ViewPortTop\";\n        Direction[Direction[\"ViewPortCenter\"] = 10] = \"ViewPortCenter\";\n        Direction[Direction[\"ViewPortBottom\"] = 11] = \"ViewPortBottom\";\n        Direction[Direction[\"ViewPortIfOutside\"] = 12] = \"ViewPortIfOutside\";\n    })(Direction = CursorMove.Direction || (CursorMove.Direction = {}));\n    var Unit;\n    (function (Unit) {\n        Unit[Unit[\"None\"] = 0] = \"None\";\n        Unit[Unit[\"Line\"] = 1] = \"Line\";\n        Unit[Unit[\"WrappedLine\"] = 2] = \"WrappedLine\";\n        Unit[Unit[\"Character\"] = 3] = \"Character\";\n        Unit[Unit[\"HalfLine\"] = 4] = \"HalfLine\";\n    })(Unit = CursorMove.Unit || (CursorMove.Unit = {}));\n})(CursorMove = exports.CursorMove || (exports.CursorMove = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorMoveCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as types from 'vs/base/common/types';\nimport { CursorContext, CursorState, ICursorSimpleModel, PartialCursorState, SingleCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { MoveOperations } from 'vs/editor/common/controller/cursorMoveOperations';\nimport { WordOperations } from 'vs/editor/common/controller/cursorWordOperations';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\n\nexport class CursorMoveCommands {\n\n\tpublic static addCursorDown(context: CursorContext, cursors: CursorState[], useLogicalLine: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [], resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static addCursorUp(context: CursorContext, cursors: CursorState[], useLogicalLine: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [], resultLen = 0;\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\t\t\tif (useLogicalLine) {\n\t\t\t\tresult[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\n\t\t\t} else {\n\t\t\t\tresult[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfLine(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineStart(context, cursor, inSelectionMode);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineStart(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\tconst currentViewStateColumn = cursor.viewState.position.column;\n\t\tconst currentModelStateColumn = cursor.modelState.position.column;\n\t\tconst isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n\n\t\tconst currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n\t\tconst firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n\t\tconst isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n\t\tif (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n\t\t\treturn this._moveToLineStartByView(context, cursor, inSelectionMode);\n\t\t} else {\n\t\t\treturn this._moveToLineStartByModel(context, cursor, inSelectionMode);\n\t\t}\n\t}\n\n\tprivate static _moveToLineStartByView(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode)\n\t\t);\n\t}\n\n\tprivate static _moveToLineStartByModel(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode)\n\t\t);\n\t}\n\n\tpublic static moveToEndOfLine(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _moveToLineEnd(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\tconst viewStatePosition = cursor.viewState.position;\n\t\tconst viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n\t\tconst isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n\n\t\tconst modelStatePosition = cursor.modelState.position;\n\t\tconst modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\n\t\tconst isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n\t\tif (isEndOfViewLine || isEndLineOfWrappedLine) {\n\t\t\treturn this._moveToLineEndByModel(context, cursor, inSelectionMode);\n\t\t} else {\n\t\t\treturn this._moveToLineEndByView(context, cursor, inSelectionMode);\n\t\t}\n\t}\n\n\tprivate static _moveToLineEndByView(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromViewState(\n\t\t\tMoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode)\n\t\t);\n\t}\n\n\tprivate static _moveToLineEndByModel(context: CursorContext, cursor: CursorState, inSelectionMode: boolean): PartialCursorState {\n\t\treturn CursorState.fromModelState(\n\t\t\tMoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode)\n\t\t);\n\t}\n\n\tpublic static expandLineSelection(context: CursorContext, cursors: CursorState[]): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\n\t\t\tconst viewSelection = cursor.viewState.selection;\n\t\t\tconst startLineNumber = viewSelection.startLineNumber;\n\t\t\tconst lineCount = context.viewModel.getLineCount();\n\n\t\t\tlet endLineNumber = viewSelection.endLineNumber;\n\t\t\tlet endColumn: number;\n\t\t\tif (endLineNumber === lineCount) {\n\t\t\t\tendColumn = context.viewModel.getLineMaxColumn(lineCount);\n\t\t\t} else {\n\t\t\t\tendLineNumber++;\n\t\t\t\tendColumn = 1;\n\t\t\t}\n\n\t\t\tresult[i] = CursorState.fromViewState(new SingleCursorState(\n\t\t\t\tnew Range(startLineNumber, 1, startLineNumber, 1), 0,\n\t\t\t\tnew Position(endLineNumber, endColumn), 0\n\t\t\t));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToBeginningOfBuffer(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static moveToEndOfBuffer(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static selectAll(context: CursorContext, cursor: CursorState): PartialCursorState {\n\t\tconst lineCount = context.model.getLineCount();\n\t\tconst maxColumn = context.model.getLineMaxColumn(lineCount);\n\n\t\treturn CursorState.fromModelState(new SingleCursorState(\n\t\t\tnew Range(1, 1, 1, 1), 0,\n\t\t\tnew Position(lineCount, maxColumn), 0\n\t\t));\n\t}\n\n\tpublic static line(context: CursorContext, cursor: CursorState, inSelectionMode: boolean, _position: IPosition, _viewPosition: IPosition): PartialCursorState {\n\t\tconst position = context.model.validatePosition(_position);\n\t\tconst viewPosition = (\n\t\t\t_viewPosition\n\t\t\t\t? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n\t\t\t\t: context.convertModelPositionToViewPosition(position)\n\t\t);\n\n\t\tif (!inSelectionMode || !cursor.modelState.hasSelection()) {\n\t\t\t// Entering line selection for the first time\n\t\t\tconst lineCount = context.model.getLineCount();\n\n\t\t\tlet selectToLineNumber = position.lineNumber + 1;\n\t\t\tlet selectToColumn = 1;\n\t\t\tif (selectToLineNumber > lineCount) {\n\t\t\t\tselectToLineNumber = lineCount;\n\t\t\t\tselectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\n\t\t\t}\n\n\t\t\treturn CursorState.fromModelState(new SingleCursorState(\n\t\t\t\tnew Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0,\n\t\t\t\tnew Position(selectToLineNumber, selectToColumn), 0\n\t\t\t));\n\t\t}\n\n\t\t// Continuing line selection\n\t\tconst enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n\t\tif (position.lineNumber < enteringLineNumber) {\n\n\t\t\treturn CursorState.fromViewState(cursor.viewState.move(\n\t\t\t\tcursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0\n\t\t\t));\n\n\t\t} else if (position.lineNumber > enteringLineNumber) {\n\n\t\t\tconst lineCount = context.viewModel.getLineCount();\n\n\t\t\tlet selectToViewLineNumber = viewPosition.lineNumber + 1;\n\t\t\tlet selectToViewColumn = 1;\n\t\t\tif (selectToViewLineNumber > lineCount) {\n\t\t\t\tselectToViewLineNumber = lineCount;\n\t\t\t\tselectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\n\t\t\t}\n\n\t\t\treturn CursorState.fromViewState(cursor.viewState.move(\n\t\t\t\tcursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0\n\t\t\t));\n\n\t\t} else {\n\n\t\t\tconst endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n\t\t\treturn CursorState.fromModelState(cursor.modelState.move(\n\t\t\t\tcursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0\n\t\t\t));\n\n\t\t}\n\t}\n\n\tpublic static word(context: CursorContext, cursor: CursorState, inSelectionMode: boolean, _position: IPosition): PartialCursorState {\n\t\tconst position = context.model.validatePosition(_position);\n\t\treturn CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\n\t}\n\n\tpublic static cancelSelection(context: CursorContext, cursor: CursorState): PartialCursorState {\n\t\tif (!cursor.modelState.hasSelection()) {\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\t\t}\n\n\t\tconst lineNumber = cursor.viewState.position.lineNumber;\n\t\tconst column = cursor.viewState.position.column;\n\n\t\treturn CursorState.fromViewState(new SingleCursorState(\n\t\t\tnew Range(lineNumber, column, lineNumber, column), 0,\n\t\t\tnew Position(lineNumber, column), 0\n\t\t));\n\t}\n\n\tpublic static moveTo(context: CursorContext, cursor: CursorState, inSelectionMode: boolean, _position: IPosition, _viewPosition: IPosition): PartialCursorState {\n\t\tconst position = context.model.validatePosition(_position);\n\t\tconst viewPosition = (\n\t\t\t_viewPosition\n\t\t\t\t? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n\t\t\t\t: context.convertModelPositionToViewPosition(position)\n\t\t);\n\t\treturn CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n\t}\n\n\tpublic static move(context: CursorContext, cursors: CursorState[], args: CursorMove.ParsedArguments): PartialCursorState[] | null {\n\t\tconst inSelectionMode = args.select;\n\t\tconst value = args.value;\n\n\t\tswitch (args.direction) {\n\t\t\tcase CursorMove.Direction.Left: {\n\t\t\t\tif (args.unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move left by half the current line length\n\t\t\t\t\treturn this._moveHalfLineLeft(context, cursors, inSelectionMode);\n\t\t\t\t} else {\n\t\t\t\t\t// Move left by `moveParams.value` columns\n\t\t\t\t\treturn this._moveLeft(context, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Right: {\n\t\t\t\tif (args.unit === CursorMove.Unit.HalfLine) {\n\t\t\t\t\t// Move right by half the current line length\n\t\t\t\t\treturn this._moveHalfLineRight(context, cursors, inSelectionMode);\n\t\t\t\t} else {\n\t\t\t\t\t// Move right by `moveParams.value` columns\n\t\t\t\t\treturn this._moveRight(context, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Up: {\n\t\t\t\tif (args.unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move up by view lines\n\t\t\t\t\treturn this._moveUpByViewLines(context, cursors, inSelectionMode, value);\n\t\t\t\t} else {\n\t\t\t\t\t// Move up by model lines\n\t\t\t\t\treturn this._moveUpByModelLines(context, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.Down: {\n\t\t\t\tif (args.unit === CursorMove.Unit.WrappedLine) {\n\t\t\t\t\t// Move down by view lines\n\t\t\t\t\treturn this._moveDownByViewLines(context, cursors, inSelectionMode, value);\n\t\t\t\t} else {\n\t\t\t\t\t// Move down by model lines\n\t\t\t\t\treturn this._moveDownByModelLines(context, cursors, inSelectionMode, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineStart: {\n\t\t\t\t// Move to the beginning of the current view line\n\t\t\t\treturn this._moveToViewMinColumn(context, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter: {\n\t\t\t\t// Move to the first non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineColumnCenter: {\n\t\t\t\t// Move to the \"center\" of the current view line\n\t\t\t\treturn this._moveToViewCenterColumn(context, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineEnd: {\n\t\t\t\t// Move to the end of the current view line\n\t\t\t\treturn this._moveToViewMaxColumn(context, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter: {\n\t\t\t\t// Move to the last non-whitespace column of the current view line\n\t\t\t\treturn this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortTop: {\n\t\t\t\t// Move to the nth line start in the viewport (from the top)\n\t\t\t\tconst cursor = cursors[0];\n\t\t\t\tconst visibleModelRange = context.getCompletelyVisibleModelRange();\n\t\t\t\tconst modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\n\t\t\t\tconst modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortBottom: {\n\t\t\t\t// Move to the nth line start in the viewport (from the bottom)\n\t\t\t\tconst cursor = cursors[0];\n\t\t\t\tconst visibleModelRange = context.getCompletelyVisibleModelRange();\n\t\t\t\tconst modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\n\t\t\t\tconst modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortCenter: {\n\t\t\t\t// Move to the line start in the viewport center\n\t\t\t\tconst cursor = cursors[0];\n\t\t\t\tconst visibleModelRange = context.getCompletelyVisibleModelRange();\n\t\t\t\tconst modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n\t\t\t\tconst modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n\t\t\t\treturn [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n\t\t\t}\n\t\t\tcase CursorMove.Direction.ViewPortIfOutside: {\n\t\t\t\t// Move to a position inside the viewport\n\t\t\t\tconst visibleViewRange = context.getCompletelyVisibleViewRange();\n\t\t\t\tlet result: PartialCursorState[] = [];\n\t\t\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\t\t\tconst cursor = cursors[i];\n\t\t\t\t\tresult[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tpublic static findPositionInViewportIfOutside(context: CursorContext, cursor: CursorState, visibleViewRange: Range, inSelectionMode: boolean): PartialCursorState {\n\t\tlet viewLineNumber = cursor.viewState.position.lineNumber;\n\n\t\tif (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n\t\t\t// Nothing to do, cursor is in viewport\n\t\t\treturn new CursorState(cursor.modelState, cursor.viewState);\n\n\t\t} else {\n\t\t\tif (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n\t\t\t\tviewLineNumber = visibleViewRange.endLineNumber - 1;\n\t\t\t}\n\t\t\tif (viewLineNumber < visibleViewRange.startLineNumber) {\n\t\t\t\tviewLineNumber = visibleViewRange.startLineNumber;\n\t\t\t}\n\t\t\tconst viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n\t\t\treturn this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the start).\n\t */\n\tprivate static _firstLineNumberInRange(model: ICursorSimpleModel, range: Range, count: number): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.min(range.endLineNumber, startLineNumber + count - 1);\n\t}\n\n\t/**\n\t * Find the nth line start included in the range (from the end).\n\t */\n\tprivate static _lastLineNumberInRange(model: ICursorSimpleModel, range: Range, count: number): number {\n\t\tlet startLineNumber = range.startLineNumber;\n\t\tif (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n\t\t\t// Move on to the second line if the first line start is not included in the range\n\t\t\tstartLineNumber++;\n\t\t}\n\n\t\treturn Math.max(startLineNumber, range.endLineNumber - count + 1);\n\t}\n\n\tprivate static _moveLeft(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, noOfColumns: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\n\t\t\tlet newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n\t\t\tif (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n\t\t\t\t// moved over to the previous view line\n\t\t\t\tconst newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\t\t\t\tif (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n\t\t\t\t\t// stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n\t\t\t\t\tnewViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[i] = CursorState.fromViewState(newViewState);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveHalfLineLeft(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveRight(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, noOfColumns: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tlet newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n\t\t\tif (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n\t\t\t\t// moved over to the next view line\n\t\t\t\tconst newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\t\t\t\tif (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n\t\t\t\t\t// stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n\t\t\t\t\tnewViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult[i] = CursorState.fromViewState(newViewState);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveHalfLineRight(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByViewLines(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveDownByModelLines(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByViewLines(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveUpByModelLines(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean, linesCount: number): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tresult[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewPosition(context: CursorContext, cursor: CursorState, inSelectionMode: boolean, toViewLineNumber: number, toViewColumn: number): PartialCursorState {\n\t\treturn CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n\t}\n\n\tprivate static _moveToModelPosition(context: CursorContext, cursor: CursorState, inSelectionMode: boolean, toModelLineNumber: number, toModelColumn: number): PartialCursorState {\n\t\treturn CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n\t}\n\n\tprivate static _moveToViewMinColumn(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewFirstNonWhitespaceColumn(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewCenterColumn(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\n\t\t\tresult[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewMaxColumn(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _moveToViewLastNonWhitespaceColumn(context: CursorContext, cursors: CursorState[], inSelectionMode: boolean): PartialCursorState[] {\n\t\tlet result: PartialCursorState[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tconst cursor = cursors[i];\n\t\t\tconst viewLineNumber = cursor.viewState.position.lineNumber;\n\t\t\tconst viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n\t\t\tresult[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport namespace CursorMove {\n\n\tconst isCursorMoveArgs = function (arg: any): boolean {\n\t\tif (!types.isObject(arg)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet cursorMoveArg: RawArguments = arg;\n\n\t\tif (!types.isString(cursorMoveArg.to)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\texport const description = <ICommandHandlerDescription>{\n\t\tdescription: 'Move cursor to a logical position in the view',\n\t\targs: [\n\t\t\t{\n\t\t\t\tname: 'Cursor move argument object',\n\t\t\t\tdescription: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down'\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n\t\t\t\tconstraint: isCursorMoveArgs,\n\t\t\t\tschema: {\n\t\t\t\t\t'type': 'object',\n\t\t\t\t\t'required': ['to'],\n\t\t\t\t\t'properties': {\n\t\t\t\t\t\t'to': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'by': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\t'type': 'number',\n\t\t\t\t\t\t\t'default': 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'select': {\n\t\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t\t'default': false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\n\t/**\n\t * Positions in the view for cursor move command.\n\t */\n\texport const RawDirection = {\n\t\tLeft: 'left',\n\t\tRight: 'right',\n\t\tUp: 'up',\n\t\tDown: 'down',\n\n\t\tWrappedLineStart: 'wrappedLineStart',\n\t\tWrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n\t\tWrappedLineColumnCenter: 'wrappedLineColumnCenter',\n\t\tWrappedLineEnd: 'wrappedLineEnd',\n\t\tWrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n\n\t\tViewPortTop: 'viewPortTop',\n\t\tViewPortCenter: 'viewPortCenter',\n\t\tViewPortBottom: 'viewPortBottom',\n\n\t\tViewPortIfOutside: 'viewPortIfOutside'\n\t};\n\n\t/**\n\t * Units for Cursor move 'by' argument\n\t */\n\texport const RawUnit = {\n\t\tLine: 'line',\n\t\tWrappedLine: 'wrappedLine',\n\t\tCharacter: 'character',\n\t\tHalfLine: 'halfLine'\n\t};\n\n\t/**\n\t * Arguments for Cursor move command\n\t */\n\texport interface RawArguments {\n\t\tto: string;\n\t\tselect?: boolean;\n\t\tby?: string;\n\t\tvalue?: number;\n\t}\n\n\texport function parse(args: RawArguments): ParsedArguments | null {\n\t\tif (!args.to) {\n\t\t\t// illegal arguments\n\t\t\treturn null;\n\t\t}\n\n\t\tlet direction: Direction;\n\t\tswitch (args.to) {\n\t\t\tcase RawDirection.Left:\n\t\t\t\tdirection = Direction.Left;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Right:\n\t\t\t\tdirection = Direction.Right;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Up:\n\t\t\t\tdirection = Direction.Up;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.Down:\n\t\t\t\tdirection = Direction.Down;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineStart:\n\t\t\t\tdirection = Direction.WrappedLineStart;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineFirstNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineColumnCenter:\n\t\t\t\tdirection = Direction.WrappedLineColumnCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineEnd:\n\t\t\t\tdirection = Direction.WrappedLineEnd;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.WrappedLineLastNonWhitespaceCharacter:\n\t\t\t\tdirection = Direction.WrappedLineLastNonWhitespaceCharacter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortTop:\n\t\t\t\tdirection = Direction.ViewPortTop;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortBottom:\n\t\t\t\tdirection = Direction.ViewPortBottom;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortCenter:\n\t\t\t\tdirection = Direction.ViewPortCenter;\n\t\t\t\tbreak;\n\t\t\tcase RawDirection.ViewPortIfOutside:\n\t\t\t\tdirection = Direction.ViewPortIfOutside;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// illegal arguments\n\t\t\t\treturn null;\n\t\t}\n\n\t\tlet unit = Unit.None;\n\t\tswitch (args.by) {\n\t\t\tcase RawUnit.Line:\n\t\t\t\tunit = Unit.Line;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.WrappedLine:\n\t\t\t\tunit = Unit.WrappedLine;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.Character:\n\t\t\t\tunit = Unit.Character;\n\t\t\t\tbreak;\n\t\t\tcase RawUnit.HalfLine:\n\t\t\t\tunit = Unit.HalfLine;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tdirection: direction,\n\t\t\tunit: unit,\n\t\t\tselect: (!!args.select),\n\t\t\tvalue: (args.value || 1)\n\t\t};\n\t}\n\n\texport interface ParsedArguments {\n\t\tdirection: Direction;\n\t\tunit: Unit;\n\t\tselect: boolean;\n\t\tvalue: number;\n\t}\n\n\texport const enum Direction {\n\t\tLeft,\n\t\tRight,\n\t\tUp,\n\t\tDown,\n\n\t\tWrappedLineStart,\n\t\tWrappedLineFirstNonWhitespaceCharacter,\n\t\tWrappedLineColumnCenter,\n\t\tWrappedLineEnd,\n\t\tWrappedLineLastNonWhitespaceCharacter,\n\n\t\tViewPortTop,\n\t\tViewPortCenter,\n\t\tViewPortBottom,\n\n\t\tViewPortIfOutside,\n\t}\n\n\texport const enum Unit {\n\t\tNone,\n\t\tLine,\n\t\tWrappedLine,\n\t\tCharacter,\n\t\tHalfLine,\n\t}\n\n}\n"]}]}