{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/dom.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/dom.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"vs/base/browser/dom\"], function (require, exports, dom) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Firefox has no implementation of toElement.\n    if (!(\"toElement\" in MouseEvent.prototype)) {\n        Object.defineProperty(MouseEvent.prototype, \"toElement\", {\n            get: function () {\n                // @ts-ignore\n                const event = this;\n                switch (event.type) {\n                    case \"mouseup\":\n                    case \"focusin\":\n                    case \"mousenter\":\n                    case \"mouseover\":\n                    case \"dragenter\":\n                        return event.target;\n                    default:\n                        return event.relatedTarget;\n                }\n            },\n        });\n    }\n    const _addDisposableListener = dom.addDisposableListener;\n    // tslint:disable-next-line no-any\n    const addDisposableListener = (node, type, handler, useCapture) => {\n        return _addDisposableListener(node, type === \"mousewheel\" ? \"wheel\" : type, handler, useCapture);\n    };\n    const target = dom;\n    target.addDisposableListener = addDisposableListener;\n});\n",null]}