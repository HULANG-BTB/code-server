{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugViewModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/workbench/contrib/debug/common/debug\", \"vs/workbench/contrib/debug/common/debugUtils\"], function (require, exports, event_1, debug_1, debugUtils_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ViewModel {\n        constructor(contextKeyService) {\n            this.firstSessionStart = true;\n            this._onDidFocusSession = new event_1.Emitter();\n            this._onDidFocusStackFrame = new event_1.Emitter();\n            this._onDidSelectExpression = new event_1.Emitter();\n            this.multiSessionView = false;\n            this.expressionSelectedContextKey = debug_1.CONTEXT_EXPRESSION_SELECTED.bindTo(contextKeyService);\n            this.breakpointSelectedContextKey = debug_1.CONTEXT_BREAKPOINT_SELECTED.bindTo(contextKeyService);\n            this.loadedScriptsSupportedContextKey = debug_1.CONTEXT_LOADED_SCRIPTS_SUPPORTED.bindTo(contextKeyService);\n            this.stepBackSupportedContextKey = debug_1.CONTEXT_STEP_BACK_SUPPORTED.bindTo(contextKeyService);\n            this.focusedSessionIsAttach = debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.bindTo(contextKeyService);\n            this.restartFrameSupportedContextKey = debug_1.CONTEXT_RESTART_FRAME_SUPPORTED.bindTo(contextKeyService);\n        }\n        getId() {\n            return 'root';\n        }\n        get focusedSession() {\n            return this._focusedSession;\n        }\n        get focusedThread() {\n            return this._focusedThread;\n        }\n        get focusedStackFrame() {\n            return this._focusedStackFrame;\n        }\n        setFocus(stackFrame, thread, session, explicit) {\n            const shouldEmitForStackFrame = this._focusedStackFrame !== stackFrame;\n            const shouldEmitForSession = this._focusedSession !== session;\n            this._focusedStackFrame = stackFrame;\n            this._focusedThread = thread;\n            this._focusedSession = session;\n            this.loadedScriptsSupportedContextKey.set(session ? !!session.capabilities.supportsLoadedSourcesRequest : false);\n            this.stepBackSupportedContextKey.set(session ? !!session.capabilities.supportsStepBack : false);\n            this.restartFrameSupportedContextKey.set(session ? !!session.capabilities.supportsRestartFrame : false);\n            const attach = !!session && session.configuration.request === 'attach' && !debugUtils_1.isExtensionHostDebugging(session.configuration);\n            this.focusedSessionIsAttach.set(attach);\n            if (shouldEmitForSession) {\n                this._onDidFocusSession.fire(session);\n            }\n            if (shouldEmitForStackFrame) {\n                this._onDidFocusStackFrame.fire({ stackFrame, explicit });\n            }\n        }\n        get onDidFocusSession() {\n            return this._onDidFocusSession.event;\n        }\n        get onDidFocusStackFrame() {\n            return this._onDidFocusStackFrame.event;\n        }\n        getSelectedExpression() {\n            return this.selectedExpression;\n        }\n        setSelectedExpression(expression) {\n            this.selectedExpression = expression;\n            this.expressionSelectedContextKey.set(!!expression);\n            this._onDidSelectExpression.fire(expression);\n        }\n        get onDidSelectExpression() {\n            return this._onDidSelectExpression.event;\n        }\n        getSelectedFunctionBreakpoint() {\n            return this.selectedFunctionBreakpoint;\n        }\n        setSelectedFunctionBreakpoint(functionBreakpoint) {\n            this.selectedFunctionBreakpoint = functionBreakpoint;\n            this.breakpointSelectedContextKey.set(!!functionBreakpoint);\n        }\n        isMultiSessionView() {\n            return this.multiSessionView;\n        }\n        setMultiSessionView(isMultiSessionView) {\n            this.multiSessionView = isMultiSessionView;\n        }\n    }\n    exports.ViewModel = ViewModel;\n});\n",null]}