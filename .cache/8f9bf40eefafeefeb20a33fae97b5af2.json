{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/issue/common/issue.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/issue/common/issue.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IIssueService = instantiation_1.createDecorator('issueService');\nvar IssueType;\n(function (IssueType) {\n    IssueType[IssueType[\"Bug\"] = 0] = \"Bug\";\n    IssueType[IssueType[\"PerformanceIssue\"] = 1] = \"PerformanceIssue\";\n    IssueType[IssueType[\"FeatureRequest\"] = 2] = \"FeatureRequest\";\n    IssueType[IssueType[\"SettingsSearchIssue\"] = 3] = \"SettingsSearchIssue\";\n})(IssueType = exports.IssueType || (exports.IssueType = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/issue/common/issue.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/issue/common/issue.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAEpE,QAAA,aAAa,GAAG,+BAAe,CAAgB,cAAc,CAAC,CAAC;AAa5E,IAAkB,SAKjB;AALD,WAAkB,SAAS;IAC1B,uCAAG,CAAA;IACH,iEAAgB,CAAA;IAChB,6DAAc,CAAA;IACd,uEAAmB,CAAA;AACpB,CAAC,EALiB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAK1B","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IIssueService = createDecorator<IIssueService>('issueService');\n\n// Since data sent through the service is serialized to JSON, functions will be lost, so Color objects\n// should not be sent as their 'toString' method will be stripped. Instead convert to strings before sending.\nexport interface WindowStyles {\n\tbackgroundColor?: string;\n\tcolor?: string;\n}\nexport interface WindowData {\n\tstyles: WindowStyles;\n\tzoomLevel: number;\n}\n\nexport const enum IssueType {\n\tBug,\n\tPerformanceIssue,\n\tFeatureRequest,\n\tSettingsSearchIssue\n}\n\nexport interface IssueReporterStyles extends WindowStyles {\n\ttextLinkColor?: string;\n\ttextLinkActiveForeground?: string;\n\tinputBackground?: string;\n\tinputForeground?: string;\n\tinputBorder?: string;\n\tinputErrorBorder?: string;\n\tinputActiveBorder?: string;\n\tbuttonBackground?: string;\n\tbuttonForeground?: string;\n\tbuttonHoverBackground?: string;\n\tsliderBackgroundColor?: string;\n\tsliderHoverColor?: string;\n\tsliderActiveColor?: string;\n}\n\nexport interface IssueReporterExtensionData {\n\tname: string;\n\tpublisher: string;\n\tversion: string;\n\tid: string;\n\tisTheme: boolean;\n\tdisplayName: string | undefined;\n\trepositoryUrl: string | undefined;\n\tbugsUrl: string | undefined;\n}\n\nexport interface IssueReporterData extends WindowData {\n\tstyles: IssueReporterStyles;\n\tenabledExtensions: IssueReporterExtensionData[];\n\tissueType?: IssueType;\n}\n\nexport interface ISettingSearchResult {\n\textensionId: string;\n\tkey: string;\n\tscore: number;\n}\n\nexport interface ISettingsSearchIssueReporterData extends IssueReporterData {\n\tissueType: IssueType.SettingsSearchIssue;\n\tactualSearchResults: ISettingSearchResult[];\n\tquery: string;\n\tfilterResultCount: number;\n}\n\nexport interface IssueReporterFeatures {\n}\n\nexport interface ProcessExplorerStyles extends WindowStyles {\n\thoverBackground?: string;\n\thoverForeground?: string;\n\thighlightForeground?: string;\n}\n\nexport interface ProcessExplorerData extends WindowData {\n\tpid: number;\n\tstyles: ProcessExplorerStyles;\n}\n\nexport interface IIssueService {\n\t_serviceBrand: any;\n\topenReporter(data: IssueReporterData): Promise<void>;\n\topenProcessExplorer(data: ProcessExplorerData): Promise<void>;\n\tgetSystemStatus(): Promise<string>;\n}\n"]}]}