{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/nodeCachedDataCleaner.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/electron-browser/sharedProcess/contrib/nodeCachedDataCleaner.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\", \"vs/base/node/pfs\", \"vs/platform/environment/common/environment\", \"vs/platform/product/node/product\"], function (require, exports, path_1, errors_1, lifecycle_1, pfs_1, environment_1, product_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let NodeCachedDataCleaner = class NodeCachedDataCleaner {\n        constructor(_environmentService) {\n            this._environmentService = _environmentService;\n            this._disposables = [];\n            this._manageCachedDataSoon();\n        }\n        dispose() {\n            this._disposables = lifecycle_1.dispose(this._disposables);\n        }\n        _manageCachedDataSoon() {\n            // Cached data is stored as user data and we run a cleanup task everytime\n            // the editor starts. The strategy is to delete all files that are older than\n            // 3 months (1 week respectively)\n            if (!this._environmentService.nodeCachedDataDir) {\n                return;\n            }\n            // The folder which contains folders of cached data. Each of these folder is per\n            // version\n            const nodeCachedDataRootDir = path_1.dirname(this._environmentService.nodeCachedDataDir);\n            const nodeCachedDataCurrent = path_1.basename(this._environmentService.nodeCachedDataDir);\n            let handle = setTimeout(() => {\n                handle = undefined;\n                pfs_1.readdir(nodeCachedDataRootDir).then(entries => {\n                    const now = Date.now();\n                    const deletes = [];\n                    entries.forEach(entry => {\n                        // name check\n                        // * not the current cached data folder\n                        if (entry !== nodeCachedDataCurrent) {\n                            const path = path_1.join(nodeCachedDataRootDir, entry);\n                            deletes.push(pfs_1.stat(path).then(stats => {\n                                // stat check\n                                // * only directories\n                                // * only when old enough\n                                if (stats.isDirectory()) {\n                                    const diff = now - stats.mtime.getTime();\n                                    if (diff > NodeCachedDataCleaner._DataMaxAge) {\n                                        return pfs_1.rimraf(path);\n                                    }\n                                }\n                                return undefined;\n                            }));\n                        }\n                    });\n                    return Promise.all(deletes);\n                }).then(undefined, errors_1.onUnexpectedError);\n            }, 30 * 1000);\n            this._disposables.push({\n                dispose() { clearTimeout(handle); }\n            });\n        }\n    };\n    NodeCachedDataCleaner._DataMaxAge = product_1.default.nameLong.indexOf('Insiders') >= 0\n        ? 1000 * 60 * 60 * 24 * 7 // roughly 1 week\n        : 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months\n    NodeCachedDataCleaner = __decorate([\n        __param(0, environment_1.IEnvironmentService)\n    ], NodeCachedDataCleaner);\n    exports.NodeCachedDataCleaner = NodeCachedDataCleaner;\n});\n",null]}