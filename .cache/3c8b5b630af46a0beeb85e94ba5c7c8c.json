{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/history/common/history.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/history/common/history.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IHistoryService = instantiation_1.createDecorator('historyService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/history/common/history.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/history/common/history.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAoG;AAKvF,QAAA,eAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { IEditorInput } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\n\nexport const IHistoryService = createDecorator<IHistoryService>('historyService');\n\nexport interface IHistoryService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\t/**\n\t * Re-opens the last closed editor if any.\n\t */\n\treopenLastClosedEditor(): void;\n\n\t/**\n\t * Navigates to the last location where an edit happened.\n\t */\n\topenLastEditLocation(): void;\n\n\t/**\n\t * Navigate forwards in history.\n\t *\n\t * @param acrossEditors instructs the history to skip navigation entries that\n\t * are only within the same document.\n\t */\n\tforward(acrossEditors?: boolean): void;\n\n\t/**\n\t * Navigate backwards in history.\n\t *\n\t * @param acrossEditors instructs the history to skip navigation entries that\n\t * are only within the same document.\n\t */\n\tback(acrossEditors?: boolean): void;\n\n\t/**\n\t * Navigate forward or backwards to previous entry in history.\n\t */\n\tlast(): void;\n\n\t/**\n\t * Removes an entry from history.\n\t */\n\tremove(input: IEditorInput | IResourceInput): void;\n\n\t/**\n\t * Clears all history.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Clear list of recently opened editors.\n\t */\n\tclearRecentlyOpened(): void;\n\n\t/**\n\t * Get the entire history of opened editors.\n\t */\n\tgetHistory(): Array<IEditorInput | IResourceInput>;\n\n\t/**\n\t * Looking at the editor history, returns the workspace root of the last file that was\n\t * inside the workspace and part of the editor history.\n\t *\n\t * @param schemeFilter filter to restrict roots by scheme.\n\t */\n\tgetLastActiveWorkspaceRoot(schemeFilter?: string): URI | undefined;\n\n\t/**\n\t * Looking at the editor history, returns the resource of the last file that was opened.\n\t *\n\t * @param schemeFilter filter to restrict roots by scheme.\n\t */\n\tgetLastActiveFile(schemeFilter: string): URI | undefined;\n}\n"]}]}