{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/sortLinesCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/linesOperations/sortLinesCommand.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/editOperation\", \"vs/editor/common/core/range\"], function (require, exports, editOperation_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class SortLinesCommand {\n        constructor(selection, descending) {\n            this.selection = selection;\n            this.descending = descending;\n        }\n        getEditOperations(model, builder) {\n            let op = sortLines(model, this.selection, this.descending);\n            if (op) {\n                builder.addEditOperation(op.range, op.text);\n            }\n            this.selectionId = builder.trackSelection(this.selection);\n        }\n        computeCursorState(model, helper) {\n            return helper.getTrackedSelection(this.selectionId);\n        }\n        static canRun(model, selection, descending) {\n            if (model === null) {\n                return false;\n            }\n            let data = getSortData(model, selection, descending);\n            if (!data) {\n                return false;\n            }\n            for (let i = 0, len = data.before.length; i < len; i++) {\n                if (data.before[i] !== data.after[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    exports.SortLinesCommand = SortLinesCommand;\n    function getSortData(model, selection, descending) {\n        let startLineNumber = selection.startLineNumber;\n        let endLineNumber = selection.endLineNumber;\n        if (selection.endColumn === 1) {\n            endLineNumber--;\n        }\n        // Nothing to sort if user didn't select anything.\n        if (startLineNumber >= endLineNumber) {\n            return null;\n        }\n        let linesToSort = [];\n        // Get the contents of the selection to be sorted.\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            linesToSort.push(model.getLineContent(lineNumber));\n        }\n        let sorted = linesToSort.slice(0);\n        sorted.sort((a, b) => {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n        });\n        // If descending, reverse the order.\n        if (descending === true) {\n            sorted = sorted.reverse();\n        }\n        return {\n            startLineNumber: startLineNumber,\n            endLineNumber: endLineNumber,\n            before: linesToSort,\n            after: sorted\n        };\n    }\n    /**\n     * Generate commands for sorting lines on a model.\n     */\n    function sortLines(model, selection, descending) {\n        let data = getSortData(model, selection, descending);\n        if (!data) {\n            return null;\n        }\n        return editOperation_1.EditOperation.replace(new range_1.Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n    }\n});\n",null]}