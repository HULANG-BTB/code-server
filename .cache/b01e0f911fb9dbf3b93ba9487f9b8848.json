{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/modesRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/modesRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\n// Define extension point ids\nexports.Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nvar EditorModesRegistry = /** @class */ (function () {\n    function EditorModesRegistry() {\n        this._onDidChangeLanguages = new event_1.Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n        this._dynamicLanguages = [];\n    }\n    // --- languages\n    EditorModesRegistry.prototype.registerLanguage = function (def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n    };\n    EditorModesRegistry.prototype.setDynamicLanguages = function (def) {\n        this._dynamicLanguages = def;\n        this._onDidChangeLanguages.fire(undefined);\n    };\n    EditorModesRegistry.prototype.getLanguages = function () {\n        return [].concat(this._languages).concat(this._dynamicLanguages);\n    };\n    return EditorModesRegistry;\n}());\nexports.EditorModesRegistry = EditorModesRegistry;\nexports.ModesRegistry = new EditorModesRegistry();\nplatform_1.Registry.add(exports.Extensions.ModesRegistry, exports.ModesRegistry);\nexports.PLAINTEXT_MODE_ID = 'plaintext';\nexports.PLAINTEXT_LANGUAGE_IDENTIFIER = new modes_1.LanguageIdentifier(exports.PLAINTEXT_MODE_ID, modes_1.LanguageId.PlainText);\nexports.ModesRegistry.registerLanguage({\n    id: exports.PLAINTEXT_MODE_ID,\n    extensions: ['.txt', '.gitignore'],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: ['text/plain']\n});\nlanguageConfigurationRegistry_1.LanguageConfigurationRegistry.register(exports.PLAINTEXT_LANGUAGE_IDENTIFIER, {\n    brackets: [\n        ['(', ')'],\n        ['[', ']'],\n        ['{', '}'],\n    ]\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/modesRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/modesRegistry.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,8CAAsD;AACtD,gDAAwE;AACxE,sGAAqG;AAErG,iEAAgE;AAEhE,6BAA6B;AAChB,QAAA,UAAU,GAAG;IACzB,aAAa,EAAE,sBAAsB;CACrC,CAAC;AAEF;IAQC;QAHiB,0BAAqB,GAAG,IAAI,eAAO,EAAQ,CAAC;QAC7C,yBAAoB,GAAgB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QAGpF,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,gBAAgB;IAET,8CAAgB,GAAvB,UAAwB,GAA4B;QACnD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACM,iDAAmB,GAA1B,UAA2B,GAA8B;QACxD,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;QAC7B,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IACM,0CAAY,GAAnB;QACC,OAAmC,EAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC/F,CAAC;IACF,0BAAC;AAAD,CAAC,AA1BD,IA0BC;AA1BY,kDAAmB;AA4BnB,QAAA,aAAa,GAAG,IAAI,mBAAmB,EAAE,CAAC;AACvD,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,aAAa,EAAE,qBAAa,CAAC,CAAC;AAEzC,QAAA,iBAAiB,GAAG,WAAW,CAAC;AAChC,QAAA,6BAA6B,GAAG,IAAI,0BAAkB,CAAC,yBAAiB,EAAE,kBAAU,CAAC,SAAS,CAAC,CAAC;AAE7G,qBAAa,CAAC,gBAAgB,CAAC;IAC9B,EAAE,EAAE,yBAAiB;IACrB,UAAU,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;IAClC,OAAO,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,YAAY,CAAC,EAAE,MAAM,CAAC;IAChE,SAAS,EAAE,CAAC,YAAY,CAAC;CACzB,CAAC,CAAC;AACH,6DAA6B,CAAC,QAAQ,CAAC,qCAA6B,EAAE;IACrE,QAAQ,EAAE;QACT,CAAC,GAAG,EAAE,GAAG,CAAC;QACV,CAAC,GAAG,EAAE,GAAG,CAAC;QACV,CAAC,GAAG,EAAE,GAAG,CAAC;KACV;CACD,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { ILanguageExtensionPoint } from 'vs/editor/common/services/modeService';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\n// Define extension point ids\nexport const Extensions = {\n\tModesRegistry: 'editor.modesRegistry'\n};\n\nexport class EditorModesRegistry {\n\n\tprivate readonly _languages: ILanguageExtensionPoint[];\n\tprivate _dynamicLanguages: ILanguageExtensionPoint[];\n\n\tprivate readonly _onDidChangeLanguages = new Emitter<void>();\n\tpublic readonly onDidChangeLanguages: Event<void> = this._onDidChangeLanguages.event;\n\n\tconstructor() {\n\t\tthis._languages = [];\n\t\tthis._dynamicLanguages = [];\n\t}\n\n\t// --- languages\n\n\tpublic registerLanguage(def: ILanguageExtensionPoint): void {\n\t\tthis._languages.push(def);\n\t\tthis._onDidChangeLanguages.fire(undefined);\n\t}\n\tpublic setDynamicLanguages(def: ILanguageExtensionPoint[]): void {\n\t\tthis._dynamicLanguages = def;\n\t\tthis._onDidChangeLanguages.fire(undefined);\n\t}\n\tpublic getLanguages(): ILanguageExtensionPoint[] {\n\t\treturn (<ILanguageExtensionPoint[]>[]).concat(this._languages).concat(this._dynamicLanguages);\n\t}\n}\n\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\n\nexport const PLAINTEXT_MODE_ID = 'plaintext';\nexport const PLAINTEXT_LANGUAGE_IDENTIFIER = new LanguageIdentifier(PLAINTEXT_MODE_ID, LanguageId.PlainText);\n\nModesRegistry.registerLanguage({\n\tid: PLAINTEXT_MODE_ID,\n\textensions: ['.txt', '.gitignore'],\n\taliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n\tmimetypes: ['text/plain']\n});\nLanguageConfigurationRegistry.register(PLAINTEXT_LANGUAGE_IDENTIFIER, {\n\tbrackets: [\n\t\t['(', ')'],\n\t\t['[', ']'],\n\t\t['{', '}'],\n\t]\n});\n"]}]}