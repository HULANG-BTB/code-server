{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostTextEditors.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostTextEditors.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/arrays\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostTextEditor\", \"vs/workbench/api/node/extHostTypeConverters\", \"vs/workbench/api/node/extHostTypes\"], function (require, exports, event_1, arrays, extHost_protocol_1, extHostTextEditor_1, TypeConverters, extHostTypes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostEditors {\n        constructor(mainContext, extHostDocumentsAndEditors) {\n            this._onDidChangeTextEditorSelection = new event_1.Emitter();\n            this._onDidChangeTextEditorOptions = new event_1.Emitter();\n            this._onDidChangeTextEditorVisibleRanges = new event_1.Emitter();\n            this._onDidChangeTextEditorViewColumn = new event_1.Emitter();\n            this._onDidChangeActiveTextEditor = new event_1.Emitter();\n            this._onDidChangeVisibleTextEditors = new event_1.Emitter();\n            this.onDidChangeTextEditorSelection = this._onDidChangeTextEditorSelection.event;\n            this.onDidChangeTextEditorOptions = this._onDidChangeTextEditorOptions.event;\n            this.onDidChangeTextEditorVisibleRanges = this._onDidChangeTextEditorVisibleRanges.event;\n            this.onDidChangeTextEditorViewColumn = this._onDidChangeTextEditorViewColumn.event;\n            this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event;\n            this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event;\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadTextEditors);\n            this._extHostDocumentsAndEditors = extHostDocumentsAndEditors;\n            this._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors(e => this._onDidChangeVisibleTextEditors.fire(e));\n            this._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(e => this._onDidChangeActiveTextEditor.fire(e));\n        }\n        getActiveTextEditor() {\n            return this._extHostDocumentsAndEditors.activeEditor();\n        }\n        getVisibleTextEditors() {\n            return this._extHostDocumentsAndEditors.allEditors();\n        }\n        showTextDocument(document, columnOrOptions, preserveFocus) {\n            let options;\n            if (typeof columnOrOptions === 'number') {\n                options = {\n                    position: TypeConverters.ViewColumn.from(columnOrOptions),\n                    preserveFocus\n                };\n            }\n            else if (typeof columnOrOptions === 'object') {\n                options = {\n                    position: TypeConverters.ViewColumn.from(columnOrOptions.viewColumn),\n                    preserveFocus: columnOrOptions.preserveFocus,\n                    selection: typeof columnOrOptions.selection === 'object' ? TypeConverters.Range.from(columnOrOptions.selection) : undefined,\n                    pinned: typeof columnOrOptions.preview === 'boolean' ? !columnOrOptions.preview : undefined\n                };\n            }\n            else {\n                options = {\n                    preserveFocus: false\n                };\n            }\n            return this._proxy.$tryShowTextDocument(document.uri, options).then(id => {\n                const editor = id && this._extHostDocumentsAndEditors.getEditor(id);\n                if (editor) {\n                    return editor;\n                }\n                else {\n                    throw new Error(`Failed to show text document ${document.uri.toString()}, should show in editor #${id}`);\n                }\n            });\n        }\n        createTextEditorDecorationType(options) {\n            return new extHostTextEditor_1.TextEditorDecorationType(this._proxy, options);\n        }\n        applyWorkspaceEdit(edit) {\n            const dto = TypeConverters.WorkspaceEdit.from(edit, this._extHostDocumentsAndEditors);\n            return this._proxy.$tryApplyWorkspaceEdit(dto);\n        }\n        // --- called from main thread\n        $acceptEditorPropertiesChanged(id, data) {\n            const textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n            if (!textEditor) {\n                throw new Error('unknown text editor');\n            }\n            // (1) set all properties\n            if (data.options) {\n                textEditor._acceptOptions(data.options);\n            }\n            if (data.selections) {\n                const selections = data.selections.selections.map(TypeConverters.Selection.to);\n                textEditor._acceptSelections(selections);\n            }\n            if (data.visibleRanges) {\n                const visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n                textEditor._acceptVisibleRanges(visibleRanges);\n            }\n            // (2) fire change events\n            if (data.options) {\n                this._onDidChangeTextEditorOptions.fire({\n                    textEditor: textEditor,\n                    options: Object.assign({}, data.options, { lineNumbers: TypeConverters.TextEditorLineNumbersStyle.to(data.options.lineNumbers) })\n                });\n            }\n            if (data.selections) {\n                const kind = extHostTypes_1.TextEditorSelectionChangeKind.fromValue(data.selections.source);\n                const selections = data.selections.selections.map(TypeConverters.Selection.to);\n                this._onDidChangeTextEditorSelection.fire({\n                    textEditor,\n                    selections,\n                    kind\n                });\n            }\n            if (data.visibleRanges) {\n                const visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n                this._onDidChangeTextEditorVisibleRanges.fire({\n                    textEditor,\n                    visibleRanges\n                });\n            }\n        }\n        $acceptEditorPositionData(data) {\n            for (const id in data) {\n                const textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n                if (!textEditor) {\n                    throw new Error('Unknown text editor');\n                }\n                const viewColumn = TypeConverters.ViewColumn.to(data[id]);\n                if (textEditor.viewColumn !== viewColumn) {\n                    textEditor._acceptViewColumn(viewColumn);\n                    this._onDidChangeTextEditorViewColumn.fire({ textEditor, viewColumn });\n                }\n            }\n        }\n        getDiffInformation(id) {\n            return Promise.resolve(this._proxy.$getDiffInformation(id));\n        }\n    }\n    exports.ExtHostEditors = ExtHostEditors;\n});\n",null]}