{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/protocol/src/node/modules/fs.ts","dependencies":[{"path":"/home/coding/workspace/packages/protocol/src/node/modules/fs.ts","mtime":1555841535686},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst util_1 = require(\"util\");\nconst stream_1 = require(\"./stream\");\nclass WriteStreamProxy extends stream_1.WritableProxy {\n    async close() {\n        this.stream.close();\n    }\n    async dispose() {\n        await super.dispose();\n        this.stream.close();\n    }\n    // tslint:disable-next-line no-any\n    async onEvent(cb) {\n        await super.onEvent(cb);\n        this.stream.on(\"open\", (fd) => cb(\"open\", fd));\n    }\n}\nexports.WriteStreamProxy = WriteStreamProxy;\nclass WatcherProxy {\n    constructor(watcher) {\n        this.watcher = watcher;\n    }\n    async close() {\n        this.watcher.close();\n    }\n    async dispose() {\n        this.watcher.close();\n        this.watcher.removeAllListeners();\n    }\n    async onDone(cb) {\n        this.watcher.on(\"close\", cb);\n        this.watcher.on(\"error\", cb);\n    }\n    // tslint:disable-next-line no-any\n    async onEvent(cb) {\n        this.watcher.on(\"change\", (event, filename) => cb(\"change\", event, filename));\n        this.watcher.on(\"close\", () => cb(\"close\"));\n        this.watcher.on(\"error\", (error) => cb(\"error\", error));\n    }\n}\nexports.WatcherProxy = WatcherProxy;\nclass FsModuleProxy {\n    access(path, mode) {\n        return util_1.promisify(fs.access)(path, mode);\n    }\n    // tslint:disable-next-line no-any\n    appendFile(file, data, options) {\n        return util_1.promisify(fs.appendFile)(file, data, options);\n    }\n    chmod(path, mode) {\n        return util_1.promisify(fs.chmod)(path, mode);\n    }\n    chown(path, uid, gid) {\n        return util_1.promisify(fs.chown)(path, uid, gid);\n    }\n    close(fd) {\n        return util_1.promisify(fs.close)(fd);\n    }\n    copyFile(src, dest, flags) {\n        return util_1.promisify(fs.copyFile)(src, dest, flags);\n    }\n    // tslint:disable-next-line no-any\n    async createWriteStream(path, options) {\n        return new WriteStreamProxy(fs.createWriteStream(path, options));\n    }\n    exists(path) {\n        return util_1.promisify(fs.exists)(path); // tslint:disable-line deprecation\n    }\n    fchmod(fd, mode) {\n        return util_1.promisify(fs.fchmod)(fd, mode);\n    }\n    fchown(fd, uid, gid) {\n        return util_1.promisify(fs.fchown)(fd, uid, gid);\n    }\n    fdatasync(fd) {\n        return util_1.promisify(fs.fdatasync)(fd);\n    }\n    async fstat(fd) {\n        return this.makeStatsSerializable(await util_1.promisify(fs.fstat)(fd));\n    }\n    fsync(fd) {\n        return util_1.promisify(fs.fsync)(fd);\n    }\n    ftruncate(fd, len) {\n        return util_1.promisify(fs.ftruncate)(fd, len);\n    }\n    futimes(fd, atime, mtime) {\n        return util_1.promisify(fs.futimes)(fd, atime, mtime);\n    }\n    lchmod(path, mode) {\n        return util_1.promisify(fs.lchmod)(path, mode);\n    }\n    lchown(path, uid, gid) {\n        return util_1.promisify(fs.lchown)(path, uid, gid);\n    }\n    link(existingPath, newPath) {\n        return util_1.promisify(fs.link)(existingPath, newPath);\n    }\n    async lstat(path) {\n        return this.makeStatsSerializable(await util_1.promisify(fs.lstat)(path));\n    }\n    async lstatBatch(args) {\n        return Promise.all(args.map((a) => this.lstat(a.path).catch((e) => e)));\n    }\n    mkdir(path, mode) {\n        return util_1.promisify(fs.mkdir)(path, mode);\n    }\n    mkdtemp(prefix, options) {\n        return util_1.promisify(fs.mkdtemp)(prefix, options);\n    }\n    open(path, flags, mode) {\n        return util_1.promisify(fs.open)(path, flags, mode);\n    }\n    read(fd, length, position) {\n        const buffer = Buffer.alloc(length);\n        return util_1.promisify(fs.read)(fd, buffer, 0, length, position);\n    }\n    readFile(path, options) {\n        return util_1.promisify(fs.readFile)(path, options);\n    }\n    readdir(path, options) {\n        return util_1.promisify(fs.readdir)(path, options);\n    }\n    readdirBatch(args) {\n        return Promise.all(args.map((a) => this.readdir(a.path, a.options).catch((e) => e)));\n    }\n    readlink(path, options) {\n        return util_1.promisify(fs.readlink)(path, options);\n    }\n    realpath(path, options) {\n        return util_1.promisify(fs.realpath)(path, options);\n    }\n    rename(oldPath, newPath) {\n        return util_1.promisify(fs.rename)(oldPath, newPath);\n    }\n    rmdir(path) {\n        return util_1.promisify(fs.rmdir)(path);\n    }\n    async stat(path) {\n        return this.makeStatsSerializable(await util_1.promisify(fs.stat)(path));\n    }\n    async statBatch(args) {\n        return Promise.all(args.map((a) => this.stat(a.path).catch((e) => e)));\n    }\n    symlink(target, path, type) {\n        return util_1.promisify(fs.symlink)(target, path, type);\n    }\n    truncate(path, len) {\n        return util_1.promisify(fs.truncate)(path, len);\n    }\n    unlink(path) {\n        return util_1.promisify(fs.unlink)(path);\n    }\n    utimes(path, atime, mtime) {\n        return util_1.promisify(fs.utimes)(path, atime, mtime);\n    }\n    async write(fd, buffer, offset, length, position) {\n        return util_1.promisify(fs.write)(fd, buffer, offset, length, position);\n    }\n    // tslint:disable-next-line no-any\n    writeFile(path, data, options) {\n        return util_1.promisify(fs.writeFile)(path, data, options);\n    }\n    async watch(filename, options) {\n        return new WatcherProxy(fs.watch(filename, options));\n    }\n    makeStatsSerializable(stats) {\n        return {\n            ...stats,\n            /**\n             * We need to check if functions exist because nexe's implemented FS\n             * lib doesnt implement fs.stats properly.\n             */\n            _isBlockDevice: stats.isBlockDevice ? stats.isBlockDevice() : false,\n            _isCharacterDevice: stats.isCharacterDevice ? stats.isCharacterDevice() : false,\n            _isDirectory: stats.isDirectory(),\n            _isFIFO: stats.isFIFO ? stats.isFIFO() : false,\n            _isFile: stats.isFile(),\n            _isSocket: stats.isSocket ? stats.isSocket() : false,\n            _isSymbolicLink: stats.isSymbolicLink ? stats.isSymbolicLink() : false,\n        };\n    }\n}\nexports.FsModuleProxy = FsModuleProxy;\n",{"version":3,"file":"/home/coding/workspace/packages/protocol/src/node/modules/fs.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/protocol/src/node/modules/fs.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport { promisify } from \"util\";\nimport { ServerProxy } from \"../../common/proxy\";\nimport { IEncodingOptions } from \"../../common/util\";\nimport { WritableProxy } from \"./stream\";\n\n// tslint:disable completed-docs\n\n/**\n * A serializable version of fs.Stats.\n */\nexport interface Stats {\n\tdev: number;\n\tino: number;\n\tmode: number;\n\tnlink: number;\n\tuid: number;\n\tgid: number;\n\trdev: number;\n\tsize: number;\n\tblksize: number;\n\tblocks: number;\n\tatimeMs: number;\n\tmtimeMs: number;\n\tctimeMs: number;\n\tbirthtimeMs: number;\n\tatime: Date;\n\tmtime: Date;\n\tctime: Date;\n\tbirthtime: Date;\n\t_isFile: boolean;\n\t_isDirectory: boolean;\n\t_isBlockDevice: boolean;\n\t_isCharacterDevice: boolean;\n\t_isSymbolicLink: boolean;\n\t_isFIFO: boolean;\n\t_isSocket: boolean;\n}\n\nexport class WriteStreamProxy extends WritableProxy<fs.WriteStream> {\n\tpublic async close(): Promise<void> {\n\t\tthis.stream.close();\n\t}\n\n\tpublic async dispose(): Promise<void> {\n\t\tawait super.dispose();\n\t\tthis.stream.close();\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async onEvent(cb: (event: string, ...args: any[]) => void): Promise<void> {\n\t\tawait super.onEvent(cb);\n\t\tthis.stream.on(\"open\", (fd) => cb(\"open\", fd));\n\t}\n}\n\nexport class WatcherProxy implements ServerProxy {\n\tpublic constructor(private readonly watcher: fs.FSWatcher) {}\n\n\tpublic async close(): Promise<void> {\n\t\tthis.watcher.close();\n\t}\n\n\tpublic async dispose(): Promise<void> {\n\t\tthis.watcher.close();\n\t\tthis.watcher.removeAllListeners();\n\t}\n\n\tpublic async onDone(cb: () => void): Promise<void> {\n\t\tthis.watcher.on(\"close\", cb);\n\t\tthis.watcher.on(\"error\", cb);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async onEvent(cb: (event: string, ...args: any[]) => void): Promise<void> {\n\t\tthis.watcher.on(\"change\", (event, filename) => cb(\"change\", event, filename));\n\t\tthis.watcher.on(\"close\", () => cb(\"close\"));\n\t\tthis.watcher.on(\"error\", (error) => cb(\"error\", error));\n\t}\n}\n\nexport class FsModuleProxy {\n\tpublic access(path: fs.PathLike, mode?: number): Promise<void> {\n\t\treturn promisify(fs.access)(path, mode);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic appendFile(file: fs.PathLike | number, data: any, options?: fs.WriteFileOptions): Promise<void> {\n\t\treturn promisify(fs.appendFile)(file, data, options);\n\t}\n\n\tpublic chmod(path: fs.PathLike, mode: string | number): Promise<void> {\n\t\treturn promisify(fs.chmod)(path, mode);\n\t}\n\n\tpublic chown(path: fs.PathLike, uid: number, gid: number): Promise<void> {\n\t\treturn promisify(fs.chown)(path, uid, gid);\n\t}\n\n\tpublic close(fd: number): Promise<void> {\n\t\treturn promisify(fs.close)(fd);\n\t}\n\n\tpublic copyFile(src: fs.PathLike, dest: fs.PathLike, flags?: number): Promise<void> {\n\t\treturn promisify(fs.copyFile)(src, dest, flags);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async createWriteStream(path: fs.PathLike, options?: any): Promise<WriteStreamProxy> {\n\t\treturn new WriteStreamProxy(fs.createWriteStream(path, options));\n\t}\n\n\tpublic exists(path: fs.PathLike): Promise<boolean> {\n\t\treturn promisify(fs.exists)(path); // tslint:disable-line deprecation\n\t}\n\n\tpublic fchmod(fd: number, mode: string | number): Promise<void> {\n\t\treturn promisify(fs.fchmod)(fd, mode);\n\t}\n\n\tpublic fchown(fd: number, uid: number, gid: number): Promise<void> {\n\t\treturn promisify(fs.fchown)(fd, uid, gid);\n\t}\n\n\tpublic fdatasync(fd: number): Promise<void> {\n\t\treturn promisify(fs.fdatasync)(fd);\n\t}\n\n\tpublic async fstat(fd: number): Promise<Stats> {\n\t\treturn this.makeStatsSerializable(await promisify(fs.fstat)(fd));\n\t}\n\n\tpublic fsync(fd: number): Promise<void> {\n\t\treturn promisify(fs.fsync)(fd);\n\t}\n\n\tpublic ftruncate(fd: number, len?: number | null): Promise<void> {\n\t\treturn promisify(fs.ftruncate)(fd, len);\n\t}\n\n\tpublic futimes(fd: number, atime: string | number | Date, mtime: string | number | Date): Promise<void> {\n\t\treturn promisify(fs.futimes)(fd, atime, mtime);\n\t}\n\n\tpublic lchmod(path: fs.PathLike, mode: string | number): Promise<void> {\n\t\treturn promisify(fs.lchmod)(path, mode);\n\t}\n\n\tpublic lchown(path: fs.PathLike, uid: number, gid: number): Promise<void> {\n\t\treturn promisify(fs.lchown)(path, uid, gid);\n\t}\n\n\tpublic link(existingPath: fs.PathLike, newPath: fs.PathLike): Promise<void> {\n\t\treturn promisify(fs.link)(existingPath, newPath);\n\t}\n\n\tpublic async lstat(path: fs.PathLike): Promise<Stats> {\n\t\treturn this.makeStatsSerializable(await promisify(fs.lstat)(path));\n\t}\n\n\tpublic async lstatBatch(args: { path: fs.PathLike }[]): Promise<(Stats | Error)[]> {\n\t\treturn Promise.all(args.map((a) => this.lstat(a.path).catch((e) => e)));\n\t}\n\n\tpublic mkdir(path: fs.PathLike, mode: number | string | fs.MakeDirectoryOptions | undefined | null): Promise<void> {\n\t\treturn promisify(fs.mkdir)(path, mode);\n\t}\n\n\tpublic mkdtemp(prefix: string, options: IEncodingOptions): Promise<string | Buffer> {\n\t\treturn promisify(fs.mkdtemp)(prefix, options);\n\t}\n\n\tpublic open(path: fs.PathLike, flags: string | number, mode: string | number | undefined | null): Promise<number> {\n\t\treturn promisify(fs.open)(path, flags, mode);\n\t}\n\n\tpublic read(fd: number, length: number, position: number | null): Promise<{ bytesRead: number, buffer: Buffer }> {\n\t\tconst buffer = Buffer.alloc(length);\n\n\t\treturn promisify(fs.read)(fd, buffer, 0, length, position);\n\t}\n\n\tpublic readFile(path: fs.PathLike | number, options: IEncodingOptions): Promise<string | Buffer> {\n\t\treturn promisify(fs.readFile)(path, options);\n\t}\n\n\tpublic readdir(path: fs.PathLike, options: IEncodingOptions): Promise<Buffer[] | fs.Dirent[] | string[]> {\n\t\treturn promisify(fs.readdir)(path, options);\n\t}\n\n\tpublic readdirBatch(args: { path: fs.PathLike, options: IEncodingOptions }[]): Promise<(Buffer[] | fs.Dirent[] | string[] | Error)[]> {\n\t\treturn Promise.all(args.map((a) => this.readdir(a.path, a.options).catch((e) => e)));\n\t}\n\n\tpublic readlink(path: fs.PathLike, options: IEncodingOptions): Promise<string | Buffer> {\n\t\treturn promisify(fs.readlink)(path, options);\n\t}\n\n\tpublic realpath(path: fs.PathLike, options: IEncodingOptions): Promise<string | Buffer> {\n\t\treturn promisify(fs.realpath)(path, options);\n\t}\n\n\tpublic rename(oldPath: fs.PathLike, newPath: fs.PathLike): Promise<void> {\n\t\treturn promisify(fs.rename)(oldPath, newPath);\n\t}\n\n\tpublic rmdir(path: fs.PathLike): Promise<void> {\n\t\treturn promisify(fs.rmdir)(path);\n\t}\n\n\tpublic async stat(path: fs.PathLike): Promise<Stats> {\n\t\treturn this.makeStatsSerializable(await promisify(fs.stat)(path));\n\t}\n\n\tpublic async statBatch(args: { path: fs.PathLike }[]): Promise<(Stats | Error)[]> {\n\t\treturn Promise.all(args.map((a) => this.stat(a.path).catch((e) => e)));\n\t}\n\n\tpublic symlink(target: fs.PathLike, path: fs.PathLike, type?: fs.symlink.Type | null): Promise<void> {\n\t\treturn promisify(fs.symlink)(target, path, type);\n\t}\n\n\tpublic truncate(path: fs.PathLike, len?: number | null): Promise<void> {\n\t\treturn promisify(fs.truncate)(path, len);\n\t}\n\n\tpublic unlink(path: fs.PathLike): Promise<void> {\n\t\treturn promisify(fs.unlink)(path);\n\t}\n\n\tpublic utimes(path: fs.PathLike, atime: string | number | Date, mtime: string | number | Date): Promise<void> {\n\t\treturn promisify(fs.utimes)(path, atime, mtime);\n\t}\n\n\tpublic async write(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): Promise<{ bytesWritten: number, buffer: Buffer }> {\n\t\treturn promisify(fs.write)(fd, buffer, offset, length, position);\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic writeFile (path: fs.PathLike | number, data: any, options: IEncodingOptions): Promise<void>  {\n\t\treturn promisify(fs.writeFile)(path, data, options);\n\t}\n\n\tpublic async watch(filename: fs.PathLike, options?: IEncodingOptions): Promise<WatcherProxy> {\n\t\treturn new WatcherProxy(fs.watch(filename, options));\n\t}\n\n\tprivate makeStatsSerializable(stats: fs.Stats): Stats {\n\t\treturn {\n\t\t\t...stats,\n\t\t\t/**\n\t\t\t * We need to check if functions exist because nexe's implemented FS\n\t\t\t * lib doesnt implement fs.stats properly.\n\t\t\t */\n\t\t\t_isBlockDevice: stats.isBlockDevice ? stats.isBlockDevice() : false,\n\t\t\t_isCharacterDevice: stats.isCharacterDevice ? stats.isCharacterDevice() : false,\n\t\t\t_isDirectory: stats.isDirectory(),\n\t\t\t_isFIFO: stats.isFIFO ? stats.isFIFO() : false,\n\t\t\t_isFile: stats.isFile(),\n\t\t\t_isSocket: stats.isSocket ? stats.isSocket() : false,\n\t\t\t_isSymbolicLink: stats.isSymbolicLink ? stats.isSymbolicLink() : false,\n\t\t};\n\t}\n}\n"]}]}