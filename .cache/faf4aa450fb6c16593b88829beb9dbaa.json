{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/contextmenu/contextmenu.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/contextmenu/contextmenu.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/browser/dom\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/editor/browser/editorBrowser\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorCommon\", \"vs/editor/common/editorContextKeys\", \"vs/platform/actions/common/actions\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/keybinding/common/keybinding\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, nls, dom, actionbar_1, keyCodes_1, lifecycle_1, editorBrowser_1, editorExtensions_1, editorCommon_1, editorContextKeys_1, actions_1, contextkey_1, contextView_1, keybinding_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ContextMenuController = class ContextMenuController {\n        constructor(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService) {\n            this._contextMenuService = _contextMenuService;\n            this._contextViewService = _contextViewService;\n            this._contextKeyService = _contextKeyService;\n            this._keybindingService = _keybindingService;\n            this._menuService = _menuService;\n            this._toDispose = [];\n            this._contextMenuIsBeingShownCount = 0;\n            this._editor = editor;\n            this._toDispose.push(this._editor.onContextMenu((e) => this._onContextMenu(e)));\n            this._toDispose.push(this._editor.onDidScrollChange((e) => {\n                if (this._contextMenuIsBeingShownCount > 0 && e.scrollTopChanged) {\n                    this._contextViewService.hideContextView();\n                }\n            }));\n            this._toDispose.push(this._editor.onKeyDown((e) => {\n                if (e.keyCode === keyCodes_1.KeyCode.ContextMenu) {\n                    // Chrome is funny like that\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.showContextMenu();\n                }\n            }));\n        }\n        static get(editor) {\n            return editor.getContribution(ContextMenuController.ID);\n        }\n        _onContextMenu(e) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            if (!this._editor.getConfiguration().contribInfo.contextmenu) {\n                this._editor.focus();\n                // Ensure the cursor is at the position of the mouse click\n                if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {\n                    this._editor.setPosition(e.target.position);\n                }\n                return; // Context menu is turned off through configuration\n            }\n            if (e.target.type === editorBrowser_1.MouseTargetType.OVERLAY_WIDGET) {\n                return; // allow native menu on widgets to support right click on input field for example in find\n            }\n            e.event.preventDefault();\n            if (e.target.type !== editorBrowser_1.MouseTargetType.CONTENT_TEXT && e.target.type !== editorBrowser_1.MouseTargetType.CONTENT_EMPTY && e.target.type !== editorBrowser_1.MouseTargetType.TEXTAREA) {\n                return; // only support mouse click into text or native context menu key for now\n            }\n            // Ensure the editor gets focus if it hasn't, so the right events are being sent to other contributions\n            this._editor.focus();\n            // Ensure the cursor is at the position of the mouse click\n            if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {\n                this._editor.setPosition(e.target.position);\n            }\n            // Unless the user triggerd the context menu through Shift+F10, use the mouse position as menu position\n            let anchor = null;\n            if (e.target.type !== editorBrowser_1.MouseTargetType.TEXTAREA) {\n                anchor = { x: e.event.posx - 1, width: 2, y: e.event.posy - 1, height: 2 };\n            }\n            // Show the context menu\n            this.showContextMenu(anchor);\n        }\n        showContextMenu(anchor) {\n            if (!this._editor.getConfiguration().contribInfo.contextmenu) {\n                return; // Context menu is turned off through configuration\n            }\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            if (!this._contextMenuService) {\n                this._editor.focus();\n                return; // We need the context menu service to function\n            }\n            // Find actions available for menu\n            const menuActions = this._getMenuActions(this._editor.getModel());\n            // Show menu if we have actions to show\n            if (menuActions.length > 0) {\n                this._doShowContextMenu(menuActions, anchor);\n            }\n        }\n        _getMenuActions(model) {\n            const result = [];\n            let contextMenu = this._menuService.createMenu(actions_1.MenuId.EditorContext, this._contextKeyService);\n            const groups = contextMenu.getActions({ arg: model.uri });\n            contextMenu.dispose();\n            for (let group of groups) {\n                const [, actions] = group;\n                result.push(...actions);\n                result.push(new actionbar_1.Separator());\n            }\n            result.pop(); // remove last separator\n            return result;\n        }\n        _doShowContextMenu(actions, anchor = null) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            // Disable hover\n            const oldHoverSetting = this._editor.getConfiguration().contribInfo.hover;\n            this._editor.updateOptions({\n                hover: {\n                    enabled: false\n                }\n            });\n            if (!anchor) {\n                // Ensure selection is visible\n                this._editor.revealPosition(this._editor.getPosition(), editorCommon_1.ScrollType.Immediate);\n                this._editor.render();\n                const cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition());\n                // Translate to absolute editor position\n                const editorCoords = dom.getDomNodePagePosition(this._editor.getDomNode());\n                const posx = editorCoords.left + cursorCoords.left;\n                const posy = editorCoords.top + cursorCoords.top + cursorCoords.height;\n                anchor = { x: posx, y: posy };\n            }\n            // Show menu\n            this._contextMenuIsBeingShownCount++;\n            this._contextMenuService.showContextMenu({\n                getAnchor: () => anchor,\n                getActions: () => actions,\n                getActionItem: (action) => {\n                    const keybinding = this._keybindingFor(action);\n                    if (keybinding) {\n                        return new actionbar_1.ActionItem(action, action, { label: true, keybinding: keybinding.getLabel(), isMenu: true });\n                    }\n                    const customActionItem = action;\n                    if (typeof customActionItem.getActionItem === 'function') {\n                        return customActionItem.getActionItem();\n                    }\n                    return new actionbar_1.ActionItem(action, action, { icon: true, label: true, isMenu: true });\n                },\n                getKeyBinding: (action) => {\n                    return this._keybindingFor(action);\n                },\n                onHide: (wasCancelled) => {\n                    this._contextMenuIsBeingShownCount--;\n                    this._editor.focus();\n                    this._editor.updateOptions({\n                        hover: oldHoverSetting\n                    });\n                }\n            });\n        }\n        _keybindingFor(action) {\n            return this._keybindingService.lookupKeybinding(action.id);\n        }\n        getId() {\n            return ContextMenuController.ID;\n        }\n        dispose() {\n            if (this._contextMenuIsBeingShownCount > 0) {\n                this._contextViewService.hideContextView();\n            }\n            this._toDispose = lifecycle_1.dispose(this._toDispose);\n        }\n    };\n    ContextMenuController.ID = 'editor.contrib.contextmenu';\n    ContextMenuController = __decorate([\n        __param(1, contextView_1.IContextMenuService),\n        __param(2, contextView_1.IContextViewService),\n        __param(3, contextkey_1.IContextKeyService),\n        __param(4, keybinding_1.IKeybindingService),\n        __param(5, actions_1.IMenuService)\n    ], ContextMenuController);\n    exports.ContextMenuController = ContextMenuController;\n    class ShowContextMenu extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.showContextMenu',\n                label: nls.localize('action.showContextMenu.label', \"Show Editor Context Menu\"),\n                alias: 'Show Editor Context Menu',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F10,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            let contribution = ContextMenuController.get(editor);\n            contribution.showContextMenu();\n        }\n    }\n    editorExtensions_1.registerEditorContribution(ContextMenuController);\n    editorExtensions_1.registerEditorAction(ShowContextMenu);\n});\n",null]}