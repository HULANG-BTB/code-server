{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/bulkEdit/browser/bulkEditService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/bulkEdit/browser/bulkEditService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar bulkEditService_1 = require(\"vs/editor/browser/services/bulkEditService\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar nls_1 = require(\"vs/nls\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar Recording = /** @class */ (function () {\n    function Recording() {\n    }\n    Recording.start = function (fileService) {\n        var _changes = new Set();\n        var subscription = fileService.onAfterOperation(function (e) {\n            _changes.add(e.resource.toString());\n        });\n        return {\n            stop: function () { return subscription.dispose(); },\n            hasChanged: function (resource) { return _changes.has(resource.toString()); }\n        };\n    };\n    return Recording;\n}());\nvar ModelEditTask = /** @class */ (function () {\n    function ModelEditTask(_modelReference) {\n        this._modelReference = _modelReference;\n        this._model = this._modelReference.object.textEditorModel;\n        this._edits = [];\n    }\n    ModelEditTask.prototype.dispose = function () {\n        lifecycle_1.dispose(this._modelReference);\n    };\n    ModelEditTask.prototype.addEdit = function (resourceEdit) {\n        this._expectedModelVersionId = resourceEdit.modelVersionId;\n        for (var _i = 0, _a = resourceEdit.edits; _i < _a.length; _i++) {\n            var edit = _a[_i];\n            if (typeof edit.eol === 'number') {\n                // honor eol-change\n                this._newEol = edit.eol;\n            }\n            if (!edit.range && !edit.text) {\n                // lacks both a range and the text\n                continue;\n            }\n            if (range_1.Range.isEmpty(edit.range) && !edit.text) {\n                // no-op edit (replace empty range with empty text)\n                continue;\n            }\n            // create edit operation\n            var range = void 0;\n            if (!edit.range) {\n                range = this._model.getFullModelRange();\n            }\n            else {\n                range = range_1.Range.lift(edit.range);\n            }\n            this._edits.push(editOperation_1.EditOperation.replaceMove(range, edit.text));\n        }\n    };\n    ModelEditTask.prototype.validate = function () {\n        if (typeof this._expectedModelVersionId === 'undefined' || this._model.getVersionId() === this._expectedModelVersionId) {\n            return { canApply: true };\n        }\n        return { canApply: false, reason: this._model.uri };\n    };\n    ModelEditTask.prototype.apply = function () {\n        if (this._edits.length > 0) {\n            this._edits = arrays_1.mergeSort(this._edits, function (a, b) { return range_1.Range.compareRangesUsingStarts(a.range, b.range); });\n            this._model.pushStackElement();\n            this._model.pushEditOperations([], this._edits, function () { return []; });\n            this._model.pushStackElement();\n        }\n        if (this._newEol !== undefined) {\n            this._model.pushStackElement();\n            this._model.pushEOL(this._newEol);\n            this._model.pushStackElement();\n        }\n    };\n    return ModelEditTask;\n}());\nvar EditorEditTask = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorEditTask, _super);\n    function EditorEditTask(modelReference, editor) {\n        var _this = _super.call(this, modelReference) || this;\n        _this._editor = editor;\n        return _this;\n    }\n    EditorEditTask.prototype.apply = function () {\n        if (this._edits.length > 0) {\n            this._edits = arrays_1.mergeSort(this._edits, function (a, b) { return range_1.Range.compareRangesUsingStarts(a.range, b.range); });\n            this._editor.pushUndoStop();\n            this._editor.executeEdits('', this._edits);\n            this._editor.pushUndoStop();\n        }\n        if (this._newEol !== undefined) {\n            if (this._editor.hasModel()) {\n                this._editor.pushUndoStop();\n                this._editor.getModel().pushEOL(this._newEol);\n                this._editor.pushUndoStop();\n            }\n        }\n    };\n    return EditorEditTask;\n}(ModelEditTask));\nvar BulkEditModel = /** @class */ (function () {\n    function BulkEditModel(textModelResolverService, editor, edits, progress) {\n        this._edits = new Map();\n        this._textModelResolverService = textModelResolverService;\n        this._editor = editor;\n        this._progress = progress;\n        edits.forEach(this.addEdit, this);\n    }\n    BulkEditModel.prototype.dispose = function () {\n        this._tasks = lifecycle_1.dispose(this._tasks);\n    };\n    BulkEditModel.prototype.addEdit = function (edit) {\n        var array = this._edits.get(edit.resource.toString());\n        if (!array) {\n            array = [];\n            this._edits.set(edit.resource.toString(), array);\n        }\n        array.push(edit);\n    };\n    BulkEditModel.prototype.prepare = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var promises;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._tasks) {\n                            throw new Error('illegal state - already prepared');\n                        }\n                        this._tasks = [];\n                        promises = [];\n                        this._edits.forEach(function (value, key) {\n                            var promise = _this._textModelResolverService.createModelReference(uri_1.URI.parse(key)).then(function (ref) {\n                                var model = ref.object;\n                                if (!model || !model.textEditorModel) {\n                                    throw new Error(\"Cannot load file \" + key);\n                                }\n                                var task;\n                                if (_this._editor && _this._editor.hasModel() && _this._editor.getModel().uri.toString() === model.textEditorModel.uri.toString()) {\n                                    task = new EditorEditTask(ref, _this._editor);\n                                }\n                                else {\n                                    task = new ModelEditTask(ref);\n                                }\n                                value.forEach(function (edit) { return task.addEdit(edit); });\n                                _this._tasks.push(task);\n                                _this._progress.report(undefined);\n                            });\n                            promises.push(promise);\n                        });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    BulkEditModel.prototype.validate = function () {\n        for (var _i = 0, _a = this._tasks; _i < _a.length; _i++) {\n            var task = _a[_i];\n            var result = task.validate();\n            if (!result.canApply) {\n                return result;\n            }\n        }\n        return { canApply: true };\n    };\n    BulkEditModel.prototype.apply = function () {\n        for (var _i = 0, _a = this._tasks; _i < _a.length; _i++) {\n            var task = _a[_i];\n            task.apply();\n            this._progress.report(undefined);\n        }\n    };\n    return BulkEditModel;\n}());\nvar BulkEdit = /** @class */ (function () {\n    function BulkEdit(editor, progress, _logService, _textModelService, _fileService, _textFileService, _uriLabelServie, _configurationService) {\n        this._logService = _logService;\n        this._textModelService = _textModelService;\n        this._fileService = _fileService;\n        this._textFileService = _textFileService;\n        this._uriLabelServie = _uriLabelServie;\n        this._configurationService = _configurationService;\n        this._edits = [];\n        this._editor = editor;\n        this._progress = progress || progress_1.emptyProgressRunner;\n    }\n    BulkEdit.prototype.add = function (edits) {\n        var _a;\n        if (Array.isArray(edits)) {\n            (_a = this._edits).push.apply(_a, edits);\n        }\n        else {\n            this._edits.push(edits);\n        }\n    };\n    BulkEdit.prototype.ariaMessage = function () {\n        var editCount = this._edits.reduce(function (prev, cur) { return modes_1.isResourceFileEdit(cur) ? prev : prev + cur.edits.length; }, 0);\n        var resourceCount = this._edits.length;\n        if (editCount === 0) {\n            return nls_1.localize('summary.0', \"Made no edits\");\n        }\n        else if (editCount > 1 && resourceCount > 1) {\n            return nls_1.localize('summary.nm', \"Made {0} text edits in {1} files\", editCount, resourceCount);\n        }\n        else {\n            return nls_1.localize('summary.n0', \"Made {0} text edits in one file\", editCount, resourceCount);\n        }\n    };\n    BulkEdit.prototype.perform = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var seen, total, groups, group, _i, _a, edit, progress, _b, groups_1, group_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        seen = new Set();\n                        total = 0;\n                        groups = [];\n                        for (_i = 0, _a = this._edits; _i < _a.length; _i++) {\n                            edit = _a[_i];\n                            if (!group\n                                || (modes_1.isResourceFileEdit(group[0]) && !modes_1.isResourceFileEdit(edit))\n                                || (modes_1.isResourceTextEdit(group[0]) && !modes_1.isResourceTextEdit(edit))) {\n                                group = [];\n                                groups.push(group);\n                            }\n                            group.push(edit);\n                            if (modes_1.isResourceFileEdit(edit)) {\n                                total += 1;\n                            }\n                            else if (!seen.has(edit.resource.toString())) {\n                                seen.add(edit.resource.toString());\n                                total += 2;\n                            }\n                        }\n                        // define total work and progress callback\n                        // for child operations\n                        if (this._progress) {\n                            this._progress.total(total);\n                        }\n                        progress = { report: function (_) { return _this._progress && _this._progress.worked(1); } };\n                        _b = 0, groups_1 = groups;\n                        _c.label = 1;\n                    case 1:\n                        if (!(_b < groups_1.length)) return [3 /*break*/, 6];\n                        group_1 = groups_1[_b];\n                        if (!modes_1.isResourceFileEdit(group_1[0])) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._performFileEdits(group_1, progress)];\n                    case 2:\n                        _c.sent();\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this._performTextEdits(group_1, progress)];\n                    case 4:\n                        _c.sent();\n                        _c.label = 5;\n                    case 5:\n                        _b++;\n                        return [3 /*break*/, 1];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BulkEdit.prototype._performFileEdits = function (edits, progress) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _i, edits_1, edit, options, _a, useTrash, _b, _c;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        this._logService.debug('_performFileEdits', JSON.stringify(edits));\n                        _i = 0, edits_1 = edits;\n                        _d.label = 1;\n                    case 1:\n                        if (!(_i < edits_1.length)) return [3 /*break*/, 17];\n                        edit = edits_1[_i];\n                        progress.report(undefined);\n                        options = edit.options || {};\n                        if (!(edit.newUri && edit.oldUri)) return [3 /*break*/, 5];\n                        _a = options.overwrite === undefined && options.ignoreIfExists;\n                        if (!_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._fileService.existsFile(edit.newUri)];\n                    case 2:\n                        _a = (_d.sent());\n                        _d.label = 3;\n                    case 3:\n                        // rename\n                        if (_a) {\n                            return [3 /*break*/, 16]; // not overwriting, but ignoring, and the target file exists\n                        }\n                        return [4 /*yield*/, this._textFileService.move(edit.oldUri, edit.newUri, options.overwrite)];\n                    case 4:\n                        _d.sent();\n                        return [3 /*break*/, 16];\n                    case 5:\n                        if (!(!edit.newUri && edit.oldUri)) return [3 /*break*/, 12];\n                        return [4 /*yield*/, this._fileService.existsFile(edit.oldUri)];\n                    case 6:\n                        if (!_d.sent()) return [3 /*break*/, 10];\n                        useTrash = this._configurationService.getValue('files.enableTrash');\n                        _b = useTrash;\n                        if (!_b) return [3 /*break*/, 8];\n                        return [4 /*yield*/, this._fileService.hasCapability(edit.oldUri, files_1.FileSystemProviderCapabilities.Trash)];\n                    case 7:\n                        _b = !(_d.sent());\n                        _d.label = 8;\n                    case 8:\n                        if (_b) {\n                            useTrash = false; // not supported by provider\n                        }\n                        return [4 /*yield*/, this._textFileService.delete(edit.oldUri, { useTrash: useTrash, recursive: options.recursive })];\n                    case 9:\n                        _d.sent();\n                        return [3 /*break*/, 11];\n                    case 10:\n                        if (!options.ignoreIfNotExists) {\n                            throw new Error(edit.oldUri + \" does not exist and can not be deleted\");\n                        }\n                        _d.label = 11;\n                    case 11: return [3 /*break*/, 16];\n                    case 12:\n                        if (!(edit.newUri && !edit.oldUri)) return [3 /*break*/, 16];\n                        _c = options.overwrite === undefined && options.ignoreIfExists;\n                        if (!_c) return [3 /*break*/, 14];\n                        return [4 /*yield*/, this._fileService.existsFile(edit.newUri)];\n                    case 13:\n                        _c = (_d.sent());\n                        _d.label = 14;\n                    case 14:\n                        // create file\n                        if (_c) {\n                            return [3 /*break*/, 16]; // not overwriting, but ignoring, and the target file exists\n                        }\n                        return [4 /*yield*/, this._textFileService.create(edit.newUri, undefined, { overwrite: options.overwrite })];\n                    case 15:\n                        _d.sent();\n                        _d.label = 16;\n                    case 16:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 17: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BulkEdit.prototype._performTextEdits = function (edits, progress) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var recording, model, conflicts, validationResult;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._logService.debug('_performTextEdits', JSON.stringify(edits));\n                        recording = Recording.start(this._fileService);\n                        model = new BulkEditModel(this._textModelService, this._editor, edits, progress);\n                        return [4 /*yield*/, model.prepare()];\n                    case 1:\n                        _a.sent();\n                        conflicts = edits\n                            .filter(function (edit) { return recording.hasChanged(edit.resource); })\n                            .map(function (edit) { return _this._uriLabelServie.getUriLabel(edit.resource, { relative: true }); });\n                        recording.stop();\n                        if (conflicts.length > 0) {\n                            model.dispose();\n                            throw new Error(nls_1.localize('conflict', \"These files have changed in the meantime: {0}\", conflicts.join(', ')));\n                        }\n                        validationResult = model.validate();\n                        if (validationResult.canApply === false) {\n                            throw new Error(validationResult.reason.toString() + \" has changed in the meantime\");\n                        }\n                        return [4 /*yield*/, model.apply()];\n                    case 2:\n                        _a.sent();\n                        model.dispose();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    BulkEdit = tslib_1.__decorate([\n        tslib_1.__param(2, log_1.ILogService),\n        tslib_1.__param(3, resolverService_1.ITextModelService),\n        tslib_1.__param(4, files_1.IFileService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, label_1.ILabelService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], BulkEdit);\n    return BulkEdit;\n}());\nexports.BulkEdit = BulkEdit;\nvar BulkEditService = /** @class */ (function () {\n    function BulkEditService(_logService, _modelService, _editorService, _textModelService, _fileService, _textFileService, _labelService, _configurationService) {\n        this._logService = _logService;\n        this._modelService = _modelService;\n        this._editorService = _editorService;\n        this._textModelService = _textModelService;\n        this._fileService = _fileService;\n        this._textFileService = _textFileService;\n        this._labelService = _labelService;\n        this._configurationService = _configurationService;\n    }\n    BulkEditService.prototype.apply = function (edit, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var edits = edit.edits;\n        var codeEditor = options.editor;\n        // First check if loaded models were not changed in the meantime\n        for (var _i = 0, edits_2 = edits; _i < edits_2.length; _i++) {\n            var edit_1 = edits_2[_i];\n            if (!modes_1.isResourceFileEdit(edit_1) && typeof edit_1.modelVersionId === 'number') {\n                var model = this._modelService.getModel(edit_1.resource);\n                if (model && model.getVersionId() !== edit_1.modelVersionId) {\n                    // model changed in the meantime\n                    return Promise.reject(new Error(model.uri.toString() + \" has changed in the meantime\"));\n                }\n            }\n        }\n        // try to find code editor\n        // todo@joh, prefer edit that gets edited\n        if (!codeEditor) {\n            var candidate = this._editorService.activeTextEditorWidget;\n            if (editorBrowser_1.isCodeEditor(candidate)) {\n                codeEditor = candidate;\n            }\n        }\n        if (codeEditor && codeEditor.getConfiguration().readOnly) {\n            // If the code editor is readonly still allow bulk edits to be applied #68549\n            codeEditor = undefined;\n        }\n        var bulkEdit = new BulkEdit(codeEditor, options.progress, this._logService, this._textModelService, this._fileService, this._textFileService, this._labelService, this._configurationService);\n        bulkEdit.add(edits);\n        return bulkEdit.perform().then(function () {\n            return { ariaSummary: bulkEdit.ariaMessage() };\n        }).catch(function (err) {\n            // console.log('apply FAILED');\n            // console.log(err);\n            _this._logService.error(err);\n            throw err;\n        });\n    };\n    BulkEditService = tslib_1.__decorate([\n        tslib_1.__param(0, log_1.ILogService),\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, resolverService_1.ITextModelService),\n        tslib_1.__param(4, files_1.IFileService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, label_1.ILabelService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], BulkEditService);\n    return BulkEditService;\n}());\nexports.BulkEditService = BulkEditService;\nextensions_1.registerSingleton(bulkEditService_1.IBulkEditService, BulkEditService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/bulkEdit/browser/bulkEditService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/bulkEdit/browser/bulkEditService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mergeSort } from 'vs/base/common/arrays';\nimport { dispose, IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IBulkEditOptions, IBulkEditResult, IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EndOfLineSequence, IIdentifiedSingleEditOperation, ITextModel } from 'vs/editor/common/model';\nimport { isResourceFileEdit, isResourceTextEdit, ResourceFileEdit, ResourceTextEdit, WorkspaceEdit } from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { IFileService, FileSystemProviderCapabilities } from 'vs/platform/files/common/files';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { emptyProgressRunner, IProgress, IProgressRunner } from 'vs/platform/progress/common/progress';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nabstract class Recording {\n\n\tstatic start(fileService: IFileService): Recording {\n\n\t\tlet _changes = new Set<string>();\n\t\tlet subscription = fileService.onAfterOperation(e => {\n\t\t\t_changes.add(e.resource.toString());\n\t\t});\n\n\t\treturn {\n\t\t\tstop() { return subscription.dispose(); },\n\t\t\thasChanged(resource) { return _changes.has(resource.toString()); }\n\t\t};\n\t}\n\n\tabstract stop(): void;\n\tabstract hasChanged(resource: URI): boolean;\n}\n\ntype ValidationResult = { canApply: true } | { canApply: false, reason: URI };\n\nclass ModelEditTask implements IDisposable {\n\n\tprivate readonly _model: ITextModel;\n\n\tprotected _edits: IIdentifiedSingleEditOperation[];\n\tprivate _expectedModelVersionId: number | undefined;\n\tprotected _newEol: EndOfLineSequence;\n\n\tconstructor(private readonly _modelReference: IReference<IResolvedTextEditorModel>) {\n\t\tthis._model = this._modelReference.object.textEditorModel;\n\t\tthis._edits = [];\n\t}\n\n\tdispose() {\n\t\tdispose(this._modelReference);\n\t}\n\n\taddEdit(resourceEdit: ResourceTextEdit): void {\n\t\tthis._expectedModelVersionId = resourceEdit.modelVersionId;\n\t\tfor (const edit of resourceEdit.edits) {\n\t\t\tif (typeof edit.eol === 'number') {\n\t\t\t\t// honor eol-change\n\t\t\t\tthis._newEol = edit.eol;\n\t\t\t}\n\t\t\tif (!edit.range && !edit.text) {\n\t\t\t\t// lacks both a range and the text\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (Range.isEmpty(edit.range) && !edit.text) {\n\t\t\t\t// no-op edit (replace empty range with empty text)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// create edit operation\n\t\t\tlet range: Range;\n\t\t\tif (!edit.range) {\n\t\t\t\trange = this._model.getFullModelRange();\n\t\t\t} else {\n\t\t\t\trange = Range.lift(edit.range);\n\t\t\t}\n\t\t\tthis._edits.push(EditOperation.replaceMove(range, edit.text));\n\t\t}\n\t}\n\n\tvalidate(): ValidationResult {\n\t\tif (typeof this._expectedModelVersionId === 'undefined' || this._model.getVersionId() === this._expectedModelVersionId) {\n\t\t\treturn { canApply: true };\n\t\t}\n\t\treturn { canApply: false, reason: this._model.uri };\n\t}\n\n\tapply(): void {\n\t\tif (this._edits.length > 0) {\n\t\t\tthis._edits = mergeSort(this._edits, (a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\tthis._model.pushStackElement();\n\t\t\tthis._model.pushEditOperations([], this._edits, () => []);\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tthis._model.pushStackElement();\n\t\t\tthis._model.pushEOL(this._newEol);\n\t\t\tthis._model.pushStackElement();\n\t\t}\n\t}\n}\n\nclass EditorEditTask extends ModelEditTask {\n\n\tprivate _editor: ICodeEditor;\n\n\tconstructor(modelReference: IReference<IResolvedTextEditorModel>, editor: ICodeEditor) {\n\t\tsuper(modelReference);\n\t\tthis._editor = editor;\n\t}\n\n\tapply(): void {\n\t\tif (this._edits.length > 0) {\n\t\t\tthis._edits = mergeSort(this._edits, (a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\tthis._editor.pushUndoStop();\n\t\t\tthis._editor.executeEdits('', this._edits);\n\t\t\tthis._editor.pushUndoStop();\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tif (this._editor.hasModel()) {\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t\tthis._editor.getModel().pushEOL(this._newEol);\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass BulkEditModel implements IDisposable {\n\n\tprivate _textModelResolverService: ITextModelService;\n\tprivate _edits = new Map<string, ResourceTextEdit[]>();\n\tprivate _editor: ICodeEditor | undefined;\n\tprivate _tasks: ModelEditTask[];\n\tprivate _progress: IProgress<void>;\n\n\tconstructor(\n\t\ttextModelResolverService: ITextModelService,\n\t\teditor: ICodeEditor | undefined,\n\t\tedits: ResourceTextEdit[],\n\t\tprogress: IProgress<void>\n\t) {\n\t\tthis._textModelResolverService = textModelResolverService;\n\t\tthis._editor = editor;\n\t\tthis._progress = progress;\n\n\t\tedits.forEach(this.addEdit, this);\n\t}\n\n\tdispose(): void {\n\t\tthis._tasks = dispose(this._tasks);\n\t}\n\n\taddEdit(edit: ResourceTextEdit): void {\n\t\tlet array = this._edits.get(edit.resource.toString());\n\t\tif (!array) {\n\t\t\tarray = [];\n\t\t\tthis._edits.set(edit.resource.toString(), array);\n\t\t}\n\t\tarray.push(edit);\n\t}\n\n\tasync prepare(): Promise<BulkEditModel> {\n\n\t\tif (this._tasks) {\n\t\t\tthrow new Error('illegal state - already prepared');\n\t\t}\n\n\t\tthis._tasks = [];\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tthis._edits.forEach((value, key) => {\n\t\t\tconst promise = this._textModelResolverService.createModelReference(URI.parse(key)).then(ref => {\n\t\t\t\tconst model = ref.object;\n\n\t\t\t\tif (!model || !model.textEditorModel) {\n\t\t\t\t\tthrow new Error(`Cannot load file ${key}`);\n\t\t\t\t}\n\n\t\t\t\tlet task: ModelEditTask;\n\t\t\t\tif (this._editor && this._editor.hasModel() && this._editor.getModel().uri.toString() === model.textEditorModel.uri.toString()) {\n\t\t\t\t\ttask = new EditorEditTask(ref, this._editor);\n\t\t\t\t} else {\n\t\t\t\t\ttask = new ModelEditTask(ref);\n\t\t\t\t}\n\n\t\t\t\tvalue.forEach(edit => task.addEdit(edit));\n\t\t\t\tthis._tasks.push(task);\n\t\t\t\tthis._progress.report(undefined);\n\t\t\t});\n\t\t\tpromises.push(promise);\n\t\t});\n\n\t\tawait Promise.all(promises);\n\n\t\treturn this;\n\t}\n\n\tvalidate(): ValidationResult {\n\t\tfor (const task of this._tasks) {\n\t\t\tconst result = task.validate();\n\t\t\tif (!result.canApply) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { canApply: true };\n\t}\n\n\tapply(): void {\n\t\tfor (const task of this._tasks) {\n\t\t\ttask.apply();\n\t\t\tthis._progress.report(undefined);\n\t\t}\n\t}\n}\n\nexport type Edit = ResourceFileEdit | ResourceTextEdit;\n\nexport class BulkEdit {\n\n\tprivate _edits: Edit[] = [];\n\tprivate _editor: ICodeEditor | undefined;\n\tprivate _progress?: IProgressRunner;\n\n\tconstructor(\n\t\teditor: ICodeEditor | undefined,\n\t\tprogress: IProgressRunner | undefined,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@ILabelService private readonly _uriLabelServie: ILabelService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tthis._editor = editor;\n\t\tthis._progress = progress || emptyProgressRunner;\n\t}\n\n\tadd(edits: Edit[] | Edit): void {\n\t\tif (Array.isArray(edits)) {\n\t\t\tthis._edits.push(...edits);\n\t\t} else {\n\t\t\tthis._edits.push(edits);\n\t\t}\n\t}\n\n\tariaMessage(): string {\n\t\tconst editCount = this._edits.reduce((prev, cur) => isResourceFileEdit(cur) ? prev : prev + cur.edits.length, 0);\n\t\tconst resourceCount = this._edits.length;\n\t\tif (editCount === 0) {\n\t\t\treturn localize('summary.0', \"Made no edits\");\n\t\t} else if (editCount > 1 && resourceCount > 1) {\n\t\t\treturn localize('summary.nm', \"Made {0} text edits in {1} files\", editCount, resourceCount);\n\t\t} else {\n\t\t\treturn localize('summary.n0', \"Made {0} text edits in one file\", editCount, resourceCount);\n\t\t}\n\t}\n\n\tasync perform(): Promise<void> {\n\n\t\tlet seen = new Set<string>();\n\t\tlet total = 0;\n\n\t\tconst groups: Edit[][] = [];\n\t\tlet group: Edit[] | undefined;\n\t\tfor (const edit of this._edits) {\n\t\t\tif (!group\n\t\t\t\t|| (isResourceFileEdit(group[0]) && !isResourceFileEdit(edit))\n\t\t\t\t|| (isResourceTextEdit(group[0]) && !isResourceTextEdit(edit))\n\t\t\t) {\n\t\t\t\tgroup = [];\n\t\t\t\tgroups.push(group);\n\t\t\t}\n\t\t\tgroup.push(edit);\n\n\t\t\tif (isResourceFileEdit(edit)) {\n\t\t\t\ttotal += 1;\n\t\t\t} else if (!seen.has(edit.resource.toString())) {\n\t\t\t\tseen.add(edit.resource.toString());\n\t\t\t\ttotal += 2;\n\t\t\t}\n\t\t}\n\n\t\t// define total work and progress callback\n\t\t// for child operations\n\t\tif (this._progress) {\n\t\t\tthis._progress.total(total);\n\t\t}\n\t\tlet progress: IProgress<void> = { report: _ => this._progress && this._progress.worked(1) };\n\n\t\t// do it.\n\t\tfor (const group of groups) {\n\t\t\tif (isResourceFileEdit(group[0])) {\n\t\t\t\tawait this._performFileEdits(<ResourceFileEdit[]>group, progress);\n\t\t\t} else {\n\t\t\t\tawait this._performTextEdits(<ResourceTextEdit[]>group, progress);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _performFileEdits(edits: ResourceFileEdit[], progress: IProgress<void>) {\n\t\tthis._logService.debug('_performFileEdits', JSON.stringify(edits));\n\t\tfor (const edit of edits) {\n\t\t\tprogress.report(undefined);\n\n\t\t\tlet options = edit.options || {};\n\n\t\t\tif (edit.newUri && edit.oldUri) {\n\t\t\t\t// rename\n\t\t\t\tif (options.overwrite === undefined && options.ignoreIfExists && await this._fileService.existsFile(edit.newUri)) {\n\t\t\t\t\tcontinue; // not overwriting, but ignoring, and the target file exists\n\t\t\t\t}\n\t\t\t\tawait this._textFileService.move(edit.oldUri, edit.newUri, options.overwrite);\n\n\t\t\t} else if (!edit.newUri && edit.oldUri) {\n\t\t\t\t// delete file\n\t\t\t\tif (await this._fileService.existsFile(edit.oldUri)) {\n\t\t\t\t\tlet useTrash = this._configurationService.getValue<boolean>('files.enableTrash');\n\t\t\t\t\tif (useTrash && !(await this._fileService.hasCapability(edit.oldUri, FileSystemProviderCapabilities.Trash))) {\n\t\t\t\t\t\tuseTrash = false; // not supported by provider\n\t\t\t\t\t}\n\t\t\t\t\tawait this._textFileService.delete(edit.oldUri, { useTrash, recursive: options.recursive });\n\t\t\t\t} else if (!options.ignoreIfNotExists) {\n\t\t\t\t\tthrow new Error(`${edit.oldUri} does not exist and can not be deleted`);\n\t\t\t\t}\n\t\t\t} else if (edit.newUri && !edit.oldUri) {\n\t\t\t\t// create file\n\t\t\t\tif (options.overwrite === undefined && options.ignoreIfExists && await this._fileService.existsFile(edit.newUri)) {\n\t\t\t\t\tcontinue; // not overwriting, but ignoring, and the target file exists\n\t\t\t\t}\n\t\t\t\tawait this._textFileService.create(edit.newUri, undefined, { overwrite: options.overwrite });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _performTextEdits(edits: ResourceTextEdit[], progress: IProgress<void>): Promise<void> {\n\t\tthis._logService.debug('_performTextEdits', JSON.stringify(edits));\n\n\t\tconst recording = Recording.start(this._fileService);\n\t\tconst model = new BulkEditModel(this._textModelService, this._editor, edits, progress);\n\n\t\tawait model.prepare();\n\n\t\tconst conflicts = edits\n\t\t\t.filter(edit => recording.hasChanged(edit.resource))\n\t\t\t.map(edit => this._uriLabelServie.getUriLabel(edit.resource, { relative: true }));\n\n\t\trecording.stop();\n\n\t\tif (conflicts.length > 0) {\n\t\t\tmodel.dispose();\n\t\t\tthrow new Error(localize('conflict', \"These files have changed in the meantime: {0}\", conflicts.join(', ')));\n\t\t}\n\n\t\tconst validationResult = model.validate();\n\t\tif (validationResult.canApply === false) {\n\t\t\tthrow new Error(`${validationResult.reason.toString()} has changed in the meantime`);\n\t\t}\n\n\t\tawait model.apply();\n\t\tmodel.dispose();\n\t}\n}\n\nexport class BulkEditService implements IBulkEditService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\n\t}\n\n\tapply(edit: WorkspaceEdit, options: IBulkEditOptions = {}): Promise<IBulkEditResult> {\n\n\t\tlet { edits } = edit;\n\t\tlet codeEditor = options.editor;\n\n\t\t// First check if loaded models were not changed in the meantime\n\t\tfor (const edit of edits) {\n\t\t\tif (!isResourceFileEdit(edit) && typeof edit.modelVersionId === 'number') {\n\t\t\t\tlet model = this._modelService.getModel(edit.resource);\n\t\t\t\tif (model && model.getVersionId() !== edit.modelVersionId) {\n\t\t\t\t\t// model changed in the meantime\n\t\t\t\t\treturn Promise.reject(new Error(`${model.uri.toString()} has changed in the meantime`));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// try to find code editor\n\t\t// todo@joh, prefer edit that gets edited\n\t\tif (!codeEditor) {\n\t\t\tlet candidate = this._editorService.activeTextEditorWidget;\n\t\t\tif (isCodeEditor(candidate)) {\n\t\t\t\tcodeEditor = candidate;\n\t\t\t}\n\t\t}\n\n\t\tif (codeEditor && codeEditor.getConfiguration().readOnly) {\n\t\t\t// If the code editor is readonly still allow bulk edits to be applied #68549\n\t\t\tcodeEditor = undefined;\n\t\t}\n\t\tconst bulkEdit = new BulkEdit(codeEditor, options.progress, this._logService, this._textModelService, this._fileService, this._textFileService, this._labelService, this._configurationService);\n\t\tbulkEdit.add(edits);\n\n\t\treturn bulkEdit.perform().then(() => {\n\t\t\treturn { ariaSummary: bulkEdit.ariaMessage() };\n\t\t}).catch(err => {\n\t\t\t// console.log('apply FAILED');\n\t\t\t// console.log(err);\n\t\t\tthis._logService.error(err);\n\t\t\tthrow err;\n\t\t});\n\t}\n}\n\nregisterSingleton(IBulkEditService, BulkEditService, true);\n"]}]}