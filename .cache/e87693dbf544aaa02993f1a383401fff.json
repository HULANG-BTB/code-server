{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/panel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/panel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar composite_1 = require(\"vs/workbench/browser/composite\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar Panel = /** @class */ (function (_super) {\n    tslib_1.__extends(Panel, _super);\n    function Panel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Panel;\n}(composite_1.Composite));\nexports.Panel = Panel;\n/**\n * A panel descriptor is a leightweight descriptor of a panel in the workbench.\n */\nvar PanelDescriptor = /** @class */ (function (_super) {\n    tslib_1.__extends(PanelDescriptor, _super);\n    function PanelDescriptor(ctor, id, name, cssClass, order, _commandId) {\n        return _super.call(this, ctor, id, name, cssClass, order, _commandId) || this;\n    }\n    return PanelDescriptor;\n}(composite_1.CompositeDescriptor));\nexports.PanelDescriptor = PanelDescriptor;\nvar PanelRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(PanelRegistry, _super);\n    function PanelRegistry() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Registers a panel to the platform.\n     */\n    PanelRegistry.prototype.registerPanel = function (descriptor) {\n        _super.prototype.registerComposite.call(this, descriptor);\n    };\n    /**\n     * Deregisters a panel to the platform.\n     */\n    PanelRegistry.prototype.deregisterPanel = function (id) {\n        _super.prototype.deregisterComposite.call(this, id);\n    };\n    /**\n     * Returns an array of registered panels known to the platform.\n     */\n    PanelRegistry.prototype.getPanels = function () {\n        return this.getComposites();\n    };\n    /**\n     * Sets the id of the panel that should open on startup by default.\n     */\n    PanelRegistry.prototype.setDefaultPanelId = function (id) {\n        this.defaultPanelId = id;\n    };\n    /**\n     * Gets the id of the panel that should open on startup by default.\n     */\n    PanelRegistry.prototype.getDefaultPanelId = function () {\n        return this.defaultPanelId;\n    };\n    /**\n     * Find out if a panel exists with the provided ID.\n     */\n    PanelRegistry.prototype.hasPanel = function (id) {\n        return this.getPanels().some(function (panel) { return panel.id === id; });\n    };\n    return PanelRegistry;\n}(composite_1.CompositeRegistry));\nexports.PanelRegistry = PanelRegistry;\n/**\n * A reusable action to toggle a panel with a specific id depending on focus.\n */\nvar TogglePanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TogglePanelAction, _super);\n    function TogglePanelAction(id, label, panelId, panelService, layoutService, cssClass) {\n        var _this = _super.call(this, id, label, cssClass) || this;\n        _this.panelId = panelId;\n        _this.panelService = panelService;\n        _this.layoutService = layoutService;\n        return _this;\n    }\n    TogglePanelAction.prototype.run = function () {\n        if (this.isPanelFocused()) {\n            this.layoutService.setPanelHidden(true);\n        }\n        else {\n            this.panelService.openPanel(this.panelId, true);\n        }\n        return Promise.resolve();\n    };\n    TogglePanelAction.prototype.isPanelActive = function () {\n        var activePanel = this.panelService.getActivePanel();\n        return !!activePanel && activePanel.getId() === this.panelId;\n    };\n    TogglePanelAction.prototype.isPanelFocused = function () {\n        var activeElement = document.activeElement;\n        return !!(this.isPanelActive() && activeElement && dom_1.isAncestor(activeElement, this.layoutService.getContainer(layoutService_1.Parts.PANEL_PART)));\n    };\n    return TogglePanelAction;\n}(actions_1.Action));\nexports.TogglePanelAction = TogglePanelAction;\nexports.Extensions = {\n    Panels: 'workbench.contributions.panels'\n};\nplatform_1.Registry.add(exports.Extensions.Panels, new PanelRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/panel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/panel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IPanel } from 'vs/workbench/common/panel';\nimport { Composite, CompositeDescriptor, CompositeRegistry } from 'vs/workbench/browser/composite';\nimport { Action } from 'vs/base/common/actions';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IConstructorSignature0 } from 'vs/platform/instantiation/common/instantiation';\nimport { isAncestor } from 'vs/base/browser/dom';\n\nexport abstract class Panel extends Composite implements IPanel { }\n\n/**\n * A panel descriptor is a leightweight descriptor of a panel in the workbench.\n */\nexport class PanelDescriptor extends CompositeDescriptor<Panel> {\n\n\tconstructor(ctor: IConstructorSignature0<Panel>, id: string, name: string, cssClass?: string, order?: number, _commandId?: string) {\n\t\tsuper(ctor, id, name, cssClass, order, _commandId);\n\t}\n}\n\nexport class PanelRegistry extends CompositeRegistry<Panel> {\n\tprivate defaultPanelId: string;\n\n\t/**\n\t * Registers a panel to the platform.\n\t */\n\tregisterPanel(descriptor: PanelDescriptor): void {\n\t\tsuper.registerComposite(descriptor);\n\t}\n\n\t/**\n\t * Deregisters a panel to the platform.\n\t */\n\tderegisterPanel(id: string): void {\n\t\tsuper.deregisterComposite(id);\n\t}\n\n\t/**\n\t * Returns an array of registered panels known to the platform.\n\t */\n\tgetPanels(): PanelDescriptor[] {\n\t\treturn this.getComposites() as PanelDescriptor[];\n\t}\n\n\t/**\n\t * Sets the id of the panel that should open on startup by default.\n\t */\n\tsetDefaultPanelId(id: string): void {\n\t\tthis.defaultPanelId = id;\n\t}\n\n\t/**\n\t * Gets the id of the panel that should open on startup by default.\n\t */\n\tgetDefaultPanelId(): string {\n\t\treturn this.defaultPanelId;\n\t}\n\n\t/**\n\t * Find out if a panel exists with the provided ID.\n\t */\n\thasPanel(id: string): boolean {\n\t\treturn this.getPanels().some(panel => panel.id === id);\n\t}\n}\n\n/**\n * A reusable action to toggle a panel with a specific id depending on focus.\n */\nexport abstract class TogglePanelAction extends Action {\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprivate readonly panelId: string,\n\t\tprotected panelService: IPanelService,\n\t\tprivate layoutService: IWorkbenchLayoutService,\n\t\tcssClass?: string\n\t) {\n\t\tsuper(id, label, cssClass);\n\t}\n\n\trun(): Promise<any> {\n\t\tif (this.isPanelFocused()) {\n\t\t\tthis.layoutService.setPanelHidden(true);\n\t\t} else {\n\t\t\tthis.panelService.openPanel(this.panelId, true);\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tprivate isPanelActive(): boolean {\n\t\tconst activePanel = this.panelService.getActivePanel();\n\n\t\treturn !!activePanel && activePanel.getId() === this.panelId;\n\t}\n\n\tprivate isPanelFocused(): boolean {\n\t\tconst activeElement = document.activeElement;\n\n\t\treturn !!(this.isPanelActive() && activeElement && isAncestor(activeElement, this.layoutService.getContainer(Parts.PANEL_PART)));\n\t}\n}\n\nexport const Extensions = {\n\tPanels: 'workbench.contributions.panels'\n};\n\nRegistry.add(Extensions.Panels, new PanelRegistry());\n"]}]}