{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/node/windowsFinder.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/node/windowsFinder.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/platform\", \"vs/base/common/extpath\", \"vs/platform/windows/common/windows\", \"vs/platform/workspaces/common/workspaces\", \"vs/base/common/resources\"], function (require, exports, platform, extpath, windows_1, workspaces_1, resources_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function findBestWindowOrFolderForFile({ windows, newWindow, context, fileUri, localWorkspaceResolver: workspaceResolver }) {\n        if (!newWindow && fileUri && (context === windows_1.OpenContext.DESKTOP || context === windows_1.OpenContext.CLI || context === windows_1.OpenContext.DOCK)) {\n            const windowOnFilePath = findWindowOnFilePath(windows, fileUri, workspaceResolver);\n            if (windowOnFilePath) {\n                return windowOnFilePath;\n            }\n        }\n        return !newWindow ? getLastActiveWindow(windows) : undefined;\n    }\n    exports.findBestWindowOrFolderForFile = findBestWindowOrFolderForFile;\n    function findWindowOnFilePath(windows, fileUri, localWorkspaceResolver) {\n        // First check for windows with workspaces that have a parent folder of the provided path opened\n        for (const window of windows) {\n            const workspace = window.openedWorkspace;\n            if (workspace) {\n                const resolvedWorkspace = localWorkspaceResolver(workspace);\n                if (resolvedWorkspace) {\n                    // workspace could be resolved: It's in the local file system\n                    if (resolvedWorkspace.folders.some(folder => resources_1.isEqualOrParent(fileUri, folder.uri))) {\n                        return window;\n                    }\n                }\n                else {\n                    // use the config path instead\n                    if (resources_1.isEqualOrParent(fileUri, workspace.configPath)) {\n                        return window;\n                    }\n                }\n            }\n        }\n        // Then go with single folder windows that are parent of the provided file path\n        const singleFolderWindowsOnFilePath = windows.filter(window => window.openedFolderUri && resources_1.isEqualOrParent(fileUri, window.openedFolderUri));\n        if (singleFolderWindowsOnFilePath.length) {\n            return singleFolderWindowsOnFilePath.sort((a, b) => -(a.openedFolderUri.path.length - b.openedFolderUri.path.length))[0];\n        }\n        return null;\n    }\n    function getLastActiveWindow(windows) {\n        const lastFocusedDate = Math.max.apply(Math, windows.map(window => window.lastFocusTime));\n        return windows.filter(window => window.lastFocusTime === lastFocusedDate)[0];\n    }\n    exports.getLastActiveWindow = getLastActiveWindow;\n    function findWindowOnWorkspace(windows, workspace) {\n        if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {\n            for (const window of windows) {\n                // match on folder\n                if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspace)) {\n                    if (window.openedFolderUri && resources_1.isEqual(window.openedFolderUri, workspace)) {\n                        return window;\n                    }\n                }\n            }\n        }\n        else if (workspaces_1.isWorkspaceIdentifier(workspace)) {\n            for (const window of windows) {\n                // match on workspace\n                if (window.openedWorkspace && window.openedWorkspace.id === workspace.id) {\n                    return window;\n                }\n            }\n        }\n        return null;\n    }\n    exports.findWindowOnWorkspace = findWindowOnWorkspace;\n    function findWindowOnExtensionDevelopmentPath(windows, extensionDevelopmentPath) {\n        for (const window of windows) {\n            // match on extension development path. The path can be a path or uri string, using paths.isEqual is not 100% correct but good enough\n            if (window.extensionDevelopmentPath && extpath.isEqual(window.extensionDevelopmentPath, extensionDevelopmentPath, !platform.isLinux /* ignorecase */)) {\n                return window;\n            }\n        }\n        return null;\n    }\n    exports.findWindowOnExtensionDevelopmentPath = findWindowOnExtensionDevelopmentPath;\n    function findWindowOnWorkspaceOrFolderUri(windows, uri) {\n        if (!uri) {\n            return null;\n        }\n        for (const window of windows) {\n            // check for workspace config path\n            if (window.openedWorkspace && resources_1.isEqual(window.openedWorkspace.configPath, uri)) {\n                return window;\n            }\n            // check for folder path\n            if (window.openedFolderUri && resources_1.isEqual(window.openedFolderUri, uri)) {\n                return window;\n            }\n        }\n        return null;\n    }\n    exports.findWindowOnWorkspaceOrFolderUri = findWindowOnWorkspaceOrFolderUri;\n});\n",null]}