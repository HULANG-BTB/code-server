{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar aria = require(\"vs/base/browser/ui/aria/aria\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar logViewer_1 = require(\"vs/workbench/contrib/output/browser/logViewer\");\nvar ToggleOutputAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleOutputAction, _super);\n    function ToggleOutputAction(id, label, layoutService, panelService) {\n        return _super.call(this, id, label, output_1.OUTPUT_PANEL_ID, panelService, layoutService) || this;\n    }\n    ToggleOutputAction.ID = 'workbench.action.output.toggleOutput';\n    ToggleOutputAction.LABEL = nls.localize('toggleOutput', \"Toggle Output\");\n    ToggleOutputAction = tslib_1.__decorate([\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, panelService_1.IPanelService)\n    ], ToggleOutputAction);\n    return ToggleOutputAction;\n}(panel_1.TogglePanelAction));\nexports.ToggleOutputAction = ToggleOutputAction;\nvar ClearOutputAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearOutputAction, _super);\n    function ClearOutputAction(id, label, outputService) {\n        var _this = _super.call(this, id, label, 'output-action clear-output') || this;\n        _this.outputService = outputService;\n        return _this;\n    }\n    ClearOutputAction.prototype.run = function () {\n        var activeChannel = this.outputService.getActiveChannel();\n        if (activeChannel) {\n            activeChannel.clear();\n            aria.status(nls.localize('outputCleared', \"Output was cleared\"));\n        }\n        return Promise.resolve(true);\n    };\n    ClearOutputAction.ID = 'workbench.output.action.clearOutput';\n    ClearOutputAction.LABEL = nls.localize('clearOutput', \"Clear Output\");\n    ClearOutputAction = tslib_1.__decorate([\n        tslib_1.__param(2, output_1.IOutputService)\n    ], ClearOutputAction);\n    return ClearOutputAction;\n}(actions_1.Action));\nexports.ClearOutputAction = ClearOutputAction;\n// this action can be triggered in two ways:\n// 1. user clicks the action icon, In which case the action toggles the lock state\n// 2. user clicks inside the output panel, which sets the lock, Or unsets it if they click the last line.\nvar ToggleOrSetOutputScrollLockAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleOrSetOutputScrollLockAction, _super);\n    function ToggleOrSetOutputScrollLockAction(id, label, outputService) {\n        var _this = _super.call(this, id, label, 'output-action output-scroll-unlock') || this;\n        _this.outputService = outputService;\n        _this.toDispose = [];\n        _this.toDispose.push(_this.outputService.onActiveOutputChannel(function (channel) {\n            var activeChannel = _this.outputService.getActiveChannel();\n            if (activeChannel) {\n                _this.setClass(activeChannel.scrollLock);\n            }\n        }));\n        return _this;\n    }\n    ToggleOrSetOutputScrollLockAction.prototype.run = function (newLockState) {\n        var activeChannel = this.outputService.getActiveChannel();\n        if (activeChannel) {\n            if (typeof (newLockState) === 'boolean') {\n                activeChannel.scrollLock = newLockState;\n            }\n            else {\n                activeChannel.scrollLock = !activeChannel.scrollLock;\n            }\n            this.setClass(activeChannel.scrollLock);\n        }\n        return Promise.resolve(true);\n    };\n    ToggleOrSetOutputScrollLockAction.prototype.setClass = function (locked) {\n        if (locked) {\n            this.class = 'output-action output-scroll-lock';\n        }\n        else {\n            this.class = 'output-action output-scroll-unlock';\n        }\n    };\n    ToggleOrSetOutputScrollLockAction.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n    };\n    ToggleOrSetOutputScrollLockAction.ID = 'workbench.output.action.toggleOutputScrollLock';\n    ToggleOrSetOutputScrollLockAction.LABEL = nls.localize({ key: 'toggleOutputScrollLock', comment: ['Turn on / off automatic output scrolling'] }, \"Toggle Output Scroll Lock\");\n    ToggleOrSetOutputScrollLockAction = tslib_1.__decorate([\n        tslib_1.__param(2, output_1.IOutputService)\n    ], ToggleOrSetOutputScrollLockAction);\n    return ToggleOrSetOutputScrollLockAction;\n}(actions_1.Action));\nexports.ToggleOrSetOutputScrollLockAction = ToggleOrSetOutputScrollLockAction;\nvar SwitchOutputAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchOutputAction, _super);\n    function SwitchOutputAction(outputService) {\n        var _this = _super.call(this, SwitchOutputAction.ID, nls.localize('switchToOutput.label', \"Switch to Output\")) || this;\n        _this.outputService = outputService;\n        _this.class = 'output-action switch-to-output';\n        return _this;\n    }\n    SwitchOutputAction.prototype.run = function (channelId) {\n        return this.outputService.showChannel(channelId);\n    };\n    SwitchOutputAction.ID = 'workbench.output.action.switchBetweenOutputs';\n    SwitchOutputAction = tslib_1.__decorate([\n        tslib_1.__param(0, output_1.IOutputService)\n    ], SwitchOutputAction);\n    return SwitchOutputAction;\n}(actions_1.Action));\nexports.SwitchOutputAction = SwitchOutputAction;\nvar SwitchOutputActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(SwitchOutputActionItem, _super);\n    function SwitchOutputActionItem(action, outputService, themeService, contextViewService) {\n        var _this = _super.call(this, null, action, [], 0, contextViewService, { ariaLabel: nls.localize('outputChannels', 'Output Channels.') }) || this;\n        _this.outputService = outputService;\n        var outputChannelRegistry = platform_1.Registry.as(output_1.Extensions.OutputChannels);\n        _this.toDispose.push(outputChannelRegistry.onDidRegisterChannel(function () { return _this.updateOtions(); }));\n        _this.toDispose.push(outputChannelRegistry.onDidRemoveChannel(function () { return _this.updateOtions(); }));\n        _this.toDispose.push(_this.outputService.onActiveOutputChannel(function () { return _this.updateOtions(); }));\n        _this.toDispose.push(styler_1.attachSelectBoxStyler(_this.selectBox, themeService));\n        _this.updateOtions();\n        return _this;\n    }\n    SwitchOutputActionItem.prototype.getActionContext = function (option, index) {\n        var channel = index < this.outputChannels.length ? this.outputChannels[index] : this.logChannels[index - this.outputChannels.length - 1];\n        return channel ? channel.id : option;\n    };\n    SwitchOutputActionItem.prototype.updateOtions = function () {\n        var groups = arrays_1.groupBy(this.outputService.getChannelDescriptors(), function (c1, c2) {\n            if (!c1.log && c2.log) {\n                return -1;\n            }\n            if (c1.log && !c2.log) {\n                return 1;\n            }\n            return 0;\n        });\n        this.outputChannels = groups[0] || [];\n        this.logChannels = groups[1] || [];\n        var showSeparator = this.outputChannels.length && this.logChannels.length;\n        var separatorIndex = showSeparator ? this.outputChannels.length : -1;\n        var options = this.outputChannels.map(function (c) { return c.label; }).concat((showSeparator ? [SwitchOutputActionItem.SEPARATOR] : []), this.logChannels.map(function (c) { return nls.localize('logChannel', \"Log ({0})\", c.label); }));\n        var selected = 0;\n        var activeChannel = this.outputService.getActiveChannel();\n        if (activeChannel) {\n            selected = this.outputChannels.map(function (c) { return c.id; }).indexOf(activeChannel.id);\n            if (selected === -1) {\n                var logChannelIndex = this.logChannels.map(function (c) { return c.id; }).indexOf(activeChannel.id);\n                selected = logChannelIndex !== -1 ? separatorIndex + 1 + logChannelIndex : 0;\n            }\n        }\n        this.setOptions(options.map(function (label, index) { return ({ text: label, isDisabled: (index === separatorIndex ? true : undefined) }); }), Math.max(0, selected));\n    };\n    SwitchOutputActionItem.SEPARATOR = '─────────';\n    SwitchOutputActionItem = tslib_1.__decorate([\n        tslib_1.__param(1, output_1.IOutputService),\n        tslib_1.__param(2, themeService_1.IThemeService),\n        tslib_1.__param(3, contextView_1.IContextViewService)\n    ], SwitchOutputActionItem);\n    return SwitchOutputActionItem;\n}(actionbar_1.SelectActionItem));\nexports.SwitchOutputActionItem = SwitchOutputActionItem;\nvar OpenLogOutputFile = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenLogOutputFile, _super);\n    function OpenLogOutputFile(outputService, editorService, instantiationService) {\n        var _this = _super.call(this, OpenLogOutputFile.ID, OpenLogOutputFile.LABEL, 'output-action open-log-file') || this;\n        _this.outputService = outputService;\n        _this.editorService = editorService;\n        _this.instantiationService = instantiationService;\n        _this.disposables = [];\n        _this.outputService.onActiveOutputChannel(_this.update, _this, _this.disposables);\n        _this.update();\n        return _this;\n    }\n    OpenLogOutputFile.prototype.update = function () {\n        this.enabled = !!this.getLogFileOutputChannelDescriptor();\n    };\n    OpenLogOutputFile.prototype.run = function () {\n        var logFileOutputChannelDescriptor = this.getLogFileOutputChannelDescriptor();\n        return logFileOutputChannelDescriptor ? this.editorService.openEditor(this.instantiationService.createInstance(logViewer_1.LogViewerInput, logFileOutputChannelDescriptor)).then(function () { return null; }) : Promise.resolve(null);\n    };\n    OpenLogOutputFile.prototype.getLogFileOutputChannelDescriptor = function () {\n        var channel = this.outputService.getActiveChannel();\n        if (channel) {\n            var descriptor = this.outputService.getChannelDescriptors().filter(function (c) { return c.id === channel.id; })[0];\n            if (descriptor && descriptor.file && descriptor.log) {\n                return descriptor;\n            }\n        }\n        return null;\n    };\n    OpenLogOutputFile.ID = 'workbench.output.action.openLogOutputFile';\n    OpenLogOutputFile.LABEL = nls.localize('openInLogViewer', \"Open Log File\");\n    OpenLogOutputFile = tslib_1.__decorate([\n        tslib_1.__param(0, output_1.IOutputService),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService)\n    ], OpenLogOutputFile);\n    return OpenLogOutputFile;\n}(actions_1.Action));\nexports.OpenLogOutputFile = OpenLogOutputFile;\nvar ShowLogsOutputChannelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowLogsOutputChannelAction, _super);\n    function ShowLogsOutputChannelAction(id, label, quickInputService, outputService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickInputService = quickInputService;\n        _this.outputService = outputService;\n        return _this;\n    }\n    ShowLogsOutputChannelAction.prototype.run = function () {\n        var _this = this;\n        var entries = this.outputService.getChannelDescriptors().filter(function (c) { return c.file && c.log; })\n            .map(function (_a) {\n            var id = _a.id, label = _a.label;\n            return ({ id: id, label: label });\n        });\n        return this.quickInputService.pick(entries, { placeHolder: nls.localize('selectlog', \"Select Log\") })\n            .then(function (entry) {\n            if (entry) {\n                return _this.outputService.showChannel(entry.id);\n            }\n            return undefined;\n        });\n    };\n    ShowLogsOutputChannelAction.ID = 'workbench.action.showLogs';\n    ShowLogsOutputChannelAction.LABEL = nls.localize('showLogs', \"Show Logs...\");\n    ShowLogsOutputChannelAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickInput_1.IQuickInputService),\n        tslib_1.__param(3, output_1.IOutputService)\n    ], ShowLogsOutputChannelAction);\n    return ShowLogsOutputChannelAction;\n}(actions_1.Action));\nexports.ShowLogsOutputChannelAction = ShowLogsOutputChannelAction;\nvar OpenOutputLogFileAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenOutputLogFileAction, _super);\n    function OpenOutputLogFileAction(id, label, quickInputService, outputService, editorService, instantiationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickInputService = quickInputService;\n        _this.outputService = outputService;\n        _this.editorService = editorService;\n        _this.instantiationService = instantiationService;\n        return _this;\n    }\n    OpenOutputLogFileAction.prototype.run = function () {\n        var _this = this;\n        var entries = this.outputService.getChannelDescriptors().filter(function (c) { return c.file && c.log; })\n            .map(function (channel) { return ({ id: channel.id, label: channel.label, channel: channel }); });\n        return this.quickInputService.pick(entries, { placeHolder: nls.localize('selectlogFile', \"Select Log file\") })\n            .then(function (entry) {\n            if (entry) {\n                return _this.editorService.openEditor(_this.instantiationService.createInstance(logViewer_1.LogViewerInput, entry.channel)).then(function () { return undefined; });\n            }\n            return undefined;\n        });\n    };\n    OpenOutputLogFileAction.ID = 'workbench.action.openLogFile';\n    OpenOutputLogFileAction.LABEL = nls.localize('openLogFile', \"Open Log File...\");\n    OpenOutputLogFileAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickInput_1.IQuickInputService),\n        tslib_1.__param(3, output_1.IOutputService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService)\n    ], OpenOutputLogFileAction);\n    return OpenOutputLogFileAction;\n}(actions_1.Action));\nexports.OpenOutputLogFileAction = OpenOutputLogFileAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { IOutputService, OUTPUT_PANEL_ID, IOutputChannelRegistry, Extensions as OutputExt, IOutputChannelDescriptor, IFileOutputChannelDescriptor } from 'vs/workbench/contrib/output/common/output';\nimport { SelectActionItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { TogglePanelAction } from 'vs/workbench/browser/panel';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { attachSelectBoxStyler } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { groupBy } from 'vs/base/common/arrays';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { LogViewerInput } from 'vs/workbench/contrib/output/browser/logViewer';\nimport { ISelectOptionItem } from 'vs/base/browser/ui/selectBox/selectBox';\n\nexport class ToggleOutputAction extends TogglePanelAction {\n\n\tpublic static readonly ID = 'workbench.action.output.toggleOutput';\n\tpublic static readonly LABEL = nls.localize('toggleOutput', \"Toggle Output\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IPanelService panelService: IPanelService,\n\t) {\n\t\tsuper(id, label, OUTPUT_PANEL_ID, panelService, layoutService);\n\t}\n}\n\nexport class ClearOutputAction extends Action {\n\n\tpublic static readonly ID = 'workbench.output.action.clearOutput';\n\tpublic static readonly LABEL = nls.localize('clearOutput', \"Clear Output\");\n\n\tconstructor(\n\t\tid: string, label: string,\n\t\t@IOutputService private readonly outputService: IOutputService\n\t) {\n\t\tsuper(id, label, 'output-action clear-output');\n\t}\n\n\tpublic run(): Promise<boolean> {\n\t\tconst activeChannel = this.outputService.getActiveChannel();\n\t\tif (activeChannel) {\n\t\t\tactiveChannel.clear();\n\t\t\taria.status(nls.localize('outputCleared', \"Output was cleared\"));\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n}\n\n// this action can be triggered in two ways:\n// 1. user clicks the action icon, In which case the action toggles the lock state\n// 2. user clicks inside the output panel, which sets the lock, Or unsets it if they click the last line.\nexport class ToggleOrSetOutputScrollLockAction extends Action {\n\n\tpublic static readonly ID = 'workbench.output.action.toggleOutputScrollLock';\n\tpublic static readonly LABEL = nls.localize({ key: 'toggleOutputScrollLock', comment: ['Turn on / off automatic output scrolling'] }, \"Toggle Output Scroll Lock\");\n\n\tprivate toDispose: IDisposable[] = [];\n\n\tconstructor(id: string, label: string,\n\t\t@IOutputService private readonly outputService: IOutputService) {\n\t\tsuper(id, label, 'output-action output-scroll-unlock');\n\t\tthis.toDispose.push(this.outputService.onActiveOutputChannel(channel => {\n\t\t\tconst activeChannel = this.outputService.getActiveChannel();\n\t\t\tif (activeChannel) {\n\t\t\t\tthis.setClass(activeChannel.scrollLock);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic run(newLockState?: boolean): Promise<boolean> {\n\n\t\tconst activeChannel = this.outputService.getActiveChannel();\n\t\tif (activeChannel) {\n\t\t\tif (typeof (newLockState) === 'boolean') {\n\t\t\t\tactiveChannel.scrollLock = newLockState;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tactiveChannel.scrollLock = !activeChannel.scrollLock;\n\t\t\t}\n\t\t\tthis.setClass(activeChannel.scrollLock);\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n\n\tprivate setClass(locked: boolean) {\n\t\tif (locked) {\n\t\t\tthis.class = 'output-action output-scroll-lock';\n\t\t} else {\n\t\t\tthis.class = 'output-action output-scroll-unlock';\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tsuper.dispose();\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nexport class SwitchOutputAction extends Action {\n\n\tpublic static readonly ID = 'workbench.output.action.switchBetweenOutputs';\n\n\tconstructor(@IOutputService private readonly outputService: IOutputService) {\n\t\tsuper(SwitchOutputAction.ID, nls.localize('switchToOutput.label', \"Switch to Output\"));\n\n\t\tthis.class = 'output-action switch-to-output';\n\t}\n\n\tpublic run(channelId: string): Promise<any> {\n\t\treturn this.outputService.showChannel(channelId);\n\t}\n}\n\nexport class SwitchOutputActionItem extends SelectActionItem {\n\n\tprivate static readonly SEPARATOR = '─────────';\n\n\tprivate outputChannels: IOutputChannelDescriptor[];\n\tprivate logChannels: IOutputChannelDescriptor[];\n\n\tconstructor(\n\t\taction: IAction,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextViewService contextViewService: IContextViewService\n\t) {\n\t\tsuper(null, action, [], 0, contextViewService, { ariaLabel: nls.localize('outputChannels', 'Output Channels.') });\n\n\t\tlet outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\n\t\tthis.toDispose.push(outputChannelRegistry.onDidRegisterChannel(() => this.updateOtions()));\n\t\tthis.toDispose.push(outputChannelRegistry.onDidRemoveChannel(() => this.updateOtions()));\n\t\tthis.toDispose.push(this.outputService.onActiveOutputChannel(() => this.updateOtions()));\n\t\tthis.toDispose.push(attachSelectBoxStyler(this.selectBox, themeService));\n\n\t\tthis.updateOtions();\n\t}\n\n\tprotected getActionContext(option: string, index: number): string {\n\t\tconst channel = index < this.outputChannels.length ? this.outputChannels[index] : this.logChannels[index - this.outputChannels.length - 1];\n\t\treturn channel ? channel.id : option;\n\t}\n\n\tprivate updateOtions(): void {\n\t\tconst groups = groupBy(this.outputService.getChannelDescriptors(), (c1: IOutputChannelDescriptor, c2: IOutputChannelDescriptor) => {\n\t\t\tif (!c1.log && c2.log) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (c1.log && !c2.log) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tthis.outputChannels = groups[0] || [];\n\t\tthis.logChannels = groups[1] || [];\n\t\tconst showSeparator = this.outputChannels.length && this.logChannels.length;\n\t\tconst separatorIndex = showSeparator ? this.outputChannels.length : -1;\n\t\tconst options: string[] = [...this.outputChannels.map(c => c.label), ...(showSeparator ? [SwitchOutputActionItem.SEPARATOR] : []), ...this.logChannels.map(c => nls.localize('logChannel', \"Log ({0})\", c.label))];\n\t\tlet selected = 0;\n\t\tconst activeChannel = this.outputService.getActiveChannel();\n\t\tif (activeChannel) {\n\t\t\tselected = this.outputChannels.map(c => c.id).indexOf(activeChannel.id);\n\t\t\tif (selected === -1) {\n\t\t\t\tconst logChannelIndex = this.logChannels.map(c => c.id).indexOf(activeChannel.id);\n\t\t\t\tselected = logChannelIndex !== -1 ? separatorIndex + 1 + logChannelIndex : 0;\n\t\t\t}\n\t\t}\n\t\tthis.setOptions(options.map((label, index) => <ISelectOptionItem>{ text: label, isDisabled: (index === separatorIndex ? true : undefined) }), Math.max(0, selected));\n\t}\n}\n\nexport class OpenLogOutputFile extends Action {\n\n\tpublic static readonly ID = 'workbench.output.action.openLogOutputFile';\n\tpublic static readonly LABEL = nls.localize('openInLogViewer', \"Open Log File\");\n\n\tprivate disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(OpenLogOutputFile.ID, OpenLogOutputFile.LABEL, 'output-action open-log-file');\n\t\tthis.outputService.onActiveOutputChannel(this.update, this, this.disposables);\n\t\tthis.update();\n\t}\n\n\tprivate update(): void {\n\t\tthis.enabled = !!this.getLogFileOutputChannelDescriptor();\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst logFileOutputChannelDescriptor = this.getLogFileOutputChannelDescriptor();\n\t\treturn logFileOutputChannelDescriptor ? this.editorService.openEditor(this.instantiationService.createInstance(LogViewerInput, logFileOutputChannelDescriptor)).then(() => null) : Promise.resolve(null);\n\t}\n\n\tprivate getLogFileOutputChannelDescriptor(): IFileOutputChannelDescriptor | null {\n\t\tconst channel = this.outputService.getActiveChannel();\n\t\tif (channel) {\n\t\t\tconst descriptor = this.outputService.getChannelDescriptors().filter(c => c.id === channel.id)[0];\n\t\t\tif (descriptor && descriptor.file && descriptor.log) {\n\t\t\t\treturn <IFileOutputChannelDescriptor>descriptor;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n\nexport class ShowLogsOutputChannelAction extends Action {\n\n\tstatic ID = 'workbench.action.showLogs';\n\tstatic LABEL = nls.localize('showLogs', \"Show Logs...\");\n\n\tconstructor(id: string, label: string,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IOutputService private readonly outputService: IOutputService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\tconst entries: { id: string, label: string }[] = this.outputService.getChannelDescriptors().filter(c => c.file && c.log)\n\t\t\t.map(({ id, label }) => ({ id, label }));\n\n\t\treturn this.quickInputService.pick(entries, { placeHolder: nls.localize('selectlog', \"Select Log\") })\n\t\t\t.then(entry => {\n\t\t\t\tif (entry) {\n\t\t\t\t\treturn this.outputService.showChannel(entry.id);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n}\n\ninterface IOutputChannelQuickPickItem extends IQuickPickItem {\n\tchannel: IOutputChannelDescriptor;\n}\n\nexport class OpenOutputLogFileAction extends Action {\n\n\tstatic ID = 'workbench.action.openLogFile';\n\tstatic LABEL = nls.localize('openLogFile', \"Open Log File...\");\n\n\tconstructor(id: string, label: string,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<void> {\n\t\tconst entries: IOutputChannelQuickPickItem[] = this.outputService.getChannelDescriptors().filter(c => c.file && c.log)\n\t\t\t.map(channel => (<IOutputChannelQuickPickItem>{ id: channel.id, label: channel.label, channel }));\n\n\t\treturn this.quickInputService.pick(entries, { placeHolder: nls.localize('selectlogFile', \"Select Log file\") })\n\t\t\t.then(entry => {\n\t\t\t\tif (entry) {\n\t\t\t\t\treturn this.editorService.openEditor(this.instantiationService.createInstance(LogViewerInput, entry.channel)).then(() => undefined);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n}"]}]}