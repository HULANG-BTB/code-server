{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/server/src/server.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/server.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"@coder/logger\");\nconst server_1 = require(\"@coder/protocol/src/node/server\");\nconst common_1 = require(\"@coder/tunnel/src/common\");\nconst server_2 = require(\"@coder/tunnel/src/server\");\nconst express = require(\"express\");\n//@ts-ignore\nconst expressStaticGzip = require(\"express-static-gzip\");\nconst fs = require(\"fs\");\nconst fs_extra_1 = require(\"fs-extra\");\n//@ts-ignore\nconst httpolyglot = require(\"httpolyglot\");\nconst mime = require(\"mime-types\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst pem = require(\"pem\");\nconst util = require(\"util\");\nconst url = require(\"url\");\nconst ws = require(\"ws\");\nconst constants_1 = require(\"./constants\");\nconst portScanner_1 = require(\"./portScanner\");\nconst safeCompare = require(\"safe-compare\");\nexports.createApp = async (options) => {\n    const parseCookies = (req) => {\n        const cookies = {};\n        const rc = req.headers.cookie;\n        if (rc) {\n            rc.split(\";\").forEach((cook) => {\n                const parts = cook.split(\"=\");\n                cookies[parts.shift().trim()] = decodeURI(parts.join(\"=\"));\n            });\n        }\n        return cookies;\n    };\n    const ensureAuthed = (req, res) => {\n        if (!isAuthed(req)) {\n            res.status(401);\n            res.end();\n            return false;\n        }\n        return true;\n    };\n    const isAuthed = (req) => {\n        try {\n            if (!options.password || options.bypassAuth) {\n                return true;\n            }\n            // Try/catch placed here just in case\n            const cookies = parseCookies(req);\n            if (cookies.password && safeCompare(cookies.password, options.password)) {\n                return true;\n            }\n        }\n        catch (ex) {\n            logger_1.logger.error(\"Failed to parse cookies\", logger_1.field(\"error\", ex));\n        }\n        return false;\n    };\n    const isEncrypted = (socket) => {\n        if (options.bypassAuth) {\n            return true;\n        }\n        // tslint:disable-next-line:no-any\n        return socket.encrypted;\n    };\n    const app = express();\n    if (options.registerMiddleware) {\n        options.registerMiddleware(app);\n    }\n    const certs = await new Promise(async (resolve, reject) => {\n        const selfSignedKeyPath = path.join(options.serverOptions.dataDirectory, \"self-signed.key\");\n        const selfSignedCertPath = path.join(options.serverOptions.dataDirectory, \"self-signed.cert\");\n        if (!fs.existsSync(selfSignedKeyPath) || !fs.existsSync(selfSignedCertPath)) {\n            try {\n                const certs = await new Promise((res, rej) => {\n                    pem.createCertificate({\n                        selfSigned: true,\n                    }, (err, result) => {\n                        if (err) {\n                            rej(err);\n                            return;\n                        }\n                        res(result);\n                    });\n                });\n                fs.writeFileSync(selfSignedKeyPath, certs.serviceKey);\n                fs.writeFileSync(selfSignedCertPath, certs.certificate);\n            }\n            catch (ex) {\n                return reject(ex);\n            }\n        }\n        resolve({\n            cert: fs.readFileSync(selfSignedCertPath).toString(),\n            key: fs.readFileSync(selfSignedKeyPath).toString(),\n        });\n    });\n    const server = httpolyglot.createServer(options.bypassAuth ? {} : options.httpsOptions || certs, app);\n    const wss = new ws.Server({ server });\n    wss.shouldHandle = (req) => {\n        return isAuthed(req);\n    };\n    const portScanner = portScanner_1.createPortScanner();\n    wss.on(\"connection\", async (ws, req) => {\n        if (req.url && req.url.startsWith(\"/tunnel\")) {\n            try {\n                const rawPort = req.url.split(\"/\").pop();\n                const port = Number.parseInt(rawPort, 10);\n                await server_2.handle(ws, port);\n            }\n            catch (ex) {\n                ws.close(common_1.TunnelCloseCode.Error, ex.toString());\n            }\n            return;\n        }\n        if (req.url && req.url.startsWith(\"/ports\")) {\n            const onAdded = portScanner.onAdded((added) => ws.send(JSON.stringify({ added })));\n            const onRemoved = portScanner.onRemoved((removed) => ws.send(JSON.stringify({ removed })));\n            ws.on(\"close\", () => {\n                onAdded.dispose();\n                onRemoved.dispose();\n            });\n            return ws.send(JSON.stringify({ ports: portScanner.ports }));\n        }\n        const connection = {\n            onMessage: (cb) => {\n                ws.addEventListener(\"message\", (event) => cb(event.data));\n            },\n            close: () => ws.close(),\n            send: (data) => {\n                if (ws.readyState !== ws.OPEN) {\n                    return;\n                }\n                try {\n                    ws.send(data);\n                }\n                catch (error) {\n                    logger_1.logger.error(error.message);\n                }\n            },\n            onUp: () => undefined,\n            onDown: (cb) => ws.addEventListener(\"close\", () => cb()),\n            onClose: (cb) => ws.addEventListener(\"close\", () => cb()),\n        };\n        // tslint:disable-next-line no-unused-expression\n        new server_1.Server(connection, options.serverOptions);\n    });\n    const redirect = (req, res, to = \"\", from = \"\", code = 302, protocol = req.protocol) => {\n        const currentUrl = `${protocol}://${req.headers.host}${req.originalUrl}`;\n        const newUrl = url.parse(currentUrl);\n        if (from && newUrl.pathname) {\n            newUrl.pathname = newUrl.pathname.replace(new RegExp(`\\/${from}\\/?$`), \"/\");\n        }\n        if (to) {\n            newUrl.pathname = (newUrl.pathname || \"\").replace(/\\/$/, \"\") + `/${to}`;\n        }\n        newUrl.path = undefined; // Path is not necessary for format().\n        const newUrlString = url.format(newUrl);\n        logger_1.logger.trace(`Redirecting from ${currentUrl} to ${newUrlString}`);\n        return res.redirect(code, newUrlString);\n    };\n    const baseDir = constants_1.buildDir || path.join(__dirname, \"..\");\n    const staticGzip = expressStaticGzip(path.join(baseDir, \"build/web\"));\n    app.use((req, res, next) => {\n        logger_1.logger.trace(`\\u001B[1m${req.method} ${res.statusCode} \\u001B[0m${req.originalUrl}`, logger_1.field(\"host\", req.hostname), logger_1.field(\"ip\", req.ip));\n        // Force HTTPS unless allowing HTTP.\n        if (!isEncrypted(req.socket) && !options.allowHttp) {\n            return redirect(req, res, \"\", \"\", 301, \"https\");\n        }\n        next();\n    });\n    // @ts-ignore\n    app.use((err, _req, _res, next) => {\n        logger_1.logger.error(err.message);\n        next();\n    });\n    // If not authenticated, redirect to the login page.\n    app.get(\"/\", (req, res, next) => {\n        if (!isAuthed(req)) {\n            return redirect(req, res, \"login\");\n        }\n        next();\n    });\n    // If already authenticated, redirect back to the root.\n    app.get(\"/login\", (req, res, next) => {\n        if (isAuthed(req)) {\n            return redirect(req, res, \"\", \"login\");\n        }\n        next();\n    });\n    // For getting general server data.\n    app.get(\"/ping\", (_req, res) => {\n        res.json({\n            hostname: os.hostname(),\n        });\n    });\n    // For getting a resource on disk.\n    app.get(\"/resource/:url(*)\", async (req, res) => {\n        if (!ensureAuthed(req, res)) {\n            return;\n        }\n        try {\n            const fullPath = `/${req.params.url}`;\n            // const relative = path.relative(options!.dataDirectory, fullPath);\n            // if (relative.startsWith(\"..\")) {\n            // \treturn res.status(403).end();\n            // }\n            const exists = fs.existsSync(fullPath);\n            if (!exists) {\n                return res.status(404).end();\n            }\n            const stat = await util.promisify(fs.stat)(fullPath);\n            if (!stat.isFile()) {\n                res.write(\"Resource must be a file.\");\n                res.status(422);\n                return res.end();\n            }\n            let mimeType = mime.lookup(fullPath);\n            if (mimeType === false) {\n                mimeType = \"application/octet-stream\";\n            }\n            const content = await util.promisify(fs.readFile)(fullPath);\n            res.writeHead(200, {\n                \"Content-Type\": mimeType,\n                \"Content-Length\": content.byteLength,\n            });\n            res.write(content);\n            res.end();\n        }\n        catch (ex) {\n            res.write(ex.toString());\n            res.status(500);\n            res.end();\n        }\n    });\n    // For writing a resource to disk.\n    app.post(\"/resource/:url(*)\", async (req, res) => {\n        if (!ensureAuthed(req, res)) {\n            return;\n        }\n        try {\n            const fullPath = `/${req.params.url}`;\n            const data = [];\n            req.setEncoding(\"utf8\");\n            req.on(\"data\", (chunk) => {\n                data.push(chunk);\n            });\n            req.on(\"end\", async () => {\n                const body = data.join(\"\");\n                await fs_extra_1.mkdirp(path.dirname(fullPath));\n                fs.writeFileSync(fullPath, body);\n                logger_1.logger.info(\"Wrote resource\", logger_1.field(\"path\", fullPath), logger_1.field(\"content-length\", body.length));\n                res.status(200);\n                res.end();\n            });\n        }\n        catch (ex) {\n            res.write(ex.toString());\n            res.status(500);\n            res.end();\n        }\n    });\n    // Everything else just pulls from the static build directory.\n    app.use(staticGzip);\n    return {\n        express: app,\n        server,\n        wss,\n    };\n};\n",{"version":3,"file":"/home/coding/workspace/packages/server/src/server.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/server/src/server.ts"],"names":[],"mappings":"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","sourcesContent":["import { field, logger } from \"@coder/logger\";\nimport { ReadWriteConnection } from \"@coder/protocol\";\nimport { Server, ServerOptions } from \"@coder/protocol/src/node/server\";\nimport { TunnelCloseCode } from \"@coder/tunnel/src/common\";\nimport { handle as handleTunnel } from \"@coder/tunnel/src/server\";\nimport * as express from \"express\";\n//@ts-ignore\nimport * as expressStaticGzip from \"express-static-gzip\";\nimport * as fs from \"fs\";\nimport { mkdirp } from \"fs-extra\";\nimport * as http from \"http\";\n//@ts-ignore\nimport * as httpolyglot from \"httpolyglot\";\nimport * as https from \"https\";\nimport * as mime from \"mime-types\";\nimport * as net from \"net\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport * as pem from \"pem\";\nimport * as util from \"util\";\nimport * as url from \"url\";\nimport * as ws from \"ws\";\nimport { buildDir } from \"./constants\";\nimport { createPortScanner } from \"./portScanner\";\nimport safeCompare = require(\"safe-compare\");\n\ninterface CreateAppOptions {\n\tregisterMiddleware?: (app: express.Application) => void;\n\tserverOptions?: ServerOptions;\n\tpassword?: string;\n\thttpsOptions?: https.ServerOptions;\n\tallowHttp?: boolean;\n\tbypassAuth?: boolean;\n}\n\nexport const createApp = async (options: CreateAppOptions): Promise<{\n\treadonly express: express.Application;\n\treadonly server: http.Server;\n\treadonly wss: ws.Server;\n}> => {\n\tconst parseCookies = (req: http.IncomingMessage): { [key: string]: string } => {\n\t\tconst cookies: { [key: string]: string } = {};\n\t\tconst rc = req.headers.cookie;\n\t\tif (rc) {\n\t\t\trc.split(\";\").forEach((cook) => {\n\t\t\t\tconst parts = cook.split(\"=\");\n\t\t\t\tcookies[parts.shift()!.trim()] = decodeURI(parts.join(\"=\"));\n\t\t\t});\n\t\t}\n\n\t\treturn cookies;\n\t};\n\n\tconst ensureAuthed = (req: http.IncomingMessage, res: express.Response): boolean => {\n\t\tif (!isAuthed(req)) {\n\t\t\tres.status(401);\n\t\t\tres.end();\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst isAuthed = (req: http.IncomingMessage): boolean => {\n\t\ttry {\n\t\t\tif (!options.password || options.bypassAuth) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Try/catch placed here just in case\n\t\t\tconst cookies = parseCookies(req);\n\t\t\tif (cookies.password && safeCompare(cookies.password, options.password)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tlogger.error(\"Failed to parse cookies\", field(\"error\", ex));\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tconst isEncrypted = (socket: net.Socket): boolean => {\n\t\tif (options.bypassAuth) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// tslint:disable-next-line:no-any\n\t\treturn (socket as any).encrypted;\n\t};\n\n\tconst app = express();\n\tif (options.registerMiddleware) {\n\t\toptions.registerMiddleware(app);\n\t}\n\n\tinterface CertificateInfo {\n\t\treadonly key: string;\n\t\t// tslint:disable-next-line:no-any\n\t\treadonly cert: any;\n\t}\n\n\tconst certs = await new Promise<CertificateInfo>(async (resolve, reject): Promise<void> => {\n\t\tconst selfSignedKeyPath = path.join(options.serverOptions!.dataDirectory, \"self-signed.key\");\n\t\tconst selfSignedCertPath = path.join(options.serverOptions!.dataDirectory, \"self-signed.cert\");\n\n\t\tif (!fs.existsSync(selfSignedKeyPath) || !fs.existsSync(selfSignedCertPath)) {\n\t\t\ttry {\n\t\t\t\tconst certs = await new Promise<pem.CertificateCreationResult>((res, rej): void => {\n\t\t\t\t\tpem.createCertificate({\n\t\t\t\t\t\tselfSigned: true,\n\t\t\t\t\t}, (err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\trej(err);\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tres(result);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tfs.writeFileSync(selfSignedKeyPath, certs.serviceKey);\n\t\t\t\tfs.writeFileSync(selfSignedCertPath, certs.certificate);\n\t\t\t} catch (ex) {\n\t\t\t\treturn reject(ex);\n\t\t\t}\n\t\t}\n\n\t\tresolve({\n\t\t\tcert: fs.readFileSync(selfSignedCertPath).toString(),\n\t\t\tkey: fs.readFileSync(selfSignedKeyPath).toString(),\n\t\t});\n\t});\n\n\tconst server = httpolyglot.createServer(options.bypassAuth ? {} : options.httpsOptions || certs, app) as http.Server;\n\tconst wss = new ws.Server({ server });\n\n\twss.shouldHandle = (req): boolean => {\n\t\treturn isAuthed(req);\n\t};\n\n\tconst portScanner = createPortScanner();\n\twss.on(\"connection\", async (ws, req) => {\n\t\tif (req.url && req.url.startsWith(\"/tunnel\")) {\n\t\t\ttry {\n\t\t\t\tconst rawPort = req.url.split(\"/\").pop();\n\t\t\t\tconst port = Number.parseInt(rawPort!, 10);\n\n\t\t\t\tawait handleTunnel(ws, port);\n\t\t\t} catch (ex) {\n\t\t\t\tws.close(TunnelCloseCode.Error, ex.toString());\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (req.url && req.url.startsWith(\"/ports\")) {\n\t\t\tconst onAdded = portScanner.onAdded((added) => ws.send(JSON.stringify({ added })));\n\t\t\tconst onRemoved = portScanner.onRemoved((removed) => ws.send(JSON.stringify({ removed })));\n\t\t\tws.on(\"close\", () => {\n\t\t\t\tonAdded.dispose();\n\t\t\t\tonRemoved.dispose();\n\t\t\t});\n\n\t\t\treturn ws.send(JSON.stringify({ ports: portScanner.ports }));\n\t\t}\n\n\t\tconst connection: ReadWriteConnection = {\n\t\t\tonMessage: (cb): void => {\n\t\t\t\tws.addEventListener(\"message\", (event) => cb(event.data));\n\t\t\t},\n\t\t\tclose: (): void => ws.close(),\n\t\t\tsend: (data): void => {\n\t\t\t\tif (ws.readyState !== ws.OPEN) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tws.send(data);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogger.error(error.message);\n\t\t\t\t}\n\t\t\t},\n\t\t\tonUp: (): void => undefined, // This can't come back up.\n\t\t\tonDown: (cb): void => ws.addEventListener(\"close\", () => cb()),\n\t\t\tonClose: (cb): void => ws.addEventListener(\"close\", () => cb()),\n\t\t};\n\n\t\t// tslint:disable-next-line no-unused-expression\n\t\tnew Server(connection, options.serverOptions);\n\t});\n\n\tconst redirect = (\n\t\treq: express.Request, res: express.Response,\n\t\tto: string = \"\", from: string = \"\",\n\t\tcode: number = 302, protocol: string = req.protocol,\n\t): void => {\n\t\tconst currentUrl = `${protocol}://${req.headers.host}${req.originalUrl}`;\n\t\tconst newUrl = url.parse(currentUrl);\n\t\tif (from && newUrl.pathname) {\n\t\t\tnewUrl.pathname = newUrl.pathname.replace(new RegExp(`\\/${from}\\/?$`), \"/\");\n\t\t}\n\t\tif (to) {\n\t\t\tnewUrl.pathname = (newUrl.pathname || \"\").replace(/\\/$/, \"\") + `/${to}`;\n\t\t}\n\t\tnewUrl.path = undefined; // Path is not necessary for format().\n\t\tconst newUrlString = url.format(newUrl);\n\t\tlogger.trace(`Redirecting from ${currentUrl} to ${newUrlString}`);\n\n\t\treturn res.redirect(code, newUrlString);\n\t};\n\n\tconst baseDir = buildDir || path.join(__dirname, \"..\");\n\tconst staticGzip = expressStaticGzip(path.join(baseDir, \"build/web\"));\n\n\tapp.use((req, res, next) => {\n\t\tlogger.trace(`\\u001B[1m${req.method} ${res.statusCode} \\u001B[0m${req.originalUrl}`, field(\"host\", req.hostname), field(\"ip\", req.ip));\n\n\t\t// Force HTTPS unless allowing HTTP.\n\t\tif (!isEncrypted(req.socket) && !options.allowHttp) {\n\t\t\treturn redirect(req, res, \"\", \"\", 301, \"https\");\n\t\t}\n\n\t\tnext();\n\t});\n\n\t// @ts-ignore\n\tapp.use((err, _req, _res, next) => {\n\t\tlogger.error(err.message);\n\t\tnext();\n\t});\n\n\t// If not authenticated, redirect to the login page.\n\tapp.get(\"/\", (req, res, next) => {\n\t\tif (!isAuthed(req)) {\n\t\t\treturn redirect(req, res, \"login\");\n\t\t}\n\t\tnext();\n\t});\n\n\t// If already authenticated, redirect back to the root.\n\tapp.get(\"/login\", (req, res, next) => {\n\t\tif (isAuthed(req)) {\n\t\t\treturn redirect(req, res, \"\", \"login\");\n\t\t}\n\t\tnext();\n\t});\n\n\t// For getting general server data.\n\tapp.get(\"/ping\", (_req, res) => {\n\t\tres.json({\n\t\t\thostname: os.hostname(),\n\t\t});\n\t});\n\n\t// For getting a resource on disk.\n\tapp.get(\"/resource/:url(*)\", async (req, res) => {\n\t\tif (!ensureAuthed(req, res)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst fullPath = `/${req.params.url}`;\n\t\t\t// const relative = path.relative(options!.dataDirectory, fullPath);\n\t\t\t// if (relative.startsWith(\"..\")) {\n\t\t\t// \treturn res.status(403).end();\n\t\t\t// }\n\t\t\tconst exists = fs.existsSync(fullPath);\n\t\t\tif (!exists) {\n\t\t\t\treturn res.status(404).end();\n\t\t\t}\n\t\t\tconst stat = await util.promisify(fs.stat)(fullPath);\n\t\t\tif (!stat.isFile()) {\n\t\t\t\tres.write(\"Resource must be a file.\");\n\t\t\t\tres.status(422);\n\n\t\t\t\treturn res.end();\n\t\t\t}\n\t\t\tlet mimeType = mime.lookup(fullPath);\n\t\t\tif (mimeType === false) {\n\t\t\t\tmimeType = \"application/octet-stream\";\n\t\t\t}\n\t\t\tconst content = await util.promisify(fs.readFile)(fullPath);\n\n\t\t\tres.writeHead(200, {\n\t\t\t\t\"Content-Type\": mimeType,\n\t\t\t\t\"Content-Length\": content.byteLength,\n\t\t\t});\n\t\t\tres.write(content);\n\t\t\tres.end();\n\t\t} catch (ex) {\n\t\t\tres.write(ex.toString());\n\t\t\tres.status(500);\n\t\t\tres.end();\n\t\t}\n\t});\n\n\t// For writing a resource to disk.\n\tapp.post(\"/resource/:url(*)\", async (req, res) => {\n\t\tif (!ensureAuthed(req, res)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst fullPath = `/${req.params.url}`;\n\n\t\t\tconst data: string[] = [];\n\t\t\treq.setEncoding(\"utf8\");\n\t\t\treq.on(\"data\", (chunk) => {\n\t\t\t\tdata.push(chunk);\n\t\t\t});\n\t\t\treq.on(\"end\", async () => {\n\t\t\t\tconst body = data.join(\"\");\n\t\t\t\tawait mkdirp(path.dirname(fullPath));\n\t\t\t\tfs.writeFileSync(fullPath, body);\n\t\t\t\tlogger.info(\"Wrote resource\", field(\"path\", fullPath), field(\"content-length\", body.length));\n\t\t\t\tres.status(200);\n\t\t\t\tres.end();\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\tres.write(ex.toString());\n\t\t\tres.status(500);\n\t\t\tres.end();\n\t\t}\n\t});\n\n\t// Everything else just pulls from the static build directory.\n\tapp.use(staticGzip);\n\n\treturn {\n\t\texpress: app,\n\t\tserver,\n\t\twss,\n\t};\n};\n"]}]}