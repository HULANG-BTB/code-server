{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/fileCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/fileCommands.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar files_2 = require(\"vs/platform/files/common/files\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar async_1 = require(\"vs/base/common/async\");\nvar files_3 = require(\"vs/workbench/contrib/files/browser/files\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar editorCommands_1 = require(\"vs/workbench/browser/parts/editor/editorCommands\");\nvar network_1 = require(\"vs/base/common/network\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar resources_1 = require(\"vs/base/common/resources\");\n// Commands\nexports.REVEAL_IN_OS_COMMAND_ID = 'revealFileInOS';\nexports.REVEAL_IN_OS_LABEL = browser_1.isWindows ? nls.localize('revealInWindows', \"Reveal in Explorer\") : browser_1.isMacintosh ? nls.localize('revealInMac', \"Reveal in Finder\") : nls.localize('openContainer', \"Open Containing Folder\");\nexports.REVEAL_IN_EXPLORER_COMMAND_ID = 'revealInExplorer';\nexports.REVERT_FILE_COMMAND_ID = 'workbench.action.files.revert';\nexports.OPEN_TO_SIDE_COMMAND_ID = 'explorer.openToSide';\nexports.SELECT_FOR_COMPARE_COMMAND_ID = 'selectForCompare';\nexports.COMPARE_SELECTED_COMMAND_ID = 'compareSelected';\nexports.COMPARE_RESOURCE_COMMAND_ID = 'compareFiles';\nexports.COMPARE_WITH_SAVED_COMMAND_ID = 'workbench.files.action.compareWithSaved';\nexports.COPY_PATH_COMMAND_ID = 'copyFilePath';\nexports.COPY_RELATIVE_PATH_COMMAND_ID = 'copyRelativeFilePath';\nexports.SAVE_FILE_AS_COMMAND_ID = 'workbench.action.files.saveAs';\nexports.SAVE_FILE_AS_LABEL = nls.localize('saveAs', \"Save As...\");\nexports.SAVE_FILE_COMMAND_ID = 'workbench.action.files.save';\nexports.SAVE_FILE_LABEL = nls.localize('save', \"Save\");\nexports.SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID = 'workbench.action.files.saveWithoutFormatting';\nexports.SAVE_FILE_WITHOUT_FORMATTING_LABEL = nls.localize('saveWithoutFormatting', \"Save without Formatting\");\nexports.SAVE_ALL_COMMAND_ID = 'saveAll';\nexports.SAVE_ALL_LABEL = nls.localize('saveAll', \"Save All\");\nexports.SAVE_ALL_IN_GROUP_COMMAND_ID = 'workbench.files.action.saveAllInGroup';\nexports.SAVE_FILES_COMMAND_ID = 'workbench.action.files.saveFiles';\nexports.OpenEditorsGroupContext = new contextkey_1.RawContextKey('groupFocusedInOpenEditors', false);\nexports.DirtyEditorContext = new contextkey_1.RawContextKey('dirtyEditor', false);\nexports.ResourceSelectedForCompareContext = new contextkey_1.RawContextKey('resourceSelectedForCompare', false);\nexports.REMOVE_ROOT_FOLDER_COMMAND_ID = 'removeRootFolder';\nexports.REMOVE_ROOT_FOLDER_LABEL = nls.localize('removeFolderFromWorkspace', \"Remove Folder from Workspace\");\nexports.openWindowCommand = function (accessor, urisToOpen, options) {\n    if (Array.isArray(urisToOpen)) {\n        var windowService = accessor.get(windows_1.IWindowService);\n        windowService.openWindow(urisToOpen, options);\n    }\n};\nexports.newWindowCommand = function (accessor, options) {\n    var windowsService = accessor.get(windows_1.IWindowsService);\n    windowsService.openNewWindow(options);\n};\nfunction save(resource, isSaveAs, options, editorService, fileService, untitledEditorService, textFileService, editorGroupService) {\n    function ensureForcedSave(options) {\n        if (!options) {\n            options = { force: true };\n        }\n        else {\n            options.force = true;\n        }\n        return options;\n    }\n    if (resource && (fileService.canHandleResource(resource) || resource.scheme === network_1.Schemas.untitled)) {\n        // Save As (or Save untitled with associated path)\n        if (isSaveAs || resource.scheme === network_1.Schemas.untitled) {\n            var encodingOfSource_1;\n            if (resource.scheme === network_1.Schemas.untitled) {\n                encodingOfSource_1 = untitledEditorService.getEncoding(resource);\n            }\n            else if (fileService.canHandleResource(resource)) {\n                var textModel = textFileService.models.get(resource);\n                encodingOfSource_1 = textModel && textModel.getEncoding(); // text model can be null e.g. if this is a binary file!\n            }\n            var viewStateOfSource_1;\n            var activeTextEditorWidget = editorBrowser_1.getCodeEditor(editorService.activeTextEditorWidget);\n            if (activeTextEditorWidget) {\n                var activeResource = editor_1.toResource(editorService.activeEditor, { supportSideBySide: true });\n                if (activeResource && (fileService.canHandleResource(activeResource) || resource.scheme === network_1.Schemas.untitled) && activeResource.toString() === resource.toString()) {\n                    viewStateOfSource_1 = activeTextEditorWidget.saveViewState();\n                }\n            }\n            // Special case: an untitled file with associated path gets saved directly unless \"saveAs\" is true\n            var savePromise = void 0;\n            if (!isSaveAs && resource.scheme === network_1.Schemas.untitled && untitledEditorService.hasAssociatedFilePath(resource)) {\n                savePromise = textFileService.save(resource, options).then(function (result) {\n                    if (result) {\n                        return resource.with({ scheme: network_1.Schemas.file });\n                    }\n                    return undefined;\n                });\n            }\n            // Otherwise, really \"Save As...\"\n            else {\n                // Force a change to the file to trigger external watchers if any\n                // fixes https://github.com/Microsoft/vscode/issues/59655\n                options = ensureForcedSave(options);\n                savePromise = textFileService.saveAs(resource, undefined, options);\n            }\n            return savePromise.then(function (target) {\n                if (!target || target.toString() === resource.toString()) {\n                    return false; // save canceled or same resource used\n                }\n                var replacement = {\n                    resource: target,\n                    encoding: encodingOfSource_1,\n                    options: {\n                        pinned: true,\n                        viewState: viewStateOfSource_1 || undefined\n                    }\n                };\n                return Promise.all(editorGroupService.groups.map(function (g) {\n                    return editorService.replaceEditors([{\n                            editor: { resource: resource },\n                            replacement: replacement\n                        }], g);\n                })).then(function () { return true; });\n            });\n        }\n        // Pin the active editor if we are saving it\n        var activeControl = editorService.activeControl;\n        var activeEditorResource = activeControl && activeControl.input && activeControl.input.getResource();\n        if (activeControl && activeEditorResource && activeEditorResource.toString() === resource.toString()) {\n            activeControl.group.pinEditor(activeControl.input);\n        }\n        // Just save (force a change to the file to trigger external watchers if any)\n        options = ensureForcedSave(options);\n        return textFileService.save(resource, options);\n    }\n    return Promise.resolve(false);\n}\nfunction saveAll(saveAllArguments, editorService, untitledEditorService, textFileService, editorGroupService) {\n    // Store some properties per untitled file to restore later after save is completed\n    var groupIdToUntitledResourceInput = new Map();\n    editorGroupService.groups.forEach(function (g) {\n        var activeEditorResource = g.activeEditor && g.activeEditor.getResource();\n        g.editors.forEach(function (e) {\n            var resource = e.getResource();\n            if (resource && untitledEditorService.isDirty(resource)) {\n                if (!groupIdToUntitledResourceInput.has(g.id)) {\n                    groupIdToUntitledResourceInput.set(g.id, []);\n                }\n                groupIdToUntitledResourceInput.get(g.id).push({\n                    encoding: untitledEditorService.getEncoding(resource),\n                    resource: resource,\n                    options: {\n                        inactive: activeEditorResource ? activeEditorResource.toString() !== resource.toString() : true,\n                        pinned: true,\n                        preserveFocus: true,\n                        index: g.getIndexOfEditor(e)\n                    }\n                });\n            }\n        });\n    });\n    // Save all\n    return textFileService.saveAll(saveAllArguments).then(function (result) {\n        groupIdToUntitledResourceInput.forEach(function (inputs, groupId) {\n            // Update untitled resources to the saved ones, so we open the proper files\n            inputs.forEach(function (i) {\n                var targetResult = result.results.filter(function (r) { return r.success && r.source.toString() === i.resource.toString(); }).pop();\n                if (targetResult && targetResult.target) {\n                    i.resource = targetResult.target;\n                }\n            });\n            editorService.openEditors(inputs, groupId);\n        });\n    });\n}\n// Command registration\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.REVERT_FILE_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var textFileService = accessor.get(textfiles_1.ITextFileService);\n        var notificationService = accessor.get(notification_1.INotificationService);\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), editorService)\n            .filter(function (resource) { return resource.scheme !== network_1.Schemas.untitled; });\n        if (resources.length) {\n            return textFileService.revertAll(resources, { force: true }).then(undefined, function (error) {\n                notificationService.error(nls.localize('genericRevertError', \"Failed to revert '{0}': {1}\", resources.map(function (r) { return resources_1.basename(r); }).join(', '), errorMessage_1.toErrorMessage(error, false)));\n            });\n        }\n        return Promise.resolve(true);\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: files_1.ExplorerFocusCondition,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Enter,\n    mac: {\n        primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.Enter\n    },\n    id: exports.OPEN_TO_SIDE_COMMAND_ID, handler: function (accessor, resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var listService = accessor.get(listService_1.IListService);\n        var fileService = accessor.get(files_2.IFileService);\n        var resources = files_3.getMultiSelectedResources(resource, listService, editorService);\n        // Set side input\n        if (resources.length) {\n            return fileService.resolveFiles(resources.map(function (resource) { return ({ resource: resource }); })).then(function (resolved) {\n                var editors = resolved.filter(function (r) { return r.stat && r.success && !r.stat.isDirectory; }).map(function (r) { return ({\n                    resource: r.stat.resource\n                }); });\n                return editorService.openEditors(editors, editorService_1.SIDE_GROUP);\n            });\n        }\n        return Promise.resolve(true);\n    }\n});\nvar COMPARE_WITH_SAVED_SCHEMA = 'showModifications';\nvar provider;\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: exports.COMPARE_WITH_SAVED_COMMAND_ID,\n    when: undefined,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_D),\n    handler: function (accessor, resource) {\n        if (!provider) {\n            var instantiationService = accessor.get(instantiation_1.IInstantiationService);\n            var textModelService = accessor.get(resolverService_1.ITextModelService);\n            provider = instantiationService.createInstance(files_1.FileOnDiskContentProvider);\n            textModelService.registerTextModelContentProvider(COMPARE_WITH_SAVED_SCHEMA, provider);\n        }\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var uri = files_3.getResourceForCommand(resource, accessor.get(listService_1.IListService), editorService);\n        if (uri && uri.scheme === network_1.Schemas.file /* only files on disk supported for now */) {\n            var name = resources_1.basename(uri);\n            var editorLabel = nls.localize('modifiedLabel', \"{0} (on disk) ↔ {1}\", name, name);\n            return editorService.openEditor({ leftResource: uri.with({ scheme: COMPARE_WITH_SAVED_SCHEMA }), rightResource: uri, label: editorLabel }).then(function () { return undefined; });\n        }\n        return Promise.resolve(true);\n    }\n});\nvar globalResourceToCompare;\nvar resourceSelectedForCompareContext;\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.SELECT_FOR_COMPARE_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var listService = accessor.get(listService_1.IListService);\n        globalResourceToCompare = files_3.getResourceForCommand(resource, listService, accessor.get(editorService_1.IEditorService));\n        if (!resourceSelectedForCompareContext) {\n            resourceSelectedForCompareContext = exports.ResourceSelectedForCompareContext.bindTo(accessor.get(contextkey_1.IContextKeyService));\n        }\n        resourceSelectedForCompareContext.set(true);\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.COMPARE_SELECTED_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), editorService);\n        if (resources.length === 2) {\n            return editorService.openEditor({\n                leftResource: resources[0],\n                rightResource: resources[1]\n            });\n        }\n        return Promise.resolve(true);\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.COMPARE_RESOURCE_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var listService = accessor.get(listService_1.IListService);\n        var rightResource = files_3.getResourceForCommand(resource, listService, editorService);\n        if (globalResourceToCompare && rightResource) {\n            editorService.openEditor({\n                leftResource: globalResourceToCompare,\n                rightResource: rightResource\n            }).then(undefined, errors_1.onUnexpectedError);\n        }\n    }\n});\nfunction revealResourcesInOS(resources, windowsService, notificationService, workspaceContextService) {\n    if (resources.length) {\n        async_1.sequence(resources.map(function (r) { return function () { return windowsService.showItemInFolder(r); }; }));\n    }\n    else if (workspaceContextService.getWorkspace().folders.length) {\n        windowsService.showItemInFolder(workspaceContextService.getWorkspace().folders[0].uri);\n    }\n    else {\n        notificationService.info(nls.localize('openFileToReveal', \"Open a file first to reveal\"));\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: exports.REVEAL_IN_OS_COMMAND_ID,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: editorContextKeys_1.EditorContextKeys.focus.toNegated(),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_R,\n    win: {\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_R\n    },\n    handler: function (accessor, resource) {\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), accessor.get(editorService_1.IEditorService));\n        revealResourcesInOS(resources, accessor.get(windows_1.IWindowsService), accessor.get(notification_1.INotificationService), accessor.get(workspace_1.IWorkspaceContextService));\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: undefined,\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_R),\n    id: 'workbench.action.files.revealActiveFileInWindows',\n    handler: function (accessor) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var activeInput = editorService.activeEditor;\n        var resource = activeInput ? activeInput.getResource() : null;\n        var resources = resource ? [resource] : [];\n        revealResourcesInOS(resources, accessor.get(windows_1.IWindowsService), accessor.get(notification_1.INotificationService), accessor.get(workspace_1.IWorkspaceContextService));\n    }\n});\nfunction resourcesToClipboard(resources, relative, clipboardService, notificationService, labelService) {\n    if (resources.length) {\n        var lineDelimiter = browser_1.isWindows ? '\\r\\n' : '\\n';\n        var text = resources.map(function (resource) { return labelService.getUriLabel(resource, { relative: relative, noPrefix: true }); })\n            .join(lineDelimiter);\n        clipboardService.writeText(text);\n    }\n    else {\n        notificationService.info(nls.localize('openFileToCopy', \"Open a file first to copy its path\"));\n    }\n}\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: editorContextKeys_1.EditorContextKeys.focus.toNegated(),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_C,\n    win: {\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_C\n    },\n    id: exports.COPY_PATH_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), accessor.get(editorService_1.IEditorService));\n        resourcesToClipboard(resources, false, accessor.get(clipboardService_1.IClipboardService), accessor.get(notification_1.INotificationService), accessor.get(label_1.ILabelService));\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: editorContextKeys_1.EditorContextKeys.focus.toNegated(),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_C,\n    win: {\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_C)\n    },\n    id: exports.COPY_RELATIVE_PATH_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), accessor.get(editorService_1.IEditorService));\n        resourcesToClipboard(resources, true, accessor.get(clipboardService_1.IClipboardService), accessor.get(notification_1.INotificationService), accessor.get(label_1.ILabelService));\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: undefined,\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_P),\n    id: 'workbench.action.files.copyPathOfActiveFile',\n    handler: function (accessor) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var activeInput = editorService.activeEditor;\n        var resource = activeInput ? activeInput.getResource() : null;\n        var resources = resource ? [resource] : [];\n        resourcesToClipboard(resources, false, accessor.get(clipboardService_1.IClipboardService), accessor.get(notification_1.INotificationService), accessor.get(label_1.ILabelService));\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.REVEAL_IN_EXPLORER_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var viewletService = accessor.get(viewlet_1.IViewletService);\n        var contextService = accessor.get(workspace_1.IWorkspaceContextService);\n        var explorerService = accessor.get(files_1.IExplorerService);\n        var uri = files_3.getResourceForCommand(resource, accessor.get(listService_1.IListService), accessor.get(editorService_1.IEditorService));\n        viewletService.openViewlet(files_1.VIEWLET_ID, false).then(function (viewlet) {\n            if (uri && contextService.isInsideWorkspace(uri)) {\n                var explorerView_1 = viewlet.getExplorerView();\n                if (explorerView_1) {\n                    explorerView_1.setExpanded(true);\n                    explorerService.select(uri, true).then(function () { return explorerView_1.focus(); }, errors_1.onUnexpectedError);\n                }\n            }\n            else {\n                var openEditorsView = viewlet.getOpenEditorsView();\n                if (openEditorsView) {\n                    openEditorsView.setExpanded(true);\n                    openEditorsView.focus();\n                }\n            }\n        });\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: exports.SAVE_FILE_AS_COMMAND_ID,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: undefined,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_S,\n    handler: function (accessor, resourceOrObject) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var resource = null;\n        if (resourceOrObject && 'from' in resourceOrObject && resourceOrObject.from === 'menu') {\n            resource = editor_1.toResource(editorService.activeEditor);\n        }\n        else {\n            resource = files_3.getResourceForCommand(resourceOrObject, accessor.get(listService_1.IListService), editorService);\n        }\n        return save(resource, true, undefined, editorService, accessor.get(files_2.IFileService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    when: undefined,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_S,\n    id: exports.SAVE_FILE_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), editorService);\n        if (resources.length === 1) {\n            // If only one resource is selected explictly call save since the behavior is a bit different than save all #41841\n            return save(resources[0], false, undefined, editorService, accessor.get(files_2.IFileService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n        }\n        return saveAll(resources, editorService, accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    when: undefined,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_S),\n    win: { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_S) },\n    id: exports.SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID,\n    handler: function (accessor) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var resource = editor_1.toResource(editorService.activeEditor, { supportSideBySide: true });\n        if (resource) {\n            return save(resource, false, { skipSaveParticipants: true }, editorService, accessor.get(files_2.IFileService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n        }\n        return undefined;\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.SAVE_ALL_COMMAND_ID,\n    handler: function (accessor) {\n        return saveAll(true, accessor.get(editorService_1.IEditorService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.SAVE_ALL_IN_GROUP_COMMAND_ID,\n    handler: function (accessor, resource, editorContext) {\n        var contexts = editorCommands_1.getMultiSelectedEditorContexts(editorContext, accessor.get(listService_1.IListService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n        var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n        var saveAllArg;\n        if (!contexts.length) {\n            saveAllArg = true;\n        }\n        else {\n            var fileService_1 = accessor.get(files_2.IFileService);\n            saveAllArg = [];\n            contexts.forEach(function (context) {\n                var editorGroup = editorGroupService.getGroup(context.groupId);\n                if (editorGroup) {\n                    editorGroup.editors.forEach(function (editor) {\n                        var resource = editor_1.toResource(editor, { supportSideBySide: true });\n                        if (resource && (resource.scheme === network_1.Schemas.untitled || fileService_1.canHandleResource(resource))) {\n                            saveAllArg.push(resource);\n                        }\n                    });\n                }\n            });\n        }\n        return saveAll(saveAllArg, accessor.get(editorService_1.IEditorService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.SAVE_FILES_COMMAND_ID,\n    handler: function (accessor) {\n        return saveAll(false, accessor.get(editorService_1.IEditorService), accessor.get(untitledEditorService_1.IUntitledEditorService), accessor.get(textfiles_1.ITextFileService), accessor.get(editorGroupsService_1.IEditorGroupsService));\n    }\n});\ncommands_1.CommandsRegistry.registerCommand({\n    id: exports.REMOVE_ROOT_FOLDER_COMMAND_ID,\n    handler: function (accessor, resource) {\n        var workspaceEditingService = accessor.get(workspaceEditing_1.IWorkspaceEditingService);\n        var contextService = accessor.get(workspace_1.IWorkspaceContextService);\n        var workspace = contextService.getWorkspace();\n        var resources = files_3.getMultiSelectedResources(resource, accessor.get(listService_1.IListService), accessor.get(editorService_1.IEditorService)).filter(function (r) {\n            // Need to verify resources are workspaces since multi selection can trigger this command on some non workspace resources\n            return workspace.folders.some(function (f) { return f.uri.toString() === r.toString(); });\n        });\n        return workspaceEditingService.removeFolders(resources);\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/fileCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/fileCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { toResource, IEditorCommandsContext } from 'vs/workbench/common/editor';\nimport { IWindowsService, IWindowService, IURIToOpen, IOpenSettings, INewWindowOptions } from 'vs/platform/windows/common/windows';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ExplorerFocusCondition, FileOnDiskContentProvider, VIEWLET_ID, IExplorerService } from 'vs/workbench/contrib/files/common/files';\nimport { ExplorerViewlet } from 'vs/workbench/contrib/files/browser/explorerViewlet';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ITextFileService, ISaveOptions } from 'vs/workbench/services/textfile/common/textfiles';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { RawContextKey, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { IEditorViewState } from 'vs/editor/common/editorCommon';\nimport { getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyMod, KeyCode, KeyChord } from 'vs/base/common/keyCodes';\nimport { isWindows, isMacintosh } from 'vs/base/browser/browser';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { sequence } from 'vs/base/common/async';\nimport { getResourceForCommand, getMultiSelectedResources } from 'vs/workbench/contrib/files/browser/files';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { getMultiSelectedEditorContexts } from 'vs/workbench/browser/parts/editor/editorCommands';\nimport { Schemas } from 'vs/base/common/network';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { basename } from 'vs/base/common/resources';\n\n// Commands\n\nexport const REVEAL_IN_OS_COMMAND_ID = 'revealFileInOS';\nexport const REVEAL_IN_OS_LABEL = isWindows ? nls.localize('revealInWindows', \"Reveal in Explorer\") : isMacintosh ? nls.localize('revealInMac', \"Reveal in Finder\") : nls.localize('openContainer', \"Open Containing Folder\");\nexport const REVEAL_IN_EXPLORER_COMMAND_ID = 'revealInExplorer';\nexport const REVERT_FILE_COMMAND_ID = 'workbench.action.files.revert';\nexport const OPEN_TO_SIDE_COMMAND_ID = 'explorer.openToSide';\nexport const SELECT_FOR_COMPARE_COMMAND_ID = 'selectForCompare';\n\nexport const COMPARE_SELECTED_COMMAND_ID = 'compareSelected';\nexport const COMPARE_RESOURCE_COMMAND_ID = 'compareFiles';\nexport const COMPARE_WITH_SAVED_COMMAND_ID = 'workbench.files.action.compareWithSaved';\nexport const COPY_PATH_COMMAND_ID = 'copyFilePath';\nexport const COPY_RELATIVE_PATH_COMMAND_ID = 'copyRelativeFilePath';\n\nexport const SAVE_FILE_AS_COMMAND_ID = 'workbench.action.files.saveAs';\nexport const SAVE_FILE_AS_LABEL = nls.localize('saveAs', \"Save As...\");\nexport const SAVE_FILE_COMMAND_ID = 'workbench.action.files.save';\nexport const SAVE_FILE_LABEL = nls.localize('save', \"Save\");\nexport const SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID = 'workbench.action.files.saveWithoutFormatting';\nexport const SAVE_FILE_WITHOUT_FORMATTING_LABEL = nls.localize('saveWithoutFormatting', \"Save without Formatting\");\n\nexport const SAVE_ALL_COMMAND_ID = 'saveAll';\nexport const SAVE_ALL_LABEL = nls.localize('saveAll', \"Save All\");\n\nexport const SAVE_ALL_IN_GROUP_COMMAND_ID = 'workbench.files.action.saveAllInGroup';\n\nexport const SAVE_FILES_COMMAND_ID = 'workbench.action.files.saveFiles';\n\nexport const OpenEditorsGroupContext = new RawContextKey<boolean>('groupFocusedInOpenEditors', false);\nexport const DirtyEditorContext = new RawContextKey<boolean>('dirtyEditor', false);\nexport const ResourceSelectedForCompareContext = new RawContextKey<boolean>('resourceSelectedForCompare', false);\n\nexport const REMOVE_ROOT_FOLDER_COMMAND_ID = 'removeRootFolder';\nexport const REMOVE_ROOT_FOLDER_LABEL = nls.localize('removeFolderFromWorkspace', \"Remove Folder from Workspace\");\n\nexport const openWindowCommand = (accessor: ServicesAccessor, urisToOpen: IURIToOpen[], options?: IOpenSettings) => {\n\tif (Array.isArray(urisToOpen)) {\n\t\tconst windowService = accessor.get(IWindowService);\n\t\twindowService.openWindow(urisToOpen, options);\n\t}\n};\n\nexport const newWindowCommand = (accessor: ServicesAccessor, options?: INewWindowOptions) => {\n\tconst windowsService = accessor.get(IWindowsService);\n\twindowsService.openNewWindow(options);\n};\n\nfunction save(\n\tresource: URI | null,\n\tisSaveAs: boolean,\n\toptions: ISaveOptions | undefined,\n\teditorService: IEditorService,\n\tfileService: IFileService,\n\tuntitledEditorService: IUntitledEditorService,\n\ttextFileService: ITextFileService,\n\teditorGroupService: IEditorGroupsService\n): Promise<any> {\n\n\tfunction ensureForcedSave(options?: ISaveOptions): ISaveOptions {\n\t\tif (!options) {\n\t\t\toptions = { force: true };\n\t\t} else {\n\t\t\toptions.force = true;\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tif (resource && (fileService.canHandleResource(resource) || resource.scheme === Schemas.untitled)) {\n\n\t\t// Save As (or Save untitled with associated path)\n\t\tif (isSaveAs || resource.scheme === Schemas.untitled) {\n\t\t\tlet encodingOfSource: string | undefined;\n\t\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\t\tencodingOfSource = untitledEditorService.getEncoding(resource);\n\t\t\t} else if (fileService.canHandleResource(resource)) {\n\t\t\t\tconst textModel = textFileService.models.get(resource);\n\t\t\t\tencodingOfSource = textModel && textModel.getEncoding(); // text model can be null e.g. if this is a binary file!\n\t\t\t}\n\n\t\t\tlet viewStateOfSource: IEditorViewState | null;\n\t\t\tconst activeTextEditorWidget = getCodeEditor(editorService.activeTextEditorWidget);\n\t\t\tif (activeTextEditorWidget) {\n\t\t\t\tconst activeResource = toResource(editorService.activeEditor, { supportSideBySide: true });\n\t\t\t\tif (activeResource && (fileService.canHandleResource(activeResource) || resource.scheme === Schemas.untitled) && activeResource.toString() === resource.toString()) {\n\t\t\t\t\tviewStateOfSource = activeTextEditorWidget.saveViewState();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Special case: an untitled file with associated path gets saved directly unless \"saveAs\" is true\n\t\t\tlet savePromise: Promise<URI | undefined>;\n\t\t\tif (!isSaveAs && resource.scheme === Schemas.untitled && untitledEditorService.hasAssociatedFilePath(resource)) {\n\t\t\t\tsavePromise = textFileService.save(resource, options).then((result) => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\treturn resource.with({ scheme: Schemas.file });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Otherwise, really \"Save As...\"\n\t\t\telse {\n\n\t\t\t\t// Force a change to the file to trigger external watchers if any\n\t\t\t\t// fixes https://github.com/Microsoft/vscode/issues/59655\n\t\t\t\toptions = ensureForcedSave(options);\n\n\t\t\t\tsavePromise = textFileService.saveAs(resource, undefined, options);\n\t\t\t}\n\n\t\t\treturn savePromise.then((target) => {\n\t\t\t\tif (!target || target.toString() === resource.toString()) {\n\t\t\t\t\treturn false; // save canceled or same resource used\n\t\t\t\t}\n\n\t\t\t\tconst replacement: IResourceInput = {\n\t\t\t\t\tresource: target,\n\t\t\t\t\tencoding: encodingOfSource,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tviewState: viewStateOfSource || undefined\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn Promise.all(editorGroupService.groups.map(g =>\n\t\t\t\t\teditorService.replaceEditors([{\n\t\t\t\t\t\teditor: { resource },\n\t\t\t\t\t\treplacement\n\t\t\t\t\t}], g))).then(() => true);\n\t\t\t});\n\t\t}\n\n\t\t// Pin the active editor if we are saving it\n\t\tconst activeControl = editorService.activeControl;\n\t\tconst activeEditorResource = activeControl && activeControl.input && activeControl.input.getResource();\n\t\tif (activeControl && activeEditorResource && activeEditorResource.toString() === resource.toString()) {\n\t\t\tactiveControl.group.pinEditor(activeControl.input);\n\t\t}\n\n\t\t// Just save (force a change to the file to trigger external watchers if any)\n\t\toptions = ensureForcedSave(options);\n\n\t\treturn textFileService.save(resource, options);\n\t}\n\n\treturn Promise.resolve(false);\n}\n\nfunction saveAll(saveAllArguments: any, editorService: IEditorService, untitledEditorService: IUntitledEditorService,\n\ttextFileService: ITextFileService, editorGroupService: IEditorGroupsService): Promise<any> {\n\n\t// Store some properties per untitled file to restore later after save is completed\n\tconst groupIdToUntitledResourceInput = new Map<number, IResourceInput[]>();\n\n\teditorGroupService.groups.forEach(g => {\n\t\tconst activeEditorResource = g.activeEditor && g.activeEditor.getResource();\n\t\tg.editors.forEach(e => {\n\t\t\tconst resource = e.getResource();\n\t\t\tif (resource && untitledEditorService.isDirty(resource)) {\n\t\t\t\tif (!groupIdToUntitledResourceInput.has(g.id)) {\n\t\t\t\t\tgroupIdToUntitledResourceInput.set(g.id, []);\n\t\t\t\t}\n\n\t\t\t\tgroupIdToUntitledResourceInput.get(g.id)!.push({\n\t\t\t\t\tencoding: untitledEditorService.getEncoding(resource),\n\t\t\t\t\tresource,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tinactive: activeEditorResource ? activeEditorResource.toString() !== resource.toString() : true,\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\t\tindex: g.getIndexOfEditor(e)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\t// Save all\n\treturn textFileService.saveAll(saveAllArguments).then((result) => {\n\t\tgroupIdToUntitledResourceInput.forEach((inputs, groupId) => {\n\t\t\t// Update untitled resources to the saved ones, so we open the proper files\n\t\t\tinputs.forEach(i => {\n\t\t\t\tconst targetResult = result.results.filter(r => r.success && r.source.toString() === i.resource.toString()).pop();\n\t\t\t\tif (targetResult && targetResult.target) {\n\t\t\t\t\ti.resource = targetResult.target;\n\t\t\t\t}\n\t\t\t});\n\t\t\teditorService.openEditors(inputs, groupId);\n\t\t});\n\t});\n}\n\n// Command registration\n\nCommandsRegistry.registerCommand({\n\tid: REVERT_FILE_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst textFileService = accessor.get(ITextFileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService)\n\t\t\t.filter(resource => resource.scheme !== Schemas.untitled);\n\n\t\tif (resources.length) {\n\t\t\treturn textFileService.revertAll(resources, { force: true }).then(undefined, error => {\n\t\t\t\tnotificationService.error(nls.localize('genericRevertError', \"Failed to revert '{0}': {1}\", resources.map(r => basename(r)).join(', '), toErrorMessage(error, false)));\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ExplorerFocusCondition,\n\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\tmac: {\n\t\tprimary: KeyMod.WinCtrl | KeyCode.Enter\n\t},\n\tid: OPEN_TO_SIDE_COMMAND_ID, handler: (accessor, resource: URI | object) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst listService = accessor.get(IListService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst resources = getMultiSelectedResources(resource, listService, editorService);\n\n\t\t// Set side input\n\t\tif (resources.length) {\n\t\t\treturn fileService.resolveFiles(resources.map(resource => ({ resource }))).then(resolved => {\n\t\t\t\tconst editors = resolved.filter(r => r.stat && r.success && !r.stat.isDirectory).map(r => ({\n\t\t\t\t\tresource: r.stat!.resource\n\t\t\t\t}));\n\n\t\t\t\treturn editorService.openEditors(editors, SIDE_GROUP);\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n});\n\nconst COMPARE_WITH_SAVED_SCHEMA = 'showModifications';\nlet provider: FileOnDiskContentProvider;\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: COMPARE_WITH_SAVED_COMMAND_ID,\n\twhen: undefined,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_D),\n\thandler: (accessor, resource: URI | object) => {\n\t\tif (!provider) {\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst textModelService = accessor.get(ITextModelService);\n\t\t\tprovider = instantiationService.createInstance(FileOnDiskContentProvider);\n\t\t\ttextModelService.registerTextModelContentProvider(COMPARE_WITH_SAVED_SCHEMA, provider);\n\t\t}\n\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst uri = getResourceForCommand(resource, accessor.get(IListService), editorService);\n\n\t\tif (uri && uri.scheme === Schemas.file /* only files on disk supported for now */) {\n\t\t\tconst name = basename(uri);\n\t\t\tconst editorLabel = nls.localize('modifiedLabel', \"{0} (on disk) ↔ {1}\", name, name);\n\n\t\t\treturn editorService.openEditor({ leftResource: uri.with({ scheme: COMPARE_WITH_SAVED_SCHEMA }), rightResource: uri, label: editorLabel }).then(() => undefined);\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n});\n\nlet globalResourceToCompare: URI | null;\nlet resourceSelectedForCompareContext: IContextKey<boolean>;\nCommandsRegistry.registerCommand({\n\tid: SELECT_FOR_COMPARE_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst listService = accessor.get(IListService);\n\n\t\tglobalResourceToCompare = getResourceForCommand(resource, listService, accessor.get(IEditorService));\n\t\tif (!resourceSelectedForCompareContext) {\n\t\t\tresourceSelectedForCompareContext = ResourceSelectedForCompareContext.bindTo(accessor.get(IContextKeyService));\n\t\t}\n\t\tresourceSelectedForCompareContext.set(true);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: COMPARE_SELECTED_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService);\n\n\t\tif (resources.length === 2) {\n\t\t\treturn editorService.openEditor({\n\t\t\t\tleftResource: resources[0],\n\t\t\t\trightResource: resources[1]\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(true);\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: COMPARE_RESOURCE_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst listService = accessor.get(IListService);\n\n\t\tconst rightResource = getResourceForCommand(resource, listService, editorService);\n\t\tif (globalResourceToCompare && rightResource) {\n\t\t\teditorService.openEditor({\n\t\t\t\tleftResource: globalResourceToCompare,\n\t\t\t\trightResource\n\t\t\t}).then(undefined, onUnexpectedError);\n\t\t}\n\t}\n});\n\nfunction revealResourcesInOS(resources: URI[], windowsService: IWindowsService, notificationService: INotificationService, workspaceContextService: IWorkspaceContextService): void {\n\tif (resources.length) {\n\t\tsequence(resources.map(r => () => windowsService.showItemInFolder(r)));\n\t} else if (workspaceContextService.getWorkspace().folders.length) {\n\t\twindowsService.showItemInFolder(workspaceContextService.getWorkspace().folders[0].uri);\n\t} else {\n\t\tnotificationService.info(nls.localize('openFileToReveal', \"Open a file first to reveal\"));\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: REVEAL_IN_OS_COMMAND_ID,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: EditorContextKeys.focus.toNegated(),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_R,\n\twin: {\n\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_R\n\t},\n\thandler: (accessor: ServicesAccessor, resource: URI | object) => {\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService));\n\t\trevealResourcesInOS(resources, accessor.get(IWindowsService), accessor.get(INotificationService), accessor.get(IWorkspaceContextService));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_R),\n\tid: 'workbench.action.files.revealActiveFileInWindows',\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeInput = editorService.activeEditor;\n\t\tconst resource = activeInput ? activeInput.getResource() : null;\n\t\tconst resources = resource ? [resource] : [];\n\t\trevealResourcesInOS(resources, accessor.get(IWindowsService), accessor.get(INotificationService), accessor.get(IWorkspaceContextService));\n\t}\n});\n\nfunction resourcesToClipboard(resources: URI[], relative: boolean, clipboardService: IClipboardService, notificationService: INotificationService, labelService: ILabelService): void {\n\tif (resources.length) {\n\t\tconst lineDelimiter = isWindows ? '\\r\\n' : '\\n';\n\n\t\tconst text = resources.map(resource => labelService.getUriLabel(resource, { relative, noPrefix: true }))\n\t\t\t.join(lineDelimiter);\n\t\tclipboardService.writeText(text);\n\t} else {\n\t\tnotificationService.info(nls.localize('openFileToCopy', \"Open a file first to copy its path\"));\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: EditorContextKeys.focus.toNegated(),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_C,\n\twin: {\n\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_C\n\t},\n\tid: COPY_PATH_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService));\n\t\tresourcesToClipboard(resources, false, accessor.get(IClipboardService), accessor.get(INotificationService), accessor.get(ILabelService));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: EditorContextKeys.focus.toNegated(),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KEY_C,\n\twin: {\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_C)\n\t},\n\tid: COPY_RELATIVE_PATH_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService));\n\t\tresourcesToClipboard(resources, true, accessor.get(IClipboardService), accessor.get(INotificationService), accessor.get(ILabelService));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_P),\n\tid: 'workbench.action.files.copyPathOfActiveFile',\n\thandler: (accessor) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeInput = editorService.activeEditor;\n\t\tconst resource = activeInput ? activeInput.getResource() : null;\n\t\tconst resources = resource ? [resource] : [];\n\t\tresourcesToClipboard(resources, false, accessor.get(IClipboardService), accessor.get(INotificationService), accessor.get(ILabelService));\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: REVEAL_IN_EXPLORER_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst viewletService = accessor.get(IViewletService);\n\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\t\tconst explorerService = accessor.get(IExplorerService);\n\t\tconst uri = getResourceForCommand(resource, accessor.get(IListService), accessor.get(IEditorService));\n\n\t\tviewletService.openViewlet(VIEWLET_ID, false).then((viewlet: ExplorerViewlet) => {\n\t\t\tif (uri && contextService.isInsideWorkspace(uri)) {\n\t\t\t\tconst explorerView = viewlet.getExplorerView();\n\t\t\t\tif (explorerView) {\n\t\t\t\t\texplorerView.setExpanded(true);\n\t\t\t\t\texplorerService.select(uri, true).then(() => explorerView.focus(), onUnexpectedError);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst openEditorsView = viewlet.getOpenEditorsView();\n\t\t\t\tif (openEditorsView) {\n\t\t\t\t\topenEditorsView.setExpanded(true);\n\t\t\t\t\topenEditorsView.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: SAVE_FILE_AS_COMMAND_ID,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: undefined,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_S,\n\thandler: (accessor, resourceOrObject: URI | object | { from: string }) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tlet resource: URI | null = null;\n\t\tif (resourceOrObject && 'from' in resourceOrObject && resourceOrObject.from === 'menu') {\n\t\t\tresource = toResource(editorService.activeEditor);\n\t\t} else {\n\t\t\tresource = getResourceForCommand(resourceOrObject, accessor.get(IListService), editorService);\n\t\t}\n\n\t\treturn save(resource, true, undefined, editorService, accessor.get(IFileService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\twhen: undefined,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_S,\n\tid: SAVE_FILE_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService);\n\n\t\tif (resources.length === 1) {\n\t\t\t// If only one resource is selected explictly call save since the behavior is a bit different than save all #41841\n\t\t\treturn save(resources[0], false, undefined, editorService, accessor.get(IFileService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t\t}\n\t\treturn saveAll(resources, editorService, accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\twhen: undefined,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_S),\n\twin: { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_S) },\n\tid: SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID,\n\thandler: accessor => {\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst resource = toResource(editorService.activeEditor, { supportSideBySide: true });\n\t\tif (resource) {\n\t\t\treturn save(resource, false, { skipSaveParticipants: true }, editorService, accessor.get(IFileService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t\t}\n\n\t\treturn undefined;\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: SAVE_ALL_COMMAND_ID,\n\thandler: (accessor) => {\n\t\treturn saveAll(true, accessor.get(IEditorService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: SAVE_ALL_IN_GROUP_COMMAND_ID,\n\thandler: (accessor, resource: URI | object, editorContext: IEditorCommandsContext) => {\n\t\tconst contexts = getMultiSelectedEditorContexts(editorContext, accessor.get(IListService), accessor.get(IEditorGroupsService));\n\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\tlet saveAllArg: any;\n\t\tif (!contexts.length) {\n\t\t\tsaveAllArg = true;\n\t\t} else {\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tsaveAllArg = [];\n\t\t\tcontexts.forEach(context => {\n\t\t\t\tconst editorGroup = editorGroupService.getGroup(context.groupId);\n\t\t\t\tif (editorGroup) {\n\t\t\t\t\teditorGroup.editors.forEach(editor => {\n\t\t\t\t\t\tconst resource = toResource(editor, { supportSideBySide: true });\n\t\t\t\t\t\tif (resource && (resource.scheme === Schemas.untitled || fileService.canHandleResource(resource))) {\n\t\t\t\t\t\t\tsaveAllArg.push(resource);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn saveAll(saveAllArg, accessor.get(IEditorService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: SAVE_FILES_COMMAND_ID,\n\thandler: (accessor) => {\n\t\treturn saveAll(false, accessor.get(IEditorService), accessor.get(IUntitledEditorService), accessor.get(ITextFileService), accessor.get(IEditorGroupsService));\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: REMOVE_ROOT_FOLDER_COMMAND_ID,\n\thandler: (accessor, resource: URI | object) => {\n\t\tconst workspaceEditingService = accessor.get(IWorkspaceEditingService);\n\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\t\tconst workspace = contextService.getWorkspace();\n\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), accessor.get(IEditorService)).filter(r =>\n\t\t\t// Need to verify resources are workspaces since multi selection can trigger this command on some non workspace resources\n\t\t\tworkspace.folders.some(f => f.uri.toString() === r.toString())\n\t\t);\n\n\t\treturn workspaceEditingService.removeFolders(resources);\n\t}\n});\n"]}]}