{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/platform\", \"vs/editor/common/config/editorOptions\", \"vs/editor/common/core/editOperation\", \"vs/editor/common/core/range\", \"vs/editor/common/model\", \"vs/editor/common/model/textModel\", \"vs/editor/common/modes/modesRegistry\", \"vs/editor/common/services/resourceConfiguration\", \"vs/platform/configuration/common/configuration\"], function (require, exports, event_1, lifecycle_1, platform, editorOptions_1, editOperation_1, range_1, model_1, textModel_1, modesRegistry_1, resourceConfiguration_1, configuration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function MODEL_ID(resource) {\n        return resource.toString();\n    }\n    class ModelData {\n        constructor(model, onWillDispose, onDidChangeLanguage) {\n            this.model = model;\n            this._languageSelection = null;\n            this._languageSelectionListener = null;\n            this._modelEventListeners = [];\n            this._modelEventListeners.push(model.onWillDispose(() => onWillDispose(model)));\n            this._modelEventListeners.push(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n        }\n        _disposeLanguageSelection() {\n            if (this._languageSelectionListener) {\n                this._languageSelectionListener.dispose();\n                this._languageSelectionListener = null;\n            }\n            if (this._languageSelection) {\n                this._languageSelection.dispose();\n                this._languageSelection = null;\n            }\n        }\n        dispose() {\n            this._modelEventListeners = lifecycle_1.dispose(this._modelEventListeners);\n            this._disposeLanguageSelection();\n        }\n        setLanguage(languageSelection) {\n            this._disposeLanguageSelection();\n            this._languageSelection = languageSelection;\n            this._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageIdentifier));\n            this.model.setMode(languageSelection.languageIdentifier);\n        }\n    }\n    const DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? model_1.DefaultEndOfLine.LF : model_1.DefaultEndOfLine.CRLF;\n    let ModelServiceImpl = class ModelServiceImpl extends lifecycle_1.Disposable {\n        constructor(configurationService, resourcePropertiesService) {\n            super();\n            this._onModelAdded = this._register(new event_1.Emitter());\n            this.onModelAdded = this._onModelAdded.event;\n            this._onModelRemoved = this._register(new event_1.Emitter());\n            this.onModelRemoved = this._onModelRemoved.event;\n            this._onModelModeChanged = this._register(new event_1.Emitter());\n            this.onModelModeChanged = this._onModelModeChanged.event;\n            this._configurationService = configurationService;\n            this._resourcePropertiesService = resourcePropertiesService;\n            this._models = {};\n            this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n            this._configurationServiceSubscription = this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions());\n            this._updateModelOptions();\n        }\n        static _readModelOptions(config, isForSimpleWidget) {\n            let tabSize = editorOptions_1.EDITOR_MODEL_DEFAULTS.tabSize;\n            if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n                let parsedTabSize = parseInt(config.editor.tabSize, 10);\n                if (!isNaN(parsedTabSize)) {\n                    tabSize = parsedTabSize;\n                }\n                if (tabSize < 1) {\n                    tabSize = 1;\n                }\n            }\n            let indentSize = tabSize;\n            if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n                let parsedIndentSize = parseInt(config.editor.indentSize, 10);\n                if (!isNaN(parsedIndentSize)) {\n                    indentSize = parsedIndentSize;\n                }\n                if (indentSize < 1) {\n                    indentSize = 1;\n                }\n            }\n            let insertSpaces = editorOptions_1.EDITOR_MODEL_DEFAULTS.insertSpaces;\n            if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n                insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n            }\n            let newDefaultEOL = DEFAULT_EOL;\n            const eol = config.eol;\n            if (eol === '\\r\\n') {\n                newDefaultEOL = model_1.DefaultEndOfLine.CRLF;\n            }\n            else if (eol === '\\n') {\n                newDefaultEOL = model_1.DefaultEndOfLine.LF;\n            }\n            let trimAutoWhitespace = editorOptions_1.EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n            if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n                trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n            }\n            let detectIndentation = editorOptions_1.EDITOR_MODEL_DEFAULTS.detectIndentation;\n            if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n                detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n            }\n            let largeFileOptimizations = editorOptions_1.EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n            if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n                largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n            }\n            return {\n                isForSimpleWidget: isForSimpleWidget,\n                tabSize: tabSize,\n                indentSize: indentSize,\n                insertSpaces: insertSpaces,\n                detectIndentation: detectIndentation,\n                defaultEOL: newDefaultEOL,\n                trimAutoWhitespace: trimAutoWhitespace,\n                largeFileOptimizations: largeFileOptimizations\n            };\n        }\n        getCreationOptions(language, resource, isForSimpleWidget) {\n            let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n            if (!creationOptions) {\n                const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n                const eol = this._resourcePropertiesService.getEOL(resource, language);\n                creationOptions = ModelServiceImpl._readModelOptions({ editor, eol }, isForSimpleWidget);\n                this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n            }\n            return creationOptions;\n        }\n        _updateModelOptions() {\n            let oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n            this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n            // Update options on all models\n            let keys = Object.keys(this._models);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                let modelId = keys[i];\n                let modelData = this._models[modelId];\n                const language = modelData.model.getLanguageIdentifier().language;\n                const uri = modelData.model.uri;\n                const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n                const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n                ModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n            }\n        }\n        static _setModelOptionsForModel(model, newOptions, currentOptions) {\n            if (currentOptions\n                && (currentOptions.detectIndentation === newOptions.detectIndentation)\n                && (currentOptions.insertSpaces === newOptions.insertSpaces)\n                && (currentOptions.tabSize === newOptions.tabSize)\n                && (currentOptions.indentSize === newOptions.indentSize)\n                && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)) {\n                // Same indent opts, no need to touch the model\n                return;\n            }\n            if (newOptions.detectIndentation) {\n                model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n                model.updateOptions({\n                    trimAutoWhitespace: newOptions.trimAutoWhitespace\n                });\n            }\n            else {\n                model.updateOptions({\n                    insertSpaces: newOptions.insertSpaces,\n                    tabSize: newOptions.tabSize,\n                    indentSize: newOptions.indentSize,\n                    trimAutoWhitespace: newOptions.trimAutoWhitespace\n                });\n            }\n        }\n        dispose() {\n            this._configurationServiceSubscription.dispose();\n            super.dispose();\n        }\n        // --- begin IModelService\n        _createModelData(value, languageIdentifier, resource, isForSimpleWidget) {\n            // create & save the model\n            const options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\n            const model = new textModel_1.TextModel(value, options, languageIdentifier, resource);\n            const modelId = MODEL_ID(model.uri);\n            if (this._models[modelId]) {\n                // There already exists a model with this id => this is a programmer error\n                throw new Error('ModelService: Cannot add model because it already exists!');\n            }\n            const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n            this._models[modelId] = modelData;\n            return modelData;\n        }\n        updateModel(model, value) {\n            const options = this.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n            const textBuffer = textModel_1.createTextBuffer(value, options.defaultEOL);\n            // Return early if the text is already set in that form\n            if (model.equalsTextBuffer(textBuffer)) {\n                return;\n            }\n            // Otherwise find a diff between the values and update model\n            model.pushStackElement();\n            model.pushEOL(textBuffer.getEOL() === '\\r\\n' ? model_1.EndOfLineSequence.CRLF : model_1.EndOfLineSequence.LF);\n            model.pushEditOperations([], ModelServiceImpl._computeEdits(model, textBuffer), (inverseEditOperations) => []);\n            model.pushStackElement();\n        }\n        static _commonPrefix(a, aLen, aDelta, b, bLen, bDelta) {\n            const maxResult = Math.min(aLen, bLen);\n            let result = 0;\n            for (let i = 0; i < maxResult && a.getLineContent(aDelta + i) === b.getLineContent(bDelta + i); i++) {\n                result++;\n            }\n            return result;\n        }\n        static _commonSuffix(a, aLen, aDelta, b, bLen, bDelta) {\n            const maxResult = Math.min(aLen, bLen);\n            let result = 0;\n            for (let i = 0; i < maxResult && a.getLineContent(aDelta + aLen - i) === b.getLineContent(bDelta + bLen - i); i++) {\n                result++;\n            }\n            return result;\n        }\n        /**\n         * Compute edits to bring `model` to the state of `textSource`.\n         */\n        static _computeEdits(model, textBuffer) {\n            const modelLineCount = model.getLineCount();\n            const textBufferLineCount = textBuffer.getLineCount();\n            const commonPrefix = this._commonPrefix(model, modelLineCount, 1, textBuffer, textBufferLineCount, 1);\n            if (modelLineCount === textBufferLineCount && commonPrefix === modelLineCount) {\n                // equality case\n                return [];\n            }\n            const commonSuffix = this._commonSuffix(model, modelLineCount - commonPrefix, commonPrefix, textBuffer, textBufferLineCount - commonPrefix, commonPrefix);\n            let oldRange, newRange;\n            if (commonSuffix > 0) {\n                oldRange = new range_1.Range(commonPrefix + 1, 1, modelLineCount - commonSuffix + 1, 1);\n                newRange = new range_1.Range(commonPrefix + 1, 1, textBufferLineCount - commonSuffix + 1, 1);\n            }\n            else if (commonPrefix > 0) {\n                oldRange = new range_1.Range(commonPrefix, model.getLineMaxColumn(commonPrefix), modelLineCount, model.getLineMaxColumn(modelLineCount));\n                newRange = new range_1.Range(commonPrefix, 1 + textBuffer.getLineLength(commonPrefix), textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n            }\n            else {\n                oldRange = new range_1.Range(1, 1, modelLineCount, model.getLineMaxColumn(modelLineCount));\n                newRange = new range_1.Range(1, 1, textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n            }\n            return [editOperation_1.EditOperation.replaceMove(oldRange, textBuffer.getValueInRange(newRange, model_1.EndOfLinePreference.TextDefined))];\n        }\n        createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n            let modelData;\n            if (languageSelection) {\n                modelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\n                this.setMode(modelData.model, languageSelection);\n            }\n            else {\n                modelData = this._createModelData(value, modesRegistry_1.PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\n            }\n            this._onModelAdded.fire(modelData.model);\n            return modelData.model;\n        }\n        setMode(model, languageSelection) {\n            if (!languageSelection) {\n                return;\n            }\n            let modelData = this._models[MODEL_ID(model.uri)];\n            if (!modelData) {\n                return;\n            }\n            modelData.setLanguage(languageSelection);\n        }\n        destroyModel(resource) {\n            // We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n            let modelData = this._models[MODEL_ID(resource)];\n            if (!modelData) {\n                return;\n            }\n            modelData.model.dispose();\n        }\n        getModels() {\n            let ret = [];\n            let keys = Object.keys(this._models);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                let modelId = keys[i];\n                ret.push(this._models[modelId].model);\n            }\n            return ret;\n        }\n        getModel(resource) {\n            let modelId = MODEL_ID(resource);\n            let modelData = this._models[modelId];\n            if (!modelData) {\n                return null;\n            }\n            return modelData.model;\n        }\n        // --- end IModelService\n        _onWillDispose(model) {\n            let modelId = MODEL_ID(model.uri);\n            let modelData = this._models[modelId];\n            delete this._models[modelId];\n            modelData.dispose();\n            // clean up cache\n            delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\n            this._onModelRemoved.fire(model);\n        }\n        _onDidChangeLanguage(model, e) {\n            const oldModeId = e.oldLanguage;\n            const newModeId = model.getLanguageIdentifier().language;\n            const oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\n            const newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\n            ModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\n            this._onModelModeChanged.fire({ model, oldModeId });\n        }\n    };\n    ModelServiceImpl = __decorate([\n        __param(0, configuration_1.IConfigurationService),\n        __param(1, resourceConfiguration_1.ITextResourcePropertiesService)\n    ], ModelServiceImpl);\n    exports.ModelServiceImpl = ModelServiceImpl;\n});\n",null]}