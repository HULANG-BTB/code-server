{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/renderingContext.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class RestrictedRenderingContext {\n        constructor(viewLayout, viewportData) {\n            this._viewLayout = viewLayout;\n            this.viewportData = viewportData;\n            this.scrollWidth = this._viewLayout.getScrollWidth();\n            this.scrollHeight = this._viewLayout.getScrollHeight();\n            this.visibleRange = this.viewportData.visibleRange;\n            this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n            const vInfo = this._viewLayout.getCurrentViewport();\n            this.scrollTop = vInfo.top;\n            this.scrollLeft = vInfo.left;\n            this.viewportWidth = vInfo.width;\n            this.viewportHeight = vInfo.height;\n        }\n        getScrolledTopFromAbsoluteTop(absoluteTop) {\n            return absoluteTop - this.scrollTop;\n        }\n        getVerticalOffsetForLineNumber(lineNumber) {\n            return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n        }\n        getDecorationsInViewport() {\n            return this.viewportData.getDecorationsInViewport();\n        }\n    }\n    exports.RestrictedRenderingContext = RestrictedRenderingContext;\n    class RenderingContext extends RestrictedRenderingContext {\n        constructor(viewLayout, viewportData, viewLines) {\n            super(viewLayout, viewportData);\n            this._viewLines = viewLines;\n        }\n        linesVisibleRangesForRange(range, includeNewLines) {\n            return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n        }\n        visibleRangeForPosition(position) {\n            return this._viewLines.visibleRangeForPosition(position);\n        }\n    }\n    exports.RenderingContext = RenderingContext;\n    class LineVisibleRanges {\n        constructor(lineNumber, ranges) {\n            this.lineNumber = lineNumber;\n            this.ranges = ranges;\n        }\n    }\n    exports.LineVisibleRanges = LineVisibleRanges;\n    class HorizontalRange {\n        constructor(left, width) {\n            this.left = Math.round(left);\n            this.width = Math.round(width);\n        }\n        toString() {\n            return `[${this.left},${this.width}]`;\n        }\n    }\n    exports.HorizontalRange = HorizontalRange;\n});\n",null]}