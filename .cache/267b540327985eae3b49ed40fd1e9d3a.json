{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/logger/src/extender.ts","dependencies":[{"path":"/home/coding/workspace/packages/logger/src/extender.ts","mtime":1555841535682},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcl = require(\"@google-cloud/logging\");\nconst logger_1 = require(\"./logger\");\nexports.createStackdriverExtender = (projectId, logId) => {\n    let GcpLogSeverity;\n    (function (GcpLogSeverity) {\n        GcpLogSeverity[GcpLogSeverity[\"DEFAULT\"] = 0] = \"DEFAULT\";\n        GcpLogSeverity[GcpLogSeverity[\"DEBUG\"] = 100] = \"DEBUG\";\n        GcpLogSeverity[GcpLogSeverity[\"INFO\"] = 200] = \"INFO\";\n        GcpLogSeverity[GcpLogSeverity[\"NOTICE\"] = 300] = \"NOTICE\";\n        GcpLogSeverity[GcpLogSeverity[\"WARNING\"] = 400] = \"WARNING\";\n        GcpLogSeverity[GcpLogSeverity[\"ERROR\"] = 500] = \"ERROR\";\n        GcpLogSeverity[GcpLogSeverity[\"CRITICAL\"] = 600] = \"CRITICAL\";\n        GcpLogSeverity[GcpLogSeverity[\"ALERT\"] = 700] = \"ALERT\";\n        GcpLogSeverity[GcpLogSeverity[\"EMERGENCY\"] = 800] = \"EMERGENCY\";\n    })(GcpLogSeverity || (GcpLogSeverity = {}));\n    const logging = new gcl.Logging({\n        autoRetry: true,\n        projectId,\n    });\n    const log = logging.log(logId);\n    const convertSeverity = (severity) => {\n        switch (severity) {\n            case \"trace\":\n            case \"debug\":\n                return GcpLogSeverity.DEBUG;\n            case \"info\":\n                return GcpLogSeverity.INFO;\n            case \"error\":\n                return GcpLogSeverity.ERROR;\n            case \"warn\":\n                return GcpLogSeverity.WARNING;\n        }\n    };\n    return (options) => {\n        const severity = convertSeverity(options.type);\n        // tslint:disable-next-line:no-any\n        const metadata = {};\n        if (options.fields) {\n            options.fields.forEach((f) => {\n                if (!f) {\n                    return;\n                }\n                metadata[f.identifier] = f.value;\n            });\n        }\n        const entry = log.entry({\n            // tslint:disable-next-line:no-any\n            severity: severity,\n        }, {\n            ...metadata,\n            message: options.message,\n        });\n        log.write(entry).catch((ex) => {\n            logger_1.logger.named(\"GCP\").error(\"Failed to log\", logger_1.field(\"error\", ex));\n        });\n    };\n};\n",{"version":3,"file":"/home/coding/workspace/packages/logger/src/extender.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/logger/src/extender.ts"],"names":[],"mappings":";;AAAA,6CAA6C;AAC7C,qCAAmD;AAEtC,QAAA,yBAAyB,GAAG,CAAC,SAAiB,EAAE,KAAa,EAAY,EAAE;IACvF,IAAK,cAUJ;IAVD,WAAK,cAAc;QAClB,yDAAW,CAAA;QACX,uDAAW,CAAA;QACX,qDAAU,CAAA;QACV,yDAAY,CAAA;QACZ,2DAAa,CAAA;QACb,uDAAW,CAAA;QACX,6DAAc,CAAA;QACd,uDAAW,CAAA;QACX,+DAAe,CAAA;IAChB,CAAC,EAVI,cAAc,KAAd,cAAc,QAUlB;IAED,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC;QAC/B,SAAS,EAAE,IAAI;QACf,SAAS;KACT,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/B,MAAM,eAAe,GAAG,CAAC,QAAuD,EAAkB,EAAE;QACnG,QAAQ,QAAQ,EAAE;YACjB,KAAK,OAAO,CAAC;YACb,KAAK,OAAO;gBACX,OAAO,cAAc,CAAC,KAAK,CAAC;YAC7B,KAAK,MAAM;gBACV,OAAO,cAAc,CAAC,IAAI,CAAC;YAC5B,KAAK,OAAO;gBACX,OAAO,cAAc,CAAC,KAAK,CAAC;YAC7B,KAAK,MAAM;gBACV,OAAO,cAAc,CAAC,OAAO,CAAC;SAC/B;IACF,CAAC,CAAC;IAEF,OAAO,CAAC,OAAO,EAAQ,EAAE;QACxB,MAAM,QAAQ,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/C,kCAAkC;QAClC,MAAM,QAAQ,GAAG,EAAS,CAAC;QAC3B,IAAI,OAAO,CAAC,MAAM,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC5B,IAAI,CAAC,CAAC,EAAE;oBACP,OAAO;iBACP;gBACD,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAClC,CAAC,CAAC,CAAC;SACH;QAED,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACvB,kCAAkC;YAClC,QAAQ,EAAE,QAAe;SACzB,EAAE;YACF,GAAG,QAAQ;YACX,OAAO,EAAE,OAAO,CAAC,OAAO;SACxB,CAAC,CAAC;QAEH,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE;YAC7B,eAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,cAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC;AAEH,CAAC,CAAC","sourcesContent":["import * as gcl from \"@google-cloud/logging\";\nimport { Extender, logger, field } from \"./logger\";\n\nexport const createStackdriverExtender = (projectId: string, logId: string): Extender => {\n\tenum GcpLogSeverity {\n\t\tDEFAULT = 0,\n\t\tDEBUG = 100,\n\t\tINFO = 200,\n\t\tNOTICE = 300,\n\t\tWARNING = 400,\n\t\tERROR = 500,\n\t\tCRITICAL = 600,\n\t\tALERT = 700,\n\t\tEMERGENCY = 800,\n\t}\n\n\tconst logging = new gcl.Logging({\n\t\tautoRetry: true,\n\t\tprojectId,\n\t});\n\n\tconst log = logging.log(logId);\n\tconst convertSeverity = (severity: \"trace\" | \"info\" | \"warn\" | \"debug\" | \"error\"): GcpLogSeverity => {\n\t\tswitch (severity) {\n\t\t\tcase \"trace\":\n\t\t\tcase \"debug\":\n\t\t\t\treturn GcpLogSeverity.DEBUG;\n\t\t\tcase \"info\":\n\t\t\t\treturn GcpLogSeverity.INFO;\n\t\t\tcase \"error\":\n\t\t\t\treturn GcpLogSeverity.ERROR;\n\t\t\tcase \"warn\":\n\t\t\t\treturn GcpLogSeverity.WARNING;\n\t\t}\n\t};\n\n\treturn (options): void => {\n\t\tconst severity = convertSeverity(options.type);\n\t\t// tslint:disable-next-line:no-any\n\t\tconst metadata = {} as any;\n\t\tif (options.fields) {\n\t\t\toptions.fields.forEach((f) => {\n\t\t\t\tif (!f) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tmetadata[f.identifier] = f.value;\n\t\t\t});\n\t\t}\n\n\t\tconst entry = log.entry({\n\t\t\t// tslint:disable-next-line:no-any\n\t\t\tseverity: severity as any,\n\t\t}, {\n\t\t\t...metadata,\n\t\t\tmessage: options.message,\n\t\t});\n\n\t\tlog.write(entry).catch((ex) => {\n\t\t\tlogger.named(\"GCP\").error(\"Failed to log\", field(\"error\", ex));\n\t\t});\n\t};\n\n};\n"]}]}