{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/lifecycle/common/lifecycleService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/async\", \"vs/base/common/lifecycle\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/log/common/log\", \"vs/base/common/performance\"], function (require, exports, event_1, async_1, lifecycle_1, lifecycle_2, log_1, performance_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let AbstractLifecycleService = class AbstractLifecycleService extends lifecycle_1.Disposable {\n        constructor(logService) {\n            super();\n            this.logService = logService;\n            this._onBeforeShutdown = this._register(new event_1.Emitter());\n            this._onWillShutdown = this._register(new event_1.Emitter());\n            this._onShutdown = this._register(new event_1.Emitter());\n            this._phase = lifecycle_2.LifecyclePhase.Starting;\n            this.phaseWhen = new Map();\n        }\n        get onBeforeShutdown() { return this._onBeforeShutdown.event; }\n        get onWillShutdown() { return this._onWillShutdown.event; }\n        get onShutdown() { return this._onShutdown.event; }\n        get startupKind() { return this._startupKind; }\n        get phase() { return this._phase; }\n        set phase(value) {\n            if (value < this.phase) {\n                throw new Error('Lifecycle cannot go backwards');\n            }\n            if (this._phase === value) {\n                return;\n            }\n            this.logService.trace(`lifecycle: phase changed (value: ${value})`);\n            this._phase = value;\n            performance_1.mark(`LifecyclePhase/${lifecycle_2.LifecyclePhaseToString(value)}`);\n            const barrier = this.phaseWhen.get(this._phase);\n            if (barrier) {\n                barrier.open();\n                this.phaseWhen.delete(this._phase);\n            }\n        }\n        when(phase) {\n            if (phase <= this._phase) {\n                return Promise.resolve();\n            }\n            let barrier = this.phaseWhen.get(phase);\n            if (!barrier) {\n                barrier = new async_1.Barrier();\n                this.phaseWhen.set(phase, barrier);\n            }\n            return barrier.wait();\n        }\n    };\n    AbstractLifecycleService = __decorate([\n        __param(0, log_1.ILogService)\n    ], AbstractLifecycleService);\n    exports.AbstractLifecycleService = AbstractLifecycleService;\n});\n",null]}