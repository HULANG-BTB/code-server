{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/test/electron-browser/themes.test.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/test/electron-browser/themes.test.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar workbenchThemeService_1 = require(\"vs/workbench/services/themes/common/workbenchThemeService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar textMateService_1 = require(\"vs/workbench/services/textMate/common/textMateService\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar TMHelper_1 = require(\"vs/workbench/services/textMate/common/TMHelper\");\nvar color_1 = require(\"vs/base/common/color\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar ThemeDocument = /** @class */ (function () {\n    function ThemeDocument(theme) {\n        this._theme = theme;\n        this._cache = Object.create(null);\n        this._defaultColor = '#000000';\n        for (var i = 0, len = this._theme.tokenColors.length; i < len; i++) {\n            var rule = this._theme.tokenColors[i];\n            if (!rule.scope) {\n                this._defaultColor = rule.settings.foreground;\n            }\n        }\n    }\n    ThemeDocument.prototype._generateExplanation = function (selector, color) {\n        return selector + \": \" + color_1.Color.Format.CSS.formatHexA(color, true).toUpperCase();\n    };\n    ThemeDocument.prototype.explainTokenColor = function (scopes, color) {\n        var matchingRule = this._findMatchingThemeRule(scopes);\n        if (!matchingRule) {\n            var expected_1 = color_1.Color.fromHex(this._defaultColor);\n            // No matching rule\n            if (!color.equals(expected_1)) {\n                throw new Error(\"[\" + this._theme.label + \"]: Unexpected color \" + color_1.Color.Format.CSS.formatHexA(color) + \" for \" + scopes + \". Expected default \" + color_1.Color.Format.CSS.formatHexA(expected_1));\n            }\n            return this._generateExplanation('default', color);\n        }\n        var expected = color_1.Color.fromHex(matchingRule.settings.foreground);\n        if (!color.equals(expected)) {\n            throw new Error(\"[\" + this._theme.label + \"]: Unexpected color \" + color_1.Color.Format.CSS.formatHexA(color) + \" for \" + scopes + \". Expected \" + color_1.Color.Format.CSS.formatHexA(expected) + \" coming in from \" + matchingRule.rawSelector);\n        }\n        return this._generateExplanation(matchingRule.rawSelector, color);\n    };\n    ThemeDocument.prototype._findMatchingThemeRule = function (scopes) {\n        if (!this._cache[scopes]) {\n            this._cache[scopes] = TMHelper_1.findMatchingThemeRule(this._theme, scopes.split(' '));\n        }\n        return this._cache[scopes];\n    };\n    return ThemeDocument;\n}());\nvar Snapper = /** @class */ (function () {\n    function Snapper(modeService, themeService, textMateService) {\n        this.modeService = modeService;\n        this.themeService = themeService;\n        this.textMateService = textMateService;\n    }\n    Snapper.prototype._themedTokenize = function (grammar, lines) {\n        var colorMap = modes_1.TokenizationRegistry.getColorMap();\n        var state = null;\n        var result = [], resultLen = 0;\n        for (var i = 0, len = lines.length; i < len; i++) {\n            var line = lines[i];\n            var tokenizationResult = grammar.tokenizeLine2(line, state);\n            for (var j = 0, lenJ = tokenizationResult.tokens.length >>> 1; j < lenJ; j++) {\n                var startOffset = tokenizationResult.tokens[(j << 1)];\n                var metadata = tokenizationResult.tokens[(j << 1) + 1];\n                var endOffset = j + 1 < lenJ ? tokenizationResult.tokens[((j + 1) << 1)] : line.length;\n                var tokenText = line.substring(startOffset, endOffset);\n                var color = modes_1.TokenMetadata.getForeground(metadata);\n                result[resultLen++] = {\n                    text: tokenText,\n                    color: colorMap[color]\n                };\n            }\n            state = tokenizationResult.ruleStack;\n        }\n        return result;\n    };\n    Snapper.prototype._tokenize = function (grammar, lines) {\n        var state = null;\n        var result = [];\n        var resultLen = 0;\n        for (var i = 0, len = lines.length; i < len; i++) {\n            var line = lines[i];\n            var tokenizationResult = grammar.tokenizeLine(line, state);\n            var lastScopes = null;\n            for (var j = 0, lenJ = tokenizationResult.tokens.length; j < lenJ; j++) {\n                var token = tokenizationResult.tokens[j];\n                var tokenText = line.substring(token.startIndex, token.endIndex);\n                var tokenScopes = token.scopes.join(' ');\n                if (lastScopes === tokenScopes) {\n                    result[resultLen - 1].c += tokenText;\n                }\n                else {\n                    lastScopes = tokenScopes;\n                    result[resultLen++] = {\n                        c: tokenText,\n                        t: tokenScopes,\n                        r: {\n                            dark_plus: undefined,\n                            light_plus: undefined,\n                            dark_vs: undefined,\n                            light_vs: undefined,\n                            hc_black: undefined,\n                        }\n                    };\n                }\n            }\n            state = tokenizationResult.ruleStack;\n        }\n        return result;\n    };\n    Snapper.prototype._getThemesResult = function (grammar, lines) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var currentTheme, getThemeName, result, themeDatas, defaultThemes, _i, defaultThemes_1, defaultTheme, themeId, success, themeName;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        currentTheme = this.themeService.getColorTheme();\n                        getThemeName = function (id) {\n                            var part = 'vscode-theme-defaults-themes-';\n                            var startIdx = id.indexOf(part);\n                            if (startIdx !== -1) {\n                                return id.substring(startIdx + part.length, id.length - 5);\n                            }\n                            return undefined;\n                        };\n                        result = {};\n                        return [4 /*yield*/, this.themeService.getColorThemes()];\n                    case 1:\n                        themeDatas = _a.sent();\n                        defaultThemes = themeDatas.filter(function (themeData) { return !!getThemeName(themeData.id); });\n                        _i = 0, defaultThemes_1 = defaultThemes;\n                        _a.label = 2;\n                    case 2:\n                        if (!(_i < defaultThemes_1.length)) return [3 /*break*/, 5];\n                        defaultTheme = defaultThemes_1[_i];\n                        themeId = defaultTheme.id;\n                        return [4 /*yield*/, this.themeService.setColorTheme(themeId, undefined)];\n                    case 3:\n                        success = _a.sent();\n                        if (success) {\n                            themeName = getThemeName(themeId);\n                            result[themeName] = {\n                                document: new ThemeDocument(this.themeService.getColorTheme()),\n                                tokens: this._themedTokenize(grammar, lines)\n                            };\n                        }\n                        _a.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 2];\n                    case 5: return [4 /*yield*/, this.themeService.setColorTheme(currentTheme.id, undefined)];\n                    case 6:\n                        _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    Snapper.prototype._enrichResult = function (result, themesResult) {\n        var index = {};\n        var themeNames = Object.keys(themesResult);\n        for (var _i = 0, themeNames_1 = themeNames; _i < themeNames_1.length; _i++) {\n            var themeName = themeNames_1[_i];\n            index[themeName] = 0;\n        }\n        for (var i = 0, len = result.length; i < len; i++) {\n            var token = result[i];\n            for (var _a = 0, themeNames_2 = themeNames; _a < themeNames_2.length; _a++) {\n                var themeName = themeNames_2[_a];\n                var themedToken = themesResult[themeName].tokens[index[themeName]];\n                themedToken.text = themedToken.text.substr(token.c.length);\n                token.r[themeName] = themesResult[themeName].document.explainTokenColor(token.t, themedToken.color);\n                if (themedToken.text.length === 0) {\n                    index[themeName]++;\n                }\n            }\n        }\n    };\n    Snapper.prototype.captureSyntaxTokens = function (fileName, content) {\n        var _this = this;\n        var modeId = this.modeService.getModeIdByFilepathOrFirstLine(fileName);\n        return this.textMateService.createGrammar(modeId).then(function (grammar) {\n            var lines = content.split(/\\r\\n|\\r|\\n/);\n            var result = _this._tokenize(grammar, lines);\n            return _this._getThemesResult(grammar, lines).then(function (themesResult) {\n                _this._enrichResult(result, themesResult);\n                return result.filter(function (t) { return t.c.length > 0; });\n            });\n        });\n    };\n    Snapper = tslib_1.__decorate([\n        tslib_1.__param(0, modeService_1.IModeService),\n        tslib_1.__param(1, workbenchThemeService_1.IWorkbenchThemeService),\n        tslib_1.__param(2, textMateService_1.ITextMateService)\n    ], Snapper);\n    return Snapper;\n}());\ncommands_1.CommandsRegistry.registerCommand('_workbench.captureSyntaxTokens', function (accessor, resource) {\n    var process = function (resource) {\n        var fileService = accessor.get(files_1.IFileService);\n        var fileName = resources_1.basename(resource);\n        var snapper = accessor.get(instantiation_1.IInstantiationService).createInstance(Snapper);\n        return fileService.resolveContent(resource).then(function (content) {\n            return snapper.captureSyntaxTokens(fileName, content.value);\n        });\n    };\n    if (!resource) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var file = editorService.activeEditor ? editor_1.toResource(editorService.activeEditor, { filter: 'file' }) : null;\n        if (file) {\n            process(file).then(function (result) {\n                console.log(result);\n            });\n        }\n        else {\n            console.log('No file editor active');\n        }\n    }\n    else {\n        return process(resource);\n    }\n    return undefined;\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/test/electron-browser/themes.test.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/themes/test/electron-browser/themes.test.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchThemeService, IColorTheme } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { toResource } from 'vs/workbench/common/editor';\nimport { ITextMateService } from 'vs/workbench/services/textMate/common/textMateService';\nimport { IGrammar, StackElement } from 'vscode-textmate';\nimport { TokenizationRegistry, TokenMetadata } from 'vs/editor/common/modes';\nimport { ThemeRule, findMatchingThemeRule } from 'vs/workbench/services/textMate/common/TMHelper';\nimport { Color } from 'vs/base/common/color';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { basename } from 'vs/base/common/resources';\n\ninterface IToken {\n\tc: string;\n\tt: string;\n\tr: { [themeName: string]: string | undefined; };\n}\n\ninterface IThemedToken {\n\ttext: string;\n\tcolor: Color;\n}\n\ninterface IThemesResult {\n\t[themeName: string]: {\n\t\tdocument: ThemeDocument;\n\t\ttokens: IThemedToken[];\n\t};\n}\n\nclass ThemeDocument {\n\tprivate readonly _theme: IColorTheme;\n\tprivate readonly _cache: { [scopes: string]: ThemeRule; };\n\tprivate readonly _defaultColor: string;\n\n\tconstructor(theme: IColorTheme) {\n\t\tthis._theme = theme;\n\t\tthis._cache = Object.create(null);\n\t\tthis._defaultColor = '#000000';\n\t\tfor (let i = 0, len = this._theme.tokenColors.length; i < len; i++) {\n\t\t\tlet rule = this._theme.tokenColors[i];\n\t\t\tif (!rule.scope) {\n\t\t\t\tthis._defaultColor = rule.settings.foreground!;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _generateExplanation(selector: string, color: Color): string {\n\t\treturn `${selector}: ${Color.Format.CSS.formatHexA(color, true).toUpperCase()}`;\n\t}\n\n\tpublic explainTokenColor(scopes: string, color: Color): string {\n\n\t\tlet matchingRule = this._findMatchingThemeRule(scopes);\n\t\tif (!matchingRule) {\n\t\t\tlet expected = Color.fromHex(this._defaultColor);\n\t\t\t// No matching rule\n\t\t\tif (!color.equals(expected)) {\n\t\t\t\tthrow new Error(`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected default ${Color.Format.CSS.formatHexA(expected)}`);\n\t\t\t}\n\t\t\treturn this._generateExplanation('default', color);\n\t\t}\n\n\t\tlet expected = Color.fromHex(matchingRule.settings.foreground!);\n\t\tif (!color.equals(expected)) {\n\t\t\tthrow new Error(`[${this._theme.label}]: Unexpected color ${Color.Format.CSS.formatHexA(color)} for ${scopes}. Expected ${Color.Format.CSS.formatHexA(expected)} coming in from ${matchingRule.rawSelector}`);\n\t\t}\n\t\treturn this._generateExplanation(matchingRule.rawSelector, color);\n\t}\n\n\tprivate _findMatchingThemeRule(scopes: string): ThemeRule {\n\t\tif (!this._cache[scopes]) {\n\t\t\tthis._cache[scopes] = findMatchingThemeRule(this._theme, scopes.split(' '))!;\n\t\t}\n\t\treturn this._cache[scopes];\n\t}\n}\n\nclass Snapper {\n\n\tconstructor(\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IWorkbenchThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@ITextMateService private readonly textMateService: ITextMateService\n\t) {\n\t}\n\n\tprivate _themedTokenize(grammar: IGrammar, lines: string[]): IThemedToken[] {\n\t\tlet colorMap = TokenizationRegistry.getColorMap();\n\t\tlet state: StackElement | null = null;\n\t\tlet result: IThemedToken[] = [], resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tlet line = lines[i];\n\n\t\t\tlet tokenizationResult = grammar.tokenizeLine2(line, state);\n\n\t\t\tfor (let j = 0, lenJ = tokenizationResult.tokens.length >>> 1; j < lenJ; j++) {\n\t\t\t\tlet startOffset = tokenizationResult.tokens[(j << 1)];\n\t\t\t\tlet metadata = tokenizationResult.tokens[(j << 1) + 1];\n\t\t\t\tlet endOffset = j + 1 < lenJ ? tokenizationResult.tokens[((j + 1) << 1)] : line.length;\n\t\t\t\tlet tokenText = line.substring(startOffset, endOffset);\n\n\t\t\t\tlet color = TokenMetadata.getForeground(metadata);\n\n\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\ttext: tokenText,\n\t\t\t\t\tcolor: colorMap![color]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _tokenize(grammar: IGrammar, lines: string[]): IToken[] {\n\t\tlet state: StackElement | null = null;\n\t\tlet result: IToken[] = [];\n\t\tlet resultLen = 0;\n\t\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\t\tlet line = lines[i];\n\n\t\t\tlet tokenizationResult = grammar.tokenizeLine(line, state);\n\t\t\tlet lastScopes: string | null = null;\n\n\t\t\tfor (let j = 0, lenJ = tokenizationResult.tokens.length; j < lenJ; j++) {\n\t\t\t\tlet token = tokenizationResult.tokens[j];\n\t\t\t\tlet tokenText = line.substring(token.startIndex, token.endIndex);\n\t\t\t\tlet tokenScopes = token.scopes.join(' ');\n\n\t\t\t\tif (lastScopes === tokenScopes) {\n\t\t\t\t\tresult[resultLen - 1].c += tokenText;\n\t\t\t\t} else {\n\t\t\t\t\tlastScopes = tokenScopes;\n\t\t\t\t\tresult[resultLen++] = {\n\t\t\t\t\t\tc: tokenText,\n\t\t\t\t\t\tt: tokenScopes,\n\t\t\t\t\t\tr: {\n\t\t\t\t\t\t\tdark_plus: undefined,\n\t\t\t\t\t\t\tlight_plus: undefined,\n\t\t\t\t\t\t\tdark_vs: undefined,\n\t\t\t\t\t\t\tlight_vs: undefined,\n\t\t\t\t\t\t\thc_black: undefined,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate = tokenizationResult.ruleStack;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _getThemesResult(grammar: IGrammar, lines: string[]): Promise<IThemesResult> {\n\t\tlet currentTheme = this.themeService.getColorTheme();\n\n\t\tlet getThemeName = (id: string) => {\n\t\t\tlet part = 'vscode-theme-defaults-themes-';\n\t\t\tlet startIdx = id.indexOf(part);\n\t\t\tif (startIdx !== -1) {\n\t\t\t\treturn id.substring(startIdx + part.length, id.length - 5);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\n\t\tlet result: IThemesResult = {};\n\n\t\tlet themeDatas = await this.themeService.getColorThemes();\n\t\tlet defaultThemes = themeDatas.filter(themeData => !!getThemeName(themeData.id));\n\t\tfor (let defaultTheme of defaultThemes) {\n\t\t\tlet themeId = defaultTheme.id;\n\t\t\tlet success = await this.themeService.setColorTheme(themeId, undefined);\n\t\t\tif (success) {\n\t\t\t\tlet themeName = getThemeName(themeId);\n\t\t\t\tresult[themeName!] = {\n\t\t\t\t\tdocument: new ThemeDocument(this.themeService.getColorTheme()),\n\t\t\t\t\ttokens: this._themedTokenize(grammar, lines)\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tawait this.themeService.setColorTheme(currentTheme.id, undefined);\n\t\treturn result;\n\t}\n\n\tprivate _enrichResult(result: IToken[], themesResult: IThemesResult): void {\n\t\tlet index: { [themeName: string]: number; } = {};\n\t\tlet themeNames = Object.keys(themesResult);\n\t\tfor (const themeName of themeNames) {\n\t\t\tindex[themeName] = 0;\n\t\t}\n\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tlet token = result[i];\n\n\t\t\tfor (const themeName of themeNames) {\n\t\t\t\tlet themedToken = themesResult[themeName].tokens[index[themeName]];\n\n\t\t\t\tthemedToken.text = themedToken.text.substr(token.c.length);\n\t\t\t\ttoken.r[themeName] = themesResult[themeName].document.explainTokenColor(token.t, themedToken.color);\n\t\t\t\tif (themedToken.text.length === 0) {\n\t\t\t\t\tindex[themeName]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic captureSyntaxTokens(fileName: string, content: string): Promise<IToken[]> {\n\t\tconst modeId = this.modeService.getModeIdByFilepathOrFirstLine(fileName);\n\t\treturn this.textMateService.createGrammar(modeId!).then((grammar) => {\n\t\t\tlet lines = content.split(/\\r\\n|\\r|\\n/);\n\n\t\t\tlet result = this._tokenize(grammar, lines);\n\t\t\treturn this._getThemesResult(grammar, lines).then((themesResult) => {\n\t\t\t\tthis._enrichResult(result, themesResult);\n\t\t\t\treturn result.filter(t => t.c.length > 0);\n\t\t\t});\n\t\t});\n\t}\n}\n\nCommandsRegistry.registerCommand('_workbench.captureSyntaxTokens', function (accessor: ServicesAccessor, resource: URI) {\n\n\tlet process = (resource: URI) => {\n\t\tlet fileService = accessor.get(IFileService);\n\t\tlet fileName = basename(resource);\n\t\tlet snapper = accessor.get(IInstantiationService).createInstance(Snapper);\n\n\t\treturn fileService.resolveContent(resource).then(content => {\n\t\t\treturn snapper.captureSyntaxTokens(fileName, content.value);\n\t\t});\n\t};\n\n\tif (!resource) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst file = editorService.activeEditor ? toResource(editorService.activeEditor, { filter: 'file' }) : null;\n\t\tif (file) {\n\t\t\tprocess(file).then(result => {\n\t\t\t\tconsole.log(result);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.log('No file editor active');\n\t\t}\n\t} else {\n\t\treturn process(resource);\n\t}\n\treturn undefined;\n});\n"]}]}