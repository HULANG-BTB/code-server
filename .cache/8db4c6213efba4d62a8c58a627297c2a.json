{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processTaskSystem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processTaskSystem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar Objects = require(\"vs/base/common/objects\");\nvar Types = require(\"vs/base/common/types\");\nvar Platform = require(\"vs/base/common/platform\");\nvar Async = require(\"vs/base/common/async\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar Strings = require(\"vs/base/common/strings\");\nvar event_1 = require(\"vs/base/common/event\");\nvar processes_1 = require(\"vs/base/node/processes\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar problemCollectors_1 = require(\"vs/workbench/contrib/tasks/common/problemCollectors\");\nvar taskSystem_1 = require(\"vs/workbench/contrib/tasks/common/taskSystem\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\n/**\n * Since ProcessTaskSystem is not receiving new feature updates all strict null check fixing has been done with !.\n */\nvar ProcessTaskSystem = /** @class */ (function () {\n    function ProcessTaskSystem(markerService, modelService, telemetryService, outputService, configurationResolverService, outputChannelId) {\n        this.outputChannelId = outputChannelId;\n        this.markerService = markerService;\n        this.modelService = modelService;\n        this.outputService = outputService;\n        this.telemetryService = telemetryService;\n        this.configurationResolverService = configurationResolverService;\n        this.childProcess = null;\n        this.activeTask = null;\n        this.activeTaskPromise = null;\n        this.errorsShown = true;\n        this._onDidStateChange = new event_1.Emitter();\n    }\n    Object.defineProperty(ProcessTaskSystem.prototype, \"onDidStateChange\", {\n        get: function () {\n            return this._onDidStateChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ProcessTaskSystem.prototype.isActive = function () {\n        return Promise.resolve(!!this.childProcess);\n    };\n    ProcessTaskSystem.prototype.isActiveSync = function () {\n        return !!this.childProcess;\n    };\n    ProcessTaskSystem.prototype.getActiveTasks = function () {\n        var result = [];\n        if (this.activeTask) {\n            result.push(this.activeTask);\n        }\n        return result;\n    };\n    ProcessTaskSystem.prototype.run = function (task) {\n        if (this.activeTask) {\n            return { kind: taskSystem_1.TaskExecuteKind.Active, task: task, active: { same: this.activeTask._id === task._id, background: this.activeTask.configurationProperties.isBackground }, promise: this.activeTaskPromise };\n        }\n        return this.executeTask(task);\n    };\n    ProcessTaskSystem.prototype.revealTask = function (task) {\n        this.showOutput();\n        return true;\n    };\n    ProcessTaskSystem.prototype.customExecutionComplete = function (task, result) {\n        throw new taskSystem_1.TaskError(severity_1.default.Error, 'Custom execution task completion is never expected in the process task system.', taskSystem_1.TaskErrors.UnknownError);\n    };\n    ProcessTaskSystem.prototype.hasErrors = function (value) {\n        this.errorsShown = !value;\n    };\n    ProcessTaskSystem.prototype.canAutoTerminate = function () {\n        if (this.childProcess) {\n            if (this.activeTask) {\n                return !this.activeTask.configurationProperties.promptOnClose;\n            }\n            return false;\n        }\n        return true;\n    };\n    ProcessTaskSystem.prototype.terminate = function (task) {\n        if (!this.activeTask || this.activeTask.getMapKey() !== task.getMapKey()) {\n            return Promise.resolve({ success: false, task: undefined });\n        }\n        return this.terminateAll().then(function (values) { return values[0]; });\n    };\n    ProcessTaskSystem.prototype.terminateAll = function () {\n        var _this = this;\n        if (this.childProcess) {\n            var task_1 = this.activeTask;\n            return this.childProcess.terminate().then(function (response) {\n                var result = Objects.assign({ task: task_1 }, response);\n                _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Terminated, task_1));\n                return [result];\n            });\n        }\n        return Promise.resolve([{ success: true, task: undefined }]);\n    };\n    ProcessTaskSystem.prototype.executeTask = function (task, trigger) {\n        var _this = this;\n        if (trigger === void 0) { trigger = taskSystem_1.Triggers.command; }\n        if (!tasks_1.CustomTask.is(task)) {\n            throw new Error(nls.localize('version1_0', 'The task system is configured for version 0.1.0 (see tasks.json file), which can only execute custom tasks. Upgrade to version 2.0.0 to run the task: {0}', task._label));\n        }\n        var telemetryEvent = {\n            trigger: trigger,\n            runner: 'output',\n            taskKind: task.getTelemetryKind(),\n            command: 'other',\n            success: true\n        };\n        try {\n            var result = this.doExecuteTask(task, telemetryEvent);\n            result.promise = result.promise.then(function (success) {\n                /* __GDPR__\n                    \"taskService\" : {\n                        \"${include}\": [\n                            \"${TelemetryEvent}\"\n                        ]\n                    }\n                */\n                _this.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n                return success;\n            }, function (err) {\n                telemetryEvent.success = false;\n                /* __GDPR__\n                    \"taskService\" : {\n                        \"${include}\": [\n                            \"${TelemetryEvent}\"\n                        ]\n                    }\n                */\n                _this.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n                return Promise.reject(err);\n            });\n            return result;\n        }\n        catch (err) {\n            telemetryEvent.success = false;\n            /* __GDPR__\n                \"taskService\" : {\n                    \"${include}\": [\n                        \"${TelemetryEvent}\"\n                    ]\n                }\n            */\n            this.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n            if (err instanceof taskSystem_1.TaskError) {\n                throw err;\n            }\n            else if (err instanceof Error) {\n                var error = err;\n                this.appendOutput(error.message);\n                throw new taskSystem_1.TaskError(severity_1.default.Error, error.message, taskSystem_1.TaskErrors.UnknownError);\n            }\n            else {\n                this.appendOutput(err.toString());\n                throw new taskSystem_1.TaskError(severity_1.default.Error, nls.localize('TaskRunnerSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), taskSystem_1.TaskErrors.UnknownError);\n            }\n        }\n    };\n    ProcessTaskSystem.prototype.rerun = function () {\n        return undefined;\n    };\n    ProcessTaskSystem.prototype.doExecuteTask = function (task, telemetryEvent) {\n        var _this = this;\n        var taskSummary = {};\n        var commandConfig = task.command;\n        if (!this.errorsShown) {\n            this.showOutput();\n            this.errorsShown = true;\n        }\n        else {\n            this.clearOutput();\n        }\n        var args = [];\n        if (commandConfig.args) {\n            for (var _i = 0, _a = commandConfig.args; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                if (Types.isString(arg)) {\n                    args.push(arg);\n                }\n                else {\n                    this.log(\"Quoting individual arguments is not supported in the process runner. Using plain value: \" + arg.value);\n                    args.push(arg.value);\n                }\n            }\n        }\n        args = this.resolveVariables(task, args);\n        var command = this.resolveVariable(task, Types.isString(commandConfig.name) ? commandConfig.name : commandConfig.name.value);\n        this.childProcess = new processes_1.LineProcess(command, args, commandConfig.runtime === tasks_1.RuntimeType.Shell, this.resolveOptions(task, commandConfig.options));\n        telemetryEvent.command = this.childProcess.getSanitizedCommand();\n        // we have no problem matchers defined. So show the output log\n        var reveal = task.command.presentation.reveal;\n        if (reveal === tasks_1.RevealKind.Always || (reveal === tasks_1.RevealKind.Silent && task.configurationProperties.problemMatchers.length === 0)) {\n            this.showOutput();\n        }\n        if (commandConfig.presentation.echo) {\n            var prompt = Platform.isWindows ? '>' : '$';\n            this.log(\"running command\" + prompt + \" \" + command + \" \" + args.join(' '));\n        }\n        if (task.configurationProperties.isBackground) {\n            var watchingProblemMatcher_1 = new problemCollectors_1.WatchingProblemCollector(this.resolveMatchers(task, task.configurationProperties.problemMatchers), this.markerService, this.modelService);\n            var toDispose_1 = [];\n            var eventCounter_1 = 0;\n            toDispose_1.push(watchingProblemMatcher_1.onDidStateChange(function (event) {\n                if (event.kind === problemCollectors_1.ProblemCollectorEventKind.BackgroundProcessingBegins) {\n                    eventCounter_1++;\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Active, task));\n                }\n                else if (event.kind === problemCollectors_1.ProblemCollectorEventKind.BackgroundProcessingEnds) {\n                    eventCounter_1--;\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Inactive, task));\n                }\n            }));\n            watchingProblemMatcher_1.aboutToStart();\n            var delayer_1 = null;\n            this.activeTask = task;\n            var inactiveEvent_1 = tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Inactive, task);\n            var processStartedSignaled_1 = false;\n            var onProgress = function (progress) {\n                var line = Strings.removeAnsiEscapeCodes(progress.line);\n                _this.appendOutput(line + '\\n');\n                watchingProblemMatcher_1.processLine(line);\n                if (delayer_1 === null) {\n                    delayer_1 = new Async.Delayer(3000);\n                }\n                delayer_1.trigger(function () {\n                    watchingProblemMatcher_1.forceDelivery();\n                    return null;\n                }).then(function () {\n                    delayer_1 = null;\n                });\n            };\n            var startPromise = this.childProcess.start(onProgress);\n            this.childProcess.pid.then(function (pid) {\n                if (pid !== -1) {\n                    processStartedSignaled_1 = true;\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.ProcessStarted, task, pid));\n                }\n            });\n            this.activeTaskPromise = startPromise.then(function (success) {\n                _this.childProcessEnded();\n                watchingProblemMatcher_1.done();\n                watchingProblemMatcher_1.dispose();\n                if (processStartedSignaled_1 && task.command.runtime !== tasks_1.RuntimeType.CustomExecution) {\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.ProcessEnded, task, success.cmdCode));\n                }\n                toDispose_1 = lifecycle_1.dispose(toDispose_1);\n                toDispose_1 = null;\n                for (var i = 0; i < eventCounter_1; i++) {\n                    _this._onDidStateChange.fire(inactiveEvent_1);\n                }\n                eventCounter_1 = 0;\n                if (!_this.checkTerminated(task, success)) {\n                    _this.log(nls.localize('TaskRunnerSystem.watchingBuildTaskFinished', '\\nWatching build tasks has finished.'));\n                }\n                if (success.cmdCode && success.cmdCode === 1 && watchingProblemMatcher_1.numberOfMatches === 0 && reveal !== tasks_1.RevealKind.Never) {\n                    _this.showOutput();\n                }\n                taskSummary.exitCode = success.cmdCode;\n                return taskSummary;\n            }, function (error) {\n                _this.childProcessEnded();\n                watchingProblemMatcher_1.dispose();\n                toDispose_1 = lifecycle_1.dispose(toDispose_1);\n                toDispose_1 = null;\n                for (var i = 0; i < eventCounter_1; i++) {\n                    _this._onDidStateChange.fire(inactiveEvent_1);\n                }\n                eventCounter_1 = 0;\n                return _this.handleError(task, error);\n            });\n            var result = task.tscWatch\n                ? { kind: taskSystem_1.TaskExecuteKind.Started, task: task, started: { restartOnFileChanges: '**/*.ts' }, promise: this.activeTaskPromise }\n                : { kind: taskSystem_1.TaskExecuteKind.Started, task: task, started: {}, promise: this.activeTaskPromise };\n            return result;\n        }\n        else {\n            this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Start, task));\n            this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Active, task));\n            var startStopProblemMatcher_1 = new problemCollectors_1.StartStopProblemCollector(this.resolveMatchers(task, task.configurationProperties.problemMatchers), this.markerService, this.modelService);\n            this.activeTask = task;\n            var inactiveEvent_2 = tasks_1.TaskEvent.create(tasks_1.TaskEventKind.Inactive, task);\n            var processStartedSignaled_2 = false;\n            var onProgress = function (progress) {\n                var line = Strings.removeAnsiEscapeCodes(progress.line);\n                _this.appendOutput(line + '\\n');\n                startStopProblemMatcher_1.processLine(line);\n            };\n            var startPromise = this.childProcess.start(onProgress);\n            this.childProcess.pid.then(function (pid) {\n                if (pid !== -1) {\n                    processStartedSignaled_2 = true;\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.ProcessStarted, task, pid));\n                }\n            });\n            this.activeTaskPromise = startPromise.then(function (success) {\n                _this.childProcessEnded();\n                startStopProblemMatcher_1.done();\n                startStopProblemMatcher_1.dispose();\n                _this.checkTerminated(task, success);\n                if (processStartedSignaled_2 && task.command.runtime !== tasks_1.RuntimeType.CustomExecution) {\n                    _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.ProcessEnded, task, success.cmdCode));\n                }\n                _this._onDidStateChange.fire(inactiveEvent_2);\n                _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.End, task));\n                if (success.cmdCode && success.cmdCode === 1 && startStopProblemMatcher_1.numberOfMatches === 0 && reveal !== tasks_1.RevealKind.Never) {\n                    _this.showOutput();\n                }\n                taskSummary.exitCode = success.cmdCode;\n                return taskSummary;\n            }, function (error) {\n                _this.childProcessEnded();\n                startStopProblemMatcher_1.dispose();\n                _this._onDidStateChange.fire(inactiveEvent_2);\n                _this._onDidStateChange.fire(tasks_1.TaskEvent.create(tasks_1.TaskEventKind.End, task));\n                return _this.handleError(task, error);\n            });\n            return { kind: taskSystem_1.TaskExecuteKind.Started, task: task, started: {}, promise: this.activeTaskPromise };\n        }\n    };\n    ProcessTaskSystem.prototype.childProcessEnded = function () {\n        this.childProcess = null;\n        this.activeTask = null;\n        this.activeTaskPromise = null;\n    };\n    ProcessTaskSystem.prototype.handleError = function (task, errorData) {\n        var makeVisible = false;\n        if (errorData.error && !errorData.terminated) {\n            var args = task.command.args ? task.command.args.join(' ') : '';\n            this.log(nls.localize('TaskRunnerSystem.childProcessError', 'Failed to launch external program {0} {1}.', JSON.stringify(task.command.name), args));\n            this.appendOutput(errorData.error.message);\n            makeVisible = true;\n        }\n        if (errorData.stdout) {\n            this.appendOutput(errorData.stdout);\n            makeVisible = true;\n        }\n        if (errorData.stderr) {\n            this.appendOutput(errorData.stderr);\n            makeVisible = true;\n        }\n        makeVisible = this.checkTerminated(task, errorData) || makeVisible;\n        if (makeVisible) {\n            this.showOutput();\n        }\n        var error = errorData.error || new Error();\n        error.stderr = errorData.stderr;\n        error.stdout = errorData.stdout;\n        error.terminated = errorData.terminated;\n        return Promise.reject(error);\n    };\n    ProcessTaskSystem.prototype.checkTerminated = function (task, data) {\n        if (data.terminated) {\n            this.log(nls.localize('TaskRunnerSystem.cancelRequested', '\\nThe task \\'{0}\\' was terminated per user request.', task.configurationProperties.name));\n            return true;\n        }\n        return false;\n    };\n    ProcessTaskSystem.prototype.resolveOptions = function (task, options) {\n        var _this = this;\n        var result = { cwd: this.resolveVariable(task, options.cwd) };\n        if (options.env) {\n            result.env = Object.create(null);\n            Object.keys(options.env).forEach(function (key) {\n                var value = options.env[key];\n                if (Types.isString(value)) {\n                    result.env[key] = _this.resolveVariable(task, value);\n                }\n                else {\n                    result.env[key] = value.toString();\n                }\n            });\n        }\n        return result;\n    };\n    ProcessTaskSystem.prototype.resolveVariables = function (task, value) {\n        var _this = this;\n        return value.map(function (s) { return _this.resolveVariable(task, s); });\n    };\n    ProcessTaskSystem.prototype.resolveMatchers = function (task, values) {\n        var _this = this;\n        if (values === undefined || values === null || values.length === 0) {\n            return [];\n        }\n        var result = [];\n        values.forEach(function (value) {\n            var matcher;\n            if (Types.isString(value)) {\n                if (value[0] === '$') {\n                    matcher = problemMatcher_1.ProblemMatcherRegistry.get(value.substring(1));\n                }\n                else {\n                    matcher = problemMatcher_1.ProblemMatcherRegistry.get(value);\n                }\n            }\n            else {\n                matcher = value;\n            }\n            if (!matcher) {\n                _this.appendOutput(nls.localize('unkownProblemMatcher', 'Problem matcher {0} can\\'t be resolved. The matcher will be ignored'));\n                return;\n            }\n            if (!matcher.filePrefix) {\n                result.push(matcher);\n            }\n            else {\n                var copy = Objects.deepClone(matcher);\n                copy.filePrefix = _this.resolveVariable(task, copy.filePrefix);\n                result.push(copy);\n            }\n        });\n        return result;\n    };\n    ProcessTaskSystem.prototype.resolveVariable = function (task, value) {\n        return this.configurationResolverService.resolve(task.getWorkspaceFolder(), value);\n    };\n    ProcessTaskSystem.prototype.log = function (value) {\n        this.appendOutput(value + '\\n');\n    };\n    ProcessTaskSystem.prototype.showOutput = function () {\n        this.outputService.showChannel(this.outputChannelId, true);\n    };\n    ProcessTaskSystem.prototype.appendOutput = function (output) {\n        var outputChannel = this.outputService.getChannel(this.outputChannelId);\n        if (outputChannel) {\n            outputChannel.append(output);\n        }\n    };\n    ProcessTaskSystem.prototype.clearOutput = function () {\n        var outputChannel = this.outputService.getChannel(this.outputChannelId);\n        if (outputChannel) {\n            outputChannel.clear();\n        }\n    };\n    ProcessTaskSystem.TelemetryEventName = 'taskService';\n    return ProcessTaskSystem;\n}());\nexports.ProcessTaskSystem = ProcessTaskSystem;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processTaskSystem.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processTaskSystem.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport * as Types from 'vs/base/common/types';\nimport * as Platform from 'vs/base/common/platform';\nimport * as Async from 'vs/base/common/async';\nimport Severity from 'vs/base/common/severity';\nimport * as Strings from 'vs/base/common/strings';\nimport { Event, Emitter } from 'vs/base/common/event';\n\nimport { SuccessData, ErrorData } from 'vs/base/common/processes';\nimport { LineProcess, LineData } from 'vs/base/node/processes';\n\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\n\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ProblemMatcher, ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nimport { StartStopProblemCollector, WatchingProblemCollector, ProblemCollectorEventKind } from 'vs/workbench/contrib/tasks/common/problemCollectors';\nimport {\n\tITaskSystem, ITaskSummary, ITaskExecuteResult, TaskExecuteKind, TaskError, TaskErrors, TelemetryEvent, Triggers,\n\tTaskTerminateResponse\n} from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport {\n\tTask, CustomTask, CommandOptions, RevealKind, CommandConfiguration, RuntimeType,\n\tTaskEvent, TaskEventKind\n} from 'vs/workbench/contrib/tasks/common/tasks';\n\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\n\n/**\n * Since ProcessTaskSystem is not receiving new feature updates all strict null check fixing has been done with !.\n */\nexport class ProcessTaskSystem implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate markerService: IMarkerService;\n\tprivate modelService: IModelService;\n\tprivate outputService: IOutputService;\n\tprivate telemetryService: ITelemetryService;\n\tprivate configurationResolverService: IConfigurationResolverService;\n\n\tprivate errorsShown: boolean;\n\tprivate childProcess: LineProcess | null;\n\tprivate activeTask: CustomTask | null;\n\tprivate activeTaskPromise: Promise<ITaskSummary> | null;\n\n\tprivate readonly _onDidStateChange: Emitter<TaskEvent>;\n\n\tconstructor(markerService: IMarkerService, modelService: IModelService, telemetryService: ITelemetryService,\n\t\toutputService: IOutputService, configurationResolverService: IConfigurationResolverService, private outputChannelId: string) {\n\t\tthis.markerService = markerService;\n\t\tthis.modelService = modelService;\n\t\tthis.outputService = outputService;\n\t\tthis.telemetryService = telemetryService;\n\t\tthis.configurationResolverService = configurationResolverService;\n\n\t\tthis.childProcess = null;\n\t\tthis.activeTask = null;\n\t\tthis.activeTaskPromise = null;\n\t\tthis.errorsShown = true;\n\t\tthis._onDidStateChange = new Emitter();\n\t}\n\n\tpublic get onDidStateChange(): Event<TaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\treturn Promise.resolve(!!this.childProcess);\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn !!this.childProcess;\n\t}\n\n\tpublic getActiveTasks(): Task[] {\n\t\tlet result: Task[] = [];\n\t\tif (this.activeTask) {\n\t\t\tresult.push(this.activeTask);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic run(task: Task): ITaskExecuteResult {\n\t\tif (this.activeTask) {\n\t\t\treturn { kind: TaskExecuteKind.Active, task, active: { same: this.activeTask._id === task._id, background: this.activeTask.configurationProperties.isBackground! }, promise: this.activeTaskPromise! };\n\t\t}\n\t\treturn this.executeTask(task);\n\t}\n\n\tpublic revealTask(task: Task): boolean {\n\t\tthis.showOutput();\n\t\treturn true;\n\t}\n\n\tpublic customExecutionComplete(task: Task, result?: number): Promise<void> {\n\t\tthrow new TaskError(Severity.Error, 'Custom execution task completion is never expected in the process task system.', TaskErrors.UnknownError);\n\t}\n\n\tpublic hasErrors(value: boolean): void {\n\t\tthis.errorsShown = !value;\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\tif (this.childProcess) {\n\t\t\tif (this.activeTask) {\n\t\t\t\treturn !this.activeTask.configurationProperties.promptOnClose;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic terminate(task: Task): Promise<TaskTerminateResponse> {\n\t\tif (!this.activeTask || this.activeTask.getMapKey() !== task.getMapKey()) {\n\t\t\treturn Promise.resolve<TaskTerminateResponse>({ success: false, task: undefined });\n\t\t}\n\t\treturn this.terminateAll().then(values => values[0]);\n\t}\n\n\tpublic terminateAll(): Promise<TaskTerminateResponse[]> {\n\t\tif (this.childProcess) {\n\t\t\tlet task = this.activeTask;\n\t\t\treturn this.childProcess.terminate().then((response) => {\n\t\t\t\tlet result: TaskTerminateResponse = Objects.assign({ task: task! }, response);\n\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Terminated, task!));\n\t\t\t\treturn [result];\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve<TaskTerminateResponse[]>([{ success: true, task: undefined }]);\n\t}\n\n\tprivate executeTask(task: Task, trigger: string = Triggers.command): ITaskExecuteResult {\n\t\tif (!CustomTask.is(task)) {\n\t\t\tthrow new Error(nls.localize('version1_0', 'The task system is configured for version 0.1.0 (see tasks.json file), which can only execute custom tasks. Upgrade to version 2.0.0 to run the task: {0}', task._label));\n\t\t}\n\t\tlet telemetryEvent: TelemetryEvent = {\n\t\t\ttrigger: trigger,\n\t\t\trunner: 'output',\n\t\t\ttaskKind: task.getTelemetryKind(),\n\t\t\tcommand: 'other',\n\t\t\tsuccess: true\n\t\t};\n\t\ttry {\n\t\t\tlet result = this.doExecuteTask(task, telemetryEvent);\n\t\t\tresult.promise = result.promise.then((success) => {\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"taskService\" : {\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${TelemetryEvent}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn success;\n\t\t\t}, (err: any) => {\n\t\t\t\ttelemetryEvent.success = false;\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"taskService\" : {\n\t\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\t\"${TelemetryEvent}\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tthis.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\t\treturn Promise.reject<ITaskSummary>(err);\n\t\t\t});\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\ttelemetryEvent.success = false;\n\t\t\t/* __GDPR__\n\t\t\t\t\"taskService\" : {\n\t\t\t\t\t\"${include}\": [\n\t\t\t\t\t\t\"${TelemetryEvent}\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog(ProcessTaskSystem.TelemetryEventName, telemetryEvent);\n\t\t\tif (err instanceof TaskError) {\n\t\t\t\tthrow err;\n\t\t\t} else if (err instanceof Error) {\n\t\t\t\tlet error = <Error>err;\n\t\t\t\tthis.appendOutput(error.message);\n\t\t\t\tthrow new TaskError(Severity.Error, error.message, TaskErrors.UnknownError);\n\t\t\t} else {\n\t\t\t\tthis.appendOutput(err.toString());\n\t\t\t\tthrow new TaskError(Severity.Error, nls.localize('TaskRunnerSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rerun(): ITaskExecuteResult | undefined {\n\t\treturn undefined;\n\t}\n\n\tprivate doExecuteTask(task: CustomTask, telemetryEvent: TelemetryEvent): ITaskExecuteResult {\n\t\tlet taskSummary: ITaskSummary = {};\n\t\tlet commandConfig: CommandConfiguration = task.command;\n\t\tif (!this.errorsShown) {\n\t\t\tthis.showOutput();\n\t\t\tthis.errorsShown = true;\n\t\t} else {\n\t\t\tthis.clearOutput();\n\t\t}\n\n\t\tlet args: string[] = [];\n\t\tif (commandConfig.args) {\n\t\t\tfor (let arg of commandConfig.args) {\n\t\t\t\tif (Types.isString(arg)) {\n\t\t\t\t\targs.push(arg);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log(`Quoting individual arguments is not supported in the process runner. Using plain value: ${arg.value}`);\n\t\t\t\t\targs.push(arg.value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\targs = this.resolveVariables(task, args);\n\t\tlet command: string = this.resolveVariable(task, Types.isString(commandConfig.name) ? commandConfig.name : commandConfig.name!.value);\n\t\tthis.childProcess = new LineProcess(command, args, commandConfig.runtime === RuntimeType.Shell, this.resolveOptions(task, commandConfig.options!));\n\t\ttelemetryEvent.command = this.childProcess.getSanitizedCommand();\n\t\t// we have no problem matchers defined. So show the output log\n\t\tlet reveal = task.command.presentation!.reveal;\n\t\tif (reveal === RevealKind.Always || (reveal === RevealKind.Silent && task.configurationProperties.problemMatchers!.length === 0)) {\n\t\t\tthis.showOutput();\n\t\t}\n\n\t\tif (commandConfig.presentation!.echo) {\n\t\t\tlet prompt: string = Platform.isWindows ? '>' : '$';\n\t\t\tthis.log(`running command${prompt} ${command} ${args.join(' ')}`);\n\t\t}\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tlet watchingProblemMatcher = new WatchingProblemCollector(this.resolveMatchers(task, task.configurationProperties.problemMatchers!), this.markerService, this.modelService);\n\t\t\tlet toDispose: IDisposable[] | null = [];\n\t\t\tlet eventCounter: number = 0;\n\t\t\ttoDispose.push(watchingProblemMatcher.onDidStateChange((event) => {\n\t\t\t\tif (event.kind === ProblemCollectorEventKind.BackgroundProcessingBegins) {\n\t\t\t\t\teventCounter++;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Active, task));\n\t\t\t\t} else if (event.kind === ProblemCollectorEventKind.BackgroundProcessingEnds) {\n\t\t\t\t\teventCounter--;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Inactive, task));\n\t\t\t\t}\n\t\t\t}));\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer: Async.Delayer<any> | null = null;\n\t\t\tthis.activeTask = task;\n\t\t\tconst inactiveEvent = TaskEvent.create(TaskEventKind.Inactive, task);\n\t\t\tlet processStartedSignaled: boolean = false;\n\t\t\tconst onProgress = (progress: LineData) => {\n\t\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\t\tthis.appendOutput(line + '\\n');\n\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\tif (delayer === null) {\n\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t}\n\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\treturn null;\n\t\t\t\t}).then(() => {\n\t\t\t\t\tdelayer = null;\n\t\t\t\t});\n\t\t\t};\n\t\t\tconst startPromise = this.childProcess.start(onProgress);\n\t\t\tthis.childProcess.pid.then(pid => {\n\t\t\t\tif (pid !== -1) {\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, pid));\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.activeTaskPromise = startPromise.then((success): ITaskSummary => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\twatchingProblemMatcher.done();\n\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\tif (processStartedSignaled && task.command.runtime !== RuntimeType.CustomExecution) {\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessEnded, task, success.cmdCode!));\n\t\t\t\t}\n\t\t\t\ttoDispose = dispose(toDispose!);\n\t\t\t\ttoDispose = null;\n\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\tthis._onDidStateChange.fire(inactiveEvent);\n\t\t\t\t}\n\t\t\t\teventCounter = 0;\n\t\t\t\tif (!this.checkTerminated(task, success)) {\n\t\t\t\t\tthis.log(nls.localize('TaskRunnerSystem.watchingBuildTaskFinished', '\\nWatching build tasks has finished.'));\n\t\t\t\t}\n\t\t\t\tif (success.cmdCode && success.cmdCode === 1 && watchingProblemMatcher.numberOfMatches === 0 && reveal !== RevealKind.Never) {\n\t\t\t\t\tthis.showOutput();\n\t\t\t\t}\n\t\t\t\ttaskSummary.exitCode = success.cmdCode;\n\t\t\t\treturn taskSummary;\n\t\t\t}, (error: ErrorData) => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\ttoDispose = dispose(toDispose!);\n\t\t\t\ttoDispose = null;\n\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\tthis._onDidStateChange.fire(inactiveEvent);\n\t\t\t\t}\n\t\t\t\teventCounter = 0;\n\t\t\t\treturn this.handleError(task, error);\n\t\t\t});\n\t\t\tlet result: ITaskExecuteResult = (<any>task).tscWatch\n\t\t\t\t? { kind: TaskExecuteKind.Started, task, started: { restartOnFileChanges: '**/*.ts' }, promise: this.activeTaskPromise }\n\t\t\t\t: { kind: TaskExecuteKind.Started, task, started: {}, promise: this.activeTaskPromise };\n\t\t\treturn result;\n\t\t} else {\n\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Start, task));\n\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.Active, task));\n\t\t\tlet startStopProblemMatcher = new StartStopProblemCollector(this.resolveMatchers(task, task.configurationProperties.problemMatchers!), this.markerService, this.modelService);\n\t\t\tthis.activeTask = task;\n\t\t\tconst inactiveEvent = TaskEvent.create(TaskEventKind.Inactive, task);\n\t\t\tlet processStartedSignaled: boolean = false;\n\t\t\tconst onProgress = (progress: LineData) => {\n\t\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\t\tthis.appendOutput(line + '\\n');\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t};\n\t\t\tconst startPromise = this.childProcess.start(onProgress);\n\t\t\tthis.childProcess.pid.then(pid => {\n\t\t\t\tif (pid !== -1) {\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessStarted, task, pid));\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.activeTaskPromise = startPromise.then((success): ITaskSummary => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\tthis.checkTerminated(task, success);\n\t\t\t\tif (processStartedSignaled && task.command.runtime !== RuntimeType.CustomExecution) {\n\t\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.ProcessEnded, task, success.cmdCode!));\n\t\t\t\t}\n\t\t\t\tthis._onDidStateChange.fire(inactiveEvent);\n\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\tif (success.cmdCode && success.cmdCode === 1 && startStopProblemMatcher.numberOfMatches === 0 && reveal !== RevealKind.Never) {\n\t\t\t\t\tthis.showOutput();\n\t\t\t\t}\n\t\t\t\ttaskSummary.exitCode = success.cmdCode;\n\t\t\t\treturn taskSummary;\n\t\t\t}, (error: ErrorData) => {\n\t\t\t\tthis.childProcessEnded();\n\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\tthis._onDidStateChange.fire(inactiveEvent);\n\t\t\t\tthis._onDidStateChange.fire(TaskEvent.create(TaskEventKind.End, task));\n\t\t\t\treturn this.handleError(task, error);\n\t\t\t});\n\t\t\treturn { kind: TaskExecuteKind.Started, task, started: {}, promise: this.activeTaskPromise };\n\t\t}\n\t}\n\n\tprivate childProcessEnded(): void {\n\t\tthis.childProcess = null;\n\t\tthis.activeTask = null;\n\t\tthis.activeTaskPromise = null;\n\t}\n\n\tprivate handleError(task: CustomTask, errorData: ErrorData): Promise<ITaskSummary> {\n\t\tlet makeVisible = false;\n\t\tif (errorData.error && !errorData.terminated) {\n\t\t\tlet args: string = task.command.args ? task.command.args.join(' ') : '';\n\t\t\tthis.log(nls.localize('TaskRunnerSystem.childProcessError', 'Failed to launch external program {0} {1}.', JSON.stringify(task.command.name), args));\n\t\t\tthis.appendOutput(errorData.error.message);\n\t\t\tmakeVisible = true;\n\t\t}\n\n\t\tif (errorData.stdout) {\n\t\t\tthis.appendOutput(errorData.stdout);\n\t\t\tmakeVisible = true;\n\t\t}\n\t\tif (errorData.stderr) {\n\t\t\tthis.appendOutput(errorData.stderr);\n\t\t\tmakeVisible = true;\n\t\t}\n\t\tmakeVisible = this.checkTerminated(task, errorData) || makeVisible;\n\t\tif (makeVisible) {\n\t\t\tthis.showOutput();\n\t\t}\n\n\t\tconst error: Error & ErrorData = errorData.error || new Error();\n\t\terror.stderr = errorData.stderr;\n\t\terror.stdout = errorData.stdout;\n\t\terror.terminated = errorData.terminated;\n\t\treturn Promise.reject(error);\n\t}\n\n\tprivate checkTerminated(task: Task, data: SuccessData | ErrorData): boolean {\n\t\tif (data.terminated) {\n\t\t\tthis.log(nls.localize('TaskRunnerSystem.cancelRequested', '\\nThe task \\'{0}\\' was terminated per user request.', task.configurationProperties.name));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate resolveOptions(task: CustomTask, options: CommandOptions): CommandOptions {\n\t\tlet result: CommandOptions = { cwd: this.resolveVariable(task, options.cwd!) };\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tObject.keys(options.env).forEach((key) => {\n\t\t\t\tlet value: any = options.env![key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env![key] = this.resolveVariable(task, value);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env![key] = value.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate resolveVariables(task: CustomTask, value: string[]): string[] {\n\t\treturn value.map(s => this.resolveVariable(task, s));\n\t}\n\n\tprivate resolveMatchers(task: CustomTask, values: Array<string | ProblemMatcher>): ProblemMatcher[] {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tlet result: ProblemMatcher[] = [];\n\t\tvalues.forEach((value) => {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (!matcher) {\n\t\t\t\tthis.appendOutput(nls.localize('unkownProblemMatcher', 'Problem matcher {0} can\\'t be resolved. The matcher will be ignored'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!matcher.filePrefix) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tlet copy = Objects.deepClone(matcher);\n\t\t\t\tcopy.filePrefix = this.resolveVariable(task, copy.filePrefix!);\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate resolveVariable(task: CustomTask, value: string): string {\n\t\treturn this.configurationResolverService.resolve(task.getWorkspaceFolder()!, value);\n\t}\n\n\tpublic log(value: string): void {\n\t\tthis.appendOutput(value + '\\n');\n\t}\n\n\tprivate showOutput(): void {\n\t\tthis.outputService.showChannel(this.outputChannelId, true);\n\t}\n\n\tprivate appendOutput(output: string): void {\n\t\tconst outputChannel = this.outputService.getChannel(this.outputChannelId);\n\t\tif (outputChannel) {\n\t\t\toutputChannel.append(output);\n\t\t}\n\t}\n\n\tprivate clearOutput(): void {\n\t\tconst outputChannel = this.outputService.getChannel(this.outputChannelId);\n\t\tif (outputChannel) {\n\t\t\toutputChannel.clear();\n\t\t}\n\t}\n}\n"]}]}