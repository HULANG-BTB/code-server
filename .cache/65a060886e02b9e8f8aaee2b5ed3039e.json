{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar MoveCaretCommand = /** @class */ (function () {\n    function MoveCaretCommand(selection, isMovingLeft) {\n        this._selection = selection;\n        this._isMovingLeft = isMovingLeft;\n    }\n    MoveCaretCommand.prototype.getEditOperations = function (model, builder) {\n        var s = this._selection;\n        this._selectionId = builder.trackSelection(s);\n        if (s.startLineNumber !== s.endLineNumber) {\n            return;\n        }\n        if (this._isMovingLeft && s.startColumn === 0) {\n            return;\n        }\n        else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {\n            return;\n        }\n        var lineNumber = s.selectionStartLineNumber;\n        var lineContent = model.getLineContent(lineNumber);\n        var left;\n        var middle;\n        var right;\n        if (this._isMovingLeft) {\n            left = lineContent.substring(0, s.startColumn - 2);\n            middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n            right = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);\n        }\n        else {\n            left = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);\n            middle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n            right = lineContent.substring(s.endColumn);\n        }\n        var newLineContent = left + middle + right;\n        builder.addEditOperation(new range_1.Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);\n        builder.addEditOperation(new range_1.Range(lineNumber, 1, lineNumber, 1), newLineContent);\n        this._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);\n        this._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;\n        this._moved = true;\n    };\n    MoveCaretCommand.prototype.computeCursorState = function (model, helper) {\n        var result = helper.getTrackedSelection(this._selectionId);\n        if (this._moved) {\n            result = result.setStartPosition(result.startLineNumber, this._cutStartIndex);\n            result = result.setEndPosition(result.startLineNumber, this._cutEndIndex);\n        }\n        return result;\n    };\n    return MoveCaretCommand;\n}());\nexports.MoveCaretCommand = MoveCaretCommand;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/moveCaretCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class MoveCaretCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingLeft: boolean;\n\n\tprivate _cutStartIndex: number;\n\tprivate _cutEndIndex: number;\n\tprivate _moved: boolean;\n\n\tprivate _selectionId: string;\n\n\tconstructor(selection: Selection, isMovingLeft: boolean) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingLeft = isMovingLeft;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tlet s = this._selection;\n\t\tthis._selectionId = builder.trackSelection(s);\n\t\tif (s.startLineNumber !== s.endLineNumber) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._isMovingLeft && s.startColumn === 0) {\n\t\t\treturn;\n\t\t} else if (!this._isMovingLeft && s.endColumn === model.getLineMaxColumn(s.startLineNumber)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet lineNumber = s.selectionStartLineNumber;\n\t\tlet lineContent = model.getLineContent(lineNumber);\n\n\t\tlet left: string;\n\t\tlet middle: string;\n\t\tlet right: string;\n\n\t\tif (this._isMovingLeft) {\n\t\t\tleft = lineContent.substring(0, s.startColumn - 2);\n\t\t\tmiddle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n\t\t\tright = lineContent.substring(s.startColumn - 2, s.startColumn - 1) + lineContent.substring(s.endColumn - 1);\n\t\t} else {\n\t\t\tleft = lineContent.substring(0, s.startColumn - 1) + lineContent.substring(s.endColumn - 1, s.endColumn);\n\t\t\tmiddle = lineContent.substring(s.startColumn - 1, s.endColumn - 1);\n\t\t\tright = lineContent.substring(s.endColumn);\n\t\t}\n\n\t\tlet newLineContent = left + middle + right;\n\n\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber)), null);\n\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), newLineContent);\n\n\t\tthis._cutStartIndex = s.startColumn + (this._isMovingLeft ? -1 : 1);\n\t\tthis._cutEndIndex = this._cutStartIndex + s.endColumn - s.startColumn;\n\t\tthis._moved = true;\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId);\n\t\tif (this._moved) {\n\t\t\tresult = result.setStartPosition(result.startLineNumber, this._cutStartIndex);\n\t\t\tresult = result.setEndPosition(result.startLineNumber, this._cutEndIndex);\n\t\t}\n\t\treturn result;\n\t}\n}\n"]}]}