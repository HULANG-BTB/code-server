{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugEditorActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugEditorActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar breakpointsView_1 = require(\"vs/workbench/contrib/debug/browser/breakpointsView\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar panel_1 = require(\"vs/workbench/common/panel\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nexports.TOGGLE_BREAKPOINT_ID = 'editor.debug.action.toggleBreakpoint';\nvar ToggleBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleBreakpointAction, _super);\n    function ToggleBreakpointAction() {\n        return _super.call(this, {\n            id: exports.TOGGLE_BREAKPOINT_ID,\n            label: nls.localize('toggleBreakpointAction', \"Debug: Toggle Breakpoint\"),\n            alias: 'Debug: Toggle Breakpoint',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyCode.F9,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    ToggleBreakpointAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var position = editor.getPosition();\n        if (editor.hasModel() && position) {\n            var modelUri = editor.getModel().uri;\n            var bps = debugService.getModel().getBreakpoints({ lineNumber: position.lineNumber, uri: modelUri });\n            if (bps.length) {\n                return Promise.all(bps.map(function (bp) { return debugService.removeBreakpoints(bp.getId()); }));\n            }\n            if (debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n                return debugService.addBreakpoints(modelUri, [{ lineNumber: position.lineNumber }], 'debugEditorActions.toggleBreakpointAction');\n            }\n        }\n        return Promise.resolve();\n    };\n    return ToggleBreakpointAction;\n}(editorExtensions_1.EditorAction));\nexports.TOGGLE_CONDITIONAL_BREAKPOINT_ID = 'editor.debug.action.conditionalBreakpoint';\nvar ConditionalBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ConditionalBreakpointAction, _super);\n    function ConditionalBreakpointAction() {\n        return _super.call(this, {\n            id: exports.TOGGLE_CONDITIONAL_BREAKPOINT_ID,\n            label: nls.localize('conditionalBreakpointEditorAction', \"Debug: Add Conditional Breakpoint...\"),\n            alias: 'Debug: Add Conditional Breakpoint...',\n            precondition: null\n        }) || this;\n    }\n    ConditionalBreakpointAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var position = editor.getPosition();\n        if (position && editor.hasModel() && debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n            editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).showBreakpointWidget(position.lineNumber, position.column);\n        }\n    };\n    return ConditionalBreakpointAction;\n}(editorExtensions_1.EditorAction));\nexports.TOGGLE_LOG_POINT_ID = 'editor.debug.action.toggleLogPoint';\nvar LogPointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(LogPointAction, _super);\n    function LogPointAction() {\n        return _super.call(this, {\n            id: exports.TOGGLE_LOG_POINT_ID,\n            label: nls.localize('logPointEditorAction', \"Debug: Add Logpoint...\"),\n            alias: 'Debug: Add Logpoint...',\n            precondition: null\n        }) || this;\n    }\n    LogPointAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var position = editor.getPosition();\n        if (position && editor.hasModel() && debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n            editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).showBreakpointWidget(position.lineNumber, position.column, debug_1.BreakpointWidgetContext.LOG_MESSAGE);\n        }\n    };\n    return LogPointAction;\n}(editorExtensions_1.EditorAction));\nvar RunToCursorAction = /** @class */ (function (_super) {\n    tslib_1.__extends(RunToCursorAction, _super);\n    function RunToCursorAction() {\n        return _super.call(this, {\n            id: RunToCursorAction.ID,\n            label: RunToCursorAction.LABEL,\n            alias: 'Debug: Run to Cursor',\n            precondition: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_IN_DEBUG_MODE, panel_1.PanelFocusContext.toNegated(), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), editorContextKeys_1.EditorContextKeys.editorTextFocus),\n            menuOpts: {\n                group: 'debug',\n                order: 2\n            }\n        }) || this;\n    }\n    RunToCursorAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var focusedSession = debugService.getViewModel().focusedSession;\n        if (debugService.state !== debug_1.State.Stopped || !focusedSession) {\n            return Promise.resolve(undefined);\n        }\n        var breakpointToRemove;\n        var oneTimeListener = focusedSession.onDidChangeState(function () {\n            var state = focusedSession.state;\n            if (state === debug_1.State.Stopped || state === debug_1.State.Inactive) {\n                if (breakpointToRemove) {\n                    debugService.removeBreakpoints(breakpointToRemove.getId());\n                }\n                oneTimeListener.dispose();\n            }\n        });\n        var position = editor.getPosition();\n        if (!editor.hasModel() || !position) {\n            return Promise.resolve();\n        }\n        var uri = editor.getModel().uri;\n        var bpExists = !!(debugService.getModel().getBreakpoints({ column: position.column, lineNumber: position.lineNumber, uri: uri }).length);\n        return (bpExists ? Promise.resolve(null) : debugService.addBreakpoints(uri, [{ lineNumber: position.lineNumber, column: position.column }], 'debugEditorActions.runToCursorAction')).then(function (breakpoints) {\n            if (breakpoints && breakpoints.length) {\n                breakpointToRemove = breakpoints[0];\n            }\n            debugService.getViewModel().focusedThread.continue();\n        });\n    };\n    RunToCursorAction.ID = 'editor.debug.action.runToCursor';\n    RunToCursorAction.LABEL = nls.localize('runToCursor', \"Run to Cursor\");\n    return RunToCursorAction;\n}(editorExtensions_1.EditorAction));\nvar SelectionToReplAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectionToReplAction, _super);\n    function SelectionToReplAction() {\n        return _super.call(this, {\n            id: 'editor.debug.action.selectionToRepl',\n            label: nls.localize('debugEvaluate', \"Debug: Evaluate\"),\n            alias: 'Debug: Evaluate',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.hasNonEmptySelection, debug_1.CONTEXT_IN_DEBUG_MODE, editorContextKeys_1.EditorContextKeys.editorTextFocus),\n            menuOpts: {\n                group: 'debug',\n                order: 0\n            }\n        }) || this;\n    }\n    SelectionToReplAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var panelService = accessor.get(panelService_1.IPanelService);\n        var viewModel = debugService.getViewModel();\n        var session = viewModel.focusedSession;\n        if (!editor.hasModel() || !session) {\n            return Promise.resolve();\n        }\n        var text = editor.getModel().getValueInRange(editor.getSelection());\n        return session.addReplExpression(viewModel.focusedStackFrame, text)\n            .then(function () { return panelService.openPanel(debug_1.REPL_ID, true); })\n            .then(function (_) { return undefined; });\n    };\n    return SelectionToReplAction;\n}(editorExtensions_1.EditorAction));\nvar SelectionToWatchExpressionsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectionToWatchExpressionsAction, _super);\n    function SelectionToWatchExpressionsAction() {\n        return _super.call(this, {\n            id: 'editor.debug.action.selectionToWatch',\n            label: nls.localize('debugAddToWatch', \"Debug: Add to Watch\"),\n            alias: 'Debug: Add to Watch',\n            precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.hasNonEmptySelection, debug_1.CONTEXT_IN_DEBUG_MODE, editorContextKeys_1.EditorContextKeys.editorTextFocus),\n            menuOpts: {\n                group: 'debug',\n                order: 1\n            }\n        }) || this;\n    }\n    SelectionToWatchExpressionsAction.prototype.run = function (accessor, editor) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var viewletService = accessor.get(viewlet_1.IViewletService);\n        if (!editor.hasModel()) {\n            return Promise.resolve();\n        }\n        var text = editor.getModel().getValueInRange(editor.getSelection());\n        return viewletService.openViewlet(debug_1.VIEWLET_ID).then(function () { return debugService.addWatchExpression(text); });\n    };\n    return SelectionToWatchExpressionsAction;\n}(editorExtensions_1.EditorAction));\nvar ShowDebugHoverAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowDebugHoverAction, _super);\n    function ShowDebugHoverAction() {\n        return _super.call(this, {\n            id: 'editor.debug.action.showDebugHover',\n            label: nls.localize('showDebugHover', \"Debug: Show Hover\"),\n            alias: 'Debug: Show Hover',\n            precondition: debug_1.CONTEXT_IN_DEBUG_MODE,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_I),\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    ShowDebugHoverAction.prototype.run = function (accessor, editor) {\n        var position = editor.getPosition();\n        if (!position || !editor.hasModel()) {\n            return Promise.resolve();\n        }\n        var word = editor.getModel().getWordAtPosition(position);\n        if (!word) {\n            return Promise.resolve();\n        }\n        var range = new range_1.Range(position.lineNumber, position.column, position.lineNumber, word.endColumn);\n        return editor.getContribution(debug_1.EDITOR_CONTRIBUTION_ID).showHover(range, true);\n    };\n    return ShowDebugHoverAction;\n}(editorExtensions_1.EditorAction));\nvar GoToBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GoToBreakpointAction, _super);\n    function GoToBreakpointAction(isNext, opts) {\n        var _this = _super.call(this, opts) || this;\n        _this.isNext = isNext;\n        return _this;\n    }\n    GoToBreakpointAction.prototype.run = function (accessor, editor, args) {\n        var debugService = accessor.get(debug_1.IDebugService);\n        var editorService = accessor.get(editorService_1.IEditorService);\n        if (editor.hasModel()) {\n            var currentUri_1 = editor.getModel().uri;\n            var currentLine_1 = editor.getPosition().lineNumber;\n            //Breakpoints returned from `getBreakpoints` are already sorted.\n            var allEnabledBreakpoints = debugService.getModel().getBreakpoints({ enabledOnly: true });\n            //Try to find breakpoint in current file\n            var moveBreakpoint = this.isNext\n                ? allEnabledBreakpoints.filter(function (bp) { return bp.uri.toString() === currentUri_1.toString() && bp.lineNumber > currentLine_1; }).shift()\n                : allEnabledBreakpoints.filter(function (bp) { return bp.uri.toString() === currentUri_1.toString() && bp.lineNumber < currentLine_1; }).pop();\n            //Try to find breakpoints in following files\n            if (!moveBreakpoint) {\n                moveBreakpoint =\n                    this.isNext\n                        ? allEnabledBreakpoints.filter(function (bp) { return bp.uri.toString() > currentUri_1.toString(); }).shift()\n                        : allEnabledBreakpoints.filter(function (bp) { return bp.uri.toString() < currentUri_1.toString(); }).pop();\n            }\n            //Move to first or last possible breakpoint\n            if (!moveBreakpoint && allEnabledBreakpoints.length) {\n                moveBreakpoint = this.isNext ? allEnabledBreakpoints[0] : allEnabledBreakpoints[allEnabledBreakpoints.length - 1];\n            }\n            if (moveBreakpoint) {\n                return breakpointsView_1.openBreakpointSource(moveBreakpoint, false, true, debugService, editorService);\n            }\n        }\n        return Promise.resolve(null);\n    };\n    return GoToBreakpointAction;\n}(editorExtensions_1.EditorAction));\nvar GoToNextBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GoToNextBreakpointAction, _super);\n    function GoToNextBreakpointAction() {\n        return _super.call(this, true, {\n            id: 'editor.debug.action.goToNextBreakpoint',\n            label: nls.localize('goToNextBreakpoint', \"Debug: Go To Next Breakpoint\"),\n            alias: 'Debug: Go To Next Breakpoint',\n            precondition: null\n        }) || this;\n    }\n    return GoToNextBreakpointAction;\n}(GoToBreakpointAction));\nvar GoToPreviousBreakpointAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GoToPreviousBreakpointAction, _super);\n    function GoToPreviousBreakpointAction() {\n        return _super.call(this, false, {\n            id: 'editor.debug.action.goToPreviousBreakpoint',\n            label: nls.localize('goToPreviousBreakpoint', \"Debug: Go To Previous Breakpoint\"),\n            alias: 'Debug: Go To Previous Breakpoint',\n            precondition: null\n        }) || this;\n    }\n    return GoToPreviousBreakpointAction;\n}(GoToBreakpointAction));\neditorExtensions_1.registerEditorAction(ToggleBreakpointAction);\neditorExtensions_1.registerEditorAction(ConditionalBreakpointAction);\neditorExtensions_1.registerEditorAction(LogPointAction);\neditorExtensions_1.registerEditorAction(RunToCursorAction);\neditorExtensions_1.registerEditorAction(SelectionToReplAction);\neditorExtensions_1.registerEditorAction(SelectionToWatchExpressionsAction);\neditorExtensions_1.registerEditorAction(ShowDebugHoverAction);\neditorExtensions_1.registerEditorAction(GoToNextBreakpointAction);\neditorExtensions_1.registerEditorAction(GoToPreviousBreakpointAction);\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n    command: {\n        id: RunToCursorAction.ID,\n        title: { value: RunToCursorAction.LABEL, original: 'Debug: Run to Cursor' },\n        category: nls.localize('debug', \"Debug\")\n    },\n    group: 'debug',\n    when: contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')),\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugEditorActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugEditorActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyMod, KeyChord, KeyCode } from 'vs/base/common/keyCodes';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ServicesAccessor, registerEditorAction, EditorAction, IActionOptions } from 'vs/editor/browser/editorExtensions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IDebugService, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE, State, REPL_ID, VIEWLET_ID, IDebugEditorContribution, EDITOR_CONTRIBUTION_ID, BreakpointWidgetContext, IBreakpoint } from 'vs/workbench/contrib/debug/common/debug';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { openBreakpointSource } from 'vs/workbench/contrib/debug/browser/breakpointsView';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { PanelFocusContext } from 'vs/workbench/common/panel';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\n\nexport const TOGGLE_BREAKPOINT_ID = 'editor.debug.action.toggleBreakpoint';\nclass ToggleBreakpointAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_BREAKPOINT_ID,\n\t\t\tlabel: nls.localize('toggleBreakpointAction', \"Debug: Toggle Breakpoint\"),\n\t\t\talias: 'Debug: Toggle Breakpoint',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyCode.F9,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<any> {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (editor.hasModel() && position) {\n\t\t\tconst modelUri = editor.getModel().uri;\n\t\t\tconst bps = debugService.getModel().getBreakpoints({ lineNumber: position.lineNumber, uri: modelUri });\n\n\t\t\tif (bps.length) {\n\t\t\t\treturn Promise.all(bps.map(bp => debugService.removeBreakpoints(bp.getId())));\n\t\t\t}\n\t\t\tif (debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n\t\t\t\treturn debugService.addBreakpoints(modelUri, [{ lineNumber: position.lineNumber }], 'debugEditorActions.toggleBreakpointAction');\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport const TOGGLE_CONDITIONAL_BREAKPOINT_ID = 'editor.debug.action.conditionalBreakpoint';\nclass ConditionalBreakpointAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_CONDITIONAL_BREAKPOINT_ID,\n\t\t\tlabel: nls.localize('conditionalBreakpointEditorAction', \"Debug: Add Conditional Breakpoint...\"),\n\t\t\talias: 'Debug: Add Conditional Breakpoint...',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (position && editor.hasModel() && debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n\t\t\teditor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID).showBreakpointWidget(position.lineNumber, position.column);\n\t\t}\n\t}\n}\n\nexport const TOGGLE_LOG_POINT_ID = 'editor.debug.action.toggleLogPoint';\nclass LogPointAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TOGGLE_LOG_POINT_ID,\n\t\t\tlabel: nls.localize('logPointEditorAction', \"Debug: Add Logpoint...\"),\n\t\t\talias: 'Debug: Add Logpoint...',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst debugService = accessor.get(IDebugService);\n\n\t\tconst position = editor.getPosition();\n\t\tif (position && editor.hasModel() && debugService.getConfigurationManager().canSetBreakpointsIn(editor.getModel())) {\n\t\t\teditor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID).showBreakpointWidget(position.lineNumber, position.column, BreakpointWidgetContext.LOG_MESSAGE);\n\t\t}\n\t}\n}\n\nclass RunToCursorAction extends EditorAction {\n\n\tpublic static ID = 'editor.debug.action.runToCursor';\n\tpublic static LABEL = nls.localize('runToCursor', \"Run to Cursor\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: RunToCursorAction.ID,\n\t\t\tlabel: RunToCursorAction.LABEL,\n\t\t\talias: 'Debug: Run to Cursor',\n\t\t\tprecondition: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, PanelFocusContext.toNegated(), CONTEXT_DEBUG_STATE.isEqualTo('stopped'), EditorContextKeys.editorTextFocus),\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst focusedSession = debugService.getViewModel().focusedSession;\n\t\tif (debugService.state !== State.Stopped || !focusedSession) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tlet breakpointToRemove: IBreakpoint;\n\t\tconst oneTimeListener = focusedSession.onDidChangeState(() => {\n\t\t\tconst state = focusedSession.state;\n\t\t\tif (state === State.Stopped || state === State.Inactive) {\n\t\t\t\tif (breakpointToRemove) {\n\t\t\t\t\tdebugService.removeBreakpoints(breakpointToRemove.getId());\n\t\t\t\t}\n\t\t\t\toneTimeListener.dispose();\n\t\t\t}\n\t\t});\n\n\t\tconst position = editor.getPosition();\n\t\tif (!editor.hasModel() || !position) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst uri = editor.getModel().uri;\n\t\tconst bpExists = !!(debugService.getModel().getBreakpoints({ column: position.column, lineNumber: position.lineNumber, uri }).length);\n\t\treturn (bpExists ? Promise.resolve(null) : <Promise<any>>debugService.addBreakpoints(uri, [{ lineNumber: position.lineNumber, column: position.column }], 'debugEditorActions.runToCursorAction')).then((breakpoints) => {\n\t\t\tif (breakpoints && breakpoints.length) {\n\t\t\t\tbreakpointToRemove = breakpoints[0];\n\t\t\t}\n\t\t\tdebugService.getViewModel().focusedThread!.continue();\n\t\t});\n\t}\n}\n\nclass SelectionToReplAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.selectionToRepl',\n\t\t\tlabel: nls.localize('debugEvaluate', \"Debug: Evaluate\"),\n\t\t\talias: 'Debug: Evaluate',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.hasNonEmptySelection, CONTEXT_IN_DEBUG_MODE, EditorContextKeys.editorTextFocus),\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 0\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst panelService = accessor.get(IPanelService);\n\t\tconst viewModel = debugService.getViewModel();\n\t\tconst session = viewModel.focusedSession;\n\t\tif (!editor.hasModel() || !session) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst text = editor.getModel().getValueInRange(editor.getSelection());\n\t\treturn session.addReplExpression(viewModel.focusedStackFrame!, text)\n\t\t\t.then(() => panelService.openPanel(REPL_ID, true))\n\t\t\t.then(_ => undefined);\n\t}\n}\n\nclass SelectionToWatchExpressionsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.selectionToWatch',\n\t\t\tlabel: nls.localize('debugAddToWatch', \"Debug: Add to Watch\"),\n\t\t\talias: 'Debug: Add to Watch',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.hasNonEmptySelection, CONTEXT_IN_DEBUG_MODE, EditorContextKeys.editorTextFocus),\n\t\t\tmenuOpts: {\n\t\t\t\tgroup: 'debug',\n\t\t\t\torder: 1\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst viewletService = accessor.get(IViewletService);\n\t\tif (!editor.hasModel()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst text = editor.getModel().getValueInRange(editor.getSelection());\n\t\treturn viewletService.openViewlet(VIEWLET_ID).then(() => debugService.addWatchExpression(text));\n\t}\n}\n\nclass ShowDebugHoverAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.debug.action.showDebugHover',\n\t\t\tlabel: nls.localize('showDebugHover', \"Debug: Show Hover\"),\n\t\t\talias: 'Debug: Show Hover',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_MODE,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_I),\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst position = editor.getPosition();\n\t\tif (!position || !editor.hasModel()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst word = editor.getModel().getWordAtPosition(position);\n\t\tif (!word) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst range = new Range(position.lineNumber, position.column, position.lineNumber, word.endColumn);\n\t\treturn editor.getContribution<IDebugEditorContribution>(EDITOR_CONTRIBUTION_ID).showHover(range, true);\n\t}\n}\n\nclass GoToBreakpointAction extends EditorAction {\n\tconstructor(private isNext: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<any> {\n\t\tconst debugService = accessor.get(IDebugService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tif (editor.hasModel()) {\n\t\t\tconst currentUri = editor.getModel().uri;\n\t\t\tconst currentLine = editor.getPosition().lineNumber;\n\t\t\t//Breakpoints returned from `getBreakpoints` are already sorted.\n\t\t\tconst allEnabledBreakpoints = debugService.getModel().getBreakpoints({ enabledOnly: true });\n\n\t\t\t//Try to find breakpoint in current file\n\t\t\tlet moveBreakpoint =\n\t\t\t\tthis.isNext\n\t\t\t\t\t? allEnabledBreakpoints.filter(bp => bp.uri.toString() === currentUri.toString() && bp.lineNumber > currentLine).shift()\n\t\t\t\t\t: allEnabledBreakpoints.filter(bp => bp.uri.toString() === currentUri.toString() && bp.lineNumber < currentLine).pop();\n\n\t\t\t//Try to find breakpoints in following files\n\t\t\tif (!moveBreakpoint) {\n\t\t\t\tmoveBreakpoint =\n\t\t\t\t\tthis.isNext\n\t\t\t\t\t\t? allEnabledBreakpoints.filter(bp => bp.uri.toString() > currentUri.toString()).shift()\n\t\t\t\t\t\t: allEnabledBreakpoints.filter(bp => bp.uri.toString() < currentUri.toString()).pop();\n\t\t\t}\n\n\t\t\t//Move to first or last possible breakpoint\n\t\t\tif (!moveBreakpoint && allEnabledBreakpoints.length) {\n\t\t\t\tmoveBreakpoint = this.isNext ? allEnabledBreakpoints[0] : allEnabledBreakpoints[allEnabledBreakpoints.length - 1];\n\t\t\t}\n\n\t\t\tif (moveBreakpoint) {\n\t\t\t\treturn openBreakpointSource(moveBreakpoint, false, true, debugService, editorService);\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nclass GoToNextBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.debug.action.goToNextBreakpoint',\n\t\t\tlabel: nls.localize('goToNextBreakpoint', \"Debug: Go To Next Breakpoint\"),\n\t\t\talias: 'Debug: Go To Next Breakpoint',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nclass GoToPreviousBreakpointAction extends GoToBreakpointAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.debug.action.goToPreviousBreakpoint',\n\t\t\tlabel: nls.localize('goToPreviousBreakpoint', \"Debug: Go To Previous Breakpoint\"),\n\t\t\talias: 'Debug: Go To Previous Breakpoint',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nregisterEditorAction(ToggleBreakpointAction);\nregisterEditorAction(ConditionalBreakpointAction);\nregisterEditorAction(LogPointAction);\nregisterEditorAction(RunToCursorAction);\nregisterEditorAction(SelectionToReplAction);\nregisterEditorAction(SelectionToWatchExpressionsAction);\nregisterEditorAction(ShowDebugHoverAction);\nregisterEditorAction(GoToNextBreakpointAction);\nregisterEditorAction(GoToPreviousBreakpointAction);\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: RunToCursorAction.ID,\n\t\ttitle: { value: RunToCursorAction.LABEL, original: 'Debug: Run to Cursor' },\n\t\tcategory: nls.localize('debug', \"Debug\")\n\t},\n\tgroup: 'debug',\n\twhen: ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped')),\n});\n"]}]}