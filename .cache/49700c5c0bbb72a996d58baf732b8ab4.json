{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentFileSystemChannel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/remote/common/remoteAgentFileSystemChannel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/uri\", \"vs/base/common/uuid\", \"vs/platform/files/common/files\", \"vs/base/common/buffer\", \"vs/base/common/platform\"], function (require, exports, event_1, lifecycle_1, uri_1, uuid_1, files_1, buffer_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.REMOTE_FILE_SYSTEM_CHANNEL_NAME = 'remotefilesystem';\n    class RemoteExtensionsFileSystemProvider extends lifecycle_1.Disposable {\n        constructor(channel, environment) {\n            super();\n            this._onDidChange = this._register(new event_1.Emitter());\n            this.onDidChangeFile = this._onDidChange.event;\n            this._onDidChangeCapabilities = this._register(new event_1.Emitter());\n            this.onDidChangeCapabilities = this._onDidChangeCapabilities.event;\n            this._session = uuid_1.generateUuid();\n            this._channel = channel;\n            this.setCaseSensitive(true);\n            environment.then(remoteAgentEnvironment => this.setCaseSensitive(!!(remoteAgentEnvironment && remoteAgentEnvironment.os === platform_1.OperatingSystem.Linux)));\n            this._channel.listen('filechange', [this._session])((events) => {\n                this._onDidChange.fire(events.map(RemoteExtensionsFileSystemProvider._createFileChange));\n            });\n        }\n        dispose() {\n            super.dispose();\n        }\n        setCaseSensitive(isCaseSensitive) {\n            let capabilities = (files_1.FileSystemProviderCapabilities.FileReadWrite\n                | files_1.FileSystemProviderCapabilities.FileFolderCopy);\n            if (isCaseSensitive) {\n                capabilities |= files_1.FileSystemProviderCapabilities.PathCaseSensitive;\n            }\n            this.capabilities = capabilities;\n            this._onDidChangeCapabilities.fire(undefined);\n        }\n        watch(resource, opts) {\n            const req = Math.random();\n            this._channel.call('watch', [this._session, req, resource, opts]);\n            return lifecycle_1.toDisposable(() => {\n                this._channel.call('unwatch', [this._session, req]);\n            });\n        }\n        static _createFileChange(dto) {\n            return { resource: uri_1.URI.revive(dto.resource), type: dto.type };\n        }\n        // --- forwarding calls\n        stat(resource) {\n            return this._channel.call('stat', [resource]);\n        }\n        readFile(resource) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const buff = yield this._channel.call('readFile', [resource]);\n                return buff.buffer;\n            });\n        }\n        writeFile(resource, content, opts) {\n            const contents = buffer_1.VSBuffer.wrap(content);\n            return this._channel.call('writeFile', [resource, contents, opts]);\n        }\n        delete(resource, opts) {\n            return this._channel.call('delete', [resource, opts]);\n        }\n        mkdir(resource) {\n            return this._channel.call('mkdir', [resource]);\n        }\n        readdir(resource) {\n            return this._channel.call('readdir', [resource]);\n        }\n        rename(resource, target, opts) {\n            return this._channel.call('rename', [resource, target, opts]);\n        }\n        copy(resource, target, opts) {\n            return this._channel.call('copy', [resource, target, opts]);\n        }\n    }\n    exports.RemoteExtensionsFileSystemProvider = RemoteExtensionsFileSystemProvider;\n});\n",null]}