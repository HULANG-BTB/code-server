{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LANGUAGE_DEFAULT = 'en';\nvar _isWindows = false;\nvar _isMacintosh = false;\nvar _isLinux = false;\nvar _isNative = false;\nvar _isWeb = false;\nvar _locale = undefined;\nvar _language = LANGUAGE_DEFAULT;\nvar _translationsConfigFile = undefined;\nvar isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n// OS detection\nif (typeof navigator === 'object' && !isElectronRenderer) {\n    var userAgent = navigator.userAgent;\n    _isWindows = userAgent.indexOf('Windows') >= 0;\n    _isMacintosh = userAgent.indexOf('Macintosh') >= 0;\n    _isLinux = userAgent.indexOf('Linux') >= 0;\n    _isWeb = true;\n    _locale = navigator.language;\n    _language = _locale;\n}\nelse if (typeof process === 'object') {\n    _isWindows = (process.platform === 'win32');\n    _isMacintosh = (process.platform === 'darwin');\n    _isLinux = (process.platform === 'linux');\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    var rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\n    if (rawNlsConfig) {\n        try {\n            var nlsConfig = JSON.parse(rawNlsConfig);\n            var resolved = nlsConfig.availableLanguages['*'];\n            _locale = nlsConfig.locale;\n            // VSCode's default language is 'en'\n            _language = resolved ? resolved : LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig._translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\nvar Platform;\n(function (Platform) {\n    Platform[Platform[\"Web\"] = 0] = \"Web\";\n    Platform[Platform[\"Mac\"] = 1] = \"Mac\";\n    Platform[Platform[\"Linux\"] = 2] = \"Linux\";\n    Platform[Platform[\"Windows\"] = 3] = \"Windows\";\n})(Platform = exports.Platform || (exports.Platform = {}));\nfunction PlatformToString(platform) {\n    switch (platform) {\n        case Platform.Web: return 'Web';\n        case Platform.Mac: return 'Mac';\n        case Platform.Linux: return 'Linux';\n        case Platform.Windows: return 'Windows';\n    }\n}\nexports.PlatformToString = PlatformToString;\nvar _platform = Platform.Web;\nif (_isNative) {\n    if (_isMacintosh) {\n        _platform = Platform.Mac;\n    }\n    else if (_isWindows) {\n        _platform = Platform.Windows;\n    }\n    else if (_isLinux) {\n        _platform = Platform.Linux;\n    }\n}\nexports.isWindows = _isWindows;\nexports.isMacintosh = _isMacintosh;\nexports.isLinux = _isLinux;\nexports.isNative = _isNative;\nexports.isWeb = _isWeb;\nexports.platform = _platform;\nfunction isRootUser() {\n    return _isNative && !_isWindows && (process.getuid() === 0);\n}\nexports.isRootUser = isRootUser;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexports.language = _language;\nvar Language;\n(function (Language) {\n    function value() {\n        return exports.language;\n    }\n    Language.value = value;\n    function isDefaultVariant() {\n        if (exports.language.length === 2) {\n            return exports.language === 'en';\n        }\n        else if (exports.language.length >= 3) {\n            return exports.language[0] === 'e' && exports.language[1] === 'n' && exports.language[2] === '-';\n        }\n        else {\n            return false;\n        }\n    }\n    Language.isDefaultVariant = isDefaultVariant;\n    function isDefault() {\n        return exports.language === 'en';\n    }\n    Language.isDefault = isDefault;\n})(Language = exports.Language || (exports.Language = {}));\n/**\n * The OS locale or the locale specified by --locale. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese). The UI is not necessarily shown in the provided locale.\n */\nexports.locale = _locale;\n/**\n * The translatios that are available through language packs.\n */\nexports.translationsConfigFile = _translationsConfigFile;\nvar _globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\nexports.globals = _globals;\nvar _setImmediate = null;\nfunction setImmediate(callback) {\n    if (_setImmediate === null) {\n        if (exports.globals.setImmediate) {\n            _setImmediate = exports.globals.setImmediate.bind(exports.globals);\n        }\n        else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n            _setImmediate = process.nextTick.bind(process);\n        }\n        else {\n            _setImmediate = exports.globals.setTimeout.bind(exports.globals);\n        }\n    }\n    return _setImmediate(callback);\n}\nexports.setImmediate = setImmediate;\nvar OperatingSystem;\n(function (OperatingSystem) {\n    OperatingSystem[OperatingSystem[\"Windows\"] = 1] = \"Windows\";\n    OperatingSystem[OperatingSystem[\"Macintosh\"] = 2] = \"Macintosh\";\n    OperatingSystem[OperatingSystem[\"Linux\"] = 3] = \"Linux\";\n})(OperatingSystem = exports.OperatingSystem || (exports.OperatingSystem = {}));\nexports.OS = (_isMacintosh ? OperatingSystem.Macintosh : (_isWindows ? OperatingSystem.Windows : OperatingSystem.Linux));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/platform.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst LANGUAGE_DEFAULT = 'en';\n\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _locale: string | undefined = undefined;\nlet _language: string = LANGUAGE_DEFAULT;\nlet _translationsConfigFile: string | undefined = undefined;\n\ninterface NLSConfig {\n\tlocale: string;\n\tavailableLanguages: { [key: string]: string; };\n\t_translationsConfigFile: string;\n}\n\nexport interface IProcessEnvironment {\n\t[key: string]: string;\n}\n\ninterface INodeProcess {\n\tplatform: string;\n\tenv: IProcessEnvironment;\n\tgetuid(): number;\n\tnextTick: Function;\n\tversions?: {\n\t\telectron?: string;\n\t};\n\ttype?: string;\n}\ndeclare const process: INodeProcess;\ndeclare const global: any;\n\ninterface INavigator {\n\tuserAgent: string;\n\tlanguage: string;\n}\ndeclare const navigator: INavigator;\ndeclare const self: any;\n\nconst isElectronRenderer = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.electron !== 'undefined' && process.type === 'renderer');\n\n// OS detection\nif (typeof navigator === 'object' && !isElectronRenderer) {\n\tconst userAgent = navigator.userAgent;\n\t_isWindows = userAgent.indexOf('Windows') >= 0;\n\t_isMacintosh = userAgent.indexOf('Macintosh') >= 0;\n\t_isLinux = userAgent.indexOf('Linux') >= 0;\n\t_isWeb = true;\n\t_locale = navigator.language;\n\t_language = _locale;\n} else if (typeof process === 'object') {\n\t_isWindows = (process.platform === 'win32');\n\t_isMacintosh = (process.platform === 'darwin');\n\t_isLinux = (process.platform === 'linux');\n\t_locale = LANGUAGE_DEFAULT;\n\t_language = LANGUAGE_DEFAULT;\n\tconst rawNlsConfig = process.env['VSCODE_NLS_CONFIG'];\n\tif (rawNlsConfig) {\n\t\ttry {\n\t\t\tconst nlsConfig: NLSConfig = JSON.parse(rawNlsConfig);\n\t\t\tconst resolved = nlsConfig.availableLanguages['*'];\n\t\t\t_locale = nlsConfig.locale;\n\t\t\t// VSCode's default language is 'en'\n\t\t\t_language = resolved ? resolved : LANGUAGE_DEFAULT;\n\t\t\t_translationsConfigFile = nlsConfig._translationsConfigFile;\n\t\t} catch (e) {\n\t\t}\n\t}\n\t_isNative = true;\n}\n\nexport const enum Platform {\n\tWeb,\n\tMac,\n\tLinux,\n\tWindows\n}\nexport function PlatformToString(platform: Platform) {\n\tswitch (platform) {\n\t\tcase Platform.Web: return 'Web';\n\t\tcase Platform.Mac: return 'Mac';\n\t\tcase Platform.Linux: return 'Linux';\n\t\tcase Platform.Windows: return 'Windows';\n\t}\n}\n\nlet _platform: Platform = Platform.Web;\nif (_isNative) {\n\tif (_isMacintosh) {\n\t\t_platform = Platform.Mac;\n\t} else if (_isWindows) {\n\t\t_platform = Platform.Windows;\n\t} else if (_isLinux) {\n\t\t_platform = Platform.Linux;\n\t}\n}\n\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const platform = _platform;\n\nexport function isRootUser(): boolean {\n\treturn _isNative && !_isWindows && (process.getuid() === 0);\n}\n\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese)\n */\nexport const language = _language;\n\nexport namespace Language {\n\n\texport function value(): string {\n\t\treturn language;\n\t}\n\n\texport function isDefaultVariant(): boolean {\n\t\tif (language.length === 2) {\n\t\t\treturn language === 'en';\n\t\t} else if (language.length >= 3) {\n\t\t\treturn language[0] === 'e' && language[1] === 'n' && language[2] === '-';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\texport function isDefault(): boolean {\n\t\treturn language === 'en';\n\t}\n}\n\n/**\n * The OS locale or the locale specified by --locale. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese). The UI is not necessarily shown in the provided locale.\n */\nexport const locale = _locale;\n\n/**\n * The translatios that are available through language packs.\n */\nexport const translationsConfigFile = _translationsConfigFile;\n\nconst _globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {} as any);\nexport const globals: any = _globals;\n\nlet _setImmediate: ((callback: (...args: any[]) => void) => number) | null = null;\nexport function setImmediate(callback: (...args: any[]) => void): number {\n\tif (_setImmediate === null) {\n\t\tif (globals.setImmediate) {\n\t\t\t_setImmediate = globals.setImmediate.bind(globals);\n\t\t} else if (typeof process !== 'undefined' && typeof process.nextTick === 'function') {\n\t\t\t_setImmediate = process.nextTick.bind(process);\n\t\t} else {\n\t\t\t_setImmediate = globals.setTimeout.bind(globals);\n\t\t}\n\t}\n\treturn _setImmediate!(callback);\n}\n\nexport const enum OperatingSystem {\n\tWindows = 1,\n\tMacintosh = 2,\n\tLinux = 3\n}\nexport const OS = (_isMacintosh ? OperatingSystem.Macintosh : (_isWindows ? OperatingSystem.Windows : OperatingSystem.Linux));\n"]}]}