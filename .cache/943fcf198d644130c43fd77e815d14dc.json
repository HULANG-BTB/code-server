{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/output/node/outputChannelModelService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/output/node/outputChannelModelService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extfs = require(\"vs/base/node/extfs\");\nvar path_1 = require(\"vs/base/common/path\");\nvar resources = require(\"vs/base/common/resources\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar async_1 = require(\"vs/base/common/async\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar outputChannelModel_1 = require(\"vs/workbench/services/output/common/outputChannelModel\");\nvar outputAppender_1 = require(\"vs/workbench/services/output/node/outputAppender\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar date_1 = require(\"vs/base/common/date\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar watchingOutputDir = false;\nvar callbacks = [];\nfunction watchOutputDirectory(outputDir, logService, onChange) {\n    callbacks.push(onChange);\n    if (!watchingOutputDir) {\n        var watcherDisposable_1 = extfs.watch(outputDir, function (eventType, fileName) {\n            for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n                var callback = callbacks_1[_i];\n                callback(eventType, fileName);\n            }\n        }, function (error) {\n            logService.error(error);\n        });\n        watchingOutputDir = true;\n        return lifecycle_1.toDisposable(function () {\n            callbacks = [];\n            watcherDisposable_1.dispose();\n        });\n    }\n    return lifecycle_1.toDisposable(function () { });\n}\nvar OutputChannelBackedByFile = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputChannelBackedByFile, _super);\n    function OutputChannelBackedByFile(id, modelUri, mimeType, file, fileService, modelService, modeService, logService) {\n        var _this = _super.call(this, modelUri, mimeType, file, fileService, modelService, modeService) || this;\n        _this.appendedMessage = '';\n        _this.loadingFromFileInProgress = false;\n        // Use one rotating file to check for main file reset\n        _this.appender = new outputAppender_1.OutputAppender(id, _this.file.fsPath);\n        _this.rotatingFilePath = id + \".1.log\";\n        _this._register(watchOutputDirectory(path_1.dirname(_this.file.fsPath), logService, function (eventType, file) { return _this.onFileChangedInOutputDirector(eventType, file); }));\n        _this.resettingDelayer = new async_1.ThrottledDelayer(50);\n        return _this;\n    }\n    OutputChannelBackedByFile.prototype.append = function (message) {\n        // update end offset always as message is read\n        this.endOffset = this.endOffset + Buffer.from(message).byteLength;\n        if (this.loadingFromFileInProgress) {\n            this.appendedMessage += message;\n        }\n        else {\n            this.write(message);\n            if (this.model) {\n                this.appendedMessage += message;\n                if (!this.modelUpdater.isScheduled()) {\n                    this.modelUpdater.schedule();\n                }\n            }\n        }\n    };\n    OutputChannelBackedByFile.prototype.clear = function (till) {\n        _super.prototype.clear.call(this, till);\n        this.appendedMessage = '';\n    };\n    OutputChannelBackedByFile.prototype.loadModel = function () {\n        var _this = this;\n        this.loadingFromFileInProgress = true;\n        if (this.modelUpdater.isScheduled()) {\n            this.modelUpdater.cancel();\n        }\n        this.appendedMessage = '';\n        return this.loadFile()\n            .then(function (content) {\n            if (_this.endOffset !== _this.startOffset + Buffer.from(content).byteLength) {\n                // Queue content is not written into the file\n                // Flush it and load file again\n                _this.flush();\n                return _this.loadFile();\n            }\n            return content;\n        })\n            .then(function (content) {\n            if (_this.appendedMessage) {\n                _this.write(_this.appendedMessage);\n                _this.appendedMessage = '';\n            }\n            _this.loadingFromFileInProgress = false;\n            return _this.createModel(content);\n        });\n    };\n    OutputChannelBackedByFile.prototype.resetModel = function () {\n        this.startOffset = 0;\n        this.endOffset = 0;\n        if (this.model) {\n            return this.loadModel().then(function () { return undefined; });\n        }\n        return Promise.resolve(undefined);\n    };\n    OutputChannelBackedByFile.prototype.loadFile = function () {\n        var _this = this;\n        return this.fileService.resolveContent(this.file, { position: this.startOffset, encoding: 'utf8' })\n            .then(function (content) { return _this.appendedMessage ? content.value + _this.appendedMessage : content.value; });\n    };\n    OutputChannelBackedByFile.prototype.updateModel = function () {\n        if (this.model && this.appendedMessage) {\n            this.appendToModel(this.appendedMessage);\n            this.appendedMessage = '';\n        }\n    };\n    OutputChannelBackedByFile.prototype.onFileChangedInOutputDirector = function (eventType, fileName) {\n        var _this = this;\n        // Check if rotating file has changed. It changes only when the main file exceeds its limit.\n        if (this.rotatingFilePath === fileName) {\n            this.resettingDelayer.trigger(function () { return _this.resetModel(); });\n        }\n    };\n    OutputChannelBackedByFile.prototype.write = function (content) {\n        this.appender.append(content);\n    };\n    OutputChannelBackedByFile.prototype.flush = function () {\n        this.appender.flush();\n    };\n    OutputChannelBackedByFile = tslib_1.__decorate([\n        tslib_1.__param(4, files_1.IFileService),\n        tslib_1.__param(5, modelService_1.IModelService),\n        tslib_1.__param(6, modeService_1.IModeService),\n        tslib_1.__param(7, log_1.ILogService)\n    ], OutputChannelBackedByFile);\n    return OutputChannelBackedByFile;\n}(outputChannelModel_1.AbstractFileOutputChannelModel));\nvar DelegatedOutputChannelModel = /** @class */ (function (_super) {\n    tslib_1.__extends(DelegatedOutputChannelModel, _super);\n    function DelegatedOutputChannelModel(id, modelUri, mimeType, outputDir, instantiationService, logService, telemetryService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.logService = logService;\n        _this.telemetryService = telemetryService;\n        _this._onDidAppendedContent = _this._register(new event_1.Emitter());\n        _this.onDidAppendedContent = _this._onDidAppendedContent.event;\n        _this._onDispose = _this._register(new event_1.Emitter());\n        _this.onDispose = _this._onDispose.event;\n        _this.outputChannelModel = _this.createOutputChannelModel(id, modelUri, mimeType, outputDir);\n        return _this;\n    }\n    DelegatedOutputChannelModel.prototype.createOutputChannelModel = function (id, modelUri, mimeType, outputDirPromise) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var outputChannelModel, outputDir, file, e_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, outputDirPromise];\n                    case 1:\n                        outputDir = _a.sent();\n                        file = resources.joinPath(outputDir, id + \".log\");\n                        outputChannelModel = this.instantiationService.createInstance(OutputChannelBackedByFile, id, modelUri, mimeType, file);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        // Do not crash if spdlog rotating logger cannot be loaded (workaround for https://github.com/Microsoft/vscode/issues/47883)\n                        this.logService.error(e_1);\n                        /* __GDPR__\n                            \"output.channel.creation.error\" : {}\n                        */\n                        this.telemetryService.publicLog('output.channel.creation.error');\n                        outputChannelModel = this.instantiationService.createInstance(outputChannelModel_1.BufferredOutputChannel, modelUri, mimeType);\n                        return [3 /*break*/, 3];\n                    case 3:\n                        this._register(outputChannelModel);\n                        this._register(outputChannelModel.onDidAppendedContent(function () { return _this._onDidAppendedContent.fire(); }));\n                        this._register(outputChannelModel.onDispose(function () { return _this._onDispose.fire(); }));\n                        return [2 /*return*/, outputChannelModel];\n                }\n            });\n        });\n    };\n    DelegatedOutputChannelModel.prototype.append = function (output) {\n        this.outputChannelModel.then(function (outputChannelModel) { return outputChannelModel.append(output); });\n    };\n    DelegatedOutputChannelModel.prototype.update = function () {\n        this.outputChannelModel.then(function (outputChannelModel) { return outputChannelModel.update(); });\n    };\n    DelegatedOutputChannelModel.prototype.loadModel = function () {\n        return this.outputChannelModel.then(function (outputChannelModel) { return outputChannelModel.loadModel(); });\n    };\n    DelegatedOutputChannelModel.prototype.clear = function (till) {\n        this.outputChannelModel.then(function (outputChannelModel) { return outputChannelModel.clear(till); });\n    };\n    DelegatedOutputChannelModel = tslib_1.__decorate([\n        tslib_1.__param(4, instantiation_1.IInstantiationService),\n        tslib_1.__param(5, log_1.ILogService),\n        tslib_1.__param(6, telemetry_1.ITelemetryService)\n    ], DelegatedOutputChannelModel);\n    return DelegatedOutputChannelModel;\n}(lifecycle_1.Disposable));\nvar OutputChannelModelService = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputChannelModelService, _super);\n    function OutputChannelModelService(instantiationService, environmentService, windowService, fileService) {\n        var _this = _super.call(this, instantiationService) || this;\n        _this.environmentService = environmentService;\n        _this.windowService = windowService;\n        _this.fileService = fileService;\n        return _this;\n    }\n    OutputChannelModelService.prototype.createOutputChannelModel = function (id, modelUri, mimeType, file) {\n        return file ? _super.prototype.createOutputChannelModel.call(this, id, modelUri, mimeType, file) :\n            this.instantiationService.createInstance(DelegatedOutputChannelModel, id, modelUri, mimeType, this.outputDir);\n    };\n    Object.defineProperty(OutputChannelModelService.prototype, \"outputDir\", {\n        get: function () {\n            if (!this._outputDir) {\n                var outputDir_1 = uri_1.URI.file(path_1.join(this.environmentService.logsPath, \"output_\" + this.windowService.getCurrentWindowId() + \"_\" + date_1.toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')));\n                this._outputDir = this.fileService.createFolder(outputDir_1).then(function () { return outputDir_1; });\n            }\n            return this._outputDir;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OutputChannelModelService = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, windows_1.IWindowService),\n        tslib_1.__param(3, files_1.IFileService)\n    ], OutputChannelModelService);\n    return OutputChannelModelService;\n}(outputChannelModel_1.AsbtractOutputChannelModelService));\nexports.OutputChannelModelService = OutputChannelModelService;\nextensions_1.registerSingleton(outputChannelModel_1.IOutputChannelModelService, OutputChannelModelService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/output/node/outputChannelModelService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/output/node/outputChannelModelService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport * as extfs from 'vs/base/node/extfs';\nimport { dirname, join } from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { URI } from 'vs/base/common/uri';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { toDisposable, IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IOutputChannelModel, AbstractFileOutputChannelModel, IOutputChannelModelService, AsbtractOutputChannelModelService, BufferredOutputChannel } from 'vs/workbench/services/output/common/outputChannelModel';\nimport { OutputAppender } from 'vs/workbench/services/output/node/outputAppender';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nlet watchingOutputDir = false;\nlet callbacks: ((eventType: string, fileName?: string) => void)[] = [];\nfunction watchOutputDirectory(outputDir: string, logService: ILogService, onChange: (eventType: string, fileName: string) => void): IDisposable {\n\tcallbacks.push(onChange);\n\tif (!watchingOutputDir) {\n\t\tconst watcherDisposable = extfs.watch(outputDir, (eventType, fileName) => {\n\t\t\tfor (const callback of callbacks) {\n\t\t\t\tcallback(eventType, fileName);\n\t\t\t}\n\t\t}, (error: string) => {\n\t\t\tlogService.error(error);\n\t\t});\n\t\twatchingOutputDir = true;\n\t\treturn toDisposable(() => {\n\t\t\tcallbacks = [];\n\t\t\twatcherDisposable.dispose();\n\t\t});\n\t}\n\treturn toDisposable(() => { });\n}\n\nclass OutputChannelBackedByFile extends AbstractFileOutputChannelModel implements IOutputChannelModel {\n\n\tprivate appender: OutputAppender;\n\tprivate appendedMessage: string;\n\tprivate loadingFromFileInProgress: boolean;\n\tprivate resettingDelayer: ThrottledDelayer<void>;\n\tprivate readonly rotatingFilePath: string;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tmimeType: string,\n\t\tfile: URI,\n\t\t@IFileService fileService: IFileService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(modelUri, mimeType, file, fileService, modelService, modeService);\n\t\tthis.appendedMessage = '';\n\t\tthis.loadingFromFileInProgress = false;\n\n\t\t// Use one rotating file to check for main file reset\n\t\tthis.appender = new OutputAppender(id, this.file.fsPath);\n\t\tthis.rotatingFilePath = `${id}.1.log`;\n\t\tthis._register(watchOutputDirectory(dirname(this.file.fsPath), logService, (eventType, file) => this.onFileChangedInOutputDirector(eventType, file)));\n\n\t\tthis.resettingDelayer = new ThrottledDelayer<void>(50);\n\t}\n\n\tappend(message: string): void {\n\t\t// update end offset always as message is read\n\t\tthis.endOffset = this.endOffset + Buffer.from(message).byteLength;\n\t\tif (this.loadingFromFileInProgress) {\n\t\t\tthis.appendedMessage += message;\n\t\t} else {\n\t\t\tthis.write(message);\n\t\t\tif (this.model) {\n\t\t\t\tthis.appendedMessage += message;\n\t\t\t\tif (!this.modelUpdater.isScheduled()) {\n\t\t\t\t\tthis.modelUpdater.schedule();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclear(till?: number): void {\n\t\tsuper.clear(till);\n\t\tthis.appendedMessage = '';\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\tthis.loadingFromFileInProgress = true;\n\t\tif (this.modelUpdater.isScheduled()) {\n\t\t\tthis.modelUpdater.cancel();\n\t\t}\n\t\tthis.appendedMessage = '';\n\t\treturn this.loadFile()\n\t\t\t.then(content => {\n\t\t\t\tif (this.endOffset !== this.startOffset + Buffer.from(content).byteLength) {\n\t\t\t\t\t// Queue content is not written into the file\n\t\t\t\t\t// Flush it and load file again\n\t\t\t\t\tthis.flush();\n\t\t\t\t\treturn this.loadFile();\n\t\t\t\t}\n\t\t\t\treturn content;\n\t\t\t})\n\t\t\t.then(content => {\n\t\t\t\tif (this.appendedMessage) {\n\t\t\t\t\tthis.write(this.appendedMessage);\n\t\t\t\t\tthis.appendedMessage = '';\n\t\t\t\t}\n\t\t\t\tthis.loadingFromFileInProgress = false;\n\t\t\t\treturn this.createModel(content);\n\t\t\t});\n\t}\n\n\tprivate resetModel(): Promise<void> {\n\t\tthis.startOffset = 0;\n\t\tthis.endOffset = 0;\n\t\tif (this.model) {\n\t\t\treturn this.loadModel().then(() => undefined);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate loadFile(): Promise<string> {\n\t\treturn this.fileService.resolveContent(this.file, { position: this.startOffset, encoding: 'utf8' })\n\t\t\t.then(content => this.appendedMessage ? content.value + this.appendedMessage : content.value);\n\t}\n\n\tprotected updateModel(): void {\n\t\tif (this.model && this.appendedMessage) {\n\t\t\tthis.appendToModel(this.appendedMessage);\n\t\t\tthis.appendedMessage = '';\n\t\t}\n\t}\n\n\tprivate onFileChangedInOutputDirector(eventType: string, fileName?: string): void {\n\t\t// Check if rotating file has changed. It changes only when the main file exceeds its limit.\n\t\tif (this.rotatingFilePath === fileName) {\n\t\t\tthis.resettingDelayer.trigger(() => this.resetModel());\n\t\t}\n\t}\n\n\tprivate write(content: string): void {\n\t\tthis.appender.append(content);\n\t}\n\n\tprivate flush(): void {\n\t\tthis.appender.flush();\n\t}\n}\n\nclass DelegatedOutputChannelModel extends Disposable implements IOutputChannelModel {\n\n\tprivate readonly _onDidAppendedContent: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidAppendedContent: Event<void> = this._onDidAppendedContent.event;\n\n\tprivate readonly _onDispose: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDispose: Event<void> = this._onDispose.event;\n\n\tprivate readonly outputChannelModel: Promise<IOutputChannelModel>;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodelUri: URI,\n\t\tmimeType: string,\n\t\toutputDir: Promise<URI>,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\t\tthis.outputChannelModel = this.createOutputChannelModel(id, modelUri, mimeType, outputDir);\n\t}\n\n\tprivate async createOutputChannelModel(id: string, modelUri: URI, mimeType: string, outputDirPromise: Promise<URI>): Promise<IOutputChannelModel> {\n\t\tlet outputChannelModel: IOutputChannelModel;\n\t\ttry {\n\t\t\tconst outputDir = await outputDirPromise;\n\t\t\tconst file = resources.joinPath(outputDir, `${id}.log`);\n\t\t\toutputChannelModel = this.instantiationService.createInstance(OutputChannelBackedByFile, id, modelUri, mimeType, file);\n\t\t} catch (e) {\n\t\t\t// Do not crash if spdlog rotating logger cannot be loaded (workaround for https://github.com/Microsoft/vscode/issues/47883)\n\t\t\tthis.logService.error(e);\n\t\t\t/* __GDPR__\n\t\t\t\t\"output.channel.creation.error\" : {}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('output.channel.creation.error');\n\t\t\toutputChannelModel = this.instantiationService.createInstance(BufferredOutputChannel, modelUri, mimeType);\n\t\t}\n\t\tthis._register(outputChannelModel);\n\t\tthis._register(outputChannelModel.onDidAppendedContent(() => this._onDidAppendedContent.fire()));\n\t\tthis._register(outputChannelModel.onDispose(() => this._onDispose.fire()));\n\t\treturn outputChannelModel;\n\t}\n\n\tappend(output: string): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.append(output));\n\t}\n\n\tupdate(): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.update());\n\t}\n\n\tloadModel(): Promise<ITextModel> {\n\t\treturn this.outputChannelModel.then(outputChannelModel => outputChannelModel.loadModel());\n\t}\n\n\tclear(till?: number): void {\n\t\tthis.outputChannelModel.then(outputChannelModel => outputChannelModel.clear(till));\n\t}\n\n}\n\nexport class OutputChannelModelService extends AsbtractOutputChannelModelService implements IOutputChannelModelService {\n\n\t_serviceBrand: any;\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper(instantiationService);\n\t}\n\n\tcreateOutputChannelModel(id: string, modelUri: URI, mimeType: string, file?: URI): IOutputChannelModel {\n\t\treturn file ? super.createOutputChannelModel(id, modelUri, mimeType, file) :\n\t\t\tthis.instantiationService.createInstance(DelegatedOutputChannelModel, id, modelUri, mimeType, this.outputDir);\n\t}\n\n\tprivate _outputDir: Promise<URI> | null;\n\tprivate get outputDir(): Promise<URI> {\n\t\tif (!this._outputDir) {\n\t\t\tconst outputDir = URI.file(join(this.environmentService.logsPath, `output_${this.windowService.getCurrentWindowId()}_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')}`));\n\t\t\tthis._outputDir = this.fileService.createFolder(outputDir).then(() => outputDir);\n\t\t}\n\t\treturn this._outputDir;\n\t}\n\n}\n\nregisterSingleton(IOutputChannelModelService, OutputChannelModelService);\n"]}]}