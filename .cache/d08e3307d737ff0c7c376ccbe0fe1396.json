{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/bulkEditService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/bulkEditService.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IBulkEditService = instantiation_1.createDecorator('IWorkspaceEditService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/bulkEditService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/bulkEditService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,gFAAiF;AAGpE,QAAA,gBAAgB,GAAG,+BAAe,CAAmB,uBAAuB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { WorkspaceEdit } from 'vs/editor/common/modes';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressRunner } from 'vs/platform/progress/common/progress';\n\nexport const IBulkEditService = createDecorator<IBulkEditService>('IWorkspaceEditService');\n\n\nexport interface IBulkEditOptions {\n\teditor?: ICodeEditor;\n\tprogress?: IProgressRunner;\n}\n\nexport interface IBulkEditResult {\n\tariaSummary: string;\n}\n\nexport interface IBulkEditService {\n\t_serviceBrand: any;\n\n\tapply(edit: WorkspaceEdit, options?: IBulkEditOptions): Promise<IBulkEditResult>;\n}\n\n"]}]}