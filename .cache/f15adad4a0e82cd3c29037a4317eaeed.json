{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/registry/common/platform.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/registry/common/platform.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Types = require(\"vs/base/common/types\");\nvar Assert = require(\"vs/base/common/assert\");\nvar RegistryImpl = /** @class */ (function () {\n    function RegistryImpl() {\n        this.data = {};\n    }\n    RegistryImpl.prototype.add = function (id, data) {\n        Assert.ok(Types.isString(id));\n        Assert.ok(Types.isObject(data));\n        Assert.ok(!this.data.hasOwnProperty(id), 'There is already an extension with this id');\n        this.data[id] = data;\n    };\n    RegistryImpl.prototype.knows = function (id) {\n        return this.data.hasOwnProperty(id);\n    };\n    RegistryImpl.prototype.as = function (id) {\n        return this.data[id] || null;\n    };\n    return RegistryImpl;\n}());\nexports.Registry = new RegistryImpl();\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/registry/common/platform.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/registry/common/platform.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4CAA8C;AAC9C,8CAAgD;AAyBhD;IAIC;QACC,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IAChB,CAAC;IAEM,0BAAG,GAAV,UAAW,EAAU,EAAE,IAAS;QAC/B,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE,4CAA4C,CAAC,CAAC;QAEvF,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IACtB,CAAC;IAEM,4BAAK,GAAZ,UAAa,EAAU;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;IAEM,yBAAE,GAAT,UAAU,EAAU;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC;IAC9B,CAAC;IACF,mBAAC;AAAD,CAAC,AAvBD,IAuBC;AAEY,QAAA,QAAQ,GAAc,IAAI,YAAY,EAAE,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as Types from 'vs/base/common/types';\nimport * as Assert from 'vs/base/common/assert';\n\nexport interface IRegistry {\n\n\t/**\n\t * Adds the extension functions and properties defined by data to the\n\t * platform. The provided id must be unique.\n\t * @param id a unique identifier\n\t * @param data a contribution\n\t */\n\tadd(id: string, data: any): void;\n\n\t/**\n\t * Returns true iff there is an extension with the provided id.\n\t * @param id an extension identifier\n\t */\n\tknows(id: string): boolean;\n\n\t/**\n\t * Returns the extension functions and properties defined by the specified key or null.\n\t * @param id an extension identifier\n\t */\n\tas<T>(id: string): T;\n}\n\nclass RegistryImpl implements IRegistry {\n\n\tprivate data: { [id: string]: any; };\n\n\tconstructor() {\n\t\tthis.data = {};\n\t}\n\n\tpublic add(id: string, data: any): void {\n\t\tAssert.ok(Types.isString(id));\n\t\tAssert.ok(Types.isObject(data));\n\t\tAssert.ok(!this.data.hasOwnProperty(id), 'There is already an extension with this id');\n\n\t\tthis.data[id] = data;\n\t}\n\n\tpublic knows(id: string): boolean {\n\t\treturn this.data.hasOwnProperty(id);\n\t}\n\n\tpublic as(id: string): any {\n\t\treturn this.data[id] || null;\n\t}\n}\n\nexport const Registry = <IRegistry>new RegistryImpl();\n"]}]}