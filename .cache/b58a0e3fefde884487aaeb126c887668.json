{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/event\", \"vs/base/common/platform\", \"vs/base/common/lifecycle\"], function (require, exports, instantiation_1, event_1, platform_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IWindowsService = instantiation_1.createDecorator('windowsService');\n    exports.IWindowService = instantiation_1.createDecorator('windowService');\n    function getTitleBarStyle(configurationService, environment, isExtensionDevelopment = environment.isExtensionDevelopment) {\n        if (platform_1.isWeb) {\n            return 'custom';\n        }\n        const configuration = configurationService.getValue('window');\n        const isDev = !environment.isBuilt || isExtensionDevelopment;\n        if (platform_1.isMacintosh && isDev) {\n            return 'native'; // not enabled when developing due to https://github.com/electron/electron/issues/3647\n        }\n        if (configuration) {\n            const useNativeTabs = platform_1.isMacintosh && configuration.nativeTabs === true;\n            if (useNativeTabs) {\n                return 'native'; // native tabs on sierra do not work with custom title style\n            }\n            const useSimpleFullScreen = platform_1.isMacintosh && configuration.nativeFullScreen === false;\n            if (useSimpleFullScreen) {\n                return 'native'; // simple fullscreen does not work well with custom title style (https://github.com/Microsoft/vscode/issues/63291)\n            }\n            const style = configuration.titleBarStyle;\n            if (style === 'native' || style === 'custom') {\n                return style;\n            }\n        }\n        return platform_1.isLinux ? 'native' : 'custom'; // default to custom on all macOS and Windows\n    }\n    exports.getTitleBarStyle = getTitleBarStyle;\n    var OpenContext;\n    (function (OpenContext) {\n        // opening when running from the command line\n        OpenContext[OpenContext[\"CLI\"] = 0] = \"CLI\";\n        // macOS only: opening from the dock (also when opening files to a running instance from desktop)\n        OpenContext[OpenContext[\"DOCK\"] = 1] = \"DOCK\";\n        // opening from the main application window\n        OpenContext[OpenContext[\"MENU\"] = 2] = \"MENU\";\n        // opening from a file or folder dialog\n        OpenContext[OpenContext[\"DIALOG\"] = 3] = \"DIALOG\";\n        // opening from the OS's UI\n        OpenContext[OpenContext[\"DESKTOP\"] = 4] = \"DESKTOP\";\n        // opening through the API\n        OpenContext[OpenContext[\"API\"] = 5] = \"API\";\n    })(OpenContext = exports.OpenContext || (exports.OpenContext = {}));\n    var ReadyState;\n    (function (ReadyState) {\n        /**\n         * This window has not loaded any HTML yet\n         */\n        ReadyState[ReadyState[\"NONE\"] = 0] = \"NONE\";\n        /**\n         * This window is loading HTML\n         */\n        ReadyState[ReadyState[\"LOADING\"] = 1] = \"LOADING\";\n        /**\n         * This window is navigating to another HTML\n         */\n        ReadyState[ReadyState[\"NAVIGATING\"] = 2] = \"NAVIGATING\";\n        /**\n         * This window is done loading HTML\n         */\n        ReadyState[ReadyState[\"READY\"] = 3] = \"READY\";\n    })(ReadyState = exports.ReadyState || (exports.ReadyState = {}));\n    let ActiveWindowManager = class ActiveWindowManager {\n        constructor(windowsService) {\n            this.disposables = [];\n            const onActiveWindowChange = event_1.Event.latch(event_1.Event.any(windowsService.onWindowOpen, windowsService.onWindowFocus));\n            onActiveWindowChange(this.setActiveWindow, this, this.disposables);\n            this.firstActiveWindowIdPromise = windowsService.getActiveWindowId()\n                .then(id => (typeof this._activeWindowId === 'undefined') && this.setActiveWindow(id));\n        }\n        setActiveWindow(windowId) {\n            if (this.firstActiveWindowIdPromise) {\n                this.firstActiveWindowIdPromise = null;\n            }\n            this._activeWindowId = windowId;\n        }\n        getActiveClientId() {\n            if (this.firstActiveWindowIdPromise) {\n                return this.firstActiveWindowIdPromise;\n            }\n            return Promise.resolve(`window:${this._activeWindowId}`);\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    ActiveWindowManager = __decorate([\n        __param(0, exports.IWindowsService)\n    ], ActiveWindowManager);\n    exports.ActiveWindowManager = ActiveWindowManager;\n});\n",null]}