{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nexports.EDITOR_TITLE_HEIGHT = 35;\nexports.DEFAULT_EDITOR_MIN_DIMENSIONS = new dom_1.Dimension(220, 70);\nexports.DEFAULT_EDITOR_MAX_DIMENSIONS = new dom_1.Dimension(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\nexports.DEFAULT_EDITOR_PART_OPTIONS = {\n    showTabs: true,\n    highlightModifiedTabs: false,\n    tabCloseButton: 'right',\n    tabSizing: 'fit',\n    focusRecentEditorAfterClose: true,\n    showIcons: true,\n    enablePreview: true,\n    openPositioning: 'right',\n    openSideBySideDirection: 'right',\n    closeEmptyGroups: true,\n    labelFormat: 'default',\n    iconTheme: 'vs-seti'\n};\nfunction impactsEditorPartOptions(event) {\n    return event.affectsConfiguration('workbench.editor') || event.affectsConfiguration('workbench.iconTheme');\n}\nexports.impactsEditorPartOptions = impactsEditorPartOptions;\nfunction getEditorPartOptions(config) {\n    var options = objects_1.assign(Object.create(null), exports.DEFAULT_EDITOR_PART_OPTIONS);\n    if (!config || !config.workbench) {\n        return options;\n    }\n    if (typeof config.workbench.iconTheme === 'string') {\n        options.iconTheme = config.workbench.iconTheme;\n    }\n    if (config.workbench.editor) {\n        objects_1.assign(options, config.workbench.editor);\n    }\n    return options;\n}\nexports.getEditorPartOptions = getEditorPartOptions;\nfunction getActiveTextEditorOptions(group, expectedActiveEditor, presetOptions) {\n    var activeGroupCodeEditor = group.activeControl ? editorBrowser_1.getCodeEditor(group.activeControl.getControl()) : undefined;\n    if (activeGroupCodeEditor) {\n        if (!expectedActiveEditor || expectedActiveEditor.matches(group.activeEditor)) {\n            return editor_1.TextEditorOptions.fromEditor(activeGroupCodeEditor, presetOptions);\n        }\n    }\n    return presetOptions || new editor_1.EditorOptions();\n}\nexports.getActiveTextEditorOptions = getActiveTextEditorOptions;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editor.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,qDAA+M;AAI/M,2CAAgD;AAEhD,kDAAgD;AAGhD,iEAAgE;AAInD,QAAA,mBAAmB,GAAG,EAAE,CAAC;AAMzB,QAAA,6BAA6B,GAAG,IAAI,eAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACvD,QAAA,6BAA6B,GAAG,IAAI,eAAS,CAAC,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAElG,QAAA,2BAA2B,GAAuB;IAC9D,QAAQ,EAAE,IAAI;IACd,qBAAqB,EAAE,KAAK;IAC5B,cAAc,EAAE,OAAO;IACvB,SAAS,EAAE,KAAK;IAChB,2BAA2B,EAAE,IAAI;IACjC,SAAS,EAAE,IAAI;IACf,aAAa,EAAE,IAAI;IACnB,eAAe,EAAE,OAAO;IACxB,uBAAuB,EAAE,OAAO;IAChC,gBAAgB,EAAE,IAAI;IACtB,WAAW,EAAE,SAAS;IACtB,SAAS,EAAE,SAAS;CACpB,CAAC;AAEF,SAAgB,wBAAwB,CAAC,KAAgC;IACxE,OAAO,KAAK,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;AAC5G,CAAC;AAFD,4DAEC;AAED,SAAgB,oBAAoB,CAAC,MAAqC;IACzE,IAAM,OAAO,GAAuB,gBAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,mCAA2B,CAAC,CAAC;IAE7F,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;QACjC,OAAO,OAAO,CAAC;KACf;IAED,IAAI,OAAO,MAAM,CAAC,SAAS,CAAC,SAAS,KAAK,QAAQ,EAAE;QACnD,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;KAC/C;IAED,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE;QAC5B,gBAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;KACzC;IAED,OAAO,OAAO,CAAC;AAChB,CAAC;AAhBD,oDAgBC;AA2DD,SAAgB,0BAA0B,CAAC,KAAmB,EAAE,oBAAmC,EAAE,aAA6B;IACjI,IAAM,qBAAqB,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,6BAAa,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAChH,IAAI,qBAAqB,EAAE;QAC1B,IAAI,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;YAC9E,OAAO,0BAAiB,CAAC,UAAU,CAAC,qBAAqB,EAAE,aAAa,CAAC,CAAC;SAC1E;KACD;IAED,OAAO,aAAa,IAAI,IAAI,sBAAa,EAAE,CAAC;AAC7C,CAAC;AATD,gEASC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GroupIdentifier, IWorkbenchEditorConfiguration, EditorOptions, TextEditorOptions, IEditorInput, IEditorIdentifier, IEditorCloseEvent, IEditor, IEditorPartOptions } from 'vs/workbench/common/editor';\nimport { EditorGroup } from 'vs/workbench/common/editor/editorGroup';\nimport { IEditorGroup, GroupDirection, IAddGroupOptions, IMergeGroupOptions, GroupsOrder } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { Event } from 'vs/base/common/event';\nimport { assign } from 'vs/base/common/objects';\nimport { IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { ISerializableView } from 'vs/base/browser/ui/grid/grid';\nimport { getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport const EDITOR_TITLE_HEIGHT = 35;\n\nexport interface IEditorPartCreationOptions {\n\trestorePreviousState: boolean;\n}\n\nexport const DEFAULT_EDITOR_MIN_DIMENSIONS = new Dimension(220, 70);\nexport const DEFAULT_EDITOR_MAX_DIMENSIONS = new Dimension(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n\nexport const DEFAULT_EDITOR_PART_OPTIONS: IEditorPartOptions = {\n\tshowTabs: true,\n\thighlightModifiedTabs: false,\n\ttabCloseButton: 'right',\n\ttabSizing: 'fit',\n\tfocusRecentEditorAfterClose: true,\n\tshowIcons: true,\n\tenablePreview: true,\n\topenPositioning: 'right',\n\topenSideBySideDirection: 'right',\n\tcloseEmptyGroups: true,\n\tlabelFormat: 'default',\n\ticonTheme: 'vs-seti'\n};\n\nexport function impactsEditorPartOptions(event: IConfigurationChangeEvent): boolean {\n\treturn event.affectsConfiguration('workbench.editor') || event.affectsConfiguration('workbench.iconTheme');\n}\n\nexport function getEditorPartOptions(config: IWorkbenchEditorConfiguration): IEditorPartOptions {\n\tconst options: IEditorPartOptions = assign(Object.create(null), DEFAULT_EDITOR_PART_OPTIONS);\n\n\tif (!config || !config.workbench) {\n\t\treturn options;\n\t}\n\n\tif (typeof config.workbench.iconTheme === 'string') {\n\t\toptions.iconTheme = config.workbench.iconTheme;\n\t}\n\n\tif (config.workbench.editor) {\n\t\tassign(options, config.workbench.editor);\n\t}\n\n\treturn options;\n}\n\nexport interface IEditorPartOptionsChangeEvent {\n\toldPartOptions: IEditorPartOptions;\n\tnewPartOptions: IEditorPartOptions;\n}\n\nexport interface IEditorOpeningEvent extends IEditorIdentifier {\n\toptions?: IEditorOptions;\n\n\t/**\n\t * Allows to prevent the opening of an editor by providing a callback\n\t * that will be executed instead. By returning another editor promise\n\t * it is possible to override the opening with another editor. It is ok\n\t * to return a promise that resolves to NULL to prevent the opening\n\t * alltogether.\n\t */\n\tprevent(callback: () => undefined | Promise<IEditor | undefined>): void;\n}\n\nexport interface IEditorGroupsAccessor {\n\treadonly groups: IEditorGroupView[];\n\treadonly activeGroup: IEditorGroupView;\n\n\treadonly partOptions: IEditorPartOptions;\n\treadonly onDidEditorPartOptionsChange: Event<IEditorPartOptionsChangeEvent>;\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined;\n\tgetGroups(order: GroupsOrder): IEditorGroupView[];\n\n\tactivateGroup(identifier: IEditorGroupView | GroupIdentifier): IEditorGroupView;\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection, options?: IAddGroupOptions): IEditorGroupView;\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): IEditorGroupView;\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier): void;\n}\n\nexport interface IEditorGroupView extends IDisposable, ISerializableView, IEditorGroup {\n\treadonly group: EditorGroup;\n\treadonly whenRestored: Promise<void>;\n\treadonly disposed: boolean;\n\n\treadonly onDidFocus: Event<void>;\n\treadonly onWillDispose: Event<void>;\n\treadonly onWillOpenEditor: Event<IEditorOpeningEvent>;\n\treadonly onDidOpenEditorFail: Event<IEditorInput>;\n\treadonly onWillCloseEditor: Event<IEditorCloseEvent>;\n\treadonly onDidCloseEditor: Event<IEditorCloseEvent>;\n\n\tisEmpty(): boolean;\n\tsetActive(isActive: boolean): void;\n\tsetLabel(label: string): void;\n\trelayout(): void;\n}\n\nexport function getActiveTextEditorOptions(group: IEditorGroup, expectedActiveEditor?: IEditorInput, presetOptions?: EditorOptions): EditorOptions {\n\tconst activeGroupCodeEditor = group.activeControl ? getCodeEditor(group.activeControl.getControl()) : undefined;\n\tif (activeGroupCodeEditor) {\n\t\tif (!expectedActiveEditor || expectedActiveEditor.matches(group.activeEditor)) {\n\t\t\treturn TextEditorOptions.fromEditor(activeGroupCodeEditor, presetOptions);\n\t\t}\n\t}\n\n\treturn presetOptions || new EditorOptions();\n}\n\n/**\n * A sub-interface of IEditorService to hide some workbench-core specific\n * events from clients.\n */\nexport interface EditorServiceImpl extends IEditorService {\n\n\t/**\n\t * Emitted when an editor is closed.\n\t */\n\treadonly onDidCloseEditor: Event<IEditorCloseEvent>;\n\n\t/**\n\t * Emitted when an editor failed to open.\n\t */\n\treadonly onDidOpenEditorFail: Event<IEditorIdentifier>;\n}\n"]}]}