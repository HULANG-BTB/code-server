{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/simpleFindWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/simpleFindWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/browser/dom\", \"vs/base/browser/ui/widget\", \"vs/base/common/async\", \"vs/base/common/keyCodes\", \"vs/editor/contrib/find/findState\", \"vs/editor/contrib/find/findWidget\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"vs/platform/browser/contextScopedHistoryWidget\", \"vs/css!./simpleFindWidget\"], function (require, exports, nls, dom, widget_1, async_1, keyCodes_1, findState_1, findWidget_1, contextkey_1, contextView_1, colorRegistry_1, themeService_1, contextScopedHistoryWidget_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const NLS_FIND_INPUT_LABEL = nls.localize('label.find', \"Find\");\n    const NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', \"Find\");\n    const NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', \"Previous match\");\n    const NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', \"Next match\");\n    const NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', \"Close\");\n    let SimpleFindWidget = class SimpleFindWidget extends widget_1.Widget {\n        constructor(_contextViewService, contextKeyService, _state = new findState_1.FindReplaceState(), showOptionButtons) {\n            super();\n            this._contextViewService = _contextViewService;\n            this._state = _state;\n            this._isVisible = false;\n            this._findInput = this._register(new contextScopedHistoryWidget_1.ContextScopedFindInput(null, this._contextViewService, {\n                label: NLS_FIND_INPUT_LABEL,\n                placeholder: NLS_FIND_INPUT_PLACEHOLDER,\n            }, contextKeyService, showOptionButtons));\n            // Find History with update delayer\n            this._updateHistoryDelayer = new async_1.Delayer(500);\n            this.oninput(this._findInput.domNode, (e) => {\n                this.onInputChanged();\n                this._delayedUpdateHistory();\n            });\n            this._findInput.setRegex(!!this._state.isRegex);\n            this._findInput.setCaseSensitive(!!this._state.matchCase);\n            this._findInput.setWholeWords(!!this._state.wholeWord);\n            this._register(this._findInput.onDidOptionChange(() => {\n                this._state.change({\n                    isRegex: this._findInput.getRegex(),\n                    wholeWord: this._findInput.getWholeWords(),\n                    matchCase: this._findInput.getCaseSensitive()\n                }, true);\n            }));\n            this._register(this._state.onFindReplaceStateChange(() => {\n                this._findInput.setRegex(this._state.isRegex);\n                this._findInput.setWholeWords(this._state.wholeWord);\n                this._findInput.setCaseSensitive(this._state.matchCase);\n            }));\n            this._register(this._findInput.onKeyDown((e) => {\n                if (e.equals(keyCodes_1.KeyCode.Enter)) {\n                    this.find(false);\n                    e.preventDefault();\n                    return;\n                }\n                if (e.equals(keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Enter)) {\n                    this.find(true);\n                    e.preventDefault();\n                    return;\n                }\n            }));\n            const prevBtn = new findWidget_1.SimpleButton({\n                label: NLS_PREVIOUS_MATCH_BTN_LABEL,\n                className: 'previous',\n                onTrigger: () => {\n                    this.find(true);\n                }\n            });\n            const nextBtn = new findWidget_1.SimpleButton({\n                label: NLS_NEXT_MATCH_BTN_LABEL,\n                className: 'next',\n                onTrigger: () => {\n                    this.find(false);\n                }\n            });\n            const closeBtn = new findWidget_1.SimpleButton({\n                label: NLS_CLOSE_BTN_LABEL,\n                className: 'close-fw',\n                onTrigger: () => {\n                    this.hide();\n                }\n            });\n            this._innerDomNode = document.createElement('div');\n            this._innerDomNode.classList.add('simple-find-part');\n            this._innerDomNode.appendChild(this._findInput.domNode);\n            this._innerDomNode.appendChild(prevBtn.domNode);\n            this._innerDomNode.appendChild(nextBtn.domNode);\n            this._innerDomNode.appendChild(closeBtn.domNode);\n            // _domNode wraps _innerDomNode, ensuring that\n            this._domNode = document.createElement('div');\n            this._domNode.classList.add('simple-find-part-wrapper');\n            this._domNode.appendChild(this._innerDomNode);\n            this.onkeyup(this._innerDomNode, e => {\n                if (e.equals(keyCodes_1.KeyCode.Escape)) {\n                    this.hide();\n                    e.preventDefault();\n                    return;\n                }\n            });\n            this._focusTracker = this._register(dom.trackFocus(this._innerDomNode));\n            this._register(this._focusTracker.onDidFocus(this.onFocusTrackerFocus.bind(this)));\n            this._register(this._focusTracker.onDidBlur(this.onFocusTrackerBlur.bind(this)));\n            this._findInputFocusTracker = this._register(dom.trackFocus(this._findInput.domNode));\n            this._register(this._findInputFocusTracker.onDidFocus(this.onFindInputFocusTrackerFocus.bind(this)));\n            this._register(this._findInputFocusTracker.onDidBlur(this.onFindInputFocusTrackerBlur.bind(this)));\n            this._register(dom.addDisposableListener(this._innerDomNode, 'click', (event) => {\n                event.stopPropagation();\n            }));\n        }\n        get inputValue() {\n            return this._findInput.getValue();\n        }\n        get focusTracker() {\n            return this._focusTracker;\n        }\n        updateTheme(theme) {\n            const inputStyles = {\n                inputActiveOptionBorder: theme.getColor(colorRegistry_1.inputActiveOptionBorder),\n                inputBackground: theme.getColor(colorRegistry_1.inputBackground),\n                inputForeground: theme.getColor(colorRegistry_1.inputForeground),\n                inputBorder: theme.getColor(colorRegistry_1.inputBorder),\n                inputValidationInfoBackground: theme.getColor(colorRegistry_1.inputValidationInfoBackground),\n                inputValidationInfoForeground: theme.getColor(colorRegistry_1.inputValidationInfoForeground),\n                inputValidationInfoBorder: theme.getColor(colorRegistry_1.inputValidationInfoBorder),\n                inputValidationWarningBackground: theme.getColor(colorRegistry_1.inputValidationWarningBackground),\n                inputValidationWarningForeground: theme.getColor(colorRegistry_1.inputValidationWarningForeground),\n                inputValidationWarningBorder: theme.getColor(colorRegistry_1.inputValidationWarningBorder),\n                inputValidationErrorBackground: theme.getColor(colorRegistry_1.inputValidationErrorBackground),\n                inputValidationErrorForeground: theme.getColor(colorRegistry_1.inputValidationErrorForeground),\n                inputValidationErrorBorder: theme.getColor(colorRegistry_1.inputValidationErrorBorder)\n            };\n            this._findInput.style(inputStyles);\n        }\n        dispose() {\n            super.dispose();\n            if (this._domNode && this._domNode.parentElement) {\n                this._domNode.parentElement.removeChild(this._domNode);\n            }\n        }\n        getDomNode() {\n            return this._domNode;\n        }\n        reveal(initialInput) {\n            if (initialInput) {\n                this._findInput.setValue(initialInput);\n            }\n            if (this._isVisible) {\n                this._findInput.select();\n                return;\n            }\n            this._isVisible = true;\n            setTimeout(() => {\n                dom.addClass(this._innerDomNode, 'visible');\n                dom.addClass(this._innerDomNode, 'visible-transition');\n                this._innerDomNode.setAttribute('aria-hidden', 'false');\n                this._findInput.select();\n            }, 0);\n        }\n        show(initialInput) {\n            if (initialInput && !this._isVisible) {\n                this._findInput.setValue(initialInput);\n            }\n            this._isVisible = true;\n            setTimeout(() => {\n                dom.addClass(this._innerDomNode, 'visible');\n                dom.addClass(this._innerDomNode, 'visible-transition');\n                this._innerDomNode.setAttribute('aria-hidden', 'false');\n            }, 0);\n        }\n        hide() {\n            if (this._isVisible) {\n                dom.removeClass(this._innerDomNode, 'visible-transition');\n                this._innerDomNode.setAttribute('aria-hidden', 'true');\n                // Need to delay toggling visibility until after Transition, then visibility hidden - removes from tabIndex list\n                setTimeout(() => {\n                    this._isVisible = false;\n                    dom.removeClass(this._innerDomNode, 'visible');\n                }, 200);\n            }\n        }\n        _delayedUpdateHistory() {\n            this._updateHistoryDelayer.trigger(this._updateHistory.bind(this));\n        }\n        _updateHistory() {\n            this._findInput.inputBox.addToHistory();\n        }\n        _getRegexValue() {\n            return this._findInput.getRegex();\n        }\n        _getWholeWordValue() {\n            return this._findInput.getWholeWords();\n        }\n        _getCaseSensitiveValue() {\n            return this._findInput.getCaseSensitive();\n        }\n    };\n    SimpleFindWidget = __decorate([\n        __param(0, contextView_1.IContextViewService),\n        __param(1, contextkey_1.IContextKeyService)\n    ], SimpleFindWidget);\n    exports.SimpleFindWidget = SimpleFindWidget;\n    // theming\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const findWidgetBGColor = theme.getColor(colorRegistry_1.editorWidgetBackground);\n        if (findWidgetBGColor) {\n            collector.addRule(`.monaco-workbench .simple-find-part { background-color: ${findWidgetBGColor} !important; }`);\n        }\n        const widgetShadowColor = theme.getColor(colorRegistry_1.widgetShadow);\n        if (widgetShadowColor) {\n            collector.addRule(`.monaco-workbench .simple-find-part { box-shadow: 0 2px 8px ${widgetShadowColor}; }`);\n        }\n    });\n});\n",null]}