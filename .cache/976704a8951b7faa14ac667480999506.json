{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/paste.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/paste.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar terminalCommands_1 = require(\"vs/workbench/contrib/terminal/common/terminalCommands\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar actions = require(\"vs/workbench/contrib/terminal/browser/terminalActions\");\nvar instance = require(\"vs/workbench/contrib/terminal/browser/terminalInstance\");\nvar client_1 = require(\"../client\");\nvar getLabel = function (key, enabled) {\n    return enabled\n        ? nls.localize(key, \"Paste\")\n        : nls.localize(key + \"WithKeybind\", \"Paste (must use keybind)\");\n};\nvar PasteAction = /** @class */ (function (_super) {\n    tslib_1.__extends(PasteAction, _super);\n    function PasteAction() {\n        var _this = _super.call(this, \"editor.action.clipboardPasteAction\", getLabel(PasteAction.KEY, client_1.client.clipboard.isEnabled), undefined, client_1.client.clipboard.isEnabled, function () { return tslib_1.__awaiter(_this, void 0, Promise, function () { return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/, client_1.client.clipboard.paste()];\n        }); }); }) || this;\n        client_1.client.clipboard.onPermissionChange(function (enabled) {\n            _this.label = getLabel(PasteAction.KEY, enabled);\n            _this.enabled = enabled;\n        });\n        return _this;\n    }\n    PasteAction.KEY = \"paste\";\n    return PasteAction;\n}(actions_1.Action));\nexports.PasteAction = PasteAction;\nvar TerminalPasteAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalPasteAction, _super);\n    function TerminalPasteAction(id, label, terminalService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.terminalService = terminalService;\n        client_1.client.clipboard.onPermissionChange(function (enabled) {\n            _this._setLabel(getLabel(TerminalPasteAction.KEY, enabled));\n        });\n        _this._setLabel(getLabel(TerminalPasteAction.KEY, client_1.client.clipboard.isEnabled));\n        return _this;\n    }\n    TerminalPasteAction.prototype.run = function () {\n        var instance = this.terminalService.getActiveOrCreateInstance();\n        if (instance) {\n            // tslint:disable-next-line no-any it will return a promise (see below)\n            return instance.paste();\n        }\n        return Promise.resolve();\n    };\n    TerminalPasteAction.KEY = \"workbench.action.terminal.paste\";\n    TerminalPasteAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.PASTE;\n    TerminalPasteAction.LABEL = nls.localize(\"workbench.action.terminal.paste\", \"Paste into Active Terminal\");\n    TerminalPasteAction.SHORT_LABEL = getLabel(TerminalPasteAction.KEY, client_1.client.clipboard.isEnabled);\n    TerminalPasteAction = tslib_1.__decorate([\n        tslib_1.__param(2, terminal_1.ITerminalService)\n    ], TerminalPasteAction);\n    return TerminalPasteAction;\n}(actions_1.Action));\nvar TerminalInstance = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalInstance, _super);\n    function TerminalInstance() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TerminalInstance.prototype.paste = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var text;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.focus();\n                        if (!client_1.client.clipboard.isEnabled) return [3 /*break*/, 2];\n                        return [4 /*yield*/, client_1.client.clipboard.readText()];\n                    case 1:\n                        text = _a.sent();\n                        this.sendText(text, false);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        document.execCommand(\"paste\");\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return TerminalInstance;\n}(instance.TerminalInstance));\nvar actionsTarget = actions;\n// @ts-ignore TODO: don't ignore it.\nactionsTarget.TerminalPasteAction = TerminalPasteAction;\nvar instanceTarget = instance;\ninstanceTarget.TerminalInstance = TerminalInstance;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/paste.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/paste.ts"],"names":[],"mappings":"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","sourcesContent":["import * as nls from \"vs/nls\";\nimport { Action } from \"vs/base/common/actions\";\nimport { TERMINAL_COMMAND_ID } from \"vs/workbench/contrib/terminal/common/terminalCommands\";\nimport { ITerminalService } from \"vs/workbench/contrib/terminal/common/terminal\";\nimport * as actions from \"vs/workbench/contrib/terminal/browser/terminalActions\";\nimport * as instance from \"vs/workbench/contrib/terminal/browser/terminalInstance\";\nimport { client } from \"../client\";\n\nconst getLabel = (key: string, enabled: boolean): string => {\n\treturn enabled\n\t\t? nls.localize(key, \"Paste\")\n\t\t: nls.localize(`${key}WithKeybind`, \"Paste (must use keybind)\");\n};\n\nexport class PasteAction extends Action {\n\tprivate static readonly KEY = \"paste\";\n\n\tpublic constructor() {\n\t\tsuper(\n\t\t\t\"editor.action.clipboardPasteAction\",\n\t\t\tgetLabel(PasteAction.KEY, client.clipboard.isEnabled),\n\t\t\tundefined,\n\t\t\tclient.clipboard.isEnabled,\n\t\t\tasync (): Promise<boolean> => client.clipboard.paste(),\n\t\t);\n\n\t\tclient.clipboard.onPermissionChange((enabled) => {\n\t\t\tthis.label = getLabel(PasteAction.KEY, enabled);\n\t\t\tthis.enabled = enabled;\n\t\t});\n\t}\n}\n\nclass TerminalPasteAction extends Action {\n\tprivate static readonly KEY = \"workbench.action.terminal.paste\";\n\n\tpublic static readonly ID = TERMINAL_COMMAND_ID.PASTE;\n\tpublic static readonly LABEL = nls.localize(\"workbench.action.terminal.paste\", \"Paste into Active Terminal\");\n\tpublic static readonly SHORT_LABEL = getLabel(TerminalPasteAction.KEY, client.clipboard.isEnabled);\n\n\tpublic constructor(\n\t\tid: string, label: string,\n\t\t@ITerminalService private terminalService: ITerminalService,\n\t) {\n\t\tsuper(id, label);\n\t\tclient.clipboard.onPermissionChange((enabled) => {\n\t\t\tthis._setLabel(getLabel(TerminalPasteAction.KEY, enabled));\n\t\t});\n\t\tthis._setLabel(getLabel(TerminalPasteAction.KEY, client.clipboard.isEnabled));\n\t}\n\n\tpublic run(): Promise<void> {\n\t\tconst instance = this.terminalService.getActiveOrCreateInstance();\n\t\tif (instance) {\n\t\t\t// tslint:disable-next-line no-any it will return a promise (see below)\n\t\t\treturn (instance as any).paste();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n}\n\nclass TerminalInstance extends instance.TerminalInstance {\n\tpublic async paste(): Promise<void> {\n\t\tthis.focus();\n\t\tif (client.clipboard.isEnabled) {\n\t\t\tconst text = await client.clipboard.readText();\n\t\t\tthis.sendText(text, false);\n\t\t} else {\n\t\t\tdocument.execCommand(\"paste\");\n\t\t}\n\t}\n}\n\nconst actionsTarget = actions as typeof actions;\n// @ts-ignore TODO: don't ignore it.\nactionsTarget.TerminalPasteAction = TerminalPasteAction;\n\nconst instanceTarget = instance as typeof instance;\ninstanceTarget.TerminalInstance = TerminalInstance;\n"]}]}