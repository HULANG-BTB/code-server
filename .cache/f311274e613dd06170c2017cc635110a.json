{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewOverlays.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewOverlays.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar configuration_1 = require(\"vs/editor/browser/config/configuration\");\nvar viewLayer_1 = require(\"vs/editor/browser/view/viewLayer\");\nvar viewPart_1 = require(\"vs/editor/browser/view/viewPart\");\nvar ViewOverlays = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewOverlays, _super);\n    function ViewOverlays(context) {\n        var _this = _super.call(this, context) || this;\n        _this._visibleLines = new viewLayer_1.VisibleLinesCollection(_this);\n        _this.domNode = _this._visibleLines.domNode;\n        _this._dynamicOverlays = [];\n        _this._isFocused = false;\n        _this.domNode.setClassName('view-overlays');\n        return _this;\n    }\n    ViewOverlays.prototype.shouldRender = function () {\n        if (_super.prototype.shouldRender.call(this)) {\n            return true;\n        }\n        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            var dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ViewOverlays.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            var dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    };\n    ViewOverlays.prototype.getDomNode = function () {\n        return this.domNode;\n    };\n    // ---- begin IVisibleLinesHost\n    ViewOverlays.prototype.createVisibleLine = function () {\n        return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n    };\n    // ---- end IVisibleLinesHost\n    ViewOverlays.prototype.addDynamicOverlay = function (overlay) {\n        this._dynamicOverlays.push(overlay);\n    };\n    // ----- event handlers\n    ViewOverlays.prototype.onConfigurationChanged = function (e) {\n        this._visibleLines.onConfigurationChanged(e);\n        var startLineNumber = this._visibleLines.getStartLineNumber();\n        var endLineNumber = this._visibleLines.getEndLineNumber();\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            var line = this._visibleLines.getVisibleLine(lineNumber);\n            line.onConfigurationChanged(e);\n        }\n        return true;\n    };\n    ViewOverlays.prototype.onFlushed = function (e) {\n        return this._visibleLines.onFlushed(e);\n    };\n    ViewOverlays.prototype.onFocusChanged = function (e) {\n        this._isFocused = e.isFocused;\n        return true;\n    };\n    ViewOverlays.prototype.onLinesChanged = function (e) {\n        return this._visibleLines.onLinesChanged(e);\n    };\n    ViewOverlays.prototype.onLinesDeleted = function (e) {\n        return this._visibleLines.onLinesDeleted(e);\n    };\n    ViewOverlays.prototype.onLinesInserted = function (e) {\n        return this._visibleLines.onLinesInserted(e);\n    };\n    ViewOverlays.prototype.onScrollChanged = function (e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    };\n    ViewOverlays.prototype.onTokensChanged = function (e) {\n        return this._visibleLines.onTokensChanged(e);\n    };\n    ViewOverlays.prototype.onZonesChanged = function (e) {\n        return this._visibleLines.onZonesChanged(e);\n    };\n    // ----- end event handlers\n    ViewOverlays.prototype.prepareRender = function (ctx) {\n        var toRender = this._dynamicOverlays.filter(function (overlay) { return overlay.shouldRender(); });\n        for (var i = 0, len = toRender.length; i < len; i++) {\n            var dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    };\n    ViewOverlays.prototype.render = function (ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    };\n    ViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    };\n    return ViewOverlays;\n}(viewPart_1.ViewPart));\nexports.ViewOverlays = ViewOverlays;\nvar ViewOverlayLine = /** @class */ (function () {\n    function ViewOverlayLine(configuration, dynamicOverlays) {\n        this._configuration = configuration;\n        this._lineHeight = this._configuration.editor.lineHeight;\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    ViewOverlayLine.prototype.getDomNode = function () {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    };\n    ViewOverlayLine.prototype.setDomNode = function (domNode) {\n        this._domNode = fastDomNode_1.createFastDomNode(domNode);\n    };\n    ViewOverlayLine.prototype.onContentChanged = function () {\n        // Nothing\n    };\n    ViewOverlayLine.prototype.onTokensChanged = function () {\n        // Nothing\n    };\n    ViewOverlayLine.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._lineHeight = this._configuration.editor.lineHeight;\n        }\n    };\n    ViewOverlayLine.prototype.renderLine = function (lineNumber, deltaTop, viewportData, sb) {\n        var result = '';\n        for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            var dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendASCIIString('<div style=\"position:absolute;top:');\n        sb.appendASCIIString(String(deltaTop));\n        sb.appendASCIIString('px;width:100%;height:');\n        sb.appendASCIIString(String(this._lineHeight));\n        sb.appendASCIIString('px;\">');\n        sb.appendASCIIString(result);\n        sb.appendASCIIString('</div>');\n        return true;\n    };\n    ViewOverlayLine.prototype.layoutLine = function (lineNumber, deltaTop) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(this._lineHeight);\n        }\n    };\n    return ViewOverlayLine;\n}());\nexports.ViewOverlayLine = ViewOverlayLine;\nvar ContentViewOverlays = /** @class */ (function (_super) {\n    tslib_1.__extends(ContentViewOverlays, _super);\n    function ContentViewOverlays(context) {\n        var _this = _super.call(this, context) || this;\n        _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;\n        _this.domNode.setHeight(0);\n        return _this;\n    }\n    // --- begin event handlers\n    ContentViewOverlays.prototype.onConfigurationChanged = function (e) {\n        if (e.layoutInfo) {\n            this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n        }\n        return _super.prototype.onConfigurationChanged.call(this, e);\n    };\n    ContentViewOverlays.prototype.onScrollChanged = function (e) {\n        return _super.prototype.onScrollChanged.call(this, e) || e.scrollWidthChanged;\n    };\n    // --- end event handlers\n    ContentViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n        _super.prototype._viewOverlaysRender.call(this, ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    };\n    return ContentViewOverlays;\n}(ViewOverlays));\nexports.ContentViewOverlays = ContentViewOverlays;\nvar MarginViewOverlays = /** @class */ (function (_super) {\n    tslib_1.__extends(MarginViewOverlays, _super);\n    function MarginViewOverlays(context) {\n        var _this = _super.call(this, context) || this;\n        _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;\n        _this.domNode.setClassName('margin-view-overlays');\n        _this.domNode.setWidth(1);\n        configuration_1.Configuration.applyFontInfo(_this.domNode, _this._context.configuration.editor.fontInfo);\n        return _this;\n    }\n    MarginViewOverlays.prototype.onConfigurationChanged = function (e) {\n        var shouldRender = false;\n        if (e.fontInfo) {\n            configuration_1.Configuration.applyFontInfo(this.domNode, this._context.configuration.editor.fontInfo);\n            shouldRender = true;\n        }\n        if (e.layoutInfo) {\n            this._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n            shouldRender = true;\n        }\n        return _super.prototype.onConfigurationChanged.call(this, e) || shouldRender;\n    };\n    MarginViewOverlays.prototype.onScrollChanged = function (e) {\n        return _super.prototype.onScrollChanged.call(this, e) || e.scrollHeightChanged;\n    };\n    MarginViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n        _super.prototype._viewOverlaysRender.call(this, ctx);\n        var height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    };\n    return MarginViewOverlays;\n}(ViewOverlays));\nexports.MarginViewOverlays = MarginViewOverlays;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewOverlays.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/view/viewOverlays.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { Configuration } from 'vs/editor/browser/config/configuration';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { IVisibleLine, IVisibleLinesHost, VisibleLinesCollection } from 'vs/editor/browser/view/viewLayer';\nimport { ViewPart } from 'vs/editor/browser/view/viewPart';\nimport { IStringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { IConfiguration } from 'vs/editor/common/editorCommon';\nimport { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { ViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\n\nexport class ViewOverlays extends ViewPart implements IVisibleLinesHost<ViewOverlayLine> {\n\n\tprivate readonly _visibleLines: VisibleLinesCollection<ViewOverlayLine>;\n\tprotected readonly domNode: FastDomNode<HTMLElement>;\n\tprivate _dynamicOverlays: DynamicViewOverlay[];\n\tprivate _isFocused: boolean;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._visibleLines = new VisibleLinesCollection<ViewOverlayLine>(this);\n\t\tthis.domNode = this._visibleLines.domNode;\n\n\t\tthis._dynamicOverlays = [];\n\t\tthis._isFocused = false;\n\n\t\tthis.domNode.setClassName('view-overlays');\n\t}\n\n\tpublic shouldRender(): boolean {\n\t\tif (super.shouldRender()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n\t\t\tconst dynamicOverlay = this._dynamicOverlays[i];\n\t\t\tif (dynamicOverlay.shouldRender()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n\t\t\tconst dynamicOverlay = this._dynamicOverlays[i];\n\t\t\tdynamicOverlay.dispose();\n\t\t}\n\t\tthis._dynamicOverlays = [];\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this.domNode;\n\t}\n\n\t// ---- begin IVisibleLinesHost\n\n\tpublic createVisibleLine(): ViewOverlayLine {\n\t\treturn new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n\t}\n\n\t// ---- end IVisibleLinesHost\n\n\tpublic addDynamicOverlay(overlay: DynamicViewOverlay): void {\n\t\tthis._dynamicOverlays.push(overlay);\n\t}\n\n\t// ----- event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tthis._visibleLines.onConfigurationChanged(e);\n\t\tconst startLineNumber = this._visibleLines.getStartLineNumber();\n\t\tconst endLineNumber = this._visibleLines.getEndLineNumber();\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst line = this._visibleLines.getVisibleLine(lineNumber);\n\t\t\tline.onConfigurationChanged(e);\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn this._visibleLines.onFlushed(e);\n\t}\n\tpublic onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\tthis._isFocused = e.isFocused;\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn this._visibleLines.onLinesChanged(e);\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn this._visibleLines.onLinesDeleted(e);\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn this._visibleLines.onLinesInserted(e);\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn this._visibleLines.onScrollChanged(e) || true;\n\t}\n\tpublic onTokensChanged(e: viewEvents.ViewTokensChangedEvent): boolean {\n\t\treturn this._visibleLines.onTokensChanged(e);\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn this._visibleLines.onZonesChanged(e);\n\t}\n\n\t// ----- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tconst toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n\n\t\tfor (let i = 0, len = toRender.length; i < len; i++) {\n\t\t\tconst dynamicOverlay = toRender[i];\n\t\t\tdynamicOverlay.prepareRender(ctx);\n\t\t\tdynamicOverlay.onDidRender();\n\t\t}\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\t// Overwriting to bypass `shouldRender` flag\n\t\tthis._viewOverlaysRender(ctx);\n\n\t\tthis.domNode.toggleClassName('focused', this._isFocused);\n\t}\n\n\t_viewOverlaysRender(ctx: RestrictedRenderingContext): void {\n\t\tthis._visibleLines.renderLines(ctx.viewportData);\n\t}\n}\n\nexport class ViewOverlayLine implements IVisibleLine {\n\n\tprivate readonly _configuration: IConfiguration;\n\tprivate readonly _dynamicOverlays: DynamicViewOverlay[];\n\tprivate _domNode: FastDomNode<HTMLElement> | null;\n\tprivate _renderedContent: string | null;\n\tprivate _lineHeight: number;\n\n\tconstructor(configuration: IConfiguration, dynamicOverlays: DynamicViewOverlay[]) {\n\t\tthis._configuration = configuration;\n\t\tthis._lineHeight = this._configuration.editor.lineHeight;\n\t\tthis._dynamicOverlays = dynamicOverlays;\n\n\t\tthis._domNode = null;\n\t\tthis._renderedContent = null;\n\t}\n\n\tpublic getDomNode(): HTMLElement | null {\n\t\tif (!this._domNode) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._domNode.domNode;\n\t}\n\tpublic setDomNode(domNode: HTMLElement): void {\n\t\tthis._domNode = createFastDomNode(domNode);\n\t}\n\n\tpublic onContentChanged(): void {\n\t\t// Nothing\n\t}\n\tpublic onTokensChanged(): void {\n\t\t// Nothing\n\t}\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): void {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this._configuration.editor.lineHeight;\n\t\t}\n\t}\n\n\tpublic renderLine(lineNumber: number, deltaTop: number, viewportData: ViewportData, sb: IStringBuilder): boolean {\n\t\tlet result = '';\n\t\tfor (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n\t\t\tconst dynamicOverlay = this._dynamicOverlays[i];\n\t\t\tresult += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n\t\t}\n\n\t\tif (this._renderedContent === result) {\n\t\t\t// No rendering needed\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._renderedContent = result;\n\n\t\tsb.appendASCIIString('<div style=\"position:absolute;top:');\n\t\tsb.appendASCIIString(String(deltaTop));\n\t\tsb.appendASCIIString('px;width:100%;height:');\n\t\tsb.appendASCIIString(String(this._lineHeight));\n\t\tsb.appendASCIIString('px;\">');\n\t\tsb.appendASCIIString(result);\n\t\tsb.appendASCIIString('</div>');\n\n\t\treturn true;\n\t}\n\n\tpublic layoutLine(lineNumber: number, deltaTop: number): void {\n\t\tif (this._domNode) {\n\t\t\tthis._domNode.setTop(deltaTop);\n\t\t\tthis._domNode.setHeight(this._lineHeight);\n\t\t}\n\t}\n}\n\nexport class ContentViewOverlays extends ViewOverlays {\n\n\tprivate _contentWidth: number;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n\n\t\tthis.domNode.setHeight(0);\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.layoutInfo) {\n\t\t\tthis._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n\t\t}\n\t\treturn super.onConfigurationChanged(e);\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn super.onScrollChanged(e) || e.scrollWidthChanged;\n\t}\n\n\t// --- end event handlers\n\n\t_viewOverlaysRender(ctx: RestrictedRenderingContext): void {\n\t\tsuper._viewOverlaysRender(ctx);\n\n\t\tthis.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n\t}\n}\n\nexport class MarginViewOverlays extends ViewOverlays {\n\n\tprivate _contentLeft: number;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\n\t\tthis._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n\n\t\tthis.domNode.setClassName('margin-view-overlays');\n\t\tthis.domNode.setWidth(1);\n\n\t\tConfiguration.applyFontInfo(this.domNode, this._context.configuration.editor.fontInfo);\n\t}\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tlet shouldRender = false;\n\t\tif (e.fontInfo) {\n\t\t\tConfiguration.applyFontInfo(this.domNode, this._context.configuration.editor.fontInfo);\n\t\t\tshouldRender = true;\n\t\t}\n\t\tif (e.layoutInfo) {\n\t\t\tthis._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n\t\t\tshouldRender = true;\n\t\t}\n\t\treturn super.onConfigurationChanged(e) || shouldRender;\n\t}\n\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn super.onScrollChanged(e) || e.scrollHeightChanged;\n\t}\n\n\t_viewOverlaysRender(ctx: RestrictedRenderingContext): void {\n\t\tsuper._viewOverlaysRender(ctx);\n\t\tconst height = Math.min(ctx.scrollHeight, 1000000);\n\t\tthis.domNode.setHeight(height);\n\t\tthis.domNode.setWidth(this._contentLeft);\n\t}\n}\n"]}]}