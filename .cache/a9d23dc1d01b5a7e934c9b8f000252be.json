{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar Viewport = /** @class */ (function () {\n    function Viewport(top, left, width, height) {\n        this.top = top | 0;\n        this.left = left | 0;\n        this.width = width | 0;\n        this.height = height | 0;\n    }\n    return Viewport;\n}());\nexports.Viewport = Viewport;\nvar MinimapLinesRenderingData = /** @class */ (function () {\n    function MinimapLinesRenderingData(tabSize, data) {\n        this.tabSize = tabSize;\n        this.data = data;\n    }\n    return MinimapLinesRenderingData;\n}());\nexports.MinimapLinesRenderingData = MinimapLinesRenderingData;\nvar ViewLineData = /** @class */ (function () {\n    function ViewLineData(content, continuesWithWrappedLine, minColumn, maxColumn, tokens) {\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.tokens = tokens;\n    }\n    return ViewLineData;\n}());\nexports.ViewLineData = ViewLineData;\nvar ViewLineRenderingData = /** @class */ (function () {\n    function ViewLineRenderingData(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize) {\n        this.minColumn = minColumn;\n        this.maxColumn = maxColumn;\n        this.content = content;\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n        this.tokens = tokens;\n        this.inlineDecorations = inlineDecorations;\n        this.tabSize = tabSize;\n    }\n    ViewLineRenderingData.isBasicASCII = function (lineContent, mightContainNonBasicASCII) {\n        if (mightContainNonBasicASCII) {\n            return strings.isBasicASCII(lineContent);\n        }\n        return true;\n    };\n    ViewLineRenderingData.containsRTL = function (lineContent, isBasicASCII, mightContainRTL) {\n        if (!isBasicASCII && mightContainRTL) {\n            return strings.containsRTL(lineContent);\n        }\n        return false;\n    };\n    return ViewLineRenderingData;\n}());\nexports.ViewLineRenderingData = ViewLineRenderingData;\nvar InlineDecorationType;\n(function (InlineDecorationType) {\n    InlineDecorationType[InlineDecorationType[\"Regular\"] = 0] = \"Regular\";\n    InlineDecorationType[InlineDecorationType[\"Before\"] = 1] = \"Before\";\n    InlineDecorationType[InlineDecorationType[\"After\"] = 2] = \"After\";\n    InlineDecorationType[InlineDecorationType[\"RegularAffectingLetterSpacing\"] = 3] = \"RegularAffectingLetterSpacing\";\n})(InlineDecorationType = exports.InlineDecorationType || (exports.InlineDecorationType = {}));\nvar InlineDecoration = /** @class */ (function () {\n    function InlineDecoration(range, inlineClassName, type) {\n        this.range = range;\n        this.inlineClassName = inlineClassName;\n        this.type = type;\n    }\n    return InlineDecoration;\n}());\nexports.InlineDecoration = InlineDecoration;\nvar ViewModelDecoration = /** @class */ (function () {\n    function ViewModelDecoration(range, options) {\n        this.range = range;\n        this.options = options;\n    }\n    return ViewModelDecoration;\n}());\nexports.ViewModelDecoration = ViewModelDecoration;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/viewModel/viewModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IScrollPosition, Scrollable } from 'vs/base/common/scrollable';\nimport * as strings from 'vs/base/common/strings';\nimport { IViewLineTokens } from 'vs/editor/common/core/lineTokens';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { INewScrollPosition } from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference, IActiveIndentGuideInfo, IModelDecorationOptions, TextModelResolvedOptions } from 'vs/editor/common/model';\nimport { IViewEventListener } from 'vs/editor/common/view/viewEvents';\nimport { IPartialViewLinesViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { IEditorWhitespace } from 'vs/editor/common/viewLayout/whitespaceComputer';\nimport { ITheme } from 'vs/platform/theme/common/themeService';\n\nexport interface IViewWhitespaceViewportData {\n\treadonly id: number;\n\treadonly afterLineNumber: number;\n\treadonly verticalOffset: number;\n\treadonly height: number;\n}\n\nexport class Viewport {\n\treadonly _viewportBrand: void;\n\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n\n\tconstructor(top: number, left: number, width: number, height: number) {\n\t\tthis.top = top | 0;\n\t\tthis.left = left | 0;\n\t\tthis.width = width | 0;\n\t\tthis.height = height | 0;\n\t}\n}\n\nexport interface IViewLayout {\n\n\treadonly scrollable: Scrollable;\n\n\tonMaxLineWidthChanged(width: number): void;\n\n\tgetScrollWidth(): number;\n\tgetScrollHeight(): number;\n\n\tgetCurrentScrollLeft(): number;\n\tgetCurrentScrollTop(): number;\n\tgetCurrentViewport(): Viewport;\n\n\tgetFutureViewport(): Viewport;\n\n\tvalidateScrollPosition(scrollPosition: INewScrollPosition): IScrollPosition;\n\tsetScrollPositionNow(position: INewScrollPosition): void;\n\tsetScrollPositionSmooth(position: INewScrollPosition): void;\n\tdeltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void;\n\n\tgetLinesViewportData(): IPartialViewLinesViewportData;\n\tgetLinesViewportDataAtScrollTop(scrollTop: number): IPartialViewLinesViewportData;\n\tgetWhitespaces(): IEditorWhitespace[];\n\n\tisAfterLines(verticalOffset: number): boolean;\n\tgetLineNumberAtVerticalOffset(verticalOffset: number): number;\n\tgetVerticalOffsetForLineNumber(lineNumber: number): number;\n\tgetWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null;\n\n\t// --------------- Begin vertical whitespace management\n\n\t/**\n\t * Reserve rendering space.\n\t * @return an identifier that can be later used to remove or change the whitespace.\n\t */\n\taddWhitespace(afterLineNumber: number, ordinal: number, height: number, minWidth: number): number;\n\t/**\n\t * Change the properties of a whitespace.\n\t */\n\tchangeWhitespace(id: number, newAfterLineNumber: number, newHeight: number): boolean;\n\t/**\n\t * Remove rendering space\n\t */\n\tremoveWhitespace(id: number): boolean;\n\t/**\n\t * Get the layout information for whitespaces currently in the viewport\n\t */\n\tgetWhitespaceViewportData(): IViewWhitespaceViewportData[];\n\n\t// TODO@Alex whitespace management should work via a change accessor sort of thing\n\tonHeightMaybeChanged(): void;\n\n\t// --------------- End vertical whitespace management\n}\n\nexport interface ICoordinatesConverter {\n\t// View -> Model conversion and related methods\n\tconvertViewPositionToModelPosition(viewPosition: Position): Position;\n\tconvertViewRangeToModelRange(viewRange: Range): Range;\n\tvalidateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position;\n\tvalidateViewRange(viewRange: Range, expectedModelRange: Range): Range;\n\n\t// Model -> View conversion and related methods\n\tconvertModelPositionToViewPosition(modelPosition: Position): Position;\n\tconvertModelRangeToViewRange(modelRange: Range): Range;\n\tmodelPositionIsVisible(modelPosition: Position): boolean;\n}\n\nexport interface IViewModel {\n\n\taddEventListener(listener: IViewEventListener): IDisposable;\n\n\treadonly coordinatesConverter: ICoordinatesConverter;\n\n\treadonly viewLayout: IViewLayout;\n\n\t/**\n\t * Gives a hint that a lot of requests are about to come in for these line numbers.\n\t */\n\tsetViewport(startLineNumber: number, endLineNumber: number, centeredLineNumber: number): void;\n\ttokenizeViewport(): void;\n\tsetHasFocus(hasFocus: boolean): void;\n\n\tgetDecorationsInViewport(visibleRange: Range): ViewModelDecoration[];\n\tgetViewLineRenderingData(visibleRange: Range, lineNumber: number): ViewLineRenderingData;\n\tgetViewLineData(lineNumber: number): ViewLineData;\n\tgetMinimapLinesRenderingData(startLineNumber: number, endLineNumber: number, needed: boolean[]): MinimapLinesRenderingData;\n\tgetCompletelyVisibleViewRange(): Range;\n\tgetCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range;\n\n\tgetOptions(): TextModelResolvedOptions;\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetActiveIndentGuide(lineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetLinesIndentGuides(startLineNumber: number, endLineNumber: number): number[];\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tgetAllOverviewRulerDecorations(theme: ITheme): IOverviewRulerDecorations;\n\tinvalidateOverviewRulerColorCache(): void;\n\tgetValueInRange(range: Range, eol: EndOfLinePreference): string;\n\n\tgetModelLineMaxColumn(modelLineNumber: number): number;\n\tvalidateModelPosition(modelPosition: IPosition): Position;\n\tvalidateModelRange(range: IRange): Range;\n\n\tdeduceModelPositionRelativeToViewPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n\tgetEOL(): string;\n\tgetPlainTextToCopy(ranges: Range[], emptySelectionClipboard: boolean, forceCRLF: boolean): string | string[];\n\tgetHTMLToCopy(ranges: Range[], emptySelectionClipboard: boolean): string | null;\n}\n\nexport class MinimapLinesRenderingData {\n\tpublic readonly tabSize: number;\n\tpublic readonly data: Array<ViewLineData | null>;\n\n\tconstructor(\n\t\ttabSize: number,\n\t\tdata: Array<ViewLineData | null>\n\t) {\n\t\tthis.tabSize = tabSize;\n\t\tthis.data = data;\n\t}\n}\n\nexport class ViewLineData {\n\t_viewLineDataBrand: void;\n\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\n\tconstructor(\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\ttokens: IViewLineTokens\n\t) {\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.tokens = tokens;\n\t}\n}\n\nexport class ViewLineRenderingData {\n\t/**\n\t * The minimum allowed column at this view line.\n\t */\n\tpublic readonly minColumn: number;\n\t/**\n\t * The maximum allowed column at this view line.\n\t */\n\tpublic readonly maxColumn: number;\n\t/**\n\t * The content at this view line.\n\t */\n\tpublic readonly content: string;\n\t/**\n\t * Does this line continue with a wrapped line?\n\t */\n\tpublic readonly continuesWithWrappedLine: boolean;\n\t/**\n\t * Describes if `content` contains RTL characters.\n\t */\n\tpublic readonly containsRTL: boolean;\n\t/**\n\t * Describes if `content` contains non basic ASCII chars.\n\t */\n\tpublic readonly isBasicASCII: boolean;\n\t/**\n\t * The tokens at this view line.\n\t */\n\tpublic readonly tokens: IViewLineTokens;\n\t/**\n\t * Inline decorations at this view line.\n\t */\n\tpublic readonly inlineDecorations: InlineDecoration[];\n\t/**\n\t * The tab size for this view model.\n\t */\n\tpublic readonly tabSize: number;\n\n\tconstructor(\n\t\tminColumn: number,\n\t\tmaxColumn: number,\n\t\tcontent: string,\n\t\tcontinuesWithWrappedLine: boolean,\n\t\tmightContainRTL: boolean,\n\t\tmightContainNonBasicASCII: boolean,\n\t\ttokens: IViewLineTokens,\n\t\tinlineDecorations: InlineDecoration[],\n\t\ttabSize: number\n\t) {\n\t\tthis.minColumn = minColumn;\n\t\tthis.maxColumn = maxColumn;\n\t\tthis.content = content;\n\t\tthis.continuesWithWrappedLine = continuesWithWrappedLine;\n\n\t\tthis.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\n\t\tthis.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\n\n\t\tthis.tokens = tokens;\n\t\tthis.inlineDecorations = inlineDecorations;\n\t\tthis.tabSize = tabSize;\n\t}\n\n\tpublic static isBasicASCII(lineContent: string, mightContainNonBasicASCII: boolean): boolean {\n\t\tif (mightContainNonBasicASCII) {\n\t\t\treturn strings.isBasicASCII(lineContent);\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic static containsRTL(lineContent: string, isBasicASCII: boolean, mightContainRTL: boolean): boolean {\n\t\tif (!isBasicASCII && mightContainRTL) {\n\t\t\treturn strings.containsRTL(lineContent);\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport const enum InlineDecorationType {\n\tRegular = 0,\n\tBefore = 1,\n\tAfter = 2,\n\tRegularAffectingLetterSpacing = 3\n}\n\nexport class InlineDecoration {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly inlineClassName: string,\n\t\tpublic readonly type: InlineDecorationType\n\t) {\n\t}\n}\n\nexport class ViewModelDecoration {\n\t_viewModelDecorationBrand: void;\n\n\tpublic readonly range: Range;\n\tpublic readonly options: IModelDecorationOptions;\n\n\tconstructor(range: Range, options: IModelDecorationOptions) {\n\t\tthis.range = range;\n\t\tthis.options = options;\n\t}\n}\n\n/**\n * Decorations are encoded in a number array using the following scheme:\n *  - 3*i = lane\n *  - 3*i+1 = startLineNumber\n *  - 3*i+2 = endLineNumber\n */\nexport interface IOverviewRulerDecorations {\n\t[color: string]: number[];\n}\n"]}]}