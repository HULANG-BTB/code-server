{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTerminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTerminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar stopwatch_1 = require(\"vs/base/common/stopwatch\");\nvar MainThreadTerminalService = /** @class */ (function () {\n    function MainThreadTerminalService(extHostContext, terminalService) {\n        var _this = this;\n        this.terminalService = terminalService;\n        this._toDispose = [];\n        this._terminalProcesses = {};\n        this._terminalOnDidWriteDataListeners = {};\n        this._terminalOnDidAcceptInputListeners = {};\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostTerminalService);\n        this._remoteAuthority = extHostContext.remoteAuthority;\n        this._toDispose.push(terminalService.onInstanceCreated(function (instance) {\n            // Delay this message so the TerminalInstance constructor has a chance to finish and\n            // return the ID normally to the extension host. The ID that is passed here will be used\n            // to register non-extension API terminals in the extension host.\n            setTimeout(function () {\n                _this._onTerminalOpened(instance);\n                _this._onInstanceDimensionsChanged(instance);\n            }, terminal_1.EXT_HOST_CREATION_DELAY);\n        }));\n        this._toDispose.push(terminalService.onInstanceDisposed(function (instance) { return _this._onTerminalDisposed(instance); }));\n        this._toDispose.push(terminalService.onInstanceProcessIdReady(function (instance) { return _this._onTerminalProcessIdReady(instance); }));\n        this._toDispose.push(terminalService.onInstanceDimensionsChanged(function (instance) { return _this._onInstanceDimensionsChanged(instance); }));\n        this._toDispose.push(terminalService.onInstanceRequestExtHostProcess(function (request) { return _this._onTerminalRequestExtHostProcess(request); }));\n        this._toDispose.push(terminalService.onActiveInstanceChanged(function (instance) { return _this._onActiveTerminalChanged(instance ? instance.id : null); }));\n        this._toDispose.push(terminalService.onInstanceTitleChanged(function (instance) { return _this._onTitleChanged(instance.id, instance.title); }));\n        // Set initial ext host state\n        this.terminalService.terminalInstances.forEach(function (t) {\n            _this._onTerminalOpened(t);\n            t.processReady.then(function () { return _this._onTerminalProcessIdReady(t); });\n        });\n        var activeInstance = this.terminalService.getActiveInstance();\n        if (activeInstance) {\n            this._proxy.$acceptActiveTerminalChanged(activeInstance.id);\n        }\n    }\n    MainThreadTerminalService.prototype.dispose = function () {\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n        // TODO@Daniel: Should all the previously created terminals be disposed\n        // when the extension host process goes down ?\n    };\n    MainThreadTerminalService.prototype.$createTerminal = function (name, shellPath, shellArgs, cwd, env, waitOnExit, strictEnv) {\n        var shellLaunchConfig = {\n            name: name,\n            executable: shellPath,\n            args: shellArgs,\n            cwd: typeof cwd === 'string' ? cwd : uri_1.URI.revive(cwd),\n            waitOnExit: waitOnExit,\n            ignoreConfigurationCwd: true,\n            env: env,\n            strictEnv: strictEnv\n        };\n        var terminal = this.terminalService.createTerminal(shellLaunchConfig);\n        return Promise.resolve({\n            id: terminal.id,\n            name: terminal.title\n        });\n    };\n    MainThreadTerminalService.prototype.$createTerminalRenderer = function (name) {\n        var instance = this.terminalService.createTerminalRenderer(name);\n        return Promise.resolve(instance.id);\n    };\n    MainThreadTerminalService.prototype.$show = function (terminalId, preserveFocus) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance) {\n            this.terminalService.setActiveInstance(terminalInstance);\n            this.terminalService.showPanel(!preserveFocus);\n        }\n    };\n    MainThreadTerminalService.prototype.$hide = function (terminalId) {\n        var instance = this.terminalService.getActiveInstance();\n        if (instance && instance.id === terminalId) {\n            this.terminalService.hidePanel();\n        }\n    };\n    MainThreadTerminalService.prototype.$dispose = function (terminalId) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance) {\n            terminalInstance.dispose();\n        }\n    };\n    MainThreadTerminalService.prototype.$terminalRendererWrite = function (terminalId, text) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n            terminalInstance.write(text);\n        }\n    };\n    MainThreadTerminalService.prototype.$terminalRendererSetName = function (terminalId, name) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n            terminalInstance.setTitle(name, false);\n        }\n    };\n    MainThreadTerminalService.prototype.$terminalRendererSetDimensions = function (terminalId, dimensions) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n            terminalInstance.setDimensions(dimensions);\n        }\n    };\n    MainThreadTerminalService.prototype.$terminalRendererRegisterOnInputListener = function (terminalId) {\n        var _this = this;\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (!terminalInstance) {\n            return;\n        }\n        // Listener already registered\n        if (this._terminalOnDidAcceptInputListeners.hasOwnProperty(terminalId)) {\n            return;\n        }\n        // Register\n        this._terminalOnDidAcceptInputListeners[terminalId] = terminalInstance.onRendererInput(function (data) { return _this._onTerminalRendererInput(terminalId, data); });\n        terminalInstance.addDisposable(this._terminalOnDidAcceptInputListeners[terminalId]);\n    };\n    MainThreadTerminalService.prototype.$sendText = function (terminalId, text, addNewLine) {\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (terminalInstance) {\n            terminalInstance.sendText(text, addNewLine);\n        }\n    };\n    MainThreadTerminalService.prototype.$registerOnDataListener = function (terminalId) {\n        var _this = this;\n        var terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n        if (!terminalInstance) {\n            return;\n        }\n        // Listener already registered\n        if (this._terminalOnDidWriteDataListeners[terminalId]) {\n            return;\n        }\n        // Register\n        this._terminalOnDidWriteDataListeners[terminalId] = terminalInstance.onData(function (data) {\n            _this._onTerminalData(terminalId, data);\n        });\n        terminalInstance.addDisposable(this._terminalOnDidWriteDataListeners[terminalId]);\n    };\n    MainThreadTerminalService.prototype._onActiveTerminalChanged = function (terminalId) {\n        this._proxy.$acceptActiveTerminalChanged(terminalId);\n    };\n    MainThreadTerminalService.prototype._onTerminalData = function (terminalId, data) {\n        this._proxy.$acceptTerminalProcessData(terminalId, data);\n    };\n    MainThreadTerminalService.prototype._onTitleChanged = function (terminalId, name) {\n        this._proxy.$acceptTerminalTitleChange(terminalId, name);\n    };\n    MainThreadTerminalService.prototype._onTerminalRendererInput = function (terminalId, data) {\n        this._proxy.$acceptTerminalRendererInput(terminalId, data);\n    };\n    MainThreadTerminalService.prototype._onTerminalDisposed = function (terminalInstance) {\n        this._proxy.$acceptTerminalClosed(terminalInstance.id);\n    };\n    MainThreadTerminalService.prototype._onTerminalOpened = function (terminalInstance) {\n        var _this = this;\n        if (terminalInstance.title) {\n            this._proxy.$acceptTerminalOpened(terminalInstance.id, terminalInstance.title);\n        }\n        else {\n            terminalInstance.waitForTitle().then(function (title) {\n                _this._proxy.$acceptTerminalOpened(terminalInstance.id, title);\n            });\n        }\n    };\n    MainThreadTerminalService.prototype._onTerminalProcessIdReady = function (terminalInstance) {\n        if (terminalInstance.processId === undefined) {\n            return;\n        }\n        this._proxy.$acceptTerminalProcessId(terminalInstance.id, terminalInstance.processId);\n    };\n    MainThreadTerminalService.prototype._onInstanceDimensionsChanged = function (instance) {\n        this._proxy.$acceptTerminalDimensions(instance.id, instance.cols, instance.rows);\n    };\n    MainThreadTerminalService.prototype._onTerminalRequestExtHostProcess = function (request) {\n        var _this = this;\n        // Only allow processes on remote ext hosts\n        if (!this._remoteAuthority) {\n            return;\n        }\n        this._terminalProcesses[request.proxy.terminalId] = request.proxy;\n        var shellLaunchConfigDto = {\n            name: request.shellLaunchConfig.name,\n            executable: request.shellLaunchConfig.executable,\n            args: request.shellLaunchConfig.args,\n            cwd: request.shellLaunchConfig.cwd,\n            env: request.shellLaunchConfig.env\n        };\n        this._proxy.$createProcess(request.proxy.terminalId, shellLaunchConfigDto, request.activeWorkspaceRootUri, request.cols, request.rows);\n        request.proxy.onInput(function (data) { return _this._proxy.$acceptProcessInput(request.proxy.terminalId, data); });\n        request.proxy.onResize(function (dimensions) { return _this._proxy.$acceptProcessResize(request.proxy.terminalId, dimensions.cols, dimensions.rows); });\n        request.proxy.onShutdown(function (immediate) { return _this._proxy.$acceptProcessShutdown(request.proxy.terminalId, immediate); });\n        request.proxy.onRequestCwd(function () { return _this._proxy.$acceptProcessRequestCwd(request.proxy.terminalId); });\n        request.proxy.onRequestInitialCwd(function () { return _this._proxy.$acceptProcessRequestInitialCwd(request.proxy.terminalId); });\n        request.proxy.onRequestLatency(function () { return _this._onRequestLatency(request.proxy.terminalId); });\n    };\n    MainThreadTerminalService.prototype.$sendProcessTitle = function (terminalId, title) {\n        this._terminalProcesses[terminalId].emitTitle(title);\n    };\n    MainThreadTerminalService.prototype.$sendProcessData = function (terminalId, data) {\n        this._terminalProcesses[terminalId].emitData(data);\n    };\n    MainThreadTerminalService.prototype.$sendProcessPid = function (terminalId, pid) {\n        this._terminalProcesses[terminalId].emitPid(pid);\n    };\n    MainThreadTerminalService.prototype.$sendProcessExit = function (terminalId, exitCode) {\n        this._terminalProcesses[terminalId].emitExit(exitCode);\n        delete this._terminalProcesses[terminalId];\n    };\n    MainThreadTerminalService.prototype.$sendProcessInitialCwd = function (terminalId, initialCwd) {\n        this._terminalProcesses[terminalId].emitInitialCwd(initialCwd);\n    };\n    MainThreadTerminalService.prototype.$sendProcessCwd = function (terminalId, cwd) {\n        this._terminalProcesses[terminalId].emitCwd(cwd);\n    };\n    MainThreadTerminalService.prototype._onRequestLatency = function (terminalId) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var COUNT, sum, i, sw;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        COUNT = 2;\n                        sum = 0;\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < COUNT)) return [3 /*break*/, 4];\n                        sw = stopwatch_1.StopWatch.create(true);\n                        return [4 /*yield*/, this._proxy.$acceptProcessRequestLatency(terminalId)];\n                    case 2:\n                        _a.sent();\n                        sw.stop();\n                        sum += sw.elapsed();\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        this._terminalProcesses[terminalId].emitLatency(sum / COUNT);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MainThreadTerminalService = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadTerminalService),\n        tslib_1.__param(1, terminal_1.ITerminalService)\n    ], MainThreadTerminalService);\n    return MainThreadTerminalService;\n}());\nexports.MainThreadTerminalService = MainThreadTerminalService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTerminalService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTerminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ITerminalService, ITerminalInstance, IShellLaunchConfig, ITerminalProcessExtHostProxy, ITerminalProcessExtHostRequest, ITerminalDimensions, EXT_HOST_CREATION_DELAY } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ExtHostContext, ExtHostTerminalServiceShape, MainThreadTerminalServiceShape, MainContext, IExtHostContext, ShellLaunchConfigDto } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { StopWatch } from 'vs/base/common/stopwatch';\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalService)\nexport class MainThreadTerminalService implements MainThreadTerminalServiceShape {\n\n\tprivate _proxy: ExtHostTerminalServiceShape;\n\tprivate _remoteAuthority: string | null;\n\tprivate _toDispose: IDisposable[] = [];\n\tprivate _terminalProcesses: { [id: number]: ITerminalProcessExtHostProxy } = {};\n\tprivate _terminalOnDidWriteDataListeners: { [id: number]: IDisposable } = {};\n\tprivate _terminalOnDidAcceptInputListeners: { [id: number]: IDisposable } = {};\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly terminalService: ITerminalService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTerminalService);\n\t\tthis._remoteAuthority = extHostContext.remoteAuthority;\n\t\tthis._toDispose.push(terminalService.onInstanceCreated((instance) => {\n\t\t\t// Delay this message so the TerminalInstance constructor has a chance to finish and\n\t\t\t// return the ID normally to the extension host. The ID that is passed here will be used\n\t\t\t// to register non-extension API terminals in the extension host.\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._onTerminalOpened(instance);\n\t\t\t\tthis._onInstanceDimensionsChanged(instance);\n\t\t\t}, EXT_HOST_CREATION_DELAY);\n\t\t}));\n\t\tthis._toDispose.push(terminalService.onInstanceDisposed(instance => this._onTerminalDisposed(instance)));\n\t\tthis._toDispose.push(terminalService.onInstanceProcessIdReady(instance => this._onTerminalProcessIdReady(instance)));\n\t\tthis._toDispose.push(terminalService.onInstanceDimensionsChanged(instance => this._onInstanceDimensionsChanged(instance)));\n\t\tthis._toDispose.push(terminalService.onInstanceRequestExtHostProcess(request => this._onTerminalRequestExtHostProcess(request)));\n\t\tthis._toDispose.push(terminalService.onActiveInstanceChanged(instance => this._onActiveTerminalChanged(instance ? instance.id : null)));\n\t\tthis._toDispose.push(terminalService.onInstanceTitleChanged(instance => this._onTitleChanged(instance.id, instance.title)));\n\n\t\t// Set initial ext host state\n\t\tthis.terminalService.terminalInstances.forEach(t => {\n\t\t\tthis._onTerminalOpened(t);\n\t\t\tt.processReady.then(() => this._onTerminalProcessIdReady(t));\n\t\t});\n\t\tconst activeInstance = this.terminalService.getActiveInstance();\n\t\tif (activeInstance) {\n\t\t\tthis._proxy.$acceptActiveTerminalChanged(activeInstance.id);\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose = dispose(this._toDispose);\n\n\t\t// TODO@Daniel: Should all the previously created terminals be disposed\n\t\t// when the extension host process goes down ?\n\t}\n\n\tpublic $createTerminal(name?: string, shellPath?: string, shellArgs?: string[] | string, cwd?: string | UriComponents, env?: { [key: string]: string }, waitOnExit?: boolean, strictEnv?: boolean): Promise<{ id: number, name: string }> {\n\t\tconst shellLaunchConfig: IShellLaunchConfig = {\n\t\t\tname,\n\t\t\texecutable: shellPath,\n\t\t\targs: shellArgs,\n\t\t\tcwd: typeof cwd === 'string' ? cwd : URI.revive(cwd),\n\t\t\twaitOnExit,\n\t\t\tignoreConfigurationCwd: true,\n\t\t\tenv,\n\t\t\tstrictEnv\n\t\t};\n\t\tconst terminal = this.terminalService.createTerminal(shellLaunchConfig);\n\t\treturn Promise.resolve({\n\t\t\tid: terminal.id,\n\t\t\tname: terminal.title\n\t\t});\n\t}\n\n\tpublic $createTerminalRenderer(name: string): Promise<number> {\n\t\tconst instance = this.terminalService.createTerminalRenderer(name);\n\t\treturn Promise.resolve(instance.id);\n\t}\n\n\tpublic $show(terminalId: number, preserveFocus: boolean): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance) {\n\t\t\tthis.terminalService.setActiveInstance(terminalInstance);\n\t\t\tthis.terminalService.showPanel(!preserveFocus);\n\t\t}\n\t}\n\n\tpublic $hide(terminalId: number): void {\n\t\tconst instance = this.terminalService.getActiveInstance();\n\t\tif (instance && instance.id === terminalId) {\n\t\t\tthis.terminalService.hidePanel();\n\t\t}\n\t}\n\n\tpublic $dispose(terminalId: number): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.dispose();\n\t\t}\n\t}\n\n\tpublic $terminalRendererWrite(terminalId: number, text: string): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n\t\t\tterminalInstance.write(text);\n\t\t}\n\t}\n\n\tpublic $terminalRendererSetName(terminalId: number, name: string): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n\t\t\tterminalInstance.setTitle(name, false);\n\t\t}\n\t}\n\n\tpublic $terminalRendererSetDimensions(terminalId: number, dimensions: ITerminalDimensions): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance && terminalInstance.shellLaunchConfig.isRendererOnly) {\n\t\t\tterminalInstance.setDimensions(dimensions);\n\t\t}\n\t}\n\n\tpublic $terminalRendererRegisterOnInputListener(terminalId: number): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (!terminalInstance) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Listener already registered\n\t\tif (this._terminalOnDidAcceptInputListeners.hasOwnProperty(terminalId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Register\n\t\tthis._terminalOnDidAcceptInputListeners[terminalId] = terminalInstance.onRendererInput(data => this._onTerminalRendererInput(terminalId, data));\n\t\tterminalInstance.addDisposable(this._terminalOnDidAcceptInputListeners[terminalId]);\n\t}\n\n\tpublic $sendText(terminalId: number, text: string, addNewLine: boolean): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (terminalInstance) {\n\t\t\tterminalInstance.sendText(text, addNewLine);\n\t\t}\n\t}\n\n\tpublic $registerOnDataListener(terminalId: number): void {\n\t\tconst terminalInstance = this.terminalService.getInstanceFromId(terminalId);\n\t\tif (!terminalInstance) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Listener already registered\n\t\tif (this._terminalOnDidWriteDataListeners[terminalId]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Register\n\t\tthis._terminalOnDidWriteDataListeners[terminalId] = terminalInstance.onData(data => {\n\t\t\tthis._onTerminalData(terminalId, data);\n\t\t});\n\t\tterminalInstance.addDisposable(this._terminalOnDidWriteDataListeners[terminalId]);\n\t}\n\n\tprivate _onActiveTerminalChanged(terminalId: number | null): void {\n\t\tthis._proxy.$acceptActiveTerminalChanged(terminalId);\n\t}\n\n\tprivate _onTerminalData(terminalId: number, data: string): void {\n\t\tthis._proxy.$acceptTerminalProcessData(terminalId, data);\n\t}\n\n\tprivate _onTitleChanged(terminalId: number, name: string): void {\n\t\tthis._proxy.$acceptTerminalTitleChange(terminalId, name);\n\t}\n\n\tprivate _onTerminalRendererInput(terminalId: number, data: string): void {\n\t\tthis._proxy.$acceptTerminalRendererInput(terminalId, data);\n\t}\n\n\tprivate _onTerminalDisposed(terminalInstance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalClosed(terminalInstance.id);\n\t}\n\n\tprivate _onTerminalOpened(terminalInstance: ITerminalInstance): void {\n\t\tif (terminalInstance.title) {\n\t\t\tthis._proxy.$acceptTerminalOpened(terminalInstance.id, terminalInstance.title);\n\t\t} else {\n\t\t\tterminalInstance.waitForTitle().then(title => {\n\t\t\t\tthis._proxy.$acceptTerminalOpened(terminalInstance.id, title);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onTerminalProcessIdReady(terminalInstance: ITerminalInstance): void {\n\t\tif (terminalInstance.processId === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.$acceptTerminalProcessId(terminalInstance.id, terminalInstance.processId);\n\t}\n\n\tprivate _onInstanceDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalDimensions(instance.id, instance.cols, instance.rows);\n\t}\n\n\tprivate _onTerminalRequestExtHostProcess(request: ITerminalProcessExtHostRequest): void {\n\t\t// Only allow processes on remote ext hosts\n\t\tif (!this._remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._terminalProcesses[request.proxy.terminalId] = request.proxy;\n\t\tconst shellLaunchConfigDto: ShellLaunchConfigDto = {\n\t\t\tname: request.shellLaunchConfig.name,\n\t\t\texecutable: request.shellLaunchConfig.executable,\n\t\t\targs: request.shellLaunchConfig.args,\n\t\t\tcwd: request.shellLaunchConfig.cwd,\n\t\t\tenv: request.shellLaunchConfig.env\n\t\t};\n\t\tthis._proxy.$createProcess(request.proxy.terminalId, shellLaunchConfigDto, request.activeWorkspaceRootUri, request.cols, request.rows);\n\t\trequest.proxy.onInput(data => this._proxy.$acceptProcessInput(request.proxy.terminalId, data));\n\t\trequest.proxy.onResize(dimensions => this._proxy.$acceptProcessResize(request.proxy.terminalId, dimensions.cols, dimensions.rows));\n\t\trequest.proxy.onShutdown(immediate => this._proxy.$acceptProcessShutdown(request.proxy.terminalId, immediate));\n\t\trequest.proxy.onRequestCwd(() => this._proxy.$acceptProcessRequestCwd(request.proxy.terminalId));\n\t\trequest.proxy.onRequestInitialCwd(() => this._proxy.$acceptProcessRequestInitialCwd(request.proxy.terminalId));\n\t\trequest.proxy.onRequestLatency(() => this._onRequestLatency(request.proxy.terminalId));\n\t}\n\n\tpublic $sendProcessTitle(terminalId: number, title: string): void {\n\t\tthis._terminalProcesses[terminalId].emitTitle(title);\n\t}\n\n\tpublic $sendProcessData(terminalId: number, data: string): void {\n\t\tthis._terminalProcesses[terminalId].emitData(data);\n\t}\n\n\tpublic $sendProcessPid(terminalId: number, pid: number): void {\n\t\tthis._terminalProcesses[terminalId].emitPid(pid);\n\t}\n\n\tpublic $sendProcessExit(terminalId: number, exitCode: number): void {\n\t\tthis._terminalProcesses[terminalId].emitExit(exitCode);\n\t\tdelete this._terminalProcesses[terminalId];\n\t}\n\n\tpublic $sendProcessInitialCwd(terminalId: number, initialCwd: string): void {\n\t\tthis._terminalProcesses[terminalId].emitInitialCwd(initialCwd);\n\t}\n\n\tpublic $sendProcessCwd(terminalId: number, cwd: string): void {\n\t\tthis._terminalProcesses[terminalId].emitCwd(cwd);\n\t}\n\n\tprivate async _onRequestLatency(terminalId: number): Promise<void> {\n\t\tconst COUNT = 2;\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < COUNT; i++) {\n\t\t\tconst sw = StopWatch.create(true);\n\t\t\tawait this._proxy.$acceptProcessRequestLatency(terminalId);\n\t\t\tsw.stop();\n\t\t\tsum += sw.elapsed();\n\t\t}\n\t\tthis._terminalProcesses[terminalId].emitLatency(sum / COUNT);\n\t}\n}\n"]}]}