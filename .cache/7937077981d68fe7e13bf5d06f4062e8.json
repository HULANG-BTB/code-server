{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/common/memento\", \"vs/workbench/common/theme\"], function (require, exports, memento_1, theme_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Component extends theme_1.Themable {\n        constructor(id, themeService, storageService) {\n            super(themeService);\n            this.id = id;\n            this.id = id;\n            this.memento = new memento_1.Memento(this.id, storageService);\n            this._register(storageService.onWillSaveState(() => {\n                // Ask the component to persist state into the memento\n                this.saveState();\n                // Then save the memento into storage\n                this.memento.saveMemento();\n            }));\n        }\n        getId() {\n            return this.id;\n        }\n        getMemento(scope) {\n            return this.memento.getMemento(scope);\n        }\n        saveState() {\n            // Subclasses to implement for storing state\n        }\n    }\n    exports.Component = Component;\n});\n",null]}