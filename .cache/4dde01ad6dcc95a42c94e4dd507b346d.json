{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar ipc_1 = require(\"vs/base/parts/ipc/common/ipc\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar remoteAgentConnection_1 = require(\"vs/platform/remote/common/remoteAgentConnection\");\nvar remoteAgentService_1 = require(\"vs/workbench/services/remote/common/remoteAgentService\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar remoteAgentEnvironmentChannel_1 = require(\"vs/workbench/services/remote/common/remoteAgentEnvironmentChannel\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar AbstractRemoteAgentService = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractRemoteAgentService, _super);\n    function AbstractRemoteAgentService(_environmentService) {\n        var _this = _super.call(this) || this;\n        _this._environmentService = _environmentService;\n        return _this;\n    }\n    AbstractRemoteAgentService.prototype.getEnvironment = function (bail) {\n        if (!this._environment) {\n            var connection = this.getConnection();\n            if (connection) {\n                var client = new remoteAgentEnvironmentChannel_1.RemoteExtensionEnvironmentChannelClient(connection.getChannel('remoteextensionsenvironment'));\n                this._environment = client.getEnvironmentData(connection.remoteAuthority, this._environmentService.extensionDevelopmentLocationURI);\n            }\n            else {\n                this._environment = Promise.resolve(null);\n            }\n        }\n        return bail ? this._environment : this._environment.then(undefined, function () { return null; });\n    };\n    AbstractRemoteAgentService = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService)\n    ], AbstractRemoteAgentService);\n    return AbstractRemoteAgentService;\n}(lifecycle_1.Disposable));\nexports.AbstractRemoteAgentService = AbstractRemoteAgentService;\nvar RemoteAgentConnection = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoteAgentConnection, _super);\n    function RemoteAgentConnection(remoteAuthority, _commit, _webSocketFactory, _environmentService, _remoteAuthorityResolverService) {\n        var _this = _super.call(this) || this;\n        _this._commit = _commit;\n        _this._webSocketFactory = _webSocketFactory;\n        _this._environmentService = _environmentService;\n        _this._remoteAuthorityResolverService = _remoteAuthorityResolverService;\n        _this.remoteAuthority = remoteAuthority;\n        _this._connection = null;\n        return _this;\n    }\n    RemoteAgentConnection.prototype.getChannel = function (channelName) {\n        return ipc_1.getDelayedChannel(this._getOrCreateConnection().then(function (c) { return c.getChannel(channelName); }));\n    };\n    RemoteAgentConnection.prototype.registerChannel = function (channelName, channel) {\n        this._getOrCreateConnection().then(function (client) { return client.registerChannel(channelName, channel); });\n    };\n    RemoteAgentConnection.prototype._getOrCreateConnection = function () {\n        if (!this._connection) {\n            this._connection = this._createConnection();\n        }\n        return this._connection;\n    };\n    RemoteAgentConnection.prototype._createConnection = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var options, connection;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = {\n                            isBuilt: this._environmentService.isBuilt,\n                            commit: this._commit,\n                            webSocketFactory: this._webSocketFactory,\n                            addressProvider: {\n                                getAddress: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                    var _a, host, port;\n                                    return tslib_1.__generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0: return [4 /*yield*/, this._remoteAuthorityResolverService.resolveAuthority(this.remoteAuthority)];\n                                            case 1:\n                                                _a = _b.sent(), host = _a.host, port = _a.port;\n                                                return [2 /*return*/, { host: host, port: port }];\n                                        }\n                                    });\n                                }); }\n                            }\n                        };\n                        return [4 /*yield*/, remoteAgentConnection_1.connectRemoteAgentManagement(options, this.remoteAuthority, \"renderer\")];\n                    case 1:\n                        connection = _a.sent();\n                        this._register(connection);\n                        return [2 /*return*/, connection.client];\n                }\n            });\n        });\n    };\n    return RemoteAgentConnection;\n}(lifecycle_1.Disposable));\nexports.RemoteAgentConnection = RemoteAgentConnection;\nvar RemoteConnectionFailureNotificationContribution = /** @class */ (function () {\n    function RemoteConnectionFailureNotificationContribution(remoteAgentService, notificationService) {\n        // Let's cover the case where connecting to fetch the remote extension info fails\n        remoteAgentService.getEnvironment(true)\n            .then(undefined, function (err) { return notificationService.error(nls.localize('connectionError', \"Failed to connect to the remote extension host agent (Error: {0})\", err ? err.message : '')); });\n    }\n    RemoteConnectionFailureNotificationContribution = tslib_1.__decorate([\n        tslib_1.__param(0, remoteAgentService_1.IRemoteAgentService),\n        tslib_1.__param(1, notification_1.INotificationService)\n    ], RemoteConnectionFailureNotificationContribution);\n    return RemoteConnectionFailureNotificationContribution;\n}());\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, lifecycle_2.LifecyclePhase.Ready);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IChannel, IServerChannel, getDelayedChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/common/ipc.net';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { connectRemoteAgentManagement, IConnectionOptions, IWebSocketFactory } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteAgentConnection, IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { RemoteAgentConnectionContext, IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { RemoteExtensionEnvironmentChannelClient } from 'vs/workbench/services/remote/common/remoteAgentEnvironmentChannel';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nexport abstract class AbstractRemoteAgentService extends Disposable implements IRemoteAgentService {\n\n\t_serviceBrand: any;\n\n\tprivate _environment: Promise<IRemoteAgentEnvironment | null> | null;\n\n\tconstructor(\n\t\t@IEnvironmentService protected readonly _environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tabstract getConnection(): IRemoteAgentConnection | null;\n\n\tgetEnvironment(bail?: boolean): Promise<IRemoteAgentEnvironment | null> {\n\t\tif (!this._environment) {\n\t\t\tconst connection = this.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tconst client = new RemoteExtensionEnvironmentChannelClient(connection.getChannel('remoteextensionsenvironment'));\n\t\t\t\tthis._environment = client.getEnvironmentData(connection.remoteAuthority, this._environmentService.extensionDevelopmentLocationURI);\n\t\t\t} else {\n\t\t\t\tthis._environment = Promise.resolve(null);\n\t\t\t}\n\t\t}\n\t\treturn bail ? this._environment : this._environment.then(undefined, () => null);\n\t}\n}\n\nexport class RemoteAgentConnection extends Disposable implements IRemoteAgentConnection {\n\n\treadonly remoteAuthority: string;\n\tprivate _connection: Promise<Client<RemoteAgentConnectionContext>> | null;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate _commit: string | undefined,\n\t\tprivate _webSocketFactory: IWebSocketFactory,\n\t\tprivate _environmentService: IEnvironmentService,\n\t\tprivate _remoteAuthorityResolverService: IRemoteAuthorityResolverService\n\t) {\n\t\tsuper();\n\t\tthis.remoteAuthority = remoteAuthority;\n\t\tthis._connection = null;\n\t}\n\n\tgetChannel<T extends IChannel>(channelName: string): T {\n\t\treturn <T>getDelayedChannel(this._getOrCreateConnection().then(c => c.getChannel(channelName)));\n\t}\n\n\tregisterChannel<T extends IServerChannel<RemoteAgentConnectionContext>>(channelName: string, channel: T): void {\n\t\tthis._getOrCreateConnection().then(client => client.registerChannel(channelName, channel));\n\t}\n\n\tprivate _getOrCreateConnection(): Promise<Client<RemoteAgentConnectionContext>> {\n\t\tif (!this._connection) {\n\t\t\tthis._connection = this._createConnection();\n\t\t}\n\t\treturn this._connection;\n\t}\n\n\tprivate async _createConnection(): Promise<Client<RemoteAgentConnectionContext>> {\n\t\tconst options: IConnectionOptions = {\n\t\t\tisBuilt: this._environmentService.isBuilt,\n\t\t\tcommit: this._commit,\n\t\t\twebSocketFactory: this._webSocketFactory,\n\t\t\taddressProvider: {\n\t\t\t\tgetAddress: async () => {\n\t\t\t\t\tconst { host, port } = await this._remoteAuthorityResolverService.resolveAuthority(this.remoteAuthority);\n\t\t\t\t\treturn { host, port };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst connection = await connectRemoteAgentManagement(options, this.remoteAuthority, `renderer`);\n\t\tthis._register(connection);\n\t\treturn connection.client;\n\t}\n}\n\nclass RemoteConnectionFailureNotificationContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@INotificationService notificationService: INotificationService,\n\t) {\n\t\t// Let's cover the case where connecting to fetch the remote extension info fails\n\t\tremoteAgentService.getEnvironment(true)\n\t\t\t.then(undefined, err => notificationService.error(nls.localize('connectionError', \"Failed to connect to the remote extension host agent (Error: {0})\", err ? err.message : '')));\n\t}\n\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, LifecyclePhase.Ready);\n"]}]}