{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/preferences/common/preferencesEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/platform\", \"vs/base/common/uri\", \"vs/editor/common/services/resolverService\", \"vs/nls\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/common/editor\", \"vs/workbench/common/editor/resourceEditorInput\", \"vs/workbench/services/preferences/common/keybindingsEditorModel\", \"vs/workbench/services/preferences/common/preferences\"], function (require, exports, platform_1, uri_1, resolverService_1, nls, instantiation_1, editor_1, resourceEditorInput_1, keybindingsEditorModel_1, preferences_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class PreferencesEditorInput extends editor_1.SideBySideEditorInput {\n        getTypeId() {\n            return PreferencesEditorInput.ID;\n        }\n        getTitle(verbosity) {\n            return this.master.getTitle(verbosity);\n        }\n    }\n    PreferencesEditorInput.ID = 'workbench.editorinputs.preferencesEditorInput';\n    exports.PreferencesEditorInput = PreferencesEditorInput;\n    let DefaultPreferencesEditorInput = class DefaultPreferencesEditorInput extends resourceEditorInput_1.ResourceEditorInput {\n        constructor(defaultSettingsResource, textModelResolverService) {\n            super(nls.localize('settingsEditorName', \"Default Settings\"), '', defaultSettingsResource, textModelResolverService);\n        }\n        getTypeId() {\n            return DefaultPreferencesEditorInput.ID;\n        }\n        matches(other) {\n            if (other instanceof DefaultPreferencesEditorInput) {\n                return true;\n            }\n            if (!super.matches(other)) {\n                return false;\n            }\n            return true;\n        }\n    };\n    DefaultPreferencesEditorInput.ID = 'workbench.editorinputs.defaultpreferences';\n    DefaultPreferencesEditorInput = __decorate([\n        __param(1, resolverService_1.ITextModelService)\n    ], DefaultPreferencesEditorInput);\n    exports.DefaultPreferencesEditorInput = DefaultPreferencesEditorInput;\n    let KeybindingsEditorInput = class KeybindingsEditorInput extends editor_1.EditorInput {\n        constructor(instantiationService) {\n            super();\n            this.keybindingsModel = instantiationService.createInstance(keybindingsEditorModel_1.KeybindingsEditorModel, platform_1.OS);\n        }\n        getTypeId() {\n            return KeybindingsEditorInput.ID;\n        }\n        getName() {\n            return nls.localize('keybindingsInputName', \"Keyboard Shortcuts\");\n        }\n        resolve() {\n            return Promise.resolve(this.keybindingsModel);\n        }\n        matches(otherInput) {\n            return otherInput instanceof KeybindingsEditorInput;\n        }\n    };\n    KeybindingsEditorInput.ID = 'workbench.input.keybindings';\n    KeybindingsEditorInput = __decorate([\n        __param(0, instantiation_1.IInstantiationService)\n    ], KeybindingsEditorInput);\n    exports.KeybindingsEditorInput = KeybindingsEditorInput;\n    let SettingsEditor2Input = class SettingsEditor2Input extends editor_1.EditorInput {\n        constructor(_preferencesService) {\n            super();\n            this.resource = uri_1.URI.from({\n                scheme: 'vscode-settings',\n                path: `settingseditor`\n            });\n            this._settingsModel = _preferencesService.createSettings2EditorModel();\n        }\n        matches(otherInput) {\n            return otherInput instanceof SettingsEditor2Input;\n        }\n        getTypeId() {\n            return SettingsEditor2Input.ID;\n        }\n        getName() {\n            return nls.localize('settingsEditor2InputName', \"Settings\");\n        }\n        resolve() {\n            return Promise.resolve(this._settingsModel);\n        }\n        getResource() {\n            return this.resource;\n        }\n    };\n    SettingsEditor2Input.ID = 'workbench.input.settings2';\n    SettingsEditor2Input = __decorate([\n        __param(0, preferences_1.IPreferencesService)\n    ], SettingsEditor2Input);\n    exports.SettingsEditor2Input = SettingsEditor2Input;\n});\n",null]}