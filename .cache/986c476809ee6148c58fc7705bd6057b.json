{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditing.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditing.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IJSONEditingService = instantiation_1.createDecorator('jsonEditingService');\nvar JSONEditingErrorCode;\n(function (JSONEditingErrorCode) {\n    /**\n     * Error when trying to write and save to the file while it is dirty in the editor.\n     */\n    JSONEditingErrorCode[JSONEditingErrorCode[\"ERROR_FILE_DIRTY\"] = 0] = \"ERROR_FILE_DIRTY\";\n    /**\n     * Error when trying to write to a file that contains JSON errors.\n     */\n    JSONEditingErrorCode[JSONEditingErrorCode[\"ERROR_INVALID_FILE\"] = 1] = \"ERROR_INVALID_FILE\";\n})(JSONEditingErrorCode = exports.JSONEditingErrorCode || (exports.JSONEditingErrorCode = {}));\nvar JSONEditingError = /** @class */ (function (_super) {\n    tslib_1.__extends(JSONEditingError, _super);\n    function JSONEditingError(message, code) {\n        var _this = _super.call(this, message) || this;\n        _this.code = code;\n        return _this;\n    }\n    return JSONEditingError;\n}(Error));\nexports.JSONEditingError = JSONEditingError;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditing.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/common/jsonEditing.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,gFAAoG;AAEvF,QAAA,mBAAmB,GAAG,+BAAe,CAAsB,oBAAoB,CAAC,CAAC;AAE9F,IAAkB,oBAWjB;AAXD,WAAkB,oBAAoB;IAErC;;OAEG;IACH,uFAAgB,CAAA;IAEhB;;OAEG;IACH,2FAAkB,CAAA;AACnB,CAAC,EAXiB,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAWrC;AAED;IAAsC,4CAAK;IAC1C,0BAAY,OAAe,EAAS,IAA0B;QAA9D,YACC,kBAAM,OAAO,CAAC,SACd;QAFmC,UAAI,GAAJ,IAAI,CAAsB;;IAE9D,CAAC;IACF,uBAAC;AAAD,CAAC,AAJD,CAAsC,KAAK,GAI1C;AAJY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IJSONEditingService = createDecorator<IJSONEditingService>('jsonEditingService');\n\nexport const enum JSONEditingErrorCode {\n\n\t/**\n\t * Error when trying to write and save to the file while it is dirty in the editor.\n\t */\n\tERROR_FILE_DIRTY,\n\n\t/**\n\t * Error when trying to write to a file that contains JSON errors.\n\t */\n\tERROR_INVALID_FILE\n}\n\nexport class JSONEditingError extends Error {\n\tconstructor(message: string, public code: JSONEditingErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport interface IJSONValue {\n\tkey: string;\n\tvalue: any;\n}\n\nexport interface IJSONEditingService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\twrite(resource: URI, value: IJSONValue, save: boolean): Promise<void>;\n}"]}]}