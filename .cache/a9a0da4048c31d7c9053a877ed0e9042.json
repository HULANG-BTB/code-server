{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lineNumbers/lineNumbers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lineNumbers/lineNumbers.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./lineNumbers\");\nvar platform = require(\"vs/base/common/platform\");\nvar dynamicViewOverlay_1 = require(\"vs/editor/browser/view/dynamicViewOverlay\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar LineNumbersOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(LineNumbersOverlay, _super);\n    function LineNumbersOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._readConfig();\n        _this._lastCursorModelPosition = new position_1.Position(1, 1);\n        _this._renderResult = null;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    LineNumbersOverlay.prototype._readConfig = function () {\n        var config = this._context.configuration.editor;\n        this._lineHeight = config.lineHeight;\n        this._renderLineNumbers = config.viewInfo.renderLineNumbers;\n        this._renderCustomLineNumbers = config.viewInfo.renderCustomLineNumbers;\n        this._renderFinalNewline = config.viewInfo.renderFinalNewline;\n        this._lineNumbersLeft = config.layoutInfo.lineNumbersLeft;\n        this._lineNumbersWidth = config.layoutInfo.lineNumbersWidth;\n    };\n    LineNumbersOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    LineNumbersOverlay.prototype.onConfigurationChanged = function (e) {\n        this._readConfig();\n        return true;\n    };\n    LineNumbersOverlay.prototype.onCursorStateChanged = function (e) {\n        var primaryViewPosition = e.selections[0].getPosition();\n        this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n        if (this._renderLineNumbers === editorOptions_1.RenderLineNumbersType.Relative || this._renderLineNumbers === editorOptions_1.RenderLineNumbersType.Interval) {\n            return true;\n        }\n        return false;\n    };\n    LineNumbersOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    LineNumbersOverlay.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    LineNumbersOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    LineNumbersOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    LineNumbersOverlay.prototype.onScrollChanged = function (e) {\n        return e.scrollTopChanged;\n    };\n    LineNumbersOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    LineNumbersOverlay.prototype._getLineRenderLineNumber = function (viewLineNumber) {\n        var modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(viewLineNumber, 1));\n        if (modelPosition.column !== 1) {\n            return '';\n        }\n        var modelLineNumber = modelPosition.lineNumber;\n        if (!this._renderFinalNewline) {\n            var lineCount = this._context.model.getLineCount();\n            var lineContent = this._context.model.getLineContent(modelLineNumber);\n            if (modelLineNumber === lineCount && lineContent === '') {\n                return '';\n            }\n        }\n        if (this._renderCustomLineNumbers) {\n            return this._renderCustomLineNumbers(modelLineNumber);\n        }\n        if (this._renderLineNumbers === editorOptions_1.RenderLineNumbersType.Relative) {\n            var diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n            if (diff === 0) {\n                return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n            }\n            return String(diff);\n        }\n        if (this._renderLineNumbers === editorOptions_1.RenderLineNumbersType.Interval) {\n            if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n                return String(modelLineNumber);\n            }\n            if (modelLineNumber % 10 === 0) {\n                return String(modelLineNumber);\n            }\n            return '';\n        }\n        return String(modelLineNumber);\n    };\n    LineNumbersOverlay.prototype.prepareRender = function (ctx) {\n        if (this._renderLineNumbers === editorOptions_1.RenderLineNumbersType.Off) {\n            this._renderResult = null;\n            return;\n        }\n        var lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        var common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;\">';\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            var renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n            if (renderLineNumber) {\n                output[lineIndex] = (common\n                    + renderLineNumber\n                    + '</div>');\n            }\n            else {\n                output[lineIndex] = '';\n            }\n        }\n        this._renderResult = output;\n    };\n    LineNumbersOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        var lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    };\n    LineNumbersOverlay.CLASS_NAME = 'line-numbers';\n    return LineNumbersOverlay;\n}(dynamicViewOverlay_1.DynamicViewOverlay));\nexports.LineNumbersOverlay = LineNumbersOverlay;\n// theming\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var lineNumbers = theme.getColor(editorColorRegistry_1.editorLineNumbers);\n    if (lineNumbers) {\n        collector.addRule(\".monaco-editor .line-numbers { color: \" + lineNumbers + \"; }\");\n    }\n    var activeLineNumber = theme.getColor(editorColorRegistry_1.editorActiveLineNumber);\n    if (activeLineNumber) {\n        collector.addRule(\".monaco-editor .current-line ~ .line-numbers { color: \" + activeLineNumber + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lineNumbers/lineNumbers.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/lineNumbers/lineNumbers.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./lineNumbers';\nimport * as platform from 'vs/base/common/platform';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { RenderLineNumbersType } from 'vs/editor/common/config/editorOptions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { editorActiveLineNumber, editorLineNumbers } from 'vs/editor/common/view/editorColorRegistry';\nimport { RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\n\nexport class LineNumbersOverlay extends DynamicViewOverlay {\n\n\tpublic static readonly CLASS_NAME = 'line-numbers';\n\n\tprivate readonly _context: ViewContext;\n\n\tprivate _lineHeight: number;\n\tprivate _renderLineNumbers: RenderLineNumbersType;\n\tprivate _renderCustomLineNumbers: ((lineNumber: number) => string) | null;\n\tprivate _renderFinalNewline: boolean;\n\tprivate _lineNumbersLeft: number;\n\tprivate _lineNumbersWidth: number;\n\tprivate _lastCursorModelPosition: Position;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\n\t\tthis._readConfig();\n\n\t\tthis._lastCursorModelPosition = new Position(1, 1);\n\t\tthis._renderResult = null;\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tprivate _readConfig(): void {\n\t\tconst config = this._context.configuration.editor;\n\t\tthis._lineHeight = config.lineHeight;\n\t\tthis._renderLineNumbers = config.viewInfo.renderLineNumbers;\n\t\tthis._renderCustomLineNumbers = config.viewInfo.renderCustomLineNumbers;\n\t\tthis._renderFinalNewline = config.viewInfo.renderFinalNewline;\n\t\tthis._lineNumbersLeft = config.layoutInfo.lineNumbersLeft;\n\t\tthis._lineNumbersWidth = config.layoutInfo.lineNumbersWidth;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tthis._readConfig();\n\t\treturn true;\n\t}\n\tpublic onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tconst primaryViewPosition = e.selections[0].getPosition();\n\t\tthis._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n\n\t\tif (this._renderLineNumbers === RenderLineNumbersType.Relative || this._renderLineNumbers === RenderLineNumbersType.Interval) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tprivate _getLineRenderLineNumber(viewLineNumber: number): string {\n\t\tconst modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n\t\tif (modelPosition.column !== 1) {\n\t\t\treturn '';\n\t\t}\n\t\tconst modelLineNumber = modelPosition.lineNumber;\n\n\t\tif (!this._renderFinalNewline) {\n\t\t\tconst lineCount = this._context.model.getLineCount();\n\t\t\tconst lineContent = this._context.model.getLineContent(modelLineNumber);\n\n\t\t\tif (modelLineNumber === lineCount && lineContent === '') {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\tif (this._renderCustomLineNumbers) {\n\t\t\treturn this._renderCustomLineNumbers(modelLineNumber);\n\t\t}\n\n\t\tif (this._renderLineNumbers === RenderLineNumbersType.Relative) {\n\t\t\tconst diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n\t\t\tif (diff === 0) {\n\t\t\t\treturn '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n\t\t\t}\n\t\t\treturn String(diff);\n\t\t}\n\n\t\tif (this._renderLineNumbers === RenderLineNumbersType.Interval) {\n\t\t\tif (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n\t\t\t\treturn String(modelLineNumber);\n\t\t\t}\n\t\t\tif (modelLineNumber % 10 === 0) {\n\t\t\t\treturn String(modelLineNumber);\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\n\t\treturn String(modelLineNumber);\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (this._renderLineNumbers === RenderLineNumbersType.Off) {\n\t\t\tthis._renderResult = null;\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineHeightClassName = (platform.isLinux ? (this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd') : '');\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;\">';\n\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\n\t\t\tconst renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n\n\t\t\tif (renderLineNumber) {\n\t\t\t\toutput[lineIndex] = (\n\t\t\t\t\tcommon\n\t\t\t\t\t+ renderLineNumber\n\t\t\t\t\t+ '</div>'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toutput[lineIndex] = '';\n\t\t\t}\n\t\t}\n\n\t\tthis._renderResult = output;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n\n// theming\n\nregisterThemingParticipant((theme, collector) => {\n\tconst lineNumbers = theme.getColor(editorLineNumbers);\n\tif (lineNumbers) {\n\t\tcollector.addRule(`.monaco-editor .line-numbers { color: ${lineNumbers}; }`);\n\t}\n\tconst activeLineNumber = theme.getColor(editorActiveLineNumber);\n\tif (activeLineNumber) {\n\t\tcollector.addRule(`.monaco-editor .current-line ~ .line-numbers { color: ${activeLineNumber}; }`);\n\t}\n});\n"]}]}