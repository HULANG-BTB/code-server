{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar types_1 = require(\"vs/base/common/types\");\nvar Memento = /** @class */ (function () {\n    function Memento(id, storageService) {\n        this.storageService = storageService;\n        this.id = Memento.COMMON_PREFIX + id;\n    }\n    Memento.prototype.getMemento = function (scope) {\n        // Scope by Workspace\n        if (scope === storage_1.StorageScope.WORKSPACE) {\n            var workspaceMemento = Memento.workspaceMementos[this.id];\n            if (!workspaceMemento) {\n                workspaceMemento = new ScopedMemento(this.id, scope, this.storageService);\n                Memento.workspaceMementos[this.id] = workspaceMemento;\n            }\n            return workspaceMemento.getMemento();\n        }\n        // Scope Global\n        var globalMemento = Memento.globalMementos[this.id];\n        if (!globalMemento) {\n            globalMemento = new ScopedMemento(this.id, scope, this.storageService);\n            Memento.globalMementos[this.id] = globalMemento;\n        }\n        return globalMemento.getMemento();\n    };\n    Memento.prototype.saveMemento = function () {\n        // Workspace\n        var workspaceMemento = Memento.workspaceMementos[this.id];\n        if (workspaceMemento) {\n            workspaceMemento.save();\n        }\n        // Global\n        var globalMemento = Memento.globalMementos[this.id];\n        if (globalMemento) {\n            globalMemento.save();\n        }\n    };\n    Memento.globalMementos = Object.create(null);\n    Memento.workspaceMementos = Object.create(null);\n    Memento.COMMON_PREFIX = 'memento/';\n    return Memento;\n}());\nexports.Memento = Memento;\nvar ScopedMemento = /** @class */ (function () {\n    function ScopedMemento(id, scope, storageService) {\n        this.id = id;\n        this.scope = scope;\n        this.storageService = storageService;\n        this.mementoObj = this.load();\n    }\n    ScopedMemento.prototype.getMemento = function () {\n        return this.mementoObj;\n    };\n    ScopedMemento.prototype.load = function () {\n        var memento = this.storageService.get(this.id, this.scope);\n        if (memento) {\n            return JSON.parse(memento);\n        }\n        return {};\n    };\n    ScopedMemento.prototype.save = function () {\n        if (!types_1.isEmptyObject(this.mementoObj)) {\n            this.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope);\n        }\n        else {\n            this.storageService.remove(this.id, this.scope);\n        }\n    };\n    return ScopedMemento;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/memento.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { isEmptyObject } from 'vs/base/common/types';\n\nexport class Memento {\n\n\tprivate static globalMementos: { [id: string]: ScopedMemento } = Object.create(null);\n\tprivate static workspaceMementos: { [id: string]: ScopedMemento } = Object.create(null);\n\n\tprivate static readonly COMMON_PREFIX = 'memento/';\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string, private storageService: IStorageService) {\n\t\tthis.id = Memento.COMMON_PREFIX + id;\n\t}\n\n\tgetMemento(scope: StorageScope): object {\n\n\t\t// Scope by Workspace\n\t\tif (scope === StorageScope.WORKSPACE) {\n\t\t\tlet workspaceMemento = Memento.workspaceMementos[this.id];\n\t\t\tif (!workspaceMemento) {\n\t\t\t\tworkspaceMemento = new ScopedMemento(this.id, scope, this.storageService);\n\t\t\t\tMemento.workspaceMementos[this.id] = workspaceMemento;\n\t\t\t}\n\n\t\t\treturn workspaceMemento.getMemento();\n\t\t}\n\n\t\t// Scope Global\n\t\tlet globalMemento = Memento.globalMementos[this.id];\n\t\tif (!globalMemento) {\n\t\t\tglobalMemento = new ScopedMemento(this.id, scope, this.storageService);\n\t\t\tMemento.globalMementos[this.id] = globalMemento;\n\t\t}\n\n\t\treturn globalMemento.getMemento();\n\t}\n\n\tsaveMemento(): void {\n\n\t\t// Workspace\n\t\tconst workspaceMemento = Memento.workspaceMementos[this.id];\n\t\tif (workspaceMemento) {\n\t\t\tworkspaceMemento.save();\n\t\t}\n\n\t\t// Global\n\t\tconst globalMemento = Memento.globalMementos[this.id];\n\t\tif (globalMemento) {\n\t\t\tglobalMemento.save();\n\t\t}\n\t}\n}\n\nclass ScopedMemento {\n\tprivate readonly mementoObj: object;\n\n\tconstructor(private id: string, private scope: StorageScope, private storageService: IStorageService) {\n\t\tthis.mementoObj = this.load();\n\t}\n\n\tgetMemento(): object {\n\t\treturn this.mementoObj;\n\t}\n\n\tprivate load(): object {\n\t\tconst memento = this.storageService.get(this.id, this.scope);\n\t\tif (memento) {\n\t\t\treturn JSON.parse(memento);\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tsave(): void {\n\t\tif (!isEmptyObject(this.mementoObj)) {\n\t\t\tthis.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.id, this.scope);\n\t\t}\n\t}\n}"]}]}