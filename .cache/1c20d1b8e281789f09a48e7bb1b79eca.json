{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchService.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar amd_1 = require(\"vs/base/common/amd\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar network_1 = require(\"vs/base/common/network\");\nvar stopwatch_1 = require(\"vs/base/common/stopwatch\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar ipc_1 = require(\"vs/base/parts/ipc/common/ipc\");\nvar ipc_cp_1 = require(\"vs/base/parts/ipc/node/ipc.cp\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar search_1 = require(\"vs/workbench/services/search/common/search\");\nvar searchHelpers_1 = require(\"vs/workbench/services/search/common/searchHelpers\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar searchIpc_1 = require(\"./searchIpc\");\nvar SearchService = /** @class */ (function (_super) {\n    tslib_1.__extends(SearchService, _super);\n    function SearchService(instantiationService, modelService, untitledEditorService, editorService, environmentService, telemetryService, logService, extensionService, fileService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.modelService = modelService;\n        _this.untitledEditorService = untitledEditorService;\n        _this.editorService = editorService;\n        _this.telemetryService = telemetryService;\n        _this.logService = logService;\n        _this.extensionService = extensionService;\n        _this.fileService = fileService;\n        _this.fileSearchProviders = new Map();\n        _this.textSearchProviders = new Map();\n        _this.diskSearch = _this.instantiationService.createInstance(DiskSearch, !environmentService.isBuilt || environmentService.verbose, environmentService.debugSearch);\n        return _this;\n    }\n    SearchService.prototype.registerSearchResultProvider = function (scheme, type, provider) {\n        var list;\n        if (type === search_1.SearchProviderType.file) {\n            list = this.fileSearchProviders;\n        }\n        else if (type === search_1.SearchProviderType.text) {\n            list = this.textSearchProviders;\n        }\n        else {\n            throw new Error('Unknown SearchProviderType');\n        }\n        list.set(scheme, provider);\n        return lifecycle_1.toDisposable(function () {\n            list.delete(scheme);\n        });\n    };\n    SearchService.prototype.textSearch = function (query, token, onProgress) {\n        var _this = this;\n        // Get local results from dirty/untitled\n        var localResults = this.getLocalResults(query);\n        if (onProgress) {\n            arrays.coalesce(localResults.values()).forEach(onProgress);\n        }\n        var onProviderProgress = function (progress) {\n            if (search_1.isFileMatch(progress)) {\n                // Match\n                if (!localResults.has(progress.resource) && onProgress) { // don't override local results\n                    onProgress(progress);\n                }\n            }\n            else if (onProgress) {\n                // Progress\n                onProgress(progress);\n            }\n            if (search_1.isProgressMessage(progress)) {\n                _this.logService.debug('SearchService#search', progress.message);\n            }\n        };\n        return this.doSearch(query, token, onProviderProgress);\n    };\n    SearchService.prototype.fileSearch = function (query, token) {\n        return this.doSearch(query, token);\n    };\n    SearchService.prototype.doSearch = function (query, token, onProgress) {\n        var _this = this;\n        this.logService.trace('SearchService#search', JSON.stringify(query));\n        var schemesInQuery = this.getSchemesInQuery(query);\n        var providerActivations = [Promise.resolve(null)];\n        schemesInQuery.forEach(function (scheme) { return providerActivations.push(_this.extensionService.activateByEvent(\"onSearch:\" + scheme)); });\n        providerActivations.push(this.extensionService.activateByEvent('onSearch:file'));\n        var providerPromise = Promise.all(providerActivations)\n            .then(function () { return _this.extensionService.whenInstalledExtensionsRegistered(); })\n            .then(function () {\n            // Cancel faster if search was canceled while waiting for extensions\n            if (token && token.isCancellationRequested) {\n                return Promise.reject(errors_1.canceled());\n            }\n            var progressCallback = function (item) {\n                if (token && token.isCancellationRequested) {\n                    return;\n                }\n                if (onProgress) {\n                    onProgress(item);\n                }\n            };\n            return _this.searchWithProviders(query, progressCallback, token);\n        })\n            .then(function (completes) {\n            completes = arrays.coalesce(completes);\n            if (!completes.length) {\n                return {\n                    limitHit: false,\n                    results: []\n                };\n            }\n            return {\n                limitHit: completes[0] && completes[0].limitHit,\n                stats: completes[0].stats,\n                results: arrays.flatten(completes.map(function (c) { return c.results; }))\n            };\n        });\n        return new Promise(function (resolve, reject) {\n            if (token) {\n                token.onCancellationRequested(function () {\n                    reject(errors_1.canceled());\n                });\n            }\n            providerPromise.then(resolve, reject);\n        });\n    };\n    SearchService.prototype.getSchemesInQuery = function (query) {\n        var schemes = new Set();\n        if (query.folderQueries) {\n            query.folderQueries.forEach(function (fq) { return schemes.add(fq.folder.scheme); });\n        }\n        if (query.extraFileResources) {\n            query.extraFileResources.forEach(function (extraFile) { return schemes.add(extraFile.scheme); });\n        }\n        return schemes;\n    };\n    SearchService.prototype.searchWithProviders = function (query, onProviderProgress, token) {\n        var _this = this;\n        var e2eSW = stopwatch_1.StopWatch.create(false);\n        var diskSearchQueries = [];\n        var searchPs = [];\n        var fqs = this.groupFolderQueriesByScheme(query);\n        map_1.keys(fqs).forEach(function (scheme) {\n            var schemeFQs = fqs.get(scheme);\n            var provider = query.type === search_1.QueryType.File ?\n                _this.fileSearchProviders.get(scheme) :\n                _this.textSearchProviders.get(scheme);\n            if (!provider && scheme === 'file') {\n                diskSearchQueries.push.apply(diskSearchQueries, schemeFQs);\n            }\n            else if (!provider) {\n                console.warn('No search provider registered for scheme: ' + scheme);\n            }\n            else {\n                var oneSchemeQuery = tslib_1.__assign({}, query, {\n                    folderQueries: schemeFQs\n                });\n                searchPs.push(query.type === search_1.QueryType.File ?\n                    provider.fileSearch(oneSchemeQuery, token) :\n                    provider.textSearch(oneSchemeQuery, onProviderProgress, token));\n            }\n        });\n        var diskSearchExtraFileResources = query.extraFileResources && query.extraFileResources.filter(function (res) { return res.scheme === network_1.Schemas.file; });\n        if (diskSearchQueries.length || diskSearchExtraFileResources) {\n            var diskSearchQuery = tslib_1.__assign({}, query, {\n                folderQueries: diskSearchQueries\n            }, { extraFileResources: diskSearchExtraFileResources });\n            searchPs.push(diskSearchQuery.type === search_1.QueryType.File ?\n                this.diskSearch.fileSearch(diskSearchQuery, token) :\n                this.diskSearch.textSearch(diskSearchQuery, onProviderProgress, token));\n        }\n        return Promise.all(searchPs).then(function (completes) {\n            var endToEndTime = e2eSW.elapsed();\n            _this.logService.trace(\"SearchService#search: \" + endToEndTime + \"ms\");\n            completes.forEach(function (complete) {\n                _this.sendTelemetry(query, endToEndTime, complete);\n            });\n            return completes;\n        }, function (err) {\n            var endToEndTime = e2eSW.elapsed();\n            _this.logService.trace(\"SearchService#search: \" + endToEndTime + \"ms\");\n            var searchError = search_1.deserializeSearchError(err.message);\n            _this.sendTelemetry(query, endToEndTime, undefined, searchError);\n            throw searchError;\n        });\n    };\n    SearchService.prototype.groupFolderQueriesByScheme = function (query) {\n        var queries = new Map();\n        query.folderQueries.forEach(function (fq) {\n            var schemeFQs = queries.get(fq.folder.scheme) || [];\n            schemeFQs.push(fq);\n            queries.set(fq.folder.scheme, schemeFQs);\n        });\n        return queries;\n    };\n    SearchService.prototype.sendTelemetry = function (query, endToEndTime, complete, err) {\n        var fileSchemeOnly = query.folderQueries.every(function (fq) { return fq.folder.scheme === 'file'; });\n        var otherSchemeOnly = query.folderQueries.every(function (fq) { return fq.folder.scheme !== 'file'; });\n        var scheme = fileSchemeOnly ? 'file' :\n            otherSchemeOnly ? 'other' :\n                'mixed';\n        if (query.type === search_1.QueryType.File && complete && complete.stats) {\n            var fileSearchStats = complete.stats;\n            if (fileSearchStats.fromCache) {\n                var cacheStats = fileSearchStats.detailStats;\n                /* __GDPR__\n                    \"cachedSearchComplete\" : {\n                        \"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\"  },\n                        \"resultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true  },\n                        \"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true  },\n                        \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                        \"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"sortingTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"cacheWasResolved\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                        \"cacheLookupTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"cacheFilterTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"cacheEntryCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                    }\n                 */\n                this.telemetryService.publicLog('cachedSearchComplete', {\n                    reason: query._reason,\n                    resultCount: fileSearchStats.resultCount,\n                    workspaceFolderCount: query.folderQueries.length,\n                    type: fileSearchStats.type,\n                    endToEndTime: endToEndTime,\n                    sortingTime: fileSearchStats.sortingTime,\n                    cacheWasResolved: cacheStats.cacheWasResolved,\n                    cacheLookupTime: cacheStats.cacheLookupTime,\n                    cacheFilterTime: cacheStats.cacheFilterTime,\n                    cacheEntryCount: cacheStats.cacheEntryCount,\n                    scheme: scheme\n                });\n            }\n            else {\n                var searchEngineStats = fileSearchStats.detailStats;\n                /* __GDPR__\n                    \"searchComplete\" : {\n                        \"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                        \"resultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                        \"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"sortingTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"fileWalkTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"directoriesWalked\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"filesWalked\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"cmdTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"cmdResultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                        \"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                    }\n                 */\n                this.telemetryService.publicLog('searchComplete', {\n                    reason: query._reason,\n                    resultCount: fileSearchStats.resultCount,\n                    workspaceFolderCount: query.folderQueries.length,\n                    type: fileSearchStats.type,\n                    endToEndTime: endToEndTime,\n                    sortingTime: fileSearchStats.sortingTime,\n                    fileWalkTime: searchEngineStats.fileWalkTime,\n                    directoriesWalked: searchEngineStats.directoriesWalked,\n                    filesWalked: searchEngineStats.filesWalked,\n                    cmdTime: searchEngineStats.cmdTime,\n                    cmdResultCount: searchEngineStats.cmdResultCount,\n                    scheme: scheme\n                });\n            }\n        }\n        else if (query.type === search_1.QueryType.Text) {\n            var errorType = void 0;\n            if (err) {\n                errorType = err.code === search_1.SearchErrorCode.regexParseError ? 'regex' :\n                    err.code === search_1.SearchErrorCode.unknownEncoding ? 'encoding' :\n                        err.code === search_1.SearchErrorCode.globParseError ? 'glob' :\n                            err.code === search_1.SearchErrorCode.invalidLiteral ? 'literal' :\n                                err.code === search_1.SearchErrorCode.other ? 'other' :\n                                    'unknown';\n            }\n            /* __GDPR__\n                \"textSearchComplete\" : {\n                    \"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                    \"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n                    \"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"error\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"useRipgrep\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n                    \"usePCRE2\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n                }\n             */\n            this.telemetryService.publicLog('textSearchComplete', {\n                reason: query._reason,\n                workspaceFolderCount: query.folderQueries.length,\n                endToEndTime: endToEndTime,\n                scheme: scheme,\n                error: errorType,\n                usePCRE2: !!query.usePCRE2\n            });\n        }\n    };\n    SearchService.prototype.getLocalResults = function (query) {\n        var _this = this;\n        var localResults = new map_1.ResourceMap();\n        if (query.type === search_1.QueryType.Text) {\n            var models = this.modelService.getModels();\n            models.forEach(function (model) {\n                var resource = model.uri;\n                if (!resource) {\n                    return;\n                }\n                if (!_this.editorService.isOpen({ resource: resource })) {\n                    return;\n                }\n                // Support untitled files\n                if (resource.scheme === network_1.Schemas.untitled) {\n                    if (!_this.untitledEditorService.exists(resource)) {\n                        return;\n                    }\n                }\n                // Block walkthrough, webview, etc.\n                else if (!_this.fileService.canHandleResource(resource)) {\n                    return;\n                }\n                if (!_this.matches(resource, query)) {\n                    return; // respect user filters\n                }\n                // Use editor API to find matches\n                var matches = model.findMatches(query.contentPattern.pattern, false, !!query.contentPattern.isRegExp, !!query.contentPattern.isCaseSensitive, query.contentPattern.isWordMatch ? query.contentPattern.wordSeparators : null, false, query.maxResults);\n                if (matches.length) {\n                    var fileMatch = new search_1.FileMatch(resource);\n                    localResults.set(resource, fileMatch);\n                    var textSearchResults = searchHelpers_1.editorMatchesToTextSearchResults(matches, model, query.previewOptions);\n                    fileMatch.results = searchHelpers_1.addContextToEditorMatches(textSearchResults, model, query);\n                }\n                else {\n                    localResults.set(resource, null);\n                }\n            });\n        }\n        return localResults;\n    };\n    SearchService.prototype.matches = function (resource, query) {\n        return search_1.pathIncludedInQuery(query, resource.fsPath);\n    };\n    SearchService.prototype.clearCache = function (cacheKey) {\n        var clearPs = [\n            this.diskSearch\n        ].concat(map_1.values(this.fileSearchProviders)).map(function (provider) { return provider && provider.clearCache(cacheKey); });\n        return Promise.all(clearPs)\n            .then(function () { });\n    };\n    SearchService = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, modelService_1.IModelService),\n        tslib_1.__param(2, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, environment_1.IEnvironmentService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, log_1.ILogService),\n        tslib_1.__param(7, extensions_2.IExtensionService),\n        tslib_1.__param(8, files_1.IFileService)\n    ], SearchService);\n    return SearchService;\n}(lifecycle_1.Disposable));\nexports.SearchService = SearchService;\nvar DiskSearch = /** @class */ (function () {\n    function DiskSearch(verboseLogging, searchDebug, logService, configService) {\n        var _this = this;\n        this.logService = logService;\n        this.configService = configService;\n        this.toDispose = [];\n        var timeout = this.configService.getValue().search.maintainFileSearchCache ?\n            Number.MAX_VALUE :\n            60 * 60 * 1000;\n        var opts = {\n            serverName: 'Search',\n            timeout: timeout,\n            args: ['--type=searchService'],\n            // See https://github.com/Microsoft/vscode/issues/27665\n            // Pass in fresh execArgv to the forked process such that it doesn't inherit them from `process.execArgv`.\n            // e.g. Launching the extension host process with `--inspect-brk=xxx` and then forking a process from the extension host\n            // results in the forked process inheriting `--inspect-brk=xxx`.\n            freshExecArgv: true,\n            env: {\n                AMD_ENTRYPOINT: 'vs/workbench/services/search/node/searchApp',\n                PIPE_LOGGING: 'true',\n                VERBOSE_LOGGING: verboseLogging\n            },\n            useQueue: true\n        };\n        if (searchDebug) {\n            if (searchDebug.break && searchDebug.port) {\n                opts.debugBrk = searchDebug.port;\n            }\n            else if (!searchDebug.break && searchDebug.port) {\n                opts.debug = searchDebug.port;\n            }\n        }\n        var connect = function () {\n            var client = new ipc_cp_1.Client(amd_1.getPathFromAmdModule(require, 'bootstrap-fork'), opts);\n            client.onDidProcessExit(function () {\n                _this.toDispose = lifecycle_1.dispose(_this.toDispose);\n                retry.run();\n            }, null, _this.toDispose);\n            _this.toDispose.push(client);\n            var channel = ipc_1.getNextTickChannel(client.getChannel('search'));\n            _this.raw = new searchIpc_1.SearchChannelClient(channel);\n            return _this.raw.clearCache('test-connectivity');\n        };\n        var retry = require('vs/../../../../packages/vscode/src/workbench').workbench.retry.register('Searcher', connect);\n        retry.run();\n    }\n    DiskSearch.prototype.textSearch = function (query, onProgress, token) {\n        var _this = this;\n        var folderQueries = query.folderQueries || [];\n        return Promise.all(folderQueries.map(function (q) { return q.folder.scheme === network_1.Schemas.file && pfs.exists(q.folder.fsPath); }))\n            .then(function (exists) {\n            if (token && token.isCancellationRequested) {\n                throw errors_1.canceled();\n            }\n            query.folderQueries = folderQueries.filter(function (q, index) { return exists[index]; });\n            var event = _this.raw.textSearch(query);\n            return DiskSearch.collectResultsFromEvent(event, onProgress, token);\n        });\n    };\n    DiskSearch.prototype.fileSearch = function (query, token) {\n        var _this = this;\n        var folderQueries = query.folderQueries || [];\n        return Promise.all(folderQueries.map(function (q) { return q.folder.scheme === network_1.Schemas.file && pfs.exists(q.folder.fsPath); }))\n            .then(function (exists) {\n            if (token && token.isCancellationRequested) {\n                throw errors_1.canceled();\n            }\n            query.folderQueries = folderQueries.filter(function (q, index) { return exists[index]; });\n            var event;\n            event = _this.raw.fileSearch(query);\n            var onProgress = function (p) {\n                if (p.message) {\n                    // Should only be for logs\n                    _this.logService.debug('SearchService#search', p.message);\n                }\n            };\n            return DiskSearch.collectResultsFromEvent(event, onProgress, token);\n        });\n    };\n    /**\n     * Public for test\n     */\n    DiskSearch.collectResultsFromEvent = function (event, onProgress, token) {\n        var _this = this;\n        var result = [];\n        var listener;\n        return new Promise(function (c, e) {\n            if (token) {\n                token.onCancellationRequested(function () {\n                    if (listener) {\n                        listener.dispose();\n                    }\n                    e(errors_1.canceled());\n                });\n            }\n            listener = event(function (ev) {\n                if (search_1.isSerializedSearchComplete(ev)) {\n                    if (search_1.isSerializedSearchSuccess(ev)) {\n                        c({\n                            limitHit: ev.limitHit,\n                            results: result,\n                            stats: ev.stats\n                        });\n                    }\n                    else {\n                        e(ev.error);\n                    }\n                    listener.dispose();\n                }\n                else {\n                    // Matches\n                    if (Array.isArray(ev)) {\n                        var fileMatches = ev.map(function (d) { return _this.createFileMatch(d); });\n                        result = result.concat(fileMatches);\n                        if (onProgress) {\n                            fileMatches.forEach(onProgress);\n                        }\n                    }\n                    // Match\n                    else if (ev.path) {\n                        var fileMatch = _this.createFileMatch(ev);\n                        result.push(fileMatch);\n                        if (onProgress) {\n                            onProgress(fileMatch);\n                        }\n                    }\n                    // Progress\n                    else if (onProgress) {\n                        onProgress(ev);\n                    }\n                }\n            });\n        });\n    };\n    DiskSearch.createFileMatch = function (data) {\n        var _a;\n        var fileMatch = new search_1.FileMatch(uri_1.URI.file(data.path));\n        if (data.results) {\n            // const matches = data.results.filter(resultIsMatch);\n            (_a = fileMatch.results).push.apply(_a, data.results);\n        }\n        return fileMatch;\n    };\n    DiskSearch.prototype.clearCache = function (cacheKey) {\n        return this.raw.clearCache(cacheKey);\n    };\n    DiskSearch = tslib_1.__decorate([\n        tslib_1.__param(2, log_1.ILogService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], DiskSearch);\n    return DiskSearch;\n}());\nexports.DiskSearch = DiskSearch;\nextensions_1.registerSingleton(search_1.ISearchService, SearchService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\nimport * as arrays from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { keys, ResourceMap, values } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { getNextTickChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client, IIPCOptions } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDebugParams, IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { deserializeSearchError, FileMatch, ICachedSearchStats, IFileMatch, IFileQuery, IFileSearchStats, IFolderQuery, IProgressMessage, IRawSearchService, ISearchComplete, ISearchConfiguration, ISearchEngineStats, ISearchProgressItem, ISearchQuery, ISearchResultProvider, ISearchService, ISerializedFileMatch, ISerializedSearchComplete, ISerializedSearchProgressItem, isSerializedSearchComplete, isSerializedSearchSuccess, ITextQuery, pathIncludedInQuery, QueryType, SearchError, SearchErrorCode, SearchProviderType, isFileMatch, isProgressMessage } from 'vs/workbench/services/search/common/search';\nimport { addContextToEditorMatches, editorMatchesToTextSearchResults } from 'vs/workbench/services/search/common/searchHelpers';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { SearchChannelClient } from './searchIpc';\n\nexport class SearchService extends Disposable implements ISearchService {\n\t_serviceBrand: any;\n\n\tprivate diskSearch: DiskSearch;\n\tprivate readonly fileSearchProviders = new Map<string, ISearchResultProvider>();\n\tprivate readonly textSearchProviders = new Map<string, ISearchResultProvider>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t\tthis.diskSearch = this.instantiationService.createInstance(DiskSearch, !environmentService.isBuilt || environmentService.verbose, environmentService.debugSearch);\n\t}\n\n\tregisterSearchResultProvider(scheme: string, type: SearchProviderType, provider: ISearchResultProvider): IDisposable {\n\t\tlet list: Map<string, ISearchResultProvider>;\n\t\tif (type === SearchProviderType.file) {\n\t\t\tlist = this.fileSearchProviders;\n\t\t} else if (type === SearchProviderType.text) {\n\t\t\tlist = this.textSearchProviders;\n\t\t} else {\n\t\t\tthrow new Error('Unknown SearchProviderType');\n\t\t}\n\n\t\tlist.set(scheme, provider);\n\n\t\treturn toDisposable(() => {\n\t\t\tlist.delete(scheme);\n\t\t});\n\t}\n\n\ttextSearch(query: ITextQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\t// Get local results from dirty/untitled\n\t\tconst localResults = this.getLocalResults(query);\n\n\t\tif (onProgress) {\n\t\t\tarrays.coalesce(localResults.values()).forEach(onProgress);\n\t\t}\n\n\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t// Match\n\t\t\t\tif (!localResults.has(progress.resource) && onProgress) { // don't override local results\n\t\t\t\t\tonProgress(progress);\n\t\t\t\t}\n\t\t\t} else if (onProgress) {\n\t\t\t\t// Progress\n\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t}\n\n\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\tthis.logService.debug('SearchService#search', progress.message);\n\t\t\t}\n\t\t};\n\n\t\treturn this.doSearch(query, token, onProviderProgress);\n\t}\n\n\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, token);\n\t}\n\n\tprivate doSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tthis.logService.trace('SearchService#search', JSON.stringify(query));\n\n\t\tconst schemesInQuery = this.getSchemesInQuery(query);\n\n\t\tconst providerActivations: Promise<any>[] = [Promise.resolve(null)];\n\t\tschemesInQuery.forEach(scheme => providerActivations.push(this.extensionService.activateByEvent(`onSearch:${scheme}`)));\n\t\tproviderActivations.push(this.extensionService.activateByEvent('onSearch:file'));\n\n\t\tconst providerPromise = Promise.all(providerActivations)\n\t\t\t.then(() => this.extensionService.whenInstalledExtensionsRegistered())\n\t\t\t.then(() => {\n\t\t\t\t// Cancel faster if search was canceled while waiting for extensions\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\treturn Promise.reject(canceled());\n\t\t\t\t}\n\n\t\t\t\tconst progressCallback = (item: ISearchProgressItem) => {\n\t\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\tonProgress(item);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn this.searchWithProviders(query, progressCallback, token);\n\t\t\t})\n\t\t\t.then(completes => {\n\t\t\t\tcompletes = arrays.coalesce(completes);\n\t\t\t\tif (!completes.length) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlimitHit: false,\n\t\t\t\t\t\tresults: []\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn <ISearchComplete>{\n\t\t\t\t\tlimitHit: completes[0] && completes[0].limitHit,\n\t\t\t\t\tstats: completes[0].stats,\n\t\t\t\t\tresults: arrays.flatten(completes.map((c: ISearchComplete) => c.results))\n\t\t\t\t};\n\t\t\t});\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (token) {\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\treject(canceled());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tproviderPromise.then(resolve, reject);\n\t\t});\n\t}\n\n\tprivate getSchemesInQuery(query: ISearchQuery): Set<string> {\n\t\tconst schemes = new Set<string>();\n\t\tif (query.folderQueries) {\n\t\t\tquery.folderQueries.forEach(fq => schemes.add(fq.folder.scheme));\n\t\t}\n\n\t\tif (query.extraFileResources) {\n\t\t\tquery.extraFileResources.forEach(extraFile => schemes.add(extraFile.scheme));\n\t\t}\n\n\t\treturn schemes;\n\t}\n\n\tprivate searchWithProviders(query: ISearchQuery, onProviderProgress: (progress: ISearchProgressItem) => void, token?: CancellationToken) {\n\t\tconst e2eSW = StopWatch.create(false);\n\n\t\tconst diskSearchQueries: IFolderQuery[] = [];\n\t\tconst searchPs: Promise<ISearchComplete>[] = [];\n\n\t\tconst fqs = this.groupFolderQueriesByScheme(query);\n\t\tkeys(fqs).forEach(scheme => {\n\t\t\tconst schemeFQs = fqs.get(scheme)!;\n\t\t\tconst provider = query.type === QueryType.File ?\n\t\t\t\tthis.fileSearchProviders.get(scheme) :\n\t\t\t\tthis.textSearchProviders.get(scheme);\n\n\t\t\tif (!provider && scheme === 'file') {\n\t\t\t\tdiskSearchQueries.push(...schemeFQs);\n\t\t\t} else if (!provider) {\n\t\t\t\tconsole.warn('No search provider registered for scheme: ' + scheme);\n\t\t\t} else {\n\t\t\t\tconst oneSchemeQuery: ISearchQuery = {\n\t\t\t\t\t...query,\n\t\t\t\t\t...{\n\t\t\t\t\t\tfolderQueries: schemeFQs\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tsearchPs.push(query.type === QueryType.File ?\n\t\t\t\t\tprovider.fileSearch(<IFileQuery>oneSchemeQuery, token) :\n\t\t\t\t\tprovider.textSearch(<ITextQuery>oneSchemeQuery, onProviderProgress, token));\n\t\t\t}\n\t\t});\n\n\t\tconst diskSearchExtraFileResources = query.extraFileResources && query.extraFileResources.filter(res => res.scheme === Schemas.file);\n\n\t\tif (diskSearchQueries.length || diskSearchExtraFileResources) {\n\t\t\tconst diskSearchQuery: ISearchQuery = {\n\t\t\t\t...query,\n\t\t\t\t...{\n\t\t\t\t\tfolderQueries: diskSearchQueries\n\t\t\t\t},\n\t\t\t\textraFileResources: diskSearchExtraFileResources\n\t\t\t};\n\n\t\t\tsearchPs.push(diskSearchQuery.type === QueryType.File ?\n\t\t\t\tthis.diskSearch.fileSearch(diskSearchQuery, token) :\n\t\t\t\tthis.diskSearch.textSearch(diskSearchQuery, onProviderProgress, token));\n\t\t}\n\n\t\treturn Promise.all(searchPs).then(completes => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tcompletes.forEach(complete => {\n\t\t\t\tthis.sendTelemetry(query, endToEndTime, complete);\n\t\t\t});\n\t\t\treturn completes;\n\t\t}, err => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tconst searchError = deserializeSearchError(err.message);\n\t\t\tthis.sendTelemetry(query, endToEndTime, undefined, searchError);\n\n\t\t\tthrow searchError;\n\t\t});\n\t}\n\n\tprivate groupFolderQueriesByScheme(query: ISearchQuery): Map<string, IFolderQuery[]> {\n\t\tconst queries = new Map<string, IFolderQuery[]>();\n\n\t\tquery.folderQueries.forEach(fq => {\n\t\t\tconst schemeFQs = queries.get(fq.folder.scheme) || [];\n\t\t\tschemeFQs.push(fq);\n\n\t\t\tqueries.set(fq.folder.scheme, schemeFQs);\n\t\t});\n\n\t\treturn queries;\n\t}\n\n\tprivate sendTelemetry(query: ISearchQuery, endToEndTime: number, complete?: ISearchComplete, err?: SearchError): void {\n\t\tconst fileSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme === 'file');\n\t\tconst otherSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme !== 'file');\n\t\tconst scheme = fileSchemeOnly ? 'file' :\n\t\t\totherSchemeOnly ? 'other' :\n\t\t\t\t'mixed';\n\n\t\tif (query.type === QueryType.File && complete && complete.stats) {\n\t\t\tconst fileSearchStats = complete.stats as IFileSearchStats;\n\t\t\tif (fileSearchStats.fromCache) {\n\t\t\t\tconst cacheStats: ICachedSearchStats = fileSearchStats.detailStats as ICachedSearchStats;\n\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"cachedSearchComplete\" : {\n\t\t\t\t\t\t\"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\"  },\n\t\t\t\t\t\t\"resultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true  },\n\t\t\t\t\t\t\"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true  },\n\t\t\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\t\"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"sortingTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"cacheWasResolved\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\t\"cacheLookupTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"cacheFilterTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"cacheEntryCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t\t\t}\n\t\t\t\t */\n\t\t\t\tthis.telemetryService.publicLog('cachedSearchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\ttype: fileSearchStats.type,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tcacheWasResolved: cacheStats.cacheWasResolved,\n\t\t\t\t\tcacheLookupTime: cacheStats.cacheLookupTime,\n\t\t\t\t\tcacheFilterTime: cacheStats.cacheFilterTime,\n\t\t\t\t\tcacheEntryCount: cacheStats.cacheEntryCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst searchEngineStats: ISearchEngineStats = fileSearchStats.detailStats as ISearchEngineStats;\n\n\t\t\t\t/* __GDPR__\n\t\t\t\t\t\"searchComplete\" : {\n\t\t\t\t\t\t\"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\t\"resultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\t\"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"sortingTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"fileWalkTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"directoriesWalked\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"filesWalked\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"cmdTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"cmdResultCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\t\"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t\t\t}\n\t\t\t\t */\n\t\t\t\tthis.telemetryService.publicLog('searchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\ttype: fileSearchStats.type,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tfileWalkTime: searchEngineStats.fileWalkTime,\n\t\t\t\t\tdirectoriesWalked: searchEngineStats.directoriesWalked,\n\t\t\t\t\tfilesWalked: searchEngineStats.filesWalked,\n\t\t\t\t\tcmdTime: searchEngineStats.cmdTime,\n\t\t\t\t\tcmdResultCount: searchEngineStats.cmdResultCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (query.type === QueryType.Text) {\n\t\t\tlet errorType: string | undefined;\n\t\t\tif (err) {\n\t\t\t\terrorType = err.code === SearchErrorCode.regexParseError ? 'regex' :\n\t\t\t\t\terr.code === SearchErrorCode.unknownEncoding ? 'encoding' :\n\t\t\t\t\t\terr.code === SearchErrorCode.globParseError ? 'glob' :\n\t\t\t\t\t\t\terr.code === SearchErrorCode.invalidLiteral ? 'literal' :\n\t\t\t\t\t\t\t\terr.code === SearchErrorCode.other ? 'other' :\n\t\t\t\t\t\t\t\t\t'unknown';\n\t\t\t}\n\n\t\t\t/* __GDPR__\n\t\t\t\t\"textSearchComplete\" : {\n\t\t\t\t\t\"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"workspaceFolderCount\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\"endToEndTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\", \"isMeasurement\": true },\n\t\t\t\t\t\"scheme\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"error\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"useRipgrep\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n\t\t\t\t\t\"usePCRE2\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\t\t\t\t}\n\t\t\t */\n\t\t\tthis.telemetryService.publicLog('textSearchComplete', {\n\t\t\t\treason: query._reason,\n\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\tscheme,\n\t\t\t\terror: errorType,\n\t\t\t\tusePCRE2: !!query.usePCRE2\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getLocalResults(query: ITextQuery): ResourceMap<IFileMatch | null> {\n\t\tconst localResults = new ResourceMap<IFileMatch | null>();\n\n\t\tif (query.type === QueryType.Text) {\n\t\t\tconst models = this.modelService.getModels();\n\t\t\tmodels.forEach((model) => {\n\t\t\t\tconst resource = model.uri;\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.editorService.isOpen({ resource })) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Support untitled files\n\t\t\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\t\t\tif (!this.untitledEditorService.exists(resource)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Block walkthrough, webview, etc.\n\t\t\t\telse if (!this.fileService.canHandleResource(resource)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.matches(resource, query)) {\n\t\t\t\t\treturn; // respect user filters\n\t\t\t\t}\n\n\t\t\t\t// Use editor API to find matches\n\t\t\t\tconst matches = model.findMatches(query.contentPattern.pattern, false, !!query.contentPattern.isRegExp, !!query.contentPattern.isCaseSensitive, query.contentPattern.isWordMatch ? query.contentPattern.wordSeparators! : null, false, query.maxResults);\n\t\t\t\tif (matches.length) {\n\t\t\t\t\tconst fileMatch = new FileMatch(resource);\n\t\t\t\t\tlocalResults.set(resource, fileMatch);\n\n\t\t\t\t\tconst textSearchResults = editorMatchesToTextSearchResults(matches, model, query.previewOptions);\n\t\t\t\t\tfileMatch.results = addContextToEditorMatches(textSearchResults, model, query);\n\t\t\t\t} else {\n\t\t\t\t\tlocalResults.set(resource, null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn localResults;\n\t}\n\n\tprivate matches(resource: uri, query: ITextQuery): boolean {\n\t\treturn pathIncludedInQuery(query, resource.fsPath);\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\tconst clearPs = [\n\t\t\tthis.diskSearch,\n\t\t\t...values(this.fileSearchProviders)\n\t\t].map(provider => provider && provider.clearCache(cacheKey));\n\n\t\treturn Promise.all(clearPs)\n\t\t\t.then(() => { });\n\t}\n}\n\nexport class DiskSearch implements ISearchResultProvider {\n\tprivate raw: IRawSearchService;\n\n\tprivate toDispose: IDisposable[] = [];\n\tconstructor(\n\t\tverboseLogging: boolean,\n\t\tsearchDebug: IDebugParams | undefined,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configService: IConfigurationService,\n\t) {\n\t\tconst timeout = this.configService.getValue<ISearchConfiguration>().search.maintainFileSearchCache ?\n\t\t\tNumber.MAX_VALUE :\n\t\t\t60 * 60 * 1000;\n\n\t\tconst opts: IIPCOptions = {\n\t\t\tserverName: 'Search',\n\t\t\ttimeout,\n\t\t\targs: ['--type=searchService'],\n\t\t\t// See https://github.com/Microsoft/vscode/issues/27665\n\t\t\t// Pass in fresh execArgv to the forked process such that it doesn't inherit them from `process.execArgv`.\n\t\t\t// e.g. Launching the extension host process with `--inspect-brk=xxx` and then forking a process from the extension host\n\t\t\t// results in the forked process inheriting `--inspect-brk=xxx`.\n\t\t\tfreshExecArgv: true,\n\t\t\tenv: {\n\t\t\t\tAMD_ENTRYPOINT: 'vs/workbench/services/search/node/searchApp',\n\t\t\t\tPIPE_LOGGING: 'true',\n\t\t\t\tVERBOSE_LOGGING: verboseLogging\n\t\t\t},\n\t\t\tuseQueue: true\n\t\t};\n\n\t\tif (searchDebug) {\n\t\t\tif (searchDebug.break && searchDebug.port) {\n\t\t\t\topts.debugBrk = searchDebug.port;\n\t\t\t} else if (!searchDebug.break && searchDebug.port) {\n\t\t\t\topts.debug = searchDebug.port;\n\t\t\t}\n\t\t}\n\n\t\tconst connect = (): Promise<void> => {\n\t\t\tconst client = new Client(\n\t\t\t\tgetPathFromAmdModule(require, 'bootstrap-fork'),\n\t\t\t\topts);\n\t\t\tclient.onDidProcessExit(() => {\n\t\t\t\tthis.toDispose = dispose(this.toDispose);\n\t\t\t\tretry.run();\n\t\t\t}, null, this.toDispose);\n\t\t\tthis.toDispose.push(client);\n\t\t\tconst channel = getNextTickChannel(client.getChannel('search'));\n\t\t\tthis.raw = new SearchChannelClient(channel);\n\t\t\treturn this.raw.clearCache('test-connectivity');\n\t\t};\n\t\tconst retry = (require('vs/../../../../packages/vscode/src/workbench') as typeof import ('vs/../../../../packages/vscode/src/workbench')).workbench.retry.register('Searcher', connect);\n\t\tretry.run();\n\t}\n\n\ttextSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tconst folderQueries = query.folderQueries || [];\n\t\treturn Promise.all(folderQueries.map(q => q.folder.scheme === Schemas.file && pfs.exists(q.folder.fsPath)))\n\t\t\t.then(exists => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\tthrow canceled();\n\t\t\t\t}\n\n\t\t\t\tquery.folderQueries = folderQueries.filter((q, index) => exists[index]);\n\t\t\t\tconst event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete> = this.raw.textSearch(query);\n\n\t\t\t\treturn DiskSearch.collectResultsFromEvent(event, onProgress, token);\n\t\t\t});\n\t}\n\n\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tconst folderQueries = query.folderQueries || [];\n\t\treturn Promise.all(folderQueries.map(q => q.folder.scheme === Schemas.file && pfs.exists(q.folder.fsPath)))\n\t\t\t.then(exists => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\tthrow canceled();\n\t\t\t\t}\n\n\t\t\t\tquery.folderQueries = folderQueries.filter((q, index) => exists[index]);\n\t\t\t\tlet event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete>;\n\t\t\t\tevent = this.raw.fileSearch(query);\n\n\t\t\t\tconst onProgress = (p: IProgressMessage) => {\n\t\t\t\t\tif (p.message) {\n\t\t\t\t\t\t// Should only be for logs\n\t\t\t\t\t\tthis.logService.debug('SearchService#search', p.message);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn DiskSearch.collectResultsFromEvent(event, onProgress, token);\n\t\t\t});\n\t}\n\n\t/**\n\t * Public for test\n\t */\n\tstatic collectResultsFromEvent(event: Event<ISerializedSearchProgressItem | ISerializedSearchComplete>, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\tlet result: IFileMatch[] = [];\n\n\t\tlet listener: IDisposable;\n\t\treturn new Promise<ISearchComplete>((c, e) => {\n\t\t\tif (token) {\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t}\n\n\t\t\t\t\te(canceled());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlistener = event(ev => {\n\t\t\t\tif (isSerializedSearchComplete(ev)) {\n\t\t\t\t\tif (isSerializedSearchSuccess(ev)) {\n\t\t\t\t\t\tc({\n\t\t\t\t\t\t\tlimitHit: ev.limitHit,\n\t\t\t\t\t\t\tresults: result,\n\t\t\t\t\t\t\tstats: ev.stats\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\te(ev.error);\n\t\t\t\t\t}\n\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t} else {\n\t\t\t\t\t// Matches\n\t\t\t\t\tif (Array.isArray(ev)) {\n\t\t\t\t\t\tconst fileMatches = ev.map(d => this.createFileMatch(d));\n\t\t\t\t\t\tresult = result.concat(fileMatches);\n\t\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\t\tfileMatches.forEach(onProgress);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Match\n\t\t\t\t\telse if ((<ISerializedFileMatch>ev).path) {\n\t\t\t\t\t\tconst fileMatch = this.createFileMatch(<ISerializedFileMatch>ev);\n\t\t\t\t\t\tresult.push(fileMatch);\n\n\t\t\t\t\t\tif (onProgress) {\n\t\t\t\t\t\t\tonProgress(fileMatch);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Progress\n\t\t\t\t\telse if (onProgress) {\n\t\t\t\t\t\tonProgress(<IProgressMessage>ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static createFileMatch(data: ISerializedFileMatch): FileMatch {\n\t\tconst fileMatch = new FileMatch(uri.file(data.path));\n\t\tif (data.results) {\n\t\t\t// const matches = data.results.filter(resultIsMatch);\n\t\t\tfileMatch.results.push(...data.results);\n\t\t}\n\t\treturn fileMatch;\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn this.raw.clearCache(cacheKey);\n\t}\n}\n\nregisterSingleton(ISearchService, SearchService, true);"]}]}