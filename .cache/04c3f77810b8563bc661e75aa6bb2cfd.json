{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/editors/fileEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/editors/fileEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar path_1 = require(\"vs/base/common/path\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar binaryEditorModel_1 = require(\"vs/workbench/common/editor/binaryEditorModel\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar resolverService_1 = require(\"vs/editor/common/services/resolverService\");\nvar files_2 = require(\"vs/workbench/contrib/files/common/files\");\nvar label_1 = require(\"vs/platform/label/common/label\");\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nvar FileEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(FileEditorInput, _super);\n    /**\n     * An editor input who's contents are retrieved from file services.\n     */\n    function FileEditorInput(resource, preferredEncoding, instantiationService, textFileService, textModelResolverService, labelService) {\n        var _this = _super.call(this) || this;\n        _this.resource = resource;\n        _this.instantiationService = instantiationService;\n        _this.textFileService = textFileService;\n        _this.textModelResolverService = textModelResolverService;\n        _this.labelService = labelService;\n        if (preferredEncoding) {\n            _this.setPreferredEncoding(preferredEncoding);\n        }\n        _this.registerListeners();\n        return _this;\n    }\n    FileEditorInput.prototype.registerListeners = function () {\n        var _this = this;\n        // Model changes\n        this._register(this.textFileService.models.onModelDirty(function (e) { return _this.onDirtyStateChange(e); }));\n        this._register(this.textFileService.models.onModelSaveError(function (e) { return _this.onDirtyStateChange(e); }));\n        this._register(this.textFileService.models.onModelSaved(function (e) { return _this.onDirtyStateChange(e); }));\n        this._register(this.textFileService.models.onModelReverted(function (e) { return _this.onDirtyStateChange(e); }));\n        this._register(this.textFileService.models.onModelOrphanedChanged(function (e) { return _this.onModelOrphanedChanged(e); }));\n    };\n    FileEditorInput.prototype.onDirtyStateChange = function (e) {\n        if (e.resource.toString() === this.resource.toString()) {\n            this._onDidChangeDirty.fire();\n        }\n    };\n    FileEditorInput.prototype.onModelOrphanedChanged = function (e) {\n        if (e.resource.toString() === this.resource.toString()) {\n            this._onDidChangeLabel.fire();\n        }\n    };\n    FileEditorInput.prototype.getResource = function () {\n        return this.resource;\n    };\n    FileEditorInput.prototype.getEncoding = function () {\n        var textModel = this.textFileService.models.get(this.resource);\n        if (textModel) {\n            return textModel.getEncoding();\n        }\n        return this.preferredEncoding;\n    };\n    FileEditorInput.prototype.getPreferredEncoding = function () {\n        return this.preferredEncoding;\n    };\n    FileEditorInput.prototype.setEncoding = function (encoding, mode) {\n        this.preferredEncoding = encoding;\n        var textModel = this.textFileService.models.get(this.resource);\n        if (textModel) {\n            textModel.setEncoding(encoding, mode);\n        }\n    };\n    FileEditorInput.prototype.setPreferredEncoding = function (encoding) {\n        this.preferredEncoding = encoding;\n        this.forceOpenAsText = true; // encoding is a good hint to open the file as text\n    };\n    FileEditorInput.prototype.setForceOpenAsText = function () {\n        this.forceOpenAsText = true;\n        this.forceOpenAsBinary = false;\n    };\n    FileEditorInput.prototype.setForceOpenAsBinary = function () {\n        this.forceOpenAsBinary = true;\n        this.forceOpenAsText = false;\n    };\n    FileEditorInput.prototype.getTypeId = function () {\n        return files_2.FILE_EDITOR_INPUT_ID;\n    };\n    FileEditorInput.prototype.getName = function () {\n        if (!this.name) {\n            this.name = resources_1.basenameOrAuthority(this.resource);\n        }\n        return this.decorateLabel(this.name);\n    };\n    Object.defineProperty(FileEditorInput.prototype, \"shortDescription\", {\n        get: function () {\n            return path_1.basename(this.labelService.getUriLabel(resources_1.dirname(this.resource)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileEditorInput.prototype, \"mediumDescription\", {\n        get: function () {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource), { relative: true });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileEditorInput.prototype, \"longDescription\", {\n        get: function () {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FileEditorInput.prototype.getDescription = function (verbosity) {\n        if (verbosity === void 0) { verbosity = editor_1.Verbosity.MEDIUM; }\n        var description;\n        switch (verbosity) {\n            case editor_1.Verbosity.SHORT:\n                description = this.shortDescription;\n                break;\n            case editor_1.Verbosity.LONG:\n                description = this.longDescription;\n                break;\n            case editor_1.Verbosity.MEDIUM:\n            default:\n                description = this.mediumDescription;\n                break;\n        }\n        return description;\n    };\n    Object.defineProperty(FileEditorInput.prototype, \"shortTitle\", {\n        get: function () {\n            return this.getName();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileEditorInput.prototype, \"mediumTitle\", {\n        get: function () {\n            return this.labelService.getUriLabel(this.resource, { relative: true });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileEditorInput.prototype, \"longTitle\", {\n        get: function () {\n            return this.labelService.getUriLabel(this.resource);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FileEditorInput.prototype.getTitle = function (verbosity) {\n        var title;\n        switch (verbosity) {\n            case editor_1.Verbosity.SHORT:\n                title = this.shortTitle;\n                break;\n            default:\n            case editor_1.Verbosity.MEDIUM:\n                title = this.mediumTitle;\n                break;\n            case editor_1.Verbosity.LONG:\n                title = this.longTitle;\n                break;\n        }\n        return this.decorateLabel(title);\n    };\n    FileEditorInput.prototype.decorateLabel = function (label) {\n        var model = this.textFileService.models.get(this.resource);\n        if (model && model.hasState(textfiles_1.ModelState.ORPHAN)) {\n            return nls_1.localize('orphanedFile', \"{0} (deleted from disk)\", label);\n        }\n        if (model && model.isReadonly()) {\n            return nls_1.localize('readonlyFile', \"{0} (read-only)\", label);\n        }\n        return label;\n    };\n    FileEditorInput.prototype.isDirty = function () {\n        var model = this.textFileService.models.get(this.resource);\n        if (!model) {\n            return false;\n        }\n        if (model.hasState(textfiles_1.ModelState.CONFLICT) || model.hasState(textfiles_1.ModelState.ERROR)) {\n            return true; // always indicate dirty state if we are in conflict or error state\n        }\n        if (this.textFileService.getAutoSaveMode() === textfiles_1.AutoSaveMode.AFTER_SHORT_DELAY) {\n            return false; // fast auto save enabled so we do not declare dirty\n        }\n        return model.isDirty();\n    };\n    FileEditorInput.prototype.confirmSave = function () {\n        return this.textFileService.confirmSave([this.resource]);\n    };\n    FileEditorInput.prototype.save = function () {\n        return this.textFileService.save(this.resource);\n    };\n    FileEditorInput.prototype.revert = function (options) {\n        return this.textFileService.revert(this.resource, options);\n    };\n    FileEditorInput.prototype.getPreferredEditorId = function (candidates) {\n        return this.forceOpenAsBinary ? files_2.BINARY_FILE_EDITOR_ID : files_2.TEXT_FILE_EDITOR_ID;\n    };\n    FileEditorInput.prototype.resolve = function () {\n        // Resolve as binary\n        if (this.forceOpenAsBinary) {\n            return this.doResolveAsBinary();\n        }\n        // Resolve as text\n        return this.doResolveAsText();\n    };\n    FileEditorInput.prototype.doResolveAsText = function () {\n        var _this = this;\n        // Resolve as text\n        return this.textFileService.models.loadOrCreate(this.resource, {\n            encoding: this.preferredEncoding,\n            reload: { async: true },\n            allowBinary: this.forceOpenAsText,\n            reason: textfiles_1.LoadReason.EDITOR\n        }).then(function (model) {\n            // This is a bit ugly, because we first resolve the model and then resolve a model reference. the reason being that binary\n            // or very large files do not resolve to a text file model but should be opened as binary files without text. First calling into\n            // loadOrCreate ensures we are not creating model references for these kind of resources.\n            // In addition we have a bit of payload to take into account (encoding, reload) that the text resolver does not handle yet.\n            if (!_this.textModelReference) {\n                _this.textModelReference = _this.textModelResolverService.createModelReference(_this.resource);\n            }\n            return _this.textModelReference.then(function (ref) { return ref.object; });\n        }, function (error) {\n            // In case of an error that indicates that the file is binary or too large, just return with the binary editor model\n            if (error.fileOperationResult === files_1.FileOperationResult.FILE_IS_BINARY || error.fileOperationResult === files_1.FileOperationResult.FILE_TOO_LARGE) {\n                return _this.doResolveAsBinary();\n            }\n            // Bubble any other error up\n            return Promise.reject(error);\n        });\n    };\n    FileEditorInput.prototype.doResolveAsBinary = function () {\n        return this.instantiationService.createInstance(binaryEditorModel_1.BinaryEditorModel, this.resource, this.getName()).load().then(function (m) { return m; });\n    };\n    FileEditorInput.prototype.isResolved = function () {\n        return !!this.textFileService.models.get(this.resource);\n    };\n    FileEditorInput.prototype.dispose = function () {\n        // Model reference\n        if (this.textModelReference) {\n            this.textModelReference.then(function (ref) { return ref.dispose(); });\n            this.textModelReference = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    FileEditorInput.prototype.matches = function (otherInput) {\n        if (_super.prototype.matches.call(this, otherInput) === true) {\n            return true;\n        }\n        if (otherInput) {\n            return otherInput instanceof FileEditorInput && otherInput.resource.toString() === this.resource.toString();\n        }\n        return false;\n    };\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"shortDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"mediumDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"longDescription\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"shortTitle\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"mediumTitle\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], FileEditorInput.prototype, \"longTitle\", null);\n    FileEditorInput = tslib_1.__decorate([\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, textfiles_1.ITextFileService),\n        tslib_1.__param(4, resolverService_1.ITextModelService),\n        tslib_1.__param(5, label_1.ILabelService)\n    ], FileEditorInput);\n    return FileEditorInput;\n}(editor_1.EditorInput));\nexports.FileEditorInput = FileEditorInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/editors/fileEditorInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/editors/fileEditorInput.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { memoize } from 'vs/base/common/decorators';\nimport { basename } from 'vs/base/common/path';\nimport { basenameOrAuthority, dirname } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { EncodingMode, ConfirmResult, EditorInput, IFileEditorInput, ITextEditorModel, Verbosity, IRevertOptions } from 'vs/workbench/common/editor';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { ITextFileService, AutoSaveMode, ModelState, TextFileModelChangeEvent, LoadReason } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { FILE_EDITOR_INPUT_ID, TEXT_FILE_EDITOR_ID, BINARY_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nexport class FileEditorInput extends EditorInput implements IFileEditorInput {\n\tprivate preferredEncoding: string;\n\tprivate forceOpenAsBinary: boolean;\n\tprivate forceOpenAsText: boolean;\n\tprivate textModelReference: Promise<IReference<ITextEditorModel>> | null;\n\tprivate name: string;\n\n\t/**\n\t * An editor input who's contents are retrieved from file services.\n\t */\n\tconstructor(\n\t\tprivate resource: URI,\n\t\tpreferredEncoding: string | undefined,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ILabelService private readonly labelService: ILabelService\n\t) {\n\t\tsuper();\n\n\t\tif (preferredEncoding) {\n\t\t\tthis.setPreferredEncoding(preferredEncoding);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Model changes\n\t\tthis._register(this.textFileService.models.onModelDirty(e => this.onDirtyStateChange(e)));\n\t\tthis._register(this.textFileService.models.onModelSaveError(e => this.onDirtyStateChange(e)));\n\t\tthis._register(this.textFileService.models.onModelSaved(e => this.onDirtyStateChange(e)));\n\t\tthis._register(this.textFileService.models.onModelReverted(e => this.onDirtyStateChange(e)));\n\t\tthis._register(this.textFileService.models.onModelOrphanedChanged(e => this.onModelOrphanedChanged(e)));\n\t}\n\n\tprivate onDirtyStateChange(e: TextFileModelChangeEvent): void {\n\t\tif (e.resource.toString() === this.resource.toString()) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tprivate onModelOrphanedChanged(e: TextFileModelChangeEvent): void {\n\t\tif (e.resource.toString() === this.resource.toString()) {\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tgetEncoding(): string {\n\t\tconst textModel = this.textFileService.models.get(this.resource);\n\t\tif (textModel) {\n\t\t\treturn textModel.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tgetPreferredEncoding(): string {\n\t\treturn this.preferredEncoding;\n\t}\n\n\tsetEncoding(encoding: string, mode: EncodingMode): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\tconst textModel = this.textFileService.models.get(this.resource);\n\t\tif (textModel) {\n\t\t\ttextModel.setEncoding(encoding, mode);\n\t\t}\n\t}\n\n\tsetPreferredEncoding(encoding: string): void {\n\t\tthis.preferredEncoding = encoding;\n\t\tthis.forceOpenAsText = true; // encoding is a good hint to open the file as text\n\t}\n\n\tsetForceOpenAsText(): void {\n\t\tthis.forceOpenAsText = true;\n\t\tthis.forceOpenAsBinary = false;\n\t}\n\n\tsetForceOpenAsBinary(): void {\n\t\tthis.forceOpenAsBinary = true;\n\t\tthis.forceOpenAsText = false;\n\t}\n\n\tgetTypeId(): string {\n\t\treturn FILE_EDITOR_INPUT_ID;\n\t}\n\n\tgetName(): string {\n\t\tif (!this.name) {\n\t\t\tthis.name = basenameOrAuthority(this.resource);\n\t\t}\n\n\t\treturn this.decorateLabel(this.name);\n\t}\n\n\t@memoize\n\tprivate get shortDescription(): string {\n\t\treturn basename(this.labelService.getUriLabel(dirname(this.resource)));\n\t}\n\n\t@memoize\n\tprivate get mediumDescription(): string {\n\t\treturn this.labelService.getUriLabel(dirname(this.resource), { relative: true });\n\t}\n\n\t@memoize\n\tprivate get longDescription(): string {\n\t\treturn this.labelService.getUriLabel(dirname(this.resource));\n\t}\n\n\tgetDescription(verbosity: Verbosity = Verbosity.MEDIUM): string {\n\t\tlet description: string;\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\tdescription = this.shortDescription;\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\tdescription = this.longDescription;\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\tdefault:\n\t\t\t\tdescription = this.mediumDescription;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn description;\n\t}\n\n\t@memoize\n\tprivate get shortTitle(): string {\n\t\treturn this.getName();\n\t}\n\n\t@memoize\n\tprivate get mediumTitle(): string {\n\t\treturn this.labelService.getUriLabel(this.resource, { relative: true });\n\t}\n\n\t@memoize\n\tprivate get longTitle(): string {\n\t\treturn this.labelService.getUriLabel(this.resource);\n\t}\n\n\tgetTitle(verbosity: Verbosity): string {\n\t\tlet title: string;\n\t\tswitch (verbosity) {\n\t\t\tcase Verbosity.SHORT:\n\t\t\t\ttitle = this.shortTitle;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\tcase Verbosity.MEDIUM:\n\t\t\t\ttitle = this.mediumTitle;\n\t\t\t\tbreak;\n\t\t\tcase Verbosity.LONG:\n\t\t\t\ttitle = this.longTitle;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn this.decorateLabel(title);\n\t}\n\n\tprivate decorateLabel(label: string): string {\n\t\tconst model = this.textFileService.models.get(this.resource);\n\t\tif (model && model.hasState(ModelState.ORPHAN)) {\n\t\t\treturn localize('orphanedFile', \"{0} (deleted from disk)\", label);\n\t\t}\n\t\tif (model && model.isReadonly()) {\n\t\t\treturn localize('readonlyFile', \"{0} (read-only)\", label);\n\t\t}\n\n\t\treturn label;\n\t}\n\n\tisDirty(): boolean {\n\t\tconst model = this.textFileService.models.get(this.resource);\n\t\tif (!model) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (model.hasState(ModelState.CONFLICT) || model.hasState(ModelState.ERROR)) {\n\t\t\treturn true; // always indicate dirty state if we are in conflict or error state\n\t\t}\n\n\t\tif (this.textFileService.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY) {\n\t\t\treturn false; // fast auto save enabled so we do not declare dirty\n\t\t}\n\n\t\treturn model.isDirty();\n\t}\n\n\tconfirmSave(): Promise<ConfirmResult> {\n\t\treturn this.textFileService.confirmSave([this.resource]);\n\t}\n\n\tsave(): Promise<boolean> {\n\t\treturn this.textFileService.save(this.resource);\n\t}\n\n\trevert(options?: IRevertOptions): Promise<boolean> {\n\t\treturn this.textFileService.revert(this.resource, options);\n\t}\n\n\tgetPreferredEditorId(candidates: string[]): string {\n\t\treturn this.forceOpenAsBinary ? BINARY_FILE_EDITOR_ID : TEXT_FILE_EDITOR_ID;\n\t}\n\n\tresolve(): Promise<TextFileEditorModel | BinaryEditorModel> {\n\n\t\t// Resolve as binary\n\t\tif (this.forceOpenAsBinary) {\n\t\t\treturn this.doResolveAsBinary();\n\t\t}\n\n\t\t// Resolve as text\n\t\treturn this.doResolveAsText();\n\t}\n\n\tprivate doResolveAsText(): Promise<TextFileEditorModel | BinaryEditorModel> {\n\n\t\t// Resolve as text\n\t\treturn this.textFileService.models.loadOrCreate(this.resource, {\n\t\t\tencoding: this.preferredEncoding,\n\t\t\treload: { async: true }, // trigger a reload of the model if it exists already but do not wait to show the model\n\t\t\tallowBinary: this.forceOpenAsText,\n\t\t\treason: LoadReason.EDITOR\n\t\t}).then(model => {\n\n\t\t\t// This is a bit ugly, because we first resolve the model and then resolve a model reference. the reason being that binary\n\t\t\t// or very large files do not resolve to a text file model but should be opened as binary files without text. First calling into\n\t\t\t// loadOrCreate ensures we are not creating model references for these kind of resources.\n\t\t\t// In addition we have a bit of payload to take into account (encoding, reload) that the text resolver does not handle yet.\n\t\t\tif (!this.textModelReference) {\n\t\t\t\tthis.textModelReference = this.textModelResolverService.createModelReference(this.resource);\n\t\t\t}\n\n\t\t\treturn this.textModelReference.then(ref => ref.object as TextFileEditorModel);\n\t\t}, error => {\n\n\t\t\t// In case of an error that indicates that the file is binary or too large, just return with the binary editor model\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_BINARY || (<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE) {\n\t\t\t\treturn this.doResolveAsBinary();\n\t\t\t}\n\n\t\t\t// Bubble any other error up\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tprivate doResolveAsBinary(): Promise<BinaryEditorModel> {\n\t\treturn this.instantiationService.createInstance(BinaryEditorModel, this.resource, this.getName()).load().then(m => m as BinaryEditorModel);\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this.textFileService.models.get(this.resource);\n\t}\n\n\tdispose(): void {\n\n\t\t// Model reference\n\t\tif (this.textModelReference) {\n\t\t\tthis.textModelReference.then(ref => ref.dispose());\n\t\t\tthis.textModelReference = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput) {\n\t\t\treturn otherInput instanceof FileEditorInput && otherInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}]}