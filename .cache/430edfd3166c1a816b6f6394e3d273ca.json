{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/base/common/platform\");\nvar hasPerformanceNow = (platform_1.globals.performance && typeof platform_1.globals.performance.now === 'function');\nvar StopWatch = /** @class */ (function () {\n    function StopWatch(highResolution) {\n        this._highResolution = hasPerformanceNow && highResolution;\n        this._startTime = this._now();\n        this._stopTime = -1;\n    }\n    StopWatch.create = function (highResolution) {\n        if (highResolution === void 0) { highResolution = true; }\n        return new StopWatch(highResolution);\n    };\n    StopWatch.prototype.stop = function () {\n        this._stopTime = this._now();\n    };\n    StopWatch.prototype.elapsed = function () {\n        if (this._stopTime !== -1) {\n            return this._stopTime - this._startTime;\n        }\n        return this._now() - this._startTime;\n    };\n    StopWatch.prototype._now = function () {\n        return this._highResolution ? platform_1.globals.performance.now() : new Date().getTime();\n    };\n    return StopWatch;\n}());\nexports.StopWatch = StopWatch;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,oDAAkD;AAElD,IAAM,iBAAiB,GAAG,CAAC,kBAAO,CAAC,WAAW,IAAI,OAAO,kBAAO,CAAC,WAAW,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;AAEjG;IAUC,mBAAY,cAAuB;QAClC,IAAI,CAAC,eAAe,GAAG,iBAAiB,IAAI,cAAc,CAAC;QAC3D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IACrB,CAAC;IARa,gBAAM,GAApB,UAAqB,cAA8B;QAA9B,+BAAA,EAAA,qBAA8B;QAClD,OAAO,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;IACtC,CAAC;IAQM,wBAAI,GAAX;QACC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEM,2BAAO,GAAd;QACC,IAAI,IAAI,CAAC,SAAS,KAAK,CAAC,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;SACxC;QACD,OAAO,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;IACtC,CAAC;IAEO,wBAAI,GAAZ;QACC,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,kBAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;IAChF,CAAC;IACF,gBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,8BAAS","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { globals } from 'vs/base/common/platform';\n\nconst hasPerformanceNow = (globals.performance && typeof globals.performance.now === 'function');\n\nexport class StopWatch {\n\n\tprivate _highResolution: boolean;\n\tprivate _startTime: number;\n\tprivate _stopTime: number;\n\n\tpublic static create(highResolution: boolean = true): StopWatch {\n\t\treturn new StopWatch(highResolution);\n\t}\n\n\tconstructor(highResolution: boolean) {\n\t\tthis._highResolution = hasPerformanceNow && highResolution;\n\t\tthis._startTime = this._now();\n\t\tthis._stopTime = -1;\n\t}\n\n\tpublic stop(): void {\n\t\tthis._stopTime = this._now();\n\t}\n\n\tpublic elapsed(): number {\n\t\tif (this._stopTime !== -1) {\n\t\t\treturn this._stopTime - this._startTime;\n\t\t}\n\t\treturn this._now() - this._startTime;\n\t}\n\n\tprivate _now(): number {\n\t\treturn this._highResolution ? globals.performance.now() : new Date().getTime();\n\t}\n}\n"]}]}