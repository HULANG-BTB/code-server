{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\n/**\n * Mime type used by the output editor.\n */\nexports.OUTPUT_MIME = 'text/x-code-output';\n/**\n * Output resource scheme.\n */\nexports.OUTPUT_SCHEME = 'output';\n/**\n * Id used by the output editor.\n */\nexports.OUTPUT_MODE_ID = 'Log';\n/**\n * Mime type used by the log output editor.\n */\nexports.LOG_MIME = 'text/x-code-log-output';\n/**\n * Log resource scheme.\n */\nexports.LOG_SCHEME = 'log';\n/**\n * Id used by the log output editor.\n */\nexports.LOG_MODE_ID = 'log';\n/**\n * Output panel id\n */\nexports.OUTPUT_PANEL_ID = 'workbench.panel.output';\nexports.Extensions = {\n    OutputChannels: 'workbench.contributions.outputChannels'\n};\nexports.OUTPUT_SERVICE_ID = 'outputService';\nexports.MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;\nexports.CONTEXT_IN_OUTPUT = new contextkey_1.RawContextKey('inOutput', false);\nexports.CONTEXT_ACTIVE_LOG_OUTPUT = new contextkey_1.RawContextKey('activeLogOutput', false);\nexports.IOutputService = instantiation_1.createDecorator(exports.OUTPUT_SERVICE_ID);\nvar OutputChannelRegistry = /** @class */ (function () {\n    function OutputChannelRegistry() {\n        this.channels = new Map();\n        this._onDidRegisterChannel = new event_1.Emitter();\n        this.onDidRegisterChannel = this._onDidRegisterChannel.event;\n        this._onDidRemoveChannel = new event_1.Emitter();\n        this.onDidRemoveChannel = this._onDidRemoveChannel.event;\n    }\n    OutputChannelRegistry.prototype.registerChannel = function (descriptor) {\n        if (!this.channels.has(descriptor.id)) {\n            this.channels.set(descriptor.id, descriptor);\n            this._onDidRegisterChannel.fire(descriptor.id);\n        }\n    };\n    OutputChannelRegistry.prototype.getChannels = function () {\n        var result = [];\n        this.channels.forEach(function (value) { return result.push(value); });\n        return result;\n    };\n    OutputChannelRegistry.prototype.getChannel = function (id) {\n        return this.channels.get(id);\n    };\n    OutputChannelRegistry.prototype.removeChannel = function (id) {\n        this.channels.delete(id);\n        this._onDidRemoveChannel.fire(id);\n    };\n    return OutputChannelRegistry;\n}());\nplatform_1.Registry.add(exports.Extensions.OutputChannels, new OutputChannelRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/common/output.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,8CAAsD;AACtD,iEAAgE;AAChE,gFAAiF;AACjF,uEAAyE;AAGzE;;GAEG;AACU,QAAA,WAAW,GAAG,oBAAoB,CAAC;AAEhD;;GAEG;AACU,QAAA,aAAa,GAAG,QAAQ,CAAC;AAEtC;;GAEG;AACU,QAAA,cAAc,GAAG,KAAK,CAAC;AAEpC;;GAEG;AACU,QAAA,QAAQ,GAAG,wBAAwB,CAAC;AAEjD;;GAEG;AACU,QAAA,UAAU,GAAG,KAAK,CAAC;AAEhC;;GAEG;AACU,QAAA,WAAW,GAAG,KAAK,CAAC;AAEjC;;GAEG;AACU,QAAA,eAAe,GAAG,wBAAwB,CAAC;AAE3C,QAAA,UAAU,GAAG;IACzB,cAAc,EAAE,wCAAwC;CACxD,CAAC;AAEW,QAAA,iBAAiB,GAAG,eAAe,CAAC;AAEpC,QAAA,iBAAiB,GAAG,KAAK,CAAC,mDAAmD,GAAG,GAAG,CAAC,gCAAgC,CAAC;AAErH,QAAA,iBAAiB,GAAG,IAAI,0BAAa,CAAU,UAAU,EAAE,KAAK,CAAC,CAAC;AAElE,QAAA,yBAAyB,GAAG,IAAI,0BAAa,CAAU,iBAAiB,EAAE,KAAK,CAAC,CAAC;AAEjF,QAAA,cAAc,GAAG,+BAAe,CAAiB,yBAAiB,CAAC,CAAC;AA+GjF;IAAA;QACS,aAAQ,GAAG,IAAI,GAAG,EAAoC,CAAC;QAE9C,0BAAqB,GAAG,IAAI,eAAO,EAAU,CAAC;QACtD,yBAAoB,GAAkB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QAE/D,wBAAmB,GAAG,IAAI,eAAO,EAAU,CAAC;QACpD,uBAAkB,GAAkB,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;IAuB7E,CAAC;IArBO,+CAAe,GAAtB,UAAuB,UAAoC;QAC1D,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;YACtC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAC7C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SAC/C;IACF,CAAC;IAEM,2CAAW,GAAlB;QACC,IAAM,MAAM,GAA+B,EAAE,CAAC;QAC9C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAlB,CAAkB,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,0CAAU,GAAjB,UAAkB,EAAU;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAEM,6CAAa,GAApB,UAAqB,EAAU;QAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IACF,4BAAC;AAAD,CAAC,AA9BD,IA8BC;AAED,mBAAQ,CAAC,GAAG,CAAC,kBAAU,CAAC,cAAc,EAAE,IAAI,qBAAqB,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { URI } from 'vs/base/common/uri';\n\n/**\n * Mime type used by the output editor.\n */\nexport const OUTPUT_MIME = 'text/x-code-output';\n\n/**\n * Output resource scheme.\n */\nexport const OUTPUT_SCHEME = 'output';\n\n/**\n * Id used by the output editor.\n */\nexport const OUTPUT_MODE_ID = 'Log';\n\n/**\n * Mime type used by the log output editor.\n */\nexport const LOG_MIME = 'text/x-code-log-output';\n\n/**\n * Log resource scheme.\n */\nexport const LOG_SCHEME = 'log';\n\n/**\n * Id used by the log output editor.\n */\nexport const LOG_MODE_ID = 'log';\n\n/**\n * Output panel id\n */\nexport const OUTPUT_PANEL_ID = 'workbench.panel.output';\n\nexport const Extensions = {\n\tOutputChannels: 'workbench.contributions.outputChannels'\n};\n\nexport const OUTPUT_SERVICE_ID = 'outputService';\n\nexport const MAX_OUTPUT_LENGTH = 10000 /* Max. number of output lines to show in output */ * 100 /* Guestimated chars per line */;\n\nexport const CONTEXT_IN_OUTPUT = new RawContextKey<boolean>('inOutput', false);\n\nexport const CONTEXT_ACTIVE_LOG_OUTPUT = new RawContextKey<boolean>('activeLogOutput', false);\n\nexport const IOutputService = createDecorator<IOutputService>(OUTPUT_SERVICE_ID);\n\n/**\n * The output service to manage output from the various processes running.\n */\nexport interface IOutputService {\n\t_serviceBrand: any;\n\n\t/**\n\t * Given the channel id returns the output channel instance.\n\t * Channel should be first registered via OutputChannelRegistry.\n\t */\n\tgetChannel(id: string): IOutputChannel | undefined;\n\n\t/**\n\t * Returns an array of all known output channels descriptors.\n\t */\n\tgetChannelDescriptors(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the currently active channel.\n\t * Only one channel can be active at a given moment.\n\t */\n\tgetActiveChannel(): IOutputChannel | undefined;\n\n\t/**\n\t * Show the channel with the passed id.\n\t */\n\tshowChannel(id: string, preserveFocus?: boolean): Promise<void>;\n\n\t/**\n\t * Allows to register on active output channel change.\n\t */\n\tonActiveOutputChannel: Event<string>;\n}\n\nexport interface IOutputChannel {\n\n\t/**\n\t * Identifier of the output channel.\n\t */\n\tid: string;\n\n\t/**\n\t * Label of the output channel to be displayed to the user.\n\t */\n\tlabel: string;\n\n\t/**\n\t * Returns the value indicating whether the channel has scroll locked.\n\t */\n\tscrollLock: boolean;\n\n\t/**\n\t * Appends output to the channel.\n\t */\n\tappend(output: string): void;\n\n\t/**\n\t * Update the channel.\n\t */\n\tupdate(): void;\n\n\t/**\n\t * Clears all received output for this channel.\n\t */\n\tclear(till?: number): void;\n\n\t/**\n\t * Disposes the output channel.\n\t */\n\tdispose(): void;\n}\n\nexport interface IOutputChannelDescriptor {\n\tid: string;\n\tlabel: string;\n\tlog: boolean;\n\tfile?: URI;\n}\n\nexport interface IFileOutputChannelDescriptor extends IOutputChannelDescriptor {\n\tfile: URI;\n}\n\nexport interface IOutputChannelRegistry {\n\n\treadonly onDidRegisterChannel: Event<string>;\n\treadonly onDidRemoveChannel: Event<string>;\n\n\t/**\n\t * Make an output channel known to the output world.\n\t */\n\tregisterChannel(descriptor: IOutputChannelDescriptor): void;\n\n\t/**\n\t * Returns the list of channels known to the output world.\n\t */\n\tgetChannels(): IOutputChannelDescriptor[];\n\n\t/**\n\t * Returns the channel with the passed id.\n\t */\n\tgetChannel(id: string): IOutputChannelDescriptor | undefined;\n\n\t/**\n\t * Remove the output channel with the passed id.\n\t */\n\tremoveChannel(id: string): void;\n}\n\nclass OutputChannelRegistry implements IOutputChannelRegistry {\n\tprivate channels = new Map<string, IOutputChannelDescriptor>();\n\n\tprivate readonly _onDidRegisterChannel = new Emitter<string>();\n\treadonly onDidRegisterChannel: Event<string> = this._onDidRegisterChannel.event;\n\n\tprivate readonly _onDidRemoveChannel = new Emitter<string>();\n\treadonly onDidRemoveChannel: Event<string> = this._onDidRemoveChannel.event;\n\n\tpublic registerChannel(descriptor: IOutputChannelDescriptor): void {\n\t\tif (!this.channels.has(descriptor.id)) {\n\t\t\tthis.channels.set(descriptor.id, descriptor);\n\t\t\tthis._onDidRegisterChannel.fire(descriptor.id);\n\t\t}\n\t}\n\n\tpublic getChannels(): IOutputChannelDescriptor[] {\n\t\tconst result: IOutputChannelDescriptor[] = [];\n\t\tthis.channels.forEach(value => result.push(value));\n\t\treturn result;\n\t}\n\n\tpublic getChannel(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tpublic removeChannel(id: string): void {\n\t\tthis.channels.delete(id);\n\t\tthis._onDidRemoveChannel.fire(id);\n\t}\n}\n\nRegistry.add(Extensions.OutputChannels, new OutputChannelRegistry());"]}]}