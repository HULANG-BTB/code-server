{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = require(\"vs/base/common/errors\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar languageFeatureRegistry_1 = require(\"vs/editor/common/modes/languageFeatureRegistry\");\nexports.CodeInsetProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\nfunction getCodeInsetData(model, token) {\n    var symbols = [];\n    var providers = exports.CodeInsetProviderRegistry.ordered(model);\n    var promises = providers.map(function (provider) {\n        return Promise.resolve(provider.provideCodeInsets(model, token)).then(function (result) {\n            if (Array.isArray(result)) {\n                for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n                    var symbol = result_1[_i];\n                    symbols.push({ symbol: symbol, provider: provider });\n                }\n            }\n        }).catch(errors_1.onUnexpectedExternalError);\n    });\n    return Promise.all(promises).then(function () {\n        return arrays_1.mergeSort(symbols, function (a, b) {\n            // sort by lineNumber, provider-rank, and column\n            if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n                return -1;\n            }\n            else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n                return 1;\n            }\n            else if (providers.indexOf(a.provider) < providers.indexOf(b.provider)) {\n                return -1;\n            }\n            else if (providers.indexOf(a.provider) > providers.indexOf(b.provider)) {\n                return 1;\n            }\n            else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n                return -1;\n            }\n            else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        });\n    });\n}\nexports.getCodeInsetData = getCodeInsetData;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/common/codeInset.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gDAAkE;AAClE,gDAAkD;AAGlD,0FAAyF;AAgB5E,QAAA,yBAAyB,GAAG,IAAI,iDAAuB,EAAqB,CAAC;AAQ1F,SAAgB,gBAAgB,CAAC,KAAiB,EAAE,KAAwB;IAE3E,IAAM,OAAO,GAAqB,EAAE,CAAC;IACrC,IAAM,SAAS,GAAG,iCAAyB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAE3D,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,UAAA,QAAQ;QACtC,OAAA,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACpE,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC1B,KAAmB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,EAAE;oBAAtB,IAAI,MAAM,eAAA;oBACd,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,QAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;iBACnC;aACD;QACF,CAAC,CAAC,CAAC,KAAK,CAAC,kCAAyB,CAAC;IANnC,CAMmC,CAAC,CAAC;IAEtC,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;QAEjC,OAAO,kBAAS,CAAC,OAAO,EAAE,UAAC,CAAC,EAAE,CAAC;YAC9B,gDAAgD;YAChD,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE;gBACpE,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE;gBAC3E,OAAO,CAAC,CAAC;aACT;iBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;gBACzE,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;gBACzE,OAAO,CAAC,CAAC;aACT;iBAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE;gBACnE,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE;gBACnE,OAAO,CAAC,CAAC;aACT;iBAAM;gBACN,OAAO,CAAC,CAAC;aACT;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC;AAnCD,4CAmCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel } from 'vs/editor/common/model';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { mergeSort } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/modes/languageFeatureRegistry';\nimport { ProviderResult } from 'vs/editor/common/modes';\nimport { IRange } from 'vs/editor/common/core/range';\n\nexport interface ICodeInsetSymbol {\n\tid: string;\n\trange: IRange;\n\theight?: number;\n}\n\nexport interface CodeInsetProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeInsets(model: ITextModel, token: CancellationToken): ProviderResult<ICodeInsetSymbol[]>;\n\tresolveCodeInset(model: ITextModel, codeInset: ICodeInsetSymbol, token: CancellationToken): ProviderResult<ICodeInsetSymbol>;\n}\n\nexport const CodeInsetProviderRegistry = new LanguageFeatureRegistry<CodeInsetProvider>();\n\nexport interface ICodeInsetData {\n\tsymbol: ICodeInsetSymbol;\n\tprovider: CodeInsetProvider;\n\tresolved?: boolean;\n}\n\nexport function getCodeInsetData(model: ITextModel, token: CancellationToken): Promise<ICodeInsetData[]> {\n\n\tconst symbols: ICodeInsetData[] = [];\n\tconst providers = CodeInsetProviderRegistry.ordered(model);\n\n\tconst promises = providers.map(provider =>\n\t\tPromise.resolve(provider.provideCodeInsets(model, token)).then(result => {\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tfor (let symbol of result) {\n\t\t\t\t\tsymbols.push({ symbol, provider });\n\t\t\t\t}\n\t\t\t}\n\t\t}).catch(onUnexpectedExternalError));\n\n\treturn Promise.all(promises).then(() => {\n\n\t\treturn mergeSort(symbols, (a, b) => {\n\t\t\t// sort by lineNumber, provider-rank, and column\n\t\t\tif (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n\t\t\t\treturn -1;\n\t\t\t} else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n\t\t\t\treturn 1;\n\t\t\t} else if (providers.indexOf(a.provider) < providers.indexOf(b.provider)) {\n\t\t\t\treturn -1;\n\t\t\t} else if (providers.indexOf(a.provider) > providers.indexOf(b.provider)) {\n\t\t\t\treturn 1;\n\t\t\t} else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n\t\t\t\treturn -1;\n\t\t\t} else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t});\n}\n"]}]}