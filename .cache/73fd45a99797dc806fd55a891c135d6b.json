{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/environmentService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/environment/node/environmentService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\ndefine([\"require\", \"exports\", \"crypto\", \"vs/base/node/paths\", \"os\", \"vs/base/common/path\", \"vs/base/common/decorators\", \"vs/platform/product/node/package\", \"vs/platform/product/node/product\", \"vs/base/common/date\", \"vs/base/common/platform\", \"vs/base/common/amd\", \"vs/base/common/uri\"], function (require, exports, crypto, paths, os, path, decorators_1, package_1, product_1, date_1, platform_1, amd_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Read this before there's any chance it is overwritten\n    // Related to https://github.com/Microsoft/vscode/issues/30624\n    const xdgRuntimeDir = process.env['XDG_RUNTIME_DIR'];\n    function getNixIPCHandle(userDataPath, type) {\n        if (xdgRuntimeDir) {\n            const scope = crypto.createHash('md5').update(userDataPath).digest('hex').substr(0, 8);\n            return path.join(xdgRuntimeDir, `vscode-${scope}-${package_1.default.version}-${type}.sock`);\n        }\n        return path.join(userDataPath, `${package_1.default.version}-${type}.sock`);\n    }\n    function getWin32IPCHandle(userDataPath, type) {\n        const scope = crypto.createHash('md5').update(userDataPath).digest('hex');\n        return `\\\\\\\\.\\\\pipe\\\\${scope}-${package_1.default.version}-${type}-sock`;\n    }\n    function getIPCHandle(userDataPath, type) {\n        if (platform_1.isWindows) {\n            return getWin32IPCHandle(userDataPath, type);\n        }\n        return getNixIPCHandle(userDataPath, type);\n    }\n    function getCLIPath(execPath, appRoot, isBuilt) {\n        // Windows\n        if (platform_1.isWindows) {\n            if (isBuilt) {\n                return path.join(path.dirname(execPath), 'bin', `${product_1.default.applicationName}.cmd`);\n            }\n            return path.join(appRoot, 'scripts', 'code-cli.bat');\n        }\n        // Linux\n        if (platform_1.isLinux) {\n            if (isBuilt) {\n                return path.join(path.dirname(execPath), 'bin', `${product_1.default.applicationName}`);\n            }\n            return path.join(appRoot, 'scripts', 'code-cli.sh');\n        }\n        // macOS\n        if (isBuilt) {\n            return path.join(appRoot, 'bin', 'code');\n        }\n        return path.join(appRoot, 'scripts', 'code-cli.sh');\n    }\n    class EnvironmentService {\n        constructor(_args, _execPath) {\n            this._args = _args;\n            this._execPath = _execPath;\n            if (!process.env['VSCODE_LOGS']) {\n                const key = date_1.toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '');\n                process.env['VSCODE_LOGS'] = path.join(this.userDataPath, 'logs', key);\n            }\n            this.logsPath = process.env['VSCODE_LOGS'];\n        }\n        get args() { return this._args; }\n        get appRoot() { return path.dirname(amd_1.getPathFromAmdModule(require, '')); }\n        get execPath() { return this._execPath; }\n        get cliPath() { return getCLIPath(this.execPath, this.appRoot, this.isBuilt); }\n        get userHome() { return os.homedir(); }\n        get userDataPath() {\n            const vscodePortable = process.env['VSCODE_PORTABLE'];\n            if (vscodePortable) {\n                return path.join(vscodePortable, 'user-data');\n            }\n            return parseUserDataDir(this._args, process);\n        }\n        get appNameLong() { return product_1.default.nameLong; }\n        get appQuality() { return product_1.default.quality; }\n        get appSettingsHome() { return path.join(this.userDataPath, 'User'); }\n        get appSettingsPath() { return path.join(this.appSettingsHome, 'settings.json'); }\n        get globalStorageHome() { return path.join(this.appSettingsHome, 'globalStorage'); }\n        get workspaceStorageHome() { return path.join(this.appSettingsHome, 'workspaceStorage'); }\n        get settingsSearchBuildId() { return product_1.default.settingsSearchBuildId; }\n        get settingsSearchUrl() { return product_1.default.settingsSearchUrl; }\n        get appKeybindingsPath() { return path.join(this.appSettingsHome, 'keybindings.json'); }\n        get isExtensionDevelopment() { return !!this._args.extensionDevelopmentPath; }\n        get backupHome() { return path.join(this.userDataPath, 'Backups'); }\n        get backupWorkspacesPath() { return path.join(this.backupHome, 'workspaces.json'); }\n        get untitledWorkspacesHome() { return uri_1.URI.file(path.join(this.userDataPath, 'Workspaces')); }\n        get installSourcePath() { return path.join(this.userDataPath, 'installSource'); }\n        get builtinExtensionsPath() {\n            const fromArgs = parsePathArg(this._args['builtin-extensions-dir'], process);\n            if (fromArgs) {\n                return fromArgs;\n            }\n            else {\n                return path.normalize(path.join(amd_1.getPathFromAmdModule(require, ''), '..', 'extensions'));\n            }\n        }\n        get extensionsPath() {\n            const fromArgs = parsePathArg(this._args['extensions-dir'], process);\n            if (fromArgs) {\n                return fromArgs;\n            }\n            const vscodeExtensions = process.env['VSCODE_EXTENSIONS'];\n            if (vscodeExtensions) {\n                return vscodeExtensions;\n            }\n            const vscodePortable = process.env['VSCODE_PORTABLE'];\n            if (vscodePortable) {\n                return path.join(vscodePortable, 'extensions');\n            }\n            return path.join(this.userHome, product_1.default.dataFolderName, 'extensions');\n        }\n        get extensionDevelopmentLocationURI() {\n            const s = this._args.extensionDevelopmentPath;\n            if (s) {\n                if (/^[^:/?#]+?:\\/\\//.test(s)) {\n                    return uri_1.URI.parse(s);\n                }\n                return uri_1.URI.file(path.normalize(s));\n            }\n            return undefined;\n        }\n        get extensionTestsLocationURI() {\n            const s = this._args.extensionTestsPath;\n            if (s) {\n                if (/^[^:/?#]+?:\\/\\//.test(s)) {\n                    return uri_1.URI.parse(s);\n                }\n                return uri_1.URI.file(path.normalize(s));\n            }\n            return undefined;\n        }\n        get disableExtensions() {\n            if (this._args['disable-extensions']) {\n                return true;\n            }\n            const disableExtensions = this._args['disable-extension'];\n            if (disableExtensions) {\n                if (typeof disableExtensions === 'string') {\n                    return [disableExtensions];\n                }\n                if (Array.isArray(disableExtensions) && disableExtensions.length > 0) {\n                    return disableExtensions;\n                }\n            }\n            return false;\n        }\n        get skipGettingStarted() { return !!this._args['skip-getting-started']; }\n        get skipReleaseNotes() { return !!this._args['skip-release-notes']; }\n        get skipAddToRecentlyOpened() { return !!this._args['skip-add-to-recently-opened']; }\n        get debugExtensionHost() { return parseExtensionHostPort(this._args, this.isBuilt); }\n        get debugSearch() { return parseSearchPort(this._args, this.isBuilt); }\n        get isBuilt() { return !process.env['VSCODE_DEV']; }\n        get verbose() { return !!this._args.verbose; }\n        get log() { return this._args.log; }\n        get wait() { return !!this._args.wait; }\n        get logExtensionHostCommunication() { return !!this._args.logExtensionHostCommunication; }\n        get status() { return !!this._args.status; }\n        get mainIPCHandle() { return getIPCHandle(this.userDataPath, 'main'); }\n        get sharedIPCHandle() { return getIPCHandle(this.userDataPath, 'shared'); }\n        get nodeCachedDataDir() { return process.env['VSCODE_NODE_CACHED_DATA_DIR'] || undefined; }\n        get disableUpdates() { return !!this._args['disable-updates']; }\n        get disableCrashReporter() { return !!this._args['disable-crash-reporter']; }\n        get driverHandle() { return this._args['driver']; }\n        get driverVerbose() { return !!this._args['driver-verbose']; }\n    }\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"appRoot\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"cliPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"userHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"userDataPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"appSettingsHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"appSettingsPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"globalStorageHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"workspaceStorageHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"settingsSearchBuildId\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"settingsSearchUrl\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"appKeybindingsPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"isExtensionDevelopment\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"backupHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"backupWorkspacesPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"untitledWorkspacesHome\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"installSourcePath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"builtinExtensionsPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"extensionsPath\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"extensionDevelopmentLocationURI\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"extensionTestsLocationURI\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"debugExtensionHost\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"debugSearch\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"mainIPCHandle\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"sharedIPCHandle\", null);\n    __decorate([\n        decorators_1.memoize\n    ], EnvironmentService.prototype, \"nodeCachedDataDir\", null);\n    exports.EnvironmentService = EnvironmentService;\n    function parseExtensionHostPort(args, isBuild) {\n        return parseDebugPort(args['inspect-extensions'], args['inspect-brk-extensions'], 5870, isBuild, args.debugId);\n    }\n    exports.parseExtensionHostPort = parseExtensionHostPort;\n    function parseSearchPort(args, isBuild) {\n        return parseDebugPort(args['inspect-search'], args['inspect-brk-search'], 5876, isBuild);\n    }\n    exports.parseSearchPort = parseSearchPort;\n    function parseDebugPort(debugArg, debugBrkArg, defaultBuildPort, isBuild, debugId) {\n        const portStr = debugBrkArg || debugArg;\n        const port = Number(portStr) || (!isBuild ? defaultBuildPort : null);\n        const brk = port ? Boolean(!!debugBrkArg) : false;\n        return { port, break: brk, debugId };\n    }\n    exports.parseDebugPort = parseDebugPort;\n    function parsePathArg(arg, process) {\n        if (!arg) {\n            return undefined;\n        }\n        // Determine if the arg is relative or absolute, if relative use the original CWD\n        // (VSCODE_CWD), not the potentially overridden one (process.cwd()).\n        const resolved = path.resolve(arg);\n        if (path.normalize(arg) === resolved) {\n            return resolved;\n        }\n        else {\n            return path.resolve(process.env['VSCODE_CWD'] || process.cwd(), arg);\n        }\n    }\n    function parseUserDataDir(args, process) {\n        return parsePathArg(args['user-data-dir'], process) || path.resolve(paths.getDefaultUserDataPath(process.platform));\n    }\n    exports.parseUserDataDir = parseUserDataDir;\n});\n",null]}