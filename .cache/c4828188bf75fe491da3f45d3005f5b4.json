{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionDescriptionRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionDescriptionRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar event_1 = require(\"vs/base/common/event\");\nvar DeltaExtensionsResult = /** @class */ (function () {\n    function DeltaExtensionsResult(removedDueToLooping) {\n        this.removedDueToLooping = removedDueToLooping;\n    }\n    return DeltaExtensionsResult;\n}());\nexports.DeltaExtensionsResult = DeltaExtensionsResult;\nvar ExtensionDescriptionRegistry = /** @class */ (function () {\n    function ExtensionDescriptionRegistry(extensionDescriptions) {\n        this._onDidChange = new event_1.Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._extensionDescriptions = extensionDescriptions;\n        this._initialize();\n    }\n    ExtensionDescriptionRegistry.prototype._initialize = function () {\n        this._extensionsMap = new Map();\n        this._extensionsArr = [];\n        this._activationMap = new Map();\n        for (var _i = 0, _a = this._extensionDescriptions; _i < _a.length; _i++) {\n            var extensionDescription = _a[_i];\n            if (this._extensionsMap.has(extensions_1.ExtensionIdentifier.toKey(extensionDescription.identifier))) {\n                // No overwriting allowed!\n                console.error('Extension `' + extensionDescription.identifier.value + '` is already registered');\n                continue;\n            }\n            this._extensionsMap.set(extensions_1.ExtensionIdentifier.toKey(extensionDescription.identifier), extensionDescription);\n            this._extensionsArr.push(extensionDescription);\n            if (Array.isArray(extensionDescription.activationEvents)) {\n                for (var _b = 0, _c = extensionDescription.activationEvents; _b < _c.length; _b++) {\n                    var activationEvent = _c[_b];\n                    // TODO@joao: there's no easy way to contribute this\n                    if (activationEvent === 'onUri') {\n                        activationEvent = \"onUri:\" + extensions_1.ExtensionIdentifier.toKey(extensionDescription.identifier);\n                    }\n                    if (!this._activationMap.has(activationEvent)) {\n                        this._activationMap.set(activationEvent, []);\n                    }\n                    this._activationMap.get(activationEvent).push(extensionDescription);\n                }\n            }\n        }\n    };\n    ExtensionDescriptionRegistry.prototype.keepOnly = function (extensionIds) {\n        var toKeep = new Set();\n        extensionIds.forEach(function (extensionId) { return toKeep.add(extensions_1.ExtensionIdentifier.toKey(extensionId)); });\n        this._extensionDescriptions = this._extensionDescriptions.filter(function (extension) { return toKeep.has(extensions_1.ExtensionIdentifier.toKey(extension.identifier)); });\n        this._initialize();\n        this._onDidChange.fire(undefined);\n    };\n    ExtensionDescriptionRegistry.prototype.deltaExtensions = function (toAdd, toRemove) {\n        if (toAdd.length > 0) {\n            this._extensionDescriptions = this._extensionDescriptions.concat(toAdd);\n        }\n        // Immediately remove looping extensions!\n        var looping = ExtensionDescriptionRegistry._findLoopingExtensions(this._extensionDescriptions);\n        toRemove = toRemove.concat(looping.map(function (ext) { return ext.identifier; }));\n        if (toRemove.length > 0) {\n            var toRemoveSet_1 = new Set();\n            toRemove.forEach(function (extensionId) { return toRemoveSet_1.add(extensions_1.ExtensionIdentifier.toKey(extensionId)); });\n            this._extensionDescriptions = this._extensionDescriptions.filter(function (extension) { return !toRemoveSet_1.has(extensions_1.ExtensionIdentifier.toKey(extension.identifier)); });\n        }\n        this._initialize();\n        this._onDidChange.fire(undefined);\n        return new DeltaExtensionsResult(looping);\n    };\n    ExtensionDescriptionRegistry._findLoopingExtensions = function (extensionDescriptions) {\n        var G = new /** @class */ (function () {\n            function class_1() {\n                this._arcs = new Map();\n                this._nodesSet = new Set();\n                this._nodesArr = [];\n            }\n            class_1.prototype.addNode = function (id) {\n                if (!this._nodesSet.has(id)) {\n                    this._nodesSet.add(id);\n                    this._nodesArr.push(id);\n                }\n            };\n            class_1.prototype.addArc = function (from, to) {\n                this.addNode(from);\n                this.addNode(to);\n                if (this._arcs.has(from)) {\n                    this._arcs.get(from).push(to);\n                }\n                else {\n                    this._arcs.set(from, [to]);\n                }\n            };\n            class_1.prototype.getArcs = function (id) {\n                if (this._arcs.has(id)) {\n                    return this._arcs.get(id);\n                }\n                return [];\n            };\n            class_1.prototype.hasOnlyGoodArcs = function (id, good) {\n                var dependencies = G.getArcs(id);\n                for (var i = 0; i < dependencies.length; i++) {\n                    if (!good.has(dependencies[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            class_1.prototype.getNodes = function () {\n                return this._nodesArr;\n            };\n            return class_1;\n        }());\n        var descs = new Map();\n        for (var _i = 0, extensionDescriptions_1 = extensionDescriptions; _i < extensionDescriptions_1.length; _i++) {\n            var extensionDescription = extensionDescriptions_1[_i];\n            var extensionId = extensions_1.ExtensionIdentifier.toKey(extensionDescription.identifier);\n            descs.set(extensionId, extensionDescription);\n            if (extensionDescription.extensionDependencies) {\n                for (var _a = 0, _b = extensionDescription.extensionDependencies; _a < _b.length; _a++) {\n                    var _depId = _b[_a];\n                    var depId = extensions_1.ExtensionIdentifier.toKey(_depId);\n                    G.addArc(extensionId, depId);\n                }\n            }\n        }\n        // initialize with all extensions with no dependencies.\n        var good = new Set();\n        G.getNodes().filter(function (id) { return G.getArcs(id).length === 0; }).forEach(function (id) { return good.add(id); });\n        // all other extensions will be processed below.\n        var nodes = G.getNodes().filter(function (id) { return !good.has(id); });\n        var madeProgress;\n        do {\n            madeProgress = false;\n            // find one extension which has only good deps\n            for (var i = 0; i < nodes.length; i++) {\n                var id = nodes[i];\n                if (G.hasOnlyGoodArcs(id, good)) {\n                    nodes.splice(i, 1);\n                    i--;\n                    good.add(id);\n                    madeProgress = true;\n                }\n            }\n        } while (madeProgress);\n        // The remaining nodes are bad and have loops\n        return nodes.map(function (id) { return descs.get(id); });\n    };\n    ExtensionDescriptionRegistry.prototype.containsActivationEvent = function (activationEvent) {\n        return this._activationMap.has(activationEvent);\n    };\n    ExtensionDescriptionRegistry.prototype.containsExtension = function (extensionId) {\n        return this._extensionsMap.has(extensions_1.ExtensionIdentifier.toKey(extensionId));\n    };\n    ExtensionDescriptionRegistry.prototype.getExtensionDescriptionsForActivationEvent = function (activationEvent) {\n        var extensions = this._activationMap.get(activationEvent);\n        return extensions ? extensions.slice(0) : [];\n    };\n    ExtensionDescriptionRegistry.prototype.getAllExtensionDescriptions = function () {\n        return this._extensionsArr.slice(0);\n    };\n    ExtensionDescriptionRegistry.prototype.getExtensionDescription = function (extensionId) {\n        var extension = this._extensionsMap.get(extensions_1.ExtensionIdentifier.toKey(extensionId));\n        return extension ? extension : undefined;\n    };\n    return ExtensionDescriptionRegistry;\n}());\nexports.ExtensionDescriptionRegistry = ExtensionDescriptionRegistry;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionDescriptionRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionDescriptionRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\n\nexport class DeltaExtensionsResult {\n\tconstructor(\n\t\tpublic readonly removedDueToLooping: IExtensionDescription[]\n\t) { }\n}\n\nexport class ExtensionDescriptionRegistry {\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tprivate _extensionDescriptions: IExtensionDescription[];\n\tprivate _extensionsMap: Map<string, IExtensionDescription>;\n\tprivate _extensionsArr: IExtensionDescription[];\n\tprivate _activationMap: Map<string, IExtensionDescription[]>;\n\n\tconstructor(extensionDescriptions: IExtensionDescription[]) {\n\t\tthis._extensionDescriptions = extensionDescriptions;\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize(): void {\n\t\tthis._extensionsMap = new Map<string, IExtensionDescription>();\n\t\tthis._extensionsArr = [];\n\t\tthis._activationMap = new Map<string, IExtensionDescription[]>();\n\n\t\tfor (const extensionDescription of this._extensionDescriptions) {\n\t\t\tif (this._extensionsMap.has(ExtensionIdentifier.toKey(extensionDescription.identifier))) {\n\t\t\t\t// No overwriting allowed!\n\t\t\t\tconsole.error('Extension `' + extensionDescription.identifier.value + '` is already registered');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._extensionsMap.set(ExtensionIdentifier.toKey(extensionDescription.identifier), extensionDescription);\n\t\t\tthis._extensionsArr.push(extensionDescription);\n\n\t\t\tif (Array.isArray(extensionDescription.activationEvents)) {\n\t\t\t\tfor (let activationEvent of extensionDescription.activationEvents) {\n\t\t\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this._activationMap.has(activationEvent)) {\n\t\t\t\t\t\tthis._activationMap.set(activationEvent, []);\n\t\t\t\t\t}\n\t\t\t\t\tthis._activationMap.get(activationEvent)!.push(extensionDescription);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic keepOnly(extensionIds: ExtensionIdentifier[]): void {\n\t\tconst toKeep = new Set<string>();\n\t\textensionIds.forEach(extensionId => toKeep.add(ExtensionIdentifier.toKey(extensionId)));\n\t\tthis._extensionDescriptions = this._extensionDescriptions.filter(extension => toKeep.has(ExtensionIdentifier.toKey(extension.identifier)));\n\t\tthis._initialize();\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): DeltaExtensionsResult {\n\t\tif (toAdd.length > 0) {\n\t\t\tthis._extensionDescriptions = this._extensionDescriptions.concat(toAdd);\n\t\t}\n\n\t\t// Immediately remove looping extensions!\n\t\tconst looping = ExtensionDescriptionRegistry._findLoopingExtensions(this._extensionDescriptions);\n\t\ttoRemove = toRemove.concat(looping.map(ext => ext.identifier));\n\n\t\tif (toRemove.length > 0) {\n\t\t\tconst toRemoveSet = new Set<string>();\n\t\t\ttoRemove.forEach(extensionId => toRemoveSet.add(ExtensionIdentifier.toKey(extensionId)));\n\t\t\tthis._extensionDescriptions = this._extensionDescriptions.filter(extension => !toRemoveSet.has(ExtensionIdentifier.toKey(extension.identifier)));\n\t\t}\n\n\t\tthis._initialize();\n\t\tthis._onDidChange.fire(undefined);\n\t\treturn new DeltaExtensionsResult(looping);\n\t}\n\n\tprivate static _findLoopingExtensions(extensionDescriptions: IExtensionDescription[]): IExtensionDescription[] {\n\t\tconst G = new class {\n\n\t\t\tprivate _arcs = new Map<string, string[]>();\n\t\t\tprivate _nodesSet = new Set<string>();\n\t\t\tprivate _nodesArr: string[] = [];\n\n\t\t\taddNode(id: string): void {\n\t\t\t\tif (!this._nodesSet.has(id)) {\n\t\t\t\t\tthis._nodesSet.add(id);\n\t\t\t\t\tthis._nodesArr.push(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddArc(from: string, to: string): void {\n\t\t\t\tthis.addNode(from);\n\t\t\t\tthis.addNode(to);\n\t\t\t\tif (this._arcs.has(from)) {\n\t\t\t\t\tthis._arcs.get(from)!.push(to);\n\t\t\t\t} else {\n\t\t\t\t\tthis._arcs.set(from, [to]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgetArcs(id: string): string[] {\n\t\t\t\tif (this._arcs.has(id)) {\n\t\t\t\t\treturn this._arcs.get(id)!;\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\thasOnlyGoodArcs(id: string, good: Set<string>): boolean {\n\t\t\t\tconst dependencies = G.getArcs(id);\n\t\t\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\t\t\tif (!good.has(dependencies[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tgetNodes(): string[] {\n\t\t\t\treturn this._nodesArr;\n\t\t\t}\n\t\t};\n\n\t\tlet descs = new Map<string, IExtensionDescription>();\n\t\tfor (let extensionDescription of extensionDescriptions) {\n\t\t\tconst extensionId = ExtensionIdentifier.toKey(extensionDescription.identifier);\n\t\t\tdescs.set(extensionId, extensionDescription);\n\t\t\tif (extensionDescription.extensionDependencies) {\n\t\t\t\tfor (let _depId of extensionDescription.extensionDependencies) {\n\t\t\t\t\tconst depId = ExtensionIdentifier.toKey(_depId);\n\t\t\t\t\tG.addArc(extensionId, depId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// initialize with all extensions with no dependencies.\n\t\tlet good = new Set<string>();\n\t\tG.getNodes().filter(id => G.getArcs(id).length === 0).forEach(id => good.add(id));\n\n\t\t// all other extensions will be processed below.\n\t\tlet nodes = G.getNodes().filter(id => !good.has(id));\n\n\t\tlet madeProgress: boolean;\n\t\tdo {\n\t\t\tmadeProgress = false;\n\n\t\t\t// find one extension which has only good deps\n\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\tconst id = nodes[i];\n\n\t\t\t\tif (G.hasOnlyGoodArcs(id, good)) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tgood.add(id);\n\t\t\t\t\tmadeProgress = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (madeProgress);\n\n\t\t// The remaining nodes are bad and have loops\n\t\treturn nodes.map(id => descs.get(id)!);\n\t}\n\n\tpublic containsActivationEvent(activationEvent: string): boolean {\n\t\treturn this._activationMap.has(activationEvent);\n\t}\n\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionsMap.has(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tpublic getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[] {\n\t\tconst extensions = this._activationMap.get(activationEvent);\n\t\treturn extensions ? extensions.slice(0) : [];\n\t}\n\n\tpublic getAllExtensionDescriptions(): IExtensionDescription[] {\n\t\treturn this._extensionsArr.slice(0);\n\t}\n\n\tpublic getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined {\n\t\tconst extension = this._extensionsMap.get(ExtensionIdentifier.toKey(extensionId));\n\t\treturn extension ? extension : undefined;\n\t}\n}\n"]}]}