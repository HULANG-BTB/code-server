{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/common/dialogs.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/common/dialogs.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar nls_1 = require(\"vs/nls\");\nexports.IDialogService = instantiation_1.createDecorator('dialogService');\nexports.IFileDialogService = instantiation_1.createDecorator('fileDialogService');\nvar MAX_CONFIRM_FILES = 10;\nfunction getConfirmMessage(start, resourcesToConfirm) {\n    var message = [start];\n    message.push('');\n    message.push.apply(message, resourcesToConfirm.slice(0, MAX_CONFIRM_FILES).map(function (r) { return resources_1.basename(r); }));\n    if (resourcesToConfirm.length > MAX_CONFIRM_FILES) {\n        if (resourcesToConfirm.length - MAX_CONFIRM_FILES === 1) {\n            message.push(nls_1.localize('moreFile', \"...1 additional file not shown\"));\n        }\n        else {\n            message.push(nls_1.localize('moreFiles', \"...{0} additional files not shown\", resourcesToConfirm.length - MAX_CONFIRM_FILES));\n        }\n    }\n    message.push('');\n    return message.join('\\n');\n}\nexports.getConfirmMessage = getConfirmMessage;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/common/dialogs.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/dialogs/common/dialogs.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAEjF,sDAAoD;AACpD,8BAAkC;AAmHrB,QAAA,cAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC;AAgClE,QAAA,kBAAkB,GAAG,+BAAe,CAAqB,mBAAmB,CAAC,CAAC;AA2D3F,IAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,SAAgB,iBAAiB,CAAC,KAAa,EAAE,kBAAyB;IACzE,IAAM,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC;IACxB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjB,OAAO,CAAC,IAAI,OAAZ,OAAO,EAAS,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,oBAAQ,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,EAAE;IAEtF,IAAI,kBAAkB,CAAC,MAAM,GAAG,iBAAiB,EAAE;QAClD,IAAI,kBAAkB,CAAC,MAAM,GAAG,iBAAiB,KAAK,CAAC,EAAE;YACxD,OAAO,CAAC,IAAI,CAAC,cAAQ,CAAC,UAAU,EAAE,gCAAgC,CAAC,CAAC,CAAC;SACrE;aAAM;YACN,OAAO,CAAC,IAAI,CAAC,cAAQ,CAAC,WAAW,EAAE,mCAAmC,EAAE,kBAAkB,CAAC,MAAM,GAAG,iBAAiB,CAAC,CAAC,CAAC;SACxH;KACD;IAED,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjB,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAfD,8CAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from 'vs/base/common/severity';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { basename } from 'vs/base/common/resources';\nimport { localize } from 'vs/nls';\nimport { FileFilter } from 'vs/platform/windows/common/windows';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\n\nexport type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';\n\nexport interface IConfirmation {\n\ttitle?: string;\n\ttype?: DialogType;\n\tmessage: string;\n\tdetail?: string;\n\tprimaryButton?: string;\n\tsecondaryButton?: string;\n\tcheckbox?: {\n\t\tlabel: string;\n\t\tchecked?: boolean;\n\t};\n}\n\nexport interface IConfirmationResult {\n\n\t/**\n\t * Will be true if the dialog was confirmed with the primary button\n\t * pressed.\n\t */\n\tconfirmed: boolean;\n\n\t/**\n\t * This will only be defined if the confirmation was created\n\t * with the checkox option defined.\n\t */\n\tcheckboxChecked?: boolean;\n}\n\nexport interface IPickAndOpenOptions {\n\tforceNewWindow?: boolean;\n\tdefaultUri?: URI;\n\ttelemetryExtraData?: ITelemetryData;\n\tavailableFileSystems?: string[];\n}\n\nexport interface ISaveDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * A human-readable string for the ok button\n\t */\n\tsaveLabel?: string;\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can save to. If not specified, uses the schema of the defaultURI or, if also not specified,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: string[];\n}\n\nexport interface IOpenDialogOptions {\n\t/**\n\t * A human-readable string for the dialog title\n\t */\n\ttitle?: string;\n\n\t/**\n\t * The resource the dialog shows when opened.\n\t */\n\tdefaultUri?: URI;\n\n\t/**\n\t * A human-readable string for the open button.\n\t */\n\topenLabel?: string;\n\n\t/**\n\t * Allow to select files, defaults to `true`.\n\t */\n\tcanSelectFiles?: boolean;\n\n\t/**\n\t * Allow to select folders, defaults to `false`.\n\t */\n\tcanSelectFolders?: boolean;\n\n\t/**\n\t * Allow to select many files or folders.\n\t */\n\tcanSelectMany?: boolean;\n\n\t/**\n\t * A set of file filters that are used by the dialog. Each entry is a human readable label,\n\t * like \"TypeScript\", and an array of extensions.\n\t */\n\tfilters?: FileFilter[];\n\n\t/**\n\t * Specifies a list of schemas for the file systems the user can load from. If not specified, uses the schema of the defaultURI or, if also not available,\n\t * the schema of the current window.\n\t */\n\tavailableFileSystems?: string[];\n}\n\n\nexport const IDialogService = createDecorator<IDialogService>('dialogService');\n\nexport interface IDialogOptions {\n\tcancelId?: number;\n\tdetail?: string;\n}\n\n/**\n * A service to bring up modal dialogs.\n *\n * Note: use the `INotificationService.prompt()` method for a non-modal way to ask\n * the user for input.\n */\nexport interface IDialogService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Ask the user for confirmation with a modal dialog.\n\t */\n\tconfirm(confirmation: IConfirmation): Promise<IConfirmationResult>;\n\n\t/**\n\t * Present a modal dialog to the user.\n\t *\n\t * @returns A promise with the selected choice index. If the user refused to choose,\n\t * then a promise with index of `cancelId` option is returned. If there is no such\n\t * option then promise with index `0` is returned.\n\t */\n\tshow(severity: Severity, message: string, buttons: string[], options?: IDialogOptions): Promise<number>;\n}\n\nexport const IFileDialogService = createDecorator<IFileDialogService>('fileDialogService');\n\n/**\n * A service to bring up file dialogs.\n */\nexport interface IFileDialogService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * The default path for a new file based on previously used files.\n\t * @param schemeFilter The scheme of the file path. If no filter given, the scheme of the current window is used.\n\t */\n\tdefaultFilePath(schemeFilter?: string): URI | undefined;\n\n\t/**\n\t * The default path for a new folder based on previously used folders.\n\t * @param schemeFilter The scheme of the folder path. If no filter given, the scheme of the current window is used.\n\t */\n\tdefaultFolderPath(schemeFilter?: string): URI | undefined;\n\n\t/**\n\t * The default path for a new workspace based on previously used workspaces.\n\t * @param schemeFilter The scheme of the workspace path. If no filter given, the scheme of the current window is used.\n\t */\n\tdefaultWorkspacePath(schemeFilter?: string): URI | undefined;\n\n\t/**\n\t * Shows a file-folder selection dialog and opens the selected entry.\n\t */\n\tpickFileFolderAndOpen(options: IPickAndOpenOptions): Promise<any>;\n\n\t/**\n\t * Shows a file selection dialog and opens the selected entry.\n\t */\n\tpickFileAndOpen(options: IPickAndOpenOptions): Promise<any>;\n\n\t/**\n\t * Shows a folder selection dialog and opens the selected entry.\n\t */\n\tpickFolderAndOpen(options: IPickAndOpenOptions): Promise<any>;\n\n\t/**\n\t * Shows a workspace selection dialog and opens the selected entry.\n\t */\n\tpickWorkspaceAndOpen(options: IPickAndOpenOptions): Promise<any>;\n\n\t/**\n\t * Shows a save file dialog and returns the chosen file URI.\n\t */\n\tshowSaveDialog(options: ISaveDialogOptions): Promise<URI | undefined>;\n\n\t/**\n\t * Shows a open file dialog and returns the chosen file URI.\n\t */\n\tshowOpenDialog(options: IOpenDialogOptions): Promise<URI[] | undefined>;\n\n}\n\nconst MAX_CONFIRM_FILES = 10;\nexport function getConfirmMessage(start: string, resourcesToConfirm: URI[]): string {\n\tconst message = [start];\n\tmessage.push('');\n\tmessage.push(...resourcesToConfirm.slice(0, MAX_CONFIRM_FILES).map(r => basename(r)));\n\n\tif (resourcesToConfirm.length > MAX_CONFIRM_FILES) {\n\t\tif (resourcesToConfirm.length - MAX_CONFIRM_FILES === 1) {\n\t\t\tmessage.push(localize('moreFile', \"...1 additional file not shown\"));\n\t\t} else {\n\t\t\tmessage.push(localize('moreFiles', \"...{0} additional files not shown\", resourcesToConfirm.length - MAX_CONFIRM_FILES));\n\t\t}\n\t}\n\n\tmessage.push('');\n\treturn message.join('\\n');\n}"]}]}