{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostCLIServer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostCLIServer.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/parts/ipc/node/ipc.net\", \"http\", \"fs\", \"vs/base/common/uri\", \"vs/platform/workspaces/common/workspaces\"], function (require, exports, ipc_net_1, http, fs, uri_1, workspaces_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CLIServer {\n        constructor(_commands) {\n            this._commands = _commands;\n            this._server = http.createServer((req, res) => this.onRequest(req, res));\n            this.setup().catch(err => {\n                console.error(err);\n                return '';\n            });\n        }\n        get ipcHandlePath() {\n            return this._ipcHandlePath;\n        }\n        setup() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this._ipcHandlePath = ipc_net_1.generateRandomPipeName();\n                try {\n                    this._server.listen(this.ipcHandlePath);\n                    this._server.on('error', err => console.error(err));\n                }\n                catch (err) {\n                    console.error('Could not start open from terminal server.');\n                }\n                return this._ipcHandlePath;\n            });\n        }\n        collectURIToOpen(strs, typeHint, result) {\n            if (Array.isArray(strs)) {\n                for (const s of strs) {\n                    try {\n                        result.push({ uri: uri_1.URI.parse(s), typeHint });\n                    }\n                    catch (e) {\n                        // ignore\n                    }\n                }\n            }\n        }\n        onRequest(req, res) {\n            const chunks = [];\n            req.setEncoding('utf8');\n            req.on('data', (d) => chunks.push(d));\n            req.on('end', () => {\n                const data = JSON.parse(chunks.join(''));\n                switch (data.type) {\n                    case 'open':\n                        this.open(data, res);\n                        break;\n                    case 'status':\n                        this.getStatus(data, res);\n                        break;\n                    default:\n                        res.writeHead(404);\n                        res.write(`Unkown message type: ${data.type}`, err => {\n                            if (err) {\n                                console.error(err);\n                            }\n                        });\n                        res.end();\n                        break;\n                }\n            });\n        }\n        open(data, res) {\n            let { fileURIs, folderURIs, forceNewWindow, diffMode, addMode, forceReuseWindow, waitMarkerFilePath } = data;\n            if (folderURIs && folderURIs.length || fileURIs && fileURIs.length) {\n                const urisToOpen = [];\n                this.collectURIToOpen(folderURIs, 'folder', urisToOpen);\n                this.collectURIToOpen(fileURIs, 'file', urisToOpen);\n                if (!forceReuseWindow && urisToOpen.some(o => o.typeHint === 'folder' || (o.typeHint === 'file' && workspaces_1.hasWorkspaceFileExtension(o.uri.path)))) {\n                    forceNewWindow = true;\n                }\n                const waitMarkerFileURI = waitMarkerFilePath ? uri_1.URI.file(waitMarkerFilePath) : undefined;\n                const windowOpenArgs = { forceNewWindow, diffMode, addMode, forceReuseWindow, waitMarkerFileURI };\n                this._commands.executeCommand('_files.windowOpen', urisToOpen, windowOpenArgs);\n            }\n            res.writeHead(200);\n            res.end();\n        }\n        getStatus(data, res) {\n            return __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const status = yield this._commands.executeCommand('_issues.getSystemStatus');\n                    res.writeHead(200);\n                    res.write(status);\n                    res.end();\n                }\n                catch (err) {\n                    res.writeHead(500);\n                    res.write(String(err), err => {\n                        if (err) {\n                            console.error(err);\n                        }\n                    });\n                    res.end();\n                }\n            });\n        }\n        dispose() {\n            this._server.close();\n            if (this._ipcHandlePath && process.platform !== 'win32' && fs.existsSync(this._ipcHandlePath)) {\n                fs.unlinkSync(this._ipcHandlePath);\n            }\n        }\n    }\n    exports.CLIServer = CLIServer;\n});\n",null]}