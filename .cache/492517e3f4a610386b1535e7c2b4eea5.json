{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostUrls.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostUrls.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"../common/extHost.protocol\", \"vs/base/common/uri\", \"vs/base/common/lifecycle\", \"vs/base/common/errors\", \"vs/platform/extensions/common/extensions\"], function (require, exports, extHost_protocol_1, uri_1, lifecycle_1, errors_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostUrls {\n        constructor(mainContext) {\n            this.handles = new Set();\n            this.handlers = new Map();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadUrls);\n        }\n        registerUriHandler(extensionId, handler) {\n            if (this.handles.has(extensions_1.ExtensionIdentifier.toKey(extensionId))) {\n                throw new Error(`Protocol handler already registered for extension ${extensionId}`);\n            }\n            const handle = ExtHostUrls.HandlePool++;\n            this.handles.add(extensions_1.ExtensionIdentifier.toKey(extensionId));\n            this.handlers.set(handle, handler);\n            this._proxy.$registerUriHandler(handle, extensionId);\n            return lifecycle_1.toDisposable(() => {\n                this.handles.delete(extensions_1.ExtensionIdentifier.toKey(extensionId));\n                this.handlers.delete(handle);\n                this._proxy.$unregisterUriHandler(handle);\n            });\n        }\n        $handleExternalUri(handle, uri) {\n            const handler = this.handlers.get(handle);\n            if (!handler) {\n                return Promise.resolve(undefined);\n            }\n            try {\n                handler.handleUri(uri_1.URI.revive(uri));\n            }\n            catch (err) {\n                errors_1.onUnexpectedError(err);\n            }\n            return Promise.resolve(undefined);\n        }\n    }\n    ExtHostUrls.HandlePool = 0;\n    exports.ExtHostUrls = ExtHostUrls;\n});\n",null]}