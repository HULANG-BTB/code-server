{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar textEditorModel_1 = require(\"vs/workbench/common/editor/textEditorModel\");\nvar diffEditorModel_1 = require(\"vs/workbench/common/editor/diffEditorModel\");\nvar textDiffEditorModel_1 = require(\"vs/workbench/common/editor/textDiffEditorModel\");\n/**\n * The base editor input for the diff editor. It is made up of two editor inputs, the original version\n * and the modified version.\n */\nvar DiffEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(DiffEditorInput, _super);\n    function DiffEditorInput(name, description, original, modified, forceOpenAsBinary) {\n        var _this = _super.call(this, name, description, original, modified) || this;\n        _this.forceOpenAsBinary = forceOpenAsBinary;\n        return _this;\n    }\n    DiffEditorInput.prototype.getTypeId = function () {\n        return DiffEditorInput.ID;\n    };\n    Object.defineProperty(DiffEditorInput.prototype, \"originalInput\", {\n        get: function () {\n            return this.details;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DiffEditorInput.prototype, \"modifiedInput\", {\n        get: function () {\n            return this.master;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DiffEditorInput.prototype.resolve = function () {\n        var _this = this;\n        // Create Model - we never reuse our cached model if refresh is true because we cannot\n        // decide for the inputs within if the cached model can be reused or not. There may be\n        // inputs that need to be loaded again and thus we always recreate the model and dispose\n        // the previous one - if any.\n        return this.createModel().then(function (resolvedModel) {\n            if (_this.cachedModel) {\n                _this.cachedModel.dispose();\n            }\n            _this.cachedModel = resolvedModel;\n            return _this.cachedModel;\n        });\n    };\n    DiffEditorInput.prototype.getPreferredEditorId = function (candidates) {\n        return this.forceOpenAsBinary ? editor_1.BINARY_DIFF_EDITOR_ID : editor_1.TEXT_DIFF_EDITOR_ID;\n    };\n    DiffEditorInput.prototype.createModel = function () {\n        // Join resolve call over two inputs and build diff editor model\n        return Promise.all([\n            this.originalInput.resolve(),\n            this.modifiedInput.resolve()\n        ]).then(function (models) {\n            var originalEditorModel = models[0];\n            var modifiedEditorModel = models[1];\n            // If both are text models, return textdiffeditor model\n            if (modifiedEditorModel instanceof textEditorModel_1.BaseTextEditorModel && originalEditorModel instanceof textEditorModel_1.BaseTextEditorModel) {\n                return new textDiffEditorModel_1.TextDiffEditorModel(originalEditorModel, modifiedEditorModel);\n            }\n            // Otherwise return normal diff model\n            return new diffEditorModel_1.DiffEditorModel(originalEditorModel, modifiedEditorModel);\n        });\n    };\n    DiffEditorInput.prototype.dispose = function () {\n        // Free the diff editor model but do not propagate the dispose() call to the two inputs\n        // We never created the two inputs (original and modified) so we can not dispose\n        // them without sideeffects.\n        if (this.cachedModel) {\n            this.cachedModel.dispose();\n            this.cachedModel = null;\n        }\n        _super.prototype.dispose.call(this);\n    };\n    DiffEditorInput.ID = 'workbench.editors.diffEditorInput';\n    return DiffEditorInput;\n}(editor_1.SideBySideEditorInput));\nexports.DiffEditorInput = DiffEditorInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/diffEditorInput.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qDAAyI;AACzI,8EAAiF;AACjF,8EAA6E;AAC7E,sFAAqF;AAErF;;;GAGG;AACH;IAAqC,2CAAqB;IAMzD,yBAAY,IAAY,EAAE,WAA0B,EAAE,QAAqB,EAAE,QAAqB,EAAmB,iBAA2B;QAAhJ,YACC,kBAAM,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,CAAC,SAC5C;QAFoH,uBAAiB,GAAjB,iBAAiB,CAAU;;IAEhJ,CAAC;IAED,mCAAS,GAAT;QACC,OAAO,eAAe,CAAC,EAAE,CAAC;IAC3B,CAAC;IAED,sBAAI,0CAAa;aAAjB;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAI,0CAAa;aAAjB;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;;;OAAA;IAED,iCAAO,GAAP;QAAA,iBAeC;QAbA,sFAAsF;QACtF,sFAAsF;QACtF,wFAAwF;QACxF,6BAA6B;QAC7B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,UAAA,aAAa;YAC3C,IAAI,KAAI,CAAC,WAAW,EAAE;gBACrB,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;aAC3B;YAED,KAAI,CAAC,WAAW,GAAG,aAAa,CAAC;YAEjC,OAAO,KAAI,CAAC,WAAW,CAAC;QACzB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,8CAAoB,GAApB,UAAqB,UAAoB;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,8BAAqB,CAAC,CAAC,CAAC,4BAAmB,CAAC;IAC7E,CAAC;IAEO,qCAAW,GAAnB;QAEC,gEAAgE;QAChE,OAAO,OAAO,CAAC,GAAG,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;SAC5B,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACb,IAAM,mBAAmB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtC,IAAM,mBAAmB,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAEtC,uDAAuD;YACvD,IAAI,mBAAmB,YAAY,qCAAmB,IAAI,mBAAmB,YAAY,qCAAmB,EAAE;gBAC7G,OAAO,IAAI,yCAAmB,CAAsB,mBAAmB,EAAuB,mBAAmB,CAAC,CAAC;aACnH;YAED,qCAAqC;YACrC,OAAO,IAAI,iCAAe,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,iCAAO,GAAP;QAEC,uFAAuF;QACvF,gFAAgF;QAChF,4BAA4B;QAC5B,IAAI,IAAI,CAAC,WAAW,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACxB;QAED,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAxEe,kBAAE,GAAG,mCAAmC,CAAC;IAyE1D,sBAAC;CAAA,AA3ED,CAAqC,8BAAqB,GA2EzD;AA3EY,0CAAe","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel, EditorInput, SideBySideEditorInput, TEXT_DIFF_EDITOR_ID, BINARY_DIFF_EDITOR_ID } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { DiffEditorModel } from 'vs/workbench/common/editor/diffEditorModel';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\n\n/**\n * The base editor input for the diff editor. It is made up of two editor inputs, the original version\n * and the modified version.\n */\nexport class DiffEditorInput extends SideBySideEditorInput {\n\n\tstatic readonly ID = 'workbench.editors.diffEditorInput';\n\n\tprivate cachedModel: DiffEditorModel | null;\n\n\tconstructor(name: string, description: string | null, original: EditorInput, modified: EditorInput, private readonly forceOpenAsBinary?: boolean) {\n\t\tsuper(name, description, original, modified);\n\t}\n\n\tgetTypeId(): string {\n\t\treturn DiffEditorInput.ID;\n\t}\n\n\tget originalInput(): EditorInput {\n\t\treturn this.details;\n\t}\n\n\tget modifiedInput(): EditorInput {\n\t\treturn this.master;\n\t}\n\n\tresolve(): Promise<EditorModel> {\n\n\t\t// Create Model - we never reuse our cached model if refresh is true because we cannot\n\t\t// decide for the inputs within if the cached model can be reused or not. There may be\n\t\t// inputs that need to be loaded again and thus we always recreate the model and dispose\n\t\t// the previous one - if any.\n\t\treturn this.createModel().then(resolvedModel => {\n\t\t\tif (this.cachedModel) {\n\t\t\t\tthis.cachedModel.dispose();\n\t\t\t}\n\n\t\t\tthis.cachedModel = resolvedModel;\n\n\t\t\treturn this.cachedModel;\n\t\t});\n\t}\n\n\tgetPreferredEditorId(candidates: string[]): string {\n\t\treturn this.forceOpenAsBinary ? BINARY_DIFF_EDITOR_ID : TEXT_DIFF_EDITOR_ID;\n\t}\n\n\tprivate createModel(): Promise<DiffEditorModel> {\n\n\t\t// Join resolve call over two inputs and build diff editor model\n\t\treturn Promise.all([\n\t\t\tthis.originalInput.resolve(),\n\t\t\tthis.modifiedInput.resolve()\n\t\t]).then(models => {\n\t\t\tconst originalEditorModel = models[0];\n\t\t\tconst modifiedEditorModel = models[1];\n\n\t\t\t// If both are text models, return textdiffeditor model\n\t\t\tif (modifiedEditorModel instanceof BaseTextEditorModel && originalEditorModel instanceof BaseTextEditorModel) {\n\t\t\t\treturn new TextDiffEditorModel(<BaseTextEditorModel>originalEditorModel, <BaseTextEditorModel>modifiedEditorModel);\n\t\t\t}\n\n\t\t\t// Otherwise return normal diff model\n\t\t\treturn new DiffEditorModel(originalEditorModel, modifiedEditorModel);\n\t\t});\n\t}\n\n\tdispose(): void {\n\n\t\t// Free the diff editor model but do not propagate the dispose() call to the two inputs\n\t\t// We never created the two inputs (original and modified) so we can not dispose\n\t\t// them without sideeffects.\n\t\tif (this.cachedModel) {\n\t\t\tthis.cachedModel.dispose();\n\t\t\tthis.cachedModel = null;\n\t\t}\n\n\t\tsuper.dispose();\n\t}\n}"]}]}