{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/color.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/colorPicker/color.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/base/common/uri\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/core/range\", \"vs/editor/common/modes\", \"vs/editor/common/services/modelService\"], function (require, exports, cancellation_1, errors_1, uri_1, editorExtensions_1, range_1, modes_1, modelService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getColors(model, token) {\n        const colors = [];\n        const providers = modes_1.ColorProviderRegistry.ordered(model).reverse();\n        const promises = providers.map(provider => Promise.resolve(provider.provideDocumentColors(model, token)).then(result => {\n            if (Array.isArray(result)) {\n                for (let colorInfo of result) {\n                    colors.push({ colorInfo, provider });\n                }\n            }\n        }));\n        return Promise.all(promises).then(() => colors);\n    }\n    exports.getColors = getColors;\n    function getColorPresentations(model, colorInfo, provider, token) {\n        return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));\n    }\n    exports.getColorPresentations = getColorPresentations;\n    editorExtensions_1.registerLanguageCommand('_executeDocumentColorProvider', function (accessor, args) {\n        const { resource } = args;\n        if (!(resource instanceof uri_1.URI)) {\n            throw errors_1.illegalArgument();\n        }\n        const model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (!model) {\n            throw errors_1.illegalArgument();\n        }\n        const rawCIs = [];\n        const providers = modes_1.ColorProviderRegistry.ordered(model).reverse();\n        const promises = providers.map(provider => Promise.resolve(provider.provideDocumentColors(model, cancellation_1.CancellationToken.None)).then(result => {\n            if (Array.isArray(result)) {\n                for (let ci of result) {\n                    rawCIs.push({ range: ci.range, color: [ci.color.red, ci.color.green, ci.color.blue, ci.color.alpha] });\n                }\n            }\n        }));\n        return Promise.all(promises).then(() => rawCIs);\n    });\n    editorExtensions_1.registerLanguageCommand('_executeColorPresentationProvider', function (accessor, args) {\n        const { resource, color, range } = args;\n        if (!(resource instanceof uri_1.URI) || !Array.isArray(color) || color.length !== 4 || !range_1.Range.isIRange(range)) {\n            throw errors_1.illegalArgument();\n        }\n        const [red, green, blue, alpha] = color;\n        const model = accessor.get(modelService_1.IModelService).getModel(resource);\n        if (!model) {\n            throw errors_1.illegalArgument();\n        }\n        const colorInfo = {\n            range,\n            color: { red, green, blue, alpha }\n        };\n        const presentations = [];\n        const providers = modes_1.ColorProviderRegistry.ordered(model).reverse();\n        const promises = providers.map(provider => Promise.resolve(provider.provideColorPresentations(model, colorInfo, cancellation_1.CancellationToken.None)).then(result => {\n            if (Array.isArray(result)) {\n                presentations.push(...result);\n            }\n        }));\n        return Promise.all(promises).then(() => presentations);\n    });\n});\n",null]}