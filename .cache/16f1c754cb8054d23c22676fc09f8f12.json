{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar parameterHintsWidget_1 = require(\"./parameterHintsWidget\");\nvar provideSignatureHelp_1 = require(\"vs/editor/contrib/parameterHints/provideSignatureHelp\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar modes = require(\"vs/editor/common/modes\");\nvar ParameterHintsController = /** @class */ (function () {\n    function ParameterHintsController(editor, instantiationService) {\n        this.editor = editor;\n        this.widget = instantiationService.createInstance(parameterHintsWidget_1.ParameterHintsWidget, this.editor);\n    }\n    ParameterHintsController.get = function (editor) {\n        return editor.getContribution(ParameterHintsController.ID);\n    };\n    ParameterHintsController.prototype.getId = function () {\n        return ParameterHintsController.ID;\n    };\n    ParameterHintsController.prototype.cancel = function () {\n        this.widget.cancel();\n    };\n    ParameterHintsController.prototype.previous = function () {\n        this.widget.previous();\n    };\n    ParameterHintsController.prototype.next = function () {\n        this.widget.next();\n    };\n    ParameterHintsController.prototype.trigger = function (context) {\n        this.widget.trigger(context);\n    };\n    ParameterHintsController.prototype.dispose = function () {\n        lifecycle_1.dispose(this.widget);\n    };\n    ParameterHintsController.ID = 'editor.controller.parameterHints';\n    ParameterHintsController = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], ParameterHintsController);\n    return ParameterHintsController;\n}());\nvar TriggerParameterHintsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(TriggerParameterHintsAction, _super);\n    function TriggerParameterHintsAction() {\n        return _super.call(this, {\n            id: 'editor.action.triggerParameterHints',\n            label: nls.localize('parameterHints.trigger.label', \"Trigger Parameter Hints\"),\n            alias: 'Trigger Parameter Hints',\n            precondition: editorContextKeys_1.EditorContextKeys.hasSignatureHelpProvider,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Space,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    TriggerParameterHintsAction.prototype.run = function (accessor, editor) {\n        var controller = ParameterHintsController.get(editor);\n        if (controller) {\n            controller.trigger({\n                triggerKind: modes.SignatureHelpTriggerKind.Invoke\n            });\n        }\n    };\n    return TriggerParameterHintsAction;\n}(editorExtensions_1.EditorAction));\nexports.TriggerParameterHintsAction = TriggerParameterHintsAction;\neditorExtensions_1.registerEditorContribution(ParameterHintsController);\neditorExtensions_1.registerEditorAction(TriggerParameterHintsAction);\nvar weight = keybindingsRegistry_1.KeybindingWeight.EditorContrib + 75;\nvar ParameterHintsCommand = editorExtensions_1.EditorCommand.bindToContribution(ParameterHintsController.get);\neditorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n    id: 'closeParameterHints',\n    precondition: provideSignatureHelp_1.Context.Visible,\n    handler: function (x) { return x.cancel(); },\n    kbOpts: {\n        weight: weight,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.Escape,\n        secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n    }\n}));\neditorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n    id: 'showPrevParameterHint',\n    precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),\n    handler: function (x) { return x.previous(); },\n    kbOpts: {\n        weight: weight,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.UpArrow,\n        secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow],\n        mac: { primary: keyCodes_1.KeyCode.UpArrow, secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_P] }\n    }\n}));\neditorExtensions_1.registerEditorCommand(new ParameterHintsCommand({\n    id: 'showNextParameterHint',\n    precondition: contextkey_1.ContextKeyExpr.and(provideSignatureHelp_1.Context.Visible, provideSignatureHelp_1.Context.MultipleSignatures),\n    handler: function (x) { return x.next(); },\n    kbOpts: {\n        weight: weight,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.DownArrow,\n        secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow],\n        mac: { primary: keyCodes_1.KeyCode.DownArrow, secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow, keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_N] }\n    }\n}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/parameterHints/parameterHints.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { registerEditorAction, registerEditorContribution, ServicesAccessor, EditorAction, EditorCommand, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ParameterHintsWidget } from './parameterHintsWidget';\nimport { Context } from 'vs/editor/contrib/parameterHints/provideSignatureHelp';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport * as modes from 'vs/editor/common/modes';\nimport { TriggerContext } from 'vs/editor/contrib/parameterHints/parameterHintsModel';\n\nclass ParameterHintsController implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.controller.parameterHints';\n\n\tpublic static get(editor: ICodeEditor): ParameterHintsController {\n\t\treturn editor.getContribution<ParameterHintsController>(ParameterHintsController.ID);\n\t}\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate readonly widget: ParameterHintsWidget;\n\n\tconstructor(editor: ICodeEditor, @IInstantiationService instantiationService: IInstantiationService) {\n\t\tthis.editor = editor;\n\t\tthis.widget = instantiationService.createInstance(ParameterHintsWidget, this.editor);\n\t}\n\n\tgetId(): string {\n\t\treturn ParameterHintsController.ID;\n\t}\n\n\tcancel(): void {\n\t\tthis.widget.cancel();\n\t}\n\n\tprevious(): void {\n\t\tthis.widget.previous();\n\t}\n\n\tnext(): void {\n\t\tthis.widget.next();\n\t}\n\n\ttrigger(context: TriggerContext): void {\n\t\tthis.widget.trigger(context);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.widget);\n\t}\n}\n\nexport class TriggerParameterHintsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.triggerParameterHints',\n\t\t\tlabel: nls.localize('parameterHints.trigger.label', \"Trigger Parameter Hints\"),\n\t\t\talias: 'Trigger Parameter Hints',\n\t\t\tprecondition: EditorContextKeys.hasSignatureHelpProvider,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Space,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet controller = ParameterHintsController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.trigger({\n\t\t\t\ttriggerKind: modes.SignatureHelpTriggerKind.Invoke\n\t\t\t});\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ParameterHintsController);\nregisterEditorAction(TriggerParameterHintsAction);\n\nconst weight = KeybindingWeight.EditorContrib + 75;\n\nconst ParameterHintsCommand = EditorCommand.bindToContribution<ParameterHintsController>(ParameterHintsController.get);\n\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'closeParameterHints',\n\tprecondition: Context.Visible,\n\thandler: x => x.cancel(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showPrevParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.previous(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\t\tmac: { primary: KeyCode.UpArrow, secondary: [KeyMod.Alt | KeyCode.UpArrow, KeyMod.WinCtrl | KeyCode.KEY_P] }\n\t}\n}));\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showNextParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.next(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\t\tmac: { primary: KeyCode.DownArrow, secondary: [KeyMod.Alt | KeyCode.DownArrow, KeyMod.WinCtrl | KeyCode.KEY_N] }\n\t}\n}));\n"]}]}