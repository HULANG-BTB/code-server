{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationModels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationModels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar json = require(\"vs/base/common/json\");\nvar map_1 = require(\"vs/base/common/map\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar types = require(\"vs/base/common/types\");\nvar objects = require(\"vs/base/common/objects\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar ConfigurationModel = /** @class */ (function () {\n    function ConfigurationModel(_contents, _keys, _overrides) {\n        if (_contents === void 0) { _contents = {}; }\n        if (_keys === void 0) { _keys = []; }\n        if (_overrides === void 0) { _overrides = []; }\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.isFrozen = false;\n    }\n    Object.defineProperty(ConfigurationModel.prototype, \"contents\", {\n        get: function () {\n            return this.checkAndFreeze(this._contents);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationModel.prototype, \"overrides\", {\n        get: function () {\n            return this.checkAndFreeze(this._overrides);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationModel.prototype, \"keys\", {\n        get: function () {\n            return this.checkAndFreeze(this._keys);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigurationModel.prototype.isEmpty = function () {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    };\n    ConfigurationModel.prototype.getValue = function (section) {\n        return section ? configuration_1.getConfigurationValue(this.contents, section) : this.contents;\n    };\n    ConfigurationModel.prototype.override = function (identifier) {\n        var overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        var contents = {};\n        for (var _i = 0, _a = arrays.distinct(Object.keys(this.contents).concat(Object.keys(overrideContents))); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var contentsForKey = this.contents[key];\n            var overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents);\n    };\n    ConfigurationModel.prototype.merge = function () {\n        var others = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            others[_i] = arguments[_i];\n        }\n        var contents = objects.deepClone(this.contents);\n        var overrides = objects.deepClone(this.overrides);\n        var keys = this.keys.slice();\n        for (var _a = 0, others_1 = others; _a < others_1.length; _a++) {\n            var other = others_1[_a];\n            this.mergeContents(contents, other.contents);\n            var _loop_1 = function (otherOverride) {\n                var override = overrides.filter(function (o) { return arrays.equals(o.identifiers, otherOverride.identifiers); })[0];\n                if (override) {\n                    this_1.mergeContents(override.contents, otherOverride.contents);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            };\n            var this_1 = this;\n            for (var _b = 0, _c = other.overrides; _b < _c.length; _b++) {\n                var otherOverride = _c[_b];\n                _loop_1(otherOverride);\n            }\n            for (var _d = 0, _e = other.keys; _d < _e.length; _d++) {\n                var key = _e[_d];\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides);\n    };\n    ConfigurationModel.prototype.freeze = function () {\n        this.isFrozen = true;\n        return this;\n    };\n    ConfigurationModel.prototype.mergeContents = function (source, target) {\n        for (var _i = 0, _a = Object.keys(target); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    };\n    ConfigurationModel.prototype.checkAndFreeze = function (data) {\n        if (this.isFrozen && !Object.isFrozen(data)) {\n            return objects.deepFreeze(data);\n        }\n        return data;\n    };\n    ConfigurationModel.prototype.getContentsForOverrideIdentifer = function (identifier) {\n        for (var _i = 0, _a = this.overrides; _i < _a.length; _i++) {\n            var override = _a[_i];\n            if (override.identifiers.indexOf(identifier) !== -1) {\n                return override.contents;\n            }\n        }\n        return null;\n    };\n    ConfigurationModel.prototype.toJSON = function () {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    };\n    // Update methods\n    ConfigurationModel.prototype.setValue = function (key, value) {\n        this.addKey(key);\n        configuration_1.addToValueTree(this.contents, key, value, function (e) { throw new Error(e); });\n    };\n    ConfigurationModel.prototype.removeValue = function (key) {\n        if (this.removeKey(key)) {\n            configuration_1.removeFromValueTree(this.contents, key);\n        }\n    };\n    ConfigurationModel.prototype.addKey = function (key) {\n        var index = this.keys.length;\n        for (var i = 0; i < index; i++) {\n            if (key.indexOf(this.keys[i]) === 0) {\n                index = i;\n            }\n        }\n        this.keys.splice(index, 1, key);\n    };\n    ConfigurationModel.prototype.removeKey = function (key) {\n        var index = this.keys.indexOf(key);\n        if (index !== -1) {\n            this.keys.splice(index, 1);\n            return true;\n        }\n        return false;\n    };\n    return ConfigurationModel;\n}());\nexports.ConfigurationModel = ConfigurationModel;\nvar DefaultConfigurationModel = /** @class */ (function (_super) {\n    tslib_1.__extends(DefaultConfigurationModel, _super);\n    function DefaultConfigurationModel() {\n        var _this = this;\n        var contents = configuration_1.getDefaultValues();\n        var keys = configuration_1.getConfigurationKeys();\n        var overrides = [];\n        for (var _i = 0, _a = Object.keys(contents); _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (configurationRegistry_1.OVERRIDE_PROPERTY_PATTERN.test(key)) {\n                overrides.push({\n                    identifiers: [configuration_1.overrideIdentifierFromKey(key).trim()],\n                    contents: configuration_1.toValuesTree(contents[key], function (message) { return console.error(\"Conflict in default settings file: \" + message); })\n                });\n            }\n        }\n        _this = _super.call(this, contents, keys, overrides) || this;\n        return _this;\n    }\n    return DefaultConfigurationModel;\n}(ConfigurationModel));\nexports.DefaultConfigurationModel = DefaultConfigurationModel;\nvar ConfigurationModelParser = /** @class */ (function () {\n    function ConfigurationModelParser(_name) {\n        this._name = _name;\n        this._configurationModel = null;\n        this._parseErrors = [];\n    }\n    Object.defineProperty(ConfigurationModelParser.prototype, \"configurationModel\", {\n        get: function () {\n            return this._configurationModel || new ConfigurationModel();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationModelParser.prototype, \"errors\", {\n        get: function () {\n            return this._parseErrors;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigurationModelParser.prototype.parse = function (content) {\n        if (content) {\n            var raw = this.parseContent(content);\n            var configurationModel = this.parseRaw(raw);\n            this._configurationModel = new ConfigurationModel(configurationModel.contents, configurationModel.keys, configurationModel.overrides);\n        }\n    };\n    ConfigurationModelParser.prototype.parseContent = function (content) {\n        var raw = {};\n        var currentProperty = null;\n        var currentParent = [];\n        var previousParents = [];\n        var parseErrors = [];\n        function onValue(value) {\n            if (Array.isArray(currentParent)) {\n                currentParent.push(value);\n            }\n            else if (currentProperty) {\n                currentParent[currentProperty] = value;\n            }\n        }\n        var visitor = {\n            onObjectBegin: function () {\n                var object = {};\n                onValue(object);\n                previousParents.push(currentParent);\n                currentParent = object;\n                currentProperty = null;\n            },\n            onObjectProperty: function (name) {\n                currentProperty = name;\n            },\n            onObjectEnd: function () {\n                currentParent = previousParents.pop();\n            },\n            onArrayBegin: function () {\n                var array = [];\n                onValue(array);\n                previousParents.push(currentParent);\n                currentParent = array;\n                currentProperty = null;\n            },\n            onArrayEnd: function () {\n                currentParent = previousParents.pop();\n            },\n            onLiteralValue: onValue,\n            onError: function (error, offset, length) {\n                parseErrors.push({ error: error, offset: offset, length: length });\n            }\n        };\n        if (content) {\n            try {\n                json.visit(content, visitor);\n                raw = currentParent[0] || {};\n            }\n            catch (e) {\n                console.error(\"Error while parsing settings file \" + this._name + \": \" + e);\n                this._parseErrors = [e];\n            }\n        }\n        return raw;\n    };\n    ConfigurationModelParser.prototype.parseRaw = function (raw) {\n        var _this = this;\n        var contents = configuration_1.toValuesTree(raw, function (message) { return console.error(\"Conflict in settings file \" + _this._name + \": \" + message); });\n        var keys = Object.keys(raw);\n        var overrides = configuration_1.toOverrides(raw, function (message) { return console.error(\"Conflict in settings file \" + _this._name + \": \" + message); });\n        return { contents: contents, keys: keys, overrides: overrides };\n    };\n    return ConfigurationModelParser;\n}());\nexports.ConfigurationModelParser = ConfigurationModelParser;\nvar Configuration = /** @class */ (function () {\n    function Configuration(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, _freeze) {\n        if (_remoteUserConfiguration === void 0) { _remoteUserConfiguration = new ConfigurationModel(); }\n        if (_workspaceConfiguration === void 0) { _workspaceConfiguration = new ConfigurationModel(); }\n        if (_folderConfigurations === void 0) { _folderConfigurations = new map_1.ResourceMap(); }\n        if (_memoryConfiguration === void 0) { _memoryConfiguration = new ConfigurationModel(); }\n        if (_memoryConfigurationByResource === void 0) { _memoryConfigurationByResource = new map_1.ResourceMap(); }\n        if (_freeze === void 0) { _freeze = true; }\n        this._defaultConfiguration = _defaultConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this._freeze = _freeze;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new map_1.ResourceMap();\n    }\n    Configuration.prototype.getValue = function (section, overrides, workspace) {\n        var consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    };\n    Configuration.prototype.updateValue = function (key, value, overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        var memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = new ConfigurationModel();\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    };\n    Configuration.prototype.inspect = function (key, overrides, workspace) {\n        var consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n        var folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        var memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        return {\n            default: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key),\n            user: overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key),\n            userLocal: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key),\n            userRemote: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key),\n            workspace: workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined,\n            workspaceFolder: folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined,\n            memory: overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key),\n            value: consolidateConfigurationModel.getValue(key)\n        };\n    };\n    Configuration.prototype.keys = function (workspace) {\n        var folderConfigurationModel = this.getFolderConfigurationModelForResource(undefined, workspace);\n        return {\n            default: this._defaultConfiguration.freeze().keys,\n            user: this.userConfiguration.freeze().keys,\n            workspace: this._workspaceConfiguration.freeze().keys,\n            workspaceFolder: folderConfigurationModel ? folderConfigurationModel.freeze().keys : []\n        };\n    };\n    Configuration.prototype.updateDefaultConfiguration = function (defaultConfiguration) {\n        this._defaultConfiguration = defaultConfiguration;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations.clear();\n    };\n    Configuration.prototype.updateLocalUserConfiguration = function (localUserConfiguration) {\n        this._localUserConfiguration = localUserConfiguration;\n        this._userConfiguration = null;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations.clear();\n    };\n    Configuration.prototype.updateRemoteUserConfiguration = function (remoteUserConfiguration) {\n        this._remoteUserConfiguration = remoteUserConfiguration;\n        this._userConfiguration = null;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations.clear();\n    };\n    Configuration.prototype.updateWorkspaceConfiguration = function (workspaceConfiguration) {\n        this._workspaceConfiguration = workspaceConfiguration;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations.clear();\n    };\n    Configuration.prototype.updateFolderConfiguration = function (resource, configuration) {\n        this._folderConfigurations.set(resource, configuration);\n        this._foldersConsolidatedConfigurations.delete(resource);\n    };\n    Configuration.prototype.deleteFolderConfiguration = function (resource) {\n        this.folderConfigurations.delete(resource);\n        this._foldersConsolidatedConfigurations.delete(resource);\n    };\n    Object.defineProperty(Configuration.prototype, \"defaults\", {\n        get: function () {\n            return this._defaultConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"userConfiguration\", {\n        get: function () {\n            if (!this._userConfiguration) {\n                this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n                if (this._freeze) {\n                    this._userConfiguration.freeze();\n                }\n            }\n            return this._userConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"localUserConfiguration\", {\n        get: function () {\n            return this._localUserConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"remoteUserConfiguration\", {\n        get: function () {\n            return this._remoteUserConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"workspaceConfiguration\", {\n        get: function () {\n            return this._workspaceConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Configuration.prototype, \"folderConfigurations\", {\n        get: function () {\n            return this._folderConfigurations;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Configuration.prototype.getConsolidateConfigurationModel = function (overrides, workspace) {\n        var configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n    };\n    Configuration.prototype.getConsolidatedConfigurationModelForResource = function (_a, workspace) {\n        var resource = _a.resource;\n        var consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            var root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            var memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    };\n    Configuration.prototype.getWorkspaceConsolidatedConfiguration = function () {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n            if (this._freeze) {\n                this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n            }\n        }\n        return this._workspaceConsolidatedConfiguration;\n    };\n    Configuration.prototype.getFolderConsolidatedConfiguration = function (folder) {\n        var folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            var workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            var folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                if (this._freeze) {\n                    folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n                }\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    };\n    Configuration.prototype.getFolderConfigurationModelForResource = function (resource, workspace) {\n        if (workspace && resource) {\n            var root = workspace.getFolder(resource);\n            if (root) {\n                return types.withUndefinedAsNull(this._folderConfigurations.get(root.uri));\n            }\n        }\n        return null;\n    };\n    Configuration.prototype.toData = function () {\n        var _this = this;\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: this._folderConfigurations.keys().reduce(function (result, folder) {\n                var _a = _this._folderConfigurations.get(folder), contents = _a.contents, overrides = _a.overrides, keys = _a.keys;\n                result[folder.toString()] = { contents: contents, overrides: overrides, keys: keys };\n                return result;\n            }, Object.create({})),\n            isComplete: true\n        };\n    };\n    Configuration.prototype.allKeys = function (workspace) {\n        var keys = this.keys(workspace);\n        var all = keys.default.slice();\n        var addKeys = function (keys) {\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if (all.indexOf(key) === -1) {\n                    all.push(key);\n                }\n            }\n        };\n        addKeys(keys.user);\n        addKeys(keys.workspace);\n        for (var _i = 0, _a = this.folderConfigurations.keys(); _i < _a.length; _i++) {\n            var resource = _a[_i];\n            addKeys(this.folderConfigurations.get(resource).keys);\n        }\n        return all;\n    };\n    return Configuration;\n}());\nexports.Configuration = Configuration;\nvar AbstractConfigurationChangeEvent = /** @class */ (function () {\n    function AbstractConfigurationChangeEvent() {\n    }\n    AbstractConfigurationChangeEvent.prototype.doesConfigurationContains = function (configuration, config) {\n        var _a;\n        var changedKeysTree = configuration.contents;\n        var requestedTree = configuration_1.toValuesTree((_a = {}, _a[config] = true, _a), function () { });\n        var key;\n        while (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\n            changedKeysTree = changedKeysTree[key];\n            if (!changedKeysTree) {\n                return false; // Requested tree is not found\n            }\n            requestedTree = requestedTree[key];\n        }\n        return true;\n    };\n    AbstractConfigurationChangeEvent.prototype.updateKeys = function (configuration, keys, resource) {\n        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {\n            var key = keys_2[_i];\n            configuration.setValue(key, {});\n        }\n    };\n    return AbstractConfigurationChangeEvent;\n}());\nexports.AbstractConfigurationChangeEvent = AbstractConfigurationChangeEvent;\nvar ConfigurationChangeEvent = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigurationChangeEvent, _super);\n    function ConfigurationChangeEvent(_changedConfiguration, _changedConfigurationByResource) {\n        if (_changedConfiguration === void 0) { _changedConfiguration = new ConfigurationModel(); }\n        if (_changedConfigurationByResource === void 0) { _changedConfigurationByResource = new map_1.ResourceMap(); }\n        var _this = _super.call(this) || this;\n        _this._changedConfiguration = _changedConfiguration;\n        _this._changedConfigurationByResource = _changedConfigurationByResource;\n        return _this;\n    }\n    Object.defineProperty(ConfigurationChangeEvent.prototype, \"changedConfiguration\", {\n        get: function () {\n            return this._changedConfiguration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationChangeEvent.prototype, \"changedConfigurationByResource\", {\n        get: function () {\n            return this._changedConfigurationByResource;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigurationChangeEvent.prototype.change = function (arg1, arg2) {\n        if (arg1 instanceof ConfigurationChangeEvent) {\n            this._changedConfiguration = this._changedConfiguration.merge(arg1._changedConfiguration);\n            for (var _i = 0, _a = arg1._changedConfigurationByResource.keys(); _i < _a.length; _i++) {\n                var resource = _a[_i];\n                var changedConfigurationByResource = this.getOrSetChangedConfigurationForResource(resource);\n                changedConfigurationByResource = changedConfigurationByResource.merge(arg1._changedConfigurationByResource.get(resource));\n                this._changedConfigurationByResource.set(resource, changedConfigurationByResource);\n            }\n        }\n        else {\n            this.changeWithKeys(arg1, arg2);\n        }\n        return this;\n    };\n    ConfigurationChangeEvent.prototype.telemetryData = function (source, sourceConfig) {\n        this._source = source;\n        this._sourceConfig = sourceConfig;\n        return this;\n    };\n    Object.defineProperty(ConfigurationChangeEvent.prototype, \"affectedKeys\", {\n        get: function () {\n            var keys = this._changedConfiguration.keys.slice();\n            this._changedConfigurationByResource.forEach(function (model) { return keys.push.apply(keys, model.keys); });\n            return arrays.distinct(keys);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationChangeEvent.prototype, \"source\", {\n        get: function () {\n            return this._source;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationChangeEvent.prototype, \"sourceConfig\", {\n        get: function () {\n            return this._sourceConfig;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigurationChangeEvent.prototype.affectsConfiguration = function (config, resource) {\n        var configurationModelsToSearch = [this._changedConfiguration];\n        if (resource) {\n            var model = this._changedConfigurationByResource.get(resource);\n            if (model) {\n                configurationModelsToSearch.push(model);\n            }\n        }\n        else {\n            configurationModelsToSearch.push.apply(configurationModelsToSearch, this._changedConfigurationByResource.values());\n        }\n        for (var _i = 0, configurationModelsToSearch_1 = configurationModelsToSearch; _i < configurationModelsToSearch_1.length; _i++) {\n            var configuration = configurationModelsToSearch_1[_i];\n            if (this.doesConfigurationContains(configuration, config)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ConfigurationChangeEvent.prototype.changeWithKeys = function (keys, resource) {\n        var changedConfiguration = resource ? this.getOrSetChangedConfigurationForResource(resource) : this._changedConfiguration;\n        this.updateKeys(changedConfiguration, keys);\n    };\n    ConfigurationChangeEvent.prototype.getOrSetChangedConfigurationForResource = function (resource) {\n        var changedConfigurationByResource = this._changedConfigurationByResource.get(resource);\n        if (!changedConfigurationByResource) {\n            changedConfigurationByResource = new ConfigurationModel();\n            this._changedConfigurationByResource.set(resource, changedConfigurationByResource);\n        }\n        return changedConfigurationByResource;\n    };\n    return ConfigurationChangeEvent;\n}(AbstractConfigurationChangeEvent));\nexports.ConfigurationChangeEvent = ConfigurationChangeEvent;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationModels.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationModels.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as json from 'vs/base/common/json';\nimport { ResourceMap } from 'vs/base/common/map';\nimport * as arrays from 'vs/base/common/arrays';\nimport * as types from 'vs/base/common/types';\nimport * as objects from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { OVERRIDE_PROPERTY_PATTERN } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IOverrides, overrideIdentifierFromKey, addToValueTree, toValuesTree, IConfigurationModel, getConfigurationValue, IConfigurationOverrides, IConfigurationData, getDefaultValues, getConfigurationKeys, IConfigurationChangeEvent, ConfigurationTarget, removeFromValueTree, toOverrides } from 'vs/platform/configuration/common/configuration';\nimport { Workspace } from 'vs/platform/workspace/common/workspace';\n\nexport class ConfigurationModel implements IConfigurationModel {\n\n\tprivate isFrozen: boolean = false;\n\n\tconstructor(\n\t\tprivate _contents: any = {},\n\t\tprivate _keys: string[] = [],\n\t\tprivate _overrides: IOverrides[] = []\n\t) {\n\t}\n\n\tget contents(): any {\n\t\treturn this.checkAndFreeze(this._contents);\n\t}\n\n\tget overrides(): IOverrides[] {\n\t\treturn this.checkAndFreeze(this._overrides);\n\t}\n\n\tget keys(): string[] {\n\t\treturn this.checkAndFreeze(this._keys);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n\t}\n\n\tgetValue<V>(section: string | undefined): V {\n\t\treturn section ? getConfigurationValue<any>(this.contents, section) : this.contents;\n\t}\n\n\toverride(identifier: string): ConfigurationModel {\n\t\tconst overrideContents = this.getContentsForOverrideIdentifer(identifier);\n\n\t\tif (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n\t\t\t// If there are no valid overrides, return self\n\t\t\treturn this;\n\t\t}\n\n\t\tlet contents = {};\n\t\tfor (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n\n\t\t\tlet contentsForKey = this.contents[key];\n\t\t\tlet overrideContentsForKey = overrideContents[key];\n\n\t\t\t// If there are override contents for the key, clone and merge otherwise use base contents\n\t\t\tif (overrideContentsForKey) {\n\t\t\t\t// Clone and merge only if base contents and override contents are of type object otherwise just override\n\t\t\t\tif (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n\t\t\t\t\tcontentsForKey = objects.deepClone(contentsForKey);\n\t\t\t\t\tthis.mergeContents(contentsForKey, overrideContentsForKey);\n\t\t\t\t} else {\n\t\t\t\t\tcontentsForKey = overrideContentsForKey;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontents[key] = contentsForKey;\n\t\t}\n\n\t\treturn new ConfigurationModel(contents);\n\t}\n\n\tmerge(...others: ConfigurationModel[]): ConfigurationModel {\n\t\tconst contents = objects.deepClone(this.contents);\n\t\tconst overrides = objects.deepClone(this.overrides);\n\t\tconst keys = [...this.keys];\n\n\t\tfor (const other of others) {\n\t\t\tthis.mergeContents(contents, other.contents);\n\n\t\t\tfor (const otherOverride of other.overrides) {\n\t\t\t\tconst [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n\t\t\t\tif (override) {\n\t\t\t\t\tthis.mergeContents(override.contents, otherOverride.contents);\n\t\t\t\t} else {\n\t\t\t\t\toverrides.push(objects.deepClone(otherOverride));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const key of other.keys) {\n\t\t\t\tif (keys.indexOf(key) === -1) {\n\t\t\t\t\tkeys.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new ConfigurationModel(contents, keys, overrides);\n\t}\n\n\tfreeze(): ConfigurationModel {\n\t\tthis.isFrozen = true;\n\t\treturn this;\n\t}\n\n\tprivate mergeContents(source: any, target: any): void {\n\t\tfor (const key of Object.keys(target)) {\n\t\t\tif (key in source) {\n\t\t\t\tif (types.isObject(source[key]) && types.isObject(target[key])) {\n\t\t\t\t\tthis.mergeContents(source[key], target[key]);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource[key] = objects.deepClone(target[key]);\n\t\t}\n\t}\n\n\tprivate checkAndFreeze<T>(data: T): T {\n\t\tif (this.isFrozen && !Object.isFrozen(data)) {\n\t\t\treturn objects.deepFreeze(data);\n\t\t}\n\t\treturn data;\n\t}\n\n\tprivate getContentsForOverrideIdentifer(identifier: string): any {\n\t\tfor (const override of this.overrides) {\n\t\t\tif (override.identifiers.indexOf(identifier) !== -1) {\n\t\t\t\treturn override.contents;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\ttoJSON(): IConfigurationModel {\n\t\treturn {\n\t\t\tcontents: this.contents,\n\t\t\toverrides: this.overrides,\n\t\t\tkeys: this.keys\n\t\t};\n\t}\n\n\t// Update methods\n\n\tpublic setValue(key: string, value: any) {\n\t\tthis.addKey(key);\n\t\taddToValueTree(this.contents, key, value, e => { throw new Error(e); });\n\t}\n\n\tpublic removeValue(key: string): void {\n\t\tif (this.removeKey(key)) {\n\t\t\tremoveFromValueTree(this.contents, key);\n\t\t}\n\t}\n\n\tprivate addKey(key: string): void {\n\t\tlet index = this.keys.length;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (key.indexOf(this.keys[i]) === 0) {\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tthis.keys.splice(index, 1, key);\n\t}\n\n\tprivate removeKey(key: string): boolean {\n\t\tlet index = this.keys.indexOf(key);\n\t\tif (index !== -1) {\n\t\t\tthis.keys.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class DefaultConfigurationModel extends ConfigurationModel {\n\n\tconstructor() {\n\t\tconst contents = getDefaultValues();\n\t\tconst keys = getConfigurationKeys();\n\t\tconst overrides: IOverrides[] = [];\n\t\tfor (const key of Object.keys(contents)) {\n\t\t\tif (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n\t\t\t\toverrides.push({\n\t\t\t\t\tidentifiers: [overrideIdentifierFromKey(key).trim()],\n\t\t\t\t\tcontents: toValuesTree(contents[key], message => console.error(`Conflict in default settings file: ${message}`))\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tsuper(contents, keys, overrides);\n\t}\n}\n\nexport class ConfigurationModelParser {\n\n\tprivate _configurationModel: ConfigurationModel | null = null;\n\tprivate _parseErrors: any[] = [];\n\n\tconstructor(protected readonly _name: string) { }\n\n\tget configurationModel(): ConfigurationModel {\n\t\treturn this._configurationModel || new ConfigurationModel();\n\t}\n\n\tget errors(): any[] {\n\t\treturn this._parseErrors;\n\t}\n\n\tpublic parse(content: string | null | undefined): void {\n\t\tif (content) {\n\t\t\tconst raw = this.parseContent(content);\n\t\t\tconst configurationModel = this.parseRaw(raw);\n\t\t\tthis._configurationModel = new ConfigurationModel(configurationModel.contents, configurationModel.keys, configurationModel.overrides);\n\t\t}\n\t}\n\n\tprotected parseContent(content: string): any {\n\t\tlet raw: any = {};\n\t\tlet currentProperty: string | null = null;\n\t\tlet currentParent: any = [];\n\t\tlet previousParents: any[] = [];\n\t\tlet parseErrors: json.ParseError[] = [];\n\n\t\tfunction onValue(value: any) {\n\t\t\tif (Array.isArray(currentParent)) {\n\t\t\t\t(<any[]>currentParent).push(value);\n\t\t\t} else if (currentProperty) {\n\t\t\t\tcurrentParent[currentProperty] = value;\n\t\t\t}\n\t\t}\n\n\t\tlet visitor: json.JSONVisitor = {\n\t\t\tonObjectBegin: () => {\n\t\t\t\tlet object = {};\n\t\t\t\tonValue(object);\n\t\t\t\tpreviousParents.push(currentParent);\n\t\t\t\tcurrentParent = object;\n\t\t\t\tcurrentProperty = null;\n\t\t\t},\n\t\t\tonObjectProperty: (name: string) => {\n\t\t\t\tcurrentProperty = name;\n\t\t\t},\n\t\t\tonObjectEnd: () => {\n\t\t\t\tcurrentParent = previousParents.pop();\n\t\t\t},\n\t\t\tonArrayBegin: () => {\n\t\t\t\tlet array: any[] = [];\n\t\t\t\tonValue(array);\n\t\t\t\tpreviousParents.push(currentParent);\n\t\t\t\tcurrentParent = array;\n\t\t\t\tcurrentProperty = null;\n\t\t\t},\n\t\t\tonArrayEnd: () => {\n\t\t\t\tcurrentParent = previousParents.pop();\n\t\t\t},\n\t\t\tonLiteralValue: onValue,\n\t\t\tonError: (error: json.ParseErrorCode, offset: number, length: number) => {\n\t\t\t\tparseErrors.push({ error, offset, length });\n\t\t\t}\n\t\t};\n\t\tif (content) {\n\t\t\ttry {\n\t\t\t\tjson.visit(content, visitor);\n\t\t\t\traw = currentParent[0] || {};\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(`Error while parsing settings file ${this._name}: ${e}`);\n\t\t\t\tthis._parseErrors = [e];\n\t\t\t}\n\t\t}\n\n\t\treturn raw;\n\t}\n\n\tprotected parseRaw(raw: any): IConfigurationModel {\n\t\tconst contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\tconst keys = Object.keys(raw);\n\t\tconst overrides: IOverrides[] = toOverrides(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\treturn { contents, keys, overrides };\n\t}\n}\n\nexport class Configuration {\n\n\tprivate _workspaceConsolidatedConfiguration: ConfigurationModel | null = null;\n\tprivate _foldersConsolidatedConfigurations: ResourceMap<ConfigurationModel> = new ResourceMap<ConfigurationModel>();\n\n\tconstructor(\n\t\tprivate _defaultConfiguration: ConfigurationModel,\n\t\tprivate _localUserConfiguration: ConfigurationModel,\n\t\tprivate _remoteUserConfiguration: ConfigurationModel = new ConfigurationModel(),\n\t\tprivate _workspaceConfiguration: ConfigurationModel = new ConfigurationModel(),\n\t\tprivate _folderConfigurations: ResourceMap<ConfigurationModel> = new ResourceMap<ConfigurationModel>(),\n\t\tprivate _memoryConfiguration: ConfigurationModel = new ConfigurationModel(),\n\t\tprivate _memoryConfigurationByResource: ResourceMap<ConfigurationModel> = new ResourceMap<ConfigurationModel>(),\n\t\tprivate _freeze: boolean = true) {\n\t}\n\n\tgetValue(section: string | undefined, overrides: IConfigurationOverrides, workspace: Workspace | undefined): any {\n\t\tconst consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n\t\treturn consolidateConfigurationModel.getValue(section);\n\t}\n\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides = {}): void {\n\t\tlet memoryConfiguration: ConfigurationModel | undefined;\n\t\tif (overrides.resource) {\n\t\t\tmemoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n\t\t\tif (!memoryConfiguration) {\n\t\t\t\tmemoryConfiguration = new ConfigurationModel();\n\t\t\t\tthis._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n\t\t\t}\n\t\t} else {\n\t\t\tmemoryConfiguration = this._memoryConfiguration;\n\t\t}\n\n\t\tif (value === undefined) {\n\t\t\tmemoryConfiguration.removeValue(key);\n\t\t} else {\n\t\t\tmemoryConfiguration.setValue(key, value);\n\t\t}\n\n\t\tif (!overrides.resource) {\n\t\t\tthis._workspaceConsolidatedConfiguration = null;\n\t\t}\n\t}\n\n\tinspect<C>(key: string, overrides: IConfigurationOverrides, workspace: Workspace | undefined): {\n\t\tdefault: C,\n\t\tuser: C,\n\t\tuserLocal?: C,\n\t\tuserRemote?: C,\n\t\tworkspace?: C,\n\t\tworkspaceFolder?: C\n\t\tmemory?: C\n\t\tvalue: C,\n\t} {\n\t\tconst consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n\t\tconst folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n\t\tconst memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n\t\treturn {\n\t\t\tdefault: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key),\n\t\t\tuser: overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key),\n\t\t\tuserLocal: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key),\n\t\t\tuserRemote: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key),\n\t\t\tworkspace: workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined, //Check on workspace exists or not because _workspaceConfiguration is never null\n\t\t\tworkspaceFolder: folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined,\n\t\t\tmemory: overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key),\n\t\t\tvalue: consolidateConfigurationModel.getValue(key)\n\t\t};\n\t}\n\n\tkeys(workspace: Workspace | undefined): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\tconst folderConfigurationModel = this.getFolderConfigurationModelForResource(undefined, workspace);\n\t\treturn {\n\t\t\tdefault: this._defaultConfiguration.freeze().keys,\n\t\t\tuser: this.userConfiguration.freeze().keys,\n\t\t\tworkspace: this._workspaceConfiguration.freeze().keys,\n\t\t\tworkspaceFolder: folderConfigurationModel ? folderConfigurationModel.freeze().keys : []\n\t\t};\n\t}\n\n\tupdateDefaultConfiguration(defaultConfiguration: ConfigurationModel): void {\n\t\tthis._defaultConfiguration = defaultConfiguration;\n\t\tthis._workspaceConsolidatedConfiguration = null;\n\t\tthis._foldersConsolidatedConfigurations.clear();\n\t}\n\n\tupdateLocalUserConfiguration(localUserConfiguration: ConfigurationModel): void {\n\t\tthis._localUserConfiguration = localUserConfiguration;\n\t\tthis._userConfiguration = null;\n\t\tthis._workspaceConsolidatedConfiguration = null;\n\t\tthis._foldersConsolidatedConfigurations.clear();\n\t}\n\n\tupdateRemoteUserConfiguration(remoteUserConfiguration: ConfigurationModel): void {\n\t\tthis._remoteUserConfiguration = remoteUserConfiguration;\n\t\tthis._userConfiguration = null;\n\t\tthis._workspaceConsolidatedConfiguration = null;\n\t\tthis._foldersConsolidatedConfigurations.clear();\n\t}\n\n\tupdateWorkspaceConfiguration(workspaceConfiguration: ConfigurationModel): void {\n\t\tthis._workspaceConfiguration = workspaceConfiguration;\n\t\tthis._workspaceConsolidatedConfiguration = null;\n\t\tthis._foldersConsolidatedConfigurations.clear();\n\t}\n\n\tupdateFolderConfiguration(resource: URI, configuration: ConfigurationModel): void {\n\t\tthis._folderConfigurations.set(resource, configuration);\n\t\tthis._foldersConsolidatedConfigurations.delete(resource);\n\t}\n\n\tdeleteFolderConfiguration(resource: URI): void {\n\t\tthis.folderConfigurations.delete(resource);\n\t\tthis._foldersConsolidatedConfigurations.delete(resource);\n\t}\n\n\tget defaults(): ConfigurationModel {\n\t\treturn this._defaultConfiguration;\n\t}\n\n\tprivate _userConfiguration: ConfigurationModel | null;\n\tget userConfiguration(): ConfigurationModel {\n\t\tif (!this._userConfiguration) {\n\t\t\tthis._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n\t\t\tif (this._freeze) {\n\t\t\t\tthis._userConfiguration.freeze();\n\t\t\t}\n\t\t}\n\t\treturn this._userConfiguration;\n\t}\n\n\tget localUserConfiguration(): ConfigurationModel {\n\t\treturn this._localUserConfiguration;\n\t}\n\n\tget remoteUserConfiguration(): ConfigurationModel {\n\t\treturn this._remoteUserConfiguration;\n\t}\n\n\tget workspaceConfiguration(): ConfigurationModel {\n\t\treturn this._workspaceConfiguration;\n\t}\n\n\tprotected get folderConfigurations(): ResourceMap<ConfigurationModel> {\n\t\treturn this._folderConfigurations;\n\t}\n\n\tprivate getConsolidateConfigurationModel(overrides: IConfigurationOverrides, workspace: Workspace | undefined): ConfigurationModel {\n\t\tlet configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n\t\treturn overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n\t}\n\n\tprivate getConsolidatedConfigurationModelForResource({ resource }: IConfigurationOverrides, workspace: Workspace | undefined): ConfigurationModel {\n\t\tlet consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n\t\tif (workspace && resource) {\n\t\t\tconst root = workspace.getFolder(resource);\n\t\t\tif (root) {\n\t\t\t\tconsolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n\t\t\t}\n\t\t\tconst memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n\t\t\tif (memoryConfigurationForResource) {\n\t\t\t\tconsolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n\t\t\t}\n\t\t}\n\n\t\treturn consolidateConfiguration;\n\t}\n\n\tprivate getWorkspaceConsolidatedConfiguration(): ConfigurationModel {\n\t\tif (!this._workspaceConsolidatedConfiguration) {\n\t\t\tthis._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n\t\t\tif (this._freeze) {\n\t\t\t\tthis._workspaceConfiguration = this._workspaceConfiguration.freeze();\n\t\t\t}\n\t\t}\n\t\treturn this._workspaceConsolidatedConfiguration;\n\t}\n\n\tprivate getFolderConsolidatedConfiguration(folder: URI): ConfigurationModel {\n\t\tlet folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n\t\tif (!folderConsolidatedConfiguration) {\n\t\t\tconst workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\t\t\tconst folderConfiguration = this._folderConfigurations.get(folder);\n\t\t\tif (folderConfiguration) {\n\t\t\t\tfolderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n\t\t\t\tif (this._freeze) {\n\t\t\t\t\tfolderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n\t\t\t\t}\n\t\t\t\tthis._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n\t\t\t} else {\n\t\t\t\tfolderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n\t\t\t}\n\t\t}\n\t\treturn folderConsolidatedConfiguration;\n\t}\n\n\tprivate getFolderConfigurationModelForResource(resource: URI | null | undefined, workspace: Workspace | undefined): ConfigurationModel | null {\n\t\tif (workspace && resource) {\n\t\t\tconst root = workspace.getFolder(resource);\n\t\t\tif (root) {\n\t\t\t\treturn types.withUndefinedAsNull(this._folderConfigurations.get(root.uri));\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\ttoData(): IConfigurationData {\n\t\treturn {\n\t\t\tdefaults: {\n\t\t\t\tcontents: this._defaultConfiguration.contents,\n\t\t\t\toverrides: this._defaultConfiguration.overrides,\n\t\t\t\tkeys: this._defaultConfiguration.keys\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tcontents: this.userConfiguration.contents,\n\t\t\t\toverrides: this.userConfiguration.overrides,\n\t\t\t\tkeys: this.userConfiguration.keys\n\t\t\t},\n\t\t\tworkspace: {\n\t\t\t\tcontents: this._workspaceConfiguration.contents,\n\t\t\t\toverrides: this._workspaceConfiguration.overrides,\n\t\t\t\tkeys: this._workspaceConfiguration.keys\n\t\t\t},\n\t\t\tfolders: this._folderConfigurations.keys().reduce((result, folder) => {\n\t\t\t\tconst { contents, overrides, keys } = this._folderConfigurations.get(folder)!;\n\t\t\t\tresult[folder.toString()] = { contents, overrides, keys };\n\t\t\t\treturn result;\n\t\t\t}, Object.create({})),\n\t\t\tisComplete: true\n\t\t};\n\t}\n\n\tallKeys(workspace: Workspace | undefined): string[] {\n\t\tlet keys = this.keys(workspace);\n\t\tlet all = [...keys.default];\n\t\tconst addKeys = (keys: string[]) => {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (all.indexOf(key) === -1) {\n\t\t\t\t\tall.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\taddKeys(keys.user);\n\t\taddKeys(keys.workspace);\n\t\tfor (const resource of this.folderConfigurations.keys()) {\n\t\t\taddKeys(this.folderConfigurations.get(resource)!.keys);\n\t\t}\n\t\treturn all;\n\t}\n}\n\nexport class AbstractConfigurationChangeEvent {\n\n\tprotected doesConfigurationContains(configuration: ConfigurationModel, config: string): boolean {\n\t\tlet changedKeysTree = configuration.contents;\n\t\tlet requestedTree = toValuesTree({ [config]: true }, () => { });\n\n\t\tlet key;\n\t\twhile (typeof requestedTree === 'object' && (key = Object.keys(requestedTree)[0])) { // Only one key should present, since we added only one property\n\t\t\tchangedKeysTree = changedKeysTree[key];\n\t\t\tif (!changedKeysTree) {\n\t\t\t\treturn false; // Requested tree is not found\n\t\t\t}\n\t\t\trequestedTree = requestedTree[key];\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected updateKeys(configuration: ConfigurationModel, keys: string[], resource?: URI): void {\n\t\tfor (const key of keys) {\n\t\t\tconfiguration.setValue(key, {});\n\t\t}\n\t}\n}\n\nexport class ConfigurationChangeEvent extends AbstractConfigurationChangeEvent implements IConfigurationChangeEvent {\n\n\tprivate _source: ConfigurationTarget;\n\tprivate _sourceConfig: any;\n\n\tconstructor(\n\t\tprivate _changedConfiguration: ConfigurationModel = new ConfigurationModel(),\n\t\tprivate _changedConfigurationByResource: ResourceMap<ConfigurationModel> = new ResourceMap<ConfigurationModel>()) {\n\t\tsuper();\n\t}\n\n\tget changedConfiguration(): IConfigurationModel {\n\t\treturn this._changedConfiguration;\n\t}\n\n\tget changedConfigurationByResource(): ResourceMap<IConfigurationModel> {\n\t\treturn this._changedConfigurationByResource;\n\t}\n\n\tchange(event: ConfigurationChangeEvent): ConfigurationChangeEvent;\n\tchange(keys: string[], resource?: URI): ConfigurationChangeEvent;\n\tchange(arg1: any, arg2?: any): ConfigurationChangeEvent {\n\t\tif (arg1 instanceof ConfigurationChangeEvent) {\n\t\t\tthis._changedConfiguration = this._changedConfiguration.merge(arg1._changedConfiguration);\n\t\t\tfor (const resource of arg1._changedConfigurationByResource.keys()) {\n\t\t\t\tlet changedConfigurationByResource = this.getOrSetChangedConfigurationForResource(resource);\n\t\t\t\tchangedConfigurationByResource = changedConfigurationByResource.merge(arg1._changedConfigurationByResource.get(resource)!);\n\t\t\t\tthis._changedConfigurationByResource.set(resource, changedConfigurationByResource);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.changeWithKeys(arg1, arg2);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttelemetryData(source: ConfigurationTarget, sourceConfig: any): ConfigurationChangeEvent {\n\t\tthis._source = source;\n\t\tthis._sourceConfig = sourceConfig;\n\t\treturn this;\n\t}\n\n\tget affectedKeys(): string[] {\n\t\tconst keys = [...this._changedConfiguration.keys];\n\t\tthis._changedConfigurationByResource.forEach(model => keys.push(...model.keys));\n\t\treturn arrays.distinct(keys);\n\t}\n\n\tget source(): ConfigurationTarget {\n\t\treturn this._source;\n\t}\n\n\tget sourceConfig(): any {\n\t\treturn this._sourceConfig;\n\t}\n\n\taffectsConfiguration(config: string, resource?: URI): boolean {\n\t\tlet configurationModelsToSearch: ConfigurationModel[] = [this._changedConfiguration];\n\n\t\tif (resource) {\n\t\t\tlet model = this._changedConfigurationByResource.get(resource);\n\t\t\tif (model) {\n\t\t\t\tconfigurationModelsToSearch.push(model);\n\t\t\t}\n\t\t} else {\n\t\t\tconfigurationModelsToSearch.push(...this._changedConfigurationByResource.values());\n\t\t}\n\n\t\tfor (const configuration of configurationModelsToSearch) {\n\t\t\tif (this.doesConfigurationContains(configuration, config)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate changeWithKeys(keys: string[], resource?: URI): void {\n\t\tlet changedConfiguration = resource ? this.getOrSetChangedConfigurationForResource(resource) : this._changedConfiguration;\n\t\tthis.updateKeys(changedConfiguration, keys);\n\t}\n\n\tprivate getOrSetChangedConfigurationForResource(resource: URI): ConfigurationModel {\n\t\tlet changedConfigurationByResource = this._changedConfigurationByResource.get(resource);\n\t\tif (!changedConfigurationByResource) {\n\t\t\tchangedConfigurationByResource = new ConfigurationModel();\n\t\t\tthis._changedConfigurationByResource.set(resource, changedConfigurationByResource);\n\t\t}\n\t\treturn changedConfigurationByResource;\n\t}\n}\n"]}]}