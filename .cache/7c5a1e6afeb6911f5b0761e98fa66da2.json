{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/files.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\", \"vs/platform/files/common/files\", \"vs/platform/contextkey/common/contextkey\", \"vs/base/common/lifecycle\", \"vs/editor/common/services/modelService\", \"vs/editor/common/services/modeService\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/platform/contextkey/common/contextkeys\", \"vs/platform/registry/common/platform\", \"vs/workbench/common/views\", \"vs/base/common/network\", \"vs/platform/instantiation/common/instantiation\"], function (require, exports, editor_1, files_1, contextkey_1, lifecycle_1, modelService_1, modeService_1, textfiles_1, contextkeys_1, platform_1, views_1, network_1, instantiation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Explorer viewlet id.\n     */\n    exports.VIEWLET_ID = 'workbench.view.explorer';\n    /**\n     * Explorer viewlet container.\n     */\n    exports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\n    exports.IExplorerService = instantiation_1.createDecorator('explorerService');\n    /**\n     * Context Keys to use with keybindings for the Explorer and Open Editors view\n     */\n    const explorerViewletVisibleId = 'explorerViewletVisible';\n    const filesExplorerFocusId = 'filesExplorerFocus';\n    const openEditorsVisibleId = 'openEditorsVisible';\n    const openEditorsFocusId = 'openEditorsFocus';\n    const explorerViewletFocusId = 'explorerViewletFocus';\n    const explorerResourceIsFolderId = 'explorerResourceIsFolder';\n    const explorerResourceReadonly = 'explorerResourceReadonly';\n    const explorerResourceIsRootId = 'explorerResourceIsRoot';\n    const explorerResourceCutId = 'explorerResourceCut';\n    exports.ExplorerViewletVisibleContext = new contextkey_1.RawContextKey(explorerViewletVisibleId, true);\n    exports.ExplorerFolderContext = new contextkey_1.RawContextKey(explorerResourceIsFolderId, false);\n    exports.ExplorerResourceReadonlyContext = new contextkey_1.RawContextKey(explorerResourceReadonly, false);\n    exports.ExplorerResourceNotReadonlyContext = exports.ExplorerResourceReadonlyContext.toNegated();\n    exports.ExplorerRootContext = new contextkey_1.RawContextKey(explorerResourceIsRootId, false);\n    exports.ExplorerResourceCut = new contextkey_1.RawContextKey(explorerResourceCutId, false);\n    exports.FilesExplorerFocusedContext = new contextkey_1.RawContextKey(filesExplorerFocusId, true);\n    exports.OpenEditorsVisibleContext = new contextkey_1.RawContextKey(openEditorsVisibleId, false);\n    exports.OpenEditorsFocusedContext = new contextkey_1.RawContextKey(openEditorsFocusId, true);\n    exports.ExplorerFocusedContext = new contextkey_1.RawContextKey(explorerViewletFocusId, true);\n    exports.OpenEditorsVisibleCondition = contextkey_1.ContextKeyExpr.has(openEditorsVisibleId);\n    exports.FilesExplorerFocusCondition = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has(explorerViewletVisibleId), contextkey_1.ContextKeyExpr.has(filesExplorerFocusId), contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey));\n    exports.ExplorerFocusCondition = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has(explorerViewletVisibleId), contextkey_1.ContextKeyExpr.has(explorerViewletFocusId), contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey));\n    /**\n     * Text file editor id.\n     */\n    exports.TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n    /**\n     * File editor input id.\n     */\n    exports.FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n    /**\n     * Binary file editor id.\n     */\n    exports.BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\n    exports.SortOrderConfiguration = {\n        DEFAULT: 'default',\n        MIXED: 'mixed',\n        FILES_FIRST: 'filesFirst',\n        TYPE: 'type',\n        MODIFIED: 'modified'\n    };\n    let FileOnDiskContentProvider = class FileOnDiskContentProvider {\n        constructor(textFileService, fileService, modeService, modelService) {\n            this.textFileService = textFileService;\n            this.fileService = fileService;\n            this.modeService = modeService;\n            this.modelService = modelService;\n        }\n        provideTextContent(resource) {\n            const fileOnDiskResource = resource.with({ scheme: network_1.Schemas.file });\n            // Make sure our file from disk is resolved up to date\n            return this.resolveEditorModel(resource).then(codeEditorModel => {\n                // Make sure to keep contents on disk up to date when it changes\n                if (!this.fileWatcher) {\n                    this.fileWatcher = this.fileService.onFileChanges(changes => {\n                        if (changes.contains(fileOnDiskResource, files_1.FileChangeType.UPDATED)) {\n                            this.resolveEditorModel(resource, false /* do not create if missing */); // update model when resource changes\n                        }\n                    });\n                    if (codeEditorModel) {\n                        const disposeListener = codeEditorModel.onWillDispose(() => {\n                            disposeListener.dispose();\n                            this.fileWatcher = lifecycle_1.dispose(this.fileWatcher);\n                        });\n                    }\n                }\n                return codeEditorModel;\n            });\n        }\n        resolveEditorModel(resource, createAsNeeded = true) {\n            const fileOnDiskResource = resource.with({ scheme: network_1.Schemas.file });\n            return this.textFileService.resolveTextContent(fileOnDiskResource).then(content => {\n                let codeEditorModel = this.modelService.getModel(resource);\n                if (codeEditorModel) {\n                    this.modelService.updateModel(codeEditorModel, content.value);\n                }\n                else if (createAsNeeded) {\n                    const fileOnDiskModel = this.modelService.getModel(fileOnDiskResource);\n                    let languageSelector;\n                    if (fileOnDiskModel) {\n                        languageSelector = this.modeService.create(fileOnDiskModel.getModeId());\n                    }\n                    else {\n                        languageSelector = this.modeService.createByFilepathOrFirstLine(fileOnDiskResource.fsPath);\n                    }\n                    codeEditorModel = this.modelService.createModel(content.value, languageSelector, resource);\n                }\n                return codeEditorModel;\n            });\n        }\n        dispose() {\n            this.fileWatcher = lifecycle_1.dispose(this.fileWatcher);\n        }\n    };\n    FileOnDiskContentProvider = __decorate([\n        __param(0, textfiles_1.ITextFileService),\n        __param(1, files_1.IFileService),\n        __param(2, modeService_1.IModeService),\n        __param(3, modelService_1.IModelService)\n    ], FileOnDiskContentProvider);\n    exports.FileOnDiskContentProvider = FileOnDiskContentProvider;\n    class OpenEditor {\n        constructor(_editor, _group) {\n            this._editor = _editor;\n            this._group = _group;\n            // noop\n        }\n        get editor() {\n            return this._editor;\n        }\n        get editorIndex() {\n            return this._group.getIndexOfEditor(this.editor);\n        }\n        get group() {\n            return this._group;\n        }\n        get groupId() {\n            return this._group.id;\n        }\n        getId() {\n            return `openeditor:${this.groupId}:${this.editorIndex}:${this.editor.getName()}:${this.editor.getDescription()}`;\n        }\n        isPreview() {\n            return this._group.previewEditor === this.editor;\n        }\n        isUntitled() {\n            return !!editor_1.toResource(this.editor, { supportSideBySide: true, filter: network_1.Schemas.untitled });\n        }\n        isDirty() {\n            return this.editor.isDirty();\n        }\n        getResource() {\n            return editor_1.toResource(this.editor, { supportSideBySide: true });\n        }\n    }\n    exports.OpenEditor = OpenEditor;\n});\n",null]}