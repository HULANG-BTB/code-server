{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./accessibility\");\nvar nls = require(\"vs/nls\");\nvar dom = require(\"vs/base/browser/dom\");\nvar fastDomNode_1 = require(\"vs/base/browser/fastDomNode\");\nvar htmlContentRenderer_1 = require(\"vs/base/browser/htmlContentRenderer\");\nvar aria_1 = require(\"vs/base/browser/ui/aria/aria\");\nvar widget_1 = require(\"vs/base/browser/ui/widget\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar browser = require(\"vs/base/browser/browser\");\nvar strings = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar toggleTabFocusMode_1 = require(\"vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new contextkey_1.RawContextKey('accessibilityHelpWidgetVisible', false);\nvar AccessibilityHelpController = /** @class */ (function (_super) {\n    tslib_1.__extends(AccessibilityHelpController, _super);\n    function AccessibilityHelpController(editor, instantiationService) {\n        var _this = _super.call(this) || this;\n        _this._editor = editor;\n        _this._widget = _this._register(instantiationService.createInstance(AccessibilityHelpWidget, _this._editor));\n        return _this;\n    }\n    AccessibilityHelpController.get = function (editor) {\n        return editor.getContribution(AccessibilityHelpController.ID);\n    };\n    AccessibilityHelpController.prototype.getId = function () {\n        return AccessibilityHelpController.ID;\n    };\n    AccessibilityHelpController.prototype.show = function () {\n        this._widget.show();\n    };\n    AccessibilityHelpController.prototype.hide = function () {\n        this._widget.hide();\n    };\n    AccessibilityHelpController.ID = 'editor.contrib.accessibilityHelpController';\n    AccessibilityHelpController = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService)\n    ], AccessibilityHelpController);\n    return AccessibilityHelpController;\n}(lifecycle_1.Disposable));\nvar AccessibilityHelpWidget = /** @class */ (function (_super) {\n    tslib_1.__extends(AccessibilityHelpWidget, _super);\n    function AccessibilityHelpWidget(editor, _contextKeyService, _keybindingService, _configurationService, _openerService) {\n        var _this = _super.call(this) || this;\n        _this._contextKeyService = _contextKeyService;\n        _this._keybindingService = _keybindingService;\n        _this._configurationService = _configurationService;\n        _this._openerService = _openerService;\n        _this._editor = editor;\n        _this._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(_this._contextKeyService);\n        _this._domNode = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this._domNode.setClassName('accessibilityHelpWidget');\n        _this._domNode.setWidth(AccessibilityHelpWidget.WIDTH);\n        _this._domNode.setHeight(AccessibilityHelpWidget.HEIGHT);\n        _this._domNode.setDisplay('none');\n        _this._domNode.setAttribute('role', 'dialog');\n        _this._domNode.setAttribute('aria-hidden', 'true');\n        _this._contentDomNode = fastDomNode_1.createFastDomNode(document.createElement('div'));\n        _this._contentDomNode.setAttribute('role', 'document');\n        _this._domNode.appendChild(_this._contentDomNode);\n        _this._isVisible = false;\n        _this._register(_this._editor.onDidLayoutChange(function () {\n            if (_this._isVisible) {\n                _this._layout();\n            }\n        }));\n        // Intentionally not configurable!\n        _this._register(dom.addStandardDisposableListener(_this._contentDomNode.domNode, 'keydown', function (e) {\n            if (!_this._isVisible) {\n                return;\n            }\n            if (e.equals(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_E)) {\n                aria_1.alert(nls.localize('emergencyConfOn', \"Now changing the setting `editor.accessibilitySupport` to 'on'.\"));\n                _this._configurationService.updateValue('editor.accessibilitySupport', 'on', configuration_1.ConfigurationTarget.USER);\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            if (e.equals(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_H)) {\n                aria_1.alert(nls.localize('openingDocs', \"Now opening the VS Code Accessibility documentation page.\"));\n                _this._openerService.open(uri_1.URI.parse('https://go.microsoft.com/fwlink/?linkid=851010'));\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        }));\n        _this.onblur(_this._contentDomNode.domNode, function () {\n            _this.hide();\n        });\n        _this._editor.addOverlayWidget(_this);\n        return _this;\n    }\n    AccessibilityHelpWidget.prototype.dispose = function () {\n        this._editor.removeOverlayWidget(this);\n        _super.prototype.dispose.call(this);\n    };\n    AccessibilityHelpWidget.prototype.getId = function () {\n        return AccessibilityHelpWidget.ID;\n    };\n    AccessibilityHelpWidget.prototype.getDomNode = function () {\n        return this._domNode.domNode;\n    };\n    AccessibilityHelpWidget.prototype.getPosition = function () {\n        return {\n            preference: null\n        };\n    };\n    AccessibilityHelpWidget.prototype.show = function () {\n        if (this._isVisible) {\n            return;\n        }\n        this._isVisible = true;\n        this._isVisibleKey.set(true);\n        this._layout();\n        this._domNode.setDisplay('block');\n        this._domNode.setAttribute('aria-hidden', 'false');\n        this._contentDomNode.domNode.tabIndex = 0;\n        this._buildContent();\n        this._contentDomNode.domNode.focus();\n    };\n    AccessibilityHelpWidget.prototype._descriptionForCommand = function (commandId, msg, noKbMsg) {\n        var kb = this._keybindingService.lookupKeybinding(commandId);\n        if (kb) {\n            return strings.format(msg, kb.getAriaLabel());\n        }\n        return strings.format(noKbMsg, commandId);\n    };\n    AccessibilityHelpWidget.prototype._buildContent = function () {\n        var opts = this._editor.getConfiguration();\n        var text = nls.localize('introMsg', \"Thank you for trying out VS Code's accessibility options.\");\n        text += '\\n\\n' + nls.localize('status', \"Status:\");\n        var configuredValue = this._configurationService.getValue('editor').accessibilitySupport;\n        var actualValue = opts.accessibilitySupport;\n        var emergencyTurnOnMessage = (browser.isMacintosh\n            ? nls.localize('changeConfigToOnMac', \"To configure the editor to be permanently optimized for usage with a Screen Reader press Command+E now.\")\n            : nls.localize('changeConfigToOnWinLinux', \"To configure the editor to be permanently optimized for usage with a Screen Reader press Control+E now.\"));\n        switch (configuredValue) {\n            case 'auto':\n                switch (actualValue) {\n                    case accessibility_1.AccessibilitySupport.Unknown:\n                        // Should never happen in VS Code\n                        text += '\\n\\n - ' + nls.localize('auto_unknown', \"The editor is configured to use platform APIs to detect when a Screen Reader is attached, but the current runtime does not support this.\");\n                        break;\n                    case accessibility_1.AccessibilitySupport.Enabled:\n                        text += '\\n\\n - ' + nls.localize('auto_on', \"The editor has automatically detected a Screen Reader is attached.\");\n                        break;\n                    case accessibility_1.AccessibilitySupport.Disabled:\n                        text += '\\n\\n - ' + nls.localize('auto_off', \"The editor is configured to automatically detect when a Screen Reader is attached, which is not the case at this time.\");\n                        text += ' ' + emergencyTurnOnMessage;\n                        break;\n                }\n                break;\n            case 'on':\n                text += '\\n\\n - ' + nls.localize('configuredOn', \"The editor is configured to be permanently optimized for usage with a Screen Reader - you can change this by editing the setting `editor.accessibilitySupport`.\");\n                break;\n            case 'off':\n                text += '\\n\\n - ' + nls.localize('configuredOff', \"The editor is configured to never be optimized for usage with a Screen Reader.\");\n                text += ' ' + emergencyTurnOnMessage;\n                break;\n        }\n        var NLS_TAB_FOCUS_MODE_ON = nls.localize('tabFocusModeOnMsg', \"Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.\");\n        var NLS_TAB_FOCUS_MODE_ON_NO_KB = nls.localize('tabFocusModeOnMsgNoKb', \"Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.\");\n        var NLS_TAB_FOCUS_MODE_OFF = nls.localize('tabFocusModeOffMsg', \"Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.\");\n        var NLS_TAB_FOCUS_MODE_OFF_NO_KB = nls.localize('tabFocusModeOffMsgNoKb', \"Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.\");\n        if (opts.tabFocusMode) {\n            text += '\\n\\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_ON, NLS_TAB_FOCUS_MODE_ON_NO_KB);\n        }\n        else {\n            text += '\\n\\n - ' + this._descriptionForCommand(toggleTabFocusMode_1.ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_OFF, NLS_TAB_FOCUS_MODE_OFF_NO_KB);\n        }\n        var openDocMessage = (browser.isMacintosh\n            ? nls.localize('openDocMac', \"Press Command+H now to open a browser window with more VS Code information related to Accessibility.\")\n            : nls.localize('openDocWinLinux', \"Press Control+H now to open a browser window with more VS Code information related to Accessibility.\"));\n        text += '\\n\\n' + openDocMessage;\n        text += '\\n\\n' + nls.localize('outroMsg', \"You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.\");\n        this._contentDomNode.domNode.appendChild(htmlContentRenderer_1.renderFormattedText(text));\n        // Per https://www.w3.org/TR/wai-aria/roles#document, Authors SHOULD provide a title or label for documents\n        this._contentDomNode.domNode.setAttribute('aria-label', text);\n    };\n    AccessibilityHelpWidget.prototype.hide = function () {\n        if (!this._isVisible) {\n            return;\n        }\n        this._isVisible = false;\n        this._isVisibleKey.reset();\n        this._domNode.setDisplay('none');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._contentDomNode.domNode.tabIndex = -1;\n        dom.clearNode(this._contentDomNode.domNode);\n        this._editor.focus();\n    };\n    AccessibilityHelpWidget.prototype._layout = function () {\n        var editorLayout = this._editor.getLayoutInfo();\n        var top = Math.round((editorLayout.height - AccessibilityHelpWidget.HEIGHT) / 2);\n        this._domNode.setTop(top);\n        var left = Math.round((editorLayout.width - AccessibilityHelpWidget.WIDTH) / 2);\n        this._domNode.setLeft(left);\n    };\n    AccessibilityHelpWidget.ID = 'editor.contrib.accessibilityHelpWidget';\n    AccessibilityHelpWidget.WIDTH = 500;\n    AccessibilityHelpWidget.HEIGHT = 300;\n    AccessibilityHelpWidget = tslib_1.__decorate([\n        tslib_1.__param(1, contextkey_1.IContextKeyService),\n        tslib_1.__param(2, keybinding_1.IKeybindingService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, opener_1.IOpenerService)\n    ], AccessibilityHelpWidget);\n    return AccessibilityHelpWidget;\n}(widget_1.Widget));\nvar ShowAccessibilityHelpAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowAccessibilityHelpAction, _super);\n    function ShowAccessibilityHelpAction() {\n        return _super.call(this, {\n            id: 'editor.action.showAccessibilityHelp',\n            label: nls.localize('ShowAccessibilityHelpAction', \"Show Accessibility Help\"),\n            alias: 'Show Accessibility Help',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.F1,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    ShowAccessibilityHelpAction.prototype.run = function (accessor, editor) {\n        var controller = AccessibilityHelpController.get(editor);\n        if (controller) {\n            controller.show();\n        }\n    };\n    return ShowAccessibilityHelpAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorContribution(AccessibilityHelpController);\neditorExtensions_1.registerEditorAction(ShowAccessibilityHelpAction);\nvar AccessibilityHelpCommand = editorExtensions_1.EditorCommand.bindToContribution(AccessibilityHelpController.get);\neditorExtensions_1.registerEditorCommand(new AccessibilityHelpCommand({\n    id: 'closeAccessibilityHelp',\n    precondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,\n    handler: function (x) { return x.hide(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 100,\n        kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n        primary: keyCodes_1.KeyCode.Escape, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n    }\n}));\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var widgetBackground = theme.getColor(colorRegistry_1.editorWidgetBackground);\n    if (widgetBackground) {\n        collector.addRule(\".monaco-editor .accessibilityHelpWidget { background-color: \" + widgetBackground + \"; }\");\n    }\n    var widgetShadowColor = theme.getColor(colorRegistry_1.widgetShadow);\n    if (widgetShadowColor) {\n        collector.addRule(\".monaco-editor .accessibilityHelpWidget { box-shadow: 0 2px 8px \" + widgetShadowColor + \"; }\");\n    }\n    var hcBorder = theme.getColor(colorRegistry_1.contrastBorder);\n    if (hcBorder) {\n        collector.addRule(\".monaco-editor .accessibilityHelpWidget { border: 2px solid \" + hcBorder + \"; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./accessibility';\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { renderFormattedText } from 'vs/base/browser/htmlContentRenderer';\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as browser from 'vs/base/browser/browser';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport * as editorOptions from 'vs/editor/common/config/editorOptions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ToggleTabFocusModeAction } from 'vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { contrastBorder, editorWidgetBackground, widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\n\nconst CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE = new RawContextKey<boolean>('accessibilityHelpWidgetVisible', false);\n\nclass AccessibilityHelpController extends Disposable implements IEditorContribution {\n\n\tprivate static readonly ID = 'editor.contrib.accessibilityHelpController';\n\n\tpublic static get(editor: ICodeEditor): AccessibilityHelpController {\n\t\treturn editor.getContribution<AccessibilityHelpController>(AccessibilityHelpController.ID);\n\t}\n\n\tprivate _editor: ICodeEditor;\n\tprivate _widget: AccessibilityHelpWidget;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\t\tthis._widget = this._register(instantiationService.createInstance(AccessibilityHelpWidget, this._editor));\n\t}\n\n\tpublic getId(): string {\n\t\treturn AccessibilityHelpController.ID;\n\t}\n\n\tpublic show(): void {\n\t\tthis._widget.show();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._widget.hide();\n\t}\n}\n\nclass AccessibilityHelpWidget extends Widget implements IOverlayWidget {\n\n\tprivate static readonly ID = 'editor.contrib.accessibilityHelpWidget';\n\tprivate static readonly WIDTH = 500;\n\tprivate static readonly HEIGHT = 300;\n\n\tprivate _editor: ICodeEditor;\n\tprivate _domNode: FastDomNode<HTMLElement>;\n\tprivate _contentDomNode: FastDomNode<HTMLElement>;\n\tprivate _isVisible: boolean;\n\tprivate _isVisibleKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\t\tthis._isVisibleKey = CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE.bindTo(this._contextKeyService);\n\n\t\tthis._domNode = createFastDomNode(document.createElement('div'));\n\t\tthis._domNode.setClassName('accessibilityHelpWidget');\n\t\tthis._domNode.setWidth(AccessibilityHelpWidget.WIDTH);\n\t\tthis._domNode.setHeight(AccessibilityHelpWidget.HEIGHT);\n\t\tthis._domNode.setDisplay('none');\n\t\tthis._domNode.setAttribute('role', 'dialog');\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\n\t\tthis._contentDomNode = createFastDomNode(document.createElement('div'));\n\t\tthis._contentDomNode.setAttribute('role', 'document');\n\t\tthis._domNode.appendChild(this._contentDomNode);\n\n\t\tthis._isVisible = false;\n\n\t\tthis._register(this._editor.onDidLayoutChange(() => {\n\t\t\tif (this._isVisible) {\n\t\t\t\tthis._layout();\n\t\t\t}\n\t\t}));\n\n\t\t// Intentionally not configurable!\n\t\tthis._register(dom.addStandardDisposableListener(this._contentDomNode.domNode, 'keydown', (e) => {\n\t\t\tif (!this._isVisible) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (e.equals(KeyMod.CtrlCmd | KeyCode.KEY_E)) {\n\t\t\t\talert(nls.localize('emergencyConfOn', \"Now changing the setting `editor.accessibilitySupport` to 'on'.\"));\n\n\t\t\t\tthis._configurationService.updateValue('editor.accessibilitySupport', 'on', ConfigurationTarget.USER);\n\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\tif (e.equals(KeyMod.CtrlCmd | KeyCode.KEY_H)) {\n\t\t\t\talert(nls.localize('openingDocs', \"Now opening the VS Code Accessibility documentation page.\"));\n\n\t\t\t\tthis._openerService.open(URI.parse('https://go.microsoft.com/fwlink/?linkid=851010'));\n\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\t}));\n\n\t\tthis.onblur(this._contentDomNode.domNode, () => {\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis._editor.addOverlayWidget(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._editor.removeOverlayWidget(this);\n\t\tsuper.dispose();\n\t}\n\n\tpublic getId(): string {\n\t\treturn AccessibilityHelpWidget.ID;\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._domNode.domNode;\n\t}\n\n\tpublic getPosition(): IOverlayWidgetPosition {\n\t\treturn {\n\t\t\tpreference: null\n\t\t};\n\t}\n\n\tpublic show(): void {\n\t\tif (this._isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isVisible = true;\n\t\tthis._isVisibleKey.set(true);\n\t\tthis._layout();\n\t\tthis._domNode.setDisplay('block');\n\t\tthis._domNode.setAttribute('aria-hidden', 'false');\n\t\tthis._contentDomNode.domNode.tabIndex = 0;\n\t\tthis._buildContent();\n\t\tthis._contentDomNode.domNode.focus();\n\t}\n\n\tprivate _descriptionForCommand(commandId: string, msg: string, noKbMsg: string): string {\n\t\tlet kb = this._keybindingService.lookupKeybinding(commandId);\n\t\tif (kb) {\n\t\t\treturn strings.format(msg, kb.getAriaLabel());\n\t\t}\n\t\treturn strings.format(noKbMsg, commandId);\n\t}\n\n\tprivate _buildContent() {\n\t\tlet opts = this._editor.getConfiguration();\n\t\tlet text = nls.localize('introMsg', \"Thank you for trying out VS Code's accessibility options.\");\n\n\t\ttext += '\\n\\n' + nls.localize('status', \"Status:\");\n\n\t\tconst configuredValue = this._configurationService.getValue<editorOptions.IEditorOptions>('editor').accessibilitySupport;\n\t\tconst actualValue = opts.accessibilitySupport;\n\n\t\tconst emergencyTurnOnMessage = (\n\t\t\tbrowser.isMacintosh\n\t\t\t\t? nls.localize('changeConfigToOnMac', \"To configure the editor to be permanently optimized for usage with a Screen Reader press Command+E now.\")\n\t\t\t\t: nls.localize('changeConfigToOnWinLinux', \"To configure the editor to be permanently optimized for usage with a Screen Reader press Control+E now.\")\n\t\t);\n\n\t\tswitch (configuredValue) {\n\t\t\tcase 'auto':\n\t\t\t\tswitch (actualValue) {\n\t\t\t\t\tcase AccessibilitySupport.Unknown:\n\t\t\t\t\t\t// Should never happen in VS Code\n\t\t\t\t\t\ttext += '\\n\\n - ' + nls.localize('auto_unknown', \"The editor is configured to use platform APIs to detect when a Screen Reader is attached, but the current runtime does not support this.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AccessibilitySupport.Enabled:\n\t\t\t\t\t\ttext += '\\n\\n - ' + nls.localize('auto_on', \"The editor has automatically detected a Screen Reader is attached.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AccessibilitySupport.Disabled:\n\t\t\t\t\t\ttext += '\\n\\n - ' + nls.localize('auto_off', \"The editor is configured to automatically detect when a Screen Reader is attached, which is not the case at this time.\");\n\t\t\t\t\t\ttext += ' ' + emergencyTurnOnMessage;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'on':\n\t\t\t\ttext += '\\n\\n - ' + nls.localize('configuredOn', \"The editor is configured to be permanently optimized for usage with a Screen Reader - you can change this by editing the setting `editor.accessibilitySupport`.\");\n\t\t\t\tbreak;\n\t\t\tcase 'off':\n\t\t\t\ttext += '\\n\\n - ' + nls.localize('configuredOff', \"The editor is configured to never be optimized for usage with a Screen Reader.\");\n\t\t\t\ttext += ' ' + emergencyTurnOnMessage;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst NLS_TAB_FOCUS_MODE_ON = nls.localize('tabFocusModeOnMsg', \"Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.\");\n\t\tconst NLS_TAB_FOCUS_MODE_ON_NO_KB = nls.localize('tabFocusModeOnMsgNoKb', \"Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.\");\n\t\tconst NLS_TAB_FOCUS_MODE_OFF = nls.localize('tabFocusModeOffMsg', \"Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.\");\n\t\tconst NLS_TAB_FOCUS_MODE_OFF_NO_KB = nls.localize('tabFocusModeOffMsgNoKb', \"Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.\");\n\n\t\tif (opts.tabFocusMode) {\n\t\t\ttext += '\\n\\n - ' + this._descriptionForCommand(ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_ON, NLS_TAB_FOCUS_MODE_ON_NO_KB);\n\t\t} else {\n\t\t\ttext += '\\n\\n - ' + this._descriptionForCommand(ToggleTabFocusModeAction.ID, NLS_TAB_FOCUS_MODE_OFF, NLS_TAB_FOCUS_MODE_OFF_NO_KB);\n\t\t}\n\n\t\tconst openDocMessage = (\n\t\t\tbrowser.isMacintosh\n\t\t\t\t? nls.localize('openDocMac', \"Press Command+H now to open a browser window with more VS Code information related to Accessibility.\")\n\t\t\t\t: nls.localize('openDocWinLinux', \"Press Control+H now to open a browser window with more VS Code information related to Accessibility.\")\n\t\t);\n\n\t\ttext += '\\n\\n' + openDocMessage;\n\n\t\ttext += '\\n\\n' + nls.localize('outroMsg', \"You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.\");\n\n\t\tthis._contentDomNode.domNode.appendChild(renderFormattedText(text));\n\t\t// Per https://www.w3.org/TR/wai-aria/roles#document, Authors SHOULD provide a title or label for documents\n\t\tthis._contentDomNode.domNode.setAttribute('aria-label', text);\n\t}\n\n\tpublic hide(): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isVisible = false;\n\t\tthis._isVisibleKey.reset();\n\t\tthis._domNode.setDisplay('none');\n\t\tthis._domNode.setAttribute('aria-hidden', 'true');\n\t\tthis._contentDomNode.domNode.tabIndex = -1;\n\t\tdom.clearNode(this._contentDomNode.domNode);\n\n\t\tthis._editor.focus();\n\t}\n\n\tprivate _layout(): void {\n\t\tlet editorLayout = this._editor.getLayoutInfo();\n\n\t\tlet top = Math.round((editorLayout.height - AccessibilityHelpWidget.HEIGHT) / 2);\n\t\tthis._domNode.setTop(top);\n\n\t\tlet left = Math.round((editorLayout.width - AccessibilityHelpWidget.WIDTH) / 2);\n\t\tthis._domNode.setLeft(left);\n\t}\n}\n\nclass ShowAccessibilityHelpAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.showAccessibilityHelp',\n\t\t\tlabel: nls.localize('ShowAccessibilityHelpAction', \"Show Accessibility Help\"),\n\t\t\talias: 'Show Accessibility Help',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.focus,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.F1,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tlet controller = AccessibilityHelpController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.show();\n\t\t}\n\t}\n}\n\nregisterEditorContribution(AccessibilityHelpController);\nregisterEditorAction(ShowAccessibilityHelpAction);\n\nconst AccessibilityHelpCommand = EditorCommand.bindToContribution<AccessibilityHelpController>(AccessibilityHelpController.get);\n\nregisterEditorCommand(new AccessibilityHelpCommand({\n\tid: 'closeAccessibilityHelp',\n\tprecondition: CONTEXT_ACCESSIBILITY_WIDGET_VISIBLE,\n\thandler: x => x.hide(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 100,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape, secondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\nregisterThemingParticipant((theme, collector) => {\n\tconst widgetBackground = theme.getColor(editorWidgetBackground);\n\tif (widgetBackground) {\n\t\tcollector.addRule(`.monaco-editor .accessibilityHelpWidget { background-color: ${widgetBackground}; }`);\n\t}\n\n\tconst widgetShadowColor = theme.getColor(widgetShadow);\n\tif (widgetShadowColor) {\n\t\tcollector.addRule(`.monaco-editor .accessibilityHelpWidget { box-shadow: 0 2px 8px ${widgetShadowColor}; }`);\n\t}\n\n\tconst hcBorder = theme.getColor(contrastBorder);\n\tif (hcBorder) {\n\t\tcollector.addRule(`.monaco-editor .accessibilityHelpWidget { border: 2px solid ${hcBorder}; }`);\n\t}\n});\n"]}]}