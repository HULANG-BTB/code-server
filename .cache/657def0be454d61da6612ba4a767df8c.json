{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/list/browser/listService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/list/browser/listService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _a;\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar listPaging_1 = require(\"vs/base/browser/ui/list/listPaging\");\nvar listWidget_1 = require(\"vs/base/browser/ui/list/listWidget\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar scrollable_1 = require(\"vs/base/common/scrollable\");\nvar types_1 = require(\"vs/base/common/types\");\nvar treeDefaults_1 = require(\"vs/base/parts/tree/browser/treeDefaults\");\nvar treeImpl_1 = require(\"vs/base/parts/tree/browser/treeImpl\");\nvar nls_1 = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar contextkeys_1 = require(\"vs/platform/contextkey/common/contextkeys\");\nvar objectTree_1 = require(\"vs/base/browser/ui/tree/objectTree\");\nvar asyncDataTree_1 = require(\"vs/base/browser/ui/tree/asyncDataTree\");\nvar dataTree_1 = require(\"vs/base/browser/ui/tree/dataTree\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nexports.IListService = instantiation_1.createDecorator('listService');\nvar ListService = /** @class */ (function () {\n    function ListService(contextKeyService) {\n        this.lists = [];\n        this._lastFocusedWidget = undefined;\n    }\n    Object.defineProperty(ListService.prototype, \"lastFocusedList\", {\n        get: function () {\n            return this._lastFocusedWidget;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ListService.prototype.register = function (widget, extraContextKeys) {\n        var _this = this;\n        if (this.lists.some(function (l) { return l.widget === widget; })) {\n            throw new Error('Cannot register the same widget multiple times');\n        }\n        // Keep in our lists list\n        var registeredList = { widget: widget, extraContextKeys: extraContextKeys };\n        this.lists.push(registeredList);\n        // Check for currently being focused\n        if (widget.getHTMLElement() === document.activeElement) {\n            this._lastFocusedWidget = widget;\n        }\n        var result = lifecycle_1.combinedDisposable([\n            widget.onDidFocus(function () { return _this._lastFocusedWidget = widget; }),\n            lifecycle_1.toDisposable(function () { return _this.lists.splice(_this.lists.indexOf(registeredList), 1); }),\n            widget.onDidDispose(function () {\n                _this.lists = _this.lists.filter(function (l) { return l !== registeredList; });\n                if (_this._lastFocusedWidget === widget) {\n                    _this._lastFocusedWidget = undefined;\n                }\n            })\n        ]);\n        return result;\n    };\n    ListService = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService)\n    ], ListService);\n    return ListService;\n}());\nexports.ListService = ListService;\nvar RawWorkbenchListFocusContextKey = new contextkey_1.RawContextKey('listFocus', true);\nexports.WorkbenchListSupportsMultiSelectContextKey = new contextkey_1.RawContextKey('listSupportsMultiselect', true);\nexports.WorkbenchListFocusContextKey = contextkey_1.ContextKeyExpr.and(RawWorkbenchListFocusContextKey, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey));\nexports.WorkbenchListHasSelectionOrFocus = new contextkey_1.RawContextKey('listHasSelectionOrFocus', false);\nexports.WorkbenchListDoubleSelection = new contextkey_1.RawContextKey('listDoubleSelection', false);\nexports.WorkbenchListMultiSelection = new contextkey_1.RawContextKey('listMultiSelection', false);\nexports.WorkbenchListSupportsKeyboardNavigation = new contextkey_1.RawContextKey('listSupportsKeyboardNavigation', true);\nexports.WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\nexports.WorkbenchListAutomaticKeyboardNavigation = new contextkey_1.RawContextKey(exports.WorkbenchListAutomaticKeyboardNavigationKey, true);\nexports.didBindWorkbenchListAutomaticKeyboardNavigation = false;\nfunction createScopedContextKeyService(contextKeyService, widget) {\n    var result = contextKeyService.createScoped(widget.getHTMLElement());\n    RawWorkbenchListFocusContextKey.bindTo(result);\n    return result;\n}\nexports.multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nexports.openModeSettingKey = 'workbench.list.openMode';\nexports.horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nexports.keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nexports.automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nvar treeIndentKey = 'workbench.tree.indent';\nfunction getHorizontalScrollingSetting(configurationService) {\n    return configuration_1.getMigratedSettingValue(configurationService, exports.horizontalScrollingKey, 'workbench.tree.horizontalScrolling');\n}\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n    return configurationService.getValue(exports.multiSelectModifierSettingKey) === 'alt';\n}\nfunction useSingleClickToOpen(configurationService) {\n    return configurationService.getValue(exports.openModeSettingKey) !== 'doubleClick';\n}\nvar MultipleSelectionController = /** @class */ (function (_super) {\n    tslib_1.__extends(MultipleSelectionController, _super);\n    function MultipleSelectionController(configurationService) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        _this.registerListeners();\n        return _this;\n    }\n    MultipleSelectionController.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(_this.configurationService);\n            }\n        }));\n    };\n    MultipleSelectionController.prototype.isSelectionSingleChangeEvent = function (event) {\n        if (this.useAltAsMultipleSelectionModifier) {\n            return event.browserEvent.altKey;\n        }\n        return listWidget_1.isSelectionSingleChangeEvent(event);\n    };\n    MultipleSelectionController.prototype.isSelectionRangeChangeEvent = function (event) {\n        return listWidget_1.isSelectionRangeChangeEvent(event);\n    };\n    return MultipleSelectionController;\n}(lifecycle_1.Disposable));\nvar WorkbenchOpenController = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchOpenController, _super);\n    function WorkbenchOpenController(configurationService, existingOpenController) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.existingOpenController = existingOpenController;\n        _this.openOnSingleClick = useSingleClickToOpen(configurationService);\n        _this.registerListeners();\n        return _this;\n    }\n    WorkbenchOpenController.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this.openOnSingleClick = useSingleClickToOpen(_this.configurationService);\n            }\n        }));\n    };\n    WorkbenchOpenController.prototype.shouldOpen = function (event) {\n        if (event instanceof MouseEvent) {\n            var isLeftButton = event.button === 0;\n            var isDoubleClick = event.detail === 2;\n            if (isLeftButton && !this.openOnSingleClick && !isDoubleClick) {\n                return false;\n            }\n            if (isLeftButton /* left mouse button */ || event.button === 1 /* middle mouse button */) {\n                return this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;\n            }\n            return false;\n        }\n        return this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;\n    };\n    return WorkbenchOpenController;\n}(lifecycle_1.Disposable));\nfunction toWorkbenchListOptions(options, configurationService, keybindingService) {\n    var disposables = [];\n    var result = tslib_1.__assign({}, options);\n    if (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {\n        var multipleSelectionController = new MultipleSelectionController(configurationService);\n        result.multipleSelectionController = multipleSelectionController;\n        disposables.push(multipleSelectionController);\n    }\n    var openController = new WorkbenchOpenController(configurationService, options.openController);\n    result.openController = openController;\n    disposables.push(openController);\n    if (options.keyboardNavigationLabelProvider) {\n        var tlp_1 = options.keyboardNavigationLabelProvider;\n        result.keyboardNavigationLabelProvider = {\n            getKeyboardNavigationLabel: function (e) { return tlp_1.getKeyboardNavigationLabel(e); },\n            mightProducePrintableCharacter: function (e) { return keybindingService.mightProducePrintableCharacter(e); }\n        };\n    }\n    return [result, lifecycle_1.combinedDisposable(disposables)];\n}\nvar sharedListStyleSheet;\nfunction getSharedListStyleSheet() {\n    if (!sharedListStyleSheet) {\n        sharedListStyleSheet = dom_1.createStyleSheet();\n    }\n    return sharedListStyleSheet;\n}\nvar WorkbenchList = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchList, _super);\n    function WorkbenchList(container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n        var _this = this;\n        var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n        var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], workbenchListOptionsDisposable = _a[1];\n        _this = _super.call(this, container, delegate, renderers, tslib_1.__assign({ keyboardSupport: false, styleController: new listWidget_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), workbenchListOptions, { horizontalScrolling: horizontalScrolling })) || this;\n        _this.disposables.push(workbenchListOptionsDisposable);\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        _this.configurationService = configurationService;\n        var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n        _this.listHasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(_this.contextKeyService);\n        _this.listDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(_this.contextKeyService);\n        _this.listMultiSelection = exports.WorkbenchListMultiSelection.bindTo(_this.contextKeyService);\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        _this.disposables.push(lifecycle_1.combinedDisposable([\n            _this.contextKeyService,\n            listService.register(_this),\n            styler_1.attachListStyler(_this, themeService),\n            _this.onSelectionChange(function () {\n                var selection = _this.getSelection();\n                var focus = _this.getFocus();\n                _this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                _this.listMultiSelection.set(selection.length > 1);\n                _this.listDoubleSelection.set(selection.length === 2);\n            }),\n            _this.onFocusChange(function () {\n                var selection = _this.getSelection();\n                var focus = _this.getFocus();\n                _this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            })\n        ]));\n        _this.registerListeners();\n        return _this;\n    }\n    WorkbenchList.prototype.registerListeners = function () {\n        var _this = this;\n        this.disposables.push(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(_this.configurationService);\n            }\n        }));\n    };\n    Object.defineProperty(WorkbenchList.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchList = tslib_1.__decorate([\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, exports.IListService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, keybinding_1.IKeybindingService)\n    ], WorkbenchList);\n    return WorkbenchList;\n}(listWidget_1.List));\nexports.WorkbenchList = WorkbenchList;\nvar WorkbenchPagedList = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchPagedList, _super);\n    function WorkbenchPagedList(container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService) {\n        var _this = this;\n        var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n        var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], workbenchListOptionsDisposable = _a[1];\n        _this = _super.call(this, container, delegate, renderers, tslib_1.__assign({ keyboardSupport: false, styleController: new listWidget_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), workbenchListOptions, { horizontalScrolling: horizontalScrolling })) || this;\n        _this.disposables = [workbenchListOptionsDisposable];\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        _this.configurationService = configurationService;\n        var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        _this.disposables.push(lifecycle_1.combinedDisposable([\n            _this.contextKeyService,\n            listService.register(_this),\n            styler_1.attachListStyler(_this, themeService)\n        ]));\n        _this.registerListeners();\n        return _this;\n    }\n    WorkbenchPagedList.prototype.registerListeners = function () {\n        var _this = this;\n        this.disposables.push(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(_this.configurationService);\n            }\n        }));\n    };\n    Object.defineProperty(WorkbenchPagedList.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchPagedList.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    WorkbenchPagedList = tslib_1.__decorate([\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, exports.IListService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, keybinding_1.IKeybindingService)\n    ], WorkbenchPagedList);\n    return WorkbenchPagedList;\n}(listPaging_1.PagedList));\nexports.WorkbenchPagedList = WorkbenchPagedList;\n/**\n * @deprecated\n */\nvar sharedTreeStyleSheet;\nfunction getSharedTreeStyleSheet() {\n    if (!sharedTreeStyleSheet) {\n        sharedTreeStyleSheet = dom_1.createStyleSheet();\n    }\n    return sharedTreeStyleSheet;\n}\n/**\n * @deprecated\n */\nfunction handleTreeController(configuration, instantiationService) {\n    if (!configuration.controller) {\n        configuration.controller = instantiationService.createInstance(WorkbenchTreeController, {});\n    }\n    if (!configuration.styler) {\n        configuration.styler = new treeDefaults_1.DefaultTreestyler(getSharedTreeStyleSheet());\n    }\n    return configuration;\n}\n/**\n * @deprecated\n */\nvar WorkbenchTree = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchTree, _super);\n    function WorkbenchTree(container, configuration, options, contextKeyService, listService, themeService, instantiationService, configurationService) {\n        var _this = this;\n        var config = handleTreeController(configuration, instantiationService);\n        var horizontalScrollMode = configurationService.getValue(exports.horizontalScrollingKey) ? scrollable_1.ScrollbarVisibility.Auto : scrollable_1.ScrollbarVisibility.Hidden;\n        var opts = tslib_1.__assign({ horizontalScrollMode: horizontalScrollMode, keyboardSupport: false }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), options);\n        _this = _super.call(this, container, config, opts) || this;\n        _this.disposables = [];\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        _this.listHasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(_this.contextKeyService);\n        _this.listDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(_this.contextKeyService);\n        _this.listMultiSelection = exports.WorkbenchListMultiSelection.bindTo(_this.contextKeyService);\n        _this._openOnSingleClick = useSingleClickToOpen(configurationService);\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        _this.disposables.push(_this.contextKeyService, listService.register(_this), styler_1.attachListStyler(_this, themeService));\n        _this.disposables.push(_this.onDidChangeSelection(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.listHasSelectionOrFocus.set((selection && selection.length > 0) || !!focus);\n            _this.listDoubleSelection.set(selection && selection.length === 2);\n            _this.listMultiSelection.set(selection && selection.length > 1);\n        }));\n        _this.disposables.push(_this.onDidChangeFocus(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.listHasSelectionOrFocus.set((selection && selection.length > 0) || !!focus);\n        }));\n        _this.disposables.push(configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this._openOnSingleClick = useSingleClickToOpen(configurationService);\n            }\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n        }));\n        return _this;\n    }\n    Object.defineProperty(WorkbenchTree.prototype, \"openOnSingleClick\", {\n        get: function () {\n            return this._openOnSingleClick;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkbenchTree.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchTree.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    WorkbenchTree = tslib_1.__decorate([\n        tslib_1.__param(3, contextkey_1.IContextKeyService),\n        tslib_1.__param(4, exports.IListService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, instantiation_1.IInstantiationService),\n        tslib_1.__param(7, configuration_1.IConfigurationService)\n    ], WorkbenchTree);\n    return WorkbenchTree;\n}(treeImpl_1.Tree));\nexports.WorkbenchTree = WorkbenchTree;\n/**\n * @deprecated\n */\nfunction massageControllerOptions(options) {\n    if (typeof options.keyboardSupport !== 'boolean') {\n        options.keyboardSupport = false;\n    }\n    if (typeof options.clickBehavior !== 'number') {\n        options.clickBehavior = treeDefaults_1.ClickBehavior.ON_MOUSE_DOWN;\n    }\n    return options;\n}\n/**\n * @deprecated\n */\nvar WorkbenchTreeController = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchTreeController, _super);\n    function WorkbenchTreeController(options, configurationService) {\n        var _this = _super.call(this, massageControllerOptions(options)) || this;\n        _this.configurationService = configurationService;\n        _this.disposables = [];\n        // if the open mode is not set, we configure it based on settings\n        if (types_1.isUndefinedOrNull(options.openMode)) {\n            _this.setOpenMode(_this.getOpenModeSetting());\n            _this.registerListeners();\n        }\n        return _this;\n    }\n    WorkbenchTreeController.prototype.registerListeners = function () {\n        var _this = this;\n        this.disposables.push(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this.setOpenMode(_this.getOpenModeSetting());\n            }\n        }));\n    };\n    WorkbenchTreeController.prototype.getOpenModeSetting = function () {\n        return useSingleClickToOpen(this.configurationService) ? treeDefaults_1.OpenMode.SINGLE_CLICK : treeDefaults_1.OpenMode.DOUBLE_CLICK;\n    };\n    WorkbenchTreeController.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    WorkbenchTreeController = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], WorkbenchTreeController);\n    return WorkbenchTreeController;\n}(treeDefaults_1.DefaultController));\nexports.WorkbenchTreeController = WorkbenchTreeController;\n/**\n * @deprecated\n */\nvar TreeResourceNavigator = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeResourceNavigator, _super);\n    function TreeResourceNavigator(tree, options) {\n        var _this = _super.call(this) || this;\n        _this.tree = tree;\n        _this.options = options;\n        _this._openResource = new event_1.Emitter();\n        _this.openResource = _this._openResource.event;\n        _this.registerListeners();\n        return _this;\n    }\n    TreeResourceNavigator.prototype.registerListeners = function () {\n        var _this = this;\n        if (this.options && this.options.openOnFocus) {\n            this._register(this.tree.onDidChangeFocus(function (e) { return _this.onFocus(e); }));\n        }\n        this._register(this.tree.onDidChangeSelection(function (e) { return _this.onSelection(e); }));\n    };\n    TreeResourceNavigator.prototype.onFocus = function (_a) {\n        var payload = _a.payload;\n        var element = this.tree.getFocus();\n        this.tree.setSelection([element], { fromFocus: true });\n        var originalEvent = payload && payload.originalEvent;\n        var isMouseEvent = payload && payload.origin === 'mouse';\n        var isDoubleClick = isMouseEvent && originalEvent && originalEvent.detail === 2;\n        var preventOpen = payload && payload.preventOpenOnFocus;\n        if (!preventOpen && (!isMouseEvent || this.tree.openOnSingleClick || isDoubleClick)) {\n            this._openResource.fire({\n                editorOptions: {\n                    preserveFocus: true,\n                    pinned: false,\n                    revealIfVisible: true\n                },\n                sideBySide: false,\n                element: element,\n                payload: payload\n            });\n        }\n    };\n    TreeResourceNavigator.prototype.onSelection = function (_a) {\n        var payload = _a.payload;\n        if (payload && payload.fromFocus) {\n            return;\n        }\n        var originalEvent = payload && payload.originalEvent;\n        var isMouseEvent = payload && payload.origin === 'mouse';\n        var isDoubleClick = isMouseEvent && originalEvent && originalEvent.detail === 2;\n        if (!isMouseEvent || this.tree.openOnSingleClick || isDoubleClick) {\n            if (isDoubleClick && originalEvent) {\n                originalEvent.preventDefault(); // focus moves to editor, we need to prevent default\n            }\n            var isFromKeyboard = payload && payload.origin === 'keyboard';\n            var sideBySide = (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey || originalEvent.altKey));\n            var preserveFocus = !((isFromKeyboard && (!payload || !payload.preserveFocus)) || isDoubleClick || (payload && payload.focusEditor));\n            this._openResource.fire({\n                editorOptions: {\n                    preserveFocus: preserveFocus,\n                    pinned: isDoubleClick,\n                    revealIfVisible: true\n                },\n                sideBySide: sideBySide,\n                element: this.tree.getSelection()[0],\n                payload: payload\n            });\n        }\n    };\n    return TreeResourceNavigator;\n}(lifecycle_1.Disposable));\nexports.TreeResourceNavigator = TreeResourceNavigator;\nfunction getSelectionKeyboardEvent(typeArg, preserveFocus) {\n    if (typeArg === void 0) { typeArg = 'keydown'; }\n    var e = new KeyboardEvent(typeArg);\n    e.preserveFocus = preserveFocus;\n    return e;\n}\nexports.getSelectionKeyboardEvent = getSelectionKeyboardEvent;\nvar TreeResourceNavigator2 = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeResourceNavigator2, _super);\n    function TreeResourceNavigator2(tree, options) {\n        var _this = _super.call(this) || this;\n        _this.tree = tree;\n        _this.options = options;\n        _this._onDidOpenResource = new event_1.Emitter();\n        _this.onDidOpenResource = _this._onDidOpenResource.event;\n        _this.registerListeners();\n        return _this;\n    }\n    TreeResourceNavigator2.prototype.registerListeners = function () {\n        var _this = this;\n        if (this.options && this.options.openOnFocus) {\n            this._register(this.tree.onDidChangeFocus(function (e) { return _this.onFocus(e); }));\n        }\n        this._register(this.tree.onDidChangeSelection(function (e) { return _this.onSelection(e); }));\n        this._register(this.tree.onDidOpen(function (e) { return _this.onSelection(e); }));\n    };\n    TreeResourceNavigator2.prototype.onFocus = function (e) {\n        var focus = this.tree.getFocus();\n        this.tree.setSelection(focus, e.browserEvent);\n        if (!e.browserEvent) {\n            return;\n        }\n        var isMouseEvent = e.browserEvent && e.browserEvent instanceof MouseEvent;\n        if (!isMouseEvent) {\n            this.open(true, false, false, e.browserEvent);\n        }\n    };\n    TreeResourceNavigator2.prototype.onSelection = function (e, doubleClick) {\n        if (doubleClick === void 0) { doubleClick = false; }\n        if (!e.browserEvent || e.browserEvent.type === 'contextmenu') {\n            return;\n        }\n        var isKeyboardEvent = e.browserEvent instanceof KeyboardEvent;\n        var isMiddleClick = e.browserEvent instanceof MouseEvent ? e.browserEvent.button === 1 : false;\n        var isDoubleClick = e.browserEvent.detail === 2;\n        var preserveFocus = (e.browserEvent instanceof KeyboardEvent && typeof e.browserEvent.preserveFocus === 'boolean') ?\n            !!e.browserEvent.preserveFocus :\n            !isDoubleClick;\n        if (this.tree.openOnSingleClick || isDoubleClick || isKeyboardEvent) {\n            var sideBySide = e.browserEvent instanceof MouseEvent && (e.browserEvent.ctrlKey || e.browserEvent.metaKey || e.browserEvent.altKey);\n            this.open(preserveFocus, isDoubleClick || isMiddleClick, sideBySide, e.browserEvent);\n        }\n    };\n    TreeResourceNavigator2.prototype.open = function (preserveFocus, pinned, sideBySide, browserEvent) {\n        this._onDidOpenResource.fire({\n            editorOptions: {\n                preserveFocus: preserveFocus,\n                pinned: pinned,\n                revealIfVisible: true\n            },\n            sideBySide: sideBySide,\n            element: this.tree.getSelection()[0],\n            browserEvent: browserEvent\n        });\n    };\n    return TreeResourceNavigator2;\n}(lifecycle_1.Disposable));\nexports.TreeResourceNavigator2 = TreeResourceNavigator2;\nfunction createKeyboardNavigationEventFilter(container, keybindingService) {\n    var inChord = false;\n    return function (event) {\n        if (inChord) {\n            inChord = false;\n            return false;\n        }\n        var result = keybindingService.softDispatch(event, container);\n        if (result && result.enterChord) {\n            inChord = true;\n            return false;\n        }\n        inChord = false;\n        return true;\n    };\n}\nvar WorkbenchObjectTree = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchObjectTree, _super);\n    function WorkbenchObjectTree(container, delegate, renderers, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        var _this = this;\n        exports.WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n        if (!exports.didBindWorkbenchListAutomaticKeyboardNavigation) {\n            exports.WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n            exports.didBindWorkbenchListAutomaticKeyboardNavigation = true;\n        }\n        var getAutomaticKeyboardNavigation = function () {\n            // give priority to the context key value to disable this completely\n            var automaticKeyboardNavigation = contextKeyService.getContextKeyValue(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n            if (automaticKeyboardNavigation) {\n                automaticKeyboardNavigation = configurationService.getValue(exports.automaticKeyboardNavigationSettingKey);\n            }\n            return automaticKeyboardNavigation;\n        };\n        var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n        var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n        var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n        var openOnSingleClick = useSingleClickToOpen(configurationService);\n        var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], workbenchListOptionsDisposable = _a[1];\n        _this = _super.call(this, container, delegate, renderers, tslib_1.__assign({ keyboardSupport: false, styleController: new listWidget_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), workbenchListOptions, { indent: configurationService.getValue(treeIndentKey), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling: horizontalScrolling,\n            openOnSingleClick: openOnSingleClick, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService) })) || this;\n        _this.disposables.push(workbenchListOptionsDisposable);\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n        _this.hasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(_this.contextKeyService);\n        _this.hasDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(_this.contextKeyService);\n        _this.hasMultiSelection = exports.WorkbenchListMultiSelection.bindTo(_this.contextKeyService);\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        var interestingContextKeys = new Set();\n        interestingContextKeys.add(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n        var updateKeyboardNavigation = function () {\n            var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n            var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n            _this.updateOptions({\n                simpleKeyboardNavigation: keyboardNavigation === 'simple',\n                filterOnType: keyboardNavigation === 'filter'\n            });\n        };\n        _this.disposables.push(_this.contextKeyService, listService.register(_this), styler_1.attachListStyler(_this, themeService), _this.onDidChangeSelection(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            _this.hasMultiSelection.set(selection.length > 1);\n            _this.hasDoubleSelection.set(selection.length === 2);\n        }), _this.onDidChangeFocus(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }), configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n            }\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                var indent = configurationService.getValue(treeIndentKey);\n                _this.updateOptions({ indent: indent });\n            }\n            if (e.affectsConfiguration(exports.keyboardNavigationSettingKey)) {\n                updateKeyboardNavigation();\n            }\n            if (e.affectsConfiguration(exports.automaticKeyboardNavigationSettingKey)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), _this.contextKeyService.onDidChangeContext(function (e) {\n            if (e.affectsSome(interestingContextKeys)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), accessibilityService.onDidChangeAccessibilitySupport(function () { return updateKeyboardNavigation(); }));\n        return _this;\n    }\n    Object.defineProperty(WorkbenchObjectTree.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchObjectTree.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    WorkbenchObjectTree = tslib_1.__decorate([\n        tslib_1.__param(4, contextkey_1.IContextKeyService),\n        tslib_1.__param(5, exports.IListService),\n        tslib_1.__param(6, themeService_1.IThemeService),\n        tslib_1.__param(7, configuration_1.IConfigurationService),\n        tslib_1.__param(8, keybinding_1.IKeybindingService),\n        tslib_1.__param(9, accessibility_1.IAccessibilityService)\n    ], WorkbenchObjectTree);\n    return WorkbenchObjectTree;\n}(objectTree_1.ObjectTree));\nexports.WorkbenchObjectTree = WorkbenchObjectTree;\nvar WorkbenchDataTree = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchDataTree, _super);\n    function WorkbenchDataTree(container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        var _this = this;\n        exports.WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n        if (!exports.didBindWorkbenchListAutomaticKeyboardNavigation) {\n            exports.WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n            exports.didBindWorkbenchListAutomaticKeyboardNavigation = true;\n        }\n        var getAutomaticKeyboardNavigation = function () {\n            // give priority to the context key value to disable this completely\n            var automaticKeyboardNavigation = contextKeyService.getContextKeyValue(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n            if (automaticKeyboardNavigation) {\n                automaticKeyboardNavigation = configurationService.getValue(exports.automaticKeyboardNavigationSettingKey);\n            }\n            return automaticKeyboardNavigation;\n        };\n        var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n        var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n        var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n        var openOnSingleClick = useSingleClickToOpen(configurationService);\n        var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], workbenchListOptionsDisposable = _a[1];\n        _this = _super.call(this, container, delegate, renderers, dataSource, tslib_1.__assign({ keyboardSupport: false, styleController: new listWidget_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), workbenchListOptions, { indent: configurationService.getValue(treeIndentKey), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling: horizontalScrolling,\n            openOnSingleClick: openOnSingleClick, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService) })) || this;\n        _this.disposables.push(workbenchListOptionsDisposable);\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n        _this.hasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(_this.contextKeyService);\n        _this.hasDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(_this.contextKeyService);\n        _this.hasMultiSelection = exports.WorkbenchListMultiSelection.bindTo(_this.contextKeyService);\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        var interestingContextKeys = new Set();\n        interestingContextKeys.add(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n        var updateKeyboardNavigation = function () {\n            var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n            var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n            _this.updateOptions({\n                simpleKeyboardNavigation: keyboardNavigation === 'simple',\n                filterOnType: keyboardNavigation === 'filter'\n            });\n        };\n        _this.disposables.push(_this.contextKeyService, listService.register(_this), styler_1.attachListStyler(_this, themeService), _this.onDidChangeSelection(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            _this.hasMultiSelection.set(selection.length > 1);\n            _this.hasDoubleSelection.set(selection.length === 2);\n        }), _this.onDidChangeFocus(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }), configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n            }\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                var indent = configurationService.getValue(treeIndentKey);\n                _this.updateOptions({ indent: indent });\n            }\n            if (e.affectsConfiguration(exports.keyboardNavigationSettingKey)) {\n                updateKeyboardNavigation();\n            }\n            if (e.affectsConfiguration(exports.automaticKeyboardNavigationSettingKey)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), _this.contextKeyService.onDidChangeContext(function (e) {\n            if (e.affectsSome(interestingContextKeys)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), accessibilityService.onDidChangeAccessibilitySupport(function () { return updateKeyboardNavigation(); }));\n        return _this;\n    }\n    Object.defineProperty(WorkbenchDataTree.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchDataTree = tslib_1.__decorate([\n        tslib_1.__param(5, contextkey_1.IContextKeyService),\n        tslib_1.__param(6, exports.IListService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, configuration_1.IConfigurationService),\n        tslib_1.__param(9, keybinding_1.IKeybindingService),\n        tslib_1.__param(10, accessibility_1.IAccessibilityService)\n    ], WorkbenchDataTree);\n    return WorkbenchDataTree;\n}(dataTree_1.DataTree));\nexports.WorkbenchDataTree = WorkbenchDataTree;\nvar WorkbenchAsyncDataTree = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchAsyncDataTree, _super);\n    function WorkbenchAsyncDataTree(container, delegate, renderers, dataSource, options, contextKeyService, listService, themeService, configurationService, keybindingService, accessibilityService) {\n        var _this = this;\n        exports.WorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n        if (!exports.didBindWorkbenchListAutomaticKeyboardNavigation) {\n            exports.WorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n            exports.didBindWorkbenchListAutomaticKeyboardNavigation = true;\n        }\n        var getAutomaticKeyboardNavigation = function () {\n            // give priority to the context key value to disable this completely\n            var automaticKeyboardNavigation = contextKeyService.getContextKeyValue(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n            if (automaticKeyboardNavigation) {\n                automaticKeyboardNavigation = configurationService.getValue(exports.automaticKeyboardNavigationSettingKey);\n            }\n            return automaticKeyboardNavigation;\n        };\n        var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n        var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n        var horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n        var openOnSingleClick = useSingleClickToOpen(configurationService);\n        var _a = toWorkbenchListOptions(options, configurationService, keybindingService), workbenchListOptions = _a[0], workbenchListOptionsDisposable = _a[1];\n        _this = _super.call(this, container, delegate, renderers, dataSource, tslib_1.__assign({ keyboardSupport: false, styleController: new listWidget_1.DefaultStyleController(getSharedListStyleSheet()) }, styler_1.computeStyles(themeService.getTheme(), styler_1.defaultListStyles), workbenchListOptions, { indent: configurationService.getValue(treeIndentKey), automaticKeyboardNavigation: getAutomaticKeyboardNavigation(), simpleKeyboardNavigation: keyboardNavigation === 'simple', filterOnType: keyboardNavigation === 'filter', horizontalScrolling: horizontalScrolling,\n            openOnSingleClick: openOnSingleClick, keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService) })) || this;\n        _this.disposables.push(workbenchListOptionsDisposable);\n        _this.contextKeyService = createScopedContextKeyService(contextKeyService, _this);\n        var listSupportsMultiSelect = exports.WorkbenchListSupportsMultiSelectContextKey.bindTo(_this.contextKeyService);\n        listSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n        _this.hasSelectionOrFocus = exports.WorkbenchListHasSelectionOrFocus.bindTo(_this.contextKeyService);\n        _this.hasDoubleSelection = exports.WorkbenchListDoubleSelection.bindTo(_this.contextKeyService);\n        _this.hasMultiSelection = exports.WorkbenchListMultiSelection.bindTo(_this.contextKeyService);\n        _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        var interestingContextKeys = new Set();\n        interestingContextKeys.add(exports.WorkbenchListAutomaticKeyboardNavigationKey);\n        var updateKeyboardNavigation = function () {\n            var accessibilityOn = accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled;\n            var keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue(exports.keyboardNavigationSettingKey);\n            _this.updateOptions({\n                simpleKeyboardNavigation: keyboardNavigation === 'simple',\n                filterOnType: keyboardNavigation === 'filter'\n            });\n        };\n        _this.disposables.push(_this.contextKeyService, listService.register(_this), styler_1.attachListStyler(_this, themeService), _this.onDidChangeSelection(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            _this.hasMultiSelection.set(selection.length > 1);\n            _this.hasDoubleSelection.set(selection.length === 2);\n        }), _this.onDidChangeFocus(function () {\n            var selection = _this.getSelection();\n            var focus = _this.getFocus();\n            _this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }), configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(exports.openModeSettingKey)) {\n                _this.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n            }\n            if (e.affectsConfiguration(exports.multiSelectModifierSettingKey)) {\n                _this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                var indent = configurationService.getValue(treeIndentKey);\n                _this.updateOptions({ indent: indent });\n            }\n            if (e.affectsConfiguration(exports.keyboardNavigationSettingKey)) {\n                updateKeyboardNavigation();\n            }\n            if (e.affectsConfiguration(exports.automaticKeyboardNavigationSettingKey)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), _this.contextKeyService.onDidChangeContext(function (e) {\n            if (e.affectsSome(interestingContextKeys)) {\n                _this.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n            }\n        }), accessibilityService.onDidChangeAccessibilitySupport(function () { return updateKeyboardNavigation(); }));\n        return _this;\n    }\n    Object.defineProperty(WorkbenchAsyncDataTree.prototype, \"useAltAsMultipleSelectionModifier\", {\n        get: function () {\n            return this._useAltAsMultipleSelectionModifier;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkbenchAsyncDataTree = tslib_1.__decorate([\n        tslib_1.__param(5, contextkey_1.IContextKeyService),\n        tslib_1.__param(6, exports.IListService),\n        tslib_1.__param(7, themeService_1.IThemeService),\n        tslib_1.__param(8, configuration_1.IConfigurationService),\n        tslib_1.__param(9, keybinding_1.IKeybindingService),\n        tslib_1.__param(10, accessibility_1.IAccessibilityService)\n    ], WorkbenchAsyncDataTree);\n    return WorkbenchAsyncDataTree;\n}(asyncDataTree_1.AsyncDataTree));\nexports.WorkbenchAsyncDataTree = WorkbenchAsyncDataTree;\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    'id': 'workbench',\n    'order': 7,\n    'title': nls_1.localize('workbenchConfigurationTitle', \"Workbench\"),\n    'type': 'object',\n    'properties': (_a = {},\n        _a[exports.multiSelectModifierSettingKey] = {\n            'type': 'string',\n            'enum': ['ctrlCmd', 'alt'],\n            'enumDescriptions': [\n                nls_1.localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n                nls_1.localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n            ],\n            'default': 'ctrlCmd',\n            'description': nls_1.localize({\n                key: 'multiSelectModifier',\n                comment: [\n                    '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                    '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n                ]\n            }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n        },\n        _a[exports.openModeSettingKey] = {\n            'type': 'string',\n            'enum': ['singleClick', 'doubleClick'],\n            'default': 'singleClick',\n            'description': nls_1.localize({\n                key: 'openModeModifier',\n                comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n            }, \"Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. \")\n        },\n        _a[exports.horizontalScrollingKey] = {\n            'type': 'boolean',\n            'default': false,\n            'description': nls_1.localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench.\")\n        },\n        _a['workbench.tree.horizontalScrolling'] = {\n            'type': 'boolean',\n            'default': false,\n            'description': nls_1.localize('tree horizontalScrolling setting', \"Controls whether trees support horizontal scrolling in the workbench.\"),\n            'deprecationMessage': nls_1.localize('deprecated', \"This setting is deprecated, please use '{0}' instead.\", exports.horizontalScrollingKey)\n        },\n        _a[treeIndentKey] = {\n            'type': 'number',\n            'default': 8,\n            minimum: 0,\n            maximum: 40,\n            'description': nls_1.localize('tree indent setting', \"Controls tree indentation in pixels.\")\n        },\n        _a[exports.keyboardNavigationSettingKey] = {\n            'type': 'string',\n            'enum': ['simple', 'highlight', 'filter'],\n            'enumDescriptions': [\n                nls_1.localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n                nls_1.localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n                nls_1.localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n            ],\n            'default': 'highlight',\n            'description': nls_1.localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n        },\n        _a[exports.automaticKeyboardNavigationSettingKey] = {\n            'type': 'boolean',\n            'default': true,\n            markdownDescription: nls_1.localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n        },\n        _a)\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/list/browser/listService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/list/browser/listService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createStyleSheet } from 'vs/base/browser/dom';\nimport { IListMouseEvent, IListTouchEvent, IListRenderer, IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { IPagedRenderer, PagedList } from 'vs/base/browser/ui/list/listPaging';\nimport { DefaultStyleController, IListOptions, IMultipleSelectionController, IOpenController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List } from 'vs/base/browser/ui/list/listWidget';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { combinedDisposable, Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ScrollbarVisibility } from 'vs/base/common/scrollable';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { ITree, ITreeConfiguration, ITreeOptions } from 'vs/base/parts/tree/browser/tree';\nimport { ClickBehavior, DefaultController, DefaultTreestyler, IControllerOptions, OpenMode } from 'vs/base/parts/tree/browser/treeDefaults';\nimport { Tree } from 'vs/base/parts/tree/browser/treeImpl';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService, getMigratedSettingValue } from 'vs/platform/configuration/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { attachListStyler, computeStyles, defaultListStyles } from 'vs/platform/theme/common/styler';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { InputFocusedContextKey } from 'vs/platform/contextkey/common/contextkeys';\nimport { ObjectTree, IObjectTreeOptions } from 'vs/base/browser/ui/tree/objectTree';\nimport { ITreeEvent, ITreeRenderer, IAsyncDataSource, IDataSource, ITreeMouseEvent } from 'vs/base/browser/ui/tree/tree';\nimport { AsyncDataTree, IAsyncDataTreeOptions } from 'vs/base/browser/ui/tree/asyncDataTree';\nimport { DataTree, IDataTreeOptions } from 'vs/base/browser/ui/tree/dataTree';\nimport { IKeyboardNavigationEventFilter } from 'vs/base/browser/ui/tree/abstractTree';\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\n\nexport type ListWidget = List<any> | PagedList<any> | ITree | ObjectTree<any, any> | DataTree<any, any, any> | AsyncDataTree<any, any, any>;\n\nexport const IListService = createDecorator<IListService>('listService');\n\nexport interface IListService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Returns the currently focused list widget if any.\n\t */\n\treadonly lastFocusedList: ListWidget | undefined;\n}\n\ninterface IRegisteredList {\n\twidget: ListWidget;\n\textraContextKeys?: (IContextKey<boolean>)[];\n}\n\nexport class ListService implements IListService {\n\n\t_serviceBrand: any;\n\n\tprivate lists: IRegisteredList[] = [];\n\tprivate _lastFocusedWidget: ListWidget | undefined = undefined;\n\n\tget lastFocusedList(): ListWidget | undefined {\n\t\treturn this._lastFocusedWidget;\n\t}\n\n\tconstructor(@IContextKeyService contextKeyService: IContextKeyService) { }\n\n\tregister(widget: ListWidget, extraContextKeys?: (IContextKey<boolean>)[]): IDisposable {\n\t\tif (this.lists.some(l => l.widget === widget)) {\n\t\t\tthrow new Error('Cannot register the same widget multiple times');\n\t\t}\n\n\t\t// Keep in our lists list\n\t\tconst registeredList: IRegisteredList = { widget, extraContextKeys };\n\t\tthis.lists.push(registeredList);\n\n\t\t// Check for currently being focused\n\t\tif (widget.getHTMLElement() === document.activeElement) {\n\t\t\tthis._lastFocusedWidget = widget;\n\t\t}\n\n\t\tconst result = combinedDisposable([\n\t\t\twidget.onDidFocus(() => this._lastFocusedWidget = widget),\n\t\t\ttoDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)),\n\t\t\twidget.onDidDispose(() => {\n\t\t\t\tthis.lists = this.lists.filter(l => l !== registeredList);\n\t\t\t\tif (this._lastFocusedWidget === widget) {\n\t\t\t\t\tthis._lastFocusedWidget = undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t]);\n\n\t\treturn result;\n\t}\n}\n\nconst RawWorkbenchListFocusContextKey = new RawContextKey<boolean>('listFocus', true);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey<boolean>('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey));\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey<boolean>('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey<boolean>('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey<boolean>('listMultiSelection', false);\nexport const WorkbenchListSupportsKeyboardNavigation = new RawContextKey<boolean>('listSupportsKeyboardNavigation', true);\nexport const WorkbenchListAutomaticKeyboardNavigationKey = 'listAutomaticKeyboardNavigation';\nexport const WorkbenchListAutomaticKeyboardNavigation = new RawContextKey<boolean>(WorkbenchListAutomaticKeyboardNavigationKey, true);\nexport let didBindWorkbenchListAutomaticKeyboardNavigation = false;\n\nfunction createScopedContextKeyService(contextKeyService: IContextKeyService, widget: ListWidget): IContextKeyService {\n\tconst result = contextKeyService.createScoped(widget.getHTMLElement());\n\tRawWorkbenchListFocusContextKey.bindTo(result);\n\treturn result;\n}\n\nexport const multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nexport const openModeSettingKey = 'workbench.list.openMode';\nexport const horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nexport const keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nexport const automaticKeyboardNavigationSettingKey = 'workbench.list.automaticKeyboardNavigation';\nconst treeIndentKey = 'workbench.tree.indent';\n\nfunction getHorizontalScrollingSetting(configurationService: IConfigurationService): boolean {\n\treturn getMigratedSettingValue<boolean>(configurationService, horizontalScrollingKey, 'workbench.tree.horizontalScrolling');\n}\n\nfunction useAltAsMultipleSelectionModifier(configurationService: IConfigurationService): boolean {\n\treturn configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\n\nfunction useSingleClickToOpen(configurationService: IConfigurationService): boolean {\n\treturn configurationService.getValue(openModeSettingKey) !== 'doubleClick';\n}\n\nclass MultipleSelectionController<T> extends Disposable implements IMultipleSelectionController<T> {\n\tprivate useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(private configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\tthis.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tisSelectionSingleChangeEvent(event: IListMouseEvent<T> | IListTouchEvent<T>): boolean {\n\t\tif (this.useAltAsMultipleSelectionModifier) {\n\t\t\treturn event.browserEvent.altKey;\n\t\t}\n\n\t\treturn isSelectionSingleChangeEvent(event);\n\t}\n\n\tisSelectionRangeChangeEvent(event: IListMouseEvent<T> | IListTouchEvent<T>): boolean {\n\t\treturn isSelectionRangeChangeEvent(event);\n\t}\n}\n\nclass WorkbenchOpenController extends Disposable implements IOpenController {\n\tprivate openOnSingleClick: boolean;\n\n\tconstructor(private configurationService: IConfigurationService, private existingOpenController?: IOpenController) {\n\t\tsuper();\n\n\t\tthis.openOnSingleClick = useSingleClickToOpen(configurationService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\tthis.openOnSingleClick = useSingleClickToOpen(this.configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tshouldOpen(event: UIEvent): boolean {\n\t\tif (event instanceof MouseEvent) {\n\t\t\tconst isLeftButton = event.button === 0;\n\t\t\tconst isDoubleClick = event.detail === 2;\n\t\t\tif (isLeftButton && !this.openOnSingleClick && !isDoubleClick) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (isLeftButton /* left mouse button */ || event.button === 1 /* middle mouse button */) {\n\t\t\t\treturn this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.existingOpenController ? this.existingOpenController.shouldOpen(event) : true;\n\t}\n}\n\nfunction toWorkbenchListOptions<T>(options: IListOptions<T>, configurationService: IConfigurationService, keybindingService: IKeybindingService): [IListOptions<T>, IDisposable] {\n\tconst disposables: IDisposable[] = [];\n\tconst result = { ...options };\n\n\tif (options.multipleSelectionSupport !== false && !options.multipleSelectionController) {\n\t\tconst multipleSelectionController = new MultipleSelectionController(configurationService);\n\t\tresult.multipleSelectionController = multipleSelectionController;\n\t\tdisposables.push(multipleSelectionController);\n\t}\n\n\tconst openController = new WorkbenchOpenController(configurationService, options.openController);\n\tresult.openController = openController;\n\tdisposables.push(openController);\n\n\tif (options.keyboardNavigationLabelProvider) {\n\t\tconst tlp = options.keyboardNavigationLabelProvider;\n\n\t\tresult.keyboardNavigationLabelProvider = {\n\t\t\tgetKeyboardNavigationLabel(e) { return tlp.getKeyboardNavigationLabel(e); },\n\t\t\tmightProducePrintableCharacter(e) { return keybindingService.mightProducePrintableCharacter(e); }\n\t\t};\n\t}\n\n\treturn [result, combinedDisposable(disposables)];\n}\n\nlet sharedListStyleSheet: HTMLStyleElement;\nfunction getSharedListStyleSheet(): HTMLStyleElement {\n\tif (!sharedListStyleSheet) {\n\t\tsharedListStyleSheet = createStyleSheet();\n\t}\n\n\treturn sharedListStyleSheet;\n}\n\nexport class WorkbenchList<T> extends List<T> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate readonly configurationService: IConfigurationService;\n\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: IListRenderer<any /* TODO@joao */, any>[],\n\t\toptions: IListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(container, delegate, renderers,\n\t\t\t{\n\t\t\t\tkeyboardSupport: false,\n\t\t\t\tstyleController: new DefaultStyleController(getSharedListStyleSheet()),\n\t\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t\t...workbenchListOptions,\n\t\t\t\thorizontalScrolling\n\t\t\t} as IListOptions<T>\n\t\t);\n\n\t\tthis.disposables.push(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\t\tthis.configurationService = configurationService;\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.push(combinedDisposable([\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService),\n\t\t\tthis.onSelectionChange(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.listMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.listDoubleSelection.set(selection.length === 2);\n\t\t\t}),\n\t\t\tthis.onFocusChange(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t})\n\t\t]));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.disposables.push(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n}\n\nexport class WorkbenchPagedList<T> extends PagedList<T> {\n\n\treadonly contextKeyService: IContextKeyService;\n\tprivate readonly configurationService: IConfigurationService;\n\n\tprivate disposables: IDisposable[];\n\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<number>,\n\t\trenderers: IPagedRenderer<T, any>[],\n\t\toptions: IListOptions<T>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\t\tsuper(container, delegate, renderers,\n\t\t\t{\n\t\t\t\tkeyboardSupport: false,\n\t\t\t\tstyleController: new DefaultStyleController(getSharedListStyleSheet()),\n\t\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t\t...workbenchListOptions,\n\t\t\t\thorizontalScrolling\n\t\t\t} as IListOptions<T>\n\t\t);\n\n\t\tthis.disposables = [workbenchListOptionsDisposable];\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\t\tthis.configurationService = configurationService;\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.push(combinedDisposable([\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService)\n\t\t]));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.disposables.push(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\n/**\n * @deprecated\n */\nlet sharedTreeStyleSheet: HTMLStyleElement;\nfunction getSharedTreeStyleSheet(): HTMLStyleElement {\n\tif (!sharedTreeStyleSheet) {\n\t\tsharedTreeStyleSheet = createStyleSheet();\n\t}\n\n\treturn sharedTreeStyleSheet;\n}\n\n/**\n * @deprecated\n */\nfunction handleTreeController(configuration: ITreeConfiguration, instantiationService: IInstantiationService): ITreeConfiguration {\n\tif (!configuration.controller) {\n\t\tconfiguration.controller = instantiationService.createInstance(WorkbenchTreeController, {});\n\t}\n\n\tif (!configuration.styler) {\n\t\tconfiguration.styler = new DefaultTreestyler(getSharedTreeStyleSheet());\n\t}\n\n\treturn configuration;\n}\n\n/**\n * @deprecated\n */\nexport class WorkbenchTree extends Tree {\n\n\treadonly contextKeyService: IContextKeyService;\n\n\tprotected disposables: IDisposable[];\n\n\tprivate listHasSelectionOrFocus: IContextKey<boolean>;\n\tprivate listDoubleSelection: IContextKey<boolean>;\n\tprivate listMultiSelection: IContextKey<boolean>;\n\n\tprivate _openOnSingleClick: boolean;\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tconfiguration: ITreeConfiguration,\n\t\toptions: ITreeOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tconst config = handleTreeController(configuration, instantiationService);\n\t\tconst horizontalScrollMode = configurationService.getValue(horizontalScrollingKey) ? ScrollbarVisibility.Auto : ScrollbarVisibility.Hidden;\n\t\tconst opts = {\n\t\t\thorizontalScrollMode,\n\t\t\tkeyboardSupport: false,\n\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t...options\n\t\t};\n\n\t\tsuper(container, config, opts);\n\n\t\tthis.disposables = [];\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\n\t\tWorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\n\t\tthis.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._openOnSingleClick = useSingleClickToOpen(configurationService);\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService)\n\t\t);\n\n\t\tthis.disposables.push(this.onDidChangeSelection(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.listHasSelectionOrFocus.set((selection && selection.length > 0) || !!focus);\n\t\t\tthis.listDoubleSelection.set(selection && selection.length === 2);\n\t\t\tthis.listMultiSelection.set(selection && selection.length > 1);\n\t\t}));\n\n\t\tthis.disposables.push(this.onDidChangeFocus(() => {\n\t\t\tconst selection = this.getSelection();\n\t\t\tconst focus = this.getFocus();\n\n\t\t\tthis.listHasSelectionOrFocus.set((selection && selection.length > 0) || !!focus);\n\t\t}));\n\n\t\tthis.disposables.push(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\tthis._openOnSingleClick = useSingleClickToOpen(configurationService);\n\t\t\t}\n\n\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t}\n\t\t}));\n\t}\n\n\tget openOnSingleClick(): boolean {\n\t\treturn this._openOnSingleClick;\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\n/**\n * @deprecated\n */\nfunction massageControllerOptions(options: IControllerOptions): IControllerOptions {\n\tif (typeof options.keyboardSupport !== 'boolean') {\n\t\toptions.keyboardSupport = false;\n\t}\n\n\tif (typeof options.clickBehavior !== 'number') {\n\t\toptions.clickBehavior = ClickBehavior.ON_MOUSE_DOWN;\n\t}\n\n\treturn options;\n}\n\n/**\n * @deprecated\n */\nexport class WorkbenchTreeController extends DefaultController {\n\n\tprotected disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\toptions: IControllerOptions,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(massageControllerOptions(options));\n\n\t\t// if the open mode is not set, we configure it based on settings\n\t\tif (isUndefinedOrNull(options.openMode)) {\n\t\t\tthis.setOpenMode(this.getOpenModeSetting());\n\t\t\tthis.registerListeners();\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.disposables.push(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\tthis.setOpenMode(this.getOpenModeSetting());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate getOpenModeSetting(): OpenMode {\n\t\treturn useSingleClickToOpen(this.configurationService) ? OpenMode.SINGLE_CLICK : OpenMode.DOUBLE_CLICK;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport interface IOpenResourceOptions {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: any;\n\tpayload: any;\n}\n\nexport interface IResourceResultsNavigationOptions {\n\topenOnFocus: boolean;\n}\n\n/**\n * @deprecated\n */\nexport class TreeResourceNavigator extends Disposable {\n\n\tprivate readonly _openResource = new Emitter<IOpenResourceOptions>();\n\treadonly openResource: Event<IOpenResourceOptions> = this._openResource.event;\n\n\tconstructor(private tree: WorkbenchTree, private options?: IResourceResultsNavigationOptions) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tif (this.options && this.options.openOnFocus) {\n\t\t\tthis._register(this.tree.onDidChangeFocus(e => this.onFocus(e)));\n\t\t}\n\n\t\tthis._register(this.tree.onDidChangeSelection(e => this.onSelection(e)));\n\t}\n\n\tprivate onFocus({ payload }: any): void {\n\t\tconst element = this.tree.getFocus();\n\t\tthis.tree.setSelection([element], { fromFocus: true });\n\n\t\tconst originalEvent: KeyboardEvent | MouseEvent = payload && payload.originalEvent;\n\t\tconst isMouseEvent = payload && payload.origin === 'mouse';\n\t\tconst isDoubleClick = isMouseEvent && originalEvent && originalEvent.detail === 2;\n\n\t\tconst preventOpen = payload && payload.preventOpenOnFocus;\n\t\tif (!preventOpen && (!isMouseEvent || this.tree.openOnSingleClick || isDoubleClick)) {\n\t\t\tthis._openResource.fire({\n\t\t\t\teditorOptions: {\n\t\t\t\t\tpreserveFocus: true,\n\t\t\t\t\tpinned: false,\n\t\t\t\t\trevealIfVisible: true\n\t\t\t\t},\n\t\t\t\tsideBySide: false,\n\t\t\t\telement,\n\t\t\t\tpayload\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onSelection({ payload }: any): void {\n\t\tif (payload && payload.fromFocus) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst originalEvent: KeyboardEvent | MouseEvent = payload && payload.originalEvent;\n\t\tconst isMouseEvent = payload && payload.origin === 'mouse';\n\t\tconst isDoubleClick = isMouseEvent && originalEvent && originalEvent.detail === 2;\n\n\t\tif (!isMouseEvent || this.tree.openOnSingleClick || isDoubleClick) {\n\t\t\tif (isDoubleClick && originalEvent) {\n\t\t\t\toriginalEvent.preventDefault(); // focus moves to editor, we need to prevent default\n\t\t\t}\n\n\t\t\tconst isFromKeyboard = payload && payload.origin === 'keyboard';\n\t\t\tconst sideBySide = (originalEvent && (originalEvent.ctrlKey || originalEvent.metaKey || originalEvent.altKey));\n\t\t\tconst preserveFocus = !((isFromKeyboard && (!payload || !payload.preserveFocus)) || isDoubleClick || (payload && payload.focusEditor));\n\t\t\tthis._openResource.fire({\n\t\t\t\teditorOptions: {\n\t\t\t\t\tpreserveFocus,\n\t\t\t\t\tpinned: isDoubleClick,\n\t\t\t\t\trevealIfVisible: true\n\t\t\t\t},\n\t\t\t\tsideBySide,\n\t\t\t\telement: this.tree.getSelection()[0],\n\t\t\t\tpayload\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport interface IOpenEvent<T> {\n\teditorOptions: IEditorOptions;\n\tsideBySide: boolean;\n\telement: T;\n\tbrowserEvent?: UIEvent;\n}\n\nexport interface IResourceResultsNavigationOptions {\n\topenOnFocus: boolean;\n}\n\nexport interface SelectionKeyboardEvent extends KeyboardEvent {\n\tpreserveFocus?: boolean;\n}\n\nexport function getSelectionKeyboardEvent(typeArg = 'keydown', preserveFocus?: boolean): SelectionKeyboardEvent {\n\tconst e = new KeyboardEvent(typeArg);\n\t(<SelectionKeyboardEvent>e).preserveFocus = preserveFocus;\n\n\treturn e;\n}\n\nexport class TreeResourceNavigator2<T, TFilterData> extends Disposable {\n\n\tprivate readonly _onDidOpenResource = new Emitter<IOpenEvent<T | null>>();\n\treadonly onDidOpenResource: Event<IOpenEvent<T | null>> = this._onDidOpenResource.event;\n\n\tconstructor(\n\t\tprivate tree: WorkbenchObjectTree<T, TFilterData> | WorkbenchDataTree<any, T, TFilterData> | WorkbenchAsyncDataTree<any, T, TFilterData>,\n\t\tprivate options?: IResourceResultsNavigationOptions\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tif (this.options && this.options.openOnFocus) {\n\t\t\tthis._register(this.tree.onDidChangeFocus(e => this.onFocus(e)));\n\t\t}\n\n\t\tthis._register(this.tree.onDidChangeSelection(e => this.onSelection(e)));\n\t\tthis._register(this.tree.onDidOpen(e => this.onSelection(e)));\n\t}\n\n\tprivate onFocus(e: ITreeEvent<T | null>): void {\n\t\tconst focus = this.tree.getFocus();\n\t\tthis.tree.setSelection(focus as T[], e.browserEvent);\n\n\t\tif (!e.browserEvent) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isMouseEvent = e.browserEvent && e.browserEvent instanceof MouseEvent;\n\n\t\tif (!isMouseEvent) {\n\t\t\tthis.open(true, false, false, e.browserEvent);\n\t\t}\n\t}\n\n\tprivate onSelection(e: ITreeEvent<T | null> | ITreeMouseEvent<T | null>, doubleClick = false): void {\n\t\tif (!e.browserEvent || e.browserEvent.type === 'contextmenu') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isKeyboardEvent = e.browserEvent instanceof KeyboardEvent;\n\t\tconst isMiddleClick = e.browserEvent instanceof MouseEvent ? e.browserEvent.button === 1 : false;\n\t\tconst isDoubleClick = e.browserEvent.detail === 2;\n\t\tconst preserveFocus = (e.browserEvent instanceof KeyboardEvent && typeof (<SelectionKeyboardEvent>e.browserEvent).preserveFocus === 'boolean') ?\n\t\t\t!!(<SelectionKeyboardEvent>e.browserEvent).preserveFocus :\n\t\t\t!isDoubleClick;\n\n\t\tif (this.tree.openOnSingleClick || isDoubleClick || isKeyboardEvent) {\n\t\t\tconst sideBySide = e.browserEvent instanceof MouseEvent && (e.browserEvent.ctrlKey || e.browserEvent.metaKey || e.browserEvent.altKey);\n\t\t\tthis.open(preserveFocus, isDoubleClick || isMiddleClick, sideBySide, e.browserEvent);\n\t\t}\n\t}\n\n\tprivate open(preserveFocus: boolean, pinned: boolean, sideBySide: boolean, browserEvent?: UIEvent): void {\n\t\tthis._onDidOpenResource.fire({\n\t\t\teditorOptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned,\n\t\t\t\trevealIfVisible: true\n\t\t\t},\n\t\t\tsideBySide,\n\t\t\telement: this.tree.getSelection()[0],\n\t\t\tbrowserEvent\n\t\t});\n\t}\n}\n\nfunction createKeyboardNavigationEventFilter(container: HTMLElement, keybindingService: IKeybindingService): IKeyboardNavigationEventFilter {\n\tlet inChord = false;\n\n\treturn event => {\n\t\tif (inChord) {\n\t\t\tinChord = false;\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = keybindingService.softDispatch(event, container);\n\n\t\tif (result && result.enterChord) {\n\t\t\tinChord = true;\n\t\t\treturn false;\n\t\t}\n\n\t\tinChord = false;\n\t\treturn true;\n\t};\n}\n\nexport class WorkbenchObjectTree<T extends NonNullable<any>, TFilterData = void> extends ObjectTree<T, TFilterData> {\n\n\treadonly contextKeyService: IContextKeyService;\n\n\tprotected disposables: IDisposable[];\n\n\tprivate hasSelectionOrFocus: IContextKey<boolean>;\n\tprivate hasDoubleSelection: IContextKey<boolean>;\n\tprivate hasMultiSelection: IContextKey<boolean>;\n\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<any /* TODO@joao */, TFilterData, any>[],\n\t\toptions: IObjectTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tWorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n\n\t\tif (!didBindWorkbenchListAutomaticKeyboardNavigation) {\n\t\t\tWorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n\t\t\tdidBindWorkbenchListAutomaticKeyboardNavigation = true;\n\t\t}\n\n\t\tconst getAutomaticKeyboardNavigation = () => {\n\t\t\t// give priority to the context key value to disable this completely\n\t\t\tlet automaticKeyboardNavigation = contextKeyService.getContextKeyValue<boolean>(WorkbenchListAutomaticKeyboardNavigationKey);\n\n\t\t\tif (automaticKeyboardNavigation) {\n\t\t\t\tautomaticKeyboardNavigation = configurationService.getValue<boolean>(automaticKeyboardNavigationSettingKey);\n\t\t\t}\n\n\t\t\treturn automaticKeyboardNavigation;\n\t\t};\n\n\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n\t\tconst openOnSingleClick = useSingleClickToOpen(configurationService);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(container, delegate, renderers, {\n\t\t\tkeyboardSupport: false,\n\t\t\tstyleController: new DefaultStyleController(getSharedListStyleSheet()),\n\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t...workbenchListOptions,\n\t\t\tindent: configurationService.getValue(treeIndentKey),\n\t\t\tautomaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\tfilterOnType: keyboardNavigation === 'filter',\n\t\t\thorizontalScrolling,\n\t\t\topenOnSingleClick,\n\t\t\tkeyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService)\n\t\t});\n\n\t\tthis.disposables.push(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tthis.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tconst interestingContextKeys = new Set();\n\t\tinterestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n\t\tconst updateKeyboardNavigation = () => {\n\t\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\t\tthis.updateOptions({\n\t\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\t\tfilterOnType: keyboardNavigation === 'filter'\n\t\t\t});\n\t\t};\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService),\n\t\t\tthis.onDidChangeSelection(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.hasMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.hasDoubleSelection.set(selection.length === 2);\n\t\t\t}),\n\t\t\tthis.onDidChangeFocus(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t}),\n\t\t\tconfigurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeIndentKey)) {\n\t\t\t\t\tconst indent = configurationService.getValue<number>(treeIndentKey);\n\t\t\t\t\tthis.updateOptions({ indent });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n\t\t\t\t\tupdateKeyboardNavigation();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(interestingContextKeys)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\taccessibilityService.onDidChangeAccessibilitySupport(() => updateKeyboardNavigation())\n\t\t);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n\nexport class WorkbenchDataTree<TInput, T, TFilterData = void> extends DataTree<TInput, T, TFilterData> {\n\n\treadonly contextKeyService: IContextKeyService;\n\n\tprivate hasSelectionOrFocus: IContextKey<boolean>;\n\tprivate hasDoubleSelection: IContextKey<boolean>;\n\tprivate hasMultiSelection: IContextKey<boolean>;\n\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<any /* TODO@joao */, TFilterData, any>[],\n\t\tdataSource: IDataSource<TInput, T>,\n\t\toptions: IDataTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tWorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n\n\t\tif (!didBindWorkbenchListAutomaticKeyboardNavigation) {\n\t\t\tWorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n\t\t\tdidBindWorkbenchListAutomaticKeyboardNavigation = true;\n\t\t}\n\n\t\tconst getAutomaticKeyboardNavigation = () => {\n\t\t\t// give priority to the context key value to disable this completely\n\t\t\tlet automaticKeyboardNavigation = contextKeyService.getContextKeyValue<boolean>(WorkbenchListAutomaticKeyboardNavigationKey);\n\n\t\t\tif (automaticKeyboardNavigation) {\n\t\t\t\tautomaticKeyboardNavigation = configurationService.getValue<boolean>(automaticKeyboardNavigationSettingKey);\n\t\t\t}\n\n\t\t\treturn automaticKeyboardNavigation;\n\t\t};\n\n\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n\t\tconst openOnSingleClick = useSingleClickToOpen(configurationService);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(container, delegate, renderers, dataSource, {\n\t\t\tkeyboardSupport: false,\n\t\t\tstyleController: new DefaultStyleController(getSharedListStyleSheet()),\n\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t...workbenchListOptions,\n\t\t\tindent: configurationService.getValue(treeIndentKey),\n\t\t\tautomaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\tfilterOnType: keyboardNavigation === 'filter',\n\t\t\thorizontalScrolling,\n\t\t\topenOnSingleClick,\n\t\t\tkeyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService)\n\t\t});\n\n\t\tthis.disposables.push(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tthis.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tconst interestingContextKeys = new Set();\n\t\tinterestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n\t\tconst updateKeyboardNavigation = () => {\n\t\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\t\tthis.updateOptions({\n\t\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\t\tfilterOnType: keyboardNavigation === 'filter'\n\t\t\t});\n\t\t};\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService),\n\t\t\tthis.onDidChangeSelection(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.hasMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.hasDoubleSelection.set(selection.length === 2);\n\t\t\t}),\n\t\t\tthis.onDidChangeFocus(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t}),\n\t\t\tconfigurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeIndentKey)) {\n\t\t\t\t\tconst indent = configurationService.getValue<number>(treeIndentKey);\n\t\t\t\t\tthis.updateOptions({ indent });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n\t\t\t\t\tupdateKeyboardNavigation();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(interestingContextKeys)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\taccessibilityService.onDidChangeAccessibilitySupport(() => updateKeyboardNavigation())\n\t\t);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n}\n\nexport class WorkbenchAsyncDataTree<TInput, T, TFilterData = void> extends AsyncDataTree<TInput, T, TFilterData> {\n\n\treadonly contextKeyService: IContextKeyService;\n\n\tprivate hasSelectionOrFocus: IContextKey<boolean>;\n\tprivate hasDoubleSelection: IContextKey<boolean>;\n\tprivate hasMultiSelection: IContextKey<boolean>;\n\n\tprivate _useAltAsMultipleSelectionModifier: boolean;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<any /* TODO@joao */, TFilterData, any>[],\n\t\tdataSource: IAsyncDataSource<TInput, T>,\n\t\toptions: IAsyncDataTreeOptions<T, TFilterData>,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IListService listService: IListService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService\n\t) {\n\t\tWorkbenchListSupportsKeyboardNavigation.bindTo(contextKeyService);\n\n\t\tif (!didBindWorkbenchListAutomaticKeyboardNavigation) {\n\t\t\tWorkbenchListAutomaticKeyboardNavigation.bindTo(contextKeyService);\n\t\t\tdidBindWorkbenchListAutomaticKeyboardNavigation = true;\n\t\t}\n\n\t\tconst getAutomaticKeyboardNavigation = () => {\n\t\t\t// give priority to the context key value to disable this completely\n\t\t\tlet automaticKeyboardNavigation = contextKeyService.getContextKeyValue<boolean>(WorkbenchListAutomaticKeyboardNavigationKey);\n\n\t\t\tif (automaticKeyboardNavigation) {\n\t\t\t\tautomaticKeyboardNavigation = configurationService.getValue<boolean>(automaticKeyboardNavigationSettingKey);\n\t\t\t}\n\n\t\t\treturn automaticKeyboardNavigation;\n\t\t};\n\n\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\tconst horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : getHorizontalScrollingSetting(configurationService);\n\t\tconst openOnSingleClick = useSingleClickToOpen(configurationService);\n\t\tconst [workbenchListOptions, workbenchListOptionsDisposable] = toWorkbenchListOptions(options, configurationService, keybindingService);\n\n\t\tsuper(container, delegate, renderers, dataSource, {\n\t\t\tkeyboardSupport: false,\n\t\t\tstyleController: new DefaultStyleController(getSharedListStyleSheet()),\n\t\t\t...computeStyles(themeService.getTheme(), defaultListStyles),\n\t\t\t...workbenchListOptions,\n\t\t\tindent: configurationService.getValue<number>(treeIndentKey),\n\t\t\tautomaticKeyboardNavigation: getAutomaticKeyboardNavigation(),\n\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\tfilterOnType: keyboardNavigation === 'filter',\n\t\t\thorizontalScrolling,\n\t\t\topenOnSingleClick,\n\t\t\tkeyboardNavigationEventFilter: createKeyboardNavigationEventFilter(container, keybindingService)\n\t\t});\n\n\t\tthis.disposables.push(workbenchListOptionsDisposable);\n\n\t\tthis.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n\n\t\tconst listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n\t\tlistSupportsMultiSelect.set(!(options.multipleSelectionSupport === false));\n\n\t\tthis.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n\t\tthis.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n\t\tthis.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n\n\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\n\t\tconst interestingContextKeys = new Set();\n\t\tinterestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationKey);\n\t\tconst updateKeyboardNavigation = () => {\n\t\t\tconst accessibilityOn = accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled;\n\t\t\tconst keyboardNavigation = accessibilityOn ? 'simple' : configurationService.getValue<string>(keyboardNavigationSettingKey);\n\t\t\tthis.updateOptions({\n\t\t\t\tsimpleKeyboardNavigation: keyboardNavigation === 'simple',\n\t\t\t\tfilterOnType: keyboardNavigation === 'filter'\n\t\t\t});\n\t\t};\n\n\t\tthis.disposables.push(\n\t\t\tthis.contextKeyService,\n\t\t\t(listService as ListService).register(this),\n\t\t\tattachListStyler(this, themeService),\n\t\t\tthis.onDidChangeSelection(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t\tthis.hasMultiSelection.set(selection.length > 1);\n\t\t\t\tthis.hasDoubleSelection.set(selection.length === 2);\n\t\t\t}),\n\t\t\tthis.onDidChangeFocus(() => {\n\t\t\t\tconst selection = this.getSelection();\n\t\t\t\tconst focus = this.getFocus();\n\n\t\t\t\tthis.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n\t\t\t}),\n\t\t\tconfigurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(openModeSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ openOnSingleClick: useSingleClickToOpen(configurationService) });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n\t\t\t\t\tthis._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(treeIndentKey)) {\n\t\t\t\t\tconst indent = configurationService.getValue<number>(treeIndentKey);\n\t\t\t\t\tthis.updateOptions({ indent });\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(keyboardNavigationSettingKey)) {\n\t\t\t\t\tupdateKeyboardNavigation();\n\t\t\t\t}\n\t\t\t\tif (e.affectsConfiguration(automaticKeyboardNavigationSettingKey)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(interestingContextKeys)) {\n\t\t\t\t\tthis.updateOptions({ automaticKeyboardNavigation: getAutomaticKeyboardNavigation() });\n\t\t\t\t}\n\t\t\t}),\n\t\t\taccessibilityService.onDidChangeAccessibilitySupport(() => updateKeyboardNavigation())\n\t\t);\n\t}\n\n\tget useAltAsMultipleSelectionModifier(): boolean {\n\t\treturn this._useAltAsMultipleSelectionModifier;\n\t}\n}\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconfigurationRegistry.registerConfiguration({\n\t'id': 'workbench',\n\t'order': 7,\n\t'title': localize('workbenchConfigurationTitle', \"Workbench\"),\n\t'type': 'object',\n\t'properties': {\n\t\t[multiSelectModifierSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['ctrlCmd', 'alt'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tlocalize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n\t\t\t\tlocalize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n\t\t\t],\n\t\t\t'default': 'ctrlCmd',\n\t\t\t'description': localize({\n\t\t\t\tkey: 'multiSelectModifier',\n\t\t\t\tcomment: [\n\t\t\t\t\t'- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n\t\t\t\t\t'- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n\t\t\t\t]\n\t\t\t}, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n\t\t},\n\t\t[openModeSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['singleClick', 'doubleClick'],\n\t\t\t'default': 'singleClick',\n\t\t\t'description': localize({\n\t\t\t\tkey: 'openModeModifier',\n\t\t\t\tcomment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n\t\t\t}, \"Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. \")\n\t\t},\n\t\t[horizontalScrollingKey]: {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench.\")\n\t\t},\n\t\t'workbench.tree.horizontalScrolling': {\n\t\t\t'type': 'boolean',\n\t\t\t'default': false,\n\t\t\t'description': localize('tree horizontalScrolling setting', \"Controls whether trees support horizontal scrolling in the workbench.\"),\n\t\t\t'deprecationMessage': localize('deprecated', \"This setting is deprecated, please use '{0}' instead.\", horizontalScrollingKey)\n\t\t},\n\t\t[treeIndentKey]: {\n\t\t\t'type': 'number',\n\t\t\t'default': 8,\n\t\t\tminimum: 0,\n\t\t\tmaximum: 40,\n\t\t\t'description': localize('tree indent setting', \"Controls tree indentation in pixels.\")\n\t\t},\n\t\t[keyboardNavigationSettingKey]: {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['simple', 'highlight', 'filter'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tlocalize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n\t\t\t\tlocalize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n\t\t\t\tlocalize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n\t\t\t],\n\t\t\t'default': 'highlight',\n\t\t\t'description': localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\")\n\t\t},\n\t\t[automaticKeyboardNavigationSettingKey]: {\n\t\t\t'type': 'boolean',\n\t\t\t'default': true,\n\t\t\tmarkdownDescription: localize('automatic keyboard navigation setting', \"Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.\")\n\t\t}\n\t}\n});\n"]}]}