{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts","mtime":1555846338048},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar os = require(\"os\");\nvar path = require(\"vs/base/common/path\");\nvar amd_1 = require(\"vs/base/common/amd\");\nvar errors = require(\"vs/base/common/errors\");\nvar network_1 = require(\"vs/base/common/network\");\nvar objects = require(\"vs/base/common/objects\");\nvar platform = require(\"vs/base/common/platform\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensionPoints_1 = require(\"vs/workbench/services/extensions/node/extensionPoints\");\nvar _SystemExtensionsRoot = null;\nfunction getSystemExtensionsRoot() {\n    return require('vs/../../../../packages/vscode/src/fill/paths').getBuiltInExtensionsDirectory();\n    if (!_SystemExtensionsRoot) {\n        _SystemExtensionsRoot = path.normalize(path.join(amd_1.getPathFromAmdModule(require, ''), '..', 'extensions'));\n    }\n    return _SystemExtensionsRoot;\n}\nvar _ExtraDevSystemExtensionsRoot = null;\nfunction getExtraDevSystemExtensionsRoot() {\n    if (!_ExtraDevSystemExtensionsRoot) {\n        _ExtraDevSystemExtensionsRoot = path.normalize(path.join(amd_1.getPathFromAmdModule(require, ''), '..', '.build', 'builtInExtensions'));\n    }\n    return _ExtraDevSystemExtensionsRoot;\n}\nvar CachedExtensionScanner = /** @class */ (function () {\n    function CachedExtensionScanner(_notificationService, _environmentService, _extensionEnablementService, _windowService) {\n        var _this = this;\n        this._notificationService = _notificationService;\n        this._environmentService = _environmentService;\n        this._extensionEnablementService = _extensionEnablementService;\n        this._windowService = _windowService;\n        this.scannedExtensions = new Promise(function (resolve, reject) {\n            _this._scannedExtensionsResolve = resolve;\n            _this._scannedExtensionsReject = reject;\n        });\n        this.translationConfig = CachedExtensionScanner._readTranslationConfig();\n    }\n    CachedExtensionScanner.prototype.scanSingleExtension = function (path, isBuiltin, log) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var translations, version, commit, devMode, locale, input;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.translationConfig];\n                    case 1:\n                        translations = _a.sent();\n                        version = package_1.default.version;\n                        commit = product_1.default.commit;\n                        devMode = !!process.env['VSCODE_DEV'];\n                        locale = platform.language;\n                        input = new extensionPoints_1.ExtensionScannerInput(version, commit, locale, devMode, path, isBuiltin, false, translations);\n                        return [2 /*return*/, extensionPoints_1.ExtensionScanner.scanSingleExtension(input, log)];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner.prototype.startScanningExtensions = function (log) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var translations, _a, system, user, development, result_1, r_1, err_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.translationConfig];\n                    case 1:\n                        translations = _b.sent();\n                        return [4 /*yield*/, CachedExtensionScanner._scanInstalledExtensions(this._windowService, this._notificationService, this._environmentService, this._extensionEnablementService, log, translations)];\n                    case 2:\n                        _a = _b.sent(), system = _a.system, user = _a.user, development = _a.development;\n                        result_1 = new Map();\n                        system.forEach(function (systemExtension) {\n                            var extensionKey = extensions_1.ExtensionIdentifier.toKey(systemExtension.identifier);\n                            var extension = result_1.get(extensionKey);\n                            if (extension) {\n                                log.warn(systemExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));\n                            }\n                            result_1.set(extensionKey, systemExtension);\n                        });\n                        user.forEach(function (userExtension) {\n                            var extensionKey = extensions_1.ExtensionIdentifier.toKey(userExtension.identifier);\n                            var extension = result_1.get(extensionKey);\n                            if (extension) {\n                                log.warn(userExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));\n                            }\n                            result_1.set(extensionKey, userExtension);\n                        });\n                        development.forEach(function (developedExtension) {\n                            log.info('', nls.localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionLocation.fsPath));\n                            var extensionKey = extensions_1.ExtensionIdentifier.toKey(developedExtension.identifier);\n                            var extension = result_1.get(extensionKey);\n                            if (extension) {\n                                log.warn(developedExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, developedExtension.extensionLocation.fsPath));\n                            }\n                            result_1.set(extensionKey, developedExtension);\n                        });\n                        r_1 = [];\n                        result_1.forEach(function (value) { return r_1.push(value); });\n                        this._scannedExtensionsResolve(r_1);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _b.sent();\n                        this._scannedExtensionsReject(err_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._validateExtensionsCache = function (windowService, notificationService, environmentService, cacheKey, input) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var cacheFolder, cacheFile, expected, _a, _b, _c, _d, cacheContents, actual, err_2;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        cacheFolder = path.join(environmentService.userDataPath, extensions_1.MANIFEST_CACHE_FOLDER);\n                        cacheFile = path.join(cacheFolder, cacheKey);\n                        _b = (_a = JSON).parse;\n                        _d = (_c = JSON).stringify;\n                        return [4 /*yield*/, extensionPoints_1.ExtensionScanner.scanExtensions(input, new NullLogger())];\n                    case 1:\n                        expected = _b.apply(_a, [_d.apply(_c, [_e.sent()])]);\n                        return [4 /*yield*/, this._readExtensionCache(environmentService, cacheKey)];\n                    case 2:\n                        cacheContents = _e.sent();\n                        if (!cacheContents) {\n                            // Cache has been deleted by someone else, which is perfectly fine...\n                            return [2 /*return*/];\n                        }\n                        actual = cacheContents.result;\n                        if (objects.equals(expected, actual)) {\n                            // Cache is valid and running with it is perfectly fine...\n                            return [2 /*return*/];\n                        }\n                        _e.label = 3;\n                    case 3:\n                        _e.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, pfs.del(cacheFile)];\n                    case 4:\n                        _e.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_2 = _e.sent();\n                        errors.onUnexpectedError(err_2);\n                        console.error(err_2);\n                        return [3 /*break*/, 6];\n                    case 6:\n                        notificationService.prompt(notification_1.Severity.Error, nls.localize('extensionCache.invalid', \"Extensions have been modified on disk. Please reload the window.\"), [{\n                                label: nls.localize('reloadWindow', \"Reload Window\"),\n                                run: function () { return windowService.reloadWindow(); }\n                            }]);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._readExtensionCache = function (environmentService, cacheKey) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var cacheFolder, cacheFile, cacheRawContents, err_3;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        cacheFolder = path.join(environmentService.userDataPath, extensions_1.MANIFEST_CACHE_FOLDER);\n                        cacheFile = path.join(cacheFolder, cacheKey);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, pfs.readFile(cacheFile, 'utf8')];\n                    case 2:\n                        cacheRawContents = _a.sent();\n                        return [2 /*return*/, JSON.parse(cacheRawContents)];\n                    case 3:\n                        err_3 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/, null];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._writeExtensionCache = function (environmentService, cacheKey, cacheContents) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var cacheFolder, cacheFile, err_4, err_5;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        cacheFolder = path.join(environmentService.userDataPath, extensions_1.MANIFEST_CACHE_FOLDER);\n                        cacheFile = path.join(cacheFolder, cacheKey);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, pfs.mkdirp(cacheFolder)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_4 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4:\n                        _a.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, pfs.writeFile(cacheFile, JSON.stringify(cacheContents))];\n                    case 5:\n                        _a.sent();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        err_5 = _a.sent();\n                        return [3 /*break*/, 7];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._scanExtensionsWithCache = function (windowService, notificationService, environmentService, cacheKey, input, log) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var folderStat, err_6, cacheContents, counterLogger, result, cacheContents_1;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (input.devMode) {\n                            // Do not cache when running out of sources...\n                            return [2 /*return*/, extensionPoints_1.ExtensionScanner.scanExtensions(input, log)];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, pfs.stat(input.absoluteFolderPath)];\n                    case 2:\n                        folderStat = _a.sent();\n                        input.mtime = folderStat.mtime.getTime();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_6 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [4 /*yield*/, this._readExtensionCache(environmentService, cacheKey)];\n                    case 5:\n                        cacheContents = _a.sent();\n                        if (cacheContents && cacheContents.input && extensionPoints_1.ExtensionScannerInput.equals(cacheContents.input, input)) {\n                            // Validate the cache asynchronously after 5s\n                            setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                var err_7;\n                                return tslib_1.__generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            _a.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._validateExtensionsCache(windowService, notificationService, environmentService, cacheKey, input)];\n                                        case 1:\n                                            _a.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            err_7 = _a.sent();\n                                            errors.onUnexpectedError(err_7);\n                                            return [3 /*break*/, 3];\n                                        case 3: return [2 /*return*/];\n                                    }\n                                });\n                            }); }, 5000);\n                            return [2 /*return*/, cacheContents.result.map(function (extensionDescription) {\n                                    // revive URI object\n                                    extensionDescription.extensionLocation = uri_1.URI.revive(extensionDescription.extensionLocation);\n                                    return extensionDescription;\n                                })];\n                        }\n                        counterLogger = new CounterLogger(log);\n                        return [4 /*yield*/, extensionPoints_1.ExtensionScanner.scanExtensions(input, counterLogger)];\n                    case 6:\n                        result = _a.sent();\n                        if (!(counterLogger.errorCnt === 0)) return [3 /*break*/, 8];\n                        cacheContents_1 = {\n                            input: input,\n                            result: result\n                        };\n                        return [4 /*yield*/, this._writeExtensionCache(environmentService, cacheKey, cacheContents_1)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._readTranslationConfig = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var content, err_8;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!platform.translationsConfigFile) return [3 /*break*/, 4];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, pfs.readFile(platform.translationsConfigFile, 'utf8')];\n                    case 2:\n                        content = _a.sent();\n                        return [2 /*return*/, JSON.parse(content)];\n                    case 3:\n                        err_8 = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/, Object.create(null)];\n                }\n            });\n        });\n    };\n    CachedExtensionScanner._scanInstalledExtensions = function (windowService, notificationService, environmentService, extensionEnablementService, log, translations) {\n        var version = package_1.default.version;\n        var commit = product_1.default.commit;\n        var devMode = !!process.env['VSCODE_DEV'];\n        var locale = platform.language;\n        var builtinExtensions = this._scanExtensionsWithCache(windowService, notificationService, environmentService, extensions_1.BUILTIN_MANIFEST_CACHE_FILE, new extensionPoints_1.ExtensionScannerInput(version, commit, locale, devMode, getSystemExtensionsRoot(), true, false, translations), log);\n        var finalBuiltinExtensions = builtinExtensions;\n        if (devMode) {\n            var builtInExtensionsFilePath = path.normalize(path.join(amd_1.getPathFromAmdModule(require, ''), '..', 'build', 'builtInExtensions.json'));\n            var builtInExtensions = pfs.readFile(builtInExtensionsFilePath, 'utf8')\n                .then(function (raw) { return JSON.parse(raw); });\n            var controlFilePath = path.join(os.homedir(), '.vscode-oss-dev', 'extensions', 'control.json');\n            var controlFile = pfs.readFile(controlFilePath, 'utf8')\n                .then(function (raw) { return JSON.parse(raw); }, function () { return ({}); });\n            var input_1 = new extensionPoints_1.ExtensionScannerInput(version, commit, locale, devMode, getExtraDevSystemExtensionsRoot(), true, false, translations);\n            var extraBuiltinExtensions = Promise.all([builtInExtensions, controlFile])\n                .then(function (_a) {\n                var builtInExtensions = _a[0], control = _a[1];\n                return new ExtraBuiltInExtensionResolver(builtInExtensions, control);\n            })\n                .then(function (resolver) { return extensionPoints_1.ExtensionScanner.scanExtensions(input_1, log, resolver); });\n            finalBuiltinExtensions = extensionPoints_1.ExtensionScanner.mergeBuiltinExtensions(builtinExtensions, extraBuiltinExtensions);\n        }\n        var userExtensions = (extensionEnablementService.allUserExtensionsDisabled || !environmentService.extensionsPath\n            ? Promise.resolve([])\n            : this._scanExtensionsWithCache(windowService, notificationService, environmentService, extensions_1.USER_MANIFEST_CACHE_FILE, new extensionPoints_1.ExtensionScannerInput(version, commit, locale, devMode, environmentService.extensionsPath, false, false, translations), log));\n        // Always load developed extensions while extensions development\n        var developedExtensions = Promise.resolve([]);\n        if (environmentService.isExtensionDevelopment && environmentService.extensionDevelopmentLocationURI && environmentService.extensionDevelopmentLocationURI.scheme === network_1.Schemas.file) {\n            developedExtensions = extensionPoints_1.ExtensionScanner.scanOneOrMultipleExtensions(new extensionPoints_1.ExtensionScannerInput(version, commit, locale, devMode, resources_1.originalFSPath(environmentService.extensionDevelopmentLocationURI), false, true, translations), log);\n        }\n        return Promise.all([finalBuiltinExtensions, userExtensions, developedExtensions]).then(function (extensionDescriptions) {\n            var system = extensionDescriptions[0];\n            var user = extensionDescriptions[1];\n            var development = extensionDescriptions[2];\n            return { system: system, user: user, development: development };\n        }).then(undefined, function (err) {\n            log.error('', err);\n            return { system: [], user: [], development: [] };\n        });\n    };\n    CachedExtensionScanner = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, extensionManagement_1.IExtensionEnablementService),\n        tslib_1.__param(3, windows_1.IWindowService)\n    ], CachedExtensionScanner);\n    return CachedExtensionScanner;\n}());\nexports.CachedExtensionScanner = CachedExtensionScanner;\nvar ExtraBuiltInExtensionResolver = /** @class */ (function () {\n    function ExtraBuiltInExtensionResolver(builtInExtensions, control) {\n        this.builtInExtensions = builtInExtensions;\n        this.control = control;\n    }\n    ExtraBuiltInExtensionResolver.prototype.resolveExtensions = function () {\n        var result = [];\n        for (var _i = 0, _a = this.builtInExtensions; _i < _a.length; _i++) {\n            var ext = _a[_i];\n            var controlState = this.control[ext.name] || 'marketplace';\n            switch (controlState) {\n                case 'disabled':\n                    break;\n                case 'marketplace':\n                    result.push({ name: ext.name, path: path.join(getExtraDevSystemExtensionsRoot(), ext.name) });\n                    break;\n                default:\n                    result.push({ name: ext.name, path: controlState });\n                    break;\n            }\n        }\n        return Promise.resolve(result);\n    };\n    return ExtraBuiltInExtensionResolver;\n}());\nvar CounterLogger = /** @class */ (function () {\n    function CounterLogger(_actual) {\n        this._actual = _actual;\n        this.errorCnt = 0;\n        this.warnCnt = 0;\n        this.infoCnt = 0;\n    }\n    CounterLogger.prototype.error = function (source, message) {\n        this._actual.error(source, message);\n    };\n    CounterLogger.prototype.warn = function (source, message) {\n        this._actual.warn(source, message);\n    };\n    CounterLogger.prototype.info = function (source, message) {\n        this._actual.info(source, message);\n    };\n    return CounterLogger;\n}());\nvar NullLogger = /** @class */ (function () {\n    function NullLogger() {\n    }\n    NullLogger.prototype.error = function (source, message) {\n    };\n    NullLogger.prototype.warn = function (source, message) {\n    };\n    NullLogger.prototype.info = function (source, message) {\n    };\n    return NullLogger;\n}());\nvar Logger = /** @class */ (function () {\n    function Logger(messageHandler) {\n        this._messageHandler = messageHandler;\n    }\n    Logger.prototype.error = function (source, message) {\n        this._messageHandler(notification_1.Severity.Error, source, message);\n    };\n    Logger.prototype.warn = function (source, message) {\n        this._messageHandler(notification_1.Severity.Warning, source, message);\n    };\n    Logger.prototype.info = function (source, message) {\n        this._messageHandler(notification_1.Severity.Info, source, message);\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/cachedExtensionScanner.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as os from 'os';\nimport * as path from 'vs/base/common/path';\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\nimport * as errors from 'vs/base/common/errors';\nimport { Schemas } from 'vs/base/common/network';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport { originalFSPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { BUILTIN_MANIFEST_CACHE_FILE, MANIFEST_CACHE_FOLDER, USER_MANIFEST_CACHE_FILE, ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport pkg from 'vs/platform/product/node/package';\nimport product from 'vs/platform/product/node/product';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ExtensionScanner, ExtensionScannerInput, IExtensionReference, IExtensionResolver, ILog, IRelaxedExtensionDescription, Translations } from 'vs/workbench/services/extensions/node/extensionPoints';\n\ninterface IExtensionCacheData {\n\tinput: ExtensionScannerInput;\n\tresult: IExtensionDescription[];\n}\n\nlet _SystemExtensionsRoot: string | null = null;\nfunction getSystemExtensionsRoot(): string {\n\treturn (require('vs/../../../../packages/vscode/src/fill/paths') as typeof import ('vs/../../../../packages/vscode/src/fill/paths')).getBuiltInExtensionsDirectory();\n\tif (!_SystemExtensionsRoot) {\n\t\t_SystemExtensionsRoot = path.normalize(path.join(getPathFromAmdModule(require, ''), '..', 'extensions'));\n\t}\n\treturn _SystemExtensionsRoot;\n}\n\nlet _ExtraDevSystemExtensionsRoot: string | null = null;\nfunction getExtraDevSystemExtensionsRoot(): string {\n\tif (!_ExtraDevSystemExtensionsRoot) {\n\t\t_ExtraDevSystemExtensionsRoot = path.normalize(path.join(getPathFromAmdModule(require, ''), '..', '.build', 'builtInExtensions'));\n\t}\n\treturn _ExtraDevSystemExtensionsRoot;\n}\n\nexport class CachedExtensionScanner {\n\n\tpublic readonly scannedExtensions: Promise<IExtensionDescription[]>;\n\tprivate _scannedExtensionsResolve: (result: IExtensionDescription[]) => void;\n\tprivate _scannedExtensionsReject: (err: any) => void;\n\tpublic readonly translationConfig: Promise<Translations>;\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IExtensionEnablementService private readonly _extensionEnablementService: IExtensionEnablementService,\n\t\t@IWindowService private readonly _windowService: IWindowService,\n\t) {\n\t\tthis.scannedExtensions = new Promise<IExtensionDescription[]>((resolve, reject) => {\n\t\t\tthis._scannedExtensionsResolve = resolve;\n\t\t\tthis._scannedExtensionsReject = reject;\n\t\t});\n\t\tthis.translationConfig = CachedExtensionScanner._readTranslationConfig();\n\t}\n\n\tpublic async scanSingleExtension(path: string, isBuiltin: boolean, log: ILog): Promise<IExtensionDescription | null> {\n\t\tconst translations = await this.translationConfig;\n\n\t\tconst version = pkg.version;\n\t\tconst commit = product.commit;\n\t\tconst devMode = !!process.env['VSCODE_DEV'];\n\t\tconst locale = platform.language;\n\t\tconst input = new ExtensionScannerInput(version, commit, locale, devMode, path, isBuiltin, false, translations);\n\t\treturn ExtensionScanner.scanSingleExtension(input, log);\n\t}\n\n\tpublic async startScanningExtensions(log: ILog): Promise<void> {\n\t\ttry {\n\t\t\tconst translations = await this.translationConfig;\n\t\t\tconst { system, user, development } = await CachedExtensionScanner._scanInstalledExtensions(this._windowService, this._notificationService, this._environmentService, this._extensionEnablementService, log, translations);\n\n\t\t\tlet result = new Map<string, IExtensionDescription>();\n\t\t\tsystem.forEach((systemExtension) => {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(systemExtension.identifier);\n\t\t\t\tconst extension = result.get(extensionKey);\n\t\t\t\tif (extension) {\n\t\t\t\t\tlog.warn(systemExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));\n\t\t\t\t}\n\t\t\t\tresult.set(extensionKey, systemExtension);\n\t\t\t});\n\t\t\tuser.forEach((userExtension) => {\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(userExtension.identifier);\n\t\t\t\tconst extension = result.get(extensionKey);\n\t\t\t\tif (extension) {\n\t\t\t\t\tlog.warn(userExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));\n\t\t\t\t}\n\t\t\t\tresult.set(extensionKey, userExtension);\n\t\t\t});\n\t\t\tdevelopment.forEach(developedExtension => {\n\t\t\t\tlog.info('', nls.localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionLocation.fsPath));\n\t\t\t\tconst extensionKey = ExtensionIdentifier.toKey(developedExtension.identifier);\n\t\t\t\tconst extension = result.get(extensionKey);\n\t\t\t\tif (extension) {\n\t\t\t\t\tlog.warn(developedExtension.extensionLocation.fsPath, nls.localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, developedExtension.extensionLocation.fsPath));\n\t\t\t\t}\n\t\t\t\tresult.set(extensionKey, developedExtension);\n\t\t\t});\n\t\t\tlet r: IExtensionDescription[] = [];\n\t\t\tresult.forEach((value) => r.push(value));\n\n\t\t\tthis._scannedExtensionsResolve(r);\n\t\t} catch (err) {\n\t\t\tthis._scannedExtensionsReject(err);\n\t\t}\n\t}\n\n\tprivate static async _validateExtensionsCache(windowService: IWindowService, notificationService: INotificationService, environmentService: IEnvironmentService, cacheKey: string, input: ExtensionScannerInput): Promise<void> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\tconst expected = JSON.parse(JSON.stringify(await ExtensionScanner.scanExtensions(input, new NullLogger())));\n\n\t\tconst cacheContents = await this._readExtensionCache(environmentService, cacheKey);\n\t\tif (!cacheContents) {\n\t\t\t// Cache has been deleted by someone else, which is perfectly fine...\n\t\t\treturn;\n\t\t}\n\t\tconst actual = cacheContents.result;\n\n\t\tif (objects.equals(expected, actual)) {\n\t\t\t// Cache is valid and running with it is perfectly fine...\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait pfs.del(cacheFile);\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t\tconsole.error(err);\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Error,\n\t\t\tnls.localize('extensionCache.invalid', \"Extensions have been modified on disk. Please reload the window.\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\trun: () => windowService.reloadWindow()\n\t\t\t}]\n\t\t);\n\t}\n\n\tprivate static async _readExtensionCache(environmentService: IEnvironmentService, cacheKey: string): Promise<IExtensionCacheData | null> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\ttry {\n\t\t\tconst cacheRawContents = await pfs.readFile(cacheFile, 'utf8');\n\t\t\treturn JSON.parse(cacheRawContents);\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static async _writeExtensionCache(environmentService: IEnvironmentService, cacheKey: string, cacheContents: IExtensionCacheData): Promise<void> {\n\t\tconst cacheFolder = path.join(environmentService.userDataPath, MANIFEST_CACHE_FOLDER);\n\t\tconst cacheFile = path.join(cacheFolder, cacheKey);\n\n\t\ttry {\n\t\t\tawait pfs.mkdirp(cacheFolder);\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\ttry {\n\t\t\tawait pfs.writeFile(cacheFile, JSON.stringify(cacheContents));\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\t}\n\n\tprivate static async _scanExtensionsWithCache(windowService: IWindowService, notificationService: INotificationService, environmentService: IEnvironmentService, cacheKey: string, input: ExtensionScannerInput, log: ILog): Promise<IExtensionDescription[]> {\n\t\tif (input.devMode) {\n\t\t\t// Do not cache when running out of sources...\n\t\t\treturn ExtensionScanner.scanExtensions(input, log);\n\t\t}\n\n\t\ttry {\n\t\t\tconst folderStat = await pfs.stat(input.absoluteFolderPath);\n\t\t\tinput.mtime = folderStat.mtime.getTime();\n\t\t} catch (err) {\n\t\t\t// That's ok...\n\t\t}\n\n\t\tconst cacheContents = await this._readExtensionCache(environmentService, cacheKey);\n\t\tif (cacheContents && cacheContents.input && ExtensionScannerInput.equals(cacheContents.input, input)) {\n\t\t\t// Validate the cache asynchronously after 5s\n\t\t\tsetTimeout(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this._validateExtensionsCache(windowService, notificationService, environmentService, cacheKey, input);\n\t\t\t\t} catch (err) {\n\t\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t\treturn cacheContents.result.map((extensionDescription) => {\n\t\t\t\t// revive URI object\n\t\t\t\t(<IRelaxedExtensionDescription>extensionDescription).extensionLocation = URI.revive(extensionDescription.extensionLocation);\n\t\t\t\treturn extensionDescription;\n\t\t\t});\n\t\t}\n\n\t\tconst counterLogger = new CounterLogger(log);\n\t\tconst result = await ExtensionScanner.scanExtensions(input, counterLogger);\n\t\tif (counterLogger.errorCnt === 0) {\n\t\t\t// Nothing bad happened => cache the result\n\t\t\tconst cacheContents: IExtensionCacheData = {\n\t\t\t\tinput: input,\n\t\t\t\tresult: result\n\t\t\t};\n\t\t\tawait this._writeExtensionCache(environmentService, cacheKey, cacheContents);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static async _readTranslationConfig(): Promise<Translations> {\n\t\tif (platform.translationsConfigFile) {\n\t\t\ttry {\n\t\t\t\tconst content = await pfs.readFile(platform.translationsConfigFile, 'utf8');\n\t\t\t\treturn JSON.parse(content) as Translations;\n\t\t\t} catch (err) {\n\t\t\t\t// no problemo\n\t\t\t}\n\t\t}\n\t\treturn Object.create(null);\n\t}\n\n\tprivate static _scanInstalledExtensions(\n\t\twindowService: IWindowService,\n\t\tnotificationService: INotificationService,\n\t\tenvironmentService: IEnvironmentService,\n\t\textensionEnablementService: IExtensionEnablementService,\n\t\tlog: ILog,\n\t\ttranslations: Translations\n\t): Promise<{ system: IExtensionDescription[], user: IExtensionDescription[], development: IExtensionDescription[] }> {\n\n\t\tconst version = pkg.version;\n\t\tconst commit = product.commit;\n\t\tconst devMode = !!process.env['VSCODE_DEV'];\n\t\tconst locale = platform.language;\n\n\t\tconst builtinExtensions = this._scanExtensionsWithCache(\n\t\t\twindowService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\tBUILTIN_MANIFEST_CACHE_FILE,\n\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, getSystemExtensionsRoot(), true, false, translations),\n\t\t\tlog\n\t\t);\n\n\t\tlet finalBuiltinExtensions: Promise<IExtensionDescription[]> = builtinExtensions;\n\n\t\tif (devMode) {\n\t\t\tconst builtInExtensionsFilePath = path.normalize(path.join(getPathFromAmdModule(require, ''), '..', 'build', 'builtInExtensions.json'));\n\t\t\tconst builtInExtensions = pfs.readFile(builtInExtensionsFilePath, 'utf8')\n\t\t\t\t.then<IBuiltInExtension[]>(raw => JSON.parse(raw));\n\n\t\t\tconst controlFilePath = path.join(os.homedir(), '.vscode-oss-dev', 'extensions', 'control.json');\n\t\t\tconst controlFile = pfs.readFile(controlFilePath, 'utf8')\n\t\t\t\t.then<IBuiltInExtensionControl>(raw => JSON.parse(raw), () => ({} as any));\n\n\t\t\tconst input = new ExtensionScannerInput(version, commit, locale, devMode, getExtraDevSystemExtensionsRoot(), true, false, translations);\n\t\t\tconst extraBuiltinExtensions = Promise.all([builtInExtensions, controlFile])\n\t\t\t\t.then(([builtInExtensions, control]) => new ExtraBuiltInExtensionResolver(builtInExtensions, control))\n\t\t\t\t.then(resolver => ExtensionScanner.scanExtensions(input, log, resolver));\n\n\t\t\tfinalBuiltinExtensions = ExtensionScanner.mergeBuiltinExtensions(builtinExtensions, extraBuiltinExtensions);\n\t\t}\n\n\t\tconst userExtensions = (\n\t\t\textensionEnablementService.allUserExtensionsDisabled || !environmentService.extensionsPath\n\t\t\t\t? Promise.resolve([])\n\t\t\t\t: this._scanExtensionsWithCache(\n\t\t\t\t\twindowService,\n\t\t\t\t\tnotificationService,\n\t\t\t\t\tenvironmentService,\n\t\t\t\t\tUSER_MANIFEST_CACHE_FILE,\n\t\t\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, environmentService.extensionsPath, false, false, translations),\n\t\t\t\t\tlog\n\t\t\t\t)\n\t\t);\n\n\t\t// Always load developed extensions while extensions development\n\t\tlet developedExtensions: Promise<IExtensionDescription[]> = Promise.resolve([]);\n\t\tif (environmentService.isExtensionDevelopment && environmentService.extensionDevelopmentLocationURI && environmentService.extensionDevelopmentLocationURI.scheme === Schemas.file) {\n\t\t\tdevelopedExtensions = ExtensionScanner.scanOneOrMultipleExtensions(\n\t\t\t\tnew ExtensionScannerInput(version, commit, locale, devMode, originalFSPath(environmentService.extensionDevelopmentLocationURI), false, true, translations), log\n\t\t\t);\n\t\t}\n\n\t\treturn Promise.all([finalBuiltinExtensions, userExtensions, developedExtensions]).then((extensionDescriptions: IExtensionDescription[][]) => {\n\t\t\tconst system = extensionDescriptions[0];\n\t\t\tconst user = extensionDescriptions[1];\n\t\t\tconst development = extensionDescriptions[2];\n\t\t\treturn { system, user, development };\n\t\t}).then(undefined, err => {\n\t\t\tlog.error('', err);\n\t\t\treturn { system: [], user: [], development: [] };\n\t\t});\n\t}\n}\n\ninterface IBuiltInExtension {\n\tname: string;\n\tversion: string;\n\trepo: string;\n}\n\ninterface IBuiltInExtensionControl {\n\t[name: string]: 'marketplace' | 'disabled' | string;\n}\n\nclass ExtraBuiltInExtensionResolver implements IExtensionResolver {\n\n\tconstructor(private builtInExtensions: IBuiltInExtension[], private control: IBuiltInExtensionControl) { }\n\n\tresolveExtensions(): Promise<IExtensionReference[]> {\n\t\tconst result: IExtensionReference[] = [];\n\n\t\tfor (const ext of this.builtInExtensions) {\n\t\t\tconst controlState = this.control[ext.name] || 'marketplace';\n\n\t\t\tswitch (controlState) {\n\t\t\t\tcase 'disabled':\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'marketplace':\n\t\t\t\t\tresult.push({ name: ext.name, path: path.join(getExtraDevSystemExtensionsRoot(), ext.name) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tresult.push({ name: ext.name, path: controlState });\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nclass CounterLogger implements ILog {\n\n\tpublic errorCnt = 0;\n\tpublic warnCnt = 0;\n\tpublic infoCnt = 0;\n\n\tconstructor(private readonly _actual: ILog) {\n\t}\n\n\tpublic error(source: string, message: string): void {\n\t\tthis._actual.error(source, message);\n\t}\n\n\tpublic warn(source: string, message: string): void {\n\t\tthis._actual.warn(source, message);\n\t}\n\n\tpublic info(source: string, message: string): void {\n\t\tthis._actual.info(source, message);\n\t}\n}\n\nclass NullLogger implements ILog {\n\tpublic error(source: string, message: string): void {\n\t}\n\tpublic warn(source: string, message: string): void {\n\t}\n\tpublic info(source: string, message: string): void {\n\t}\n}\n\nexport class Logger implements ILog {\n\n\tprivate readonly _messageHandler: (severity: Severity, source: string, message: string) => void;\n\n\tconstructor(\n\t\tmessageHandler: (severity: Severity, source: string, message: string) => void\n\t) {\n\t\tthis._messageHandler = messageHandler;\n\t}\n\n\tpublic error(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Error, source, message);\n\t}\n\n\tpublic warn(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Warning, source, message);\n\t}\n\n\tpublic info(source: string, message: string): void {\n\t\tthis._messageHandler(Severity.Info, source, message);\n\t}\n}\n"]}]}