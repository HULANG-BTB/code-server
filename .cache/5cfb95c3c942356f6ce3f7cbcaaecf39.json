{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/constants.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/constants.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.FindInFilesActionId = 'workbench.action.findInFiles';\n    exports.FocusActiveEditorCommandId = 'search.action.focusActiveEditor';\n    exports.FocusSearchFromResults = 'search.action.focusSearchFromResults';\n    exports.OpenMatchToSide = 'search.action.openResultToSide';\n    exports.CancelActionId = 'search.action.cancel';\n    exports.RemoveActionId = 'search.action.remove';\n    exports.CopyPathCommandId = 'search.action.copyPath';\n    exports.CopyMatchCommandId = 'search.action.copyMatch';\n    exports.CopyAllCommandId = 'search.action.copyAll';\n    exports.ClearSearchHistoryCommandId = 'search.action.clearHistory';\n    exports.FocusSearchListCommandID = 'search.action.focusSearchList';\n    exports.ReplaceActionId = 'search.action.replace';\n    exports.ReplaceAllInFileActionId = 'search.action.replaceAllInFile';\n    exports.ReplaceAllInFolderActionId = 'search.action.replaceAllInFolder';\n    exports.CloseReplaceWidgetActionId = 'closeReplaceInFilesWidget';\n    exports.ToggleCaseSensitiveCommandId = 'toggleSearchCaseSensitive';\n    exports.ToggleWholeWordCommandId = 'toggleSearchWholeWord';\n    exports.ToggleRegexCommandId = 'toggleSearchRegex';\n    exports.ToggleSearchViewPositionCommandId = 'search.action.toggleSearchViewPosition';\n    exports.SearchViewVisibleKey = new contextkey_1.RawContextKey('searchViewletVisible', true);\n    exports.SearchViewFocusedKey = new contextkey_1.RawContextKey('searchViewletFocus', false);\n    exports.InputBoxFocusedKey = new contextkey_1.RawContextKey('inputBoxFocus', false);\n    exports.SearchInputBoxFocusedKey = new contextkey_1.RawContextKey('searchInputBoxFocus', false);\n    exports.ReplaceInputBoxFocusedKey = new contextkey_1.RawContextKey('replaceInputBoxFocus', false);\n    exports.PatternIncludesFocusedKey = new contextkey_1.RawContextKey('patternIncludesInputBoxFocus', false);\n    exports.PatternExcludesFocusedKey = new contextkey_1.RawContextKey('patternExcludesInputBoxFocus', false);\n    exports.ReplaceActiveKey = new contextkey_1.RawContextKey('replaceActive', false);\n    exports.HasSearchResults = new contextkey_1.RawContextKey('hasSearchResult', false);\n    exports.FirstMatchFocusKey = new contextkey_1.RawContextKey('firstMatchFocus', false);\n    exports.FileMatchOrMatchFocusKey = new contextkey_1.RawContextKey('fileMatchOrMatchFocus', false); // This is actually, Match or File or Folder\n    exports.FileMatchOrFolderMatchFocusKey = new contextkey_1.RawContextKey('fileMatchOrFolderMatchFocus', false);\n    exports.FileFocusKey = new contextkey_1.RawContextKey('fileMatchFocus', false);\n    exports.FolderFocusKey = new contextkey_1.RawContextKey('folderMatchFocus', false);\n    exports.MatchFocusKey = new contextkey_1.RawContextKey('matchFocus', false);\n});\n",null]}