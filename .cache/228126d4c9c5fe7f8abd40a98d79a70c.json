{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/protocol/src/node/modules/node-pty.ts","dependencies":[{"path":"/home/coding/workspace/packages/protocol/src/node/modules/node-pty.ts","mtime":1555841535686},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"../../../../../lib/vscode/src/typings/node-pty.d.ts\" />\nconst events_1 = require(\"events\");\nconst util_1 = require(\"../../common/util\");\n// tslint:disable completed-docs\n/**\n * Server-side IPty proxy.\n */\nclass NodePtyProcessProxy {\n    constructor(process) {\n        this.process = process;\n        this.emitter = new events_1.EventEmitter();\n        let name = process.process;\n        setTimeout(() => {\n            this.emitter.emit(\"process\", name);\n        }, 1);\n        const timer = setInterval(() => {\n            if (process.process !== name) {\n                name = process.process;\n                this.emitter.emit(\"process\", name);\n            }\n        }, 200);\n        this.process.on(\"exit\", () => clearInterval(timer));\n    }\n    async getPid() {\n        return this.process.pid;\n    }\n    async getProcess() {\n        return this.process.process;\n    }\n    async kill(signal) {\n        this.process.kill(signal);\n    }\n    async resize(columns, rows) {\n        this.process.resize(columns, rows);\n    }\n    async write(data) {\n        this.process.write(data);\n    }\n    async onDone(cb) {\n        this.process.on(\"exit\", cb);\n    }\n    async dispose() {\n        this.process.kill();\n        setTimeout(() => this.process.kill(\"SIGKILL\"), 5000); // Double tap.\n        this.emitter.removeAllListeners();\n    }\n    // tslint:disable-next-line no-any\n    async onEvent(cb) {\n        this.emitter.on(\"process\", (process) => cb(\"process\", process));\n        this.process.on(\"data\", (data) => cb(\"data\", data));\n        this.process.on(\"exit\", (exitCode, signal) => cb(\"exit\", exitCode, signal));\n    }\n}\nexports.NodePtyProcessProxy = NodePtyProcessProxy;\n/**\n * Server-side node-pty proxy.\n */\nclass NodePtyModuleProxy {\n    async spawn(file, args, options) {\n        util_1.preserveEnv(options);\n        return new NodePtyProcessProxy(require(\"node-pty\").spawn(file, args, options));\n    }\n}\nexports.NodePtyModuleProxy = NodePtyModuleProxy;\n",{"version":3,"file":"/home/coding/workspace/packages/protocol/src/node/modules/node-pty.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/protocol/src/node/modules/node-pty.ts"],"names":[],"mappings":"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","sourcesContent":["/// <reference path=\"../../../../../lib/vscode/src/typings/node-pty.d.ts\" />\nimport { EventEmitter } from \"events\";\nimport * as pty from \"node-pty\";\nimport { ServerProxy } from \"../../common/proxy\";\nimport { preserveEnv } from \"../../common/util\";\n\n// tslint:disable completed-docs\n\n/**\n * Server-side IPty proxy.\n */\nexport class NodePtyProcessProxy implements ServerProxy {\n\tprivate readonly emitter = new EventEmitter();\n\n\tpublic constructor(private readonly process: pty.IPty) {\n\t\tlet name = process.process;\n\t\tsetTimeout(() => { // Need to wait for the caller to listen to the event.\n\t\t\tthis.emitter.emit(\"process\", name);\n\t\t}, 1);\n\t\tconst timer = setInterval(() => {\n\t\t\tif (process.process !== name) {\n\t\t\t\tname = process.process;\n\t\t\t\tthis.emitter.emit(\"process\", name);\n\t\t\t}\n\t\t}, 200);\n\n\t\tthis.process.on(\"exit\", () => clearInterval(timer));\n\t}\n\n\tpublic async getPid(): Promise<number> {\n\t\treturn this.process.pid;\n\t}\n\n\tpublic async getProcess(): Promise<string> {\n\t\treturn this.process.process;\n\t}\n\n\tpublic async kill(signal?: string): Promise<void> {\n\t\tthis.process.kill(signal);\n\t}\n\n\tpublic async resize(columns: number, rows: number): Promise<void> {\n\t\tthis.process.resize(columns, rows);\n\t}\n\n\tpublic async write(data: string): Promise<void> {\n\t\tthis.process.write(data);\n\t}\n\n\tpublic async onDone(cb: () => void): Promise<void> {\n\t\tthis.process.on(\"exit\", cb);\n\t}\n\n\tpublic async dispose(): Promise<void> {\n\t\tthis.process.kill();\n\t\tsetTimeout(() => this.process.kill(\"SIGKILL\"), 5000); // Double tap.\n\t\tthis.emitter.removeAllListeners();\n\t}\n\n\t// tslint:disable-next-line no-any\n\tpublic async onEvent(cb: (event: string, ...args: any[]) => void): Promise<void> {\n\t\tthis.emitter.on(\"process\", (process) => cb(\"process\", process));\n\t\tthis.process.on(\"data\", (data) => cb(\"data\", data));\n\t\tthis.process.on(\"exit\", (exitCode, signal) => cb(\"exit\", exitCode, signal));\n\t}\n}\n\n/**\n * Server-side node-pty proxy.\n */\nexport class NodePtyModuleProxy {\n\tpublic async spawn(file: string, args: string[] | string, options: pty.IPtyForkOptions): Promise<NodePtyProcessProxy> {\n\t\tpreserveEnv(options);\n\n\t\treturn new NodePtyProcessProxy(require(\"node-pty\").spawn(file, args, options));\n\t}\n}\n"]}]}