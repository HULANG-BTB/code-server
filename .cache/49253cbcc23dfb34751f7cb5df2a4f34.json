{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/nls\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/map\", \"vs/platform/registry/common/platform\"], function (require, exports, event_1, nls_1, instantiation_1, map_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.TEST_VIEW_CONTAINER_ID = 'workbench.view.extension.test';\n    var Extensions;\n    (function (Extensions) {\n        Extensions.ViewContainersRegistry = 'workbench.registry.view.containers';\n        Extensions.ViewsRegistry = 'workbench.registry.view';\n    })(Extensions = exports.Extensions || (exports.Extensions = {}));\n    class ViewContainer {\n        constructor(id, hideIfEmpty, extensionId) {\n            this.id = id;\n            this.hideIfEmpty = hideIfEmpty;\n            this.extensionId = extensionId;\n        }\n    }\n    exports.ViewContainer = ViewContainer;\n    class ViewContainersRegistryImpl {\n        constructor() {\n            this._onDidRegister = new event_1.Emitter();\n            this.onDidRegister = this._onDidRegister.event;\n            this._onDidDeregister = new event_1.Emitter();\n            this.onDidDeregister = this._onDidDeregister.event;\n            this.viewContainers = new Map();\n        }\n        get all() {\n            return map_1.values(this.viewContainers);\n        }\n        registerViewContainer(id, hideIfEmpty, extensionId) {\n            const existing = this.viewContainers.get(id);\n            if (existing) {\n                return existing;\n            }\n            const viewContainer = new class extends ViewContainer {\n                constructor() {\n                    super(id, !!hideIfEmpty, extensionId);\n                }\n            };\n            this.viewContainers.set(id, viewContainer);\n            this._onDidRegister.fire(viewContainer);\n            return viewContainer;\n        }\n        deregisterViewContainer(viewContainer) {\n            const existing = this.viewContainers.get(viewContainer.id);\n            if (existing) {\n                this.viewContainers.delete(viewContainer.id);\n                this._onDidDeregister.fire(viewContainer);\n            }\n        }\n        get(id) {\n            return this.viewContainers.get(id);\n        }\n    }\n    platform_1.Registry.add(Extensions.ViewContainersRegistry, new ViewContainersRegistryImpl());\n    class ViewsRegistry {\n        constructor() {\n            this._onViewsRegistered = new event_1.Emitter();\n            this.onViewsRegistered = this._onViewsRegistered.event;\n            this._onViewsDeregistered = new event_1.Emitter();\n            this.onViewsDeregistered = this._onViewsDeregistered.event;\n            this._onDidChangeContainer = new event_1.Emitter();\n            this.onDidChangeContainer = this._onDidChangeContainer.event;\n            this._viewContainers = [];\n            this._views = new Map();\n        }\n        registerViews(views, viewContainer) {\n            this.addViews(views, viewContainer);\n            this._onViewsRegistered.fire({ views: views, viewContainer });\n        }\n        deregisterViews(viewDescriptors, viewContainer) {\n            const views = this.removeViews(viewDescriptors, viewContainer);\n            if (views.length) {\n                this._onViewsDeregistered.fire({ views, viewContainer });\n            }\n        }\n        moveViews(viewsToMove, viewContainer) {\n            map_1.keys(this._views).forEach(container => {\n                if (container !== viewContainer) {\n                    const views = this.removeViews(viewsToMove, container);\n                    if (views.length) {\n                        this.addViews(views, viewContainer);\n                        this._onDidChangeContainer.fire({ views, from: container, to: viewContainer });\n                    }\n                }\n            });\n        }\n        getViews(loc) {\n            return this._views.get(loc) || [];\n        }\n        getView(id) {\n            for (const viewContainer of this._viewContainers) {\n                const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];\n                if (viewDescriptor) {\n                    return viewDescriptor;\n                }\n            }\n            return null;\n        }\n        getViewContainer(viewId) {\n            for (const viewContainer of this._viewContainers) {\n                const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];\n                if (viewDescriptor) {\n                    return viewContainer;\n                }\n            }\n            return null;\n        }\n        addViews(viewDescriptors, viewContainer) {\n            let views = this._views.get(viewContainer);\n            if (!views) {\n                views = [];\n                this._views.set(viewContainer, views);\n                this._viewContainers.push(viewContainer);\n            }\n            for (const viewDescriptor of viewDescriptors) {\n                if (views.some(v => v.id === viewDescriptor.id)) {\n                    throw new Error(nls_1.localize('duplicateId', \"A view with id '{0}' is already registered in the container '{1}'\", viewDescriptor.id, viewContainer.id));\n                }\n                views.push(viewDescriptor);\n            }\n        }\n        removeViews(viewDescriptors, viewContainer) {\n            const views = this._views.get(viewContainer);\n            if (!views) {\n                return [];\n            }\n            const viewsToDeregister = [];\n            const remaningViews = [];\n            for (const view of views) {\n                if (viewDescriptors.indexOf(view) === -1) {\n                    remaningViews.push(view);\n                }\n                else {\n                    viewsToDeregister.push(view);\n                }\n            }\n            if (viewsToDeregister.length) {\n                if (remaningViews.length) {\n                    this._views.set(viewContainer, remaningViews);\n                }\n                else {\n                    this._views.delete(viewContainer);\n                    this._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);\n                }\n            }\n            return viewsToDeregister;\n        }\n    }\n    platform_1.Registry.add(Extensions.ViewsRegistry, new ViewsRegistry());\n    exports.IViewsService = instantiation_1.createDecorator('viewsService');\n    var TreeItemCollapsibleState;\n    (function (TreeItemCollapsibleState) {\n        TreeItemCollapsibleState[TreeItemCollapsibleState[\"None\"] = 0] = \"None\";\n        TreeItemCollapsibleState[TreeItemCollapsibleState[\"Collapsed\"] = 1] = \"Collapsed\";\n        TreeItemCollapsibleState[TreeItemCollapsibleState[\"Expanded\"] = 2] = \"Expanded\";\n    })(TreeItemCollapsibleState = exports.TreeItemCollapsibleState || (exports.TreeItemCollapsibleState = {}));\n});\n",null]}