{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar path_1 = require(\"vs/base/common/path\");\nvar snippetParser_1 = require(\"vs/editor/contrib/snippet/snippetParser\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nexports.KnownSnippetVariableNames = Object.freeze({\n    'CURRENT_YEAR': true,\n    'CURRENT_YEAR_SHORT': true,\n    'CURRENT_MONTH': true,\n    'CURRENT_DATE': true,\n    'CURRENT_HOUR': true,\n    'CURRENT_MINUTE': true,\n    'CURRENT_SECOND': true,\n    'CURRENT_DAY_NAME': true,\n    'CURRENT_DAY_NAME_SHORT': true,\n    'CURRENT_MONTH_NAME': true,\n    'CURRENT_MONTH_NAME_SHORT': true,\n    'SELECTION': true,\n    'CLIPBOARD': true,\n    'TM_SELECTED_TEXT': true,\n    'TM_CURRENT_LINE': true,\n    'TM_CURRENT_WORD': true,\n    'TM_LINE_INDEX': true,\n    'TM_LINE_NUMBER': true,\n    'TM_FILENAME': true,\n    'TM_FILENAME_BASE': true,\n    'TM_DIRECTORY': true,\n    'TM_FILEPATH': true,\n    'BLOCK_COMMENT_START': true,\n    'BLOCK_COMMENT_END': true,\n    'LINE_COMMENT': true,\n    'WORKSPACE_NAME': true,\n});\nvar CompositeSnippetVariableResolver = /** @class */ (function () {\n    function CompositeSnippetVariableResolver(_delegates) {\n        this._delegates = _delegates;\n        //\n    }\n    CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\n        for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\n            var delegate = _a[_i];\n            var value = delegate.resolve(variable);\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return undefined;\n    };\n    return CompositeSnippetVariableResolver;\n}());\nexports.CompositeSnippetVariableResolver = CompositeSnippetVariableResolver;\nvar SelectionBasedVariableResolver = /** @class */ (function () {\n    function SelectionBasedVariableResolver(_model, _selection) {\n        this._model = _model;\n        this._selection = _selection;\n        //\n    }\n    SelectionBasedVariableResolver.prototype.resolve = function (variable) {\n        var name = variable.name;\n        if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n            var value = this._model.getValueInRange(this._selection) || undefined;\n            if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n                // Selection is a multiline string which we indentation we now\n                // need to adjust. We compare the indentation of this variable\n                // with the indentation at the editor position and add potential\n                // extra indentation to the value\n                var line = this._model.getLineContent(this._selection.startLineNumber);\n                var lineLeadingWhitespace = strings_1.getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n                var varLeadingWhitespace_1 = lineLeadingWhitespace;\n                variable.snippet.walk(function (marker) {\n                    if (marker === variable) {\n                        return false;\n                    }\n                    if (marker instanceof snippetParser_1.Text) {\n                        varLeadingWhitespace_1 = strings_1.getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\n                    }\n                    return true;\n                });\n                var whitespaceCommonLength_1 = strings_1.commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\n                value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) { return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest; });\n            }\n            return value;\n        }\n        else if (name === 'TM_CURRENT_LINE') {\n            return this._model.getLineContent(this._selection.positionLineNumber);\n        }\n        else if (name === 'TM_CURRENT_WORD') {\n            var info = this._model.getWordAtPosition({\n                lineNumber: this._selection.positionLineNumber,\n                column: this._selection.positionColumn\n            });\n            return info && info.word || undefined;\n        }\n        else if (name === 'TM_LINE_INDEX') {\n            return String(this._selection.positionLineNumber - 1);\n        }\n        else if (name === 'TM_LINE_NUMBER') {\n            return String(this._selection.positionLineNumber);\n        }\n        return undefined;\n    };\n    return SelectionBasedVariableResolver;\n}());\nexports.SelectionBasedVariableResolver = SelectionBasedVariableResolver;\nvar ModelBasedVariableResolver = /** @class */ (function () {\n    function ModelBasedVariableResolver(_model) {\n        this._model = _model;\n        //\n    }\n    ModelBasedVariableResolver.prototype.resolve = function (variable) {\n        var name = variable.name;\n        if (name === 'TM_FILENAME') {\n            return path_1.basename(this._model.uri.fsPath);\n        }\n        else if (name === 'TM_FILENAME_BASE') {\n            var name_1 = path_1.basename(this._model.uri.fsPath);\n            var idx = name_1.lastIndexOf('.');\n            if (idx <= 0) {\n                return name_1;\n            }\n            else {\n                return name_1.slice(0, idx);\n            }\n        }\n        else if (name === 'TM_DIRECTORY') {\n            var dir = path_1.dirname(this._model.uri.fsPath);\n            return dir !== '.' ? dir : '';\n        }\n        else if (name === 'TM_FILEPATH') {\n            return this._model.uri.fsPath;\n        }\n        return undefined;\n    };\n    return ModelBasedVariableResolver;\n}());\nexports.ModelBasedVariableResolver = ModelBasedVariableResolver;\nvar ClipboardBasedVariableResolver = /** @class */ (function () {\n    function ClipboardBasedVariableResolver(_clipboardService, _selectionIdx, _selectionCount) {\n        this._clipboardService = _clipboardService;\n        this._selectionIdx = _selectionIdx;\n        this._selectionCount = _selectionCount;\n        //\n    }\n    ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\n        if (variable.name !== 'CLIPBOARD' || !this._clipboardService) {\n            return undefined;\n        }\n        var text = this._clipboardService.readText();\n        if (!text) {\n            return undefined;\n        }\n        var lines = text.split(/\\r\\n|\\n|\\r/).filter(function (s) { return !strings_1.isFalsyOrWhitespace(s); });\n        if (lines.length === this._selectionCount) {\n            return lines[this._selectionIdx];\n        }\n        else {\n            return text;\n        }\n    };\n    return ClipboardBasedVariableResolver;\n}());\nexports.ClipboardBasedVariableResolver = ClipboardBasedVariableResolver;\nvar CommentBasedVariableResolver = /** @class */ (function () {\n    function CommentBasedVariableResolver(_model) {\n        this._model = _model;\n        //\n    }\n    CommentBasedVariableResolver.prototype.resolve = function (variable) {\n        var name = variable.name;\n        var language = this._model.getLanguageIdentifier();\n        var config = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getComments(language.id);\n        if (!config) {\n            return undefined;\n        }\n        if (name === 'LINE_COMMENT') {\n            return config.lineCommentToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_START') {\n            return config.blockCommentStartToken || undefined;\n        }\n        else if (name === 'BLOCK_COMMENT_END') {\n            return config.blockCommentEndToken || undefined;\n        }\n        return undefined;\n    };\n    return CommentBasedVariableResolver;\n}());\nexports.CommentBasedVariableResolver = CommentBasedVariableResolver;\nvar TimeBasedVariableResolver = /** @class */ (function () {\n    function TimeBasedVariableResolver() {\n    }\n    TimeBasedVariableResolver.prototype.resolve = function (variable) {\n        var name = variable.name;\n        if (name === 'CURRENT_YEAR') {\n            return String(new Date().getFullYear());\n        }\n        else if (name === 'CURRENT_YEAR_SHORT') {\n            return String(new Date().getFullYear()).slice(-2);\n        }\n        else if (name === 'CURRENT_MONTH') {\n            return strings_1.pad((new Date().getMonth().valueOf() + 1), 2);\n        }\n        else if (name === 'CURRENT_DATE') {\n            return strings_1.pad(new Date().getDate().valueOf(), 2);\n        }\n        else if (name === 'CURRENT_HOUR') {\n            return strings_1.pad(new Date().getHours().valueOf(), 2);\n        }\n        else if (name === 'CURRENT_MINUTE') {\n            return strings_1.pad(new Date().getMinutes().valueOf(), 2);\n        }\n        else if (name === 'CURRENT_SECOND') {\n            return strings_1.pad(new Date().getSeconds().valueOf(), 2);\n        }\n        else if (name === 'CURRENT_DAY_NAME') {\n            return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n        }\n        else if (name === 'CURRENT_DAY_NAME_SHORT') {\n            return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME') {\n            return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n        }\n        else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n            return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n        }\n        return undefined;\n    };\n    TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n    TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n    TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n    TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n    return TimeBasedVariableResolver;\n}());\nexports.TimeBasedVariableResolver = TimeBasedVariableResolver;\nvar WorkspaceBasedVariableResolver = /** @class */ (function () {\n    function WorkspaceBasedVariableResolver(_workspaceService) {\n        this._workspaceService = _workspaceService;\n        //\n    }\n    WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\n        if (variable.name !== 'WORKSPACE_NAME' || !this._workspaceService) {\n            return undefined;\n        }\n        var workspaceIdentifier = workspaces_1.toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n        if (!workspaceIdentifier) {\n            return undefined;\n        }\n        if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n            return path_1.basename(workspaceIdentifier.path);\n        }\n        var filename = path_1.basename(workspaceIdentifier.configPath.path);\n        return filename.substr(0, filename.length - workspaces_1.WORKSPACE_EXTENSION.length - 1);\n    };\n    return WorkspaceBasedVariableResolver;\n}());\nexports.WorkspaceBasedVariableResolver = WorkspaceBasedVariableResolver;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { basename, dirname } from 'vs/base/common/path';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { VariableResolver, Variable, Text } from 'vs/editor/contrib/snippet/snippetParser';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad } from 'vs/base/common/strings';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from 'vs/platform/workspaces/common/workspaces';\n\nexport const KnownSnippetVariableNames = Object.freeze({\n\t'CURRENT_YEAR': true,\n\t'CURRENT_YEAR_SHORT': true,\n\t'CURRENT_MONTH': true,\n\t'CURRENT_DATE': true,\n\t'CURRENT_HOUR': true,\n\t'CURRENT_MINUTE': true,\n\t'CURRENT_SECOND': true,\n\t'CURRENT_DAY_NAME': true,\n\t'CURRENT_DAY_NAME_SHORT': true,\n\t'CURRENT_MONTH_NAME': true,\n\t'CURRENT_MONTH_NAME_SHORT': true,\n\t'SELECTION': true,\n\t'CLIPBOARD': true,\n\t'TM_SELECTED_TEXT': true,\n\t'TM_CURRENT_LINE': true,\n\t'TM_CURRENT_WORD': true,\n\t'TM_LINE_INDEX': true,\n\t'TM_LINE_NUMBER': true,\n\t'TM_FILENAME': true,\n\t'TM_FILENAME_BASE': true,\n\t'TM_DIRECTORY': true,\n\t'TM_FILEPATH': true,\n\t'BLOCK_COMMENT_START': true,\n\t'BLOCK_COMMENT_END': true,\n\t'LINE_COMMENT': true,\n\t'WORKSPACE_NAME': true,\n});\n\nexport class CompositeSnippetVariableResolver implements VariableResolver {\n\n\tconstructor(private readonly _delegates: VariableResolver[]) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tfor (const delegate of this._delegates) {\n\t\t\tlet value = delegate.resolve(variable);\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class SelectionBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _selection: Selection\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\n\t\tconst { name } = variable;\n\n\t\tif (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n\t\t\tlet value = this._model.getValueInRange(this._selection) || undefined;\n\t\t\tif (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n\t\t\t\t// Selection is a multiline string which we indentation we now\n\t\t\t\t// need to adjust. We compare the indentation of this variable\n\t\t\t\t// with the indentation at the editor position and add potential\n\t\t\t\t// extra indentation to the value\n\n\t\t\t\tconst line = this._model.getLineContent(this._selection.startLineNumber);\n\t\t\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n\n\t\t\t\tlet varLeadingWhitespace = lineLeadingWhitespace;\n\t\t\t\tvariable.snippet.walk(marker => {\n\t\t\t\t\tif (marker === variable) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif (marker instanceof Text) {\n\t\t\t\t\t\tvarLeadingWhitespace = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop()!);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\tconst whitespaceCommonLength = commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n\n\t\t\t\tvalue = value.replace(\n\t\t\t\t\t/(\\r\\n|\\r|\\n)(.*)/g,\n\t\t\t\t\t(m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn value;\n\n\t\t} else if (name === 'TM_CURRENT_LINE') {\n\t\t\treturn this._model.getLineContent(this._selection.positionLineNumber);\n\n\t\t} else if (name === 'TM_CURRENT_WORD') {\n\t\t\tconst info = this._model.getWordAtPosition({\n\t\t\t\tlineNumber: this._selection.positionLineNumber,\n\t\t\t\tcolumn: this._selection.positionColumn\n\t\t\t});\n\t\t\treturn info && info.word || undefined;\n\n\t\t} else if (name === 'TM_LINE_INDEX') {\n\t\t\treturn String(this._selection.positionLineNumber - 1);\n\n\t\t} else if (name === 'TM_LINE_NUMBER') {\n\t\t\treturn String(this._selection.positionLineNumber);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ModelBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\n\t\tconst { name } = variable;\n\n\t\tif (name === 'TM_FILENAME') {\n\t\t\treturn basename(this._model.uri.fsPath);\n\n\t\t} else if (name === 'TM_FILENAME_BASE') {\n\t\t\tconst name = basename(this._model.uri.fsPath);\n\t\t\tconst idx = name.lastIndexOf('.');\n\t\t\tif (idx <= 0) {\n\t\t\t\treturn name;\n\t\t\t} else {\n\t\t\t\treturn name.slice(0, idx);\n\t\t\t}\n\n\t\t} else if (name === 'TM_DIRECTORY') {\n\t\t\tconst dir = dirname(this._model.uri.fsPath);\n\t\t\treturn dir !== '.' ? dir : '';\n\n\t\t} else if (name === 'TM_FILEPATH') {\n\t\t\treturn this._model.uri.fsPath;\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class ClipboardBasedVariableResolver implements VariableResolver {\n\n\tconstructor(\n\t\tprivate readonly _clipboardService: IClipboardService,\n\t\tprivate readonly _selectionIdx: number,\n\t\tprivate readonly _selectionCount: number\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (variable.name !== 'CLIPBOARD' || !this._clipboardService) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst text = this._clipboardService.readText();\n\t\tif (!text) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst lines = text.split(/\\r\\n|\\n|\\r/).filter(s => !isFalsyOrWhitespace(s));\n\t\tif (lines.length === this._selectionCount) {\n\t\t\treturn lines[this._selectionIdx];\n\t\t} else {\n\t\t\treturn text;\n\t\t}\n\t}\n}\nexport class CommentBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _model: ITextModel\n\t) {\n\t\t//\n\t}\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\t\tconst language = this._model.getLanguageIdentifier();\n\t\tconst config = LanguageConfigurationRegistry.getComments(language.id);\n\t\tif (!config) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (name === 'LINE_COMMENT') {\n\t\t\treturn config.lineCommentToken || undefined;\n\t\t} else if (name === 'BLOCK_COMMENT_START') {\n\t\t\treturn config.blockCommentStartToken || undefined;\n\t\t} else if (name === 'BLOCK_COMMENT_END') {\n\t\t\treturn config.blockCommentEndToken || undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n}\nexport class TimeBasedVariableResolver implements VariableResolver {\n\n\tprivate static readonly dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n\tprivate static readonly dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n\tprivate static readonly monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n\tprivate static readonly monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n\n\tresolve(variable: Variable): string | undefined {\n\t\tconst { name } = variable;\n\n\t\tif (name === 'CURRENT_YEAR') {\n\t\t\treturn String(new Date().getFullYear());\n\t\t} else if (name === 'CURRENT_YEAR_SHORT') {\n\t\t\treturn String(new Date().getFullYear()).slice(-2);\n\t\t} else if (name === 'CURRENT_MONTH') {\n\t\t\treturn pad((new Date().getMonth().valueOf() + 1), 2);\n\t\t} else if (name === 'CURRENT_DATE') {\n\t\t\treturn pad(new Date().getDate().valueOf(), 2);\n\t\t} else if (name === 'CURRENT_HOUR') {\n\t\t\treturn pad(new Date().getHours().valueOf(), 2);\n\t\t} else if (name === 'CURRENT_MINUTE') {\n\t\t\treturn pad(new Date().getMinutes().valueOf(), 2);\n\t\t} else if (name === 'CURRENT_SECOND') {\n\t\t\treturn pad(new Date().getSeconds().valueOf(), 2);\n\t\t} else if (name === 'CURRENT_DAY_NAME') {\n\t\t\treturn TimeBasedVariableResolver.dayNames[new Date().getDay()];\n\t\t} else if (name === 'CURRENT_DAY_NAME_SHORT') {\n\t\t\treturn TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n\t\t} else if (name === 'CURRENT_MONTH_NAME') {\n\t\t\treturn TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n\t\t} else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n\t\t\treturn TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class WorkspaceBasedVariableResolver implements VariableResolver {\n\tconstructor(\n\t\tprivate readonly _workspaceService: IWorkspaceContextService,\n\t) {\n\t\t//\n\t}\n\n\tresolve(variable: Variable): string | undefined {\n\t\tif (variable.name !== 'WORKSPACE_NAME' || !this._workspaceService) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n\t\tif (!workspaceIdentifier) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn basename(workspaceIdentifier.path);\n\t\t}\n\n\t\tconst filename = basename(workspaceIdentifier.configPath.path);\n\t\treturn filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n\t}\n}"]}]}