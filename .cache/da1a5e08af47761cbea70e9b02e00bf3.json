{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar marshalling_1 = require(\"vs/base/common/marshalling\");\nvar MainThreadCommands = /** @class */ (function () {\n    function MainThreadCommands(extHostContext, _commandService) {\n        var _this = this;\n        this._commandService = _commandService;\n        this._disposables = new Map();\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostCommands);\n        this._generateCommandsDocumentationRegistration = commands_1.CommandsRegistry.registerCommand('_generateCommandsDocumentation', function () { return _this._generateCommandsDocumentation(); });\n    }\n    MainThreadCommands.prototype.dispose = function () {\n        this._disposables.forEach(function (value) { return value.dispose(); });\n        this._disposables.clear();\n        this._generateCommandsDocumentationRegistration.dispose();\n    };\n    MainThreadCommands.prototype._generateCommandsDocumentation = function () {\n        return this._proxy.$getContributedCommandHandlerDescriptions().then(function (result) {\n            // add local commands\n            var commands = commands_1.CommandsRegistry.getCommands();\n            for (var id in commands) {\n                var description = commands[id].description;\n                if (description) {\n                    result[id] = description;\n                }\n            }\n            // print all as markdown\n            var all = [];\n            for (var id in result) {\n                all.push('`' + id + '` - ' + _generateMarkdown(result[id]));\n            }\n            console.log(all.join('\\n'));\n        });\n    };\n    MainThreadCommands.prototype.$registerCommand = function (id) {\n        var _this = this;\n        this._disposables.set(id, commands_1.CommandsRegistry.registerCommand(id, function (accessor) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var _a;\n            return (_a = _this._proxy).$executeContributedCommand.apply(_a, [id].concat(args)).then(function (result) {\n                return marshalling_1.revive(result, 0);\n            });\n        }));\n    };\n    MainThreadCommands.prototype.$unregisterCommand = function (id) {\n        var command = this._disposables.get(id);\n        if (command) {\n            command.dispose();\n            this._disposables.delete(id);\n        }\n    };\n    MainThreadCommands.prototype.$executeCommand = function (id, args) {\n        var _a;\n        for (var i = 0; i < args.length; i++) {\n            args[i] = marshalling_1.revive(args[i], 0);\n        }\n        return (_a = this._commandService).executeCommand.apply(_a, [id].concat(args));\n    };\n    MainThreadCommands.prototype.$getCommands = function () {\n        return Promise.resolve(Object.keys(commands_1.CommandsRegistry.getCommands()));\n    };\n    MainThreadCommands = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadCommands),\n        tslib_1.__param(1, commands_1.ICommandService)\n    ], MainThreadCommands);\n    return MainThreadCommands;\n}());\nexports.MainThreadCommands = MainThreadCommands;\n// --- command doc\nfunction _generateMarkdown(description) {\n    if (typeof description === 'string') {\n        return description;\n    }\n    else {\n        var parts = [description.description];\n        parts.push('\\n\\n');\n        if (description.args) {\n            for (var _i = 0, _a = description.args; _i < _a.length; _i++) {\n                var arg = _a[_i];\n                parts.push(\"* _\" + arg.name + \"_ - \" + (arg.description || '') + \"\\n\");\n            }\n        }\n        if (description.returns) {\n            parts.push(\"* _(returns)_ - \" + description.returns);\n        }\n        parts.push('\\n\\n');\n        return parts.join('');\n    }\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadCommands.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAAqH;AAErH,+DAAyI;AACzI,6EAAgF;AAChF,0DAAoD;AAGpD;IAMC,4BACC,cAA+B,EACG,eAAgC;QAFnE,iBAOC;QALkC,oBAAe,GAAf,eAAe,CAAiB;QANlD,iBAAY,GAAG,IAAI,GAAG,EAAuB,CAAC;QAQ9D,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,eAAe,CAAC,CAAC;QAEtE,IAAI,CAAC,0CAA0C,GAAG,2BAAgB,CAAC,eAAe,CAAC,gCAAgC,EAAE,cAAM,OAAA,KAAI,CAAC,8BAA8B,EAAE,EAArC,CAAqC,CAAC,CAAC;IACnK,CAAC;IAED,oCAAO,GAAP;QACC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,OAAO,EAAE,EAAf,CAAe,CAAC,CAAC;QACpD,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;QAE1B,IAAI,CAAC,0CAA0C,CAAC,OAAO,EAAE,CAAC;IAC3D,CAAC;IAEO,2DAA8B,GAAtC;QACC,OAAO,IAAI,CAAC,MAAM,CAAC,yCAAyC,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;YACzE,qBAAqB;YACrB,IAAM,QAAQ,GAAG,2BAAgB,CAAC,WAAW,EAAE,CAAC;YAChD,KAAK,IAAI,EAAE,IAAI,QAAQ,EAAE;gBAClB,IAAA,sCAAW,CAAkB;gBACnC,IAAI,WAAW,EAAE;oBAChB,MAAM,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;iBACzB;aACD;YAED,wBAAwB;YACxB,IAAM,GAAG,GAAa,EAAE,CAAC;YACzB,KAAK,IAAI,EAAE,IAAI,MAAM,EAAE;gBACtB,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,GAAG,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC5D;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,6CAAgB,GAAhB,UAAiB,EAAU;QAA3B,iBASC;QARA,IAAI,CAAC,YAAY,CAAC,GAAG,CACpB,EAAE,EACF,2BAAgB,CAAC,eAAe,CAAC,EAAE,EAAE,UAAC,QAAQ;YAAE,cAAO;iBAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;gBAAP,6BAAO;;;YACtD,OAAO,CAAA,KAAA,KAAI,CAAC,MAAM,CAAA,CAAC,0BAA0B,YAAC,EAAE,SAAK,IAAI,GAAE,IAAI,CAAC,UAAA,MAAM;gBACrE,OAAO,oBAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CACF,CAAC;IACH,CAAC;IAED,+CAAkB,GAAlB,UAAmB,EAAU;QAC5B,IAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC1C,IAAI,OAAO,EAAE;YACZ,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7B;IACF,CAAC;IAED,4CAAe,GAAf,UAAmB,EAAU,EAAE,IAAW;;QACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,IAAI,CAAC,CAAC,CAAC,GAAG,oBAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC7B;QACD,OAAO,CAAA,KAAA,IAAI,CAAC,eAAe,CAAA,CAAC,cAAc,YAAI,EAAE,SAAK,IAAI,GAAE;IAC5D,CAAC;IAED,yCAAY,GAAZ;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,2BAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;IAtEW,kBAAkB;QAD9B,uCAAoB,CAAC,8BAAW,CAAC,kBAAkB,CAAC;QASlD,mBAAA,0BAAe,CAAA;OARL,kBAAkB,CAuE9B;IAAD,yBAAC;CAAA,AAvED,IAuEC;AAvEY,gDAAkB;AAyE/B,kBAAkB;AAElB,SAAS,iBAAiB,CAAC,WAAgD;IAC1E,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;QACpC,OAAO,WAAW,CAAC;KACnB;SAAM;QACN,IAAM,KAAK,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACxC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,IAAI,WAAW,CAAC,IAAI,EAAE;YACrB,KAAgB,UAAgB,EAAhB,KAAA,WAAW,CAAC,IAAI,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;gBAA7B,IAAI,GAAG,SAAA;gBACX,KAAK,CAAC,IAAI,CAAC,QAAM,GAAG,CAAC,IAAI,aAAO,GAAG,CAAC,WAAW,IAAI,EAAE,QAAI,CAAC,CAAC;aAC3D;SACD;QACD,IAAI,WAAW,CAAC,OAAO,EAAE;YACxB,KAAK,CAAC,IAAI,CAAC,qBAAmB,WAAW,CAAC,OAAS,CAAC,CAAC;SACrD;QACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACtB;AACF,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICommandService, CommandsRegistry, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainThreadCommandsShape, ExtHostCommandsShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { revive } from 'vs/base/common/marshalling';\n\n@extHostNamedCustomer(MainContext.MainThreadCommands)\nexport class MainThreadCommands implements MainThreadCommandsShape {\n\n\tprivate readonly _disposables = new Map<string, IDisposable>();\n\tprivate readonly _generateCommandsDocumentationRegistration: IDisposable;\n\tprivate readonly _proxy: ExtHostCommandsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostCommands);\n\n\t\tthis._generateCommandsDocumentationRegistration = CommandsRegistry.registerCommand('_generateCommandsDocumentation', () => this._generateCommandsDocumentation());\n\t}\n\n\tdispose() {\n\t\tthis._disposables.forEach(value => value.dispose());\n\t\tthis._disposables.clear();\n\n\t\tthis._generateCommandsDocumentationRegistration.dispose();\n\t}\n\n\tprivate _generateCommandsDocumentation(): Promise<void> {\n\t\treturn this._proxy.$getContributedCommandHandlerDescriptions().then(result => {\n\t\t\t// add local commands\n\t\t\tconst commands = CommandsRegistry.getCommands();\n\t\t\tfor (let id in commands) {\n\t\t\t\tlet { description } = commands[id];\n\t\t\t\tif (description) {\n\t\t\t\t\tresult[id] = description;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// print all as markdown\n\t\t\tconst all: string[] = [];\n\t\t\tfor (let id in result) {\n\t\t\t\tall.push('`' + id + '` - ' + _generateMarkdown(result[id]));\n\t\t\t}\n\t\t\tconsole.log(all.join('\\n'));\n\t\t});\n\t}\n\n\t$registerCommand(id: string): void {\n\t\tthis._disposables.set(\n\t\t\tid,\n\t\t\tCommandsRegistry.registerCommand(id, (accessor, ...args) => {\n\t\t\t\treturn this._proxy.$executeContributedCommand(id, ...args).then(result => {\n\t\t\t\t\treturn revive(result, 0);\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n\n\t$unregisterCommand(id: string): void {\n\t\tconst command = this._disposables.get(id);\n\t\tif (command) {\n\t\t\tcommand.dispose();\n\t\t\tthis._disposables.delete(id);\n\t\t}\n\t}\n\n\t$executeCommand<T>(id: string, args: any[]): Promise<T | undefined> {\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\targs[i] = revive(args[i], 0);\n\t\t}\n\t\treturn this._commandService.executeCommand<T>(id, ...args);\n\t}\n\n\t$getCommands(): Promise<string[]> {\n\t\treturn Promise.resolve(Object.keys(CommandsRegistry.getCommands()));\n\t}\n}\n\n// --- command doc\n\nfunction _generateMarkdown(description: string | ICommandHandlerDescription): string {\n\tif (typeof description === 'string') {\n\t\treturn description;\n\t} else {\n\t\tconst parts = [description.description];\n\t\tparts.push('\\n\\n');\n\t\tif (description.args) {\n\t\t\tfor (let arg of description.args) {\n\t\t\t\tparts.push(`* _${arg.name}_ - ${arg.description || ''}\\n`);\n\t\t\t}\n\t\t}\n\t\tif (description.returns) {\n\t\t\tparts.push(`* _(returns)_ - ${description.returns}`);\n\t\t}\n\t\tparts.push('\\n\\n');\n\t\treturn parts.join('');\n\t}\n}\n"]}]}