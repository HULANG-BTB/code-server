{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar suggest_1 = require(\"vs/editor/contrib/suggest/suggest\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar snippetSession_1 = require(\"./snippetSession\");\nvar editorState_1 = require(\"vs/editor/browser/core/editorState\");\nvar SnippetController2 = /** @class */ (function () {\n    function SnippetController2(_editor, _logService, contextKeyService) {\n        this._editor = _editor;\n        this._logService = _logService;\n        this._snippetListener = [];\n        this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    SnippetController2.get = function (editor) {\n        return editor.getContribution('snippetController2');\n    };\n    SnippetController2.prototype.dispose = function () {\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        lifecycle_1.dispose(this._session);\n    };\n    SnippetController2.prototype.getId = function () {\n        return 'snippetController2';\n    };\n    SnippetController2.prototype.insert = function (template, overwriteBefore, overwriteAfter, undoStopBefore, undoStopAfter, adjustWhitespace) {\n        if (overwriteBefore === void 0) { overwriteBefore = 0; }\n        if (overwriteAfter === void 0) { overwriteAfter = 0; }\n        if (undoStopBefore === void 0) { undoStopBefore = true; }\n        if (undoStopAfter === void 0) { undoStopAfter = true; }\n        if (adjustWhitespace === void 0) { adjustWhitespace = true; }\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, overwriteBefore, overwriteAfter, undoStopBefore, undoStopAfter, adjustWhitespace);\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    };\n    SnippetController2.prototype._doInsert = function (template, overwriteBefore, overwriteAfter, undoStopBefore, undoStopAfter, adjustWhitespace) {\n        var _this = this;\n        if (overwriteBefore === void 0) { overwriteBefore = 0; }\n        if (overwriteAfter === void 0) { overwriteAfter = 0; }\n        if (undoStopBefore === void 0) { undoStopBefore = true; }\n        if (undoStopAfter === void 0) { undoStopAfter = true; }\n        if (adjustWhitespace === void 0) { adjustWhitespace = true; }\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener = lifecycle_1.dispose(this._snippetListener);\n        if (undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new snippetSession_1.SnippetSession(this._editor, template, overwriteBefore, overwriteAfter, adjustWhitespace);\n            this._session.insert();\n        }\n        else {\n            this._session.merge(template, overwriteBefore, overwriteAfter, adjustWhitespace);\n        }\n        if (undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        this._updateState();\n        // we listen on model and selection changes. usually\n        // both events come in together and this is to prevent\n        // that we don't call _updateState twice.\n        var state;\n        var dedupedUpdateState = function () {\n            if (!state || !state.validate(_this._editor)) {\n                _this._updateState();\n                state = new editorState_1.EditorState(_this._editor, editorState_1.CodeEditorStateFlag.Selection | editorState_1.CodeEditorStateFlag.Value);\n            }\n        };\n        this._snippetListener = [\n            this._editor.onDidChangeModelContent(function (e) {\n                if (e.isFlush) {\n                    _this.cancel();\n                }\n                else {\n                    setTimeout(dedupedUpdateState, 0);\n                }\n            }),\n            this._editor.onDidChangeCursorSelection(dedupedUpdateState),\n            this._editor.onDidChangeModel(function () { return _this.cancel(); }),\n        ];\n    };\n    SnippetController2.prototype._updateState = function () {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    };\n    SnippetController2.prototype._handleChoice = function () {\n        var _this = this;\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        var choice = this._session.choice;\n        if (!choice) {\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== choice) {\n            this._currentChoice = choice;\n            this._editor.setSelections(this._editor.getSelections()\n                .map(function (s) { return selection_1.Selection.fromPositions(s.getStartPosition()); }));\n            var first_1 = choice.options[0];\n            suggest_1.showSimpleSuggestions(this._editor, choice.options.map(function (option, i) {\n                // let before = choice.options.slice(0, i);\n                // let after = choice.options.slice(i);\n                return {\n                    kind: modes_1.CompletionItemKind.Value,\n                    label: option.value,\n                    insertText: option.value,\n                    // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n                    // snippetType: 'textmate',\n                    sortText: strings_1.repeat('a', i),\n                    range: range_1.Range.fromPositions(_this._editor.getPosition(), _this._editor.getPosition().delta(0, first_1.value.length))\n                };\n            }));\n        }\n    };\n    SnippetController2.prototype.finish = function () {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    };\n    SnippetController2.prototype.cancel = function (resetSelection) {\n        if (resetSelection === void 0) { resetSelection = false; }\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        lifecycle_1.dispose(this._snippetListener);\n        lifecycle_1.dispose(this._session);\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    };\n    SnippetController2.prototype.prev = function () {\n        if (this._session) {\n            this._session.prev();\n        }\n        this._updateState();\n    };\n    SnippetController2.prototype.next = function () {\n        if (this._session) {\n            this._session.next();\n        }\n        this._updateState();\n    };\n    SnippetController2.prototype.isInSnippet = function () {\n        return Boolean(this._inSnippet.get());\n    };\n    SnippetController2.prototype.getSessionEnclosingRange = function () {\n        if (this._session) {\n            return this._session.getEnclosingRange();\n        }\n        return undefined;\n    };\n    SnippetController2.InSnippetMode = new contextkey_1.RawContextKey('inSnippetMode', false);\n    SnippetController2.HasNextTabstop = new contextkey_1.RawContextKey('hasNextTabstop', false);\n    SnippetController2.HasPrevTabstop = new contextkey_1.RawContextKey('hasPrevTabstop', false);\n    SnippetController2 = tslib_1.__decorate([\n        tslib_1.__param(1, log_1.ILogService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService)\n    ], SnippetController2);\n    return SnippetController2;\n}());\nexports.SnippetController2 = SnippetController2;\neditorExtensions_1.registerEditorContribution(SnippetController2);\nvar CommandCtor = editorExtensions_1.EditorCommand.bindToContribution(SnippetController2.get);\neditorExtensions_1.registerEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: contextkey_1.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: function (ctrl) { return ctrl.next(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n        kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        primary: keyCodes_1.KeyCode.Tab\n    }\n}));\neditorExtensions_1.registerEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: contextkey_1.ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: function (ctrl) { return ctrl.prev(); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n        kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Tab\n    }\n}));\neditorExtensions_1.registerEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: function (ctrl) { return ctrl.cancel(true); },\n    kbOpts: {\n        weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 30,\n        kbExpr: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        primary: keyCodes_1.KeyCode.Escape,\n        secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n    }\n}));\neditorExtensions_1.registerEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: function (ctrl) { return ctrl.finish(); },\n}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetController2.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { repeat } from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { CompletionItem, CompletionItemKind } from 'vs/editor/common/modes';\nimport { Choice } from 'vs/editor/contrib/snippet/snippetParser';\nimport { showSimpleSuggestions } from 'vs/editor/contrib/suggest/suggest';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SnippetSession } from './snippetSession';\nimport { EditorState, CodeEditorStateFlag } from 'vs/editor/browser/core/editorState';\n\nexport class SnippetController2 implements IEditorContribution {\n\n\tstatic get(editor: ICodeEditor): SnippetController2 {\n\t\treturn editor.getContribution<SnippetController2>('snippetController2');\n\t}\n\n\tstatic InSnippetMode = new RawContextKey('inSnippetMode', false);\n\tstatic HasNextTabstop = new RawContextKey('hasNextTabstop', false);\n\tstatic HasPrevTabstop = new RawContextKey('hasPrevTabstop', false);\n\n\tprivate readonly _inSnippet: IContextKey<boolean>;\n\tprivate readonly _hasNextTabstop: IContextKey<boolean>;\n\tprivate readonly _hasPrevTabstop: IContextKey<boolean>;\n\n\tprivate _session?: SnippetSession;\n\tprivate _snippetListener: IDisposable[] = [];\n\tprivate _modelVersionId: number;\n\tprivate _currentChoice?: Choice;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tthis._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n\t\tthis._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n\t\tthis._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n\t}\n\n\tdispose(): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tdispose(this._session);\n\t}\n\n\tgetId(): string {\n\t\treturn 'snippetController2';\n\t}\n\n\tinsert(\n\t\ttemplate: string,\n\t\toverwriteBefore: number = 0, overwriteAfter: number = 0,\n\t\tundoStopBefore: boolean = true, undoStopAfter: boolean = true,\n\t\tadjustWhitespace: boolean = true,\n\t): void {\n\t\t// this is here to find out more about the yet-not-understood\n\t\t// error that sometimes happens when we fail to inserted a nested\n\t\t// snippet\n\t\ttry {\n\t\t\tthis._doInsert(template, overwriteBefore, overwriteAfter, undoStopBefore, undoStopAfter, adjustWhitespace);\n\n\t\t} catch (e) {\n\t\t\tthis.cancel();\n\t\t\tthis._logService.error(e);\n\t\t\tthis._logService.error('snippet_error');\n\t\t\tthis._logService.error('insert_template=', template);\n\t\t\tthis._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n\t\t}\n\t}\n\n\tprivate _doInsert(\n\t\ttemplate: string,\n\t\toverwriteBefore: number = 0, overwriteAfter: number = 0,\n\t\tundoStopBefore: boolean = true, undoStopAfter: boolean = true,\n\t\tadjustWhitespace: boolean = true,\n\t): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// don't listen while inserting the snippet\n\t\t// as that is the inflight state causing cancelation\n\t\tthis._snippetListener = dispose(this._snippetListener);\n\n\t\tif (undoStopBefore) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\tif (!this._session) {\n\t\t\tthis._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n\t\t\tthis._session = new SnippetSession(this._editor, template, overwriteBefore, overwriteAfter, adjustWhitespace);\n\t\t\tthis._session.insert();\n\t\t} else {\n\t\t\tthis._session.merge(template, overwriteBefore, overwriteAfter, adjustWhitespace);\n\t\t}\n\n\t\tif (undoStopAfter) {\n\t\t\tthis._editor.getModel().pushStackElement();\n\t\t}\n\n\t\tthis._updateState();\n\n\t\t// we listen on model and selection changes. usually\n\t\t// both events come in together and this is to prevent\n\t\t// that we don't call _updateState twice.\n\t\tlet state: EditorState;\n\t\tlet dedupedUpdateState = () => {\n\t\t\tif (!state || !state.validate(this._editor)) {\n\t\t\t\tthis._updateState();\n\t\t\t\tstate = new EditorState(this._editor, CodeEditorStateFlag.Selection | CodeEditorStateFlag.Value);\n\t\t\t}\n\t\t};\n\t\tthis._snippetListener = [\n\t\t\tthis._editor.onDidChangeModelContent(e => {\n\t\t\t\tif (e.isFlush) {\n\t\t\t\t\tthis.cancel();\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(dedupedUpdateState, 0);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis._editor.onDidChangeCursorSelection(dedupedUpdateState),\n\t\t\tthis._editor.onDidChangeModel(() => this.cancel()),\n\t\t];\n\t}\n\n\tprivate _updateState(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\t// canceled in the meanwhile\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n\t\t\t// undo until the 'before' state happened\n\t\t\t// and makes use cancel snippet mode\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (!this._session.hasPlaceholder) {\n\t\t\t// don't listen for selection changes and don't\n\t\t\t// update context keys when the snippet is plain text\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tif (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n\t\t\treturn this.cancel();\n\t\t}\n\n\t\tthis._inSnippet.set(true);\n\t\tthis._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n\t\tthis._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n\n\t\tthis._handleChoice();\n\t}\n\n\tprivate _handleChoice(): void {\n\t\tif (!this._session || !this._editor.hasModel()) {\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\tconst { choice } = this._session;\n\t\tif (!choice) {\n\t\t\tthis._currentChoice = undefined;\n\t\t\treturn;\n\t\t}\n\t\tif (this._currentChoice !== choice) {\n\t\t\tthis._currentChoice = choice;\n\n\t\t\tthis._editor.setSelections(this._editor.getSelections()\n\t\t\t\t.map(s => Selection.fromPositions(s.getStartPosition()))\n\t\t\t);\n\n\t\t\tconst [first] = choice.options;\n\n\t\t\tshowSimpleSuggestions(this._editor, choice.options.map((option, i) => {\n\n\t\t\t\t// let before = choice.options.slice(0, i);\n\t\t\t\t// let after = choice.options.slice(i);\n\n\t\t\t\treturn <CompletionItem>{\n\t\t\t\t\tkind: CompletionItemKind.Value,\n\t\t\t\t\tlabel: option.value,\n\t\t\t\t\tinsertText: option.value,\n\t\t\t\t\t// insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n\t\t\t\t\t// snippetType: 'textmate',\n\t\t\t\t\tsortText: repeat('a', i),\n\t\t\t\t\trange: Range.fromPositions(this._editor.getPosition()!, this._editor.getPosition()!.delta(0, first.value.length))\n\t\t\t\t};\n\t\t\t}));\n\t\t}\n\t}\n\n\tfinish(): void {\n\t\twhile (this._inSnippet.get()) {\n\t\t\tthis.next();\n\t\t}\n\t}\n\n\tcancel(resetSelection: boolean = false): void {\n\t\tthis._inSnippet.reset();\n\t\tthis._hasPrevTabstop.reset();\n\t\tthis._hasNextTabstop.reset();\n\t\tdispose(this._snippetListener);\n\t\tdispose(this._session);\n\t\tthis._session = undefined;\n\t\tthis._modelVersionId = -1;\n\t\tif (resetSelection) {\n\t\t\t// reset selection to the primary cursor when being asked\n\t\t\t// for. this happens when explicitly cancelling snippet mode,\n\t\t\t// e.g. when pressing ESC\n\t\t\tthis._editor.setSelections([this._editor.getSelection()!]);\n\t\t}\n\t}\n\n\tprev(): void {\n\t\tif (this._session) {\n\t\t\tthis._session.prev();\n\t\t}\n\t\tthis._updateState();\n\t}\n\n\tnext(): void {\n\t\tif (this._session) {\n\t\t\tthis._session.next();\n\t\t}\n\t\tthis._updateState();\n\t}\n\n\tisInSnippet(): boolean {\n\t\treturn Boolean(this._inSnippet.get());\n\t}\n\n\tgetSessionEnclosingRange(): Range | undefined {\n\t\tif (this._session) {\n\t\t\treturn this._session.getEnclosingRange();\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\n\nregisterEditorContribution(SnippetController2);\n\nconst CommandCtor = EditorCommand.bindToContribution<SnippetController2>(SnippetController2.get);\n\nregisterEditorCommand(new CommandCtor({\n\tid: 'jumpToNextSnippetPlaceholder',\n\tprecondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n\thandler: ctrl => ctrl.next(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\tprimary: KeyCode.Tab\n\t}\n}));\nregisterEditorCommand(new CommandCtor({\n\tid: 'jumpToPrevSnippetPlaceholder',\n\tprecondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n\thandler: ctrl => ctrl.prev(),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\tprimary: KeyMod.Shift | KeyCode.Tab\n\t}\n}));\nregisterEditorCommand(new CommandCtor({\n\tid: 'leaveSnippet',\n\tprecondition: SnippetController2.InSnippetMode,\n\thandler: ctrl => ctrl.cancel(true),\n\tkbOpts: {\n\t\tweight: KeybindingWeight.EditorContrib + 30,\n\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\nregisterEditorCommand(new CommandCtor({\n\tid: 'acceptSnippet',\n\tprecondition: SnippetController2.InSnippetMode,\n\thandler: ctrl => ctrl.finish(),\n\t// kbOpts: {\n\t// \tweight: KeybindingWeight.EditorContrib + 30,\n\t// \tkbExpr: EditorContextKeys.textFocus,\n\t// \tprimary: KeyCode.Enter,\n\t// }\n}));\n"]}]}