{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar MainThreadFileSystemEventService = /** @class */ (function () {\n    function MainThreadFileSystemEventService(extHostContext, fileService, textfileService) {\n        this._listener = new Array();\n        var proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostFileSystemEventService);\n        // file system events - (changes the editor and other make)\n        var events = {\n            created: [],\n            changed: [],\n            deleted: []\n        };\n        fileService.onFileChanges(function (event) {\n            for (var _i = 0, _a = event.changes; _i < _a.length; _i++) {\n                var change = _a[_i];\n                switch (change.type) {\n                    case files_1.FileChangeType.ADDED:\n                        events.created.push(change.resource);\n                        break;\n                    case files_1.FileChangeType.UPDATED:\n                        events.changed.push(change.resource);\n                        break;\n                    case files_1.FileChangeType.DELETED:\n                        events.deleted.push(change.resource);\n                        break;\n                }\n            }\n            proxy.$onFileEvent(events);\n            events.created.length = 0;\n            events.changed.length = 0;\n            events.deleted.length = 0;\n        }, undefined, this._listener);\n        // file operation events - (changes the editor makes)\n        fileService.onAfterOperation(function (e) {\n            if (e.operation === files_1.FileOperation.MOVE) {\n                proxy.$onFileRename(e.resource, e.target.resource);\n            }\n        }, undefined, this._listener);\n        textfileService.onWillMove(function (e) {\n            var promise = proxy.$onWillRename(e.oldResource, e.newResource);\n            e.waitUntil(promise);\n        }, undefined, this._listener);\n    }\n    MainThreadFileSystemEventService.prototype.dispose = function () {\n        lifecycle_1.dispose(this._listener);\n    };\n    MainThreadFileSystemEventService = tslib_1.__decorate([\n        extHostCustomers_1.extHostCustomer,\n        tslib_1.__param(1, files_1.IFileService),\n        tslib_1.__param(2, textfiles_1.ITextFileService)\n    ], MainThreadFileSystemEventService);\n    return MainThreadFileSystemEventService;\n}());\nexports.MainThreadFileSystemEventService = MainThreadFileSystemEventService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadFileSystemEventService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,sDAAgE;AAChE,wDAA6F;AAC7F,6EAA2E;AAC3E,+DAA+F;AAC/F,6EAAmF;AAGnF;IAIC,0CACC,cAA+B,EACjB,WAAyB,EACrB,eAAiC;QALnC,cAAS,GAAG,IAAI,KAAK,EAAe,CAAC;QAQrD,IAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,6BAA6B,CAAC,CAAC;QAEpF,2DAA2D;QAC3D,IAAM,MAAM,GAAqB;YAChC,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,EAAE;SACX,CAAC;QACF,WAAW,CAAC,aAAa,CAAC,UAAA,KAAK;YAC9B,KAAmB,UAAa,EAAb,KAAA,KAAK,CAAC,OAAO,EAAb,cAAa,EAAb,IAAa,EAAE;gBAA7B,IAAI,MAAM,SAAA;gBACd,QAAQ,MAAM,CAAC,IAAI,EAAE;oBACpB,KAAK,sBAAc,CAAC,KAAK;wBACxB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACrC,MAAM;oBACP,KAAK,sBAAc,CAAC,OAAO;wBAC1B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACrC,MAAM;oBACP,KAAK,sBAAc,CAAC,OAAO;wBAC1B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;wBACrC,MAAM;iBACP;aACD;YAED,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAC3B,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;YAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;QAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE9B,qDAAqD;QACrD,WAAW,CAAC,gBAAgB,CAAC,UAAA,CAAC;YAC7B,IAAI,CAAC,CAAC,SAAS,KAAK,qBAAa,CAAC,IAAI,EAAE;gBACvC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAO,CAAC,QAAQ,CAAC,CAAC;aACpD;QACF,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE9B,eAAe,CAAC,UAAU,CAAC,UAAA,CAAC;YAC3B,IAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC;YAClE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtB,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/B,CAAC;IAED,kDAAO,GAAP;QACC,mBAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC;IAtDW,gCAAgC;QAD5C,kCAAe;QAOb,mBAAA,oBAAY,CAAA;QACZ,mBAAA,4BAAgB,CAAA;OAPN,gCAAgC,CAuD5C;IAAD,uCAAC;CAAA,AAvDD,IAuDC;AAvDY,4EAAgC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { FileChangeType, IFileService, FileOperation } from 'vs/platform/files/common/files';\nimport { extHostCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ExtHostContext, FileSystemEvents, IExtHostContext } from '../common/extHost.protocol';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\n@extHostCustomer\nexport class MainThreadFileSystemEventService {\n\n\tprivate readonly _listener = new Array<IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITextFileService textfileService: ITextFileService,\n\t) {\n\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostFileSystemEventService);\n\n\t\t// file system events - (changes the editor and other make)\n\t\tconst events: FileSystemEvents = {\n\t\t\tcreated: [],\n\t\t\tchanged: [],\n\t\t\tdeleted: []\n\t\t};\n\t\tfileService.onFileChanges(event => {\n\t\t\tfor (let change of event.changes) {\n\t\t\t\tswitch (change.type) {\n\t\t\t\t\tcase FileChangeType.ADDED:\n\t\t\t\t\t\tevents.created.push(change.resource);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FileChangeType.UPDATED:\n\t\t\t\t\t\tevents.changed.push(change.resource);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FileChangeType.DELETED:\n\t\t\t\t\t\tevents.deleted.push(change.resource);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tproxy.$onFileEvent(events);\n\t\t\tevents.created.length = 0;\n\t\t\tevents.changed.length = 0;\n\t\t\tevents.deleted.length = 0;\n\t\t}, undefined, this._listener);\n\n\t\t// file operation events - (changes the editor makes)\n\t\tfileService.onAfterOperation(e => {\n\t\t\tif (e.operation === FileOperation.MOVE) {\n\t\t\t\tproxy.$onFileRename(e.resource, e.target!.resource);\n\t\t\t}\n\t\t}, undefined, this._listener);\n\n\t\ttextfileService.onWillMove(e => {\n\t\t\tconst promise = proxy.$onWillRename(e.oldResource, e.newResource);\n\t\t\te.waitUntil(promise);\n\t\t}, undefined, this._listener);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._listener);\n\t}\n}\n"]}]}