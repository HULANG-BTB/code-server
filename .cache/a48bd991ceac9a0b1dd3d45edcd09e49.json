{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keyboardMapper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keyboardMapper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CachedKeyboardMapper = /** @class */ (function () {\n    function CachedKeyboardMapper(actual) {\n        this._actual = actual;\n        this._cache = new Map();\n    }\n    CachedKeyboardMapper.prototype.dumpDebugInfo = function () {\n        return this._actual.dumpDebugInfo();\n    };\n    CachedKeyboardMapper.prototype.resolveKeybinding = function (keybinding) {\n        var hashCode = keybinding.getHashCode();\n        var resolved = this._cache.get(hashCode);\n        if (!resolved) {\n            var r = this._actual.resolveKeybinding(keybinding);\n            this._cache.set(hashCode, r);\n            return r;\n        }\n        return resolved;\n    };\n    CachedKeyboardMapper.prototype.resolveKeyboardEvent = function (keyboardEvent) {\n        return this._actual.resolveKeyboardEvent(keyboardEvent);\n    };\n    CachedKeyboardMapper.prototype.resolveUserBinding = function (parts) {\n        return this._actual.resolveUserBinding(parts);\n    };\n    return CachedKeyboardMapper;\n}());\nexports.CachedKeyboardMapper = CachedKeyboardMapper;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keyboardMapper.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/keyboardMapper.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAahG;IAKC,8BAAY,MAAuB;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAgC,CAAC;IACvD,CAAC;IAEM,4CAAa,GAApB;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;IACrC,CAAC;IAEM,gDAAiB,GAAxB,UAAyB,UAAsB;QAC9C,IAAM,QAAQ,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC;QAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,EAAE;YACd,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACrD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC7B,OAAO,CAAC,CAAC;SACT;QACD,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEM,mDAAoB,GAA3B,UAA4B,aAA6B;QACxD,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IACzD,CAAC;IAEM,iDAAkB,GAAzB,UAA0B,KAA6C;QACtE,OAAO,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IACF,2BAAC;AAAD,CAAC,AAhCD,IAgCC;AAhCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Keybinding, ResolvedKeybinding, SimpleKeybinding } from 'vs/base/common/keyCodes';\nimport { ScanCodeBinding } from 'vs/base/common/scanCode';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\n\nexport interface IKeyboardMapper {\n\tdumpDebugInfo(): string;\n\tresolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\tresolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\tresolveUserBinding(firstPart: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[];\n}\n\nexport class CachedKeyboardMapper implements IKeyboardMapper {\n\n\tprivate _actual: IKeyboardMapper;\n\tprivate _cache: Map<string, ResolvedKeybinding[]>;\n\n\tconstructor(actual: IKeyboardMapper) {\n\t\tthis._actual = actual;\n\t\tthis._cache = new Map<string, ResolvedKeybinding[]>();\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\treturn this._actual.dumpDebugInfo();\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\tconst hashCode = keybinding.getHashCode();\n\t\tconst resolved = this._cache.get(hashCode);\n\t\tif (!resolved) {\n\t\t\tconst r = this._actual.resolveKeybinding(keybinding);\n\t\t\tthis._cache.set(hashCode, r);\n\t\t\treturn r;\n\t\t}\n\t\treturn resolved;\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding {\n\t\treturn this._actual.resolveKeyboardEvent(keyboardEvent);\n\t}\n\n\tpublic resolveUserBinding(parts: (SimpleKeybinding | ScanCodeBinding)[]): ResolvedKeybinding[] {\n\t\treturn this._actual.resolveUserBinding(parts);\n\t}\n}\n"]}]}