{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processRunnerDetector.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processRunnerDetector.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Objects = require(\"vs/base/common/objects\");\nvar Path = require(\"vs/base/common/path\");\nvar processes_1 = require(\"vs/base/common/processes\");\nvar Strings = require(\"vs/base/common/strings\");\nvar processes_2 = require(\"vs/base/node/processes\");\nvar nls = require(\"vs/nls\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar Tasks = require(\"../common/tasks\");\nvar TaskConfig = require(\"../common/taskConfiguration\");\nvar build = 'build';\nvar test = 'test';\nvar defaultValue = 'default';\nvar RegexpTaskMatcher = /** @class */ (function () {\n    function RegexpTaskMatcher(regExp) {\n        this.regexp = regExp;\n    }\n    RegexpTaskMatcher.prototype.init = function () {\n    };\n    RegexpTaskMatcher.prototype.match = function (tasks, line) {\n        var matches = this.regexp.exec(line);\n        if (matches && matches.length > 0) {\n            tasks.push(matches[1]);\n        }\n    };\n    return RegexpTaskMatcher;\n}());\nvar GruntTaskMatcher = /** @class */ (function () {\n    function GruntTaskMatcher() {\n    }\n    GruntTaskMatcher.prototype.init = function () {\n        this.tasksStart = false;\n        this.tasksEnd = false;\n        this.descriptionOffset = null;\n    };\n    GruntTaskMatcher.prototype.match = function (tasks, line) {\n        // grunt lists tasks as follows (description is wrapped into a new line if too long):\n        // ...\n        // Available tasks\n        //         uglify  Minify files with UglifyJS. *\n        //         jshint  Validate files with JSHint. *\n        //           test  Alias for \"jshint\", \"qunit\" tasks.\n        //        default  Alias for \"jshint\", \"qunit\", \"concat\", \"uglify\" tasks.\n        //           long  Alias for \"eslint\", \"qunit\", \"browserify\", \"sass\",\n        //                 \"autoprefixer\", \"uglify\", tasks.\n        //\n        // Tasks run in the order specified\n        if (!this.tasksStart && !this.tasksEnd) {\n            if (line.indexOf('Available tasks') === 0) {\n                this.tasksStart = true;\n            }\n        }\n        else if (this.tasksStart && !this.tasksEnd) {\n            if (line.indexOf('Tasks run in the order specified') === 0) {\n                this.tasksEnd = true;\n            }\n            else {\n                if (this.descriptionOffset === null) {\n                    var match = line.match(/\\S  \\S/);\n                    if (match) {\n                        this.descriptionOffset = (match.index || 0) + 1;\n                    }\n                    else {\n                        this.descriptionOffset = 0;\n                    }\n                }\n                var taskName = line.substr(0, this.descriptionOffset).trim();\n                if (taskName.length > 0) {\n                    tasks.push(taskName);\n                }\n            }\n        }\n    };\n    return GruntTaskMatcher;\n}());\nvar ProcessRunnerDetector = /** @class */ (function () {\n    function ProcessRunnerDetector(workspaceFolder, fileService, contextService, configurationResolverService, config) {\n        if (config === void 0) { config = null; }\n        this.fileService = fileService;\n        this.contextService = contextService;\n        this.configurationResolverService = configurationResolverService;\n        this.taskConfiguration = config;\n        this._workspaceRoot = workspaceFolder;\n        this._stderr = [];\n        this._stdout = [];\n        this._cwd = this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY ? Path.normalize(this._workspaceRoot.uri.fsPath) : '';\n    }\n    ProcessRunnerDetector.supports = function (runner) {\n        return ProcessRunnerDetector.SupportedRunners[runner];\n    };\n    ProcessRunnerDetector.detectorConfig = function (runner) {\n        return ProcessRunnerDetector.TaskMatchers[runner];\n    };\n    Object.defineProperty(ProcessRunnerDetector.prototype, \"stderr\", {\n        get: function () {\n            return this._stderr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ProcessRunnerDetector.prototype, \"stdout\", {\n        get: function () {\n            return this._stdout;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ProcessRunnerDetector.prototype.detect = function (list, detectSpecific) {\n        var _this = this;\n        if (list === void 0) { list = false; }\n        var commandExecutable;\n        if (this.taskConfiguration && this.taskConfiguration.command && (commandExecutable = TaskConfig.CommandString.value(this.taskConfiguration.command)) && ProcessRunnerDetector.supports(commandExecutable)) {\n            var config = ProcessRunnerDetector.detectorConfig(commandExecutable);\n            var args = (this.taskConfiguration.args || []).concat(config.arg);\n            var options = this.taskConfiguration.options ? this.resolveCommandOptions(this._workspaceRoot, this.taskConfiguration.options) : { cwd: this._cwd };\n            var isShellCommand = !!this.taskConfiguration.isShellCommand;\n            return Promise.resolve(this.runDetection(new processes_2.LineProcess(commandExecutable, this.configurationResolverService.resolve(this._workspaceRoot, args.map(function (a) { return TaskConfig.CommandString.value(a); })), isShellCommand, options), commandExecutable, isShellCommand, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list));\n        }\n        else {\n            if (detectSpecific) {\n                var detectorPromise = void 0;\n                if ('gulp' === detectSpecific) {\n                    detectorPromise = this.tryDetectGulp(this._workspaceRoot, list);\n                }\n                else if ('jake' === detectSpecific) {\n                    detectorPromise = this.tryDetectJake(this._workspaceRoot, list);\n                }\n                else if ('grunt' === detectSpecific) {\n                    detectorPromise = this.tryDetectGrunt(this._workspaceRoot, list);\n                }\n                else {\n                    throw new Error('Unkown detector type');\n                }\n                return detectorPromise.then(function (value) {\n                    if (value) {\n                        return value;\n                    }\n                    else {\n                        return { config: null, stdout: _this.stdout, stderr: _this.stderr };\n                    }\n                });\n            }\n            else {\n                return this.tryDetectGulp(this._workspaceRoot, list).then(function (value) {\n                    if (value) {\n                        return value;\n                    }\n                    return _this.tryDetectJake(_this._workspaceRoot, list).then(function (value) {\n                        if (value) {\n                            return value;\n                        }\n                        return _this.tryDetectGrunt(_this._workspaceRoot, list).then(function (value) {\n                            if (value) {\n                                return value;\n                            }\n                            return { config: null, stdout: _this.stdout, stderr: _this.stderr };\n                        });\n                    });\n                });\n            }\n        }\n    };\n    ProcessRunnerDetector.prototype.resolveCommandOptions = function (workspaceFolder, options) {\n        // TODO@Dirk adopt new configuration resolver service https://github.com/Microsoft/vscode/issues/31365\n        var result = Objects.deepClone(options);\n        if (result.cwd) {\n            result.cwd = this.configurationResolverService.resolve(workspaceFolder, result.cwd);\n        }\n        if (result.env) {\n            result.env = this.configurationResolverService.resolve(workspaceFolder, result.env);\n        }\n        return result;\n    };\n    ProcessRunnerDetector.prototype.tryDetectGulp = function (workspaceFolder, list) {\n        var _this = this;\n        return Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('gulpfile.js'))).then(function (stat) {\n            var config = ProcessRunnerDetector.detectorConfig('gulp');\n            var process = new processes_2.LineProcess('gulp', [config.arg, '--no-color'], true, { cwd: _this._cwd });\n            return _this.runDetection(process, 'gulp', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n        }, function (err) {\n            return null;\n        });\n    };\n    ProcessRunnerDetector.prototype.tryDetectGrunt = function (workspaceFolder, list) {\n        var _this = this;\n        return Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('Gruntfile.js'))).then(function (stat) {\n            var config = ProcessRunnerDetector.detectorConfig('grunt');\n            var process = new processes_2.LineProcess('grunt', [config.arg, '--no-color'], true, { cwd: _this._cwd });\n            return _this.runDetection(process, 'grunt', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n        }, function (err) {\n            return null;\n        });\n    };\n    ProcessRunnerDetector.prototype.tryDetectJake = function (workspaceFolder, list) {\n        var _this = this;\n        var run = function () {\n            var config = ProcessRunnerDetector.detectorConfig('jake');\n            var process = new processes_2.LineProcess('jake', [config.arg], true, { cwd: _this._cwd });\n            return _this.runDetection(process, 'jake', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n        };\n        return Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('Jakefile'))).then(function (stat) {\n            return run();\n        }, function (err) {\n            return _this.fileService.resolveFile(workspaceFolder.toResource('Jakefile.js')).then(function (stat) {\n                return run();\n            }, function (err) {\n                return null;\n            });\n        });\n    };\n    ProcessRunnerDetector.prototype.runDetection = function (process, command, isShellCommand, matcher, problemMatchers, list) {\n        var _this = this;\n        var tasks = [];\n        matcher.init();\n        var onProgress = function (progress) {\n            if (progress.source === processes_1.Source.stderr) {\n                _this._stderr.push(progress.line);\n                return;\n            }\n            var line = Strings.removeAnsiEscapeCodes(progress.line);\n            matcher.match(tasks, line);\n        };\n        return process.start(onProgress).then(function (success) {\n            if (tasks.length === 0) {\n                if (success.cmdCode !== 0) {\n                    if (command === 'gulp') {\n                        _this._stderr.push(nls.localize('TaskSystemDetector.noGulpTasks', 'Running gulp --tasks-simple didn\\'t list any tasks. Did you run npm install?'));\n                    }\n                    else if (command === 'jake') {\n                        _this._stderr.push(nls.localize('TaskSystemDetector.noJakeTasks', 'Running jake --tasks didn\\'t list any tasks. Did you run npm install?'));\n                    }\n                }\n                return { config: null, stdout: _this._stdout, stderr: _this._stderr };\n            }\n            var result = {\n                version: ProcessRunnerDetector.Version,\n                command: command,\n                isShellCommand: isShellCommand\n            };\n            // Hack. We need to remove this.\n            if (command === 'gulp') {\n                result.args = ['--no-color'];\n            }\n            result.tasks = _this.createTaskDescriptions(tasks, problemMatchers, list);\n            return { config: result, stdout: _this._stdout, stderr: _this._stderr };\n        }, function (err) {\n            var error = err.error;\n            if (error.code === 'ENOENT') {\n                if (command === 'gulp') {\n                    _this._stderr.push(nls.localize('TaskSystemDetector.noGulpProgram', 'Gulp is not installed on your system. Run npm install -g gulp to install it.'));\n                }\n                else if (command === 'jake') {\n                    _this._stderr.push(nls.localize('TaskSystemDetector.noJakeProgram', 'Jake is not installed on your system. Run npm install -g jake to install it.'));\n                }\n                else if (command === 'grunt') {\n                    _this._stderr.push(nls.localize('TaskSystemDetector.noGruntProgram', 'Grunt is not installed on your system. Run npm install -g grunt to install it.'));\n                }\n            }\n            else {\n                _this._stderr.push(nls.localize('TaskSystemDetector.noProgram', 'Program {0} was not found. Message is {1}', command, error ? error.message : ''));\n            }\n            return { config: null, stdout: _this._stdout, stderr: _this._stderr };\n        });\n    };\n    ProcessRunnerDetector.prototype.createTaskDescriptions = function (tasks, problemMatchers, list) {\n        var _this = this;\n        var taskConfigs = [];\n        if (list) {\n            tasks.forEach(function (task) {\n                taskConfigs.push({\n                    taskName: task,\n                    args: []\n                });\n            });\n        }\n        else {\n            var taskInfos_1 = {\n                build: { index: -1, exact: -1 },\n                test: { index: -1, exact: -1 }\n            };\n            tasks.forEach(function (task, index) {\n                _this.testBuild(taskInfos_1.build, task, index);\n                _this.testTest(taskInfos_1.test, task, index);\n            });\n            if (taskInfos_1.build.index !== -1) {\n                var name = tasks[taskInfos_1.build.index];\n                this._stdout.push(nls.localize('TaskSystemDetector.buildTaskDetected', 'Build task named \\'{0}\\' detected.', name));\n                taskConfigs.push({\n                    taskName: name,\n                    args: [],\n                    group: Tasks.TaskGroup.Build,\n                    problemMatcher: problemMatchers\n                });\n            }\n            if (taskInfos_1.test.index !== -1) {\n                var name = tasks[taskInfos_1.test.index];\n                this._stdout.push(nls.localize('TaskSystemDetector.testTaskDetected', 'Test task named \\'{0}\\' detected.', name));\n                taskConfigs.push({\n                    taskName: name,\n                    args: [],\n                    group: Tasks.TaskGroup.Test,\n                });\n            }\n        }\n        return taskConfigs;\n    };\n    ProcessRunnerDetector.prototype.testBuild = function (taskInfo, taskName, index) {\n        if (taskName === build) {\n            taskInfo.index = index;\n            taskInfo.exact = 4;\n        }\n        else if ((Strings.startsWith(taskName, build) || Strings.endsWith(taskName, build)) && taskInfo.exact < 4) {\n            taskInfo.index = index;\n            taskInfo.exact = 3;\n        }\n        else if (taskName.indexOf(build) !== -1 && taskInfo.exact < 3) {\n            taskInfo.index = index;\n            taskInfo.exact = 2;\n        }\n        else if (taskName === defaultValue && taskInfo.exact < 2) {\n            taskInfo.index = index;\n            taskInfo.exact = 1;\n        }\n    };\n    ProcessRunnerDetector.prototype.testTest = function (taskInfo, taskName, index) {\n        if (taskName === test) {\n            taskInfo.index = index;\n            taskInfo.exact = 3;\n        }\n        else if ((Strings.startsWith(taskName, test) || Strings.endsWith(taskName, test)) && taskInfo.exact < 3) {\n            taskInfo.index = index;\n            taskInfo.exact = 2;\n        }\n        else if (taskName.indexOf(test) !== -1 && taskInfo.exact < 2) {\n            taskInfo.index = index;\n            taskInfo.exact = 1;\n        }\n    };\n    ProcessRunnerDetector.Version = '0.1.0';\n    ProcessRunnerDetector.SupportedRunners = {\n        'gulp': true,\n        'jake': true,\n        'grunt': true\n    };\n    ProcessRunnerDetector.TaskMatchers = {\n        'gulp': { matcher: new RegexpTaskMatcher(/^(.*)$/), arg: '--tasks-simple' },\n        'jake': { matcher: new RegexpTaskMatcher(/^jake\\s+([^\\s]+)\\s/), arg: '--tasks' },\n        'grunt': { matcher: new GruntTaskMatcher(), arg: '--help' },\n    };\n    ProcessRunnerDetector.DefaultProblemMatchers = ['$lessCompile', '$tsc', '$jshint'];\n    return ProcessRunnerDetector;\n}());\nexports.ProcessRunnerDetector = ProcessRunnerDetector;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processRunnerDetector.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/node/processRunnerDetector.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gDAAkD;AAClD,0CAA4C;AAC5C,sDAA6E;AAC7E,gDAAkD;AAClD,oDAA+D;AAC/D,4BAA8B;AAE9B,oEAAoH;AAEpH,uCAAyC;AACzC,wDAA0D;AAE1D,IAAM,KAAK,GAAG,OAAO,CAAC;AACtB,IAAM,IAAI,GAAG,MAAM,CAAC;AACpB,IAAM,YAAY,GAAG,SAAS,CAAC;AAsB/B;IAGC,2BAAY,MAAc;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAED,gCAAI,GAAJ;IACA,CAAC;IAED,iCAAK,GAAL,UAAM,KAAe,EAAE,IAAY;QAClC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SACvB;IACF,CAAC;IACF,wBAAC;AAAD,CAAC,AAhBD,IAgBC;AAED;IAAA;IA+CA,CAAC;IA1CA,+BAAI,GAAJ;QACC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,gCAAK,GAAL,UAAM,KAAe,EAAE,IAAY;QAClC,qFAAqF;QACrF,MAAM;QACN,kBAAkB;QAClB,gDAAgD;QAChD,gDAAgD;QAChD,qDAAqD;QACrD,yEAAyE;QACzE,qEAAqE;QACrE,mDAAmD;QACnD,EAAE;QACF,mCAAmC;QACnC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACvC,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,EAAE;gBAC1C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;aACvB;SACD;aACI,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC3C,IAAI,IAAI,CAAC,OAAO,CAAC,kCAAkC,CAAC,KAAK,CAAC,EAAE;gBAC3D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACrB;iBAAM;gBACN,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;oBACpC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBACnC,IAAI,KAAK,EAAE;wBACV,IAAI,CAAC,iBAAiB,GAAG,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;qBAChD;yBAAM;wBACN,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;qBAC3B;iBACD;gBACD,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC7D,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACrB;aACD;SACD;IACF,CAAC;IACF,uBAAC;AAAD,CAAC,AA/CD,IA+CC;AAQD;IAmCC,+BAAY,eAAiC,EAAE,WAAyB,EAAE,cAAwC,EAAE,4BAA2D,EAAE,MAAgE;QAAhE,uBAAA,EAAA,aAAgE;QAChP,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC;QACjE,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC;QAChC,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,KAAK,0BAAc,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACpI,CAAC;IA5Ba,8BAAQ,GAAtB,UAAuB,MAAc;QACpC,OAAO,qBAAqB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;IAEc,oCAAc,GAA7B,UAA8B,MAAc;QAC3C,OAAO,qBAAqB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAwBD,sBAAW,yCAAM;aAAjB;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAW,yCAAM;aAAjB;YACC,OAAO,IAAI,CAAC,OAAO,CAAC;QACrB,CAAC;;;OAAA;IAEM,sCAAM,GAAb,UAAc,IAAqB,EAAE,cAAuB;QAA5D,iBAgDC;QAhDa,qBAAA,EAAA,YAAqB;QAClC,IAAI,iBAAyB,CAAC;QAC9B,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,qBAAqB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YAC1M,IAAI,MAAM,GAAG,qBAAqB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACrE,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAClE,IAAI,OAAO,GAAmB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;YACpK,IAAI,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;YAC7D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CACvC,IAAI,uBAAW,CAAC,iBAAiB,EAAE,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC,EAAE,cAAc,EAAE,OAAO,CAAC,EAC7K,iBAAiB,EAAE,cAAc,EAAE,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC,CAAC;SACzG;aAAM;YACN,IAAI,cAAc,EAAE;gBACnB,IAAI,eAAe,SAAyB,CAAC;gBAC7C,IAAI,MAAM,KAAK,cAAc,EAAE;oBAC9B,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;iBAChE;qBAAM,IAAI,MAAM,KAAK,cAAc,EAAE;oBACrC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;iBAChE;qBAAM,IAAI,OAAO,KAAK,cAAc,EAAE;oBACtC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;iBACjE;qBAAM;oBACN,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;iBACxC;gBACD,OAAO,eAAe,CAAC,IAAI,CAAC,UAAC,KAAK;oBACjC,IAAI,KAAK,EAAE;wBACV,OAAO,KAAK,CAAC;qBACb;yBAAM;wBACN,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,CAAC;qBAClE;gBACF,CAAC,CAAC,CAAC;aACH;iBAAM;gBACN,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;oBAC/D,IAAI,KAAK,EAAE;wBACV,OAAO,KAAK,CAAC;qBACb;oBACD,OAAO,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;wBAC/D,IAAI,KAAK,EAAE;4BACV,OAAO,KAAK,CAAC;yBACb;wBACD,OAAO,KAAI,CAAC,cAAc,CAAC,KAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;4BAChE,IAAI,KAAK,EAAE;gCACV,OAAO,KAAK,CAAC;6BACb;4BACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,CAAC;wBACnE,CAAC,CAAC,CAAC;oBACJ,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;aACH;SACD;IACF,CAAC;IAEO,qDAAqB,GAA7B,UAA8B,eAAiC,EAAE,OAAuB;QACvF,sGAAsG;QACtG,IAAI,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,MAAM,CAAC,GAAG,EAAE;YACf,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;SACpF;QACD,IAAI,MAAM,CAAC,GAAG,EAAE;YACf,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;SACpF;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEO,6CAAa,GAArB,UAAsB,eAAiC,EAAE,IAAa;QAAtE,iBAQC;QAPA,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACzG,IAAI,MAAM,GAAG,qBAAqB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC1D,IAAI,OAAO,GAAG,IAAI,uBAAW,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,KAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC5F,OAAO,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;QACrH,CAAC,EAAE,UAAC,GAAQ;YACX,OAAO,IAAI,CAAC;QACb,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,8CAAc,GAAtB,UAAuB,eAAiC,EAAE,IAAa;QAAvE,iBAQC;QAPA,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YAC1G,IAAI,MAAM,GAAG,qBAAqB,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAI,OAAO,GAAG,IAAI,uBAAW,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,KAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC7F,OAAO,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;QACtH,CAAC,EAAE,UAAC,GAAQ;YACX,OAAO,IAAI,CAAC;QACb,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,6CAAa,GAArB,UAAsB,eAAiC,EAAE,IAAa;QAAtE,iBAeC;QAdA,IAAI,GAAG,GAAG;YACT,IAAI,MAAM,GAAG,qBAAqB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC1D,IAAI,OAAO,GAAG,IAAI,uBAAW,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,KAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAC9E,OAAO,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;QACrH,CAAC,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACtG,OAAO,GAAG,EAAE,CAAC;QACd,CAAC,EAAE,UAAC,GAAQ;YACX,OAAO,KAAI,CAAC,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;gBACxF,OAAO,GAAG,EAAE,CAAC;YACd,CAAC,EAAE,UAAC,GAAQ;gBACX,OAAO,IAAI,CAAC;YACb,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,4CAAY,GAApB,UAAqB,OAAoB,EAAE,OAAe,EAAE,cAAuB,EAAE,OAA4B,EAAE,eAAyB,EAAE,IAAa;QAA3J,iBAkDC;QAjDA,IAAI,KAAK,GAAa,EAAE,CAAC;QACzB,OAAO,CAAC,IAAI,EAAE,CAAC;QAEf,IAAM,UAAU,GAAG,UAAC,QAAkB;YACrC,IAAI,QAAQ,CAAC,MAAM,KAAK,kBAAM,CAAC,MAAM,EAAE;gBACtC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACjC,OAAO;aACP;YACD,IAAI,IAAI,GAAG,OAAO,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxD,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC;QAEF,OAAO,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAC7C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvB,IAAI,OAAO,CAAC,OAAO,KAAK,CAAC,EAAE;oBAC1B,IAAI,OAAO,KAAK,MAAM,EAAE;wBACvB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,8EAA8E,CAAC,CAAC,CAAC;qBAClJ;yBAAM,IAAI,OAAO,KAAK,MAAM,EAAE;wBAC9B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAE,uEAAuE,CAAC,CAAC,CAAC;qBAC3I;iBACD;gBACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,CAAC;aACpE;YACD,IAAI,MAAM,GAA+C;gBACxD,OAAO,EAAE,qBAAqB,CAAC,OAAO;gBACtC,OAAO,EAAE,OAAO;gBAChB,cAAc,EAAE,cAAc;aAC9B,CAAC;YACF,gCAAgC;YAChC,IAAI,OAAO,KAAK,MAAM,EAAE;gBACvB,MAAM,CAAC,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;aAC7B;YACD,MAAM,CAAC,KAAK,GAAG,KAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;YACzE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,CAAC;QACvE,CAAC,EAAE,UAAC,GAAc;YACjB,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACtB,IAAU,KAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;gBACnC,IAAI,OAAO,KAAK,MAAM,EAAE;oBACvB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,kCAAkC,EAAE,8EAA8E,CAAC,CAAC,CAAC;iBACpJ;qBAAM,IAAI,OAAO,KAAK,MAAM,EAAE;oBAC9B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,kCAAkC,EAAE,8EAA8E,CAAC,CAAC,CAAC;iBACpJ;qBAAM,IAAI,OAAO,KAAK,OAAO,EAAE;oBAC/B,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,mCAAmC,EAAE,gFAAgF,CAAC,CAAC,CAAC;iBACvJ;aACD;iBAAM;gBACN,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,8BAA8B,EAAE,2CAA2C,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAClJ;YACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAI,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,sDAAsB,GAA9B,UAA+B,KAAe,EAAE,eAAyB,EAAE,IAAa;QAAxF,iBAuCC;QAtCA,IAAI,WAAW,GAA4B,EAAE,CAAC;QAC9C,IAAI,IAAI,EAAE;YACT,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gBAClB,WAAW,CAAC,IAAI,CAAC;oBAChB,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,EAAE;iBACR,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;SACH;aAAM;YACN,IAAI,WAAS,GAAc;gBAC1B,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE;gBAC/B,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE;aAC9B,CAAC;YACF,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK;gBACzB,KAAI,CAAC,SAAS,CAAC,WAAS,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC7C,KAAI,CAAC,QAAQ,CAAC,WAAS,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YACH,IAAI,WAAS,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,CAAC,EAAE;gBACjC,IAAI,IAAI,GAAG,KAAK,CAAC,WAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,sCAAsC,EAAE,oCAAoC,EAAE,IAAI,CAAC,CAAC,CAAC;gBACpH,WAAW,CAAC,IAAI,CAAC;oBAChB,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK;oBAC5B,cAAc,EAAE,eAAe;iBAC/B,CAAC,CAAC;aACH;YACD,IAAI,WAAS,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChC,IAAI,IAAI,GAAG,KAAK,CAAC,WAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,qCAAqC,EAAE,mCAAmC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAClH,WAAW,CAAC,IAAI,CAAC;oBAChB,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,EAAE;oBACR,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;iBAC3B,CAAC,CAAC;aACH;SACD;QACD,OAAO,WAAW,CAAC;IACpB,CAAC;IAEO,yCAAS,GAAjB,UAAkB,QAAkB,EAAE,QAAgB,EAAE,KAAa;QACpE,IAAI,QAAQ,KAAK,KAAK,EAAE;YACvB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;aAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;YAC5G,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;aAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;YAChE,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;aAAM,IAAI,QAAQ,KAAK,YAAY,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;YAC3D,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;IACF,CAAC;IAEO,wCAAQ,GAAhB,UAAiB,QAAkB,EAAE,QAAgB,EAAE,KAAa;QACnE,IAAI,QAAQ,KAAK,IAAI,EAAE;YACtB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;aAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;YAC1G,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;aAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC,EAAE;YAC/D,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;SACnB;IACF,CAAC;IA/Qc,6BAAO,GAAW,OAAO,CAAC;IAE1B,sCAAgB,GAA2C;QACzE,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,IAAI;KACb,CAAC;IAEa,kCAAY,GAAkD;QAC5E,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,gBAAgB,EAAE;QAC3E,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,iBAAiB,CAAC,oBAAoB,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE;QAChF,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,gBAAgB,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE;KAC3D,CAAC;IAUa,4CAAsB,GAAa,CAAC,cAAc,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IA0PvF,4BAAC;CAAA,AAlRD,IAkRC;AAlRY,sDAAqB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as Collections from 'vs/base/common/collections';\nimport * as Objects from 'vs/base/common/objects';\nimport * as Path from 'vs/base/common/path';\nimport { CommandOptions, ErrorData, Source } from 'vs/base/common/processes';\nimport * as Strings from 'vs/base/common/strings';\nimport { LineData, LineProcess } from 'vs/base/node/processes';\nimport * as nls from 'vs/nls';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport * as Tasks from '../common/tasks';\nimport * as TaskConfig from '../common/taskConfiguration';\n\nconst build = 'build';\nconst test = 'test';\nconst defaultValue = 'default';\n\ninterface TaskInfo {\n\tindex: number;\n\texact: number;\n}\n\ninterface TaskInfos {\n\tbuild: TaskInfo;\n\ttest: TaskInfo;\n}\n\ninterface TaskDetectorMatcher {\n\tinit(): void;\n\tmatch(tasks: string[], line: string): void;\n}\n\ninterface DetectorConfig {\n\tmatcher: TaskDetectorMatcher;\n\targ: string;\n}\n\nclass RegexpTaskMatcher implements TaskDetectorMatcher {\n\tprivate regexp: RegExp;\n\n\tconstructor(regExp: RegExp) {\n\t\tthis.regexp = regExp;\n\t}\n\n\tinit() {\n\t}\n\n\tmatch(tasks: string[], line: string): void {\n\t\tlet matches = this.regexp.exec(line);\n\t\tif (matches && matches.length > 0) {\n\t\t\ttasks.push(matches[1]);\n\t\t}\n\t}\n}\n\nclass GruntTaskMatcher implements TaskDetectorMatcher {\n\tprivate tasksStart: boolean;\n\tprivate tasksEnd: boolean;\n\tprivate descriptionOffset: number | null;\n\n\tinit() {\n\t\tthis.tasksStart = false;\n\t\tthis.tasksEnd = false;\n\t\tthis.descriptionOffset = null;\n\t}\n\n\tmatch(tasks: string[], line: string): void {\n\t\t// grunt lists tasks as follows (description is wrapped into a new line if too long):\n\t\t// ...\n\t\t// Available tasks\n\t\t//         uglify  Minify files with UglifyJS. *\n\t\t//         jshint  Validate files with JSHint. *\n\t\t//           test  Alias for \"jshint\", \"qunit\" tasks.\n\t\t//        default  Alias for \"jshint\", \"qunit\", \"concat\", \"uglify\" tasks.\n\t\t//           long  Alias for \"eslint\", \"qunit\", \"browserify\", \"sass\",\n\t\t//                 \"autoprefixer\", \"uglify\", tasks.\n\t\t//\n\t\t// Tasks run in the order specified\n\t\tif (!this.tasksStart && !this.tasksEnd) {\n\t\t\tif (line.indexOf('Available tasks') === 0) {\n\t\t\t\tthis.tasksStart = true;\n\t\t\t}\n\t\t}\n\t\telse if (this.tasksStart && !this.tasksEnd) {\n\t\t\tif (line.indexOf('Tasks run in the order specified') === 0) {\n\t\t\t\tthis.tasksEnd = true;\n\t\t\t} else {\n\t\t\t\tif (this.descriptionOffset === null) {\n\t\t\t\t\tconst match = line.match(/\\S  \\S/);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tthis.descriptionOffset = (match.index || 0) + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.descriptionOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet taskName = line.substr(0, this.descriptionOffset).trim();\n\t\t\t\tif (taskName.length > 0) {\n\t\t\t\t\ttasks.push(taskName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface DetectorResult {\n\tconfig: TaskConfig.ExternalTaskRunnerConfiguration | null;\n\tstdout: string[];\n\tstderr: string[];\n}\n\nexport class ProcessRunnerDetector {\n\n\tprivate static Version: string = '0.1.0';\n\n\tprivate static SupportedRunners: Collections.IStringDictionary<boolean> = {\n\t\t'gulp': true,\n\t\t'jake': true,\n\t\t'grunt': true\n\t};\n\n\tprivate static TaskMatchers: Collections.IStringDictionary<DetectorConfig> = {\n\t\t'gulp': { matcher: new RegexpTaskMatcher(/^(.*)$/), arg: '--tasks-simple' },\n\t\t'jake': { matcher: new RegexpTaskMatcher(/^jake\\s+([^\\s]+)\\s/), arg: '--tasks' },\n\t\t'grunt': { matcher: new GruntTaskMatcher(), arg: '--help' },\n\t};\n\n\tpublic static supports(runner: string): boolean {\n\t\treturn ProcessRunnerDetector.SupportedRunners[runner];\n\t}\n\n\tprivate static detectorConfig(runner: string): DetectorConfig {\n\t\treturn ProcessRunnerDetector.TaskMatchers[runner];\n\t}\n\n\tprivate static DefaultProblemMatchers: string[] = ['$lessCompile', '$tsc', '$jshint'];\n\n\tprivate fileService: IFileService;\n\tprivate contextService: IWorkspaceContextService;\n\tprivate configurationResolverService: IConfigurationResolverService;\n\tprivate taskConfiguration: TaskConfig.ExternalTaskRunnerConfiguration | null;\n\tprivate _workspaceRoot: IWorkspaceFolder;\n\tprivate _stderr: string[];\n\tprivate _stdout: string[];\n\tprivate _cwd: string;\n\n\tconstructor(workspaceFolder: IWorkspaceFolder, fileService: IFileService, contextService: IWorkspaceContextService, configurationResolverService: IConfigurationResolverService, config: TaskConfig.ExternalTaskRunnerConfiguration | null = null) {\n\t\tthis.fileService = fileService;\n\t\tthis.contextService = contextService;\n\t\tthis.configurationResolverService = configurationResolverService;\n\t\tthis.taskConfiguration = config;\n\t\tthis._workspaceRoot = workspaceFolder;\n\t\tthis._stderr = [];\n\t\tthis._stdout = [];\n\t\tthis._cwd = this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? Path.normalize(this._workspaceRoot.uri.fsPath) : '';\n\t}\n\n\tpublic get stderr(): string[] {\n\t\treturn this._stderr;\n\t}\n\n\tpublic get stdout(): string[] {\n\t\treturn this._stdout;\n\t}\n\n\tpublic detect(list: boolean = false, detectSpecific?: string): Promise<DetectorResult> {\n\t\tlet commandExecutable: string;\n\t\tif (this.taskConfiguration && this.taskConfiguration.command && (commandExecutable = TaskConfig.CommandString.value(this.taskConfiguration.command)) && ProcessRunnerDetector.supports(commandExecutable)) {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig(commandExecutable);\n\t\t\tlet args = (this.taskConfiguration.args || []).concat(config.arg);\n\t\t\tlet options: CommandOptions = this.taskConfiguration.options ? this.resolveCommandOptions(this._workspaceRoot, this.taskConfiguration.options) : { cwd: this._cwd };\n\t\t\tlet isShellCommand = !!this.taskConfiguration.isShellCommand;\n\t\t\treturn Promise.resolve(this.runDetection(\n\t\t\t\tnew LineProcess(commandExecutable, this.configurationResolverService.resolve(this._workspaceRoot, args.map(a => TaskConfig.CommandString.value(a))), isShellCommand, options),\n\t\t\t\tcommandExecutable, isShellCommand, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list));\n\t\t} else {\n\t\t\tif (detectSpecific) {\n\t\t\t\tlet detectorPromise: Promise<DetectorResult>;\n\t\t\t\tif ('gulp' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectGulp(this._workspaceRoot, list);\n\t\t\t\t} else if ('jake' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectJake(this._workspaceRoot, list);\n\t\t\t\t} else if ('grunt' === detectSpecific) {\n\t\t\t\t\tdetectorPromise = this.tryDetectGrunt(this._workspaceRoot, list);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Unkown detector type');\n\t\t\t\t}\n\t\t\t\treturn detectorPromise.then((value) => {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn { config: null, stdout: this.stdout, stderr: this.stderr };\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.tryDetectGulp(this._workspaceRoot, list).then((value) => {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.tryDetectJake(this._workspaceRoot, list).then((value) => {\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this.tryDetectGrunt(this._workspaceRoot, list).then((value) => {\n\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { config: null, stdout: this.stdout, stderr: this.stderr };\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resolveCommandOptions(workspaceFolder: IWorkspaceFolder, options: CommandOptions): CommandOptions {\n\t\t// TODO@Dirk adopt new configuration resolver service https://github.com/Microsoft/vscode/issues/31365\n\t\tlet result = Objects.deepClone(options);\n\t\tif (result.cwd) {\n\t\t\tresult.cwd = this.configurationResolverService.resolve(workspaceFolder, result.cwd);\n\t\t}\n\t\tif (result.env) {\n\t\t\tresult.env = this.configurationResolverService.resolve(workspaceFolder, result.env);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate tryDetectGulp(workspaceFolder: IWorkspaceFolder, list: boolean): Promise<DetectorResult> {\n\t\treturn Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('gulpfile.js'))).then((stat) => { // TODO@Dirk (https://github.com/Microsoft/vscode/issues/29454)\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('gulp');\n\t\t\tlet process = new LineProcess('gulp', [config.arg, '--no-color'], true, { cwd: this._cwd });\n\t\t\treturn this.runDetection(process, 'gulp', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t}, (err: any) => {\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tprivate tryDetectGrunt(workspaceFolder: IWorkspaceFolder, list: boolean): Promise<DetectorResult> {\n\t\treturn Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('Gruntfile.js'))).then((stat) => { // TODO@Dirk (https://github.com/Microsoft/vscode/issues/29454)\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('grunt');\n\t\t\tlet process = new LineProcess('grunt', [config.arg, '--no-color'], true, { cwd: this._cwd });\n\t\t\treturn this.runDetection(process, 'grunt', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t}, (err: any) => {\n\t\t\treturn null;\n\t\t});\n\t}\n\n\tprivate tryDetectJake(workspaceFolder: IWorkspaceFolder, list: boolean): Promise<DetectorResult> {\n\t\tlet run = () => {\n\t\t\tlet config = ProcessRunnerDetector.detectorConfig('jake');\n\t\t\tlet process = new LineProcess('jake', [config.arg], true, { cwd: this._cwd });\n\t\t\treturn this.runDetection(process, 'jake', true, config.matcher, ProcessRunnerDetector.DefaultProblemMatchers, list);\n\t\t};\n\t\treturn Promise.resolve(this.fileService.resolveFile(workspaceFolder.toResource('Jakefile'))).then((stat) => { // TODO@Dirk (https://github.com/Microsoft/vscode/issues/29454)\n\t\t\treturn run();\n\t\t}, (err: any) => {\n\t\t\treturn this.fileService.resolveFile(workspaceFolder.toResource('Jakefile.js')).then((stat) => { // TODO@Dirk (https://github.com/Microsoft/vscode/issues/29454)\n\t\t\t\treturn run();\n\t\t\t}, (err: any) => {\n\t\t\t\treturn null;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate runDetection(process: LineProcess, command: string, isShellCommand: boolean, matcher: TaskDetectorMatcher, problemMatchers: string[], list: boolean): Promise<DetectorResult> {\n\t\tlet tasks: string[] = [];\n\t\tmatcher.init();\n\n\t\tconst onProgress = (progress: LineData) => {\n\t\t\tif (progress.source === Source.stderr) {\n\t\t\t\tthis._stderr.push(progress.line);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet line = Strings.removeAnsiEscapeCodes(progress.line);\n\t\t\tmatcher.match(tasks, line);\n\t\t};\n\n\t\treturn process.start(onProgress).then((success) => {\n\t\t\tif (tasks.length === 0) {\n\t\t\t\tif (success.cmdCode !== 0) {\n\t\t\t\t\tif (command === 'gulp') {\n\t\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGulpTasks', 'Running gulp --tasks-simple didn\\'t list any tasks. Did you run npm install?'));\n\t\t\t\t\t} else if (command === 'jake') {\n\t\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noJakeTasks', 'Running jake --tasks didn\\'t list any tasks. Did you run npm install?'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { config: null, stdout: this._stdout, stderr: this._stderr };\n\t\t\t}\n\t\t\tlet result: TaskConfig.ExternalTaskRunnerConfiguration = {\n\t\t\t\tversion: ProcessRunnerDetector.Version,\n\t\t\t\tcommand: command,\n\t\t\t\tisShellCommand: isShellCommand\n\t\t\t};\n\t\t\t// Hack. We need to remove this.\n\t\t\tif (command === 'gulp') {\n\t\t\t\tresult.args = ['--no-color'];\n\t\t\t}\n\t\t\tresult.tasks = this.createTaskDescriptions(tasks, problemMatchers, list);\n\t\t\treturn { config: result, stdout: this._stdout, stderr: this._stderr };\n\t\t}, (err: ErrorData) => {\n\t\t\tlet error = err.error;\n\t\t\tif ((<any>error).code === 'ENOENT') {\n\t\t\t\tif (command === 'gulp') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGulpProgram', 'Gulp is not installed on your system. Run npm install -g gulp to install it.'));\n\t\t\t\t} else if (command === 'jake') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noJakeProgram', 'Jake is not installed on your system. Run npm install -g jake to install it.'));\n\t\t\t\t} else if (command === 'grunt') {\n\t\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noGruntProgram', 'Grunt is not installed on your system. Run npm install -g grunt to install it.'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._stderr.push(nls.localize('TaskSystemDetector.noProgram', 'Program {0} was not found. Message is {1}', command, error ? error.message : ''));\n\t\t\t}\n\t\t\treturn { config: null, stdout: this._stdout, stderr: this._stderr };\n\t\t});\n\t}\n\n\tprivate createTaskDescriptions(tasks: string[], problemMatchers: string[], list: boolean): TaskConfig.CustomTask[] {\n\t\tlet taskConfigs: TaskConfig.CustomTask[] = [];\n\t\tif (list) {\n\t\t\ttasks.forEach((task) => {\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: task,\n\t\t\t\t\targs: []\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tlet taskInfos: TaskInfos = {\n\t\t\t\tbuild: { index: -1, exact: -1 },\n\t\t\t\ttest: { index: -1, exact: -1 }\n\t\t\t};\n\t\t\ttasks.forEach((task, index) => {\n\t\t\t\tthis.testBuild(taskInfos.build, task, index);\n\t\t\t\tthis.testTest(taskInfos.test, task, index);\n\t\t\t});\n\t\t\tif (taskInfos.build.index !== -1) {\n\t\t\t\tlet name = tasks[taskInfos.build.index];\n\t\t\t\tthis._stdout.push(nls.localize('TaskSystemDetector.buildTaskDetected', 'Build task named \\'{0}\\' detected.', name));\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: name,\n\t\t\t\t\targs: [],\n\t\t\t\t\tgroup: Tasks.TaskGroup.Build,\n\t\t\t\t\tproblemMatcher: problemMatchers\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (taskInfos.test.index !== -1) {\n\t\t\t\tlet name = tasks[taskInfos.test.index];\n\t\t\t\tthis._stdout.push(nls.localize('TaskSystemDetector.testTaskDetected', 'Test task named \\'{0}\\' detected.', name));\n\t\t\t\ttaskConfigs.push({\n\t\t\t\t\ttaskName: name,\n\t\t\t\t\targs: [],\n\t\t\t\t\tgroup: Tasks.TaskGroup.Test,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn taskConfigs;\n\t}\n\n\tprivate testBuild(taskInfo: TaskInfo, taskName: string, index: number): void {\n\t\tif (taskName === build) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 4;\n\t\t} else if ((Strings.startsWith(taskName, build) || Strings.endsWith(taskName, build)) && taskInfo.exact < 4) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 3;\n\t\t} else if (taskName.indexOf(build) !== -1 && taskInfo.exact < 3) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 2;\n\t\t} else if (taskName === defaultValue && taskInfo.exact < 2) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 1;\n\t\t}\n\t}\n\n\tprivate testTest(taskInfo: TaskInfo, taskName: string, index: number): void {\n\t\tif (taskName === test) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 3;\n\t\t} else if ((Strings.startsWith(taskName, test) || Strings.endsWith(taskName, test)) && taskInfo.exact < 3) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 2;\n\t\t} else if (taskName.indexOf(test) !== -1 && taskInfo.exact < 2) {\n\t\t\ttaskInfo.index = index;\n\t\t\ttaskInfo.exact = 1;\n\t\t}\n\t}\n}\n"]}]}