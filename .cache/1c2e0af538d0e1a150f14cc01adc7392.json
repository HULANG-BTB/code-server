{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostWindow.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostWindow.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"../common/extHost.protocol\", \"vs/base/common/network\", \"vs/base/common/strings\"], function (require, exports, event_1, extHost_protocol_1, network_1, strings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostWindow {\n        constructor(mainContext) {\n            this._onDidChangeWindowState = new event_1.Emitter();\n            this.onDidChangeWindowState = this._onDidChangeWindowState.event;\n            this._state = ExtHostWindow.InitialState;\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadWindow);\n            this._proxy.$getWindowVisibility().then(isFocused => this.$onDidChangeWindowFocus(isFocused));\n        }\n        get state() { return this._state; }\n        $onDidChangeWindowFocus(focused) {\n            if (focused === this._state.focused) {\n                return;\n            }\n            this._state = Object.assign({}, this._state, { focused });\n            this._onDidChangeWindowState.fire(this._state);\n        }\n        openUri(uri) {\n            if (strings_1.isFalsyOrWhitespace(uri.scheme)) {\n                return Promise.reject('Invalid scheme - cannot be empty');\n            }\n            else if (uri.scheme === network_1.Schemas.command) {\n                return Promise.reject(`Invalid scheme '${uri.scheme}'`);\n            }\n            return this._proxy.$openUri(uri);\n        }\n    }\n    ExtHostWindow.InitialState = {\n        focused: true\n    };\n    exports.ExtHostWindow = ExtHostWindow;\n});\n",null]}