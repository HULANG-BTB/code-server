{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensionsFileTemplate.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/extensionManagement/common/extensionManagement\"], function (require, exports, nls_1, extensionManagement_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ExtensionsConfigurationSchemaId = 'vscode://schemas/extensions';\n    exports.ExtensionsConfigurationSchema = {\n        id: exports.ExtensionsConfigurationSchemaId,\n        allowComments: true,\n        type: 'object',\n        title: nls_1.localize('app.extensions.json.title', \"Extensions\"),\n        additionalProperties: false,\n        properties: {\n            recommendations: {\n                type: 'array',\n                description: nls_1.localize('app.extensions.json.recommendations', \"List of extensions which should be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.\"),\n                items: {\n                    type: 'string',\n                    pattern: extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN,\n                    errorMessage: nls_1.localize('app.extension.identifier.errorMessage', \"Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.\")\n                },\n            },\n            unwantedRecommendations: {\n                type: 'array',\n                description: nls_1.localize('app.extensions.json.unwantedRecommendations', \"List of extensions recommended by VS Code that should not be recommended for users of this workspace. The identifier of an extension is always '${publisher}.${name}'. For example: 'vscode.csharp'.\"),\n                items: {\n                    type: 'string',\n                    pattern: extensionManagement_1.EXTENSION_IDENTIFIER_PATTERN,\n                    errorMessage: nls_1.localize('app.extension.identifier.errorMessage', \"Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.\")\n                },\n            },\n        }\n    };\n    exports.ExtensionsConfigurationInitialContent = [\n        '{',\n        '\\t// See http://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.',\n        '\\t// Extension identifier format: ${publisher}.${name}. Example: vscode.csharp',\n        '',\n        '\\t// List of extensions which should be recommended for users of this workspace.',\n        '\\t\"recommendations\": [',\n        '\\t\\t',\n        '\\t],',\n        '\\t// List of extensions recommended by VS Code that should not be recommended for users of this workspace.',\n        '\\t\"unwantedRecommendations\": [',\n        '\\t\\t',\n        '\\t]',\n        '}'\n    ].join('\\n');\n});\n",null]}