{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors_1 = require(\"vs/base/common/errors\");\nvar LazyPromise = /** @class */ (function () {\n    function LazyPromise() {\n        this._actual = null;\n        this._actualOk = null;\n        this._actualErr = null;\n        this._hasValue = false;\n        this._value = null;\n        this._hasErr = false;\n        this._err = null;\n    }\n    LazyPromise.prototype._ensureActual = function () {\n        var _this = this;\n        if (!this._actual) {\n            this._actual = new Promise(function (c, e) {\n                _this._actualOk = c;\n                _this._actualErr = e;\n                if (_this._hasValue) {\n                    _this._actualOk(_this._value);\n                }\n                if (_this._hasErr) {\n                    _this._actualErr(_this._err);\n                }\n            });\n        }\n        return this._actual;\n    };\n    LazyPromise.prototype.resolveOk = function (value) {\n        if (this._hasValue || this._hasErr) {\n            return;\n        }\n        this._hasValue = true;\n        this._value = value;\n        if (this._actual) {\n            this._actualOk(value);\n        }\n    };\n    LazyPromise.prototype.resolveErr = function (err) {\n        if (this._hasValue || this._hasErr) {\n            return;\n        }\n        this._hasErr = true;\n        this._err = err;\n        if (this._actual) {\n            this._actualErr(err);\n        }\n        else {\n            // If nobody's listening at this point, it is safe to assume they never will,\n            // since resolving this promise is always \"async\"\n            errors_1.onUnexpectedError(err);\n        }\n    };\n    LazyPromise.prototype.then = function (success, error) {\n        return this._ensureActual().then(success, error);\n    };\n    LazyPromise.prototype.catch = function (error) {\n        return this._ensureActual().then(undefined, error);\n    };\n    LazyPromise.prototype.finally = function (callback) {\n        return this._ensureActual().finally(callback);\n    };\n    return LazyPromise;\n}());\nexports.LazyPromise = LazyPromise;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/lazyPromise.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gDAA0D;AAE1D;IAYC;QACC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEO,mCAAa,GAArB;QAAA,iBAgBC;QAfA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClB,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAM,UAAC,CAAC,EAAE,CAAC;gBACpC,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC;gBACnB,KAAI,CAAC,UAAU,GAAG,CAAC,CAAC;gBAEpB,IAAI,KAAI,CAAC,SAAS,EAAE;oBACnB,KAAI,CAAC,SAAS,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;iBAC5B;gBAED,IAAI,KAAI,CAAC,OAAO,EAAE;oBACjB,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;iBAC3B;YACF,CAAC,CAAC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAEM,+BAAS,GAAhB,UAAiB,KAAU;QAC1B,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,OAAO;SACP;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,SAAU,CAAC,KAAK,CAAC,CAAC;SACvB;IACF,CAAC;IAEM,gCAAU,GAAjB,UAAkB,GAAQ;QACzB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE;YACnC,OAAO;SACP;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,UAAW,CAAC,GAAG,CAAC,CAAC;SACtB;aAAM;YACN,6EAA6E;YAC7E,iDAAiD;YACjD,0BAAiB,CAAC,GAAG,CAAC,CAAC;SACvB;IACF,CAAC;IAEM,0BAAI,GAAX,UAAY,OAAY,EAAE,KAAU;QACnC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,2BAAK,GAAZ,UAAa,KAAU;QACtB,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,6BAAO,GAAd,UAAe,QAAoB;QAClC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/C,CAAC;IACF,kBAAC;AAAD,CAAC,AAjFD,IAiFC;AAjFY,kCAAW","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nexport class LazyPromise implements Promise<any> {\n\n\tprivate _actual: Promise<any> | null;\n\tprivate _actualOk: ((value?: any) => any) | null;\n\tprivate _actualErr: ((err?: any) => any) | null;\n\n\tprivate _hasValue: boolean;\n\tprivate _value: any;\n\n\tprivate _hasErr: boolean;\n\tprivate _err: any;\n\n\tconstructor() {\n\t\tthis._actual = null;\n\t\tthis._actualOk = null;\n\t\tthis._actualErr = null;\n\t\tthis._hasValue = false;\n\t\tthis._value = null;\n\t\tthis._hasErr = false;\n\t\tthis._err = null;\n\t}\n\n\tprivate _ensureActual(): Promise<any> {\n\t\tif (!this._actual) {\n\t\t\tthis._actual = new Promise<any>((c, e) => {\n\t\t\t\tthis._actualOk = c;\n\t\t\t\tthis._actualErr = e;\n\n\t\t\t\tif (this._hasValue) {\n\t\t\t\t\tthis._actualOk(this._value);\n\t\t\t\t}\n\n\t\t\t\tif (this._hasErr) {\n\t\t\t\t\tthis._actualErr(this._err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn this._actual;\n\t}\n\n\tpublic resolveOk(value: any): void {\n\t\tif (this._hasValue || this._hasErr) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hasValue = true;\n\t\tthis._value = value;\n\n\t\tif (this._actual) {\n\t\t\tthis._actualOk!(value);\n\t\t}\n\t}\n\n\tpublic resolveErr(err: any): void {\n\t\tif (this._hasValue || this._hasErr) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hasErr = true;\n\t\tthis._err = err;\n\n\t\tif (this._actual) {\n\t\t\tthis._actualErr!(err);\n\t\t} else {\n\t\t\t// If nobody's listening at this point, it is safe to assume they never will,\n\t\t\t// since resolving this promise is always \"async\"\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n\n\tpublic then(success: any, error: any): any {\n\t\treturn this._ensureActual().then(success, error);\n\t}\n\n\tpublic catch(error: any): any {\n\t\treturn this._ensureActual().then(undefined, error);\n\t}\n\n\tpublic finally(callback: () => void): any {\n\t\treturn this._ensureActual().finally(callback);\n\t}\n}\n"]}]}