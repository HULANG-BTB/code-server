{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!../browser/media/debug.contribution\");\nrequire(\"vs/css!../browser/media/debugHover\");\nvar nls = require(\"vs/nls\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar statusbar_1 = require(\"vs/workbench/browser/parts/statusbar/statusbar\");\nvar statusbar_2 = require(\"vs/platform/statusbar/common/statusbar\");\nvar breakpointsView_1 = require(\"vs/workbench/contrib/debug/browser/breakpointsView\");\nvar callStackView_1 = require(\"vs/workbench/contrib/debug/browser/callStackView\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar debugEditorModelManager_1 = require(\"vs/workbench/contrib/debug/browser/debugEditorModelManager\");\nvar debugActions_1 = require(\"vs/workbench/contrib/debug/browser/debugActions\");\nvar debugToolBar_1 = require(\"vs/workbench/contrib/debug/browser/debugToolBar\");\nvar service = require(\"vs/workbench/contrib/debug/electron-browser/debugService\");\nvar viewlet_2 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar debugCommands_1 = require(\"vs/workbench/contrib/debug/browser/debugCommands\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar statusbarColorProvider_1 = require(\"vs/workbench/contrib/debug/browser/statusbarColorProvider\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar debugViewlet_1 = require(\"vs/workbench/contrib/debug/browser/debugViewlet\");\nvar debugQuickOpen_1 = require(\"vs/workbench/contrib/debug/browser/debugQuickOpen\");\nvar debugStatus_1 = require(\"vs/workbench/contrib/debug/browser/debugStatus\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar configuration_1 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar loadedScriptsView_1 = require(\"vs/workbench/contrib/debug/browser/loadedScriptsView\");\nvar debugEditorActions_1 = require(\"vs/workbench/contrib/debug/browser/debugEditorActions\");\nvar watchExpressionsView_1 = require(\"vs/workbench/contrib/debug/browser/watchExpressionsView\");\nvar variablesView_1 = require(\"vs/workbench/contrib/debug/browser/variablesView\");\nvar repl_1 = require(\"vs/workbench/contrib/debug/browser/repl\");\nvar debugContentProvider_1 = require(\"vs/workbench/contrib/debug/common/debugContentProvider\");\nvar OpenDebugViewletAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenDebugViewletAction, _super);\n    function OpenDebugViewletAction(id, label, viewletService, editorGroupService, layoutService) {\n        return _super.call(this, id, label, debug_1.VIEWLET_ID, viewletService, editorGroupService, layoutService) || this;\n    }\n    OpenDebugViewletAction.ID = debug_1.VIEWLET_ID;\n    OpenDebugViewletAction.LABEL = nls.localize('toggleDebugViewlet', \"Show Debug\");\n    OpenDebugViewletAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_2.IViewletService),\n        tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService)\n    ], OpenDebugViewletAction);\n    return OpenDebugViewletAction;\n}(viewlet_1.ShowViewletAction));\nvar OpenDebugPanelAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenDebugPanelAction, _super);\n    function OpenDebugPanelAction(id, label, panelService, layoutService) {\n        return _super.call(this, id, label, debug_1.REPL_ID, panelService, layoutService) || this;\n    }\n    OpenDebugPanelAction.ID = 'workbench.debug.action.toggleRepl';\n    OpenDebugPanelAction.LABEL = nls.localize('toggleDebugPanel', \"Debug Console\");\n    OpenDebugPanelAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService)\n    ], OpenDebugPanelAction);\n    return OpenDebugPanelAction;\n}(panel_1.TogglePanelAction));\n// register viewlet\nplatform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor(debugViewlet_1.DebugViewlet, debug_1.VIEWLET_ID, nls.localize('debug', \"Debug\"), 'debug', 3));\nvar openViewletKb = {\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_D\n};\nvar openPanelKb = {\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Y\n};\n// register repl panel\nplatform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor(repl_1.Repl, debug_1.REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'), 'repl', 30, OpenDebugPanelAction.ID));\nplatform_1.Registry.as(panel_1.Extensions.Panels).setDefaultPanelId(debug_1.REPL_ID);\n// Register default debug views\nvar viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\nviewsRegistry.registerViews([{ id: debug_1.VARIABLES_VIEW_ID, name: nls.localize('variables', \"Variables\"), ctorDescriptor: { ctor: variablesView_1.VariablesView }, order: 10, weight: 40, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' } }], debug_1.VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: debug_1.WATCH_VIEW_ID, name: nls.localize('watch', \"Watch\"), ctorDescriptor: { ctor: watchExpressionsView_1.WatchExpressionsView }, order: 20, weight: 10, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' } }], debug_1.VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: debug_1.CALLSTACK_VIEW_ID, name: nls.localize('callStack', \"Call Stack\"), ctorDescriptor: { ctor: callStackView_1.CallStackView }, order: 30, weight: 30, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' } }], debug_1.VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: debug_1.BREAKPOINTS_VIEW_ID, name: nls.localize('breakpoints', \"Breakpoints\"), ctorDescriptor: { ctor: breakpointsView_1.BreakpointsView }, order: 40, weight: 20, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' } }], debug_1.VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: debug_1.LOADED_SCRIPTS_VIEW_ID, name: nls.localize('loadedScripts', \"Loaded Scripts\"), ctorDescriptor: { ctor: loadedScriptsView_1.LoadedScriptsView }, order: 35, weight: 5, canToggleVisibility: true, collapsed: true, when: debug_1.CONTEXT_LOADED_SCRIPTS_SUPPORTED }], debug_1.VIEW_CONTAINER);\ndebugCommands_1.registerCommands();\n// register action to open viewlet\nvar registry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugPanelAction, OpenDebugPanelAction.ID, OpenDebugPanelAction.LABEL, openPanelKb), 'View: Debug Console', nls.localize('view', \"View\"));\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(OpenDebugViewletAction, OpenDebugViewletAction.ID, OpenDebugViewletAction.LABEL, openViewletKb), 'View: Show Debug', nls.localize('view', \"View\"));\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugEditorModelManager_1.DebugEditorModelManager, lifecycle_1.LifecyclePhase.Restored);\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugToolBar_1.DebugToolBar, lifecycle_1.LifecyclePhase.Restored);\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(debugContentProvider_1.DebugContentProvider, lifecycle_1.LifecyclePhase.Eventually);\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(statusbarColorProvider_1.StatusBarColorProvider, lifecycle_1.LifecyclePhase.Eventually);\nvar debugCategory = nls.localize('debugCategory', \"Debug\");\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.StartAction, debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL, { primary: keyCodes_1.KeyCode.F5 }, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Debugging', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ConfigureAction, debugActions_1.ConfigureAction.ID, debugActions_1.ConfigureAction.LABEL), 'Debug: Open launch.json', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.AddFunctionBreakpointAction, debugActions_1.AddFunctionBreakpointAction.ID, debugActions_1.AddFunctionBreakpointAction.LABEL), 'Debug: Add Function Breakpoint', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.ReapplyBreakpointsAction, debugActions_1.ReapplyBreakpointsAction.ID, debugActions_1.ReapplyBreakpointsAction.LABEL), 'Debug: Reapply All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RunAction, debugActions_1.RunAction.ID, debugActions_1.RunAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F5, mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.F5 } }, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Without Debugging', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.RemoveAllBreakpointsAction, debugActions_1.RemoveAllBreakpointsAction.ID, debugActions_1.RemoveAllBreakpointsAction.LABEL), 'Debug: Remove All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.EnableAllBreakpointsAction, debugActions_1.EnableAllBreakpointsAction.ID, debugActions_1.EnableAllBreakpointsAction.LABEL), 'Debug: Enable All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.DisableAllBreakpointsAction, debugActions_1.DisableAllBreakpointsAction.ID, debugActions_1.DisableAllBreakpointsAction.LABEL), 'Debug: Disable All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(debugActions_1.SelectAndStartAction, debugActions_1.SelectAndStartAction.ID, debugActions_1.SelectAndStartAction.LABEL), 'Debug: Select and Start Debugging', debugCategory);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(repl_1.ClearReplAction, repl_1.ClearReplAction.ID, repl_1.ClearReplAction.LABEL), 'Debug: Clear Console', debugCategory);\nvar registerDebugCommandPaletteItem = function (id, title, when, precondition) {\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n        when: when,\n        command: {\n            id: id,\n            title: \"Debug: \" + title,\n            precondition: precondition\n        }\n    });\n};\nvar restartLabel = nls.localize('restartDebug', \"Restart\");\nvar stepOverLabel = nls.localize('stepOverDebug', \"Step Over\");\nvar stepIntoLabel = nls.localize('stepIntoDebug', \"Step Into\");\nvar stepOutLabel = nls.localize('stepOutDebug', \"Step Out\");\nvar pauseLabel = nls.localize('pauseDebug', \"Pause\");\nvar disconnectLabel = nls.localize('disconnect', \"Disconnect\");\nvar stopLabel = nls.localize('stop', \"Stop\");\nvar continueLabel = nls.localize('continueDebug', \"Continue\");\nregisterDebugCommandPaletteItem(debugCommands_1.RESTART_SESSION_ID, restartLabel);\nregisterDebugCommandPaletteItem(debugCommands_1.TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), debug_1.CONTEXT_IN_DEBUG_MODE);\nregisterDebugCommandPaletteItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(debugCommands_1.PAUSE_ID, pauseLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('running'));\nregisterDebugCommandPaletteItem(debugCommands_1.DISCONNECT_ID, disconnectLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH);\nregisterDebugCommandPaletteItem(debugCommands_1.STOP_ID, stopLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\nregisterDebugCommandPaletteItem(debugCommands_1.CONTINUE_ID, continueLabel, debug_1.CONTEXT_IN_DEBUG_MODE, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(debugCommands_1.FOCUS_REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus on Debug Console View'));\n// Register Quick Open\n(platform_1.Registry.as(quickopen_1.Extensions.Quickopen)).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(debugQuickOpen_1.DebugQuickOpenHandler, debugQuickOpen_1.DebugQuickOpenHandler.ID, 'debug ', 'inLaunchConfigurationsPicker', nls.localize('debugCommands', \"Debug Configuration\")));\n// register service\nextensions_1.registerSingleton(debug_1.IDebugService, service.DebugService);\n// Register configuration\nvar configurationRegistry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    id: 'debug',\n    order: 20,\n    title: nls.localize('debugConfigurationTitle', \"Debug\"),\n    type: 'object',\n    properties: {\n        'debug.allowBreakpointsEverywhere': {\n            type: 'boolean',\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, \"Allow setting breakpoints in any file.\"),\n            default: false\n        },\n        'debug.openExplorerOnEnd': {\n            type: 'boolean',\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, \"Automatically open the explorer view at the end of a debug session.\"),\n            default: false\n        },\n        'debug.inlineValues': {\n            type: 'boolean',\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, \"Show variable values inline in editor while debugging.\"),\n            default: false\n        },\n        'debug.toolBarLocation': {\n            enum: ['floating', 'docked', 'hidden'],\n            markdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, \"Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.\"),\n            default: 'floating'\n        },\n        'debug.showInStatusBar': {\n            enum: ['never', 'always', 'onFirstSessionStart'],\n            enumDescriptions: [nls.localize('never', \"Never show debug in status bar\"), nls.localize('always', \"Always show debug in status bar\"), nls.localize('onFirstSessionStart', \"Show debug in status bar only after debug was started for the first time\")],\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, \"Controls when the debug status bar should be visible.\"),\n            default: 'onFirstSessionStart'\n        },\n        'debug.internalConsoleOptions': debug_1.INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n        'debug.openDebug': {\n            enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart', 'openOnDebugBreak'],\n            default: 'openOnSessionStart',\n            description: nls.localize('openDebug', \"Controls when the debug view should open.\")\n        },\n        'debug.enableAllHovers': {\n            type: 'boolean',\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'enableAllHovers' }, \"Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.\"),\n            default: false\n        },\n        'debug.console.fontSize': {\n            type: 'number',\n            description: nls.localize('debug.console.fontSize', \"Controls the font size in pixels in the debug console.\"),\n            default: browser_1.isMacintosh ? 12 : 14,\n        },\n        'debug.console.fontFamily': {\n            type: 'string',\n            description: nls.localize('debug.console.fontFamily', \"Controls the font family in the debug console.\"),\n            default: 'default'\n        },\n        'debug.console.lineHeight': {\n            type: 'number',\n            description: nls.localize('debug.console.lineHeight', \"Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.\"),\n            default: 0\n        },\n        'launch': {\n            type: 'object',\n            description: nls.localize({ comment: ['This is the description for a setting'], key: 'launch' }, \"Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.\"),\n            default: { configurations: [], compounds: [] },\n            $ref: configuration_1.launchSchemaId\n        }\n    }\n});\n// Register Debug Status\nvar statusBar = platform_1.Registry.as(statusbar_1.Extensions.Statusbar);\nstatusBar.registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(debugStatus_1.DebugStatus, statusbar_2.StatusbarAlignment.LEFT, 30 /* Low Priority */));\n// Debug toolbar\nvar registerDebugToolBarItem = function (id, title, icon, order, when, precondition) {\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.DebugToolBar, {\n        group: 'navigation',\n        when: when,\n        order: order,\n        command: {\n            id: id,\n            title: title,\n            iconLocation: {\n                light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/debug/browser/media/\" + icon + \".svg\")),\n                dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/debug/browser/media/\" + icon + \"-inverse.svg\"))\n            },\n            precondition: precondition\n        }\n    });\n};\nregisterDebugToolBarItem(debugCommands_1.CONTINUE_ID, continueLabel, 'continue', 10, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.PAUSE_ID, pauseLabel, 'pause', 10, debug_1.CONTEXT_DEBUG_STATE.notEqualsTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.STOP_ID, stopLabel, 'stop', 70, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\nregisterDebugToolBarItem(debugCommands_1.DISCONNECT_ID, disconnectLabel, 'disconnect', 70, debug_1.CONTEXT_FOCUSED_SESSION_IS_ATTACH);\nregisterDebugToolBarItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, 'step-over', 20, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 'step-into', 30, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, 'step-out', 40, undefined, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.RESTART_SESSION_ID, restartLabel, 'restart', 60);\nregisterDebugToolBarItem(debugCommands_1.STEP_BACK_ID, nls.localize('stepBackDebug', \"Step Back\"), 'step-back', 50, debug_1.CONTEXT_STEP_BACK_SUPPORTED, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(debugCommands_1.REVERSE_CONTINUE_ID, nls.localize('reverseContinue', \"Reverse\"), 'reverse-continue', 60, debug_1.CONTEXT_STEP_BACK_SUPPORTED, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n// Debug callstack context menu\nvar registerDebugCallstackItem = function (id, title, order, when, precondition, group) {\n    if (group === void 0) { group = 'navigation'; }\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.DebugCallStackContext, {\n        group: group,\n        when: when,\n        order: order,\n        command: {\n            id: id,\n            title: title,\n            precondition: precondition\n        }\n    });\n};\nregisterDebugCallstackItem(debugCommands_1.RESTART_SESSION_ID, restartLabel, 10, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\nregisterDebugCallstackItem(debugCommands_1.STOP_ID, stopLabel, 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\nregisterDebugCallstackItem(debugCommands_1.PAUSE_ID, pauseLabel, 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('running')));\nregisterDebugCallstackItem(debugCommands_1.CONTINUE_ID, continueLabel, 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')));\nregisterDebugCallstackItem(debugCommands_1.STEP_OVER_ID, stepOverLabel, 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 30, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(debugCommands_1.STEP_OUT_ID, stepOutLabel, 40, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(debugCommands_1.TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), 10, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination');\nregisterDebugCallstackItem(debugCommands_1.RESTART_FRAME_ID, nls.localize('restartFrame', \"Restart Frame\"), 10, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), debug_1.CONTEXT_RESTART_FRAME_SUPPORTED));\nregisterDebugCallstackItem(debugCommands_1.COPY_STACK_TRACE_ID, nls.localize('copyStackTrace', \"Copy Call Stack\"), 20, debug_1.CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'));\n// View menu\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n    group: '3_views',\n    command: {\n        id: debug_1.VIEWLET_ID,\n        title: nls.localize({ key: 'miViewDebug', comment: ['&& denotes a mnemonic'] }, \"&&Debug\")\n    },\n    order: 4\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n    group: '4_panels',\n    command: {\n        id: OpenDebugPanelAction.ID,\n        title: nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, \"De&&bug Console\")\n    },\n    order: 2\n});\n// Debug menu\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '1_debug',\n    command: {\n        id: debugActions_1.StartAction.ID,\n        title: nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Start Debugging\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '1_debug',\n    command: {\n        id: debugActions_1.RunAction.ID,\n        title: nls.localize({ key: 'miStartWithoutDebugging', comment: ['&& denotes a mnemonic'] }, \"Start &&Without Debugging\")\n    },\n    order: 2\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '1_debug',\n    command: {\n        id: debugCommands_1.STOP_ID,\n        title: nls.localize({ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Stop Debugging\"),\n        precondition: debug_1.CONTEXT_IN_DEBUG_MODE\n    },\n    order: 3\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '1_debug',\n    command: {\n        id: debugCommands_1.RESTART_SESSION_ID,\n        title: nls.localize({ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, \"&&Restart Debugging\"),\n        precondition: debug_1.CONTEXT_IN_DEBUG_MODE\n    },\n    order: 4\n});\n// Configuration\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '2_configuration',\n    command: {\n        id: debugActions_1.ConfigureAction.ID,\n        title: nls.localize({ key: 'miOpenConfigurations', comment: ['&& denotes a mnemonic'] }, \"Open &&Configurations\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '2_configuration',\n    command: {\n        id: debugCommands_1.ADD_CONFIGURATION_ID,\n        title: nls.localize({ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, \"A&&dd Configuration...\")\n    },\n    order: 2\n});\n// Step Commands\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '3_step',\n    command: {\n        id: debugCommands_1.STEP_OVER_ID,\n        title: nls.localize({ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, \"Step &&Over\"),\n        precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '3_step',\n    command: {\n        id: debugCommands_1.STEP_INTO_ID,\n        title: nls.localize({ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, \"Step &&Into\"),\n        precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n    },\n    order: 2\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '3_step',\n    command: {\n        id: debugCommands_1.STEP_OUT_ID,\n        title: nls.localize({ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, \"Step O&&ut\"),\n        precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n    },\n    order: 3\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '3_step',\n    command: {\n        id: debugCommands_1.CONTINUE_ID,\n        title: nls.localize({ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, \"&&Continue\"),\n        precondition: debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n    },\n    order: 4\n});\n// New Breakpoints\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '4_new_breakpoint',\n    command: {\n        id: debugEditorActions_1.TOGGLE_BREAKPOINT_ID,\n        title: nls.localize({ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Breakpoint\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n    group: '1_breakpoints',\n    command: {\n        id: debugEditorActions_1.TOGGLE_CONDITIONAL_BREAKPOINT_ID,\n        title: nls.localize({ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Conditional Breakpoint...\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n    group: '1_breakpoints',\n    command: {\n        id: debugCommands_1.TOGGLE_INLINE_BREAKPOINT_ID,\n        title: nls.localize({ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Inline Breakp&&oint\")\n    },\n    order: 2\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n    group: '1_breakpoints',\n    command: {\n        id: debugActions_1.AddFunctionBreakpointAction.ID,\n        title: nls.localize({ key: 'miFunctionBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Function Breakpoint...\")\n    },\n    order: 3\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarNewBreakpointMenu, {\n    group: '1_breakpoints',\n    command: {\n        id: debugEditorActions_1.TOGGLE_LOG_POINT_ID,\n        title: nls.localize({ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, \"&&Logpoint...\")\n    },\n    order: 4\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '4_new_breakpoint',\n    title: nls.localize({ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&New Breakpoint\"),\n    submenu: actions_1.MenuId.MenubarNewBreakpointMenu,\n    order: 2\n});\n// Modify Breakpoints\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '5_breakpoints',\n    command: {\n        id: debugActions_1.EnableAllBreakpointsAction.ID,\n        title: nls.localize({ key: 'miEnableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"&&Enable All Breakpoints\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '5_breakpoints',\n    command: {\n        id: debugActions_1.DisableAllBreakpointsAction.ID,\n        title: nls.localize({ key: 'miDisableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Disable A&&ll Breakpoints\")\n    },\n    order: 2\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: '5_breakpoints',\n    command: {\n        id: debugActions_1.RemoveAllBreakpointsAction.ID,\n        title: nls.localize({ key: 'miRemoveAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Remove &&All Breakpoints\")\n    },\n    order: 3\n});\n// Install Debuggers\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarDebugMenu, {\n    group: 'z_install',\n    command: {\n        id: 'debug.installAdditionalDebuggers',\n        title: nls.localize({ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, \"&&Install Additional Debuggers...\")\n    },\n    order: 1\n});\n// Touch Bar\nif (browser_1.isMacintosh) {\n    var registerTouchBarEntry = function (id, title, order, when, icon) {\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.TouchBarContext, {\n            command: {\n                id: id, title: title, iconLocation: { dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/debug/electron-browser/media/\" + icon)) }\n            },\n            when: when,\n            group: '9_debug',\n            order: order\n        });\n    };\n    registerTouchBarEntry(debugActions_1.StartAction.ID, debugActions_1.StartAction.LABEL, 0, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-tb.png');\n    registerTouchBarEntry(debugActions_1.RunAction.ID, debugActions_1.RunAction.LABEL, 1, debug_1.CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-without-debugging-tb.png');\n    registerTouchBarEntry(debugCommands_1.CONTINUE_ID, continueLabel, 0, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'continue-tb.png');\n    registerTouchBarEntry(debugCommands_1.PAUSE_ID, pauseLabel, 1, contextkey_1.ContextKeyExpr.and(debug_1.CONTEXT_IN_DEBUG_MODE, contextkey_1.ContextKeyExpr.notEquals('debugState', 'stopped')), 'pause-tb.png');\n    registerTouchBarEntry(debugCommands_1.STEP_OVER_ID, stepOverLabel, 2, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepover-tb.png');\n    registerTouchBarEntry(debugCommands_1.STEP_INTO_ID, stepIntoLabel, 3, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepinto-tb.png');\n    registerTouchBarEntry(debugCommands_1.STEP_OUT_ID, stepOutLabel, 4, debug_1.CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepout-tb.png');\n    registerTouchBarEntry(debugCommands_1.RESTART_SESSION_ID, restartLabel, 5, debug_1.CONTEXT_IN_DEBUG_MODE, 'restart-tb.png');\n    registerTouchBarEntry(debugCommands_1.STOP_ID, stopLabel, 6, debug_1.CONTEXT_IN_DEBUG_MODE, 'stop-tb.png');\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debug.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!../browser/media/debug.contribution';\nimport 'vs/css!../browser/media/debugHover';\nimport * as nls from 'vs/nls';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { SyncActionDescriptor, MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchActionRegistryExtensions } from 'vs/workbench/common/actions';\nimport { ShowViewletAction, Extensions as ViewletExtensions, ViewletRegistry, ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { TogglePanelAction, Extensions as PanelExtensions, PanelRegistry, PanelDescriptor } from 'vs/workbench/browser/panel';\nimport { StatusbarItemDescriptor, IStatusbarRegistry, Extensions as StatusExtensions } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { StatusbarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { BreakpointsView } from 'vs/workbench/contrib/debug/browser/breakpointsView';\nimport { CallStackView } from 'vs/workbench/contrib/debug/browser/callStackView';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport {\n\tIDebugService, VIEWLET_ID, REPL_ID, CONTEXT_IN_DEBUG_MODE, INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n\tCONTEXT_DEBUG_STATE, VARIABLES_VIEW_ID, CALLSTACK_VIEW_ID, WATCH_VIEW_ID, BREAKPOINTS_VIEW_ID, VIEW_CONTAINER, LOADED_SCRIPTS_VIEW_ID, CONTEXT_LOADED_SCRIPTS_SUPPORTED, CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_CALLSTACK_ITEM_TYPE, CONTEXT_RESTART_FRAME_SUPPORTED,\n} from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { DebugEditorModelManager } from 'vs/workbench/contrib/debug/browser/debugEditorModelManager';\nimport { StartAction, AddFunctionBreakpointAction, ConfigureAction, DisableAllBreakpointsAction, EnableAllBreakpointsAction, RemoveAllBreakpointsAction, RunAction, ReapplyBreakpointsAction, SelectAndStartAction } from 'vs/workbench/contrib/debug/browser/debugActions';\nimport { DebugToolBar } from 'vs/workbench/contrib/debug/browser/debugToolBar';\nimport * as service from 'vs/workbench/contrib/debug/electron-browser/debugService';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { registerCommands, ADD_CONFIGURATION_ID, TOGGLE_INLINE_BREAKPOINT_ID, COPY_STACK_TRACE_ID, REVERSE_CONTINUE_ID, STEP_BACK_ID, RESTART_SESSION_ID, TERMINATE_THREAD_ID, STEP_OVER_ID, STEP_INTO_ID, STEP_OUT_ID, PAUSE_ID, DISCONNECT_ID, STOP_ID, RESTART_FRAME_ID, CONTINUE_ID, FOCUS_REPL_ID } from 'vs/workbench/contrib/debug/browser/debugCommands';\nimport { IQuickOpenRegistry, Extensions as QuickOpenExtensions, QuickOpenHandlerDescriptor } from 'vs/workbench/browser/quickopen';\nimport { StatusBarColorProvider } from 'vs/workbench/contrib/debug/browser/statusbarColorProvider';\nimport { IViewsRegistry, Extensions as ViewExtensions } from 'vs/workbench/common/views';\nimport { isMacintosh } from 'vs/base/browser/browser';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { URI } from 'vs/base/common/uri';\nimport { DebugViewlet } from 'vs/workbench/contrib/debug/browser/debugViewlet';\nimport { DebugQuickOpenHandler } from 'vs/workbench/contrib/debug/browser/debugQuickOpen';\nimport { DebugStatus } from 'vs/workbench/contrib/debug/browser/debugStatus';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { LoadedScriptsView } from 'vs/workbench/contrib/debug/browser/loadedScriptsView';\nimport { TOGGLE_LOG_POINT_ID, TOGGLE_CONDITIONAL_BREAKPOINT_ID, TOGGLE_BREAKPOINT_ID } from 'vs/workbench/contrib/debug/browser/debugEditorActions';\nimport { WatchExpressionsView } from 'vs/workbench/contrib/debug/browser/watchExpressionsView';\nimport { VariablesView } from 'vs/workbench/contrib/debug/browser/variablesView';\nimport { ClearReplAction, Repl } from 'vs/workbench/contrib/debug/browser/repl';\nimport { DebugContentProvider } from 'vs/workbench/contrib/debug/common/debugContentProvider';\n\nclass OpenDebugViewletAction extends ShowViewletAction {\n\tpublic static readonly ID = VIEWLET_ID;\n\tpublic static readonly LABEL = nls.localize('toggleDebugViewlet', \"Show Debug\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IViewletService viewletService: IViewletService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label, VIEWLET_ID, viewletService, editorGroupService, layoutService);\n\t}\n}\n\nclass OpenDebugPanelAction extends TogglePanelAction {\n\tpublic static readonly ID = 'workbench.debug.action.toggleRepl';\n\tpublic static readonly LABEL = nls.localize('toggleDebugPanel', \"Debug Console\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t) {\n\t\tsuper(id, label, REPL_ID, panelService, layoutService);\n\t}\n}\n\n// register viewlet\nRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).registerViewlet(new ViewletDescriptor(\n\tDebugViewlet,\n\tVIEWLET_ID,\n\tnls.localize('debug', \"Debug\"),\n\t'debug',\n\t3\n));\n\nconst openViewletKb: IKeybindings = {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_D\n};\nconst openPanelKb: IKeybindings = {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Y\n};\n\n// register repl panel\nRegistry.as<PanelRegistry>(PanelExtensions.Panels).registerPanel(new PanelDescriptor(\n\tRepl,\n\tREPL_ID,\n\tnls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' }, 'Debug Console'),\n\t'repl',\n\t30,\n\tOpenDebugPanelAction.ID\n));\nRegistry.as<PanelRegistry>(PanelExtensions.Panels).setDefaultPanelId(REPL_ID);\n\n// Register default debug views\nconst viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\nviewsRegistry.registerViews([{ id: VARIABLES_VIEW_ID, name: nls.localize('variables', \"Variables\"), ctorDescriptor: { ctor: VariablesView }, order: 10, weight: 40, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' } }], VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: WATCH_VIEW_ID, name: nls.localize('watch', \"Watch\"), ctorDescriptor: { ctor: WatchExpressionsView }, order: 20, weight: 10, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' } }], VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: CALLSTACK_VIEW_ID, name: nls.localize('callStack', \"Call Stack\"), ctorDescriptor: { ctor: CallStackView }, order: 30, weight: 30, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' } }], VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: BREAKPOINTS_VIEW_ID, name: nls.localize('breakpoints', \"Breakpoints\"), ctorDescriptor: { ctor: BreakpointsView }, order: 40, weight: 20, canToggleVisibility: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' } }], VIEW_CONTAINER);\nviewsRegistry.registerViews([{ id: LOADED_SCRIPTS_VIEW_ID, name: nls.localize('loadedScripts', \"Loaded Scripts\"), ctorDescriptor: { ctor: LoadedScriptsView }, order: 35, weight: 5, canToggleVisibility: true, collapsed: true, when: CONTEXT_LOADED_SCRIPTS_SUPPORTED }], VIEW_CONTAINER);\n\nregisterCommands();\n\n// register action to open viewlet\nconst registry = Registry.as<IWorkbenchActionRegistry>(WorkbenchActionRegistryExtensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenDebugPanelAction, OpenDebugPanelAction.ID, OpenDebugPanelAction.LABEL, openPanelKb), 'View: Debug Console', nls.localize('view', \"View\"));\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenDebugViewletAction, OpenDebugViewletAction.ID, OpenDebugViewletAction.LABEL, openViewletKb), 'View: Show Debug', nls.localize('view', \"View\"));\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugEditorModelManager, LifecyclePhase.Restored);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugToolBar, LifecyclePhase.Restored);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(DebugContentProvider, LifecyclePhase.Eventually);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(StatusBarColorProvider, LifecyclePhase.Eventually);\n\nconst debugCategory = nls.localize('debugCategory', \"Debug\");\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(StartAction, StartAction.ID, StartAction.LABEL, { primary: KeyCode.F5 }, CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Debugging', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ConfigureAction, ConfigureAction.ID, ConfigureAction.LABEL), 'Debug: Open launch.json', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(AddFunctionBreakpointAction, AddFunctionBreakpointAction.ID, AddFunctionBreakpointAction.LABEL), 'Debug: Add Function Breakpoint', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ReapplyBreakpointsAction, ReapplyBreakpointsAction.ID, ReapplyBreakpointsAction.LABEL), 'Debug: Reapply All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(RunAction, RunAction.ID, RunAction.LABEL, { primary: KeyMod.CtrlCmd | KeyCode.F5, mac: { primary: KeyMod.WinCtrl | KeyCode.F5 } }, CONTEXT_IN_DEBUG_MODE.toNegated()), 'Debug: Start Without Debugging', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(RemoveAllBreakpointsAction, RemoveAllBreakpointsAction.ID, RemoveAllBreakpointsAction.LABEL), 'Debug: Remove All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(EnableAllBreakpointsAction, EnableAllBreakpointsAction.ID, EnableAllBreakpointsAction.LABEL), 'Debug: Enable All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(DisableAllBreakpointsAction, DisableAllBreakpointsAction.ID, DisableAllBreakpointsAction.LABEL), 'Debug: Disable All Breakpoints', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(SelectAndStartAction, SelectAndStartAction.ID, SelectAndStartAction.LABEL), 'Debug: Select and Start Debugging', debugCategory);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ClearReplAction, ClearReplAction.ID, ClearReplAction.LABEL), 'Debug: Clear Console', debugCategory);\n\nconst registerDebugCommandPaletteItem = (id: string, title: string, when?: ContextKeyExpr, precondition?: ContextKeyExpr) => {\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\twhen,\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle: `Debug: ${title}`,\n\t\t\tprecondition\n\t\t}\n\t});\n};\nconst restartLabel = nls.localize('restartDebug', \"Restart\");\nconst stepOverLabel = nls.localize('stepOverDebug', \"Step Over\");\nconst stepIntoLabel = nls.localize('stepIntoDebug', \"Step Into\");\nconst stepOutLabel = nls.localize('stepOutDebug', \"Step Out\");\nconst pauseLabel = nls.localize('pauseDebug', \"Pause\");\nconst disconnectLabel = nls.localize('disconnect', \"Disconnect\");\nconst stopLabel = nls.localize('stop', \"Stop\");\nconst continueLabel = nls.localize('continueDebug', \"Continue\");\nregisterDebugCommandPaletteItem(RESTART_SESSION_ID, restartLabel);\nregisterDebugCommandPaletteItem(TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), CONTEXT_IN_DEBUG_MODE);\nregisterDebugCommandPaletteItem(STEP_OVER_ID, stepOverLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(STEP_INTO_ID, stepIntoLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(STEP_OUT_ID, stepOutLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(PAUSE_ID, pauseLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('running'));\nregisterDebugCommandPaletteItem(DISCONNECT_ID, disconnectLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_FOCUSED_SESSION_IS_ATTACH);\nregisterDebugCommandPaletteItem(STOP_ID, stopLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\nregisterDebugCommandPaletteItem(CONTINUE_ID, continueLabel, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCommandPaletteItem(FOCUS_REPL_ID, nls.localize({ comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' }, 'Focus on Debug Console View'));\n\n// Register Quick Open\n(Registry.as<IQuickOpenRegistry>(QuickOpenExtensions.Quickopen)).registerQuickOpenHandler(\n\tnew QuickOpenHandlerDescriptor(\n\t\tDebugQuickOpenHandler,\n\t\tDebugQuickOpenHandler.ID,\n\t\t'debug ',\n\t\t'inLaunchConfigurationsPicker',\n\t\tnls.localize('debugCommands', \"Debug Configuration\")\n\t)\n);\n\n// register service\nregisterSingleton(IDebugService, service.DebugService);\n\n// Register configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\tid: 'debug',\n\torder: 20,\n\ttitle: nls.localize('debugConfigurationTitle', \"Debug\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'debug.allowBreakpointsEverywhere': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' }, \"Allow setting breakpoints in any file.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'debug.openExplorerOnEnd': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' }, \"Automatically open the explorer view at the end of a debug session.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'debug.inlineValues': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'inlineValues' }, \"Show variable values inline in editor while debugging.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'debug.toolBarLocation': {\n\t\t\tenum: ['floating', 'docked', 'hidden'],\n\t\t\tmarkdownDescription: nls.localize({ comment: ['This is the description for a setting'], key: 'toolBarLocation' }, \"Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.\"),\n\t\t\tdefault: 'floating'\n\t\t},\n\t\t'debug.showInStatusBar': {\n\t\t\tenum: ['never', 'always', 'onFirstSessionStart'],\n\t\t\tenumDescriptions: [nls.localize('never', \"Never show debug in status bar\"), nls.localize('always', \"Always show debug in status bar\"), nls.localize('onFirstSessionStart', \"Show debug in status bar only after debug was started for the first time\")],\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'showInStatusBar' }, \"Controls when the debug status bar should be visible.\"),\n\t\t\tdefault: 'onFirstSessionStart'\n\t\t},\n\t\t'debug.internalConsoleOptions': INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n\t\t'debug.openDebug': {\n\t\t\tenum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart', 'openOnDebugBreak'],\n\t\t\tdefault: 'openOnSessionStart',\n\t\t\tdescription: nls.localize('openDebug', \"Controls when the debug view should open.\")\n\t\t},\n\t\t'debug.enableAllHovers': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'enableAllHovers' }, \"Controls whether the non-debug hovers should be enabled while debugging. When enabled the hover providers will be called to provide a hover. Regular hovers will not be shown even if this setting is enabled.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'debug.console.fontSize': {\n\t\t\ttype: 'number',\n\t\t\tdescription: nls.localize('debug.console.fontSize', \"Controls the font size in pixels in the debug console.\"),\n\t\t\tdefault: isMacintosh ? 12 : 14,\n\t\t},\n\t\t'debug.console.fontFamily': {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('debug.console.fontFamily', \"Controls the font family in the debug console.\"),\n\t\t\tdefault: 'default'\n\t\t},\n\t\t'debug.console.lineHeight': {\n\t\t\ttype: 'number',\n\t\t\tdescription: nls.localize('debug.console.lineHeight', \"Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.\"),\n\t\t\tdefault: 0\n\t\t},\n\t\t'launch': {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize({ comment: ['This is the description for a setting'], key: 'launch' }, \"Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.\"),\n\t\t\tdefault: { configurations: [], compounds: [] },\n\t\t\t$ref: launchSchemaId\n\t\t}\n\t}\n});\n\n// Register Debug Status\nconst statusBar = Registry.as<IStatusbarRegistry>(StatusExtensions.Statusbar);\nstatusBar.registerStatusbarItem(new StatusbarItemDescriptor(DebugStatus, StatusbarAlignment.LEFT, 30 /* Low Priority */));\n\n// Debug toolbar\n\nconst registerDebugToolBarItem = (id: string, title: string, icon: string, order: number, when?: ContextKeyExpr, precondition?: ContextKeyExpr) => {\n\tMenuRegistry.appendMenuItem(MenuId.DebugToolBar, {\n\t\tgroup: 'navigation',\n\t\twhen,\n\t\torder,\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle,\n\t\t\ticonLocation: {\n\t\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/debug/browser/media/${icon}.svg`)),\n\t\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/debug/browser/media/${icon}-inverse.svg`))\n\t\t\t},\n\t\t\tprecondition\n\t\t}\n\t});\n};\n\nregisterDebugToolBarItem(CONTINUE_ID, continueLabel, 'continue', 10, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(PAUSE_ID, pauseLabel, 'pause', 10, CONTEXT_DEBUG_STATE.notEqualsTo('stopped'));\nregisterDebugToolBarItem(STOP_ID, stopLabel, 'stop', 70, CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated());\nregisterDebugToolBarItem(DISCONNECT_ID, disconnectLabel, 'disconnect', 70, CONTEXT_FOCUSED_SESSION_IS_ATTACH);\nregisterDebugToolBarItem(STEP_OVER_ID, stepOverLabel, 'step-over', 20, undefined, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(STEP_INTO_ID, stepIntoLabel, 'step-into', 30, undefined, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(STEP_OUT_ID, stepOutLabel, 'step-out', 40, undefined, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(RESTART_SESSION_ID, restartLabel, 'restart', 60);\nregisterDebugToolBarItem(STEP_BACK_ID, nls.localize('stepBackDebug', \"Step Back\"), 'step-back', 50, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugToolBarItem(REVERSE_CONTINUE_ID, nls.localize('reverseContinue', \"Reverse\"), 'reverse-continue', 60, CONTEXT_STEP_BACK_SUPPORTED, CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\n\n// Debug callstack context menu\nconst registerDebugCallstackItem = (id: string, title: string, order: number, when?: ContextKeyExpr, precondition?: ContextKeyExpr, group = 'navigation') => {\n\tMenuRegistry.appendMenuItem(MenuId.DebugCallStackContext, {\n\t\tgroup,\n\t\twhen,\n\t\torder,\n\t\tcommand: {\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tprecondition\n\t\t}\n\t});\n};\nregisterDebugCallstackItem(RESTART_SESSION_ID, restartLabel, 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\nregisterDebugCallstackItem(STOP_ID, stopLabel, 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session'));\nregisterDebugCallstackItem(PAUSE_ID, pauseLabel, 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('running')));\nregisterDebugCallstackItem(CONTINUE_ID, continueLabel, 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped')));\nregisterDebugCallstackItem(STEP_OVER_ID, stepOverLabel, 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(STEP_INTO_ID, stepIntoLabel, 30, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(STEP_OUT_ID, stepOutLabel, 40, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), CONTEXT_DEBUG_STATE.isEqualTo('stopped'));\nregisterDebugCallstackItem(TERMINATE_THREAD_ID, nls.localize('terminateThread', \"Terminate Thread\"), 10, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread'), undefined, 'termination');\nregisterDebugCallstackItem(RESTART_FRAME_ID, nls.localize('restartFrame', \"Restart Frame\"), 10, ContextKeyExpr.and(CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'), CONTEXT_RESTART_FRAME_SUPPORTED));\nregisterDebugCallstackItem(COPY_STACK_TRACE_ID, nls.localize('copyStackTrace', \"Copy Call Stack\"), 20, CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame'));\n\n// View menu\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '3_views',\n\tcommand: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: nls.localize({ key: 'miViewDebug', comment: ['&& denotes a mnemonic'] }, \"&&Debug\")\n\t},\n\torder: 4\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '4_panels',\n\tcommand: {\n\t\tid: OpenDebugPanelAction.ID,\n\t\ttitle: nls.localize({ key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] }, \"De&&bug Console\")\n\t},\n\torder: 2\n});\n\n// Debug menu\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '1_debug',\n\tcommand: {\n\t\tid: StartAction.ID,\n\t\ttitle: nls.localize({ key: 'miStartDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Start Debugging\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '1_debug',\n\tcommand: {\n\t\tid: RunAction.ID,\n\t\ttitle: nls.localize({ key: 'miStartWithoutDebugging', comment: ['&& denotes a mnemonic'] }, \"Start &&Without Debugging\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '1_debug',\n\tcommand: {\n\t\tid: STOP_ID,\n\t\ttitle: nls.localize({ key: 'miStopDebugging', comment: ['&& denotes a mnemonic'] }, \"&&Stop Debugging\"),\n\t\tprecondition: CONTEXT_IN_DEBUG_MODE\n\t},\n\torder: 3\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '1_debug',\n\tcommand: {\n\t\tid: RESTART_SESSION_ID,\n\t\ttitle: nls.localize({ key: 'miRestart Debugging', comment: ['&& denotes a mnemonic'] }, \"&&Restart Debugging\"),\n\t\tprecondition: CONTEXT_IN_DEBUG_MODE\n\t},\n\torder: 4\n});\n\n// Configuration\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '2_configuration',\n\tcommand: {\n\t\tid: ConfigureAction.ID,\n\t\ttitle: nls.localize({ key: 'miOpenConfigurations', comment: ['&& denotes a mnemonic'] }, \"Open &&Configurations\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '2_configuration',\n\tcommand: {\n\t\tid: ADD_CONFIGURATION_ID,\n\t\ttitle: nls.localize({ key: 'miAddConfiguration', comment: ['&& denotes a mnemonic'] }, \"A&&dd Configuration...\")\n\t},\n\torder: 2\n});\n\n// Step Commands\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '3_step',\n\tcommand: {\n\t\tid: STEP_OVER_ID,\n\t\ttitle: nls.localize({ key: 'miStepOver', comment: ['&& denotes a mnemonic'] }, \"Step &&Over\"),\n\t\tprecondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '3_step',\n\tcommand: {\n\t\tid: STEP_INTO_ID,\n\t\ttitle: nls.localize({ key: 'miStepInto', comment: ['&& denotes a mnemonic'] }, \"Step &&Into\"),\n\t\tprecondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '3_step',\n\tcommand: {\n\t\tid: STEP_OUT_ID,\n\t\ttitle: nls.localize({ key: 'miStepOut', comment: ['&& denotes a mnemonic'] }, \"Step O&&ut\"),\n\t\tprecondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n\t},\n\torder: 3\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '3_step',\n\tcommand: {\n\t\tid: CONTINUE_ID,\n\t\ttitle: nls.localize({ key: 'miContinue', comment: ['&& denotes a mnemonic'] }, \"&&Continue\"),\n\t\tprecondition: CONTEXT_DEBUG_STATE.isEqualTo('stopped')\n\t},\n\torder: 4\n});\n\n// New Breakpoints\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '4_new_breakpoint',\n\tcommand: {\n\t\tid: TOGGLE_BREAKPOINT_ID,\n\t\ttitle: nls.localize({ key: 'miToggleBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Toggle &&Breakpoint\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {\n\tgroup: '1_breakpoints',\n\tcommand: {\n\t\tid: TOGGLE_CONDITIONAL_BREAKPOINT_ID,\n\t\ttitle: nls.localize({ key: 'miConditionalBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Conditional Breakpoint...\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {\n\tgroup: '1_breakpoints',\n\tcommand: {\n\t\tid: TOGGLE_INLINE_BREAKPOINT_ID,\n\t\ttitle: nls.localize({ key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] }, \"Inline Breakp&&oint\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {\n\tgroup: '1_breakpoints',\n\tcommand: {\n\t\tid: AddFunctionBreakpointAction.ID,\n\t\ttitle: nls.localize({ key: 'miFunctionBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&Function Breakpoint...\")\n\t},\n\torder: 3\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {\n\tgroup: '1_breakpoints',\n\tcommand: {\n\t\tid: TOGGLE_LOG_POINT_ID,\n\t\ttitle: nls.localize({ key: 'miLogPoint', comment: ['&& denotes a mnemonic'] }, \"&&Logpoint...\")\n\t},\n\torder: 4\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '4_new_breakpoint',\n\ttitle: nls.localize({ key: 'miNewBreakpoint', comment: ['&& denotes a mnemonic'] }, \"&&New Breakpoint\"),\n\tsubmenu: MenuId.MenubarNewBreakpointMenu,\n\torder: 2\n});\n\n// Modify Breakpoints\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '5_breakpoints',\n\tcommand: {\n\t\tid: EnableAllBreakpointsAction.ID,\n\t\ttitle: nls.localize({ key: 'miEnableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"&&Enable All Breakpoints\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '5_breakpoints',\n\tcommand: {\n\t\tid: DisableAllBreakpointsAction.ID,\n\t\ttitle: nls.localize({ key: 'miDisableAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Disable A&&ll Breakpoints\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: '5_breakpoints',\n\tcommand: {\n\t\tid: RemoveAllBreakpointsAction.ID,\n\t\ttitle: nls.localize({ key: 'miRemoveAllBreakpoints', comment: ['&& denotes a mnemonic'] }, \"Remove &&All Breakpoints\")\n\t},\n\torder: 3\n});\n\n// Install Debuggers\nMenuRegistry.appendMenuItem(MenuId.MenubarDebugMenu, {\n\tgroup: 'z_install',\n\tcommand: {\n\t\tid: 'debug.installAdditionalDebuggers',\n\t\ttitle: nls.localize({ key: 'miInstallAdditionalDebuggers', comment: ['&& denotes a mnemonic'] }, \"&&Install Additional Debuggers...\")\n\t},\n\torder: 1\n});\n\n// Touch Bar\nif (isMacintosh) {\n\n\tconst registerTouchBarEntry = (id: string, title: string, order: number, when: ContextKeyExpr, icon: string) => {\n\t\tMenuRegistry.appendMenuItem(MenuId.TouchBarContext, {\n\t\t\tcommand: {\n\t\t\t\tid, title, iconLocation: { dark: URI.parse(require.toUrl(`vs/workbench/contrib/debug/electron-browser/media/${icon}`)) }\n\t\t\t},\n\t\t\twhen,\n\t\t\tgroup: '9_debug',\n\t\t\torder\n\t\t});\n\t};\n\n\tregisterTouchBarEntry(StartAction.ID, StartAction.LABEL, 0, CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-tb.png');\n\tregisterTouchBarEntry(RunAction.ID, RunAction.LABEL, 1, CONTEXT_IN_DEBUG_MODE.toNegated(), 'continue-without-debugging-tb.png');\n\tregisterTouchBarEntry(CONTINUE_ID, continueLabel, 0, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'continue-tb.png');\n\tregisterTouchBarEntry(PAUSE_ID, pauseLabel, 1, ContextKeyExpr.and(CONTEXT_IN_DEBUG_MODE, ContextKeyExpr.notEquals('debugState', 'stopped')), 'pause-tb.png');\n\tregisterTouchBarEntry(STEP_OVER_ID, stepOverLabel, 2, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepover-tb.png');\n\tregisterTouchBarEntry(STEP_INTO_ID, stepIntoLabel, 3, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepinto-tb.png');\n\tregisterTouchBarEntry(STEP_OUT_ID, stepOutLabel, 4, CONTEXT_DEBUG_STATE.isEqualTo('stopped'), 'stepout-tb.png');\n\tregisterTouchBarEntry(RESTART_SESSION_ID, restartLabel, 5, CONTEXT_IN_DEBUG_MODE, 'restart-tb.png');\n\tregisterTouchBarEntry(STOP_ID, stopLabel, 6, CONTEXT_IN_DEBUG_MODE, 'stop-tb.png');\n}\n"]}]}