{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/editorAction.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/editorAction.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar InternalEditorAction = /** @class */ (function () {\n    function InternalEditorAction(id, label, alias, precondition, run, contextKeyService) {\n        this.id = id;\n        this.label = label;\n        this.alias = alias;\n        this._precondition = precondition;\n        this._run = run;\n        this._contextKeyService = contextKeyService;\n    }\n    InternalEditorAction.prototype.isSupported = function () {\n        return this._contextKeyService.contextMatchesRules(this._precondition);\n    };\n    InternalEditorAction.prototype.run = function () {\n        if (!this.isSupported()) {\n            return Promise.resolve(undefined);\n        }\n        var r = this._run();\n        return r ? r : Promise.resolve(undefined);\n    };\n    return InternalEditorAction;\n}());\nexports.InternalEditorAction = InternalEditorAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/editorAction.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/editorAction.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAKhG;IAUC,8BACC,EAAU,EACV,KAAa,EACb,KAAa,EACb,YAAwC,EACxC,GAAwB,EACxB,iBAAqC;QAErC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAEM,0CAAW,GAAlB;QACC,OAAO,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxE,CAAC;IAEM,kCAAG,GAAV;QACC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YACxB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SAClC;QAED,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC;IACF,2BAAC;AAAD,CAAC,AAtCD,IAsCC;AAtCY,oDAAoB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEditorAction } from 'vs/editor/common/editorCommon';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\n\nexport class InternalEditorAction implements IEditorAction {\n\n\tpublic readonly id: string;\n\tpublic readonly label: string;\n\tpublic readonly alias: string;\n\n\tprivate readonly _precondition: ContextKeyExpr | undefined;\n\tprivate readonly _run: () => Promise<void>;\n\tprivate readonly _contextKeyService: IContextKeyService;\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\talias: string,\n\t\tprecondition: ContextKeyExpr | undefined,\n\t\trun: () => Promise<void>,\n\t\tcontextKeyService: IContextKeyService\n\t) {\n\t\tthis.id = id;\n\t\tthis.label = label;\n\t\tthis.alias = alias;\n\t\tthis._precondition = precondition;\n\t\tthis._run = run;\n\t\tthis._contextKeyService = contextKeyService;\n\t}\n\n\tpublic isSupported(): boolean {\n\t\treturn this._contextKeyService.contextMatchesRules(this._precondition);\n\t}\n\n\tpublic run(): Promise<void> {\n\t\tif (!this.isSupported()) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst r = this._run();\n\t\treturn r ? r : Promise.resolve(undefined);\n\t}\n}\n"]}]}