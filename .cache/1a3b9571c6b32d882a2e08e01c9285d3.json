{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/hash.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/hash.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Return a hash value for an object.\n     */\n    function hash(obj, hashVal = 0) {\n        switch (typeof obj) {\n            case 'object':\n                if (obj === null) {\n                    return numberHash(349, hashVal);\n                }\n                else if (Array.isArray(obj)) {\n                    return arrayHash(obj, hashVal);\n                }\n                return objectHash(obj, hashVal);\n            case 'string':\n                return stringHash(obj, hashVal);\n            case 'boolean':\n                return booleanHash(obj, hashVal);\n            case 'number':\n                return numberHash(obj, hashVal);\n            case 'undefined':\n                return numberHash(0, 937);\n            default:\n                return numberHash(0, 617);\n        }\n    }\n    exports.hash = hash;\n    function numberHash(val, initialHashVal) {\n        return (((initialHashVal << 5) - initialHashVal) + val) | 0; // hashVal * 31 + ch, keep as int32\n    }\n    function booleanHash(b, initialHashVal) {\n        return numberHash(b ? 433 : 863, initialHashVal);\n    }\n    function stringHash(s, hashVal) {\n        hashVal = numberHash(149417, hashVal);\n        for (let i = 0, length = s.length; i < length; i++) {\n            hashVal = numberHash(s.charCodeAt(i), hashVal);\n        }\n        return hashVal;\n    }\n    function arrayHash(arr, initialHashVal) {\n        initialHashVal = numberHash(104579, initialHashVal);\n        return arr.reduce((hashVal, item) => hash(item, hashVal), initialHashVal);\n    }\n    function objectHash(obj, initialHashVal) {\n        initialHashVal = numberHash(181387, initialHashVal);\n        return Object.keys(obj).sort().reduce((hashVal, key) => {\n            hashVal = stringHash(key, hashVal);\n            return hash(obj[key], hashVal);\n        }, initialHashVal);\n    }\n    class Hasher {\n        constructor() {\n            this._value = 0;\n        }\n        get value() {\n            return this._value;\n        }\n        hash(obj) {\n            this._value = hash(obj, this._value);\n            return this._value;\n        }\n    }\n    exports.Hasher = Hasher;\n});\n",null]}