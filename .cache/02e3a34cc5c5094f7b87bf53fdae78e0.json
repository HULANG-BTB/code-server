{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SearchChannel = /** @class */ (function () {\n    function SearchChannel(service) {\n        this.service = service;\n    }\n    SearchChannel.prototype.listen = function (_, event, arg) {\n        switch (event) {\n            case 'fileSearch': return this.service.fileSearch(arg);\n            case 'textSearch': return this.service.textSearch(arg);\n        }\n        throw new Error('Event not found');\n    };\n    SearchChannel.prototype.call = function (_, command, arg) {\n        switch (command) {\n            case 'clearCache': return this.service.clearCache(arg);\n        }\n        throw new Error('Call not found');\n    };\n    return SearchChannel;\n}());\nexports.SearchChannel = SearchChannel;\nvar SearchChannelClient = /** @class */ (function () {\n    function SearchChannelClient(channel) {\n        this.channel = channel;\n    }\n    SearchChannelClient.prototype.fileSearch = function (search) {\n        return this.channel.listen('fileSearch', search);\n    };\n    SearchChannelClient.prototype.textSearch = function (search) {\n        return this.channel.listen('textSearch', search);\n    };\n    SearchChannelClient.prototype.clearCache = function (cacheKey) {\n        return this.channel.call('clearCache', cacheKey);\n    };\n    return SearchChannelClient;\n}());\nexports.SearchChannelClient = SearchChannelClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/searchIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAMhG;IAEC,uBAAoB,OAA0B;QAA1B,YAAO,GAAP,OAAO,CAAmB;IAAI,CAAC;IAEnD,8BAAM,GAAN,UAAO,CAAU,EAAE,KAAa,EAAE,GAAS;QAC1C,QAAQ,KAAK,EAAE;YACd,KAAK,YAAY,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACvD,KAAK,YAAY,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACvD;QACD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACpC,CAAC;IAED,4BAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,GAAS;QAC1C,QAAQ,OAAO,EAAE;YAChB,KAAK,YAAY,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;SACvD;QACD,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACnC,CAAC;IACF,oBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,sCAAa;AAoB1B;IAEC,6BAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,wCAAU,GAAV,UAAW,MAAqB;QAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,wCAAU,GAAV,UAAW,MAAqB;QAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,wCAAU,GAAV,UAAW,QAAgB;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IACF,0BAAC;AAAD,CAAC,AAfD,IAeC;AAfY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IRawFileQuery, IRawTextQuery, IRawSearchService, ISerializedSearchComplete, ISerializedSearchProgressItem } from 'vs/workbench/services/search/common/search';\n\nexport class SearchChannel implements IServerChannel {\n\n\tconstructor(private service: IRawSearchService) { }\n\n\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'fileSearch': return this.service.fileSearch(arg);\n\t\t\tcase 'textSearch': return this.service.textSearch(arg);\n\t\t}\n\t\tthrow new Error('Event not found');\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'clearCache': return this.service.clearCache(arg);\n\t\t}\n\t\tthrow new Error('Call not found');\n\t}\n}\n\nexport class SearchChannelClient implements IRawSearchService {\n\n\tconstructor(private channel: IChannel) { }\n\n\tfileSearch(search: IRawFileQuery): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\treturn this.channel.listen('fileSearch', search);\n\t}\n\n\ttextSearch(search: IRawTextQuery): Event<ISerializedSearchProgressItem | ISerializedSearchComplete> {\n\t\treturn this.channel.listen('textSearch', search);\n\t}\n\n\tclearCache(cacheKey: string): Promise<void> {\n\t\treturn this.channel.call('clearCache', cacheKey);\n\t}\n}"]}]}