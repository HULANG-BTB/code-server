{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/editor/browser/codeEditorService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/editor/browser/codeEditorService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar codeEditorServiceImpl_1 = require(\"vs/editor/browser/services/codeEditorServiceImpl\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar CodeEditorService = /** @class */ (function (_super) {\n    tslib_1.__extends(CodeEditorService, _super);\n    function CodeEditorService(editorService, themeService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.editorService = editorService;\n        return _this;\n    }\n    CodeEditorService.prototype.getActiveCodeEditor = function () {\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n            return activeTextEditorWidget;\n        }\n        if (editorBrowser_1.isDiffEditor(activeTextEditorWidget)) {\n            return activeTextEditorWidget.getModifiedEditor();\n        }\n        return null;\n    };\n    CodeEditorService.prototype.openCodeEditor = function (input, source, sideBySide) {\n        // Special case: If the active editor is a diff editor and the request to open originates and\n        // targets the modified side of it, we just apply the request there to prevent opening the modified\n        // side as separate editor.\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (!sideBySide && // we need the current active group to be the taret\n            editorBrowser_1.isDiffEditor(activeTextEditorWidget) && // we only support this for active text diff editors\n            input.options && // we need options to apply\n            input.resource && // we need a request resource to compare with\n            activeTextEditorWidget.getModel() && // we need a target model to compare with\n            source === activeTextEditorWidget.getModifiedEditor() && // we need the source of this request to be the modified side of the diff editor\n            input.resource.toString() === activeTextEditorWidget.getModel().modified.uri.toString() // we need the input resources to match with modified side\n        ) {\n            var targetEditor = activeTextEditorWidget.getModifiedEditor();\n            var textOptions = editor_1.TextEditorOptions.create(input.options);\n            textOptions.apply(targetEditor, editorCommon_1.ScrollType.Smooth);\n            return Promise.resolve(targetEditor);\n        }\n        // Open using our normal editor service\n        return this.doOpenCodeEditor(input, source, sideBySide);\n    };\n    CodeEditorService.prototype.doOpenCodeEditor = function (input, source, sideBySide) {\n        return this.editorService.openEditor(input, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP).then(function (control) {\n            if (control) {\n                var widget = control.getControl();\n                if (editorBrowser_1.isCodeEditor(widget)) {\n                    return widget;\n                }\n            }\n            return null;\n        });\n    };\n    CodeEditorService = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, themeService_1.IThemeService)\n    ], CodeEditorService);\n    return CodeEditorService;\n}(codeEditorServiceImpl_1.CodeEditorServiceImpl));\nexports.CodeEditorService = CodeEditorService;\nextensions_1.registerSingleton(codeEditorService_1.ICodeEditorService, CodeEditorService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/editor/browser/codeEditorService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/editor/browser/codeEditorService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,iEAA0F;AAC1F,0FAAyF;AACzF,8DAA2D;AAE3D,sEAAsE;AACtE,qDAA+D;AAC/D,mFAA6G;AAC7G,kFAAkF;AAClF,0EAAgF;AAEhF;IAAuC,6CAAqB;IAE3D,2BACkC,aAA6B,EAC/C,YAA2B;QAF3C,YAIC,kBAAM,YAAY,CAAC,SACnB;QAJiC,mBAAa,GAAb,aAAa,CAAgB;;IAI/D,CAAC;IAED,+CAAmB,GAAnB;QACC,IAAM,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC;QACzE,IAAI,4BAAY,CAAC,sBAAsB,CAAC,EAAE;YACzC,OAAO,sBAAsB,CAAC;SAC9B;QAED,IAAI,4BAAY,CAAC,sBAAsB,CAAC,EAAE;YACzC,OAAO,sBAAsB,CAAC,iBAAiB,EAAE,CAAC;SAClD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,0CAAc,GAAd,UAAe,KAAqB,EAAE,MAA0B,EAAE,UAAoB;QAErF,6FAA6F;QAC7F,mGAAmG;QACnG,2BAA2B;QAC3B,IAAM,sBAAsB,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC;QACzE,IACC,CAAC,UAAU,IAAU,mDAAmD;YACxE,4BAAY,CAAC,sBAAsB,CAAC,IAAI,oDAAoD;YAC5F,KAAK,CAAC,OAAO,IAAS,2BAA2B;YACjD,KAAK,CAAC,QAAQ,IAAS,6CAA6C;YACpE,sBAAsB,CAAC,QAAQ,EAAE,IAAI,yCAAyC;YAC9E,MAAM,KAAK,sBAAsB,CAAC,iBAAiB,EAAE,IAAI,gFAAgF;YACzI,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,sBAAsB,CAAC,QAAQ,EAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,0DAA0D;UAClJ;YACD,IAAM,YAAY,GAAG,sBAAsB,CAAC,iBAAiB,EAAE,CAAC;YAEhE,IAAM,WAAW,GAAG,0BAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5D,WAAW,CAAC,KAAK,CAAC,YAAY,EAAE,yBAAU,CAAC,MAAM,CAAC,CAAC;YAEnD,OAAO,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;SACrC;QAED,uCAAuC;QACvC,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;IACzD,CAAC;IAEO,4CAAgB,GAAxB,UAAyB,KAAqB,EAAE,MAA0B,EAAE,UAAoB;QAC/F,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,0BAAU,CAAC,CAAC,CAAC,4BAAY,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YAC/F,IAAI,OAAO,EAAE;gBACZ,IAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;gBACpC,IAAI,4BAAY,CAAC,MAAM,CAAC,EAAE;oBACzB,OAAO,MAAM,CAAC;iBACd;aACD;YAED,OAAO,IAAI,CAAC;QACb,CAAC,CAAC,CAAC;IACJ,CAAC;IA5DW,iBAAiB;QAG3B,mBAAA,8BAAc,CAAA;QACd,mBAAA,4BAAa,CAAA;OAJH,iBAAiB,CA6D7B;IAAD,wBAAC;CAAA,AA7DD,CAAuC,6CAAqB,GA6D3D;AA7DY,8CAAiB;AA+D9B,8BAAiB,CAAC,sCAAkB,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor, isCodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { CodeEditorServiceImpl } from 'vs/editor/browser/services/codeEditorServiceImpl';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TextEditorOptions } from 'vs/workbench/common/editor';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class CodeEditorService extends CodeEditorServiceImpl {\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService\n\t) {\n\t\tsuper(themeService);\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\treturn activeTextEditorWidget;\n\t\t}\n\n\t\tif (isDiffEditor(activeTextEditorWidget)) {\n\t\t\treturn activeTextEditorWidget.getModifiedEditor();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\topenCodeEditor(input: IResourceInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\n\t\t// Special case: If the active editor is a diff editor and the request to open originates and\n\t\t// targets the modified side of it, we just apply the request there to prevent opening the modified\n\t\t// side as separate editor.\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (\n\t\t\t!sideBySide &&\t\t\t\t\t\t\t// we need the current active group to be the taret\n\t\t\tisDiffEditor(activeTextEditorWidget) && // we only support this for active text diff editors\n\t\t\tinput.options &&\t\t\t\t\t\t// we need options to apply\n\t\t\tinput.resource &&\t\t\t\t\t\t// we need a request resource to compare with\n\t\t\tactiveTextEditorWidget.getModel() &&\t// we need a target model to compare with\n\t\t\tsource === activeTextEditorWidget.getModifiedEditor() && // we need the source of this request to be the modified side of the diff editor\n\t\t\tinput.resource.toString() === activeTextEditorWidget.getModel()!.modified.uri.toString() // we need the input resources to match with modified side\n\t\t) {\n\t\t\tconst targetEditor = activeTextEditorWidget.getModifiedEditor();\n\n\t\t\tconst textOptions = TextEditorOptions.create(input.options);\n\t\t\ttextOptions.apply(targetEditor, ScrollType.Smooth);\n\n\t\t\treturn Promise.resolve(targetEditor);\n\t\t}\n\n\t\t// Open using our normal editor service\n\t\treturn this.doOpenCodeEditor(input, source, sideBySide);\n\t}\n\n\tprivate doOpenCodeEditor(input: IResourceInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\treturn this.editorService.openEditor(input, sideBySide ? SIDE_GROUP : ACTIVE_GROUP).then(control => {\n\t\t\tif (control) {\n\t\t\t\tconst widget = control.getControl();\n\t\t\t\tif (isCodeEditor(widget)) {\n\t\t\t\t\treturn widget;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t});\n\t}\n}\n\nregisterSingleton(ICodeEditorService, CodeEditorService, true);"]}]}