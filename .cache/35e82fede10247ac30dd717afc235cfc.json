{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/clipboard/electron-browser/clipboardService.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"electron\", \"vs/base/common/uri\", \"vs/base/browser/browser\"], function (require, exports, electron_1, uri_1, browser_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ClipboardService {\n        writeText(text, type) {\n            electron_1.clipboard.writeText(text, type);\n        }\n        readText(type) {\n            return electron_1.clipboard.readText(type);\n        }\n        readFindText() {\n            if (browser_1.isMacintosh) {\n                return electron_1.clipboard.readFindText();\n            }\n            return '';\n        }\n        writeFindText(text) {\n            if (browser_1.isMacintosh) {\n                electron_1.clipboard.writeFindText(text);\n            }\n        }\n        writeResources(resources) {\n            if (resources.length) {\n                electron_1.clipboard.writeBuffer(ClipboardService.FILE_FORMAT, this.resourcesToBuffer(resources));\n            }\n        }\n        readResources() {\n            return this.bufferToResources(electron_1.clipboard.readBuffer(ClipboardService.FILE_FORMAT));\n        }\n        hasResources() {\n            return electron_1.clipboard.has(ClipboardService.FILE_FORMAT);\n        }\n        resourcesToBuffer(resources) {\n            return Buffer.from(resources.map(r => r.toString()).join('\\n'));\n        }\n        bufferToResources(buffer) {\n            if (!buffer) {\n                return [];\n            }\n            const bufferValue = buffer.toString();\n            if (!bufferValue) {\n                return [];\n            }\n            try {\n                return bufferValue.split('\\n').map(f => uri_1.URI.parse(f));\n            }\n            catch (error) {\n                return []; // do not trust clipboard data\n            }\n        }\n    }\n    ClipboardService.FILE_FORMAT = 'code/file-list'; // Clipboard format for files\n    exports.ClipboardService = ClipboardService;\n});\n",null]}