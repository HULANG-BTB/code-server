{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logsActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/logs/common/logsActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/actions\", \"vs/base/common/path\", \"vs/platform/environment/common/environment\", \"vs/platform/windows/common/windows\", \"vs/platform/log/common/log\", \"vs/platform/quickinput/common/quickInput\", \"vs/base/common/uri\"], function (require, exports, nls, actions_1, path_1, environment_1, windows_1, log_1, quickInput_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let OpenLogsFolderAction = class OpenLogsFolderAction extends actions_1.Action {\n        constructor(id, label, environmentService, windowsService) {\n            super(id, label);\n            this.environmentService = environmentService;\n            this.windowsService = windowsService;\n        }\n        run() {\n            return this.windowsService.showItemInFolder(uri_1.URI.file(path_1.join(this.environmentService.logsPath, 'main.log')));\n        }\n    };\n    OpenLogsFolderAction.ID = 'workbench.action.openLogsFolder';\n    OpenLogsFolderAction.LABEL = nls.localize('openLogsFolder', \"Open Logs Folder\");\n    OpenLogsFolderAction = __decorate([\n        __param(2, environment_1.IEnvironmentService),\n        __param(3, windows_1.IWindowsService)\n    ], OpenLogsFolderAction);\n    exports.OpenLogsFolderAction = OpenLogsFolderAction;\n    let SetLogLevelAction = class SetLogLevelAction extends actions_1.Action {\n        constructor(id, label, quickInputService, logService) {\n            super(id, label);\n            this.quickInputService = quickInputService;\n            this.logService = logService;\n        }\n        run() {\n            const current = this.logService.getLevel();\n            const entries = [\n                { label: nls.localize('trace', \"Trace\"), level: log_1.LogLevel.Trace, description: this.getDescription(log_1.LogLevel.Trace, current) },\n                { label: nls.localize('debug', \"Debug\"), level: log_1.LogLevel.Debug, description: this.getDescription(log_1.LogLevel.Debug, current) },\n                { label: nls.localize('info', \"Info\"), level: log_1.LogLevel.Info, description: this.getDescription(log_1.LogLevel.Info, current) },\n                { label: nls.localize('warn', \"Warning\"), level: log_1.LogLevel.Warning, description: this.getDescription(log_1.LogLevel.Warning, current) },\n                { label: nls.localize('err', \"Error\"), level: log_1.LogLevel.Error, description: this.getDescription(log_1.LogLevel.Error, current) },\n                { label: nls.localize('critical', \"Critical\"), level: log_1.LogLevel.Critical, description: this.getDescription(log_1.LogLevel.Critical, current) },\n                { label: nls.localize('off', \"Off\"), level: log_1.LogLevel.Off, description: this.getDescription(log_1.LogLevel.Off, current) },\n            ];\n            return this.quickInputService.pick(entries, { placeHolder: nls.localize('selectLogLevel', \"Select log level\"), activeItem: entries[this.logService.getLevel()] }).then(entry => {\n                if (entry) {\n                    this.logService.setLevel(entry.level);\n                }\n            });\n        }\n        getDescription(level, current) {\n            if (log_1.DEFAULT_LOG_LEVEL === level && current === level) {\n                return nls.localize('default and current', \"Default & Current\");\n            }\n            if (log_1.DEFAULT_LOG_LEVEL === level) {\n                return nls.localize('default', \"Default\");\n            }\n            if (current === level) {\n                return nls.localize('current', \"Current\");\n            }\n            return undefined;\n        }\n    };\n    SetLogLevelAction.ID = 'workbench.action.setLogLevel';\n    SetLogLevelAction.LABEL = nls.localize('setLogLevel', \"Set Log Level...\");\n    SetLogLevelAction = __decorate([\n        __param(2, quickInput_1.IQuickInputService),\n        __param(3, log_1.ILogService)\n    ], SetLogLevelAction);\n    exports.SetLogLevelAction = SetLogLevelAction;\n});\n",null]}