{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar windowsShellHelper_1 = require(\"vs/workbench/contrib/terminal/node/windowsShellHelper\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar terminalProcessManager_1 = require(\"vs/workbench/contrib/terminal/browser/terminalProcessManager\");\nvar terminalProcess_1 = require(\"vs/workbench/contrib/terminal/node/terminalProcess\");\nvar Terminal;\n/**\n * A service used by TerminalInstance (and components owned by it) that allows it to break its\n * dependency on electron-browser and node layers, while at the same time avoiding a cyclic\n * dependency on ITerminalService.\n */\nvar TerminalInstanceService = /** @class */ (function () {\n    function TerminalInstanceService(_instantiationService) {\n        this._instantiationService = _instantiationService;\n    }\n    TerminalInstanceService.prototype.getXtermConstructor = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!Terminal) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Promise.resolve().then(function () { return require('vscode-xterm'); })];\n                    case 1:\n                        Terminal = (_a.sent()).Terminal;\n                        // Enable xterm.js addons\n                        Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/search/search'));\n                        Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/webLinks/webLinks'));\n                        Terminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/winptyCompat/winptyCompat'));\n                        // Localize strings\n                        Terminal.strings.blankLine = nls.localize('terminal.integrated.a11yBlankLine', 'Blank line');\n                        Terminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');\n                        Terminal.strings.tooMuchOutput = nls.localize('terminal.integrated.a11yTooMuchOutput', 'Too much output to announce, navigate to rows manually to read');\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, Terminal];\n                }\n            });\n        });\n    };\n    TerminalInstanceService.prototype.createWindowsShellHelper = function (shellProcessId, instance, xterm) {\n        return new windowsShellHelper_1.WindowsShellHelper(shellProcessId, instance, xterm);\n    };\n    TerminalInstanceService.prototype.createTerminalProcessManager = function (id, configHelper) {\n        return this._instantiationService.createInstance(terminalProcessManager_1.TerminalProcessManager, id, configHelper);\n    };\n    TerminalInstanceService.prototype.createTerminalProcess = function (shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty) {\n        return new terminalProcess_1.TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty);\n    };\n    TerminalInstanceService = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService)\n    ], TerminalInstanceService);\n    return TerminalInstanceService;\n}());\nexports.TerminalInstanceService = TerminalInstanceService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalInstanceService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAI9B,4FAA2F;AAC3F,gFAAuF;AACvF,uGAAsG;AAEtG,sFAAqF;AAErF,IAAI,QAA8B,CAAC;AAEnC;;;;GAIG;AACH;IAGC,iCACyC,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAErF,CAAC;IAEY,qDAAmB,GAAhC;+CAAoC,OAAO;;;;6BACtC,CAAC,QAAQ,EAAT,wBAAS;wBACA,yEAAa,cAAc,OAAC;;wBAAxC,QAAQ,GAAG,CAAC,SAA4B,CAAC,CAAC,QAAQ,CAAC;wBACnD,yBAAyB;wBACzB,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,uCAAuC,CAAC,CAAC,CAAC;wBACvF,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,2CAA2C,CAAC,CAAC,CAAC;wBAC3F,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,mDAAmD,CAAC,CAAC,CAAC;wBACnG,mBAAmB;wBACnB,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAC,mCAAmC,EAAE,YAAY,CAAC,CAAC;wBAC7F,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC,QAAQ,CAAC,qCAAqC,EAAE,gBAAgB,CAAC,CAAC;wBACrG,QAAQ,CAAC,OAAO,CAAC,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,uCAAuC,EAAE,gEAAgE,CAAC,CAAC;;4BAE1J,sBAAO,QAAQ,EAAC;;;;KAChB;IAEM,0DAAwB,GAA/B,UAAgC,cAAsB,EAAE,QAA2B,EAAE,KAAoB;QACxG,OAAO,IAAI,uCAAkB,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC;IAEM,8DAA4B,GAAnC,UAAoC,EAAU,EAAE,YAAmC;QAClF,OAAO,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,+CAAsB,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC;IAC5F,CAAC;IAEM,uDAAqB,GAA5B,UAA6B,iBAAqC,EAAE,GAAW,EAAE,IAAY,EAAE,IAAY,EAAE,GAAwB,EAAE,mBAA4B;QAClK,OAAO,IAAI,iCAAe,CAAC,iBAAiB,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC;IAC1F,CAAC;IAjCW,uBAAuB;QAIjC,mBAAA,qCAAqB,CAAA;OAJX,uBAAuB,CAkCnC;IAAD,8BAAC;CAAA,AAlCD,IAkCC;AAlCY,0DAAuB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { Terminal as XTermTerminal } from 'vscode-xterm';\nimport { ITerminalInstance, IWindowsShellHelper, ITerminalConfigHelper, ITerminalProcessManager, IShellLaunchConfig, ITerminalChildProcess } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { WindowsShellHelper } from 'vs/workbench/contrib/terminal/node/windowsShellHelper';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TerminalProcessManager } from 'vs/workbench/contrib/terminal/browser/terminalProcessManager';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { TerminalProcess } from 'vs/workbench/contrib/terminal/node/terminalProcess';\n\nlet Terminal: typeof XTermTerminal;\n\n/**\n * A service used by TerminalInstance (and components owned by it) that allows it to break its\n * dependency on electron-browser and node layers, while at the same time avoiding a cyclic\n * dependency on ITerminalService.\n */\nexport class TerminalInstanceService implements ITerminalInstanceService {\n\tpublic _serviceBrand: any;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t}\n\n\tpublic async getXtermConstructor(): Promise<typeof XTermTerminal> {\n\t\tif (!Terminal) {\n\t\t\tTerminal = (await import('vscode-xterm')).Terminal;\n\t\t\t// Enable xterm.js addons\n\t\t\tTerminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/search/search'));\n\t\t\tTerminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/webLinks/webLinks'));\n\t\t\tTerminal.applyAddon(require.__$__nodeRequire('vscode-xterm/lib/addons/winptyCompat/winptyCompat'));\n\t\t\t// Localize strings\n\t\t\tTerminal.strings.blankLine = nls.localize('terminal.integrated.a11yBlankLine', 'Blank line');\n\t\t\tTerminal.strings.promptLabel = nls.localize('terminal.integrated.a11yPromptLabel', 'Terminal input');\n\t\t\tTerminal.strings.tooMuchOutput = nls.localize('terminal.integrated.a11yTooMuchOutput', 'Too much output to announce, navigate to rows manually to read');\n\t\t}\n\t\treturn Terminal;\n\t}\n\n\tpublic createWindowsShellHelper(shellProcessId: number, instance: ITerminalInstance, xterm: XTermTerminal): IWindowsShellHelper {\n\t\treturn new WindowsShellHelper(shellProcessId, instance, xterm);\n\t}\n\n\tpublic createTerminalProcessManager(id: number, configHelper: ITerminalConfigHelper): ITerminalProcessManager {\n\t\treturn this._instantiationService.createInstance(TerminalProcessManager, id, configHelper);\n\t}\n\n\tpublic createTerminalProcess(shellLaunchConfig: IShellLaunchConfig, cwd: string, cols: number, rows: number, env: IProcessEnvironment, windowsEnableConpty: boolean): ITerminalChildProcess {\n\t\treturn new TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, windowsEnableConpty);\n\t}\n}"]}]}