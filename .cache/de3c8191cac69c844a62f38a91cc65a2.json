{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar browser = require(\"vs/base/browser/browser\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_3 = require(\"vs/workbench/common/actions\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar ToggleMultiCursorModifierAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ToggleMultiCursorModifierAction, _super);\n    function ToggleMultiCursorModifierAction(id, label, configurationService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    ToggleMultiCursorModifierAction.prototype.run = function () {\n        var editorConf = this.configurationService.getValue('editor');\n        var newValue = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'alt' : 'ctrlCmd');\n        return this.configurationService.updateValue(ToggleMultiCursorModifierAction.multiCursorModifierConfigurationKey, newValue, configuration_1.ConfigurationTarget.USER);\n    };\n    ToggleMultiCursorModifierAction.ID = 'workbench.action.toggleMultiCursorModifier';\n    ToggleMultiCursorModifierAction.LABEL = nls.localize('toggleLocation', \"Toggle Multi-Cursor Modifier\");\n    ToggleMultiCursorModifierAction.multiCursorModifierConfigurationKey = 'editor.multiCursorModifier';\n    ToggleMultiCursorModifierAction = tslib_1.__decorate([\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], ToggleMultiCursorModifierAction);\n    return ToggleMultiCursorModifierAction;\n}(actions_1.Action));\nexports.ToggleMultiCursorModifierAction = ToggleMultiCursorModifierAction;\nvar multiCursorModifier = new contextkey_1.RawContextKey('multiCursorModifier', 'altKey');\nvar MultiCursorModifierContextKeyController = /** @class */ (function () {\n    function MultiCursorModifierContextKeyController(configurationService, contextKeyService) {\n        var _this = this;\n        this.configurationService = configurationService;\n        this._multiCursorModifier = multiCursorModifier.bindTo(contextKeyService);\n        configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('editor.multiCursorModifier')) {\n                _this._update();\n            }\n        });\n    }\n    MultiCursorModifierContextKeyController.prototype._update = function () {\n        var editorConf = this.configurationService.getValue('editor');\n        var value = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'ctrlCmd' : 'altKey');\n        this._multiCursorModifier.set(value);\n    };\n    MultiCursorModifierContextKeyController = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, contextkey_1.IContextKeyService)\n    ], MultiCursorModifierContextKeyController);\n    return MultiCursorModifierContextKeyController;\n}());\nplatform_1.Registry.as(contributions_1.Extensions.Workbench).registerWorkbenchContribution(MultiCursorModifierContextKeyController, lifecycle_1.LifecyclePhase.Restored);\nvar registry = platform_1.Registry.as(actions_3.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(ToggleMultiCursorModifierAction, ToggleMultiCursorModifierAction.ID, ToggleMultiCursorModifierAction.LABEL), 'Toggle Multi-Cursor Modifier');\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarSelectionMenu, {\n    group: '3_multi',\n    command: {\n        id: ToggleMultiCursorModifierAction.ID,\n        title: nls.localize('miMultiCursorAlt', \"Switch to Alt+Click for Multi-Cursor\")\n    },\n    when: multiCursorModifier.isEqualTo('ctrlCmd'),\n    order: 1\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarSelectionMenu, {\n    group: '3_multi',\n    command: {\n        id: ToggleMultiCursorModifierAction.ID,\n        title: (browser.isMacintosh\n            ? nls.localize('miMultiCursorCmd', \"Switch to Cmd+Click for Multi-Cursor\")\n            : nls.localize('miMultiCursorCtrl', \"Switch to Ctrl+Click for Multi-Cursor\"))\n    },\n    when: multiCursorModifier.isEqualTo('altKey'),\n    order: 1\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Action } from 'vs/base/common/actions';\nimport * as browser from 'vs/base/browser/browser';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\n\nexport class ToggleMultiCursorModifierAction extends Action {\n\n\tpublic static readonly ID = 'workbench.action.toggleMultiCursorModifier';\n\tpublic static readonly LABEL = nls.localize('toggleLocation', \"Toggle Multi-Cursor Modifier\");\n\n\tprivate static readonly multiCursorModifierConfigurationKey = 'editor.multiCursorModifier';\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst editorConf = this.configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\t\tconst newValue: 'ctrlCmd' | 'alt' = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'alt' : 'ctrlCmd');\n\n\t\treturn this.configurationService.updateValue(ToggleMultiCursorModifierAction.multiCursorModifierConfigurationKey, newValue, ConfigurationTarget.USER);\n\t}\n}\n\nconst multiCursorModifier = new RawContextKey<string>('multiCursorModifier', 'altKey');\n\nclass MultiCursorModifierContextKeyController implements IWorkbenchContribution {\n\n\tprivate readonly _multiCursorModifier: IContextKey<string>;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tthis._multiCursorModifier = multiCursorModifier.bindTo(contextKeyService);\n\t\tconfigurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('editor.multiCursorModifier')) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update(): void {\n\t\tconst editorConf = this.configurationService.getValue<{ multiCursorModifier: 'ctrlCmd' | 'alt' }>('editor');\n\t\tconst value = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'ctrlCmd' : 'altKey');\n\t\tthis._multiCursorModifier.set(value);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(MultiCursorModifierContextKeyController, LifecyclePhase.Restored);\n\n\nconst registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ToggleMultiCursorModifierAction, ToggleMultiCursorModifierAction.ID, ToggleMultiCursorModifierAction.LABEL), 'Toggle Multi-Cursor Modifier');\nMenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {\n\tgroup: '3_multi',\n\tcommand: {\n\t\tid: ToggleMultiCursorModifierAction.ID,\n\t\ttitle: nls.localize('miMultiCursorAlt', \"Switch to Alt+Click for Multi-Cursor\")\n\t},\n\twhen: multiCursorModifier.isEqualTo('ctrlCmd'),\n\torder: 1\n});\nMenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {\n\tgroup: '3_multi',\n\tcommand: {\n\t\tid: ToggleMultiCursorModifierAction.ID,\n\t\ttitle: (\n\t\t\tbrowser.isMacintosh\n\t\t\t\t? nls.localize('miMultiCursorCmd', \"Switch to Cmd+Click for Multi-Cursor\")\n\t\t\t\t: nls.localize('miMultiCursorCtrl', \"Switch to Ctrl+Click for Multi-Cursor\")\n\t\t)\n\t},\n\twhen: multiCursorModifier.isEqualTo('altKey'),\n\torder: 1\n});"]}]}