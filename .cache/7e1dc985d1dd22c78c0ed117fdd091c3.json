{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Uint8Matrix = /** @class */ (function () {\n    function Uint8Matrix(rows, cols, defaultValue) {\n        var data = new Uint8Array(rows * cols);\n        for (var i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    Uint8Matrix.prototype.get = function (row, col) {\n        return this._data[row * this.cols + col];\n    };\n    Uint8Matrix.prototype.set = function (row, col, value) {\n        this._data[row * this.cols + col] = value;\n    };\n    return Uint8Matrix;\n}());\nexports.Uint8Matrix = Uint8Matrix;\nvar Constants;\n(function (Constants) {\n    /**\n     * MAX SMI (SMall Integer) as defined in v8.\n     * one bit is lost for boxing/unboxing flag.\n     * one bit is lost for sign flag.\n     * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n     */\n    Constants[Constants[\"MAX_SAFE_SMALL_INTEGER\"] = 1073741824] = \"MAX_SAFE_SMALL_INTEGER\";\n    /**\n     * MIN SMI (SMall Integer) as defined in v8.\n     * one bit is lost for boxing/unboxing flag.\n     * one bit is lost for sign flag.\n     * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n     */\n    Constants[Constants[\"MIN_SAFE_SMALL_INTEGER\"] = -1073741824] = \"MIN_SAFE_SMALL_INTEGER\";\n    /**\n     * Max unsigned integer that fits on 8 bits.\n     */\n    Constants[Constants[\"MAX_UINT_8\"] = 255] = \"MAX_UINT_8\";\n    /**\n     * Max unsigned integer that fits on 16 bits.\n     */\n    Constants[Constants[\"MAX_UINT_16\"] = 65535] = \"MAX_UINT_16\";\n    /**\n     * Max unsigned integer that fits on 32 bits.\n     */\n    Constants[Constants[\"MAX_UINT_32\"] = 4294967295] = \"MAX_UINT_32\";\n})(Constants = exports.Constants || (exports.Constants = {}));\nfunction toUint8(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > Constants.MAX_UINT_8) {\n        return Constants.MAX_UINT_8;\n    }\n    return v | 0;\n}\nexports.toUint8 = toUint8;\nfunction toUint32(v) {\n    if (v < 0) {\n        return 0;\n    }\n    if (v > Constants.MAX_UINT_32) {\n        return Constants.MAX_UINT_32;\n    }\n    return v | 0;\n}\nexports.toUint32 = toUint32;\nfunction toUint32Array(arr) {\n    var len = arr.length;\n    var r = new Uint32Array(len);\n    for (var i = 0; i < len; i++) {\n        r[i] = toUint32(arr[i]);\n    }\n    return r;\n}\nexports.toUint32Array = toUint32Array;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/core/uint.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG;IAMC,qBAAY,IAAY,EAAE,IAAY,EAAE,YAAoB;QAC3D,IAAI,IAAI,GAAG,IAAI,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC;SACvB;QAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAEM,yBAAG,GAAV,UAAW,GAAW,EAAE,GAAW;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;IAC1C,CAAC;IAEM,yBAAG,GAAV,UAAW,GAAW,EAAE,GAAW,EAAE,KAAa;QACjD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;IAC3C,CAAC;IACF,kBAAC;AAAD,CAAC,AAxBD,IAwBC;AAxBY,kCAAW;AA0BxB,IAAkB,SAiCjB;AAjCD,WAAkB,SAAS;IAC1B;;;;;OAKG;IACH,sFAAgC,CAAA;IAEhC;;;;;OAKG;IACH,uFAAmC,CAAA;IAEnC;;OAEG;IACH,uDAAgB,CAAA;IAEhB;;OAEG;IACH,2DAAmB,CAAA;IAEnB;;OAEG;IACH,gEAAwB,CAAA;AAGzB,CAAC,EAjCiB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAiC1B;AAED,SAAgB,OAAO,CAAC,CAAS;IAChC,IAAI,CAAC,GAAG,CAAC,EAAE;QACV,OAAO,CAAC,CAAC;KACT;IACD,IAAI,CAAC,GAAG,SAAS,CAAC,UAAU,EAAE;QAC7B,OAAO,SAAS,CAAC,UAAU,CAAC;KAC5B;IACD,OAAO,CAAC,GAAG,CAAC,CAAC;AACd,CAAC;AARD,0BAQC;AAED,SAAgB,QAAQ,CAAC,CAAS;IACjC,IAAI,CAAC,GAAG,CAAC,EAAE;QACV,OAAO,CAAC,CAAC;KACT;IACD,IAAI,CAAC,GAAG,SAAS,CAAC,WAAW,EAAE;QAC9B,OAAO,SAAS,CAAC,WAAW,CAAC;KAC7B;IACD,OAAO,CAAC,GAAG,CAAC,CAAC;AACd,CAAC;AARD,4BAQC;AAED,SAAgB,aAAa,CAAC,GAAa;IAC1C,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IACrB,IAAI,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC7B,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,OAAO,CAAC,CAAC;AACV,CAAC;AAPD,sCAOC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class Uint8Matrix {\n\n\tprivate readonly _data: Uint8Array;\n\tpublic readonly rows: number;\n\tpublic readonly cols: number;\n\n\tconstructor(rows: number, cols: number, defaultValue: number) {\n\t\tlet data = new Uint8Array(rows * cols);\n\t\tfor (let i = 0, len = rows * cols; i < len; i++) {\n\t\t\tdata[i] = defaultValue;\n\t\t}\n\n\t\tthis._data = data;\n\t\tthis.rows = rows;\n\t\tthis.cols = cols;\n\t}\n\n\tpublic get(row: number, col: number): number {\n\t\treturn this._data[row * this.cols + col];\n\t}\n\n\tpublic set(row: number, col: number, value: number): void {\n\t\tthis._data[row * this.cols + col] = value;\n\t}\n}\n\nexport const enum Constants {\n\t/**\n\t * MAX SMI (SMall Integer) as defined in v8.\n\t * one bit is lost for boxing/unboxing flag.\n\t * one bit is lost for sign flag.\n\t * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n\t */\n\tMAX_SAFE_SMALL_INTEGER = 1 << 30,\n\n\t/**\n\t * MIN SMI (SMall Integer) as defined in v8.\n\t * one bit is lost for boxing/unboxing flag.\n\t * one bit is lost for sign flag.\n\t * See https://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works/#tagged-values\n\t */\n\tMIN_SAFE_SMALL_INTEGER = -(1 << 30),\n\n\t/**\n\t * Max unsigned integer that fits on 8 bits.\n\t */\n\tMAX_UINT_8 = 255, // 2^8 - 1\n\n\t/**\n\t * Max unsigned integer that fits on 16 bits.\n\t */\n\tMAX_UINT_16 = 65535, // 2^16 - 1\n\n\t/**\n\t * Max unsigned integer that fits on 32 bits.\n\t */\n\tMAX_UINT_32 = 4294967295, // 2^32 - 1\n\n\n}\n\nexport function toUint8(v: number): number {\n\tif (v < 0) {\n\t\treturn 0;\n\t}\n\tif (v > Constants.MAX_UINT_8) {\n\t\treturn Constants.MAX_UINT_8;\n\t}\n\treturn v | 0;\n}\n\nexport function toUint32(v: number): number {\n\tif (v < 0) {\n\t\treturn 0;\n\t}\n\tif (v > Constants.MAX_UINT_32) {\n\t\treturn Constants.MAX_UINT_32;\n\t}\n\treturn v | 0;\n}\n\nexport function toUint32Array(arr: number[]): Uint32Array {\n\tlet len = arr.length;\n\tlet r = new Uint32Array(len);\n\tfor (let i = 0; i < len; i++) {\n\t\tr[i] = toUint32(arr[i]);\n\t}\n\treturn r;\n}\n"]}]}