{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorStatus.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorStatus.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/editorstatus\");\nvar nls = require(\"vs/nls\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar strings = require(\"vs/base/common/strings\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar types = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar untitledEditorInput_1 = require(\"vs/workbench/common/editor/untitledEditorInput\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar linesOperations_1 = require(\"vs/editor/contrib/linesOperations/linesOperations\");\nvar indentation_1 = require(\"vs/editor/contrib/indentation/indentation\");\nvar binaryEditor_1 = require(\"vs/workbench/browser/parts/editor/binaryEditor\");\nvar binaryDiffEditor_1 = require(\"vs/workbench/browser/parts/editor/binaryDiffEditor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar commonEditorConfig_1 = require(\"vs/editor/common/config/commonEditorConfig\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar network_1 = require(\"vs/base/common/network\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar getIconClasses_1 = require(\"vs/editor/common/services/getIconClasses\");\nvar async_1 = require(\"vs/base/common/async\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar event_1 = require(\"vs/base/common/event\");\nvar accessibility_1 = require(\"vs/platform/accessibility/common/accessibility\");\nvar SideBySideEditorEncodingSupport = /** @class */ (function () {\n    function SideBySideEditorEncodingSupport(master, details) {\n        this.master = master;\n        this.details = details;\n    }\n    SideBySideEditorEncodingSupport.prototype.getEncoding = function () {\n        return this.master.getEncoding(); // always report from modified (right hand) side\n    };\n    SideBySideEditorEncodingSupport.prototype.setEncoding = function (encoding, mode) {\n        [this.master, this.details].forEach(function (s) { return s.setEncoding(encoding, mode); });\n    };\n    return SideBySideEditorEncodingSupport;\n}());\nfunction toEditorWithEncodingSupport(input) {\n    // Untitled Editor\n    if (input instanceof untitledEditorInput_1.UntitledEditorInput) {\n        return input;\n    }\n    // Side by Side (diff) Editor\n    if (input instanceof editor_1.SideBySideEditorInput) {\n        var masterEncodingSupport = toEditorWithEncodingSupport(input.master);\n        var detailsEncodingSupport = toEditorWithEncodingSupport(input.details);\n        if (masterEncodingSupport && detailsEncodingSupport) {\n            return new SideBySideEditorEncodingSupport(masterEncodingSupport, detailsEncodingSupport);\n        }\n        return masterEncodingSupport;\n    }\n    // File or Resource Editor\n    var encodingSupport = input;\n    if (types.areFunctions(encodingSupport.setEncoding, encodingSupport.getEncoding)) {\n        return encodingSupport;\n    }\n    // Unsupported for any other editor\n    return null;\n}\nvar StateChange = /** @class */ (function () {\n    function StateChange() {\n        this.indentation = false;\n        this.selectionStatus = false;\n        this.mode = false;\n        this.encoding = false;\n        this.EOL = false;\n        this.tabFocusMode = false;\n        this.screenReaderMode = false;\n        this.metadata = false;\n    }\n    StateChange.prototype.combine = function (other) {\n        this.indentation = this.indentation || other.indentation;\n        this.selectionStatus = this.selectionStatus || other.selectionStatus;\n        this.mode = this.mode || other.mode;\n        this.encoding = this.encoding || other.encoding;\n        this.EOL = this.EOL || other.EOL;\n        this.tabFocusMode = this.tabFocusMode || other.tabFocusMode;\n        this.screenReaderMode = this.screenReaderMode || other.screenReaderMode;\n        this.metadata = this.metadata || other.metadata;\n    };\n    StateChange.prototype.hasChanges = function () {\n        return this.indentation\n            || this.selectionStatus\n            || this.mode\n            || this.encoding\n            || this.EOL\n            || this.tabFocusMode\n            || this.screenReaderMode\n            || this.metadata;\n    };\n    return StateChange;\n}());\nvar State = /** @class */ (function () {\n    function State() {\n    }\n    Object.defineProperty(State.prototype, \"selectionStatus\", {\n        get: function () { return this._selectionStatus; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"mode\", {\n        get: function () { return this._mode; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"encoding\", {\n        get: function () { return this._encoding; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"EOL\", {\n        get: function () { return this._EOL; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"indentation\", {\n        get: function () { return this._indentation; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"tabFocusMode\", {\n        get: function () { return this._tabFocusMode; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"screenReaderMode\", {\n        get: function () { return this._screenReaderMode; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(State.prototype, \"metadata\", {\n        get: function () { return this._metadata; },\n        enumerable: true,\n        configurable: true\n    });\n    State.prototype.update = function (update) {\n        var change = new StateChange();\n        if ('selectionStatus' in update) {\n            if (this._selectionStatus !== update.selectionStatus) {\n                this._selectionStatus = update.selectionStatus;\n                change.selectionStatus = true;\n            }\n        }\n        if ('indentation' in update) {\n            if (this._indentation !== update.indentation) {\n                this._indentation = update.indentation;\n                change.indentation = true;\n            }\n        }\n        if ('mode' in update) {\n            if (this._mode !== update.mode) {\n                this._mode = update.mode;\n                change.mode = true;\n            }\n        }\n        if ('encoding' in update) {\n            if (this._encoding !== update.encoding) {\n                this._encoding = update.encoding;\n                change.encoding = true;\n            }\n        }\n        if ('EOL' in update) {\n            if (this._EOL !== update.EOL) {\n                this._EOL = update.EOL;\n                change.EOL = true;\n            }\n        }\n        if ('tabFocusMode' in update) {\n            if (this._tabFocusMode !== update.tabFocusMode) {\n                this._tabFocusMode = update.tabFocusMode;\n                change.tabFocusMode = true;\n            }\n        }\n        if ('screenReaderMode' in update) {\n            if (this._screenReaderMode !== update.screenReaderMode) {\n                this._screenReaderMode = update.screenReaderMode;\n                change.screenReaderMode = true;\n            }\n        }\n        if ('metadata' in update) {\n            if (this._metadata !== update.metadata) {\n                this._metadata = update.metadata;\n                change.metadata = true;\n            }\n        }\n        return change;\n    };\n    return State;\n}());\nvar nlsSingleSelectionRange = nls.localize('singleSelectionRange', \"Ln {0}, Col {1} ({2} selected)\");\nvar nlsSingleSelection = nls.localize('singleSelection', \"Ln {0}, Col {1}\");\nvar nlsMultiSelectionRange = nls.localize('multiSelectionRange', \"{0} selections ({1} characters selected)\");\nvar nlsMultiSelection = nls.localize('multiSelection', \"{0} selections\");\nvar nlsEOLLF = nls.localize('endOfLineLineFeed', \"LF\");\nvar nlsEOLCRLF = nls.localize('endOfLineCarriageReturnLineFeed', \"CRLF\");\nvar nlsTabFocusMode = nls.localize('tabFocusModeEnabled', \"Tab Moves Focus\");\nvar nlsScreenReaderDetected = nls.localize('screenReaderDetected', \"Screen Reader Optimized\");\nvar nlsScreenReaderDetectedTitle = nls.localize('screenReaderDetectedExtra', \"If you are not using a Screen Reader, please change the setting `editor.accessibilitySupport` to \\\"off\\\".\");\nvar StatusBarItem = /** @class */ (function () {\n    function StatusBarItem(element, title) {\n        this.element = element;\n        this._showing = true;\n        this.setVisible(false);\n        this.element.title = title;\n    }\n    Object.defineProperty(StatusBarItem.prototype, \"textContent\", {\n        set: function (value) {\n            this.element.textContent = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StatusBarItem.prototype, \"onclick\", {\n        set: function (value) {\n            this.element.onclick = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StatusBarItem.prototype.setVisible = function (shouldShow) {\n        if (shouldShow !== this._showing) {\n            this._showing = shouldShow;\n            this.element.style.display = shouldShow ? '' : 'none';\n        }\n    };\n    return StatusBarItem;\n}());\nvar EditorStatus = /** @class */ (function () {\n    function EditorStatus(editorService, quickOpenService, instantiationService, untitledEditorService, modeService, textFileService, configurationService, notificationService, accessibilityService) {\n        this.editorService = editorService;\n        this.quickOpenService = quickOpenService;\n        this.instantiationService = instantiationService;\n        this.untitledEditorService = untitledEditorService;\n        this.modeService = modeService;\n        this.textFileService = textFileService;\n        this.configurationService = configurationService;\n        this.notificationService = notificationService;\n        this.accessibilityService = accessibilityService;\n        this._promptedScreenReader = false;\n        this.toDispose = [];\n        this.activeEditorListeners = [];\n        this.state = new State();\n    }\n    EditorStatus.prototype.render = function (container) {\n        var _this = this;\n        this.element = dom_1.append(container, dom_1.$('.editor-statusbar-item'));\n        this.tabFocusModeElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-tabfocusmode.status-bar-info')), nls.localize('disableTabMode', \"Disable Accessibility Mode\"));\n        this.tabFocusModeElement.onclick = function () { return _this.onTabFocusModeClick(); };\n        this.tabFocusModeElement.textContent = nlsTabFocusMode;\n        this.screenRedearModeElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-screenreadermode.status-bar-info')), nlsScreenReaderDetectedTitle);\n        this.screenRedearModeElement.textContent = nlsScreenReaderDetected;\n        this.screenRedearModeElement.onclick = function () { return _this.onScreenReaderModeClick(); };\n        this.selectionElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-selection')), nls.localize('gotoLine', \"Go to Line\"));\n        this.selectionElement.onclick = function () { return _this.onSelectionClick(); };\n        this.indentationElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-indentation')), nls.localize('selectIndentation', \"Select Indentation\"));\n        this.indentationElement.onclick = function () { return _this.onIndentationClick(); };\n        this.encodingElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-encoding')), nls.localize('selectEncoding', \"Select Encoding\"));\n        this.encodingElement.onclick = function () { return _this.onEncodingClick(); };\n        this.eolElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-eol')), nls.localize('selectEOL', \"Select End of Line Sequence\"));\n        this.eolElement.onclick = function () { return _this.onEOLClick(); };\n        this.modeElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('a.editor-status-mode')), nls.localize('selectLanguageMode', \"Select Language Mode\"));\n        this.modeElement.onclick = function () { return _this.onModeClick(); };\n        this.metadataElement = new StatusBarItem(dom_1.append(this.element, dom_1.$('span.editor-status-metadata')), nls.localize('fileInfo', \"File Information\"));\n        this.delayedRender = null;\n        this.toRender = null;\n        this.toDispose.push(lifecycle_1.toDisposable(function () {\n            if (_this.delayedRender) {\n                _this.delayedRender.dispose();\n                _this.delayedRender = null;\n            }\n        }), this.editorService.onDidActiveEditorChange(function () { return _this.updateStatusBar(); }), this.untitledEditorService.onDidChangeEncoding(function (r) { return _this.onResourceEncodingChange(r); }), this.textFileService.models.onModelEncodingChanged(function (e) { return _this.onResourceEncodingChange(e.resource); }), commonEditorConfig_1.TabFocus.onDidChangeTabFocus(function (e) { return _this.onTabFocusModeChange(); }));\n        return lifecycle_1.combinedDisposable(this.toDispose);\n    };\n    EditorStatus.prototype.updateState = function (update) {\n        var _this = this;\n        var changed = this.state.update(update);\n        if (!changed.hasChanges()) {\n            // Nothing really changed\n            return;\n        }\n        if (!this.toRender) {\n            this.toRender = changed;\n            this.delayedRender = dom_1.runAtThisOrScheduleAtNextAnimationFrame(function () {\n                _this.delayedRender = null;\n                var toRender = _this.toRender;\n                _this.toRender = null;\n                if (toRender) {\n                    _this._renderNow(toRender);\n                }\n            });\n        }\n        else {\n            this.toRender.combine(changed);\n        }\n    };\n    EditorStatus.prototype._renderNow = function (changed) {\n        if (changed.tabFocusMode) {\n            this.tabFocusModeElement.setVisible(!!this.state.tabFocusMode);\n        }\n        if (changed.screenReaderMode) {\n            this.screenRedearModeElement.setVisible(!!this.state.screenReaderMode);\n        }\n        if (changed.indentation) {\n            if (this.state.indentation) {\n                this.indentationElement.textContent = this.state.indentation;\n                this.indentationElement.setVisible(true);\n            }\n            else {\n                this.indentationElement.setVisible(false);\n            }\n        }\n        if (changed.selectionStatus) {\n            if (this.state.selectionStatus && !this.state.screenReaderMode) {\n                this.selectionElement.textContent = this.state.selectionStatus;\n                this.selectionElement.setVisible(true);\n            }\n            else {\n                this.selectionElement.setVisible(false);\n            }\n        }\n        if (changed.encoding) {\n            if (this.state.encoding) {\n                this.encodingElement.textContent = this.state.encoding;\n                this.encodingElement.setVisible(true);\n            }\n            else {\n                this.encodingElement.setVisible(false);\n            }\n        }\n        if (changed.EOL) {\n            if (this.state.EOL) {\n                this.eolElement.textContent = this.state.EOL === '\\r\\n' ? nlsEOLCRLF : nlsEOLLF;\n                this.eolElement.setVisible(true);\n            }\n            else {\n                this.eolElement.setVisible(false);\n            }\n        }\n        if (changed.mode) {\n            if (this.state.mode) {\n                this.modeElement.textContent = this.state.mode;\n                this.modeElement.setVisible(true);\n            }\n            else {\n                this.modeElement.setVisible(false);\n            }\n        }\n        if (changed.metadata) {\n            if (this.state.metadata) {\n                this.metadataElement.textContent = this.state.metadata;\n                this.metadataElement.setVisible(true);\n            }\n            else {\n                this.metadataElement.setVisible(false);\n            }\n        }\n    };\n    EditorStatus.prototype.getSelectionLabel = function (info) {\n        if (!info || !info.selections) {\n            return undefined;\n        }\n        if (info.selections.length === 1) {\n            if (info.charactersSelected) {\n                return strings.format(nlsSingleSelectionRange, info.selections[0].positionLineNumber, info.selections[0].positionColumn, info.charactersSelected);\n            }\n            return strings.format(nlsSingleSelection, info.selections[0].positionLineNumber, info.selections[0].positionColumn);\n        }\n        if (info.charactersSelected) {\n            return strings.format(nlsMultiSelectionRange, info.selections.length, info.charactersSelected);\n        }\n        if (info.selections.length > 0) {\n            return strings.format(nlsMultiSelection, info.selections.length);\n        }\n        return undefined;\n    };\n    EditorStatus.prototype.onModeClick = function () {\n        var action = this.instantiationService.createInstance(ChangeModeAction, ChangeModeAction.ID, ChangeModeAction.LABEL);\n        action.run();\n        action.dispose();\n    };\n    EditorStatus.prototype.onIndentationClick = function () {\n        var action = this.instantiationService.createInstance(ChangeIndentationAction, ChangeIndentationAction.ID, ChangeIndentationAction.LABEL);\n        action.run();\n        action.dispose();\n    };\n    EditorStatus.prototype.onScreenReaderModeClick = function () {\n        var _this = this;\n        if (!this.screenReaderNotification) {\n            this.screenReaderNotification = this.notificationService.prompt(notification_1.Severity.Info, nls.localize('screenReaderDetectedExplanation.question', \"Are you using a screen reader to operate VS Code? (Certain features like folding, minimap or word wrap are disabled when using a screen reader)\"), [{\n                    label: nls.localize('screenReaderDetectedExplanation.answerYes', \"Yes\"),\n                    run: function () {\n                        _this.configurationService.updateValue('editor.accessibilitySupport', 'on', configuration_1.ConfigurationTarget.USER);\n                    }\n                }, {\n                    label: nls.localize('screenReaderDetectedExplanation.answerNo', \"No\"),\n                    run: function () {\n                        _this.configurationService.updateValue('editor.accessibilitySupport', 'off', configuration_1.ConfigurationTarget.USER);\n                    }\n                }], { sticky: true });\n            event_1.Event.once(this.screenReaderNotification.onDidClose)(function () {\n                _this.screenReaderNotification = null;\n            });\n        }\n    };\n    EditorStatus.prototype.onSelectionClick = function () {\n        this.quickOpenService.show(':'); // \"Go to line\"\n    };\n    EditorStatus.prototype.onEOLClick = function () {\n        var action = this.instantiationService.createInstance(ChangeEOLAction, ChangeEOLAction.ID, ChangeEOLAction.LABEL);\n        action.run();\n        action.dispose();\n    };\n    EditorStatus.prototype.onEncodingClick = function () {\n        var action = this.instantiationService.createInstance(ChangeEncodingAction, ChangeEncodingAction.ID, ChangeEncodingAction.LABEL);\n        action.run();\n        action.dispose();\n    };\n    EditorStatus.prototype.onTabFocusModeClick = function () {\n        commonEditorConfig_1.TabFocus.setTabFocusMode(false);\n    };\n    EditorStatus.prototype.updateStatusBar = function () {\n        var _this = this;\n        var activeControl = this.editorService.activeControl;\n        var activeCodeEditor = activeControl ? types.withNullAsUndefined(editorBrowser_1.getCodeEditor(activeControl.getControl())) : undefined;\n        // Update all states\n        this.onScreenReaderModeChange(activeCodeEditor);\n        this.onSelectionChange(activeCodeEditor);\n        this.onModeChange(activeCodeEditor);\n        this.onEOLChange(activeCodeEditor);\n        this.onEncodingChange(activeControl);\n        this.onIndentationChange(activeCodeEditor);\n        this.onMetadataChange(activeControl);\n        // Dispose old active editor listeners\n        lifecycle_1.dispose(this.activeEditorListeners);\n        // Attach new listeners to active editor\n        if (activeCodeEditor) {\n            // Hook Listener for Configuration changes\n            this.activeEditorListeners.push(activeCodeEditor.onDidChangeConfiguration(function (event) {\n                if (event.accessibilitySupport) {\n                    _this.onScreenReaderModeChange(activeCodeEditor);\n                }\n            }));\n            // Hook Listener for Selection changes\n            this.activeEditorListeners.push(activeCodeEditor.onDidChangeCursorPosition(function (event) {\n                _this.onSelectionChange(activeCodeEditor);\n            }));\n            // Hook Listener for mode changes\n            this.activeEditorListeners.push(activeCodeEditor.onDidChangeModelLanguage(function (event) {\n                _this.onModeChange(activeCodeEditor);\n            }));\n            // Hook Listener for content changes\n            this.activeEditorListeners.push(activeCodeEditor.onDidChangeModelContent(function (e) {\n                _this.onEOLChange(activeCodeEditor);\n                var selections = activeCodeEditor.getSelections();\n                if (selections) {\n                    var _loop_1 = function (change) {\n                        if (selections.some(function (selection) { return range_1.Range.areIntersecting(selection, change.range); })) {\n                            _this.onSelectionChange(activeCodeEditor);\n                            return \"break\";\n                        }\n                    };\n                    for (var _i = 0, _a = e.changes; _i < _a.length; _i++) {\n                        var change = _a[_i];\n                        var state_1 = _loop_1(change);\n                        if (state_1 === \"break\")\n                            break;\n                    }\n                }\n            }));\n            // Hook Listener for content options changes\n            this.activeEditorListeners.push(activeCodeEditor.onDidChangeModelOptions(function (event) {\n                _this.onIndentationChange(activeCodeEditor);\n            }));\n        }\n        // Handle binary editors\n        else if (activeControl instanceof binaryEditor_1.BaseBinaryResourceEditor || activeControl instanceof binaryDiffEditor_1.BinaryResourceDiffEditor) {\n            var binaryEditors = [];\n            if (activeControl instanceof binaryDiffEditor_1.BinaryResourceDiffEditor) {\n                var details = activeControl.getDetailsEditor();\n                if (details instanceof binaryEditor_1.BaseBinaryResourceEditor) {\n                    binaryEditors.push(details);\n                }\n                var master = activeControl.getMasterEditor();\n                if (master instanceof binaryEditor_1.BaseBinaryResourceEditor) {\n                    binaryEditors.push(master);\n                }\n            }\n            else {\n                binaryEditors.push(activeControl);\n            }\n            binaryEditors.forEach(function (editor) {\n                _this.activeEditorListeners.push(editor.onMetadataChanged(function (metadata) {\n                    _this.onMetadataChange(activeControl);\n                }));\n                _this.activeEditorListeners.push(editor.onDidOpenInPlace(function () {\n                    _this.updateStatusBar();\n                }));\n            });\n        }\n    };\n    EditorStatus.prototype.onModeChange = function (editorWidget) {\n        var info = { mode: undefined };\n        // We only support text based editors\n        if (editorWidget) {\n            var textModel = editorWidget.getModel();\n            if (textModel) {\n                // Compute mode\n                var modeId = textModel.getLanguageIdentifier().language;\n                info = { mode: this.modeService.getLanguageName(modeId) || undefined };\n            }\n        }\n        this.updateState(info);\n    };\n    EditorStatus.prototype.onIndentationChange = function (editorWidget) {\n        var update = { indentation: undefined };\n        if (editorWidget) {\n            var model = editorWidget.getModel();\n            if (model) {\n                var modelOpts = model.getOptions();\n                update.indentation = (modelOpts.insertSpaces\n                    ? nls.localize('spacesSize', \"Spaces: {0}\", modelOpts.indentSize)\n                    : nls.localize({ key: 'tabSize', comment: ['Tab corresponds to the tab key'] }, \"Tab Size: {0}\", modelOpts.tabSize));\n            }\n        }\n        this.updateState(update);\n    };\n    EditorStatus.prototype.onMetadataChange = function (editor) {\n        var update = { metadata: undefined };\n        if (editor instanceof binaryEditor_1.BaseBinaryResourceEditor || editor instanceof binaryDiffEditor_1.BinaryResourceDiffEditor) {\n            update.metadata = editor.getMetadata();\n        }\n        this.updateState(update);\n    };\n    EditorStatus.prototype.onScreenReaderModeChange = function (editorWidget) {\n        var _this = this;\n        var screenReaderMode = false;\n        // We only support text based editors\n        if (editorWidget) {\n            var screenReaderDetected = (this.accessibilityService.getAccessibilitySupport() === accessibility_1.AccessibilitySupport.Enabled);\n            if (screenReaderDetected) {\n                var screenReaderConfiguration = this.configurationService.getValue('editor').accessibilitySupport;\n                if (screenReaderConfiguration === 'auto') {\n                    // show explanation\n                    if (!this._promptedScreenReader) {\n                        this._promptedScreenReader = true;\n                        setTimeout(function () {\n                            _this.onScreenReaderModeClick();\n                        }, 100);\n                    }\n                }\n            }\n            screenReaderMode = (editorWidget.getConfiguration().accessibilitySupport === accessibility_1.AccessibilitySupport.Enabled);\n        }\n        if (screenReaderMode === false && this.screenReaderNotification) {\n            this.screenReaderNotification.close();\n        }\n        this.updateState({ screenReaderMode: screenReaderMode });\n    };\n    EditorStatus.prototype.onSelectionChange = function (editorWidget) {\n        var info = {};\n        // We only support text based editors\n        if (editorWidget) {\n            // Compute selection(s)\n            info.selections = editorWidget.getSelections() || [];\n            // Compute selection length\n            info.charactersSelected = 0;\n            var textModel_1 = editorWidget.getModel();\n            if (textModel_1) {\n                info.selections.forEach(function (selection) {\n                    info.charactersSelected += textModel_1.getValueLengthInRange(selection);\n                });\n            }\n            // Compute the visible column for one selection. This will properly handle tabs and their configured widths\n            if (info.selections.length === 1) {\n                var visibleColumn = editorWidget.getVisibleColumnFromPosition(editorWidget.getPosition());\n                var selectionClone = info.selections[0].clone(); // do not modify the original position we got from the editor\n                selectionClone = new selection_1.Selection(selectionClone.selectionStartLineNumber, selectionClone.selectionStartColumn, selectionClone.positionLineNumber, visibleColumn);\n                info.selections[0] = selectionClone;\n            }\n        }\n        this.updateState({ selectionStatus: this.getSelectionLabel(info) });\n    };\n    EditorStatus.prototype.onEOLChange = function (editorWidget) {\n        var info = { EOL: undefined };\n        if (editorWidget && !editorWidget.getConfiguration().readOnly) {\n            var codeEditorModel = editorWidget.getModel();\n            if (codeEditorModel) {\n                info.EOL = codeEditorModel.getEOL();\n            }\n        }\n        this.updateState(info);\n    };\n    EditorStatus.prototype.onEncodingChange = function (e) {\n        if (e && !this.isActiveEditor(e)) {\n            return;\n        }\n        var info = { encoding: undefined };\n        // We only support text based editors\n        if (e && (editorBrowser_1.isCodeEditor(e.getControl()) || editorBrowser_1.isDiffEditor(e.getControl()))) {\n            var encodingSupport = e.input ? toEditorWithEncodingSupport(e.input) : null;\n            if (encodingSupport) {\n                var rawEncoding = encodingSupport.getEncoding();\n                var encodingInfo = files_1.SUPPORTED_ENCODINGS[rawEncoding];\n                if (encodingInfo) {\n                    info.encoding = encodingInfo.labelShort; // if we have a label, take it from there\n                }\n                else {\n                    info.encoding = rawEncoding; // otherwise use it raw\n                }\n            }\n        }\n        this.updateState(info);\n    };\n    EditorStatus.prototype.onResourceEncodingChange = function (resource) {\n        var activeControl = this.editorService.activeControl;\n        if (activeControl) {\n            var activeResource = editor_1.toResource(activeControl.input, { supportSideBySide: true });\n            if (activeResource && activeResource.toString() === resource.toString()) {\n                return this.onEncodingChange(activeControl); // only update if the encoding changed for the active resource\n            }\n        }\n    };\n    EditorStatus.prototype.onTabFocusModeChange = function () {\n        var info = { tabFocusMode: commonEditorConfig_1.TabFocus.getTabFocusMode() };\n        this.updateState(info);\n    };\n    EditorStatus.prototype.isActiveEditor = function (control) {\n        var activeControl = this.editorService.activeControl;\n        return !!activeControl && activeControl === control;\n    };\n    EditorStatus = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, quickOpen_1.IQuickOpenService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(4, modeService_1.IModeService),\n        tslib_1.__param(5, textfiles_1.ITextFileService),\n        tslib_1.__param(6, configuration_1.IConfigurationService),\n        tslib_1.__param(7, notification_1.INotificationService),\n        tslib_1.__param(8, accessibility_1.IAccessibilityService)\n    ], EditorStatus);\n    return EditorStatus;\n}());\nexports.EditorStatus = EditorStatus;\nfunction isWritableCodeEditor(codeEditor) {\n    if (!codeEditor) {\n        return false;\n    }\n    var config = codeEditor.getConfiguration();\n    return (!config.readOnly);\n}\nfunction isWritableBaseEditor(e) {\n    return e && isWritableCodeEditor(editorBrowser_1.getCodeEditor(e.getControl()) || undefined);\n}\nvar ShowLanguageExtensionsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowLanguageExtensionsAction, _super);\n    function ShowLanguageExtensionsAction(fileExtension, commandService, galleryService) {\n        var _this = _super.call(this, ShowLanguageExtensionsAction.ID, nls.localize('showLanguageExtensions', \"Search Marketplace Extensions for '{0}'...\", fileExtension)) || this;\n        _this.fileExtension = fileExtension;\n        _this.commandService = commandService;\n        _this.enabled = galleryService.isEnabled();\n        return _this;\n    }\n    ShowLanguageExtensionsAction.prototype.run = function () {\n        return this.commandService.executeCommand('workbench.extensions.action.showExtensionsForLanguage', this.fileExtension).then(function () { return undefined; });\n    };\n    ShowLanguageExtensionsAction.ID = 'workbench.action.showLanguageExtensions';\n    ShowLanguageExtensionsAction = tslib_1.__decorate([\n        tslib_1.__param(1, commands_1.ICommandService),\n        tslib_1.__param(2, extensionManagement_1.IExtensionGalleryService)\n    ], ShowLanguageExtensionsAction);\n    return ShowLanguageExtensionsAction;\n}(actions_1.Action));\nexports.ShowLanguageExtensionsAction = ShowLanguageExtensionsAction;\nvar ChangeModeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChangeModeAction, _super);\n    function ChangeModeAction(actionId, actionLabel, modeService, modelService, editorService, configurationService, quickInputService, preferencesService, instantiationService, untitledEditorService) {\n        var _this = _super.call(this, actionId, actionLabel) || this;\n        _this.modeService = modeService;\n        _this.modelService = modelService;\n        _this.editorService = editorService;\n        _this.configurationService = configurationService;\n        _this.quickInputService = quickInputService;\n        _this.preferencesService = preferencesService;\n        _this.instantiationService = instantiationService;\n        _this.untitledEditorService = untitledEditorService;\n        return _this;\n    }\n    ChangeModeAction.prototype.run = function () {\n        var _this = this;\n        var activeTextEditorWidget = editorBrowser_1.getCodeEditor(this.editorService.activeTextEditorWidget);\n        if (!activeTextEditorWidget) {\n            return this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n        }\n        var textModel = activeTextEditorWidget.getModel();\n        var resource = this.editorService.activeEditor ? editor_1.toResource(this.editorService.activeEditor, { supportSideBySide: true }) : null;\n        var hasLanguageSupport = !!resource;\n        if (resource && resource.scheme === network_1.Schemas.untitled && !this.untitledEditorService.hasAssociatedFilePath(resource)) {\n            hasLanguageSupport = false; // no configuration for untitled resources (e.g. \"Untitled-1\")\n        }\n        // Compute mode\n        var currentModeId;\n        var modeId;\n        if (textModel) {\n            modeId = textModel.getLanguageIdentifier().language;\n            currentModeId = this.modeService.getLanguageName(modeId) || undefined;\n        }\n        // All languages are valid picks\n        var languages = this.modeService.getRegisteredLanguageNames();\n        var picks = languages.sort().map(function (lang, index) {\n            var description;\n            if (currentModeId === lang) {\n                description = nls.localize('languageDescription', \"({0}) - Configured Language\", _this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n            }\n            else {\n                description = nls.localize('languageDescriptionConfigured', \"({0})\", _this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n            }\n            // construct a fake resource to be able to show nice icons if any\n            var fakeResource;\n            var extensions = _this.modeService.getExtensions(lang);\n            if (extensions && extensions.length) {\n                fakeResource = uri_1.URI.file(extensions[0]);\n            }\n            else {\n                var filenames = _this.modeService.getFilenames(lang);\n                if (filenames && filenames.length) {\n                    fakeResource = uri_1.URI.file(filenames[0]);\n                }\n            }\n            return {\n                label: lang,\n                iconClasses: getIconClasses_1.getIconClasses(_this.modelService, _this.modeService, fakeResource),\n                description: description\n            };\n        });\n        if (hasLanguageSupport) {\n            picks.unshift({ type: 'separator', label: nls.localize('languagesPicks', \"languages (identifier)\") });\n        }\n        // Offer action to configure via settings\n        var configureModeAssociations;\n        var configureModeSettings;\n        var galleryAction;\n        if (hasLanguageSupport && resource) {\n            var ext = resources_1.extname(resource) || resources_1.basename(resource);\n            galleryAction = this.instantiationService.createInstance(ShowLanguageExtensionsAction, ext);\n            if (galleryAction.enabled) {\n                picks.unshift(galleryAction);\n            }\n            configureModeSettings = { label: nls.localize('configureModeSettings', \"Configure '{0}' language based settings...\", currentModeId) };\n            picks.unshift(configureModeSettings);\n            configureModeAssociations = { label: nls.localize('configureAssociationsExt', \"Configure File Association for '{0}'...\", ext) };\n            picks.unshift(configureModeAssociations);\n        }\n        // Offer to \"Auto Detect\"\n        var autoDetectMode = {\n            label: nls.localize('autoDetect', \"Auto Detect\")\n        };\n        if (hasLanguageSupport) {\n            picks.unshift(autoDetectMode);\n        }\n        return this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language Mode\"), matchOnDescription: true }).then(function (pick) {\n            if (!pick) {\n                return;\n            }\n            if (pick === galleryAction) {\n                galleryAction.run();\n                return;\n            }\n            // User decided to permanently configure associations, return right after\n            if (pick === configureModeAssociations) {\n                if (resource) {\n                    _this.configureFileAssociation(resource);\n                }\n                return;\n            }\n            // User decided to configure settings for current language\n            if (pick === configureModeSettings) {\n                _this.preferencesService.configureSettingsForLanguage(modeId);\n                return;\n            }\n            // Change mode for active editor\n            var activeEditor = _this.editorService.activeEditor;\n            var activeTextEditorWidget = _this.editorService.activeTextEditorWidget;\n            var models = [];\n            if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n                var codeEditorModel = activeTextEditorWidget.getModel();\n                if (codeEditorModel) {\n                    models.push(codeEditorModel);\n                }\n            }\n            else if (editorBrowser_1.isDiffEditor(activeTextEditorWidget)) {\n                var diffEditorModel = activeTextEditorWidget.getModel();\n                if (diffEditorModel) {\n                    if (diffEditorModel.original) {\n                        models.push(diffEditorModel.original);\n                    }\n                    if (diffEditorModel.modified) {\n                        models.push(diffEditorModel.modified);\n                    }\n                }\n            }\n            // Find mode\n            var languageSelection;\n            if (pick === autoDetectMode) {\n                if (textModel) {\n                    var resource_1 = editor_1.toResource(activeEditor, { supportSideBySide: true });\n                    if (resource_1) {\n                        languageSelection = _this.modeService.createByFilepathOrFirstLine(resource_1.fsPath, textModel.getLineContent(1));\n                    }\n                }\n            }\n            else {\n                languageSelection = _this.modeService.createByLanguageName(pick.label);\n            }\n            // Change mode\n            if (typeof languageSelection !== 'undefined') {\n                for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n                    var textModel_2 = models_1[_i];\n                    _this.modelService.setMode(textModel_2, languageSelection);\n                }\n            }\n        });\n    };\n    ChangeModeAction.prototype.configureFileAssociation = function (resource) {\n        var _this = this;\n        var extension = resources_1.extname(resource);\n        var base = resources_1.basename(resource);\n        var currentAssociation = this.modeService.getModeIdByFilepathOrFirstLine(base);\n        var languages = this.modeService.getRegisteredLanguageNames();\n        var picks = languages.sort().map(function (lang, index) {\n            var id = _this.modeService.getModeIdForLanguageName(lang.toLowerCase());\n            return {\n                id: id,\n                label: lang,\n                description: (id === currentAssociation) ? nls.localize('currentAssociation', \"Current Association\") : undefined\n            };\n        });\n        setTimeout(function () {\n            _this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguageToConfigure', \"Select Language Mode to Associate with '{0}'\", extension || base) }).then(function (language) {\n                if (language) {\n                    var fileAssociationsConfig = _this.configurationService.inspect(files_1.FILES_ASSOCIATIONS_CONFIG);\n                    var associationKey = void 0;\n                    if (extension && base[0] !== '.') {\n                        associationKey = \"*\" + extension; // only use \"*.ext\" if the file path is in the form of <name>.<ext>\n                    }\n                    else {\n                        associationKey = base; // otherwise use the basename (e.g. .gitignore, Dockerfile)\n                    }\n                    // If the association is already being made in the workspace, make sure to target workspace settings\n                    var target = configuration_1.ConfigurationTarget.USER;\n                    if (fileAssociationsConfig.workspace && !!fileAssociationsConfig.workspace[associationKey]) {\n                        target = configuration_1.ConfigurationTarget.WORKSPACE;\n                    }\n                    // Make sure to write into the value of the target and not the merged value from USER and WORKSPACE config\n                    var currentAssociations = objects_1.deepClone((target === configuration_1.ConfigurationTarget.WORKSPACE) ? fileAssociationsConfig.workspace : fileAssociationsConfig.user) || Object.create(null);\n                    currentAssociations[associationKey] = language.id;\n                    _this.configurationService.updateValue(files_1.FILES_ASSOCIATIONS_CONFIG, currentAssociations, target);\n                }\n            });\n        }, 50 /* quick open is sensitive to being opened so soon after another */);\n    };\n    ChangeModeAction.ID = 'workbench.action.editor.changeLanguageMode';\n    ChangeModeAction.LABEL = nls.localize('changeMode', \"Change Language Mode\");\n    ChangeModeAction = tslib_1.__decorate([\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, modelService_1.IModelService),\n        tslib_1.__param(4, editorService_1.IEditorService),\n        tslib_1.__param(5, configuration_1.IConfigurationService),\n        tslib_1.__param(6, quickInput_1.IQuickInputService),\n        tslib_1.__param(7, preferences_1.IPreferencesService),\n        tslib_1.__param(8, instantiation_1.IInstantiationService),\n        tslib_1.__param(9, untitledEditorService_1.IUntitledEditorService)\n    ], ChangeModeAction);\n    return ChangeModeAction;\n}(actions_1.Action));\nexports.ChangeModeAction = ChangeModeAction;\nvar ChangeIndentationAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChangeIndentationAction, _super);\n    function ChangeIndentationAction(actionId, actionLabel, editorService, quickInputService) {\n        var _this = _super.call(this, actionId, actionLabel) || this;\n        _this.editorService = editorService;\n        _this.quickInputService = quickInputService;\n        return _this;\n    }\n    ChangeIndentationAction.prototype.run = function () {\n        var activeTextEditorWidget = editorBrowser_1.getCodeEditor(this.editorService.activeTextEditorWidget);\n        if (!activeTextEditorWidget) {\n            return this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n        }\n        if (!isWritableCodeEditor(activeTextEditorWidget)) {\n            return this.quickInputService.pick([{ label: nls.localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n        }\n        var picks = [\n            activeTextEditorWidget.getAction(indentation_1.IndentUsingSpaces.ID),\n            activeTextEditorWidget.getAction(indentation_1.IndentUsingTabs.ID),\n            activeTextEditorWidget.getAction(indentation_1.DetectIndentation.ID),\n            activeTextEditorWidget.getAction(indentation_1.IndentationToSpacesAction.ID),\n            activeTextEditorWidget.getAction(indentation_1.IndentationToTabsAction.ID),\n            activeTextEditorWidget.getAction(linesOperations_1.TrimTrailingWhitespaceAction.ID)\n        ].map(function (a) {\n            return {\n                id: a.id,\n                label: a.label,\n                detail: platform_1.Language.isDefaultVariant() ? undefined : a.alias,\n                run: function () {\n                    activeTextEditorWidget.focus();\n                    a.run();\n                }\n            };\n        });\n        picks.splice(3, 0, { type: 'separator', label: nls.localize('indentConvert', \"convert file\") });\n        picks.unshift({ type: 'separator', label: nls.localize('indentView', \"change view\") });\n        return this.quickInputService.pick(picks, { placeHolder: nls.localize('pickAction', \"Select Action\"), matchOnDetail: true }).then(function (action) { return action && action.run(); });\n    };\n    ChangeIndentationAction.ID = 'workbench.action.editor.changeIndentation';\n    ChangeIndentationAction.LABEL = nls.localize('changeIndentation', \"Change Indentation\");\n    ChangeIndentationAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, quickInput_1.IQuickInputService)\n    ], ChangeIndentationAction);\n    return ChangeIndentationAction;\n}(actions_1.Action));\nvar ChangeEOLAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChangeEOLAction, _super);\n    function ChangeEOLAction(actionId, actionLabel, editorService, quickInputService) {\n        var _this = _super.call(this, actionId, actionLabel) || this;\n        _this.editorService = editorService;\n        _this.quickInputService = quickInputService;\n        return _this;\n    }\n    ChangeEOLAction.prototype.run = function () {\n        var _this = this;\n        var activeTextEditorWidget = editorBrowser_1.getCodeEditor(this.editorService.activeTextEditorWidget);\n        if (!activeTextEditorWidget) {\n            return this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n        }\n        if (!isWritableCodeEditor(activeTextEditorWidget)) {\n            return this.quickInputService.pick([{ label: nls.localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n        }\n        var textModel = activeTextEditorWidget.getModel();\n        var EOLOptions = [\n            { label: nlsEOLLF, eol: model_1.EndOfLineSequence.LF },\n            { label: nlsEOLCRLF, eol: model_1.EndOfLineSequence.CRLF },\n        ];\n        var selectedIndex = (textModel && textModel.getEOL() === '\\n') ? 0 : 1;\n        return this.quickInputService.pick(EOLOptions, { placeHolder: nls.localize('pickEndOfLine', \"Select End of Line Sequence\"), activeItem: EOLOptions[selectedIndex] }).then(function (eol) {\n            if (eol) {\n                var activeCodeEditor = editorBrowser_1.getCodeEditor(_this.editorService.activeTextEditorWidget);\n                if (activeCodeEditor && activeCodeEditor.hasModel() && isWritableCodeEditor(activeCodeEditor)) {\n                    var textModel_3 = activeCodeEditor.getModel();\n                    textModel_3.pushEOL(eol.eol);\n                }\n            }\n        });\n    };\n    ChangeEOLAction.ID = 'workbench.action.editor.changeEOL';\n    ChangeEOLAction.LABEL = nls.localize('changeEndOfLine', \"Change End of Line Sequence\");\n    ChangeEOLAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, quickInput_1.IQuickInputService)\n    ], ChangeEOLAction);\n    return ChangeEOLAction;\n}(actions_1.Action));\nexports.ChangeEOLAction = ChangeEOLAction;\nvar ChangeEncodingAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChangeEncodingAction, _super);\n    function ChangeEncodingAction(actionId, actionLabel, editorService, quickInputService, textResourceConfigurationService, fileService) {\n        var _this = _super.call(this, actionId, actionLabel) || this;\n        _this.editorService = editorService;\n        _this.quickInputService = quickInputService;\n        _this.textResourceConfigurationService = textResourceConfigurationService;\n        _this.fileService = fileService;\n        return _this;\n    }\n    ChangeEncodingAction.prototype.run = function () {\n        var _this = this;\n        if (!editorBrowser_1.getCodeEditor(this.editorService.activeTextEditorWidget)) {\n            return this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n        }\n        var activeControl = this.editorService.activeControl;\n        if (!activeControl) {\n            return this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n        }\n        var encodingSupport = toEditorWithEncodingSupport(activeControl.input);\n        if (!encodingSupport) {\n            return this.quickInputService.pick([{ label: nls.localize('noFileEditor', \"No file active at this time\") }]);\n        }\n        var saveWithEncodingPick;\n        var reopenWithEncodingPick;\n        if (platform_1.Language.isDefaultVariant()) {\n            saveWithEncodingPick = { label: nls.localize('saveWithEncoding', \"Save with Encoding\") };\n            reopenWithEncodingPick = { label: nls.localize('reopenWithEncoding', \"Reopen with Encoding\") };\n        }\n        else {\n            saveWithEncodingPick = { label: nls.localize('saveWithEncoding', \"Save with Encoding\"), detail: 'Save with Encoding', };\n            reopenWithEncodingPick = { label: nls.localize('reopenWithEncoding', \"Reopen with Encoding\"), detail: 'Reopen with Encoding' };\n        }\n        var pickActionPromise;\n        if (encodingSupport instanceof untitledEditorInput_1.UntitledEditorInput) {\n            pickActionPromise = Promise.resolve(saveWithEncodingPick);\n        }\n        else if (!isWritableBaseEditor(activeControl)) {\n            pickActionPromise = Promise.resolve(reopenWithEncodingPick);\n        }\n        else {\n            pickActionPromise = this.quickInputService.pick([reopenWithEncodingPick, saveWithEncodingPick], { placeHolder: nls.localize('pickAction', \"Select Action\"), matchOnDetail: true });\n        }\n        return pickActionPromise.then(function (action) {\n            if (!action) {\n                return undefined;\n            }\n            var resource = editor_1.toResource(activeControl.input, { supportSideBySide: true });\n            return async_1.timeout(50 /* quick open is sensitive to being opened so soon after another */)\n                .then(function () {\n                if (!resource || !_this.fileService.canHandleResource(resource)) {\n                    return Promise.resolve(null); // encoding detection only possible for resources the file service can handle\n                }\n                return _this.fileService.resolveContent(resource, { autoGuessEncoding: true, acceptTextOnly: true }).then(function (content) { return content.encoding; }, function (err) { return null; });\n            })\n                .then(function (guessedEncoding) {\n                var isReopenWithEncoding = (action === reopenWithEncodingPick);\n                var configuredEncoding = _this.textResourceConfigurationService.getValue(types.withNullAsUndefined(resource), 'files.encoding');\n                var directMatchIndex;\n                var aliasMatchIndex;\n                // All encodings are valid picks\n                var picks = Object.keys(files_1.SUPPORTED_ENCODINGS)\n                    .sort(function (k1, k2) {\n                    if (k1 === configuredEncoding) {\n                        return -1;\n                    }\n                    else if (k2 === configuredEncoding) {\n                        return 1;\n                    }\n                    return files_1.SUPPORTED_ENCODINGS[k1].order - files_1.SUPPORTED_ENCODINGS[k2].order;\n                })\n                    .filter(function (k) {\n                    if (k === guessedEncoding && guessedEncoding !== configuredEncoding) {\n                        return false; // do not show encoding if it is the guessed encoding that does not match the configured\n                    }\n                    return !isReopenWithEncoding || !files_1.SUPPORTED_ENCODINGS[k].encodeOnly; // hide those that can only be used for encoding if we are about to decode\n                })\n                    .map(function (key, index) {\n                    if (key === encodingSupport.getEncoding()) {\n                        directMatchIndex = index;\n                    }\n                    else if (files_1.SUPPORTED_ENCODINGS[key].alias === encodingSupport.getEncoding()) {\n                        aliasMatchIndex = index;\n                    }\n                    return { id: key, label: files_1.SUPPORTED_ENCODINGS[key].labelLong, description: key };\n                });\n                var items = picks.slice();\n                // If we have a guessed encoding, show it first unless it matches the configured encoding\n                if (guessedEncoding && configuredEncoding !== guessedEncoding && files_1.SUPPORTED_ENCODINGS[guessedEncoding]) {\n                    picks.unshift({ type: 'separator' });\n                    picks.unshift({ id: guessedEncoding, label: files_1.SUPPORTED_ENCODINGS[guessedEncoding].labelLong, description: nls.localize('guessedEncoding', \"Guessed from content\") });\n                }\n                return _this.quickInputService.pick(picks, {\n                    placeHolder: isReopenWithEncoding ? nls.localize('pickEncodingForReopen', \"Select File Encoding to Reopen File\") : nls.localize('pickEncodingForSave', \"Select File Encoding to Save with\"),\n                    activeItem: items[typeof directMatchIndex === 'number' ? directMatchIndex : typeof aliasMatchIndex === 'number' ? aliasMatchIndex : -1]\n                }).then(function (encoding) {\n                    if (!encoding) {\n                        return;\n                    }\n                    var activeControl = _this.editorService.activeControl;\n                    if (!activeControl) {\n                        return;\n                    }\n                    var encodingSupport = toEditorWithEncodingSupport(activeControl.input);\n                    if (typeof encoding.id !== 'undefined' && encodingSupport && encodingSupport.getEncoding() !== encoding.id) {\n                        encodingSupport.setEncoding(encoding.id, isReopenWithEncoding ? editor_1.EncodingMode.Decode : editor_1.EncodingMode.Encode); // Set new encoding\n                    }\n                });\n            });\n        });\n    };\n    ChangeEncodingAction.ID = 'workbench.action.editor.changeEncoding';\n    ChangeEncodingAction.LABEL = nls.localize('changeEncoding', \"Change File Encoding\");\n    ChangeEncodingAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, quickInput_1.IQuickInputService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(5, files_1.IFileService)\n    ], ChangeEncodingAction);\n    return ChangeEncodingAction;\n}(actions_1.Action));\nexports.ChangeEncodingAction = ChangeEncodingAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorStatus.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorStatus.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/editorstatus';\nimport * as nls from 'vs/nls';\nimport { $, append, runAtThisOrScheduleAtNextAnimationFrame } from 'vs/base/browser/dom';\nimport * as strings from 'vs/base/common/strings';\nimport { extname, basename } from 'vs/base/common/resources';\nimport * as types from 'vs/base/common/types';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IStatusbarItem } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { Action } from 'vs/base/common/actions';\nimport { Language } from 'vs/base/common/platform';\nimport { UntitledEditorInput } from 'vs/workbench/common/editor/untitledEditorInput';\nimport { IFileEditorInput, EncodingMode, IEncodingSupport, toResource, SideBySideEditorInput, IEditor as IBaseEditor, IEditorInput } from 'vs/workbench/common/editor';\nimport { IDisposable, combinedDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { IEditorAction } from 'vs/editor/common/editorCommon';\nimport { EndOfLineSequence, ITextModel } from 'vs/editor/common/model';\nimport { IModelLanguageChangedEvent, IModelOptionsChangedEvent } from 'vs/editor/common/model/textModelEvents';\nimport { TrimTrailingWhitespaceAction } from 'vs/editor/contrib/linesOperations/linesOperations';\nimport { IndentUsingSpaces, IndentUsingTabs, DetectIndentation, IndentationToSpacesAction, IndentationToTabsAction } from 'vs/editor/contrib/indentation/indentation';\nimport { BaseBinaryResourceEditor } from 'vs/workbench/browser/parts/editor/binaryEditor';\nimport { BinaryResourceDiffEditor } from 'vs/workbench/browser/parts/editor/binaryDiffEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { SUPPORTED_ENCODINGS, IFileService, FILES_ASSOCIATIONS_CONFIG } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IModeService, ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TabFocus } from 'vs/editor/common/config/commonEditorConfig';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ICursorPositionChangedEvent } from 'vs/editor/common/controller/cursorEvents';\nimport { IConfigurationChangedEvent, IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { deepClone } from 'vs/base/common/objects';\nimport { ICodeEditor, isCodeEditor, isDiffEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Schemas } from 'vs/base/common/network';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { timeout } from 'vs/base/common/async';\nimport { INotificationHandle, INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\nimport { IAccessibilityService, AccessibilitySupport } from 'vs/platform/accessibility/common/accessibility';\n\nclass SideBySideEditorEncodingSupport implements IEncodingSupport {\n\tconstructor(private master: IEncodingSupport, private details: IEncodingSupport) { }\n\n\tgetEncoding(): string {\n\t\treturn this.master.getEncoding(); // always report from modified (right hand) side\n\t}\n\n\tsetEncoding(encoding: string, mode: EncodingMode): void {\n\t\t[this.master, this.details].forEach(s => s.setEncoding(encoding, mode));\n\t}\n}\n\nfunction toEditorWithEncodingSupport(input: IEditorInput): IEncodingSupport | null {\n\n\t// Untitled Editor\n\tif (input instanceof UntitledEditorInput) {\n\t\treturn input;\n\t}\n\n\t// Side by Side (diff) Editor\n\tif (input instanceof SideBySideEditorInput) {\n\t\tconst masterEncodingSupport = toEditorWithEncodingSupport(input.master);\n\t\tconst detailsEncodingSupport = toEditorWithEncodingSupport(input.details);\n\n\t\tif (masterEncodingSupport && detailsEncodingSupport) {\n\t\t\treturn new SideBySideEditorEncodingSupport(masterEncodingSupport, detailsEncodingSupport);\n\t\t}\n\n\t\treturn masterEncodingSupport;\n\t}\n\n\t// File or Resource Editor\n\tlet encodingSupport = input as IFileEditorInput;\n\tif (types.areFunctions(encodingSupport.setEncoding, encodingSupport.getEncoding)) {\n\t\treturn encodingSupport;\n\t}\n\n\t// Unsupported for any other editor\n\treturn null;\n}\n\ninterface IEditorSelectionStatus {\n\tselections?: Selection[];\n\tcharactersSelected?: number;\n}\n\nclass StateChange {\n\t_stateChangeBrand: void;\n\n\tindentation: boolean = false;\n\tselectionStatus: boolean = false;\n\tmode: boolean = false;\n\tencoding: boolean = false;\n\tEOL: boolean = false;\n\ttabFocusMode: boolean = false;\n\tscreenReaderMode: boolean = false;\n\tmetadata: boolean = false;\n\n\tcombine(other: StateChange) {\n\t\tthis.indentation = this.indentation || other.indentation;\n\t\tthis.selectionStatus = this.selectionStatus || other.selectionStatus;\n\t\tthis.mode = this.mode || other.mode;\n\t\tthis.encoding = this.encoding || other.encoding;\n\t\tthis.EOL = this.EOL || other.EOL;\n\t\tthis.tabFocusMode = this.tabFocusMode || other.tabFocusMode;\n\t\tthis.screenReaderMode = this.screenReaderMode || other.screenReaderMode;\n\t\tthis.metadata = this.metadata || other.metadata;\n\t}\n\n\tpublic hasChanges(): boolean {\n\t\treturn this.indentation\n\t\t\t|| this.selectionStatus\n\t\t\t|| this.mode\n\t\t\t|| this.encoding\n\t\t\t|| this.EOL\n\t\t\t|| this.tabFocusMode\n\t\t\t|| this.screenReaderMode\n\t\t\t|| this.metadata;\n\t}\n}\n\ninterface StateDelta {\n\tselectionStatus?: string;\n\tmode?: string;\n\tencoding?: string;\n\tEOL?: string;\n\tindentation?: string;\n\ttabFocusMode?: boolean;\n\tscreenReaderMode?: boolean;\n\tmetadata?: string | undefined;\n}\n\nclass State {\n\tprivate _selectionStatus: string | undefined;\n\tget selectionStatus(): string | undefined { return this._selectionStatus; }\n\n\tprivate _mode: string | undefined;\n\tget mode(): string | undefined { return this._mode; }\n\n\tprivate _encoding: string | undefined;\n\tget encoding(): string | undefined { return this._encoding; }\n\n\tprivate _EOL: string | undefined;\n\tget EOL(): string | undefined { return this._EOL; }\n\n\tprivate _indentation: string | undefined;\n\tget indentation(): string | undefined { return this._indentation; }\n\n\tprivate _tabFocusMode: boolean | undefined;\n\tget tabFocusMode(): boolean | undefined { return this._tabFocusMode; }\n\n\tprivate _screenReaderMode: boolean | undefined;\n\tget screenReaderMode(): boolean | undefined { return this._screenReaderMode; }\n\n\tprivate _metadata: string | undefined;\n\tget metadata(): string | undefined { return this._metadata; }\n\n\tconstructor() { }\n\n\tupdate(update: StateDelta): StateChange {\n\t\tconst change = new StateChange();\n\n\t\tif ('selectionStatus' in update) {\n\t\t\tif (this._selectionStatus !== update.selectionStatus) {\n\t\t\t\tthis._selectionStatus = update.selectionStatus;\n\t\t\t\tchange.selectionStatus = true;\n\t\t\t}\n\t\t}\n\t\tif ('indentation' in update) {\n\t\t\tif (this._indentation !== update.indentation) {\n\t\t\t\tthis._indentation = update.indentation;\n\t\t\t\tchange.indentation = true;\n\t\t\t}\n\t\t}\n\t\tif ('mode' in update) {\n\t\t\tif (this._mode !== update.mode) {\n\t\t\t\tthis._mode = update.mode;\n\t\t\t\tchange.mode = true;\n\t\t\t}\n\t\t}\n\t\tif ('encoding' in update) {\n\t\t\tif (this._encoding !== update.encoding) {\n\t\t\t\tthis._encoding = update.encoding;\n\t\t\t\tchange.encoding = true;\n\t\t\t}\n\t\t}\n\t\tif ('EOL' in update) {\n\t\t\tif (this._EOL !== update.EOL) {\n\t\t\t\tthis._EOL = update.EOL;\n\t\t\t\tchange.EOL = true;\n\t\t\t}\n\t\t}\n\t\tif ('tabFocusMode' in update) {\n\t\t\tif (this._tabFocusMode !== update.tabFocusMode) {\n\t\t\t\tthis._tabFocusMode = update.tabFocusMode;\n\t\t\t\tchange.tabFocusMode = true;\n\t\t\t}\n\t\t}\n\t\tif ('screenReaderMode' in update) {\n\t\t\tif (this._screenReaderMode !== update.screenReaderMode) {\n\t\t\t\tthis._screenReaderMode = update.screenReaderMode;\n\t\t\t\tchange.screenReaderMode = true;\n\t\t\t}\n\t\t}\n\t\tif ('metadata' in update) {\n\t\t\tif (this._metadata !== update.metadata) {\n\t\t\t\tthis._metadata = update.metadata;\n\t\t\t\tchange.metadata = true;\n\t\t\t}\n\t\t}\n\n\t\treturn change;\n\t}\n}\n\nconst nlsSingleSelectionRange = nls.localize('singleSelectionRange', \"Ln {0}, Col {1} ({2} selected)\");\nconst nlsSingleSelection = nls.localize('singleSelection', \"Ln {0}, Col {1}\");\nconst nlsMultiSelectionRange = nls.localize('multiSelectionRange', \"{0} selections ({1} characters selected)\");\nconst nlsMultiSelection = nls.localize('multiSelection', \"{0} selections\");\nconst nlsEOLLF = nls.localize('endOfLineLineFeed', \"LF\");\nconst nlsEOLCRLF = nls.localize('endOfLineCarriageReturnLineFeed', \"CRLF\");\nconst nlsTabFocusMode = nls.localize('tabFocusModeEnabled', \"Tab Moves Focus\");\nconst nlsScreenReaderDetected = nls.localize('screenReaderDetected', \"Screen Reader Optimized\");\nconst nlsScreenReaderDetectedTitle = nls.localize('screenReaderDetectedExtra', \"If you are not using a Screen Reader, please change the setting `editor.accessibilitySupport` to \\\"off\\\".\");\n\n\nclass StatusBarItem {\n\tprivate _showing = true;\n\n\tconstructor(\n\t\tprivate readonly element: HTMLElement,\n\t\ttitle: string,\n\t) {\n\t\tthis.setVisible(false);\n\t\tthis.element.title = title;\n\t}\n\n\tpublic set textContent(value: string) {\n\t\tthis.element.textContent = value;\n\t}\n\n\tpublic set onclick(value: () => void) {\n\t\tthis.element.onclick = value;\n\t}\n\n\tpublic setVisible(shouldShow: boolean): void {\n\t\tif (shouldShow !== this._showing) {\n\t\t\tthis._showing = shouldShow;\n\t\t\tthis.element.style.display = shouldShow ? '' : 'none';\n\t\t}\n\t}\n}\n\n\nexport class EditorStatus implements IStatusbarItem {\n\tprivate state: State;\n\tprivate element: HTMLElement;\n\tprivate tabFocusModeElement: StatusBarItem;\n\tprivate screenRedearModeElement: StatusBarItem;\n\tprivate indentationElement: StatusBarItem;\n\tprivate selectionElement: StatusBarItem;\n\tprivate encodingElement: StatusBarItem;\n\tprivate eolElement: StatusBarItem;\n\tprivate modeElement: StatusBarItem;\n\tprivate metadataElement: StatusBarItem;\n\tprivate toDispose: IDisposable[];\n\tprivate activeEditorListeners: IDisposable[];\n\tprivate delayedRender: IDisposable | null;\n\tprivate toRender: StateChange | null;\n\tprivate screenReaderNotification: INotificationHandle | null;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService\n\t) {\n\t\tthis.toDispose = [];\n\t\tthis.activeEditorListeners = [];\n\t\tthis.state = new State();\n\t}\n\n\trender(container: HTMLElement): IDisposable {\n\t\tthis.element = append(container, $('.editor-statusbar-item'));\n\n\t\tthis.tabFocusModeElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-tabfocusmode.status-bar-info')),\n\t\t\tnls.localize('disableTabMode', \"Disable Accessibility Mode\"));\n\t\tthis.tabFocusModeElement.onclick = () => this.onTabFocusModeClick();\n\t\tthis.tabFocusModeElement.textContent = nlsTabFocusMode;\n\n\t\tthis.screenRedearModeElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-screenreadermode.status-bar-info')),\n\t\t\tnlsScreenReaderDetectedTitle);\n\t\tthis.screenRedearModeElement.textContent = nlsScreenReaderDetected;\n\t\tthis.screenRedearModeElement.onclick = () => this.onScreenReaderModeClick();\n\n\t\tthis.selectionElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-selection')),\n\t\t\tnls.localize('gotoLine', \"Go to Line\"));\n\t\tthis.selectionElement.onclick = () => this.onSelectionClick();\n\n\t\tthis.indentationElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-indentation')),\n\t\t\tnls.localize('selectIndentation', \"Select Indentation\"));\n\t\tthis.indentationElement.onclick = () => this.onIndentationClick();\n\n\t\tthis.encodingElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-encoding')),\n\t\t\tnls.localize('selectEncoding', \"Select Encoding\"));\n\t\tthis.encodingElement.onclick = () => this.onEncodingClick();\n\n\t\tthis.eolElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-eol')),\n\t\t\tnls.localize('selectEOL', \"Select End of Line Sequence\"));\n\t\tthis.eolElement.onclick = () => this.onEOLClick();\n\n\t\tthis.modeElement = new StatusBarItem(\n\t\t\tappend(this.element, $('a.editor-status-mode')),\n\t\t\tnls.localize('selectLanguageMode', \"Select Language Mode\"));\n\t\tthis.modeElement.onclick = () => this.onModeClick();\n\n\t\tthis.metadataElement = new StatusBarItem(\n\t\t\tappend(this.element, $('span.editor-status-metadata')),\n\t\t\tnls.localize('fileInfo', \"File Information\"));\n\n\t\tthis.delayedRender = null;\n\t\tthis.toRender = null;\n\n\t\tthis.toDispose.push(\n\t\t\ttoDisposable(() => {\n\t\t\t\tif (this.delayedRender) {\n\t\t\t\t\tthis.delayedRender.dispose();\n\t\t\t\t\tthis.delayedRender = null;\n\t\t\t\t}\n\t\t\t}),\n\t\t\tthis.editorService.onDidActiveEditorChange(() => this.updateStatusBar()),\n\t\t\tthis.untitledEditorService.onDidChangeEncoding(r => this.onResourceEncodingChange(r)),\n\t\t\tthis.textFileService.models.onModelEncodingChanged(e => this.onResourceEncodingChange(e.resource)),\n\t\t\tTabFocus.onDidChangeTabFocus(e => this.onTabFocusModeChange()),\n\t\t);\n\n\t\treturn combinedDisposable(this.toDispose);\n\t}\n\n\tprivate updateState(update: StateDelta): void {\n\t\tconst changed = this.state.update(update);\n\t\tif (!changed.hasChanges()) {\n\t\t\t// Nothing really changed\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.toRender) {\n\t\t\tthis.toRender = changed;\n\t\t\tthis.delayedRender = runAtThisOrScheduleAtNextAnimationFrame(() => {\n\t\t\t\tthis.delayedRender = null;\n\t\t\t\tconst toRender = this.toRender;\n\t\t\t\tthis.toRender = null;\n\t\t\t\tif (toRender) {\n\t\t\t\t\tthis._renderNow(toRender);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.toRender.combine(changed);\n\t\t}\n\t}\n\n\tprivate _renderNow(changed: StateChange): void {\n\t\tif (changed.tabFocusMode) {\n\t\t\tthis.tabFocusModeElement.setVisible(!!this.state.tabFocusMode);\n\t\t}\n\n\t\tif (changed.screenReaderMode) {\n\t\t\tthis.screenRedearModeElement.setVisible(!!this.state.screenReaderMode);\n\t\t}\n\n\t\tif (changed.indentation) {\n\t\t\tif (this.state.indentation) {\n\t\t\t\tthis.indentationElement.textContent = this.state.indentation;\n\t\t\t\tthis.indentationElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.indentationElement.setVisible(false);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.selectionStatus) {\n\t\t\tif (this.state.selectionStatus && !this.state.screenReaderMode) {\n\t\t\t\tthis.selectionElement.textContent = this.state.selectionStatus;\n\t\t\t\tthis.selectionElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.selectionElement.setVisible(false);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.encoding) {\n\t\t\tif (this.state.encoding) {\n\t\t\t\tthis.encodingElement.textContent = this.state.encoding;\n\t\t\t\tthis.encodingElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.encodingElement.setVisible(false);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.EOL) {\n\t\t\tif (this.state.EOL) {\n\t\t\t\tthis.eolElement.textContent = this.state.EOL === '\\r\\n' ? nlsEOLCRLF : nlsEOLLF;\n\t\t\t\tthis.eolElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.eolElement.setVisible(false);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.mode) {\n\t\t\tif (this.state.mode) {\n\t\t\t\tthis.modeElement.textContent = this.state.mode;\n\t\t\t\tthis.modeElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.modeElement.setVisible(false);\n\t\t\t}\n\t\t}\n\n\t\tif (changed.metadata) {\n\t\t\tif (this.state.metadata) {\n\t\t\t\tthis.metadataElement.textContent = this.state.metadata;\n\t\t\t\tthis.metadataElement.setVisible(true);\n\t\t\t} else {\n\t\t\t\tthis.metadataElement.setVisible(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getSelectionLabel(info: IEditorSelectionStatus): string | undefined {\n\t\tif (!info || !info.selections) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (info.selections.length === 1) {\n\t\t\tif (info.charactersSelected) {\n\t\t\t\treturn strings.format(nlsSingleSelectionRange, info.selections[0].positionLineNumber, info.selections[0].positionColumn, info.charactersSelected);\n\t\t\t}\n\n\t\t\treturn strings.format(nlsSingleSelection, info.selections[0].positionLineNumber, info.selections[0].positionColumn);\n\t\t}\n\n\t\tif (info.charactersSelected) {\n\t\t\treturn strings.format(nlsMultiSelectionRange, info.selections.length, info.charactersSelected);\n\t\t}\n\n\t\tif (info.selections.length > 0) {\n\t\t\treturn strings.format(nlsMultiSelection, info.selections.length);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate onModeClick(): void {\n\t\tconst action = this.instantiationService.createInstance(ChangeModeAction, ChangeModeAction.ID, ChangeModeAction.LABEL);\n\n\t\taction.run();\n\t\taction.dispose();\n\t}\n\n\tprivate onIndentationClick(): void {\n\t\tconst action = this.instantiationService.createInstance(ChangeIndentationAction, ChangeIndentationAction.ID, ChangeIndentationAction.LABEL);\n\t\taction.run();\n\t\taction.dispose();\n\t}\n\n\tprivate onScreenReaderModeClick(): void {\n\t\tif (!this.screenReaderNotification) {\n\t\t\tthis.screenReaderNotification = this.notificationService.prompt(\n\t\t\t\tSeverity.Info,\n\t\t\t\tnls.localize('screenReaderDetectedExplanation.question', \"Are you using a screen reader to operate VS Code? (Certain features like folding, minimap or word wrap are disabled when using a screen reader)\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('screenReaderDetectedExplanation.answerYes', \"Yes\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'on', ConfigurationTarget.USER);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tlabel: nls.localize('screenReaderDetectedExplanation.answerNo', \"No\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'off', ConfigurationTarget.USER);\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t{ sticky: true }\n\t\t\t);\n\n\t\t\tEvent.once(this.screenReaderNotification.onDidClose)(() => {\n\t\t\t\tthis.screenReaderNotification = null;\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onSelectionClick(): void {\n\t\tthis.quickOpenService.show(':'); // \"Go to line\"\n\t}\n\n\tprivate onEOLClick(): void {\n\t\tconst action = this.instantiationService.createInstance(ChangeEOLAction, ChangeEOLAction.ID, ChangeEOLAction.LABEL);\n\n\t\taction.run();\n\t\taction.dispose();\n\t}\n\n\tprivate onEncodingClick(): void {\n\t\tconst action = this.instantiationService.createInstance(ChangeEncodingAction, ChangeEncodingAction.ID, ChangeEncodingAction.LABEL);\n\n\t\taction.run();\n\t\taction.dispose();\n\t}\n\n\tprivate onTabFocusModeClick(): void {\n\t\tTabFocus.setTabFocusMode(false);\n\t}\n\n\tprivate updateStatusBar(): void {\n\t\tconst activeControl = this.editorService.activeControl;\n\t\tconst activeCodeEditor = activeControl ? types.withNullAsUndefined(getCodeEditor(activeControl.getControl())) : undefined;\n\n\t\t// Update all states\n\t\tthis.onScreenReaderModeChange(activeCodeEditor);\n\t\tthis.onSelectionChange(activeCodeEditor);\n\t\tthis.onModeChange(activeCodeEditor);\n\t\tthis.onEOLChange(activeCodeEditor);\n\t\tthis.onEncodingChange(activeControl);\n\t\tthis.onIndentationChange(activeCodeEditor);\n\t\tthis.onMetadataChange(activeControl);\n\n\t\t// Dispose old active editor listeners\n\t\tdispose(this.activeEditorListeners);\n\n\t\t// Attach new listeners to active editor\n\t\tif (activeCodeEditor) {\n\n\t\t\t// Hook Listener for Configuration changes\n\t\t\tthis.activeEditorListeners.push(activeCodeEditor.onDidChangeConfiguration((event: IConfigurationChangedEvent) => {\n\t\t\t\tif (event.accessibilitySupport) {\n\t\t\t\t\tthis.onScreenReaderModeChange(activeCodeEditor);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Hook Listener for Selection changes\n\t\t\tthis.activeEditorListeners.push(activeCodeEditor.onDidChangeCursorPosition((event: ICursorPositionChangedEvent) => {\n\t\t\t\tthis.onSelectionChange(activeCodeEditor);\n\t\t\t}));\n\n\t\t\t// Hook Listener for mode changes\n\t\t\tthis.activeEditorListeners.push(activeCodeEditor.onDidChangeModelLanguage((event: IModelLanguageChangedEvent) => {\n\t\t\t\tthis.onModeChange(activeCodeEditor);\n\t\t\t}));\n\n\t\t\t// Hook Listener for content changes\n\t\t\tthis.activeEditorListeners.push(activeCodeEditor.onDidChangeModelContent((e) => {\n\t\t\t\tthis.onEOLChange(activeCodeEditor);\n\n\t\t\t\tconst selections = activeCodeEditor.getSelections();\n\t\t\t\tif (selections) {\n\t\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\t\tif (selections.some(selection => Range.areIntersecting(selection, change.range))) {\n\t\t\t\t\t\t\tthis.onSelectionChange(activeCodeEditor);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Hook Listener for content options changes\n\t\t\tthis.activeEditorListeners.push(activeCodeEditor.onDidChangeModelOptions((event: IModelOptionsChangedEvent) => {\n\t\t\t\tthis.onIndentationChange(activeCodeEditor);\n\t\t\t}));\n\t\t}\n\n\t\t// Handle binary editors\n\t\telse if (activeControl instanceof BaseBinaryResourceEditor || activeControl instanceof BinaryResourceDiffEditor) {\n\t\t\tconst binaryEditors: BaseBinaryResourceEditor[] = [];\n\t\t\tif (activeControl instanceof BinaryResourceDiffEditor) {\n\t\t\t\tconst details = activeControl.getDetailsEditor();\n\t\t\t\tif (details instanceof BaseBinaryResourceEditor) {\n\t\t\t\t\tbinaryEditors.push(details);\n\t\t\t\t}\n\n\t\t\t\tconst master = activeControl.getMasterEditor();\n\t\t\t\tif (master instanceof BaseBinaryResourceEditor) {\n\t\t\t\t\tbinaryEditors.push(master);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbinaryEditors.push(activeControl);\n\t\t\t}\n\n\t\t\tbinaryEditors.forEach(editor => {\n\t\t\t\tthis.activeEditorListeners.push(editor.onMetadataChanged(metadata => {\n\t\t\t\t\tthis.onMetadataChange(activeControl);\n\t\t\t\t}));\n\n\t\t\t\tthis.activeEditorListeners.push(editor.onDidOpenInPlace(() => {\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate onModeChange(editorWidget: ICodeEditor | undefined): void {\n\t\tlet info: StateDelta = { mode: undefined };\n\n\t\t// We only support text based editors\n\t\tif (editorWidget) {\n\t\t\tconst textModel = editorWidget.getModel();\n\t\t\tif (textModel) {\n\t\t\t\t// Compute mode\n\t\t\t\tconst modeId = textModel.getLanguageIdentifier().language;\n\t\t\t\tinfo = { mode: this.modeService.getLanguageName(modeId) || undefined };\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onIndentationChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst update: StateDelta = { indentation: undefined };\n\n\t\tif (editorWidget) {\n\t\t\tconst model = editorWidget.getModel();\n\t\t\tif (model) {\n\t\t\t\tconst modelOpts = model.getOptions();\n\t\t\t\tupdate.indentation = (\n\t\t\t\t\tmodelOpts.insertSpaces\n\t\t\t\t\t\t? nls.localize('spacesSize', \"Spaces: {0}\", modelOpts.indentSize)\n\t\t\t\t\t\t: nls.localize({ key: 'tabSize', comment: ['Tab corresponds to the tab key'] }, \"Tab Size: {0}\", modelOpts.tabSize)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(update);\n\t}\n\n\tprivate onMetadataChange(editor: IBaseEditor | undefined): void {\n\t\tconst update: StateDelta = { metadata: undefined };\n\n\t\tif (editor instanceof BaseBinaryResourceEditor || editor instanceof BinaryResourceDiffEditor) {\n\t\t\tupdate.metadata = editor.getMetadata();\n\t\t}\n\n\t\tthis.updateState(update);\n\t}\n\n\tprivate _promptedScreenReader: boolean = false;\n\n\tprivate onScreenReaderModeChange(editorWidget: ICodeEditor | undefined): void {\n\t\tlet screenReaderMode = false;\n\n\t\t// We only support text based editors\n\t\tif (editorWidget) {\n\t\t\tconst screenReaderDetected = (this.accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Enabled);\n\t\t\tif (screenReaderDetected) {\n\t\t\t\tconst screenReaderConfiguration = this.configurationService.getValue<IEditorOptions>('editor').accessibilitySupport;\n\t\t\t\tif (screenReaderConfiguration === 'auto') {\n\t\t\t\t\t// show explanation\n\t\t\t\t\tif (!this._promptedScreenReader) {\n\t\t\t\t\t\tthis._promptedScreenReader = true;\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.onScreenReaderModeClick();\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tscreenReaderMode = (editorWidget.getConfiguration().accessibilitySupport === AccessibilitySupport.Enabled);\n\t\t}\n\n\t\tif (screenReaderMode === false && this.screenReaderNotification) {\n\t\t\tthis.screenReaderNotification.close();\n\t\t}\n\n\t\tthis.updateState({ screenReaderMode: screenReaderMode });\n\t}\n\n\tprivate onSelectionChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst info: IEditorSelectionStatus = {};\n\n\t\t// We only support text based editors\n\t\tif (editorWidget) {\n\n\t\t\t// Compute selection(s)\n\t\t\tinfo.selections = editorWidget.getSelections() || [];\n\n\t\t\t// Compute selection length\n\t\t\tinfo.charactersSelected = 0;\n\t\t\tconst textModel = editorWidget.getModel();\n\t\t\tif (textModel) {\n\t\t\t\tinfo.selections.forEach(selection => {\n\t\t\t\t\tinfo.charactersSelected! += textModel.getValueLengthInRange(selection);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Compute the visible column for one selection. This will properly handle tabs and their configured widths\n\t\t\tif (info.selections.length === 1) {\n\t\t\t\tconst visibleColumn = editorWidget.getVisibleColumnFromPosition(editorWidget.getPosition()!);\n\n\t\t\t\tlet selectionClone = info.selections[0].clone(); // do not modify the original position we got from the editor\n\t\t\t\tselectionClone = new Selection(\n\t\t\t\t\tselectionClone.selectionStartLineNumber,\n\t\t\t\t\tselectionClone.selectionStartColumn,\n\t\t\t\t\tselectionClone.positionLineNumber,\n\t\t\t\t\tvisibleColumn\n\t\t\t\t);\n\n\t\t\t\tinfo.selections[0] = selectionClone;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState({ selectionStatus: this.getSelectionLabel(info) });\n\t}\n\n\tprivate onEOLChange(editorWidget: ICodeEditor | undefined): void {\n\t\tconst info: StateDelta = { EOL: undefined };\n\n\t\tif (editorWidget && !editorWidget.getConfiguration().readOnly) {\n\t\t\tconst codeEditorModel = editorWidget.getModel();\n\t\t\tif (codeEditorModel) {\n\t\t\t\tinfo.EOL = codeEditorModel.getEOL();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onEncodingChange(e?: IBaseEditor): void {\n\t\tif (e && !this.isActiveEditor(e)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst info: StateDelta = { encoding: undefined };\n\n\t\t// We only support text based editors\n\t\tif (e && (isCodeEditor(e.getControl()) || isDiffEditor(e.getControl()))) {\n\t\t\tconst encodingSupport: IEncodingSupport | null = e.input ? toEditorWithEncodingSupport(e.input) : null;\n\t\t\tif (encodingSupport) {\n\t\t\t\tconst rawEncoding = encodingSupport.getEncoding();\n\t\t\t\tconst encodingInfo = SUPPORTED_ENCODINGS[rawEncoding];\n\t\t\t\tif (encodingInfo) {\n\t\t\t\t\tinfo.encoding = encodingInfo.labelShort; // if we have a label, take it from there\n\t\t\t\t} else {\n\t\t\t\t\tinfo.encoding = rawEncoding; // otherwise use it raw\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate onResourceEncodingChange(resource: uri): void {\n\t\tconst activeControl = this.editorService.activeControl;\n\t\tif (activeControl) {\n\t\t\tconst activeResource = toResource(activeControl.input, { supportSideBySide: true });\n\t\t\tif (activeResource && activeResource.toString() === resource.toString()) {\n\t\t\t\treturn this.onEncodingChange(<IBaseEditor>activeControl); // only update if the encoding changed for the active resource\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTabFocusModeChange(): void {\n\t\tconst info: StateDelta = { tabFocusMode: TabFocus.getTabFocusMode() };\n\n\t\tthis.updateState(info);\n\t}\n\n\tprivate isActiveEditor(control: IBaseEditor): boolean {\n\t\tconst activeControl = this.editorService.activeControl;\n\n\t\treturn !!activeControl && activeControl === control;\n\t}\n}\n\nfunction isWritableCodeEditor(codeEditor: ICodeEditor | undefined): boolean {\n\tif (!codeEditor) {\n\t\treturn false;\n\t}\n\tconst config = codeEditor.getConfiguration();\n\treturn (!config.readOnly);\n}\n\nfunction isWritableBaseEditor(e: IBaseEditor): boolean {\n\treturn e && isWritableCodeEditor(getCodeEditor(e.getControl()) || undefined);\n}\n\nexport class ShowLanguageExtensionsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.showLanguageExtensions';\n\n\tconstructor(\n\t\tprivate fileExtension: string,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionGalleryService galleryService: IExtensionGalleryService\n\t) {\n\t\tsuper(ShowLanguageExtensionsAction.ID, nls.localize('showLanguageExtensions', \"Search Marketplace Extensions for '{0}'...\", fileExtension));\n\n\t\tthis.enabled = galleryService.isEnabled();\n\t}\n\n\trun(): Promise<void> {\n\t\treturn this.commandService.executeCommand('workbench.extensions.action.showExtensionsForLanguage', this.fileExtension).then(() => undefined);\n\t}\n}\n\nexport class ChangeModeAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.editor.changeLanguageMode';\n\tstatic readonly LABEL = nls.localize('changeMode', \"Change Language Mode\");\n\n\tconstructor(\n\t\tactionId: string,\n\t\tactionLabel: string,\n\t\t@IModeService private readonly modeService: IModeService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService\n\t) {\n\t\tsuper(actionId, actionLabel);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst activeTextEditorWidget = getCodeEditor(this.editorService.activeTextEditorWidget);\n\t\tif (!activeTextEditorWidget) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\n\t\tconst textModel = activeTextEditorWidget.getModel();\n\t\tconst resource = this.editorService.activeEditor ? toResource(this.editorService.activeEditor, { supportSideBySide: true }) : null;\n\n\t\tlet hasLanguageSupport = !!resource;\n\t\tif (resource && resource.scheme === Schemas.untitled && !this.untitledEditorService.hasAssociatedFilePath(resource)) {\n\t\t\thasLanguageSupport = false; // no configuration for untitled resources (e.g. \"Untitled-1\")\n\t\t}\n\n\t\t// Compute mode\n\t\tlet currentModeId: string | undefined;\n\t\tlet modeId: string;\n\t\tif (textModel) {\n\t\t\tmodeId = textModel.getLanguageIdentifier().language;\n\t\t\tcurrentModeId = this.modeService.getLanguageName(modeId) || undefined;\n\t\t}\n\n\t\t// All languages are valid picks\n\t\tconst languages = this.modeService.getRegisteredLanguageNames();\n\t\tconst picks: QuickPickInput[] = languages.sort().map((lang, index) => {\n\t\t\tlet description: string;\n\t\t\tif (currentModeId === lang) {\n\t\t\t\tdescription = nls.localize('languageDescription', \"({0}) - Configured Language\", this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n\t\t\t} else {\n\t\t\t\tdescription = nls.localize('languageDescriptionConfigured', \"({0})\", this.modeService.getModeIdForLanguageName(lang.toLowerCase()));\n\t\t\t}\n\n\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\tlet fakeResource: uri | undefined;\n\t\t\tconst extensions = this.modeService.getExtensions(lang);\n\t\t\tif (extensions && extensions.length) {\n\t\t\t\tfakeResource = uri.file(extensions[0]);\n\t\t\t} else {\n\t\t\t\tconst filenames = this.modeService.getFilenames(lang);\n\t\t\t\tif (filenames && filenames.length) {\n\t\t\t\t\tfakeResource = uri.file(filenames[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn <IQuickPickItem>{\n\t\t\t\tlabel: lang,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.modeService, fakeResource),\n\t\t\t\tdescription\n\t\t\t};\n\t\t});\n\n\t\tif (hasLanguageSupport) {\n\t\t\tpicks.unshift({ type: 'separator', label: nls.localize('languagesPicks', \"languages (identifier)\") });\n\t\t}\n\n\t\t// Offer action to configure via settings\n\t\tlet configureModeAssociations: IQuickPickItem;\n\t\tlet configureModeSettings: IQuickPickItem;\n\t\tlet galleryAction: Action;\n\t\tif (hasLanguageSupport && resource) {\n\t\t\tconst ext = extname(resource) || basename(resource);\n\n\t\t\tgalleryAction = this.instantiationService.createInstance(ShowLanguageExtensionsAction, ext);\n\t\t\tif (galleryAction.enabled) {\n\t\t\t\tpicks.unshift(galleryAction);\n\t\t\t}\n\n\t\t\tconfigureModeSettings = { label: nls.localize('configureModeSettings', \"Configure '{0}' language based settings...\", currentModeId) };\n\t\t\tpicks.unshift(configureModeSettings);\n\t\t\tconfigureModeAssociations = { label: nls.localize('configureAssociationsExt', \"Configure File Association for '{0}'...\", ext) };\n\t\t\tpicks.unshift(configureModeAssociations);\n\t\t}\n\n\t\t// Offer to \"Auto Detect\"\n\t\tconst autoDetectMode: IQuickPickItem = {\n\t\t\tlabel: nls.localize('autoDetect', \"Auto Detect\")\n\t\t};\n\n\t\tif (hasLanguageSupport) {\n\t\t\tpicks.unshift(autoDetectMode);\n\t\t}\n\n\t\treturn this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language Mode\"), matchOnDescription: true }).then(pick => {\n\t\t\tif (!pick) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pick === galleryAction) {\n\t\t\t\tgalleryAction.run();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// User decided to permanently configure associations, return right after\n\t\t\tif (pick === configureModeAssociations) {\n\t\t\t\tif (resource) {\n\t\t\t\t\tthis.configureFileAssociation(resource);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// User decided to configure settings for current language\n\t\t\tif (pick === configureModeSettings) {\n\t\t\t\tthis.preferencesService.configureSettingsForLanguage(modeId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Change mode for active editor\n\t\t\tconst activeEditor = this.editorService.activeEditor;\n\t\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\t\tconst models: ITextModel[] = [];\n\t\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\t\tconst codeEditorModel = activeTextEditorWidget.getModel();\n\t\t\t\tif (codeEditorModel) {\n\t\t\t\t\tmodels.push(codeEditorModel);\n\t\t\t\t}\n\t\t\t} else if (isDiffEditor(activeTextEditorWidget)) {\n\t\t\t\tconst diffEditorModel = activeTextEditorWidget.getModel();\n\t\t\t\tif (diffEditorModel) {\n\t\t\t\t\tif (diffEditorModel.original) {\n\t\t\t\t\t\tmodels.push(diffEditorModel.original);\n\t\t\t\t\t}\n\t\t\t\t\tif (diffEditorModel.modified) {\n\t\t\t\t\t\tmodels.push(diffEditorModel.modified);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Find mode\n\t\t\tlet languageSelection: ILanguageSelection | undefined;\n\t\t\tif (pick === autoDetectMode) {\n\t\t\t\tif (textModel) {\n\t\t\t\t\tconst resource = toResource(activeEditor, { supportSideBySide: true });\n\t\t\t\t\tif (resource) {\n\t\t\t\t\t\tlanguageSelection = this.modeService.createByFilepathOrFirstLine(resource.fsPath, textModel.getLineContent(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlanguageSelection = this.modeService.createByLanguageName(pick.label);\n\t\t\t}\n\n\t\t\t// Change mode\n\t\t\tif (typeof languageSelection !== 'undefined') {\n\t\t\t\tfor (const textModel of models) {\n\t\t\t\t\tthis.modelService.setMode(textModel, languageSelection);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate configureFileAssociation(resource: uri): void {\n\t\tconst extension = extname(resource);\n\t\tconst base = basename(resource);\n\t\tconst currentAssociation = this.modeService.getModeIdByFilepathOrFirstLine(base);\n\n\t\tconst languages = this.modeService.getRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.sort().map((lang, index) => {\n\t\t\tconst id = this.modeService.getModeIdForLanguageName(lang.toLowerCase());\n\n\t\t\treturn <IQuickPickItem>{\n\t\t\t\tid,\n\t\t\t\tlabel: lang,\n\t\t\t\tdescription: (id === currentAssociation) ? nls.localize('currentAssociation', \"Current Association\") : undefined\n\t\t\t};\n\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tthis.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguageToConfigure', \"Select Language Mode to Associate with '{0}'\", extension || base) }).then(language => {\n\t\t\t\tif (language) {\n\t\t\t\t\tconst fileAssociationsConfig = this.configurationService.inspect(FILES_ASSOCIATIONS_CONFIG);\n\n\t\t\t\t\tlet associationKey: string;\n\t\t\t\t\tif (extension && base[0] !== '.') {\n\t\t\t\t\t\tassociationKey = `*${extension}`; // only use \"*.ext\" if the file path is in the form of <name>.<ext>\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassociationKey = base; // otherwise use the basename (e.g. .gitignore, Dockerfile)\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the association is already being made in the workspace, make sure to target workspace settings\n\t\t\t\t\tlet target = ConfigurationTarget.USER;\n\t\t\t\t\tif (fileAssociationsConfig.workspace && !!fileAssociationsConfig.workspace[associationKey]) {\n\t\t\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Make sure to write into the value of the target and not the merged value from USER and WORKSPACE config\n\t\t\t\t\tconst currentAssociations = deepClone((target === ConfigurationTarget.WORKSPACE) ? fileAssociationsConfig.workspace : fileAssociationsConfig.user) || Object.create(null);\n\t\t\t\t\tcurrentAssociations[associationKey] = language.id;\n\n\t\t\t\t\tthis.configurationService.updateValue(FILES_ASSOCIATIONS_CONFIG, currentAssociations, target);\n\t\t\t\t}\n\t\t\t});\n\t\t}, 50 /* quick open is sensitive to being opened so soon after another */);\n\t}\n}\n\nexport interface IChangeEOLEntry extends IQuickPickItem {\n\teol: EndOfLineSequence;\n}\n\nclass ChangeIndentationAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.editor.changeIndentation';\n\tstatic readonly LABEL = nls.localize('changeIndentation', \"Change Indentation\");\n\n\tconstructor(\n\t\tactionId: string,\n\t\tactionLabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService\n\t) {\n\t\tsuper(actionId, actionLabel);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst activeTextEditorWidget = getCodeEditor(this.editorService.activeTextEditorWidget);\n\t\tif (!activeTextEditorWidget) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\n\t\tif (!isWritableCodeEditor(activeTextEditorWidget)) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n\t\t}\n\n\t\tconst picks: QuickPickInput<IQuickPickItem & { run(): void }>[] = [\n\t\t\tactiveTextEditorWidget.getAction(IndentUsingSpaces.ID),\n\t\t\tactiveTextEditorWidget.getAction(IndentUsingTabs.ID),\n\t\t\tactiveTextEditorWidget.getAction(DetectIndentation.ID),\n\t\t\tactiveTextEditorWidget.getAction(IndentationToSpacesAction.ID),\n\t\t\tactiveTextEditorWidget.getAction(IndentationToTabsAction.ID),\n\t\t\tactiveTextEditorWidget.getAction(TrimTrailingWhitespaceAction.ID)\n\t\t].map((a: IEditorAction) => {\n\t\t\treturn {\n\t\t\t\tid: a.id,\n\t\t\t\tlabel: a.label,\n\t\t\t\tdetail: Language.isDefaultVariant() ? undefined : a.alias,\n\t\t\t\trun: () => {\n\t\t\t\t\tactiveTextEditorWidget.focus();\n\t\t\t\t\ta.run();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\n\t\tpicks.splice(3, 0, { type: 'separator', label: nls.localize('indentConvert', \"convert file\") });\n\t\tpicks.unshift({ type: 'separator', label: nls.localize('indentView', \"change view\") });\n\n\t\treturn this.quickInputService.pick(picks, { placeHolder: nls.localize('pickAction', \"Select Action\"), matchOnDetail: true }).then(action => action && action.run());\n\t}\n}\n\nexport class ChangeEOLAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.editor.changeEOL';\n\tstatic readonly LABEL = nls.localize('changeEndOfLine', \"Change End of Line Sequence\");\n\n\tconstructor(\n\t\tactionId: string,\n\t\tactionLabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService\n\t) {\n\t\tsuper(actionId, actionLabel);\n\t}\n\n\trun(): Promise<any> {\n\t\tconst activeTextEditorWidget = getCodeEditor(this.editorService.activeTextEditorWidget);\n\t\tif (!activeTextEditorWidget) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\n\t\tif (!isWritableCodeEditor(activeTextEditorWidget)) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noWritableCodeEditor', \"The active code editor is read-only.\") }]);\n\t\t}\n\n\t\tconst textModel = activeTextEditorWidget.getModel();\n\n\t\tconst EOLOptions: IChangeEOLEntry[] = [\n\t\t\t{ label: nlsEOLLF, eol: EndOfLineSequence.LF },\n\t\t\t{ label: nlsEOLCRLF, eol: EndOfLineSequence.CRLF },\n\t\t];\n\n\t\tconst selectedIndex = (textModel && textModel.getEOL() === '\\n') ? 0 : 1;\n\n\t\treturn this.quickInputService.pick(EOLOptions, { placeHolder: nls.localize('pickEndOfLine', \"Select End of Line Sequence\"), activeItem: EOLOptions[selectedIndex] }).then(eol => {\n\t\t\tif (eol) {\n\t\t\t\tconst activeCodeEditor = getCodeEditor(this.editorService.activeTextEditorWidget);\n\t\t\t\tif (activeCodeEditor && activeCodeEditor.hasModel() && isWritableCodeEditor(activeCodeEditor)) {\n\t\t\t\t\tconst textModel = activeCodeEditor.getModel();\n\t\t\t\t\ttextModel.pushEOL(eol.eol);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class ChangeEncodingAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.editor.changeEncoding';\n\tstatic readonly LABEL = nls.localize('changeEncoding', \"Change File Encoding\");\n\n\tconstructor(\n\t\tactionId: string,\n\t\tactionLabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper(actionId, actionLabel);\n\t}\n\n\trun(): Promise<any> {\n\t\tif (!getCodeEditor(this.editorService.activeTextEditorWidget)) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\n\t\tconst activeControl = this.editorService.activeControl;\n\t\tif (!activeControl) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noEditor', \"No text editor active at this time\") }]);\n\t\t}\n\t\tconst encodingSupport: IEncodingSupport | null = toEditorWithEncodingSupport(activeControl.input);\n\t\tif (!encodingSupport) {\n\t\t\treturn this.quickInputService.pick([{ label: nls.localize('noFileEditor', \"No file active at this time\") }]);\n\t\t}\n\n\t\tlet saveWithEncodingPick: IQuickPickItem;\n\t\tlet reopenWithEncodingPick: IQuickPickItem;\n\t\tif (Language.isDefaultVariant()) {\n\t\t\tsaveWithEncodingPick = { label: nls.localize('saveWithEncoding', \"Save with Encoding\") };\n\t\t\treopenWithEncodingPick = { label: nls.localize('reopenWithEncoding', \"Reopen with Encoding\") };\n\t\t} else {\n\t\t\tsaveWithEncodingPick = { label: nls.localize('saveWithEncoding', \"Save with Encoding\"), detail: 'Save with Encoding', };\n\t\t\treopenWithEncodingPick = { label: nls.localize('reopenWithEncoding', \"Reopen with Encoding\"), detail: 'Reopen with Encoding' };\n\t\t}\n\n\t\tlet pickActionPromise: Promise<IQuickPickItem>;\n\t\tif (encodingSupport instanceof UntitledEditorInput) {\n\t\t\tpickActionPromise = Promise.resolve(saveWithEncodingPick);\n\t\t} else if (!isWritableBaseEditor(activeControl)) {\n\t\t\tpickActionPromise = Promise.resolve(reopenWithEncodingPick);\n\t\t} else {\n\t\t\tpickActionPromise = this.quickInputService.pick([reopenWithEncodingPick, saveWithEncodingPick], { placeHolder: nls.localize('pickAction', \"Select Action\"), matchOnDetail: true });\n\t\t}\n\n\t\treturn pickActionPromise.then(action => {\n\t\t\tif (!action) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst resource = toResource(activeControl!.input, { supportSideBySide: true });\n\n\t\t\treturn timeout(50 /* quick open is sensitive to being opened so soon after another */)\n\t\t\t\t.then(() => {\n\t\t\t\t\tif (!resource || !this.fileService.canHandleResource(resource)) {\n\t\t\t\t\t\treturn Promise.resolve(null); // encoding detection only possible for resources the file service can handle\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.fileService.resolveContent(resource, { autoGuessEncoding: true, acceptTextOnly: true }).then(content => content.encoding, err => null);\n\t\t\t\t})\n\t\t\t\t.then((guessedEncoding: string) => {\n\t\t\t\t\tconst isReopenWithEncoding = (action === reopenWithEncodingPick);\n\n\t\t\t\t\tconst configuredEncoding = this.textResourceConfigurationService.getValue(types.withNullAsUndefined(resource), 'files.encoding');\n\n\t\t\t\t\tlet directMatchIndex: number | undefined;\n\t\t\t\t\tlet aliasMatchIndex: number | undefined;\n\n\t\t\t\t\t// All encodings are valid picks\n\t\t\t\t\tconst picks: QuickPickInput[] = Object.keys(SUPPORTED_ENCODINGS)\n\t\t\t\t\t\t.sort((k1, k2) => {\n\t\t\t\t\t\t\tif (k1 === configuredEncoding) {\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t} else if (k2 === configuredEncoding) {\n\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn SUPPORTED_ENCODINGS[k1].order - SUPPORTED_ENCODINGS[k2].order;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(k => {\n\t\t\t\t\t\t\tif (k === guessedEncoding && guessedEncoding !== configuredEncoding) {\n\t\t\t\t\t\t\t\treturn false; // do not show encoding if it is the guessed encoding that does not match the configured\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn !isReopenWithEncoding || !SUPPORTED_ENCODINGS[k].encodeOnly; // hide those that can only be used for encoding if we are about to decode\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map((key, index) => {\n\t\t\t\t\t\t\tif (key === encodingSupport.getEncoding()) {\n\t\t\t\t\t\t\t\tdirectMatchIndex = index;\n\t\t\t\t\t\t\t} else if (SUPPORTED_ENCODINGS[key].alias === encodingSupport.getEncoding()) {\n\t\t\t\t\t\t\t\taliasMatchIndex = index;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn { id: key, label: SUPPORTED_ENCODINGS[key].labelLong, description: key };\n\t\t\t\t\t\t});\n\n\t\t\t\t\tconst items = picks.slice() as IQuickPickItem[];\n\n\t\t\t\t\t// If we have a guessed encoding, show it first unless it matches the configured encoding\n\t\t\t\t\tif (guessedEncoding && configuredEncoding !== guessedEncoding && SUPPORTED_ENCODINGS[guessedEncoding]) {\n\t\t\t\t\t\tpicks.unshift({ type: 'separator' });\n\t\t\t\t\t\tpicks.unshift({ id: guessedEncoding, label: SUPPORTED_ENCODINGS[guessedEncoding].labelLong, description: nls.localize('guessedEncoding', \"Guessed from content\") });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.quickInputService.pick(picks, {\n\t\t\t\t\t\tplaceHolder: isReopenWithEncoding ? nls.localize('pickEncodingForReopen', \"Select File Encoding to Reopen File\") : nls.localize('pickEncodingForSave', \"Select File Encoding to Save with\"),\n\t\t\t\t\t\tactiveItem: items[typeof directMatchIndex === 'number' ? directMatchIndex : typeof aliasMatchIndex === 'number' ? aliasMatchIndex : -1]\n\t\t\t\t\t}).then(encoding => {\n\t\t\t\t\t\tif (!encoding) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst activeControl = this.editorService.activeControl;\n\t\t\t\t\t\tif (!activeControl) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst encodingSupport = toEditorWithEncodingSupport(activeControl.input);\n\t\t\t\t\t\tif (typeof encoding.id !== 'undefined' && encodingSupport && encodingSupport.getEncoding() !== encoding.id) {\n\t\t\t\t\t\t\tencodingSupport.setEncoding(encoding.id, isReopenWithEncoding ? EncodingMode.Decode : EncodingMode.Encode); // Set new encoding\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\t}\n}\n"]}]}