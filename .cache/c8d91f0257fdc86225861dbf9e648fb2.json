{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/viewPickerHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/viewPickerHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar quickOpen_2 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nexports.VIEW_PICKER_PREFIX = 'view ';\nvar ViewEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewEntry, _super);\n    function ViewEntry(label, category, open) {\n        var _this = _super.call(this) || this;\n        _this.label = label;\n        _this.category = category;\n        _this.open = open;\n        return _this;\n    }\n    ViewEntry.prototype.getLabel = function () {\n        return this.label;\n    };\n    ViewEntry.prototype.getCategory = function () {\n        return this.category;\n    };\n    ViewEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, view picker\", this.getLabel());\n    };\n    ViewEntry.prototype.run = function (mode, context) {\n        if (mode === quickOpen_1.Mode.OPEN) {\n            return this.runOpen(context);\n        }\n        return _super.prototype.run.call(this, mode, context);\n    };\n    ViewEntry.prototype.runOpen = function (context) {\n        var _this = this;\n        setTimeout(function () {\n            _this.open();\n        }, 0);\n        return true;\n    };\n    return ViewEntry;\n}(quickOpenModel_1.QuickOpenEntryGroup));\nexports.ViewEntry = ViewEntry;\nvar ViewPickerHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewPickerHandler, _super);\n    function ViewPickerHandler(viewletService, viewsService, outputService, terminalService, panelService, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.viewletService = viewletService;\n        _this.viewsService = viewsService;\n        _this.outputService = outputService;\n        _this.terminalService = terminalService;\n        _this.panelService = panelService;\n        _this.contextKeyService = contextKeyService;\n        return _this;\n    }\n    ViewPickerHandler.prototype.getResults = function (searchValue, token) {\n        searchValue = searchValue.trim();\n        var normalizedSearchValueLowercase = strings_1.stripWildcards(searchValue).toLowerCase();\n        var viewEntries = this.getViewEntries();\n        var entries = viewEntries.filter(function (e) {\n            if (!searchValue) {\n                return true;\n            }\n            var highlights = filters_1.matchesFuzzy(normalizedSearchValueLowercase, e.getLabel(), true);\n            if (highlights) {\n                e.setHighlights(highlights);\n            }\n            if (!highlights && !strings_1.fuzzyContains(e.getCategory(), normalizedSearchValueLowercase)) {\n                return false;\n            }\n            return true;\n        });\n        var entryToCategory = {};\n        entries.forEach(function (e) {\n            if (!entryToCategory[e.getLabel()]) {\n                entryToCategory[e.getLabel()] = e.getCategory();\n            }\n        });\n        var lastCategory;\n        entries.forEach(function (e, index) {\n            if (lastCategory !== e.getCategory()) {\n                lastCategory = e.getCategory();\n                e.setShowBorder(index > 0);\n                e.setGroupLabel(lastCategory);\n                // When the entry category has a parent category, set group label as Parent / Child. For example, Views / Explorer.\n                if (entryToCategory[lastCategory]) {\n                    e.setGroupLabel(entryToCategory[lastCategory] + \" / \" + lastCategory);\n                }\n            }\n            else {\n                e.setShowBorder(false);\n                e.setGroupLabel(undefined);\n            }\n        });\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(entries));\n    };\n    ViewPickerHandler.prototype.getViewEntries = function () {\n        var _this = this;\n        var viewEntries = [];\n        var getViewEntriesForViewlet = function (viewlet, viewContainer) {\n            var views = platform_1.Registry.as(views_1.Extensions.ViewsRegistry).getViews(viewContainer);\n            var result = [];\n            if (views.length) {\n                var _loop_1 = function (view) {\n                    if (_this.contextKeyService.contextMatchesRules(view.when)) {\n                        result.push(new ViewEntry(view.name, viewlet.name, function () { return _this.viewsService.openView(view.id, true); }));\n                    }\n                };\n                for (var _i = 0, views_2 = views; _i < views_2.length; _i++) {\n                    var view = views_2[_i];\n                    _loop_1(view);\n                }\n            }\n            return result;\n        };\n        // Viewlets\n        var viewlets = this.viewletService.getViewlets();\n        viewlets.forEach(function (viewlet, index) {\n            if (_this.hasToShowViewlet(viewlet)) {\n                viewEntries.push(new ViewEntry(viewlet.name, nls.localize('views', \"Side Bar\"), function () { return _this.viewletService.openViewlet(viewlet.id, true); }));\n            }\n        });\n        // Panels\n        var panels = this.panelService.getPanels();\n        panels.forEach(function (panel, index) { return viewEntries.push(new ViewEntry(panel.name, nls.localize('panels', \"Panel\"), function () { return _this.panelService.openPanel(panel.id, true); })); });\n        // Viewlet Views\n        viewlets.forEach(function (viewlet, index) {\n            var viewContainer = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).get(viewlet.id);\n            if (viewContainer) {\n                var viewEntriesForViewlet = getViewEntriesForViewlet(viewlet, viewContainer);\n                viewEntries.push.apply(viewEntries, viewEntriesForViewlet);\n            }\n        });\n        // Terminals\n        var terminalsCategory = nls.localize('terminals', \"Terminal\");\n        this.terminalService.terminalTabs.forEach(function (tab, tabIndex) {\n            tab.terminalInstances.forEach(function (terminal, terminalIndex) {\n                var index = tabIndex + 1 + \".\" + (terminalIndex + 1);\n                var entry = new ViewEntry(nls.localize('terminalTitle', \"{0}: {1}\", index, terminal.title), terminalsCategory, function () {\n                    _this.terminalService.showPanel(true).then(function () {\n                        _this.terminalService.setActiveInstance(terminal);\n                    });\n                });\n                viewEntries.push(entry);\n            });\n        });\n        // Output Channels\n        var channels = this.outputService.getChannelDescriptors();\n        channels.forEach(function (channel, index) {\n            var outputCategory = nls.localize('channels', \"Output\");\n            var entry = new ViewEntry(channel.log ? nls.localize('logChannel', \"Log ({0})\", channel.label) : channel.label, outputCategory, function () { return _this.outputService.showChannel(channel.id); });\n            viewEntries.push(entry);\n        });\n        return viewEntries;\n    };\n    ViewPickerHandler.prototype.hasToShowViewlet = function (viewlet) {\n        var viewContainer = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).get(viewlet.id);\n        if (viewContainer && viewContainer.hideIfEmpty) {\n            var viewsCollection = this.viewsService.getViewDescriptors(viewContainer);\n            return !!viewsCollection && viewsCollection.activeViewDescriptors.length > 0;\n        }\n        return true;\n    };\n    ViewPickerHandler.prototype.getAutoFocus = function (searchValue, context) {\n        return {\n            autoFocusFirstEntry: !!searchValue || !!context.quickNavigateConfiguration\n        };\n    };\n    ViewPickerHandler.ID = 'workbench.picker.views';\n    ViewPickerHandler = tslib_1.__decorate([\n        tslib_1.__param(0, viewlet_1.IViewletService),\n        tslib_1.__param(1, views_1.IViewsService),\n        tslib_1.__param(2, output_1.IOutputService),\n        tslib_1.__param(3, terminal_1.ITerminalService),\n        tslib_1.__param(4, panelService_1.IPanelService),\n        tslib_1.__param(5, contextkey_1.IContextKeyService)\n    ], ViewPickerHandler);\n    return ViewPickerHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.ViewPickerHandler = ViewPickerHandler;\nvar OpenViewPickerAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenViewPickerAction, _super);\n    function OpenViewPickerAction(id, label, quickOpenService) {\n        return _super.call(this, id, label, exports.VIEW_PICKER_PREFIX, quickOpenService) || this;\n    }\n    OpenViewPickerAction.ID = 'workbench.action.openView';\n    OpenViewPickerAction.LABEL = nls.localize('openView', \"Open View\");\n    OpenViewPickerAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_2.IQuickOpenService)\n    ], OpenViewPickerAction);\n    return OpenViewPickerAction;\n}(quickopen_1.QuickOpenAction));\nexports.OpenViewPickerAction = OpenViewPickerAction;\nvar QuickOpenViewPickerAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenViewPickerAction, _super);\n    function QuickOpenViewPickerAction(id, label, quickOpenService, keybindingService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.keybindingService = keybindingService;\n        return _this;\n    }\n    QuickOpenViewPickerAction.prototype.run = function () {\n        var keys = this.keybindingService.lookupKeybindings(this.id);\n        this.quickOpenService.show(exports.VIEW_PICKER_PREFIX, { quickNavigateConfiguration: { keybindings: keys } });\n        return Promise.resolve(true);\n    };\n    QuickOpenViewPickerAction.ID = 'workbench.action.quickOpenView';\n    QuickOpenViewPickerAction.LABEL = nls.localize('quickOpenView', \"Quick Open View\");\n    QuickOpenViewPickerAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_2.IQuickOpenService),\n        tslib_1.__param(3, keybinding_1.IKeybindingService)\n    ], QuickOpenViewPickerAction);\n    return QuickOpenViewPickerAction;\n}(actions_1.Action));\nexports.QuickOpenViewPickerAction = QuickOpenViewPickerAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/viewPickerHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/viewPickerHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Mode, IEntryRunContext, IAutoFocus, IQuickNavigateConfiguration, IModel } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenModel, QuickOpenEntryGroup, QuickOpenEntry } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { QuickOpenHandler, QuickOpenAction } from 'vs/workbench/browser/quickopen';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IOutputService } from 'vs/workbench/contrib/output/common/output';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { Action } from 'vs/base/common/actions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { fuzzyContains, stripWildcards } from 'vs/base/common/strings';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { IViewsRegistry, ViewContainer, IViewsService, IViewContainersRegistry, Extensions as ViewExtensions } from 'vs/workbench/common/views';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ViewletDescriptor } from 'vs/workbench/browser/viewlet';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const VIEW_PICKER_PREFIX = 'view ';\n\nexport class ViewEntry extends QuickOpenEntryGroup {\n\n\tconstructor(\n\t\tprivate label: string,\n\t\tprivate category: string,\n\t\tprivate open: () => void\n\t) {\n\t\tsuper();\n\t}\n\n\tgetLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tgetCategory(): string {\n\t\treturn this.category;\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, view picker\", this.getLabel());\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\treturn this.runOpen(context);\n\t\t}\n\n\t\treturn super.run(mode, context);\n\t}\n\n\tprivate runOpen(context: IEntryRunContext): boolean {\n\t\tsetTimeout(() => {\n\t\t\tthis.open();\n\t\t}, 0);\n\n\t\treturn true;\n\t}\n}\n\nexport class ViewPickerHandler extends QuickOpenHandler {\n\n\tstatic readonly ID = 'workbench.picker.views';\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tsearchValue = searchValue.trim();\n\t\tconst normalizedSearchValueLowercase = stripWildcards(searchValue).toLowerCase();\n\n\t\tconst viewEntries = this.getViewEntries();\n\n\t\tconst entries = viewEntries.filter(e => {\n\t\t\tif (!searchValue) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst highlights = matchesFuzzy(normalizedSearchValueLowercase, e.getLabel(), true);\n\t\t\tif (highlights) {\n\t\t\t\te.setHighlights(highlights);\n\t\t\t}\n\n\t\t\tif (!highlights && !fuzzyContains(e.getCategory(), normalizedSearchValueLowercase)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\tconst entryToCategory = {};\n\t\tentries.forEach(e => {\n\t\t\tif (!entryToCategory[e.getLabel()]) {\n\t\t\t\tentryToCategory[e.getLabel()] = e.getCategory();\n\t\t\t}\n\t\t});\n\n\t\tlet lastCategory: string;\n\t\tentries.forEach((e, index) => {\n\t\t\tif (lastCategory !== e.getCategory()) {\n\t\t\t\tlastCategory = e.getCategory();\n\n\t\t\t\te.setShowBorder(index > 0);\n\t\t\t\te.setGroupLabel(lastCategory);\n\n\t\t\t\t// When the entry category has a parent category, set group label as Parent / Child. For example, Views / Explorer.\n\t\t\t\tif (entryToCategory[lastCategory]) {\n\t\t\t\t\te.setGroupLabel(`${entryToCategory[lastCategory]} / ${lastCategory}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\te.setShowBorder(false);\n\t\t\t\te.setGroupLabel(undefined);\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.resolve(new QuickOpenModel(entries));\n\t}\n\n\tprivate getViewEntries(): ViewEntry[] {\n\t\tconst viewEntries: ViewEntry[] = [];\n\n\t\tconst getViewEntriesForViewlet = (viewlet: ViewletDescriptor, viewContainer: ViewContainer): ViewEntry[] => {\n\t\t\tconst views = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).getViews(viewContainer);\n\t\t\tconst result: ViewEntry[] = [];\n\t\t\tif (views.length) {\n\t\t\t\tfor (const view of views) {\n\t\t\t\t\tif (this.contextKeyService.contextMatchesRules(view.when)) {\n\t\t\t\t\t\tresult.push(new ViewEntry(view.name, viewlet.name, () => this.viewsService.openView(view.id, true)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\t// Viewlets\n\t\tconst viewlets = this.viewletService.getViewlets();\n\t\tviewlets.forEach((viewlet, index) => {\n\t\t\tif (this.hasToShowViewlet(viewlet)) {\n\t\t\t\tviewEntries.push(new ViewEntry(viewlet.name, nls.localize('views', \"Side Bar\"), () => this.viewletService.openViewlet(viewlet.id, true)));\n\t\t\t}\n\t\t});\n\n\t\t// Panels\n\t\tconst panels = this.panelService.getPanels();\n\t\tpanels.forEach((panel, index) => viewEntries.push(new ViewEntry(panel.name, nls.localize('panels', \"Panel\"), () => this.panelService.openPanel(panel.id, true))));\n\n\t\t// Viewlet Views\n\t\tviewlets.forEach((viewlet, index) => {\n\t\t\tconst viewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).get(viewlet.id);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst viewEntriesForViewlet: ViewEntry[] = getViewEntriesForViewlet(viewlet, viewContainer);\n\t\t\t\tviewEntries.push(...viewEntriesForViewlet);\n\t\t\t}\n\t\t});\n\n\t\t// Terminals\n\t\tconst terminalsCategory = nls.localize('terminals', \"Terminal\");\n\t\tthis.terminalService.terminalTabs.forEach((tab, tabIndex) => {\n\t\t\ttab.terminalInstances.forEach((terminal, terminalIndex) => {\n\t\t\t\tconst index = `${tabIndex + 1}.${terminalIndex + 1}`;\n\t\t\t\tconst entry = new ViewEntry(nls.localize('terminalTitle', \"{0}: {1}\", index, terminal.title), terminalsCategory, () => {\n\t\t\t\t\tthis.terminalService.showPanel(true).then(() => {\n\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tviewEntries.push(entry);\n\t\t\t});\n\t\t});\n\n\t\t// Output Channels\n\t\tconst channels = this.outputService.getChannelDescriptors();\n\t\tchannels.forEach((channel, index) => {\n\t\t\tconst outputCategory = nls.localize('channels', \"Output\");\n\t\t\tconst entry = new ViewEntry(channel.log ? nls.localize('logChannel', \"Log ({0})\", channel.label) : channel.label, outputCategory, () => this.outputService.showChannel(channel.id));\n\n\t\t\tviewEntries.push(entry);\n\t\t});\n\n\t\treturn viewEntries;\n\t}\n\n\tprivate hasToShowViewlet(viewlet: ViewletDescriptor): boolean {\n\t\tconst viewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).get(viewlet.id);\n\t\tif (viewContainer && viewContainer.hideIfEmpty) {\n\t\t\tconst viewsCollection = this.viewsService.getViewDescriptors(viewContainer);\n\t\t\treturn !!viewsCollection && viewsCollection.activeViewDescriptors.length > 0;\n\t\t}\n\t\treturn true;\n\t}\n\n\tgetAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: !!searchValue || !!context.quickNavigateConfiguration\n\t\t};\n\t}\n}\n\nexport class OpenViewPickerAction extends QuickOpenAction {\n\n\tstatic readonly ID = 'workbench.action.openView';\n\tstatic readonly LABEL = nls.localize('openView', \"Open View\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickOpenService quickOpenService: IQuickOpenService\n\t) {\n\t\tsuper(id, label, VIEW_PICKER_PREFIX, quickOpenService);\n\t}\n}\n\nexport class QuickOpenViewPickerAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.quickOpenView';\n\tstatic readonly LABEL = nls.localize('quickOpenView', \"Quick Open View\");\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(): Promise<boolean> {\n\t\tconst keys = this.keybindingService.lookupKeybindings(this.id);\n\n\t\tthis.quickOpenService.show(VIEW_PICKER_PREFIX, { quickNavigateConfiguration: { keybindings: keys } });\n\n\t\treturn Promise.resolve(true);\n\t}\n}\n"]}]}