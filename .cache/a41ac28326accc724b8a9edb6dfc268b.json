{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/storage/common/storage.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/common/storage.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/types\"], function (require, exports, instantiation_1, event_1, lifecycle_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IStorageService = instantiation_1.createDecorator('storageService');\n    var WillSaveStateReason;\n    (function (WillSaveStateReason) {\n        WillSaveStateReason[WillSaveStateReason[\"NONE\"] = 0] = \"NONE\";\n        WillSaveStateReason[WillSaveStateReason[\"SHUTDOWN\"] = 1] = \"SHUTDOWN\";\n    })(WillSaveStateReason = exports.WillSaveStateReason || (exports.WillSaveStateReason = {}));\n    var StorageScope;\n    (function (StorageScope) {\n        /**\n         * The stored data will be scoped to all workspaces.\n         */\n        StorageScope[StorageScope[\"GLOBAL\"] = 0] = \"GLOBAL\";\n        /**\n         * The stored data will be scoped to the current workspace.\n         */\n        StorageScope[StorageScope[\"WORKSPACE\"] = 1] = \"WORKSPACE\";\n    })(StorageScope = exports.StorageScope || (exports.StorageScope = {}));\n    class InMemoryStorageService extends lifecycle_1.Disposable {\n        constructor() {\n            super(...arguments);\n            this._serviceBrand = undefined;\n            this._onDidChangeStorage = this._register(new event_1.Emitter());\n            this.onWillSaveState = event_1.Event.None;\n            this.globalCache = new Map();\n            this.workspaceCache = new Map();\n        }\n        get onDidChangeStorage() { return this._onDidChangeStorage.event; }\n        getCache(scope) {\n            return scope === StorageScope.GLOBAL ? this.globalCache : this.workspaceCache;\n        }\n        get(key, scope, fallbackValue) {\n            const value = this.getCache(scope).get(key);\n            if (types_1.isUndefinedOrNull(value)) {\n                return fallbackValue;\n            }\n            return value;\n        }\n        getBoolean(key, scope, fallbackValue) {\n            const value = this.getCache(scope).get(key);\n            if (types_1.isUndefinedOrNull(value)) {\n                return fallbackValue;\n            }\n            return value === 'true';\n        }\n        getNumber(key, scope, fallbackValue) {\n            const value = this.getCache(scope).get(key);\n            if (types_1.isUndefinedOrNull(value)) {\n                return fallbackValue;\n            }\n            return parseInt(value, 10);\n        }\n        store(key, value, scope) {\n            // We remove the key for undefined/null values\n            if (types_1.isUndefinedOrNull(value)) {\n                return this.remove(key, scope);\n            }\n            // Otherwise, convert to String and store\n            const valueStr = String(value);\n            // Return early if value already set\n            const currentValue = this.getCache(scope).get(key);\n            if (currentValue === valueStr) {\n                return Promise.resolve();\n            }\n            // Update in cache\n            this.getCache(scope).set(key, valueStr);\n            // Events\n            this._onDidChangeStorage.fire({ scope, key });\n            return Promise.resolve();\n        }\n        remove(key, scope) {\n            const wasDeleted = this.getCache(scope).delete(key);\n            if (!wasDeleted) {\n                return Promise.resolve(); // Return early if value already deleted\n            }\n            // Events\n            this._onDidChangeStorage.fire({ scope, key });\n            return Promise.resolve();\n        }\n    }\n    exports.InMemoryStorageService = InMemoryStorageService;\n});\n",null]}