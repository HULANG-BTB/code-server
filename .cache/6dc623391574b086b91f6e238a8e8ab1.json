{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configurationService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configurationService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar assert = require(\"vs/base/common/assert\");\nvar event_1 = require(\"vs/base/common/event\");\nvar map_1 = require(\"vs/base/common/map\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar async_1 = require(\"vs/base/common/async\");\nvar pfs_1 = require(\"vs/base/node/pfs\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar configurationModels_1 = require(\"vs/platform/configuration/common/configurationModels\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationModels_2 = require(\"vs/workbench/services/configuration/common/configurationModels\");\nvar configuration_2 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar workspaces_1 = require(\"vs/platform/workspaces/common/workspaces\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar configurationEditingService_1 = require(\"vs/workbench/services/configuration/common/configurationEditingService\");\nvar configuration_3 = require(\"vs/workbench/services/configuration/node/configuration\");\nvar jsonEditingService_1 = require(\"vs/workbench/services/configuration/common/jsonEditingService\");\nvar nls_1 = require(\"vs/nls\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar performance_1 = require(\"vs/base/common/performance\");\nvar network_1 = require(\"vs/base/common/network\");\nvar WorkspaceService = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceService, _super);\n    function WorkspaceService(configuration, environmentService, remoteAgentService, workspaceSettingsRootFolder) {\n        if (workspaceSettingsRootFolder === void 0) { workspaceSettingsRootFolder = configuration_2.FOLDER_CONFIG_FOLDER_NAME; }\n        var _this = _super.call(this) || this;\n        _this.environmentService = environmentService;\n        _this.remoteAgentService = remoteAgentService;\n        _this.workspaceSettingsRootFolder = workspaceSettingsRootFolder;\n        _this.remoteUserConfiguration = null;\n        _this._onDidChangeConfiguration = _this._register(new event_1.Emitter());\n        _this.onDidChangeConfiguration = _this._onDidChangeConfiguration.event;\n        _this._onDidChangeWorkspaceFolders = _this._register(new event_1.Emitter());\n        _this.onDidChangeWorkspaceFolders = _this._onDidChangeWorkspaceFolders.event;\n        _this._onDidChangeWorkspaceName = _this._register(new event_1.Emitter());\n        _this.onDidChangeWorkspaceName = _this._onDidChangeWorkspaceName.event;\n        _this._onDidChangeWorkbenchState = _this._register(new event_1.Emitter());\n        _this.onDidChangeWorkbenchState = _this._onDidChangeWorkbenchState.event;\n        _this.completeWorkspaceBarrier = new async_1.Barrier();\n        _this.defaultConfiguration = new configurationModels_1.DefaultConfigurationModel();\n        _this.localUserConfiguration = _this._register(new configuration_3.LocalUserConfiguration(environmentService));\n        _this._register(_this.localUserConfiguration.onDidChangeConfiguration(function (userConfiguration) { return _this.onLocalUserConfigurationChanged(userConfiguration); }));\n        if (configuration.remoteAuthority) {\n            _this.remoteUserConfiguration = _this._register(new configuration_3.RemoteUserConfiguration(configuration.remoteAuthority, environmentService));\n            _this._register(_this.remoteUserConfiguration.onDidChangeConfiguration(function (userConfiguration) { return _this.onRemoteUserConfigurationChanged(userConfiguration); }));\n        }\n        _this.workspaceConfiguration = _this._register(new configuration_3.WorkspaceConfiguration(environmentService));\n        _this._register(_this.workspaceConfiguration.onDidUpdateConfiguration(function () { return _this.onWorkspaceConfigurationChanged(); }));\n        _this._register(platform_2.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidSchemaChange(function (e) { return _this.registerConfigurationSchemas(); }));\n        _this._register(platform_2.Registry.as(configurationRegistry_1.Extensions.Configuration).onDidUpdateConfiguration(function (configurationProperties) { return _this.onDefaultConfigurationChanged(configurationProperties); }));\n        _this.workspaceEditingQueue = new async_1.Queue();\n        return _this;\n    }\n    // Workspace Context Service Impl\n    WorkspaceService.prototype.getCompleteWorkspace = function () {\n        var _this = this;\n        return this.completeWorkspaceBarrier.wait().then(function () { return _this.getWorkspace(); });\n    };\n    WorkspaceService.prototype.getWorkspace = function () {\n        return this.workspace;\n    };\n    WorkspaceService.prototype.getWorkbenchState = function () {\n        // Workspace has configuration file\n        if (this.workspace.configuration) {\n            return workspace_1.WorkbenchState.WORKSPACE;\n        }\n        // Folder has single root\n        if (this.workspace.folders.length === 1) {\n            return workspace_1.WorkbenchState.FOLDER;\n        }\n        // Empty\n        return workspace_1.WorkbenchState.EMPTY;\n    };\n    WorkspaceService.prototype.getWorkspaceFolder = function (resource) {\n        return this.workspace.getFolder(resource);\n    };\n    WorkspaceService.prototype.addFolders = function (foldersToAdd, index) {\n        return this.updateFolders(foldersToAdd, [], index);\n    };\n    WorkspaceService.prototype.removeFolders = function (foldersToRemove) {\n        return this.updateFolders([], foldersToRemove);\n    };\n    WorkspaceService.prototype.updateFolders = function (foldersToAdd, foldersToRemove, index) {\n        var _this = this;\n        assert.ok(this.jsonEditingService, 'Workbench is not initialized yet');\n        return Promise.resolve(this.workspaceEditingQueue.queue(function () { return _this.doUpdateFolders(foldersToAdd, foldersToRemove, index); }));\n    };\n    WorkspaceService.prototype.isInsideWorkspace = function (resource) {\n        return !!this.getWorkspaceFolder(resource);\n    };\n    WorkspaceService.prototype.isCurrentWorkspace = function (workspaceIdentifier) {\n        switch (this.getWorkbenchState()) {\n            case workspace_1.WorkbenchState.FOLDER:\n                return workspaces_1.isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && resources_1.isEqual(workspaceIdentifier, this.workspace.folders[0].uri);\n            case workspace_1.WorkbenchState.WORKSPACE:\n                return workspaces_1.isWorkspaceIdentifier(workspaceIdentifier) && this.workspace.id === workspaceIdentifier.id;\n        }\n        return false;\n    };\n    WorkspaceService.prototype.doUpdateFolders = function (foldersToAdd, foldersToRemove, index) {\n        var _this = this;\n        if (this.getWorkbenchState() !== workspace_1.WorkbenchState.WORKSPACE) {\n            return Promise.resolve(undefined); // we need a workspace to begin with\n        }\n        if (foldersToAdd.length + foldersToRemove.length === 0) {\n            return Promise.resolve(undefined); // nothing to do\n        }\n        var foldersHaveChanged = false;\n        // Remove first (if any)\n        var currentWorkspaceFolders = this.getWorkspace().folders;\n        var newStoredFolders = currentWorkspaceFolders.map(function (f) { return f.raw; }).filter(function (folder, index) {\n            if (!workspaces_1.isStoredWorkspaceFolder(folder)) {\n                return true; // keep entries which are unrelated\n            }\n            return !_this.contains(foldersToRemove, currentWorkspaceFolders[index].uri); // keep entries which are unrelated\n        });\n        var slashForPath = workspaces_1.useSlashForPath(newStoredFolders);\n        foldersHaveChanged = currentWorkspaceFolders.length !== newStoredFolders.length;\n        // Add afterwards (if any)\n        if (foldersToAdd.length) {\n            // Recompute current workspace folders if we have folders to add\n            var workspaceConfigFolder_1 = resources_1.dirname(this.getWorkspace().configuration);\n            currentWorkspaceFolders = workspace_1.toWorkspaceFolders(newStoredFolders, workspaceConfigFolder_1);\n            var currentWorkspaceFolderUris_1 = currentWorkspaceFolders.map(function (folder) { return folder.uri; });\n            var storedFoldersToAdd_1 = [];\n            foldersToAdd.forEach(function (folderToAdd) {\n                var folderURI = folderToAdd.uri;\n                if (_this.contains(currentWorkspaceFolderUris_1, folderURI)) {\n                    return; // already existing\n                }\n                storedFoldersToAdd_1.push(workspaces_1.getStoredWorkspaceFolder(folderURI, folderToAdd.name, workspaceConfigFolder_1, slashForPath));\n            });\n            // Apply to array of newStoredFolders\n            if (storedFoldersToAdd_1.length > 0) {\n                foldersHaveChanged = true;\n                if (typeof index === 'number' && index >= 0 && index < newStoredFolders.length) {\n                    newStoredFolders = newStoredFolders.slice(0);\n                    newStoredFolders.splice.apply(newStoredFolders, [index, 0].concat(storedFoldersToAdd_1));\n                }\n                else {\n                    newStoredFolders = newStoredFolders.concat(storedFoldersToAdd_1);\n                }\n            }\n        }\n        // Set folders if we recorded a change\n        if (foldersHaveChanged) {\n            return this.setFolders(newStoredFolders);\n        }\n        return Promise.resolve(undefined);\n    };\n    WorkspaceService.prototype.setFolders = function (folders) {\n        var _this = this;\n        return this.workspaceConfiguration.setFolders(folders, this.jsonEditingService)\n            .then(function () { return _this.onWorkspaceConfigurationChanged(); });\n    };\n    WorkspaceService.prototype.contains = function (resources, toCheck) {\n        return resources.some(function (resource) {\n            if (platform_1.isLinux) {\n                return resource.toString() === toCheck.toString();\n            }\n            return resource.toString().toLowerCase() === toCheck.toString().toLowerCase();\n        });\n    };\n    // Workspace Configuration Service Impl\n    WorkspaceService.prototype.getConfigurationData = function () {\n        var configurationData = this._configuration.toData();\n        configurationData.isComplete = this.cachedFolderConfigs.values().every(function (c) { return c.loaded; });\n        return configurationData;\n    };\n    WorkspaceService.prototype.getValue = function (arg1, arg2) {\n        var section = typeof arg1 === 'string' ? arg1 : undefined;\n        var overrides = configuration_1.isConfigurationOverrides(arg1) ? arg1 : configuration_1.isConfigurationOverrides(arg2) ? arg2 : undefined;\n        return this._configuration.getValue(section, overrides);\n    };\n    WorkspaceService.prototype.updateValue = function (key, value, arg3, arg4, donotNotifyError) {\n        assert.ok(this.configurationEditingService, 'Workbench is not initialized yet');\n        var overrides = configuration_1.isConfigurationOverrides(arg3) ? arg3 : undefined;\n        var target = this.deriveConfigurationTarget(key, value, overrides, overrides ? arg4 : arg3);\n        return target ? this.writeConfigurationValue(key, value, target, overrides, donotNotifyError)\n            : Promise.resolve();\n    };\n    WorkspaceService.prototype.reloadConfiguration = function (folder, key) {\n        var _this = this;\n        if (folder) {\n            return this.reloadWorkspaceFolderConfiguration(folder, key);\n        }\n        return this.reloadUserConfiguration()\n            .then(function (_a) {\n            var local = _a.local, remote = _a.remote;\n            return _this.reloadWorkspaceConfiguration()\n                .then(function () { return _this.loadConfiguration(local, remote); });\n        });\n    };\n    WorkspaceService.prototype.inspect = function (key, overrides) {\n        return this._configuration.inspect(key, overrides);\n    };\n    WorkspaceService.prototype.keys = function () {\n        return this._configuration.keys();\n    };\n    WorkspaceService.prototype.initialize = function (arg, postInitialisationTask) {\n        var _this = this;\n        if (postInitialisationTask === void 0) { postInitialisationTask = function () { return null; }; }\n        performance_1.mark('willInitWorkspaceService');\n        return this.createWorkspace(arg)\n            .then(function (workspace) { return _this.updateWorkspaceAndInitializeConfiguration(workspace, postInitialisationTask); }).then(function () {\n            performance_1.mark('didInitWorkspaceService');\n        });\n    };\n    WorkspaceService.prototype.acquireFileService = function (fileService) {\n        var _this = this;\n        this.fileService = fileService;\n        var changedWorkspaceFolders = [];\n        this.localUserConfiguration.adopt(fileService);\n        Promise.all([this.workspaceConfiguration.adopt(fileService)].concat(this.cachedFolderConfigs.values()\n            .map(function (folderConfiguration) { return folderConfiguration.adopt(fileService)\n            .then(function (result) {\n            if (result) {\n                changedWorkspaceFolders.push(folderConfiguration.workspaceFolder);\n            }\n            return result;\n        }); })))\n            .then(function (_a) {\n            var workspaceChanged = _a[0];\n            if (workspaceChanged) {\n                _this.onWorkspaceConfigurationChanged();\n            }\n            for (var _i = 0, changedWorkspaceFolders_1 = changedWorkspaceFolders; _i < changedWorkspaceFolders_1.length; _i++) {\n                var workspaceFolder = changedWorkspaceFolders_1[_i];\n                _this.onWorkspaceFolderConfigurationChanged(workspaceFolder);\n            }\n            _this.releaseWorkspaceBarrier();\n        });\n        if (this.remoteUserConfiguration) {\n            this.remoteAgentService.getEnvironment()\n                .then(function (environment) { return _this.remoteUserConfiguration.adopt(environment ? environment.appSettingsPath : null, fileService)\n                .then(function (changedModel) {\n                if (changedModel) {\n                    _this.onRemoteUserConfigurationChanged(changedModel);\n                }\n            }); });\n        }\n    };\n    WorkspaceService.prototype.acquireInstantiationService = function (instantiationService) {\n        this.configurationEditingService = instantiationService.createInstance(configurationEditingService_1.ConfigurationEditingService);\n        this.jsonEditingService = instantiationService.createInstance(jsonEditingService_1.JSONEditingService);\n    };\n    WorkspaceService.prototype.createWorkspace = function (arg) {\n        if (workspaces_1.isWorkspaceIdentifier(arg)) {\n            return this.createMultiFolderWorkspace(arg);\n        }\n        if (workspaces_1.isSingleFolderWorkspaceInitializationPayload(arg)) {\n            return this.createSingleFolderWorkspace(arg);\n        }\n        return this.createEmptyWorkspace(arg);\n    };\n    WorkspaceService.prototype.createMultiFolderWorkspace = function (workspaceIdentifier) {\n        var _this = this;\n        return this.workspaceConfiguration.load({ id: workspaceIdentifier.id, configPath: workspaceIdentifier.configPath })\n            .then(function () {\n            var workspaceConfigPath = workspaceIdentifier.configPath;\n            var workspaceFolders = workspace_1.toWorkspaceFolders(_this.workspaceConfiguration.getFolders(), resources_1.dirname(workspaceConfigPath));\n            var workspaceId = workspaceIdentifier.id;\n            var workspace = new workspace_1.Workspace(workspaceId, workspaceFolders, workspaceConfigPath);\n            if (workspace.configuration.scheme === network_1.Schemas.file) {\n                _this.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is from disk.\n            }\n            return workspace;\n        });\n    };\n    WorkspaceService.prototype.createSingleFolderWorkspace = function (singleFolder) {\n        var folder = singleFolder.folder;\n        var configuredFolders;\n        if (folder.scheme === 'file') {\n            configuredFolders = [{ path: folder.fsPath }];\n        }\n        else {\n            configuredFolders = [{ uri: folder.toString() }];\n        }\n        var workspace = new workspace_1.Workspace(singleFolder.id, workspace_1.toWorkspaceFolders(configuredFolders));\n        this.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is single folder.\n        return Promise.resolve(workspace);\n    };\n    WorkspaceService.prototype.createEmptyWorkspace = function (emptyWorkspace) {\n        var workspace = new workspace_1.Workspace(emptyWorkspace.id);\n        this.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is an empty workspace.\n        return Promise.resolve(workspace);\n    };\n    WorkspaceService.prototype.releaseWorkspaceBarrier = function () {\n        if (!this.completeWorkspaceBarrier.isOpen()) {\n            this.completeWorkspaceBarrier.open();\n        }\n    };\n    WorkspaceService.prototype.updateWorkspaceAndInitializeConfiguration = function (workspace, postInitialisationTask) {\n        var _this = this;\n        var hasWorkspaceBefore = !!this.workspace;\n        var previousState;\n        var previousWorkspacePath;\n        var previousFolders;\n        if (hasWorkspaceBefore) {\n            previousState = this.getWorkbenchState();\n            previousWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n            previousFolders = this.workspace.folders;\n            this.workspace.update(workspace);\n        }\n        else {\n            this.workspace = workspace;\n        }\n        return this.initializeConfiguration().then(function () {\n            postInitialisationTask(); // Post initialisation task should be run before triggering events.\n            // Trigger changes after configuration initialization so that configuration is up to date.\n            if (hasWorkspaceBefore) {\n                var newState = _this.getWorkbenchState();\n                if (previousState && newState !== previousState) {\n                    _this._onDidChangeWorkbenchState.fire(newState);\n                }\n                var newWorkspacePath = _this.workspace.configuration ? _this.workspace.configuration.fsPath : undefined;\n                if (previousWorkspacePath && newWorkspacePath !== previousWorkspacePath || newState !== previousState) {\n                    _this._onDidChangeWorkspaceName.fire();\n                }\n                var folderChanges = _this.compareFolders(previousFolders, _this.workspace.folders);\n                if (folderChanges && (folderChanges.added.length || folderChanges.removed.length || folderChanges.changed.length)) {\n                    _this._onDidChangeWorkspaceFolders.fire(folderChanges);\n                }\n            }\n        });\n    };\n    WorkspaceService.prototype.compareFolders = function (currentFolders, newFolders) {\n        var result = { added: [], removed: [], changed: [] };\n        result.added = newFolders.filter(function (newFolder) { return !currentFolders.some(function (currentFolder) { return newFolder.uri.toString() === currentFolder.uri.toString(); }); });\n        for (var currentIndex = 0; currentIndex < currentFolders.length; currentIndex++) {\n            var currentFolder = currentFolders[currentIndex];\n            var newIndex = 0;\n            for (newIndex = 0; newIndex < newFolders.length && currentFolder.uri.toString() !== newFolders[newIndex].uri.toString(); newIndex++) { }\n            if (newIndex < newFolders.length) {\n                if (currentIndex !== newIndex || currentFolder.name !== newFolders[newIndex].name) {\n                    result.changed.push(currentFolder);\n                }\n            }\n            else {\n                result.removed.push(currentFolder);\n            }\n        }\n        return result;\n    };\n    WorkspaceService.prototype.initializeConfiguration = function () {\n        var _this = this;\n        this.registerConfigurationSchemas();\n        return this.initializeUserConfiguration()\n            .then(function (_a) {\n            var local = _a.local, remote = _a.remote;\n            return _this.loadConfiguration(local, remote);\n        });\n    };\n    WorkspaceService.prototype.initializeUserConfiguration = function () {\n        return Promise.all([this.localUserConfiguration.initialize(), this.remoteUserConfiguration ? this.remoteUserConfiguration.initialize() : Promise.resolve(new configurationModels_1.ConfigurationModel())])\n            .then(function (_a) {\n            var local = _a[0], remote = _a[1];\n            return ({ local: local, remote: remote });\n        });\n    };\n    WorkspaceService.prototype.reloadUserConfiguration = function (key) {\n        return Promise.all([this.localUserConfiguration.reload(), this.remoteUserConfiguration ? this.remoteUserConfiguration.reload() : Promise.resolve(new configurationModels_1.ConfigurationModel())])\n            .then(function (_a) {\n            var local = _a[0], remote = _a[1];\n            return ({ local: local, remote: remote });\n        });\n    };\n    WorkspaceService.prototype.reloadWorkspaceConfiguration = function (key) {\n        var _this = this;\n        var workbenchState = this.getWorkbenchState();\n        if (workbenchState === workspace_1.WorkbenchState.FOLDER) {\n            return this.onWorkspaceFolderConfigurationChanged(this.workspace.folders[0], key);\n        }\n        if (workbenchState === workspace_1.WorkbenchState.WORKSPACE) {\n            return this.workspaceConfiguration.reload().then(function () { return _this.onWorkspaceConfigurationChanged(); });\n        }\n        return Promise.resolve(undefined);\n    };\n    WorkspaceService.prototype.reloadWorkspaceFolderConfiguration = function (folder, key) {\n        return this.onWorkspaceFolderConfigurationChanged(folder, key);\n    };\n    WorkspaceService.prototype.loadConfiguration = function (userConfigurationModel, remoteUserConfigurationModel) {\n        var _this = this;\n        // reset caches\n        this.cachedFolderConfigs = new map_1.ResourceMap();\n        var folders = this.workspace.folders;\n        return this.loadFolderConfigurations(folders)\n            .then(function (folderConfigurations) {\n            var workspaceConfiguration = _this.getWorkspaceConfigurationModel(folderConfigurations);\n            var folderConfigurationModels = new map_1.ResourceMap();\n            folderConfigurations.forEach(function (folderConfiguration, index) { return folderConfigurationModels.set(folders[index].uri, folderConfiguration); });\n            var currentConfiguration = _this._configuration;\n            _this._configuration = new configurationModels_2.Configuration(_this.defaultConfiguration, userConfigurationModel, remoteUserConfigurationModel, workspaceConfiguration, folderConfigurationModels, new configurationModels_1.ConfigurationModel(), new map_1.ResourceMap(), _this.workspace);\n            if (currentConfiguration) {\n                var changedKeys = _this._configuration.compare(currentConfiguration);\n                _this.triggerConfigurationChange(new configurationModels_1.ConfigurationChangeEvent().change(changedKeys), configuration_1.ConfigurationTarget.WORKSPACE);\n            }\n            else {\n                _this._onDidChangeConfiguration.fire(new configurationModels_2.AllKeysConfigurationChangeEvent(_this._configuration, configuration_1.ConfigurationTarget.WORKSPACE, _this.getTargetConfiguration(configuration_1.ConfigurationTarget.WORKSPACE)));\n            }\n        });\n    };\n    WorkspaceService.prototype.getWorkspaceConfigurationModel = function (folderConfigurations) {\n        switch (this.getWorkbenchState()) {\n            case workspace_1.WorkbenchState.FOLDER:\n                return folderConfigurations[0];\n            case workspace_1.WorkbenchState.WORKSPACE:\n                return this.workspaceConfiguration.getConfiguration();\n            default:\n                return new configurationModels_1.ConfigurationModel();\n        }\n    };\n    WorkspaceService.prototype.onDefaultConfigurationChanged = function (keys) {\n        var _this = this;\n        this.defaultConfiguration = new configurationModels_1.DefaultConfigurationModel();\n        this.registerConfigurationSchemas();\n        if (this.workspace && this._configuration) {\n            this._configuration.updateDefaultConfiguration(this.defaultConfiguration);\n            if (this.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                this._configuration.updateWorkspaceConfiguration(this.cachedFolderConfigs.get(this.workspace.folders[0].uri).reprocess());\n            }\n            else {\n                this._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.reprocessWorkspaceSettings());\n                this.workspace.folders.forEach(function (folder) { return _this._configuration.updateFolderConfiguration(folder.uri, _this.cachedFolderConfigs.get(folder.uri).reprocess()); });\n            }\n            this.triggerConfigurationChange(new configurationModels_1.ConfigurationChangeEvent().change(keys), configuration_1.ConfigurationTarget.DEFAULT);\n        }\n    };\n    WorkspaceService.prototype.registerConfigurationSchemas = function () {\n        if (this.workspace) {\n            var jsonRegistry = platform_2.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\n            var convertToNotSuggestedProperties = function (properties, errorMessage) {\n                return Object.keys(properties).reduce(function (result, property) {\n                    result[property] = objects_1.deepClone(properties[property]);\n                    result[property].deprecationMessage = errorMessage;\n                    return result;\n                }, {});\n            };\n            var allSettingsSchema = { properties: configurationRegistry_1.allSettings.properties, patternProperties: configurationRegistry_1.allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n            var unsupportedApplicationSettings = convertToNotSuggestedProperties(configurationRegistry_1.applicationSettings.properties, nls_1.localize('unsupportedApplicationSetting', \"This setting can be applied only in User Settings\"));\n            var workspaceSettingsSchema = { properties: tslib_1.__assign({}, unsupportedApplicationSettings, configurationRegistry_1.windowSettings.properties, configurationRegistry_1.resourceSettings.properties), patternProperties: configurationRegistry_1.allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n            jsonRegistry.registerSchema(configuration_2.defaultSettingsSchemaId, allSettingsSchema);\n            jsonRegistry.registerSchema(configuration_2.userSettingsSchemaId, allSettingsSchema);\n            if (workspace_1.WorkbenchState.WORKSPACE === this.getWorkbenchState()) {\n                var unsupportedWindowSettings = convertToNotSuggestedProperties(configurationRegistry_1.windowSettings.properties, nls_1.localize('unsupportedWindowSetting', \"This setting cannot be applied now. It will be applied when you open this folder directly.\"));\n                var folderSettingsSchema = { properties: tslib_1.__assign({}, unsupportedApplicationSettings, unsupportedWindowSettings, configurationRegistry_1.resourceSettings.properties), patternProperties: configurationRegistry_1.allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n                jsonRegistry.registerSchema(configuration_2.workspaceSettingsSchemaId, workspaceSettingsSchema);\n                jsonRegistry.registerSchema(configuration_2.folderSettingsSchemaId, folderSettingsSchema);\n            }\n            else {\n                jsonRegistry.registerSchema(configuration_2.workspaceSettingsSchemaId, workspaceSettingsSchema);\n                jsonRegistry.registerSchema(configuration_2.folderSettingsSchemaId, workspaceSettingsSchema);\n            }\n        }\n    };\n    WorkspaceService.prototype.onLocalUserConfigurationChanged = function (userConfiguration) {\n        var keys = this._configuration.compareAndUpdateLocalUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(keys, configuration_1.ConfigurationTarget.USER);\n    };\n    WorkspaceService.prototype.onRemoteUserConfigurationChanged = function (userConfiguration) {\n        var keys = this._configuration.compareAndUpdateRemoteUserConfiguration(userConfiguration);\n        this.triggerConfigurationChange(keys, configuration_1.ConfigurationTarget.USER);\n    };\n    WorkspaceService.prototype.onWorkspaceConfigurationChanged = function () {\n        var _this = this;\n        if (this.workspace && this.workspace.configuration && this._configuration) {\n            var workspaceConfigurationChangeEvent_1 = this._configuration.compareAndUpdateWorkspaceConfiguration(this.workspaceConfiguration.getConfiguration());\n            var configuredFolders = workspace_1.toWorkspaceFolders(this.workspaceConfiguration.getFolders(), resources_1.dirname(this.workspace.configuration));\n            var changes_1 = this.compareFolders(this.workspace.folders, configuredFolders);\n            if (changes_1.added.length || changes_1.removed.length || changes_1.changed.length) {\n                this.workspace.folders = configuredFolders;\n                return this.onFoldersChanged()\n                    .then(function (foldersConfigurationChangeEvent) {\n                    _this.triggerConfigurationChange(foldersConfigurationChangeEvent.change(workspaceConfigurationChangeEvent_1), configuration_1.ConfigurationTarget.WORKSPACE_FOLDER);\n                    _this._onDidChangeWorkspaceFolders.fire(changes_1);\n                });\n            }\n            else {\n                this.triggerConfigurationChange(workspaceConfigurationChangeEvent_1, configuration_1.ConfigurationTarget.WORKSPACE);\n            }\n        }\n        return Promise.resolve(undefined);\n    };\n    WorkspaceService.prototype.onWorkspaceFolderConfigurationChanged = function (folder, key) {\n        var _this = this;\n        return this.loadFolderConfigurations([folder])\n            .then(function (_a) {\n            var folderConfiguration = _a[0];\n            var folderChangedKeys = _this._configuration.compareAndUpdateFolderConfiguration(folder.uri, folderConfiguration);\n            if (_this.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                var workspaceChangedKeys = _this._configuration.compareAndUpdateWorkspaceConfiguration(folderConfiguration);\n                _this.triggerConfigurationChange(workspaceChangedKeys, configuration_1.ConfigurationTarget.WORKSPACE);\n            }\n            else {\n                _this.triggerConfigurationChange(folderChangedKeys, configuration_1.ConfigurationTarget.WORKSPACE_FOLDER);\n            }\n        });\n    };\n    WorkspaceService.prototype.onFoldersChanged = function () {\n        var _this = this;\n        var changeEvent = new configurationModels_1.ConfigurationChangeEvent();\n        var _loop_1 = function (key) {\n            if (!this_1.workspace.folders.filter(function (folder) { return folder.uri.toString() === key.toString(); })[0]) {\n                var folderConfiguration = this_1.cachedFolderConfigs.get(key);\n                folderConfiguration.dispose();\n                this_1.cachedFolderConfigs.delete(key);\n                changeEvent = changeEvent.change(this_1._configuration.compareAndDeleteFolderConfiguration(key));\n            }\n        };\n        var this_1 = this;\n        // Remove the configurations of deleted folders\n        for (var _i = 0, _a = this.cachedFolderConfigs.keys(); _i < _a.length; _i++) {\n            var key = _a[_i];\n            _loop_1(key);\n        }\n        var toInitialize = this.workspace.folders.filter(function (folder) { return !_this.cachedFolderConfigs.has(folder.uri); });\n        if (toInitialize.length) {\n            return this.loadFolderConfigurations(toInitialize)\n                .then(function (folderConfigurations) {\n                folderConfigurations.forEach(function (folderConfiguration, index) {\n                    changeEvent = changeEvent.change(_this._configuration.compareAndUpdateFolderConfiguration(toInitialize[index].uri, folderConfiguration));\n                });\n                return changeEvent;\n            });\n        }\n        return Promise.resolve(changeEvent);\n    };\n    WorkspaceService.prototype.loadFolderConfigurations = function (folders) {\n        var _this = this;\n        return Promise.all(folders.map(function (folder) {\n            var folderConfiguration = _this.cachedFolderConfigs.get(folder.uri);\n            if (!folderConfiguration) {\n                folderConfiguration = new configuration_3.FolderConfiguration(folder, _this.workspaceSettingsRootFolder, _this.getWorkbenchState(), _this.environmentService, _this.fileService);\n                _this._register(folderConfiguration.onDidChange(function () { return _this.onWorkspaceFolderConfigurationChanged(folder); }));\n                _this.cachedFolderConfigs.set(folder.uri, _this._register(folderConfiguration));\n            }\n            return folderConfiguration.loadConfiguration();\n        }).slice());\n    };\n    WorkspaceService.prototype.writeConfigurationValue = function (key, value, target, overrides, donotNotifyError) {\n        var _this = this;\n        if (target === configuration_1.ConfigurationTarget.DEFAULT) {\n            return Promise.reject(new Error('Invalid configuration target'));\n        }\n        if (target === configuration_1.ConfigurationTarget.MEMORY) {\n            this._configuration.updateValue(key, value, overrides);\n            this.triggerConfigurationChange(new configurationModels_1.ConfigurationChangeEvent().change(overrides && overrides.overrideIdentifier ? [configuration_1.keyFromOverrideIdentifier(overrides.overrideIdentifier)] : [key], overrides && overrides.resource || undefined), target);\n            return Promise.resolve(undefined);\n        }\n        return this.configurationEditingService.writeConfiguration(target, { key: key, value: value }, { scopes: overrides, donotNotifyError: donotNotifyError })\n            .then(function () {\n            switch (target) {\n                case configuration_1.ConfigurationTarget.USER:\n                    return _this.reloadUserConfiguration()\n                        .then(function (_a) {\n                        var local = _a.local, remote = _a.remote;\n                        _this.onLocalUserConfigurationChanged(local);\n                        if (_this.remoteUserConfiguration) {\n                            _this.onRemoteUserConfigurationChanged(remote);\n                        }\n                    });\n                case configuration_1.ConfigurationTarget.WORKSPACE:\n                    return _this.reloadWorkspaceConfiguration();\n                case configuration_1.ConfigurationTarget.WORKSPACE_FOLDER:\n                    var workspaceFolder = overrides && overrides.resource ? _this.workspace.getFolder(overrides.resource) : null;\n                    if (workspaceFolder) {\n                        return _this.reloadWorkspaceFolderConfiguration(workspaceFolder, key);\n                    }\n            }\n            return Promise.resolve();\n        });\n    };\n    WorkspaceService.prototype.deriveConfigurationTarget = function (key, value, overrides, target) {\n        if (target) {\n            return target;\n        }\n        if (value === undefined) {\n            // Ignore. But expected is to remove the value from all targets\n            return undefined;\n        }\n        var inspect = this.inspect(key, overrides);\n        if (objects_1.equals(value, inspect.value)) {\n            // No change. So ignore.\n            return undefined;\n        }\n        if (inspect.workspaceFolder !== undefined) {\n            return configuration_1.ConfigurationTarget.WORKSPACE_FOLDER;\n        }\n        if (inspect.workspace !== undefined) {\n            return configuration_1.ConfigurationTarget.WORKSPACE;\n        }\n        return configuration_1.ConfigurationTarget.USER;\n    };\n    WorkspaceService.prototype.triggerConfigurationChange = function (configurationEvent, target) {\n        if (configurationEvent.affectedKeys.length) {\n            configurationEvent.telemetryData(target, this.getTargetConfiguration(target));\n            this._onDidChangeConfiguration.fire(new configurationModels_2.WorkspaceConfigurationChangeEvent(configurationEvent, this.workspace));\n        }\n    };\n    WorkspaceService.prototype.getTargetConfiguration = function (target) {\n        switch (target) {\n            case configuration_1.ConfigurationTarget.DEFAULT:\n                return this._configuration.defaults.contents;\n            case configuration_1.ConfigurationTarget.USER:\n                return this._configuration.userConfiguration.contents;\n            case configuration_1.ConfigurationTarget.WORKSPACE:\n                return this._configuration.workspaceConfiguration.contents;\n        }\n        return {};\n    };\n    return WorkspaceService;\n}(lifecycle_1.Disposable));\nexports.WorkspaceService = WorkspaceService;\nvar DefaultConfigurationExportHelper = /** @class */ (function () {\n    function DefaultConfigurationExportHelper(environmentService, extensionService, commandService) {\n        this.extensionService = extensionService;\n        this.commandService = commandService;\n        if (environmentService.args['export-default-configuration']) {\n            this.writeConfigModelAndQuit(environmentService.args['export-default-configuration']);\n        }\n    }\n    DefaultConfigurationExportHelper.prototype.writeConfigModelAndQuit = function (targetPath) {\n        var _this = this;\n        return Promise.resolve(this.extensionService.whenInstalledExtensionsRegistered())\n            .then(function () { return _this.writeConfigModel(targetPath); })\n            .then(function () { return _this.commandService.executeCommand('workbench.action.quit'); })\n            .then(function () { });\n    };\n    DefaultConfigurationExportHelper.prototype.writeConfigModel = function (targetPath) {\n        var config = this.getConfigModel();\n        var resultString = JSON.stringify(config, undefined, '  ');\n        return pfs_1.writeFile(targetPath, resultString);\n    };\n    DefaultConfigurationExportHelper.prototype.getConfigModel = function () {\n        var configRegistry = platform_2.Registry.as(configurationRegistry_1.Extensions.Configuration);\n        var configurations = configRegistry.getConfigurations().slice();\n        var settings = [];\n        var processProperty = function (name, prop) {\n            var propDetails = {\n                name: name,\n                description: prop.description || prop.markdownDescription || '',\n                default: prop.default,\n                type: prop.type\n            };\n            if (prop.enum) {\n                propDetails.enum = prop.enum;\n            }\n            if (prop.enumDescriptions || prop.markdownEnumDescriptions) {\n                propDetails.enumDescriptions = prop.enumDescriptions || prop.markdownEnumDescriptions;\n            }\n            settings.push(propDetails);\n        };\n        var processConfig = function (config) {\n            if (config.properties) {\n                for (var name in config.properties) {\n                    processProperty(name, config.properties[name]);\n                }\n            }\n            if (config.allOf) {\n                config.allOf.forEach(processConfig);\n            }\n        };\n        configurations.forEach(processConfig);\n        var excludedProps = configRegistry.getExcludedConfigurationProperties();\n        for (var name in excludedProps) {\n            processProperty(name, excludedProps[name]);\n        }\n        var result = {\n            settings: settings.sort(function (a, b) { return a.name.localeCompare(b.name); }),\n            buildTime: Date.now(),\n            commit: product_1.default.commit,\n            buildNumber: product_1.default.settingsSearchBuildId\n        };\n        return result;\n    };\n    DefaultConfigurationExportHelper = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, extensions_1.IExtensionService),\n        tslib_1.__param(2, commands_1.ICommandService)\n    ], DefaultConfigurationExportHelper);\n    return DefaultConfigurationExportHelper;\n}());\nexports.DefaultConfigurationExportHelper = DefaultConfigurationExportHelper;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configurationService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/configuration/node/configurationService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport * as assert from 'vs/base/common/assert';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { equals, deepClone } from 'vs/base/common/objects';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Queue, Barrier } from 'vs/base/common/async';\nimport { writeFile } from 'vs/base/node/pfs';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IWorkspaceContextService, Workspace, WorkbenchState, IWorkspaceFolder, toWorkspaceFolders, IWorkspaceFoldersChangeEvent, WorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { isLinux } from 'vs/base/common/platform';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ConfigurationChangeEvent, ConfigurationModel, DefaultConfigurationModel } from 'vs/platform/configuration/common/configurationModels';\nimport { IConfigurationChangeEvent, ConfigurationTarget, IConfigurationOverrides, keyFromOverrideIdentifier, isConfigurationOverrides, IConfigurationData, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Configuration, WorkspaceConfigurationChangeEvent, AllKeysConfigurationChangeEvent } from 'vs/workbench/services/configuration/common/configurationModels';\nimport { FOLDER_CONFIG_FOLDER_NAME, defaultSettingsSchemaId, userSettingsSchemaId, workspaceSettingsSchemaId, folderSettingsSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationNode, IConfigurationRegistry, Extensions, IConfigurationPropertySchema, allSettings, windowSettings, resourceSettings, applicationSettings } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkspaceIdentifier, isWorkspaceIdentifier, IStoredWorkspaceFolder, isStoredWorkspaceFolder, IWorkspaceFolderCreationData, ISingleFolderWorkspaceIdentifier, isSingleFolderWorkspaceIdentifier, IWorkspaceInitializationPayload, isSingleFolderWorkspaceInitializationPayload, ISingleFolderWorkspaceInitializationPayload, IEmptyWorkspaceInitializationPayload, useSlashForPath, getStoredWorkspaceFolder } from 'vs/platform/workspaces/common/workspaces';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport product from 'vs/platform/product/node/product';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ConfigurationEditingService } from 'vs/workbench/services/configuration/common/configurationEditingService';\nimport { WorkspaceConfiguration, FolderConfiguration, RemoteUserConfiguration, LocalUserConfiguration } from 'vs/workbench/services/configuration/node/configuration';\nimport { JSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditingService';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { localize } from 'vs/nls';\nimport { isEqual, dirname } from 'vs/base/common/resources';\nimport { mark } from 'vs/base/common/performance';\nimport { Schemas } from 'vs/base/common/network';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IWindowConfiguration } from 'vs/platform/windows/common/windows';\n\nexport class WorkspaceService extends Disposable implements IConfigurationService, IWorkspaceContextService {\n\n\tpublic _serviceBrand: any;\n\n\tprivate workspace: Workspace;\n\tprivate completeWorkspaceBarrier: Barrier;\n\tprivate _configuration: Configuration;\n\tprivate defaultConfiguration: DefaultConfigurationModel;\n\tprivate localUserConfiguration: LocalUserConfiguration;\n\tprivate remoteUserConfiguration: RemoteUserConfiguration | null = null;\n\tprivate workspaceConfiguration: WorkspaceConfiguration;\n\tprivate cachedFolderConfigs: ResourceMap<FolderConfiguration>;\n\n\tprivate workspaceEditingQueue: Queue<void>;\n\n\tprotected readonly _onDidChangeConfiguration: Emitter<IConfigurationChangeEvent> = this._register(new Emitter<IConfigurationChangeEvent>());\n\tpublic readonly onDidChangeConfiguration: Event<IConfigurationChangeEvent> = this._onDidChangeConfiguration.event;\n\n\tprotected readonly _onDidChangeWorkspaceFolders: Emitter<IWorkspaceFoldersChangeEvent> = this._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tpublic readonly onDidChangeWorkspaceFolders: Event<IWorkspaceFoldersChangeEvent> = this._onDidChangeWorkspaceFolders.event;\n\n\tprotected readonly _onDidChangeWorkspaceName: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeWorkspaceName: Event<void> = this._onDidChangeWorkspaceName.event;\n\n\tprotected readonly _onDidChangeWorkbenchState: Emitter<WorkbenchState> = this._register(new Emitter<WorkbenchState>());\n\tpublic readonly onDidChangeWorkbenchState: Event<WorkbenchState> = this._onDidChangeWorkbenchState.event;\n\n\tprivate fileService: IFileService;\n\tprivate configurationEditingService: ConfigurationEditingService;\n\tprivate jsonEditingService: JSONEditingService;\n\n\tconstructor(configuration: IWindowConfiguration, private environmentService: IEnvironmentService, private remoteAgentService: IRemoteAgentService, private workspaceSettingsRootFolder: string = FOLDER_CONFIG_FOLDER_NAME) {\n\t\tsuper();\n\n\t\tthis.completeWorkspaceBarrier = new Barrier();\n\t\tthis.defaultConfiguration = new DefaultConfigurationModel();\n\t\tthis.localUserConfiguration = this._register(new LocalUserConfiguration(environmentService));\n\t\tthis._register(this.localUserConfiguration.onDidChangeConfiguration(userConfiguration => this.onLocalUserConfigurationChanged(userConfiguration)));\n\t\tif (configuration.remoteAuthority) {\n\t\t\tthis.remoteUserConfiguration = this._register(new RemoteUserConfiguration(configuration.remoteAuthority, environmentService));\n\t\t\tthis._register(this.remoteUserConfiguration.onDidChangeConfiguration(userConfiguration => this.onRemoteUserConfigurationChanged(userConfiguration)));\n\t\t}\n\t\tthis.workspaceConfiguration = this._register(new WorkspaceConfiguration(environmentService));\n\t\tthis._register(this.workspaceConfiguration.onDidUpdateConfiguration(() => this.onWorkspaceConfigurationChanged()));\n\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidSchemaChange(e => this.registerConfigurationSchemas()));\n\t\tthis._register(Registry.as<IConfigurationRegistry>(Extensions.Configuration).onDidUpdateConfiguration(configurationProperties => this.onDefaultConfigurationChanged(configurationProperties)));\n\n\t\tthis.workspaceEditingQueue = new Queue<void>();\n\t}\n\n\t// Workspace Context Service Impl\n\n\tpublic getCompleteWorkspace(): Promise<Workspace> {\n\t\treturn this.completeWorkspaceBarrier.wait().then(() => this.getWorkspace());\n\t}\n\n\tpublic getWorkspace(): Workspace {\n\t\treturn this.workspace;\n\t}\n\n\tpublic getWorkbenchState(): WorkbenchState {\n\t\t// Workspace has configuration file\n\t\tif (this.workspace.configuration) {\n\t\t\treturn WorkbenchState.WORKSPACE;\n\t\t}\n\n\t\t// Folder has single root\n\t\tif (this.workspace.folders.length === 1) {\n\t\t\treturn WorkbenchState.FOLDER;\n\t\t}\n\n\t\t// Empty\n\t\treturn WorkbenchState.EMPTY;\n\t}\n\n\tpublic getWorkspaceFolder(resource: URI): IWorkspaceFolder | null {\n\t\treturn this.workspace.getFolder(resource);\n\t}\n\n\tpublic addFolders(foldersToAdd: IWorkspaceFolderCreationData[], index?: number): Promise<void> {\n\t\treturn this.updateFolders(foldersToAdd, [], index);\n\t}\n\n\tpublic removeFolders(foldersToRemove: URI[]): Promise<void> {\n\t\treturn this.updateFolders([], foldersToRemove);\n\t}\n\n\tpublic updateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void> {\n\t\tassert.ok(this.jsonEditingService, 'Workbench is not initialized yet');\n\t\treturn Promise.resolve(this.workspaceEditingQueue.queue(() => this.doUpdateFolders(foldersToAdd, foldersToRemove, index)));\n\t}\n\n\tpublic isInsideWorkspace(resource: URI): boolean {\n\t\treturn !!this.getWorkspaceFolder(resource);\n\t}\n\n\tpublic isCurrentWorkspace(workspaceIdentifier: ISingleFolderWorkspaceIdentifier | IWorkspaceIdentifier): boolean {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn isSingleFolderWorkspaceIdentifier(workspaceIdentifier) && isEqual(workspaceIdentifier, this.workspace.folders[0].uri);\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn isWorkspaceIdentifier(workspaceIdentifier) && this.workspace.id === workspaceIdentifier.id;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate doUpdateFolders(foldersToAdd: IWorkspaceFolderCreationData[], foldersToRemove: URI[], index?: number): Promise<void> {\n\t\tif (this.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\treturn Promise.resolve(undefined); // we need a workspace to begin with\n\t\t}\n\n\t\tif (foldersToAdd.length + foldersToRemove.length === 0) {\n\t\t\treturn Promise.resolve(undefined); // nothing to do\n\t\t}\n\n\t\tlet foldersHaveChanged = false;\n\n\t\t// Remove first (if any)\n\t\tlet currentWorkspaceFolders = this.getWorkspace().folders;\n\t\tlet newStoredFolders: IStoredWorkspaceFolder[] = currentWorkspaceFolders.map(f => f.raw).filter((folder, index): folder is IStoredWorkspaceFolder => {\n\t\t\tif (!isStoredWorkspaceFolder(folder)) {\n\t\t\t\treturn true; // keep entries which are unrelated\n\t\t\t}\n\n\t\t\treturn !this.contains(foldersToRemove, currentWorkspaceFolders[index].uri); // keep entries which are unrelated\n\t\t});\n\n\t\tconst slashForPath = useSlashForPath(newStoredFolders);\n\n\t\tfoldersHaveChanged = currentWorkspaceFolders.length !== newStoredFolders.length;\n\n\t\t// Add afterwards (if any)\n\t\tif (foldersToAdd.length) {\n\n\t\t\t// Recompute current workspace folders if we have folders to add\n\t\t\tconst workspaceConfigFolder = dirname(this.getWorkspace().configuration!);\n\t\t\tcurrentWorkspaceFolders = toWorkspaceFolders(newStoredFolders, workspaceConfigFolder);\n\t\t\tconst currentWorkspaceFolderUris = currentWorkspaceFolders.map(folder => folder.uri);\n\n\t\t\tconst storedFoldersToAdd: IStoredWorkspaceFolder[] = [];\n\n\t\t\tfoldersToAdd.forEach(folderToAdd => {\n\t\t\t\tconst folderURI = folderToAdd.uri;\n\t\t\t\tif (this.contains(currentWorkspaceFolderUris, folderURI)) {\n\t\t\t\t\treturn; // already existing\n\t\t\t\t}\n\t\t\t\tstoredFoldersToAdd.push(getStoredWorkspaceFolder(folderURI, folderToAdd.name, workspaceConfigFolder, slashForPath));\n\t\t\t});\n\n\t\t\t// Apply to array of newStoredFolders\n\t\t\tif (storedFoldersToAdd.length > 0) {\n\t\t\t\tfoldersHaveChanged = true;\n\n\t\t\t\tif (typeof index === 'number' && index >= 0 && index < newStoredFolders.length) {\n\t\t\t\t\tnewStoredFolders = newStoredFolders.slice(0);\n\t\t\t\t\tnewStoredFolders.splice(index, 0, ...storedFoldersToAdd);\n\t\t\t\t} else {\n\t\t\t\t\tnewStoredFolders = [...newStoredFolders, ...storedFoldersToAdd];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set folders if we recorded a change\n\t\tif (foldersHaveChanged) {\n\t\t\treturn this.setFolders(newStoredFolders);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate setFolders(folders: IStoredWorkspaceFolder[]): Promise<void> {\n\t\treturn this.workspaceConfiguration.setFolders(folders, this.jsonEditingService)\n\t\t\t.then(() => this.onWorkspaceConfigurationChanged());\n\t}\n\n\tprivate contains(resources: URI[], toCheck: URI): boolean {\n\t\treturn resources.some(resource => {\n\t\t\tif (isLinux) {\n\t\t\t\treturn resource.toString() === toCheck.toString();\n\t\t\t}\n\n\t\t\treturn resource.toString().toLowerCase() === toCheck.toString().toLowerCase();\n\t\t});\n\t}\n\n\t// Workspace Configuration Service Impl\n\n\tgetConfigurationData(): IConfigurationData {\n\t\tconst configurationData = this._configuration.toData();\n\t\tconfigurationData.isComplete = this.cachedFolderConfigs.values().every(c => c.loaded);\n\t\treturn configurationData;\n\t}\n\n\tgetValue<T>(): T;\n\tgetValue<T>(section: string): T;\n\tgetValue<T>(overrides: IConfigurationOverrides): T;\n\tgetValue<T>(section: string, overrides: IConfigurationOverrides): T;\n\tgetValue(arg1?: any, arg2?: any): any {\n\t\tconst section = typeof arg1 === 'string' ? arg1 : undefined;\n\t\tconst overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : undefined;\n\t\treturn this._configuration.getValue(section, overrides);\n\t}\n\n\tupdateValue(key: string, value: any): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides): Promise<void>;\n\tupdateValue(key: string, value: any, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget): Promise<void>;\n\tupdateValue(key: string, value: any, overrides: IConfigurationOverrides, target: ConfigurationTarget, donotNotifyError: boolean): Promise<void>;\n\tupdateValue(key: string, value: any, arg3?: any, arg4?: any, donotNotifyError?: any): Promise<void> {\n\t\tassert.ok(this.configurationEditingService, 'Workbench is not initialized yet');\n\t\tconst overrides = isConfigurationOverrides(arg3) ? arg3 : undefined;\n\t\tconst target = this.deriveConfigurationTarget(key, value, overrides, overrides ? arg4 : arg3);\n\t\treturn target ? this.writeConfigurationValue(key, value, target, overrides, donotNotifyError)\n\t\t\t: Promise.resolve();\n\t}\n\n\treloadConfiguration(folder?: IWorkspaceFolder, key?: string): Promise<void> {\n\t\tif (folder) {\n\t\t\treturn this.reloadWorkspaceFolderConfiguration(folder, key);\n\t\t}\n\t\treturn this.reloadUserConfiguration()\n\t\t\t.then(({ local, remote }) => this.reloadWorkspaceConfiguration()\n\t\t\t\t.then(() => this.loadConfiguration(local, remote)));\n\t}\n\n\tinspect<T>(key: string, overrides?: IConfigurationOverrides): {\n\t\tdefault: T,\n\t\tuser: T,\n\t\tworkspace?: T,\n\t\tworkspaceFolder?: T,\n\t\tmemory?: T,\n\t\tvalue: T\n\t} {\n\t\treturn this._configuration.inspect<T>(key, overrides);\n\t}\n\n\tkeys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn this._configuration.keys();\n\t}\n\n\tinitialize(arg: IWorkspaceInitializationPayload, postInitialisationTask: () => void = () => null): Promise<any> {\n\t\tmark('willInitWorkspaceService');\n\t\treturn this.createWorkspace(arg)\n\t\t\t.then(workspace => this.updateWorkspaceAndInitializeConfiguration(workspace, postInitialisationTask)).then(() => {\n\t\t\t\tmark('didInitWorkspaceService');\n\t\t\t});\n\t}\n\n\tacquireFileService(fileService: IFileService): void {\n\t\tthis.fileService = fileService;\n\t\tconst changedWorkspaceFolders: IWorkspaceFolder[] = [];\n\t\tthis.localUserConfiguration.adopt(fileService);\n\t\tPromise.all([this.workspaceConfiguration.adopt(fileService), ...this.cachedFolderConfigs.values()\n\t\t\t.map(folderConfiguration => folderConfiguration.adopt(fileService)\n\t\t\t\t.then(result => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tchangedWorkspaceFolders.push(folderConfiguration.workspaceFolder);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}))])\n\t\t\t.then(([workspaceChanged]) => {\n\t\t\t\tif (workspaceChanged) {\n\t\t\t\t\tthis.onWorkspaceConfigurationChanged();\n\t\t\t\t}\n\t\t\t\tfor (const workspaceFolder of changedWorkspaceFolders) {\n\t\t\t\t\tthis.onWorkspaceFolderConfigurationChanged(workspaceFolder);\n\t\t\t\t}\n\t\t\t\tthis.releaseWorkspaceBarrier();\n\t\t\t});\n\t\tif (this.remoteUserConfiguration) {\n\t\t\tthis.remoteAgentService.getEnvironment()\n\t\t\t\t.then(environment => this.remoteUserConfiguration!.adopt(environment ? environment.appSettingsPath : null, fileService)\n\t\t\t\t\t.then(changedModel => {\n\t\t\t\t\t\tif (changedModel) {\n\t\t\t\t\t\t\tthis.onRemoteUserConfigurationChanged(changedModel);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t}\n\t}\n\n\tacquireInstantiationService(instantiationService: IInstantiationService): void {\n\t\tthis.configurationEditingService = instantiationService.createInstance(ConfigurationEditingService);\n\t\tthis.jsonEditingService = instantiationService.createInstance(JSONEditingService);\n\t}\n\n\tprivate createWorkspace(arg: IWorkspaceInitializationPayload): Promise<Workspace> {\n\t\tif (isWorkspaceIdentifier(arg)) {\n\t\t\treturn this.createMultiFolderWorkspace(arg);\n\t\t}\n\n\t\tif (isSingleFolderWorkspaceInitializationPayload(arg)) {\n\t\t\treturn this.createSingleFolderWorkspace(arg);\n\t\t}\n\n\t\treturn this.createEmptyWorkspace(arg);\n\t}\n\n\tprivate createMultiFolderWorkspace(workspaceIdentifier: IWorkspaceIdentifier): Promise<Workspace> {\n\t\treturn this.workspaceConfiguration.load({ id: workspaceIdentifier.id, configPath: workspaceIdentifier.configPath })\n\t\t\t.then(() => {\n\t\t\t\tconst workspaceConfigPath = workspaceIdentifier.configPath;\n\t\t\t\tconst workspaceFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), dirname(workspaceConfigPath));\n\t\t\t\tconst workspaceId = workspaceIdentifier.id;\n\t\t\t\tconst workspace = new Workspace(workspaceId, workspaceFolders, workspaceConfigPath);\n\t\t\t\tif (workspace.configuration!.scheme === Schemas.file) {\n\t\t\t\t\tthis.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is from disk.\n\t\t\t\t}\n\t\t\t\treturn workspace;\n\t\t\t});\n\t}\n\n\tprivate createSingleFolderWorkspace(singleFolder: ISingleFolderWorkspaceInitializationPayload): Promise<Workspace> {\n\t\tconst folder = singleFolder.folder;\n\n\t\tlet configuredFolders: IStoredWorkspaceFolder[];\n\t\tif (folder.scheme === 'file') {\n\t\t\tconfiguredFolders = [{ path: folder.fsPath }];\n\t\t} else {\n\t\t\tconfiguredFolders = [{ uri: folder.toString() }];\n\t\t}\n\n\t\tconst workspace = new Workspace(singleFolder.id, toWorkspaceFolders(configuredFolders));\n\t\tthis.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is single folder.\n\t\treturn Promise.resolve(workspace);\n\t}\n\n\tprivate createEmptyWorkspace(emptyWorkspace: IEmptyWorkspaceInitializationPayload): Promise<Workspace> {\n\t\tconst workspace = new Workspace(emptyWorkspace.id);\n\t\tthis.releaseWorkspaceBarrier(); // Release barrier as workspace is complete because it is an empty workspace.\n\t\treturn Promise.resolve(workspace);\n\t}\n\n\tprivate releaseWorkspaceBarrier(): void {\n\t\tif (!this.completeWorkspaceBarrier.isOpen()) {\n\t\t\tthis.completeWorkspaceBarrier.open();\n\t\t}\n\t}\n\n\tprivate updateWorkspaceAndInitializeConfiguration(workspace: Workspace, postInitialisationTask: () => void): Promise<void> {\n\t\tconst hasWorkspaceBefore = !!this.workspace;\n\t\tlet previousState: WorkbenchState;\n\t\tlet previousWorkspacePath: string | undefined;\n\t\tlet previousFolders: WorkspaceFolder[];\n\n\t\tif (hasWorkspaceBefore) {\n\t\t\tpreviousState = this.getWorkbenchState();\n\t\t\tpreviousWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n\t\t\tpreviousFolders = this.workspace.folders;\n\t\t\tthis.workspace.update(workspace);\n\t\t} else {\n\t\t\tthis.workspace = workspace;\n\t\t}\n\n\t\treturn this.initializeConfiguration().then(() => {\n\n\t\t\tpostInitialisationTask(); // Post initialisation task should be run before triggering events.\n\n\t\t\t// Trigger changes after configuration initialization so that configuration is up to date.\n\t\t\tif (hasWorkspaceBefore) {\n\t\t\t\tconst newState = this.getWorkbenchState();\n\t\t\t\tif (previousState && newState !== previousState) {\n\t\t\t\t\tthis._onDidChangeWorkbenchState.fire(newState);\n\t\t\t\t}\n\n\t\t\t\tconst newWorkspacePath = this.workspace.configuration ? this.workspace.configuration.fsPath : undefined;\n\t\t\t\tif (previousWorkspacePath && newWorkspacePath !== previousWorkspacePath || newState !== previousState) {\n\t\t\t\t\tthis._onDidChangeWorkspaceName.fire();\n\t\t\t\t}\n\n\t\t\t\tconst folderChanges = this.compareFolders(previousFolders, this.workspace.folders);\n\t\t\t\tif (folderChanges && (folderChanges.added.length || folderChanges.removed.length || folderChanges.changed.length)) {\n\t\t\t\t\tthis._onDidChangeWorkspaceFolders.fire(folderChanges);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate compareFolders(currentFolders: IWorkspaceFolder[], newFolders: IWorkspaceFolder[]): IWorkspaceFoldersChangeEvent {\n\t\tconst result = { added: [], removed: [], changed: [] } as IWorkspaceFoldersChangeEvent;\n\t\tresult.added = newFolders.filter(newFolder => !currentFolders.some(currentFolder => newFolder.uri.toString() === currentFolder.uri.toString()));\n\t\tfor (let currentIndex = 0; currentIndex < currentFolders.length; currentIndex++) {\n\t\t\tlet currentFolder = currentFolders[currentIndex];\n\t\t\tlet newIndex = 0;\n\t\t\tfor (newIndex = 0; newIndex < newFolders.length && currentFolder.uri.toString() !== newFolders[newIndex].uri.toString(); newIndex++) { }\n\t\t\tif (newIndex < newFolders.length) {\n\t\t\t\tif (currentIndex !== newIndex || currentFolder.name !== newFolders[newIndex].name) {\n\t\t\t\t\tresult.changed.push(currentFolder);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.removed.push(currentFolder);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate initializeConfiguration(): Promise<void> {\n\t\tthis.registerConfigurationSchemas();\n\t\treturn this.initializeUserConfiguration()\n\t\t\t.then(({ local, remote }) => this.loadConfiguration(local, remote));\n\t}\n\n\tprivate initializeUserConfiguration(): Promise<{ local: ConfigurationModel, remote: ConfigurationModel }> {\n\t\treturn Promise.all([this.localUserConfiguration.initialize(), this.remoteUserConfiguration ? this.remoteUserConfiguration.initialize() : Promise.resolve(new ConfigurationModel())])\n\t\t\t.then(([local, remote]) => ({ local, remote }));\n\t}\n\n\tprivate reloadUserConfiguration(key?: string): Promise<{ local: ConfigurationModel, remote: ConfigurationModel }> {\n\t\treturn Promise.all([this.localUserConfiguration.reload(), this.remoteUserConfiguration ? this.remoteUserConfiguration.reload() : Promise.resolve(new ConfigurationModel())])\n\t\t\t.then(([local, remote]) => ({ local, remote }));\n\t}\n\n\tprivate reloadWorkspaceConfiguration(key?: string): Promise<void> {\n\t\tconst workbenchState = this.getWorkbenchState();\n\t\tif (workbenchState === WorkbenchState.FOLDER) {\n\t\t\treturn this.onWorkspaceFolderConfigurationChanged(this.workspace.folders[0], key);\n\t\t}\n\t\tif (workbenchState === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.workspaceConfiguration.reload().then(() => this.onWorkspaceConfigurationChanged());\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate reloadWorkspaceFolderConfiguration(folder: IWorkspaceFolder, key?: string): Promise<void> {\n\t\treturn this.onWorkspaceFolderConfigurationChanged(folder, key);\n\t}\n\n\tprivate loadConfiguration(userConfigurationModel: ConfigurationModel, remoteUserConfigurationModel: ConfigurationModel): Promise<void> {\n\t\t// reset caches\n\t\tthis.cachedFolderConfigs = new ResourceMap<FolderConfiguration>();\n\n\t\tconst folders = this.workspace.folders;\n\t\treturn this.loadFolderConfigurations(folders)\n\t\t\t.then((folderConfigurations) => {\n\n\t\t\t\tlet workspaceConfiguration = this.getWorkspaceConfigurationModel(folderConfigurations);\n\t\t\t\tconst folderConfigurationModels = new ResourceMap<ConfigurationModel>();\n\t\t\t\tfolderConfigurations.forEach((folderConfiguration, index) => folderConfigurationModels.set(folders[index].uri, folderConfiguration));\n\n\t\t\t\tconst currentConfiguration = this._configuration;\n\t\t\t\tthis._configuration = new Configuration(this.defaultConfiguration, userConfigurationModel, remoteUserConfigurationModel, workspaceConfiguration, folderConfigurationModels, new ConfigurationModel(), new ResourceMap<ConfigurationModel>(), this.workspace);\n\n\t\t\t\tif (currentConfiguration) {\n\t\t\t\t\tconst changedKeys = this._configuration.compare(currentConfiguration);\n\t\t\t\t\tthis.triggerConfigurationChange(new ConfigurationChangeEvent().change(changedKeys), ConfigurationTarget.WORKSPACE);\n\t\t\t\t} else {\n\t\t\t\t\tthis._onDidChangeConfiguration.fire(new AllKeysConfigurationChangeEvent(this._configuration, ConfigurationTarget.WORKSPACE, this.getTargetConfiguration(ConfigurationTarget.WORKSPACE)));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate getWorkspaceConfigurationModel(folderConfigurations: ConfigurationModel[]): ConfigurationModel {\n\t\tswitch (this.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\treturn folderConfigurations[0];\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\treturn this.workspaceConfiguration.getConfiguration();\n\t\t\tdefault:\n\t\t\t\treturn new ConfigurationModel();\n\t\t}\n\t}\n\n\tprivate onDefaultConfigurationChanged(keys: string[]): void {\n\t\tthis.defaultConfiguration = new DefaultConfigurationModel();\n\t\tthis.registerConfigurationSchemas();\n\t\tif (this.workspace && this._configuration) {\n\t\t\tthis._configuration.updateDefaultConfiguration(this.defaultConfiguration);\n\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(this.cachedFolderConfigs.get(this.workspace.folders[0].uri)!.reprocess());\n\t\t\t} else {\n\t\t\t\tthis._configuration.updateWorkspaceConfiguration(this.workspaceConfiguration.reprocessWorkspaceSettings());\n\t\t\t\tthis.workspace.folders.forEach(folder => this._configuration.updateFolderConfiguration(folder.uri, this.cachedFolderConfigs.get(folder.uri)!.reprocess()));\n\t\t\t}\n\t\t\tthis.triggerConfigurationChange(new ConfigurationChangeEvent().change(keys), ConfigurationTarget.DEFAULT);\n\t\t}\n\t}\n\n\tprivate registerConfigurationSchemas(): void {\n\t\tif (this.workspace) {\n\t\t\tconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\t\t\tconst convertToNotSuggestedProperties = (properties: IJSONSchemaMap, errorMessage: string): IJSONSchemaMap => {\n\t\t\t\treturn Object.keys(properties).reduce((result: IJSONSchemaMap, property) => {\n\t\t\t\t\tresult[property] = deepClone(properties[property]);\n\t\t\t\t\tresult[property].deprecationMessage = errorMessage;\n\t\t\t\t\treturn result;\n\t\t\t\t}, {});\n\t\t\t};\n\n\t\t\tconst allSettingsSchema: IJSONSchema = { properties: allSettings.properties, patternProperties: allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n\t\t\tconst unsupportedApplicationSettings = convertToNotSuggestedProperties(applicationSettings.properties, localize('unsupportedApplicationSetting', \"This setting can be applied only in User Settings\"));\n\t\t\tconst workspaceSettingsSchema: IJSONSchema = { properties: { ...unsupportedApplicationSettings, ...windowSettings.properties, ...resourceSettings.properties }, patternProperties: allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n\n\t\t\tjsonRegistry.registerSchema(defaultSettingsSchemaId, allSettingsSchema);\n\t\t\tjsonRegistry.registerSchema(userSettingsSchemaId, allSettingsSchema);\n\n\t\t\tif (WorkbenchState.WORKSPACE === this.getWorkbenchState()) {\n\t\t\t\tconst unsupportedWindowSettings = convertToNotSuggestedProperties(windowSettings.properties, localize('unsupportedWindowSetting', \"This setting cannot be applied now. It will be applied when you open this folder directly.\"));\n\t\t\t\tconst folderSettingsSchema: IJSONSchema = { properties: { ...unsupportedApplicationSettings, ...unsupportedWindowSettings, ...resourceSettings.properties }, patternProperties: allSettings.patternProperties, additionalProperties: false, errorMessage: 'Unknown configuration setting' };\n\t\t\t\tjsonRegistry.registerSchema(workspaceSettingsSchemaId, workspaceSettingsSchema);\n\t\t\t\tjsonRegistry.registerSchema(folderSettingsSchemaId, folderSettingsSchema);\n\t\t\t} else {\n\t\t\t\tjsonRegistry.registerSchema(workspaceSettingsSchemaId, workspaceSettingsSchema);\n\t\t\t\tjsonRegistry.registerSchema(folderSettingsSchemaId, workspaceSettingsSchema);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onLocalUserConfigurationChanged(userConfiguration: ConfigurationModel): void {\n\t\tconst keys = this._configuration.compareAndUpdateLocalUserConfiguration(userConfiguration);\n\t\tthis.triggerConfigurationChange(keys, ConfigurationTarget.USER);\n\t}\n\n\tprivate onRemoteUserConfigurationChanged(userConfiguration: ConfigurationModel): void {\n\t\tconst keys = this._configuration.compareAndUpdateRemoteUserConfiguration(userConfiguration);\n\t\tthis.triggerConfigurationChange(keys, ConfigurationTarget.USER);\n\t}\n\n\tprivate onWorkspaceConfigurationChanged(): Promise<void> {\n\t\tif (this.workspace && this.workspace.configuration && this._configuration) {\n\t\t\tconst workspaceConfigurationChangeEvent = this._configuration.compareAndUpdateWorkspaceConfiguration(this.workspaceConfiguration.getConfiguration());\n\t\t\tlet configuredFolders = toWorkspaceFolders(this.workspaceConfiguration.getFolders(), dirname(this.workspace.configuration));\n\t\t\tconst changes = this.compareFolders(this.workspace.folders, configuredFolders);\n\t\t\tif (changes.added.length || changes.removed.length || changes.changed.length) {\n\t\t\t\tthis.workspace.folders = configuredFolders;\n\t\t\t\treturn this.onFoldersChanged()\n\t\t\t\t\t.then(foldersConfigurationChangeEvent => {\n\t\t\t\t\t\tthis.triggerConfigurationChange(foldersConfigurationChangeEvent.change(workspaceConfigurationChangeEvent), ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t\t\t\t\tthis._onDidChangeWorkspaceFolders.fire(changes);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.triggerConfigurationChange(workspaceConfigurationChangeEvent, ConfigurationTarget.WORKSPACE);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate onWorkspaceFolderConfigurationChanged(folder: IWorkspaceFolder, key?: string): Promise<void> {\n\t\treturn this.loadFolderConfigurations([folder])\n\t\t\t.then(([folderConfiguration]) => {\n\t\t\t\tconst folderChangedKeys = this._configuration.compareAndUpdateFolderConfiguration(folder.uri, folderConfiguration);\n\t\t\t\tif (this.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t\tconst workspaceChangedKeys = this._configuration.compareAndUpdateWorkspaceConfiguration(folderConfiguration);\n\t\t\t\t\tthis.triggerConfigurationChange(workspaceChangedKeys, ConfigurationTarget.WORKSPACE);\n\t\t\t\t} else {\n\t\t\t\t\tthis.triggerConfigurationChange(folderChangedKeys, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate onFoldersChanged(): Promise<ConfigurationChangeEvent> {\n\t\tlet changeEvent = new ConfigurationChangeEvent();\n\n\t\t// Remove the configurations of deleted folders\n\t\tfor (const key of this.cachedFolderConfigs.keys()) {\n\t\t\tif (!this.workspace.folders.filter(folder => folder.uri.toString() === key.toString())[0]) {\n\t\t\t\tconst folderConfiguration = this.cachedFolderConfigs.get(key);\n\t\t\t\tfolderConfiguration!.dispose();\n\t\t\t\tthis.cachedFolderConfigs.delete(key);\n\t\t\t\tchangeEvent = changeEvent.change(this._configuration.compareAndDeleteFolderConfiguration(key));\n\t\t\t}\n\t\t}\n\n\t\tconst toInitialize = this.workspace.folders.filter(folder => !this.cachedFolderConfigs.has(folder.uri));\n\t\tif (toInitialize.length) {\n\t\t\treturn this.loadFolderConfigurations(toInitialize)\n\t\t\t\t.then(folderConfigurations => {\n\t\t\t\t\tfolderConfigurations.forEach((folderConfiguration, index) => {\n\t\t\t\t\t\tchangeEvent = changeEvent.change(this._configuration.compareAndUpdateFolderConfiguration(toInitialize[index].uri, folderConfiguration));\n\t\t\t\t\t});\n\t\t\t\t\treturn changeEvent;\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(changeEvent);\n\t}\n\n\tprivate loadFolderConfigurations(folders: IWorkspaceFolder[]): Promise<ConfigurationModel[]> {\n\t\treturn Promise.all([...folders.map(folder => {\n\t\t\tlet folderConfiguration = this.cachedFolderConfigs.get(folder.uri);\n\t\t\tif (!folderConfiguration) {\n\t\t\t\tfolderConfiguration = new FolderConfiguration(folder, this.workspaceSettingsRootFolder, this.getWorkbenchState(), this.environmentService, this.fileService);\n\t\t\t\tthis._register(folderConfiguration.onDidChange(() => this.onWorkspaceFolderConfigurationChanged(folder)));\n\t\t\t\tthis.cachedFolderConfigs.set(folder.uri, this._register(folderConfiguration));\n\t\t\t}\n\t\t\treturn folderConfiguration.loadConfiguration();\n\t\t})]);\n\t}\n\n\tprivate writeConfigurationValue(key: string, value: any, target: ConfigurationTarget, overrides: IConfigurationOverrides | undefined, donotNotifyError: boolean): Promise<void> {\n\t\tif (target === ConfigurationTarget.DEFAULT) {\n\t\t\treturn Promise.reject(new Error('Invalid configuration target'));\n\t\t}\n\n\t\tif (target === ConfigurationTarget.MEMORY) {\n\t\t\tthis._configuration.updateValue(key, value, overrides);\n\t\t\tthis.triggerConfigurationChange(new ConfigurationChangeEvent().change(overrides && overrides.overrideIdentifier ? [keyFromOverrideIdentifier(overrides.overrideIdentifier)] : [key], overrides && overrides.resource || undefined), target);\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn this.configurationEditingService.writeConfiguration(target, { key, value }, { scopes: overrides, donotNotifyError })\n\t\t\t.then(() => {\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\t\t\treturn this.reloadUserConfiguration()\n\t\t\t\t\t\t\t.then(({ local, remote }) => {\n\t\t\t\t\t\t\t\tthis.onLocalUserConfigurationChanged(local);\n\t\t\t\t\t\t\t\tif (this.remoteUserConfiguration) {\n\t\t\t\t\t\t\t\t\tthis.onRemoteUserConfigurationChanged(remote);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\t\t\treturn this.reloadWorkspaceConfiguration();\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\t\t\tconst workspaceFolder = overrides && overrides.resource ? this.workspace.getFolder(overrides.resource) : null;\n\t\t\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\t\t\treturn this.reloadWorkspaceFolderConfiguration(workspaceFolder, key);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t});\n\t}\n\n\tprivate deriveConfigurationTarget(key: string, value: any, overrides: IConfigurationOverrides | undefined, target: ConfigurationTarget): ConfigurationTarget | undefined {\n\t\tif (target) {\n\t\t\treturn target;\n\t\t}\n\n\t\tif (value === undefined) {\n\t\t\t// Ignore. But expected is to remove the value from all targets\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst inspect = this.inspect(key, overrides);\n\t\tif (equals(value, inspect.value)) {\n\t\t\t// No change. So ignore.\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (inspect.workspaceFolder !== undefined) {\n\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t}\n\n\t\tif (inspect.workspace !== undefined) {\n\t\t\treturn ConfigurationTarget.WORKSPACE;\n\t\t}\n\n\t\treturn ConfigurationTarget.USER;\n\t}\n\n\tprivate triggerConfigurationChange(configurationEvent: ConfigurationChangeEvent, target: ConfigurationTarget): void {\n\t\tif (configurationEvent.affectedKeys.length) {\n\t\t\tconfigurationEvent.telemetryData(target, this.getTargetConfiguration(target));\n\t\t\tthis._onDidChangeConfiguration.fire(new WorkspaceConfigurationChangeEvent(configurationEvent, this.workspace));\n\t\t}\n\t}\n\n\tprivate getTargetConfiguration(target: ConfigurationTarget): any {\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.DEFAULT:\n\t\t\t\treturn this._configuration.defaults.contents;\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\t\treturn this._configuration.userConfiguration.contents;\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this._configuration.workspaceConfiguration.contents;\n\t\t}\n\t\treturn {};\n\t}\n}\n\ninterface IExportedConfigurationNode {\n\tname: string;\n\tdescription: string;\n\tdefault: any;\n\ttype?: string | string[];\n\tenum?: any[];\n\tenumDescriptions?: string[];\n}\n\ninterface IConfigurationExport {\n\tsettings: IExportedConfigurationNode[];\n\tbuildTime: number;\n\tcommit?: string;\n\tbuildNumber?: number;\n}\n\nexport class DefaultConfigurationExportHelper {\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ICommandService private readonly commandService: ICommandService) {\n\t\tif (environmentService.args['export-default-configuration']) {\n\t\t\tthis.writeConfigModelAndQuit(environmentService.args['export-default-configuration']);\n\t\t}\n\t}\n\n\tprivate writeConfigModelAndQuit(targetPath: string): Promise<void> {\n\t\treturn Promise.resolve(this.extensionService.whenInstalledExtensionsRegistered())\n\t\t\t.then(() => this.writeConfigModel(targetPath))\n\t\t\t.then(() => this.commandService.executeCommand('workbench.action.quit'))\n\t\t\t.then(() => { });\n\t}\n\n\tprivate writeConfigModel(targetPath: string): Promise<void> {\n\t\tconst config = this.getConfigModel();\n\n\t\tconst resultString = JSON.stringify(config, undefined, '  ');\n\t\treturn writeFile(targetPath, resultString);\n\t}\n\n\tprivate getConfigModel(): IConfigurationExport {\n\t\tconst configRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconst configurations = configRegistry.getConfigurations().slice();\n\t\tconst settings: IExportedConfigurationNode[] = [];\n\n\t\tconst processProperty = (name: string, prop: IConfigurationPropertySchema) => {\n\t\t\tconst propDetails: IExportedConfigurationNode = {\n\t\t\t\tname,\n\t\t\t\tdescription: prop.description || prop.markdownDescription || '',\n\t\t\t\tdefault: prop.default,\n\t\t\t\ttype: prop.type\n\t\t\t};\n\n\t\t\tif (prop.enum) {\n\t\t\t\tpropDetails.enum = prop.enum;\n\t\t\t}\n\n\t\t\tif (prop.enumDescriptions || prop.markdownEnumDescriptions) {\n\t\t\t\tpropDetails.enumDescriptions = prop.enumDescriptions || prop.markdownEnumDescriptions;\n\t\t\t}\n\n\t\t\tsettings.push(propDetails);\n\t\t};\n\n\t\tconst processConfig = (config: IConfigurationNode) => {\n\t\t\tif (config.properties) {\n\t\t\t\tfor (let name in config.properties) {\n\t\t\t\t\tprocessProperty(name, config.properties[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.allOf) {\n\t\t\t\tconfig.allOf.forEach(processConfig);\n\t\t\t}\n\t\t};\n\n\t\tconfigurations.forEach(processConfig);\n\n\t\tconst excludedProps = configRegistry.getExcludedConfigurationProperties();\n\t\tfor (let name in excludedProps) {\n\t\t\tprocessProperty(name, excludedProps[name]);\n\t\t}\n\n\t\tconst result: IConfigurationExport = {\n\t\t\tsettings: settings.sort((a, b) => a.name.localeCompare(b.name)),\n\t\t\tbuildTime: Date.now(),\n\t\t\tcommit: product.commit,\n\t\t\tbuildNumber: product.settingsSearchBuildId\n\t\t};\n\n\t\treturn result;\n\t}\n}\n"]}]}