{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markersFilterOptions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markersFilterOptions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar messages_1 = require(\"vs/workbench/contrib/markers/browser/messages\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar glob_1 = require(\"vs/base/common/glob\");\nvar strings = require(\"vs/base/common/strings\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar FilterOptions = /** @class */ (function () {\n    function FilterOptions(filter, filesExclude) {\n        if (filter === void 0) { filter = ''; }\n        if (filesExclude === void 0) { filesExclude = []; }\n        this.filter = filter;\n        this.filterErrors = false;\n        this.filterWarnings = false;\n        this.filterInfos = false;\n        this.textFilter = '';\n        filter = filter.trim();\n        var filesExcludeByRoot = Array.isArray(filesExclude) ? filesExclude : [];\n        var excludesExpression = Array.isArray(filesExclude) ? glob_1.getEmptyExpression() : filesExclude;\n        var includeExpression = glob_1.getEmptyExpression();\n        if (filter) {\n            var filters = glob_1.splitGlobAware(filter, ',').map(function (s) { return s.trim(); }).filter(function (s) { return !!s.length; });\n            for (var _i = 0, filters_2 = filters; _i < filters_2.length; _i++) {\n                var f = filters_2[_i];\n                this.filterErrors = this.filterErrors || this.matches(f, messages_1.default.MARKERS_PANEL_FILTER_ERRORS);\n                this.filterWarnings = this.filterWarnings || this.matches(f, messages_1.default.MARKERS_PANEL_FILTER_WARNINGS);\n                this.filterInfos = this.filterInfos || this.matches(f, messages_1.default.MARKERS_PANEL_FILTER_INFOS);\n                if (strings.startsWith(f, '!')) {\n                    this.setPattern(excludesExpression, strings.ltrim(f, '!'));\n                }\n                else {\n                    this.setPattern(includeExpression, f);\n                    this.textFilter += \" \" + f;\n                }\n            }\n        }\n        this.excludesMatcher = new resources_1.ResourceGlobMatcher(excludesExpression, filesExcludeByRoot);\n        this.includesMatcher = new resources_1.ResourceGlobMatcher(includeExpression, []);\n        this.textFilter = this.textFilter.trim();\n    }\n    FilterOptions.prototype.setPattern = function (expression, pattern) {\n        if (pattern[0] === '.') {\n            pattern = '*' + pattern; // convert \".js\" to \"*.js\"\n        }\n        expression[\"**/\" + pattern + \"/**\"] = true;\n        expression[\"**/\" + pattern] = true;\n    };\n    FilterOptions.prototype.matches = function (prefix, word) {\n        var result = filters_1.matchesPrefix(prefix, word);\n        return !!(result && result.length > 0);\n    };\n    FilterOptions._filter = filters_1.matchesFuzzy2;\n    FilterOptions._messageFilter = filters_1.matchesFuzzy;\n    return FilterOptions;\n}());\nexports.FilterOptions = FilterOptions;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markersFilterOptions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/markers/browser/markersFilterOptions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Messages from 'vs/workbench/contrib/markers/browser/messages';\nimport { IFilter, matchesPrefix, matchesFuzzy, matchesFuzzy2 } from 'vs/base/common/filters';\nimport { IExpression, splitGlobAware, getEmptyExpression } from 'vs/base/common/glob';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ResourceGlobMatcher } from 'vs/base/common/resources';\n\nexport class FilterOptions {\n\n\tstatic readonly _filter: IFilter = matchesFuzzy2;\n\tstatic readonly _messageFilter: IFilter = matchesFuzzy;\n\n\treadonly filterErrors: boolean = false;\n\treadonly filterWarnings: boolean = false;\n\treadonly filterInfos: boolean = false;\n\treadonly textFilter: string = '';\n\treadonly excludesMatcher: ResourceGlobMatcher;\n\treadonly includesMatcher: ResourceGlobMatcher;\n\n\tconstructor(readonly filter: string = '', filesExclude: { root: URI, expression: IExpression }[] | IExpression = []) {\n\t\tfilter = filter.trim();\n\n\t\tconst filesExcludeByRoot = Array.isArray(filesExclude) ? filesExclude : [];\n\t\tconst excludesExpression: IExpression = Array.isArray(filesExclude) ? getEmptyExpression() : filesExclude;\n\n\t\tconst includeExpression: IExpression = getEmptyExpression();\n\t\tif (filter) {\n\t\t\tconst filters = splitGlobAware(filter, ',').map(s => s.trim()).filter(s => !!s.length);\n\t\t\tfor (const f of filters) {\n\t\t\t\tthis.filterErrors = this.filterErrors || this.matches(f, Messages.MARKERS_PANEL_FILTER_ERRORS);\n\t\t\t\tthis.filterWarnings = this.filterWarnings || this.matches(f, Messages.MARKERS_PANEL_FILTER_WARNINGS);\n\t\t\t\tthis.filterInfos = this.filterInfos || this.matches(f, Messages.MARKERS_PANEL_FILTER_INFOS);\n\t\t\t\tif (strings.startsWith(f, '!')) {\n\t\t\t\t\tthis.setPattern(excludesExpression, strings.ltrim(f, '!'));\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPattern(includeExpression, f);\n\t\t\t\t\tthis.textFilter += ` ${f}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.excludesMatcher = new ResourceGlobMatcher(excludesExpression, filesExcludeByRoot);\n\t\tthis.includesMatcher = new ResourceGlobMatcher(includeExpression, []);\n\t\tthis.textFilter = this.textFilter.trim();\n\t}\n\n\tprivate setPattern(expression: IExpression, pattern: string) {\n\t\tif (pattern[0] === '.') {\n\t\t\tpattern = '*' + pattern; // convert \".js\" to \"*.js\"\n\t\t}\n\t\texpression[`**/${pattern}/**`] = true;\n\t\texpression[`**/${pattern}`] = true;\n\t}\n\n\tprivate matches(prefix: string, word: string): boolean {\n\t\tconst result = matchesPrefix(prefix, word);\n\t\treturn !!(result && result.length > 0);\n\t}\n}\n"]}]}