{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/progress/common/progress.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/cancellation\", \"vs/base/common/lifecycle\"], function (require, exports, instantiation_1, cancellation_1, lifecycle_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IProgressService = instantiation_1.createDecorator('progressService');\n    var ProgressLocation;\n    (function (ProgressLocation) {\n        ProgressLocation[ProgressLocation[\"Explorer\"] = 1] = \"Explorer\";\n        ProgressLocation[ProgressLocation[\"Scm\"] = 3] = \"Scm\";\n        ProgressLocation[ProgressLocation[\"Extensions\"] = 5] = \"Extensions\";\n        ProgressLocation[ProgressLocation[\"Window\"] = 10] = \"Window\";\n        ProgressLocation[ProgressLocation[\"Notification\"] = 15] = \"Notification\";\n    })(ProgressLocation = exports.ProgressLocation || (exports.ProgressLocation = {}));\n    exports.IProgressService2 = instantiation_1.createDecorator('progressService2');\n    exports.emptyProgressRunner = Object.freeze({\n        total() { },\n        worked() { },\n        done() { }\n    });\n    exports.emptyProgress = Object.freeze({ report() { } });\n    class Progress {\n        constructor(callback) {\n            this._callback = callback;\n        }\n        get value() {\n            return this._value;\n        }\n        report(item) {\n            this._value = item;\n            this._callback(this._value);\n        }\n    }\n    exports.Progress = Progress;\n    class LongRunningOperation {\n        constructor(progressService) {\n            this.progressService = progressService;\n            this.currentOperationId = 0;\n            this.currentOperationDisposables = [];\n        }\n        start(progressDelay) {\n            // Stop any previous operation\n            this.stop();\n            // Start new\n            const newOperationId = ++this.currentOperationId;\n            const newOperationToken = new cancellation_1.CancellationTokenSource();\n            this.currentProgressTimeout = setTimeout(() => {\n                if (newOperationId === this.currentOperationId) {\n                    this.currentProgressRunner = this.progressService.show(true);\n                }\n            }, progressDelay);\n            this.currentOperationDisposables.push(lifecycle_1.toDisposable(() => clearTimeout(this.currentProgressTimeout)), lifecycle_1.toDisposable(() => newOperationToken.cancel()), lifecycle_1.toDisposable(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));\n            return {\n                id: newOperationId,\n                token: newOperationToken.token,\n                stop: () => this.doStop(newOperationId),\n                isCurrent: () => this.currentOperationId === newOperationId\n            };\n        }\n        stop() {\n            this.doStop(this.currentOperationId);\n        }\n        doStop(operationId) {\n            if (this.currentOperationId === operationId) {\n                this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);\n            }\n        }\n        dispose() {\n            this.currentOperationDisposables = lifecycle_1.dispose(this.currentOperationDisposables);\n        }\n    }\n    exports.LongRunningOperation = LongRunningOperation;\n});\n",null]}