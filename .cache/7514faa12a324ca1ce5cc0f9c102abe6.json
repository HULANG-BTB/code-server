{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/languageSurveys.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/languageSurveys.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar LanguageSurvey = /** @class */ (function () {\n    function LanguageSurvey(data, storageService, notificationService, telemetryService, modelService, textFileService) {\n        var SESSION_COUNT_KEY = data.surveyId + \".sessionCount\";\n        var LAST_SESSION_DATE_KEY = data.surveyId + \".lastSessionDate\";\n        var SKIP_VERSION_KEY = data.surveyId + \".skipVersion\";\n        var IS_CANDIDATE_KEY = data.surveyId + \".isCandidate\";\n        var EDITED_LANGUAGE_COUNT_KEY = data.surveyId + \".editedCount\";\n        var EDITED_LANGUAGE_DATE_KEY = data.surveyId + \".editedDate\";\n        var skipVersion = storageService.get(SKIP_VERSION_KEY, storage_1.StorageScope.GLOBAL, '');\n        if (skipVersion) {\n            return;\n        }\n        var date = new Date().toDateString();\n        if (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, storage_1.StorageScope.GLOBAL, 0) < data.editCount) {\n            textFileService.models.onModelsSaved(function (e) {\n                e.forEach(function (event) {\n                    if (event.kind === textfiles_1.StateChange.SAVED) {\n                        var model = modelService.getModel(event.resource);\n                        if (model && model.getModeId() === data.languageId && date !== storageService.get(EDITED_LANGUAGE_DATE_KEY, storage_1.StorageScope.GLOBAL)) {\n                            var editedCount = storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, storage_1.StorageScope.GLOBAL, 0) + 1;\n                            storageService.store(EDITED_LANGUAGE_COUNT_KEY, editedCount, storage_1.StorageScope.GLOBAL);\n                            storageService.store(EDITED_LANGUAGE_DATE_KEY, date, storage_1.StorageScope.GLOBAL);\n                        }\n                    }\n                });\n            });\n        }\n        var lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, storage_1.StorageScope.GLOBAL, new Date(0).toDateString());\n        if (date === lastSessionDate) {\n            return;\n        }\n        var sessionCount = storageService.getNumber(SESSION_COUNT_KEY, storage_1.StorageScope.GLOBAL, 0) + 1;\n        storageService.store(LAST_SESSION_DATE_KEY, date, storage_1.StorageScope.GLOBAL);\n        storageService.store(SESSION_COUNT_KEY, sessionCount, storage_1.StorageScope.GLOBAL);\n        if (sessionCount < 9) {\n            return;\n        }\n        if (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, storage_1.StorageScope.GLOBAL, 0) < data.editCount) {\n            return;\n        }\n        var isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, storage_1.StorageScope.GLOBAL, false)\n            || Math.random() < data.userProbability;\n        storageService.store(IS_CANDIDATE_KEY, isCandidate, storage_1.StorageScope.GLOBAL);\n        if (!isCandidate) {\n            storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n            return;\n        }\n        // __GDPR__TODO__ Need to move away from dynamic event names as those cannot be registered statically\n        telemetryService.publicLog(data.surveyId + \".survey/userAsked\");\n        notificationService.prompt(notification_1.Severity.Info, nls.localize('helpUs', \"Help us improve our support for {0}\", data.languageId), [{\n                label: nls.localize('takeShortSurvey', \"Take Short Survey\"),\n                run: function () {\n                    telemetryService.publicLog(data.surveyId + \".survey/takeShortSurvey\");\n                    telemetryService.getTelemetryInfo().then(function (info) {\n                        window.open(data.surveyUrl + \"?o=\" + encodeURIComponent(process.platform) + \"&v=\" + encodeURIComponent(package_1.default.version) + \"&m=\" + encodeURIComponent(info.machineId));\n                        storageService.store(IS_CANDIDATE_KEY, false, storage_1.StorageScope.GLOBAL);\n                        storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n                    });\n                }\n            }, {\n                label: nls.localize('remindLater', \"Remind Me later\"),\n                run: function () {\n                    telemetryService.publicLog(data.surveyId + \".survey/remindMeLater\");\n                    storageService.store(SESSION_COUNT_KEY, sessionCount - 3, storage_1.StorageScope.GLOBAL);\n                }\n            }, {\n                label: nls.localize('neverAgain', \"Don't Show Again\"),\n                isSecondary: true,\n                run: function () {\n                    telemetryService.publicLog(data.surveyId + \".survey/dontShowAgain\");\n                    storageService.store(IS_CANDIDATE_KEY, false, storage_1.StorageScope.GLOBAL);\n                    storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n                }\n            }], { sticky: true });\n    }\n    return LanguageSurvey;\n}());\nvar LanguageSurveysContribution = /** @class */ (function () {\n    function LanguageSurveysContribution(storageService, notificationService, telemetryService, modelService, textFileService) {\n        product_1.default.surveys\n            .filter(function (surveyData) { return surveyData.surveyId && surveyData.editCount && surveyData.languageId && surveyData.surveyUrl && surveyData.userProbability; })\n            .map(function (surveyData) { return new LanguageSurvey(surveyData, storageService, notificationService, telemetryService, modelService, textFileService); });\n    }\n    LanguageSurveysContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService),\n        tslib_1.__param(3, modelService_1.IModelService),\n        tslib_1.__param(4, textfiles_1.ITextFileService)\n    ], LanguageSurveysContribution);\n    return LanguageSurveysContribution;\n}());\nif (platform_1.language === 'en' && product_1.default.surveys && product_1.default.surveys.length) {\n    var workbenchRegistry = platform_2.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchRegistry.registerWorkbenchContribution(LanguageSurveysContribution, lifecycle_1.LifecyclePhase.Restored);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/languageSurveys.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/languageSurveys.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport pkg from 'vs/platform/product/node/package';\nimport product, { ISurveyData } from 'vs/platform/product/node/product';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITextFileService, StateChange } from 'vs/workbench/services/textfile/common/textfiles';\n\nclass LanguageSurvey {\n\n\tconstructor(\n\t\tdata: ISurveyData,\n\t\tstorageService: IStorageService,\n\t\tnotificationService: INotificationService,\n\t\ttelemetryService: ITelemetryService,\n\t\tmodelService: IModelService,\n\t\ttextFileService: ITextFileService\n\t) {\n\t\tconst SESSION_COUNT_KEY = `${data.surveyId}.sessionCount`;\n\t\tconst LAST_SESSION_DATE_KEY = `${data.surveyId}.lastSessionDate`;\n\t\tconst SKIP_VERSION_KEY = `${data.surveyId}.skipVersion`;\n\t\tconst IS_CANDIDATE_KEY = `${data.surveyId}.isCandidate`;\n\t\tconst EDITED_LANGUAGE_COUNT_KEY = `${data.surveyId}.editedCount`;\n\t\tconst EDITED_LANGUAGE_DATE_KEY = `${data.surveyId}.editedDate`;\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.GLOBAL, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) < data.editCount) {\n\t\t\ttextFileService.models.onModelsSaved(e => {\n\t\t\t\te.forEach(event => {\n\t\t\t\t\tif (event.kind === StateChange.SAVED) {\n\t\t\t\t\t\tconst model = modelService.getModel(event.resource);\n\t\t\t\t\t\tif (model && model.getModeId() === data.languageId && date !== storageService.get(EDITED_LANGUAGE_DATE_KEY, StorageScope.GLOBAL)) {\n\t\t\t\t\t\t\tconst editedCount = storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) + 1;\n\t\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_COUNT_KEY, editedCount, StorageScope.GLOBAL);\n\t\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_DATE_KEY, date, StorageScope.GLOBAL);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.GLOBAL, new Date(0).toDateString());\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = storageService.getNumber(SESSION_COUNT_KEY, StorageScope.GLOBAL, 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.GLOBAL);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.GLOBAL);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.GLOBAL, 0) < data.editCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.GLOBAL, false)\n\t\t\t|| Math.random() < data.userProbability;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.GLOBAL);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\treturn;\n\t\t}\n\n\t\t// __GDPR__TODO__ Need to move away from dynamic event names as those cannot be registered statically\n\t\ttelemetryService.publicLog(`${data.surveyId}.survey/userAsked`);\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('helpUs', \"Help us improve our support for {0}\", data.languageId),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('takeShortSurvey', \"Take Short Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/takeShortSurvey`);\n\t\t\t\t\ttelemetryService.getTelemetryInfo().then(info => {\n\t\t\t\t\t\twindow.open(`${data.surveyUrl}?o=${encodeURIComponent(process.platform)}&v=${encodeURIComponent(pkg.version)}&m=${encodeURIComponent(info.machineId)}`);\n\t\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL);\n\t\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('remindLater', \"Remind Me later\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/remindMeLater`);\n\t\t\t\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.GLOBAL);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/dontShowAgain`);\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nclass LanguageSurveysContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IModelService modelService: IModelService,\n\t\t@ITextFileService textFileService: ITextFileService\n\t) {\n\t\tproduct.surveys\n\t\t\t.filter(surveyData => surveyData.surveyId && surveyData.editCount && surveyData.languageId && surveyData.surveyUrl && surveyData.userProbability)\n\t\t\t.map(surveyData => new LanguageSurvey(surveyData, storageService, notificationService, telemetryService, modelService, textFileService));\n\t}\n}\n\nif (language === 'en' && product.surveys && product.surveys.length) {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(LanguageSurveysContribution, LifecyclePhase.Restored);\n}\n"]}]}