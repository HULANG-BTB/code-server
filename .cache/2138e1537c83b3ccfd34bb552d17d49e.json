{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar KeybindingWeight;\n(function (KeybindingWeight) {\n    KeybindingWeight[KeybindingWeight[\"EditorCore\"] = 0] = \"EditorCore\";\n    KeybindingWeight[KeybindingWeight[\"EditorContrib\"] = 100] = \"EditorContrib\";\n    KeybindingWeight[KeybindingWeight[\"WorkbenchContrib\"] = 200] = \"WorkbenchContrib\";\n    KeybindingWeight[KeybindingWeight[\"BuiltinExtension\"] = 300] = \"BuiltinExtension\";\n    KeybindingWeight[KeybindingWeight[\"ExternalExtension\"] = 400] = \"ExternalExtension\";\n})(KeybindingWeight = exports.KeybindingWeight || (exports.KeybindingWeight = {}));\nvar KeybindingsRegistryImpl = /** @class */ (function () {\n    function KeybindingsRegistryImpl() {\n        this._coreKeybindings = [];\n        this._extensionKeybindings = [];\n        this._cachedMergedKeybindings = null;\n    }\n    /**\n     * Take current platform into account and reduce to primary & secondary.\n     */\n    KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\n        if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n            if (kb && kb.win) {\n                return kb.win;\n            }\n        }\n        else if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n            if (kb && kb.mac) {\n                return kb.mac;\n            }\n        }\n        else {\n            if (kb && kb.linux) {\n                return kb.linux;\n            }\n        }\n        return kb;\n    };\n    /**\n     * Take current platform into account and reduce to primary & secondary.\n     */\n    KeybindingsRegistryImpl.bindToCurrentPlatform2 = function (kb) {\n        if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n            if (kb && kb.win) {\n                return kb.win;\n            }\n        }\n        else if (platform_1.OS === platform_1.OperatingSystem.Macintosh) {\n            if (kb && kb.mac) {\n                return kb.mac;\n            }\n        }\n        else {\n            if (kb && kb.linux) {\n                return kb.linux;\n            }\n        }\n        return kb;\n    };\n    KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\n        var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n        if (actualKb && actualKb.primary) {\n            var kk = keyCodes_1.createKeybinding(actualKb.primary, platform_1.OS);\n            if (kk) {\n                this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, 0, rule.when);\n            }\n        }\n        if (actualKb && Array.isArray(actualKb.secondary)) {\n            for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\n                var k = actualKb.secondary[i];\n                var kk = keyCodes_1.createKeybinding(k, platform_1.OS);\n                if (kk) {\n                    this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, -i - 1, rule.when);\n                }\n            }\n        }\n    };\n    KeybindingsRegistryImpl.prototype.setExtensionKeybindings = function (rules) {\n        var result = [], keybindingsLen = 0;\n        for (var i = 0, len = rules.length; i < len; i++) {\n            var rule = rules[i];\n            var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform2(rule);\n            if (actualKb && actualKb.primary) {\n                result[keybindingsLen++] = {\n                    keybinding: actualKb.primary,\n                    command: rule.id,\n                    commandArgs: rule.args,\n                    when: rule.when,\n                    weight1: rule.weight,\n                    weight2: 0\n                };\n            }\n        }\n        this._extensionKeybindings = result;\n        this._cachedMergedKeybindings = null;\n    };\n    KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\n        this.registerKeybindingRule(desc);\n        commands_1.CommandsRegistry.registerCommand(desc);\n    };\n    KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\n        if (keyCode >= keyCodes_1.KeyCode.KEY_0 && keyCode <= keyCodes_1.KeyCode.KEY_9) {\n            return true;\n        }\n        if (keyCode >= keyCodes_1.KeyCode.KEY_A && keyCode <= keyCodes_1.KeyCode.KEY_Z) {\n            return true;\n        }\n        return (keyCode === keyCodes_1.KeyCode.US_SEMICOLON\n            || keyCode === keyCodes_1.KeyCode.US_EQUAL\n            || keyCode === keyCodes_1.KeyCode.US_COMMA\n            || keyCode === keyCodes_1.KeyCode.US_MINUS\n            || keyCode === keyCodes_1.KeyCode.US_DOT\n            || keyCode === keyCodes_1.KeyCode.US_SLASH\n            || keyCode === keyCodes_1.KeyCode.US_BACKTICK\n            || keyCode === keyCodes_1.KeyCode.ABNT_C1\n            || keyCode === keyCodes_1.KeyCode.ABNT_C2\n            || keyCode === keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET\n            || keyCode === keyCodes_1.KeyCode.US_BACKSLASH\n            || keyCode === keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET\n            || keyCode === keyCodes_1.KeyCode.US_QUOTE\n            || keyCode === keyCodes_1.KeyCode.OEM_8\n            || keyCode === keyCodes_1.KeyCode.OEM_102);\n    };\n    KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\n        if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n            if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n                console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n            }\n        }\n    };\n    KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\n        if (platform_1.OS === platform_1.OperatingSystem.Windows) {\n            this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n        }\n        this._coreKeybindings.push({\n            keybinding: keybinding,\n            command: commandId,\n            commandArgs: commandArgs,\n            when: when,\n            weight1: weight1,\n            weight2: weight2\n        });\n        this._cachedMergedKeybindings = null;\n    };\n    KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\n        if (!this._cachedMergedKeybindings) {\n            this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n            this._cachedMergedKeybindings.sort(sorter);\n        }\n        return this._cachedMergedKeybindings.slice(0);\n    };\n    return KeybindingsRegistryImpl;\n}());\nexports.KeybindingsRegistry = new KeybindingsRegistryImpl();\n// Define extension point ids\nexports.Extensions = {\n    EditorModes: 'platform.keybindingsRegistry'\n};\nplatform_2.Registry.add(exports.Extensions.EditorModes, exports.KeybindingsRegistry);\nfunction sorter(a, b) {\n    if (a.weight1 !== b.weight1) {\n        return a.weight1 - b.weight1;\n    }\n    if (a.command < b.command) {\n        return -1;\n    }\n    if (a.command > b.command) {\n        return 1;\n    }\n    return a.weight2 - b.weight2;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybindingsRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, Keybinding, SimpleKeybinding, createKeybinding } from 'vs/base/common/keyCodes';\nimport { OS, OperatingSystem } from 'vs/base/common/platform';\nimport { CommandsRegistry, ICommandHandler, ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport interface IKeybindingItem {\n\tkeybinding: Keybinding;\n\tcommand: string;\n\tcommandArgs?: any;\n\twhen: ContextKeyExpr | null | undefined;\n\tweight1: number;\n\tweight2: number;\n}\n\nexport interface IKeybindings {\n\tprimary?: number;\n\tsecondary?: number[];\n\twin?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tlinux?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n\tmac?: {\n\t\tprimary: number;\n\t\tsecondary?: number[];\n\t};\n}\n\nexport interface IKeybindingRule extends IKeybindings {\n\tid: string;\n\tweight: number;\n\twhen: ContextKeyExpr | null | undefined;\n}\n\nexport interface IKeybindingRule2 {\n\tprimary: Keybinding | null;\n\twin?: { primary: Keybinding | null; } | null;\n\tlinux?: { primary: Keybinding | null; } | null;\n\tmac?: { primary: Keybinding | null; } | null;\n\tid: string;\n\targs?: any;\n\tweight: number;\n\twhen: ContextKeyExpr | undefined;\n}\n\nexport const enum KeybindingWeight {\n\tEditorCore = 0,\n\tEditorContrib = 100,\n\tWorkbenchContrib = 200,\n\tBuiltinExtension = 300,\n\tExternalExtension = 400\n}\n\nexport interface ICommandAndKeybindingRule extends IKeybindingRule {\n\thandler: ICommandHandler;\n\tdescription?: ICommandHandlerDescription | null;\n}\n\nexport interface IKeybindingsRegistry {\n\tregisterKeybindingRule(rule: IKeybindingRule): void;\n\tsetExtensionKeybindings(rules: IKeybindingRule2[]): void;\n\tregisterCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void;\n\tgetDefaultKeybindings(): IKeybindingItem[];\n}\n\nclass KeybindingsRegistryImpl implements IKeybindingsRegistry {\n\n\tprivate _coreKeybindings: IKeybindingItem[];\n\tprivate _extensionKeybindings: IKeybindingItem[];\n\tprivate _cachedMergedKeybindings: IKeybindingItem[] | null;\n\n\tconstructor() {\n\t\tthis._coreKeybindings = [];\n\t\tthis._extensionKeybindings = [];\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform(kb: IKeybindings): { primary?: number; secondary?: number[]; } {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\t/**\n\t * Take current platform into account and reduce to primary & secondary.\n\t */\n\tprivate static bindToCurrentPlatform2(kb: IKeybindingRule2): { primary?: Keybinding | null; } {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tif (kb && kb.win) {\n\t\t\t\treturn kb.win;\n\t\t\t}\n\t\t} else if (OS === OperatingSystem.Macintosh) {\n\t\t\tif (kb && kb.mac) {\n\t\t\t\treturn kb.mac;\n\t\t\t}\n\t\t} else {\n\t\t\tif (kb && kb.linux) {\n\t\t\t\treturn kb.linux;\n\t\t\t}\n\t\t}\n\n\t\treturn kb;\n\t}\n\n\tpublic registerKeybindingRule(rule: IKeybindingRule): void {\n\t\tconst actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n\t\tif (actualKb && actualKb.primary) {\n\t\t\tconst kk = createKeybinding(actualKb.primary, OS);\n\t\t\tif (kk) {\n\t\t\t\tthis._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, 0, rule.when);\n\t\t\t}\n\t\t}\n\n\t\tif (actualKb && Array.isArray(actualKb.secondary)) {\n\t\t\tfor (let i = 0, len = actualKb.secondary.length; i < len; i++) {\n\t\t\t\tconst k = actualKb.secondary[i];\n\t\t\t\tconst kk = createKeybinding(k, OS);\n\t\t\t\tif (kk) {\n\t\t\t\t\tthis._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, -i - 1, rule.when);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic setExtensionKeybindings(rules: IKeybindingRule2[]): void {\n\t\tlet result: IKeybindingItem[] = [], keybindingsLen = 0;\n\t\tfor (let i = 0, len = rules.length; i < len; i++) {\n\t\t\tconst rule = rules[i];\n\t\t\tlet actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform2(rule);\n\n\t\t\tif (actualKb && actualKb.primary) {\n\t\t\t\tresult[keybindingsLen++] = {\n\t\t\t\t\tkeybinding: actualKb.primary,\n\t\t\t\t\tcommand: rule.id,\n\t\t\t\t\tcommandArgs: rule.args,\n\t\t\t\t\twhen: rule.when,\n\t\t\t\t\tweight1: rule.weight,\n\t\t\t\t\tweight2: 0\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis._extensionKeybindings = result;\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): void {\n\t\tthis.registerKeybindingRule(desc);\n\t\tCommandsRegistry.registerCommand(desc);\n\t}\n\n\tprivate static _mightProduceChar(keyCode: KeyCode): boolean {\n\t\tif (keyCode >= KeyCode.KEY_0 && keyCode <= KeyCode.KEY_9) {\n\t\t\treturn true;\n\t\t}\n\t\tif (keyCode >= KeyCode.KEY_A && keyCode <= KeyCode.KEY_Z) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\tkeyCode === KeyCode.US_SEMICOLON\n\t\t\t|| keyCode === KeyCode.US_EQUAL\n\t\t\t|| keyCode === KeyCode.US_COMMA\n\t\t\t|| keyCode === KeyCode.US_MINUS\n\t\t\t|| keyCode === KeyCode.US_DOT\n\t\t\t|| keyCode === KeyCode.US_SLASH\n\t\t\t|| keyCode === KeyCode.US_BACKTICK\n\t\t\t|| keyCode === KeyCode.ABNT_C1\n\t\t\t|| keyCode === KeyCode.ABNT_C2\n\t\t\t|| keyCode === KeyCode.US_OPEN_SQUARE_BRACKET\n\t\t\t|| keyCode === KeyCode.US_BACKSLASH\n\t\t\t|| keyCode === KeyCode.US_CLOSE_SQUARE_BRACKET\n\t\t\t|| keyCode === KeyCode.US_QUOTE\n\t\t\t|| keyCode === KeyCode.OEM_8\n\t\t\t|| keyCode === KeyCode.OEM_102\n\t\t);\n\t}\n\n\tprivate _assertNoCtrlAlt(keybinding: SimpleKeybinding, commandId: string): void {\n\t\tif (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n\t\t\tif (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n\t\t\t\tconsole.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _registerDefaultKeybinding(keybinding: Keybinding, commandId: string, commandArgs: any, weight1: number, weight2: number, when: ContextKeyExpr | null | undefined): void {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\tthis._assertNoCtrlAlt(keybinding.parts[0], commandId);\n\t\t}\n\t\tthis._coreKeybindings.push({\n\t\t\tkeybinding: keybinding,\n\t\t\tcommand: commandId,\n\t\t\tcommandArgs: commandArgs,\n\t\t\twhen: when,\n\t\t\tweight1: weight1,\n\t\t\tweight2: weight2\n\t\t});\n\t\tthis._cachedMergedKeybindings = null;\n\t}\n\n\tpublic getDefaultKeybindings(): IKeybindingItem[] {\n\t\tif (!this._cachedMergedKeybindings) {\n\t\t\tthis._cachedMergedKeybindings = (<IKeybindingItem[]>[]).concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\t\t\tthis._cachedMergedKeybindings.sort(sorter);\n\t\t}\n\t\treturn this._cachedMergedKeybindings.slice(0);\n\t}\n}\nexport const KeybindingsRegistry: IKeybindingsRegistry = new KeybindingsRegistryImpl();\n\n// Define extension point ids\nexport const Extensions = {\n\tEditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a: IKeybindingItem, b: IKeybindingItem): number {\n\tif (a.weight1 !== b.weight1) {\n\t\treturn a.weight1 - b.weight1;\n\t}\n\tif (a.command < b.command) {\n\t\treturn -1;\n\t}\n\tif (a.command > b.command) {\n\t\treturn 1;\n\t}\n\treturn a.weight2 - b.weight2;\n}\n"]}]}