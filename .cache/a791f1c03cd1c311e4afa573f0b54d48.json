{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/caretOperations/transpose.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/base/common/strings\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/commands/replaceCommand\", \"vs/editor/common/core/position\", \"vs/editor/common/core/range\", \"vs/editor/common/editorContextKeys\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, nls, keyCodes_1, strings_1, editorExtensions_1, replaceCommand_1, position_1, range_1, editorContextKeys_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TransposeLettersAction extends editorExtensions_1.EditorAction {\n        positionLeftOf(start, model) {\n            let column = start.column;\n            let lineNumber = start.lineNumber;\n            if (column > model.getLineMinColumn(lineNumber)) {\n                if (strings_1.isLowSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 2))) {\n                    // character before column is a low surrogate\n                    column = column - 2;\n                }\n                else {\n                    column = column - 1;\n                }\n            }\n            else if (lineNumber > 1) {\n                lineNumber = lineNumber - 1;\n                column = model.getLineMaxColumn(lineNumber);\n            }\n            return new position_1.Position(lineNumber, column);\n        }\n        positionRightOf(start, model) {\n            let column = start.column;\n            let lineNumber = start.lineNumber;\n            if (column < model.getLineMaxColumn(lineNumber)) {\n                if (strings_1.isHighSurrogate(model.getLineContent(lineNumber).charCodeAt(column - 1))) {\n                    // character after column is a high surrogate\n                    column = column + 2;\n                }\n                else {\n                    column = column + 1;\n                }\n            }\n            else if (lineNumber < model.getLineCount()) {\n                lineNumber = lineNumber + 1;\n                column = 0;\n            }\n            return new position_1.Position(lineNumber, column);\n        }\n        constructor() {\n            super({\n                id: 'editor.action.transposeLetters',\n                label: nls.localize('transposeLetters.label', \"Transpose Letters\"),\n                alias: 'Transpose Letters',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: {\n                        primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyCode.KEY_T\n                    },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel()) {\n                return;\n            }\n            let model = editor.getModel();\n            let commands = [];\n            let selections = editor.getSelections();\n            for (let selection of selections) {\n                if (!selection.isEmpty()) {\n                    continue;\n                }\n                let lineNumber = selection.startLineNumber;\n                let column = selection.startColumn;\n                let lastColumn = model.getLineMaxColumn(lineNumber);\n                if (lineNumber === 1 && (column === 1 || (column === 2 && lastColumn === 2))) {\n                    // at beginning of file, nothing to do\n                    continue;\n                }\n                // handle special case: when at end of line, transpose left two chars\n                // otherwise, transpose left and right chars\n                let endPosition = (column === lastColumn) ?\n                    selection.getPosition() :\n                    this.positionRightOf(selection.getPosition(), model);\n                let middlePosition = this.positionLeftOf(endPosition, model);\n                let beginPosition = this.positionLeftOf(middlePosition, model);\n                let leftChar = model.getValueInRange(range_1.Range.fromPositions(beginPosition, middlePosition));\n                let rightChar = model.getValueInRange(range_1.Range.fromPositions(middlePosition, endPosition));\n                let replaceRange = range_1.Range.fromPositions(beginPosition, endPosition);\n                commands.push(new replaceCommand_1.ReplaceCommand(replaceRange, rightChar + leftChar));\n            }\n            if (commands.length > 0) {\n                editor.pushUndoStop();\n                editor.executeCommands(this.id, commands);\n                editor.pushUndoStop();\n            }\n        }\n    }\n    editorExtensions_1.registerEditorAction(TransposeLettersAction);\n});\n",null]}