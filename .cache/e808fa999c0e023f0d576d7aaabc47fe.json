{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/helpHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/helpHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar quickOpen_2 = require(\"vs/platform/quickOpen/common/quickOpen\");\nexports.HELP_PREFIX = '?';\nvar HelpEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(HelpEntry, _super);\n    function HelpEntry(prefix, description, quickOpenService, openOnPreview) {\n        var _this = _super.call(this) || this;\n        if (!prefix) {\n            _this.prefix = '';\n            _this.prefixLabel = '\\u2026' /* ... */;\n        }\n        else {\n            _this.prefix = _this.prefixLabel = prefix;\n        }\n        _this.description = description;\n        _this.quickOpenService = quickOpenService;\n        _this.openOnPreview = openOnPreview;\n        return _this;\n    }\n    HelpEntry.prototype.getLabel = function () {\n        return this.prefixLabel;\n    };\n    HelpEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, picker help\", this.getLabel());\n    };\n    HelpEntry.prototype.getDescription = function () {\n        return this.description;\n    };\n    HelpEntry.prototype.run = function (mode, context) {\n        if (mode === quickOpen_1.Mode.OPEN || this.openOnPreview) {\n            this.quickOpenService.show(this.prefix);\n        }\n        return false;\n    };\n    return HelpEntry;\n}(quickOpenModel_1.QuickOpenEntryGroup));\nvar HelpHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(HelpHandler, _super);\n    function HelpHandler(quickOpenService) {\n        var _this = _super.call(this) || this;\n        _this.quickOpenService = quickOpenService;\n        return _this;\n    }\n    HelpHandler.prototype.getResults = function (searchValue, token) {\n        var _this = this;\n        searchValue = searchValue.trim();\n        var registry = (platform_1.Registry.as(quickopen_1.Extensions.Quickopen));\n        var handlerDescriptors = registry.getQuickOpenHandlers();\n        var defaultHandler = registry.getDefaultQuickOpenHandler();\n        if (defaultHandler) {\n            handlerDescriptors.push(defaultHandler);\n        }\n        var workbenchScoped = [];\n        var editorScoped = [];\n        var matchingHandlers = [];\n        handlerDescriptors.sort(function (h1, h2) { return h1.prefix.localeCompare(h2.prefix); }).forEach(function (handlerDescriptor) {\n            if (handlerDescriptor.prefix !== exports.HELP_PREFIX) {\n                // Descriptor has multiple help entries\n                if (types.isArray(handlerDescriptor.helpEntries)) {\n                    for (var _i = 0, _a = handlerDescriptor.helpEntries; _i < _a.length; _i++) {\n                        var helpEntry = _a[_i];\n                        if (helpEntry.prefix.indexOf(searchValue) === 0) {\n                            matchingHandlers.push(helpEntry);\n                        }\n                    }\n                }\n                // Single Help entry for descriptor\n                else if (handlerDescriptor.prefix.indexOf(searchValue) === 0) {\n                    matchingHandlers.push(handlerDescriptor);\n                }\n            }\n        });\n        matchingHandlers.forEach(function (handler) {\n            if (handler instanceof quickopen_1.QuickOpenHandlerDescriptor) {\n                workbenchScoped.push(new HelpEntry(handler.prefix, handler.description, _this.quickOpenService, matchingHandlers.length === 1));\n            }\n            else {\n                var entry = new HelpEntry(handler.prefix, handler.description, _this.quickOpenService, matchingHandlers.length === 1);\n                if (handler.needsEditor) {\n                    editorScoped.push(entry);\n                }\n                else {\n                    workbenchScoped.push(entry);\n                }\n            }\n        });\n        // Add separator for workbench scoped handlers\n        if (workbenchScoped.length > 0) {\n            workbenchScoped[0].setGroupLabel(nls.localize('globalCommands', \"global commands\"));\n        }\n        // Add separator for editor scoped handlers\n        if (editorScoped.length > 0) {\n            editorScoped[0].setGroupLabel(nls.localize('editorCommands', \"editor commands\"));\n            if (workbenchScoped.length > 0) {\n                editorScoped[0].setShowBorder(true);\n            }\n        }\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(workbenchScoped.concat(editorScoped)));\n    };\n    HelpHandler.prototype.getAutoFocus = function (searchValue) {\n        searchValue = searchValue.trim();\n        return {\n            autoFocusFirstEntry: searchValue.length > 0,\n            autoFocusPrefixMatch: searchValue\n        };\n    };\n    HelpHandler.ID = 'workbench.picker.help';\n    HelpHandler = tslib_1.__decorate([\n        tslib_1.__param(0, quickOpen_2.IQuickOpenService)\n    ], HelpHandler);\n    return HelpHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.HelpHandler = HelpHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/helpHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/helpHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Mode, IEntryRunContext, IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenModel, QuickOpenEntryGroup } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { IQuickOpenRegistry, Extensions, QuickOpenHandler, QuickOpenHandlerDescriptor, QuickOpenHandlerHelpEntry } from 'vs/workbench/browser/quickopen';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const HELP_PREFIX = '?';\n\nclass HelpEntry extends QuickOpenEntryGroup {\n\tprivate prefixLabel: string;\n\tprivate prefix: string;\n\tprivate description: string;\n\tprivate quickOpenService: IQuickOpenService;\n\tprivate openOnPreview: boolean;\n\n\tconstructor(prefix: string, description: string, quickOpenService: IQuickOpenService, openOnPreview: boolean) {\n\t\tsuper();\n\n\t\tif (!prefix) {\n\t\t\tthis.prefix = '';\n\t\t\tthis.prefixLabel = '\\u2026' /* ... */;\n\t\t} else {\n\t\t\tthis.prefix = this.prefixLabel = prefix;\n\t\t}\n\n\t\tthis.description = description;\n\t\tthis.quickOpenService = quickOpenService;\n\t\tthis.openOnPreview = openOnPreview;\n\t}\n\n\tgetLabel(): string {\n\t\treturn this.prefixLabel;\n\t}\n\n\tgetAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, picker help\", this.getLabel());\n\t}\n\n\tgetDescription(): string {\n\t\treturn this.description;\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN || this.openOnPreview) {\n\t\t\tthis.quickOpenService.show(this.prefix);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport class HelpHandler extends QuickOpenHandler {\n\n\tstatic readonly ID = 'workbench.picker.help';\n\n\tconstructor(@IQuickOpenService private readonly quickOpenService: IQuickOpenService) {\n\t\tsuper();\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tsearchValue = searchValue.trim();\n\n\t\tconst registry = (Registry.as<IQuickOpenRegistry>(Extensions.Quickopen));\n\t\tconst handlerDescriptors = registry.getQuickOpenHandlers();\n\n\t\tconst defaultHandler = registry.getDefaultQuickOpenHandler();\n\t\tif (defaultHandler) {\n\t\t\thandlerDescriptors.push(defaultHandler);\n\t\t}\n\n\t\tconst workbenchScoped: HelpEntry[] = [];\n\t\tconst editorScoped: HelpEntry[] = [];\n\n\t\tconst matchingHandlers: Array<QuickOpenHandlerHelpEntry | QuickOpenHandlerDescriptor> = [];\n\t\thandlerDescriptors.sort((h1, h2) => h1.prefix.localeCompare(h2.prefix)).forEach(handlerDescriptor => {\n\t\t\tif (handlerDescriptor.prefix !== HELP_PREFIX) {\n\n\t\t\t\t// Descriptor has multiple help entries\n\t\t\t\tif (types.isArray(handlerDescriptor.helpEntries)) {\n\t\t\t\t\tfor (const helpEntry of handlerDescriptor.helpEntries) {\n\t\t\t\t\t\tif (helpEntry.prefix.indexOf(searchValue) === 0) {\n\t\t\t\t\t\t\tmatchingHandlers.push(helpEntry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Single Help entry for descriptor\n\t\t\t\telse if (handlerDescriptor.prefix.indexOf(searchValue) === 0) {\n\t\t\t\t\tmatchingHandlers.push(handlerDescriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tmatchingHandlers.forEach(handler => {\n\t\t\tif (handler instanceof QuickOpenHandlerDescriptor) {\n\t\t\t\tworkbenchScoped.push(new HelpEntry(handler.prefix, handler.description, this.quickOpenService, matchingHandlers.length === 1));\n\t\t\t} else {\n\t\t\t\tconst entry = new HelpEntry(handler.prefix, handler.description, this.quickOpenService, matchingHandlers.length === 1);\n\t\t\t\tif (handler.needsEditor) {\n\t\t\t\t\teditorScoped.push(entry);\n\t\t\t\t} else {\n\t\t\t\t\tworkbenchScoped.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Add separator for workbench scoped handlers\n\t\tif (workbenchScoped.length > 0) {\n\t\t\tworkbenchScoped[0].setGroupLabel(nls.localize('globalCommands', \"global commands\"));\n\t\t}\n\n\t\t// Add separator for editor scoped handlers\n\t\tif (editorScoped.length > 0) {\n\t\t\teditorScoped[0].setGroupLabel(nls.localize('editorCommands', \"editor commands\"));\n\t\t\tif (workbenchScoped.length > 0) {\n\t\t\t\teditorScoped[0].setShowBorder(true);\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(new QuickOpenModel([...workbenchScoped, ...editorScoped]));\n\t}\n\n\tgetAutoFocus(searchValue: string): IAutoFocus {\n\t\tsearchValue = searchValue.trim();\n\t\treturn {\n\t\t\tautoFocusFirstEntry: searchValue.length > 0,\n\t\t\tautoFocusPrefixMatch: searchValue\n\t\t};\n\t}\n}\n"]}]}