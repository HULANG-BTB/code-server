{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar uriIpc_1 = require(\"vs/base/common/uriIpc\");\nvar objects_1 = require(\"vs/base/common/objects\");\nfunction transformIncomingURI(uri, transformer) {\n    return uri_1.URI.revive(transformer ? transformer.transformIncoming(uri) : uri);\n}\nfunction transformOutgoingURI(uri, transformer) {\n    return transformer ? transformer.transformOutgoingURI(uri) : uri;\n}\nfunction transformIncomingExtension(extension, transformer) {\n    transformer = transformer ? transformer : uriIpc_1.DefaultURITransformer;\n    var manifest = extension.manifest;\n    var transformed = uriIpc_1.transformAndReviveIncomingURIs(tslib_1.__assign({}, extension, { manifest: undefined }), transformer);\n    return tslib_1.__assign({}, transformed, { manifest: manifest });\n}\nfunction transformOutgoingExtension(extension, transformer) {\n    return transformer ? objects_1.cloneAndChange(extension, function (value) { return value instanceof uri_1.URI ? transformer.transformOutgoingURI(value) : undefined; }) : extension;\n}\nvar ExtensionManagementChannel = /** @class */ (function () {\n    function ExtensionManagementChannel(service, getUriTransformer) {\n        this.service = service;\n        this.getUriTransformer = getUriTransformer;\n        this.onInstallExtension = event_1.Event.buffer(service.onInstallExtension, true);\n        this.onDidInstallExtension = event_1.Event.buffer(service.onDidInstallExtension, true);\n        this.onUninstallExtension = event_1.Event.buffer(service.onUninstallExtension, true);\n        this.onDidUninstallExtension = event_1.Event.buffer(service.onDidUninstallExtension, true);\n    }\n    ExtensionManagementChannel.prototype.listen = function (context, event) {\n        var uriTransformer = this.getUriTransformer(context);\n        switch (event) {\n            case 'onInstallExtension': return this.onInstallExtension;\n            case 'onDidInstallExtension': return event_1.Event.map(this.onDidInstallExtension, function (i) { return (tslib_1.__assign({}, i, { local: i.local ? transformOutgoingExtension(i.local, uriTransformer) : i.local })); });\n            case 'onUninstallExtension': return this.onUninstallExtension;\n            case 'onDidUninstallExtension': return this.onDidUninstallExtension;\n        }\n        throw new Error('Invalid listen');\n    };\n    ExtensionManagementChannel.prototype.call = function (context, command, args) {\n        var uriTransformer = this.getUriTransformer(context);\n        switch (command) {\n            case 'zip': return this.service.zip(transformIncomingExtension(args[0], uriTransformer)).then(function (uri) { return transformOutgoingURI(uri, uriTransformer); });\n            case 'unzip': return this.service.unzip(transformIncomingURI(args[0], uriTransformer), args[1]);\n            case 'install': return this.service.install(transformIncomingURI(args[0], uriTransformer));\n            case 'installFromGallery': return this.service.installFromGallery(args[0]);\n            case 'uninstall': return this.service.uninstall(transformIncomingExtension(args[0], uriTransformer), args[1]);\n            case 'reinstallFromGallery': return this.service.reinstallFromGallery(transformIncomingExtension(args[0], uriTransformer));\n            case 'getInstalled': return this.service.getInstalled(args[0]).then(function (extensions) { return extensions.map(function (e) { return transformOutgoingExtension(e, uriTransformer); }); });\n            case 'updateMetadata': return this.service.updateMetadata(transformIncomingExtension(args[0], uriTransformer), args[1]).then(function (e) { return transformOutgoingExtension(e, uriTransformer); });\n            case 'getExtensionsReport': return this.service.getExtensionsReport();\n        }\n        throw new Error('Invalid call');\n    };\n    return ExtensionManagementChannel;\n}());\nexports.ExtensionManagementChannel = ExtensionManagementChannel;\nvar ExtensionManagementChannelClient = /** @class */ (function () {\n    function ExtensionManagementChannelClient(channel) {\n        this.channel = channel;\n    }\n    Object.defineProperty(ExtensionManagementChannelClient.prototype, \"onInstallExtension\", {\n        get: function () { return this.channel.listen('onInstallExtension'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExtensionManagementChannelClient.prototype, \"onDidInstallExtension\", {\n        get: function () { return event_1.Event.map(this.channel.listen('onDidInstallExtension'), function (i) { return (tslib_1.__assign({}, i, { local: i.local ? transformIncomingExtension(i.local, null) : i.local })); }); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExtensionManagementChannelClient.prototype, \"onUninstallExtension\", {\n        get: function () { return this.channel.listen('onUninstallExtension'); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExtensionManagementChannelClient.prototype, \"onDidUninstallExtension\", {\n        get: function () { return this.channel.listen('onDidUninstallExtension'); },\n        enumerable: true,\n        configurable: true\n    });\n    ExtensionManagementChannelClient.prototype.zip = function (extension) {\n        return Promise.resolve(this.channel.call('zip', [extension]).then(function (result) { return uri_1.URI.revive(result); }));\n    };\n    ExtensionManagementChannelClient.prototype.unzip = function (zipLocation, type) {\n        return Promise.resolve(this.channel.call('unzip', [zipLocation, type]));\n    };\n    ExtensionManagementChannelClient.prototype.install = function (vsix) {\n        return Promise.resolve(this.channel.call('install', [vsix]));\n    };\n    ExtensionManagementChannelClient.prototype.installFromGallery = function (extension) {\n        return Promise.resolve(this.channel.call('installFromGallery', [extension]));\n    };\n    ExtensionManagementChannelClient.prototype.uninstall = function (extension, force) {\n        if (force === void 0) { force = false; }\n        return Promise.resolve(this.channel.call('uninstall', [extension, force]));\n    };\n    ExtensionManagementChannelClient.prototype.reinstallFromGallery = function (extension) {\n        return Promise.resolve(this.channel.call('reinstallFromGallery', [extension]));\n    };\n    ExtensionManagementChannelClient.prototype.getInstalled = function (type) {\n        if (type === void 0) { type = null; }\n        return Promise.resolve(this.channel.call('getInstalled', [type]))\n            .then(function (extensions) { return extensions.map(function (extension) { return transformIncomingExtension(extension, null); }); });\n    };\n    ExtensionManagementChannelClient.prototype.updateMetadata = function (local, metadata) {\n        return Promise.resolve(this.channel.call('updateMetadata', [local, metadata]))\n            .then(function (extension) { return transformIncomingExtension(extension, null); });\n    };\n    ExtensionManagementChannelClient.prototype.getExtensionsReport = function () {\n        return Promise.resolve(this.channel.call('getExtensionsReport'));\n    };\n    return ExtensionManagementChannelClient;\n}());\nexports.ExtensionManagementChannelClient = ExtensionManagementChannelClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionManagementIpc.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionManagementService, ILocalExtension, InstallExtensionEvent, DidInstallExtensionEvent, IGalleryExtension, DidUninstallExtensionEvent, IExtensionIdentifier, IGalleryMetadata, IReportedExtension } from '../common/extensionManagement';\nimport { Event } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IURITransformer, DefaultURITransformer, transformAndReviveIncomingURIs } from 'vs/base/common/uriIpc';\nimport { cloneAndChange } from 'vs/base/common/objects';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\n\nfunction transformIncomingURI(uri: UriComponents, transformer: IURITransformer | null): URI {\n\treturn URI.revive(transformer ? transformer.transformIncoming(uri) : uri);\n}\n\nfunction transformOutgoingURI(uri: URI, transformer: IURITransformer | null): URI {\n\treturn transformer ? transformer.transformOutgoingURI(uri) : uri;\n}\n\nfunction transformIncomingExtension(extension: ILocalExtension, transformer: IURITransformer | null): ILocalExtension {\n\ttransformer = transformer ? transformer : DefaultURITransformer;\n\tconst manifest = extension.manifest;\n\tconst transformed = transformAndReviveIncomingURIs({ ...extension, ...{ manifest: undefined } }, transformer);\n\treturn { ...transformed, ...{ manifest } };\n}\n\nfunction transformOutgoingExtension(extension: ILocalExtension, transformer: IURITransformer | null): ILocalExtension {\n\treturn transformer ? cloneAndChange(extension, value => value instanceof URI ? transformer.transformOutgoingURI(value) : undefined) : extension;\n}\n\nexport class ExtensionManagementChannel implements IServerChannel {\n\n\tonInstallExtension: Event<InstallExtensionEvent>;\n\tonDidInstallExtension: Event<DidInstallExtensionEvent>;\n\tonUninstallExtension: Event<IExtensionIdentifier>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionEvent>;\n\n\tconstructor(private service: IExtensionManagementService, private getUriTransformer: (requestContext: any) => IURITransformer | null) {\n\t\tthis.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n\t\tthis.onDidInstallExtension = Event.buffer(service.onDidInstallExtension, true);\n\t\tthis.onUninstallExtension = Event.buffer(service.onUninstallExtension, true);\n\t\tthis.onDidUninstallExtension = Event.buffer(service.onDidUninstallExtension, true);\n\t}\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (event) {\n\t\t\tcase 'onInstallExtension': return this.onInstallExtension;\n\t\t\tcase 'onDidInstallExtension': return Event.map(this.onDidInstallExtension, i => ({ ...i, local: i.local ? transformOutgoingExtension(i.local, uriTransformer) : i.local }));\n\t\t\tcase 'onUninstallExtension': return this.onUninstallExtension;\n\t\t\tcase 'onDidUninstallExtension': return this.onDidUninstallExtension;\n\t\t}\n\n\t\tthrow new Error('Invalid listen');\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tconst uriTransformer: IURITransformer | null = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase 'zip': return this.service.zip(transformIncomingExtension(args[0], uriTransformer)).then(uri => transformOutgoingURI(uri, uriTransformer));\n\t\t\tcase 'unzip': return this.service.unzip(transformIncomingURI(args[0], uriTransformer), args[1]);\n\t\t\tcase 'install': return this.service.install(transformIncomingURI(args[0], uriTransformer));\n\t\t\tcase 'installFromGallery': return this.service.installFromGallery(args[0]);\n\t\t\tcase 'uninstall': return this.service.uninstall(transformIncomingExtension(args[0], uriTransformer), args[1]);\n\t\t\tcase 'reinstallFromGallery': return this.service.reinstallFromGallery(transformIncomingExtension(args[0], uriTransformer));\n\t\t\tcase 'getInstalled': return this.service.getInstalled(args[0]).then(extensions => extensions.map(e => transformOutgoingExtension(e, uriTransformer)));\n\t\t\tcase 'updateMetadata': return this.service.updateMetadata(transformIncomingExtension(args[0], uriTransformer), args[1]).then(e => transformOutgoingExtension(e, uriTransformer));\n\t\t\tcase 'getExtensionsReport': return this.service.getExtensionsReport();\n\t\t}\n\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class ExtensionManagementChannelClient implements IExtensionManagementService {\n\n\t_serviceBrand: any;\n\n\tconstructor(private channel: IChannel) { }\n\n\tget onInstallExtension(): Event<InstallExtensionEvent> { return this.channel.listen('onInstallExtension'); }\n\tget onDidInstallExtension(): Event<DidInstallExtensionEvent> { return Event.map(this.channel.listen<DidInstallExtensionEvent>('onDidInstallExtension'), i => ({ ...i, local: i.local ? transformIncomingExtension(i.local, null) : i.local })); }\n\tget onUninstallExtension(): Event<IExtensionIdentifier> { return this.channel.listen('onUninstallExtension'); }\n\tget onDidUninstallExtension(): Event<DidUninstallExtensionEvent> { return this.channel.listen('onDidUninstallExtension'); }\n\n\tzip(extension: ILocalExtension): Promise<URI> {\n\t\treturn Promise.resolve(this.channel.call('zip', [extension]).then(result => URI.revive(result)));\n\t}\n\n\tunzip(zipLocation: URI, type: ExtensionType): Promise<IExtensionIdentifier> {\n\t\treturn Promise.resolve(this.channel.call('unzip', [zipLocation, type]));\n\t}\n\n\tinstall(vsix: URI): Promise<IExtensionIdentifier> {\n\t\treturn Promise.resolve(this.channel.call('install', [vsix]));\n\t}\n\n\tinstallFromGallery(extension: IGalleryExtension): Promise<void> {\n\t\treturn Promise.resolve(this.channel.call('installFromGallery', [extension]));\n\t}\n\n\tuninstall(extension: ILocalExtension, force = false): Promise<void> {\n\t\treturn Promise.resolve(this.channel.call('uninstall', [extension!, force]));\n\t}\n\n\treinstallFromGallery(extension: ILocalExtension): Promise<void> {\n\t\treturn Promise.resolve(this.channel.call('reinstallFromGallery', [extension]));\n\t}\n\n\tgetInstalled(type: ExtensionType | null = null): Promise<ILocalExtension[]> {\n\t\treturn Promise.resolve(this.channel.call<ILocalExtension[]>('getInstalled', [type]))\n\t\t\t.then(extensions => extensions.map(extension => transformIncomingExtension(extension, null)));\n\t}\n\n\tupdateMetadata(local: ILocalExtension, metadata: IGalleryMetadata): Promise<ILocalExtension> {\n\t\treturn Promise.resolve(this.channel.call<ILocalExtension>('updateMetadata', [local, metadata]))\n\t\t\t.then(extension => transformIncomingExtension(extension, null));\n\t}\n\n\tgetExtensionsReport(): Promise<IReportedExtension[]> {\n\t\treturn Promise.resolve(this.channel.call('getExtensionsReport'));\n\t}\n}"]}]}