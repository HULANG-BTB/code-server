{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugConfigurationManager.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugConfigurationManager.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar strings = require(\"vs/base/common/strings\");\nvar objects = require(\"vs/base/common/objects\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar resources = require(\"vs/base/common/resources\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugger_1 = require(\"vs/workbench/contrib/debug/node/debugger\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar configuration_2 = require(\"vs/workbench/services/configuration/common/configuration\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar terminalSupport_1 = require(\"vs/workbench/contrib/debug/electron-browser/terminalSupport\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar debugSchemas_1 = require(\"vs/workbench/contrib/debug/common/debugSchemas\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar jsonRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\njsonRegistry.registerSchema(configuration_2.launchSchemaId, debugSchemas_1.launchSchema);\nvar DEBUG_SELECTED_CONFIG_NAME_KEY = 'debug.selectedconfigname';\nvar DEBUG_SELECTED_ROOT = 'debug.selectedroot';\nvar ConfigurationManager = /** @class */ (function () {\n    function ConfigurationManager(debugService, contextService, editorService, configurationService, quickInputService, instantiationService, commandService, storageService, lifecycleService, extensionService, contextKeyService) {\n        this.debugService = debugService;\n        this.contextService = contextService;\n        this.editorService = editorService;\n        this.configurationService = configurationService;\n        this.quickInputService = quickInputService;\n        this.instantiationService = instantiationService;\n        this.commandService = commandService;\n        this.storageService = storageService;\n        this.extensionService = extensionService;\n        this.breakpointModeIdsSet = new Set();\n        this._onDidSelectConfigurationName = new event_1.Emitter();\n        this.configProviders = [];\n        this.adapterDescriptorFactories = [];\n        this.adapterTrackerFactories = [];\n        this.debuggers = [];\n        this.toDispose = [];\n        this.registerListeners(lifecycleService);\n        this.initLaunches();\n        var previousSelectedRoot = this.storageService.get(DEBUG_SELECTED_ROOT, storage_1.StorageScope.WORKSPACE);\n        var previousSelectedLaunch = this.launches.filter(function (l) { return l.uri.toString() === previousSelectedRoot; }).pop();\n        this.debugConfigurationTypeContext = debug_1.CONTEXT_DEBUG_CONFIGURATION_TYPE.bindTo(contextKeyService);\n        this.debugAdapterFactories = new Map();\n        if (previousSelectedLaunch) {\n            this.selectConfiguration(previousSelectedLaunch, this.storageService.get(DEBUG_SELECTED_CONFIG_NAME_KEY, storage_1.StorageScope.WORKSPACE));\n        }\n    }\n    // debuggers\n    ConfigurationManager.prototype.registerDebugAdapterFactory = function (debugTypes, debugAdapterLauncher) {\n        var _this = this;\n        debugTypes.forEach(function (debugType) { return _this.debugAdapterFactories.set(debugType, debugAdapterLauncher); });\n        return {\n            dispose: function () {\n                debugTypes.forEach(function (debugType) { return _this.debugAdapterFactories.delete(debugType); });\n            }\n        };\n    };\n    ConfigurationManager.prototype.createDebugAdapter = function (session) {\n        var dap = this.debugAdapterFactories.get(session.configuration.type);\n        if (dap) {\n            return dap.createDebugAdapter(session);\n        }\n        return undefined;\n    };\n    ConfigurationManager.prototype.substituteVariables = function (debugType, folder, config) {\n        var dap = this.debugAdapterFactories.get(debugType);\n        if (dap) {\n            return dap.substituteVariables(folder, config);\n        }\n        return Promise.resolve(config);\n    };\n    ConfigurationManager.prototype.runInTerminal = function (debugType, args, config) {\n        var tl = this.debugAdapterFactories.get(debugType);\n        if (!tl) {\n            if (!this.terminalLauncher) {\n                this.terminalLauncher = this.instantiationService.createInstance(terminalSupport_1.TerminalLauncher);\n            }\n            tl = this.terminalLauncher;\n        }\n        return tl.runInTerminal(args, config);\n    };\n    // debug adapter\n    ConfigurationManager.prototype.registerDebugAdapterDescriptorFactory = function (debugAdapterProvider) {\n        var _this = this;\n        this.adapterDescriptorFactories.push(debugAdapterProvider);\n        return {\n            dispose: function () {\n                _this.unregisterDebugAdapterDescriptorFactory(debugAdapterProvider);\n            }\n        };\n    };\n    ConfigurationManager.prototype.unregisterDebugAdapterDescriptorFactory = function (debugAdapterProvider) {\n        var ix = this.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n        if (ix >= 0) {\n            this.adapterDescriptorFactories.splice(ix, 1);\n        }\n    };\n    ConfigurationManager.prototype.getDebugAdapterDescriptor = function (session) {\n        var config = session.configuration;\n        // first try legacy proposed API: DebugConfigurationProvider.debugAdapterExecutable\n        var providers0 = this.configProviders.filter(function (p) { return p.type === config.type && p.debugAdapterExecutable; });\n        if (providers0.length === 1 && providers0[0].debugAdapterExecutable) {\n            return providers0[0].debugAdapterExecutable(session.root ? session.root.uri : undefined);\n        }\n        else {\n            // TODO@AW handle n > 1 case\n        }\n        // new API\n        var providers = this.adapterDescriptorFactories.filter(function (p) { return p.type === config.type && p.createDebugAdapterDescriptor; });\n        if (providers.length === 1) {\n            return providers[0].createDebugAdapterDescriptor(session);\n        }\n        else {\n            // TODO@AW handle n > 1 case\n        }\n        return Promise.resolve(undefined);\n    };\n    // debug adapter trackers\n    ConfigurationManager.prototype.registerDebugAdapterTrackerFactory = function (debugAdapterTrackerFactory) {\n        var _this = this;\n        this.adapterTrackerFactories.push(debugAdapterTrackerFactory);\n        return {\n            dispose: function () {\n                _this.unregisterDebugAdapterTrackerFactory(debugAdapterTrackerFactory);\n            }\n        };\n    };\n    ConfigurationManager.prototype.unregisterDebugAdapterTrackerFactory = function (debugAdapterTrackerFactory) {\n        var ix = this.adapterTrackerFactories.indexOf(debugAdapterTrackerFactory);\n        if (ix >= 0) {\n            this.adapterTrackerFactories.splice(ix, 1);\n        }\n    };\n    // debug configurations\n    ConfigurationManager.prototype.registerDebugConfigurationProvider = function (debugConfigurationProvider) {\n        var _this = this;\n        this.configProviders.push(debugConfigurationProvider);\n        return {\n            dispose: function () {\n                _this.unregisterDebugConfigurationProvider(debugConfigurationProvider);\n            }\n        };\n    };\n    ConfigurationManager.prototype.unregisterDebugConfigurationProvider = function (debugConfigurationProvider) {\n        var ix = this.configProviders.indexOf(debugConfigurationProvider);\n        if (ix >= 0) {\n            this.configProviders.splice(ix, 1);\n        }\n    };\n    ConfigurationManager.prototype.hasDebugConfigurationProvider = function (debugType) {\n        // check if there are providers for the given type that contribute a provideDebugConfigurations method\n        var providers = this.configProviders.filter(function (p) { return p.provideDebugConfigurations && (p.type === debugType); });\n        return providers.length > 0;\n    };\n    ConfigurationManager.prototype.needsToRunInExtHost = function (debugType) {\n        // if the given debugType matches any registered tracker factory we need to run the DA in the EH\n        var providers = this.adapterTrackerFactories.filter(function (p) { return p.type === debugType || p.type === '*'; });\n        return providers.length > 0;\n    };\n    ConfigurationManager.prototype.resolveConfigurationByProviders = function (folderUri, type, debugConfiguration) {\n        var _this = this;\n        return this.activateDebuggers('onDebugResolve', type).then(function () {\n            // pipe the config through the promises sequentially. Append at the end the '*' types\n            var providers = _this.configProviders.filter(function (p) { return p.type === type && p.resolveDebugConfiguration; })\n                .concat(_this.configProviders.filter(function (p) { return p.type === '*' && p.resolveDebugConfiguration; }));\n            return providers.reduce(function (promise, provider) {\n                return promise.then(function (config) {\n                    if (config) {\n                        return provider.resolveDebugConfiguration(folderUri, config);\n                    }\n                    else {\n                        return Promise.resolve(config);\n                    }\n                });\n            }, Promise.resolve(debugConfiguration));\n        });\n    };\n    ConfigurationManager.prototype.provideDebugConfigurations = function (folderUri, type) {\n        var _this = this;\n        return this.activateDebuggers('onDebugInitialConfigurations')\n            .then(function () { return Promise.all(_this.configProviders.filter(function (p) { return p.type === type && p.provideDebugConfigurations; }).map(function (p) { return p.provideDebugConfigurations(folderUri); }))\n            .then(function (results) { return results.reduce(function (first, second) { return first.concat(second); }, []); }); });\n    };\n    ConfigurationManager.prototype.registerListeners = function (lifecycleService) {\n        var _this = this;\n        debugSchemas_1.debuggersExtPoint.setHandler(function (extensions, delta) {\n            delta.added.forEach(function (added) {\n                added.value.forEach(function (rawAdapter) {\n                    if (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n                        added.collector.error(nls.localize('debugNoType', \"Debugger 'type' can not be omitted and must be of type 'string'.\"));\n                    }\n                    if (rawAdapter.enableBreakpointsFor) {\n                        rawAdapter.enableBreakpointsFor.languageIds.forEach(function (modeId) {\n                            _this.breakpointModeIdsSet.add(modeId);\n                        });\n                    }\n                    if (rawAdapter.type !== '*') {\n                        var existing = _this.getDebugger(rawAdapter.type);\n                        if (existing) {\n                            existing.merge(rawAdapter, added.description);\n                        }\n                        else {\n                            _this.debuggers.push(_this.instantiationService.createInstance(debugger_1.Debugger, _this, rawAdapter, added.description));\n                        }\n                    }\n                });\n            });\n            // take care of all wildcard contributions\n            extensions.forEach(function (extension) {\n                extension.value.forEach(function (rawAdapter) {\n                    if (rawAdapter.type === '*') {\n                        _this.debuggers.forEach(function (dbg) { return dbg.merge(rawAdapter, extension.description); });\n                    }\n                });\n            });\n            delta.removed.forEach(function (removed) {\n                var removedTypes = removed.value.map(function (rawAdapter) { return rawAdapter.type; });\n                _this.debuggers = _this.debuggers.filter(function (d) { return removedTypes.indexOf(d.type) === -1; });\n                _this.debugService.getModel().getSessions().forEach(function (s) {\n                    // Stop sessions if their debugger has been removed\n                    if (removedTypes.indexOf(s.configuration.type) >= 0) {\n                        _this.debugService.stopSession(s).then(undefined, errors_1.onUnexpectedError);\n                    }\n                });\n            });\n            // update the schema to include all attributes, snippets and types from extensions.\n            _this.debuggers.forEach(function (adapter) {\n                var _a, _b;\n                var items = debugSchemas_1.launchSchema.properties['configurations'].items;\n                var schemaAttributes = adapter.getSchemaAttributes();\n                if (schemaAttributes && items.oneOf) {\n                    (_a = items.oneOf).push.apply(_a, schemaAttributes);\n                }\n                var configurationSnippets = adapter.configurationSnippets;\n                if (configurationSnippets && items.defaultSnippets) {\n                    (_b = items.defaultSnippets).push.apply(_b, configurationSnippets);\n                }\n            });\n            _this.setCompoundSchemaValues();\n        });\n        debugSchemas_1.breakpointsExtPoint.setHandler(function (extensions, delta) {\n            delta.removed.forEach(function (removed) {\n                removed.value.forEach(function (breakpoints) { return _this.breakpointModeIdsSet.delete(breakpoints.language); });\n            });\n            delta.added.forEach(function (added) {\n                added.value.forEach(function (breakpoints) { return _this.breakpointModeIdsSet.add(breakpoints.language); });\n            });\n        });\n        this.toDispose.push(this.contextService.onDidChangeWorkspaceFolders(function () {\n            _this.initLaunches();\n            _this.selectConfiguration(_this.selectedLaunch);\n            _this.setCompoundSchemaValues();\n        }));\n        this.toDispose.push(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('launch')) {\n                _this.selectConfiguration(_this.selectedLaunch);\n                _this.setCompoundSchemaValues();\n            }\n        }));\n        this.toDispose.push(this.storageService.onWillSaveState(this.saveState, this));\n    };\n    ConfigurationManager.prototype.initLaunches = function () {\n        var _this = this;\n        this.launches = this.contextService.getWorkspace().folders.map(function (folder) { return _this.instantiationService.createInstance(Launch, _this, folder); });\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            this.launches.push(this.instantiationService.createInstance(WorkspaceLaunch));\n        }\n        this.launches.push(this.instantiationService.createInstance(UserLaunch));\n        if (this.selectedLaunch && this.launches.indexOf(this.selectedLaunch) === -1) {\n            this.selectedLaunch = undefined;\n        }\n    };\n    ConfigurationManager.prototype.setCompoundSchemaValues = function () {\n        var compoundConfigurationsSchema = debugSchemas_1.launchSchema.properties['compounds'].items.properties['configurations'];\n        var launchNames = this.launches.map(function (l) {\n            return l.getConfigurationNames(false);\n        }).reduce(function (first, second) { return first.concat(second); }, []);\n        compoundConfigurationsSchema.items.oneOf[0].enum = launchNames;\n        compoundConfigurationsSchema.items.oneOf[1].properties.name.enum = launchNames;\n        var folderNames = this.contextService.getWorkspace().folders.map(function (f) { return f.name; });\n        compoundConfigurationsSchema.items.oneOf[1].properties.folder.enum = folderNames;\n        jsonRegistry.registerSchema(configuration_2.launchSchemaId, debugSchemas_1.launchSchema);\n    };\n    ConfigurationManager.prototype.getLaunches = function () {\n        return this.launches;\n    };\n    ConfigurationManager.prototype.getLaunch = function (workspaceUri) {\n        if (!uri_1.URI.isUri(workspaceUri)) {\n            return undefined;\n        }\n        return this.launches.filter(function (l) { return l.workspace && l.workspace.uri.toString() === workspaceUri.toString(); }).pop();\n    };\n    Object.defineProperty(ConfigurationManager.prototype, \"selectedConfiguration\", {\n        get: function () {\n            return {\n                launch: this.selectedLaunch,\n                name: this.selectedName\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConfigurationManager.prototype, \"onDidSelectConfiguration\", {\n        get: function () {\n            return this._onDidSelectConfigurationName.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ConfigurationManager.prototype.getWorkspaceLaunch = function () {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            return this.launches[this.launches.length - 1];\n        }\n        return undefined;\n    };\n    ConfigurationManager.prototype.selectConfiguration = function (launch, name) {\n        var previousLaunch = this.selectedLaunch;\n        var previousName = this.selectedName;\n        this.selectedLaunch = launch;\n        var names = launch ? launch.getConfigurationNames() : [];\n        if (name && names.indexOf(name) >= 0) {\n            this.selectedName = name;\n        }\n        if (!this.selectedName || names.indexOf(this.selectedName) === -1) {\n            this.selectedName = names.length ? names[0] : undefined;\n        }\n        var configuration = this.selectedLaunch && this.selectedName ? this.selectedLaunch.getConfiguration(this.selectedName) : undefined;\n        if (configuration) {\n            this.debugConfigurationTypeContext.set(configuration.type);\n        }\n        else {\n            this.debugConfigurationTypeContext.reset();\n        }\n        if (this.selectedLaunch !== previousLaunch || this.selectedName !== previousName) {\n            this._onDidSelectConfigurationName.fire();\n        }\n    };\n    ConfigurationManager.prototype.canSetBreakpointsIn = function (model) {\n        var modeId = model.getLanguageIdentifier().language;\n        if (!modeId || modeId === 'jsonc' || modeId === 'log') {\n            // do not allow breakpoints in our settings files and output\n            return false;\n        }\n        if (this.configurationService.getValue('debug').allowBreakpointsEverywhere) {\n            return true;\n        }\n        return this.breakpointModeIdsSet.has(modeId);\n    };\n    ConfigurationManager.prototype.getDebugger = function (type) {\n        return this.debuggers.filter(function (dbg) { return strings.equalsIgnoreCase(dbg.type, type); }).pop();\n    };\n    ConfigurationManager.prototype.guessDebugger = function (type) {\n        var _this = this;\n        if (type) {\n            var adapter = this.getDebugger(type);\n            return Promise.resolve(adapter);\n        }\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        var candidates;\n        if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n            var model = activeTextEditorWidget.getModel();\n            var language_1 = model ? model.getLanguageIdentifier().language : undefined;\n            var adapters = this.debuggers.filter(function (a) { return language_1 && a.languages && a.languages.indexOf(language_1) >= 0; });\n            if (adapters.length === 1) {\n                return Promise.resolve(adapters[0]);\n            }\n            if (adapters.length > 1) {\n                candidates = Promise.resolve(adapters);\n            }\n        }\n        if (!candidates) {\n            candidates = this.activateDebuggers('onDebugInitialConfigurations').then(function () { return _this.debuggers.filter(function (dbg) { return dbg.hasInitialConfiguration() || dbg.hasConfigurationProvider(); }); });\n        }\n        return candidates.then(function (debuggers) {\n            debuggers.sort(function (first, second) { return first.label.localeCompare(second.label); });\n            var picks = debuggers.map(function (c) { return ({ label: c.label, debugger: c }); });\n            return _this.quickInputService.pick(picks.concat([{ type: 'separator' }, { label: 'More...', debugger: undefined }]), { placeHolder: nls.localize('selectDebug', \"Select Environment\") })\n                .then(function (picked) {\n                if (picked && picked.debugger) {\n                    return picked.debugger;\n                }\n                if (picked) {\n                    _this.commandService.executeCommand('debug.installAdditionalDebuggers');\n                }\n                return undefined;\n            });\n        });\n    };\n    ConfigurationManager.prototype.activateDebuggers = function (activationEvent, debugType) {\n        var thenables = [\n            this.extensionService.activateByEvent(activationEvent),\n            this.extensionService.activateByEvent('onDebug')\n        ];\n        if (debugType) {\n            thenables.push(this.extensionService.activateByEvent(activationEvent + \":\" + debugType));\n        }\n        return Promise.all(thenables).then(function (_) {\n            return undefined;\n        });\n    };\n    ConfigurationManager.prototype.saveState = function () {\n        if (this.selectedName) {\n            this.storageService.store(DEBUG_SELECTED_CONFIG_NAME_KEY, this.selectedName, storage_1.StorageScope.WORKSPACE);\n        }\n        if (this.selectedLaunch) {\n            this.storageService.store(DEBUG_SELECTED_ROOT, this.selectedLaunch.uri.toString(), storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    ConfigurationManager.prototype.dispose = function () {\n        this.toDispose = lifecycle_1.dispose(this.toDispose);\n    };\n    ConfigurationManager = tslib_1.__decorate([\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, quickInput_1.IQuickInputService),\n        tslib_1.__param(5, instantiation_1.IInstantiationService),\n        tslib_1.__param(6, commands_1.ICommandService),\n        tslib_1.__param(7, storage_1.IStorageService),\n        tslib_1.__param(8, lifecycle_2.ILifecycleService),\n        tslib_1.__param(9, extensions_1.IExtensionService),\n        tslib_1.__param(10, contextkey_1.IContextKeyService)\n    ], ConfigurationManager);\n    return ConfigurationManager;\n}());\nexports.ConfigurationManager = ConfigurationManager;\nvar AbstractLaunch = /** @class */ (function () {\n    function AbstractLaunch() {\n    }\n    AbstractLaunch.prototype.getCompound = function (name) {\n        var config = this.getConfig();\n        if (!config || !config.compounds) {\n            return undefined;\n        }\n        return config.compounds.filter(function (compound) { return compound.name === name; }).pop();\n    };\n    AbstractLaunch.prototype.getConfigurationNames = function (includeCompounds) {\n        if (includeCompounds === void 0) { includeCompounds = true; }\n        var config = this.getConfig();\n        if (!config || !config.configurations || !Array.isArray(config.configurations)) {\n            return [];\n        }\n        else {\n            var names = config.configurations.filter(function (cfg) { return cfg && typeof cfg.name === 'string'; }).map(function (cfg) { return cfg.name; });\n            if (includeCompounds && config.compounds) {\n                if (config.compounds) {\n                    names.push.apply(names, config.compounds.filter(function (compound) { return typeof compound.name === 'string' && compound.configurations && compound.configurations.length; })\n                        .map(function (compound) { return compound.name; }));\n                }\n            }\n            return names;\n        }\n    };\n    AbstractLaunch.prototype.getConfiguration = function (name) {\n        // We need to clone the configuration in order to be able to make changes to it #42198\n        var config = objects.deepClone(this.getConfig());\n        if (!config || !config.configurations) {\n            return undefined;\n        }\n        return config.configurations.filter(function (config) { return config && config.name === name; }).shift();\n    };\n    Object.defineProperty(AbstractLaunch.prototype, \"hidden\", {\n        get: function () {\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractLaunch;\n}());\nvar Launch = /** @class */ (function (_super) {\n    tslib_1.__extends(Launch, _super);\n    function Launch(configurationManager, workspace, fileService, editorService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.configurationManager = configurationManager;\n        _this.workspace = workspace;\n        _this.fileService = fileService;\n        _this.editorService = editorService;\n        _this.configurationService = configurationService;\n        return _this;\n    }\n    Object.defineProperty(Launch.prototype, \"uri\", {\n        get: function () {\n            return resources.joinPath(this.workspace.uri, '/.vscode/launch.json');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Launch.prototype, \"name\", {\n        get: function () {\n            return this.workspace.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Launch.prototype.getConfig = function () {\n        return this.configurationService.inspect('launch', { resource: this.workspace.uri }).workspaceFolder;\n    };\n    Launch.prototype.openConfigFile = function (sideBySide, preserveFocus, type) {\n        var _this = this;\n        var resource = this.uri;\n        var created = false;\n        return this.fileService.resolveContent(resource).then(function (content) { return content.value; }, function (err) {\n            // launch.json not found: create one by collecting launch configs from debugConfigProviders\n            return _this.configurationManager.guessDebugger(type).then(function (adapter) {\n                if (adapter) {\n                    return _this.configurationManager.provideDebugConfigurations(_this.workspace.uri, adapter.type).then(function (initialConfigs) {\n                        return adapter.getInitialConfigurationContent(initialConfigs);\n                    });\n                }\n                else {\n                    return '';\n                }\n            }).then(function (content) {\n                if (!content) {\n                    return '';\n                }\n                created = true; // pin only if config file is created #8727\n                return _this.fileService.updateContent(resource, content).then(function () {\n                    // convert string into IContent; see #32135\n                    return content;\n                });\n            });\n        }).then(function (content) {\n            if (!content) {\n                return { editor: null, created: false };\n            }\n            var index = content.indexOf(\"\\\"\" + _this.configurationManager.selectedConfiguration.name + \"\\\"\");\n            var startLineNumber = 1;\n            for (var i = 0; i < index; i++) {\n                if (content.charAt(i) === '\\n') {\n                    startLineNumber++;\n                }\n            }\n            var selection = startLineNumber > 1 ? { startLineNumber: startLineNumber, startColumn: 4 } : undefined;\n            return Promise.resolve(_this.editorService.openEditor({\n                resource: resource,\n                options: {\n                    selection: selection,\n                    preserveFocus: preserveFocus,\n                    pinned: created,\n                    revealIfVisible: true\n                },\n            }, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP).then(function (editor) { return ({ editor: editor, created: created }); }));\n        }, function (error) {\n            throw new Error(nls.localize('DebugConfig.failed', \"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\", error.message));\n        });\n    };\n    Launch = tslib_1.__decorate([\n        tslib_1.__param(2, files_1.IFileService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, configuration_1.IConfigurationService)\n    ], Launch);\n    return Launch;\n}(AbstractLaunch));\nvar WorkspaceLaunch = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkspaceLaunch, _super);\n    function WorkspaceLaunch(editorService, configurationService, contextService) {\n        var _this = _super.call(this) || this;\n        _this.editorService = editorService;\n        _this.configurationService = configurationService;\n        _this.contextService = contextService;\n        return _this;\n    }\n    Object.defineProperty(WorkspaceLaunch.prototype, \"workspace\", {\n        get: function () {\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceLaunch.prototype, \"uri\", {\n        get: function () {\n            return this.contextService.getWorkspace().configuration;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WorkspaceLaunch.prototype, \"name\", {\n        get: function () {\n            return nls.localize('workspace', \"workspace\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceLaunch.prototype.getConfig = function () {\n        return this.configurationService.inspect('launch').workspace;\n    };\n    WorkspaceLaunch.prototype.openConfigFile = function (sideBySide, preserveFocus, type) {\n        return this.editorService.openEditor({\n            resource: this.contextService.getWorkspace().configuration,\n            options: { preserveFocus: preserveFocus }\n        }, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP).then(function (editor) { return ({ editor: editor, created: false }); });\n    };\n    WorkspaceLaunch = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService)\n    ], WorkspaceLaunch);\n    return WorkspaceLaunch;\n}(AbstractLaunch));\nvar UserLaunch = /** @class */ (function (_super) {\n    tslib_1.__extends(UserLaunch, _super);\n    function UserLaunch(configurationService, preferencesService) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.preferencesService = preferencesService;\n        return _this;\n    }\n    Object.defineProperty(UserLaunch.prototype, \"workspace\", {\n        get: function () {\n            return undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserLaunch.prototype, \"uri\", {\n        get: function () {\n            return this.preferencesService.userSettingsResource;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserLaunch.prototype, \"name\", {\n        get: function () {\n            return nls.localize('user settings', \"user settings\");\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UserLaunch.prototype, \"hidden\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UserLaunch.prototype.getConfig = function () {\n        return this.configurationService.inspect('launch').user;\n    };\n    UserLaunch.prototype.openConfigFile = function (sideBySide, preserveFocus, type) {\n        return this.preferencesService.openGlobalSettings(false, { preserveFocus: preserveFocus }).then(function (editor) { return ({ editor: editor, created: false }); });\n    };\n    UserLaunch = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, preferences_1.IPreferencesService)\n    ], UserLaunch);\n    return UserLaunch;\n}(AbstractLaunch));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugConfigurationManager.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugConfigurationManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport * as strings from 'vs/base/common/strings';\nimport * as objects from 'vs/base/common/objects';\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as resources from 'vs/base/common/resources';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IEditor } from 'vs/workbench/common/editor';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IDebugConfigurationProvider, ICompound, IDebugConfiguration, IConfig, IGlobalConfig, IConfigurationManager, ILaunch, IDebugAdapterDescriptorFactory, IDebugAdapter, ITerminalSettings, ITerminalLauncher, IDebugSession, IAdapterDescriptor, CONTEXT_DEBUG_CONFIGURATION_TYPE, IDebugAdapterFactory, IDebugAdapterTrackerFactory, IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { Debugger } from 'vs/workbench/contrib/debug/node/debugger';\nimport { IEditorService, ACTIVE_GROUP, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { TerminalLauncher } from 'vs/workbench/contrib/debug/electron-browser/terminalSupport';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { launchSchema, debuggersExtPoint, breakpointsExtPoint } from 'vs/workbench/contrib/debug/common/debugSchemas';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\njsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\nconst DEBUG_SELECTED_CONFIG_NAME_KEY = 'debug.selectedconfigname';\nconst DEBUG_SELECTED_ROOT = 'debug.selectedroot';\n\nexport class ConfigurationManager implements IConfigurationManager {\n\tprivate debuggers: Debugger[];\n\tprivate breakpointModeIdsSet = new Set<string>();\n\tprivate launches: ILaunch[];\n\tprivate selectedName: string | undefined;\n\tprivate selectedLaunch: ILaunch | undefined;\n\tprivate toDispose: IDisposable[];\n\tprivate _onDidSelectConfigurationName = new Emitter<void>();\n\tprivate configProviders: IDebugConfigurationProvider[];\n\tprivate adapterDescriptorFactories: IDebugAdapterDescriptorFactory[];\n\tprivate adapterTrackerFactories: IDebugAdapterTrackerFactory[];\n\tprivate debugAdapterFactories: Map<string, IDebugAdapterFactory>;\n\tprivate terminalLauncher: ITerminalLauncher;\n\tprivate debugConfigurationTypeContext: IContextKey<string>;\n\n\tconstructor(\n\t\tprivate debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tthis.configProviders = [];\n\t\tthis.adapterDescriptorFactories = [];\n\t\tthis.adapterTrackerFactories = [];\n\t\tthis.debuggers = [];\n\t\tthis.toDispose = [];\n\t\tthis.registerListeners(lifecycleService);\n\t\tthis.initLaunches();\n\t\tconst previousSelectedRoot = this.storageService.get(DEBUG_SELECTED_ROOT, StorageScope.WORKSPACE);\n\t\tconst previousSelectedLaunch = this.launches.filter(l => l.uri.toString() === previousSelectedRoot).pop();\n\t\tthis.debugConfigurationTypeContext = CONTEXT_DEBUG_CONFIGURATION_TYPE.bindTo(contextKeyService);\n\t\tthis.debugAdapterFactories = new Map();\n\t\tif (previousSelectedLaunch) {\n\t\t\tthis.selectConfiguration(previousSelectedLaunch, this.storageService.get(DEBUG_SELECTED_CONFIG_NAME_KEY, StorageScope.WORKSPACE));\n\t\t}\n\t}\n\n\t// debuggers\n\n\tregisterDebugAdapterFactory(debugTypes: string[], debugAdapterLauncher: IDebugAdapterFactory): IDisposable {\n\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.set(debugType, debugAdapterLauncher));\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.delete(debugType));\n\t\t\t}\n\t\t};\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter | undefined {\n\t\tlet dap = this.debugAdapterFactories.get(session.configuration.type);\n\t\tif (dap) {\n\t\t\treturn dap.createDebugAdapter(session);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsubstituteVariables(debugType: string, folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tlet dap = this.debugAdapterFactories.get(debugType);\n\t\tif (dap) {\n\t\t\treturn dap.substituteVariables(folder, config);\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\trunInTerminal(debugType: string, args: DebugProtocol.RunInTerminalRequestArguments, config: ITerminalSettings): Promise<number | undefined> {\n\t\tlet tl: ITerminalLauncher | undefined = this.debugAdapterFactories.get(debugType);\n\t\tif (!tl) {\n\t\t\tif (!this.terminalLauncher) {\n\t\t\t\tthis.terminalLauncher = this.instantiationService.createInstance(TerminalLauncher);\n\t\t\t}\n\t\t\ttl = this.terminalLauncher;\n\t\t}\n\t\treturn tl.runInTerminal(args, config);\n\t}\n\n\t// debug adapter\n\n\tregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): IDisposable {\n\t\tthis.adapterDescriptorFactories.push(debugAdapterProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterDescriptorFactory(debugAdapterProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): void {\n\t\tconst ix = this.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterDescriptorFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\tgetDebugAdapterDescriptor(session: IDebugSession): Promise<IAdapterDescriptor | undefined> {\n\n\t\tconst config = session.configuration;\n\n\t\t// first try legacy proposed API: DebugConfigurationProvider.debugAdapterExecutable\n\t\tconst providers0 = this.configProviders.filter(p => p.type === config.type && p.debugAdapterExecutable);\n\t\tif (providers0.length === 1 && providers0[0].debugAdapterExecutable) {\n\t\t\treturn providers0[0].debugAdapterExecutable(session.root ? session.root.uri : undefined);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\n\t\t// new API\n\t\tconst providers = this.adapterDescriptorFactories.filter(p => p.type === config.type && p.createDebugAdapterDescriptor);\n\t\tif (providers.length === 1) {\n\t\t\treturn providers[0].createDebugAdapterDescriptor(session);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t// debug adapter trackers\n\n\tregisterDebugAdapterTrackerFactory(debugAdapterTrackerFactory: IDebugAdapterTrackerFactory): IDisposable {\n\t\tthis.adapterTrackerFactories.push(debugAdapterTrackerFactory);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterTrackerFactory(debugAdapterTrackerFactory);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugAdapterTrackerFactory(debugAdapterTrackerFactory: IDebugAdapterTrackerFactory): void {\n\t\tconst ix = this.adapterTrackerFactories.indexOf(debugAdapterTrackerFactory);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterTrackerFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\t// debug configurations\n\n\tregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): IDisposable {\n\t\tthis.configProviders.push(debugConfigurationProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugConfigurationProvider(debugConfigurationProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): void {\n\t\tconst ix = this.configProviders.indexOf(debugConfigurationProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.configProviders.splice(ix, 1);\n\t\t}\n\t}\n\n\thasDebugConfigurationProvider(debugType: string): boolean {\n\t\t// check if there are providers for the given type that contribute a provideDebugConfigurations method\n\t\tconst providers = this.configProviders.filter(p => p.provideDebugConfigurations && (p.type === debugType));\n\t\treturn providers.length > 0;\n\t}\n\n\tneedsToRunInExtHost(debugType: string): boolean {\n\n\t\t// if the given debugType matches any registered tracker factory we need to run the DA in the EH\n\t\tconst providers = this.adapterTrackerFactories.filter(p => p.type === debugType || p.type === '*');\n\t\treturn providers.length > 0;\n\t}\n\n\tresolveConfigurationByProviders(folderUri: uri | undefined, type: string | undefined, debugConfiguration: IConfig): Promise<IConfig | null | undefined> {\n\t\treturn this.activateDebuggers('onDebugResolve', type).then(() => {\n\t\t\t// pipe the config through the promises sequentially. Append at the end the '*' types\n\t\t\tconst providers = this.configProviders.filter(p => p.type === type && p.resolveDebugConfiguration)\n\t\t\t\t.concat(this.configProviders.filter(p => p.type === '*' && p.resolveDebugConfiguration));\n\n\t\t\treturn providers.reduce((promise, provider) => {\n\t\t\t\treturn promise.then(config => {\n\t\t\t\t\tif (config) {\n\t\t\t\t\t\treturn provider.resolveDebugConfiguration!(folderUri, config);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.resolve(config);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, Promise.resolve(debugConfiguration));\n\t\t});\n\t}\n\n\tprovideDebugConfigurations(folderUri: uri | undefined, type: string): Promise<any[]> {\n\t\treturn this.activateDebuggers('onDebugInitialConfigurations')\n\t\t\t.then(() => Promise.all(this.configProviders.filter(p => p.type === type && p.provideDebugConfigurations).map(p => p.provideDebugConfigurations!(folderUri)))\n\t\t\t\t.then(results => results.reduce((first, second) => first.concat(second), [])));\n\t}\n\n\tprivate registerListeners(lifecycleService: ILifecycleService): void {\n\t\tdebuggersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(rawAdapter => {\n\t\t\t\t\tif (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n\t\t\t\t\t\tadded.collector.error(nls.localize('debugNoType', \"Debugger 'type' can not be omitted and must be of type 'string'.\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (rawAdapter.enableBreakpointsFor) {\n\t\t\t\t\t\trawAdapter.enableBreakpointsFor.languageIds.forEach(modeId => {\n\t\t\t\t\t\t\tthis.breakpointModeIdsSet.add(modeId);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rawAdapter.type !== '*') {\n\t\t\t\t\t\tconst existing = this.getDebugger(rawAdapter.type);\n\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\texisting.merge(rawAdapter, added.description);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.debuggers.push(this.instantiationService.createInstance(Debugger, this, rawAdapter, added.description));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// take care of all wildcard contributions\n\t\t\textensions.forEach(extension => {\n\t\t\t\textension.value.forEach(rawAdapter => {\n\t\t\t\t\tif (rawAdapter.type === '*') {\n\t\t\t\t\t\tthis.debuggers.forEach(dbg => dbg.merge(rawAdapter, extension.description));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tconst removedTypes = removed.value.map(rawAdapter => rawAdapter.type);\n\t\t\t\tthis.debuggers = this.debuggers.filter(d => removedTypes.indexOf(d.type) === -1);\n\t\t\t\tthis.debugService.getModel().getSessions().forEach(s => {\n\t\t\t\t\t// Stop sessions if their debugger has been removed\n\t\t\t\t\tif (removedTypes.indexOf(s.configuration.type) >= 0) {\n\t\t\t\t\t\tthis.debugService.stopSession(s).then(undefined, onUnexpectedError);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// update the schema to include all attributes, snippets and types from extensions.\n\t\t\tthis.debuggers.forEach(adapter => {\n\t\t\t\tconst items = (<IJSONSchema>launchSchema.properties!['configurations'].items);\n\t\t\t\tconst schemaAttributes = adapter.getSchemaAttributes();\n\t\t\t\tif (schemaAttributes && items.oneOf) {\n\t\t\t\t\titems.oneOf.push(...schemaAttributes);\n\t\t\t\t}\n\t\t\t\tconst configurationSnippets = adapter.configurationSnippets;\n\t\t\t\tif (configurationSnippets && items.defaultSnippets) {\n\t\t\t\t\titems.defaultSnippets.push(...configurationSnippets);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.setCompoundSchemaValues();\n\t\t});\n\n\t\tbreakpointsExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tremoved.value.forEach(breakpoints => this.breakpointModeIdsSet.delete(breakpoints.language));\n\t\t\t});\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(breakpoints => this.breakpointModeIdsSet.add(breakpoints.language));\n\t\t\t});\n\t\t});\n\n\t\tthis.toDispose.push(this.contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tthis.initLaunches();\n\t\t\tthis.selectConfiguration(this.selectedLaunch);\n\t\t\tthis.setCompoundSchemaValues();\n\t\t}));\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('launch')) {\n\t\t\t\tthis.selectConfiguration(this.selectedLaunch);\n\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t}\n\t\t}));\n\n\t\tthis.toDispose.push(this.storageService.onWillSaveState(this.saveState, this));\n\t}\n\n\tprivate initLaunches(): void {\n\t\tthis.launches = this.contextService.getWorkspace().folders.map(folder => this.instantiationService.createInstance(Launch, this, folder));\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tthis.launches.push(this.instantiationService.createInstance(WorkspaceLaunch));\n\t\t}\n\t\tthis.launches.push(this.instantiationService.createInstance(UserLaunch));\n\n\t\tif (this.selectedLaunch && this.launches.indexOf(this.selectedLaunch) === -1) {\n\t\t\tthis.selectedLaunch = undefined;\n\t\t}\n\t}\n\n\tprivate setCompoundSchemaValues(): void {\n\t\tconst compoundConfigurationsSchema = (<IJSONSchema>launchSchema.properties!['compounds'].items).properties!['configurations'];\n\t\tconst launchNames = this.launches.map(l =>\n\t\t\tl.getConfigurationNames(false)).reduce((first, second) => first.concat(second), []);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![0].enum = launchNames;\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.name.enum = launchNames;\n\n\t\tconst folderNames = this.contextService.getWorkspace().folders.map(f => f.name);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.folder.enum = folderNames;\n\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tgetLaunches(): ILaunch[] {\n\t\treturn this.launches;\n\t}\n\n\tgetLaunch(workspaceUri: uri | undefined): ILaunch | undefined {\n\t\tif (!uri.isUri(workspaceUri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.launches.filter(l => l.workspace && l.workspace.uri.toString() === workspaceUri.toString()).pop();\n\t}\n\n\tget selectedConfiguration(): { launch: ILaunch | undefined, name: string | undefined } {\n\t\treturn {\n\t\t\tlaunch: this.selectedLaunch,\n\t\t\tname: this.selectedName\n\t\t};\n\t}\n\n\tget onDidSelectConfiguration(): Event<void> {\n\t\treturn this._onDidSelectConfigurationName.event;\n\t}\n\n\tgetWorkspaceLaunch(): ILaunch | undefined {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.launches[this.launches.length - 1];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tselectConfiguration(launch: ILaunch | undefined, name?: string): void {\n\t\tconst previousLaunch = this.selectedLaunch;\n\t\tconst previousName = this.selectedName;\n\n\t\tthis.selectedLaunch = launch;\n\t\tconst names = launch ? launch.getConfigurationNames() : [];\n\t\tif (name && names.indexOf(name) >= 0) {\n\t\t\tthis.selectedName = name;\n\t\t}\n\t\tif (!this.selectedName || names.indexOf(this.selectedName) === -1) {\n\t\t\tthis.selectedName = names.length ? names[0] : undefined;\n\t\t}\n\n\t\tconst configuration = this.selectedLaunch && this.selectedName ? this.selectedLaunch.getConfiguration(this.selectedName) : undefined;\n\t\tif (configuration) {\n\t\t\tthis.debugConfigurationTypeContext.set(configuration.type);\n\t\t} else {\n\t\t\tthis.debugConfigurationTypeContext.reset();\n\t\t}\n\n\t\tif (this.selectedLaunch !== previousLaunch || this.selectedName !== previousName) {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tconst modeId = model.getLanguageIdentifier().language;\n\t\tif (!modeId || modeId === 'jsonc' || modeId === 'log') {\n\t\t\t// do not allow breakpoints in our settings files and output\n\t\t\treturn false;\n\t\t}\n\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').allowBreakpointsEverywhere) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.breakpointModeIdsSet.has(modeId);\n\t}\n\n\tgetDebugger(type: string): Debugger | undefined {\n\t\treturn this.debuggers.filter(dbg => strings.equalsIgnoreCase(dbg.type, type)).pop();\n\t}\n\n\tguessDebugger(type?: string): Promise<Debugger | undefined> {\n\t\tif (type) {\n\t\t\tconst adapter = this.getDebugger(type);\n\t\t\treturn Promise.resolve(adapter);\n\t\t}\n\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tlet candidates: Promise<Debugger[]> | undefined;\n\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\tconst model = activeTextEditorWidget.getModel();\n\t\t\tconst language = model ? model.getLanguageIdentifier().language : undefined;\n\t\t\tconst adapters = this.debuggers.filter(a => language && a.languages && a.languages.indexOf(language) >= 0);\n\t\t\tif (adapters.length === 1) {\n\t\t\t\treturn Promise.resolve(adapters[0]);\n\t\t\t}\n\t\t\tif (adapters.length > 1) {\n\t\t\t\tcandidates = Promise.resolve(adapters);\n\t\t\t}\n\t\t}\n\n\t\tif (!candidates) {\n\t\t\tcandidates = this.activateDebuggers('onDebugInitialConfigurations').then(() => this.debuggers.filter(dbg => dbg.hasInitialConfiguration() || dbg.hasConfigurationProvider()));\n\t\t}\n\n\t\treturn candidates.then(debuggers => {\n\t\t\tdebuggers.sort((first, second) => first.label.localeCompare(second.label));\n\t\t\tconst picks = debuggers.map(c => ({ label: c.label, debugger: c }));\n\t\t\treturn this.quickInputService.pick<{ label: string, debugger: Debugger | undefined }>([...picks, { type: 'separator' }, { label: 'More...', debugger: undefined }], { placeHolder: nls.localize('selectDebug', \"Select Environment\") })\n\t\t\t\t.then(picked => {\n\t\t\t\t\tif (picked && picked.debugger) {\n\t\t\t\t\t\treturn picked.debugger;\n\t\t\t\t\t}\n\t\t\t\t\tif (picked) {\n\t\t\t\t\t\tthis.commandService.executeCommand('debug.installAdditionalDebuggers');\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t});\n\t}\n\n\tactivateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\tconst thenables: Promise<any>[] = [\n\t\t\tthis.extensionService.activateByEvent(activationEvent),\n\t\t\tthis.extensionService.activateByEvent('onDebug')\n\t\t];\n\t\tif (debugType) {\n\t\t\tthenables.push(this.extensionService.activateByEvent(`${activationEvent}:${debugType}`));\n\t\t}\n\t\treturn Promise.all(thenables).then(_ => {\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.selectedName) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_CONFIG_NAME_KEY, this.selectedName, StorageScope.WORKSPACE);\n\t\t}\n\t\tif (this.selectedLaunch) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_ROOT, this.selectedLaunch.uri.toString(), StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nabstract class AbstractLaunch {\n\tprotected abstract getConfig(): IGlobalConfig | undefined;\n\n\tgetCompound(name: string): ICompound | undefined {\n\t\tconst config = this.getConfig();\n\t\tif (!config || !config.compounds) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn config.compounds.filter(compound => compound.name === name).pop();\n\t}\n\n\tgetConfigurationNames(includeCompounds = true): string[] {\n\t\tconst config = this.getConfig();\n\t\tif (!config || !config.configurations || !Array.isArray(config.configurations)) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst names = config.configurations.filter(cfg => cfg && typeof cfg.name === 'string').map(cfg => cfg.name);\n\t\t\tif (includeCompounds && config.compounds) {\n\t\t\t\tif (config.compounds) {\n\t\t\t\t\tnames.push(...config.compounds.filter(compound => typeof compound.name === 'string' && compound.configurations && compound.configurations.length)\n\t\t\t\t\t\t.map(compound => compound.name));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn names;\n\t\t}\n\t}\n\n\tgetConfiguration(name: string): IConfig | undefined {\n\t\t// We need to clone the configuration in order to be able to make changes to it #42198\n\t\tconst config = objects.deepClone(this.getConfig());\n\t\tif (!config || !config.configurations) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn config.configurations.filter(config => config && config.name === name).shift();\n\t}\n\n\tget hidden(): boolean {\n\t\treturn false;\n\t}\n}\n\nclass Launch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\tprivate configurationManager: ConfigurationManager,\n\t\tpublic workspace: IWorkspaceFolder,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tget uri(): uri {\n\t\treturn resources.joinPath(this.workspace.uri, '/.vscode/launch.json');\n\t}\n\n\tget name(): string {\n\t\treturn this.workspace.name;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch', { resource: this.workspace.uri }).workspaceFolder;\n\t}\n\n\topenConfigFile(sideBySide: boolean, preserveFocus: boolean, type?: string): Promise<{ editor: IEditor | null, created: boolean }> {\n\t\tconst resource = this.uri;\n\t\tlet created = false;\n\n\t\treturn this.fileService.resolveContent(resource).then(content => content.value, err => {\n\t\t\t// launch.json not found: create one by collecting launch configs from debugConfigProviders\n\t\t\treturn this.configurationManager.guessDebugger(type).then(adapter => {\n\t\t\t\tif (adapter) {\n\t\t\t\t\treturn this.configurationManager.provideDebugConfigurations(this.workspace.uri, adapter.type).then(initialConfigs => {\n\t\t\t\t\t\treturn adapter.getInitialConfigurationContent(initialConfigs);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}).then(content => {\n\n\t\t\t\tif (!content) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\n\t\t\t\tcreated = true; // pin only if config file is created #8727\n\t\t\t\treturn this.fileService.updateContent(resource, content).then(() => {\n\t\t\t\t\t// convert string into IContent; see #32135\n\t\t\t\t\treturn content;\n\t\t\t\t});\n\t\t\t});\n\t\t}).then(content => {\n\t\t\tif (!content) {\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\t\t\tconst index = content.indexOf(`\"${this.configurationManager.selectedConfiguration.name}\"`);\n\t\t\tlet startLineNumber = 1;\n\t\t\tfor (let i = 0; i < index; i++) {\n\t\t\t\tif (content.charAt(i) === '\\n') {\n\t\t\t\t\tstartLineNumber++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst selection = startLineNumber > 1 ? { startLineNumber, startColumn: 4 } : undefined;\n\n\t\t\treturn Promise.resolve(this.editorService.openEditor({\n\t\t\t\tresource,\n\t\t\t\toptions: {\n\t\t\t\t\tselection,\n\t\t\t\t\tpreserveFocus,\n\t\t\t\t\tpinned: created,\n\t\t\t\t\trevealIfVisible: true\n\t\t\t\t},\n\t\t\t}, sideBySide ? SIDE_GROUP : ACTIVE_GROUP).then(editor => ({ editor, created })));\n\t\t}, (error: Error) => {\n\t\t\tthrow new Error(nls.localize('DebugConfig.failed', \"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\", error.message));\n\t\t});\n\t}\n}\n\nclass WorkspaceLaunch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.contextService.getWorkspace().configuration!;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('workspace', \"workspace\");\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').workspace;\n\t}\n\n\topenConfigFile(sideBySide: boolean, preserveFocus: boolean, type?: string): Promise<{ editor: IEditor | null, created: boolean }> {\n\t\treturn this.editorService.openEditor({\n\t\t\tresource: this.contextService.getWorkspace().configuration!,\n\t\t\toptions: { preserveFocus }\n\t\t}, sideBySide ? SIDE_GROUP : ACTIVE_GROUP).then(editor => ({ editor, created: false }));\n\t}\n}\n\nclass UserLaunch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper();\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.preferencesService.userSettingsResource;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('user settings', \"user settings\");\n\t}\n\n\tget hidden(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').user;\n\t}\n\n\topenConfigFile(sideBySide: boolean, preserveFocus: boolean, type?: string): Promise<{ editor: IEditor | null, created: boolean }> {\n\t\treturn this.preferencesService.openGlobalSettings(false, { preserveFocus }).then(editor => ({ editor, created: false }));\n\t}\n}\n"]}]}