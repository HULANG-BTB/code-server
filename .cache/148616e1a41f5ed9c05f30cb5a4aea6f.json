{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/uriIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/uriIpc.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\"], function (require, exports, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DefaultURITransformer = new class {\n        transformIncoming(uri) {\n            return uri;\n        }\n        transformOutgoing(uri) {\n            return uri;\n        }\n        transformOutgoingURI(uri) {\n            return uri;\n        }\n    };\n    function _transformOutgoingURIs(obj, transformer, depth) {\n        if (!obj || depth > 200) {\n            return null;\n        }\n        if (typeof obj === 'object') {\n            if (obj instanceof uri_1.URI) {\n                return transformer.transformOutgoing(obj);\n            }\n            // walk object (or array)\n            for (let key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    const r = _transformOutgoingURIs(obj[key], transformer, depth + 1);\n                    if (r !== null) {\n                        obj[key] = r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    function transformOutgoingURIs(obj, transformer) {\n        const result = _transformOutgoingURIs(obj, transformer, 0);\n        if (result === null) {\n            // no change\n            return obj;\n        }\n        return result;\n    }\n    exports.transformOutgoingURIs = transformOutgoingURIs;\n    function _transformIncomingURIs(obj, transformer, revive, depth) {\n        if (!obj || depth > 200) {\n            return null;\n        }\n        if (typeof obj === 'object') {\n            if (obj.$mid === 1) {\n                return revive ? uri_1.URI.revive(transformer.transformIncoming(obj)) : transformer.transformIncoming(obj);\n            }\n            // walk object (or array)\n            for (let key in obj) {\n                if (Object.hasOwnProperty.call(obj, key)) {\n                    const r = _transformIncomingURIs(obj[key], transformer, revive, depth + 1);\n                    if (r !== null) {\n                        obj[key] = r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    function transformIncomingURIs(obj, transformer) {\n        const result = _transformIncomingURIs(obj, transformer, false, 0);\n        if (result === null) {\n            // no change\n            return obj;\n        }\n        return result;\n    }\n    exports.transformIncomingURIs = transformIncomingURIs;\n    function transformAndReviveIncomingURIs(obj, transformer) {\n        const result = _transformIncomingURIs(obj, transformer, true, 0);\n        if (result === null) {\n            // no change\n            return obj;\n        }\n        return result;\n    }\n    exports.transformAndReviveIncomingURIs = transformAndReviveIncomingURIs;\n});\n",null]}