{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/oneCursor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/oneCursor.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar OneCursor = /** @class */ (function () {\n    function OneCursor(context) {\n        this._selTrackedRange = null;\n        this._trackSelection = true;\n        this._setState(context, new cursorCommon_1.SingleCursorState(new range_1.Range(1, 1, 1, 1), 0, new position_1.Position(1, 1), 0), new cursorCommon_1.SingleCursorState(new range_1.Range(1, 1, 1, 1), 0, new position_1.Position(1, 1), 0));\n    }\n    OneCursor.prototype.dispose = function (context) {\n        this._removeTrackedRange(context);\n    };\n    OneCursor.prototype.startTrackingSelection = function (context) {\n        this._trackSelection = true;\n        this._updateTrackedRange(context);\n    };\n    OneCursor.prototype.stopTrackingSelection = function (context) {\n        this._trackSelection = false;\n        this._removeTrackedRange(context);\n    };\n    OneCursor.prototype._updateTrackedRange = function (context) {\n        if (!this._trackSelection) {\n            // don't track the selection\n            return;\n        }\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, model_1.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n    };\n    OneCursor.prototype._removeTrackedRange = function (context) {\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, model_1.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n    };\n    OneCursor.prototype.asCursorState = function () {\n        return new cursorCommon_1.CursorState(this.modelState, this.viewState);\n    };\n    OneCursor.prototype.readSelectionFromMarkers = function (context) {\n        var range = context.model._getTrackedRange(this._selTrackedRange);\n        if (this.modelState.selection.getDirection() === selection_1.SelectionDirection.LTR) {\n            return new selection_1.Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        }\n        return new selection_1.Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n    };\n    OneCursor.prototype.ensureValidState = function (context) {\n        this._setState(context, this.modelState, this.viewState);\n    };\n    OneCursor.prototype.setState = function (context, modelState, viewState) {\n        this._setState(context, modelState, viewState);\n    };\n    OneCursor.prototype._setState = function (context, modelState, viewState) {\n        if (!modelState) {\n            if (!viewState) {\n                return;\n            }\n            // We only have the view state => compute the model state\n            var selectionStart = context.model.validateRange(context.convertViewRangeToModelRange(viewState.selectionStart));\n            var position = context.model.validatePosition(context.convertViewPositionToModelPosition(viewState.position.lineNumber, viewState.position.column));\n            modelState = new cursorCommon_1.SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new model state\n            var selectionStart = context.model.validateRange(modelState.selectionStart);\n            var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n            var position = context.model.validatePosition(modelState.position);\n            var leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n            modelState = new cursorCommon_1.SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n        }\n        if (!viewState) {\n            // We only have the model state => compute the view state\n            var viewSelectionStart1 = context.convertModelPositionToViewPosition(new position_1.Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n            var viewSelectionStart2 = context.convertModelPositionToViewPosition(new position_1.Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n            var viewSelectionStart = new range_1.Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n            var viewPosition = context.convertModelPositionToViewPosition(modelState.position);\n            viewState = new cursorCommon_1.SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new view state\n            var viewSelectionStart = context.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n            var viewPosition = context.validateViewPosition(viewState.position, modelState.position);\n            viewState = new cursorCommon_1.SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        this.modelState = modelState;\n        this.viewState = viewState;\n        this._updateTrackedRange(context);\n    };\n    return OneCursor;\n}());\nexports.OneCursor = OneCursor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/oneCursor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/oneCursor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CursorContext, CursorState, SingleCursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection, SelectionDirection } from 'vs/editor/common/core/selection';\nimport { TrackedRangeStickiness } from 'vs/editor/common/model';\n\nexport class OneCursor {\n\n\tpublic modelState: SingleCursorState;\n\tpublic viewState: SingleCursorState;\n\n\tprivate _selTrackedRange: string | null;\n\tprivate _trackSelection: boolean;\n\n\tconstructor(context: CursorContext) {\n\t\tthis._selTrackedRange = null;\n\t\tthis._trackSelection = true;\n\n\t\tthis._setState(\n\t\t\tcontext,\n\t\t\tnew SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0),\n\t\t\tnew SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0)\n\t\t);\n\t}\n\n\tpublic dispose(context: CursorContext): void {\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tpublic startTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = true;\n\t\tthis._updateTrackedRange(context);\n\t}\n\n\tpublic stopTrackingSelection(context: CursorContext): void {\n\t\tthis._trackSelection = false;\n\t\tthis._removeTrackedRange(context);\n\t}\n\n\tprivate _updateTrackedRange(context: CursorContext): void {\n\t\tif (!this._trackSelection) {\n\t\t\t// don't track the selection\n\t\t\treturn;\n\t\t}\n\t\tthis._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t}\n\n\tprivate _removeTrackedRange(context: CursorContext): void {\n\t\tthis._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges);\n\t}\n\n\tpublic asCursorState(): CursorState {\n\t\treturn new CursorState(this.modelState, this.viewState);\n\t}\n\n\tpublic readSelectionFromMarkers(context: CursorContext): Selection {\n\t\tconst range = context.model._getTrackedRange(this._selTrackedRange!)!;\n\t\tif (this.modelState.selection.getDirection() === SelectionDirection.LTR) {\n\t\t\treturn new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n\t\t}\n\t\treturn new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n\t}\n\n\tpublic ensureValidState(context: CursorContext): void {\n\t\tthis._setState(context, this.modelState, this.viewState);\n\t}\n\n\tpublic setState(context: CursorContext, modelState: SingleCursorState | null, viewState: SingleCursorState | null): void {\n\t\tthis._setState(context, modelState, viewState);\n\t}\n\n\tprivate _setState(context: CursorContext, modelState: SingleCursorState | null, viewState: SingleCursorState | null): void {\n\t\tif (!modelState) {\n\t\t\tif (!viewState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// We only have the view state => compute the model state\n\t\t\tconst selectionStart = context.model.validateRange(\n\t\t\t\tcontext.convertViewRangeToModelRange(viewState.selectionStart)\n\t\t\t);\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tcontext.convertViewPositionToModelPosition(viewState.position.lineNumber, viewState.position.column)\n\t\t\t);\n\n\t\t\tmodelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n\t\t} else {\n\t\t\t// Validate new model state\n\t\t\tconst selectionStart = context.model.validateRange(modelState.selectionStart);\n\t\t\tconst selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n\n\t\t\tconst position = context.model.validatePosition(\n\t\t\t\tmodelState.position\n\t\t\t);\n\t\t\tconst leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n\n\t\t\tmodelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n\t\t}\n\n\t\tif (!viewState) {\n\t\t\t// We only have the model state => compute the view state\n\t\t\tconst viewSelectionStart1 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n\t\t\tconst viewSelectionStart2 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n\t\t\tconst viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n\t\t\tconst viewPosition = context.convertModelPositionToViewPosition(modelState.position);\n\t\t\tviewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n\t\t} else {\n\t\t\t// Validate new view state\n\t\t\tconst viewSelectionStart = context.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n\t\t\tconst viewPosition = context.validateViewPosition(viewState.position, modelState.position);\n\t\t\tviewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n\t\t}\n\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\n\t\tthis._updateTrackedRange(context);\n\t}\n}\n"]}]}