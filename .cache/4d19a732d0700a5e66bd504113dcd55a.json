{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar arrays = require(\"vs/base/common/arrays\");\nfunction exceptionToErrorMessage(exception, verbose) {\n    if (exception.message) {\n        if (verbose && (exception.stack || exception.stacktrace)) {\n            return nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), exception.stack || exception.stacktrace);\n        }\n        return detectSystemErrorMessage(exception);\n    }\n    return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\nfunction detectSystemErrorMessage(exception) {\n    // See https://nodejs.org/api/errors.html#errors_class_system_error\n    if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n        return nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n    }\n    return exception.message;\n}\n/**\n * Tries to generate a human readable error message out of the error. If the verbose parameter\n * is set to true, the error message will include stacktrace details if provided.\n *\n * @returns A string containing the error message.\n */\nfunction toErrorMessage(error, verbose) {\n    if (error === void 0) { error = null; }\n    if (verbose === void 0) { verbose = false; }\n    if (!error) {\n        return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n    }\n    if (Array.isArray(error)) {\n        var errors = arrays.coalesce(error);\n        var msg = toErrorMessage(errors[0], verbose);\n        if (errors.length > 1) {\n            return nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n        }\n        return msg;\n    }\n    if (types.isString(error)) {\n        return error;\n    }\n    if (error.detail) {\n        var detail = error.detail;\n        if (detail.error) {\n            return exceptionToErrorMessage(detail.error, verbose);\n        }\n        if (detail.exception) {\n            return exceptionToErrorMessage(detail.exception, verbose);\n        }\n    }\n    if (error.stack) {\n        return exceptionToErrorMessage(error, verbose);\n    }\n    if (error.message) {\n        return error.message;\n    }\n    return nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\nexports.toErrorMessage = toErrorMessage;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/errorMessage.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,4BAA8B;AAC9B,4CAA8C;AAC9C,8CAAgD;AAEhD,SAAS,uBAAuB,CAAC,SAAc,EAAE,OAAgB;IAChE,IAAI,SAAS,CAAC,OAAO,EAAE;QACtB,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,EAAE;YACzD,OAAO,GAAG,CAAC,QAAQ,CAAC,mBAAmB,EAAE,UAAU,EAAE,wBAAwB,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;SACnI;QAED,OAAO,wBAAwB,CAAC,SAAS,CAAC,CAAC;KAC3C;IAED,OAAO,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,qEAAqE,CAAC,CAAC;AACpH,CAAC;AAED,SAAS,wBAAwB,CAAC,SAAc;IAE/C,mEAAmE;IACnE,IAAI,OAAO,SAAS,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,SAAS,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,SAAS,CAAC,OAAO,KAAK,QAAQ,EAAE;QACvH,OAAO,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,+BAA+B,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;KAChG;IAED,OAAO,SAAS,CAAC,OAAO,CAAC;AAC1B,CAAC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,KAAiB,EAAE,OAAwB;IAA3C,sBAAA,EAAA,YAAiB;IAAE,wBAAA,EAAA,eAAwB;IACzE,IAAI,CAAC,KAAK,EAAE;QACX,OAAO,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,qEAAqE,CAAC,CAAC;KACnH;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACzB,IAAM,MAAM,GAAU,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAM,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAE/C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,OAAO,GAAG,CAAC,QAAQ,CAAC,kBAAkB,EAAE,2BAA2B,EAAE,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;SACzF;QAED,OAAO,GAAG,CAAC;KACX;IAED,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAC1B,OAAO,KAAK,CAAC;KACb;IAED,IAAI,KAAK,CAAC,MAAM,EAAE;QACjB,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAE5B,IAAI,MAAM,CAAC,KAAK,EAAE;YACjB,OAAO,uBAAuB,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACtD;QAED,IAAI,MAAM,CAAC,SAAS,EAAE;YACrB,OAAO,uBAAuB,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAC1D;KACD;IAED,IAAI,KAAK,CAAC,KAAK,EAAE;QAChB,OAAO,uBAAuB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;KAC/C;IAED,IAAI,KAAK,CAAC,OAAO,EAAE;QAClB,OAAO,KAAK,CAAC,OAAO,CAAC;KACrB;IAED,OAAO,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,qEAAqE,CAAC,CAAC;AACpH,CAAC;AAzCD,wCAyCC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport * as arrays from 'vs/base/common/arrays';\n\nfunction exceptionToErrorMessage(exception: any, verbose: boolean): string {\n\tif (exception.message) {\n\t\tif (verbose && (exception.stack || exception.stacktrace)) {\n\t\t\treturn nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), exception.stack || exception.stacktrace);\n\t\t}\n\n\t\treturn detectSystemErrorMessage(exception);\n\t}\n\n\treturn nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n\nfunction detectSystemErrorMessage(exception: any): string {\n\n\t// See https://nodejs.org/api/errors.html#errors_class_system_error\n\tif (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n\t\treturn nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n\t}\n\n\treturn exception.message;\n}\n\n/**\n * Tries to generate a human readable error message out of the error. If the verbose parameter\n * is set to true, the error message will include stacktrace details if provided.\n *\n * @returns A string containing the error message.\n */\nexport function toErrorMessage(error: any = null, verbose: boolean = false): string {\n\tif (!error) {\n\t\treturn nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n\t}\n\n\tif (Array.isArray(error)) {\n\t\tconst errors: any[] = arrays.coalesce(error);\n\t\tconst msg = toErrorMessage(errors[0], verbose);\n\n\t\tif (errors.length > 1) {\n\t\t\treturn nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tif (types.isString(error)) {\n\t\treturn error;\n\t}\n\n\tif (error.detail) {\n\t\tconst detail = error.detail;\n\n\t\tif (detail.error) {\n\t\t\treturn exceptionToErrorMessage(detail.error, verbose);\n\t\t}\n\n\t\tif (detail.exception) {\n\t\t\treturn exceptionToErrorMessage(detail.exception, verbose);\n\t\t}\n\t}\n\n\tif (error.stack) {\n\t\treturn exceptionToErrorMessage(error, verbose);\n\t}\n\n\tif (error.message) {\n\t\treturn error.message;\n\t}\n\n\treturn nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n"]}]}