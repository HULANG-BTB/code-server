{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCollection.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/controller/cursorCommon\", \"vs/editor/common/controller/oneCursor\", \"vs/editor/common/core/selection\"], function (require, exports, cursorCommon_1, oneCursor_1, selection_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CursorCollection {\n        constructor(context) {\n            this.context = context;\n            this.primaryCursor = new oneCursor_1.OneCursor(context);\n            this.secondaryCursors = [];\n            this.lastAddedCursorIndex = 0;\n        }\n        dispose() {\n            this.primaryCursor.dispose(this.context);\n            this.killSecondaryCursors();\n        }\n        startTrackingSelections() {\n            this.primaryCursor.startTrackingSelection(this.context);\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                this.secondaryCursors[i].startTrackingSelection(this.context);\n            }\n        }\n        stopTrackingSelections() {\n            this.primaryCursor.stopTrackingSelection(this.context);\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                this.secondaryCursors[i].stopTrackingSelection(this.context);\n            }\n        }\n        updateContext(context) {\n            this.context = context;\n        }\n        ensureValidState() {\n            this.primaryCursor.ensureValidState(this.context);\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                this.secondaryCursors[i].ensureValidState(this.context);\n            }\n        }\n        readSelectionFromMarkers() {\n            let result = [];\n            result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n            }\n            return result;\n        }\n        getAll() {\n            let result = [];\n            result[0] = this.primaryCursor.asCursorState();\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i].asCursorState();\n            }\n            return result;\n        }\n        getViewPositions() {\n            let result = [];\n            result[0] = this.primaryCursor.viewState.position;\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i].viewState.position;\n            }\n            return result;\n        }\n        getSelections() {\n            let result = [];\n            result[0] = this.primaryCursor.modelState.selection;\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i].modelState.selection;\n            }\n            return result;\n        }\n        getViewSelections() {\n            let result = [];\n            result[0] = this.primaryCursor.viewState.selection;\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i].viewState.selection;\n            }\n            return result;\n        }\n        setSelections(selections) {\n            this.setStates(cursorCommon_1.CursorState.fromModelSelections(selections));\n        }\n        getPrimaryCursor() {\n            return this.primaryCursor.asCursorState();\n        }\n        setStates(states) {\n            if (states === null) {\n                return;\n            }\n            this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n            this._setSecondaryStates(states.slice(1));\n        }\n        /**\n         * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n         */\n        _setSecondaryStates(secondaryStates) {\n            const secondaryCursorsLength = this.secondaryCursors.length;\n            const secondaryStatesLength = secondaryStates.length;\n            if (secondaryCursorsLength < secondaryStatesLength) {\n                let createCnt = secondaryStatesLength - secondaryCursorsLength;\n                for (let i = 0; i < createCnt; i++) {\n                    this._addSecondaryCursor();\n                }\n            }\n            else if (secondaryCursorsLength > secondaryStatesLength) {\n                let removeCnt = secondaryCursorsLength - secondaryStatesLength;\n                for (let i = 0; i < removeCnt; i++) {\n                    this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n                }\n            }\n            for (let i = 0; i < secondaryStatesLength; i++) {\n                this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n            }\n        }\n        killSecondaryCursors() {\n            this._setSecondaryStates([]);\n        }\n        _addSecondaryCursor() {\n            this.secondaryCursors.push(new oneCursor_1.OneCursor(this.context));\n            this.lastAddedCursorIndex = this.secondaryCursors.length;\n        }\n        getLastAddedCursorIndex() {\n            if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n                return 0;\n            }\n            return this.lastAddedCursorIndex;\n        }\n        _removeSecondaryCursor(removeIndex) {\n            if (this.lastAddedCursorIndex >= removeIndex + 1) {\n                this.lastAddedCursorIndex--;\n            }\n            this.secondaryCursors[removeIndex].dispose(this.context);\n            this.secondaryCursors.splice(removeIndex, 1);\n        }\n        _getAll() {\n            let result = [];\n            result[0] = this.primaryCursor;\n            for (let i = 0, len = this.secondaryCursors.length; i < len; i++) {\n                result[i + 1] = this.secondaryCursors[i];\n            }\n            return result;\n        }\n        normalize() {\n            if (this.secondaryCursors.length === 0) {\n                return;\n            }\n            let cursors = this._getAll();\n            let sortedCursors = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                sortedCursors.push({\n                    index: i,\n                    selection: cursors[i].modelState.selection,\n                });\n            }\n            sortedCursors.sort((a, b) => {\n                if (a.selection.startLineNumber === b.selection.startLineNumber) {\n                    return a.selection.startColumn - b.selection.startColumn;\n                }\n                return a.selection.startLineNumber - b.selection.startLineNumber;\n            });\n            for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n                const current = sortedCursors[sortedCursorIndex];\n                const next = sortedCursors[sortedCursorIndex + 1];\n                const currentSelection = current.selection;\n                const nextSelection = next.selection;\n                if (!this.context.config.multiCursorMergeOverlapping) {\n                    continue;\n                }\n                let shouldMergeCursors;\n                if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                    // Merge touching cursors if one of them is collapsed\n                    shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n                }\n                else {\n                    // Merge only overlapping cursors (i.e. allow touching ranges)\n                    shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n                }\n                if (shouldMergeCursors) {\n                    const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                    const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                    const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                    const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                    const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                    const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                    if (!looserSelection.equalsSelection(winnerSelection)) {\n                        const resultingRange = looserSelection.plusRange(winnerSelection);\n                        const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                        const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                        // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                        let resultingSelectionIsLTR;\n                        if (looserIndex === this.lastAddedCursorIndex) {\n                            resultingSelectionIsLTR = looserSelectionIsLTR;\n                            this.lastAddedCursorIndex = winnerIndex;\n                        }\n                        else {\n                            // Winner takes it all\n                            resultingSelectionIsLTR = winnerSelectionIsLTR;\n                        }\n                        let resultingSelection;\n                        if (resultingSelectionIsLTR) {\n                            resultingSelection = new selection_1.Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                        }\n                        else {\n                            resultingSelection = new selection_1.Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                        }\n                        sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                        const resultingState = cursorCommon_1.CursorState.fromModelSelection(resultingSelection);\n                        cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                    }\n                    for (const sortedCursor of sortedCursors) {\n                        if (sortedCursor.index > looserIndex) {\n                            sortedCursor.index--;\n                        }\n                    }\n                    cursors.splice(looserIndex, 1);\n                    sortedCursors.splice(looserSortedCursorIndex, 1);\n                    this._removeSecondaryCursor(looserIndex - 1);\n                    sortedCursorIndex--;\n                }\n            }\n        }\n    }\n    exports.CursorCollection = CursorCollection;\n});\n",null]}