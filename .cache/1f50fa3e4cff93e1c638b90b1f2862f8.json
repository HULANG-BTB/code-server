{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewFindWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewFindWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/editor/contrib/find/simpleFindWidget\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, simpleFindWidget_1, contextView_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let WebviewFindWidget = class WebviewFindWidget extends simpleFindWidget_1.SimpleFindWidget {\n        constructor(_webview, contextViewService, contextKeyService) {\n            super(contextViewService, contextKeyService);\n            this._webview = _webview;\n        }\n        dispose() {\n            this._webview = undefined;\n            super.dispose();\n        }\n        find(previous) {\n            if (!this._webview) {\n                return;\n            }\n            const val = this.inputValue;\n            if (val) {\n                this._webview.find(val, { findNext: true, forward: !previous });\n            }\n        }\n        hide() {\n            super.hide();\n            if (this._webview) {\n                this._webview.stopFind(true);\n                this._webview.focus();\n            }\n        }\n        onInputChanged() {\n            if (!this._webview) {\n                return;\n            }\n            const val = this.inputValue;\n            if (val) {\n                this._webview.startFind(val);\n            }\n            else {\n                this._webview.stopFind(false);\n            }\n        }\n        onFocusTrackerFocus() { }\n        onFocusTrackerBlur() { }\n        onFindInputFocusTrackerFocus() { }\n        onFindInputFocusTrackerBlur() { }\n    };\n    WebviewFindWidget = __decorate([\n        __param(1, contextView_1.IContextViewService),\n        __param(2, contextkey_1.IContextKeyService)\n    ], WebviewFindWidget);\n    exports.WebviewFindWidget = WebviewFindWidget;\n});\n",null]}