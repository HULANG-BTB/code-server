{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/marked/marked\", \"vs/base/common/async\", \"vs/base/common/arrays\", \"vs/base/common/platform\", \"vs/base/common/event\", \"vs/base/common/cache\", \"vs/base/common/actions\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\", \"vs/base/browser/event\", \"vs/base/browser/dom\", \"vs/workbench/browser/parts/editor/baseEditor\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/extensions/common/extensions\", \"vs/base/common/keyCodes\", \"vs/workbench/contrib/extensions/common/extensions\", \"vs/workbench/contrib/extensions/electron-browser/extensionsWidgets\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActions\", \"vs/workbench/contrib/webview/electron-browser/webviewElement\", \"vs/platform/keybinding/common/keybinding\", \"vs/base/browser/ui/scrollbar/scrollableElement\", \"vs/platform/opener/common/opener\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/platform/theme/common/themeService\", \"vs/base/browser/ui/keybindingLabel/keybindingLabel\", \"vs/platform/contextkey/common/contextkey\", \"vs/editor/browser/editorExtensions\", \"vs/workbench/services/editor/common/editorService\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/base/common/color\", \"vs/base/common/objects\", \"vs/platform/notification/common/notification\", \"vs/base/common/cancellation\", \"vs/workbench/contrib/extensions/browser/extensionsViewer\", \"vs/workbench/contrib/update/electron-browser/update\", \"vs/base/common/keybindingParser\", \"vs/platform/storage/common/storage\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/base/common/types\", \"vs/workbench/services/themes/common/workbenchThemeService\", \"vs/css!./media/extensionEditor\"], function (require, exports, nls_1, marked, async_1, arrays, platform_1, event_1, cache_1, actions_1, errors_1, lifecycle_1, event_2, dom_1, baseEditor_1, viewlet_1, telemetry_1, instantiation_1, extensionManagement_1, extensions_1, keyCodes_1, extensions_2, extensionsWidgets_1, actionbar_1, extensionsActions_1, webviewElement_1, keybinding_1, scrollableElement_1, opener_1, layoutService_1, themeService_1, keybindingLabel_1, contextkey_1, editorExtensions_1, editorService_1, keybindingsRegistry_1, color_1, objects_1, notification_1, cancellation_1, extensionsViewer_1, update_1, keybindingParser_1, storage_1, extensions_3, configurationRegistry_1, types_1, workbenchThemeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function renderBody(body) {\n        const styleSheetPath = require.toUrl('./media/markdown.css').replace('file://', 'vscode-core-resource://');\n        return `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource:; child-src 'none'; frame-src 'none';\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${styleSheetPath}\">\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<a id=\"scroll-to-top\" role=\"button\" aria-label=\"scroll to top\" href=\"#\"><span class=\"icon\"></span></a>\n\t\t\t\t${body}\n\t\t\t</body>\n\t\t</html>`;\n    }\n    function removeEmbeddedSVGs(documentContent) {\n        const newDocument = new DOMParser().parseFromString(documentContent, 'text/html');\n        // remove all inline svgs\n        const allSVGs = newDocument.documentElement.querySelectorAll('svg');\n        if (allSVGs) {\n            for (let i = 0; i < allSVGs.length; i++) {\n                const svg = allSVGs[i];\n                if (svg.parentNode) {\n                    svg.parentNode.removeChild(allSVGs[i]);\n                }\n            }\n        }\n        return newDocument.documentElement.outerHTML;\n    }\n    class NavBar {\n        constructor(container) {\n            this._onChange = new event_1.Emitter();\n            this.currentId = null;\n            const element = dom_1.append(container, dom_1.$('.navbar'));\n            this.actions = [];\n            this.actionbar = new actionbar_1.ActionBar(element, { animated: false });\n        }\n        get onChange() { return this._onChange.event; }\n        push(id, label, tooltip) {\n            const action = new actions_1.Action(id, label, undefined, true, () => this._update(id, true));\n            action.tooltip = tooltip;\n            this.actions.push(action);\n            this.actionbar.push(action);\n            if (this.actions.length === 1) {\n                this._update(id);\n            }\n        }\n        clear() {\n            this.actions = lifecycle_1.dispose(this.actions);\n            this.actionbar.clear();\n        }\n        update() {\n            this._update(this.currentId);\n        }\n        _update(id = this.currentId, focus) {\n            this.currentId = id;\n            this._onChange.fire({ id, focus: !!focus });\n            this.actions.forEach(a => a.enabled = a.id !== id);\n            return Promise.resolve(undefined);\n        }\n        dispose() {\n            this.actionbar = lifecycle_1.dispose(this.actionbar);\n        }\n    }\n    const NavbarSection = {\n        Readme: 'readme',\n        Contributions: 'contributions',\n        Changelog: 'changelog',\n        Dependencies: 'dependencies',\n        ExtensionPack: 'extensionPack'\n    };\n    let ExtensionEditor = class ExtensionEditor extends baseEditor_1.BaseEditor {\n        constructor(telemetryService, instantiationService, viewletService, extensionsWorkbenchService, themeService, keybindingService, notificationService, openerService, layoutService, extensionTipsService, storageService, extensionService, workbenchThemeService) {\n            super(ExtensionEditor.ID, telemetryService, themeService, storageService);\n            this.instantiationService = instantiationService;\n            this.viewletService = viewletService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            this.themeService = themeService;\n            this.keybindingService = keybindingService;\n            this.notificationService = notificationService;\n            this.openerService = openerService;\n            this.layoutService = layoutService;\n            this.extensionTipsService = extensionTipsService;\n            this.extensionService = extensionService;\n            this.workbenchThemeService = workbenchThemeService;\n            this.layoutParticipants = [];\n            this.contentDisposables = [];\n            this.transientDisposables = [];\n            this.editorLoadComplete = false;\n            this.disposables = [];\n            this.extensionReadme = null;\n            this.extensionChangelog = null;\n            this.extensionManifest = null;\n            this.extensionDependencies = null;\n        }\n        createEditor(parent) {\n            const root = dom_1.append(parent, dom_1.$('.extension-editor'));\n            this.header = dom_1.append(root, dom_1.$('.header'));\n            this.iconContainer = dom_1.append(this.header, dom_1.$('.icon-container'));\n            this.icon = dom_1.append(this.iconContainer, dom_1.$('img.icon', { draggable: false }));\n            const details = dom_1.append(this.header, dom_1.$('.details'));\n            const title = dom_1.append(details, dom_1.$('.title'));\n            this.name = dom_1.append(title, dom_1.$('span.name.clickable', { title: nls_1.localize('name', \"Extension name\") }));\n            this.identifier = dom_1.append(title, dom_1.$('span.identifier', { title: nls_1.localize('extension id', \"Extension identifier\") }));\n            this.preview = dom_1.append(title, dom_1.$('span.preview', { title: nls_1.localize('preview', \"Preview\") }));\n            this.preview.textContent = nls_1.localize('preview', \"Preview\");\n            this.builtin = dom_1.append(title, dom_1.$('span.builtin'));\n            this.builtin.textContent = nls_1.localize('builtin', \"Built-in\");\n            const subtitle = dom_1.append(details, dom_1.$('.subtitle'));\n            this.publisher = dom_1.append(subtitle, dom_1.$('span.publisher.clickable', { title: nls_1.localize('publisher', \"Publisher name\") }));\n            this.installCount = dom_1.append(subtitle, dom_1.$('span.install', { title: nls_1.localize('install count', \"Install count\") }));\n            this.rating = dom_1.append(subtitle, dom_1.$('span.rating.clickable', { title: nls_1.localize('rating', \"Rating\") }));\n            this.repository = dom_1.append(subtitle, dom_1.$('span.repository.clickable'));\n            this.repository.textContent = nls_1.localize('repository', 'Repository');\n            this.repository.style.display = 'none';\n            this.license = dom_1.append(subtitle, dom_1.$('span.license.clickable'));\n            this.license.textContent = nls_1.localize('license', 'License');\n            this.license.style.display = 'none';\n            this.description = dom_1.append(details, dom_1.$('.description'));\n            const extensionActions = dom_1.append(details, dom_1.$('.actions'));\n            this.extensionActionBar = new actionbar_1.ActionBar(extensionActions, {\n                animated: false,\n                actionItemProvider: (action) => {\n                    if (action instanceof extensionsActions_1.ExtensionEditorDropDownAction) {\n                        return action.createActionItem();\n                    }\n                    return undefined;\n                }\n            });\n            this.subtextContainer = dom_1.append(details, dom_1.$('.subtext-container'));\n            this.subtext = dom_1.append(this.subtextContainer, dom_1.$('.subtext'));\n            this.ignoreActionbar = new actionbar_1.ActionBar(this.subtextContainer, { animated: false });\n            this.disposables.push(this.extensionActionBar);\n            this.disposables.push(this.ignoreActionbar);\n            event_1.Event.chain(this.extensionActionBar.onDidRun)\n                .map(({ error }) => error)\n                .filter(error => !!error)\n                .on(this.onError, this, this.disposables);\n            event_1.Event.chain(this.ignoreActionbar.onDidRun)\n                .map(({ error }) => error)\n                .filter(error => !!error)\n                .on(this.onError, this, this.disposables);\n            const body = dom_1.append(root, dom_1.$('.body'));\n            this.navbar = new NavBar(body);\n            this.content = dom_1.append(body, dom_1.$('.content'));\n        }\n        setInput(input, options, token) {\n            const _super = Object.create(null, {\n                setInput: { get: () => super.setInput }\n            });\n            return __awaiter(this, void 0, void 0, function* () {\n                const runningExtensions = yield this.extensionService.getExtensions();\n                const colorThemes = yield this.workbenchThemeService.getColorThemes();\n                const fileIconThemes = yield this.workbenchThemeService.getFileIconThemes();\n                this.activeElement = null;\n                this.editorLoadComplete = false;\n                const extension = input.extension;\n                this.transientDisposables = lifecycle_1.dispose(this.transientDisposables);\n                this.extensionReadme = new cache_1.Cache(() => async_1.createCancelablePromise(token => extension.getReadme(token)));\n                this.extensionChangelog = new cache_1.Cache(() => async_1.createCancelablePromise(token => extension.getChangelog(token)));\n                this.extensionManifest = new cache_1.Cache(() => async_1.createCancelablePromise(token => extension.getManifest(token)));\n                this.extensionDependencies = new cache_1.Cache(() => async_1.createCancelablePromise(token => this.extensionsWorkbenchService.loadDependencies(extension, token)));\n                const remoteBadge = this.instantiationService.createInstance(extensionsWidgets_1.RemoteBadgeWidget, this.iconContainer);\n                const onError = event_1.Event.once(event_2.domEvent(this.icon, 'error'));\n                onError(() => this.icon.src = extension.iconUrlFallback, null, this.transientDisposables);\n                this.icon.src = extension.iconUrl;\n                this.name.textContent = extension.displayName;\n                this.identifier.textContent = extension.identifier.id;\n                this.preview.style.display = extension.preview ? 'inherit' : 'none';\n                this.builtin.style.display = extension.type === extensions_1.ExtensionType.System ? 'inherit' : 'none';\n                this.publisher.textContent = extension.publisherDisplayName;\n                this.description.textContent = extension.description;\n                const extRecommendations = this.extensionTipsService.getAllRecommendationsWithReason();\n                let recommendationsData = {};\n                if (extRecommendations[extension.identifier.id.toLowerCase()]) {\n                    recommendationsData = { recommendationReason: extRecommendations[extension.identifier.id.toLowerCase()].reasonId };\n                }\n                /* __GDPR__\n                \"extensionGallery:openExtension\" : {\n                    \"recommendationReason\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                    \"${include}\": [\n                        \"${GalleryExtensionTelemetryData}\"\n                    ]\n                }\n                */\n                this.telemetryService.publicLog('extensionGallery:openExtension', objects_1.assign(extension.telemetryData, recommendationsData));\n                dom_1.toggleClass(this.name, 'clickable', !!extension.url);\n                dom_1.toggleClass(this.publisher, 'clickable', !!extension.url);\n                dom_1.toggleClass(this.rating, 'clickable', !!extension.url);\n                if (extension.url) {\n                    this.name.onclick = dom_1.finalHandler(() => window.open(extension.url));\n                    this.rating.onclick = dom_1.finalHandler(() => window.open(`${extension.url}#review-details`));\n                    this.publisher.onclick = dom_1.finalHandler(() => {\n                        this.viewletService.openViewlet(extensions_2.VIEWLET_ID, true)\n                            .then(viewlet => viewlet)\n                            .then(viewlet => viewlet.search(`publisher:\"${extension.publisherDisplayName}\"`));\n                    });\n                    if (extension.licenseUrl) {\n                        this.license.onclick = dom_1.finalHandler(() => window.open(extension.licenseUrl));\n                        this.license.style.display = 'initial';\n                    }\n                    else {\n                        this.license.onclick = null;\n                        this.license.style.display = 'none';\n                    }\n                }\n                else {\n                    this.name.onclick = null;\n                    this.rating.onclick = null;\n                    this.publisher.onclick = null;\n                    this.license.onclick = null;\n                    this.license.style.display = 'none';\n                }\n                if (extension.repository) {\n                    this.repository.onclick = dom_1.finalHandler(() => window.open(extension.repository));\n                    this.repository.style.display = 'initial';\n                }\n                else {\n                    this.repository.onclick = null;\n                    this.repository.style.display = 'none';\n                }\n                const widgets = [\n                    remoteBadge,\n                    this.instantiationService.createInstance(extensionsWidgets_1.InstallCountWidget, this.installCount, false),\n                    this.instantiationService.createInstance(extensionsWidgets_1.RatingsWidget, this.rating, false)\n                ];\n                const reloadAction = this.instantiationService.createInstance(extensionsActions_1.ReloadAction);\n                const actions = [\n                    reloadAction,\n                    this.instantiationService.createInstance(extensionsActions_1.StatusLabelAction),\n                    this.instantiationService.createInstance(extensionsActions_1.UpdateAction),\n                    this.instantiationService.createInstance(extensionsActions_1.SetColorThemeAction, colorThemes),\n                    this.instantiationService.createInstance(extensionsActions_1.SetFileIconThemeAction, fileIconThemes),\n                    this.instantiationService.createInstance(extensionsActions_1.EnableDropDownAction),\n                    this.instantiationService.createInstance(extensionsActions_1.DisableDropDownAction, runningExtensions),\n                    this.instantiationService.createInstance(extensionsActions_1.CombinedInstallAction),\n                    this.instantiationService.createInstance(extensionsActions_1.MaliciousStatusLabelAction, true),\n                ];\n                const extensionContainers = this.instantiationService.createInstance(extensions_2.ExtensionContainers, [...actions, ...widgets]);\n                extensionContainers.extension = extension;\n                this.extensionActionBar.clear();\n                this.extensionActionBar.push(actions, { icon: true, label: true });\n                this.transientDisposables.push(...[...actions, ...widgets, extensionContainers]);\n                this.setSubText(extension, reloadAction);\n                this.content.innerHTML = ''; // Clear content before setting navbar actions.\n                this.navbar.clear();\n                this.navbar.onChange(this.onNavbarChange.bind(this, extension), this, this.transientDisposables);\n                if (extension.hasReadme()) {\n                    this.navbar.push(NavbarSection.Readme, nls_1.localize('details', \"Details\"), nls_1.localize('detailstooltip', \"Extension details, rendered from the extension's 'README.md' file\"));\n                }\n                this.extensionManifest.get()\n                    .promise\n                    .then(manifest => {\n                    if (extension.extensionPack.length) {\n                        this.navbar.push(NavbarSection.ExtensionPack, nls_1.localize('extensionPack', \"Extension Pack\"), nls_1.localize('extensionsPack', \"Set of extensions that can be installed together\"));\n                    }\n                    if (manifest && manifest.contributes) {\n                        this.navbar.push(NavbarSection.Contributions, nls_1.localize('contributions', \"Contributions\"), nls_1.localize('contributionstooltip', \"Lists contributions to VS Code by this extension\"));\n                    }\n                    if (extension.hasChangelog()) {\n                        this.navbar.push(NavbarSection.Changelog, nls_1.localize('changelog', \"Changelog\"), nls_1.localize('changelogtooltip', \"Extension update history, rendered from the extension's 'CHANGELOG.md' file\"));\n                    }\n                    if (extension.dependencies.length) {\n                        this.navbar.push(NavbarSection.Dependencies, nls_1.localize('dependencies', \"Dependencies\"), nls_1.localize('dependenciestooltip', \"Lists extensions this extension depends on\"));\n                    }\n                    this.editorLoadComplete = true;\n                });\n                return _super.setInput.call(this, input, options, token);\n            });\n        }\n        setSubText(extension, reloadAction) {\n            dom_1.hide(this.subtextContainer);\n            const ignoreAction = this.instantiationService.createInstance(extensionsActions_1.IgnoreExtensionRecommendationAction);\n            const undoIgnoreAction = this.instantiationService.createInstance(extensionsActions_1.UndoIgnoreExtensionRecommendationAction);\n            ignoreAction.extension = extension;\n            undoIgnoreAction.extension = extension;\n            ignoreAction.enabled = false;\n            undoIgnoreAction.enabled = false;\n            this.ignoreActionbar.clear();\n            this.ignoreActionbar.push([ignoreAction, undoIgnoreAction], { icon: true, label: true });\n            this.transientDisposables.push(ignoreAction, undoIgnoreAction);\n            const extRecommendations = this.extensionTipsService.getAllRecommendationsWithReason();\n            if (extRecommendations[extension.identifier.id.toLowerCase()]) {\n                ignoreAction.enabled = true;\n                this.subtext.textContent = extRecommendations[extension.identifier.id.toLowerCase()].reasonText;\n                dom_1.show(this.subtextContainer);\n            }\n            else if (this.extensionTipsService.getAllIgnoredRecommendations().global.indexOf(extension.identifier.id.toLowerCase()) !== -1) {\n                undoIgnoreAction.enabled = true;\n                this.subtext.textContent = nls_1.localize('recommendationHasBeenIgnored', \"You have chosen not to receive recommendations for this extension.\");\n                dom_1.show(this.subtextContainer);\n            }\n            else {\n                this.subtext.textContent = '';\n            }\n            this.extensionTipsService.onRecommendationChange(change => {\n                if (change.extensionId.toLowerCase() === extension.identifier.id.toLowerCase()) {\n                    if (change.isRecommended) {\n                        undoIgnoreAction.enabled = false;\n                        const extRecommendations = this.extensionTipsService.getAllRecommendationsWithReason();\n                        if (extRecommendations[extension.identifier.id.toLowerCase()]) {\n                            ignoreAction.enabled = true;\n                            this.subtext.textContent = extRecommendations[extension.identifier.id.toLowerCase()].reasonText;\n                        }\n                    }\n                    else {\n                        undoIgnoreAction.enabled = true;\n                        ignoreAction.enabled = false;\n                        this.subtext.textContent = nls_1.localize('recommendationHasBeenIgnored', \"You have chosen not to receive recommendations for this extension.\");\n                    }\n                }\n            });\n            this.transientDisposables.push(reloadAction.onDidChange(e => {\n                if (e.tooltip) {\n                    this.subtext.textContent = reloadAction.tooltip;\n                    dom_1.show(this.subtextContainer);\n                    ignoreAction.enabled = false;\n                    undoIgnoreAction.enabled = false;\n                }\n                if (e.enabled === true) {\n                    dom_1.show(this.subtextContainer);\n                }\n                if (e.enabled === false) {\n                    dom_1.hide(this.subtextContainer);\n                }\n            }));\n        }\n        focus() {\n            if (this.activeElement) {\n                this.activeElement.focus();\n            }\n        }\n        showFind() {\n            if (this.activeElement instanceof webviewElement_1.WebviewElement) {\n                this.activeElement.showFind();\n            }\n        }\n        onNavbarChange(extension, { id, focus }) {\n            if (this.editorLoadComplete) {\n                /* __GDPR__\n                    \"extensionEditor:navbarChange\" : {\n                        \"navItem\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"${include}\": [\n                            \"${GalleryExtensionTelemetryData}\"\n                        ]\n                    }\n                */\n                this.telemetryService.publicLog('extensionEditor:navbarChange', objects_1.assign(extension.telemetryData, { navItem: id }));\n            }\n            this.contentDisposables = lifecycle_1.dispose(this.contentDisposables);\n            this.content.innerHTML = '';\n            this.activeElement = null;\n            this.open(id, extension)\n                .then(activeElement => {\n                this.activeElement = activeElement;\n                if (focus) {\n                    this.focus();\n                }\n            });\n        }\n        open(id, extension) {\n            switch (id) {\n                case NavbarSection.Readme: return this.openReadme();\n                case NavbarSection.Contributions: return this.openContributions();\n                case NavbarSection.Changelog: return this.openChangelog();\n                case NavbarSection.Dependencies: return this.openDependencies(extension);\n                case NavbarSection.ExtensionPack: return this.openExtensionPack(extension);\n            }\n            return Promise.resolve(null);\n        }\n        openMarkdown(cacheResult, noContentCopy) {\n            return this.loadContents(() => cacheResult)\n                .then(marked.parse)\n                .then(renderBody)\n                .then(removeEmbeddedSVGs)\n                .then(body => {\n                const wbeviewElement = this.instantiationService.createInstance(webviewElement_1.WebviewElement, this.layoutService.getContainer(layoutService_1.Parts.EDITOR_PART), {\n                    enableFindWidget: true,\n                }, {\n                    svgWhiteList: this.extensionsWorkbenchService.allowedBadgeProviders\n                });\n                wbeviewElement.mountTo(this.content);\n                const removeLayoutParticipant = arrays.insert(this.layoutParticipants, wbeviewElement);\n                this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));\n                wbeviewElement.contents = body;\n                wbeviewElement.onDidClickLink(link => {\n                    if (!link) {\n                        return;\n                    }\n                    // Whitelist supported schemes for links\n                    if (['http', 'https', 'mailto'].indexOf(link.scheme) >= 0 || (link.scheme === 'command' && link.path === update_1.ShowCurrentReleaseNotesAction.ID)) {\n                        this.openerService.open(link);\n                    }\n                }, null, this.contentDisposables);\n                this.contentDisposables.push(wbeviewElement);\n                return wbeviewElement;\n            })\n                .then(undefined, () => {\n                const p = dom_1.append(this.content, dom_1.$('p.nocontent'));\n                p.textContent = noContentCopy;\n                return p;\n            });\n        }\n        openReadme() {\n            return this.openMarkdown(this.extensionReadme.get(), nls_1.localize('noReadme', \"No README available.\"));\n        }\n        openChangelog() {\n            return this.openMarkdown(this.extensionChangelog.get(), nls_1.localize('noChangelog', \"No Changelog available.\"));\n        }\n        openContributions() {\n            const content = dom_1.$('div', { class: 'subcontent', tabindex: '0' });\n            return this.loadContents(() => this.extensionManifest.get())\n                .then(manifest => {\n                if (!manifest) {\n                    return content;\n                }\n                const scrollableContent = new scrollableElement_1.DomScrollableElement(content, {});\n                const layout = () => scrollableContent.scanDomNode();\n                const removeLayoutParticipant = arrays.insert(this.layoutParticipants, { layout });\n                this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));\n                const renders = [\n                    this.renderSettings(content, manifest, layout),\n                    this.renderCommands(content, manifest, layout),\n                    this.renderLanguages(content, manifest, layout),\n                    this.renderColorThemes(content, manifest, layout),\n                    this.renderIconThemes(content, manifest, layout),\n                    this.renderColors(content, manifest, layout),\n                    this.renderJSONValidation(content, manifest, layout),\n                    this.renderDebuggers(content, manifest, layout),\n                    this.renderViewContainers(content, manifest, layout),\n                    this.renderViews(content, manifest, layout),\n                    this.renderLocalizations(content, manifest, layout)\n                ];\n                const isEmpty = !renders.reduce((v, r) => r || v, false);\n                scrollableContent.scanDomNode();\n                if (isEmpty) {\n                    dom_1.append(content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noContributions', \"No Contributions\");\n                    dom_1.append(this.content, content);\n                }\n                else {\n                    dom_1.append(this.content, scrollableContent.getDomNode());\n                    this.contentDisposables.push(scrollableContent);\n                }\n                return content;\n            }, () => {\n                dom_1.append(content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noContributions', \"No Contributions\");\n                dom_1.append(this.content, content);\n                return content;\n            });\n        }\n        openDependencies(extension) {\n            if (extension.dependencies.length === 0) {\n                dom_1.append(this.content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noDependencies', \"No Dependencies\");\n                return Promise.resolve(this.content);\n            }\n            return this.loadContents(() => this.extensionDependencies.get())\n                .then(extensionDependencies => {\n                if (extensionDependencies) {\n                    const content = dom_1.$('div', { class: 'subcontent' });\n                    const scrollableContent = new scrollableElement_1.DomScrollableElement(content, {});\n                    dom_1.append(this.content, scrollableContent.getDomNode());\n                    this.contentDisposables.push(scrollableContent);\n                    const dependenciesTree = this.renderDependencies(content, extensionDependencies);\n                    const layout = () => {\n                        scrollableContent.scanDomNode();\n                        const scrollDimensions = scrollableContent.getScrollDimensions();\n                        dependenciesTree.layout(scrollDimensions.height);\n                    };\n                    const removeLayoutParticipant = arrays.insert(this.layoutParticipants, { layout });\n                    this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));\n                    this.contentDisposables.push(dependenciesTree);\n                    scrollableContent.scanDomNode();\n                    return { focus() { dependenciesTree.domFocus(); } };\n                }\n                else {\n                    dom_1.append(this.content, dom_1.$('p.nocontent')).textContent = nls_1.localize('noDependencies', \"No Dependencies\");\n                    return Promise.resolve(this.content);\n                }\n            }, error => {\n                dom_1.append(this.content, dom_1.$('p.nocontent')).textContent = error;\n                this.notificationService.error(error);\n                return this.content;\n            });\n        }\n        renderDependencies(container, extensionDependencies) {\n            class ExtensionData {\n                constructor(extensionDependencies) {\n                    this.extensionDependencies = extensionDependencies;\n                }\n                get extension() {\n                    return this.extensionDependencies.extension;\n                }\n                get parent() {\n                    return this.extensionDependencies.dependent ? new ExtensionData(this.extensionDependencies.dependent) : null;\n                }\n                get hasChildren() {\n                    return this.extensionDependencies.hasDependencies;\n                }\n                getChildren() {\n                    return this.extensionDependencies.dependencies ? Promise.resolve(this.extensionDependencies.dependencies.map(d => new ExtensionData(d))) : Promise.resolve(null);\n                }\n            }\n            return this.instantiationService.createInstance(extensionsViewer_1.ExtensionsTree, new ExtensionData(extensionDependencies), container);\n        }\n        openExtensionPack(extension) {\n            const content = dom_1.$('div', { class: 'subcontent' });\n            const scrollableContent = new scrollableElement_1.DomScrollableElement(content, {});\n            dom_1.append(this.content, scrollableContent.getDomNode());\n            this.contentDisposables.push(scrollableContent);\n            const extensionsPackTree = this.renderExtensionPack(content, extension);\n            const layout = () => {\n                scrollableContent.scanDomNode();\n                const scrollDimensions = scrollableContent.getScrollDimensions();\n                extensionsPackTree.layout(scrollDimensions.height);\n            };\n            const removeLayoutParticipant = arrays.insert(this.layoutParticipants, { layout });\n            this.contentDisposables.push(lifecycle_1.toDisposable(removeLayoutParticipant));\n            this.contentDisposables.push(extensionsPackTree);\n            scrollableContent.scanDomNode();\n            return Promise.resolve({ focus() { extensionsPackTree.domFocus(); } });\n        }\n        renderExtensionPack(container, extension) {\n            const extensionsWorkbenchService = this.extensionsWorkbenchService;\n            class ExtensionData {\n                constructor(extension, parent) {\n                    this.extension = extension;\n                    this.parent = types_1.withUndefinedAsNull(parent);\n                }\n                get hasChildren() {\n                    return this.extension.extensionPack.length > 0;\n                }\n                getChildren() {\n                    if (this.hasChildren) {\n                        const names = arrays.distinct(this.extension.extensionPack, e => e.toLowerCase());\n                        return extensionsWorkbenchService.queryGallery({ names, pageSize: names.length }, cancellation_1.CancellationToken.None)\n                            .then(result => result.firstPage.map(extension => new ExtensionData(extension, this)));\n                    }\n                    return Promise.resolve(null);\n                }\n            }\n            return this.instantiationService.createInstance(extensionsViewer_1.ExtensionsTree, new ExtensionData(extension), container);\n        }\n        renderSettings(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const configuration = contributes && contributes.configuration;\n            let properties = {};\n            if (Array.isArray(configuration)) {\n                configuration.forEach(config => {\n                    properties = Object.assign({}, properties, config.properties);\n                });\n            }\n            else if (configuration) {\n                properties = configuration.properties;\n            }\n            const contrib = properties ? Object.keys(properties) : [];\n            if (!contrib.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('settings', \"Settings ({0})\", contrib.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('setting name', \"Name\")), dom_1.$('th', undefined, nls_1.localize('description', \"Description\")), dom_1.$('th', undefined, nls_1.localize('default', \"Default\"))), ...contrib.map(key => dom_1.$('tr', undefined, dom_1.$('td', undefined, dom_1.$('code', undefined, key)), dom_1.$('td', undefined, properties[key].description), dom_1.$('td', undefined, dom_1.$('code', undefined, `${types_1.isUndefined(properties[key].default) ? configurationRegistry_1.getDefaultValue(properties[key].type) : properties[key].default}`))))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderDebuggers(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.debuggers || [];\n            if (!contrib.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('debuggers', \"Debuggers ({0})\", contrib.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('debugger name', \"Name\")), dom_1.$('th', undefined, nls_1.localize('debugger type', \"Type\"))), ...contrib.map(d => dom_1.$('tr', undefined, dom_1.$('td', undefined, d.label), dom_1.$('td', undefined, d.type)))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderViewContainers(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.viewsContainers || {};\n            let viewContainers = Object.keys(contrib).reduce((result, location) => {\n                let viewContainersForLocation = contrib[location];\n                result.push(...viewContainersForLocation.map(viewContainer => (Object.assign({}, viewContainer, { location }))));\n                return result;\n            }, []);\n            if (!viewContainers.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('viewContainers', \"View Containers ({0})\", viewContainers.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('view container id', \"ID\")), dom_1.$('th', undefined, nls_1.localize('view container title', \"Title\")), dom_1.$('th', undefined, nls_1.localize('view container location', \"Where\"))), ...viewContainers.map(viewContainer => dom_1.$('tr', undefined, dom_1.$('td', undefined, viewContainer.id), dom_1.$('td', undefined, viewContainer.title), dom_1.$('td', undefined, viewContainer.location)))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderViews(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.views || {};\n            let views = Object.keys(contrib).reduce((result, location) => {\n                let viewsForLocation = contrib[location];\n                result.push(...viewsForLocation.map(view => (Object.assign({}, view, { location }))));\n                return result;\n            }, []);\n            if (!views.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('views', \"Views ({0})\", views.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('view id', \"ID\")), dom_1.$('th', undefined, nls_1.localize('view name', \"Name\")), dom_1.$('th', undefined, nls_1.localize('view location', \"Where\"))), ...views.map(view => dom_1.$('tr', undefined, dom_1.$('td', undefined, view.id), dom_1.$('td', undefined, view.name), dom_1.$('td', undefined, view.location)))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderLocalizations(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const localizations = contributes && contributes.localizations || [];\n            if (!localizations.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('localizations', \"Localizations ({0})\", localizations.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('localizations language id', \"Language Id\")), dom_1.$('th', undefined, nls_1.localize('localizations language name', \"Language Name\")), dom_1.$('th', undefined, nls_1.localize('localizations localized language name', \"Language Name (Localized)\"))), ...localizations.map(localization => dom_1.$('tr', undefined, dom_1.$('td', undefined, localization.languageId), dom_1.$('td', undefined, localization.languageName || ''), dom_1.$('td', undefined, localization.localizedLanguageName || '')))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderColorThemes(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.themes || [];\n            if (!contrib.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('colorThemes', \"Color Themes ({0})\", contrib.length)), dom_1.$('ul', undefined, ...contrib.map(theme => dom_1.$('li', undefined, theme.label))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderIconThemes(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.iconThemes || [];\n            if (!contrib.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('iconThemes', \"Icon Themes ({0})\", contrib.length)), dom_1.$('ul', undefined, ...contrib.map(theme => dom_1.$('li', undefined, theme.label))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderColors(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const colors = contributes && contributes.colors;\n            if (!colors || !colors.length) {\n                return false;\n            }\n            function colorPreview(colorReference) {\n                let result = [];\n                if (colorReference && colorReference[0] === '#') {\n                    let color = color_1.Color.fromHex(colorReference);\n                    if (color) {\n                        result.push(dom_1.$('span', { class: 'colorBox', style: 'background-color: ' + color_1.Color.Format.CSS.format(color) }, ''));\n                    }\n                }\n                result.push(dom_1.$('code', undefined, colorReference));\n                return result;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('colors', \"Colors ({0})\", colors.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('colorId', \"Id\")), dom_1.$('th', undefined, nls_1.localize('description', \"Description\")), dom_1.$('th', undefined, nls_1.localize('defaultDark', \"Dark Default\")), dom_1.$('th', undefined, nls_1.localize('defaultLight', \"Light Default\")), dom_1.$('th', undefined, nls_1.localize('defaultHC', \"High Contrast Default\"))), ...colors.map(color => dom_1.$('tr', undefined, dom_1.$('td', undefined, dom_1.$('code', undefined, color.id)), dom_1.$('td', undefined, color.description), dom_1.$('td', undefined, ...colorPreview(color.defaults.dark)), dom_1.$('td', undefined, ...colorPreview(color.defaults.light)), dom_1.$('td', undefined, ...colorPreview(color.defaults.highContrast))))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderJSONValidation(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const contrib = contributes && contributes.jsonValidation || [];\n            if (!contrib.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('JSON Validation', \"JSON Validation ({0})\", contrib.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('fileMatch', \"File Match\")), dom_1.$('th', undefined, nls_1.localize('schema', \"Schema\"))), ...contrib.map(v => dom_1.$('tr', undefined, dom_1.$('td', undefined, dom_1.$('code', undefined, v.fileMatch)), dom_1.$('td', undefined, v.url)))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderCommands(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const rawCommands = contributes && contributes.commands || [];\n            const commands = rawCommands.map(c => ({\n                id: c.command,\n                title: c.title,\n                keybindings: [],\n                menus: []\n            }));\n            const byId = arrays.index(commands, c => c.id);\n            const menus = contributes && contributes.menus || {};\n            Object.keys(menus).forEach(context => {\n                menus[context].forEach(menu => {\n                    let command = byId[menu.command];\n                    if (!command) {\n                        command = { id: menu.command, title: '', keybindings: [], menus: [context] };\n                        byId[command.id] = command;\n                        commands.push(command);\n                    }\n                    else {\n                        command.menus.push(context);\n                    }\n                });\n            });\n            const rawKeybindings = contributes && contributes.keybindings ? (Array.isArray(contributes.keybindings) ? contributes.keybindings : [contributes.keybindings]) : [];\n            rawKeybindings.forEach(rawKeybinding => {\n                const keybinding = this.resolveKeybinding(rawKeybinding);\n                if (!keybinding) {\n                    return;\n                }\n                let command = byId[rawKeybinding.command];\n                if (!command) {\n                    command = { id: rawKeybinding.command, title: '', keybindings: [keybinding], menus: [] };\n                    byId[command.id] = command;\n                    commands.push(command);\n                }\n                else {\n                    command.keybindings.push(keybinding);\n                }\n            });\n            if (!commands.length) {\n                return false;\n            }\n            const renderKeybinding = (keybinding) => {\n                const element = dom_1.$('');\n                new keybindingLabel_1.KeybindingLabel(element, platform_1.OS).set(keybinding);\n                return element;\n            };\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('commands', \"Commands ({0})\", commands.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('command name', \"Name\")), dom_1.$('th', undefined, nls_1.localize('description', \"Description\")), dom_1.$('th', undefined, nls_1.localize('keyboard shortcuts', \"Keyboard Shortcuts\")), dom_1.$('th', undefined, nls_1.localize('menuContexts', \"Menu Contexts\"))), ...commands.map(c => dom_1.$('tr', undefined, dom_1.$('td', undefined, dom_1.$('code', undefined, c.id)), dom_1.$('td', undefined, c.title), dom_1.$('td', undefined, ...c.keybindings.map(keybinding => renderKeybinding(keybinding))), dom_1.$('td', undefined, ...c.menus.map(context => dom_1.$('code', undefined, context)))))));\n            dom_1.append(container, details);\n            return true;\n        }\n        renderLanguages(container, manifest, onDetailsToggle) {\n            const contributes = manifest.contributes;\n            const rawLanguages = contributes && contributes.languages || [];\n            const languages = rawLanguages.map(l => ({\n                id: l.id,\n                name: (l.aliases || [])[0] || l.id,\n                extensions: l.extensions || [],\n                hasGrammar: false,\n                hasSnippets: false\n            }));\n            const byId = arrays.index(languages, l => l.id);\n            const grammars = contributes && contributes.grammars || [];\n            grammars.forEach(grammar => {\n                let language = byId[grammar.language];\n                if (!language) {\n                    language = { id: grammar.language, name: grammar.language, extensions: [], hasGrammar: true, hasSnippets: false };\n                    byId[language.id] = language;\n                    languages.push(language);\n                }\n                else {\n                    language.hasGrammar = true;\n                }\n            });\n            const snippets = contributes && contributes.snippets || [];\n            snippets.forEach(snippet => {\n                let language = byId[snippet.language];\n                if (!language) {\n                    language = { id: snippet.language, name: snippet.language, extensions: [], hasGrammar: false, hasSnippets: true };\n                    byId[language.id] = language;\n                    languages.push(language);\n                }\n                else {\n                    language.hasSnippets = true;\n                }\n            });\n            if (!languages.length) {\n                return false;\n            }\n            const details = dom_1.$('details', { open: true, ontoggle: onDetailsToggle }, dom_1.$('summary', undefined, nls_1.localize('languages', \"Languages ({0})\", languages.length)), dom_1.$('table', undefined, dom_1.$('tr', undefined, dom_1.$('th', undefined, nls_1.localize('language id', \"ID\")), dom_1.$('th', undefined, nls_1.localize('language name', \"Name\")), dom_1.$('th', undefined, nls_1.localize('file extensions', \"File Extensions\")), dom_1.$('th', undefined, nls_1.localize('grammar', \"Grammar\")), dom_1.$('th', undefined, nls_1.localize('snippets', \"Snippets\"))), ...languages.map(l => dom_1.$('tr', undefined, dom_1.$('td', undefined, l.id), dom_1.$('td', undefined, l.name), dom_1.$('td', undefined, ...dom_1.join(l.extensions.map(ext => dom_1.$('code', undefined, ext)), ' ')), dom_1.$('td', undefined, document.createTextNode(l.hasGrammar ? '✔︎' : '—')), dom_1.$('td', undefined, document.createTextNode(l.hasSnippets ? '✔︎' : '—'))))));\n            dom_1.append(container, details);\n            return true;\n        }\n        resolveKeybinding(rawKeyBinding) {\n            let key;\n            switch (process.platform) {\n                case 'win32':\n                    key = rawKeyBinding.win;\n                    break;\n                case 'linux':\n                    key = rawKeyBinding.linux;\n                    break;\n                case 'darwin':\n                    key = rawKeyBinding.mac;\n                    break;\n            }\n            const keyBinding = keybindingParser_1.KeybindingParser.parseKeybinding(key || rawKeyBinding.key, platform_1.OS);\n            if (!keyBinding) {\n                return null;\n            }\n            return this.keybindingService.resolveKeybinding(keyBinding)[0];\n        }\n        loadContents(loadingTask) {\n            dom_1.addClass(this.content, 'loading');\n            const result = loadingTask();\n            const onDone = () => dom_1.removeClass(this.content, 'loading');\n            result.promise.then(onDone, onDone);\n            this.contentDisposables.push(lifecycle_1.toDisposable(() => result.dispose()));\n            return result.promise;\n        }\n        layout() {\n            this.layoutParticipants.forEach(p => p.layout());\n        }\n        onError(err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                return;\n            }\n            this.notificationService.error(err);\n        }\n        dispose() {\n            this.transientDisposables = lifecycle_1.dispose(this.transientDisposables);\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ExtensionEditor.ID = 'workbench.editor.extension';\n    ExtensionEditor = __decorate([\n        __param(0, telemetry_1.ITelemetryService),\n        __param(1, instantiation_1.IInstantiationService),\n        __param(2, viewlet_1.IViewletService),\n        __param(3, extensions_2.IExtensionsWorkbenchService),\n        __param(4, themeService_1.IThemeService),\n        __param(5, keybinding_1.IKeybindingService),\n        __param(6, notification_1.INotificationService),\n        __param(7, opener_1.IOpenerService),\n        __param(8, layoutService_1.IWorkbenchLayoutService),\n        __param(9, extensionManagement_1.IExtensionTipsService),\n        __param(10, storage_1.IStorageService),\n        __param(11, extensions_3.IExtensionService),\n        __param(12, workbenchThemeService_1.IWorkbenchThemeService)\n    ], ExtensionEditor);\n    exports.ExtensionEditor = ExtensionEditor;\n    class ShowExtensionEditorFindCommand extends editorExtensions_1.Command {\n        runCommand(accessor, args) {\n            const extensionEditor = this.getExtensionEditor(accessor);\n            if (extensionEditor) {\n                extensionEditor.showFind();\n            }\n        }\n        getExtensionEditor(accessor) {\n            const activeControl = accessor.get(editorService_1.IEditorService).activeControl;\n            if (activeControl instanceof ExtensionEditor) {\n                return activeControl;\n            }\n            return null;\n        }\n    }\n    const showCommand = new ShowExtensionEditorFindCommand({\n        id: 'editor.action.extensioneditor.showfind',\n        precondition: contextkey_1.ContextKeyExpr.equals('activeEditor', ExtensionEditor.ID),\n        kbOpts: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        }\n    });\n    showCommand.register();\n});\n",null]}