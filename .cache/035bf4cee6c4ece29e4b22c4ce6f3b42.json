{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/node/ps.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/ps.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"child_process\", \"vs/base/common/amd\"], function (require, exports, child_process_1, amd_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function listProcesses(rootPid) {\n        return new Promise((resolve, reject) => {\n            let rootItem;\n            const map = new Map();\n            function addToTree(pid, ppid, cmd, load, mem) {\n                const parent = map.get(ppid);\n                if (pid === rootPid || parent) {\n                    const item = {\n                        name: findName(cmd),\n                        cmd,\n                        pid,\n                        ppid,\n                        load,\n                        mem\n                    };\n                    map.set(pid, item);\n                    if (pid === rootPid) {\n                        rootItem = item;\n                    }\n                    if (parent) {\n                        if (!parent.children) {\n                            parent.children = [];\n                        }\n                        parent.children.push(item);\n                        if (parent.children.length > 1) {\n                            parent.children = parent.children.sort((a, b) => a.pid - b.pid);\n                        }\n                    }\n                }\n            }\n            function findName(cmd) {\n                const SHARED_PROCESS_HINT = /--disable-blink-features=Auxclick/;\n                const WINDOWS_WATCHER_HINT = /\\\\watcher\\\\win32\\\\CodeHelper\\.exe/;\n                const WINDOWS_CRASH_REPORTER = /--crashes-directory/;\n                const WINDOWS_PTY = /\\\\pipe\\\\winpty-control/;\n                const WINDOWS_CONSOLE_HOST = /conhost\\.exe/;\n                const TYPE = /--type=([a-zA-Z-]+)/;\n                // find windows file watcher\n                if (WINDOWS_WATCHER_HINT.exec(cmd)) {\n                    return 'watcherService ';\n                }\n                // find windows crash reporter\n                if (WINDOWS_CRASH_REPORTER.exec(cmd)) {\n                    return 'electron-crash-reporter';\n                }\n                // find windows pty process\n                if (WINDOWS_PTY.exec(cmd)) {\n                    return 'winpty-process';\n                }\n                //find windows console host process\n                if (WINDOWS_CONSOLE_HOST.exec(cmd)) {\n                    return 'console-window-host (Windows internal process)';\n                }\n                // find \"--type=xxxx\"\n                let matches = TYPE.exec(cmd);\n                if (matches && matches.length === 2) {\n                    if (matches[1] === 'renderer') {\n                        if (SHARED_PROCESS_HINT.exec(cmd)) {\n                            return 'shared-process';\n                        }\n                        return `window`;\n                    }\n                    return matches[1];\n                }\n                // find all xxxx.js\n                const JS = /[a-zA-Z-]+\\.js/g;\n                let result = '';\n                do {\n                    matches = JS.exec(cmd);\n                    if (matches) {\n                        result += matches + ' ';\n                    }\n                } while (matches);\n                if (result) {\n                    if (cmd.indexOf('node ') < 0 && cmd.indexOf('node.exe') < 0) {\n                        return `electron_node ${result}`;\n                    }\n                }\n                return cmd;\n            }\n            if (process.platform === 'win32') {\n                const cleanUNCPrefix = (value) => {\n                    if (value.indexOf('\\\\\\\\?\\\\') === 0) {\n                        return value.substr(4);\n                    }\n                    else if (value.indexOf('\\\\??\\\\') === 0) {\n                        return value.substr(4);\n                    }\n                    else if (value.indexOf('\"\\\\\\\\?\\\\') === 0) {\n                        return '\"' + value.substr(5);\n                    }\n                    else if (value.indexOf('\"\\\\??\\\\') === 0) {\n                        return '\"' + value.substr(5);\n                    }\n                    else {\n                        return value;\n                    }\n                };\n                (new Promise((resolve_1, reject_1) => { require(['windows-process-tree'], resolve_1, reject_1); })).then(windowsProcessTree => {\n                    windowsProcessTree.getProcessList(rootPid, (processList) => {\n                        windowsProcessTree.getProcessCpuUsage(processList, (completeProcessList) => {\n                            const processItems = new Map();\n                            completeProcessList.forEach(process => {\n                                const commandLine = cleanUNCPrefix(process.commandLine || '');\n                                processItems.set(process.pid, {\n                                    name: findName(commandLine),\n                                    cmd: commandLine,\n                                    pid: process.pid,\n                                    ppid: process.ppid,\n                                    load: process.cpu || 0,\n                                    mem: process.memory || 0\n                                });\n                            });\n                            rootItem = processItems.get(rootPid);\n                            if (rootItem) {\n                                processItems.forEach(item => {\n                                    const parent = processItems.get(item.ppid);\n                                    if (parent) {\n                                        if (!parent.children) {\n                                            parent.children = [];\n                                        }\n                                        parent.children.push(item);\n                                    }\n                                });\n                                processItems.forEach(item => {\n                                    if (item.children) {\n                                        item.children = item.children.sort((a, b) => a.pid - b.pid);\n                                    }\n                                });\n                                resolve(rootItem);\n                            }\n                            else {\n                                reject(new Error(`Root process ${rootPid} not found`));\n                            }\n                        });\n                    }, windowsProcessTree.ProcessDataFlag.CommandLine | windowsProcessTree.ProcessDataFlag.Memory);\n                });\n            }\n            else { // OS X & Linux\n                const CMD = '/bin/ps -ax -o pid=,ppid=,pcpu=,pmem=,command=';\n                const PID_CMD = /^\\s*([0-9]+)\\s+([0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+(.+)$/;\n                // Set numeric locale to ensure '.' is used as the decimal separator\n                child_process_1.exec(CMD, { maxBuffer: 1000 * 1024, env: { LC_NUMERIC: 'en_US.UTF-8' } }, (err, stdout, stderr) => {\n                    if (err || stderr) {\n                        reject(err || stderr.toString());\n                    }\n                    else {\n                        const lines = stdout.toString().split('\\n');\n                        for (const line of lines) {\n                            const matches = PID_CMD.exec(line.trim());\n                            if (matches && matches.length === 6) {\n                                addToTree(parseInt(matches[1]), parseInt(matches[2]), matches[5], parseFloat(matches[3]), parseFloat(matches[4]));\n                            }\n                        }\n                        if (process.platform === 'linux') {\n                            // Flatten rootItem to get a list of all VSCode processes\n                            let processes = [rootItem];\n                            const pids = [];\n                            while (processes.length) {\n                                const process = processes.shift();\n                                if (process) {\n                                    pids.push(process.pid);\n                                    if (process.children) {\n                                        processes = processes.concat(process.children);\n                                    }\n                                }\n                            }\n                            // The cpu usage value reported on Linux is the average over the process lifetime,\n                            // recalculate the usage over a one second interval\n                            // JSON.stringify is needed to escape spaces, https://github.com/nodejs/node/issues/6803\n                            let cmd = JSON.stringify(amd_1.getPathFromAmdModule(require, 'vs/base/node/cpuUsage.sh'));\n                            cmd += ' ' + pids.join(' ');\n                            child_process_1.exec(cmd, {}, (err, stdout, stderr) => {\n                                if (err || stderr) {\n                                    reject(err || stderr.toString());\n                                }\n                                else {\n                                    const cpuUsage = stdout.toString().split('\\n');\n                                    for (let i = 0; i < pids.length; i++) {\n                                        const processInfo = map.get(pids[i]);\n                                        processInfo.load = parseFloat(cpuUsage[i]);\n                                    }\n                                    resolve(rootItem);\n                                }\n                            });\n                        }\n                        else {\n                            resolve(rootItem);\n                        }\n                    }\n                });\n            }\n        });\n    }\n    exports.listProcesses = listProcesses;\n});\n",null]}