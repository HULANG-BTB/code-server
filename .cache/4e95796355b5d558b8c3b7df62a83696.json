{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/instantiation/common/instantiation\"], function (require, exports, contextkey_1, instantiation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.TERMINAL_PANEL_ID = 'workbench.panel.terminal';\n    /** A context key that is set when there is at least one opened integrated terminal. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_IS_OPEN = new contextkey_1.RawContextKey('terminalIsOpen', false);\n    /** A context key that is set when the integrated terminal has focus. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FOCUS = new contextkey_1.RawContextKey('terminalFocus', false);\n    /** A context key that is set when the integrated terminal does not have focus. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_NOT_FOCUSED = exports.KEYBINDING_CONTEXT_TERMINAL_FOCUS.toNegated();\n    /** A keybinding context key that is set when the integrated terminal has text selected. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED = new contextkey_1.RawContextKey('terminalTextSelected', false);\n    /** A keybinding context key that is set when the integrated terminal does not have text selected. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_TEXT_NOT_SELECTED = exports.KEYBINDING_CONTEXT_TERMINAL_TEXT_SELECTED.toNegated();\n    /**  A context key that is set when the find widget in integrated terminal is visible. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE = new contextkey_1.RawContextKey('terminalFindWidgetVisible', false);\n    /**  A context key that is set when the find widget in integrated terminal is not visible. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_NOT_VISIBLE = exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE.toNegated();\n    /**  A context key that is set when the find widget find input in integrated terminal is focused. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_FOCUSED = new contextkey_1.RawContextKey('terminalFindWidgetInputFocused', false);\n    /**  A context key that is set when the find widget in integrated terminal is focused. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_FOCUSED = new contextkey_1.RawContextKey('terminalFindWidgetFocused', false);\n    /**  A context key that is set when the find widget find input in integrated terminal is not focused. */\n    exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_NOT_FOCUSED = exports.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_INPUT_FOCUSED.toNegated();\n    exports.IS_WORKSPACE_SHELL_ALLOWED_STORAGE_KEY = 'terminal.integrated.isWorkspaceShellAllowed';\n    exports.NEVER_SUGGEST_SELECT_WINDOWS_SHELL_STORAGE_KEY = 'terminal.integrated.neverSuggestSelectWindowsShell';\n    exports.NEVER_MEASURE_RENDER_TIME_STORAGE_KEY = 'terminal.integrated.neverMeasureRenderTime';\n    // The creation of extension host terminals is delayed by this value (milliseconds). The purpose of\n    // this delay is to allow the terminal instance to initialize correctly and have its ID set before\n    // trying to create the corressponding object on the ext host.\n    exports.EXT_HOST_CREATION_DELAY = 100;\n    exports.ITerminalService = instantiation_1.createDecorator('terminalService');\n    exports.TerminalCursorStyle = {\n        BLOCK: 'block',\n        LINE: 'line',\n        UNDERLINE: 'underline'\n    };\n    exports.TERMINAL_CONFIG_SECTION = 'terminal.integrated';\n    exports.DEFAULT_LETTER_SPACING = 0;\n    exports.MINIMUM_LETTER_SPACING = -5;\n    exports.DEFAULT_LINE_HEIGHT = 1;\n    var Direction;\n    (function (Direction) {\n        Direction[Direction[\"Left\"] = 0] = \"Left\";\n        Direction[Direction[\"Right\"] = 1] = \"Right\";\n        Direction[Direction[\"Up\"] = 2] = \"Up\";\n        Direction[Direction[\"Down\"] = 3] = \"Down\";\n    })(Direction = exports.Direction || (exports.Direction = {}));\n    var ProcessState;\n    (function (ProcessState) {\n        // The process has not been initialized yet.\n        ProcessState[ProcessState[\"UNINITIALIZED\"] = 0] = \"UNINITIALIZED\";\n        // The process is currently launching, the process is marked as launching\n        // for a short duration after being created and is helpful to indicate\n        // whether the process died as a result of bad shell and args.\n        ProcessState[ProcessState[\"LAUNCHING\"] = 1] = \"LAUNCHING\";\n        // The process is running normally.\n        ProcessState[ProcessState[\"RUNNING\"] = 2] = \"RUNNING\";\n        // The process was killed during launch, likely as a result of bad shell and\n        // args.\n        ProcessState[ProcessState[\"KILLED_DURING_LAUNCH\"] = 3] = \"KILLED_DURING_LAUNCH\";\n        // The process was killed by the user (the event originated from VS Code).\n        ProcessState[ProcessState[\"KILLED_BY_USER\"] = 4] = \"KILLED_BY_USER\";\n        // The process was killed by itself, for example the shell crashed or `exit`\n        // was run.\n        ProcessState[ProcessState[\"KILLED_BY_PROCESS\"] = 5] = \"KILLED_BY_PROCESS\";\n    })(ProcessState = exports.ProcessState || (exports.ProcessState = {}));\n    var LinuxDistro;\n    (function (LinuxDistro) {\n        LinuxDistro[LinuxDistro[\"Fedora\"] = 0] = \"Fedora\";\n        LinuxDistro[LinuxDistro[\"Ubuntu\"] = 1] = \"Ubuntu\";\n        LinuxDistro[LinuxDistro[\"Unknown\"] = 2] = \"Unknown\";\n    })(LinuxDistro = exports.LinuxDistro || (exports.LinuxDistro = {}));\n});\n",null]}