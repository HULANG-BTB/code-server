{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/tokenization.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/tokenization.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"vs/base/common/color\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar ParsedTokenThemeRule = /** @class */ (function () {\n    function ParsedTokenThemeRule(token, index, fontStyle, foreground, background) {\n        this.token = token;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n    return ParsedTokenThemeRule;\n}());\nexports.ParsedTokenThemeRule = ParsedTokenThemeRule;\n/**\n * Parse a raw theme into rules.\n */\nfunction parseTokenTheme(source) {\n    if (!source || !Array.isArray(source)) {\n        return [];\n    }\n    var result = [], resultLen = 0;\n    for (var i = 0, len = source.length; i < len; i++) {\n        var entry = source[i];\n        var fontStyle = modes_1.FontStyle.NotSet;\n        if (typeof entry.fontStyle === 'string') {\n            fontStyle = modes_1.FontStyle.None;\n            var segments = entry.fontStyle.split(' ');\n            for (var j = 0, lenJ = segments.length; j < lenJ; j++) {\n                var segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | modes_1.FontStyle.Italic;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | modes_1.FontStyle.Bold;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | modes_1.FontStyle.Underline;\n                        break;\n                }\n            }\n        }\n        var foreground = null;\n        if (typeof entry.foreground === 'string') {\n            foreground = entry.foreground;\n        }\n        var background = null;\n        if (typeof entry.background === 'string') {\n            background = entry.background;\n        }\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n    }\n    return result;\n}\nexports.parseTokenTheme = parseTokenTheme;\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort(function (a, b) {\n        var r = strcmp(a.token, b.token);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    var defaultFontStyle = modes_1.FontStyle.None;\n    var defaultForeground = '000000';\n    var defaultBackground = 'ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n        var incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== modes_1.FontStyle.NotSet) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    var colorMap = new ColorMap();\n    // start with token colors from custom token themes\n    for (var _i = 0, customTokenColors_1 = customTokenColors; _i < customTokenColors_1.length; _i++) {\n        var color = customTokenColors_1[_i];\n        colorMap.getId(color);\n    }\n    var foregroundColorId = colorMap.getId(defaultForeground);\n    var backgroundColorId = colorMap.getId(defaultBackground);\n    var defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n    var root = new ThemeTrieElement(defaults);\n    for (var i = 0, len = parsedThemeRules.length; i < len; i++) {\n        var rule = parsedThemeRules[i];\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new TokenTheme(colorMap, root);\n}\nvar colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nvar ColorMap = /** @class */ (function () {\n    function ColorMap() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = new Map();\n    }\n    ColorMap.prototype.getId = function (color) {\n        if (color === null) {\n            return 0;\n        }\n        var match = color.match(colorRegExp);\n        if (!match) {\n            throw new Error('Illegal value for token color: ' + color);\n        }\n        color = match[1].toUpperCase();\n        var value = this._color2id.get(color);\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id.set(color, value);\n        this._id2color[value] = color_1.Color.fromHex('#' + color);\n        return value;\n    };\n    ColorMap.prototype.getColorMap = function () {\n        return this._id2color.slice(0);\n    };\n    return ColorMap;\n}());\nexports.ColorMap = ColorMap;\nvar TokenTheme = /** @class */ (function () {\n    function TokenTheme(colorMap, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._cache = new Map();\n    }\n    TokenTheme.createFromRawTokenTheme = function (source, customTokenColors) {\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    };\n    TokenTheme.createFromParsedTokenTheme = function (source, customTokenColors) {\n        return resolveParsedTokenThemeRules(source, customTokenColors);\n    };\n    TokenTheme.prototype.getColorMap = function () {\n        return this._colorMap.getColorMap();\n    };\n    /**\n     * used for testing purposes\n     */\n    TokenTheme.prototype.getThemeTrieElement = function () {\n        return this._root.toExternalThemeTrieElement();\n    };\n    TokenTheme.prototype._match = function (token) {\n        return this._root.match(token);\n    };\n    TokenTheme.prototype.match = function (languageId, token) {\n        // The cache contains the metadata without the language bits set.\n        var result = this._cache.get(token);\n        if (typeof result === 'undefined') {\n            var rule = this._match(token);\n            var standardToken = toStandardTokenType(token);\n            result = (rule.metadata\n                | (standardToken << modes_1.MetadataConsts.TOKEN_TYPE_OFFSET)) >>> 0;\n            this._cache.set(token, result);\n        }\n        return (result\n            | (languageId << modes_1.MetadataConsts.LANGUAGEID_OFFSET)) >>> 0;\n    };\n    return TokenTheme;\n}());\nexports.TokenTheme = TokenTheme;\nvar STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nfunction toStandardTokenType(tokenType) {\n    var m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n        return modes_1.StandardTokenType.Other;\n    }\n    switch (m[1]) {\n        case 'comment':\n            return modes_1.StandardTokenType.Comment;\n        case 'string':\n            return modes_1.StandardTokenType.String;\n        case 'regex':\n            return modes_1.StandardTokenType.RegEx;\n        case 'regexp':\n            return modes_1.StandardTokenType.RegEx;\n    }\n    throw new Error('Unexpected match for standard token type!');\n}\nexports.toStandardTokenType = toStandardTokenType;\nfunction strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexports.strcmp = strcmp;\nvar ThemeTrieElementRule = /** @class */ (function () {\n    function ThemeTrieElementRule(fontStyle, foreground, background) {\n        this._fontStyle = fontStyle;\n        this._foreground = foreground;\n        this._background = background;\n        this.metadata = ((this._fontStyle << modes_1.MetadataConsts.FONT_STYLE_OFFSET)\n            | (this._foreground << modes_1.MetadataConsts.FOREGROUND_OFFSET)\n            | (this._background << modes_1.MetadataConsts.BACKGROUND_OFFSET)) >>> 0;\n    }\n    ThemeTrieElementRule.prototype.clone = function () {\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    };\n    ThemeTrieElementRule.prototype.acceptOverwrite = function (fontStyle, foreground, background) {\n        if (fontStyle !== modes_1.FontStyle.NotSet) {\n            this._fontStyle = fontStyle;\n        }\n        if (foreground !== modes_1.ColorId.None) {\n            this._foreground = foreground;\n        }\n        if (background !== modes_1.ColorId.None) {\n            this._background = background;\n        }\n        this.metadata = ((this._fontStyle << modes_1.MetadataConsts.FONT_STYLE_OFFSET)\n            | (this._foreground << modes_1.MetadataConsts.FOREGROUND_OFFSET)\n            | (this._background << modes_1.MetadataConsts.BACKGROUND_OFFSET)) >>> 0;\n    };\n    return ThemeTrieElementRule;\n}());\nexports.ThemeTrieElementRule = ThemeTrieElementRule;\nvar ExternalThemeTrieElement = /** @class */ (function () {\n    function ExternalThemeTrieElement(mainRule, children) {\n        this.mainRule = mainRule;\n        this.children = children || Object.create(null);\n    }\n    return ExternalThemeTrieElement;\n}());\nexports.ExternalThemeTrieElement = ExternalThemeTrieElement;\nvar ThemeTrieElement = /** @class */ (function () {\n    function ThemeTrieElement(mainRule) {\n        this._mainRule = mainRule;\n        this._children = new Map();\n    }\n    /**\n     * used for testing purposes\n     */\n    ThemeTrieElement.prototype.toExternalThemeTrieElement = function () {\n        var children = Object.create(null);\n        this._children.forEach(function (element, index) {\n            children[index] = element.toExternalThemeTrieElement();\n        });\n        return new ExternalThemeTrieElement(this._mainRule, children);\n    };\n    ThemeTrieElement.prototype.match = function (token) {\n        if (token === '') {\n            return this._mainRule;\n        }\n        var dotIndex = token.indexOf('.');\n        var head;\n        var tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        var child = this._children.get(head);\n        if (typeof child !== 'undefined') {\n            return child.match(tail);\n        }\n        return this._mainRule;\n    };\n    ThemeTrieElement.prototype.insert = function (token, fontStyle, foreground, background) {\n        if (token === '') {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n            return;\n        }\n        var dotIndex = token.indexOf('.');\n        var head;\n        var tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        var child = this._children.get(head);\n        if (typeof child === 'undefined') {\n            child = new ThemeTrieElement(this._mainRule.clone());\n            this._children.set(head, child);\n        }\n        child.insert(tail, fontStyle, foreground, background);\n    };\n    return ThemeTrieElement;\n}());\nexports.ThemeTrieElement = ThemeTrieElement;\nfunction generateTokensCSSForColorMap(colorMap) {\n    var rules = [];\n    for (var i = 1, len = colorMap.length; i < len; i++) {\n        var color = colorMap[i];\n        rules[i] = \".mtk\" + i + \" { color: \" + color + \"; }\";\n    }\n    rules.push('.mtki { font-style: italic; }');\n    rules.push('.mtkb { font-weight: bold; }');\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n    return rules.join('\\n');\n}\nexports.generateTokensCSSForColorMap = generateTokensCSSForColorMap;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/tokenization.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/tokenization.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { ColorId, FontStyle, LanguageId, MetadataConsts, StandardTokenType } from 'vs/editor/common/modes';\n\nexport interface ITokenThemeRule {\n\ttoken: string;\n\tforeground?: string;\n\tbackground?: string;\n\tfontStyle?: string;\n}\n\nexport class ParsedTokenThemeRule {\n\t_parsedThemeRuleBrand: void;\n\n\treadonly token: string;\n\treadonly index: number;\n\n\t/**\n\t * -1 if not set. An or mask of `FontStyle` otherwise.\n\t */\n\treadonly fontStyle: FontStyle;\n\treadonly foreground: string | null;\n\treadonly background: string | null;\n\n\tconstructor(\n\t\ttoken: string,\n\t\tindex: number,\n\t\tfontStyle: number,\n\t\tforeground: string | null,\n\t\tbackground: string | null,\n\t) {\n\t\tthis.token = token;\n\t\tthis.index = index;\n\t\tthis.fontStyle = fontStyle;\n\t\tthis.foreground = foreground;\n\t\tthis.background = background;\n\t}\n}\n\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source: ITokenThemeRule[]): ParsedTokenThemeRule[] {\n\tif (!source || !Array.isArray(source)) {\n\t\treturn [];\n\t}\n\tlet result: ParsedTokenThemeRule[] = [], resultLen = 0;\n\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\tlet entry = source[i];\n\n\t\tlet fontStyle: number = FontStyle.NotSet;\n\t\tif (typeof entry.fontStyle === 'string') {\n\t\t\tfontStyle = FontStyle.None;\n\n\t\t\tlet segments = entry.fontStyle.split(' ');\n\t\t\tfor (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n\t\t\t\tlet segment = segments[j];\n\t\t\t\tswitch (segment) {\n\t\t\t\t\tcase 'italic':\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Italic;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bold':\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Bold;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'underline':\n\t\t\t\t\t\tfontStyle = fontStyle | FontStyle.Underline;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet foreground: string | null = null;\n\t\tif (typeof entry.foreground === 'string') {\n\t\t\tforeground = entry.foreground;\n\t\t}\n\n\t\tlet background: string | null = null;\n\t\tif (typeof entry.background === 'string') {\n\t\t\tbackground = entry.background;\n\t\t}\n\n\t\tresult[resultLen++] = new ParsedTokenThemeRule(\n\t\t\tentry.token || '',\n\t\t\ti,\n\t\t\tfontStyle,\n\t\t\tforeground,\n\t\t\tbackground\n\t\t);\n\t}\n\n\treturn result;\n}\n\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules: ParsedTokenThemeRule[], customTokenColors: string[]): TokenTheme {\n\n\t// Sort rules lexicographically, and then by index if necessary\n\tparsedThemeRules.sort((a, b) => {\n\t\tlet r = strcmp(a.token, b.token);\n\t\tif (r !== 0) {\n\t\t\treturn r;\n\t\t}\n\t\treturn a.index - b.index;\n\t});\n\n\t// Determine defaults\n\tlet defaultFontStyle = FontStyle.None;\n\tlet defaultForeground = '000000';\n\tlet defaultBackground = 'ffffff';\n\twhile (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n\t\tlet incomingDefaults = parsedThemeRules.shift()!;\n\t\tif (incomingDefaults.fontStyle !== FontStyle.NotSet) {\n\t\t\tdefaultFontStyle = incomingDefaults.fontStyle;\n\t\t}\n\t\tif (incomingDefaults.foreground !== null) {\n\t\t\tdefaultForeground = incomingDefaults.foreground;\n\t\t}\n\t\tif (incomingDefaults.background !== null) {\n\t\t\tdefaultBackground = incomingDefaults.background;\n\t\t}\n\t}\n\tlet colorMap = new ColorMap();\n\n\t// start with token colors from custom token themes\n\tfor (let color of customTokenColors) {\n\t\tcolorMap.getId(color);\n\t}\n\n\n\tlet foregroundColorId = colorMap.getId(defaultForeground);\n\tlet backgroundColorId = colorMap.getId(defaultBackground);\n\n\tlet defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n\tlet root = new ThemeTrieElement(defaults);\n\tfor (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n\t\tlet rule = parsedThemeRules[i];\n\t\troot.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n\t}\n\n\treturn new TokenTheme(colorMap, root);\n}\n\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\n\nexport class ColorMap {\n\n\tprivate _lastColorId: number;\n\tprivate readonly _id2color: Color[];\n\tprivate readonly _color2id: Map<string, ColorId>;\n\n\tconstructor() {\n\t\tthis._lastColorId = 0;\n\t\tthis._id2color = [];\n\t\tthis._color2id = new Map<string, ColorId>();\n\t}\n\n\tpublic getId(color: string | null): ColorId {\n\t\tif (color === null) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst match = color.match(colorRegExp);\n\t\tif (!match) {\n\t\t\tthrow new Error('Illegal value for token color: ' + color);\n\t\t}\n\t\tcolor = match[1].toUpperCase();\n\t\tlet value = this._color2id.get(color);\n\t\tif (value) {\n\t\t\treturn value;\n\t\t}\n\t\tvalue = ++this._lastColorId;\n\t\tthis._color2id.set(color, value);\n\t\tthis._id2color[value] = Color.fromHex('#' + color);\n\t\treturn value;\n\t}\n\n\tpublic getColorMap(): Color[] {\n\t\treturn this._id2color.slice(0);\n\t}\n\n}\n\nexport class TokenTheme {\n\n\tpublic static createFromRawTokenTheme(source: ITokenThemeRule[], customTokenColors: string[]): TokenTheme {\n\t\treturn this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n\t}\n\n\tpublic static createFromParsedTokenTheme(source: ParsedTokenThemeRule[], customTokenColors: string[]): TokenTheme {\n\t\treturn resolveParsedTokenThemeRules(source, customTokenColors);\n\t}\n\n\tprivate readonly _colorMap: ColorMap;\n\tprivate readonly _root: ThemeTrieElement;\n\tprivate readonly _cache: Map<string, number>;\n\n\tconstructor(colorMap: ColorMap, root: ThemeTrieElement) {\n\t\tthis._colorMap = colorMap;\n\t\tthis._root = root;\n\t\tthis._cache = new Map<string, number>();\n\t}\n\n\tpublic getColorMap(): Color[] {\n\t\treturn this._colorMap.getColorMap();\n\t}\n\n\t/**\n\t * used for testing purposes\n\t */\n\tpublic getThemeTrieElement(): ExternalThemeTrieElement {\n\t\treturn this._root.toExternalThemeTrieElement();\n\t}\n\n\tpublic _match(token: string): ThemeTrieElementRule {\n\t\treturn this._root.match(token);\n\t}\n\n\tpublic match(languageId: LanguageId, token: string): number {\n\t\t// The cache contains the metadata without the language bits set.\n\t\tlet result = this._cache.get(token);\n\t\tif (typeof result === 'undefined') {\n\t\t\tlet rule = this._match(token);\n\t\t\tlet standardToken = toStandardTokenType(token);\n\t\t\tresult = (\n\t\t\t\trule.metadata\n\t\t\t\t| (standardToken << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t\t) >>> 0;\n\t\t\tthis._cache.set(token, result);\n\t\t}\n\n\t\treturn (\n\t\t\tresult\n\t\t\t| (languageId << MetadataConsts.LANGUAGEID_OFFSET)\n\t\t) >>> 0;\n\t}\n}\n\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType: string): StandardTokenType {\n\tlet m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n\tif (!m) {\n\t\treturn StandardTokenType.Other;\n\t}\n\tswitch (m[1]) {\n\t\tcase 'comment':\n\t\t\treturn StandardTokenType.Comment;\n\t\tcase 'string':\n\t\t\treturn StandardTokenType.String;\n\t\tcase 'regex':\n\t\t\treturn StandardTokenType.RegEx;\n\t\tcase 'regexp':\n\t\t\treturn StandardTokenType.RegEx;\n\t}\n\tthrow new Error('Unexpected match for standard token type!');\n}\n\nexport function strcmp(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t}\n\tif (a > b) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nexport class ThemeTrieElementRule {\n\t_themeTrieElementRuleBrand: void;\n\n\tprivate _fontStyle: FontStyle;\n\tprivate _foreground: ColorId;\n\tprivate _background: ColorId;\n\tpublic metadata: number;\n\n\tconstructor(fontStyle: FontStyle, foreground: ColorId, background: ColorId) {\n\t\tthis._fontStyle = fontStyle;\n\t\tthis._foreground = foreground;\n\t\tthis._background = background;\n\t\tthis.metadata = (\n\t\t\t(this._fontStyle << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t| (this._foreground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t| (this._background << MetadataConsts.BACKGROUND_OFFSET)\n\t\t) >>> 0;\n\t}\n\n\tpublic clone(): ThemeTrieElementRule {\n\t\treturn new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n\t}\n\n\tpublic acceptOverwrite(fontStyle: FontStyle, foreground: ColorId, background: ColorId): void {\n\t\tif (fontStyle !== FontStyle.NotSet) {\n\t\t\tthis._fontStyle = fontStyle;\n\t\t}\n\t\tif (foreground !== ColorId.None) {\n\t\t\tthis._foreground = foreground;\n\t\t}\n\t\tif (background !== ColorId.None) {\n\t\t\tthis._background = background;\n\t\t}\n\t\tthis.metadata = (\n\t\t\t(this._fontStyle << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t| (this._foreground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t| (this._background << MetadataConsts.BACKGROUND_OFFSET)\n\t\t) >>> 0;\n\t}\n}\n\nexport class ExternalThemeTrieElement {\n\n\tpublic readonly mainRule: ThemeTrieElementRule;\n\tpublic readonly children: { [segment: string]: ExternalThemeTrieElement };\n\n\tconstructor(mainRule: ThemeTrieElementRule, children?: { [segment: string]: ExternalThemeTrieElement }) {\n\t\tthis.mainRule = mainRule;\n\t\tthis.children = children || Object.create(null);\n\t}\n}\n\nexport class ThemeTrieElement {\n\t_themeTrieElementBrand: void;\n\n\tprivate readonly _mainRule: ThemeTrieElementRule;\n\tprivate readonly _children: Map<string, ThemeTrieElement>;\n\n\tconstructor(mainRule: ThemeTrieElementRule) {\n\t\tthis._mainRule = mainRule;\n\t\tthis._children = new Map<string, ThemeTrieElement>();\n\t}\n\n\t/**\n\t * used for testing purposes\n\t */\n\tpublic toExternalThemeTrieElement(): ExternalThemeTrieElement {\n\t\tlet children: { [segment: string]: ExternalThemeTrieElement } = Object.create(null);\n\t\tthis._children.forEach((element, index) => {\n\t\t\tchildren[index] = element.toExternalThemeTrieElement();\n\t\t});\n\t\treturn new ExternalThemeTrieElement(this._mainRule, children);\n\t}\n\n\tpublic match(token: string): ThemeTrieElementRule {\n\t\tif (token === '') {\n\t\t\treturn this._mainRule;\n\t\t}\n\n\t\tlet dotIndex = token.indexOf('.');\n\t\tlet head: string;\n\t\tlet tail: string;\n\t\tif (dotIndex === -1) {\n\t\t\thead = token;\n\t\t\ttail = '';\n\t\t} else {\n\t\t\thead = token.substring(0, dotIndex);\n\t\t\ttail = token.substring(dotIndex + 1);\n\t\t}\n\n\t\tlet child = this._children.get(head);\n\t\tif (typeof child !== 'undefined') {\n\t\t\treturn child.match(tail);\n\t\t}\n\n\t\treturn this._mainRule;\n\t}\n\n\tpublic insert(token: string, fontStyle: FontStyle, foreground: ColorId, background: ColorId): void {\n\t\tif (token === '') {\n\t\t\t// Merge into the main rule\n\t\t\tthis._mainRule.acceptOverwrite(fontStyle, foreground, background);\n\t\t\treturn;\n\t\t}\n\n\t\tlet dotIndex = token.indexOf('.');\n\t\tlet head: string;\n\t\tlet tail: string;\n\t\tif (dotIndex === -1) {\n\t\t\thead = token;\n\t\t\ttail = '';\n\t\t} else {\n\t\t\thead = token.substring(0, dotIndex);\n\t\t\ttail = token.substring(dotIndex + 1);\n\t\t}\n\n\t\tlet child = this._children.get(head);\n\t\tif (typeof child === 'undefined') {\n\t\t\tchild = new ThemeTrieElement(this._mainRule.clone());\n\t\t\tthis._children.set(head, child);\n\t\t}\n\n\t\tchild.insert(tail, fontStyle, foreground, background);\n\t}\n}\n\nexport function generateTokensCSSForColorMap(colorMap: Color[]): string {\n\tlet rules: string[] = [];\n\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\tlet color = colorMap[i];\n\t\trules[i] = `.mtk${i} { color: ${color}; }`;\n\t}\n\trules.push('.mtki { font-style: italic; }');\n\trules.push('.mtkb { font-weight: bold; }');\n\trules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n\treturn rules.join('\\n');\n}\n"]}]}