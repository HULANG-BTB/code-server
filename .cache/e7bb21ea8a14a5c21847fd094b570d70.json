{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/modes\"], function (require, exports, modes) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function createScopedLineTokens(context, offset) {\n        let tokenCount = context.getCount();\n        let tokenIndex = context.findTokenIndexAtOffset(offset);\n        let desiredLanguageId = context.getLanguageId(tokenIndex);\n        let lastTokenIndex = tokenIndex;\n        while (lastTokenIndex + 1 < tokenCount && context.getLanguageId(lastTokenIndex + 1) === desiredLanguageId) {\n            lastTokenIndex++;\n        }\n        let firstTokenIndex = tokenIndex;\n        while (firstTokenIndex > 0 && context.getLanguageId(firstTokenIndex - 1) === desiredLanguageId) {\n            firstTokenIndex--;\n        }\n        return new ScopedLineTokens(context, desiredLanguageId, firstTokenIndex, lastTokenIndex + 1, context.getStartOffset(firstTokenIndex), context.getEndOffset(lastTokenIndex));\n    }\n    exports.createScopedLineTokens = createScopedLineTokens;\n    class ScopedLineTokens {\n        constructor(actual, languageId, firstTokenIndex, lastTokenIndex, firstCharOffset, lastCharOffset) {\n            this._actual = actual;\n            this.languageId = languageId;\n            this._firstTokenIndex = firstTokenIndex;\n            this._lastTokenIndex = lastTokenIndex;\n            this.firstCharOffset = firstCharOffset;\n            this._lastCharOffset = lastCharOffset;\n        }\n        getLineContent() {\n            const actualLineContent = this._actual.getLineContent();\n            return actualLineContent.substring(this.firstCharOffset, this._lastCharOffset);\n        }\n        getTokenCount() {\n            return this._lastTokenIndex - this._firstTokenIndex;\n        }\n        findTokenIndexAtOffset(offset) {\n            return this._actual.findTokenIndexAtOffset(offset + this.firstCharOffset) - this._firstTokenIndex;\n        }\n        getStandardTokenType(tokenIndex) {\n            return this._actual.getStandardTokenType(tokenIndex + this._firstTokenIndex);\n        }\n    }\n    exports.ScopedLineTokens = ScopedLineTokens;\n    var IgnoreBracketsInTokens;\n    (function (IgnoreBracketsInTokens) {\n        IgnoreBracketsInTokens[IgnoreBracketsInTokens[\"value\"] = modes.StandardTokenType.Comment | modes.StandardTokenType.String | modes.StandardTokenType.RegEx] = \"value\";\n    })(IgnoreBracketsInTokens || (IgnoreBracketsInTokens = {}));\n    function ignoreBracketsInToken(standardTokenType) {\n        return (standardTokenType & IgnoreBracketsInTokens.value) !== 0;\n    }\n    exports.ignoreBracketsInToken = ignoreBracketsInToken;\n});\n",null]}