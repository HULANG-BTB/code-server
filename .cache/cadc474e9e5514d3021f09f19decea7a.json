{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar nls_1 = require(\"vs/nls\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar map_1 = require(\"vs/base/common/map\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nexports.TEST_VIEW_CONTAINER_ID = 'workbench.view.extension.test';\nvar Extensions;\n(function (Extensions) {\n    Extensions.ViewContainersRegistry = 'workbench.registry.view.containers';\n    Extensions.ViewsRegistry = 'workbench.registry.view';\n})(Extensions = exports.Extensions || (exports.Extensions = {}));\nvar ViewContainer = /** @class */ (function () {\n    function ViewContainer(id, hideIfEmpty, extensionId) {\n        this.id = id;\n        this.hideIfEmpty = hideIfEmpty;\n        this.extensionId = extensionId;\n    }\n    return ViewContainer;\n}());\nexports.ViewContainer = ViewContainer;\nvar ViewContainersRegistryImpl = /** @class */ (function () {\n    function ViewContainersRegistryImpl() {\n        this._onDidRegister = new event_1.Emitter();\n        this.onDidRegister = this._onDidRegister.event;\n        this._onDidDeregister = new event_1.Emitter();\n        this.onDidDeregister = this._onDidDeregister.event;\n        this.viewContainers = new Map();\n    }\n    Object.defineProperty(ViewContainersRegistryImpl.prototype, \"all\", {\n        get: function () {\n            return map_1.values(this.viewContainers);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewContainersRegistryImpl.prototype.registerViewContainer = function (id, hideIfEmpty, extensionId) {\n        var existing = this.viewContainers.get(id);\n        if (existing) {\n            return existing;\n        }\n        var viewContainer = new /** @class */ (function (_super) {\n            tslib_1.__extends(class_1, _super);\n            function class_1() {\n                return _super.call(this, id, !!hideIfEmpty, extensionId) || this;\n            }\n            return class_1;\n        }(ViewContainer));\n        this.viewContainers.set(id, viewContainer);\n        this._onDidRegister.fire(viewContainer);\n        return viewContainer;\n    };\n    ViewContainersRegistryImpl.prototype.deregisterViewContainer = function (viewContainer) {\n        var existing = this.viewContainers.get(viewContainer.id);\n        if (existing) {\n            this.viewContainers.delete(viewContainer.id);\n            this._onDidDeregister.fire(viewContainer);\n        }\n    };\n    ViewContainersRegistryImpl.prototype.get = function (id) {\n        return this.viewContainers.get(id);\n    };\n    return ViewContainersRegistryImpl;\n}());\nplatform_1.Registry.add(Extensions.ViewContainersRegistry, new ViewContainersRegistryImpl());\nvar ViewsRegistry = /** @class */ (function () {\n    function ViewsRegistry() {\n        this._onViewsRegistered = new event_1.Emitter();\n        this.onViewsRegistered = this._onViewsRegistered.event;\n        this._onViewsDeregistered = new event_1.Emitter();\n        this.onViewsDeregistered = this._onViewsDeregistered.event;\n        this._onDidChangeContainer = new event_1.Emitter();\n        this.onDidChangeContainer = this._onDidChangeContainer.event;\n        this._viewContainers = [];\n        this._views = new Map();\n    }\n    ViewsRegistry.prototype.registerViews = function (views, viewContainer) {\n        this.addViews(views, viewContainer);\n        this._onViewsRegistered.fire({ views: views, viewContainer: viewContainer });\n    };\n    ViewsRegistry.prototype.deregisterViews = function (viewDescriptors, viewContainer) {\n        var views = this.removeViews(viewDescriptors, viewContainer);\n        if (views.length) {\n            this._onViewsDeregistered.fire({ views: views, viewContainer: viewContainer });\n        }\n    };\n    ViewsRegistry.prototype.moveViews = function (viewsToMove, viewContainer) {\n        var _this = this;\n        map_1.keys(this._views).forEach(function (container) {\n            if (container !== viewContainer) {\n                var views = _this.removeViews(viewsToMove, container);\n                if (views.length) {\n                    _this.addViews(views, viewContainer);\n                    _this._onDidChangeContainer.fire({ views: views, from: container, to: viewContainer });\n                }\n            }\n        });\n    };\n    ViewsRegistry.prototype.getViews = function (loc) {\n        return this._views.get(loc) || [];\n    };\n    ViewsRegistry.prototype.getView = function (id) {\n        for (var _i = 0, _a = this._viewContainers; _i < _a.length; _i++) {\n            var viewContainer = _a[_i];\n            var viewDescriptor = (this._views.get(viewContainer) || []).filter(function (v) { return v.id === id; })[0];\n            if (viewDescriptor) {\n                return viewDescriptor;\n            }\n        }\n        return null;\n    };\n    ViewsRegistry.prototype.getViewContainer = function (viewId) {\n        for (var _i = 0, _a = this._viewContainers; _i < _a.length; _i++) {\n            var viewContainer = _a[_i];\n            var viewDescriptor = (this._views.get(viewContainer) || []).filter(function (v) { return v.id === viewId; })[0];\n            if (viewDescriptor) {\n                return viewContainer;\n            }\n        }\n        return null;\n    };\n    ViewsRegistry.prototype.addViews = function (viewDescriptors, viewContainer) {\n        var views = this._views.get(viewContainer);\n        if (!views) {\n            views = [];\n            this._views.set(viewContainer, views);\n            this._viewContainers.push(viewContainer);\n        }\n        var _loop_1 = function (viewDescriptor) {\n            if (views.some(function (v) { return v.id === viewDescriptor.id; })) {\n                throw new Error(nls_1.localize('duplicateId', \"A view with id '{0}' is already registered in the container '{1}'\", viewDescriptor.id, viewContainer.id));\n            }\n            views.push(viewDescriptor);\n        };\n        for (var _i = 0, viewDescriptors_1 = viewDescriptors; _i < viewDescriptors_1.length; _i++) {\n            var viewDescriptor = viewDescriptors_1[_i];\n            _loop_1(viewDescriptor);\n        }\n    };\n    ViewsRegistry.prototype.removeViews = function (viewDescriptors, viewContainer) {\n        var views = this._views.get(viewContainer);\n        if (!views) {\n            return [];\n        }\n        var viewsToDeregister = [];\n        var remaningViews = [];\n        for (var _i = 0, views_1 = views; _i < views_1.length; _i++) {\n            var view = views_1[_i];\n            if (viewDescriptors.indexOf(view) === -1) {\n                remaningViews.push(view);\n            }\n            else {\n                viewsToDeregister.push(view);\n            }\n        }\n        if (viewsToDeregister.length) {\n            if (remaningViews.length) {\n                this._views.set(viewContainer, remaningViews);\n            }\n            else {\n                this._views.delete(viewContainer);\n                this._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);\n            }\n        }\n        return viewsToDeregister;\n    };\n    return ViewsRegistry;\n}());\nplatform_1.Registry.add(Extensions.ViewsRegistry, new ViewsRegistry());\nexports.IViewsService = instantiation_1.createDecorator('viewsService');\nvar TreeItemCollapsibleState;\n(function (TreeItemCollapsibleState) {\n    TreeItemCollapsibleState[TreeItemCollapsibleState[\"None\"] = 0] = \"None\";\n    TreeItemCollapsibleState[TreeItemCollapsibleState[\"Collapsed\"] = 1] = \"Collapsed\";\n    TreeItemCollapsibleState[TreeItemCollapsibleState[\"Expanded\"] = 2] = \"Expanded\";\n})(TreeItemCollapsibleState = exports.TreeItemCollapsibleState || (exports.TreeItemCollapsibleState = {}));\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/views.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Command } from 'vs/editor/common/modes';\nimport { UriComponents } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ITreeViewDataProvider } from 'vs/workbench/common/views';\nimport { localize } from 'vs/nls';\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { createDecorator, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ThemeIcon } from 'vs/platform/theme/common/themeService';\nimport { values, keys } from 'vs/base/common/map';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IAction } from 'vs/base/common/actions';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport const TEST_VIEW_CONTAINER_ID = 'workbench.view.extension.test';\n\nexport namespace Extensions {\n\texport const ViewContainersRegistry = 'workbench.registry.view.containers';\n\texport const ViewsRegistry = 'workbench.registry.view';\n}\n\nexport interface IViewContainersRegistry {\n\t/**\n\t * An event that is triggerred when a view container is registered.\n\t */\n\treadonly onDidRegister: Event<ViewContainer>;\n\n\t/**\n\t * An event that is triggerred when a view container is deregistered.\n\t */\n\treadonly onDidDeregister: Event<ViewContainer>;\n\n\t/**\n\t * All registered view containers\n\t */\n\treadonly all: ViewContainer[];\n\n\t/**\n\t * Registers a view container with given id\n\t * No op if a view container is already registered with the given id.\n\t *\n\t * @param id of the view container.\n\t *\n\t * @returns the registered ViewContainer.\n\t */\n\tregisterViewContainer(id: string, hideIfEmpty?: boolean, extensionId?: ExtensionIdentifier): ViewContainer;\n\n\t/**\n\t * Deregisters the given view container\n\t * No op if the view container is not registered\n\t */\n\tderegisterViewContainer(viewContainer: ViewContainer): void;\n\n\t/**\n\t * Returns the view container with given id.\n\t *\n\t * @returns the view container with given id.\n\t */\n\tget(id: string): ViewContainer | undefined;\n}\n\nexport class ViewContainer {\n\tprotected constructor(readonly id: string, readonly hideIfEmpty: boolean, readonly extensionId?: ExtensionIdentifier) { }\n}\n\nclass ViewContainersRegistryImpl implements IViewContainersRegistry {\n\n\tprivate readonly _onDidRegister = new Emitter<ViewContainer>();\n\treadonly onDidRegister: Event<ViewContainer> = this._onDidRegister.event;\n\n\tprivate readonly _onDidDeregister = new Emitter<ViewContainer>();\n\treadonly onDidDeregister: Event<ViewContainer> = this._onDidDeregister.event;\n\n\tprivate viewContainers: Map<string, ViewContainer> = new Map<string, ViewContainer>();\n\n\tget all(): ViewContainer[] {\n\t\treturn values(this.viewContainers);\n\t}\n\n\tregisterViewContainer(id: string, hideIfEmpty?: boolean, extensionId?: ExtensionIdentifier): ViewContainer {\n\t\tconst existing = this.viewContainers.get(id);\n\t\tif (existing) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst viewContainer = new class extends ViewContainer {\n\t\t\tconstructor() {\n\t\t\t\tsuper(id, !!hideIfEmpty, extensionId);\n\t\t\t}\n\t\t};\n\t\tthis.viewContainers.set(id, viewContainer);\n\t\tthis._onDidRegister.fire(viewContainer);\n\t\treturn viewContainer;\n\t}\n\n\tderegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst existing = this.viewContainers.get(viewContainer.id);\n\t\tif (existing) {\n\t\t\tthis.viewContainers.delete(viewContainer.id);\n\t\t\tthis._onDidDeregister.fire(viewContainer);\n\t\t}\n\t}\n\n\tget(id: string): ViewContainer | undefined {\n\t\treturn this.viewContainers.get(id);\n\t}\n}\n\nRegistry.add(Extensions.ViewContainersRegistry, new ViewContainersRegistryImpl());\n\nexport interface IViewDescriptor {\n\n\treadonly id: string;\n\n\treadonly name: string;\n\n\treadonly ctorDescriptor: { ctor: any, arguments?: any[] };\n\n\treadonly when?: ContextKeyExpr;\n\n\treadonly order?: number;\n\n\treadonly weight?: number;\n\n\treadonly collapsed?: boolean;\n\n\treadonly canToggleVisibility?: boolean;\n\n\t// Applies only to newly created views\n\treadonly hideByDefault?: boolean;\n\n\treadonly workspace?: boolean;\n\n\treadonly focusCommand?: { id: string, keybindings?: IKeybindings };\n}\n\nexport interface IViewDescriptorCollection extends IDisposable {\n\treadonly onDidChangeActiveViews: Event<{ added: IViewDescriptor[], removed: IViewDescriptor[] }>;\n\treadonly activeViewDescriptors: IViewDescriptor[];\n\treadonly allViewDescriptors: IViewDescriptor[];\n}\n\nexport interface IViewsRegistry {\n\n\treadonly onViewsRegistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }>;\n\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }>;\n\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>;\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tderegisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tmoveViews(views: IViewDescriptor[], viewContainer: ViewContainer): void;\n\n\tgetViews(viewContainer: ViewContainer): IViewDescriptor[];\n\n\tgetView(id: string): IViewDescriptor | null;\n\n\tgetViewContainer(id: string): ViewContainer | null;\n}\n\nclass ViewsRegistry implements IViewsRegistry {\n\n\tprivate readonly _onViewsRegistered: Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = new Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }>();\n\treadonly onViewsRegistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = this._onViewsRegistered.event;\n\n\tprivate readonly _onViewsDeregistered: Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = new Emitter<{ views: IViewDescriptor[], viewContainer: ViewContainer }>();\n\treadonly onViewsDeregistered: Event<{ views: IViewDescriptor[], viewContainer: ViewContainer }> = this._onViewsDeregistered.event;\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = new Emitter<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }>();\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[], from: ViewContainer, to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate _viewContainers: ViewContainer[] = [];\n\tprivate _views: Map<ViewContainer, IViewDescriptor[]> = new Map<ViewContainer, IViewDescriptor[]>();\n\n\tregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tthis.addViews(views, viewContainer);\n\t\tthis._onViewsRegistered.fire({ views: views, viewContainer });\n\t}\n\n\tderegisterViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tconst views = this.removeViews(viewDescriptors, viewContainer);\n\t\tif (views.length) {\n\t\t\tthis._onViewsDeregistered.fire({ views, viewContainer });\n\t\t}\n\t}\n\n\tmoveViews(viewsToMove: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tkeys(this._views).forEach(container => {\n\t\t\tif (container !== viewContainer) {\n\t\t\t\tconst views = this.removeViews(viewsToMove, container);\n\t\t\t\tif (views.length) {\n\t\t\t\t\tthis.addViews(views, viewContainer);\n\t\t\t\t\tthis._onDidChangeContainer.fire({ views, from: container, to: viewContainer });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tgetViews(loc: ViewContainer): IViewDescriptor[] {\n\t\treturn this._views.get(loc) || [];\n\t}\n\n\tgetView(id: string): IViewDescriptor | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewDescriptor;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetViewContainer(viewId: string): ViewContainer | null {\n\t\tfor (const viewContainer of this._viewContainers) {\n\t\t\tconst viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];\n\t\t\tif (viewDescriptor) {\n\t\t\t\treturn viewContainer;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate addViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\tlet views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\tviews = [];\n\t\t\tthis._views.set(viewContainer, views);\n\t\t\tthis._viewContainers.push(viewContainer);\n\t\t}\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (views.some(v => v.id === viewDescriptor.id)) {\n\t\t\t\tthrow new Error(localize('duplicateId', \"A view with id '{0}' is already registered in the container '{1}'\", viewDescriptor.id, viewContainer.id));\n\t\t\t}\n\t\t\tviews.push(viewDescriptor);\n\t\t}\n\t}\n\n\tprivate removeViews(viewDescriptors: IViewDescriptor[], viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst views = this._views.get(viewContainer);\n\t\tif (!views) {\n\t\t\treturn [];\n\t\t}\n\t\tconst viewsToDeregister: IViewDescriptor[] = [];\n\t\tconst remaningViews: IViewDescriptor[] = [];\n\t\tfor (const view of views) {\n\t\t\tif (viewDescriptors.indexOf(view) === -1) {\n\t\t\t\tremaningViews.push(view);\n\t\t\t} else {\n\t\t\t\tviewsToDeregister.push(view);\n\t\t\t}\n\t\t}\n\t\tif (viewsToDeregister.length) {\n\t\t\tif (remaningViews.length) {\n\t\t\t\tthis._views.set(viewContainer, remaningViews);\n\t\t\t} else {\n\t\t\t\tthis._views.delete(viewContainer);\n\t\t\t\tthis._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);\n\t\t\t}\n\t\t}\n\t\treturn viewsToDeregister;\n\t}\n}\n\nRegistry.add(Extensions.ViewsRegistry, new ViewsRegistry());\n\nexport interface IView {\n\n\treadonly id: string;\n\n}\n\nexport interface IViewsViewlet extends IViewlet {\n\n\topenView(id: string, focus?: boolean): IView;\n\n}\n\nexport const IViewsService = createDecorator<IViewsService>('viewsService');\n\nexport interface IViewsService {\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\topenView(id: string, focus?: boolean): Promise<IView | null>;\n\n\tgetViewDescriptors(container: ViewContainer): IViewDescriptorCollection | null;\n}\n\n// Custom views\n\nexport interface ITreeView extends IDisposable {\n\n\tdataProvider: ITreeViewDataProvider | null;\n\n\tshowCollapseAllAction: boolean;\n\n\tmessage?: string | IMarkdownString;\n\n\treadonly visible: boolean;\n\n\treadonly onDidExpandItem: Event<ITreeItem>;\n\n\treadonly onDidCollapseItem: Event<ITreeItem>;\n\n\treadonly onDidChangeSelection: Event<ITreeItem[]>;\n\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\treadonly onDidChangeActions: Event<void>;\n\n\trefresh(treeItems?: ITreeItem[]): Promise<void>;\n\n\tsetVisibility(visible: boolean): void;\n\n\tfocus(): void;\n\n\tlayout(height: number): void;\n\n\tshow(container: HTMLElement): void;\n\n\tgetOptimalWidth(): number;\n\n\treveal(item: ITreeItem): Promise<void>;\n\n\texpand(itemOrItems: ITreeItem | ITreeItem[]): Promise<void>;\n\n\tsetSelection(items: ITreeItem[]): void;\n\n\tsetFocus(item: ITreeItem): void;\n\n\tgetPrimaryActions(): IAction[];\n\n\tgetSecondaryActions(): IAction[];\n}\n\nexport interface IRevealOptions {\n\n\tselect?: boolean;\n\n\tfocus?: boolean;\n\n\texpand?: boolean | number;\n\n}\n\nexport interface ITreeViewDescriptor extends IViewDescriptor {\n\n\treadonly treeView: ITreeView;\n\n}\n\nexport type TreeViewItemHandleArg = {\n\t$treeViewId: string,\n\t$treeItemHandle: string\n};\n\nexport enum TreeItemCollapsibleState {\n\tNone = 0,\n\tCollapsed = 1,\n\tExpanded = 2\n}\n\nexport interface ITreeItemLabel {\n\n\tlabel: string;\n\n\thighlights?: [number, number][];\n\n}\n\nexport interface ITreeItem {\n\n\thandle: string;\n\n\tparentHandle?: string;\n\n\tcollapsibleState: TreeItemCollapsibleState;\n\n\tlabel?: ITreeItemLabel;\n\n\tdescription?: string | boolean;\n\n\ticon?: UriComponents;\n\n\ticonDark?: UriComponents;\n\n\tthemeIcon?: ThemeIcon;\n\n\tresourceUri?: UriComponents;\n\n\ttooltip?: string;\n\n\tcontextValue?: string;\n\n\tcommand?: Command;\n\n\tchildren?: ITreeItem[];\n}\n\nexport interface ITreeViewDataProvider {\n\n\tgetChildren(element?: ITreeItem): Promise<ITreeItem[]>;\n\n}\n"]}]}