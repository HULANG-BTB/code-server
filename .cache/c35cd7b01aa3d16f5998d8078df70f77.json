{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar nls = require(\"vs/nls\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar ShowWebViewEditorFindWidgetCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowWebViewEditorFindWidgetCommand, _super);\n    function ShowWebViewEditorFindWidgetCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ShowWebViewEditorFindWidgetCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.showFind();\n        }\n    };\n    ShowWebViewEditorFindWidgetCommand.ID = 'editor.action.webvieweditor.showFind';\n    return ShowWebViewEditorFindWidgetCommand;\n}(editorExtensions_1.Command));\nexports.ShowWebViewEditorFindWidgetCommand = ShowWebViewEditorFindWidgetCommand;\nvar HideWebViewEditorFindCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(HideWebViewEditorFindCommand, _super);\n    function HideWebViewEditorFindCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    HideWebViewEditorFindCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.hideFind();\n        }\n    };\n    HideWebViewEditorFindCommand.ID = 'editor.action.webvieweditor.hideFind';\n    return HideWebViewEditorFindCommand;\n}(editorExtensions_1.Command));\nexports.HideWebViewEditorFindCommand = HideWebViewEditorFindCommand;\nvar SelectAllWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectAllWebviewEditorCommand, _super);\n    function SelectAllWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectAllWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.selectAll();\n        }\n    };\n    SelectAllWebviewEditorCommand.ID = 'editor.action.webvieweditor.selectAll';\n    return SelectAllWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.SelectAllWebviewEditorCommand = SelectAllWebviewEditorCommand;\nvar CopyWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(CopyWebviewEditorCommand, _super);\n    function CopyWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CopyWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.copy();\n        }\n    };\n    CopyWebviewEditorCommand.ID = 'editor.action.webvieweditor.copy';\n    return CopyWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.CopyWebviewEditorCommand = CopyWebviewEditorCommand;\nvar PasteWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(PasteWebviewEditorCommand, _super);\n    function PasteWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PasteWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.paste();\n        }\n    };\n    PasteWebviewEditorCommand.ID = 'editor.action.webvieweditor.paste';\n    return PasteWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.PasteWebviewEditorCommand = PasteWebviewEditorCommand;\nvar CutWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(CutWebviewEditorCommand, _super);\n    function CutWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CutWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.cut();\n        }\n    };\n    CutWebviewEditorCommand.ID = 'editor.action.webvieweditor.cut';\n    return CutWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.CutWebviewEditorCommand = CutWebviewEditorCommand;\nvar UndoWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(UndoWebviewEditorCommand, _super);\n    function UndoWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    UndoWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.undo();\n        }\n    };\n    UndoWebviewEditorCommand.ID = 'editor.action.webvieweditor.undo';\n    return UndoWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.UndoWebviewEditorCommand = UndoWebviewEditorCommand;\nvar RedoWebviewEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(RedoWebviewEditorCommand, _super);\n    function RedoWebviewEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    RedoWebviewEditorCommand.prototype.runCommand = function (accessor, args) {\n        var webViewEditor = getActiveWebviewEditor(accessor);\n        if (webViewEditor) {\n            webViewEditor.redo();\n        }\n    };\n    RedoWebviewEditorCommand.ID = 'editor.action.webvieweditor.redo';\n    return RedoWebviewEditorCommand;\n}(editorExtensions_1.Command));\nexports.RedoWebviewEditorCommand = RedoWebviewEditorCommand;\nvar OpenWebviewDeveloperToolsAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenWebviewDeveloperToolsAction, _super);\n    function OpenWebviewDeveloperToolsAction(id, label) {\n        return _super.call(this, id, label) || this;\n    }\n    OpenWebviewDeveloperToolsAction.prototype.run = function () {\n        var elements = document.querySelectorAll('webview.ready');\n        for (var i = 0; i < elements.length; i++) {\n            try {\n                elements.item(i).openDevTools();\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        return Promise.resolve(true);\n    };\n    OpenWebviewDeveloperToolsAction.ID = 'workbench.action.webview.openDeveloperTools';\n    OpenWebviewDeveloperToolsAction.LABEL = nls.localize('openToolsLabel', \"Open Webview Developer Tools\");\n    return OpenWebviewDeveloperToolsAction;\n}(actions_1.Action));\nexports.OpenWebviewDeveloperToolsAction = OpenWebviewDeveloperToolsAction;\nvar ReloadWebviewAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReloadWebviewAction, _super);\n    function ReloadWebviewAction(id, label, editorService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.editorService = editorService;\n        return _this;\n    }\n    ReloadWebviewAction.prototype.run = function () {\n        for (var _i = 0, _a = this.getVisibleWebviews(); _i < _a.length; _i++) {\n            var webview = _a[_i];\n            webview.reload();\n        }\n        return Promise.resolve(true);\n    };\n    ReloadWebviewAction.prototype.getVisibleWebviews = function () {\n        return this.editorService.visibleControls\n            .filter(function (control) { return control && control.isWebviewEditor; })\n            .map(function (control) { return control; });\n    };\n    ReloadWebviewAction.ID = 'workbench.action.webview.reloadWebviewAction';\n    ReloadWebviewAction.LABEL = nls.localize('refreshWebviewLabel', \"Reload Webviews\");\n    ReloadWebviewAction = tslib_1.__decorate([\n        tslib_1.__param(2, editorService_1.IEditorService)\n    ], ReloadWebviewAction);\n    return ReloadWebviewAction;\n}(actions_1.Action));\nexports.ReloadWebviewAction = ReloadWebviewAction;\nfunction getActiveWebviewEditor(accessor) {\n    var editorService = accessor.get(editorService_1.IEditorService);\n    var activeControl = editorService.activeControl;\n    return activeControl.isWebviewEditor ? activeControl : null;\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webviewCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { Command } from 'vs/editor/browser/editorExtensions';\nimport * as nls from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { WebviewEditor } from 'vs/workbench/contrib/webview/electron-browser/webviewEditor';\n\nexport class ShowWebViewEditorFindWidgetCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.showFind';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.showFind();\n\t\t}\n\t}\n}\n\nexport class HideWebViewEditorFindCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.hideFind';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.hideFind();\n\t\t}\n\t}\n}\n\nexport class SelectAllWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.selectAll';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.selectAll();\n\t\t}\n\t}\n}\n\nexport class CopyWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.copy';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.copy();\n\t\t}\n\t}\n}\n\nexport class PasteWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.paste';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.paste();\n\t\t}\n\t}\n}\n\nexport class CutWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.cut';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.cut();\n\t\t}\n\t}\n}\n\nexport class UndoWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.undo';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.undo();\n\t\t}\n\t}\n}\n\nexport class RedoWebviewEditorCommand extends Command {\n\tpublic static readonly ID = 'editor.action.webvieweditor.redo';\n\n\tpublic runCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst webViewEditor = getActiveWebviewEditor(accessor);\n\t\tif (webViewEditor) {\n\t\t\twebViewEditor.redo();\n\t\t}\n\t}\n}\n\nexport class OpenWebviewDeveloperToolsAction extends Action {\n\tstatic readonly ID = 'workbench.action.webview.openDeveloperTools';\n\tstatic readonly LABEL = nls.localize('openToolsLabel', \"Open Webview Developer Tools\");\n\n\tpublic constructor(\n\t\tid: string,\n\t\tlabel: string\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tconst elements = document.querySelectorAll('webview.ready');\n\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\ttry {\n\t\t\t\t(elements.item(i) as Electron.WebviewTag).openDevTools();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n}\n\nexport class ReloadWebviewAction extends Action {\n\tstatic readonly ID = 'workbench.action.webview.reloadWebviewAction';\n\tstatic readonly LABEL = nls.localize('refreshWebviewLabel', \"Reload Webviews\");\n\n\tpublic constructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\tpublic run(): Promise<any> {\n\t\tfor (const webview of this.getVisibleWebviews()) {\n\t\t\twebview.reload();\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n\n\tprivate getVisibleWebviews() {\n\t\treturn this.editorService.visibleControls\n\t\t\t.filter(control => control && (control as WebviewEditor).isWebviewEditor)\n\t\t\t.map(control => control as WebviewEditor);\n\t}\n}\n\nfunction getActiveWebviewEditor(accessor: ServicesAccessor): WebviewEditor | null {\n\tconst editorService = accessor.get(IEditorService);\n\tconst activeControl = editorService.activeControl as WebviewEditor;\n\treturn activeControl.isWebviewEditor ? activeControl : null;\n}"]}]}