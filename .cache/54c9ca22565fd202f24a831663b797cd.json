{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/nps.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/nps.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar platform_2 = require(\"vs/platform/registry/common/platform\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar package_1 = require(\"vs/platform/product/node/package\");\nvar product_1 = require(\"vs/platform/product/node/product\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar PROBABILITY = 0.15;\nvar SESSION_COUNT_KEY = 'nps/sessionCount';\nvar LAST_SESSION_DATE_KEY = 'nps/lastSessionDate';\nvar SKIP_VERSION_KEY = 'nps/skipVersion';\nvar IS_CANDIDATE_KEY = 'nps/isCandidate';\nvar NPSContribution = /** @class */ (function () {\n    function NPSContribution(storageService, notificationService, telemetryService) {\n        var skipVersion = storageService.get(SKIP_VERSION_KEY, storage_1.StorageScope.GLOBAL, '');\n        if (skipVersion) {\n            return;\n        }\n        var date = new Date().toDateString();\n        var lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, storage_1.StorageScope.GLOBAL, new Date(0).toDateString());\n        if (date === lastSessionDate) {\n            return;\n        }\n        var sessionCount = (storageService.getNumber(SESSION_COUNT_KEY, storage_1.StorageScope.GLOBAL, 0) || 0) + 1;\n        storageService.store(LAST_SESSION_DATE_KEY, date, storage_1.StorageScope.GLOBAL);\n        storageService.store(SESSION_COUNT_KEY, sessionCount, storage_1.StorageScope.GLOBAL);\n        if (sessionCount < 9) {\n            return;\n        }\n        var isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, storage_1.StorageScope.GLOBAL, false)\n            || Math.random() < PROBABILITY;\n        storageService.store(IS_CANDIDATE_KEY, isCandidate, storage_1.StorageScope.GLOBAL);\n        if (!isCandidate) {\n            storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n            return;\n        }\n        notificationService.prompt(notification_1.Severity.Info, nls.localize('surveyQuestion', \"Do you mind taking a quick feedback survey?\"), [{\n                label: nls.localize('takeSurvey', \"Take Survey\"),\n                run: function () {\n                    telemetryService.getTelemetryInfo().then(function (info) {\n                        window.open(product_1.default.npsSurveyUrl + \"?o=\" + encodeURIComponent(process.platform) + \"&v=\" + encodeURIComponent(package_1.default.version) + \"&m=\" + encodeURIComponent(info.machineId));\n                        storageService.store(IS_CANDIDATE_KEY, false, storage_1.StorageScope.GLOBAL);\n                        storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n                    });\n                }\n            }, {\n                label: nls.localize('remindLater', \"Remind Me later\"),\n                run: function () { return storageService.store(SESSION_COUNT_KEY, sessionCount - 3, storage_1.StorageScope.GLOBAL); }\n            }, {\n                label: nls.localize('neverAgain', \"Don't Show Again\"),\n                run: function () {\n                    storageService.store(IS_CANDIDATE_KEY, false, storage_1.StorageScope.GLOBAL);\n                    storageService.store(SKIP_VERSION_KEY, package_1.default.version, storage_1.StorageScope.GLOBAL);\n                }\n            }], { sticky: true });\n    }\n    NPSContribution = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, telemetry_1.ITelemetryService)\n    ], NPSContribution);\n    return NPSContribution;\n}());\nif (platform_1.language === 'en' && product_1.default.npsSurveyUrl) {\n    var workbenchRegistry = platform_2.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchRegistry.registerWorkbenchContribution(NPSContribution, lifecycle_1.LifecyclePhase.Restored);\n}\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/nps.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/surveys/electron-browser/nps.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport pkg from 'vs/platform/product/node/package';\nimport product from 'vs/platform/product/node/product';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\n\nconst PROBABILITY = 0.15;\nconst SESSION_COUNT_KEY = 'nps/sessionCount';\nconst LAST_SESSION_DATE_KEY = 'nps/lastSessionDate';\nconst SKIP_VERSION_KEY = 'nps/skipVersion';\nconst IS_CANDIDATE_KEY = 'nps/isCandidate';\n\nclass NPSContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ITelemetryService telemetryService: ITelemetryService\n\t) {\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.GLOBAL, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.GLOBAL, new Date(0).toDateString());\n\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = (storageService.getNumber(SESSION_COUNT_KEY, StorageScope.GLOBAL, 0) || 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.GLOBAL);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.GLOBAL);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.GLOBAL, false)\n\t\t\t|| Math.random() < PROBABILITY;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.GLOBAL);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('surveyQuestion', \"Do you mind taking a quick feedback survey?\"),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('takeSurvey', \"Take Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.getTelemetryInfo().then(info => {\n\t\t\t\t\t\twindow.open(`${product.npsSurveyUrl}?o=${encodeURIComponent(process.platform)}&v=${encodeURIComponent(pkg.version)}&m=${encodeURIComponent(info.machineId)}`);\n\t\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL);\n\t\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('remindLater', \"Remind Me later\"),\n\t\t\t\trun: () => storageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.GLOBAL)\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.GLOBAL);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, pkg.version, StorageScope.GLOBAL);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nif (language === 'en' && product.npsSurveyUrl) {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(NPSContribution, LifecyclePhase.Restored);\n}"]}]}