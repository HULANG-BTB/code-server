{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./glyphMargin\");\nvar dynamicViewOverlay_1 = require(\"vs/editor/browser/view/dynamicViewOverlay\");\nvar DecorationToRender = /** @class */ (function () {\n    function DecorationToRender(startLineNumber, endLineNumber, className) {\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n    return DecorationToRender;\n}());\nexports.DecorationToRender = DecorationToRender;\nvar DedupOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(DedupOverlay, _super);\n    function DedupOverlay() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DedupOverlay.prototype._render = function (visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort(function (a, b) {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        var prevClassName = null;\n        var prevEndLineIndex = 0;\n        for (var i = 0, len = decorations.length; i < len; i++) {\n            var d = decorations[i];\n            var className = d.className;\n            var startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            var endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (var i_1 = startLineIndex; i_1 <= prevEndLineIndex; i_1++) {\n                output[i_1].push(prevClassName);\n            }\n        }\n        return output;\n    };\n    return DedupOverlay;\n}(dynamicViewOverlay_1.DynamicViewOverlay));\nexports.DedupOverlay = DedupOverlay;\nvar GlyphMarginOverlay = /** @class */ (function (_super) {\n    tslib_1.__extends(GlyphMarginOverlay, _super);\n    function GlyphMarginOverlay(context) {\n        var _this = _super.call(this) || this;\n        _this._context = context;\n        _this._lineHeight = _this._context.configuration.editor.lineHeight;\n        _this._glyphMargin = _this._context.configuration.editor.viewInfo.glyphMargin;\n        _this._glyphMarginLeft = _this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n        _this._glyphMarginWidth = _this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n        _this._renderResult = null;\n        _this._context.addEventHandler(_this);\n        return _this;\n    }\n    GlyphMarginOverlay.prototype.dispose = function () {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin event handlers\n    GlyphMarginOverlay.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._lineHeight = this._context.configuration.editor.lineHeight;\n        }\n        if (e.viewInfo) {\n            this._glyphMargin = this._context.configuration.editor.viewInfo.glyphMargin;\n        }\n        if (e.layoutInfo) {\n            this._glyphMarginLeft = this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n            this._glyphMarginWidth = this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n        }\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onDecorationsChanged = function (e) {\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onFlushed = function (e) {\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onLinesChanged = function (e) {\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onLinesDeleted = function (e) {\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onLinesInserted = function (e) {\n        return true;\n    };\n    GlyphMarginOverlay.prototype.onScrollChanged = function (e) {\n        return e.scrollTopChanged;\n    };\n    GlyphMarginOverlay.prototype.onZonesChanged = function (e) {\n        return true;\n    };\n    // --- end event handlers\n    GlyphMarginOverlay.prototype._getDecorations = function (ctx) {\n        var decorations = ctx.getDecorationsInViewport();\n        var r = [], rLen = 0;\n        for (var i = 0, len = decorations.length; i < len; i++) {\n            var d = decorations[i];\n            var glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    };\n    GlyphMarginOverlay.prototype.prepareRender = function (ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        var lineHeight = this._lineHeight.toString();\n        var left = this._glyphMarginLeft.toString();\n        var width = this._glyphMarginWidth.toString();\n        var common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        var output = [];\n        for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            var lineIndex = lineNumber - visibleStartLineNumber;\n            var classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    };\n    GlyphMarginOverlay.prototype.render = function (startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        var lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    };\n    return GlyphMarginOverlay;\n}(DedupOverlay));\nexports.GlyphMarginOverlay = GlyphMarginOverlay;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./glyphMargin';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { RenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\n\nexport class DecorationToRender {\n\t_decorationToRenderBrand: void;\n\n\tpublic startLineNumber: number;\n\tpublic endLineNumber: number;\n\tpublic className: string;\n\n\tconstructor(startLineNumber: number, endLineNumber: number, className: string) {\n\t\tthis.startLineNumber = +startLineNumber;\n\t\tthis.endLineNumber = +endLineNumber;\n\t\tthis.className = String(className);\n\t}\n}\n\nexport abstract class DedupOverlay extends DynamicViewOverlay {\n\n\tprotected _render(visibleStartLineNumber: number, visibleEndLineNumber: number, decorations: DecorationToRender[]): string[][] {\n\n\t\tconst output: string[][] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = [];\n\t\t}\n\n\t\tif (decorations.length === 0) {\n\t\t\treturn output;\n\t\t}\n\n\t\tdecorations.sort((a, b) => {\n\t\t\tif (a.className === b.className) {\n\t\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t\t}\n\t\t\treturn (a.className < b.className ? -1 : 1);\n\t\t});\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevEndLineIndex = 0;\n\t\tfor (let i = 0, len = decorations.length; i < len; i++) {\n\t\t\tconst d = decorations[i];\n\t\t\tconst className = d.className;\n\t\t\tlet startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n\t\t\tconst endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n\n\t\t\tif (prevClassName === className) {\n\t\t\t\tstartLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n\t\t\t\tprevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n\t\t\t} else {\n\t\t\t\tprevClassName = className;\n\t\t\t\tprevEndLineIndex = endLineIndex;\n\t\t\t}\n\n\t\t\tfor (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n\t\t\t\toutput[i].push(prevClassName);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nexport class GlyphMarginOverlay extends DedupOverlay {\n\n\tprivate readonly _context: ViewContext;\n\tprivate _lineHeight: number;\n\tprivate _glyphMargin: boolean;\n\tprivate _glyphMarginLeft: number;\n\tprivate _glyphMarginWidth: number;\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\tthis._glyphMargin = this._context.configuration.editor.viewInfo.glyphMargin;\n\t\tthis._glyphMarginLeft = this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n\t\tthis._glyphMarginWidth = this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n\t\tthis._renderResult = null;\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tif (e.lineHeight) {\n\t\t\tthis._lineHeight = this._context.configuration.editor.lineHeight;\n\t\t}\n\t\tif (e.viewInfo) {\n\t\t\tthis._glyphMargin = this._context.configuration.editor.viewInfo.glyphMargin;\n\t\t}\n\t\tif (e.layoutInfo) {\n\t\t\tthis._glyphMarginLeft = this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n\t\t\tthis._glyphMarginWidth = this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tprotected _getDecorations(ctx: RenderingContext): DecorationToRender[] {\n\t\tconst decorations = ctx.getDecorationsInViewport();\n\t\tlet r: DecorationToRender[] = [], rLen = 0;\n\t\tfor (let i = 0, len = decorations.length; i < len; i++) {\n\t\t\tconst d = decorations[i];\n\t\t\tconst glyphMarginClassName = d.options.glyphMarginClassName;\n\t\t\tif (glyphMarginClassName) {\n\t\t\t\tr[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._glyphMargin) {\n\t\t\tthis._renderResult = null;\n\t\t\treturn;\n\t\t}\n\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n\t\tconst lineHeight = this._lineHeight.toString();\n\t\tconst left = this._glyphMarginLeft.toString();\n\t\tconst width = this._glyphMarginWidth.toString();\n\t\tconst common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n\n\t\tconst output: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\tconst classNames = toRender[lineIndex];\n\n\t\t\tif (classNames.length === 0) {\n\t\t\t\toutput[lineIndex] = '';\n\t\t\t} else {\n\t\t\t\toutput[lineIndex] = (\n\t\t\t\t\t'<div class=\"cgmr '\n\t\t\t\t\t+ classNames.join(' ')\n\t\t\t\t\t+ common\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis._renderResult = output;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n"]}]}