{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar replaceCommand_1 = require(\"vs/editor/common/commands/replaceCommand\");\nvar cursorCommon_1 = require(\"vs/editor/common/controller/cursorCommon\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar cursorWordOperations_1 = require(\"vs/editor/common/controller/cursorWordOperations\");\nvar wordCharacterClassifier_1 = require(\"vs/editor/common/controller/wordCharacterClassifier\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar MoveWordCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(MoveWordCommand, _super);\n    function MoveWordCommand(opts) {\n        var _this = _super.call(this, opts) || this;\n        _this._inSelectionMode = opts.inSelectionMode;\n        _this._wordNavigationType = opts.wordNavigationType;\n        return _this;\n    }\n    MoveWordCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n        var _this = this;\n        if (!editor.hasModel()) {\n            return;\n        }\n        var config = editor.getConfiguration();\n        var wordSeparators = wordCharacterClassifier_1.getMapForWordSeparators(config.wordSeparators);\n        var model = editor.getModel();\n        var selections = editor.getSelections();\n        var result = selections.map(function (sel) {\n            var inPosition = new position_1.Position(sel.positionLineNumber, sel.positionColumn);\n            var outPosition = _this._move(wordSeparators, model, inPosition, _this._wordNavigationType);\n            return _this._moveTo(sel, outPosition, _this._inSelectionMode);\n        });\n        editor._getCursors().setStates('moveWordCommand', cursorEvents_1.CursorChangeReason.NotSet, result.map(function (r) { return cursorCommon_1.CursorState.fromModelSelection(r); }));\n        if (result.length === 1) {\n            var pos = new position_1.Position(result[0].positionLineNumber, result[0].positionColumn);\n            editor.revealPosition(pos, editorCommon_1.ScrollType.Smooth);\n        }\n    };\n    MoveWordCommand.prototype._moveTo = function (from, to, inSelectionMode) {\n        if (inSelectionMode) {\n            // move just position\n            return new selection_1.Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n        }\n        else {\n            // move everything\n            return new selection_1.Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n        }\n    };\n    return MoveWordCommand;\n}(editorExtensions_1.EditorCommand));\nexports.MoveWordCommand = MoveWordCommand;\nvar WordLeftCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(WordLeftCommand, _super);\n    function WordLeftCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WordLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n        return cursorWordOperations_1.WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n    };\n    return WordLeftCommand;\n}(MoveWordCommand));\nexports.WordLeftCommand = WordLeftCommand;\nvar WordRightCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(WordRightCommand, _super);\n    function WordRightCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WordRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n        return cursorWordOperations_1.WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n    };\n    return WordRightCommand;\n}(MoveWordCommand));\nexports.WordRightCommand = WordRightCommand;\nvar CursorWordStartLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordStartLeft, _super);\n    function CursorWordStartLeft() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordStartLeft',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.LeftArrow,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.LeftArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordStartLeft;\n}(WordLeftCommand));\nexports.CursorWordStartLeft = CursorWordStartLeft;\nvar CursorWordEndLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordEndLeft, _super);\n    function CursorWordEndLeft() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordEndLeft',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordEndLeft;\n}(WordLeftCommand));\nexports.CursorWordEndLeft = CursorWordEndLeft;\nvar CursorWordLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordLeft, _super);\n    function CursorWordLeft() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStartFast,\n            id: 'cursorWordLeft',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordLeft;\n}(WordLeftCommand));\nexports.CursorWordLeft = CursorWordLeft;\nvar CursorWordStartLeftSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordStartLeftSelect, _super);\n    function CursorWordStartLeftSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordStartLeftSelect',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordStartLeftSelect;\n}(WordLeftCommand));\nexports.CursorWordStartLeftSelect = CursorWordStartLeftSelect;\nvar CursorWordEndLeftSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordEndLeftSelect, _super);\n    function CursorWordEndLeftSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordEndLeftSelect',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordEndLeftSelect;\n}(WordLeftCommand));\nexports.CursorWordEndLeftSelect = CursorWordEndLeftSelect;\nvar CursorWordLeftSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordLeftSelect, _super);\n    function CursorWordLeftSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordLeftSelect',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordLeftSelect;\n}(WordLeftCommand));\nexports.CursorWordLeftSelect = CursorWordLeftSelect;\nvar CursorWordStartRight = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordStartRight, _super);\n    function CursorWordStartRight() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordStartRight',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordStartRight;\n}(WordRightCommand));\nexports.CursorWordStartRight = CursorWordStartRight;\nvar CursorWordEndRight = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordEndRight, _super);\n    function CursorWordEndRight() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordEndRight',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.RightArrow,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.RightArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordEndRight;\n}(WordRightCommand));\nexports.CursorWordEndRight = CursorWordEndRight;\nvar CursorWordRight = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordRight, _super);\n    function CursorWordRight() {\n        return _super.call(this, {\n            inSelectionMode: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordRight',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordRight;\n}(WordRightCommand));\nexports.CursorWordRight = CursorWordRight;\nvar CursorWordStartRightSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordStartRightSelect, _super);\n    function CursorWordStartRightSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'cursorWordStartRightSelect',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordStartRightSelect;\n}(WordRightCommand));\nexports.CursorWordStartRightSelect = CursorWordStartRightSelect;\nvar CursorWordEndRightSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordEndRightSelect, _super);\n    function CursorWordEndRightSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordEndRightSelect',\n            precondition: null,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return CursorWordEndRightSelect;\n}(WordRightCommand));\nexports.CursorWordEndRightSelect = CursorWordEndRightSelect;\nvar CursorWordRightSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(CursorWordRightSelect, _super);\n    function CursorWordRightSelect() {\n        return _super.call(this, {\n            inSelectionMode: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'cursorWordRightSelect',\n            precondition: null\n        }) || this;\n    }\n    return CursorWordRightSelect;\n}(WordRightCommand));\nexports.CursorWordRightSelect = CursorWordRightSelect;\nvar DeleteWordCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordCommand, _super);\n    function DeleteWordCommand(opts) {\n        var _this = _super.call(this, opts) || this;\n        _this._whitespaceHeuristics = opts.whitespaceHeuristics;\n        _this._wordNavigationType = opts.wordNavigationType;\n        return _this;\n    }\n    DeleteWordCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n        var _this = this;\n        if (!editor.hasModel()) {\n            return;\n        }\n        var config = editor.getConfiguration();\n        var wordSeparators = wordCharacterClassifier_1.getMapForWordSeparators(config.wordSeparators);\n        var model = editor.getModel();\n        var selections = editor.getSelections();\n        var commands = selections.map(function (sel) {\n            var deleteRange = _this._delete(wordSeparators, model, sel, _this._whitespaceHeuristics, _this._wordNavigationType);\n            return new replaceCommand_1.ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    };\n    return DeleteWordCommand;\n}(editorExtensions_1.EditorCommand));\nexports.DeleteWordCommand = DeleteWordCommand;\nvar DeleteWordLeftCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordLeftCommand, _super);\n    function DeleteWordLeftCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DeleteWordLeftCommand.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n        var r = cursorWordOperations_1.WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        return new range_1.Range(1, 1, 1, 1);\n    };\n    return DeleteWordLeftCommand;\n}(DeleteWordCommand));\nexports.DeleteWordLeftCommand = DeleteWordLeftCommand;\nvar DeleteWordRightCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordRightCommand, _super);\n    function DeleteWordRightCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DeleteWordRightCommand.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n        var r = cursorWordOperations_1.WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        var lineCount = model.getLineCount();\n        var maxColumn = model.getLineMaxColumn(lineCount);\n        return new range_1.Range(lineCount, maxColumn, lineCount, maxColumn);\n    };\n    return DeleteWordRightCommand;\n}(DeleteWordCommand));\nexports.DeleteWordRightCommand = DeleteWordRightCommand;\nvar DeleteWordStartLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordStartLeft, _super);\n    function DeleteWordStartLeft() {\n        return _super.call(this, {\n            whitespaceHeuristics: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'deleteWordStartLeft',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return DeleteWordStartLeft;\n}(DeleteWordLeftCommand));\nexports.DeleteWordStartLeft = DeleteWordStartLeft;\nvar DeleteWordEndLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordEndLeft, _super);\n    function DeleteWordEndLeft() {\n        return _super.call(this, {\n            whitespaceHeuristics: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'deleteWordEndLeft',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return DeleteWordEndLeft;\n}(DeleteWordLeftCommand));\nexports.DeleteWordEndLeft = DeleteWordEndLeft;\nvar DeleteWordLeft = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordLeft, _super);\n    function DeleteWordLeft() {\n        return _super.call(this, {\n            whitespaceHeuristics: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'deleteWordLeft',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Backspace },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return DeleteWordLeft;\n}(DeleteWordLeftCommand));\nexports.DeleteWordLeft = DeleteWordLeft;\nvar DeleteWordStartRight = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordStartRight, _super);\n    function DeleteWordStartRight() {\n        return _super.call(this, {\n            whitespaceHeuristics: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n            id: 'deleteWordStartRight',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return DeleteWordStartRight;\n}(DeleteWordRightCommand));\nexports.DeleteWordStartRight = DeleteWordStartRight;\nvar DeleteWordEndRight = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordEndRight, _super);\n    function DeleteWordEndRight() {\n        return _super.call(this, {\n            whitespaceHeuristics: false,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'deleteWordEndRight',\n            precondition: editorContextKeys_1.EditorContextKeys.writable\n        }) || this;\n    }\n    return DeleteWordEndRight;\n}(DeleteWordRightCommand));\nexports.DeleteWordEndRight = DeleteWordEndRight;\nvar DeleteWordRight = /** @class */ (function (_super) {\n    tslib_1.__extends(DeleteWordRight, _super);\n    function DeleteWordRight() {\n        return _super.call(this, {\n            whitespaceHeuristics: true,\n            wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n            id: 'deleteWordRight',\n            precondition: editorContextKeys_1.EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Delete,\n                mac: { primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Delete },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    return DeleteWordRight;\n}(DeleteWordRightCommand));\nexports.DeleteWordRight = DeleteWordRight;\neditorExtensions_1.registerEditorCommand(new CursorWordStartLeft());\neditorExtensions_1.registerEditorCommand(new CursorWordEndLeft());\neditorExtensions_1.registerEditorCommand(new CursorWordLeft());\neditorExtensions_1.registerEditorCommand(new CursorWordStartLeftSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordEndLeftSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordLeftSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordStartRight());\neditorExtensions_1.registerEditorCommand(new CursorWordEndRight());\neditorExtensions_1.registerEditorCommand(new CursorWordRight());\neditorExtensions_1.registerEditorCommand(new CursorWordStartRightSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordEndRightSelect());\neditorExtensions_1.registerEditorCommand(new CursorWordRightSelect());\neditorExtensions_1.registerEditorCommand(new DeleteWordStartLeft());\neditorExtensions_1.registerEditorCommand(new DeleteWordEndLeft());\neditorExtensions_1.registerEditorCommand(new DeleteWordLeft());\neditorExtensions_1.registerEditorCommand(new DeleteWordStartRight());\neditorExtensions_1.registerEditorCommand(new DeleteWordEndRight());\neditorExtensions_1.registerEditorCommand(new DeleteWordRight());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordOperations/wordOperations.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oDAA0D;AAE1D,uEAA6H;AAC7H,2EAA0E;AAC1E,yEAAuE;AACvE,yEAA8E;AAC9E,yFAAsG;AACtG,+FAAuH;AACvH,2DAA0D;AAC1D,qDAAoD;AACpD,6DAA4D;AAC5D,8DAA2D;AAC3D,wEAAuE;AAEvE,yFAAqF;AAOrF;IAA8C,2CAAa;IAK1D,yBAAY,IAAqB;QAAjC,YACC,kBAAM,IAAI,CAAC,SAGX;QAFA,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC;;IACpD,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,QAA0B,EAAE,MAAmB,EAAE,IAAS;QAAlF,iBAoBC;QAnBA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO;SACP;QACD,IAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACzC,IAAM,cAAc,GAAG,iDAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACtE,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAM,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAE1C,IAAM,MAAM,GAAG,UAAU,CAAC,GAAG,CAAC,UAAC,GAAG;YACjC,IAAM,UAAU,GAAG,IAAI,mBAAQ,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC;YAC5E,IAAM,WAAW,GAAG,KAAI,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,EAAE,UAAU,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC;YAC5F,OAAO,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,KAAI,CAAC,gBAAgB,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,iBAAiB,EAAE,iCAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,0BAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAjC,CAAiC,CAAC,CAAC,CAAC;QACjI,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,IAAM,GAAG,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YACjF,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,yBAAU,CAAC,MAAM,CAAC,CAAC;SAC9C;IACF,CAAC;IAEO,iCAAO,GAAf,UAAgB,IAAe,EAAE,EAAY,EAAE,eAAwB;QACtE,IAAI,eAAe,EAAE;YACpB,qBAAqB;YACrB,OAAO,IAAI,qBAAS,CACnB,IAAI,CAAC,wBAAwB,EAC7B,IAAI,CAAC,oBAAoB,EACzB,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,MAAM,CACT,CAAC;SACF;aAAM;YACN,kBAAkB;YAClB,OAAO,IAAI,qBAAS,CACnB,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,MAAM,EACT,EAAE,CAAC,UAAU,EACb,EAAE,CAAC,MAAM,CACT,CAAC;SACF;IACF,CAAC;IAGF,sBAAC;AAAD,CAAC,AAtDD,CAA8C,gCAAa,GAsD1D;AAtDqB,0CAAe;AAwDrC;IAAqC,2CAAe;IAApD;;IAIA,CAAC;IAHU,+BAAK,GAAf,UAAgB,cAAuC,EAAE,KAAiB,EAAE,QAAkB,EAAE,kBAAsC;QACrI,OAAO,qCAAc,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IACzF,CAAC;IACF,sBAAC;AAAD,CAAC,AAJD,CAAqC,eAAe,GAInD;AAJY,0CAAe;AAM5B;IAAsC,4CAAe;IAArD;;IAIA,CAAC;IAHU,gCAAK,GAAf,UAAgB,cAAuC,EAAE,KAAiB,EAAE,QAAkB,EAAE,kBAAsC;QACrI,OAAO,qCAAc,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAC1F,CAAC;IACF,uBAAC;AAAD,CAAC,AAJD,CAAsC,eAAe,GAIpD;AAJY,4CAAgB;AAM7B;IAAyC,+CAAe;IACvD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,qBAAqB;YACzB,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,SAAS;gBAC3C,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,SAAS,EAAE;gBAChD,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,0BAAC;AAAD,CAAC,AAfD,CAAyC,eAAe,GAevD;AAfY,kDAAmB;AAiBhC;IAAuC,6CAAe;IACrD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,mBAAmB;YACvB,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,wBAAC;AAAD,CAAC,AATD,CAAuC,eAAe,GASrD;AATY,8CAAiB;AAW9B;IAAoC,0CAAe;IAClD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,aAAa;YACpD,EAAE,EAAE,gBAAgB;YACpB,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,qBAAC;AAAD,CAAC,AATD,CAAoC,eAAe,GASlD;AATY,wCAAc;AAW3B;IAA+C,qDAAe;IAC7D;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,2BAA2B;YAC/B,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,SAAS;gBAC1D,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,SAAS,EAAE;gBAC/D,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,gCAAC;AAAD,CAAC,AAfD,CAA+C,eAAe,GAe7D;AAfY,8DAAyB;AAiBtC;IAA6C,mDAAe;IAC3D;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,yBAAyB;YAC7B,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,8BAAC;AAAD,CAAC,AATD,CAA6C,eAAe,GAS3D;AATY,0DAAuB;AAWpC;IAA0C,gDAAe;IACxD;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,sBAAsB;YAC1B,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,2BAAC;AAAD,CAAC,AATD,CAA0C,eAAe,GASxD;AATY,oDAAoB;AAWjC;IAA0C,gDAAgB;IACzD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,sBAAsB;YAC1B,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,2BAAC;AAAD,CAAC,AATD,CAA0C,gBAAgB,GASzD;AATY,oDAAoB;AAWjC;IAAwC,8CAAgB;IACvD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,oBAAoB;YACxB,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,UAAU;gBAC5C,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,UAAU,EAAE;gBACjD,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,yBAAC;AAAD,CAAC,AAfD,CAAwC,gBAAgB,GAevD;AAfY,gDAAkB;AAiB/B;IAAqC,2CAAgB;IACpD;eACC,kBAAM;YACL,eAAe,EAAE,KAAK;YACtB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,iBAAiB;YACrB,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,sBAAC;AAAD,CAAC,AATD,CAAqC,gBAAgB,GASpD;AATY,0CAAe;AAW5B;IAAgD,sDAAgB;IAC/D;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,4BAA4B;YAChC,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,iCAAC;AAAD,CAAC,AATD,CAAgD,gBAAgB,GAS/D;AATY,gEAA0B;AAWvC;IAA8C,oDAAgB;IAC7D;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,0BAA0B;YAC9B,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,UAAU;gBAC3D,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,UAAU,EAAE;gBAChE,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,+BAAC;AAAD,CAAC,AAfD,CAA8C,gBAAgB,GAe7D;AAfY,4DAAwB;AAiBrC;IAA2C,iDAAgB;IAC1D;eACC,kBAAM;YACL,eAAe,EAAE,IAAI;YACrB,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,uBAAuB;YAC3B,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IACF,4BAAC;AAAD,CAAC,AATD,CAA2C,gBAAgB,GAS1D;AATY,sDAAqB;AAgBlC;IAAgD,6CAAa;IAI5D,2BAAY,IAAuB;QAAnC,YACC,kBAAM,IAAI,CAAC,SAGX;QAFA,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC;QACvD,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC;;IACpD,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,QAA0B,EAAE,MAAmB,EAAE,IAAS;QAAlF,iBAiBC;QAhBA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO;SACP;QACD,IAAM,MAAM,GAAG,MAAM,CAAC,gBAAgB,EAAE,CAAC;QACzC,IAAM,cAAc,GAAG,iDAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QACtE,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAM,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;QAE1C,IAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,UAAC,GAAG;YACnC,IAAM,WAAW,GAAG,KAAI,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,EAAE,GAAG,EAAE,KAAI,CAAC,qBAAqB,EAAE,KAAI,CAAC,mBAAmB,CAAC,CAAC;YACnH,OAAO,IAAI,+BAAc,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,YAAY,EAAE,CAAC;QACtB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,YAAY,EAAE,CAAC;IACvB,CAAC;IAGF,wBAAC;AAAD,CAAC,AA9BD,CAAgD,gCAAa,GA8B5D;AA9BqB,8CAAiB;AAgCvC;IAA2C,iDAAiB;IAA5D;;IAQA,CAAC;IAPU,uCAAO,GAAjB,UAAkB,cAAuC,EAAE,KAAiB,EAAE,SAAoB,EAAE,oBAA6B,EAAE,kBAAsC;QACxK,IAAI,CAAC,GAAG,qCAAc,CAAC,cAAc,CAAC,cAAc,EAAE,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;QAClH,IAAI,CAAC,EAAE;YACN,OAAO,CAAC,CAAC;SACT;QACD,OAAO,IAAI,aAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IACF,4BAAC;AAAD,CAAC,AARD,CAA2C,iBAAiB,GAQ3D;AARY,sDAAqB;AAUlC;IAA4C,kDAAiB;IAA7D;;IAUA,CAAC;IATU,wCAAO,GAAjB,UAAkB,cAAuC,EAAE,KAAiB,EAAE,SAAoB,EAAE,oBAA6B,EAAE,kBAAsC;QACxK,IAAI,CAAC,GAAG,qCAAc,CAAC,eAAe,CAAC,cAAc,EAAE,KAAK,EAAE,SAAS,EAAE,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;QACnH,IAAI,CAAC,EAAE;YACN,OAAO,CAAC,CAAC;SACT;QACD,IAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QACvC,IAAM,SAAS,GAAG,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;QACpD,OAAO,IAAI,aAAK,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC9D,CAAC;IACF,6BAAC;AAAD,CAAC,AAVD,CAA4C,iBAAiB,GAU5D;AAVY,wDAAsB;AAYnC;IAAyC,+CAAqB;IAC7D;eACC,kBAAM;YACL,oBAAoB,EAAE,KAAK;YAC3B,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,qBAAqB;YACzB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,0BAAC;AAAD,CAAC,AATD,CAAyC,qBAAqB,GAS7D;AATY,kDAAmB;AAWhC;IAAuC,6CAAqB;IAC3D;eACC,kBAAM;YACL,oBAAoB,EAAE,KAAK;YAC3B,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,mBAAmB;YACvB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,wBAAC;AAAD,CAAC,AATD,CAAuC,qBAAqB,GAS3D;AATY,8CAAiB;AAW9B;IAAoC,0CAAqB;IACxD;eACC,kBAAM;YACL,oBAAoB,EAAE,IAAI;YAC1B,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,gBAAgB;YACpB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;YACxC,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,SAAS;gBAC3C,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,SAAS,EAAE;gBAChD,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,qBAAC;AAAD,CAAC,AAfD,CAAoC,qBAAqB,GAexD;AAfY,wCAAc;AAiB3B;IAA0C,gDAAsB;IAC/D;eACC,kBAAM;YACL,oBAAoB,EAAE,KAAK;YAC3B,kBAAkB,EAAE,yCAAkB,CAAC,SAAS;YAChD,EAAE,EAAE,sBAAsB;YAC1B,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,2BAAC;AAAD,CAAC,AATD,CAA0C,sBAAsB,GAS/D;AATY,oDAAoB;AAWjC;IAAwC,8CAAsB;IAC7D;eACC,kBAAM;YACL,oBAAoB,EAAE,KAAK;YAC3B,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,oBAAoB;YACxB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;SACxC,CAAC;IACH,CAAC;IACF,yBAAC;AAAD,CAAC,AATD,CAAwC,sBAAsB,GAS7D;AATY,gDAAkB;AAW/B;IAAqC,2CAAsB;IAC1D;eACC,kBAAM;YACL,oBAAoB,EAAE,IAAI;YAC1B,kBAAkB,EAAE,yCAAkB,CAAC,OAAO;YAC9C,EAAE,EAAE,iBAAiB;YACrB,YAAY,EAAE,qCAAiB,CAAC,QAAQ;YACxC,MAAM,EAAE;gBACP,MAAM,EAAE,qCAAiB,CAAC,cAAc;gBACxC,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,MAAM;gBACxC,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,GAAG,GAAG,kBAAO,CAAC,MAAM,EAAE;gBAC7C,MAAM,EAAE,sCAAgB,CAAC,aAAa;aACtC;SACD,CAAC;IACH,CAAC;IACF,sBAAC;AAAD,CAAC,AAfD,CAAqC,sBAAsB,GAe1D;AAfY,0CAAe;AAiB5B,wCAAqB,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AACjD,wCAAqB,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAC/C,wCAAqB,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;AAC5C,wCAAqB,CAAC,IAAI,yBAAyB,EAAE,CAAC,CAAC;AACvD,wCAAqB,CAAC,IAAI,uBAAuB,EAAE,CAAC,CAAC;AACrD,wCAAqB,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAClD,wCAAqB,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAClD,wCAAqB,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAChD,wCAAqB,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC;AAC7C,wCAAqB,CAAC,IAAI,0BAA0B,EAAE,CAAC,CAAC;AACxD,wCAAqB,CAAC,IAAI,wBAAwB,EAAE,CAAC,CAAC;AACtD,wCAAqB,CAAC,IAAI,qBAAqB,EAAE,CAAC,CAAC;AACnD,wCAAqB,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AACjD,wCAAqB,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;AAC/C,wCAAqB,CAAC,IAAI,cAAc,EAAE,CAAC,CAAC;AAC5C,wCAAqB,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC;AAClD,wCAAqB,CAAC,IAAI,kBAAkB,EAAE,CAAC,CAAC;AAChD,wCAAqB,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorCommand, ICommandOptions, ServicesAccessor, registerEditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { ReplaceCommand } from 'vs/editor/common/commands/replaceCommand';\nimport { CursorState } from 'vs/editor/common/controller/cursorCommon';\nimport { CursorChangeReason } from 'vs/editor/common/controller/cursorEvents';\nimport { WordNavigationType, WordOperations } from 'vs/editor/common/controller/cursorWordOperations';\nimport { WordCharacterClassifier, getMapForWordSeparators } from 'vs/editor/common/controller/wordCharacterClassifier';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nexport interface MoveWordOptions extends ICommandOptions {\n\tinSelectionMode: boolean;\n\twordNavigationType: WordNavigationType;\n}\n\nexport abstract class MoveWordCommand extends EditorCommand {\n\n\tprivate readonly _inSelectionMode: boolean;\n\tprivate readonly _wordNavigationType: WordNavigationType;\n\n\tconstructor(opts: MoveWordOptions) {\n\t\tsuper(opts);\n\t\tthis._inSelectionMode = opts.inSelectionMode;\n\t\tthis._wordNavigationType = opts.wordNavigationType;\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst config = editor.getConfiguration();\n\t\tconst wordSeparators = getMapForWordSeparators(config.wordSeparators);\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\n\t\tconst result = selections.map((sel) => {\n\t\t\tconst inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n\t\t\tconst outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType);\n\t\t\treturn this._moveTo(sel, outPosition, this._inSelectionMode);\n\t\t});\n\n\t\teditor._getCursors().setStates('moveWordCommand', CursorChangeReason.NotSet, result.map(r => CursorState.fromModelSelection(r)));\n\t\tif (result.length === 1) {\n\t\t\tconst pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n\t\t\teditor.revealPosition(pos, ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprivate _moveTo(from: Selection, to: Position, inSelectionMode: boolean): Selection {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new Selection(\n\t\t\t\tfrom.selectionStartLineNumber,\n\t\t\t\tfrom.selectionStartColumn,\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new Selection(\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column,\n\t\t\t\tto.lineNumber,\n\t\t\t\tto.column\n\t\t\t);\n\t\t}\n\t}\n\n\tprotected abstract _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType): Position;\n}\n\nexport class WordLeftCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType): Position {\n\t\treturn WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType);\n\t}\n}\n\nexport class WordRightCommand extends MoveWordCommand {\n\tprotected _move(wordSeparators: WordCharacterClassifier, model: ITextModel, position: Position, wordNavigationType: WordNavigationType): Position {\n\t\treturn WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n\t}\n}\n\nexport class CursorWordStartLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartLeft',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.LeftArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordEndLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndLeft',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordLeft extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStartFast,\n\t\t\tid: 'cursorWordLeft',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartLeftSelect',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.LeftArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyMod.Shift | KeyCode.LeftArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndLeftSelect',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordLeftSelect extends WordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordLeftSelect',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordStartRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartRight',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordEndRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndRight',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.RightArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordRight extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordRight',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordStartRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'cursorWordStartRightSelect',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport class CursorWordEndRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordEndRightSelect',\n\t\t\tprecondition: null,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.RightArrow,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyMod.Shift | KeyCode.RightArrow },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CursorWordRightSelect extends WordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tinSelectionMode: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'cursorWordRightSelect',\n\t\t\tprecondition: null\n\t\t});\n\t}\n}\n\nexport interface DeleteWordOptions extends ICommandOptions {\n\twhitespaceHeuristics: boolean;\n\twordNavigationType: WordNavigationType;\n}\n\nexport abstract class DeleteWordCommand extends EditorCommand {\n\tprivate readonly _whitespaceHeuristics: boolean;\n\tprivate readonly _wordNavigationType: WordNavigationType;\n\n\tconstructor(opts: DeleteWordOptions) {\n\t\tsuper(opts);\n\t\tthis._whitespaceHeuristics = opts.whitespaceHeuristics;\n\t\tthis._wordNavigationType = opts.wordNavigationType;\n\t}\n\n\tpublic runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, args: any): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst config = editor.getConfiguration();\n\t\tconst wordSeparators = getMapForWordSeparators(config.wordSeparators);\n\t\tconst model = editor.getModel();\n\t\tconst selections = editor.getSelections();\n\n\t\tconst commands = selections.map((sel) => {\n\t\t\tconst deleteRange = this._delete(wordSeparators, model, sel, this._whitespaceHeuristics, this._wordNavigationType);\n\t\t\treturn new ReplaceCommand(deleteRange, '');\n\t\t});\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n\n\tprotected abstract _delete(wordSeparators: WordCharacterClassifier, model: ITextModel, selection: Selection, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): Range;\n}\n\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n\tprotected _delete(wordSeparators: WordCharacterClassifier, model: ITextModel, selection: Selection, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): Range {\n\t\tlet r = WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\treturn new Range(1, 1, 1, 1);\n\t}\n}\n\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n\tprotected _delete(wordSeparators: WordCharacterClassifier, model: ITextModel, selection: Selection, whitespaceHeuristics: boolean, wordNavigationType: WordNavigationType): Range {\n\t\tlet r = WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType);\n\t\tif (r) {\n\t\t\treturn r;\n\t\t}\n\t\tconst lineCount = model.getLineCount();\n\t\tconst maxColumn = model.getLineMaxColumn(lineCount);\n\t\treturn new Range(lineCount, maxColumn, lineCount, maxColumn);\n\t}\n}\n\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordStartLeft',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordEndLeft',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordLeft',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.Backspace },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordStart,\n\t\t\tid: 'deleteWordStartRight',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: false,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordEndRight',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nexport class DeleteWordRight extends DeleteWordRightCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\twhitespaceHeuristics: true,\n\t\t\twordNavigationType: WordNavigationType.WordEnd,\n\t\t\tid: 'deleteWordRight',\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Delete,\n\t\t\t\tmac: { primary: KeyMod.Alt | KeyCode.Delete },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\n"]}]}