{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar mime = require(\"vs/base/common/mime\");\nvar resources = require(\"vs/base/common/resources\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modeServiceImpl_1 = require(\"vs/editor/common/services/modeServiceImpl\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar extensions_2 = require(\"vs/platform/instantiation/common/extensions\");\nexports.languagesExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'languages',\n    jsonSchema: {\n        description: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),\n        type: 'array',\n        items: {\n            type: 'object',\n            defaultSnippets: [{ body: { id: '${1:languageId}', aliases: ['${2:label}'], extensions: ['${3:extension}'], configuration: './language-configuration.json' } }],\n            properties: {\n                id: {\n                    description: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),\n                    type: 'string'\n                },\n                aliases: {\n                    description: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                extensions: {\n                    description: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),\n                    default: ['.foo'],\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                filenames: {\n                    description: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                filenamePatterns: {\n                    description: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                mimetypes: {\n                    description: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),\n                    type: 'array',\n                    items: {\n                        type: 'string'\n                    }\n                },\n                firstLine: {\n                    description: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),\n                    type: 'string'\n                },\n                configuration: {\n                    description: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),\n                    type: 'string',\n                    default: './language-configuration.json'\n                }\n            }\n        }\n    }\n});\nvar WorkbenchModeServiceImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(WorkbenchModeServiceImpl, _super);\n    function WorkbenchModeServiceImpl(extensionService, configurationService, environmentService) {\n        var _this = _super.call(this, environmentService.verbose || environmentService.isExtensionDevelopment || !environmentService.isBuilt) || this;\n        _this._configurationService = configurationService;\n        _this._extensionService = extensionService;\n        exports.languagesExtPoint.setHandler(function (extensions) {\n            var allValidLanguages = [];\n            for (var i = 0, len = extensions.length; i < len; i++) {\n                var extension = extensions[i];\n                if (!Array.isArray(extension.value)) {\n                    extension.collector.error(nls.localize('invalid', \"Invalid `contributes.{0}`. Expected an array.\", exports.languagesExtPoint.name));\n                    continue;\n                }\n                for (var j = 0, lenJ = extension.value.length; j < lenJ; j++) {\n                    var ext = extension.value[j];\n                    if (isValidLanguageExtensionPoint(ext, extension.collector)) {\n                        var configuration = undefined;\n                        if (ext.configuration) {\n                            configuration = resources.joinPath(extension.description.extensionLocation, ext.configuration);\n                        }\n                        allValidLanguages.push({\n                            id: ext.id,\n                            extensions: ext.extensions,\n                            filenames: ext.filenames,\n                            filenamePatterns: ext.filenamePatterns,\n                            firstLine: ext.firstLine,\n                            aliases: ext.aliases,\n                            mimetypes: ext.mimetypes,\n                            configuration: configuration\n                        });\n                    }\n                }\n            }\n            modesRegistry_1.ModesRegistry.setDynamicLanguages(allValidLanguages);\n        });\n        _this.updateMime();\n        _this._configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration(files_1.FILES_ASSOCIATIONS_CONFIG)) {\n                _this.updateMime();\n            }\n        });\n        _this._extensionService.whenInstalledExtensionsRegistered().then(function () {\n            _this.updateMime();\n        });\n        _this.onDidCreateMode(function (mode) {\n            _this._extensionService.activateByEvent(\"onLanguage:\" + mode.getId());\n        });\n        return _this;\n    }\n    WorkbenchModeServiceImpl.prototype._onReady = function () {\n        if (!this._onReadyPromise) {\n            this._onReadyPromise = Promise.resolve(this._extensionService.whenInstalledExtensionsRegistered().then(function () { return true; }));\n        }\n        return this._onReadyPromise;\n    };\n    WorkbenchModeServiceImpl.prototype.updateMime = function () {\n        var _this = this;\n        var configuration = this._configurationService.getValue();\n        // Clear user configured mime associations\n        mime.clearTextMimes(true /* user configured */);\n        // Register based on settings\n        if (configuration.files && configuration.files.associations) {\n            Object.keys(configuration.files.associations).forEach(function (pattern) {\n                var langId = configuration.files.associations[pattern];\n                var mimetype = _this.getMimeForMode(langId) || \"text/x-\" + langId;\n                mime.registerTextMime({ id: langId, mime: mimetype, filepattern: pattern, userConfigured: true });\n            });\n        }\n        this._onLanguagesMaybeChanged.fire();\n    };\n    WorkbenchModeServiceImpl = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_1.IExtensionService),\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, environment_1.IEnvironmentService)\n    ], WorkbenchModeServiceImpl);\n    return WorkbenchModeServiceImpl;\n}(modeServiceImpl_1.ModeServiceImpl));\nexports.WorkbenchModeServiceImpl = WorkbenchModeServiceImpl;\nfunction isUndefinedOrStringArray(value) {\n    if (typeof value === 'undefined') {\n        return true;\n    }\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    return value.every(function (item) { return typeof item === 'string'; });\n}\nfunction isValidLanguageExtensionPoint(value, collector) {\n    if (!value) {\n        collector.error(nls.localize('invalid.empty', \"Empty value for `contributes.{0}`\", exports.languagesExtPoint.name));\n        return false;\n    }\n    if (typeof value.id !== 'string') {\n        collector.error(nls.localize('require.id', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.extensions)) {\n        collector.error(nls.localize('opt.extensions', \"property `{0}` can be omitted and must be of type `string[]`\", 'extensions'));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.filenames)) {\n        collector.error(nls.localize('opt.filenames', \"property `{0}` can be omitted and must be of type `string[]`\", 'filenames'));\n        return false;\n    }\n    if (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\n        collector.error(nls.localize('opt.firstLine', \"property `{0}` can be omitted and must be of type `string`\", 'firstLine'));\n        return false;\n    }\n    if (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\n        collector.error(nls.localize('opt.configuration', \"property `{0}` can be omitted and must be of type `string`\", 'configuration'));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.aliases)) {\n        collector.error(nls.localize('opt.aliases', \"property `{0}` can be omitted and must be of type `string[]`\", 'aliases'));\n        return false;\n    }\n    if (!isUndefinedOrStringArray(value.mimetypes)) {\n        collector.error(nls.localize('opt.mimetypes', \"property `{0}` can be omitted and must be of type `string[]`\", 'mimetypes'));\n        return false;\n    }\n    return true;\n}\nextensions_2.registerSingleton(modeService_1.IModeService, WorkbenchModeServiceImpl);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/mode/common/workbenchModeService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as mime from 'vs/base/common/mime';\nimport * as resources from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ModesRegistry } from 'vs/editor/common/modes/modesRegistry';\nimport { ILanguageExtensionPoint, IModeService } from 'vs/editor/common/services/modeService';\nimport { ModeServiceImpl } from 'vs/editor/common/services/modeServiceImpl';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FILES_ASSOCIATIONS_CONFIG, IFilesConfiguration } from 'vs/platform/files/common/files';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionMessageCollector, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport interface IRawLanguageExtensionPoint {\n\tid: string;\n\textensions: string[];\n\tfilenames: string[];\n\tfilenamePatterns: string[];\n\tfirstLine: string;\n\taliases: string[];\n\tmimetypes: string[];\n\tconfiguration: string;\n}\n\nexport const languagesExtPoint: IExtensionPoint<IRawLanguageExtensionPoint[]> = ExtensionsRegistry.registerExtensionPoint<IRawLanguageExtensionPoint[]>({\n\textensionPoint: 'languages',\n\tjsonSchema: {\n\t\tdescription: nls.localize('vscode.extension.contributes.languages', 'Contributes language declarations.'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { id: '${1:languageId}', aliases: ['${2:label}'], extensions: ['${3:extension}'], configuration: './language-configuration.json' } }],\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.id', 'ID of the language.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\taliases: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.aliases', 'Name aliases for the language.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\textensions: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.extensions', 'File extensions associated to the language.'),\n\t\t\t\t\tdefault: ['.foo'],\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfilenames: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.filenames', 'File names associated to the language.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfilenamePatterns: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.filenamePatterns', 'File name glob patterns associated to the language.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmimetypes: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.mimetypes', 'Mime types associated to the language.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfirstLine: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.firstLine', 'A regular expression matching the first line of a file of the language.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tconfiguration: {\n\t\t\t\t\tdescription: nls.localize('vscode.extension.contributes.languages.configuration', 'A relative path to a file containing configuration options for the language.'),\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: './language-configuration.json'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class WorkbenchModeServiceImpl extends ModeServiceImpl {\n\tprivate _configurationService: IConfigurationService;\n\tprivate _extensionService: IExtensionService;\n\tprivate _onReadyPromise: Promise<boolean>;\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService\n\t) {\n\t\tsuper(environmentService.verbose || environmentService.isExtensionDevelopment || !environmentService.isBuilt);\n\t\tthis._configurationService = configurationService;\n\t\tthis._extensionService = extensionService;\n\n\t\tlanguagesExtPoint.setHandler((extensions: IExtensionPointUser<IRawLanguageExtensionPoint[]>[]) => {\n\t\t\tlet allValidLanguages: ILanguageExtensionPoint[] = [];\n\n\t\t\tfor (let i = 0, len = extensions.length; i < len; i++) {\n\t\t\t\tlet extension = extensions[i];\n\n\t\t\t\tif (!Array.isArray(extension.value)) {\n\t\t\t\t\textension.collector.error(nls.localize('invalid', \"Invalid `contributes.{0}`. Expected an array.\", languagesExtPoint.name));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (let j = 0, lenJ = extension.value.length; j < lenJ; j++) {\n\t\t\t\t\tlet ext = extension.value[j];\n\t\t\t\t\tif (isValidLanguageExtensionPoint(ext, extension.collector)) {\n\t\t\t\t\t\tlet configuration: URI | undefined = undefined;\n\t\t\t\t\t\tif (ext.configuration) {\n\t\t\t\t\t\t\tconfiguration = resources.joinPath(extension.description.extensionLocation, ext.configuration);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tallValidLanguages.push({\n\t\t\t\t\t\t\tid: ext.id,\n\t\t\t\t\t\t\textensions: ext.extensions,\n\t\t\t\t\t\t\tfilenames: ext.filenames,\n\t\t\t\t\t\t\tfilenamePatterns: ext.filenamePatterns,\n\t\t\t\t\t\t\tfirstLine: ext.firstLine,\n\t\t\t\t\t\t\taliases: ext.aliases,\n\t\t\t\t\t\t\tmimetypes: ext.mimetypes,\n\t\t\t\t\t\t\tconfiguration: configuration\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tModesRegistry.setDynamicLanguages(allValidLanguages);\n\n\t\t});\n\n\t\tthis.updateMime();\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(FILES_ASSOCIATIONS_CONFIG)) {\n\t\t\t\tthis.updateMime();\n\t\t\t}\n\t\t});\n\t\tthis._extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tthis.updateMime();\n\t\t});\n\n\t\tthis.onDidCreateMode((mode) => {\n\t\t\tthis._extensionService.activateByEvent(`onLanguage:${mode.getId()}`);\n\t\t});\n\t}\n\n\tprotected _onReady(): Promise<boolean> {\n\t\tif (!this._onReadyPromise) {\n\t\t\tthis._onReadyPromise = Promise.resolve(\n\t\t\t\tthis._extensionService.whenInstalledExtensionsRegistered().then(() => true)\n\t\t\t);\n\t\t}\n\n\t\treturn this._onReadyPromise;\n\t}\n\n\tprivate updateMime(): void {\n\t\tconst configuration = this._configurationService.getValue<IFilesConfiguration>();\n\n\t\t// Clear user configured mime associations\n\t\tmime.clearTextMimes(true /* user configured */);\n\n\t\t// Register based on settings\n\t\tif (configuration.files && configuration.files.associations) {\n\t\t\tObject.keys(configuration.files.associations).forEach(pattern => {\n\t\t\t\tconst langId = configuration.files.associations[pattern];\n\t\t\t\tconst mimetype = this.getMimeForMode(langId) || `text/x-${langId}`;\n\n\t\t\t\tmime.registerTextMime({ id: langId, mime: mimetype, filepattern: pattern, userConfigured: true });\n\t\t\t});\n\t\t}\n\n\t\tthis._onLanguagesMaybeChanged.fire();\n\t}\n}\n\nfunction isUndefinedOrStringArray(value: string[]): boolean {\n\tif (typeof value === 'undefined') {\n\t\treturn true;\n\t}\n\tif (!Array.isArray(value)) {\n\t\treturn false;\n\t}\n\treturn value.every(item => typeof item === 'string');\n}\n\nfunction isValidLanguageExtensionPoint(value: IRawLanguageExtensionPoint, collector: ExtensionMessageCollector): boolean {\n\tif (!value) {\n\t\tcollector.error(nls.localize('invalid.empty', \"Empty value for `contributes.{0}`\", languagesExtPoint.name));\n\t\treturn false;\n\t}\n\tif (typeof value.id !== 'string') {\n\t\tcollector.error(nls.localize('require.id', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.extensions)) {\n\t\tcollector.error(nls.localize('opt.extensions', \"property `{0}` can be omitted and must be of type `string[]`\", 'extensions'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.filenames)) {\n\t\tcollector.error(nls.localize('opt.filenames', \"property `{0}` can be omitted and must be of type `string[]`\", 'filenames'));\n\t\treturn false;\n\t}\n\tif (typeof value.firstLine !== 'undefined' && typeof value.firstLine !== 'string') {\n\t\tcollector.error(nls.localize('opt.firstLine', \"property `{0}` can be omitted and must be of type `string`\", 'firstLine'));\n\t\treturn false;\n\t}\n\tif (typeof value.configuration !== 'undefined' && typeof value.configuration !== 'string') {\n\t\tcollector.error(nls.localize('opt.configuration', \"property `{0}` can be omitted and must be of type `string`\", 'configuration'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.aliases)) {\n\t\tcollector.error(nls.localize('opt.aliases', \"property `{0}` can be omitted and must be of type `string[]`\", 'aliases'));\n\t\treturn false;\n\t}\n\tif (!isUndefinedOrStringArray(value.mimetypes)) {\n\t\tcollector.error(nls.localize('opt.mimetypes', \"property `{0}` can be omitted and must be of type `string[]`\", 'mimetypes'));\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nregisterSingleton(IModeService, WorkbenchModeServiceImpl);"]}]}