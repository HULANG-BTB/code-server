{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/binaryEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor\", \"vs/platform/files/common/files\", \"vs/base/common/network\", \"vs/base/common/resources\"], function (require, exports, editor_1, files_1, network_1, resources_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * An editor model that just represents a resource that can be loaded.\n     */\n    let BinaryEditorModel = class BinaryEditorModel extends editor_1.EditorModel {\n        constructor(resource, name, fileService) {\n            super();\n            this.resource = resource;\n            this.name = name;\n            this.fileService = fileService;\n            this.resource = resource;\n            this.name = name;\n            if (resource.scheme === network_1.Schemas.data) {\n                const metadata = resources_1.DataUri.parseMetaData(resource);\n                if (metadata.has(resources_1.DataUri.META_DATA_SIZE)) {\n                    this.size = Number(metadata.get(resources_1.DataUri.META_DATA_SIZE));\n                }\n                this.mime = metadata.get(resources_1.DataUri.META_DATA_MIME);\n            }\n        }\n        /**\n         * The name of the binary resource.\n         */\n        getName() {\n            return this.name;\n        }\n        /**\n         * The resource of the binary resource.\n         */\n        getResource() {\n            return this.resource;\n        }\n        /**\n         * The size of the binary resource if known.\n         */\n        getSize() {\n            return this.size;\n        }\n        /**\n         * The mime of the binary resource if known.\n         */\n        getMime() {\n            return this.mime;\n        }\n        /**\n         * The etag of the binary resource if known.\n         */\n        getETag() {\n            return this.etag;\n        }\n        load() {\n            // Make sure to resolve up to date stat for file resources\n            if (this.fileService.canHandleResource(this.resource)) {\n                return this.fileService.resolveFile(this.resource, { resolveMetadata: true }).then(stat => {\n                    this.etag = stat.etag;\n                    if (typeof stat.size === 'number') {\n                        this.size = stat.size;\n                    }\n                    return this;\n                });\n            }\n            return Promise.resolve(this);\n        }\n    };\n    BinaryEditorModel = __decorate([\n        __param(2, files_1.IFileService)\n    ], BinaryEditorModel);\n    exports.BinaryEditorModel = BinaryEditorModel;\n});\n",null]}