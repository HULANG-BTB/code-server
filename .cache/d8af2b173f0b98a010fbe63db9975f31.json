{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar url_1 = require(\"url\");\nvar types_1 = require(\"vs/base/common/types\");\nfunction getSystemProxyURI(requestURL) {\n    if (requestURL.protocol === 'http:') {\n        return process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    else if (requestURL.protocol === 'https:') {\n        return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    return null;\n}\nfunction getProxyAgent(rawRequestURL, options) {\n    if (options === void 0) { options = {}; }\n    return tslib_1.__awaiter(this, void 0, Promise, function () {\n        var requestURL, proxyURL, proxyEndpoint, opts, Ctor, _a;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    requestURL = url_1.parse(rawRequestURL);\n                    proxyURL = options.proxyUrl || getSystemProxyURI(requestURL);\n                    if (!proxyURL) {\n                        return [2 /*return*/, null];\n                    }\n                    proxyEndpoint = url_1.parse(proxyURL);\n                    if (!/^https?:$/.test(proxyEndpoint.protocol || '')) {\n                        return [2 /*return*/, null];\n                    }\n                    opts = {\n                        host: proxyEndpoint.hostname || '',\n                        port: Number(proxyEndpoint.port),\n                        auth: proxyEndpoint.auth,\n                        rejectUnauthorized: types_1.isBoolean(options.strictSSL) ? options.strictSSL : true\n                    };\n                    if (!(requestURL.protocol === 'http:')) return [3 /*break*/, 2];\n                    return [4 /*yield*/, Promise.resolve().then(function () { return require('http-proxy-agent'); })];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 4];\n                case 2: return [4 /*yield*/, Promise.resolve().then(function () { return require('https-proxy-agent'); })];\n                case 3:\n                    _a = _b.sent();\n                    _b.label = 4;\n                case 4:\n                    Ctor = _a;\n                    return [2 /*return*/, new Ctor(opts)];\n            }\n        });\n    });\n}\nexports.getProxyAgent = getProxyAgent;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/node/proxy.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,2BAA6C;AAC7C,8CAAiD;AAGjD,SAAS,iBAAiB,CAAC,UAAe;IACzC,IAAI,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAE;QACpC,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;KAChE;SAAM,IAAI,UAAU,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAC5C,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;KACtH;IAED,OAAO,IAAI,CAAC;AACb,CAAC;AAOD,SAAsB,aAAa,CAAC,aAAqB,EAAE,OAAsB;IAAtB,wBAAA,EAAA,YAAsB;2CAAG,OAAO;;;;;oBACpF,UAAU,GAAG,WAAQ,CAAC,aAAa,CAAC,CAAC;oBACrC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC;oBAEnE,IAAI,CAAC,QAAQ,EAAE;wBACd,sBAAO,IAAI,EAAC;qBACZ;oBAEK,aAAa,GAAG,WAAQ,CAAC,QAAQ,CAAC,CAAC;oBAEzC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,EAAE,CAAC,EAAE;wBACpD,sBAAO,IAAI,EAAC;qBACZ;oBAEK,IAAI,GAAG;wBACZ,IAAI,EAAE,aAAa,CAAC,QAAQ,IAAI,EAAE;wBAClC,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;wBAChC,IAAI,EAAE,aAAa,CAAC,IAAI;wBACxB,kBAAkB,EAAE,iBAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;qBAC3E,CAAC;yBAEW,CAAA,UAAU,CAAC,QAAQ,KAAK,OAAO,CAAA,EAA/B,wBAA+B;oBACzC,yEAAa,kBAAkB,OAAC;;oBAAhC,KAAA,SAAgC,CAAA;;wBAChC,yEAAa,mBAAmB,OAAC;;oBAAjC,KAAA,SAAiC,CAAA;;;oBAF9B,IAAI,KAE0B;oBAEpC,sBAAO,IAAI,IAAI,CAAC,IAAI,CAAC,EAAC;;;;CACtB;AA1BD,sCA0BC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Url, parse as parseUrl } from 'url';\nimport { isBoolean } from 'vs/base/common/types';\nimport { Agent } from './request';\n\nfunction getSystemProxyURI(requestURL: Url): string | null {\n\tif (requestURL.protocol === 'http:') {\n\t\treturn process.env.HTTP_PROXY || process.env.http_proxy || null;\n\t} else if (requestURL.protocol === 'https:') {\n\t\treturn process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n\t}\n\n\treturn null;\n}\n\nexport interface IOptions {\n\tproxyUrl?: string;\n\tstrictSSL?: boolean;\n}\n\nexport async function getProxyAgent(rawRequestURL: string, options: IOptions = {}): Promise<Agent> {\n\tconst requestURL = parseUrl(rawRequestURL);\n\tconst proxyURL = options.proxyUrl || getSystemProxyURI(requestURL);\n\n\tif (!proxyURL) {\n\t\treturn null;\n\t}\n\n\tconst proxyEndpoint = parseUrl(proxyURL);\n\n\tif (!/^https?:$/.test(proxyEndpoint.protocol || '')) {\n\t\treturn null;\n\t}\n\n\tconst opts = {\n\t\thost: proxyEndpoint.hostname || '',\n\t\tport: Number(proxyEndpoint.port),\n\t\tauth: proxyEndpoint.auth,\n\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t};\n\n\tconst Ctor = requestURL.protocol === 'http:'\n\t\t? await import('http-proxy-agent')\n\t\t: await import('https-proxy-agent');\n\n\treturn new Ctor(opts);\n}\n"]}]}