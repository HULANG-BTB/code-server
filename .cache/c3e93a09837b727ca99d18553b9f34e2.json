{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/progressbar/progressbar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/progressbar/progressbar.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./progressbar\");\nvar assert = require(\"vs/base/common/assert\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar color_1 = require(\"vs/base/common/color\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar async_1 = require(\"vs/base/common/async\");\nvar css_done = 'done';\nvar css_active = 'active';\nvar css_infinite = 'infinite';\nvar css_discrete = 'discrete';\nvar css_progress_container = 'monaco-progress-container';\nvar css_progress_bit = 'progress-bit';\nvar defaultOpts = {\n    progressBarBackground: color_1.Color.fromHex('#0E70C0')\n};\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nvar ProgressBar = /** @class */ (function (_super) {\n    tslib_1.__extends(ProgressBar, _super);\n    function ProgressBar(container, options) {\n        var _this = _super.call(this) || this;\n        _this.options = options || Object.create(null);\n        objects_1.mixin(_this.options, defaultOpts, false);\n        _this.workedVal = 0;\n        _this.progressBarBackground = _this.options.progressBarBackground;\n        _this._register(_this.showDelayedScheduler = new async_1.RunOnceScheduler(function () { return dom_1.show(_this.element); }, 0));\n        _this.create(container);\n        return _this;\n    }\n    ProgressBar.prototype.create = function (container) {\n        this.element = document.createElement('div');\n        dom_1.addClass(this.element, css_progress_container);\n        container.appendChild(this.element);\n        this.bit = document.createElement('div');\n        dom_1.addClass(this.bit, css_progress_bit);\n        this.element.appendChild(this.bit);\n        this.applyStyles();\n    };\n    ProgressBar.prototype.off = function () {\n        this.bit.style.width = 'inherit';\n        this.bit.style.opacity = '1';\n        dom_1.removeClasses(this.element, css_active, css_infinite, css_discrete);\n        this.workedVal = 0;\n        this.totalWork = undefined;\n    };\n    /**\n     * Indicates to the progress bar that all work is done.\n     */\n    ProgressBar.prototype.done = function () {\n        return this.doDone(true);\n    };\n    /**\n     * Stops the progressbar from showing any progress instantly without fading out.\n     */\n    ProgressBar.prototype.stop = function () {\n        return this.doDone(false);\n    };\n    ProgressBar.prototype.doDone = function (delayed) {\n        var _this = this;\n        dom_1.addClass(this.element, css_done);\n        // let it grow to 100% width and hide afterwards\n        if (!dom_1.hasClass(this.element, css_infinite)) {\n            this.bit.style.width = 'inherit';\n            if (delayed) {\n                setTimeout(function () { return _this.off(); }, 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        // let it fade out and hide afterwards\n        else {\n            this.bit.style.opacity = '0';\n            if (delayed) {\n                setTimeout(function () { return _this.off(); }, 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        return this;\n    };\n    /**\n     * Use this mode to indicate progress that has no total number of work units.\n     */\n    ProgressBar.prototype.infinite = function () {\n        this.bit.style.width = '2%';\n        this.bit.style.opacity = '1';\n        dom_1.removeClasses(this.element, css_discrete, css_done);\n        dom_1.addClasses(this.element, css_active, css_infinite);\n        return this;\n    };\n    /**\n     * Tells the progress bar the total number of work. Use in combination with workedVal() to let\n     * the progress bar show the actual progress based on the work that is done.\n     */\n    ProgressBar.prototype.total = function (value) {\n        this.workedVal = 0;\n        this.totalWork = value;\n        return this;\n    };\n    /**\n     * Finds out if this progress bar is configured with total work\n     */\n    ProgressBar.prototype.hasTotal = function () {\n        return !isNaN(this.totalWork);\n    };\n    /**\n     * Tells the progress bar that an increment of work has been completed.\n     */\n    ProgressBar.prototype.worked = function (value) {\n        value = Number(value);\n        assert.ok(!isNaN(value), 'Value is not a number');\n        value = Math.max(1, value);\n        return this.doSetWorked(this.workedVal + value);\n    };\n    /**\n     * Tells the progress bar the total amount of work that has been completed.\n     */\n    ProgressBar.prototype.setWorked = function (value) {\n        value = Number(value);\n        assert.ok(!isNaN(value), 'Value is not a number');\n        value = Math.max(1, value);\n        return this.doSetWorked(value);\n    };\n    ProgressBar.prototype.doSetWorked = function (value) {\n        assert.ok(!isNaN(this.totalWork), 'Total work not set');\n        this.workedVal = value;\n        this.workedVal = Math.min(this.totalWork, this.workedVal);\n        if (dom_1.hasClass(this.element, css_infinite)) {\n            dom_1.removeClass(this.element, css_infinite);\n        }\n        if (dom_1.hasClass(this.element, css_done)) {\n            dom_1.removeClass(this.element, css_done);\n        }\n        if (!dom_1.hasClass(this.element, css_active)) {\n            dom_1.addClass(this.element, css_active);\n        }\n        if (!dom_1.hasClass(this.element, css_discrete)) {\n            dom_1.addClass(this.element, css_discrete);\n        }\n        this.bit.style.width = 100 * (this.workedVal / this.totalWork) + '%';\n        return this;\n    };\n    ProgressBar.prototype.getContainer = function () {\n        return this.element;\n    };\n    ProgressBar.prototype.show = function (delay) {\n        this.showDelayedScheduler.cancel();\n        if (typeof delay === 'number') {\n            this.showDelayedScheduler.schedule(delay);\n        }\n        else {\n            dom_1.show(this.element);\n        }\n    };\n    ProgressBar.prototype.hide = function () {\n        dom_1.hide(this.element);\n        this.showDelayedScheduler.cancel();\n    };\n    ProgressBar.prototype.style = function (styles) {\n        this.progressBarBackground = styles.progressBarBackground;\n        this.applyStyles();\n    };\n    ProgressBar.prototype.applyStyles = function () {\n        if (this.bit) {\n            var background = this.progressBarBackground ? this.progressBarBackground.toString() : null;\n            this.bit.style.backgroundColor = background;\n        }\n    };\n    return ProgressBar;\n}(lifecycle_1.Disposable));\nexports.ProgressBar = ProgressBar;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/progressbar/progressbar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/browser/ui/progressbar/progressbar.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./progressbar';\nimport * as assert from 'vs/base/common/assert';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Color } from 'vs/base/common/color';\nimport { mixin } from 'vs/base/common/objects';\nimport { removeClasses, addClass, hasClass, addClasses, removeClass, hide, show } from 'vs/base/browser/dom';\nimport { RunOnceScheduler } from 'vs/base/common/async';\n\nconst css_done = 'done';\nconst css_active = 'active';\nconst css_infinite = 'infinite';\nconst css_discrete = 'discrete';\nconst css_progress_container = 'monaco-progress-container';\nconst css_progress_bit = 'progress-bit';\n\nexport interface IProgressBarOptions extends IProgressBarStyles {\n}\n\nexport interface IProgressBarStyles {\n\tprogressBarBackground?: Color;\n}\n\nconst defaultOpts = {\n\tprogressBarBackground: Color.fromHex('#0E70C0')\n};\n\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n\tprivate options: IProgressBarOptions;\n\tprivate workedVal: number;\n\tprivate element: HTMLElement;\n\tprivate bit: HTMLElement;\n\tprivate totalWork: number | undefined;\n\tprivate progressBarBackground: Color | undefined;\n\tprivate showDelayedScheduler: RunOnceScheduler;\n\n\tconstructor(container: HTMLElement, options?: IProgressBarOptions) {\n\t\tsuper();\n\n\t\tthis.options = options || Object.create(null);\n\t\tmixin(this.options, defaultOpts, false);\n\n\t\tthis.workedVal = 0;\n\n\t\tthis.progressBarBackground = this.options.progressBarBackground;\n\n\t\tthis._register(this.showDelayedScheduler = new RunOnceScheduler(() => show(this.element), 0));\n\n\t\tthis.create(container);\n\t}\n\n\tprivate create(container: HTMLElement): void {\n\t\tthis.element = document.createElement('div');\n\t\taddClass(this.element, css_progress_container);\n\t\tcontainer.appendChild(this.element);\n\n\t\tthis.bit = document.createElement('div');\n\t\taddClass(this.bit, css_progress_bit);\n\t\tthis.element.appendChild(this.bit);\n\n\t\tthis.applyStyles();\n\t}\n\n\tprivate off(): void {\n\t\tthis.bit.style.width = 'inherit';\n\t\tthis.bit.style.opacity = '1';\n\t\tremoveClasses(this.element, css_active, css_infinite, css_discrete);\n\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = undefined;\n\t}\n\n\t/**\n\t * Indicates to the progress bar that all work is done.\n\t */\n\tdone(): ProgressBar {\n\t\treturn this.doDone(true);\n\t}\n\n\t/**\n\t * Stops the progressbar from showing any progress instantly without fading out.\n\t */\n\tstop(): ProgressBar {\n\t\treturn this.doDone(false);\n\t}\n\n\tprivate doDone(delayed: boolean): ProgressBar {\n\t\taddClass(this.element, css_done);\n\n\t\t// let it grow to 100% width and hide afterwards\n\t\tif (!hasClass(this.element, css_infinite)) {\n\t\t\tthis.bit.style.width = 'inherit';\n\n\t\t\tif (delayed) {\n\t\t\t\tsetTimeout(() => this.off(), 200);\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\t// let it fade out and hide afterwards\n\t\telse {\n\t\t\tthis.bit.style.opacity = '0';\n\t\t\tif (delayed) {\n\t\t\t\tsetTimeout(() => this.off(), 200);\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this mode to indicate progress that has no total number of work units.\n\t */\n\tinfinite(): ProgressBar {\n\t\tthis.bit.style.width = '2%';\n\t\tthis.bit.style.opacity = '1';\n\n\t\tremoveClasses(this.element, css_discrete, css_done);\n\t\taddClasses(this.element, css_active, css_infinite);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Tells the progress bar the total number of work. Use in combination with workedVal() to let\n\t * the progress bar show the actual progress based on the work that is done.\n\t */\n\ttotal(value: number): ProgressBar {\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = value;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Finds out if this progress bar is configured with total work\n\t */\n\thasTotal(): boolean {\n\t\treturn !isNaN(this.totalWork as number);\n\t}\n\n\t/**\n\t * Tells the progress bar that an increment of work has been completed.\n\t */\n\tworked(value: number): ProgressBar {\n\t\tvalue = Number(value);\n\t\tassert.ok(!isNaN(value), 'Value is not a number');\n\t\tvalue = Math.max(1, value);\n\n\t\treturn this.doSetWorked(this.workedVal + value);\n\t}\n\n\t/**\n\t * Tells the progress bar the total amount of work that has been completed.\n\t */\n\tsetWorked(value: number): ProgressBar {\n\t\tvalue = Number(value);\n\t\tassert.ok(!isNaN(value), 'Value is not a number');\n\t\tvalue = Math.max(1, value);\n\n\t\treturn this.doSetWorked(value);\n\t}\n\n\tprivate doSetWorked(value: number): ProgressBar {\n\t\tassert.ok(!isNaN(this.totalWork as number), 'Total work not set');\n\n\t\tthis.workedVal = value;\n\t\tthis.workedVal = Math.min(this.totalWork as number, this.workedVal);\n\n\t\tif (hasClass(this.element, css_infinite)) {\n\t\t\tremoveClass(this.element, css_infinite);\n\t\t}\n\n\t\tif (hasClass(this.element, css_done)) {\n\t\t\tremoveClass(this.element, css_done);\n\t\t}\n\n\t\tif (!hasClass(this.element, css_active)) {\n\t\t\taddClass(this.element, css_active);\n\t\t}\n\n\t\tif (!hasClass(this.element, css_discrete)) {\n\t\t\taddClass(this.element, css_discrete);\n\t\t}\n\n\t\tthis.bit.style.width = 100 * (this.workedVal / (this.totalWork as number)) + '%';\n\n\t\treturn this;\n\t}\n\n\tgetContainer(): HTMLElement {\n\t\treturn this.element;\n\t}\n\n\tshow(delay?: number): void {\n\t\tthis.showDelayedScheduler.cancel();\n\n\t\tif (typeof delay === 'number') {\n\t\t\tthis.showDelayedScheduler.schedule(delay);\n\t\t} else {\n\t\t\tshow(this.element);\n\t\t}\n\t}\n\n\thide(): void {\n\t\thide(this.element);\n\t\tthis.showDelayedScheduler.cancel();\n\t}\n\n\tstyle(styles: IProgressBarStyles): void {\n\t\tthis.progressBarBackground = styles.progressBarBackground;\n\n\t\tthis.applyStyles();\n\t}\n\n\tprotected applyStyles(): void {\n\t\tif (this.bit) {\n\t\t\tconst background = this.progressBarBackground ? this.progressBarBackground.toString() : null;\n\n\t\t\tthis.bit.style.backgroundColor = background;\n\t\t}\n\t}\n}"]}]}