{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/referenceSearch/referencesWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/browser/dom\", \"vs/base/browser/ui/sash/sash\", \"vs/base/common/color\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/network\", \"vs/base/common/resources\", \"vs/editor/browser/widget/embeddedCodeEditorWidget\", \"vs/editor/common/core/range\", \"vs/editor/common/editorCommon\", \"vs/editor/common/model\", \"vs/editor/common/model/textModel\", \"vs/editor/common/services/resolverService\", \"vs/editor/contrib/referenceSearch/referencesTree\", \"vs/nls\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/label/common/label\", \"vs/platform/list/browser/listService\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\", \"./peekViewWidget\", \"./referencesModel\", \"vs/base/browser/ui/splitview/splitview\", \"vs/css!./media/referencesWidget\"], function (require, exports, dom, sash_1, color_1, event_1, lifecycle_1, network_1, resources_1, embeddedCodeEditorWidget_1, range_1, editorCommon, model_1, textModel_1, resolverService_1, referencesTree_1, nls, contextkey_1, instantiation_1, label_1, listService_1, colorRegistry_1, themeService_1, peekViewWidget_1, referencesModel_1, splitview_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class DecorationsManager {\n        constructor(_editor, _model) {\n            this._editor = _editor;\n            this._model = _model;\n            this._decorations = new Map();\n            this._decorationIgnoreSet = new Set();\n            this._callOnDispose = [];\n            this._callOnModelChange = [];\n            this._callOnDispose.push(this._editor.onDidChangeModel(() => this._onModelChanged()));\n            this._onModelChanged();\n        }\n        dispose() {\n            this._callOnModelChange = lifecycle_1.dispose(this._callOnModelChange);\n            this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n            this.removeDecorations();\n        }\n        _onModelChanged() {\n            this._callOnModelChange = lifecycle_1.dispose(this._callOnModelChange);\n            const model = this._editor.getModel();\n            if (model) {\n                for (const ref of this._model.groups) {\n                    if (ref.uri.toString() === model.uri.toString()) {\n                        this._addDecorations(ref);\n                        return;\n                    }\n                }\n            }\n        }\n        _addDecorations(reference) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            this._callOnModelChange.push(this._editor.getModel().onDidChangeDecorations((event) => this._onDecorationChanged()));\n            const newDecorations = [];\n            const newDecorationsActualIndex = [];\n            for (let i = 0, len = reference.children.length; i < len; i++) {\n                let oneReference = reference.children[i];\n                if (this._decorationIgnoreSet.has(oneReference.id)) {\n                    continue;\n                }\n                newDecorations.push({\n                    range: oneReference.range,\n                    options: DecorationsManager.DecorationOptions\n                });\n                newDecorationsActualIndex.push(i);\n            }\n            const decorations = this._editor.deltaDecorations([], newDecorations);\n            for (let i = 0; i < decorations.length; i++) {\n                this._decorations.set(decorations[i], reference.children[newDecorationsActualIndex[i]]);\n            }\n        }\n        _onDecorationChanged() {\n            const toRemove = [];\n            const model = this._editor.getModel();\n            if (!model) {\n                return;\n            }\n            this._decorations.forEach((reference, decorationId) => {\n                const newRange = model.getDecorationRange(decorationId);\n                if (!newRange) {\n                    return;\n                }\n                let ignore = false;\n                if (range_1.Range.equalsRange(newRange, reference.range)) {\n                    return;\n                }\n                else if (range_1.Range.spansMultipleLines(newRange)) {\n                    ignore = true;\n                }\n                else {\n                    const lineLength = reference.range.endColumn - reference.range.startColumn;\n                    const newLineLength = newRange.endColumn - newRange.startColumn;\n                    if (lineLength !== newLineLength) {\n                        ignore = true;\n                    }\n                }\n                if (ignore) {\n                    this._decorationIgnoreSet.add(reference.id);\n                    toRemove.push(decorationId);\n                }\n                else {\n                    reference.range = newRange;\n                }\n            });\n            for (let i = 0, len = toRemove.length; i < len; i++) {\n                this._decorations.delete(toRemove[i]);\n            }\n            this._editor.deltaDecorations(toRemove, []);\n        }\n        removeDecorations() {\n            let toRemove = [];\n            this._decorations.forEach((value, key) => {\n                toRemove.push(key);\n            });\n            this._editor.deltaDecorations(toRemove, []);\n            this._decorations.clear();\n        }\n    }\n    DecorationsManager.DecorationOptions = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'reference-decoration'\n    });\n    exports.ctxReferenceWidgetSearchTreeFocused = new contextkey_1.RawContextKey('referenceSearchTreeFocused', true);\n    /**\n     * ZoneWidget that is shown inside the editor\n     */\n    let ReferenceWidget = class ReferenceWidget extends peekViewWidget_1.PeekViewWidget {\n        constructor(editor, _defaultTreeKeyboardSupport, layoutData, themeService, _textModelResolverService, _instantiationService, _peekViewService, _uriLabel) {\n            super(editor, { showFrame: false, showArrow: true, isResizeable: true, isAccessible: true });\n            this._defaultTreeKeyboardSupport = _defaultTreeKeyboardSupport;\n            this.layoutData = layoutData;\n            this._textModelResolverService = _textModelResolverService;\n            this._instantiationService = _instantiationService;\n            this._peekViewService = _peekViewService;\n            this._uriLabel = _uriLabel;\n            this._disposeOnNewModel = [];\n            this._callOnDispose = [];\n            this._onDidSelectReference = new event_1.Emitter();\n            this._dim = { height: 0, width: 0 };\n            this._applyTheme(themeService.getTheme());\n            this._callOnDispose.push(themeService.onThemeChange(this._applyTheme.bind(this)));\n            this._peekViewService.addExclusiveWidget(editor, this);\n            this.create();\n        }\n        dispose() {\n            this.setModel(undefined);\n            this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n            lifecycle_1.dispose(this._preview, this._previewNotAvailableMessage, this._tree, this._previewModelReference);\n            this._splitView.dispose();\n            super.dispose();\n        }\n        _applyTheme(theme) {\n            const borderColor = theme.getColor(exports.peekViewBorder) || color_1.Color.transparent;\n            this.style({\n                arrowColor: borderColor,\n                frameColor: borderColor,\n                headerBackgroundColor: theme.getColor(exports.peekViewTitleBackground) || color_1.Color.transparent,\n                primaryHeadingColor: theme.getColor(exports.peekViewTitleForeground),\n                secondaryHeadingColor: theme.getColor(exports.peekViewTitleInfoForeground)\n            });\n        }\n        get onDidSelectReference() {\n            return this._onDidSelectReference.event;\n        }\n        show(where) {\n            this.editor.revealRangeInCenterIfOutsideViewport(where, editorCommon.ScrollType.Smooth);\n            super.show(where, this.layoutData.heightInLines || 18);\n        }\n        focus() {\n            this._tree.domFocus();\n        }\n        _onTitleClick(e) {\n            if (this._preview && this._preview.getModel()) {\n                this._onDidSelectReference.fire({\n                    element: this._getFocusedReference(),\n                    kind: e.ctrlKey || e.metaKey || e.altKey ? 'side' : 'open',\n                    source: 'title'\n                });\n            }\n        }\n        _fillBody(containerElement) {\n            this.setCssClass('reference-zone-widget');\n            // message pane\n            this._messageContainer = dom.append(containerElement, dom.$('div.messages'));\n            dom.hide(this._messageContainer);\n            this._splitView = new splitview_1.SplitView(containerElement, { orientation: sash_1.Orientation.HORIZONTAL });\n            // editor\n            this._previewContainer = dom.append(containerElement, dom.$('div.preview.inline'));\n            let options = {\n                scrollBeyondLastLine: false,\n                scrollbar: {\n                    verticalScrollbarSize: 14,\n                    horizontal: 'auto',\n                    useShadows: true,\n                    verticalHasArrows: false,\n                    horizontalHasArrows: false\n                },\n                overviewRulerLanes: 2,\n                fixedOverflowWidgets: true,\n                minimap: {\n                    enabled: false\n                }\n            };\n            this._preview = this._instantiationService.createInstance(embeddedCodeEditorWidget_1.EmbeddedCodeEditorWidget, this._previewContainer, options, this.editor);\n            dom.hide(this._previewContainer);\n            this._previewNotAvailableMessage = textModel_1.TextModel.createFromString(nls.localize('missingPreviewMessage', \"no preview available\"));\n            // tree\n            this._treeContainer = dom.append(containerElement, dom.$('div.ref-tree.inline'));\n            const treeOptions = {\n                ariaLabel: nls.localize('treeAriaLabel', \"References\"),\n                keyboardSupport: this._defaultTreeKeyboardSupport,\n                accessibilityProvider: new referencesTree_1.AriaProvider(),\n                keyboardNavigationLabelProvider: this._instantiationService.createInstance(referencesTree_1.StringRepresentationProvider),\n                identityProvider: new referencesTree_1.IdentityProvider()\n            };\n            this._tree = this._instantiationService.createInstance(listService_1.WorkbenchAsyncDataTree, this._treeContainer, new referencesTree_1.Delegate(), [\n                this._instantiationService.createInstance(referencesTree_1.FileReferencesRenderer),\n                this._instantiationService.createInstance(referencesTree_1.OneReferenceRenderer),\n            ], this._instantiationService.createInstance(referencesTree_1.DataSource), treeOptions);\n            exports.ctxReferenceWidgetSearchTreeFocused.bindTo(this._tree.contextKeyService);\n            // split stuff\n            this._splitView.addView({\n                onDidChange: event_1.Event.None,\n                element: this._previewContainer,\n                minimumSize: 200,\n                maximumSize: Number.MAX_VALUE,\n                layout: (width) => {\n                    this._preview.layout({ height: this._dim.height, width });\n                }\n            }, splitview_1.Sizing.Distribute);\n            this._splitView.addView({\n                onDidChange: event_1.Event.None,\n                element: this._treeContainer,\n                minimumSize: 100,\n                maximumSize: Number.MAX_VALUE,\n                layout: (width) => {\n                    this._treeContainer.style.height = `${this._dim.height}px`;\n                    this._treeContainer.style.width = `${width}px`;\n                    this._tree.layout(this._dim.height, width);\n                }\n            }, splitview_1.Sizing.Distribute);\n            this._splitView.onDidSashChange(() => {\n                if (this._dim.width) {\n                    this.layoutData.ratio = this._splitView.getViewSize(0) / this._dim.width;\n                }\n            }, undefined, this._disposables);\n            // listen on selection and focus\n            let onEvent = (element, kind) => {\n                if (element instanceof referencesModel_1.OneReference) {\n                    if (kind === 'show') {\n                        this._revealReference(element, false);\n                    }\n                    this._onDidSelectReference.fire({ element, kind, source: 'tree' });\n                }\n            };\n            this._tree.onDidChangeFocus(e => {\n                onEvent(e.elements[0], 'show');\n            });\n            this._tree.onDidChangeSelection(e => {\n                let aside = false;\n                let goto = false;\n                if (e.browserEvent instanceof KeyboardEvent) {\n                    // todo@joh make this a command\n                    goto = true;\n                }\n                else if (e.browserEvent instanceof MouseEvent) {\n                    aside = e.browserEvent.ctrlKey || e.browserEvent.metaKey || e.browserEvent.altKey;\n                    goto = e.browserEvent.detail === 2;\n                }\n                if (aside) {\n                    onEvent(e.elements[0], 'side');\n                }\n                else if (goto) {\n                    onEvent(e.elements[0], 'goto');\n                }\n                else {\n                    onEvent(e.elements[0], 'show');\n                }\n            });\n            this._tree.onDidOpen(e => {\n                const aside = (e.browserEvent instanceof MouseEvent) && (e.browserEvent.ctrlKey || e.browserEvent.metaKey || e.browserEvent.altKey);\n                const goto = !e.browserEvent || ((e.browserEvent instanceof MouseEvent) && e.browserEvent.detail === 2);\n                if (aside) {\n                    onEvent(e.elements[0], 'side');\n                }\n                else if (goto) {\n                    onEvent(e.elements[0], 'goto');\n                }\n                else {\n                    onEvent(e.elements[0], 'show');\n                }\n            });\n            dom.hide(this._treeContainer);\n        }\n        _onWidth(width) {\n            if (this._dim) {\n                this._doLayoutBody(this._dim.height, width);\n            }\n        }\n        _doLayoutBody(heightInPixel, widthInPixel) {\n            super._doLayoutBody(heightInPixel, widthInPixel);\n            this._dim = { height: heightInPixel, width: widthInPixel };\n            this.layoutData.heightInLines = this._viewZone ? this._viewZone.heightInLines : this.layoutData.heightInLines;\n            this._splitView.layout(widthInPixel);\n            this._splitView.resizeView(0, widthInPixel * this.layoutData.ratio);\n        }\n        setSelection(selection) {\n            return this._revealReference(selection, true).then(() => {\n                if (!this._model) {\n                    // disposed\n                    return;\n                }\n                // show in tree\n                this._tree.setSelection([selection]);\n                this._tree.setFocus([selection]);\n            });\n        }\n        setModel(newModel) {\n            // clean up\n            this._disposeOnNewModel = lifecycle_1.dispose(this._disposeOnNewModel);\n            this._model = newModel;\n            if (this._model) {\n                return this._onNewModel();\n            }\n            return Promise.resolve();\n        }\n        _onNewModel() {\n            if (!this._model) {\n                return Promise.resolve(undefined);\n            }\n            if (this._model.empty) {\n                this.setTitle('');\n                this._messageContainer.innerHTML = nls.localize('noResults', \"No results\");\n                dom.show(this._messageContainer);\n                return Promise.resolve(undefined);\n            }\n            dom.hide(this._messageContainer);\n            this._decorationsManager = new DecorationsManager(this._preview, this._model);\n            this._disposeOnNewModel.push(this._decorationsManager);\n            // listen on model changes\n            this._disposeOnNewModel.push(this._model.onDidChangeReferenceRange(reference => this._tree.rerender(reference)));\n            // listen on editor\n            this._disposeOnNewModel.push(this._preview.onMouseDown(e => {\n                const { event, target } = e;\n                if (event.detail !== 2) {\n                    return;\n                }\n                const element = this._getFocusedReference();\n                if (!element) {\n                    return;\n                }\n                this._onDidSelectReference.fire({\n                    element: { uri: element.uri, range: target.range },\n                    kind: (event.ctrlKey || event.metaKey || event.altKey) ? 'side' : 'open',\n                    source: 'editor'\n                });\n            }));\n            // make sure things are rendered\n            dom.addClass(this.container, 'results-loaded');\n            dom.show(this._treeContainer);\n            dom.show(this._previewContainer);\n            this._splitView.layout(this._dim.width);\n            this.focus();\n            // pick input and a reference to begin with\n            return this._tree.setInput(this._model.groups.length === 1 ? this._model.groups[0] : this._model);\n        }\n        _getFocusedReference() {\n            const [element] = this._tree.getFocus();\n            if (element instanceof referencesModel_1.OneReference) {\n                return element;\n            }\n            else if (element instanceof referencesModel_1.FileReferences) {\n                if (element.children.length > 0) {\n                    return element.children[0];\n                }\n            }\n            return undefined;\n        }\n        _revealReference(reference, revealParent) {\n            return __awaiter(this, void 0, void 0, function* () {\n                // check if there is anything to do...\n                if (this._revealedReference === reference) {\n                    return;\n                }\n                this._revealedReference = reference;\n                // Update widget header\n                if (reference.uri.scheme !== network_1.Schemas.inMemory) {\n                    this.setTitle(resources_1.basenameOrAuthority(reference.uri), this._uriLabel.getUriLabel(resources_1.dirname(reference.uri)));\n                }\n                else {\n                    this.setTitle(nls.localize('peekView.alternateTitle', \"References\"));\n                }\n                const promise = this._textModelResolverService.createModelReference(reference.uri);\n                if (this._tree.getInput() === reference.parent) {\n                    this._tree.reveal(reference);\n                }\n                else {\n                    if (revealParent) {\n                        this._tree.reveal(reference.parent);\n                    }\n                    yield this._tree.expand(reference.parent);\n                    this._tree.reveal(reference);\n                }\n                const ref = yield promise;\n                if (!this._model) {\n                    // disposed\n                    ref.dispose();\n                    return;\n                }\n                lifecycle_1.dispose(this._previewModelReference);\n                // show in editor\n                const model = ref.object;\n                if (model) {\n                    const scrollType = this._preview.getModel() === model.textEditorModel ? editorCommon.ScrollType.Smooth : editorCommon.ScrollType.Immediate;\n                    const sel = range_1.Range.lift(reference.range).collapseToStart();\n                    this._previewModelReference = ref;\n                    this._preview.setModel(model.textEditorModel);\n                    this._preview.setSelection(sel);\n                    this._preview.revealRangeInCenter(sel, scrollType);\n                }\n                else {\n                    this._preview.setModel(this._previewNotAvailableMessage);\n                    ref.dispose();\n                }\n            });\n        }\n    };\n    ReferenceWidget = __decorate([\n        __param(3, themeService_1.IThemeService),\n        __param(4, resolverService_1.ITextModelService),\n        __param(5, instantiation_1.IInstantiationService),\n        __param(6, peekViewWidget_1.IPeekViewService),\n        __param(7, label_1.ILabelService)\n    ], ReferenceWidget);\n    exports.ReferenceWidget = ReferenceWidget;\n    // theming\n    exports.peekViewTitleBackground = colorRegistry_1.registerColor('peekViewTitle.background', { dark: '#1E1E1E', light: '#FFFFFF', hc: '#0C141F' }, nls.localize('peekViewTitleBackground', 'Background color of the peek view title area.'));\n    exports.peekViewTitleForeground = colorRegistry_1.registerColor('peekViewTitleLabel.foreground', { dark: '#FFFFFF', light: '#333333', hc: '#FFFFFF' }, nls.localize('peekViewTitleForeground', 'Color of the peek view title.'));\n    exports.peekViewTitleInfoForeground = colorRegistry_1.registerColor('peekViewTitleDescription.foreground', { dark: '#ccccccb3', light: '#6c6c6cb3', hc: '#FFFFFF99' }, nls.localize('peekViewTitleInfoForeground', 'Color of the peek view title info.'));\n    exports.peekViewBorder = colorRegistry_1.registerColor('peekView.border', { dark: '#007acc', light: '#007acc', hc: colorRegistry_1.contrastBorder }, nls.localize('peekViewBorder', 'Color of the peek view borders and arrow.'));\n    exports.peekViewResultsBackground = colorRegistry_1.registerColor('peekViewResult.background', { dark: '#252526', light: '#F3F3F3', hc: color_1.Color.black }, nls.localize('peekViewResultsBackground', 'Background color of the peek view result list.'));\n    exports.peekViewResultsMatchForeground = colorRegistry_1.registerColor('peekViewResult.lineForeground', { dark: '#bbbbbb', light: '#646465', hc: color_1.Color.white }, nls.localize('peekViewResultsMatchForeground', 'Foreground color for line nodes in the peek view result list.'));\n    exports.peekViewResultsFileForeground = colorRegistry_1.registerColor('peekViewResult.fileForeground', { dark: color_1.Color.white, light: '#1E1E1E', hc: color_1.Color.white }, nls.localize('peekViewResultsFileForeground', 'Foreground color for file nodes in the peek view result list.'));\n    exports.peekViewResultsSelectionBackground = colorRegistry_1.registerColor('peekViewResult.selectionBackground', { dark: '#3399ff33', light: '#3399ff33', hc: null }, nls.localize('peekViewResultsSelectionBackground', 'Background color of the selected entry in the peek view result list.'));\n    exports.peekViewResultsSelectionForeground = colorRegistry_1.registerColor('peekViewResult.selectionForeground', { dark: color_1.Color.white, light: '#6C6C6C', hc: color_1.Color.white }, nls.localize('peekViewResultsSelectionForeground', 'Foreground color of the selected entry in the peek view result list.'));\n    exports.peekViewEditorBackground = colorRegistry_1.registerColor('peekViewEditor.background', { dark: '#001F33', light: '#F2F8FC', hc: color_1.Color.black }, nls.localize('peekViewEditorBackground', 'Background color of the peek view editor.'));\n    exports.peekViewEditorGutterBackground = colorRegistry_1.registerColor('peekViewEditorGutter.background', { dark: exports.peekViewEditorBackground, light: exports.peekViewEditorBackground, hc: exports.peekViewEditorBackground }, nls.localize('peekViewEditorGutterBackground', 'Background color of the gutter in the peek view editor.'));\n    exports.peekViewResultsMatchHighlight = colorRegistry_1.registerColor('peekViewResult.matchHighlightBackground', { dark: '#ea5c004d', light: '#ea5c004d', hc: null }, nls.localize('peekViewResultsMatchHighlight', 'Match highlight color in the peek view result list.'));\n    exports.peekViewEditorMatchHighlight = colorRegistry_1.registerColor('peekViewEditor.matchHighlightBackground', { dark: '#ff8f0099', light: '#f5d802de', hc: null }, nls.localize('peekViewEditorMatchHighlight', 'Match highlight color in the peek view editor.'));\n    exports.peekViewEditorMatchHighlightBorder = colorRegistry_1.registerColor('peekViewEditor.matchHighlightBorder', { dark: null, light: null, hc: colorRegistry_1.activeContrastBorder }, nls.localize('peekViewEditorMatchHighlightBorder', 'Match highlight border in the peek view editor.'));\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        const findMatchHighlightColor = theme.getColor(exports.peekViewResultsMatchHighlight);\n        if (findMatchHighlightColor) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree .referenceMatch { background-color: ${findMatchHighlightColor}; }`);\n        }\n        const referenceHighlightColor = theme.getColor(exports.peekViewEditorMatchHighlight);\n        if (referenceHighlightColor) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .preview .reference-decoration { background-color: ${referenceHighlightColor}; }`);\n        }\n        const referenceHighlightBorder = theme.getColor(exports.peekViewEditorMatchHighlightBorder);\n        if (referenceHighlightBorder) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .preview .reference-decoration { border: 2px solid ${referenceHighlightBorder}; box-sizing: border-box; }`);\n        }\n        const hcOutline = theme.getColor(colorRegistry_1.activeContrastBorder);\n        if (hcOutline) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree .referenceMatch { border: 1px dotted ${hcOutline}; box-sizing: border-box; }`);\n        }\n        const resultsBackground = theme.getColor(exports.peekViewResultsBackground);\n        if (resultsBackground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree { background-color: ${resultsBackground}; }`);\n        }\n        const resultsMatchForeground = theme.getColor(exports.peekViewResultsMatchForeground);\n        if (resultsMatchForeground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree { color: ${resultsMatchForeground}; }`);\n        }\n        const resultsFileForeground = theme.getColor(exports.peekViewResultsFileForeground);\n        if (resultsFileForeground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree .reference-file { color: ${resultsFileForeground}; }`);\n        }\n        const resultsSelectedBackground = theme.getColor(exports.peekViewResultsSelectionBackground);\n        if (resultsSelectedBackground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree .monaco-list:focus .monaco-list-rows > .monaco-list-row.selected:not(.highlighted) { background-color: ${resultsSelectedBackground}; }`);\n        }\n        const resultsSelectedForeground = theme.getColor(exports.peekViewResultsSelectionForeground);\n        if (resultsSelectedForeground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .ref-tree .monaco-list:focus .monaco-list-rows > .monaco-list-row.selected:not(.highlighted) { color: ${resultsSelectedForeground} !important; }`);\n        }\n        const editorBackground = theme.getColor(exports.peekViewEditorBackground);\n        if (editorBackground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .preview .monaco-editor .monaco-editor-background,` +\n                `.monaco-editor .reference-zone-widget .preview .monaco-editor .inputarea.ime-input {` +\n                `\tbackground-color: ${editorBackground};` +\n                `}`);\n        }\n        const editorGutterBackground = theme.getColor(exports.peekViewEditorGutterBackground);\n        if (editorGutterBackground) {\n            collector.addRule(`.monaco-editor .reference-zone-widget .preview .monaco-editor .margin {` +\n                `\tbackground-color: ${editorGutterBackground};` +\n                `}`);\n        }\n    });\n});\n",null]}