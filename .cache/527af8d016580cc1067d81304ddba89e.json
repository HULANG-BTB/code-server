{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar externalTerminal_1 = require(\"vs/workbench/contrib/externalTerminal/common/externalTerminal\");\nvar terminals_1 = require(\"vs/workbench/contrib/debug/node/terminals\");\nvar TerminalLauncher = /** @class */ (function () {\n    function TerminalLauncher(terminalService, externalTerminalService) {\n        this.terminalService = terminalService;\n        this.externalTerminalService = externalTerminalService;\n    }\n    TerminalLauncher.prototype.runInTerminal = function (args, config) {\n        var _this = this;\n        if (args.kind === 'external') {\n            return this.externalTerminalService.runInTerminal(args.title || '', args.cwd, args.args, args.env || {});\n        }\n        if (!this.terminalDisposedListener) {\n            // React on terminal disposed and check if that is the debug terminal #12956\n            this.terminalDisposedListener = this.terminalService.onInstanceDisposed(function (terminal) {\n                if (_this.integratedTerminalInstance && _this.integratedTerminalInstance.id === terminal.id) {\n                    _this.integratedTerminalInstance = undefined;\n                }\n            });\n        }\n        var t = this.integratedTerminalInstance;\n        if ((t && (typeof t.processId === 'number') && terminals_1.hasChildProcesses(t.processId)) || !t) {\n            t = this.terminalService.createTerminal({ name: args.title || nls.localize('debug.terminal.title', \"debuggee\") });\n            this.integratedTerminalInstance = t;\n        }\n        this.terminalService.setActiveInstance(t);\n        this.terminalService.showPanel(true);\n        return new Promise(function (resolve, error) {\n            if (t && typeof t.processId === 'number') {\n                // no need to wait\n                resolve(t.processId);\n            }\n            // shell not ready: wait for ready event\n            var toDispose = t.onProcessIdReady(function (t) {\n                toDispose.dispose();\n                resolve(t.processId);\n            });\n            // do not wait longer than 5 seconds\n            setTimeout(function (_) {\n                error(new Error('terminal shell timeout'));\n            }, 5000);\n        }).then(function (shellProcessId) {\n            var command = terminals_1.prepareCommand(args, config);\n            t.sendText(command, true);\n            return shellProcessId;\n        });\n    };\n    TerminalLauncher = tslib_1.__decorate([\n        tslib_1.__param(0, terminal_1.ITerminalService),\n        tslib_1.__param(1, externalTerminal_1.IExternalTerminalService)\n    ], TerminalLauncher);\n    return TerminalLauncher;\n}());\nexports.TerminalLauncher = TerminalLauncher;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/terminalSupport.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,0EAAoG;AACpG,kGAAyG;AAEzG,uEAA8F;AAG9F;IAKC,0BACoC,eAAiC,EACzB,uBAAiD;QADzD,oBAAe,GAAf,eAAe,CAAkB;QACzB,4BAAuB,GAAvB,uBAAuB,CAA0B;IAE7F,CAAC;IAED,wCAAa,GAAb,UAAc,IAAiD,EAAE,MAAyB;QAA1F,iBA+CC;QA7CA,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;YAC7B,OAAO,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAuB,IAAI,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;SAC9H;QAED,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;YACnC,4EAA4E;YAC5E,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,UAAA,QAAQ;gBAC/E,IAAI,KAAI,CAAC,0BAA0B,IAAI,KAAI,CAAC,0BAA0B,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,EAAE;oBAC1F,KAAI,CAAC,0BAA0B,GAAG,SAAS,CAAC;iBAC5C;YACF,CAAC,CAAC,CAAC;SACH;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC;QACxC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,KAAK,QAAQ,CAAC,IAAI,6BAAiB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;YACrF,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;YAClH,IAAI,CAAC,0BAA0B,GAAG,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAErC,OAAO,IAAI,OAAO,CAAqB,UAAC,OAAO,EAAE,KAAK;YACrD,IAAI,CAAC,IAAI,OAAO,CAAC,CAAC,SAAS,KAAK,QAAQ,EAAE;gBACzC,kBAAkB;gBAClB,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;aACrB;YAED,wCAAwC;YACxC,IAAM,SAAS,GAAG,CAAE,CAAC,gBAAgB,CAAC,UAAA,CAAC;gBACtC,SAAS,CAAC,OAAO,EAAE,CAAC;gBACpB,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,oCAAoC;YACpC,UAAU,CAAC,UAAA,CAAC;gBACX,KAAK,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAC5C,CAAC,EAAE,IAAI,CAAC,CAAC;QAEV,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,cAAc;YAErB,IAAM,OAAO,GAAG,0BAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC7C,CAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAE3B,OAAO,cAAc,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC;IA1DW,gBAAgB;QAM1B,mBAAA,2BAAgB,CAAA;QAChB,mBAAA,2CAAwB,CAAA;OAPd,gBAAgB,CA2D5B;IAAD,uBAAC;CAAA,AA3DD,IA2DC;AA3DY,4CAAgB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ITerminalService, ITerminalInstance } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IExternalTerminalService } from 'vs/workbench/contrib/externalTerminal/common/externalTerminal';\nimport { ITerminalLauncher, ITerminalSettings } from 'vs/workbench/contrib/debug/common/debug';\nimport { hasChildProcesses, prepareCommand } from 'vs/workbench/contrib/debug/node/terminals';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nexport class TerminalLauncher implements ITerminalLauncher {\n\n\tprivate integratedTerminalInstance: ITerminalInstance | undefined;\n\tprivate terminalDisposedListener: IDisposable;\n\n\tconstructor(\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IExternalTerminalService private readonly externalTerminalService: IExternalTerminalService\n\t) {\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, config: ITerminalSettings): Promise<number | undefined> {\n\n\t\tif (args.kind === 'external') {\n\t\t\treturn this.externalTerminalService.runInTerminal(args.title || '', args.cwd, args.args, <IProcessEnvironment>args.env || {});\n\t\t}\n\n\t\tif (!this.terminalDisposedListener) {\n\t\t\t// React on terminal disposed and check if that is the debug terminal #12956\n\t\t\tthis.terminalDisposedListener = this.terminalService.onInstanceDisposed(terminal => {\n\t\t\t\tif (this.integratedTerminalInstance && this.integratedTerminalInstance.id === terminal.id) {\n\t\t\t\t\tthis.integratedTerminalInstance = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet t = this.integratedTerminalInstance;\n\t\tif ((t && (typeof t.processId === 'number') && hasChildProcesses(t.processId)) || !t) {\n\t\t\tt = this.terminalService.createTerminal({ name: args.title || nls.localize('debug.terminal.title', \"debuggee\") });\n\t\t\tthis.integratedTerminalInstance = t;\n\t\t}\n\t\tthis.terminalService.setActiveInstance(t);\n\t\tthis.terminalService.showPanel(true);\n\n\t\treturn new Promise<number | undefined>((resolve, error) => {\n\t\t\tif (t && typeof t.processId === 'number') {\n\t\t\t\t// no need to wait\n\t\t\t\tresolve(t.processId);\n\t\t\t}\n\n\t\t\t// shell not ready: wait for ready event\n\t\t\tconst toDispose = t!.onProcessIdReady(t => {\n\t\t\t\ttoDispose.dispose();\n\t\t\t\tresolve(t.processId);\n\t\t\t});\n\n\t\t\t// do not wait longer than 5 seconds\n\t\t\tsetTimeout(_ => {\n\t\t\t\terror(new Error('terminal shell timeout'));\n\t\t\t}, 5000);\n\n\t\t}).then(shellProcessId => {\n\n\t\t\tconst command = prepareCommand(args, config);\n\t\t\tt!.sendText(command, true);\n\n\t\t\treturn shellProcessId;\n\t\t});\n\t}\n}\n"]}]}