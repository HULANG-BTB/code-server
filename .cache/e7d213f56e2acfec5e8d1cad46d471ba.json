{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/tree/browser/treeViewModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/tree/browser/treeViewModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterator_1 = require(\"vs/base/common/iterator\");\nvar HeightMap = /** @class */ (function () {\n    function HeightMap() {\n        this.heightMap = [];\n        this.indexes = {};\n    }\n    HeightMap.prototype.getContentHeight = function () {\n        var last = this.heightMap[this.heightMap.length - 1];\n        return !last ? 0 : last.top + last.height;\n    };\n    HeightMap.prototype.onInsertItems = function (iterator, afterItemId) {\n        if (afterItemId === void 0) { afterItemId = null; }\n        var item = null;\n        var viewItem;\n        var i, j;\n        var totalSize;\n        var sizeDiff = 0;\n        if (afterItemId === null) {\n            i = 0;\n            totalSize = 0;\n        }\n        else {\n            i = this.indexes[afterItemId] + 1;\n            viewItem = this.heightMap[i - 1];\n            if (!viewItem) {\n                console.error('view item doesnt exist');\n                return undefined;\n            }\n            totalSize = viewItem.top + viewItem.height;\n        }\n        var boundSplice = this.heightMap.splice.bind(this.heightMap, i, 0);\n        var itemsToInsert = [];\n        while (item = iterator.next()) {\n            viewItem = this.createViewItem(item);\n            viewItem.top = totalSize + sizeDiff;\n            this.indexes[item.id] = i++;\n            itemsToInsert.push(viewItem);\n            sizeDiff += viewItem.height;\n        }\n        boundSplice.apply(this.heightMap, itemsToInsert);\n        for (j = i; j < this.heightMap.length; j++) {\n            viewItem = this.heightMap[j];\n            viewItem.top += sizeDiff;\n            this.indexes[viewItem.model.id] = j;\n        }\n        for (j = itemsToInsert.length - 1; j >= 0; j--) {\n            this.onInsertItem(itemsToInsert[j]);\n        }\n        for (j = this.heightMap.length - 1; j >= i; j--) {\n            this.onRefreshItem(this.heightMap[j]);\n        }\n        return sizeDiff;\n    };\n    HeightMap.prototype.onInsertItem = function (item) {\n        // noop\n    };\n    // Contiguous items\n    HeightMap.prototype.onRemoveItems = function (iterator) {\n        var itemId = null;\n        var viewItem;\n        var startIndex = null;\n        var i = 0;\n        var sizeDiff = 0;\n        while (itemId = iterator.next()) {\n            i = this.indexes[itemId];\n            viewItem = this.heightMap[i];\n            if (!viewItem) {\n                console.error('view item doesnt exist');\n                return;\n            }\n            sizeDiff -= viewItem.height;\n            delete this.indexes[itemId];\n            this.onRemoveItem(viewItem);\n            if (startIndex === null) {\n                startIndex = i;\n            }\n        }\n        if (sizeDiff === 0 || startIndex === null) {\n            return;\n        }\n        this.heightMap.splice(startIndex, i - startIndex + 1);\n        for (i = startIndex; i < this.heightMap.length; i++) {\n            viewItem = this.heightMap[i];\n            viewItem.top += sizeDiff;\n            this.indexes[viewItem.model.id] = i;\n            this.onRefreshItem(viewItem);\n        }\n    };\n    HeightMap.prototype.onRemoveItem = function (item) {\n        // noop\n    };\n    HeightMap.prototype.onRefreshItemSet = function (items) {\n        var _this = this;\n        var sortedItems = items.sort(function (a, b) { return _this.indexes[a.id] - _this.indexes[b.id]; });\n        this.onRefreshItems(new iterator_1.ArrayIterator(sortedItems));\n    };\n    // Ordered, but not necessarily contiguous items\n    HeightMap.prototype.onRefreshItems = function (iterator) {\n        var item = null;\n        var viewItem;\n        var newHeight;\n        var i, j = null;\n        var cummDiff = 0;\n        while (item = iterator.next()) {\n            i = this.indexes[item.id];\n            for (; cummDiff !== 0 && j !== null && j < i; j++) {\n                viewItem = this.heightMap[j];\n                viewItem.top += cummDiff;\n                this.onRefreshItem(viewItem);\n            }\n            viewItem = this.heightMap[i];\n            newHeight = item.getHeight();\n            viewItem.top += cummDiff;\n            cummDiff += newHeight - viewItem.height;\n            viewItem.height = newHeight;\n            this.onRefreshItem(viewItem, true);\n            j = i + 1;\n        }\n        if (cummDiff !== 0 && j !== null) {\n            for (; j < this.heightMap.length; j++) {\n                viewItem = this.heightMap[j];\n                viewItem.top += cummDiff;\n                this.onRefreshItem(viewItem);\n            }\n        }\n    };\n    HeightMap.prototype.onRefreshItem = function (item, needsRender) {\n        if (needsRender === void 0) { needsRender = false; }\n        // noop\n    };\n    HeightMap.prototype.itemsCount = function () {\n        return this.heightMap.length;\n    };\n    HeightMap.prototype.itemAt = function (position) {\n        return this.heightMap[this.indexAt(position)].model.id;\n    };\n    HeightMap.prototype.withItemsInRange = function (start, end, fn) {\n        start = this.indexAt(start);\n        end = this.indexAt(end);\n        for (var i = start; i <= end; i++) {\n            fn(this.heightMap[i].model.id);\n        }\n    };\n    HeightMap.prototype.indexAt = function (position) {\n        var left = 0;\n        var right = this.heightMap.length;\n        var center;\n        var item;\n        // Binary search\n        while (left < right) {\n            center = Math.floor((left + right) / 2);\n            item = this.heightMap[center];\n            if (position < item.top) {\n                right = center;\n            }\n            else if (position >= item.top + item.height) {\n                if (left === center) {\n                    break;\n                }\n                left = center;\n            }\n            else {\n                return center;\n            }\n        }\n        return this.heightMap.length;\n    };\n    HeightMap.prototype.indexAfter = function (position) {\n        return Math.min(this.indexAt(position) + 1, this.heightMap.length);\n    };\n    HeightMap.prototype.itemAtIndex = function (index) {\n        return this.heightMap[index];\n    };\n    HeightMap.prototype.itemAfter = function (item) {\n        return this.heightMap[this.indexes[item.model.id] + 1] || null;\n    };\n    HeightMap.prototype.createViewItem = function (item) {\n        throw new Error('not implemented');\n    };\n    HeightMap.prototype.dispose = function () {\n        this.heightMap = [];\n        this.indexes = {};\n    };\n    return HeightMap;\n}());\nexports.HeightMap = HeightMap;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/parts/tree/browser/treeViewModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/parts/tree/browser/treeViewModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INextIterator, ArrayIterator } from 'vs/base/common/iterator';\nimport { Item } from './treeModel';\n\nexport interface IViewItem {\n\tmodel: Item;\n\ttop: number;\n\theight: number;\n\twidth: number;\n}\n\nexport class HeightMap {\n\n\tprivate heightMap: IViewItem[] = [];\n\tprivate indexes: { [item: string]: number; } = {};\n\n\tgetContentHeight(): number {\n\t\tlet last = this.heightMap[this.heightMap.length - 1];\n\t\treturn !last ? 0 : last.top + last.height;\n\t}\n\n\tonInsertItems(iterator: INextIterator<Item>, afterItemId: string | null = null): number | undefined {\n\t\tlet item: Item | null = null;\n\t\tlet viewItem: IViewItem;\n\t\tlet i: number, j: number;\n\t\tlet totalSize: number;\n\t\tlet sizeDiff = 0;\n\n\t\tif (afterItemId === null) {\n\t\t\ti = 0;\n\t\t\ttotalSize = 0;\n\t\t} else {\n\t\t\ti = this.indexes[afterItemId] + 1;\n\t\t\tviewItem = this.heightMap[i - 1];\n\n\t\t\tif (!viewItem) {\n\t\t\t\tconsole.error('view item doesnt exist');\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttotalSize = viewItem.top + viewItem.height;\n\t\t}\n\n\t\tlet boundSplice = this.heightMap.splice.bind(this.heightMap, i, 0);\n\n\t\tlet itemsToInsert: IViewItem[] = [];\n\n\t\twhile (item = iterator.next()) {\n\t\t\tviewItem = this.createViewItem(item);\n\t\t\tviewItem.top = totalSize + sizeDiff;\n\n\t\t\tthis.indexes[item.id] = i++;\n\t\t\titemsToInsert.push(viewItem);\n\t\t\tsizeDiff += viewItem.height;\n\t\t}\n\n\t\tboundSplice.apply(this.heightMap, itemsToInsert);\n\n\t\tfor (j = i; j < this.heightMap.length; j++) {\n\t\t\tviewItem = this.heightMap[j];\n\t\t\tviewItem.top += sizeDiff;\n\t\t\tthis.indexes[viewItem.model.id] = j;\n\t\t}\n\n\t\tfor (j = itemsToInsert.length - 1; j >= 0; j--) {\n\t\t\tthis.onInsertItem(itemsToInsert[j]);\n\t\t}\n\n\t\tfor (j = this.heightMap.length - 1; j >= i; j--) {\n\t\t\tthis.onRefreshItem(this.heightMap[j]);\n\t\t}\n\n\t\treturn sizeDiff;\n\t}\n\n\tonInsertItem(item: IViewItem): void {\n\t\t// noop\n\t}\n\n\t// Contiguous items\n\tonRemoveItems(iterator: INextIterator<string>): void {\n\t\tlet itemId: string | null = null;\n\t\tlet viewItem: IViewItem;\n\t\tlet startIndex: number | null = null;\n\t\tlet i = 0;\n\t\tlet sizeDiff = 0;\n\n\t\twhile (itemId = iterator.next()) {\n\t\t\ti = this.indexes[itemId];\n\t\t\tviewItem = this.heightMap[i];\n\n\t\t\tif (!viewItem) {\n\t\t\t\tconsole.error('view item doesnt exist');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsizeDiff -= viewItem.height;\n\t\t\tdelete this.indexes[itemId];\n\t\t\tthis.onRemoveItem(viewItem);\n\n\t\t\tif (startIndex === null) {\n\t\t\t\tstartIndex = i;\n\t\t\t}\n\t\t}\n\n\t\tif (sizeDiff === 0 || startIndex === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.heightMap.splice(startIndex, i - startIndex + 1);\n\n\t\tfor (i = startIndex; i < this.heightMap.length; i++) {\n\t\t\tviewItem = this.heightMap[i];\n\t\t\tviewItem.top += sizeDiff;\n\t\t\tthis.indexes[viewItem.model.id] = i;\n\t\t\tthis.onRefreshItem(viewItem);\n\t\t}\n\t}\n\n\tonRemoveItem(item: IViewItem): void {\n\t\t// noop\n\t}\n\n\tonRefreshItemSet(items: Item[]): void {\n\t\tlet sortedItems = items.sort((a, b) => this.indexes[a.id] - this.indexes[b.id]);\n\t\tthis.onRefreshItems(new ArrayIterator(sortedItems));\n\t}\n\n\t// Ordered, but not necessarily contiguous items\n\tonRefreshItems(iterator: INextIterator<Item>): void {\n\t\tlet item: Item | null = null;\n\t\tlet viewItem: IViewItem;\n\t\tlet newHeight: number;\n\t\tlet i: number, j: number | null = null;\n\t\tlet cummDiff = 0;\n\n\t\twhile (item = iterator.next()) {\n\t\t\ti = this.indexes[item.id];\n\n\t\t\tfor (; cummDiff !== 0 && j !== null && j < i; j++) {\n\t\t\t\tviewItem = this.heightMap[j];\n\t\t\t\tviewItem.top += cummDiff;\n\t\t\t\tthis.onRefreshItem(viewItem);\n\t\t\t}\n\n\t\t\tviewItem = this.heightMap[i];\n\t\t\tnewHeight = item.getHeight();\n\t\t\tviewItem.top += cummDiff;\n\t\t\tcummDiff += newHeight - viewItem.height;\n\t\t\tviewItem.height = newHeight;\n\t\t\tthis.onRefreshItem(viewItem, true);\n\n\t\t\tj = i + 1;\n\t\t}\n\n\t\tif (cummDiff !== 0 && j !== null) {\n\t\t\tfor (; j < this.heightMap.length; j++) {\n\t\t\t\tviewItem = this.heightMap[j];\n\t\t\t\tviewItem.top += cummDiff;\n\t\t\t\tthis.onRefreshItem(viewItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tonRefreshItem(item: IViewItem, needsRender: boolean = false): void {\n\t\t// noop\n\t}\n\n\titemsCount(): number {\n\t\treturn this.heightMap.length;\n\t}\n\n\titemAt(position: number): string {\n\t\treturn this.heightMap[this.indexAt(position)].model.id;\n\t}\n\n\twithItemsInRange(start: number, end: number, fn: (item: string) => void): void {\n\t\tstart = this.indexAt(start);\n\t\tend = this.indexAt(end);\n\t\tfor (let i = start; i <= end; i++) {\n\t\t\tfn(this.heightMap[i].model.id);\n\t\t}\n\t}\n\n\tindexAt(position: number): number {\n\t\tlet left = 0;\n\t\tlet right = this.heightMap.length;\n\t\tlet center: number;\n\t\tlet item: IViewItem;\n\n\t\t// Binary search\n\t\twhile (left < right) {\n\t\t\tcenter = Math.floor((left + right) / 2);\n\t\t\titem = this.heightMap[center];\n\n\t\t\tif (position < item.top) {\n\t\t\t\tright = center;\n\t\t\t} else if (position >= item.top + item.height) {\n\t\t\t\tif (left === center) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tleft = center;\n\t\t\t} else {\n\t\t\t\treturn center;\n\t\t\t}\n\t\t}\n\n\t\treturn this.heightMap.length;\n\t}\n\n\tindexAfter(position: number): number {\n\t\treturn Math.min(this.indexAt(position) + 1, this.heightMap.length);\n\t}\n\n\titemAtIndex(index: number): IViewItem {\n\t\treturn this.heightMap[index];\n\t}\n\n\titemAfter(item: IViewItem): IViewItem {\n\t\treturn this.heightMap[this.indexes[item.model.id] + 1] || null;\n\t}\n\n\tprotected createViewItem(item: Item): IViewItem {\n\t\tthrow new Error('not implemented');\n\t}\n\n\tdispose(): void {\n\t\tthis.heightMap = [];\n\t\tthis.indexes = {};\n\t}\n}\n"]}]}