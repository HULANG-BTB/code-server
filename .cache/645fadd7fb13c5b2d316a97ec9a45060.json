{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/stopwatch.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/platform\"], function (require, exports, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const hasPerformanceNow = (platform_1.globals.performance && typeof platform_1.globals.performance.now === 'function');\n    class StopWatch {\n        static create(highResolution = true) {\n            return new StopWatch(highResolution);\n        }\n        constructor(highResolution) {\n            this._highResolution = hasPerformanceNow && highResolution;\n            this._startTime = this._now();\n            this._stopTime = -1;\n        }\n        stop() {\n            this._stopTime = this._now();\n        }\n        elapsed() {\n            if (this._stopTime !== -1) {\n                return this._stopTime - this._startTime;\n            }\n            return this._now() - this._startTime;\n        }\n        _now() {\n            return this._highResolution ? platform_1.globals.performance.now() : new Date().getTime();\n        }\n    }\n    exports.StopWatch = StopWatch;\n});\n",null]}