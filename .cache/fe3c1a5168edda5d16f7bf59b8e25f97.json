{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSource.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/uri\", \"vs/base/common/path\", \"vs/base/common/resources\", \"vs/workbench/contrib/debug/common/debug\", \"vs/workbench/services/editor/common/editorService\", \"vs/base/common/network\", \"vs/workbench/contrib/debug/common/debugUtils\"], function (require, exports, nls, uri_1, path_1, resources, debug_1, editorService_1, network_1, debugUtils_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const UNKNOWN_SOURCE_LABEL = nls.localize('unknownSource', \"Unknown Source\");\n    /**\n     * Debug URI format\n     *\n     * a debug URI represents a Source object and the debug session where the Source comes from.\n     *\n     *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n     *       \\___/ \\____________/ \\__________________________________________/ \\______/\n     *         |          |                             |                          |\n     *      scheme   source.path                    session id            source.reference\n     *\n     * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n     *\n     */\n    class Source {\n        constructor(raw_, sessionId) {\n            let path;\n            if (raw_) {\n                this.raw = raw_;\n                path = this.raw.path || this.raw.name || '';\n                this.available = true;\n            }\n            else {\n                this.raw = { name: UNKNOWN_SOURCE_LABEL };\n                this.available = false;\n                path = `${debug_1.DEBUG_SCHEME}:${UNKNOWN_SOURCE_LABEL}`;\n            }\n            if (typeof this.raw.sourceReference === 'number' && this.raw.sourceReference > 0) {\n                this.uri = uri_1.URI.parse(`${debug_1.DEBUG_SCHEME}:${encodeURIComponent(path)}?session=${encodeURIComponent(sessionId)}&ref=${this.raw.sourceReference}`);\n            }\n            else {\n                if (debugUtils_1.isUri(path)) { // path looks like a uri\n                    this.uri = uri_1.URI.parse(path);\n                }\n                else {\n                    // assume a filesystem path\n                    if (path_1.isAbsolute(path)) {\n                        this.uri = uri_1.URI.file(path);\n                    }\n                    else {\n                        // path is relative: since VS Code cannot deal with this by itself\n                        // create a debug url that will result in a DAP 'source' request when the url is resolved.\n                        this.uri = uri_1.URI.parse(`${debug_1.DEBUG_SCHEME}:${encodeURIComponent(path)}?session=${encodeURIComponent(sessionId)}`);\n                    }\n                }\n            }\n        }\n        get name() {\n            return this.raw.name || resources.basenameOrAuthority(this.uri);\n        }\n        get origin() {\n            return this.raw.origin;\n        }\n        get presentationHint() {\n            return this.raw.presentationHint;\n        }\n        get reference() {\n            return this.raw.sourceReference;\n        }\n        get inMemory() {\n            return this.uri.scheme === debug_1.DEBUG_SCHEME;\n        }\n        openInEditor(editorService, selection, preserveFocus, sideBySide, pinned) {\n            return !this.available ? Promise.resolve(null) : editorService.openEditor({\n                resource: this.uri,\n                description: this.origin,\n                options: {\n                    preserveFocus,\n                    selection,\n                    revealIfVisible: true,\n                    revealInCenterIfOutsideViewport: true,\n                    pinned: pinned || (!preserveFocus && !this.inMemory)\n                }\n            }, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP);\n        }\n        static getEncodedDebugData(modelUri) {\n            let path;\n            let sourceReference;\n            let sessionId;\n            switch (modelUri.scheme) {\n                case network_1.Schemas.file:\n                    path = path_1.normalize(modelUri.fsPath);\n                    break;\n                case debug_1.DEBUG_SCHEME:\n                    path = modelUri.path;\n                    if (modelUri.query) {\n                        const keyvalues = modelUri.query.split('&');\n                        for (let keyvalue of keyvalues) {\n                            const pair = keyvalue.split('=');\n                            if (pair.length === 2) {\n                                switch (pair[0]) {\n                                    case 'session':\n                                        sessionId = decodeURIComponent(pair[1]);\n                                        break;\n                                    case 'ref':\n                                        sourceReference = parseInt(pair[1]);\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    path = modelUri.toString();\n                    break;\n            }\n            return {\n                name: resources.basenameOrAuthority(modelUri),\n                path,\n                sourceReference,\n                sessionId\n            };\n        }\n    }\n    exports.Source = Source;\n});\n",null]}