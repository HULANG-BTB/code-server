{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nexports.VIEWLET_ID = 'workbench.view.extensions';\nexports.VIEW_CONTAINER = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry).registerViewContainer(exports.VIEWLET_ID);\nexports.EXTENSIONS_CONFIG = '.vscode/extensions.json';\nvar ExtensionState;\n(function (ExtensionState) {\n    ExtensionState[ExtensionState[\"Installing\"] = 0] = \"Installing\";\n    ExtensionState[ExtensionState[\"Installed\"] = 1] = \"Installed\";\n    ExtensionState[ExtensionState[\"Uninstalling\"] = 2] = \"Uninstalling\";\n    ExtensionState[ExtensionState[\"Uninstalled\"] = 3] = \"Uninstalled\";\n})(ExtensionState = exports.ExtensionState || (exports.ExtensionState = {}));\nexports.SERVICE_ID = 'extensionsWorkbenchService';\nexports.IExtensionsWorkbenchService = instantiation_1.createDecorator(exports.SERVICE_ID);\nexports.ConfigurationKey = 'extensions';\nexports.AutoUpdateConfigurationKey = 'extensions.autoUpdate';\nexports.AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';\nexports.ShowRecommendationsOnlyOnDemandKey = 'extensions.showRecommendationsOnlyOnDemand';\nexports.CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';\nvar ExtensionContainers = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionContainers, _super);\n    function ExtensionContainers(containers, extensionsWorkbenchService) {\n        var _this = _super.call(this) || this;\n        _this.containers = containers;\n        _this._register(extensionsWorkbenchService.onChange(_this.update, _this));\n        return _this;\n    }\n    Object.defineProperty(ExtensionContainers.prototype, \"extension\", {\n        set: function (extension) {\n            this.containers.forEach(function (c) { return c.extension = extension; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ExtensionContainers.prototype.update = function (extension) {\n        for (var _i = 0, _a = this.containers; _i < _a.length; _i++) {\n            var container = _a[_i];\n            if (extension && container.extension) {\n                if (extensionManagementUtil_1.areSameExtensions(container.extension.identifier, extension.identifier)) {\n                    container.extension = extension;\n                }\n            }\n            else {\n                container.update();\n            }\n        }\n    };\n    ExtensionContainers = tslib_1.__decorate([\n        tslib_1.__param(1, exports.IExtensionsWorkbenchService)\n    ], ExtensionContainers);\n    return ExtensionContainers;\n}(lifecycle_1.Disposable));\nexports.ExtensionContainers = ExtensionContainers;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/common/extensions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,gFAAiF;AAIjF,mDAA0H;AAC1H,iEAAgE;AAEhE,sDAAsD;AACtD,0GAAmG;AAGtF,QAAA,UAAU,GAAG,2BAA2B,CAAC;AACzC,QAAA,cAAc,GAAkB,mBAAQ,CAAC,EAAE,CAA0B,kBAAuB,CAAC,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,kBAAU,CAAC,CAAC;AAEvJ,QAAA,iBAAiB,GAAG,yBAAyB,CAAC;AAM3D,IAAkB,cAKjB;AALD,WAAkB,cAAc;IAC/B,+DAAU,CAAA;IACV,6DAAS,CAAA;IACT,mEAAY,CAAA;IACZ,iEAAW,CAAA;AACZ,CAAC,EALiB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAK/B;AA6CY,QAAA,UAAU,GAAG,4BAA4B,CAAC;AAE1C,QAAA,2BAA2B,GAAG,+BAAe,CAA8B,kBAAU,CAAC,CAAC;AAsBvF,QAAA,gBAAgB,GAAG,YAAY,CAAC;AAChC,QAAA,0BAA0B,GAAG,uBAAuB,CAAC;AACrD,QAAA,gCAAgC,GAAG,6BAA6B,CAAC;AACjE,QAAA,kCAAkC,GAAG,4CAA4C,CAAC;AAClF,QAAA,oCAAoC,GAAG,8CAA8C,CAAC;AAenG;IAAyC,+CAAU;IAElD,6BACkB,UAAiC,EACrB,0BAAuD;QAFrF,YAIC,iBAAO,SAEP;QALiB,gBAAU,GAAV,UAAU,CAAuB;QAIlD,KAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,CAAC,CAAC;;IACxE,CAAC;IAED,sBAAI,0CAAS;aAAb,UAAc,SAAqB;YAClC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,GAAG,SAAS,EAAvB,CAAuB,CAAC,CAAC;QACvD,CAAC;;;OAAA;IAEO,oCAAM,GAAd,UAAe,SAAqB;QACnC,KAAwB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,EAAE;YAApC,IAAM,SAAS,SAAA;YACnB,IAAI,SAAS,IAAI,SAAS,CAAC,SAAS,EAAE;gBACrC,IAAI,2CAAiB,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE;oBAC5E,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;iBAChC;aACD;iBAAM;gBACN,SAAS,CAAC,MAAM,EAAE,CAAC;aACnB;SACD;IACF,CAAC;IAxBW,mBAAmB;QAI7B,mBAAA,mCAA2B,CAAA;OAJjB,mBAAmB,CAyB/B;IAAD,0BAAC;CAAA,AAzBD,CAAyC,sBAAU,GAyBlD;AAzBY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IViewlet } from 'vs/workbench/common/viewlet';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { IPager } from 'vs/base/common/paging';\nimport { IQueryOptions, EnablementState, ILocalExtension, IGalleryExtension, IExtensionIdentifier } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IViewContainersRegistry, ViewContainer, Extensions as ViewContainerExtensions } from 'vs/workbench/common/views';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionManifest, ExtensionType } from 'vs/platform/extensions/common/extensions';\n\nexport const VIEWLET_ID = 'workbench.view.extensions';\nexport const VIEW_CONTAINER: ViewContainer = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer(VIEWLET_ID);\n\nexport const EXTENSIONS_CONFIG = '.vscode/extensions.json';\n\nexport interface IExtensionsViewlet extends IViewlet {\n\tsearch(text: string): void;\n}\n\nexport const enum ExtensionState {\n\tInstalling,\n\tInstalled,\n\tUninstalling,\n\tUninstalled\n}\n\nexport interface IExtension {\n\ttype?: ExtensionType;\n\tstate: ExtensionState;\n\tname: string;\n\tdisplayName: string;\n\tidentifier: IExtensionIdentifier;\n\tpublisher: string;\n\tpublisherDisplayName: string;\n\tversion: string;\n\tlatestVersion: string;\n\tdescription: string;\n\turl?: string;\n\trepository?: string;\n\ticonUrl: string;\n\ticonUrlFallback: string;\n\tlicenseUrl?: string;\n\tinstallCount?: number;\n\trating?: number;\n\tratingCount?: number;\n\toutdated: boolean;\n\tenablementState: EnablementState;\n\tdependencies: string[];\n\textensionPack: string[];\n\ttelemetryData: any;\n\tpreview: boolean;\n\tgetManifest(token: CancellationToken): Promise<IExtensionManifest | null>;\n\tgetReadme(token: CancellationToken): Promise<string>;\n\thasReadme(): boolean;\n\tgetChangelog(token: CancellationToken): Promise<string>;\n\thasChangelog(): boolean;\n\tlocal?: ILocalExtension;\n\tgallery?: IGalleryExtension;\n\tisMalicious: boolean;\n}\n\nexport interface IExtensionDependencies {\n\tdependencies: IExtensionDependencies[];\n\thasDependencies: boolean;\n\tidentifier: string;\n\textension: IExtension;\n\tdependent: IExtensionDependencies | null;\n}\n\nexport const SERVICE_ID = 'extensionsWorkbenchService';\n\nexport const IExtensionsWorkbenchService = createDecorator<IExtensionsWorkbenchService>(SERVICE_ID);\n\nexport interface IExtensionsWorkbenchService {\n\t_serviceBrand: any;\n\tonChange: Event<IExtension | undefined>;\n\tlocal: IExtension[];\n\tqueryLocal(): Promise<IExtension[]>;\n\tqueryGallery(token: CancellationToken): Promise<IPager<IExtension>>;\n\tqueryGallery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IExtension>>;\n\tcanInstall(extension: IExtension): boolean;\n\tinstall(vsix: string): Promise<IExtension>;\n\tinstall(extension: IExtension, promptToInstallDependencies?: boolean): Promise<IExtension>;\n\tuninstall(extension: IExtension): Promise<void>;\n\tinstallVersion(extension: IExtension, version: string): Promise<IExtension>;\n\treinstall(extension: IExtension): Promise<IExtension>;\n\tsetEnablement(extensions: IExtension | IExtension[], enablementState: EnablementState): Promise<void>;\n\tloadDependencies(extension: IExtension, token: CancellationToken): Promise<IExtensionDependencies | null>;\n\topen(extension: IExtension, sideByside?: boolean): Promise<any>;\n\tcheckForUpdates(): Promise<void>;\n\tallowedBadgeProviders: string[];\n}\n\nexport const ConfigurationKey = 'extensions';\nexport const AutoUpdateConfigurationKey = 'extensions.autoUpdate';\nexport const AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';\nexport const ShowRecommendationsOnlyOnDemandKey = 'extensions.showRecommendationsOnlyOnDemand';\nexport const CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';\n\nexport interface IExtensionsConfiguration {\n\tautoUpdate: boolean;\n\tautoCheckUpdates: boolean;\n\tignoreRecommendations: boolean;\n\tshowRecommendationsOnlyOnDemand: boolean;\n\tcloseExtensionDetailsOnViewChange: boolean;\n}\n\nexport interface IExtensionContainer {\n\textension: IExtension | null;\n\tupdate(): void;\n}\n\nexport class ExtensionContainers extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly containers: IExtensionContainer[],\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService\n\t) {\n\t\tsuper();\n\t\tthis._register(extensionsWorkbenchService.onChange(this.update, this));\n\t}\n\n\tset extension(extension: IExtension) {\n\t\tthis.containers.forEach(c => c.extension = extension);\n\t}\n\n\tprivate update(extension: IExtension): void {\n\t\tfor (const container of this.containers) {\n\t\t\tif (extension && container.extension) {\n\t\t\t\tif (areSameExtensions(container.extension.identifier, extension.identifier)) {\n\t\t\t\t\tcontainer.extension = extension;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontainer.update();\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}