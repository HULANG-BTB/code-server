{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar objects = require(\"vs/base/common/objects\");\nvar types = require(\"vs/base/common/types\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar baseEditor_1 = require(\"vs/workbench/browser/parts/editor/baseEditor\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY = 'textEditorViewState';\n/**\n * The base class of editors that leverage the text editor for the editing experience. This class is only intended to\n * be subclassed and not instantiated.\n */\nvar BaseTextEditor = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseTextEditor, _super);\n    function BaseTextEditor(id, telemetryService, _instantiationService, storageService, _configurationService, themeService, _textFileService, editorService, editorGroupService, windowService) {\n        var _this = _super.call(this, id, telemetryService, themeService, storageService) || this;\n        _this._instantiationService = _instantiationService;\n        _this._configurationService = _configurationService;\n        _this.themeService = themeService;\n        _this._textFileService = _textFileService;\n        _this.editorService = editorService;\n        _this.editorGroupService = editorGroupService;\n        _this.windowService = windowService;\n        _this.editorMemento = _this.getEditorMemento(editorGroupService, TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY, 100);\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) {\n            var resource = _this.getResource();\n            var value = resource ? _this.configurationService.getValue(resource) : undefined;\n            return _this.handleConfigurationChangeEvent(value);\n        }));\n        return _this;\n    }\n    Object.defineProperty(BaseTextEditor.prototype, \"instantiationService\", {\n        get: function () {\n            return this._instantiationService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseTextEditor.prototype, \"configurationService\", {\n        get: function () {\n            return this._configurationService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseTextEditor.prototype, \"textFileService\", {\n        get: function () {\n            return this._textFileService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BaseTextEditor.prototype.handleConfigurationChangeEvent = function (configuration) {\n        if (this.isVisible()) {\n            this.updateEditorConfiguration(configuration);\n        }\n        else {\n            this.hasPendingConfigurationChange = true;\n        }\n    };\n    BaseTextEditor.prototype.consumePendingConfigurationChangeEvent = function () {\n        if (this.hasPendingConfigurationChange) {\n            this.updateEditorConfiguration();\n            this.hasPendingConfigurationChange = false;\n        }\n    };\n    BaseTextEditor.prototype.computeConfiguration = function (configuration) {\n        // Specific editor options always overwrite user configuration\n        var editorConfiguration = types.isObject(configuration.editor) ? objects.deepClone(configuration.editor) : Object.create(null);\n        objects.assign(editorConfiguration, this.getConfigurationOverrides());\n        // ARIA label\n        editorConfiguration.ariaLabel = this.computeAriaLabel();\n        return editorConfiguration;\n    };\n    BaseTextEditor.prototype.computeAriaLabel = function () {\n        var ariaLabel = this.getAriaLabel();\n        // Apply group information to help identify in which group we are\n        if (ariaLabel) {\n            if (this.group) {\n                ariaLabel = nls.localize('editorLabelWithGroup', \"{0}, {1}.\", ariaLabel, this.group.label);\n            }\n        }\n        return ariaLabel;\n    };\n    BaseTextEditor.prototype.getConfigurationOverrides = function () {\n        var overrides = {};\n        objects.assign(overrides, {\n            overviewRulerLanes: 3,\n            lineNumbersMinChars: 3,\n            fixedOverflowWidgets: true\n        });\n        return overrides;\n    };\n    BaseTextEditor.prototype.createEditor = function (parent) {\n        var _this = this;\n        // Editor for Text\n        this._editorContainer = parent;\n        this.editorControl = this._register(this.createEditorControl(parent, this.computeConfiguration(this.configurationService.getValue(this.getResource()))));\n        // Model & Language changes\n        var codeEditor = editorBrowser_1.getCodeEditor(this.editorControl);\n        if (codeEditor) {\n            this._register(codeEditor.onDidChangeModelLanguage(function (e) { return _this.updateEditorConfiguration(); }));\n            this._register(codeEditor.onDidChangeModel(function (e) { return _this.updateEditorConfiguration(); }));\n        }\n        // Application & Editor focus change to respect auto save settings\n        if (editorBrowser_1.isCodeEditor(this.editorControl)) {\n            this._register(this.editorControl.onDidBlurEditorWidget(function () { return _this.onEditorFocusLost(); }));\n        }\n        else if (editorBrowser_1.isDiffEditor(this.editorControl)) {\n            this._register(this.editorControl.getOriginalEditor().onDidBlurEditorWidget(function () { return _this.onEditorFocusLost(); }));\n            this._register(this.editorControl.getModifiedEditor().onDidBlurEditorWidget(function () { return _this.onEditorFocusLost(); }));\n        }\n        this._register(this.editorService.onDidActiveEditorChange(function () { return _this.onEditorFocusLost(); }));\n        this._register(this.windowService.onDidChangeFocus(function (focused) { return _this.onWindowFocusChange(focused); }));\n    };\n    BaseTextEditor.prototype.onEditorFocusLost = function () {\n        this.maybeTriggerSaveAll(textfiles_1.SaveReason.FOCUS_CHANGE);\n    };\n    BaseTextEditor.prototype.onWindowFocusChange = function (focused) {\n        if (!focused) {\n            this.maybeTriggerSaveAll(textfiles_1.SaveReason.WINDOW_CHANGE);\n        }\n    };\n    BaseTextEditor.prototype.maybeTriggerSaveAll = function (reason) {\n        var mode = this.textFileService.getAutoSaveMode();\n        // Determine if we need to save all. In case of a window focus change we also save if auto save mode\n        // is configured to be ON_FOCUS_CHANGE (editor focus change)\n        if ((reason === textfiles_1.SaveReason.WINDOW_CHANGE && (mode === textfiles_1.AutoSaveMode.ON_FOCUS_CHANGE || mode === textfiles_1.AutoSaveMode.ON_WINDOW_CHANGE)) ||\n            (reason === textfiles_1.SaveReason.FOCUS_CHANGE && mode === textfiles_1.AutoSaveMode.ON_FOCUS_CHANGE)) {\n            if (this.textFileService.isDirty()) {\n                this.textFileService.saveAll(undefined, { reason: reason });\n            }\n        }\n    };\n    /**\n     * This method creates and returns the text editor control to be used. Subclasses can override to\n     * provide their own editor control that should be used (e.g. a DiffEditor).\n     *\n     * The passed in configuration object should be passed to the editor control when creating it.\n     */\n    BaseTextEditor.prototype.createEditorControl = function (parent, configuration) {\n        // Use a getter for the instantiation service since some subclasses might use scoped instantiation services\n        return this.instantiationService.createInstance(codeEditorWidget_1.CodeEditorWidget, parent, configuration, {});\n    };\n    BaseTextEditor.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        return _super.prototype.setInput.call(this, input, options, token).then(function () {\n            // Update editor options after having set the input. We do this because there can be\n            // editor input specific options (e.g. an ARIA label depending on the input showing)\n            _this.updateEditorConfiguration();\n            _this._editorContainer.setAttribute('aria-label', _this.computeAriaLabel());\n        });\n    };\n    BaseTextEditor.prototype.setEditorVisible = function (visible, group) {\n        // Pass on to Editor\n        if (visible) {\n            this.consumePendingConfigurationChangeEvent();\n            this.editorControl.onVisible();\n        }\n        else {\n            this.editorControl.onHide();\n        }\n        _super.prototype.setEditorVisible.call(this, visible, group);\n    };\n    BaseTextEditor.prototype.focus = function () {\n        this.editorControl.focus();\n    };\n    BaseTextEditor.prototype.layout = function (dimension) {\n        // Pass on to Editor\n        this.editorControl.layout(dimension);\n    };\n    BaseTextEditor.prototype.getControl = function () {\n        return this.editorControl;\n    };\n    /**\n     * Saves the text editor view state for the given resource.\n     */\n    BaseTextEditor.prototype.saveTextEditorViewState = function (resource) {\n        var editorViewState = this.retrieveTextEditorViewState(resource);\n        if (!editorViewState || !this.group) {\n            return;\n        }\n        this.editorMemento.saveEditorState(this.group, resource, editorViewState);\n    };\n    BaseTextEditor.prototype.retrieveTextEditorViewState = function (resource) {\n        var control = this.getControl();\n        var model = control.getModel();\n        if (!model) {\n            return null; // view state always needs a model\n        }\n        var modelUri = model.uri;\n        if (!modelUri) {\n            return null; // model URI is needed to make sure we save the view state correctly\n        }\n        if (modelUri.toString() !== resource.toString()) {\n            return null; // prevent saving view state for a model that is not the expected one\n        }\n        return control.saveViewState();\n    };\n    /**\n     * Clears the text editor view state for the given resources.\n     */\n    BaseTextEditor.prototype.clearTextEditorViewState = function (resources, group) {\n        var _this = this;\n        resources.forEach(function (resource) {\n            _this.editorMemento.clearEditorState(resource, group);\n        });\n    };\n    /**\n     * Loads the text editor view state for the given resource and returns it.\n     */\n    BaseTextEditor.prototype.loadTextEditorViewState = function (resource) {\n        return this.group ? this.editorMemento.loadEditorState(this.group, resource) : undefined;\n    };\n    BaseTextEditor.prototype.updateEditorConfiguration = function (configuration) {\n        if (!configuration) {\n            var resource = this.getResource();\n            if (resource) {\n                configuration = this.configurationService.getValue(resource);\n            }\n        }\n        if (!this.editorControl || !configuration) {\n            return;\n        }\n        var editorConfiguration = this.computeConfiguration(configuration);\n        // Try to figure out the actual editor options that changed from the last time we updated the editor.\n        // We do this so that we are not overwriting some dynamic editor settings (e.g. word wrap) that might\n        // have been applied to the editor directly.\n        var editorSettingsToApply = editorConfiguration;\n        if (this.lastAppliedEditorOptions) {\n            editorSettingsToApply = objects.distinct(this.lastAppliedEditorOptions, editorSettingsToApply);\n        }\n        if (Object.keys(editorSettingsToApply).length > 0) {\n            this.lastAppliedEditorOptions = editorConfiguration;\n            this.editorControl.updateOptions(editorSettingsToApply);\n        }\n    };\n    BaseTextEditor.prototype.getResource = function () {\n        var codeEditor = editorBrowser_1.getCodeEditor(this.editorControl);\n        if (codeEditor) {\n            var model = codeEditor.getModel();\n            if (model) {\n                return model.uri;\n            }\n        }\n        if (this.input) {\n            return this.input.getResource();\n        }\n        return null;\n    };\n    BaseTextEditor.prototype.dispose = function () {\n        this.lastAppliedEditorOptions = undefined;\n        _super.prototype.dispose.call(this);\n    };\n    BaseTextEditor = tslib_1.__decorate([\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, textfiles_1.ITextFileService),\n        tslib_1.__param(7, editorService_1.IEditorService),\n        tslib_1.__param(8, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(9, windows_1.IWindowService)\n    ], BaseTextEditor);\n    return BaseTextEditor;\n}(baseEditor_1.BaseEditor));\nexports.BaseTextEditor = BaseTextEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/textEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as objects from 'vs/base/common/objects';\nimport * as types from 'vs/base/common/types';\nimport * as DOM from 'vs/base/browser/dom';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { EditorInput, EditorOptions, IEditorMemento, ITextEditor } from 'vs/workbench/common/editor';\nimport { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { IEditorViewState, IEditor } from 'vs/editor/common/editorCommon';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextFileService, SaveReason, AutoSaveMode } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { isDiffEditor, isCodeEditor, ICodeEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorGroupsService, IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\n\nconst TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY = 'textEditorViewState';\n\nexport interface IEditorConfiguration {\n\teditor: object;\n\tdiffEditor: object;\n}\n\n/**\n * The base class of editors that leverage the text editor for the editing experience. This class is only intended to\n * be subclassed and not instantiated.\n */\nexport abstract class BaseTextEditor extends BaseEditor implements ITextEditor {\n\tprivate editorControl: IEditor;\n\tprivate _editorContainer: HTMLElement;\n\tprivate hasPendingConfigurationChange: boolean;\n\tprivate lastAppliedEditorOptions?: IEditorOptions;\n\tprivate editorMemento: IEditorMemento<IEditorViewState>;\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService private readonly _configurationService: ITextResourceConfigurationService,\n\t\t@IThemeService protected themeService: IThemeService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IEditorService protected editorService: IEditorService,\n\t\t@IEditorGroupsService protected editorGroupService: IEditorGroupsService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\n\t\tthis.editorMemento = this.getEditorMemento<IEditorViewState>(editorGroupService, TEXT_EDITOR_VIEW_STATE_PREFERENCE_KEY, 100);\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tconst resource = this.getResource();\n\t\t\tconst value = resource ? this.configurationService.getValue<IEditorConfiguration>(resource) : undefined;\n\t\t\treturn this.handleConfigurationChangeEvent(value);\n\t\t}));\n\t}\n\n\tprotected get instantiationService(): IInstantiationService {\n\t\treturn this._instantiationService;\n\t}\n\n\tprotected get configurationService(): ITextResourceConfigurationService {\n\t\treturn this._configurationService;\n\t}\n\n\tprotected get textFileService(): ITextFileService {\n\t\treturn this._textFileService;\n\t}\n\n\tprotected handleConfigurationChangeEvent(configuration?: IEditorConfiguration): void {\n\t\tif (this.isVisible()) {\n\t\t\tthis.updateEditorConfiguration(configuration);\n\t\t} else {\n\t\t\tthis.hasPendingConfigurationChange = true;\n\t\t}\n\t}\n\n\tprivate consumePendingConfigurationChangeEvent(): void {\n\t\tif (this.hasPendingConfigurationChange) {\n\t\t\tthis.updateEditorConfiguration();\n\t\t\tthis.hasPendingConfigurationChange = false;\n\t\t}\n\t}\n\n\tprotected computeConfiguration(configuration: IEditorConfiguration): IEditorOptions {\n\n\t\t// Specific editor options always overwrite user configuration\n\t\tconst editorConfiguration: IEditorOptions = types.isObject(configuration.editor) ? objects.deepClone(configuration.editor) : Object.create(null);\n\t\tobjects.assign(editorConfiguration, this.getConfigurationOverrides());\n\n\t\t// ARIA label\n\t\teditorConfiguration.ariaLabel = this.computeAriaLabel();\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprivate computeAriaLabel(): string {\n\t\tlet ariaLabel = this.getAriaLabel();\n\n\t\t// Apply group information to help identify in which group we are\n\t\tif (ariaLabel) {\n\t\t\tif (this.group) {\n\t\t\t\tariaLabel = nls.localize('editorLabelWithGroup', \"{0}, {1}.\", ariaLabel, this.group.label);\n\t\t\t}\n\t\t}\n\n\t\treturn ariaLabel;\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\tconst overrides = {};\n\t\tobjects.assign(overrides, {\n\t\t\toverviewRulerLanes: 3,\n\t\t\tlineNumbersMinChars: 3,\n\t\t\tfixedOverflowWidgets: true\n\t\t});\n\n\t\treturn overrides;\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\n\t\t// Editor for Text\n\t\tthis._editorContainer = parent;\n\t\tthis.editorControl = this._register(this.createEditorControl(parent, this.computeConfiguration(this.configurationService.getValue<IEditorConfiguration>(this.getResource()!))));\n\n\t\t// Model & Language changes\n\t\tconst codeEditor = getCodeEditor(this.editorControl);\n\t\tif (codeEditor) {\n\t\t\tthis._register(codeEditor.onDidChangeModelLanguage(e => this.updateEditorConfiguration()));\n\t\t\tthis._register(codeEditor.onDidChangeModel(e => this.updateEditorConfiguration()));\n\t\t}\n\n\t\t// Application & Editor focus change to respect auto save settings\n\t\tif (isCodeEditor(this.editorControl)) {\n\t\t\tthis._register(this.editorControl.onDidBlurEditorWidget(() => this.onEditorFocusLost()));\n\t\t} else if (isDiffEditor(this.editorControl)) {\n\t\t\tthis._register(this.editorControl.getOriginalEditor().onDidBlurEditorWidget(() => this.onEditorFocusLost()));\n\t\t\tthis._register(this.editorControl.getModifiedEditor().onDidBlurEditorWidget(() => this.onEditorFocusLost()));\n\t\t}\n\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onEditorFocusLost()));\n\t\tthis._register(this.windowService.onDidChangeFocus(focused => this.onWindowFocusChange(focused)));\n\t}\n\n\tprivate onEditorFocusLost(): void {\n\t\tthis.maybeTriggerSaveAll(SaveReason.FOCUS_CHANGE);\n\t}\n\n\tprivate onWindowFocusChange(focused: boolean): void {\n\t\tif (!focused) {\n\t\t\tthis.maybeTriggerSaveAll(SaveReason.WINDOW_CHANGE);\n\t\t}\n\t}\n\n\tprivate maybeTriggerSaveAll(reason: SaveReason): void {\n\t\tconst mode = this.textFileService.getAutoSaveMode();\n\n\t\t// Determine if we need to save all. In case of a window focus change we also save if auto save mode\n\t\t// is configured to be ON_FOCUS_CHANGE (editor focus change)\n\t\tif (\n\t\t\t(reason === SaveReason.WINDOW_CHANGE && (mode === AutoSaveMode.ON_FOCUS_CHANGE || mode === AutoSaveMode.ON_WINDOW_CHANGE)) ||\n\t\t\t(reason === SaveReason.FOCUS_CHANGE && mode === AutoSaveMode.ON_FOCUS_CHANGE)\n\t\t) {\n\t\t\tif (this.textFileService.isDirty()) {\n\t\t\t\tthis.textFileService.saveAll(undefined, { reason });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This method creates and returns the text editor control to be used. Subclasses can override to\n\t * provide their own editor control that should be used (e.g. a DiffEditor).\n\t *\n\t * The passed in configuration object should be passed to the editor control when creating it.\n\t */\n\tprotected createEditorControl(parent: HTMLElement, configuration: IEditorOptions): IEditor {\n\n\t\t// Use a getter for the instantiation service since some subclasses might use scoped instantiation services\n\t\treturn this.instantiationService.createInstance(CodeEditorWidget, parent, configuration, {});\n\t}\n\n\tsetInput(input: EditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\t\treturn super.setInput(input, options, token).then(() => {\n\n\t\t\t// Update editor options after having set the input. We do this because there can be\n\t\t\t// editor input specific options (e.g. an ARIA label depending on the input showing)\n\t\t\tthis.updateEditorConfiguration();\n\t\t\tthis._editorContainer.setAttribute('aria-label', this.computeAriaLabel());\n\t\t});\n\t}\n\n\tprotected setEditorVisible(visible: boolean, group: IEditorGroup): void {\n\n\t\t// Pass on to Editor\n\t\tif (visible) {\n\t\t\tthis.consumePendingConfigurationChangeEvent();\n\t\t\tthis.editorControl.onVisible();\n\t\t} else {\n\t\t\tthis.editorControl.onHide();\n\t\t}\n\n\t\tsuper.setEditorVisible(visible, group);\n\t}\n\n\tfocus(): void {\n\t\tthis.editorControl.focus();\n\t}\n\n\tlayout(dimension: DOM.Dimension): void {\n\n\t\t// Pass on to Editor\n\t\tthis.editorControl.layout(dimension);\n\t}\n\n\tgetControl(): IEditor {\n\t\treturn this.editorControl;\n\t}\n\n\t/**\n\t * Saves the text editor view state for the given resource.\n\t */\n\tprotected saveTextEditorViewState(resource: URI): void {\n\t\tconst editorViewState = this.retrieveTextEditorViewState(resource);\n\t\tif (!editorViewState || !this.group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editorMemento.saveEditorState(this.group, resource, editorViewState);\n\t}\n\n\tprotected retrieveTextEditorViewState(resource: URI): IEditorViewState | null {\n\t\tconst control = this.getControl() as ICodeEditor;\n\t\tconst model = control.getModel();\n\t\tif (!model) {\n\t\t\treturn null; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = model.uri;\n\t\tif (!modelUri) {\n\t\t\treturn null; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (modelUri.toString() !== resource.toString()) {\n\t\t\treturn null; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn control.saveViewState();\n\t}\n\n\t/**\n\t * Clears the text editor view state for the given resources.\n\t */\n\tprotected clearTextEditorViewState(resources: URI[], group?: IEditorGroup): void {\n\t\tresources.forEach(resource => {\n\t\t\tthis.editorMemento.clearEditorState(resource, group);\n\t\t});\n\t}\n\n\t/**\n\t * Loads the text editor view state for the given resource and returns it.\n\t */\n\tprotected loadTextEditorViewState(resource: URI): IEditorViewState | undefined {\n\t\treturn this.group ? this.editorMemento.loadEditorState(this.group, resource) : undefined;\n\t}\n\n\tprivate updateEditorConfiguration(configuration?: IEditorConfiguration): void {\n\t\tif (!configuration) {\n\t\t\tconst resource = this.getResource();\n\t\t\tif (resource) {\n\t\t\t\tconfiguration = this.configurationService.getValue<IEditorConfiguration>(resource);\n\t\t\t}\n\t\t}\n\t\tif (!this.editorControl || !configuration) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorConfiguration = this.computeConfiguration(configuration);\n\n\t\t// Try to figure out the actual editor options that changed from the last time we updated the editor.\n\t\t// We do this so that we are not overwriting some dynamic editor settings (e.g. word wrap) that might\n\t\t// have been applied to the editor directly.\n\t\tlet editorSettingsToApply = editorConfiguration;\n\t\tif (this.lastAppliedEditorOptions) {\n\t\t\teditorSettingsToApply = objects.distinct(this.lastAppliedEditorOptions, editorSettingsToApply);\n\t\t}\n\n\t\tif (Object.keys(editorSettingsToApply).length > 0) {\n\t\t\tthis.lastAppliedEditorOptions = editorConfiguration;\n\t\t\tthis.editorControl.updateOptions(editorSettingsToApply);\n\t\t}\n\t}\n\n\tprotected getResource(): URI | null {\n\t\tconst codeEditor = getCodeEditor(this.editorControl);\n\t\tif (codeEditor) {\n\t\t\tconst model = codeEditor.getModel();\n\t\t\tif (model) {\n\t\t\t\treturn model.uri;\n\t\t\t}\n\t\t}\n\n\t\tif (this.input) {\n\t\t\treturn this.input.getResource();\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprotected abstract getAriaLabel(): string;\n\n\tdispose(): void {\n\t\tthis.lastAppliedEditorOptions = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}