{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/serviceCollection.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/serviceCollection.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ServiceCollection = /** @class */ (function () {\n    function ServiceCollection() {\n        var entries = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            entries[_i] = arguments[_i];\n        }\n        this._entries = new Map();\n        for (var _a = 0, entries_1 = entries; _a < entries_1.length; _a++) {\n            var _b = entries_1[_a], id = _b[0], service = _b[1];\n            this.set(id, service);\n        }\n    }\n    ServiceCollection.prototype.set = function (id, instanceOrDescriptor) {\n        var result = this._entries.get(id);\n        this._entries.set(id, instanceOrDescriptor);\n        return result;\n    };\n    ServiceCollection.prototype.forEach = function (callback) {\n        this._entries.forEach(function (value, key) { return callback(key, value); });\n    };\n    ServiceCollection.prototype.has = function (id) {\n        return this._entries.has(id);\n    };\n    ServiceCollection.prototype.get = function (id) {\n        return this._entries.get(id);\n    };\n    return ServiceCollection;\n}());\nexports.ServiceCollection = ServiceCollection;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/serviceCollection.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/instantiation/common/serviceCollection.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAKhG;IAIC;QAAY,iBAA2C;aAA3C,UAA2C,EAA3C,qBAA2C,EAA3C,IAA2C;YAA3C,4BAA2C;;QAF/C,aAAQ,GAAG,IAAI,GAAG,EAA+B,CAAC;QAGzD,KAA0B,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;YAA1B,IAAA,kBAAa,EAAZ,UAAE,EAAE,eAAO;YACpB,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;SACtB;IACF,CAAC;IAED,+BAAG,GAAH,UAAO,EAAwB,EAAE,oBAA2C;QAC3E,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;QAC5C,OAAO,MAAM,CAAC;IACf,CAAC;IAED,mCAAO,GAAP,UAAQ,QAAwE;QAC/E,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG,IAAK,OAAA,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,EAApB,CAAoB,CAAC,CAAC;IAC7D,CAAC;IAED,+BAAG,GAAH,UAAI,EAA0B;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,+BAAG,GAAH,UAAO,EAAwB;QAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IACF,wBAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { SyncDescriptor } from './descriptors';\n\nexport class ServiceCollection {\n\n\tprivate _entries = new Map<ServiceIdentifier<any>, any>();\n\n\tconstructor(...entries: [ServiceIdentifier<any>, any][]) {\n\t\tfor (let [id, service] of entries) {\n\t\t\tthis.set(id, service);\n\t\t}\n\t}\n\n\tset<T>(id: ServiceIdentifier<T>, instanceOrDescriptor: T | SyncDescriptor<T>): T | SyncDescriptor<T> {\n\t\tconst result = this._entries.get(id);\n\t\tthis._entries.set(id, instanceOrDescriptor);\n\t\treturn result;\n\t}\n\n\tforEach(callback: (id: ServiceIdentifier<any>, instanceOrDescriptor: any) => any): void {\n\t\tthis._entries.forEach((value, key) => callback(key, value));\n\t}\n\n\thas(id: ServiceIdentifier<any>): boolean {\n\t\treturn this._entries.has(id);\n\t}\n\n\tget<T>(id: ServiceIdentifier<T>): T | SyncDescriptor<T> {\n\t\treturn this._entries.get(id);\n\t}\n}\n"]}]}