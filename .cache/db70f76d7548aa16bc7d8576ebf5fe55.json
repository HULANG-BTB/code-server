{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/onEnter.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes/supports/onEnter.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/strings\", \"vs/editor/common/modes/languageConfiguration\"], function (require, exports, errors_1, strings, languageConfiguration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class OnEnterSupport {\n        constructor(opts) {\n            opts = opts || {};\n            opts.brackets = opts.brackets || [\n                ['(', ')'],\n                ['{', '}'],\n                ['[', ']']\n            ];\n            this._brackets = [];\n            opts.brackets.forEach((bracket) => {\n                const openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n                const closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n                if (openRegExp && closeRegExp) {\n                    this._brackets.push({\n                        open: bracket[0],\n                        openRegExp: openRegExp,\n                        close: bracket[1],\n                        closeRegExp: closeRegExp,\n                    });\n                }\n            });\n            this._regExpRules = opts.regExpRules || [];\n        }\n        onEnter(oneLineAboveText, beforeEnterText, afterEnterText) {\n            // (1): `regExpRules`\n            for (let i = 0, len = this._regExpRules.length; i < len; i++) {\n                let rule = this._regExpRules[i];\n                const regResult = [{\n                        reg: rule.beforeText,\n                        text: beforeEnterText\n                    }, {\n                        reg: rule.afterText,\n                        text: afterEnterText\n                    }, {\n                        reg: rule.oneLineAboveText,\n                        text: oneLineAboveText\n                    }].every((obj) => {\n                    return obj.reg ? obj.reg.test(obj.text) : true;\n                });\n                if (regResult) {\n                    return rule.action;\n                }\n            }\n            // (2): Special indent-outdent\n            if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    let bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n                        return { indentAction: languageConfiguration_1.IndentAction.IndentOutdent };\n                    }\n                }\n            }\n            // (4): Open bracket based logic\n            if (beforeEnterText.length > 0) {\n                for (let i = 0, len = this._brackets.length; i < len; i++) {\n                    let bracket = this._brackets[i];\n                    if (bracket.openRegExp.test(beforeEnterText)) {\n                        return { indentAction: languageConfiguration_1.IndentAction.Indent };\n                    }\n                }\n            }\n            return null;\n        }\n        static _createOpenBracketRegExp(bracket) {\n            let str = strings.escapeRegExpCharacters(bracket);\n            if (!/\\B/.test(str.charAt(0))) {\n                str = '\\\\b' + str;\n            }\n            str += '\\\\s*$';\n            return OnEnterSupport._safeRegExp(str);\n        }\n        static _createCloseBracketRegExp(bracket) {\n            let str = strings.escapeRegExpCharacters(bracket);\n            if (!/\\B/.test(str.charAt(str.length - 1))) {\n                str = str + '\\\\b';\n            }\n            str = '^\\\\s*' + str;\n            return OnEnterSupport._safeRegExp(str);\n        }\n        static _safeRegExp(def) {\n            try {\n                return new RegExp(def);\n            }\n            catch (err) {\n                errors_1.onUnexpectedError(err);\n                return null;\n            }\n        }\n    }\n    exports.OnEnterSupport = OnEnterSupport;\n});\n",null]}