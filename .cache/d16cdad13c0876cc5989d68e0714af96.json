{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.ITerminalInstanceService = instantiation_1.createDecorator('terminalInstanceService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminal.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/browser/terminal.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAIhG,gFAAiF;AAGpE,QAAA,wBAAwB,GAAG,+BAAe,CAA2B,yBAAyB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Terminal as XTermTerminal } from 'vscode-xterm';\nimport { ITerminalInstance, IWindowsShellHelper, ITerminalProcessManager, ITerminalConfigHelper, ITerminalChildProcess, IShellLaunchConfig } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nexport const ITerminalInstanceService = createDecorator<ITerminalInstanceService>('terminalInstanceService');\n\nexport interface ITerminalInstanceService {\n\t_serviceBrand: any;\n\n\tgetXtermConstructor(): Promise<typeof XTermTerminal>;\n\tcreateWindowsShellHelper(shellProcessId: number, instance: ITerminalInstance, xterm: XTermTerminal): IWindowsShellHelper;\n\tcreateTerminalProcessManager(id: number, configHelper: ITerminalConfigHelper): ITerminalProcessManager;\n\tcreateTerminalProcess(shellLaunchConfig: IShellLaunchConfig, cwd: string, cols: number, rows: number, env: IProcessEnvironment, windowsEnableConpty: boolean): ITerminalChildProcess;\n}\n\nexport interface IBrowserTerminalConfigHelper extends ITerminalConfigHelper {\n\tpanelContainer: HTMLElement;\n}\n"]}]}