{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/quickopen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/quickopen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar objects = require(\"vs/base/common/objects\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar strings = require(\"vs/base/common/strings\");\nvar types = require(\"vs/base/common/types\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar quickOpen_2 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nexports.CLOSE_ON_FOCUS_LOST_CONFIG = 'workbench.quickOpen.closeOnFocusLost';\nexports.PRESERVE_INPUT_CONFIG = 'workbench.quickOpen.preserveInput';\nexports.SEARCH_EDITOR_HISTORY = 'search.quickOpen.includeHistory';\nvar QuickOpenHandler = /** @class */ (function () {\n    function QuickOpenHandler() {\n    }\n    /**\n     * A quick open handler returns results for a given input string. The resolved promise\n     * returns an instance of quick open model. It is up to the handler to keep and reuse an\n     * instance of the same model across multiple calls. This helps in situations where the user is\n     * narrowing down a search and the model is just filtering some items out.\n     *\n     * As such, returning the same model instance across multiple searches will yield best\n     * results in terms of performance when many items are shown.\n     */\n    QuickOpenHandler.prototype.getResults = function (searchValue, token) {\n        return Promise.resolve(null);\n    };\n    /**\n     * The ARIA label to apply when this quick open handler is active in quick open.\n     */\n    QuickOpenHandler.prototype.getAriaLabel = function () {\n        return null;\n    };\n    /**\n     * Extra CSS class name to add to the quick open widget to do custom styling of entries.\n     */\n    QuickOpenHandler.prototype.getClass = function () {\n        return null;\n    };\n    /**\n     * Indicates if the handler can run in the current environment. Return a string if the handler cannot run but has\n     * a good message to show in this case.\n     */\n    QuickOpenHandler.prototype.canRun = function () {\n        return true;\n    };\n    /**\n     * Hints to the outside that this quick open handler typically returns results fast.\n     */\n    QuickOpenHandler.prototype.hasShortResponseTime = function () {\n        return false;\n    };\n    /**\n     * Indicates if the handler wishes the quick open widget to automatically select the first result entry or an entry\n     * based on a specific prefix match.\n     */\n    QuickOpenHandler.prototype.getAutoFocus = function (searchValue, context) {\n        return {};\n    };\n    /**\n     * Indicates to the handler that the quick open widget has been opened.\n     */\n    QuickOpenHandler.prototype.onOpen = function () {\n        return;\n    };\n    /**\n     * Indicates to the handler that the quick open widget has been closed. Allows to free up any resources as needed.\n     * The parameter canceled indicates if the quick open widget was closed with an entry being run or not.\n     */\n    QuickOpenHandler.prototype.onClose = function (canceled) {\n        return;\n    };\n    /**\n     * Allows to return a label that will be placed to the side of the results from this handler or null if none.\n     */\n    QuickOpenHandler.prototype.getGroupLabel = function () {\n        return null;\n    };\n    /**\n     * Allows to return a label that will be used when there are no results found\n     */\n    QuickOpenHandler.prototype.getEmptyLabel = function (searchString) {\n        if (searchString.length > 0) {\n            return nls.localize('noResultsMatching', \"No results matching\");\n        }\n        return nls.localize('noResultsFound2', \"No results found\");\n    };\n    return QuickOpenHandler;\n}());\nexports.QuickOpenHandler = QuickOpenHandler;\n/**\n * A lightweight descriptor of a quick open handler.\n */\nvar QuickOpenHandlerDescriptor = /** @class */ (function () {\n    function QuickOpenHandlerDescriptor(ctor, id, prefix, contextKey, param, instantProgress) {\n        if (instantProgress === void 0) { instantProgress = false; }\n        this.ctor = ctor;\n        this.id = id;\n        this.prefix = prefix;\n        this.contextKey = contextKey;\n        this.instantProgress = instantProgress;\n        if (types.isString(param)) {\n            this.description = param;\n        }\n        else {\n            this.helpEntries = param;\n        }\n    }\n    QuickOpenHandlerDescriptor.prototype.getId = function () {\n        return this.id;\n    };\n    QuickOpenHandlerDescriptor.prototype.instantiate = function (instantiationService) {\n        return instantiationService.createInstance(this.ctor);\n    };\n    return QuickOpenHandlerDescriptor;\n}());\nexports.QuickOpenHandlerDescriptor = QuickOpenHandlerDescriptor;\nexports.Extensions = {\n    Quickopen: 'workbench.contributions.quickopen'\n};\nvar QuickOpenRegistry = /** @class */ (function () {\n    function QuickOpenRegistry() {\n        this.handlers = [];\n    }\n    QuickOpenRegistry.prototype.registerQuickOpenHandler = function (descriptor) {\n        this.handlers.push(descriptor);\n        // sort the handlers by decreasing prefix length, such that longer\n        // prefixes take priority: 'ext' vs 'ext install' - the latter should win\n        this.handlers.sort(function (h1, h2) { return h2.prefix.length - h1.prefix.length; });\n    };\n    QuickOpenRegistry.prototype.registerDefaultQuickOpenHandler = function (descriptor) {\n        this.defaultHandler = descriptor;\n    };\n    QuickOpenRegistry.prototype.getQuickOpenHandlers = function () {\n        return this.handlers.slice(0);\n    };\n    QuickOpenRegistry.prototype.getQuickOpenHandler = function (text) {\n        return text ? (arrays.first(this.handlers, function (h) { return strings.startsWith(text, h.prefix); }) || null) : null;\n    };\n    QuickOpenRegistry.prototype.getDefaultQuickOpenHandler = function () {\n        return this.defaultHandler;\n    };\n    return QuickOpenRegistry;\n}());\nplatform_1.Registry.add(exports.Extensions.Quickopen, new QuickOpenRegistry());\n/**\n * A subclass of quick open entry that will open an editor with input and options when running.\n */\nvar EditorQuickOpenEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorQuickOpenEntry, _super);\n    function EditorQuickOpenEntry(_editorService) {\n        var _this = _super.call(this) || this;\n        _this._editorService = _editorService;\n        return _this;\n    }\n    Object.defineProperty(EditorQuickOpenEntry.prototype, \"editorService\", {\n        get: function () {\n            return this._editorService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorQuickOpenEntry.prototype.getInput = function () {\n        return null;\n    };\n    EditorQuickOpenEntry.prototype.getOptions = function () {\n        return null;\n    };\n    EditorQuickOpenEntry.prototype.run = function (mode, context) {\n        var hideWidget = (mode === quickOpen_1.Mode.OPEN);\n        if (mode === quickOpen_1.Mode.OPEN || mode === quickOpen_1.Mode.OPEN_IN_BACKGROUND) {\n            var sideBySide = context.keymods.ctrlCmd;\n            var openOptions = void 0;\n            if (mode === quickOpen_1.Mode.OPEN_IN_BACKGROUND) {\n                openOptions = { pinned: true, preserveFocus: true };\n            }\n            else if (context.keymods.alt) {\n                openOptions = { pinned: true };\n            }\n            var input = this.getInput();\n            if (input instanceof editor_1.EditorInput) {\n                var opts = this.getOptions();\n                if (opts) {\n                    opts = objects.mixin(opts, openOptions, true);\n                }\n                else if (openOptions) {\n                    opts = editor_1.EditorOptions.create(openOptions);\n                }\n                this.editorService.openEditor(input, types.withNullAsUndefined(opts), sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP);\n            }\n            else {\n                var resourceInput = input;\n                if (openOptions) {\n                    resourceInput.options = objects.assign(resourceInput.options || Object.create(null), openOptions);\n                }\n                this.editorService.openEditor(resourceInput, sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP);\n            }\n        }\n        return hideWidget;\n    };\n    return EditorQuickOpenEntry;\n}(quickOpenModel_1.QuickOpenEntry));\nexports.EditorQuickOpenEntry = EditorQuickOpenEntry;\n/**\n * A subclass of quick open entry group that provides access to editor input and options.\n */\nvar EditorQuickOpenEntryGroup = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorQuickOpenEntryGroup, _super);\n    function EditorQuickOpenEntryGroup() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EditorQuickOpenEntryGroup.prototype.getInput = function () {\n        return null;\n    };\n    EditorQuickOpenEntryGroup.prototype.getOptions = function () {\n        return null;\n    };\n    return EditorQuickOpenEntryGroup;\n}(quickOpenModel_1.QuickOpenEntryGroup));\nexports.EditorQuickOpenEntryGroup = EditorQuickOpenEntryGroup;\nvar QuickOpenAction = /** @class */ (function (_super) {\n    tslib_1.__extends(QuickOpenAction, _super);\n    function QuickOpenAction(id, label, prefix, quickOpenService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.quickOpenService = quickOpenService;\n        _this.prefix = prefix;\n        _this.enabled = !!_this.quickOpenService;\n        return _this;\n    }\n    QuickOpenAction.prototype.run = function (context) {\n        // Show with prefix\n        this.quickOpenService.show(this.prefix);\n        return Promise.resolve(undefined);\n    };\n    QuickOpenAction = tslib_1.__decorate([\n        tslib_1.__param(3, quickOpen_2.IQuickOpenService)\n    ], QuickOpenAction);\n    return QuickOpenAction;\n}(actions_1.Action));\nexports.QuickOpenAction = QuickOpenAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/quickopen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/quickopen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as objects from 'vs/base/common/objects';\nimport * as arrays from 'vs/base/common/arrays';\nimport * as strings from 'vs/base/common/strings';\nimport * as types from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Action } from 'vs/base/common/actions';\nimport { Mode, IEntryRunContext, IAutoFocus, IModel, IQuickNavigateConfiguration } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenEntry, QuickOpenEntryGroup } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { EditorOptions, EditorInput, IEditorInput } from 'vs/workbench/common/editor';\nimport { IResourceInput, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { IConstructorSignature0, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorService, SIDE_GROUP, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const CLOSE_ON_FOCUS_LOST_CONFIG = 'workbench.quickOpen.closeOnFocusLost';\nexport const PRESERVE_INPUT_CONFIG = 'workbench.quickOpen.preserveInput';\nexport const SEARCH_EDITOR_HISTORY = 'search.quickOpen.includeHistory';\n\nexport interface IWorkbenchQuickOpenConfiguration {\n\tworkbench: {\n\t\tcommandPalette: {\n\t\t\thistory: number;\n\t\t\tpreserveInput: boolean;\n\t\t}\n\t};\n}\n\nexport class QuickOpenHandler {\n\n\t/**\n\t * A quick open handler returns results for a given input string. The resolved promise\n\t * returns an instance of quick open model. It is up to the handler to keep and reuse an\n\t * instance of the same model across multiple calls. This helps in situations where the user is\n\t * narrowing down a search and the model is just filtering some items out.\n\t *\n\t * As such, returning the same model instance across multiple searches will yield best\n\t * results in terms of performance when many items are shown.\n\t */\n\tgetResults(searchValue: string, token: CancellationToken): Promise<IModel<any> | null> {\n\t\treturn Promise.resolve(null);\n\t}\n\n\t/**\n\t * The ARIA label to apply when this quick open handler is active in quick open.\n\t */\n\tgetAriaLabel(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Extra CSS class name to add to the quick open widget to do custom styling of entries.\n\t */\n\tgetClass(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Indicates if the handler can run in the current environment. Return a string if the handler cannot run but has\n\t * a good message to show in this case.\n\t */\n\tcanRun(): boolean | string {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Hints to the outside that this quick open handler typically returns results fast.\n\t */\n\thasShortResponseTime(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Indicates if the handler wishes the quick open widget to automatically select the first result entry or an entry\n\t * based on a specific prefix match.\n\t */\n\tgetAutoFocus(searchValue: string, context: { model: IModel<QuickOpenEntry>, quickNavigateConfiguration?: IQuickNavigateConfiguration }): IAutoFocus {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Indicates to the handler that the quick open widget has been opened.\n\t */\n\tonOpen(): void {\n\t\treturn;\n\t}\n\n\t/**\n\t * Indicates to the handler that the quick open widget has been closed. Allows to free up any resources as needed.\n\t * The parameter canceled indicates if the quick open widget was closed with an entry being run or not.\n\t */\n\tonClose(canceled: boolean): void {\n\t\treturn;\n\t}\n\n\t/**\n\t * Allows to return a label that will be placed to the side of the results from this handler or null if none.\n\t */\n\tgetGroupLabel(): string | null {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Allows to return a label that will be used when there are no results found\n\t */\n\tgetEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noResultsMatching', \"No results matching\");\n\t\t}\n\t\treturn nls.localize('noResultsFound2', \"No results found\");\n\t}\n}\n\nexport interface QuickOpenHandlerHelpEntry {\n\tprefix: string;\n\tdescription: string;\n\tneedsEditor: boolean;\n}\n\n/**\n * A lightweight descriptor of a quick open handler.\n */\nexport class QuickOpenHandlerDescriptor {\n\tprefix: string;\n\tdescription: string;\n\tcontextKey?: string;\n\thelpEntries: QuickOpenHandlerHelpEntry[];\n\tinstantProgress: boolean;\n\n\tprivate id: string;\n\tprivate ctor: IConstructorSignature0<QuickOpenHandler>;\n\n\tconstructor(ctor: IConstructorSignature0<QuickOpenHandler>, id: string, prefix: string, contextKey: string | undefined, description: string, instantProgress?: boolean);\n\tconstructor(ctor: IConstructorSignature0<QuickOpenHandler>, id: string, prefix: string, contextKey: string | undefined, helpEntries: QuickOpenHandlerHelpEntry[], instantProgress?: boolean);\n\tconstructor(ctor: IConstructorSignature0<QuickOpenHandler>, id: string, prefix: string, contextKey: string | undefined, param: any, instantProgress: boolean = false) {\n\t\tthis.ctor = ctor;\n\t\tthis.id = id;\n\t\tthis.prefix = prefix;\n\t\tthis.contextKey = contextKey;\n\t\tthis.instantProgress = instantProgress;\n\n\t\tif (types.isString(param)) {\n\t\t\tthis.description = param;\n\t\t} else {\n\t\t\tthis.helpEntries = param;\n\t\t}\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tinstantiate(instantiationService: IInstantiationService): QuickOpenHandler {\n\t\treturn instantiationService.createInstance(this.ctor);\n\t}\n}\n\nexport const Extensions = {\n\tQuickopen: 'workbench.contributions.quickopen'\n};\n\nexport interface IQuickOpenRegistry {\n\n\t/**\n\t * Registers a quick open handler to the platform.\n\t */\n\tregisterQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void;\n\n\t/**\n\t * Registers a default quick open handler to fallback to.\n\t */\n\tregisterDefaultQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void;\n\n\t/**\n\t * Get all registered quick open handlers\n\t */\n\tgetQuickOpenHandlers(): QuickOpenHandlerDescriptor[];\n\n\t/**\n\t * Get a specific quick open handler for a given prefix.\n\t */\n\tgetQuickOpenHandler(prefix: string): QuickOpenHandlerDescriptor | null;\n\n\t/**\n\t * Returns the default quick open handler.\n\t */\n\tgetDefaultQuickOpenHandler(): QuickOpenHandlerDescriptor;\n}\n\nclass QuickOpenRegistry implements IQuickOpenRegistry {\n\tprivate handlers: QuickOpenHandlerDescriptor[] = [];\n\tprivate defaultHandler: QuickOpenHandlerDescriptor;\n\n\tregisterQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void {\n\t\tthis.handlers.push(descriptor);\n\n\t\t// sort the handlers by decreasing prefix length, such that longer\n\t\t// prefixes take priority: 'ext' vs 'ext install' - the latter should win\n\t\tthis.handlers.sort((h1, h2) => h2.prefix.length - h1.prefix.length);\n\t}\n\n\tregisterDefaultQuickOpenHandler(descriptor: QuickOpenHandlerDescriptor): void {\n\t\tthis.defaultHandler = descriptor;\n\t}\n\n\tgetQuickOpenHandlers(): QuickOpenHandlerDescriptor[] {\n\t\treturn this.handlers.slice(0);\n\t}\n\n\tgetQuickOpenHandler(text: string): QuickOpenHandlerDescriptor | null {\n\t\treturn text ? (arrays.first<QuickOpenHandlerDescriptor>(this.handlers, h => strings.startsWith(text, h.prefix)) || null) : null;\n\t}\n\n\tgetDefaultQuickOpenHandler(): QuickOpenHandlerDescriptor {\n\t\treturn this.defaultHandler;\n\t}\n}\n\nRegistry.add(Extensions.Quickopen, new QuickOpenRegistry());\n\nexport interface IEditorQuickOpenEntry {\n\n\t/**\n\t * The editor input used for this entry when opening.\n\t */\n\tgetInput(): IResourceInput | IEditorInput | null;\n\n\t/**\n\t * The editor options used for this entry when opening.\n\t */\n\tgetOptions(): IEditorOptions | null;\n}\n\n/**\n * A subclass of quick open entry that will open an editor with input and options when running.\n */\nexport class EditorQuickOpenEntry extends QuickOpenEntry implements IEditorQuickOpenEntry {\n\n\tconstructor(private _editorService: IEditorService) {\n\t\tsuper();\n\t}\n\n\tget editorService() {\n\t\treturn this._editorService;\n\t}\n\n\tgetInput(): IResourceInput | IEditorInput | null {\n\t\treturn null;\n\t}\n\n\tgetOptions(): IEditorOptions | null {\n\t\treturn null;\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tconst hideWidget = (mode === Mode.OPEN);\n\n\t\tif (mode === Mode.OPEN || mode === Mode.OPEN_IN_BACKGROUND) {\n\t\t\tconst sideBySide = context.keymods.ctrlCmd;\n\n\t\t\tlet openOptions: IEditorOptions | undefined;\n\t\t\tif (mode === Mode.OPEN_IN_BACKGROUND) {\n\t\t\t\topenOptions = { pinned: true, preserveFocus: true };\n\t\t\t} else if (context.keymods.alt) {\n\t\t\t\topenOptions = { pinned: true };\n\t\t\t}\n\n\t\t\tconst input = this.getInput();\n\t\t\tif (input instanceof EditorInput) {\n\t\t\t\tlet opts = this.getOptions();\n\t\t\t\tif (opts) {\n\t\t\t\t\topts = objects.mixin(opts, openOptions, true);\n\t\t\t\t} else if (openOptions) {\n\t\t\t\t\topts = EditorOptions.create(openOptions);\n\t\t\t\t}\n\n\t\t\t\tthis.editorService.openEditor(input, types.withNullAsUndefined(opts), sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t\t\t} else {\n\t\t\t\tconst resourceInput = <IResourceInput>input;\n\n\t\t\t\tif (openOptions) {\n\t\t\t\t\tresourceInput.options = objects.assign(resourceInput.options || Object.create(null), openOptions);\n\t\t\t\t}\n\n\t\t\t\tthis.editorService.openEditor(resourceInput, sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t\t\t}\n\t\t}\n\n\t\treturn hideWidget;\n\t}\n}\n\n/**\n * A subclass of quick open entry group that provides access to editor input and options.\n */\nexport class EditorQuickOpenEntryGroup extends QuickOpenEntryGroup implements IEditorQuickOpenEntry {\n\n\tgetInput(): IEditorInput | IResourceInput | null {\n\t\treturn null;\n\t}\n\n\tgetOptions(): IEditorOptions | null {\n\t\treturn null;\n\t}\n}\n\nexport class QuickOpenAction extends Action {\n\tprivate prefix: string;\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\tprefix: string,\n\t\t@IQuickOpenService private readonly quickOpenService: IQuickOpenService\n\t) {\n\t\tsuper(id, label);\n\n\t\tthis.prefix = prefix;\n\t\tthis.enabled = !!this.quickOpenService;\n\t}\n\n\trun(context?: any): Promise<void> {\n\n\t\t// Show with prefix\n\t\tthis.quickOpenService.show(this.prefix);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}