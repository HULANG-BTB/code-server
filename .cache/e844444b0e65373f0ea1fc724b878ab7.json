{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/goToDefinition.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/goToDefinition/goToDefinition.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/modes\"], function (require, exports, arrays_1, cancellation_1, errors_1, editorExtensions_1, modes_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getDefinitions(model, position, registry, provide) {\n        const provider = registry.ordered(model);\n        // get results\n        const promises = provider.map((provider) => {\n            return Promise.resolve(provide(provider, model, position)).then(undefined, err => {\n                errors_1.onUnexpectedExternalError(err);\n                return null;\n            });\n        });\n        return Promise.all(promises)\n            .then(arrays_1.flatten)\n            .then(arrays_1.coalesce);\n    }\n    function getDefinitionsAtPosition(model, position, token) {\n        return getDefinitions(model, position, modes_1.DefinitionProviderRegistry, (provider, model, position) => {\n            return provider.provideDefinition(model, position, token);\n        });\n    }\n    exports.getDefinitionsAtPosition = getDefinitionsAtPosition;\n    function getDeclarationsAtPosition(model, position, token) {\n        return getDefinitions(model, position, modes_1.DeclarationProviderRegistry, (provider, model, position) => {\n            return provider.provideDeclaration(model, position, token);\n        });\n    }\n    exports.getDeclarationsAtPosition = getDeclarationsAtPosition;\n    function getImplementationsAtPosition(model, position, token) {\n        return getDefinitions(model, position, modes_1.ImplementationProviderRegistry, (provider, model, position) => {\n            return provider.provideImplementation(model, position, token);\n        });\n    }\n    exports.getImplementationsAtPosition = getImplementationsAtPosition;\n    function getTypeDefinitionsAtPosition(model, position, token) {\n        return getDefinitions(model, position, modes_1.TypeDefinitionProviderRegistry, (provider, model, position) => {\n            return provider.provideTypeDefinition(model, position, token);\n        });\n    }\n    exports.getTypeDefinitionsAtPosition = getTypeDefinitionsAtPosition;\n    editorExtensions_1.registerDefaultLanguageCommand('_executeDefinitionProvider', (model, position) => getDefinitionsAtPosition(model, position, cancellation_1.CancellationToken.None));\n    editorExtensions_1.registerDefaultLanguageCommand('_executeDeclarationProvider', (model, position) => getDeclarationsAtPosition(model, position, cancellation_1.CancellationToken.None));\n    editorExtensions_1.registerDefaultLanguageCommand('_executeImplementationProvider', (model, position) => getImplementationsAtPosition(model, position, cancellation_1.CancellationToken.None));\n    editorExtensions_1.registerDefaultLanguageCommand('_executeTypeDefinitionProvider', (model, position) => getTypeDefinitionsAtPosition(model, position, cancellation_1.CancellationToken.None));\n});\n",null]}