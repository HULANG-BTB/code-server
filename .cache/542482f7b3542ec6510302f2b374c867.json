{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar untitledEditorInput_1 = require(\"vs/workbench/common/editor/untitledEditorInput\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar event_1 = require(\"vs/base/common/event\");\nvar map_1 = require(\"vs/base/common/map\");\nvar network_1 = require(\"vs/base/common/network\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar resources_1 = require(\"vs/base/common/resources\");\nexports.IUntitledEditorService = instantiation_1.createDecorator('untitledEditorService');\nvar UntitledEditorService = /** @class */ (function (_super) {\n    tslib_1.__extends(UntitledEditorService, _super);\n    function UntitledEditorService(instantiationService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.configurationService = configurationService;\n        _this.mapResourceToInput = new map_1.ResourceMap();\n        _this.mapResourceToAssociatedFilePath = new map_1.ResourceMap();\n        _this._onDidChangeContent = _this._register(new event_1.Emitter());\n        _this._onDidChangeDirty = _this._register(new event_1.Emitter());\n        _this._onDidChangeEncoding = _this._register(new event_1.Emitter());\n        _this._onDidDisposeModel = _this._register(new event_1.Emitter());\n        return _this;\n    }\n    Object.defineProperty(UntitledEditorService.prototype, \"onDidChangeContent\", {\n        get: function () { return this._onDidChangeContent.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorService.prototype, \"onDidChangeDirty\", {\n        get: function () { return this._onDidChangeDirty.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorService.prototype, \"onDidChangeEncoding\", {\n        get: function () { return this._onDidChangeEncoding.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(UntitledEditorService.prototype, \"onDidDisposeModel\", {\n        get: function () { return this._onDidDisposeModel.event; },\n        enumerable: true,\n        configurable: true\n    });\n    UntitledEditorService.prototype.get = function (resource) {\n        return this.mapResourceToInput.get(resource);\n    };\n    UntitledEditorService.prototype.getAll = function (resources) {\n        var _this = this;\n        if (resources) {\n            return arrays.coalesce(resources.map(function (r) { return _this.get(r); }));\n        }\n        return this.mapResourceToInput.values();\n    };\n    UntitledEditorService.prototype.exists = function (resource) {\n        return this.mapResourceToInput.has(resource);\n    };\n    UntitledEditorService.prototype.revertAll = function (resources, force) {\n        var reverted = [];\n        var untitledInputs = this.getAll(resources);\n        untitledInputs.forEach(function (input) {\n            if (input) {\n                input.revert();\n                input.dispose();\n                reverted.push(input.getResource());\n            }\n        });\n        return reverted;\n    };\n    UntitledEditorService.prototype.isDirty = function (resource) {\n        var input = this.get(resource);\n        return input ? input.isDirty() : false;\n    };\n    UntitledEditorService.prototype.getDirty = function (resources) {\n        var _this = this;\n        var inputs;\n        if (resources) {\n            inputs = arrays.coalesce(resources.map(function (r) { return _this.get(r); }));\n        }\n        else {\n            inputs = this.mapResourceToInput.values();\n        }\n        return inputs\n            .filter(function (i) { return i.isDirty(); })\n            .map(function (i) { return i.getResource(); });\n    };\n    UntitledEditorService.prototype.loadOrCreate = function (options) {\n        if (options === void 0) { options = Object.create(null); }\n        return this.createOrGet(options.resource, options.modeId, options.initialValue, options.encoding, options.useResourcePath).resolve();\n    };\n    UntitledEditorService.prototype.createOrGet = function (resource, modeId, initialValue, encoding, hasAssociatedFilePath) {\n        if (hasAssociatedFilePath === void 0) { hasAssociatedFilePath = false; }\n        if (resource) {\n            // Massage resource if it comes with a file:// scheme\n            if (resource.scheme === network_1.Schemas.file) {\n                hasAssociatedFilePath = true;\n                resource = resource.with({ scheme: network_1.Schemas.untitled }); // ensure we have the right scheme\n            }\n            if (hasAssociatedFilePath) {\n                this.mapResourceToAssociatedFilePath.set(resource, true); // remember for future lookups\n            }\n        }\n        // Return existing instance if asked for it\n        if (resource && this.mapResourceToInput.has(resource)) {\n            return this.mapResourceToInput.get(resource);\n        }\n        // Create new otherwise\n        return this.doCreate(resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n    };\n    UntitledEditorService.prototype.doCreate = function (resource, hasAssociatedFilePath, modeId, initialValue, encoding) {\n        var _this = this;\n        if (!resource) {\n            // Create new taking a resource URI that is not already taken\n            var counter = this.mapResourceToInput.size + 1;\n            do {\n                resource = uri_1.URI.from({ scheme: network_1.Schemas.untitled, path: \"Untitled-\" + counter });\n                counter++;\n            } while (this.mapResourceToInput.has(resource));\n        }\n        // Look up default language from settings if any\n        if (!modeId && !hasAssociatedFilePath) {\n            var configuration = this.configurationService.getValue();\n            if (configuration.files && configuration.files.defaultLanguage) {\n                modeId = configuration.files.defaultLanguage;\n            }\n        }\n        var input = this.instantiationService.createInstance(untitledEditorInput_1.UntitledEditorInput, resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n        var contentListener = input.onDidModelChangeContent(function () {\n            _this._onDidChangeContent.fire(resource);\n        });\n        var dirtyListener = input.onDidChangeDirty(function () {\n            _this._onDidChangeDirty.fire(resource);\n        });\n        var encodingListener = input.onDidModelChangeEncoding(function () {\n            _this._onDidChangeEncoding.fire(resource);\n        });\n        var disposeListener = input.onDispose(function () {\n            _this._onDidDisposeModel.fire(resource);\n        });\n        // Remove from cache on dispose\n        var onceDispose = event_1.Event.once(input.onDispose);\n        onceDispose(function () {\n            _this.mapResourceToInput.delete(input.getResource());\n            _this.mapResourceToAssociatedFilePath.delete(input.getResource());\n            contentListener.dispose();\n            dirtyListener.dispose();\n            encodingListener.dispose();\n            disposeListener.dispose();\n        });\n        // Add to cache\n        this.mapResourceToInput.set(resource, input);\n        return input;\n    };\n    UntitledEditorService.prototype.hasAssociatedFilePath = function (resource) {\n        return this.mapResourceToAssociatedFilePath.has(resource);\n    };\n    UntitledEditorService.prototype.suggestFileName = function (resource) {\n        var input = this.get(resource);\n        return input ? input.suggestFileName() : resources_1.basename(resource);\n    };\n    UntitledEditorService.prototype.getEncoding = function (resource) {\n        var input = this.get(resource);\n        return input ? input.getEncoding() : undefined;\n    };\n    UntitledEditorService = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService),\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], UntitledEditorService);\n    return UntitledEditorService;\n}(lifecycle_1.Disposable));\nexports.UntitledEditorService = UntitledEditorService;\nextensions_1.registerSingleton(exports.IUntitledEditorService, UntitledEditorService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/untitled/common/untitledEditorService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,0CAAyC;AACzC,gFAAwG;AACxG,8CAAgD;AAChD,sFAAqF;AAErF,gFAAuF;AACvF,8CAAsD;AACtD,0CAAiD;AAEjD,kDAAiD;AACjD,sDAAsD;AACtD,0EAAgF;AAChF,sDAAoD;AAEvC,QAAA,sBAAsB,GAAG,+BAAe,CAAyB,uBAAuB,CAAC,CAAC;AAwFvG;IAA2C,iDAAU;IAmBpD,+BACyC,oBAA2C,EAC3C,oBAA2C;QAFpF,YAIC,iBAAO,SACP;QAJwC,0BAAoB,GAApB,oBAAoB,CAAuB;QAC3C,0BAAoB,GAApB,oBAAoB,CAAuB;QAjB5E,wBAAkB,GAAG,IAAI,iBAAW,EAAuB,CAAC;QAC5D,qCAA+B,GAAG,IAAI,iBAAW,EAAW,CAAC;QAEpD,yBAAmB,GAAiB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAO,CAAC,CAAC;QAGvE,uBAAiB,GAAiB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAO,CAAC,CAAC;QAGrE,0BAAoB,GAAiB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAO,CAAC,CAAC;QAGxE,wBAAkB,GAAiB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAO,CAAC,CAAC;;IAQvF,CAAC;IAhBD,sBAAI,qDAAkB;aAAtB,cAAuC,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAG/E,sBAAI,mDAAgB;aAApB,cAAqC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAG3E,sBAAI,sDAAmB;aAAvB,cAAwC,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGjF,sBAAI,oDAAiB;aAArB,cAAsC,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IASnE,mCAAG,GAAb,UAAc,QAAa;QAC1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAES,sCAAM,GAAhB,UAAiB,SAAiB;QAAlC,iBAMC;QALA,IAAI,SAAS,EAAE;YACd,OAAO,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,CAAC,CAAC;SACxD;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;IACzC,CAAC;IAED,sCAAM,GAAN,UAAO,QAAa;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,yCAAS,GAAT,UAAU,SAAiB,EAAE,KAAe;QAC3C,IAAM,QAAQ,GAAU,EAAE,CAAC;QAE3B,IAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9C,cAAc,CAAC,OAAO,CAAC,UAAA,KAAK;YAC3B,IAAI,KAAK,EAAE;gBACV,KAAK,CAAC,MAAM,EAAE,CAAC;gBACf,KAAK,CAAC,OAAO,EAAE,CAAC;gBAEhB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;aACnC;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IACjB,CAAC;IAED,uCAAO,GAAP,UAAQ,QAAa;QACpB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEjC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IACxC,CAAC;IAED,wCAAQ,GAAR,UAAS,SAAiB;QAA1B,iBAWC;QAVA,IAAI,MAA6B,CAAC;QAClC,IAAI,SAAS,EAAE;YACd,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,CAAC,CAAC;SAC1D;aAAM;YACN,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;SAC1C;QAED,OAAO,MAAM;aACX,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,EAAE,EAAX,CAAW,CAAC;aACxB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;IAC7B,CAAC;IAED,4CAAY,GAAZ,UAAa,OAAwD;QAAxD,wBAAA,EAAA,UAAqC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QACpE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;IACtI,CAAC;IAED,2CAAW,GAAX,UAAY,QAAc,EAAE,MAAe,EAAE,YAAqB,EAAE,QAAiB,EAAE,qBAAsC;QAAtC,sCAAA,EAAA,6BAAsC;QAE5H,IAAI,QAAQ,EAAE;YACb,qDAAqD;YACrD,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACrC,qBAAqB,GAAG,IAAI,CAAC;gBAC7B,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,kCAAkC;aAC1F;YAED,IAAI,qBAAqB,EAAE;gBAC1B,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,8BAA8B;aACxF;SACD;QAED,2CAA2C;QAC3C,IAAI,QAAQ,IAAI,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACtD,OAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;SAC9C;QAED,uBAAuB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,qBAAqB,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;IACvF,CAAC;IAEO,wCAAQ,GAAhB,UAAiB,QAAc,EAAE,qBAA+B,EAAE,MAAe,EAAE,YAAqB,EAAE,QAAiB;QAA3H,iBAoDC;QAnDA,IAAI,CAAC,QAAQ,EAAE;YAEd,6DAA6D;YAC7D,IAAI,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAG,CAAC,CAAC;YAC/C,GAAG;gBACF,QAAQ,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,QAAQ,EAAE,IAAI,EAAE,cAAY,OAAS,EAAE,CAAC,CAAC;gBAC/E,OAAO,EAAE,CAAC;aACV,QAAQ,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;SAChD;QAED,gDAAgD;QAChD,IAAI,CAAC,MAAM,IAAI,CAAC,qBAAqB,EAAE;YACtC,IAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAuB,CAAC;YAChF,IAAI,aAAa,CAAC,KAAK,IAAI,aAAa,CAAC,KAAK,CAAC,eAAe,EAAE;gBAC/D,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;aAC7C;SACD;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,yCAAmB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,MAAM,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QAE7I,IAAM,eAAe,GAAG,KAAK,CAAC,uBAAuB,CAAC;YACrD,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAM,aAAa,GAAG,KAAK,CAAC,gBAAgB,CAAC;YAC5C,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,IAAM,gBAAgB,GAAG,KAAK,CAAC,wBAAwB,CAAC;YACvD,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC;YACvC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAS,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,IAAM,WAAW,GAAG,aAAK,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAChD,WAAW,CAAC;YACX,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YACpD,KAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YACjE,eAAe,CAAC,OAAO,EAAE,CAAC;YAC1B,aAAa,CAAC,OAAO,EAAE,CAAC;YACxB,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAC3B,eAAe,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,eAAe;QACf,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAE7C,OAAO,KAAK,CAAC;IACd,CAAC;IAED,qDAAqB,GAArB,UAAsB,QAAa;QAClC,OAAO,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,+CAAe,GAAf,UAAgB,QAAa;QAC5B,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEjC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,oBAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,2CAAW,GAAX,UAAY,QAAa;QACxB,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAEjC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAChD,CAAC;IA5KW,qBAAqB;QAoB/B,mBAAA,qCAAqB,CAAA;QACrB,mBAAA,qCAAqB,CAAA;OArBX,qBAAqB,CA6KjC;IAAD,4BAAC;CAAA,AA7KD,CAA2C,sBAAU,GA6KpD;AA7KY,sDAAqB;AA+KlC,8BAAiB,CAAC,8BAAsB,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport * as arrays from 'vs/base/common/arrays';\nimport { UntitledEditorInput } from 'vs/workbench/common/editor/untitledEditorInput';\nimport { IFilesConfiguration } from 'vs/platform/files/common/files';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { UntitledEditorModel } from 'vs/workbench/common/editor/untitledEditorModel';\nimport { Schemas } from 'vs/base/common/network';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { basename } from 'vs/base/common/resources';\n\nexport const IUntitledEditorService = createDecorator<IUntitledEditorService>('untitledEditorService');\n\nexport interface IModelLoadOrCreateOptions {\n\tresource?: URI;\n\tmodeId?: string;\n\tinitialValue?: string;\n\tencoding?: string;\n\tuseResourcePath?: boolean;\n}\n\nexport interface IUntitledEditorService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Events for when untitled editors content changes (e.g. any keystroke).\n\t */\n\tonDidChangeContent: Event<URI>;\n\n\t/**\n\t * Events for when untitled editors change (e.g. getting dirty, saved or reverted).\n\t */\n\tonDidChangeDirty: Event<URI>;\n\n\t/**\n\t * Events for when untitled editor encodings change.\n\t */\n\tonDidChangeEncoding: Event<URI>;\n\n\t/**\n\t * Events for when untitled editors are disposed.\n\t */\n\tonDidDisposeModel: Event<URI>;\n\n\t/**\n\t * Returns if an untitled resource with the given URI exists.\n\t */\n\texists(resource: URI): boolean;\n\n\t/**\n\t * Returns dirty untitled editors as resource URIs.\n\t */\n\tgetDirty(resources?: URI[]): URI[];\n\n\t/**\n\t * Returns true if the provided resource is dirty.\n\t */\n\tisDirty(resource: URI): boolean;\n\n\t/**\n\t * Reverts the untitled resources if found.\n\t */\n\trevertAll(resources?: URI[]): URI[];\n\n\t/**\n\t * Creates a new untitled input with the optional resource URI or returns an existing one\n\t * if the provided resource exists already as untitled input.\n\t *\n\t * It is valid to pass in a file resource. In that case the path will be used as identifier.\n\t * The use case is to be able to create a new file with a specific path with VSCode.\n\t */\n\tcreateOrGet(resource?: URI, modeId?: string, initialValue?: string, encoding?: string): UntitledEditorInput;\n\n\t/**\n\t * Creates a new untitled model with the optional resource URI or returns an existing one\n\t * if the provided resource exists already as untitled model.\n\t *\n\t * It is valid to pass in a file resource. In that case the path will be used as identifier.\n\t * The use case is to be able to create a new file with a specific path with VSCode.\n\t */\n\tloadOrCreate(options: IModelLoadOrCreateOptions): Promise<UntitledEditorModel>;\n\n\t/**\n\t * A check to find out if a untitled resource has a file path associated or not.\n\t */\n\thasAssociatedFilePath(resource: URI): boolean;\n\n\t/**\n\t * Suggests a filename for the given untitled resource if it is known.\n\t */\n\tsuggestFileName(resource: URI): string;\n\n\t/**\n\t * Get the configured encoding for the given untitled resource if any.\n\t */\n\tgetEncoding(resource: URI): string | undefined;\n}\n\nexport class UntitledEditorService extends Disposable implements IUntitledEditorService {\n\n\t_serviceBrand: any;\n\n\tprivate mapResourceToInput = new ResourceMap<UntitledEditorInput>();\n\tprivate mapResourceToAssociatedFilePath = new ResourceMap<boolean>();\n\n\tprivate readonly _onDidChangeContent: Emitter<URI> = this._register(new Emitter<URI>());\n\tget onDidChangeContent(): Event<URI> { return this._onDidChangeContent.event; }\n\n\tprivate readonly _onDidChangeDirty: Emitter<URI> = this._register(new Emitter<URI>());\n\tget onDidChangeDirty(): Event<URI> { return this._onDidChangeDirty.event; }\n\n\tprivate readonly _onDidChangeEncoding: Emitter<URI> = this._register(new Emitter<URI>());\n\tget onDidChangeEncoding(): Event<URI> { return this._onDidChangeEncoding.event; }\n\n\tprivate readonly _onDidDisposeModel: Emitter<URI> = this._register(new Emitter<URI>());\n\tget onDidDisposeModel(): Event<URI> { return this._onDidDisposeModel.event; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected get(resource: URI): UntitledEditorInput | undefined {\n\t\treturn this.mapResourceToInput.get(resource);\n\t}\n\n\tprotected getAll(resources?: URI[]): UntitledEditorInput[] {\n\t\tif (resources) {\n\t\t\treturn arrays.coalesce(resources.map(r => this.get(r)));\n\t\t}\n\n\t\treturn this.mapResourceToInput.values();\n\t}\n\n\texists(resource: URI): boolean {\n\t\treturn this.mapResourceToInput.has(resource);\n\t}\n\n\trevertAll(resources?: URI[], force?: boolean): URI[] {\n\t\tconst reverted: URI[] = [];\n\n\t\tconst untitledInputs = this.getAll(resources);\n\t\tuntitledInputs.forEach(input => {\n\t\t\tif (input) {\n\t\t\t\tinput.revert();\n\t\t\t\tinput.dispose();\n\n\t\t\t\treverted.push(input.getResource());\n\t\t\t}\n\t\t});\n\n\t\treturn reverted;\n\t}\n\n\tisDirty(resource: URI): boolean {\n\t\tconst input = this.get(resource);\n\n\t\treturn input ? input.isDirty() : false;\n\t}\n\n\tgetDirty(resources?: URI[]): URI[] {\n\t\tlet inputs: UntitledEditorInput[];\n\t\tif (resources) {\n\t\t\tinputs = arrays.coalesce(resources.map(r => this.get(r)));\n\t\t} else {\n\t\t\tinputs = this.mapResourceToInput.values();\n\t\t}\n\n\t\treturn inputs\n\t\t\t.filter(i => i.isDirty())\n\t\t\t.map(i => i.getResource());\n\t}\n\n\tloadOrCreate(options: IModelLoadOrCreateOptions = Object.create(null)): Promise<UntitledEditorModel> {\n\t\treturn this.createOrGet(options.resource, options.modeId, options.initialValue, options.encoding, options.useResourcePath).resolve();\n\t}\n\n\tcreateOrGet(resource?: URI, modeId?: string, initialValue?: string, encoding?: string, hasAssociatedFilePath: boolean = false): UntitledEditorInput {\n\n\t\tif (resource) {\n\t\t\t// Massage resource if it comes with a file:// scheme\n\t\t\tif (resource.scheme === Schemas.file) {\n\t\t\t\thasAssociatedFilePath = true;\n\t\t\t\tresource = resource.with({ scheme: Schemas.untitled }); // ensure we have the right scheme\n\t\t\t}\n\n\t\t\tif (hasAssociatedFilePath) {\n\t\t\t\tthis.mapResourceToAssociatedFilePath.set(resource, true); // remember for future lookups\n\t\t\t}\n\t\t}\n\n\t\t// Return existing instance if asked for it\n\t\tif (resource && this.mapResourceToInput.has(resource)) {\n\t\t\treturn this.mapResourceToInput.get(resource)!;\n\t\t}\n\n\t\t// Create new otherwise\n\t\treturn this.doCreate(resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n\t}\n\n\tprivate doCreate(resource?: URI, hasAssociatedFilePath?: boolean, modeId?: string, initialValue?: string, encoding?: string): UntitledEditorInput {\n\t\tif (!resource) {\n\n\t\t\t// Create new taking a resource URI that is not already taken\n\t\t\tlet counter = this.mapResourceToInput.size + 1;\n\t\t\tdo {\n\t\t\t\tresource = URI.from({ scheme: Schemas.untitled, path: `Untitled-${counter}` });\n\t\t\t\tcounter++;\n\t\t\t} while (this.mapResourceToInput.has(resource));\n\t\t}\n\n\t\t// Look up default language from settings if any\n\t\tif (!modeId && !hasAssociatedFilePath) {\n\t\t\tconst configuration = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\tif (configuration.files && configuration.files.defaultLanguage) {\n\t\t\t\tmodeId = configuration.files.defaultLanguage;\n\t\t\t}\n\t\t}\n\n\t\tconst input = this.instantiationService.createInstance(UntitledEditorInput, resource, hasAssociatedFilePath, modeId, initialValue, encoding);\n\n\t\tconst contentListener = input.onDidModelChangeContent(() => {\n\t\t\tthis._onDidChangeContent.fire(resource!);\n\t\t});\n\n\t\tconst dirtyListener = input.onDidChangeDirty(() => {\n\t\t\tthis._onDidChangeDirty.fire(resource!);\n\t\t});\n\n\t\tconst encodingListener = input.onDidModelChangeEncoding(() => {\n\t\t\tthis._onDidChangeEncoding.fire(resource!);\n\t\t});\n\n\t\tconst disposeListener = input.onDispose(() => {\n\t\t\tthis._onDidDisposeModel.fire(resource!);\n\t\t});\n\n\t\t// Remove from cache on dispose\n\t\tconst onceDispose = Event.once(input.onDispose);\n\t\tonceDispose(() => {\n\t\t\tthis.mapResourceToInput.delete(input.getResource());\n\t\t\tthis.mapResourceToAssociatedFilePath.delete(input.getResource());\n\t\t\tcontentListener.dispose();\n\t\t\tdirtyListener.dispose();\n\t\t\tencodingListener.dispose();\n\t\t\tdisposeListener.dispose();\n\t\t});\n\n\t\t// Add to cache\n\t\tthis.mapResourceToInput.set(resource, input);\n\n\t\treturn input;\n\t}\n\n\thasAssociatedFilePath(resource: URI): boolean {\n\t\treturn this.mapResourceToAssociatedFilePath.has(resource);\n\t}\n\n\tsuggestFileName(resource: URI): string {\n\t\tconst input = this.get(resource);\n\n\t\treturn input ? input.suggestFileName() : basename(resource);\n\t}\n\n\tgetEncoding(resource: URI): string | undefined {\n\t\tconst input = this.get(resource);\n\n\t\treturn input ? input.getEncoding() : undefined;\n\t}\n}\n\nregisterSingleton(IUntitledEditorService, UntitledEditorService, true);"]}]}