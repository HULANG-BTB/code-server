{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findController.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/async\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/base/common/strings\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorContextKeys\", \"vs/editor/contrib/find/findModel\", \"vs/editor/contrib/find/findOptionsWidget\", \"vs/editor/contrib/find/findState\", \"vs/editor/contrib/find/findWidget\", \"vs/platform/actions/common/actions\", \"vs/platform/clipboard/common/clipboardService\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/keybinding/common/keybinding\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/storage/common/storage\", \"vs/platform/theme/common/themeService\"], function (require, exports, nls, async_1, keyCodes_1, lifecycle_1, strings, editorExtensions_1, editorContextKeys_1, findModel_1, findOptionsWidget_1, findState_1, findWidget_1, actions_1, clipboardService_1, contextkey_1, contextView_1, instantiation_1, keybinding_1, keybindingsRegistry_1, storage_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const SEARCH_STRING_MAX_LENGTH = 524288;\n    function getSelectionSearchString(editor) {\n        if (!editor.hasModel()) {\n            return null;\n        }\n        const selection = editor.getSelection();\n        // if selection spans multiple lines, default search string to empty\n        if (selection.startLineNumber === selection.endLineNumber) {\n            if (selection.isEmpty()) {\n                let wordAtPosition = editor.getModel().getWordAtPosition(selection.getStartPosition());\n                if (wordAtPosition) {\n                    return wordAtPosition.word;\n                }\n            }\n            else {\n                if (editor.getModel().getValueLengthInRange(selection) < SEARCH_STRING_MAX_LENGTH) {\n                    return editor.getModel().getValueInRange(selection);\n                }\n            }\n        }\n        return null;\n    }\n    exports.getSelectionSearchString = getSelectionSearchString;\n    var FindStartFocusAction;\n    (function (FindStartFocusAction) {\n        FindStartFocusAction[FindStartFocusAction[\"NoFocusChange\"] = 0] = \"NoFocusChange\";\n        FindStartFocusAction[FindStartFocusAction[\"FocusFindInput\"] = 1] = \"FocusFindInput\";\n        FindStartFocusAction[FindStartFocusAction[\"FocusReplaceInput\"] = 2] = \"FocusReplaceInput\";\n    })(FindStartFocusAction = exports.FindStartFocusAction || (exports.FindStartFocusAction = {}));\n    let CommonFindController = class CommonFindController extends lifecycle_1.Disposable {\n        constructor(editor, contextKeyService, storageService, clipboardService) {\n            super();\n            this._editor = editor;\n            this._findWidgetVisible = findModel_1.CONTEXT_FIND_WIDGET_VISIBLE.bindTo(contextKeyService);\n            this._contextKeyService = contextKeyService;\n            this._storageService = storageService;\n            this._clipboardService = clipboardService;\n            this._updateHistoryDelayer = new async_1.Delayer(500);\n            this._state = this._register(new findState_1.FindReplaceState());\n            this.loadQueryState();\n            this._register(this._state.onFindReplaceStateChange((e) => this._onStateChanged(e)));\n            this._model = null;\n            this._register(this._editor.onDidChangeModel(() => {\n                let shouldRestartFind = (this._editor.getModel() && this._state.isRevealed);\n                this.disposeModel();\n                this._state.change({\n                    searchScope: null,\n                    matchCase: this._storageService.getBoolean('editor.matchCase', storage_1.StorageScope.WORKSPACE, false),\n                    wholeWord: this._storageService.getBoolean('editor.wholeWord', storage_1.StorageScope.WORKSPACE, false),\n                    isRegex: this._storageService.getBoolean('editor.isRegex', storage_1.StorageScope.WORKSPACE, false)\n                }, false);\n                if (shouldRestartFind) {\n                    this._start({\n                        forceRevealReplace: false,\n                        seedSearchStringFromSelection: false && this._editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                        seedSearchStringFromGlobalClipboard: false,\n                        shouldFocus: FindStartFocusAction.NoFocusChange,\n                        shouldAnimate: false,\n                        updateSearchScope: false\n                    });\n                }\n            }));\n        }\n        static get(editor) {\n            return editor.getContribution(CommonFindController.ID);\n        }\n        dispose() {\n            this.disposeModel();\n            super.dispose();\n        }\n        disposeModel() {\n            if (this._model) {\n                this._model.dispose();\n                this._model = null;\n            }\n        }\n        getId() {\n            return CommonFindController.ID;\n        }\n        _onStateChanged(e) {\n            this.saveQueryState(e);\n            if (e.isRevealed) {\n                if (this._state.isRevealed) {\n                    this._findWidgetVisible.set(true);\n                }\n                else {\n                    this._findWidgetVisible.reset();\n                    this.disposeModel();\n                }\n            }\n            if (e.searchString) {\n                this.setGlobalBufferTerm(this._state.searchString);\n            }\n        }\n        saveQueryState(e) {\n            if (e.isRegex) {\n                this._storageService.store('editor.isRegex', this._state.actualIsRegex, storage_1.StorageScope.WORKSPACE);\n            }\n            if (e.wholeWord) {\n                this._storageService.store('editor.wholeWord', this._state.actualWholeWord, storage_1.StorageScope.WORKSPACE);\n            }\n            if (e.matchCase) {\n                this._storageService.store('editor.matchCase', this._state.actualMatchCase, storage_1.StorageScope.WORKSPACE);\n            }\n        }\n        loadQueryState() {\n            this._state.change({\n                matchCase: this._storageService.getBoolean('editor.matchCase', storage_1.StorageScope.WORKSPACE, this._state.matchCase),\n                wholeWord: this._storageService.getBoolean('editor.wholeWord', storage_1.StorageScope.WORKSPACE, this._state.wholeWord),\n                isRegex: this._storageService.getBoolean('editor.isRegex', storage_1.StorageScope.WORKSPACE, this._state.isRegex)\n            }, false);\n        }\n        isFindInputFocused() {\n            return !!findModel_1.CONTEXT_FIND_INPUT_FOCUSED.getValue(this._contextKeyService);\n        }\n        getState() {\n            return this._state;\n        }\n        closeFindWidget() {\n            this._state.change({\n                isRevealed: false,\n                searchScope: null\n            }, false);\n            this._editor.focus();\n        }\n        toggleCaseSensitive() {\n            this._state.change({ matchCase: !this._state.matchCase }, false);\n            if (!this._state.isRevealed) {\n                this.highlightFindOptions();\n            }\n        }\n        toggleWholeWords() {\n            this._state.change({ wholeWord: !this._state.wholeWord }, false);\n            if (!this._state.isRevealed) {\n                this.highlightFindOptions();\n            }\n        }\n        toggleRegex() {\n            this._state.change({ isRegex: !this._state.isRegex }, false);\n            if (!this._state.isRevealed) {\n                this.highlightFindOptions();\n            }\n        }\n        toggleSearchScope() {\n            if (this._state.searchScope) {\n                this._state.change({ searchScope: null }, true);\n            }\n            else {\n                if (this._editor.hasModel()) {\n                    let selection = this._editor.getSelection();\n                    if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n                        selection = selection.setEndPosition(selection.endLineNumber - 1, this._editor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n                    }\n                    if (!selection.isEmpty()) {\n                        this._state.change({ searchScope: selection }, true);\n                    }\n                }\n            }\n        }\n        setSearchString(searchString) {\n            if (this._state.isRegex) {\n                searchString = strings.escapeRegExpCharacters(searchString);\n            }\n            this._state.change({ searchString: searchString }, false);\n        }\n        highlightFindOptions() {\n            // overwritten in subclass\n        }\n        _start(opts) {\n            this.disposeModel();\n            if (!this._editor.hasModel()) {\n                // cannot do anything with an editor that doesn't have a model...\n                return;\n            }\n            let stateChanges = {\n                isRevealed: true\n            };\n            if (opts.seedSearchStringFromSelection) {\n                let selectionSearchString = getSelectionSearchString(this._editor);\n                if (selectionSearchString) {\n                    if (this._state.isRegex) {\n                        stateChanges.searchString = strings.escapeRegExpCharacters(selectionSearchString);\n                    }\n                    else {\n                        stateChanges.searchString = selectionSearchString;\n                    }\n                }\n            }\n            if (!stateChanges.searchString && opts.seedSearchStringFromGlobalClipboard) {\n                let selectionSearchString = this.getGlobalBufferTerm();\n                if (selectionSearchString) {\n                    stateChanges.searchString = selectionSearchString;\n                }\n            }\n            // Overwrite isReplaceRevealed\n            if (opts.forceRevealReplace) {\n                stateChanges.isReplaceRevealed = true;\n            }\n            else if (!this._findWidgetVisible.get()) {\n                stateChanges.isReplaceRevealed = false;\n            }\n            if (opts.updateSearchScope) {\n                let currentSelection = this._editor.getSelection();\n                if (!currentSelection.isEmpty()) {\n                    stateChanges.searchScope = currentSelection;\n                }\n            }\n            this._state.change(stateChanges, false);\n            if (!this._model) {\n                this._model = new findModel_1.FindModelBoundToEditorModel(this._editor, this._state);\n            }\n        }\n        start(opts) {\n            this._start(opts);\n        }\n        moveToNextMatch() {\n            if (this._model) {\n                this._model.moveToNextMatch();\n                return true;\n            }\n            return false;\n        }\n        moveToPrevMatch() {\n            if (this._model) {\n                this._model.moveToPrevMatch();\n                return true;\n            }\n            return false;\n        }\n        replace() {\n            if (this._model) {\n                this._model.replace();\n                return true;\n            }\n            return false;\n        }\n        replaceAll() {\n            if (this._model) {\n                this._model.replaceAll();\n                return true;\n            }\n            return false;\n        }\n        selectAllMatches() {\n            if (this._model) {\n                this._model.selectAllMatches();\n                this._editor.focus();\n                return true;\n            }\n            return false;\n        }\n        getGlobalBufferTerm() {\n            if (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n                && this._clipboardService\n                && this._editor.hasModel()\n                && !this._editor.getModel().isTooLargeForSyncing()) {\n                return this._clipboardService.readFindText();\n            }\n            return '';\n        }\n        setGlobalBufferTerm(text) {\n            if (this._editor.getConfiguration().contribInfo.find.globalFindClipboard\n                && this._clipboardService\n                && this._editor.hasModel()\n                && !this._editor.getModel().isTooLargeForSyncing()) {\n                this._clipboardService.writeFindText(text);\n            }\n        }\n    };\n    CommonFindController.ID = 'editor.contrib.findController';\n    CommonFindController = __decorate([\n        __param(1, contextkey_1.IContextKeyService),\n        __param(2, storage_1.IStorageService),\n        __param(3, clipboardService_1.IClipboardService)\n    ], CommonFindController);\n    exports.CommonFindController = CommonFindController;\n    let FindController = class FindController extends CommonFindController {\n        constructor(editor, _contextViewService, _contextKeyService, _keybindingService, _themeService, storageService, clipboardService) {\n            super(editor, _contextKeyService, storageService, clipboardService);\n            this._contextViewService = _contextViewService;\n            this._keybindingService = _keybindingService;\n            this._themeService = _themeService;\n        }\n        _start(opts) {\n            if (!this._widget) {\n                this._createFindWidget();\n            }\n            if (!this._widget.getPosition() && this._editor.getConfiguration().contribInfo.find.autoFindInSelection) {\n                // not visible yet so we need to set search scope if `editor.find.autoFindInSelection` is `true`\n                opts.updateSearchScope = true;\n            }\n            super._start(opts);\n            if (opts.shouldFocus === FindStartFocusAction.FocusReplaceInput) {\n                this._widget.focusReplaceInput();\n            }\n            else if (opts.shouldFocus === FindStartFocusAction.FocusFindInput) {\n                this._widget.focusFindInput();\n            }\n        }\n        highlightFindOptions() {\n            if (!this._widget) {\n                this._createFindWidget();\n            }\n            if (this._state.isRevealed) {\n                this._widget.highlightFindOptions();\n            }\n            else {\n                this._findOptionsWidget.highlightFindOptions();\n            }\n        }\n        _createFindWidget() {\n            this._widget = this._register(new findWidget_1.FindWidget(this._editor, this, this._state, this._contextViewService, this._keybindingService, this._contextKeyService, this._themeService));\n            this._findOptionsWidget = this._register(new findOptionsWidget_1.FindOptionsWidget(this._editor, this._state, this._keybindingService, this._themeService));\n        }\n    };\n    FindController = __decorate([\n        __param(1, contextView_1.IContextViewService),\n        __param(2, contextkey_1.IContextKeyService),\n        __param(3, keybinding_1.IKeybindingService),\n        __param(4, themeService_1.IThemeService),\n        __param(5, storage_1.IStorageService),\n        __param(6, instantiation_1.optional(clipboardService_1.IClipboardService))\n    ], FindController);\n    exports.FindController = FindController;\n    class StartFindAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.StartFindAction,\n                label: nls.localize('startFindAction', \"Find\"),\n                alias: 'Find',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: null,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '3_find',\n                    title: nls.localize({ key: 'miFind', comment: ['&& denotes a mnemonic'] }, \"&&Find\"),\n                    order: 1\n                }\n            });\n        }\n        run(accessor, editor) {\n            let controller = CommonFindController.get(editor);\n            if (controller) {\n                controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                    seedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.globalFindClipboard,\n                    shouldFocus: FindStartFocusAction.FocusFindInput,\n                    shouldAnimate: true,\n                    updateSearchScope: false\n                });\n            }\n        }\n    }\n    exports.StartFindAction = StartFindAction;\n    class StartFindWithSelectionAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.StartFindWithSelection,\n                label: nls.localize('startFindWithSelectionAction', \"Find With Selection\"),\n                alias: 'Find With Selection',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: null,\n                    primary: 0,\n                    mac: {\n                        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_E,\n                    },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor) {\n            let controller = CommonFindController.get(editor);\n            if (controller) {\n                controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: true,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: FindStartFocusAction.FocusFindInput,\n                    shouldAnimate: true,\n                    updateSearchScope: false\n                });\n                controller.setGlobalBufferTerm(controller.getState().searchString);\n            }\n        }\n    }\n    exports.StartFindWithSelectionAction = StartFindWithSelectionAction;\n    class MatchFindAction extends editorExtensions_1.EditorAction {\n        run(accessor, editor) {\n            let controller = CommonFindController.get(editor);\n            if (controller && !this._run(controller)) {\n                controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: (controller.getState().searchString.length === 0) && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                    seedSearchStringFromGlobalClipboard: true,\n                    shouldFocus: FindStartFocusAction.NoFocusChange,\n                    shouldAnimate: true,\n                    updateSearchScope: false\n                });\n                this._run(controller);\n            }\n        }\n    }\n    exports.MatchFindAction = MatchFindAction;\n    class NextMatchFindAction extends MatchFindAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.NextMatchFindAction,\n                label: nls.localize('findNextMatchAction', \"Find Next\"),\n                alias: 'Find Next',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                    primary: keyCodes_1.KeyCode.F3,\n                    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_G, secondary: [keyCodes_1.KeyCode.F3] },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _run(controller) {\n            return controller.moveToNextMatch();\n        }\n    }\n    exports.NextMatchFindAction = NextMatchFindAction;\n    class PreviousMatchFindAction extends MatchFindAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.PreviousMatchFindAction,\n                label: nls.localize('findPreviousMatchAction', \"Find Previous\"),\n                alias: 'Find Previous',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3,\n                    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_G, secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3] },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _run(controller) {\n            return controller.moveToPrevMatch();\n        }\n    }\n    exports.PreviousMatchFindAction = PreviousMatchFindAction;\n    class SelectionMatchFindAction extends editorExtensions_1.EditorAction {\n        run(accessor, editor) {\n            let controller = CommonFindController.get(editor);\n            if (!controller) {\n                return;\n            }\n            let selectionSearchString = getSelectionSearchString(editor);\n            if (selectionSearchString) {\n                controller.setSearchString(selectionSearchString);\n            }\n            if (!this._run(controller)) {\n                controller.start({\n                    forceRevealReplace: false,\n                    seedSearchStringFromSelection: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                    seedSearchStringFromGlobalClipboard: false,\n                    shouldFocus: FindStartFocusAction.NoFocusChange,\n                    shouldAnimate: true,\n                    updateSearchScope: false\n                });\n                this._run(controller);\n            }\n        }\n    }\n    exports.SelectionMatchFindAction = SelectionMatchFindAction;\n    class NextSelectionMatchFindAction extends SelectionMatchFindAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.NextSelectionMatchFindAction,\n                label: nls.localize('nextSelectionMatchFindAction', \"Find Next Selection\"),\n                alias: 'Find Next Selection',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F3,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _run(controller) {\n            return controller.moveToNextMatch();\n        }\n    }\n    exports.NextSelectionMatchFindAction = NextSelectionMatchFindAction;\n    class PreviousSelectionMatchFindAction extends SelectionMatchFindAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.PreviousSelectionMatchFindAction,\n                label: nls.localize('previousSelectionMatchFindAction', \"Find Previous Selection\"),\n                alias: 'Find Previous Selection',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F3,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _run(controller) {\n            return controller.moveToPrevMatch();\n        }\n    }\n    exports.PreviousSelectionMatchFindAction = PreviousSelectionMatchFindAction;\n    class StartFindReplaceAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: findModel_1.FIND_IDS.StartFindReplaceAction,\n                label: nls.localize('startReplace', \"Replace\"),\n                alias: 'Replace',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: null,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_H,\n                    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_F },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menubarOpts: {\n                    menuId: actions_1.MenuId.MenubarEditMenu,\n                    group: '3_find',\n                    title: nls.localize({ key: 'miReplace', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n                    order: 2\n                }\n            });\n        }\n        run(accessor, editor) {\n            if (!editor.hasModel() || editor.getConfiguration().readOnly) {\n                return;\n            }\n            let controller = CommonFindController.get(editor);\n            let currentSelection = editor.getSelection();\n            let findInputFocused = controller.isFindInputFocused();\n            // we only seed search string from selection when the current selection is single line and not empty,\n            // + the find input is not focused\n            let seedSearchStringFromSelection = !currentSelection.isEmpty()\n                && currentSelection.startLineNumber === currentSelection.endLineNumber && editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection\n                && !findInputFocused;\n            /*\n             * if the existing search string in find widget is empty and we don't seed search string from selection, it means the Find Input is still empty, so we should focus the Find Input instead of Replace Input.\n    \n             * findInputFocused true -> seedSearchStringFromSelection false, FocusReplaceInput\n             * findInputFocused false, seedSearchStringFromSelection true FocusReplaceInput\n             * findInputFocused false seedSearchStringFromSelection false FocusFindInput\n             */\n            let shouldFocus = (findInputFocused || seedSearchStringFromSelection) ?\n                FindStartFocusAction.FocusReplaceInput : FindStartFocusAction.FocusFindInput;\n            if (controller) {\n                controller.start({\n                    forceRevealReplace: true,\n                    seedSearchStringFromSelection: seedSearchStringFromSelection,\n                    seedSearchStringFromGlobalClipboard: editor.getConfiguration().contribInfo.find.seedSearchStringFromSelection,\n                    shouldFocus: shouldFocus,\n                    shouldAnimate: true,\n                    updateSearchScope: false\n                });\n            }\n        }\n    }\n    exports.StartFindReplaceAction = StartFindReplaceAction;\n    editorExtensions_1.registerEditorContribution(FindController);\n    editorExtensions_1.registerEditorAction(StartFindAction);\n    editorExtensions_1.registerEditorAction(StartFindWithSelectionAction);\n    editorExtensions_1.registerEditorAction(NextMatchFindAction);\n    editorExtensions_1.registerEditorAction(PreviousMatchFindAction);\n    editorExtensions_1.registerEditorAction(NextSelectionMatchFindAction);\n    editorExtensions_1.registerEditorAction(PreviousSelectionMatchFindAction);\n    editorExtensions_1.registerEditorAction(StartFindReplaceAction);\n    const FindCommand = editorExtensions_1.EditorCommand.bindToContribution(CommonFindController.get);\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.CloseFindWidgetCommand,\n        precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n        handler: x => x.closeFindWidget(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyCode.Escape,\n            secondary: [keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Escape]\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ToggleCaseSensitiveCommand,\n        precondition: null,\n        handler: x => x.toggleCaseSensitive(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: findModel_1.ToggleCaseSensitiveKeybinding.primary,\n            mac: findModel_1.ToggleCaseSensitiveKeybinding.mac,\n            win: findModel_1.ToggleCaseSensitiveKeybinding.win,\n            linux: findModel_1.ToggleCaseSensitiveKeybinding.linux\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ToggleWholeWordCommand,\n        precondition: null,\n        handler: x => x.toggleWholeWords(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: findModel_1.ToggleWholeWordKeybinding.primary,\n            mac: findModel_1.ToggleWholeWordKeybinding.mac,\n            win: findModel_1.ToggleWholeWordKeybinding.win,\n            linux: findModel_1.ToggleWholeWordKeybinding.linux\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ToggleRegexCommand,\n        precondition: null,\n        handler: x => x.toggleRegex(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: findModel_1.ToggleRegexKeybinding.primary,\n            mac: findModel_1.ToggleRegexKeybinding.mac,\n            win: findModel_1.ToggleRegexKeybinding.win,\n            linux: findModel_1.ToggleRegexKeybinding.linux\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ToggleSearchScopeCommand,\n        precondition: null,\n        handler: x => x.toggleSearchScope(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: findModel_1.ToggleSearchScopeKeybinding.primary,\n            mac: findModel_1.ToggleSearchScopeKeybinding.mac,\n            win: findModel_1.ToggleSearchScopeKeybinding.win,\n            linux: findModel_1.ToggleSearchScopeKeybinding.linux\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ReplaceOneAction,\n        precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n        handler: x => x.replace(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_1\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.ReplaceAllAction,\n        precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n        handler: x => x.replaceAll(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Enter\n        }\n    }));\n    editorExtensions_1.registerEditorCommand(new FindCommand({\n        id: findModel_1.FIND_IDS.SelectAllMatchesAction,\n        precondition: findModel_1.CONTEXT_FIND_WIDGET_VISIBLE,\n        handler: x => x.selectAllMatches(),\n        kbOpts: {\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib + 5,\n            kbExpr: editorContextKeys_1.EditorContextKeys.focus,\n            primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Enter\n        }\n    }));\n});\n",null]}