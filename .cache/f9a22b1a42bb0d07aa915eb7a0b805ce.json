{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/tasks.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/types\", \"vs/base/common/objects\", \"vs/platform/contextkey/common/contextkey\", \"vs/workbench/contrib/tasks/common/taskDefinitionRegistry\"], function (require, exports, nls, Types, Objects, contextkey_1, taskDefinitionRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.TASK_RUNNING_STATE = new contextkey_1.RawContextKey('taskRunning', false);\n    var ShellQuoting;\n    (function (ShellQuoting) {\n        /**\n         * Use character escaping.\n         */\n        ShellQuoting[ShellQuoting[\"Escape\"] = 1] = \"Escape\";\n        /**\n         * Use strong quoting\n         */\n        ShellQuoting[ShellQuoting[\"Strong\"] = 2] = \"Strong\";\n        /**\n         * Use weak quoting.\n         */\n        ShellQuoting[ShellQuoting[\"Weak\"] = 3] = \"Weak\";\n    })(ShellQuoting = exports.ShellQuoting || (exports.ShellQuoting = {}));\n    exports.CUSTOMIZED_TASK_TYPE = '$customized';\n    (function (ShellQuoting) {\n        function from(value) {\n            if (!value) {\n                return ShellQuoting.Strong;\n            }\n            switch (value.toLowerCase()) {\n                case 'escape':\n                    return ShellQuoting.Escape;\n                case 'strong':\n                    return ShellQuoting.Strong;\n                case 'weak':\n                    return ShellQuoting.Weak;\n                default:\n                    return ShellQuoting.Strong;\n            }\n        }\n        ShellQuoting.from = from;\n    })(ShellQuoting = exports.ShellQuoting || (exports.ShellQuoting = {}));\n    var CommandOptions;\n    (function (CommandOptions) {\n        CommandOptions.defaults = { cwd: '${workspaceFolder}' };\n    })(CommandOptions = exports.CommandOptions || (exports.CommandOptions = {}));\n    var RevealKind;\n    (function (RevealKind) {\n        /**\n         * Always brings the terminal to front if the task is executed.\n         */\n        RevealKind[RevealKind[\"Always\"] = 1] = \"Always\";\n        /**\n         * Only brings the terminal to front if a problem is detected executing the task\n         * (e.g. the task couldn't be started because).\n         */\n        RevealKind[RevealKind[\"Silent\"] = 2] = \"Silent\";\n        /**\n         * The terminal never comes to front when the task is executed.\n         */\n        RevealKind[RevealKind[\"Never\"] = 3] = \"Never\";\n    })(RevealKind = exports.RevealKind || (exports.RevealKind = {}));\n    (function (RevealKind) {\n        function fromString(value) {\n            switch (value.toLowerCase()) {\n                case 'always':\n                    return RevealKind.Always;\n                case 'silent':\n                    return RevealKind.Silent;\n                case 'never':\n                    return RevealKind.Never;\n                default:\n                    return RevealKind.Always;\n            }\n        }\n        RevealKind.fromString = fromString;\n    })(RevealKind = exports.RevealKind || (exports.RevealKind = {}));\n    var PanelKind;\n    (function (PanelKind) {\n        /**\n         * Shares a panel with other tasks. This is the default.\n         */\n        PanelKind[PanelKind[\"Shared\"] = 1] = \"Shared\";\n        /**\n         * Uses a dedicated panel for this tasks. The panel is not\n         * shared with other tasks.\n         */\n        PanelKind[PanelKind[\"Dedicated\"] = 2] = \"Dedicated\";\n        /**\n         * Creates a new panel whenever this task is executed.\n         */\n        PanelKind[PanelKind[\"New\"] = 3] = \"New\";\n    })(PanelKind = exports.PanelKind || (exports.PanelKind = {}));\n    (function (PanelKind) {\n        function fromString(value) {\n            switch (value.toLowerCase()) {\n                case 'shared':\n                    return PanelKind.Shared;\n                case 'dedicated':\n                    return PanelKind.Dedicated;\n                case 'new':\n                    return PanelKind.New;\n                default:\n                    return PanelKind.Shared;\n            }\n        }\n        PanelKind.fromString = fromString;\n    })(PanelKind = exports.PanelKind || (exports.PanelKind = {}));\n    var PresentationOptions;\n    (function (PresentationOptions) {\n        PresentationOptions.defaults = {\n            echo: true, reveal: RevealKind.Always, focus: false, panel: PanelKind.Shared, showReuseMessage: true, clear: false\n        };\n    })(PresentationOptions = exports.PresentationOptions || (exports.PresentationOptions = {}));\n    var RuntimeType;\n    (function (RuntimeType) {\n        RuntimeType[RuntimeType[\"Shell\"] = 1] = \"Shell\";\n        RuntimeType[RuntimeType[\"Process\"] = 2] = \"Process\";\n        RuntimeType[RuntimeType[\"CustomExecution\"] = 3] = \"CustomExecution\";\n    })(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));\n    (function (RuntimeType) {\n        function fromString(value) {\n            switch (value.toLowerCase()) {\n                case 'shell':\n                    return RuntimeType.Shell;\n                case 'process':\n                    return RuntimeType.Process;\n                case 'customExecution':\n                    return RuntimeType.CustomExecution;\n                default:\n                    return RuntimeType.Process;\n            }\n        }\n        RuntimeType.fromString = fromString;\n    })(RuntimeType = exports.RuntimeType || (exports.RuntimeType = {}));\n    var CommandString;\n    (function (CommandString) {\n        function value(value) {\n            if (Types.isString(value)) {\n                return value;\n            }\n            else {\n                return value.value;\n            }\n        }\n        CommandString.value = value;\n    })(CommandString = exports.CommandString || (exports.CommandString = {}));\n    var TaskGroup;\n    (function (TaskGroup) {\n        TaskGroup.Clean = 'clean';\n        TaskGroup.Build = 'build';\n        TaskGroup.Rebuild = 'rebuild';\n        TaskGroup.Test = 'test';\n        function is(value) {\n            return value === TaskGroup.Clean || value === TaskGroup.Build || value === TaskGroup.Rebuild || value === TaskGroup.Test;\n        }\n        TaskGroup.is = is;\n    })(TaskGroup = exports.TaskGroup || (exports.TaskGroup = {}));\n    var TaskScope;\n    (function (TaskScope) {\n        TaskScope[TaskScope[\"Global\"] = 1] = \"Global\";\n        TaskScope[TaskScope[\"Workspace\"] = 2] = \"Workspace\";\n        TaskScope[TaskScope[\"Folder\"] = 3] = \"Folder\";\n    })(TaskScope = exports.TaskScope || (exports.TaskScope = {}));\n    var TaskSourceKind;\n    (function (TaskSourceKind) {\n        TaskSourceKind.Workspace = 'workspace';\n        TaskSourceKind.Extension = 'extension';\n        TaskSourceKind.InMemory = 'inMemory';\n    })(TaskSourceKind = exports.TaskSourceKind || (exports.TaskSourceKind = {}));\n    var GroupType;\n    (function (GroupType) {\n        GroupType[\"default\"] = \"default\";\n        GroupType[\"user\"] = \"user\";\n    })(GroupType = exports.GroupType || (exports.GroupType = {}));\n    var RunOnOptions;\n    (function (RunOnOptions) {\n        RunOnOptions[RunOnOptions[\"default\"] = 1] = \"default\";\n        RunOnOptions[RunOnOptions[\"folderOpen\"] = 2] = \"folderOpen\";\n    })(RunOnOptions = exports.RunOnOptions || (exports.RunOnOptions = {}));\n    var RunOptions;\n    (function (RunOptions) {\n        RunOptions.defaults = { reevaluateOnRerun: true, runOn: RunOnOptions.default };\n    })(RunOptions = exports.RunOptions || (exports.RunOptions = {}));\n    class CommonTask {\n        constructor(id, label, type, runOptions, configurationProperties, source) {\n            this._id = id;\n            if (label) {\n                this._label = label;\n            }\n            if (type) {\n                this.type = type;\n            }\n            this.runOptions = runOptions;\n            this.configurationProperties = configurationProperties;\n            this._source = source;\n        }\n        getDefinition(useSource) {\n            return undefined;\n        }\n        getMapKey() {\n            return this._id;\n        }\n        getRecentlyUsedKey() {\n            return undefined;\n        }\n        clone() {\n            return this.fromObject(Objects.assign({}, this));\n        }\n        getWorkspaceFolder() {\n            return undefined;\n        }\n        getTelemetryKind() {\n            return 'unknown';\n        }\n        matches(key, compareId = false) {\n            if (key === undefined) {\n                return false;\n            }\n            if (Types.isString(key)) {\n                return key === this._label || key === this.configurationProperties.identifier || (compareId && key === this._id);\n            }\n            let identifier = this.getDefinition(true);\n            return identifier !== undefined && identifier._key === key._key;\n        }\n        getQualifiedLabel() {\n            let workspaceFolder = this.getWorkspaceFolder();\n            if (workspaceFolder) {\n                return `${this._label} (${workspaceFolder.name})`;\n            }\n            else {\n                return this._label;\n            }\n        }\n        getTaskExecution() {\n            let result = {\n                id: this._id,\n                task: this\n            };\n            return result;\n        }\n        addTaskLoadMessages(messages) {\n            if (this._taskLoadMessages === undefined) {\n                this._taskLoadMessages = [];\n            }\n            if (messages) {\n                this._taskLoadMessages = this._taskLoadMessages.concat(messages);\n            }\n        }\n        get taskLoadMessages() {\n            return this._taskLoadMessages;\n        }\n    }\n    exports.CommonTask = CommonTask;\n    class CustomTask extends CommonTask {\n        constructor(id, source, label, type, command, hasDefinedMatchers, runOptions, configurationProperties) {\n            super(id, label, undefined, runOptions, configurationProperties, source);\n            this._source = source;\n            this.hasDefinedMatchers = hasDefinedMatchers;\n            if (command) {\n                this.command = command;\n            }\n        }\n        customizes() {\n            if (this._source && this._source.customizes) {\n                return this._source.customizes;\n            }\n            return undefined;\n        }\n        getDefinition(useSource = false) {\n            if (useSource && this._source.customizes !== undefined) {\n                return this._source.customizes;\n            }\n            else {\n                let type;\n                const commandRuntime = this.command ? this.command.runtime : undefined;\n                switch (commandRuntime) {\n                    case RuntimeType.Shell:\n                        type = 'shell';\n                        break;\n                    case RuntimeType.Process:\n                        type = 'process';\n                        break;\n                    case RuntimeType.CustomExecution:\n                        type = 'customExecution';\n                        break;\n                    case undefined:\n                        type = '$composite';\n                        break;\n                    default:\n                        throw new Error('Unexpected task runtime');\n                }\n                let result = {\n                    type,\n                    _key: this._id,\n                    id: this._id\n                };\n                return result;\n            }\n        }\n        static is(value) {\n            return value instanceof CustomTask;\n        }\n        getMapKey() {\n            let workspaceFolder = this._source.config.workspaceFolder;\n            return workspaceFolder ? `${workspaceFolder.uri.toString()}|${this._id}` : this._id;\n        }\n        getRecentlyUsedKey() {\n            let workspaceFolder = this._source.config.workspaceFolder;\n            if (!workspaceFolder) {\n                return undefined;\n            }\n            let key = { type: exports.CUSTOMIZED_TASK_TYPE, folder: workspaceFolder.uri.toString(), id: this.configurationProperties.identifier };\n            return JSON.stringify(key);\n        }\n        getWorkspaceFolder() {\n            return this._source.config.workspaceFolder;\n        }\n        getTelemetryKind() {\n            if (this._source.customizes) {\n                return 'workspace>extension';\n            }\n            else {\n                return 'workspace';\n            }\n        }\n        fromObject(object) {\n            return new CustomTask(object._id, object._source, object._label, object.type, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n        }\n    }\n    exports.CustomTask = CustomTask;\n    class ConfiguringTask extends CommonTask {\n        constructor(id, source, label, type, configures, runOptions, configurationProperties) {\n            super(id, label, type, runOptions, configurationProperties, source);\n            this._source = source;\n            this.configures = configures;\n        }\n        static is(value) {\n            return value instanceof ConfiguringTask;\n        }\n        fromObject(object) {\n            return object;\n        }\n    }\n    exports.ConfiguringTask = ConfiguringTask;\n    class ContributedTask extends CommonTask {\n        constructor(id, source, label, type, defines, command, hasDefinedMatchers, runOptions, configurationProperties) {\n            super(id, label, type, runOptions, configurationProperties, source);\n            this.defines = defines;\n            this.hasDefinedMatchers = hasDefinedMatchers;\n            this.command = command;\n        }\n        getDefinition() {\n            return this.defines;\n        }\n        static is(value) {\n            return value instanceof ContributedTask;\n        }\n        getMapKey() {\n            let workspaceFolder = this._source.workspaceFolder;\n            return workspaceFolder\n                ? `${this._source.scope.toString()}|${workspaceFolder.uri.toString()}|${this._id}`\n                : `${this._source.scope.toString()}|${this._id}`;\n        }\n        getRecentlyUsedKey() {\n            let key = { type: 'contributed', scope: this._source.scope, id: this._id };\n            if (this._source.scope === TaskScope.Folder && this._source.workspaceFolder) {\n                key.folder = this._source.workspaceFolder.uri.toString();\n            }\n            return JSON.stringify(key);\n        }\n        getWorkspaceFolder() {\n            return this._source.workspaceFolder;\n        }\n        getTelemetryKind() {\n            return 'extension';\n        }\n        fromObject(object) {\n            return new ContributedTask(object._id, object._source, object._label, object.type, object.defines, object.command, object.hasDefinedMatchers, object.runOptions, object.configurationProperties);\n        }\n    }\n    exports.ContributedTask = ContributedTask;\n    class InMemoryTask extends CommonTask {\n        constructor(id, source, label, type, runOptions, configurationProperties) {\n            super(id, label, type, runOptions, configurationProperties, source);\n            this._source = source;\n        }\n        static is(value) {\n            return value instanceof InMemoryTask;\n        }\n        getTelemetryKind() {\n            return 'composite';\n        }\n        fromObject(object) {\n            return new InMemoryTask(object._id, object._source, object._label, object.type, object.runOptions, object.configurationProperties);\n        }\n    }\n    exports.InMemoryTask = InMemoryTask;\n    var ExecutionEngine;\n    (function (ExecutionEngine) {\n        ExecutionEngine[ExecutionEngine[\"Process\"] = 1] = \"Process\";\n        ExecutionEngine[ExecutionEngine[\"Terminal\"] = 2] = \"Terminal\";\n    })(ExecutionEngine = exports.ExecutionEngine || (exports.ExecutionEngine = {}));\n    (function (ExecutionEngine) {\n        ExecutionEngine._default = ExecutionEngine.Terminal;\n    })(ExecutionEngine = exports.ExecutionEngine || (exports.ExecutionEngine = {}));\n    var JsonSchemaVersion;\n    (function (JsonSchemaVersion) {\n        JsonSchemaVersion[JsonSchemaVersion[\"V0_1_0\"] = 1] = \"V0_1_0\";\n        JsonSchemaVersion[JsonSchemaVersion[\"V2_0_0\"] = 2] = \"V2_0_0\";\n    })(JsonSchemaVersion = exports.JsonSchemaVersion || (exports.JsonSchemaVersion = {}));\n    class TaskSorter {\n        constructor(workspaceFolders) {\n            this._order = new Map();\n            for (let i = 0; i < workspaceFolders.length; i++) {\n                this._order.set(workspaceFolders[i].uri.toString(), i);\n            }\n        }\n        compare(a, b) {\n            let aw = a.getWorkspaceFolder();\n            let bw = b.getWorkspaceFolder();\n            if (aw && bw) {\n                let ai = this._order.get(aw.uri.toString());\n                ai = ai === undefined ? 0 : ai + 1;\n                let bi = this._order.get(bw.uri.toString());\n                bi = bi === undefined ? 0 : bi + 1;\n                if (ai === bi) {\n                    return a._label.localeCompare(b._label);\n                }\n                else {\n                    return ai - bi;\n                }\n            }\n            else if (!aw && bw) {\n                return -1;\n            }\n            else if (aw && !bw) {\n                return +1;\n            }\n            else {\n                return 0;\n            }\n        }\n    }\n    exports.TaskSorter = TaskSorter;\n    var TaskEventKind;\n    (function (TaskEventKind) {\n        TaskEventKind[\"DependsOnStarted\"] = \"dependsOnStarted\";\n        TaskEventKind[\"Start\"] = \"start\";\n        TaskEventKind[\"ProcessStarted\"] = \"processStarted\";\n        TaskEventKind[\"Active\"] = \"active\";\n        TaskEventKind[\"Inactive\"] = \"inactive\";\n        TaskEventKind[\"Changed\"] = \"changed\";\n        TaskEventKind[\"Terminated\"] = \"terminated\";\n        TaskEventKind[\"ProcessEnded\"] = \"processEnded\";\n        TaskEventKind[\"End\"] = \"end\";\n    })(TaskEventKind = exports.TaskEventKind || (exports.TaskEventKind = {}));\n    var TaskRunType;\n    (function (TaskRunType) {\n        TaskRunType[\"SingleRun\"] = \"singleRun\";\n        TaskRunType[\"Background\"] = \"background\";\n    })(TaskRunType = exports.TaskRunType || (exports.TaskRunType = {}));\n    var TaskRunSource;\n    (function (TaskRunSource) {\n        TaskRunSource[TaskRunSource[\"System\"] = 0] = \"System\";\n        TaskRunSource[TaskRunSource[\"User\"] = 1] = \"User\";\n        TaskRunSource[TaskRunSource[\"FolderOpen\"] = 2] = \"FolderOpen\";\n        TaskRunSource[TaskRunSource[\"ConfigurationChange\"] = 3] = \"ConfigurationChange\";\n    })(TaskRunSource = exports.TaskRunSource || (exports.TaskRunSource = {}));\n    var TaskEvent;\n    (function (TaskEvent) {\n        function create(kind, task, processIdOrExitCodeOrTerminalId) {\n            if (task) {\n                let result = {\n                    kind: kind,\n                    taskId: task._id,\n                    taskName: task.configurationProperties.name,\n                    runType: task.configurationProperties.isBackground ? TaskRunType.Background : TaskRunType.SingleRun,\n                    group: task.configurationProperties.group,\n                    processId: undefined,\n                    exitCode: undefined,\n                    terminalId: undefined,\n                    __task: task,\n                };\n                if (kind === TaskEventKind.Start) {\n                    result.terminalId = processIdOrExitCodeOrTerminalId;\n                }\n                else if (kind === TaskEventKind.ProcessStarted) {\n                    result.processId = processIdOrExitCodeOrTerminalId;\n                }\n                else if (kind === TaskEventKind.ProcessEnded) {\n                    result.exitCode = processIdOrExitCodeOrTerminalId;\n                }\n                return Object.freeze(result);\n            }\n            else {\n                return Object.freeze({ kind: TaskEventKind.Changed });\n            }\n        }\n        TaskEvent.create = create;\n    })(TaskEvent = exports.TaskEvent || (exports.TaskEvent = {}));\n    var KeyedTaskIdentifier;\n    (function (KeyedTaskIdentifier) {\n        function sortedStringify(literal) {\n            const keys = Object.keys(literal).sort();\n            let result = '';\n            for (let position in keys) {\n                let stringified = literal[keys[position]];\n                if (stringified instanceof Object) {\n                    stringified = sortedStringify(stringified);\n                }\n                else if (typeof stringified === 'string') {\n                    stringified = stringified.replace(/,/g, ',,');\n                }\n                result += keys[position] + ',' + stringified + ',';\n            }\n            return result;\n        }\n        function create(value) {\n            const resultKey = sortedStringify(value);\n            let result = { _key: resultKey, type: value.taskType };\n            Objects.assign(result, value);\n            return result;\n        }\n        KeyedTaskIdentifier.create = create;\n    })(KeyedTaskIdentifier = exports.KeyedTaskIdentifier || (exports.KeyedTaskIdentifier = {}));\n    var TaskDefinition;\n    (function (TaskDefinition) {\n        function createTaskIdentifier(external, reporter) {\n            let definition = taskDefinitionRegistry_1.TaskDefinitionRegistry.get(external.type);\n            if (definition === undefined) {\n                // We have no task definition so we can't sanitize the literal. Take it as is\n                let copy = Objects.deepClone(external);\n                delete copy._key;\n                return KeyedTaskIdentifier.create(copy);\n            }\n            let literal = Object.create(null);\n            literal.type = definition.taskType;\n            let required = new Set();\n            definition.required.forEach(element => required.add(element));\n            let properties = definition.properties;\n            for (let property of Object.keys(properties)) {\n                let value = external[property];\n                if (value !== undefined && value !== null) {\n                    literal[property] = value;\n                }\n                else if (required.has(property)) {\n                    let schema = properties[property];\n                    if (schema.default !== undefined) {\n                        literal[property] = Objects.deepClone(schema.default);\n                    }\n                    else {\n                        switch (schema.type) {\n                            case 'boolean':\n                                literal[property] = false;\n                                break;\n                            case 'number':\n                            case 'integer':\n                                literal[property] = 0;\n                                break;\n                            case 'string':\n                                literal[property] = '';\n                                break;\n                            default:\n                                reporter.error(nls.localize('TaskDefinition.missingRequiredProperty', 'Error: the task identifier \\'{0}\\' is missing the required property \\'{1}\\'. The task identifier will be ignored.', JSON.stringify(external, undefined, 0), property));\n                                return undefined;\n                        }\n                    }\n                }\n            }\n            return KeyedTaskIdentifier.create(literal);\n        }\n        TaskDefinition.createTaskIdentifier = createTaskIdentifier;\n    })(TaskDefinition = exports.TaskDefinition || (exports.TaskDefinition = {}));\n});\n",null]}