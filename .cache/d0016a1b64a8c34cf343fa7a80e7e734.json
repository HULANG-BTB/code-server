{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/common/walkThroughInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/welcome/walkThrough/common/walkThroughInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/strings\", \"vs/workbench/common/editor\", \"vs/base/common/lifecycle\", \"vs/editor/common/services/resolverService\", \"vs/base/common/marked/marked\", \"vs/base/common/network\"], function (require, exports, strings, editor_1, lifecycle_1, resolverService_1, marked, network_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class WalkThroughModel extends editor_1.EditorModel {\n        constructor(mainRef, snippetRefs) {\n            super();\n            this.mainRef = mainRef;\n            this.snippetRefs = snippetRefs;\n        }\n        get main() {\n            return this.mainRef.object;\n        }\n        get snippets() {\n            return this.snippetRefs.map(snippet => snippet.object);\n        }\n        dispose() {\n            this.snippetRefs.forEach(ref => ref.dispose());\n            this.mainRef.dispose();\n            super.dispose();\n        }\n    }\n    exports.WalkThroughModel = WalkThroughModel;\n    let WalkThroughInput = class WalkThroughInput extends editor_1.EditorInput {\n        constructor(options, textModelResolverService) {\n            super();\n            this.options = options;\n            this.textModelResolverService = textModelResolverService;\n            this.disposables = [];\n            this.promise = null;\n            this.maxTopScroll = 0;\n            this.maxBottomScroll = 0;\n        }\n        getResource() {\n            return this.options.resource;\n        }\n        getTypeId() {\n            return this.options.typeId;\n        }\n        getName() {\n            return this.options.name;\n        }\n        getDescription() {\n            return this.options.description || '';\n        }\n        getTelemetryFrom() {\n            return this.options.telemetryFrom;\n        }\n        getTelemetryDescriptor() {\n            const descriptor = super.getTelemetryDescriptor();\n            descriptor['target'] = this.getTelemetryFrom();\n            /* __GDPR__FRAGMENT__\n                \"EditorTelemetryDescriptor\" : {\n                    \"target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                }\n            */\n            return descriptor;\n        }\n        get onReady() {\n            return this.options.onReady;\n        }\n        resolve() {\n            if (!this.promise) {\n                this.promise = this.textModelResolverService.createModelReference(this.options.resource)\n                    .then(ref => {\n                    if (strings.endsWith(this.getResource().path, '.html')) {\n                        return new WalkThroughModel(ref, []);\n                    }\n                    const snippets = [];\n                    let i = 0;\n                    const renderer = new marked.Renderer();\n                    renderer.code = (code, lang) => {\n                        const resource = this.options.resource.with({ scheme: network_1.Schemas.walkThroughSnippet, fragment: `${i++}.${lang}` });\n                        snippets.push(this.textModelResolverService.createModelReference(resource));\n                        return '';\n                    };\n                    const markdown = ref.object.textEditorModel.getLinesContent().join('\\n');\n                    marked(markdown, { renderer });\n                    return Promise.all(snippets)\n                        .then(refs => new WalkThroughModel(ref, refs));\n                });\n            }\n            return this.promise;\n        }\n        matches(otherInput) {\n            if (super.matches(otherInput) === true) {\n                return true;\n            }\n            if (otherInput instanceof WalkThroughInput) {\n                let otherResourceEditorInput = otherInput;\n                // Compare by properties\n                return otherResourceEditorInput.options.resource.toString() === this.options.resource.toString();\n            }\n            return false;\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            if (this.promise) {\n                this.promise.then(model => model.dispose());\n                this.promise = null;\n            }\n            super.dispose();\n        }\n        relativeScrollPosition(topScroll, bottomScroll) {\n            this.maxTopScroll = Math.max(this.maxTopScroll, topScroll);\n            this.maxBottomScroll = Math.max(this.maxBottomScroll, bottomScroll);\n        }\n    };\n    WalkThroughInput = __decorate([\n        __param(1, resolverService_1.ITextModelService)\n    ], WalkThroughInput);\n    exports.WalkThroughInput = WalkThroughInput;\n});\n",null]}