{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scm.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scm.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar dirtydiffDecorator_1 = require(\"./dirtydiffDecorator\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar scm_1 = require(\"vs/workbench/contrib/scm/common/scm\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar viewlet_2 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar scmActivity_1 = require(\"./scmActivity\");\nvar scmViewlet_1 = require(\"vs/workbench/contrib/scm/browser/scmViewlet\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar scmService_1 = require(\"vs/workbench/contrib/scm/common/scmService\");\nvar OpenSCMViewletAction = /** @class */ (function (_super) {\n    tslib_1.__extends(OpenSCMViewletAction, _super);\n    function OpenSCMViewletAction(id, label, viewletService, editorGroupService, layoutService) {\n        return _super.call(this, id, label, scm_1.VIEWLET_ID, viewletService, editorGroupService, layoutService) || this;\n    }\n    OpenSCMViewletAction.ID = scm_1.VIEWLET_ID;\n    OpenSCMViewletAction.LABEL = nls_1.localize('toggleGitViewlet', \"Show Git\");\n    OpenSCMViewletAction = tslib_1.__decorate([\n        tslib_1.__param(2, viewlet_2.IViewletService), tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService), tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService)\n    ], OpenSCMViewletAction);\n    return OpenSCMViewletAction;\n}(viewlet_1.ShowViewletAction));\nplatform_1.Registry.as(contributions_1.Extensions.Workbench)\n    .registerWorkbenchContribution(dirtydiffDecorator_1.DirtyDiffWorkbenchController, lifecycle_1.LifecyclePhase.Restored);\nplatform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(new viewlet_1.ViewletDescriptor(scmViewlet_1.SCMViewlet, scm_1.VIEWLET_ID, nls_1.localize('source control', \"Source Control\"), 'scm', 2));\nplatform_1.Registry.as(contributions_1.Extensions.Workbench)\n    .registerWorkbenchContribution(scmActivity_1.StatusUpdater, lifecycle_1.LifecyclePhase.Restored);\nplatform_1.Registry.as(contributions_1.Extensions.Workbench)\n    .registerWorkbenchContribution(scmActivity_1.StatusBarController, lifecycle_1.LifecyclePhase.Restored);\n// Register Action to Open Viewlet\nplatform_1.Registry.as(actions_1.Extensions.WorkbenchActions).registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenSCMViewletAction, scm_1.VIEWLET_ID, nls_1.localize('toggleSCMViewlet', \"Show SCM\"), {\n    primary: 0,\n    win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_G },\n    linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_G },\n    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_G }\n}), 'View: Show SCM', nls_1.localize('view', \"View\"));\nplatform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({\n    id: 'scm',\n    order: 5,\n    title: nls_1.localize('scmConfigurationTitle', \"SCM\"),\n    type: 'object',\n    properties: {\n        'scm.alwaysShowProviders': {\n            type: 'boolean',\n            description: nls_1.localize('alwaysShowProviders', \"Controls whether to always show the Source Control Provider section.\"),\n            default: false\n        },\n        'scm.providers.visible': {\n            type: 'number',\n            description: nls_1.localize('providersVisible', \"Controls how many providers are visible in the Source Control Provider section. Set to `0` to be able to manually resize the view.\"),\n            default: 10\n        },\n        'scm.diffDecorations': {\n            type: 'string',\n            enum: ['all', 'gutter', 'overview', 'none'],\n            default: 'all',\n            description: nls_1.localize('diffDecorations', \"Controls diff decorations in the editor.\")\n        },\n        'scm.diffDecorationsGutterWidth': {\n            type: 'number',\n            enum: [1, 2, 3, 4, 5],\n            default: 3,\n            description: nls_1.localize('diffGutterWidth', \"Controls the width(px) of diff decorations in gutter (added & modified).\")\n        },\n        'scm.alwaysShowActions': {\n            type: 'boolean',\n            description: nls_1.localize('alwaysShowActions', \"Controls whether inline actions are always visible in the Source Control view.\"),\n            default: false\n        }\n    }\n});\n// View menu\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarViewMenu, {\n    group: '3_views',\n    command: {\n        id: scm_1.VIEWLET_ID,\n        title: nls_1.localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, \"S&&CM\")\n    },\n    order: 3\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'scm.acceptInput',\n    description: { description: nls_1.localize('scm accept', \"SCM: Accept Input\"), args: [] },\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: new contextkey_1.ContextKeyDefinedExpr('scmRepository'),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Enter,\n    handler: function (accessor) {\n        var contextKeyService = accessor.get(contextkey_1.IContextKeyService);\n        var context = contextKeyService.getContext(document.activeElement);\n        var repository = context.getValue('scmRepository');\n        if (!repository || !repository.provider.acceptInputCommand) {\n            return Promise.resolve(null);\n        }\n        var id = repository.provider.acceptInputCommand.id;\n        var args = repository.provider.acceptInputCommand.arguments;\n        var commandService = accessor.get(commands_1.ICommandService);\n        return commandService.executeCommand.apply(commandService, [id].concat((args || [])));\n    }\n});\nextensions_1.registerSingleton(scm_1.ISCMService, scmService_1.SCMService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scm.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/browser/scm.contribution.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8BAAkC;AAClC,iEAAgE;AAChE,mEAAuH;AACvH,2DAAoE;AACpE,wDAAsI;AACtI,2DAA8F;AAC9F,uDAAgH;AAChH,oDAA0D;AAC1D,8DAAgG;AAChG,yEAAgF;AAChF,6CAAmE;AACnE,0EAAyE;AACzE,oEAAwE;AACxE,gGAAuI;AACvI,+FAA+F;AAC/F,uEAAqG;AACrG,iEAAuE;AACvE,yFAA0G;AAC1G,oFAA6F;AAC7F,0EAAgF;AAChF,yEAAwE;AAExE;IAAmC,gDAAiB;IAKnD,8BAAY,EAAU,EAAE,KAAa,EAAmB,cAA+B,EAAwB,kBAAwC,EAA2B,aAAsC;eACvN,kBAAM,EAAE,EAAE,KAAK,EAAE,gBAAU,EAAE,cAAc,EAAE,kBAAkB,EAAE,aAAa,CAAC;IAChF,CAAC;IALe,uBAAE,GAAG,gBAAU,CAAC;IACzB,0BAAK,GAAG,cAAQ,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAHnD,oBAAoB;QAKe,mBAAA,yBAAe,CAAA,EAAmC,mBAAA,0CAAoB,CAAA,EAA4C,mBAAA,uCAAuB,CAAA;OAL5K,oBAAoB,CAQzB;IAAD,2BAAC;CAAA,AARD,CAAmC,2BAAiB,GAQnD;AAED,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC;KACzE,6BAA6B,CAAC,iDAA4B,EAAE,0BAAc,CAAC,QAAQ,CAAC,CAAC;AAEvF,mBAAQ,CAAC,EAAE,CAAkB,oBAAiB,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,IAAI,2BAAiB,CAC7F,uBAAU,EACV,gBAAU,EACV,cAAQ,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAC5C,KAAK,EACL,CAAC,CACD,CAAC,CAAC;AAEH,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC;KACzE,6BAA6B,CAAC,2BAAa,EAAE,0BAAc,CAAC,QAAQ,CAAC,CAAC;AAExE,mBAAQ,CAAC,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC;KACzE,6BAA6B,CAAC,iCAAmB,EAAE,0BAAc,CAAC,QAAQ,CAAC,CAAC;AAE9E,kCAAkC;AAClC,mBAAQ,CAAC,EAAE,CAA2B,oBAAyB,CAAC,gBAAgB,CAAC,CAAC,uBAAuB,CACxG,IAAI,8BAAoB,CAAC,oBAAoB,EAAE,gBAAU,EAAE,cAAQ,CAAC,kBAAkB,EAAE,UAAU,CAAC,EAAE;IACpG,OAAO,EAAE,CAAC;IACV,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE;IAC/D,KAAK,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE;IACjE,GAAG,EAAE,EAAE,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,iBAAM,CAAC,KAAK,GAAG,kBAAO,CAAC,KAAK,EAAE;CAC/D,CAAC,EACF,gBAAgB,EAChB,cAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CACxB,CAAC;AAEF,mBAAQ,CAAC,EAAE,CAAyB,kCAAuB,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC;IAChG,EAAE,EAAE,KAAK;IACT,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,cAAQ,CAAC,uBAAuB,EAAE,KAAK,CAAC;IAC/C,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,yBAAyB,EAAE;YAC1B,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,cAAQ,CAAC,qBAAqB,EAAE,sEAAsE,CAAC;YACpH,OAAO,EAAE,KAAK;SACd;QACD,uBAAuB,EAAE;YACxB,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,cAAQ,CAAC,kBAAkB,EAAE,oIAAoI,CAAC;YAC/K,OAAO,EAAE,EAAE;SACX;QACD,qBAAqB,EAAE;YACtB,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC;YAC3C,OAAO,EAAE,KAAK;YACd,WAAW,EAAE,cAAQ,CAAC,iBAAiB,EAAE,0CAA0C,CAAC;SACpF;QACD,gCAAgC,EAAE;YACjC,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACrB,OAAO,EAAE,CAAC;YACV,WAAW,EAAE,cAAQ,CAAC,iBAAiB,EAAE,0EAA0E,CAAC;SACpH;QACD,uBAAuB,EAAE;YACxB,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,cAAQ,CAAC,mBAAmB,EAAE,gFAAgF,CAAC;YAC5H,OAAO,EAAE,KAAK;SACd;KACD;CACD,CAAC,CAAC;AAEH,YAAY;AAEZ,sBAAY,CAAC,cAAc,CAAC,gBAAM,CAAC,eAAe,EAAE;IACnD,KAAK,EAAE,SAAS;IAChB,OAAO,EAAE;QACR,EAAE,EAAE,gBAAU;QACd,KAAK,EAAE,cAAQ,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,OAAO,CAAC;KAClF;IACD,KAAK,EAAE,CAAC;CACR,CAAC,CAAC;AAEH,yCAAmB,CAAC,gCAAgC,CAAC;IACpD,EAAE,EAAE,iBAAiB;IACrB,WAAW,EAAE,EAAE,WAAW,EAAE,cAAQ,CAAC,YAAY,EAAE,mBAAmB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IACnF,MAAM,EAAE,sCAAgB,CAAC,gBAAgB;IACzC,IAAI,EAAE,IAAI,kCAAqB,CAAC,eAAe,CAAC;IAChD,OAAO,EAAE,iBAAM,CAAC,OAAO,GAAG,kBAAO,CAAC,KAAK;IACvC,OAAO,EAAE,UAAA,QAAQ;QAChB,IAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,+BAAkB,CAAC,CAAC;QAC3D,IAAM,OAAO,GAAG,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACrE,IAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAiB,eAAe,CAAC,CAAC;QAErE,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,kBAAkB,EAAE;YAC3D,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC7B;QAED,IAAM,EAAE,GAAG,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACrD,IAAM,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,kBAAkB,CAAC,SAAS,CAAC;QAE9D,IAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,0BAAe,CAAC,CAAC;QACrD,OAAO,cAAc,CAAC,cAAc,OAA7B,cAAc,GAAgB,EAAE,SAAK,CAAC,IAAI,IAAI,EAAE,CAAC,GAAE;IAC3D,CAAC;CACD,CAAC,CAAC;AAEH,8BAAiB,CAAC,iBAAW,EAAE,uBAAU,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { DirtyDiffWorkbenchController } from './dirtydiffDecorator';\nimport { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor, ShowViewletAction } from 'vs/workbench/browser/viewlet';\nimport { VIEWLET_ID, ISCMRepository, ISCMService } from 'vs/workbench/contrib/scm/common/scm';\nimport { IWorkbenchActionRegistry, Extensions as WorkbenchActionExtensions } from 'vs/workbench/common/actions';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { SyncActionDescriptor, MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { StatusUpdater, StatusBarController } from './scmActivity';\nimport { SCMViewlet } from 'vs/workbench/contrib/scm/browser/scmViewlet';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ContextKeyDefinedExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { SCMService } from 'vs/workbench/contrib/scm/common/scmService';\n\nclass OpenSCMViewletAction extends ShowViewletAction {\n\n\tstatic readonly ID = VIEWLET_ID;\n\tstatic LABEL = localize('toggleGitViewlet', \"Show Git\");\n\n\tconstructor(id: string, label: string, @IViewletService viewletService: IViewletService, @IEditorGroupsService editorGroupService: IEditorGroupsService, @IWorkbenchLayoutService layoutService: IWorkbenchLayoutService) {\n\t\tsuper(id, label, VIEWLET_ID, viewletService, editorGroupService, layoutService);\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(DirtyDiffWorkbenchController, LifecyclePhase.Restored);\n\nRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).registerViewlet(new ViewletDescriptor(\n\tSCMViewlet,\n\tVIEWLET_ID,\n\tlocalize('source control', \"Source Control\"),\n\t'scm',\n\t2\n));\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(StatusUpdater, LifecyclePhase.Restored);\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(StatusBarController, LifecyclePhase.Restored);\n\n// Register Action to Open Viewlet\nRegistry.as<IWorkbenchActionRegistry>(WorkbenchActionExtensions.WorkbenchActions).registerWorkbenchAction(\n\tnew SyncActionDescriptor(OpenSCMViewletAction, VIEWLET_ID, localize('toggleSCMViewlet', \"Show SCM\"), {\n\t\tprimary: 0,\n\t\twin: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_G },\n\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_G },\n\t\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KEY_G }\n\t}),\n\t'View: Show SCM',\n\tlocalize('view', \"View\")\n);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\tid: 'scm',\n\torder: 5,\n\ttitle: localize('scmConfigurationTitle', \"SCM\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'scm.alwaysShowProviders': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: localize('alwaysShowProviders', \"Controls whether to always show the Source Control Provider section.\"),\n\t\t\tdefault: false\n\t\t},\n\t\t'scm.providers.visible': {\n\t\t\ttype: 'number',\n\t\t\tdescription: localize('providersVisible', \"Controls how many providers are visible in the Source Control Provider section. Set to `0` to be able to manually resize the view.\"),\n\t\t\tdefault: 10\n\t\t},\n\t\t'scm.diffDecorations': {\n\t\t\ttype: 'string',\n\t\t\tenum: ['all', 'gutter', 'overview', 'none'],\n\t\t\tdefault: 'all',\n\t\t\tdescription: localize('diffDecorations', \"Controls diff decorations in the editor.\")\n\t\t},\n\t\t'scm.diffDecorationsGutterWidth': {\n\t\t\ttype: 'number',\n\t\t\tenum: [1, 2, 3, 4, 5],\n\t\t\tdefault: 3,\n\t\t\tdescription: localize('diffGutterWidth', \"Controls the width(px) of diff decorations in gutter (added & modified).\")\n\t\t},\n\t\t'scm.alwaysShowActions': {\n\t\t\ttype: 'boolean',\n\t\t\tdescription: localize('alwaysShowActions', \"Controls whether inline actions are always visible in the Source Control view.\"),\n\t\t\tdefault: false\n\t\t}\n\t}\n});\n\n// View menu\n\nMenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {\n\tgroup: '3_views',\n\tcommand: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: localize({ key: 'miViewSCM', comment: ['&& denotes a mnemonic'] }, \"S&&CM\")\n\t},\n\torder: 3\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'scm.acceptInput',\n\tdescription: { description: localize('scm accept', \"SCM: Accept Input\"), args: [] },\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: new ContextKeyDefinedExpr('scmRepository'),\n\tprimary: KeyMod.CtrlCmd | KeyCode.Enter,\n\thandler: accessor => {\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst context = contextKeyService.getContext(document.activeElement);\n\t\tconst repository = context.getValue<ISCMRepository>('scmRepository');\n\n\t\tif (!repository || !repository.provider.acceptInputCommand) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst id = repository.provider.acceptInputCommand.id;\n\t\tconst args = repository.provider.acceptInputCommand.arguments;\n\n\t\tconst commandService = accessor.get(ICommandService);\n\t\treturn commandService.executeCommand(id, ...(args || []));\n\t}\n});\n\nregisterSingleton(ISCMService, SCMService);"]}]}