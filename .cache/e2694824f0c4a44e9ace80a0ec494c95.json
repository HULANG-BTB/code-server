{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputPanel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputPanel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/output\");\nvar nls = require(\"vs/nls\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar textResourceEditor_1 = require(\"vs/workbench/browser/parts/editor/textResourceEditor\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar outputActions_1 = require(\"vs/workbench/contrib/output/browser/outputActions\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar cursorEvents_1 = require(\"vs/editor/common/controller/cursorEvents\");\nvar OutputPanel = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputPanel, _super);\n    function OutputPanel(telemetryService, instantiationService, storageService, baseConfigurationService, textResourceConfigurationService, themeService, outputService, contextKeyService, editorGroupService, textFileService, editorService, windowService) {\n        var _this = _super.call(this, output_1.OUTPUT_PANEL_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, textFileService, editorService, windowService) || this;\n        _this.baseConfigurationService = baseConfigurationService;\n        _this.outputService = outputService;\n        _this.contextKeyService = contextKeyService;\n        _this.scopedInstantiationService = instantiationService;\n        return _this;\n    }\n    OutputPanel.prototype.getId = function () {\n        return output_1.OUTPUT_PANEL_ID;\n    };\n    OutputPanel.prototype.getTitle = function () {\n        return nls.localize('output', \"Output\");\n    };\n    OutputPanel.prototype.getActions = function () {\n        var _this = this;\n        if (!this.actions) {\n            this.actions = [\n                this.instantiationService.createInstance(outputActions_1.SwitchOutputAction),\n                this.instantiationService.createInstance(outputActions_1.ClearOutputAction, outputActions_1.ClearOutputAction.ID, outputActions_1.ClearOutputAction.LABEL),\n                this.instantiationService.createInstance(outputActions_1.ToggleOrSetOutputScrollLockAction, outputActions_1.ToggleOrSetOutputScrollLockAction.ID, outputActions_1.ToggleOrSetOutputScrollLockAction.LABEL),\n                this.instantiationService.createInstance(outputActions_1.OpenLogOutputFile)\n            ];\n            this.actions.forEach(function (a) { return _this._register(a); });\n        }\n        return this.actions;\n    };\n    OutputPanel.prototype.getActionItem = function (action) {\n        if (action.id === outputActions_1.SwitchOutputAction.ID) {\n            return this.instantiationService.createInstance(outputActions_1.SwitchOutputActionItem, action);\n        }\n        return _super.prototype.getActionItem.call(this, action);\n    };\n    OutputPanel.prototype.getConfigurationOverrides = function () {\n        var options = _super.prototype.getConfigurationOverrides.call(this);\n        options.wordWrap = 'on'; // all output editors wrap\n        options.lineNumbers = 'off'; // all output editors hide line numbers\n        options.glyphMargin = false;\n        options.lineDecorationsWidth = 20;\n        options.rulers = [];\n        options.folding = false;\n        options.scrollBeyondLastLine = false;\n        options.renderLineHighlight = 'none';\n        options.minimap = { enabled: false };\n        var outputConfig = this.baseConfigurationService.getValue('[Log]');\n        if (outputConfig) {\n            if (outputConfig['editor.minimap.enabled']) {\n                options.minimap = { enabled: true };\n            }\n            if ('editor.wordWrap' in outputConfig) {\n                options.wordWrap = outputConfig['editor.wordWrap'];\n            }\n        }\n        return options;\n    };\n    OutputPanel.prototype.getAriaLabel = function () {\n        var channel = this.outputService.getActiveChannel();\n        return channel ? nls.localize('outputPanelWithInputAriaLabel', \"{0}, Output panel\", channel.label) : nls.localize('outputPanelAriaLabel', \"Output panel\");\n    };\n    OutputPanel.prototype.setInput = function (input, options, token) {\n        var _this = this;\n        this._focus = !options.preserveFocus;\n        if (input.matches(this.input)) {\n            return Promise.resolve(undefined);\n        }\n        if (this.input) {\n            // Dispose previous input (Output panel is not a workbench editor)\n            this.input.dispose();\n        }\n        return _super.prototype.setInput.call(this, input, options, token).then(function () {\n            if (_this._focus) {\n                _this.focus();\n            }\n            _this.revealLastLine();\n        });\n    };\n    OutputPanel.prototype.clearInput = function () {\n        if (this.input) {\n            // Dispose current input (Output panel is not a workbench editor)\n            this.input.dispose();\n        }\n        _super.prototype.clearInput.call(this);\n    };\n    OutputPanel.prototype.createEditor = function (parent) {\n        var _this = this;\n        // First create the scoped instantiation service and only then construct the editor using the scoped service\n        var scopedContextKeyService = this._register(this.contextKeyService.createScoped(parent));\n        this.scopedInstantiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, scopedContextKeyService]));\n        _super.prototype.createEditor.call(this, parent);\n        output_1.CONTEXT_IN_OUTPUT.bindTo(scopedContextKeyService).set(true);\n        var codeEditor = this.getControl();\n        codeEditor.onDidChangeCursorPosition(function (e) {\n            if (e.reason !== cursorEvents_1.CursorChangeReason.Explicit) {\n                return;\n            }\n            var model = codeEditor.getModel();\n            if (model) {\n                var newPositionLine = e.position.lineNumber;\n                var lastLine = model.getLineCount();\n                var newLockState = lastLine !== newPositionLine;\n                var lockAction = _this.actions.filter(function (action) { return action.id === outputActions_1.ToggleOrSetOutputScrollLockAction.ID; })[0];\n                lockAction.run(newLockState);\n            }\n        });\n    };\n    Object.defineProperty(OutputPanel.prototype, \"instantiationService\", {\n        get: function () {\n            return this.scopedInstantiationService;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    OutputPanel = tslib_1.__decorate([\n        tslib_1.__param(0, telemetry_1.ITelemetryService),\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, storage_1.IStorageService),\n        tslib_1.__param(3, configuration_1.IConfigurationService),\n        tslib_1.__param(4, resourceConfiguration_1.ITextResourceConfigurationService),\n        tslib_1.__param(5, themeService_1.IThemeService),\n        tslib_1.__param(6, output_1.IOutputService),\n        tslib_1.__param(7, contextkey_1.IContextKeyService),\n        tslib_1.__param(8, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(9, textfiles_1.ITextFileService),\n        tslib_1.__param(10, editorService_1.IEditorService),\n        tslib_1.__param(11, windows_1.IWindowService)\n    ], OutputPanel);\n    return OutputPanel;\n}(textResourceEditor_1.AbstractTextResourceEditor));\nexports.OutputPanel = OutputPanel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputPanel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/output/browser/outputPanel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/output';\nimport * as nls from 'vs/nls';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { IActionItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { EditorInput, EditorOptions } from 'vs/workbench/common/editor';\nimport { AbstractTextResourceEditor } from 'vs/workbench/browser/parts/editor/textResourceEditor';\nimport { OUTPUT_PANEL_ID, IOutputService, CONTEXT_IN_OUTPUT } from 'vs/workbench/contrib/output/common/output';\nimport { SwitchOutputAction, SwitchOutputActionItem, ClearOutputAction, ToggleOrSetOutputScrollLockAction, OpenLogOutputFile } from 'vs/workbench/contrib/output/browser/outputActions';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { CursorChangeReason } from 'vs/editor/common/controller/cursorEvents';\n\nexport class OutputPanel extends AbstractTextResourceEditor {\n\tprivate actions: IAction[];\n\tprivate scopedInstantiationService: IInstantiationService;\n\tprivate _focus: boolean;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService private readonly baseConfigurationService: IConfigurationService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper(OUTPUT_PANEL_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, textFileService, editorService, windowService);\n\n\t\tthis.scopedInstantiationService = instantiationService;\n\t}\n\n\tpublic getId(): string {\n\t\treturn OUTPUT_PANEL_ID;\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn nls.localize('output', \"Output\");\n\t}\n\n\tpublic getActions(): IAction[] {\n\t\tif (!this.actions) {\n\t\t\tthis.actions = [\n\t\t\t\tthis.instantiationService.createInstance(SwitchOutputAction),\n\t\t\t\tthis.instantiationService.createInstance(ClearOutputAction, ClearOutputAction.ID, ClearOutputAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(ToggleOrSetOutputScrollLockAction, ToggleOrSetOutputScrollLockAction.ID, ToggleOrSetOutputScrollLockAction.LABEL),\n\t\t\t\tthis.instantiationService.createInstance(OpenLogOutputFile)\n\t\t\t];\n\n\t\t\tthis.actions.forEach(a => this._register(a));\n\t\t}\n\n\t\treturn this.actions;\n\t}\n\n\tpublic getActionItem(action: Action): IActionItem | undefined {\n\t\tif (action.id === SwitchOutputAction.ID) {\n\t\t\treturn this.instantiationService.createInstance(SwitchOutputActionItem, action);\n\t\t}\n\n\t\treturn super.getActionItem(action);\n\t}\n\n\tprotected getConfigurationOverrides(): IEditorOptions {\n\t\tconst options = super.getConfigurationOverrides();\n\t\toptions.wordWrap = 'on';\t\t\t\t// all output editors wrap\n\t\toptions.lineNumbers = 'off';\t\t\t// all output editors hide line numbers\n\t\toptions.glyphMargin = false;\n\t\toptions.lineDecorationsWidth = 20;\n\t\toptions.rulers = [];\n\t\toptions.folding = false;\n\t\toptions.scrollBeyondLastLine = false;\n\t\toptions.renderLineHighlight = 'none';\n\t\toptions.minimap = { enabled: false };\n\n\t\tconst outputConfig = this.baseConfigurationService.getValue('[Log]');\n\t\tif (outputConfig) {\n\t\t\tif (outputConfig['editor.minimap.enabled']) {\n\t\t\t\toptions.minimap = { enabled: true };\n\t\t\t}\n\t\t\tif ('editor.wordWrap' in outputConfig) {\n\t\t\t\toptions.wordWrap = outputConfig['editor.wordWrap'];\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\tconst channel = this.outputService.getActiveChannel();\n\n\t\treturn channel ? nls.localize('outputPanelWithInputAriaLabel', \"{0}, Output panel\", channel.label) : nls.localize('outputPanelAriaLabel', \"Output panel\");\n\t}\n\n\tpublic setInput(input: EditorInput, options: EditorOptions, token: CancellationToken): Promise<void> {\n\t\tthis._focus = !options.preserveFocus;\n\t\tif (input.matches(this.input)) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tif (this.input) {\n\t\t\t// Dispose previous input (Output panel is not a workbench editor)\n\t\t\tthis.input.dispose();\n\t\t}\n\t\treturn super.setInput(input, options, token).then(() => {\n\t\t\tif (this._focus) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t\tthis.revealLastLine();\n\t\t});\n\t}\n\n\tpublic clearInput(): void {\n\t\tif (this.input) {\n\t\t\t// Dispose current input (Output panel is not a workbench editor)\n\t\t\tthis.input.dispose();\n\t\t}\n\t\tsuper.clearInput();\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\t\t// First create the scoped instantiation service and only then construct the editor using the scoped service\n\t\tconst scopedContextKeyService = this._register(this.contextKeyService.createScoped(parent));\n\t\tthis.scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection([IContextKeyService, scopedContextKeyService]));\n\t\tsuper.createEditor(parent);\n\n\t\tCONTEXT_IN_OUTPUT.bindTo(scopedContextKeyService).set(true);\n\n\t\tconst codeEditor = <ICodeEditor>this.getControl();\n\t\tcodeEditor.onDidChangeCursorPosition((e) => {\n\t\t\tif (e.reason !== CursorChangeReason.Explicit) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = codeEditor.getModel();\n\t\t\tif (model) {\n\t\t\t\tconst newPositionLine = e.position.lineNumber;\n\t\t\t\tconst lastLine = model.getLineCount();\n\t\t\t\tconst newLockState = lastLine !== newPositionLine;\n\t\t\t\tconst lockAction = this.actions.filter((action) => action.id === ToggleOrSetOutputScrollLockAction.ID)[0];\n\t\t\t\tlockAction.run(newLockState);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic get instantiationService(): IInstantiationService {\n\t\treturn this.scopedInstantiationService;\n\t}\n}\n"]}]}