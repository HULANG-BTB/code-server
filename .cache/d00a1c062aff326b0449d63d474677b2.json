{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\n/**\n * The action bar contributor allows to add actions to an actionbar in a given context.\n */\nvar ActionBarContributor = /** @class */ (function () {\n    function ActionBarContributor() {\n    }\n    /**\n     * Returns true if this contributor has actions for the given context.\n     */\n    ActionBarContributor.prototype.hasActions = function (context) {\n        return false;\n    };\n    /**\n     * Returns an array of primary actions in the given context.\n     */\n    ActionBarContributor.prototype.getActions = function (context) {\n        return [];\n    };\n    return ActionBarContributor;\n}());\nexports.ActionBarContributor = ActionBarContributor;\n/**\n * Some predefined scopes to contribute actions to\n */\nexports.Scope = {\n    /**\n     * Actions inside tree widgets.\n     */\n    VIEWER: 'viewer'\n};\n/**\n * The ContributableActionProvider leverages the actionbar contribution model to find actions.\n */\nvar ContributableActionProvider = /** @class */ (function () {\n    function ContributableActionProvider() {\n        this.registry = platform_1.Registry.as(exports.Extensions.Actionbar);\n    }\n    ContributableActionProvider.prototype.toContext = function (tree, element) {\n        return {\n            viewer: tree,\n            element: element\n        };\n    };\n    ContributableActionProvider.prototype.hasActions = function (tree, element) {\n        var context = this.toContext(tree, element);\n        var contributors = this.registry.getActionBarContributors(exports.Scope.VIEWER);\n        for (var _i = 0, contributors_1 = contributors; _i < contributors_1.length; _i++) {\n            var contributor = contributors_1[_i];\n            if (contributor.hasActions(context)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ContributableActionProvider.prototype.getActions = function (tree, element) {\n        var actions = [];\n        var context = this.toContext(tree, element);\n        // Collect Actions\n        var contributors = this.registry.getActionBarContributors(exports.Scope.VIEWER);\n        for (var _i = 0, contributors_2 = contributors; _i < contributors_2.length; _i++) {\n            var contributor = contributors_2[_i];\n            if (contributor.hasActions(context)) {\n                actions.push.apply(actions, contributor.getActions(context));\n            }\n        }\n        return prepareActions(actions);\n    };\n    return ContributableActionProvider;\n}());\nexports.ContributableActionProvider = ContributableActionProvider;\n// Helper function used in parts to massage actions before showing in action areas\nfunction prepareActions(actions) {\n    if (!actions.length) {\n        return actions;\n    }\n    // Clean up leading separators\n    var firstIndexOfAction = -1;\n    for (var i = 0; i < actions.length; i++) {\n        if (actions[i].id === actionbar_1.Separator.ID) {\n            continue;\n        }\n        firstIndexOfAction = i;\n        break;\n    }\n    if (firstIndexOfAction === -1) {\n        return [];\n    }\n    actions = actions.slice(firstIndexOfAction);\n    // Clean up trailing separators\n    for (var h = actions.length - 1; h >= 0; h--) {\n        var isSeparator = actions[h].id === actionbar_1.Separator.ID;\n        if (isSeparator) {\n            actions.splice(h, 1);\n        }\n        else {\n            break;\n        }\n    }\n    // Clean up separator duplicates\n    var foundAction = false;\n    for (var k = actions.length - 1; k >= 0; k--) {\n        var isSeparator = actions[k].id === actionbar_1.Separator.ID;\n        if (isSeparator && !foundAction) {\n            actions.splice(k, 1);\n        }\n        else if (!isSeparator) {\n            foundAction = true;\n        }\n        else if (isSeparator) {\n            foundAction = false;\n        }\n    }\n    return actions;\n}\nexports.prepareActions = prepareActions;\nexports.Extensions = {\n    Actionbar: 'workbench.contributions.actionbar'\n};\nvar ActionBarRegistry = /** @class */ (function () {\n    function ActionBarRegistry() {\n        this.actionBarContributorConstructors = [];\n        this.actionBarContributorInstances = Object.create(null);\n    }\n    ActionBarRegistry.prototype.start = function (accessor) {\n        this.instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        while (this.actionBarContributorConstructors.length > 0) {\n            var entry = this.actionBarContributorConstructors.shift();\n            this.createActionBarContributor(entry.scope, entry.ctor);\n        }\n    };\n    ActionBarRegistry.prototype.createActionBarContributor = function (scope, ctor) {\n        var instance = this.instantiationService.createInstance(ctor);\n        var target = this.actionBarContributorInstances[scope];\n        if (!target) {\n            target = this.actionBarContributorInstances[scope] = [];\n        }\n        target.push(instance);\n    };\n    ActionBarRegistry.prototype.getContributors = function (scope) {\n        return this.actionBarContributorInstances[scope] || [];\n    };\n    ActionBarRegistry.prototype.registerActionBarContributor = function (scope, ctor) {\n        if (!this.instantiationService) {\n            this.actionBarContributorConstructors.push({\n                scope: scope,\n                ctor: ctor\n            });\n        }\n        else {\n            this.createActionBarContributor(scope, ctor);\n        }\n    };\n    ActionBarRegistry.prototype.getActionBarContributors = function (scope) {\n        return this.getContributors(scope).slice(0);\n    };\n    return ActionBarRegistry;\n}());\nplatform_1.Registry.add(exports.Extensions.Actionbar, new ActionBarRegistry());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/actions.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IAction } from 'vs/base/common/actions';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ITree, IActionProvider } from 'vs/base/parts/tree/browser/tree';\nimport { IInstantiationService, IConstructorSignature0, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\n\n/**\n * The action bar contributor allows to add actions to an actionbar in a given context.\n */\nexport class ActionBarContributor {\n\n\t/**\n\t * Returns true if this contributor has actions for the given context.\n\t */\n\thasActions(context: any): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns an array of primary actions in the given context.\n\t */\n\tgetActions(context: any): IAction[] {\n\t\treturn [];\n\t}\n}\n\n/**\n * Some predefined scopes to contribute actions to\n */\nexport const Scope = {\n\n\t/**\n\t * Actions inside tree widgets.\n\t */\n\tVIEWER: 'viewer'\n};\n\n/**\n * The ContributableActionProvider leverages the actionbar contribution model to find actions.\n */\nexport class ContributableActionProvider implements IActionProvider {\n\tprivate readonly registry: IActionBarRegistry = Registry.as<IActionBarRegistry>(Extensions.Actionbar);\n\n\tprivate toContext(tree: ITree, element: any): any {\n\t\treturn {\n\t\t\tviewer: tree,\n\t\t\telement: element\n\t\t};\n\t}\n\n\thasActions(tree: ITree, element: any): boolean {\n\t\tconst context = this.toContext(tree, element);\n\n\t\tconst contributors = this.registry.getActionBarContributors(Scope.VIEWER);\n\t\tfor (const contributor of contributors) {\n\t\t\tif (contributor.hasActions(context)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetActions(tree: ITree, element: any): IAction[] {\n\t\tconst actions: IAction[] = [];\n\t\tconst context = this.toContext(tree, element);\n\n\t\t// Collect Actions\n\t\tconst contributors = this.registry.getActionBarContributors(Scope.VIEWER);\n\t\tfor (const contributor of contributors) {\n\t\t\tif (contributor.hasActions(context)) {\n\t\t\t\tactions.push(...contributor.getActions(context));\n\t\t\t}\n\t\t}\n\n\t\treturn prepareActions(actions);\n\t}\n}\n\n// Helper function used in parts to massage actions before showing in action areas\nexport function prepareActions(actions: IAction[]): IAction[] {\n\tif (!actions.length) {\n\t\treturn actions;\n\t}\n\n\t// Clean up leading separators\n\tlet firstIndexOfAction = -1;\n\tfor (let i = 0; i < actions.length; i++) {\n\t\tif (actions[i].id === Separator.ID) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfirstIndexOfAction = i;\n\t\tbreak;\n\t}\n\n\tif (firstIndexOfAction === -1) {\n\t\treturn [];\n\t}\n\n\tactions = actions.slice(firstIndexOfAction);\n\n\t// Clean up trailing separators\n\tfor (let h = actions.length - 1; h >= 0; h--) {\n\t\tconst isSeparator = actions[h].id === Separator.ID;\n\t\tif (isSeparator) {\n\t\t\tactions.splice(h, 1);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Clean up separator duplicates\n\tlet foundAction = false;\n\tfor (let k = actions.length - 1; k >= 0; k--) {\n\t\tconst isSeparator = actions[k].id === Separator.ID;\n\t\tif (isSeparator && !foundAction) {\n\t\t\tactions.splice(k, 1);\n\t\t} else if (!isSeparator) {\n\t\t\tfoundAction = true;\n\t\t} else if (isSeparator) {\n\t\t\tfoundAction = false;\n\t\t}\n\t}\n\n\treturn actions;\n}\n\nexport const Extensions = {\n\tActionbar: 'workbench.contributions.actionbar'\n};\n\nexport interface IActionBarRegistry {\n\t/**\n\t * Registers an Actionbar contributor. It will be called to contribute actions to all the action bars\n\t * that are used in the Workbench in the given scope.\n\t */\n\tregisterActionBarContributor(scope: string, ctor: IConstructorSignature0<ActionBarContributor>): void;\n\n\t/**\n\t * Returns an array of registered action bar contributors known to the workbench for the given scope.\n\t */\n\tgetActionBarContributors(scope: string): ActionBarContributor[];\n\n\t/**\n\t * Starts the registry by providing the required services.\n\t */\n\tstart(accessor: ServicesAccessor): void;\n}\n\nclass ActionBarRegistry implements IActionBarRegistry {\n\tprivate readonly actionBarContributorConstructors: { scope: string; ctor: IConstructorSignature0<ActionBarContributor>; }[] = [];\n\tprivate readonly actionBarContributorInstances: { [scope: string]: ActionBarContributor[] } = Object.create(null);\n\tprivate instantiationService: IInstantiationService;\n\n\tstart(accessor: ServicesAccessor): void {\n\t\tthis.instantiationService = accessor.get(IInstantiationService);\n\n\t\twhile (this.actionBarContributorConstructors.length > 0) {\n\t\t\tconst entry = this.actionBarContributorConstructors.shift()!;\n\t\t\tthis.createActionBarContributor(entry.scope, entry.ctor);\n\t\t}\n\t}\n\n\tprivate createActionBarContributor(scope: string, ctor: IConstructorSignature0<ActionBarContributor>): void {\n\t\tconst instance = this.instantiationService.createInstance(ctor);\n\t\tlet target = this.actionBarContributorInstances[scope];\n\t\tif (!target) {\n\t\t\ttarget = this.actionBarContributorInstances[scope] = [];\n\t\t}\n\t\ttarget.push(instance);\n\t}\n\n\tprivate getContributors(scope: string): ActionBarContributor[] {\n\t\treturn this.actionBarContributorInstances[scope] || [];\n\t}\n\n\tregisterActionBarContributor(scope: string, ctor: IConstructorSignature0<ActionBarContributor>): void {\n\t\tif (!this.instantiationService) {\n\t\t\tthis.actionBarContributorConstructors.push({\n\t\t\t\tscope: scope,\n\t\t\t\tctor: ctor\n\t\t\t});\n\t\t} else {\n\t\t\tthis.createActionBarContributor(scope, ctor);\n\t\t}\n\t}\n\n\tgetActionBarContributors(scope: string): ActionBarContributor[] {\n\t\treturn this.getContributors(scope).slice(0);\n\t}\n}\n\nRegistry.add(Extensions.Actionbar, new ActionBarRegistry());\n"]}]}