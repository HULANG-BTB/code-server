{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar ReplaceCommand = /** @class */ (function () {\n    function ReplaceCommand(range, text, insertsAutoWhitespace) {\n        if (insertsAutoWhitespace === void 0) { insertsAutoWhitespace = false; }\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    ReplaceCommand.prototype.getEditOperations = function (model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    };\n    ReplaceCommand.prototype.computeCursorState = function (model, helper) {\n        var inverseEditOperations = helper.getInverseEditOperations();\n        var srcRange = inverseEditOperations[0].range;\n        return new selection_1.Selection(srcRange.endLineNumber, srcRange.endColumn, srcRange.endLineNumber, srcRange.endColumn);\n    };\n    return ReplaceCommand;\n}());\nexports.ReplaceCommand = ReplaceCommand;\nvar ReplaceCommandWithoutChangingPosition = /** @class */ (function () {\n    function ReplaceCommandWithoutChangingPosition(range, text, insertsAutoWhitespace) {\n        if (insertsAutoWhitespace === void 0) { insertsAutoWhitespace = false; }\n        this._range = range;\n        this._text = text;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    ReplaceCommandWithoutChangingPosition.prototype.getEditOperations = function (model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    };\n    ReplaceCommandWithoutChangingPosition.prototype.computeCursorState = function (model, helper) {\n        var inverseEditOperations = helper.getInverseEditOperations();\n        var srcRange = inverseEditOperations[0].range;\n        return new selection_1.Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.startLineNumber, srcRange.startColumn);\n    };\n    return ReplaceCommandWithoutChangingPosition;\n}());\nexports.ReplaceCommandWithoutChangingPosition = ReplaceCommandWithoutChangingPosition;\nvar ReplaceCommandWithOffsetCursorState = /** @class */ (function () {\n    function ReplaceCommandWithOffsetCursorState(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace) {\n        if (insertsAutoWhitespace === void 0) { insertsAutoWhitespace = false; }\n        this._range = range;\n        this._text = text;\n        this._columnDeltaOffset = columnDeltaOffset;\n        this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n        this.insertsAutoWhitespace = insertsAutoWhitespace;\n    }\n    ReplaceCommandWithOffsetCursorState.prototype.getEditOperations = function (model, builder) {\n        builder.addTrackedEditOperation(this._range, this._text);\n    };\n    ReplaceCommandWithOffsetCursorState.prototype.computeCursorState = function (model, helper) {\n        var inverseEditOperations = helper.getInverseEditOperations();\n        var srcRange = inverseEditOperations[0].range;\n        return new selection_1.Selection(srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset, srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset);\n    };\n    return ReplaceCommandWithOffsetCursorState;\n}());\nexports.ReplaceCommandWithOffsetCursorState = ReplaceCommandWithOffsetCursorState;\nvar ReplaceCommandThatPreservesSelection = /** @class */ (function () {\n    function ReplaceCommandThatPreservesSelection(editRange, text, initialSelection) {\n        this._range = editRange;\n        this._text = text;\n        this._initialSelection = initialSelection;\n    }\n    ReplaceCommandThatPreservesSelection.prototype.getEditOperations = function (model, builder) {\n        builder.addEditOperation(this._range, this._text);\n        this._selectionId = builder.trackSelection(this._initialSelection);\n    };\n    ReplaceCommandThatPreservesSelection.prototype.computeCursorState = function (model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    };\n    return ReplaceCommandThatPreservesSelection;\n}());\nexports.ReplaceCommandThatPreservesSelection = ReplaceCommandThatPreservesSelection;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/commands/replaceCommand.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class ReplaceCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet inverseEditOperations = helper.getInverseEditOperations();\n\t\tlet srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber,\n\t\t\tsrcRange.endColumn,\n\t\t\tsrcRange.endLineNumber,\n\t\t\tsrcRange.endColumn\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet inverseEditOperations = helper.getInverseEditOperations();\n\t\tlet srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.startLineNumber,\n\t\t\tsrcRange.startColumn,\n\t\t\tsrcRange.startLineNumber,\n\t\t\tsrcRange.startColumn\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet inverseEditOperations = helper.getInverseEditOperations();\n\t\tlet srcRange = inverseEditOperations[0].range;\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber + this._lineNumberDeltaOffset,\n\t\t\tsrcRange.endColumn + this._columnDeltaOffset,\n\t\t\tsrcRange.endLineNumber + this._lineNumberDeltaOffset,\n\t\t\tsrcRange.endColumn + this._columnDeltaOffset\n\t\t);\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate _selectionId: string;\n\n\tconstructor(editRange: Range, text: string, initialSelection: Selection) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addEditOperation(this._range, this._text);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId);\n\t}\n}\n"]}]}