{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/async\", \"vs/base/common/errors\", \"vs/base/common/lifecycle\", \"vs/base/common/event\", \"vs/base/browser/ui/actionbar/actionbar\", \"vs/workbench/services/viewlet/browser/viewlet\", \"vs/base/browser/dom\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/services/extensions/common/extensions\", \"../common/extensions\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActions\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/workbench/contrib/extensions/common/extensionsInput\", \"./extensionsViews\", \"vs/workbench/contrib/preferences/browser/preferencesActions\", \"vs/platform/progress/common/progress\", \"vs/workbench/services/editor/common/editorGroupsService\", \"vs/base/common/severity\", \"vs/workbench/services/activity/common/activity\", \"vs/platform/theme/common/themeService\", \"vs/platform/configuration/common/configuration\", \"vs/workbench/common/views\", \"vs/workbench/browser/parts/views/viewsViewlet\", \"vs/platform/storage/common/storage\", \"vs/platform/workspace/common/workspace\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/contextview/browser/contextView\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/platform/log/common/log\", \"vs/platform/notification/common/notification\", \"vs/platform/windows/common/windows\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/workbench/contrib/extensions/common/extensionQuery\", \"vs/workbench/contrib/codeEditor/browser/suggestEnabledInput/suggestEnabledInput\", \"vs/base/browser/ui/aria/aria\", \"vs/base/common/errorsWithActions\", \"vs/platform/environment/common/environment\", \"vs/platform/extensions/common/extensions\", \"vs/platform/registry/common/platform\", \"vs/css!./media/extensionsViewlet\"], function (require, exports, nls_1, async_1, errors_1, lifecycle_1, event_1, actionbar_1, viewlet_1, dom_1, telemetry_1, instantiation_1, extensions_1, extensions_2, extensionsActions_1, extensionManagement_1, extensionsInput_1, extensionsViews_1, preferencesActions_1, progress_1, editorGroupsService_1, severity_1, activity_1, themeService_1, configuration_1, views_1, viewsViewlet_1, storage_1, workspace_1, contextkey_1, contextView_1, extensionManagementUtil_1, log_1, notification_1, windows_1, layoutService_1, extensionQuery_1, suggestEnabledInput_1, aria_1, errorsWithActions_1, environment_1, extensions_3, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const NonEmptyWorkspaceContext = new contextkey_1.RawContextKey('nonEmptyWorkspace', false);\n    const SearchExtensionsContext = new contextkey_1.RawContextKey('searchExtensions', false);\n    const HasInstalledExtensionsContext = new contextkey_1.RawContextKey('hasInstalledExtensions', true);\n    const SearchBuiltInExtensionsContext = new contextkey_1.RawContextKey('searchBuiltInExtensions', false);\n    const RecommendedExtensionsContext = new contextkey_1.RawContextKey('recommendedExtensions', false);\n    const DefaultRecommendedExtensionsContext = new contextkey_1.RawContextKey('defaultRecommendedExtensions', false);\n    const GroupByServersContext = new contextkey_1.RawContextKey('groupByServersContext', false);\n    const viewIdNameMappings = {\n        'extensions.listView': nls_1.localize('marketPlace', \"Marketplace\"),\n        'extensions.enabledExtensionList': nls_1.localize('enabledExtensions', \"Enabled\"),\n        'extensions.disabledExtensionList': nls_1.localize('disabledExtensions', \"Disabled\"),\n        'extensions.popularExtensionsList': nls_1.localize('popularExtensions', \"Popular\"),\n        'extensions.recommendedList': nls_1.localize('recommendedExtensions', \"Recommended\"),\n        'extensions.otherrecommendedList': nls_1.localize('otherRecommendedExtensions', \"Other Recommendations\"),\n        'extensions.workspaceRecommendedList': nls_1.localize('workspaceRecommendedExtensions', \"Workspace Recommendations\"),\n        'extensions.builtInExtensionsList': nls_1.localize('builtInExtensions', \"Features\"),\n        'extensions.builtInThemesExtensionsList': nls_1.localize('builtInThemesExtensions', \"Themes\"),\n        'extensions.builtInBasicsExtensionsList': nls_1.localize('builtInBasicsExtensions', \"Programming Languages\"),\n    };\n    let ExtensionsViewletViewsContribution = class ExtensionsViewletViewsContribution {\n        constructor(extensionManagementServerService) {\n            this.extensionManagementServerService = extensionManagementServerService;\n            this.registerViews();\n        }\n        registerViews() {\n            let viewDescriptors = [];\n            viewDescriptors.push(this.createMarketPlaceExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createEnabledExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createDisabledExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createPopularExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createBuiltInExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createBuiltInBasicsExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createBuiltInThemesExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createDefaultRecommendedExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createOtherRecommendedExtensionsListViewDescriptor());\n            viewDescriptors.push(this.createWorkspaceRecommendedExtensionsListViewDescriptor());\n            if (this.extensionManagementServerService.remoteExtensionManagementServer) {\n                viewDescriptors.push(...this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.localExtensionManagementServer));\n                viewDescriptors.push(...this.createExtensionsViewDescriptorsForServer(this.extensionManagementServerService.remoteExtensionManagementServer));\n            }\n            platform_1.Registry.as(views_1.Extensions.ViewsRegistry).registerViews(viewDescriptors, extensions_2.VIEW_CONTAINER);\n        }\n        // View used for any kind of searching\n        createMarketPlaceExtensionsListViewDescriptor() {\n            const id = 'extensions.listView';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.ExtensionsListView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has('searchExtensions'), contextkey_1.ContextKeyExpr.not('searchInstalledExtensions'), contextkey_1.ContextKeyExpr.not('searchBuiltInExtensions'), contextkey_1.ContextKeyExpr.not('recommendedExtensions'), contextkey_1.ContextKeyExpr.not('groupByServersContext')),\n                weight: 100\n            };\n        }\n        // Separate view for enabled extensions required as we need to show enabled, disabled and recommended sections\n        // in the default view when there is no search text, but user has installed extensions.\n        createEnabledExtensionsListViewDescriptor() {\n            const id = 'extensions.enabledExtensionList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.EnabledExtensionsView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('hasInstalledExtensions')),\n                weight: 40,\n                canToggleVisibility: true,\n                order: 1\n            };\n        }\n        // Separate view for disabled extensions required as we need to show enabled, disabled and recommended sections\n        // in the default view when there is no search text, but user has installed extensions.\n        createDisabledExtensionsListViewDescriptor() {\n            const id = 'extensions.disabledExtensionList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.DisabledExtensionsView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('hasInstalledExtensions')),\n                weight: 10,\n                canToggleVisibility: true,\n                order: 3,\n                collapsed: true\n            };\n        }\n        // Separate view for popular extensions required as we need to show popular and recommended sections\n        // in the default view when there is no search text, and user has no installed extensions.\n        createPopularExtensionsListViewDescriptor() {\n            const id = 'extensions.popularExtensionsList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.ExtensionsListView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.not('hasInstalledExtensions')),\n                weight: 60,\n                order: 1\n            };\n        }\n        createExtensionsViewDescriptorsForServer(server) {\n            return [{\n                    id: `server.extensionsList.${server.authority}`,\n                    name: server.label,\n                    ctorDescriptor: { ctor: extensionsViews_1.GroupByServerExtensionsView },\n                    when: contextkey_1.ContextKeyExpr.has('groupByServersContext'),\n                    weight: 100\n                }];\n        }\n        // Separate view for recommended extensions required as we need to show it along with other views when there is no search text.\n        // When user has installed extensions, this is shown along with the views for enabled & disabled extensions\n        // When user has no installed extensions, this is shown along with the view for popular extensions\n        createDefaultRecommendedExtensionsListViewDescriptor() {\n            const id = 'extensions.recommendedList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.DefaultRecommendedExtensionsView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.not('searchExtensions'), contextkey_1.ContextKeyExpr.has('defaultRecommendedExtensions')),\n                weight: 40,\n                order: 2,\n                canToggleVisibility: true\n            };\n        }\n        // Separate view for recommedations that are not workspace recommendations.\n        // Shown along with view for workspace recommendations, when using the command that shows recommendations\n        createOtherRecommendedExtensionsListViewDescriptor() {\n            const id = 'extensions.otherrecommendedList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.RecommendedExtensionsView },\n                when: contextkey_1.ContextKeyExpr.has('recommendedExtensions'),\n                weight: 50,\n                canToggleVisibility: true,\n                order: 2\n            };\n        }\n        // Separate view for workspace recommendations.\n        // Shown along with view for other recommendations, when using the command that shows recommendations\n        createWorkspaceRecommendedExtensionsListViewDescriptor() {\n            const id = 'extensions.workspaceRecommendedList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.WorkspaceRecommendedExtensionsView },\n                when: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has('recommendedExtensions'), contextkey_1.ContextKeyExpr.has('nonEmptyWorkspace')),\n                weight: 50,\n                canToggleVisibility: true,\n                order: 1\n            };\n        }\n        createBuiltInExtensionsListViewDescriptor() {\n            const id = 'extensions.builtInExtensionsList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.BuiltInExtensionsView },\n                when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n                weight: 100,\n                canToggleVisibility: true\n            };\n        }\n        createBuiltInThemesExtensionsListViewDescriptor() {\n            const id = 'extensions.builtInThemesExtensionsList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.BuiltInThemesExtensionsView },\n                when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n                weight: 100,\n                canToggleVisibility: true\n            };\n        }\n        createBuiltInBasicsExtensionsListViewDescriptor() {\n            const id = 'extensions.builtInBasicsExtensionsList';\n            return {\n                id,\n                name: viewIdNameMappings[id],\n                ctorDescriptor: { ctor: extensionsViews_1.BuiltInBasicsExtensionsView },\n                when: contextkey_1.ContextKeyExpr.has('searchBuiltInExtensions'),\n                weight: 100,\n                canToggleVisibility: true\n            };\n        }\n    };\n    ExtensionsViewletViewsContribution = __decorate([\n        __param(0, extensionManagement_1.IExtensionManagementServerService)\n    ], ExtensionsViewletViewsContribution);\n    exports.ExtensionsViewletViewsContribution = ExtensionsViewletViewsContribution;\n    let ExtensionsViewlet = class ExtensionsViewlet extends viewsViewlet_1.ViewContainerViewlet {\n        constructor(layoutService, telemetryService, progressService, instantiationService, editorGroupService, extensionManagementService, notificationService, viewletService, themeService, configurationService, storageService, contextService, contextKeyService, contextMenuService, extensionService) {\n            super(extensions_2.VIEWLET_ID, `${extensions_2.VIEWLET_ID}.state`, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n            this.progressService = progressService;\n            this.editorGroupService = editorGroupService;\n            this.extensionManagementService = extensionManagementService;\n            this.notificationService = notificationService;\n            this.viewletService = viewletService;\n            this.disposables = [];\n            this.searchDelayer = new async_1.Delayer(500);\n            this.nonEmptyWorkspaceContextKey = NonEmptyWorkspaceContext.bindTo(contextKeyService);\n            this.searchExtensionsContextKey = SearchExtensionsContext.bindTo(contextKeyService);\n            this.hasInstalledExtensionsContextKey = HasInstalledExtensionsContext.bindTo(contextKeyService);\n            this.searchBuiltInExtensionsContextKey = SearchBuiltInExtensionsContext.bindTo(contextKeyService);\n            this.recommendedExtensionsContextKey = RecommendedExtensionsContext.bindTo(contextKeyService);\n            this.groupByServersContextKey = GroupByServersContext.bindTo(contextKeyService);\n            this.defaultRecommendedExtensionsContextKey = DefaultRecommendedExtensionsContext.bindTo(contextKeyService);\n            this.defaultRecommendedExtensionsContextKey.set(!this.configurationService.getValue(extensions_2.ShowRecommendationsOnlyOnDemandKey));\n            this.disposables.push(this.viewletService.onDidViewletOpen(this.onViewletOpen, this, this.disposables));\n            this.searchViewletState = this.getMemento(storage_1.StorageScope.WORKSPACE);\n            this.extensionManagementService.getInstalled(extensions_3.ExtensionType.User).then(result => {\n                this.hasInstalledExtensionsContextKey.set(result.length > 0);\n            });\n            this.configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration(extensions_2.AutoUpdateConfigurationKey)) {\n                    this.secondaryActions = null;\n                    this.updateTitleArea();\n                }\n                if (e.affectedKeys.indexOf(extensions_2.ShowRecommendationsOnlyOnDemandKey) > -1) {\n                    this.defaultRecommendedExtensionsContextKey.set(!this.configurationService.getValue(extensions_2.ShowRecommendationsOnlyOnDemandKey));\n                }\n            }, this, this.disposables);\n        }\n        create(parent) {\n            dom_1.addClass(parent, 'extensions-viewlet');\n            this.root = parent;\n            const header = dom_1.append(this.root, dom_1.$('.header'));\n            const placeholder = nls_1.localize('searchExtensions', \"Search Extensions in Marketplace\");\n            const searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';\n            this.searchBox = this.instantiationService.createInstance(suggestEnabledInput_1.SuggestEnabledInput, `${extensions_2.VIEWLET_ID}.searchbox`, header, {\n                triggerCharacters: ['@'],\n                sortKey: (item) => {\n                    if (item.indexOf(':') === -1) {\n                        return 'a';\n                    }\n                    else if (/ext:/.test(item) || /tag:/.test(item)) {\n                        return 'b';\n                    }\n                    else if (/sort:/.test(item)) {\n                        return 'c';\n                    }\n                    else {\n                        return 'd';\n                    }\n                },\n                provideResults: (query) => extensionQuery_1.Query.suggestions(query)\n            }, placeholder, 'extensions:searchinput', { placeholderText: placeholder, value: searchValue });\n            if (this.searchBox.getValue()) {\n                this.triggerSearch();\n            }\n            this.disposables.push(suggestEnabledInput_1.attachSuggestEnabledInputBoxStyler(this.searchBox, this.themeService));\n            this.disposables.push(this.searchBox);\n            const _searchChange = new event_1.Emitter();\n            this.onSearchChange = _searchChange.event;\n            this.searchBox.onInputDidChange(() => {\n                this.triggerSearch();\n                _searchChange.fire(this.searchBox.getValue());\n            }, this, this.disposables);\n            this.searchBox.onShouldFocusResults(() => this.focusListView(), this, this.disposables);\n            this._register(this.onDidChangeVisibility(visible => {\n                if (visible) {\n                    this.searchBox.focus();\n                }\n            }));\n            this.extensionsBox = dom_1.append(this.root, dom_1.$('.extensions'));\n            super.create(this.extensionsBox);\n        }\n        focus() {\n            this.searchBox.focus();\n        }\n        layout(dimension) {\n            dom_1.toggleClass(this.root, 'narrow', dimension.width <= 300);\n            this.searchBox.layout({ height: 20, width: dimension.width - 34 });\n            super.layout(new dom_1.Dimension(dimension.width, dimension.height - 38));\n        }\n        getOptimalWidth() {\n            return 400;\n        }\n        getActions() {\n            if (!this.primaryActions) {\n                this.primaryActions = [\n                    this.instantiationService.createInstance(extensionsActions_1.ClearExtensionsInputAction, extensionsActions_1.ClearExtensionsInputAction.ID, extensionsActions_1.ClearExtensionsInputAction.LABEL, this.onSearchChange)\n                ];\n            }\n            return this.primaryActions;\n        }\n        getSecondaryActions() {\n            if (!this.secondaryActions) {\n                this.secondaryActions = [\n                    this.instantiationService.createInstance(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowEnabledExtensionsAction, extensionsActions_1.ShowEnabledExtensionsAction.ID, extensionsActions_1.ShowEnabledExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowDisabledExtensionsAction, extensionsActions_1.ShowDisabledExtensionsAction.ID, extensionsActions_1.ShowDisabledExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowBuiltInExtensionsAction, extensionsActions_1.ShowBuiltInExtensionsAction.ID, extensionsActions_1.ShowBuiltInExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL),\n                    new actionbar_1.Separator(),\n                    this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.install', nls_1.localize('sort by installs', \"Sort By: Install Count\"), this.onSearchChange, 'installs'),\n                    this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.rating', nls_1.localize('sort by rating', \"Sort By: Rating\"), this.onSearchChange, 'rating'),\n                    this.instantiationService.createInstance(extensionsActions_1.ChangeSortAction, 'extensions.sort.name', nls_1.localize('sort by name', \"Sort By: Name\"), this.onSearchChange, 'name'),\n                    new actionbar_1.Separator(),\n                    this.instantiationService.createInstance(extensionsActions_1.CheckForUpdatesAction, extensionsActions_1.CheckForUpdatesAction.ID, extensionsActions_1.CheckForUpdatesAction.LABEL),\n                    ...(this.configurationService.getValue(extensions_2.AutoUpdateConfigurationKey) ? [this.instantiationService.createInstance(extensionsActions_1.DisableAutoUpdateAction, extensionsActions_1.DisableAutoUpdateAction.ID, extensionsActions_1.DisableAutoUpdateAction.LABEL)] : [this.instantiationService.createInstance(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL), this.instantiationService.createInstance(extensionsActions_1.EnableAutoUpdateAction, extensionsActions_1.EnableAutoUpdateAction.ID, extensionsActions_1.EnableAutoUpdateAction.LABEL)]),\n                    this.instantiationService.createInstance(extensionsActions_1.InstallVSIXAction, extensionsActions_1.InstallVSIXAction.ID, extensionsActions_1.InstallVSIXAction.LABEL),\n                    new actionbar_1.Separator(),\n                    this.instantiationService.createInstance(extensionsActions_1.DisableAllAction, extensionsActions_1.DisableAllAction.ID, extensionsActions_1.DisableAllAction.LABEL),\n                    this.instantiationService.createInstance(extensionsActions_1.EnableAllAction, extensionsActions_1.EnableAllAction.ID, extensionsActions_1.EnableAllAction.LABEL)\n                ];\n            }\n            return this.secondaryActions;\n        }\n        search(value) {\n            const event = new Event('input', { bubbles: true });\n            event.immediate = true;\n            this.searchBox.setValue(value);\n        }\n        triggerSearch(immediate = false) {\n            this.searchDelayer.trigger(() => this.doSearch(), immediate || !this.searchBox.getValue() ? 0 : 500).then(undefined, err => this.onError(err));\n        }\n        normalizedQuery() {\n            return this.searchBox.getValue().replace(/@category/g, 'category').replace(/@tag:/g, 'tag:').replace(/@ext:/g, 'ext:');\n        }\n        saveState() {\n            const value = this.searchBox.getValue();\n            if (extensionsViews_1.ExtensionsListView.isInstalledExtensionsQuery(value)) {\n                this.searchViewletState['query.value'] = value;\n            }\n            else {\n                this.searchViewletState['query.value'] = '';\n            }\n            super.saveState();\n        }\n        doSearch() {\n            const value = this.normalizedQuery();\n            this.searchExtensionsContextKey.set(!!value);\n            this.searchBuiltInExtensionsContextKey.set(extensionsViews_1.ExtensionsListView.isBuiltInExtensionsQuery(value));\n            this.groupByServersContextKey.set(extensionsViews_1.ExtensionsListView.isGroupByServersExtensionsQuery(value));\n            this.recommendedExtensionsContextKey.set(extensionsViews_1.ExtensionsListView.isRecommendedExtensionsQuery(value));\n            this.nonEmptyWorkspaceContextKey.set(this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY);\n            if (value) {\n                return this.progress(Promise.all(this.panels.map(view => view.show(this.normalizedQuery())\n                    .then(model => this.alertSearchResult(model.length, view.id))))).then(() => undefined);\n            }\n            return Promise.resolve();\n        }\n        onDidAddViews(added) {\n            const addedViews = super.onDidAddViews(added);\n            this.progress(Promise.all(addedViews.map(addedView => addedView.show(this.normalizedQuery())\n                .then(model => this.alertSearchResult(model.length, addedView.id)))));\n            return addedViews;\n        }\n        alertSearchResult(count, viewId) {\n            switch (count) {\n                case 0:\n                    break;\n                case 1:\n                    if (viewIdNameMappings[viewId]) {\n                        aria_1.alert(nls_1.localize('extensionFoundInSection', \"1 extension found in the {0} section.\", viewIdNameMappings[viewId]));\n                    }\n                    else {\n                        aria_1.alert(nls_1.localize('extensionFound', \"1 extension found.\"));\n                    }\n                    break;\n                default:\n                    if (viewIdNameMappings[viewId]) {\n                        aria_1.alert(nls_1.localize('extensionsFoundInSection', \"{0} extensions found in the {1} section.\", count, viewIdNameMappings[viewId]));\n                    }\n                    else {\n                        aria_1.alert(nls_1.localize('extensionsFound', \"{0} extensions found.\", count));\n                    }\n                    break;\n            }\n        }\n        count() {\n            return this.panels.reduce((count, view) => view.count() + count, 0);\n        }\n        focusListView() {\n            if (this.count() > 0) {\n                this.panels[0].focus();\n            }\n        }\n        onViewletOpen(viewlet) {\n            if (!viewlet || viewlet.getId() === extensions_2.VIEWLET_ID) {\n                return;\n            }\n            if (this.configurationService.getValue(extensions_2.CloseExtensionDetailsOnViewChangeKey)) {\n                const promises = this.editorGroupService.groups.map(group => {\n                    const editors = group.editors.filter(input => input instanceof extensionsInput_1.ExtensionsInput);\n                    const promises = editors.map(editor => group.closeEditor(editor));\n                    return Promise.all(promises);\n                });\n                Promise.all(promises);\n            }\n        }\n        progress(promise) {\n            return this.progressService.withProgress({ location: progress_1.ProgressLocation.Extensions }, () => promise);\n        }\n        onError(err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                return;\n            }\n            const message = err && err.message || '';\n            if (/ECONNREFUSED/.test(message)) {\n                const error = errorsWithActions_1.createErrorWithActions(nls_1.localize('suggestProxyError', \"Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting.\"), {\n                    actions: [\n                        this.instantiationService.createInstance(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL)\n                    ]\n                });\n                this.notificationService.error(error);\n                return;\n            }\n            this.notificationService.error(err);\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            super.dispose();\n        }\n    };\n    ExtensionsViewlet = __decorate([\n        __param(0, layoutService_1.IWorkbenchLayoutService),\n        __param(1, telemetry_1.ITelemetryService),\n        __param(2, progress_1.IProgressService2),\n        __param(3, instantiation_1.IInstantiationService),\n        __param(4, editorGroupsService_1.IEditorGroupsService),\n        __param(5, extensionManagement_1.IExtensionManagementService),\n        __param(6, notification_1.INotificationService),\n        __param(7, viewlet_1.IViewletService),\n        __param(8, themeService_1.IThemeService),\n        __param(9, configuration_1.IConfigurationService),\n        __param(10, storage_1.IStorageService),\n        __param(11, workspace_1.IWorkspaceContextService),\n        __param(12, contextkey_1.IContextKeyService),\n        __param(13, contextView_1.IContextMenuService),\n        __param(14, extensions_1.IExtensionService)\n    ], ExtensionsViewlet);\n    exports.ExtensionsViewlet = ExtensionsViewlet;\n    let StatusUpdater = class StatusUpdater {\n        constructor(activityService, extensionsWorkbenchService) {\n            this.activityService = activityService;\n            this.extensionsWorkbenchService = extensionsWorkbenchService;\n            extensionsWorkbenchService.onChange(this.onServiceChange, this, this.disposables);\n        }\n        onServiceChange() {\n            lifecycle_1.dispose(this.badgeHandle);\n            if (this.extensionsWorkbenchService.local.some(e => e.state === extensions_2.ExtensionState.Installing)) {\n                this.badgeHandle = this.activityService.showActivity(extensions_2.VIEWLET_ID, new activity_1.ProgressBadge(() => nls_1.localize('extensions', \"Extensions\")), 'extensions-badge progress-badge');\n                return;\n            }\n            const outdated = this.extensionsWorkbenchService.local.reduce((r, e) => r + (e.outdated && e.enablementState !== extensionManagement_1.EnablementState.Disabled && e.enablementState !== extensionManagement_1.EnablementState.WorkspaceDisabled ? 1 : 0), 0);\n            if (outdated > 0) {\n                const badge = new activity_1.NumberBadge(outdated, n => nls_1.localize('outdatedExtensions', '{0} Outdated Extensions', n));\n                this.badgeHandle = this.activityService.showActivity(extensions_2.VIEWLET_ID, badge, 'extensions-badge count-badge');\n            }\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n            lifecycle_1.dispose(this.badgeHandle);\n        }\n    };\n    StatusUpdater = __decorate([\n        __param(0, activity_1.IActivityService),\n        __param(1, extensions_2.IExtensionsWorkbenchService)\n    ], StatusUpdater);\n    exports.StatusUpdater = StatusUpdater;\n    let MaliciousExtensionChecker = class MaliciousExtensionChecker {\n        constructor(extensionsManagementService, windowService, logService, notificationService, environmentService) {\n            this.extensionsManagementService = extensionsManagementService;\n            this.windowService = windowService;\n            this.logService = logService;\n            this.notificationService = notificationService;\n            this.environmentService = environmentService;\n            if (!this.environmentService.disableExtensions) {\n                this.loopCheckForMaliciousExtensions();\n            }\n        }\n        loopCheckForMaliciousExtensions() {\n            this.checkForMaliciousExtensions()\n                .then(() => async_1.timeout(1000 * 60 * 5)) // every five minutes\n                .then(() => this.loopCheckForMaliciousExtensions());\n        }\n        checkForMaliciousExtensions() {\n            return this.extensionsManagementService.getExtensionsReport().then(report => {\n                const maliciousSet = extensionManagementUtil_1.getMaliciousExtensionsSet(report);\n                return this.extensionsManagementService.getInstalled(extensions_3.ExtensionType.User).then(installed => {\n                    const maliciousExtensions = installed\n                        .filter(e => maliciousSet.has(e.identifier.id));\n                    if (maliciousExtensions.length) {\n                        return Promise.all(maliciousExtensions.map(e => this.extensionsManagementService.uninstall(e, true).then(() => {\n                            this.notificationService.prompt(severity_1.default.Warning, nls_1.localize('malicious warning', \"We have uninstalled '{0}' which was reported to be problematic.\", e.identifier.id), [{\n                                    label: nls_1.localize('reloadNow', \"Reload Now\"),\n                                    run: () => this.windowService.reloadWindow()\n                                }], { sticky: true });\n                        })));\n                    }\n                    else {\n                        return Promise.resolve(undefined);\n                    }\n                }).then(() => undefined);\n            }, err => this.logService.error(err));\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    MaliciousExtensionChecker = __decorate([\n        __param(0, extensionManagement_1.IExtensionManagementService),\n        __param(1, windows_1.IWindowService),\n        __param(2, log_1.ILogService),\n        __param(3, notification_1.INotificationService),\n        __param(4, environment_1.IEnvironmentService)\n    ], MaliciousExtensionChecker);\n    exports.MaliciousExtensionChecker = MaliciousExtensionChecker;\n});\n",null]}