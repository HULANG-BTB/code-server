{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/cursorUndo/cursorUndo.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/cursorUndo/cursorUndo.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/editorCommon\", \"vs/editor/common/editorContextKeys\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, nls, keyCodes_1, lifecycle_1, editorExtensions_1, editorCommon_1, editorContextKeys_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CursorState {\n        constructor(selections) {\n            this.selections = selections;\n        }\n        equals(other) {\n            const thisLen = this.selections.length;\n            const otherLen = other.selections.length;\n            if (thisLen !== otherLen) {\n                return false;\n            }\n            for (let i = 0; i < thisLen; i++) {\n                if (!this.selections[i].equalsSelection(other.selections[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    class CursorUndoController extends lifecycle_1.Disposable {\n        constructor(editor) {\n            super();\n            this._editor = editor;\n            this._isCursorUndo = false;\n            this._undoStack = [];\n            this._prevState = this._readState();\n            this._register(editor.onDidChangeModel((e) => {\n                this._undoStack = [];\n                this._prevState = null;\n            }));\n            this._register(editor.onDidChangeModelContent((e) => {\n                this._undoStack = [];\n                this._prevState = null;\n            }));\n            this._register(editor.onDidChangeCursorSelection((e) => {\n                if (!this._isCursorUndo && this._prevState) {\n                    this._undoStack.push(this._prevState);\n                    if (this._undoStack.length > 50) {\n                        // keep the cursor undo stack bounded\n                        this._undoStack.shift();\n                    }\n                }\n                this._prevState = this._readState();\n            }));\n        }\n        static get(editor) {\n            return editor.getContribution(CursorUndoController.ID);\n        }\n        _readState() {\n            if (!this._editor.hasModel()) {\n                // no model => no state\n                return null;\n            }\n            return new CursorState(this._editor.getSelections());\n        }\n        getId() {\n            return CursorUndoController.ID;\n        }\n        cursorUndo() {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const currState = new CursorState(this._editor.getSelections());\n            while (this._undoStack.length > 0) {\n                const prevState = this._undoStack.pop();\n                if (!prevState.equals(currState)) {\n                    this._isCursorUndo = true;\n                    this._editor.setSelections(prevState.selections);\n                    this._editor.revealRangeInCenterIfOutsideViewport(prevState.selections[0], editorCommon_1.ScrollType.Smooth);\n                    this._isCursorUndo = false;\n                    return;\n                }\n            }\n        }\n    }\n    CursorUndoController.ID = 'editor.contrib.cursorUndoController';\n    exports.CursorUndoController = CursorUndoController;\n    class CursorUndo extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'cursorUndo',\n                label: nls.localize('cursor.undo', \"Soft Undo\"),\n                alias: 'Soft Undo',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_U,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        run(accessor, editor, args) {\n            CursorUndoController.get(editor).cursorUndo();\n        }\n    }\n    exports.CursorUndo = CursorUndo;\n    editorExtensions_1.registerEditorContribution(CursorUndoController);\n    editorExtensions_1.registerEditorAction(CursorUndo);\n});\n",null]}