{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar editorCommon = require(\"vs/editor/common/editorCommon\");\nvar snippetController2_1 = require(\"vs/editor/contrib/snippet/snippetController2\");\nvar extHost_protocol_1 = require(\"vs/workbench/api/common/extHost.protocol\");\nvar types_1 = require(\"vs/base/common/types\");\nvar MainThreadTextEditorProperties = /** @class */ (function () {\n    function MainThreadTextEditorProperties(selections, options, visibleRanges) {\n        this.selections = selections;\n        this.options = options;\n        this.visibleRanges = visibleRanges;\n    }\n    MainThreadTextEditorProperties.readFromEditor = function (previousProperties, model, codeEditor) {\n        var selections = MainThreadTextEditorProperties._readSelectionsFromCodeEditor(previousProperties, codeEditor);\n        var options = MainThreadTextEditorProperties._readOptionsFromCodeEditor(previousProperties, model, codeEditor);\n        var visibleRanges = MainThreadTextEditorProperties._readVisibleRangesFromCodeEditor(previousProperties, codeEditor);\n        return new MainThreadTextEditorProperties(selections, options, visibleRanges);\n    };\n    MainThreadTextEditorProperties._readSelectionsFromCodeEditor = function (previousProperties, codeEditor) {\n        var result = null;\n        if (codeEditor) {\n            result = codeEditor.getSelections();\n        }\n        if (!result && previousProperties) {\n            result = previousProperties.selections;\n        }\n        if (!result) {\n            result = [new selection_1.Selection(1, 1, 1, 1)];\n        }\n        return result;\n    };\n    MainThreadTextEditorProperties._readOptionsFromCodeEditor = function (previousProperties, model, codeEditor) {\n        if (model.isDisposed()) {\n            if (previousProperties) {\n                // shutdown time\n                return previousProperties.options;\n            }\n            else {\n                throw new Error('No valid properties');\n            }\n        }\n        var cursorStyle;\n        var lineNumbers;\n        if (codeEditor) {\n            var codeEditorOpts = codeEditor.getConfiguration();\n            cursorStyle = codeEditorOpts.viewInfo.cursorStyle;\n            lineNumbers = codeEditorOpts.viewInfo.renderLineNumbers;\n        }\n        else if (previousProperties) {\n            cursorStyle = previousProperties.options.cursorStyle;\n            lineNumbers = previousProperties.options.lineNumbers;\n        }\n        else {\n            cursorStyle = editorOptions_1.TextEditorCursorStyle.Line;\n            lineNumbers = editorOptions_1.RenderLineNumbersType.On;\n        }\n        var modelOptions = model.getOptions();\n        return {\n            insertSpaces: modelOptions.insertSpaces,\n            tabSize: modelOptions.tabSize,\n            indentSize: modelOptions.indentSize,\n            cursorStyle: cursorStyle,\n            lineNumbers: lineNumbers\n        };\n    };\n    MainThreadTextEditorProperties._readVisibleRangesFromCodeEditor = function (previousProperties, codeEditor) {\n        if (codeEditor) {\n            return codeEditor.getVisibleRanges();\n        }\n        return [];\n    };\n    MainThreadTextEditorProperties.prototype.generateDelta = function (oldProps, selectionChangeSource) {\n        var delta = {\n            options: null,\n            selections: null,\n            visibleRanges: null\n        };\n        if (!oldProps || !MainThreadTextEditorProperties._selectionsEqual(oldProps.selections, this.selections)) {\n            delta.selections = {\n                selections: this.selections,\n                source: types_1.withNullAsUndefined(selectionChangeSource)\n            };\n        }\n        if (!oldProps || !MainThreadTextEditorProperties._optionsEqual(oldProps.options, this.options)) {\n            delta.options = this.options;\n        }\n        if (!oldProps || !MainThreadTextEditorProperties._rangesEqual(oldProps.visibleRanges, this.visibleRanges)) {\n            delta.visibleRanges = this.visibleRanges;\n        }\n        if (delta.selections || delta.options || delta.visibleRanges) {\n            // something changed\n            return delta;\n        }\n        // nothing changed\n        return null;\n    };\n    MainThreadTextEditorProperties._selectionsEqual = function (a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (var i = 0; i < a.length; i++) {\n            if (!a[i].equalsSelection(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    MainThreadTextEditorProperties._rangesEqual = function (a, b) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (var i = 0; i < a.length; i++) {\n            if (!a[i].equalsRange(b[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n    MainThreadTextEditorProperties._optionsEqual = function (a, b) {\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!a && !b) {\n            return true;\n        }\n        return (a.tabSize === b.tabSize\n            && a.indentSize === b.indentSize\n            && a.insertSpaces === b.insertSpaces\n            && a.cursorStyle === b.cursorStyle\n            && a.lineNumbers === b.lineNumbers);\n    };\n    return MainThreadTextEditorProperties;\n}());\nexports.MainThreadTextEditorProperties = MainThreadTextEditorProperties;\n/**\n * Text Editor that is permanently bound to the same model.\n * It can be bound or not to a CodeEditor.\n */\nvar MainThreadTextEditor = /** @class */ (function () {\n    function MainThreadTextEditor(id, model, codeEditor, focusTracker, modelService) {\n        var _this = this;\n        this._id = id;\n        this._model = model;\n        this._codeEditor = null;\n        this._focusTracker = focusTracker;\n        this._modelService = modelService;\n        this._codeEditorListeners = [];\n        this._onPropertiesChanged = new event_1.Emitter();\n        this._modelListeners = [];\n        this._modelListeners.push(this._model.onDidChangeOptions(function (e) {\n            _this._updatePropertiesNow(null);\n        }));\n        this.setCodeEditor(codeEditor);\n        this._updatePropertiesNow(null);\n    }\n    MainThreadTextEditor.prototype.dispose = function () {\n        this._model = null;\n        this._modelListeners = lifecycle_1.dispose(this._modelListeners);\n        this._codeEditor = null;\n        this._codeEditorListeners = lifecycle_1.dispose(this._codeEditorListeners);\n    };\n    MainThreadTextEditor.prototype._updatePropertiesNow = function (selectionChangeSource) {\n        this._setProperties(MainThreadTextEditorProperties.readFromEditor(this._properties, this._model, this._codeEditor), selectionChangeSource);\n    };\n    MainThreadTextEditor.prototype._setProperties = function (newProperties, selectionChangeSource) {\n        var delta = newProperties.generateDelta(this._properties, selectionChangeSource);\n        this._properties = newProperties;\n        if (delta) {\n            this._onPropertiesChanged.fire(delta);\n        }\n    };\n    MainThreadTextEditor.prototype.getId = function () {\n        return this._id;\n    };\n    MainThreadTextEditor.prototype.getModel = function () {\n        return this._model;\n    };\n    MainThreadTextEditor.prototype.getCodeEditor = function () {\n        return this._codeEditor;\n    };\n    MainThreadTextEditor.prototype.hasCodeEditor = function (codeEditor) {\n        return (this._codeEditor === codeEditor);\n    };\n    MainThreadTextEditor.prototype.setCodeEditor = function (codeEditor) {\n        var _this = this;\n        if (this.hasCodeEditor(codeEditor)) {\n            // Nothing to do...\n            return;\n        }\n        this._codeEditorListeners = lifecycle_1.dispose(this._codeEditorListeners);\n        this._codeEditor = codeEditor;\n        if (this._codeEditor) {\n            // Catch early the case that this code editor gets a different model set and disassociate from this model\n            this._codeEditorListeners.push(this._codeEditor.onDidChangeModel(function () {\n                _this.setCodeEditor(null);\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidFocusEditorWidget(function () {\n                _this._focusTracker.onGainedFocus();\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidBlurEditorWidget(function () {\n                _this._focusTracker.onLostFocus();\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidChangeCursorSelection(function (e) {\n                // selection\n                _this._updatePropertiesNow(e.source);\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidChangeConfiguration(function () {\n                // options\n                _this._updatePropertiesNow(null);\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidLayoutChange(function () {\n                // visibleRanges\n                _this._updatePropertiesNow(null);\n            }));\n            this._codeEditorListeners.push(this._codeEditor.onDidScrollChange(function () {\n                // visibleRanges\n                _this._updatePropertiesNow(null);\n            }));\n            this._updatePropertiesNow(null);\n        }\n    };\n    MainThreadTextEditor.prototype.isVisible = function () {\n        return !!this._codeEditor;\n    };\n    MainThreadTextEditor.prototype.getProperties = function () {\n        return this._properties;\n    };\n    Object.defineProperty(MainThreadTextEditor.prototype, \"onPropertiesChanged\", {\n        get: function () {\n            return this._onPropertiesChanged.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadTextEditor.prototype.setSelections = function (selections) {\n        if (this._codeEditor) {\n            this._codeEditor.setSelections(selections);\n            return;\n        }\n        var newSelections = selections.map(selection_1.Selection.liftSelection);\n        this._setProperties(new MainThreadTextEditorProperties(newSelections, this._properties.options, this._properties.visibleRanges), null);\n    };\n    MainThreadTextEditor.prototype._setIndentConfiguration = function (newConfiguration) {\n        var creationOpts = this._modelService.getCreationOptions(this._model.getLanguageIdentifier().language, this._model.uri, this._model.isForSimpleWidget);\n        if (newConfiguration.tabSize === 'auto' || newConfiguration.insertSpaces === 'auto') {\n            // one of the options was set to 'auto' => detect indentation\n            var insertSpaces = creationOpts.insertSpaces;\n            var tabSize = creationOpts.tabSize;\n            if (newConfiguration.insertSpaces !== 'auto' && typeof newConfiguration.insertSpaces !== 'undefined') {\n                insertSpaces = newConfiguration.insertSpaces;\n            }\n            if (newConfiguration.tabSize !== 'auto' && typeof newConfiguration.tabSize !== 'undefined') {\n                tabSize = newConfiguration.tabSize;\n            }\n            this._model.detectIndentation(insertSpaces, tabSize);\n            return;\n        }\n        var newOpts = {};\n        if (typeof newConfiguration.insertSpaces !== 'undefined') {\n            newOpts.insertSpaces = newConfiguration.insertSpaces;\n        }\n        if (typeof newConfiguration.tabSize !== 'undefined') {\n            newOpts.tabSize = newConfiguration.tabSize;\n        }\n        if (typeof newConfiguration.indentSize !== 'undefined') {\n            if (newConfiguration.indentSize === 'tabSize') {\n                newOpts.indentSize = newOpts.tabSize || creationOpts.tabSize;\n            }\n            else {\n                newOpts.indentSize = newConfiguration.indentSize;\n            }\n        }\n        this._model.updateOptions(newOpts);\n    };\n    MainThreadTextEditor.prototype.setConfiguration = function (newConfiguration) {\n        this._setIndentConfiguration(newConfiguration);\n        if (!this._codeEditor) {\n            return;\n        }\n        if (newConfiguration.cursorStyle) {\n            var newCursorStyle = editorOptions_1.cursorStyleToString(newConfiguration.cursorStyle);\n            this._codeEditor.updateOptions({\n                cursorStyle: newCursorStyle\n            });\n        }\n        if (typeof newConfiguration.lineNumbers !== 'undefined') {\n            var lineNumbers = void 0;\n            switch (newConfiguration.lineNumbers) {\n                case editorOptions_1.RenderLineNumbersType.On:\n                    lineNumbers = 'on';\n                    break;\n                case editorOptions_1.RenderLineNumbersType.Relative:\n                    lineNumbers = 'relative';\n                    break;\n                default:\n                    lineNumbers = 'off';\n            }\n            this._codeEditor.updateOptions({\n                lineNumbers: lineNumbers\n            });\n        }\n    };\n    MainThreadTextEditor.prototype.setDecorations = function (key, ranges) {\n        if (!this._codeEditor) {\n            return;\n        }\n        this._codeEditor.setDecorations(key, ranges);\n    };\n    MainThreadTextEditor.prototype.setDecorationsFast = function (key, _ranges) {\n        if (!this._codeEditor) {\n            return;\n        }\n        var ranges = [];\n        for (var i = 0, len = Math.floor(_ranges.length / 4); i < len; i++) {\n            ranges[i] = new range_1.Range(_ranges[4 * i], _ranges[4 * i + 1], _ranges[4 * i + 2], _ranges[4 * i + 3]);\n        }\n        this._codeEditor.setDecorationsFast(key, ranges);\n    };\n    MainThreadTextEditor.prototype.revealRange = function (range, revealType) {\n        if (!this._codeEditor) {\n            return;\n        }\n        switch (revealType) {\n            case extHost_protocol_1.TextEditorRevealType.Default:\n                this._codeEditor.revealRange(range, editorCommon.ScrollType.Smooth);\n                break;\n            case extHost_protocol_1.TextEditorRevealType.InCenter:\n                this._codeEditor.revealRangeInCenter(range, editorCommon.ScrollType.Smooth);\n                break;\n            case extHost_protocol_1.TextEditorRevealType.InCenterIfOutsideViewport:\n                this._codeEditor.revealRangeInCenterIfOutsideViewport(range, editorCommon.ScrollType.Smooth);\n                break;\n            case extHost_protocol_1.TextEditorRevealType.AtTop:\n                this._codeEditor.revealRangeAtTop(range, editorCommon.ScrollType.Smooth);\n                break;\n            default:\n                console.warn(\"Unknown revealType: \" + revealType);\n                break;\n        }\n    };\n    MainThreadTextEditor.prototype.isFocused = function () {\n        if (this._codeEditor) {\n            return this._codeEditor.hasTextFocus();\n        }\n        return false;\n    };\n    MainThreadTextEditor.prototype.matches = function (editor) {\n        if (!editor) {\n            return false;\n        }\n        return editor.getControl() === this._codeEditor;\n    };\n    MainThreadTextEditor.prototype.applyEdits = function (versionIdCheck, edits, opts) {\n        if (this._model.getVersionId() !== versionIdCheck) {\n            // throw new Error('Model has changed in the meantime!');\n            // model changed in the meantime\n            return false;\n        }\n        if (!this._codeEditor) {\n            // console.warn('applyEdits on invisible editor');\n            return false;\n        }\n        if (typeof opts.setEndOfLine !== 'undefined') {\n            this._model.pushEOL(opts.setEndOfLine);\n        }\n        var transformedEdits = edits.map(function (edit) {\n            return {\n                range: range_1.Range.lift(edit.range),\n                text: edit.text,\n                forceMoveMarkers: edit.forceMoveMarkers\n            };\n        });\n        if (opts.undoStopBefore) {\n            this._codeEditor.pushUndoStop();\n        }\n        this._codeEditor.executeEdits('MainThreadTextEditor', transformedEdits);\n        if (opts.undoStopAfter) {\n            this._codeEditor.pushUndoStop();\n        }\n        return true;\n    };\n    MainThreadTextEditor.prototype.insertSnippet = function (template, ranges, opts) {\n        if (!this._codeEditor) {\n            return false;\n        }\n        var snippetController = snippetController2_1.SnippetController2.get(this._codeEditor);\n        // // cancel previous snippet mode\n        // snippetController.leaveSnippet();\n        // set selection, focus editor\n        var selections = ranges.map(function (r) { return new selection_1.Selection(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn); });\n        this._codeEditor.setSelections(selections);\n        this._codeEditor.focus();\n        // make modifications\n        snippetController.insert(template, 0, 0, opts.undoStopBefore, opts.undoStopAfter);\n        return true;\n    };\n    return MainThreadTextEditor;\n}());\nexports.MainThreadTextEditor = MainThreadTextEditor;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { RenderLineNumbersType, TextEditorCursorStyle, cursorStyleToString } from 'vs/editor/common/config/editorOptions';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { IIdentifiedSingleEditOperation, ISingleEditOperation, ITextModel, ITextModelUpdateOptions } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/snippetController2';\nimport { IApplyEditsOptions, IEditorPropertiesChangeData, IResolvedTextEditorConfiguration, ITextEditorConfigurationUpdate, IUndoStopOptions, TextEditorRevealType } from 'vs/workbench/api/common/extHost.protocol';\nimport { IEditor } from 'vs/workbench/common/editor';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport interface IFocusTracker {\n\tonGainedFocus(): void;\n\tonLostFocus(): void;\n}\n\nexport class MainThreadTextEditorProperties {\n\n\tpublic static readFromEditor(previousProperties: MainThreadTextEditorProperties | null, model: ITextModel, codeEditor: ICodeEditor | null): MainThreadTextEditorProperties {\n\t\tconst selections = MainThreadTextEditorProperties._readSelectionsFromCodeEditor(previousProperties, codeEditor);\n\t\tconst options = MainThreadTextEditorProperties._readOptionsFromCodeEditor(previousProperties, model, codeEditor);\n\t\tconst visibleRanges = MainThreadTextEditorProperties._readVisibleRangesFromCodeEditor(previousProperties, codeEditor);\n\t\treturn new MainThreadTextEditorProperties(selections, options, visibleRanges);\n\t}\n\n\tprivate static _readSelectionsFromCodeEditor(previousProperties: MainThreadTextEditorProperties | null, codeEditor: ICodeEditor | null): Selection[] {\n\t\tlet result: Selection[] | null = null;\n\t\tif (codeEditor) {\n\t\t\tresult = codeEditor.getSelections();\n\t\t}\n\t\tif (!result && previousProperties) {\n\t\t\tresult = previousProperties.selections;\n\t\t}\n\t\tif (!result) {\n\t\t\tresult = [new Selection(1, 1, 1, 1)];\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _readOptionsFromCodeEditor(previousProperties: MainThreadTextEditorProperties | null, model: ITextModel, codeEditor: ICodeEditor | null): IResolvedTextEditorConfiguration {\n\t\tif (model.isDisposed()) {\n\t\t\tif (previousProperties) {\n\t\t\t\t// shutdown time\n\t\t\t\treturn previousProperties.options;\n\t\t\t} else {\n\t\t\t\tthrow new Error('No valid properties');\n\t\t\t}\n\t\t}\n\n\t\tlet cursorStyle: TextEditorCursorStyle;\n\t\tlet lineNumbers: RenderLineNumbersType;\n\t\tif (codeEditor) {\n\t\t\tconst codeEditorOpts = codeEditor.getConfiguration();\n\t\t\tcursorStyle = codeEditorOpts.viewInfo.cursorStyle;\n\t\t\tlineNumbers = codeEditorOpts.viewInfo.renderLineNumbers;\n\t\t} else if (previousProperties) {\n\t\t\tcursorStyle = previousProperties.options.cursorStyle;\n\t\t\tlineNumbers = previousProperties.options.lineNumbers;\n\t\t} else {\n\t\t\tcursorStyle = TextEditorCursorStyle.Line;\n\t\t\tlineNumbers = RenderLineNumbersType.On;\n\t\t}\n\n\t\tconst modelOptions = model.getOptions();\n\t\treturn {\n\t\t\tinsertSpaces: modelOptions.insertSpaces,\n\t\t\ttabSize: modelOptions.tabSize,\n\t\t\tindentSize: modelOptions.indentSize,\n\t\t\tcursorStyle: cursorStyle,\n\t\t\tlineNumbers: lineNumbers\n\t\t};\n\t}\n\n\tprivate static _readVisibleRangesFromCodeEditor(previousProperties: MainThreadTextEditorProperties | null, codeEditor: ICodeEditor | null): Range[] {\n\t\tif (codeEditor) {\n\t\t\treturn codeEditor.getVisibleRanges();\n\t\t}\n\t\treturn [];\n\t}\n\n\tconstructor(\n\t\tpublic readonly selections: Selection[],\n\t\tpublic readonly options: IResolvedTextEditorConfiguration,\n\t\tpublic readonly visibleRanges: Range[]\n\t) {\n\t}\n\n\tpublic generateDelta(oldProps: MainThreadTextEditorProperties | null, selectionChangeSource: string | null): IEditorPropertiesChangeData | null {\n\t\tconst delta: IEditorPropertiesChangeData = {\n\t\t\toptions: null,\n\t\t\tselections: null,\n\t\t\tvisibleRanges: null\n\t\t};\n\n\t\tif (!oldProps || !MainThreadTextEditorProperties._selectionsEqual(oldProps.selections, this.selections)) {\n\t\t\tdelta.selections = {\n\t\t\t\tselections: this.selections,\n\t\t\t\tsource: withNullAsUndefined(selectionChangeSource)\n\t\t\t};\n\t\t}\n\n\t\tif (!oldProps || !MainThreadTextEditorProperties._optionsEqual(oldProps.options, this.options)) {\n\t\t\tdelta.options = this.options;\n\t\t}\n\n\t\tif (!oldProps || !MainThreadTextEditorProperties._rangesEqual(oldProps.visibleRanges, this.visibleRanges)) {\n\t\t\tdelta.visibleRanges = this.visibleRanges;\n\t\t}\n\n\t\tif (delta.selections || delta.options || delta.visibleRanges) {\n\t\t\t// something changed\n\t\t\treturn delta;\n\t\t}\n\t\t// nothing changed\n\t\treturn null;\n\t}\n\n\tprivate static _selectionsEqual(a: Selection[], b: Selection[]): boolean {\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (!a[i].equalsSelection(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _rangesEqual(a: Range[], b: Range[]): boolean {\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (!a[i].equalsRange(b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate static _optionsEqual(a: IResolvedTextEditorConfiguration, b: IResolvedTextEditorConfiguration): boolean {\n\t\tif (a && !b || !a && b) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!a && !b) {\n\t\t\treturn true;\n\t\t}\n\t\treturn (\n\t\t\ta.tabSize === b.tabSize\n\t\t\t&& a.indentSize === b.indentSize\n\t\t\t&& a.insertSpaces === b.insertSpaces\n\t\t\t&& a.cursorStyle === b.cursorStyle\n\t\t\t&& a.lineNumbers === b.lineNumbers\n\t\t);\n\t}\n}\n\n/**\n * Text Editor that is permanently bound to the same model.\n * It can be bound or not to a CodeEditor.\n */\nexport class MainThreadTextEditor {\n\n\tprivate readonly _id: string;\n\tprivate _model: ITextModel;\n\tprivate readonly _modelService: IModelService;\n\tprivate _modelListeners: IDisposable[];\n\tprivate _codeEditor: ICodeEditor | null;\n\tprivate readonly _focusTracker: IFocusTracker;\n\tprivate _codeEditorListeners: IDisposable[];\n\n\tprivate _properties: MainThreadTextEditorProperties;\n\tprivate readonly _onPropertiesChanged: Emitter<IEditorPropertiesChangeData>;\n\n\tconstructor(\n\t\tid: string,\n\t\tmodel: ITextModel,\n\t\tcodeEditor: ICodeEditor,\n\t\tfocusTracker: IFocusTracker,\n\t\tmodelService: IModelService\n\t) {\n\t\tthis._id = id;\n\t\tthis._model = model;\n\t\tthis._codeEditor = null;\n\t\tthis._focusTracker = focusTracker;\n\t\tthis._modelService = modelService;\n\t\tthis._codeEditorListeners = [];\n\n\t\tthis._onPropertiesChanged = new Emitter<IEditorPropertiesChangeData>();\n\n\t\tthis._modelListeners = [];\n\t\tthis._modelListeners.push(this._model.onDidChangeOptions((e) => {\n\t\t\tthis._updatePropertiesNow(null);\n\t\t}));\n\n\t\tthis.setCodeEditor(codeEditor);\n\t\tthis._updatePropertiesNow(null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._model = null!;\n\t\tthis._modelListeners = dispose(this._modelListeners);\n\t\tthis._codeEditor = null;\n\t\tthis._codeEditorListeners = dispose(this._codeEditorListeners);\n\t}\n\n\tprivate _updatePropertiesNow(selectionChangeSource: string | null): void {\n\t\tthis._setProperties(\n\t\t\tMainThreadTextEditorProperties.readFromEditor(this._properties, this._model, this._codeEditor),\n\t\t\tselectionChangeSource\n\t\t);\n\t}\n\n\tprivate _setProperties(newProperties: MainThreadTextEditorProperties, selectionChangeSource: string | null): void {\n\t\tconst delta = newProperties.generateDelta(this._properties, selectionChangeSource);\n\t\tthis._properties = newProperties;\n\t\tif (delta) {\n\t\t\tthis._onPropertiesChanged.fire(delta);\n\t\t}\n\t}\n\n\tpublic getId(): string {\n\t\treturn this._id;\n\t}\n\n\tpublic getModel(): ITextModel {\n\t\treturn this._model;\n\t}\n\n\tpublic getCodeEditor(): ICodeEditor | null {\n\t\treturn this._codeEditor;\n\t}\n\n\tpublic hasCodeEditor(codeEditor: ICodeEditor | null): boolean {\n\t\treturn (this._codeEditor === codeEditor);\n\t}\n\n\tpublic setCodeEditor(codeEditor: ICodeEditor | null): void {\n\t\tif (this.hasCodeEditor(codeEditor)) {\n\t\t\t// Nothing to do...\n\t\t\treturn;\n\t\t}\n\t\tthis._codeEditorListeners = dispose(this._codeEditorListeners);\n\n\t\tthis._codeEditor = codeEditor;\n\t\tif (this._codeEditor) {\n\n\t\t\t// Catch early the case that this code editor gets a different model set and disassociate from this model\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidChangeModel(() => {\n\t\t\t\tthis.setCodeEditor(null);\n\t\t\t}));\n\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidFocusEditorWidget(() => {\n\t\t\t\tthis._focusTracker.onGainedFocus();\n\t\t\t}));\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidBlurEditorWidget(() => {\n\t\t\t\tthis._focusTracker.onLostFocus();\n\t\t\t}));\n\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidChangeCursorSelection((e) => {\n\t\t\t\t// selection\n\t\t\t\tthis._updatePropertiesNow(e.source);\n\t\t\t}));\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidChangeConfiguration(() => {\n\t\t\t\t// options\n\t\t\t\tthis._updatePropertiesNow(null);\n\t\t\t}));\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidLayoutChange(() => {\n\t\t\t\t// visibleRanges\n\t\t\t\tthis._updatePropertiesNow(null);\n\t\t\t}));\n\t\t\tthis._codeEditorListeners.push(this._codeEditor.onDidScrollChange(() => {\n\t\t\t\t// visibleRanges\n\t\t\t\tthis._updatePropertiesNow(null);\n\t\t\t}));\n\t\t\tthis._updatePropertiesNow(null);\n\t\t}\n\t}\n\n\tpublic isVisible(): boolean {\n\t\treturn !!this._codeEditor;\n\t}\n\n\tpublic getProperties(): MainThreadTextEditorProperties {\n\t\treturn this._properties;\n\t}\n\n\tpublic get onPropertiesChanged(): Event<IEditorPropertiesChangeData> {\n\t\treturn this._onPropertiesChanged.event;\n\t}\n\n\tpublic setSelections(selections: ISelection[]): void {\n\t\tif (this._codeEditor) {\n\t\t\tthis._codeEditor.setSelections(selections);\n\t\t\treturn;\n\t\t}\n\n\t\tconst newSelections = selections.map(Selection.liftSelection);\n\t\tthis._setProperties(\n\t\t\tnew MainThreadTextEditorProperties(newSelections, this._properties.options, this._properties.visibleRanges),\n\t\t\tnull\n\t\t);\n\t}\n\n\tprivate _setIndentConfiguration(newConfiguration: ITextEditorConfigurationUpdate): void {\n\t\tconst creationOpts = this._modelService.getCreationOptions(this._model.getLanguageIdentifier().language, this._model.uri, this._model.isForSimpleWidget);\n\n\t\tif (newConfiguration.tabSize === 'auto' || newConfiguration.insertSpaces === 'auto') {\n\t\t\t// one of the options was set to 'auto' => detect indentation\n\t\t\tlet insertSpaces = creationOpts.insertSpaces;\n\t\t\tlet tabSize = creationOpts.tabSize;\n\n\t\t\tif (newConfiguration.insertSpaces !== 'auto' && typeof newConfiguration.insertSpaces !== 'undefined') {\n\t\t\t\tinsertSpaces = newConfiguration.insertSpaces;\n\t\t\t}\n\n\t\t\tif (newConfiguration.tabSize !== 'auto' && typeof newConfiguration.tabSize !== 'undefined') {\n\t\t\t\ttabSize = newConfiguration.tabSize;\n\t\t\t}\n\n\t\t\tthis._model.detectIndentation(insertSpaces, tabSize);\n\t\t\treturn;\n\t\t}\n\n\t\tconst newOpts: ITextModelUpdateOptions = {};\n\t\tif (typeof newConfiguration.insertSpaces !== 'undefined') {\n\t\t\tnewOpts.insertSpaces = newConfiguration.insertSpaces;\n\t\t}\n\t\tif (typeof newConfiguration.tabSize !== 'undefined') {\n\t\t\tnewOpts.tabSize = newConfiguration.tabSize;\n\t\t}\n\t\tif (typeof newConfiguration.indentSize !== 'undefined') {\n\t\t\tif (newConfiguration.indentSize === 'tabSize') {\n\t\t\t\tnewOpts.indentSize = newOpts.tabSize || creationOpts.tabSize;\n\t\t\t} else {\n\t\t\t\tnewOpts.indentSize = newConfiguration.indentSize;\n\t\t\t}\n\t\t}\n\t\tthis._model.updateOptions(newOpts);\n\t}\n\n\tpublic setConfiguration(newConfiguration: ITextEditorConfigurationUpdate): void {\n\t\tthis._setIndentConfiguration(newConfiguration);\n\n\t\tif (!this._codeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (newConfiguration.cursorStyle) {\n\t\t\tconst newCursorStyle = cursorStyleToString(newConfiguration.cursorStyle);\n\t\t\tthis._codeEditor.updateOptions({\n\t\t\t\tcursorStyle: newCursorStyle\n\t\t\t});\n\t\t}\n\n\t\tif (typeof newConfiguration.lineNumbers !== 'undefined') {\n\t\t\tlet lineNumbers: 'on' | 'off' | 'relative';\n\t\t\tswitch (newConfiguration.lineNumbers) {\n\t\t\t\tcase RenderLineNumbersType.On:\n\t\t\t\t\tlineNumbers = 'on';\n\t\t\t\t\tbreak;\n\t\t\t\tcase RenderLineNumbersType.Relative:\n\t\t\t\t\tlineNumbers = 'relative';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tlineNumbers = 'off';\n\t\t\t}\n\t\t\tthis._codeEditor.updateOptions({\n\t\t\t\tlineNumbers: lineNumbers\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic setDecorations(key: string, ranges: editorCommon.IDecorationOptions[]): void {\n\t\tif (!this._codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tthis._codeEditor.setDecorations(key, ranges);\n\t}\n\n\tpublic setDecorationsFast(key: string, _ranges: number[]): void {\n\t\tif (!this._codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst ranges: Range[] = [];\n\t\tfor (let i = 0, len = Math.floor(_ranges.length / 4); i < len; i++) {\n\t\t\tranges[i] = new Range(_ranges[4 * i], _ranges[4 * i + 1], _ranges[4 * i + 2], _ranges[4 * i + 3]);\n\t\t}\n\t\tthis._codeEditor.setDecorationsFast(key, ranges);\n\t}\n\n\tpublic revealRange(range: IRange, revealType: TextEditorRevealType): void {\n\t\tif (!this._codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (revealType) {\n\t\t\tcase TextEditorRevealType.Default:\n\t\t\t\tthis._codeEditor.revealRange(range, editorCommon.ScrollType.Smooth);\n\t\t\t\tbreak;\n\t\t\tcase TextEditorRevealType.InCenter:\n\t\t\t\tthis._codeEditor.revealRangeInCenter(range, editorCommon.ScrollType.Smooth);\n\t\t\t\tbreak;\n\t\t\tcase TextEditorRevealType.InCenterIfOutsideViewport:\n\t\t\t\tthis._codeEditor.revealRangeInCenterIfOutsideViewport(range, editorCommon.ScrollType.Smooth);\n\t\t\t\tbreak;\n\t\t\tcase TextEditorRevealType.AtTop:\n\t\t\t\tthis._codeEditor.revealRangeAtTop(range, editorCommon.ScrollType.Smooth);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Unknown revealType: ${revealType}`);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic isFocused(): boolean {\n\t\tif (this._codeEditor) {\n\t\t\treturn this._codeEditor.hasTextFocus();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic matches(editor: IEditor): boolean {\n\t\tif (!editor) {\n\t\t\treturn false;\n\t\t}\n\t\treturn editor.getControl() === this._codeEditor;\n\t}\n\n\tpublic applyEdits(versionIdCheck: number, edits: ISingleEditOperation[], opts: IApplyEditsOptions): boolean {\n\t\tif (this._model.getVersionId() !== versionIdCheck) {\n\t\t\t// throw new Error('Model has changed in the meantime!');\n\t\t\t// model changed in the meantime\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._codeEditor) {\n\t\t\t// console.warn('applyEdits on invisible editor');\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof opts.setEndOfLine !== 'undefined') {\n\t\t\tthis._model.pushEOL(opts.setEndOfLine);\n\t\t}\n\n\t\tconst transformedEdits = edits.map((edit): IIdentifiedSingleEditOperation => {\n\t\t\treturn {\n\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\ttext: edit.text,\n\t\t\t\tforceMoveMarkers: edit.forceMoveMarkers\n\t\t\t};\n\t\t});\n\n\t\tif (opts.undoStopBefore) {\n\t\t\tthis._codeEditor.pushUndoStop();\n\t\t}\n\t\tthis._codeEditor.executeEdits('MainThreadTextEditor', transformedEdits);\n\t\tif (opts.undoStopAfter) {\n\t\t\tthis._codeEditor.pushUndoStop();\n\t\t}\n\t\treturn true;\n\t}\n\n\tinsertSnippet(template: string, ranges: IRange[], opts: IUndoStopOptions) {\n\n\t\tif (!this._codeEditor) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst snippetController = SnippetController2.get(this._codeEditor);\n\n\t\t// // cancel previous snippet mode\n\t\t// snippetController.leaveSnippet();\n\n\t\t// set selection, focus editor\n\t\tconst selections = ranges.map(r => new Selection(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn));\n\t\tthis._codeEditor.setSelections(selections);\n\t\tthis._codeEditor.focus();\n\n\t\t// make modifications\n\t\tsnippetController.insert(template, 0, 0, opts.undoStopBefore, opts.undoStopAfter);\n\n\t\treturn true;\n\t}\n}\n"]}]}