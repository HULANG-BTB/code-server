{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/severity\", \"vs/workbench/contrib/debug/common/debugModel\", \"vs/base/common/types\", \"vs/base/common/resources\"], function (require, exports, nls, severity_1, debugModel_1, types_1, resources_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const MAX_REPL_LENGTH = 10000;\n    let topReplElementCounter = 0;\n    class ReplModel {\n        constructor(session) {\n            this.session = session;\n            this.replElements = [];\n        }\n        getReplElements() {\n            return this.replElements;\n        }\n        addReplExpression(stackFrame, name) {\n            const expression = new debugModel_1.Expression(name);\n            this.addReplElement(expression);\n            return expression.evaluate(this.session, stackFrame, 'repl');\n        }\n        appendToRepl(data, sev, source) {\n            const clearAnsiSequence = '\\u001b[2J';\n            if (typeof data === 'string' && data.indexOf(clearAnsiSequence) >= 0) {\n                // [2J is the ansi escape sequence for clearing the display http://ascii-table.com/ansi-escape-sequences.php\n                this.removeReplExpressions();\n                this.appendToRepl(nls.localize('consoleCleared', \"Console was cleared\"), severity_1.default.Ignore);\n                data = data.substr(data.lastIndexOf(clearAnsiSequence) + clearAnsiSequence.length);\n            }\n            if (typeof data === 'string') {\n                const element = new debugModel_1.SimpleReplElement(`topReplElement:${topReplElementCounter++}`, data.trimRight(), sev, source);\n                this.addReplElement(element);\n            }\n            else {\n                // TODO@Isidor hack, we should introduce a new type which is an output that can fetch children like an expression\n                data.severity = sev;\n                data.sourceData = source;\n                this.addReplElement(data);\n            }\n        }\n        addReplElement(newElement) {\n            this.replElements.push(newElement);\n            if (this.replElements.length > MAX_REPL_LENGTH) {\n                this.replElements.splice(0, this.replElements.length - MAX_REPL_LENGTH);\n            }\n        }\n        logToRepl(sev, args, frame) {\n            let source;\n            if (frame) {\n                source = {\n                    column: frame.column,\n                    lineNumber: frame.line,\n                    source: this.session.getSource({\n                        name: resources_1.basenameOrAuthority(frame.uri),\n                        path: frame.uri.fsPath\n                    })\n                };\n            }\n            // add output for each argument logged\n            let simpleVals = [];\n            for (let i = 0; i < args.length; i++) {\n                let a = args[i];\n                // undefined gets printed as 'undefined'\n                if (typeof a === 'undefined') {\n                    simpleVals.push('undefined');\n                }\n                // null gets printed as 'null'\n                else if (a === null) {\n                    simpleVals.push('null');\n                }\n                // objects & arrays are special because we want to inspect them in the REPL\n                else if (types_1.isObject(a) || Array.isArray(a)) {\n                    // flush any existing simple values logged\n                    if (simpleVals.length) {\n                        this.appendToRepl(simpleVals.join(' '), sev, source);\n                        simpleVals = [];\n                    }\n                    // show object\n                    this.appendToRepl(new debugModel_1.RawObjectReplElement(`topReplElement:${topReplElementCounter++}`, a.prototype, a, undefined, nls.localize('snapshotObj', \"Only primitive values are shown for this object.\")), sev, source);\n                }\n                // string: watch out for % replacement directive\n                // string substitution and formatting @ https://developer.chrome.com/devtools/docs/console\n                else if (typeof a === 'string') {\n                    let buf = '';\n                    for (let j = 0, len = a.length; j < len; j++) {\n                        if (a[j] === '%' && (a[j + 1] === 's' || a[j + 1] === 'i' || a[j + 1] === 'd' || a[j + 1] === 'O')) {\n                            i++; // read over substitution\n                            buf += !types_1.isUndefinedOrNull(args[i]) ? args[i] : ''; // replace\n                            j++; // read over directive\n                        }\n                        else {\n                            buf += a[j];\n                        }\n                    }\n                    simpleVals.push(buf);\n                }\n                // number or boolean is joined together\n                else {\n                    simpleVals.push(a);\n                }\n            }\n            // flush simple values\n            // always append a new line for output coming from an extension such that separate logs go to separate lines #23695\n            if (simpleVals.length) {\n                this.appendToRepl(simpleVals.join(' ') + '\\n', sev, source);\n            }\n        }\n        removeReplExpressions() {\n            if (this.replElements.length > 0) {\n                this.replElements = [];\n            }\n        }\n    }\n    exports.ReplModel = ReplModel;\n});\n",null]}