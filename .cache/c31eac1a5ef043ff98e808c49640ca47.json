{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/documentSymbols/outlineModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/documentSymbols/outlineModel.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar map_1 = require(\"vs/base/common/map\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar TreeElement = /** @class */ (function () {\n    function TreeElement() {\n    }\n    TreeElement.prototype.remove = function () {\n        if (this.parent) {\n            delete this.parent.children[this.id];\n        }\n    };\n    TreeElement.findId = function (candidate, container) {\n        // complex id-computation which contains the origin/extension,\n        // the parent path, and some dedupe logic when names collide\n        var candidateId;\n        if (typeof candidate === 'string') {\n            candidateId = container.id + \"/\" + candidate;\n        }\n        else {\n            candidateId = container.id + \"/\" + candidate.name;\n            if (container.children[candidateId] !== undefined) {\n                candidateId = container.id + \"/\" + candidate.name + \"_\" + candidate.range.startLineNumber + \"_\" + candidate.range.startColumn;\n            }\n        }\n        var id = candidateId;\n        for (var i = 0; container.children[id] !== undefined; i++) {\n            id = candidateId + \"_\" + i;\n        }\n        return id;\n    };\n    TreeElement.getElementById = function (id, element) {\n        if (!id) {\n            return undefined;\n        }\n        var len = strings_1.commonPrefixLength(id, element.id);\n        if (len === id.length) {\n            return element;\n        }\n        if (len < element.id.length) {\n            return undefined;\n        }\n        for (var key in element.children) {\n            var candidate = TreeElement.getElementById(id, element.children[key]);\n            if (candidate) {\n                return candidate;\n            }\n        }\n        return undefined;\n    };\n    TreeElement.size = function (element) {\n        var res = 1;\n        for (var key in element.children) {\n            res += TreeElement.size(element.children[key]);\n        }\n        return res;\n    };\n    TreeElement.empty = function (element) {\n        for (var _key in element.children) {\n            return false;\n        }\n        return true;\n    };\n    return TreeElement;\n}());\nexports.TreeElement = TreeElement;\nvar OutlineElement = /** @class */ (function (_super) {\n    tslib_1.__extends(OutlineElement, _super);\n    function OutlineElement(id, parent, symbol) {\n        var _this = _super.call(this) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.symbol = symbol;\n        _this.children = Object.create(null);\n        return _this;\n    }\n    OutlineElement.prototype.adopt = function (parent) {\n        var res = new OutlineElement(this.id, parent, this.symbol);\n        collections_1.forEach(this.children, function (entry) { return res.children[entry.key] = entry.value.adopt(res); });\n        return res;\n    };\n    return OutlineElement;\n}(TreeElement));\nexports.OutlineElement = OutlineElement;\nvar OutlineGroup = /** @class */ (function (_super) {\n    tslib_1.__extends(OutlineGroup, _super);\n    function OutlineGroup(id, parent, provider, providerIndex) {\n        var _this = _super.call(this) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.provider = provider;\n        _this.providerIndex = providerIndex;\n        _this.children = Object.create(null);\n        return _this;\n    }\n    OutlineGroup.prototype.adopt = function (parent) {\n        var res = new OutlineGroup(this.id, parent, this.provider, this.providerIndex);\n        collections_1.forEach(this.children, function (entry) { return res.children[entry.key] = entry.value.adopt(res); });\n        return res;\n    };\n    OutlineGroup.prototype.getItemEnclosingPosition = function (position) {\n        return position ? this._getItemEnclosingPosition(position, this.children) : undefined;\n    };\n    OutlineGroup.prototype._getItemEnclosingPosition = function (position, children) {\n        for (var key in children) {\n            var item = children[key];\n            if (!item.symbol.range || !range_1.Range.containsPosition(item.symbol.range, position)) {\n                continue;\n            }\n            return this._getItemEnclosingPosition(position, item.children) || item;\n        }\n        return undefined;\n    };\n    OutlineGroup.prototype.updateMarker = function (marker) {\n        for (var key in this.children) {\n            this._updateMarker(marker, this.children[key]);\n        }\n    };\n    OutlineGroup.prototype._updateMarker = function (markers, item) {\n        item.marker = undefined;\n        // find the proper start index to check for item/marker overlap.\n        var idx = arrays_1.binarySearch(markers, item.symbol.range, range_1.Range.compareRangesUsingStarts);\n        var start;\n        if (idx < 0) {\n            start = ~idx;\n            if (start > 0 && range_1.Range.areIntersecting(markers[start - 1], item.symbol.range)) {\n                start -= 1;\n            }\n        }\n        else {\n            start = idx;\n        }\n        var myMarkers = [];\n        var myTopSev;\n        for (; start < markers.length && range_1.Range.areIntersecting(item.symbol.range, markers[start]); start++) {\n            // remove markers intersecting with this outline element\n            // and store them in a 'private' array.\n            var marker = markers[start];\n            myMarkers.push(marker);\n            markers[start] = undefined;\n            if (!myTopSev || marker.severity > myTopSev) {\n                myTopSev = marker.severity;\n            }\n        }\n        // Recurse into children and let them match markers that have matched\n        // this outline element. This might remove markers from this element and\n        // therefore we remember that we have had markers. That allows us to render\n        // the dot, saying 'this element has children with markers'\n        for (var key in item.children) {\n            this._updateMarker(myMarkers, item.children[key]);\n        }\n        if (myTopSev) {\n            item.marker = {\n                count: myMarkers.length,\n                topSev: myTopSev\n            };\n        }\n        arrays_1.coalesceInPlace(markers);\n    };\n    return OutlineGroup;\n}(TreeElement));\nexports.OutlineGroup = OutlineGroup;\nvar OutlineModel = /** @class */ (function (_super) {\n    tslib_1.__extends(OutlineModel, _super);\n    function OutlineModel(textModel) {\n        var _this = _super.call(this) || this;\n        _this.textModel = textModel;\n        _this.id = 'root';\n        _this.parent = undefined;\n        _this._groups = Object.create(null);\n        _this.children = Object.create(null);\n        return _this;\n    }\n    OutlineModel.create = function (textModel, token) {\n        var key = this._keys.for(textModel);\n        var data = OutlineModel._requests.get(key);\n        if (!data) {\n            var source = new cancellation_1.CancellationTokenSource();\n            data = {\n                promiseCnt: 0,\n                source: source,\n                promise: OutlineModel._create(textModel, source.token),\n                model: undefined,\n            };\n            OutlineModel._requests.set(key, data);\n        }\n        if (data.model) {\n            // resolved -> return data\n            return Promise.resolve(data.model);\n        }\n        // increase usage counter\n        data.promiseCnt += 1;\n        token.onCancellationRequested(function () {\n            // last -> cancel provider request, remove cached promise\n            if (--data.promiseCnt === 0) {\n                data.source.cancel();\n                OutlineModel._requests.delete(key);\n            }\n        });\n        return new Promise(function (resolve, reject) {\n            data.promise.then(function (model) {\n                data.model = model;\n                resolve(model);\n            }, function (err) {\n                OutlineModel._requests.delete(key);\n                reject(err);\n            });\n        });\n    };\n    OutlineModel._create = function (textModel, token) {\n        var chainedCancellation = new cancellation_1.CancellationTokenSource();\n        token.onCancellationRequested(function () { return chainedCancellation.cancel(); });\n        var result = new OutlineModel(textModel);\n        var provider = modes_1.DocumentSymbolProviderRegistry.ordered(textModel);\n        var promises = provider.map(function (provider, index) {\n            var id = TreeElement.findId(\"provider_\" + index, result);\n            var group = new OutlineGroup(id, result, provider, index);\n            return Promise.resolve(provider.provideDocumentSymbols(result.textModel, chainedCancellation.token)).then(function (result) {\n                for (var _i = 0, _a = result || []; _i < _a.length; _i++) {\n                    var info = _a[_i];\n                    OutlineModel._makeOutlineElement(info, group);\n                }\n                return group;\n            }, function (err) {\n                errors_1.onUnexpectedExternalError(err);\n                return group;\n            }).then(function (group) {\n                if (!TreeElement.empty(group)) {\n                    result._groups[id] = group;\n                }\n                else {\n                    group.remove();\n                }\n            });\n        });\n        var listener = modes_1.DocumentSymbolProviderRegistry.onDidChange(function () {\n            var newProvider = modes_1.DocumentSymbolProviderRegistry.ordered(textModel);\n            if (!arrays_1.equals(newProvider, provider)) {\n                chainedCancellation.cancel();\n            }\n        });\n        return Promise.all(promises).then(function () {\n            if (chainedCancellation.token.isCancellationRequested && !token.isCancellationRequested) {\n                return OutlineModel._create(textModel, token);\n            }\n            else {\n                return result._compact();\n            }\n        }).finally(function () {\n            listener.dispose();\n        });\n    };\n    OutlineModel._makeOutlineElement = function (info, container) {\n        var id = TreeElement.findId(info, container);\n        var res = new OutlineElement(id, container, info);\n        if (info.children) {\n            for (var _i = 0, _a = info.children; _i < _a.length; _i++) {\n                var childInfo = _a[_i];\n                OutlineModel._makeOutlineElement(childInfo, res);\n            }\n        }\n        container.children[res.id] = res;\n    };\n    OutlineModel.get = function (element) {\n        while (element) {\n            if (element instanceof OutlineModel) {\n                return element;\n            }\n            element = element.parent;\n        }\n        return undefined;\n    };\n    OutlineModel.prototype.adopt = function () {\n        var res = new OutlineModel(this.textModel);\n        collections_1.forEach(this._groups, function (entry) { return res._groups[entry.key] = entry.value.adopt(res); });\n        return res._compact();\n    };\n    OutlineModel.prototype._compact = function () {\n        var count = 0;\n        for (var key in this._groups) {\n            var group = this._groups[key];\n            if (collections_1.first(group.children) === undefined) { // empty\n                delete this._groups[key];\n            }\n            else {\n                count += 1;\n            }\n        }\n        if (count !== 1) {\n            //\n            this.children = this._groups;\n        }\n        else {\n            // adopt all elements of the first group\n            var group = collections_1.first(this._groups);\n            for (var key in group.children) {\n                var child = group.children[key];\n                child.parent = this;\n                this.children[child.id] = child;\n            }\n        }\n        return this;\n    };\n    OutlineModel.prototype.merge = function (other) {\n        if (this.textModel.uri.toString() !== other.textModel.uri.toString()) {\n            return false;\n        }\n        if (collections_1.size(this._groups) !== collections_1.size(other._groups)) {\n            return false;\n        }\n        this._groups = other._groups;\n        this.children = other.children;\n        return true;\n    };\n    OutlineModel.prototype.getItemEnclosingPosition = function (position, context) {\n        var preferredGroup;\n        if (context) {\n            var candidate = context.parent;\n            while (candidate && !preferredGroup) {\n                if (candidate instanceof OutlineGroup) {\n                    preferredGroup = candidate;\n                }\n                candidate = candidate.parent;\n            }\n        }\n        var result = undefined;\n        for (var key in this._groups) {\n            var group = this._groups[key];\n            result = group.getItemEnclosingPosition(position);\n            if (result && (!preferredGroup || preferredGroup === group)) {\n                break;\n            }\n        }\n        return result;\n    };\n    OutlineModel.prototype.getItemById = function (id) {\n        return TreeElement.getElementById(id, this);\n    };\n    OutlineModel.prototype.updateMarker = function (marker) {\n        // sort markers by start range so that we can use\n        // outline element starts for quicker look up\n        marker.sort(range_1.Range.compareRangesUsingStarts);\n        for (var key in this._groups) {\n            this._groups[key].updateMarker(marker.slice(0));\n        }\n    };\n    OutlineModel._requests = new map_1.LRUCache(9, 0.75);\n    OutlineModel._keys = new /** @class */ (function () {\n        function class_1() {\n            this._counter = 1;\n            this._data = new WeakMap();\n        }\n        class_1.prototype.for = function (textModel) {\n            return textModel.id + \"/\" + textModel.getVersionId() + \"/\" + this._hash(modes_1.DocumentSymbolProviderRegistry.all(textModel));\n        };\n        class_1.prototype._hash = function (providers) {\n            var result = '';\n            for (var _i = 0, providers_1 = providers; _i < providers_1.length; _i++) {\n                var provider = providers_1[_i];\n                var n = this._data.get(provider);\n                if (typeof n === 'undefined') {\n                    n = this._counter++;\n                    this._data.set(provider, n);\n                }\n                result += n;\n            }\n            return result;\n        };\n        return class_1;\n    }());\n    return OutlineModel;\n}(TreeElement));\nexports.OutlineModel = OutlineModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/documentSymbols/outlineModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/documentSymbols/outlineModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch, coalesceInPlace, equals } from 'vs/base/common/arrays';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { first, forEach, size } from 'vs/base/common/collections';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { LRUCache } from 'vs/base/common/map';\nimport { commonPrefixLength } from 'vs/base/common/strings';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DocumentSymbol, DocumentSymbolProvider, DocumentSymbolProviderRegistry } from 'vs/editor/common/modes';\nimport { MarkerSeverity } from 'vs/platform/markers/common/markers';\n\nexport abstract class TreeElement {\n\n\tabstract id: string;\n\tabstract children: { [id: string]: TreeElement };\n\tabstract parent: TreeElement | undefined;\n\n\tabstract adopt(newParent: TreeElement): TreeElement;\n\n\tremove(): void {\n\t\tif (this.parent) {\n\t\t\tdelete this.parent.children[this.id];\n\t\t}\n\t}\n\n\tstatic findId(candidate: DocumentSymbol | string, container: TreeElement): string {\n\t\t// complex id-computation which contains the origin/extension,\n\t\t// the parent path, and some dedupe logic when names collide\n\t\tlet candidateId: string;\n\t\tif (typeof candidate === 'string') {\n\t\t\tcandidateId = `${container.id}/${candidate}`;\n\t\t} else {\n\t\t\tcandidateId = `${container.id}/${candidate.name}`;\n\t\t\tif (container.children[candidateId] !== undefined) {\n\t\t\t\tcandidateId = `${container.id}/${candidate.name}_${candidate.range.startLineNumber}_${candidate.range.startColumn}`;\n\t\t\t}\n\t\t}\n\n\t\tlet id = candidateId;\n\t\tfor (let i = 0; container.children[id] !== undefined; i++) {\n\t\t\tid = `${candidateId}_${i}`;\n\t\t}\n\n\t\treturn id;\n\t}\n\n\tstatic getElementById(id: string, element: TreeElement): TreeElement | undefined {\n\t\tif (!id) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet len = commonPrefixLength(id, element.id);\n\t\tif (len === id.length) {\n\t\t\treturn element;\n\t\t}\n\t\tif (len < element.id.length) {\n\t\t\treturn undefined;\n\t\t}\n\t\tfor (const key in element.children) {\n\t\t\tlet candidate = TreeElement.getElementById(id, element.children[key]);\n\t\t\tif (candidate) {\n\t\t\t\treturn candidate;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tstatic size(element: TreeElement): number {\n\t\tlet res = 1;\n\t\tfor (const key in element.children) {\n\t\t\tres += TreeElement.size(element.children[key]);\n\t\t}\n\t\treturn res;\n\t}\n\n\tstatic empty(element: TreeElement): boolean {\n\t\tfor (const _key in element.children) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport interface IOutlineMarker {\n\tstartLineNumber: number;\n\tstartColumn: number;\n\tendLineNumber: number;\n\tendColumn: number;\n\tseverity: MarkerSeverity;\n}\n\nexport class OutlineElement extends TreeElement {\n\n\tchildren: { [id: string]: OutlineElement; } = Object.create(null);\n\tmarker: { count: number, topSev: MarkerSeverity } | undefined;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tpublic parent: TreeElement | undefined,\n\t\treadonly symbol: DocumentSymbol\n\t) {\n\t\tsuper();\n\t}\n\n\tadopt(parent: TreeElement): OutlineElement {\n\t\tlet res = new OutlineElement(this.id, parent, this.symbol);\n\t\tforEach(this.children, entry => res.children[entry.key] = entry.value.adopt(res));\n\t\treturn res;\n\t}\n}\n\nexport class OutlineGroup extends TreeElement {\n\n\tchildren: { [id: string]: OutlineElement; } = Object.create(null);\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tpublic parent: TreeElement | undefined,\n\t\treadonly provider: DocumentSymbolProvider,\n\t\treadonly providerIndex: number,\n\t) {\n\t\tsuper();\n\t}\n\n\tadopt(parent: TreeElement): OutlineGroup {\n\t\tlet res = new OutlineGroup(this.id, parent, this.provider, this.providerIndex);\n\t\tforEach(this.children, entry => res.children[entry.key] = entry.value.adopt(res));\n\t\treturn res;\n\t}\n\n\tgetItemEnclosingPosition(position: IPosition): OutlineElement | undefined {\n\t\treturn position ? this._getItemEnclosingPosition(position, this.children) : undefined;\n\t}\n\n\tprivate _getItemEnclosingPosition(position: IPosition, children: { [id: string]: OutlineElement }): OutlineElement | undefined {\n\t\tfor (let key in children) {\n\t\t\tlet item = children[key];\n\t\t\tif (!item.symbol.range || !Range.containsPosition(item.symbol.range, position)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn this._getItemEnclosingPosition(position, item.children) || item;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tupdateMarker(marker: IOutlineMarker[]): void {\n\t\tfor (const key in this.children) {\n\t\t\tthis._updateMarker(marker, this.children[key]);\n\t\t}\n\t}\n\n\tprivate _updateMarker(markers: IOutlineMarker[], item: OutlineElement): void {\n\t\titem.marker = undefined;\n\n\t\t// find the proper start index to check for item/marker overlap.\n\t\tlet idx = binarySearch<IRange>(markers, item.symbol.range, Range.compareRangesUsingStarts);\n\t\tlet start: number;\n\t\tif (idx < 0) {\n\t\t\tstart = ~idx;\n\t\t\tif (start > 0 && Range.areIntersecting(markers[start - 1], item.symbol.range)) {\n\t\t\t\tstart -= 1;\n\t\t\t}\n\t\t} else {\n\t\t\tstart = idx;\n\t\t}\n\n\t\tlet myMarkers: IOutlineMarker[] = [];\n\t\tlet myTopSev: MarkerSeverity | undefined;\n\n\t\tfor (; start < markers.length && Range.areIntersecting(item.symbol.range, markers[start]); start++) {\n\t\t\t// remove markers intersecting with this outline element\n\t\t\t// and store them in a 'private' array.\n\t\t\tlet marker = markers[start];\n\t\t\tmyMarkers.push(marker);\n\t\t\t(markers as Array<IOutlineMarker | undefined>)[start] = undefined;\n\t\t\tif (!myTopSev || marker.severity > myTopSev) {\n\t\t\t\tmyTopSev = marker.severity;\n\t\t\t}\n\t\t}\n\n\t\t// Recurse into children and let them match markers that have matched\n\t\t// this outline element. This might remove markers from this element and\n\t\t// therefore we remember that we have had markers. That allows us to render\n\t\t// the dot, saying 'this element has children with markers'\n\t\tfor (const key in item.children) {\n\t\t\tthis._updateMarker(myMarkers, item.children[key]);\n\t\t}\n\n\t\tif (myTopSev) {\n\t\t\titem.marker = {\n\t\t\t\tcount: myMarkers.length,\n\t\t\t\ttopSev: myTopSev\n\t\t\t};\n\t\t}\n\n\t\tcoalesceInPlace(markers);\n\t}\n}\n\nexport class OutlineModel extends TreeElement {\n\n\tprivate static readonly _requests = new LRUCache<string, { promiseCnt: number, source: CancellationTokenSource, promise: Promise<any>, model: OutlineModel | undefined }>(9, 0.75);\n\tprivate static readonly _keys = new class {\n\n\t\tprivate _counter = 1;\n\t\tprivate _data = new WeakMap<DocumentSymbolProvider, number>();\n\n\t\tfor(textModel: ITextModel): string {\n\t\t\treturn `${textModel.id}/${textModel.getVersionId()}/${this._hash(DocumentSymbolProviderRegistry.all(textModel))}`;\n\t\t}\n\n\t\tprivate _hash(providers: DocumentSymbolProvider[]): string {\n\t\t\tlet result = '';\n\t\t\tfor (const provider of providers) {\n\t\t\t\tlet n = this._data.get(provider);\n\t\t\t\tif (typeof n === 'undefined') {\n\t\t\t\t\tn = this._counter++;\n\t\t\t\t\tthis._data.set(provider, n);\n\t\t\t\t}\n\t\t\t\tresult += n;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n\n\n\tstatic create(textModel: ITextModel, token: CancellationToken): Promise<OutlineModel> {\n\n\t\tlet key = this._keys.for(textModel);\n\t\tlet data = OutlineModel._requests.get(key);\n\n\t\tif (!data) {\n\t\t\tlet source = new CancellationTokenSource();\n\t\t\tdata = {\n\t\t\t\tpromiseCnt: 0,\n\t\t\t\tsource,\n\t\t\t\tpromise: OutlineModel._create(textModel, source.token),\n\t\t\t\tmodel: undefined,\n\t\t\t};\n\t\t\tOutlineModel._requests.set(key, data);\n\t\t}\n\n\t\tif (data!.model) {\n\t\t\t// resolved -> return data\n\t\t\treturn Promise.resolve(data.model!);\n\t\t}\n\n\t\t// increase usage counter\n\t\tdata!.promiseCnt += 1;\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\t// last -> cancel provider request, remove cached promise\n\t\t\tif (--data!.promiseCnt === 0) {\n\t\t\t\tdata!.source.cancel();\n\t\t\t\tOutlineModel._requests.delete(key);\n\t\t\t}\n\t\t});\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tdata!.promise.then(model => {\n\t\t\t\tdata!.model = model;\n\t\t\t\tresolve(model);\n\t\t\t}, err => {\n\t\t\t\tOutlineModel._requests.delete(key);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic _create(textModel: ITextModel, token: CancellationToken): Promise<OutlineModel> {\n\n\t\tconst chainedCancellation = new CancellationTokenSource();\n\t\ttoken.onCancellationRequested(() => chainedCancellation.cancel());\n\n\t\tconst result = new OutlineModel(textModel);\n\t\tconst provider = DocumentSymbolProviderRegistry.ordered(textModel);\n\t\tconst promises = provider.map((provider, index) => {\n\n\t\t\tlet id = TreeElement.findId(`provider_${index}`, result);\n\t\t\tlet group = new OutlineGroup(id, result, provider, index);\n\n\t\t\treturn Promise.resolve(provider.provideDocumentSymbols(result.textModel, chainedCancellation.token)).then(result => {\n\t\t\t\tfor (const info of result || []) {\n\t\t\t\t\tOutlineModel._makeOutlineElement(info, group);\n\t\t\t\t}\n\t\t\t\treturn group;\n\t\t\t}, err => {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t\treturn group;\n\t\t\t}).then(group => {\n\t\t\t\tif (!TreeElement.empty(group)) {\n\t\t\t\t\tresult._groups[id] = group;\n\t\t\t\t} else {\n\t\t\t\t\tgroup.remove();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst listener = DocumentSymbolProviderRegistry.onDidChange(() => {\n\t\t\tconst newProvider = DocumentSymbolProviderRegistry.ordered(textModel);\n\t\t\tif (!equals(newProvider, provider)) {\n\t\t\t\tchainedCancellation.cancel();\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.all(promises).then(() => {\n\t\t\tif (chainedCancellation.token.isCancellationRequested && !token.isCancellationRequested) {\n\t\t\t\treturn OutlineModel._create(textModel, token);\n\t\t\t} else {\n\t\t\t\treturn result._compact();\n\t\t\t}\n\t\t}).finally(() => {\n\t\t\tlistener.dispose();\n\t\t});\n\t}\n\n\tprivate static _makeOutlineElement(info: DocumentSymbol, container: OutlineGroup | OutlineElement): void {\n\t\tlet id = TreeElement.findId(info, container);\n\t\tlet res = new OutlineElement(id, container, info);\n\t\tif (info.children) {\n\t\t\tfor (const childInfo of info.children) {\n\t\t\t\tOutlineModel._makeOutlineElement(childInfo, res);\n\t\t\t}\n\t\t}\n\t\tcontainer.children[res.id] = res;\n\t}\n\n\tstatic get(element: TreeElement | undefined): OutlineModel | undefined {\n\t\twhile (element) {\n\t\t\tif (element instanceof OutlineModel) {\n\t\t\t\treturn element;\n\t\t\t}\n\t\t\telement = element.parent;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\treadonly id = 'root';\n\treadonly parent = undefined;\n\n\tprotected _groups: { [id: string]: OutlineGroup; } = Object.create(null);\n\tchildren: { [id: string]: OutlineGroup | OutlineElement; } = Object.create(null);\n\n\tprotected constructor(readonly textModel: ITextModel) {\n\t\tsuper();\n\t}\n\n\tadopt(): OutlineModel {\n\t\tlet res = new OutlineModel(this.textModel);\n\t\tforEach(this._groups, entry => res._groups[entry.key] = entry.value.adopt(res));\n\t\treturn res._compact();\n\t}\n\n\tprivate _compact(): this {\n\t\tlet count = 0;\n\t\tfor (const key in this._groups) {\n\t\t\tlet group = this._groups[key];\n\t\t\tif (first(group.children) === undefined) { // empty\n\t\t\t\tdelete this._groups[key];\n\t\t\t} else {\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\tif (count !== 1) {\n\t\t\t//\n\t\t\tthis.children = this._groups;\n\t\t} else {\n\t\t\t// adopt all elements of the first group\n\t\t\tlet group = first(this._groups);\n\t\t\tfor (let key in group!.children) {\n\t\t\t\tlet child = group!.children[key];\n\t\t\t\tchild.parent = this;\n\t\t\t\tthis.children[child.id] = child;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tmerge(other: OutlineModel): boolean {\n\t\tif (this.textModel.uri.toString() !== other.textModel.uri.toString()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (size(this._groups) !== size(other._groups)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._groups = other._groups;\n\t\tthis.children = other.children;\n\t\treturn true;\n\t}\n\n\tgetItemEnclosingPosition(position: IPosition, context?: OutlineElement): OutlineElement | undefined {\n\n\t\tlet preferredGroup: OutlineGroup | undefined;\n\t\tif (context) {\n\t\t\tlet candidate = context.parent;\n\t\t\twhile (candidate && !preferredGroup) {\n\t\t\t\tif (candidate instanceof OutlineGroup) {\n\t\t\t\t\tpreferredGroup = candidate;\n\t\t\t\t}\n\t\t\t\tcandidate = candidate.parent;\n\t\t\t}\n\t\t}\n\n\t\tlet result: OutlineElement | undefined = undefined;\n\t\tfor (const key in this._groups) {\n\t\t\tconst group = this._groups[key];\n\t\t\tresult = group.getItemEnclosingPosition(position);\n\t\t\tif (result && (!preferredGroup || preferredGroup === group)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetItemById(id: string): TreeElement | undefined {\n\t\treturn TreeElement.getElementById(id, this);\n\t}\n\n\tupdateMarker(marker: IOutlineMarker[]): void {\n\t\t// sort markers by start range so that we can use\n\t\t// outline element starts for quicker look up\n\t\tmarker.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (const key in this._groups) {\n\t\t\tthis._groups[key].updateMarker(marker.slice(0));\n\t\t}\n\t}\n}\n"]}]}