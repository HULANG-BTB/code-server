{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/dirtyFilesTracker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/dirtyFilesTracker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar lifecycle_2 = require(\"vs/base/common/lifecycle\");\nvar activity_1 = require(\"vs/workbench/services/activity/common/activity\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar DirtyFilesTracker = /** @class */ (function (_super) {\n    tslib_1.__extends(DirtyFilesTracker, _super);\n    function DirtyFilesTracker(textFileService, lifecycleService, editorService, activityService, windowService, untitledEditorService) {\n        var _this = _super.call(this) || this;\n        _this.textFileService = textFileService;\n        _this.lifecycleService = lifecycleService;\n        _this.editorService = editorService;\n        _this.activityService = activityService;\n        _this.windowService = windowService;\n        _this.untitledEditorService = untitledEditorService;\n        _this.isDocumentedEdited = false;\n        _this.registerListeners();\n        return _this;\n    }\n    DirtyFilesTracker.prototype.registerListeners = function () {\n        var _this = this;\n        // Local text file changes\n        this._register(this.untitledEditorService.onDidChangeDirty(function (e) { return _this.onUntitledDidChangeDirty(e); }));\n        this._register(this.textFileService.models.onModelsDirty(function (e) { return _this.onTextFilesDirty(e); }));\n        this._register(this.textFileService.models.onModelsSaved(function (e) { return _this.onTextFilesSaved(e); }));\n        this._register(this.textFileService.models.onModelsSaveError(function (e) { return _this.onTextFilesSaveError(e); }));\n        this._register(this.textFileService.models.onModelsReverted(function (e) { return _this.onTextFilesReverted(e); }));\n        // Lifecycle\n        this.lifecycleService.onShutdown(this.dispose, this);\n    };\n    DirtyFilesTracker.prototype.onUntitledDidChangeDirty = function (resource) {\n        var gotDirty = this.untitledEditorService.isDirty(resource);\n        if ((!this.isDocumentedEdited && gotDirty) || (this.isDocumentedEdited && !gotDirty)) {\n            this.updateDocumentEdited();\n        }\n        if (gotDirty || this.lastDirtyCount > 0) {\n            this.updateActivityBadge();\n        }\n    };\n    DirtyFilesTracker.prototype.onTextFilesDirty = function (e) {\n        var _this = this;\n        if ((this.textFileService.getAutoSaveMode() !== textfiles_1.AutoSaveMode.AFTER_SHORT_DELAY) && !this.isDocumentedEdited) {\n            this.updateDocumentEdited(); // no indication needed when auto save is enabled for short delay\n        }\n        if (this.textFileService.getAutoSaveMode() !== textfiles_1.AutoSaveMode.AFTER_SHORT_DELAY) {\n            this.updateActivityBadge(); // no indication needed when auto save is enabled for short delay\n        }\n        // If files become dirty but are not opened, we open it in the background unless there are pending to be saved\n        this.doOpenDirtyResources(arrays.distinct(e.filter(function (e) {\n            // Only dirty models that are not PENDING_SAVE\n            var model = _this.textFileService.models.get(e.resource);\n            var shouldOpen = model && model.isDirty() && !model.hasState(textfiles_1.ModelState.PENDING_SAVE);\n            // Only if not open already\n            return shouldOpen && !_this.editorService.isOpen({ resource: e.resource });\n        }).map(function (e) { return e.resource; }), function (r) { return r.toString(); }));\n    };\n    DirtyFilesTracker.prototype.doOpenDirtyResources = function (resources) {\n        var activeEditor = this.editorService.activeControl;\n        // Open\n        this.editorService.openEditors(resources.map(function (resource) {\n            return {\n                resource: resource,\n                options: { inactive: true, pinned: true, preserveFocus: true }\n            };\n        }), activeEditor ? activeEditor.group : editorService_1.ACTIVE_GROUP);\n    };\n    DirtyFilesTracker.prototype.onTextFilesSaved = function (e) {\n        if (this.isDocumentedEdited) {\n            this.updateDocumentEdited();\n        }\n        if (this.lastDirtyCount > 0) {\n            this.updateActivityBadge();\n        }\n    };\n    DirtyFilesTracker.prototype.onTextFilesSaveError = function (e) {\n        if (!this.isDocumentedEdited) {\n            this.updateDocumentEdited();\n        }\n        this.updateActivityBadge();\n    };\n    DirtyFilesTracker.prototype.onTextFilesReverted = function (e) {\n        if (this.isDocumentedEdited) {\n            this.updateDocumentEdited();\n        }\n        if (this.lastDirtyCount > 0) {\n            this.updateActivityBadge();\n        }\n    };\n    DirtyFilesTracker.prototype.updateActivityBadge = function () {\n        var dirtyCount = this.textFileService.getDirty().length;\n        this.lastDirtyCount = dirtyCount;\n        lifecycle_2.dispose(this.badgeHandle);\n        if (dirtyCount > 0) {\n            this.badgeHandle = this.activityService.showActivity(files_1.VIEWLET_ID, new activity_1.NumberBadge(dirtyCount, function (num) { return num === 1 ? nls.localize('dirtyFile', \"1 unsaved file\") : nls.localize('dirtyFiles', \"{0} unsaved files\", dirtyCount); }), 'explorer-viewlet-label');\n        }\n    };\n    DirtyFilesTracker.prototype.updateDocumentEdited = function () {\n        if (platform_1.platform === platform_1.Platform.Mac) {\n            var hasDirtyFiles = this.textFileService.isDirty();\n            this.isDocumentedEdited = hasDirtyFiles;\n            this.windowService.setDocumentEdited(hasDirtyFiles);\n        }\n    };\n    DirtyFilesTracker = tslib_1.__decorate([\n        tslib_1.__param(0, textfiles_1.ITextFileService),\n        tslib_1.__param(1, lifecycle_1.ILifecycleService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, activity_1.IActivityService),\n        tslib_1.__param(4, windows_1.IWindowService),\n        tslib_1.__param(5, untitledEditorService_1.IUntitledEditorService)\n    ], DirtyFilesTracker);\n    return DirtyFilesTracker;\n}(lifecycle_2.Disposable));\nexports.DirtyFilesTracker = DirtyFilesTracker;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/dirtyFilesTracker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/common/dirtyFilesTracker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { VIEWLET_ID } from 'vs/workbench/contrib/files/common/files';\nimport { TextFileModelChangeEvent, ITextFileService, AutoSaveMode, ModelState } from 'vs/workbench/services/textfile/common/textfiles';\nimport { platform, Platform } from 'vs/base/common/platform';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport * as arrays from 'vs/base/common/arrays';\nimport { IEditorService, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\n\nexport class DirtyFilesTracker extends Disposable implements IWorkbenchContribution {\n\tprivate isDocumentedEdited: boolean;\n\tprivate lastDirtyCount: number;\n\tprivate badgeHandle: IDisposable;\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IWindowService private readonly windowService: IWindowService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis.isDocumentedEdited = false;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Local text file changes\n\t\tthis._register(this.untitledEditorService.onDidChangeDirty(e => this.onUntitledDidChangeDirty(e)));\n\t\tthis._register(this.textFileService.models.onModelsDirty(e => this.onTextFilesDirty(e)));\n\t\tthis._register(this.textFileService.models.onModelsSaved(e => this.onTextFilesSaved(e)));\n\t\tthis._register(this.textFileService.models.onModelsSaveError(e => this.onTextFilesSaveError(e)));\n\t\tthis._register(this.textFileService.models.onModelsReverted(e => this.onTextFilesReverted(e)));\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onShutdown(this.dispose, this);\n\t}\n\n\tprivate onUntitledDidChangeDirty(resource: URI): void {\n\t\tconst gotDirty = this.untitledEditorService.isDirty(resource);\n\n\t\tif ((!this.isDocumentedEdited && gotDirty) || (this.isDocumentedEdited && !gotDirty)) {\n\t\t\tthis.updateDocumentEdited();\n\t\t}\n\n\t\tif (gotDirty || this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate onTextFilesDirty(e: TextFileModelChangeEvent[]): void {\n\t\tif ((this.textFileService.getAutoSaveMode() !== AutoSaveMode.AFTER_SHORT_DELAY) && !this.isDocumentedEdited) {\n\t\t\tthis.updateDocumentEdited(); // no indication needed when auto save is enabled for short delay\n\t\t}\n\n\t\tif (this.textFileService.getAutoSaveMode() !== AutoSaveMode.AFTER_SHORT_DELAY) {\n\t\t\tthis.updateActivityBadge(); // no indication needed when auto save is enabled for short delay\n\t\t}\n\n\t\t// If files become dirty but are not opened, we open it in the background unless there are pending to be saved\n\t\tthis.doOpenDirtyResources(arrays.distinct(e.filter(e => {\n\n\t\t\t// Only dirty models that are not PENDING_SAVE\n\t\t\tconst model = this.textFileService.models.get(e.resource);\n\t\t\tconst shouldOpen = model && model.isDirty() && !model.hasState(ModelState.PENDING_SAVE);\n\n\t\t\t// Only if not open already\n\t\t\treturn shouldOpen && !this.editorService.isOpen({ resource: e.resource });\n\t\t}).map(e => e.resource), r => r.toString()));\n\t}\n\n\tprivate doOpenDirtyResources(resources: URI[]): void {\n\t\tconst activeEditor = this.editorService.activeControl;\n\n\t\t// Open\n\t\tthis.editorService.openEditors(resources.map(resource => {\n\t\t\treturn {\n\t\t\t\tresource,\n\t\t\t\toptions: { inactive: true, pinned: true, preserveFocus: true }\n\t\t\t};\n\t\t}), activeEditor ? activeEditor.group : ACTIVE_GROUP);\n\t}\n\n\tprivate onTextFilesSaved(e: TextFileModelChangeEvent[]): void {\n\t\tif (this.isDocumentedEdited) {\n\t\t\tthis.updateDocumentEdited();\n\t\t}\n\n\t\tif (this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate onTextFilesSaveError(e: TextFileModelChangeEvent[]): void {\n\t\tif (!this.isDocumentedEdited) {\n\t\t\tthis.updateDocumentEdited();\n\t\t}\n\n\t\tthis.updateActivityBadge();\n\t}\n\n\tprivate onTextFilesReverted(e: TextFileModelChangeEvent[]): void {\n\t\tif (this.isDocumentedEdited) {\n\t\t\tthis.updateDocumentEdited();\n\t\t}\n\n\t\tif (this.lastDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate updateActivityBadge(): void {\n\t\tconst dirtyCount = this.textFileService.getDirty().length;\n\t\tthis.lastDirtyCount = dirtyCount;\n\t\tdispose(this.badgeHandle);\n\t\tif (dirtyCount > 0) {\n\t\t\tthis.badgeHandle = this.activityService.showActivity(VIEWLET_ID, new NumberBadge(dirtyCount, num => num === 1 ? nls.localize('dirtyFile', \"1 unsaved file\") : nls.localize('dirtyFiles', \"{0} unsaved files\", dirtyCount)), 'explorer-viewlet-label');\n\t\t}\n\t}\n\n\tprivate updateDocumentEdited(): void {\n\t\tif (platform === Platform.Mac) {\n\t\t\tconst hasDirtyFiles = this.textFileService.isDirty();\n\t\t\tthis.isDocumentedEdited = hasDirtyFiles;\n\n\t\t\tthis.windowService.setDocumentEdited(hasDirtyFiles);\n\t\t}\n\t}\n}\n"]}]}