{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDecorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostDecorations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostTypes\", \"vs/base/common/arrays\"], function (require, exports, uri_1, extHost_protocol_1, extHostTypes_1, arrays_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtHostDecorations {\n        constructor(mainContext) {\n            this._provider = new Map();\n            this._proxy = mainContext.getProxy(extHost_protocol_1.MainContext.MainThreadDecorations);\n        }\n        registerDecorationProvider(provider, extensionId) {\n            const handle = ExtHostDecorations._handlePool++;\n            this._provider.set(handle, { provider, extensionId });\n            this._proxy.$registerDecorationProvider(handle, extensionId.value);\n            const listener = provider.onDidChangeDecorations(e => {\n                this._proxy.$onDidChange(handle, !e ? null : arrays_1.asArray(e));\n            });\n            return new extHostTypes_1.Disposable(() => {\n                listener.dispose();\n                this._proxy.$unregisterDecorationProvider(handle);\n                this._provider.delete(handle);\n            });\n        }\n        $provideDecorations(requests, token) {\n            const result = Object.create(null);\n            return Promise.all(requests.map(request => {\n                const { handle, uri, id } = request;\n                const entry = this._provider.get(handle);\n                if (!entry) {\n                    // might have been unregistered in the meantime\n                    return undefined;\n                }\n                const { provider, extensionId } = entry;\n                return Promise.resolve(provider.provideDecoration(uri_1.URI.revive(uri), token)).then(data => {\n                    if (data && data.letter && data.letter.length !== 1) {\n                        console.warn(`INVALID decoration from extension '${extensionId.value}'. The 'letter' must be set and be one character, not '${data.letter}'.`);\n                    }\n                    if (data) {\n                        result[id] = [data.priority, data.bubble, data.title, data.letter, data.color, data.source];\n                    }\n                }, err => {\n                    console.error(err);\n                });\n            })).then(() => {\n                return result;\n            });\n        }\n    }\n    ExtHostDecorations._handlePool = 0;\n    exports.ExtHostDecorations = ExtHostDecorations;\n});\n",null]}