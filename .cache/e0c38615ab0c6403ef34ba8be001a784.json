{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar findState_1 = require(\"vs/editor/contrib/find/findState\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar terminalEnvironment_1 = require(\"vs/workbench/contrib/terminal/common/terminalEnvironment\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar path_1 = require(\"vs/base/common/path\");\nvar TerminalService = /** @class */ (function () {\n    function TerminalService(_contextKeyService, _panelService, lifecycleService, _storageService, _notificationService, _dialogService, _extensionService, _fileService) {\n        var _this = this;\n        this._contextKeyService = _contextKeyService;\n        this._panelService = _panelService;\n        this._storageService = _storageService;\n        this._notificationService = _notificationService;\n        this._dialogService = _dialogService;\n        this._extensionService = _extensionService;\n        this._fileService = _fileService;\n        this._terminalTabs = [];\n        this._onActiveTabChanged = new event_1.Emitter();\n        this._onInstanceCreated = new event_1.Emitter();\n        this._onInstanceDisposed = new event_1.Emitter();\n        this._onInstanceProcessIdReady = new event_1.Emitter();\n        this._onInstanceRequestExtHostProcess = new event_1.Emitter();\n        this._onInstanceDimensionsChanged = new event_1.Emitter();\n        this._onInstancesChanged = new event_1.Emitter();\n        this._onInstanceTitleChanged = new event_1.Emitter();\n        this._onActiveInstanceChanged = new event_1.Emitter();\n        this._onTabDisposed = new event_1.Emitter();\n        this._activeTabIndex = 0;\n        this._isShuttingDown = false;\n        this._findState = new findState_1.FindReplaceState();\n        lifecycleService.onBeforeShutdown(function (event) { return event.veto(_this._onBeforeShutdown()); });\n        lifecycleService.onShutdown(function () { return _this._onShutdown(); });\n        this._terminalFocusContextKey = terminal_1.KEYBINDING_CONTEXT_TERMINAL_FOCUS.bindTo(this._contextKeyService);\n        this._findWidgetVisible = terminal_1.KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE.bindTo(this._contextKeyService);\n        this.onTabDisposed(function (tab) { return _this._removeTab(tab); });\n        this.onActiveTabChanged(function () {\n            var instance = _this.getActiveInstance();\n            _this._onActiveInstanceChanged.fire(instance ? instance : undefined);\n        });\n        this._handleContextKeys();\n    }\n    Object.defineProperty(TerminalService.prototype, \"_terminalInstances\", {\n        get: function () {\n            return this._terminalTabs.reduce(function (p, c) { return p.concat(c.terminalInstances); }, []);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"activeTabIndex\", {\n        get: function () { return this._activeTabIndex; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"terminalInstances\", {\n        get: function () { return this._terminalInstances; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"terminalTabs\", {\n        get: function () { return this._terminalTabs; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onActiveTabChanged\", {\n        get: function () { return this._onActiveTabChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceCreated\", {\n        get: function () { return this._onInstanceCreated.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceDisposed\", {\n        get: function () { return this._onInstanceDisposed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceProcessIdReady\", {\n        get: function () { return this._onInstanceProcessIdReady.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceRequestExtHostProcess\", {\n        get: function () { return this._onInstanceRequestExtHostProcess.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceDimensionsChanged\", {\n        get: function () { return this._onInstanceDimensionsChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstancesChanged\", {\n        get: function () { return this._onInstancesChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onInstanceTitleChanged\", {\n        get: function () { return this._onInstanceTitleChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onActiveInstanceChanged\", {\n        get: function () { return this._onActiveInstanceChanged.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TerminalService.prototype, \"onTabDisposed\", {\n        get: function () { return this._onTabDisposed.event; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalService.prototype._handleContextKeys = function () {\n        var _this = this;\n        var terminalIsOpenContext = terminal_1.KEYBINDING_CONTEXT_TERMINAL_IS_OPEN.bindTo(this._contextKeyService);\n        var updateTerminalContextKeys = function () {\n            terminalIsOpenContext.set(_this.terminalInstances.length > 0);\n        };\n        this.onInstancesChanged(function () { return updateTerminalContextKeys(); });\n    };\n    TerminalService.prototype.createTerminalRenderer = function (name) {\n        return this.createTerminal({ name: name, isRendererOnly: true });\n    };\n    TerminalService.prototype.getActiveOrCreateInstance = function (wasNewTerminalAction) {\n        var activeInstance = this.getActiveInstance();\n        return activeInstance ? activeInstance : this.createTerminal(undefined, wasNewTerminalAction);\n    };\n    TerminalService.prototype.requestExtHostProcess = function (proxy, shellLaunchConfig, activeWorkspaceRootUri, cols, rows) {\n        var _this = this;\n        // Ensure extension host is ready before requesting a process\n        this._extensionService.whenInstalledExtensionsRegistered().then(function () {\n            // TODO: MainThreadTerminalService is not ready at this point, fix this\n            setTimeout(function () {\n                _this._onInstanceRequestExtHostProcess.fire({ proxy: proxy, shellLaunchConfig: shellLaunchConfig, activeWorkspaceRootUri: activeWorkspaceRootUri, cols: cols, rows: rows });\n            }, 500);\n        });\n    };\n    TerminalService.prototype._onBeforeShutdown = function () {\n        var _this = this;\n        if (this.terminalInstances.length === 0) {\n            // No terminal instances, don't veto\n            return false;\n        }\n        if (this.configHelper.config.confirmOnExit) {\n            // veto if configured to show confirmation and the user choosed not to exit\n            return this._showTerminalCloseConfirmation().then(function (veto) {\n                if (!veto) {\n                    _this._isShuttingDown = true;\n                }\n                return veto;\n            });\n        }\n        this._isShuttingDown = true;\n        return false;\n    };\n    TerminalService.prototype._onShutdown = function () {\n        // Dispose of all instances\n        this.terminalInstances.forEach(function (instance) { return instance.dispose(true); });\n    };\n    TerminalService.prototype.getTabLabels = function () {\n        return this._terminalTabs.filter(function (tab) { return tab.terminalInstances.length > 0; }).map(function (tab, index) { return index + 1 + \": \" + (tab.title ? tab.title : ''); });\n    };\n    TerminalService.prototype.getFindState = function () {\n        return this._findState;\n    };\n    TerminalService.prototype._removeTab = function (tab) {\n        // Get the index of the tab and remove it from the list\n        var index = this._terminalTabs.indexOf(tab);\n        var wasActiveTab = tab === this.getActiveTab();\n        if (index !== -1) {\n            this._terminalTabs.splice(index, 1);\n        }\n        // Adjust focus if the tab was active\n        if (wasActiveTab && this._terminalTabs.length > 0) {\n            // TODO: Only focus the new tab if the removed tab had focus?\n            // const hasFocusOnExit = tab.activeInstance.hadFocusOnExit;\n            var newIndex = index < this._terminalTabs.length ? index : this._terminalTabs.length - 1;\n            this.setActiveTabByIndex(newIndex);\n            var activeInstance = this.getActiveInstance();\n            if (activeInstance) {\n                activeInstance.focus(true);\n            }\n        }\n        // Hide the panel if there are no more instances, provided that VS Code is not shutting\n        // down. When shutting down the panel is locked in place so that it is restored upon next\n        // launch.\n        if (this._terminalTabs.length === 0 && !this._isShuttingDown) {\n            this.hidePanel();\n            this._onActiveInstanceChanged.fire(undefined);\n        }\n        // Fire events\n        this._onInstancesChanged.fire();\n        if (wasActiveTab) {\n            this._onActiveTabChanged.fire();\n        }\n    };\n    TerminalService.prototype.getActiveTab = function () {\n        if (this._activeTabIndex < 0 || this._activeTabIndex >= this._terminalTabs.length) {\n            return null;\n        }\n        return this._terminalTabs[this._activeTabIndex];\n    };\n    TerminalService.prototype.getActiveInstance = function () {\n        var tab = this.getActiveTab();\n        if (!tab) {\n            return null;\n        }\n        return tab.activeInstance;\n    };\n    TerminalService.prototype.getInstanceFromId = function (terminalId) {\n        return this.terminalInstances[this._getIndexFromId(terminalId)];\n    };\n    TerminalService.prototype.getInstanceFromIndex = function (terminalIndex) {\n        return this.terminalInstances[terminalIndex];\n    };\n    TerminalService.prototype.setActiveInstance = function (terminalInstance) {\n        this.setActiveInstanceByIndex(this._getIndexFromId(terminalInstance.id));\n    };\n    TerminalService.prototype.setActiveTabByIndex = function (tabIndex) {\n        var _this = this;\n        if (tabIndex >= this._terminalTabs.length) {\n            return;\n        }\n        var didTabChange = this._activeTabIndex !== tabIndex;\n        this._activeTabIndex = tabIndex;\n        this._terminalTabs.forEach(function (t, i) { return t.setVisible(i === _this._activeTabIndex); });\n        if (didTabChange) {\n            this._onActiveTabChanged.fire();\n        }\n    };\n    TerminalService.prototype._getInstanceFromGlobalInstanceIndex = function (index) {\n        var currentTabIndex = 0;\n        while (index >= 0 && currentTabIndex < this._terminalTabs.length) {\n            var tab = this._terminalTabs[currentTabIndex];\n            var count = tab.terminalInstances.length;\n            if (index < count) {\n                return {\n                    tab: tab,\n                    tabIndex: currentTabIndex,\n                    instance: tab.terminalInstances[index],\n                    localInstanceIndex: index\n                };\n            }\n            index -= count;\n            currentTabIndex++;\n        }\n        return null;\n    };\n    TerminalService.prototype.setActiveInstanceByIndex = function (terminalIndex) {\n        var query = this._getInstanceFromGlobalInstanceIndex(terminalIndex);\n        if (!query) {\n            return;\n        }\n        query.tab.setActiveInstanceByIndex(query.localInstanceIndex);\n        var didTabChange = this._activeTabIndex !== query.tabIndex;\n        this._activeTabIndex = query.tabIndex;\n        this._terminalTabs.forEach(function (t, i) { return t.setVisible(i === query.tabIndex); });\n        // Only fire the event if there was a change\n        if (didTabChange) {\n            this._onActiveTabChanged.fire();\n        }\n    };\n    TerminalService.prototype.setActiveTabToNext = function () {\n        if (this._terminalTabs.length <= 1) {\n            return;\n        }\n        var newIndex = this._activeTabIndex + 1;\n        if (newIndex >= this._terminalTabs.length) {\n            newIndex = 0;\n        }\n        this.setActiveTabByIndex(newIndex);\n    };\n    TerminalService.prototype.setActiveTabToPrevious = function () {\n        if (this._terminalTabs.length <= 1) {\n            return;\n        }\n        var newIndex = this._activeTabIndex - 1;\n        if (newIndex < 0) {\n            newIndex = this._terminalTabs.length - 1;\n        }\n        this.setActiveTabByIndex(newIndex);\n    };\n    TerminalService.prototype.splitInstance = function (instanceToSplit, shellLaunchConfig) {\n        var _this = this;\n        if (shellLaunchConfig === void 0) { shellLaunchConfig = {}; }\n        var tab = this._getTabForInstance(instanceToSplit);\n        if (!tab) {\n            return null;\n        }\n        var instance = tab.split(this._terminalFocusContextKey, this.configHelper, shellLaunchConfig);\n        if (!instance) {\n            this._showNotEnoughSpaceToast();\n            return null;\n        }\n        this._initInstanceListeners(instance);\n        this._onInstancesChanged.fire();\n        this._terminalTabs.forEach(function (t, i) { return t.setVisible(i === _this._activeTabIndex); });\n        return instance;\n    };\n    TerminalService.prototype._initInstanceListeners = function (instance) {\n        var _this = this;\n        instance.addDisposable(instance.onDisposed(this._onInstanceDisposed.fire, this._onInstanceDisposed));\n        instance.addDisposable(instance.onTitleChanged(this._onInstanceTitleChanged.fire, this._onInstanceTitleChanged));\n        instance.addDisposable(instance.onProcessIdReady(this._onInstanceProcessIdReady.fire, this._onInstanceProcessIdReady));\n        instance.addDisposable(instance.onDimensionsChanged(function () { return _this._onInstanceDimensionsChanged.fire(instance); }));\n        instance.addDisposable(instance.onFocus(this._onActiveInstanceChanged.fire, this._onActiveInstanceChanged));\n    };\n    TerminalService.prototype._getTabForInstance = function (instance) {\n        for (var _i = 0, _a = this._terminalTabs; _i < _a.length; _i++) {\n            var tab = _a[_i];\n            if (tab.terminalInstances.indexOf(instance) !== -1) {\n                return tab;\n            }\n        }\n        return null;\n    };\n    TerminalService.prototype.showPanel = function (focus) {\n        var _this = this;\n        return new Promise(function (complete) {\n            var panel = _this._panelService.getActivePanel();\n            if (!panel || panel.getId() !== terminal_1.TERMINAL_PANEL_ID) {\n                _this._panelService.openPanel(terminal_1.TERMINAL_PANEL_ID, focus);\n                if (focus) {\n                    // Do the focus call asynchronously as going through the\n                    // command palette will force editor focus\n                    setTimeout(function () {\n                        var instance = _this.getActiveInstance();\n                        if (instance) {\n                            instance.focusWhenReady(true).then(function () { return complete(undefined); });\n                        }\n                        else {\n                            complete(undefined);\n                        }\n                    }, 0);\n                }\n                else {\n                    complete(undefined);\n                }\n            }\n            else {\n                if (focus) {\n                    // Do the focus call asynchronously as going through the\n                    // command palette will force editor focus\n                    setTimeout(function () {\n                        var instance = _this.getActiveInstance();\n                        if (instance) {\n                            instance.focusWhenReady(true).then(function () { return complete(undefined); });\n                        }\n                        else {\n                            complete(undefined);\n                        }\n                    }, 0);\n                }\n                else {\n                    complete(undefined);\n                }\n            }\n            return undefined;\n        });\n    };\n    TerminalService.prototype._getIndexFromId = function (terminalId) {\n        var terminalIndex = -1;\n        this.terminalInstances.forEach(function (terminalInstance, i) {\n            if (terminalInstance.id === terminalId) {\n                terminalIndex = i;\n            }\n        });\n        if (terminalIndex === -1) {\n            throw new Error(\"Terminal with ID \" + terminalId + \" does not exist (has it already been disposed?)\");\n        }\n        return terminalIndex;\n    };\n    TerminalService.prototype.setWorkspaceShellAllowed = function (isAllowed) {\n        this.configHelper.setWorkspaceShellAllowed(isAllowed);\n    };\n    TerminalService.prototype._showTerminalCloseConfirmation = function () {\n        var message;\n        if (this.terminalInstances.length === 1) {\n            message = nls.localize('terminalService.terminalCloseConfirmationSingular', \"There is an active terminal session, do you want to kill it?\");\n        }\n        else {\n            message = nls.localize('terminalService.terminalCloseConfirmationPlural', \"There are {0} active terminal sessions, do you want to kill them?\", this.terminalInstances.length);\n        }\n        return this._dialogService.confirm({\n            message: message,\n            type: 'warning',\n        }).then(function (res) { return !res.confirmed; });\n    };\n    TerminalService.prototype._showNotEnoughSpaceToast = function () {\n        this._notificationService.info(nls.localize('terminal.minWidth', \"Not enough space to split terminal.\"));\n    };\n    TerminalService.prototype._validateShellPaths = function (label, potentialPaths) {\n        var _this = this;\n        if (potentialPaths.length === 0) {\n            return Promise.resolve(null);\n        }\n        var current = potentialPaths.shift();\n        return this._fileService.existsFile(uri_1.URI.file(current)).then(function (exists) {\n            if (!exists) {\n                return _this._validateShellPaths(label, potentialPaths);\n            }\n            return [label, current];\n        });\n    };\n    TerminalService.prototype.preparePathForTerminalAsync = function (originalPath, executable, title) {\n        var _this = this;\n        return new Promise(function (c) {\n            var exe = executable;\n            if (!exe) {\n                c(originalPath);\n                return;\n            }\n            var hasSpace = originalPath.indexOf(' ') !== -1;\n            var pathBasename = path_1.basename(exe, '.exe');\n            var isPowerShell = pathBasename === 'pwsh' ||\n                title === 'pwsh' ||\n                pathBasename === 'powershell' ||\n                title === 'powershell';\n            if (isPowerShell && (hasSpace || originalPath.indexOf('\\'') !== -1)) {\n                c(\"& '\" + originalPath.replace(/'/g, '\\'\\'') + \"'\");\n                return;\n            }\n            if (platform_1.isWindows) {\n                // 17063 is the build number where wsl path was introduced.\n                // Update Windows uriPath to be executed in WSL.\n                if (((exe.indexOf('wsl') !== -1) || ((exe.indexOf('bash.exe') !== -1) && (exe.indexOf('git') === -1))) && (_this._getWindowsBuildNumber() >= 17063)) {\n                    c(_this._getWslPath(originalPath));\n                    return;\n                }\n                else if (hasSpace) {\n                    c('\"' + originalPath + '\"');\n                }\n                else {\n                    c(originalPath);\n                }\n                return;\n            }\n            c(terminalEnvironment_1.escapeNonWindowsPath(originalPath));\n        });\n    };\n    TerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, panelService_1.IPanelService),\n        tslib_1.__param(2, lifecycle_1.ILifecycleService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, notification_1.INotificationService),\n        tslib_1.__param(5, dialogs_1.IDialogService),\n        tslib_1.__param(6, extensions_1.IExtensionService),\n        tslib_1.__param(7, files_1.IFileService)\n    ], TerminalService);\n    return TerminalService;\n}());\nexports.TerminalService = TerminalService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/common/terminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { ITerminalService, ITerminalInstance, IShellLaunchConfig, ITerminalConfigHelper, KEYBINDING_CONTEXT_TERMINAL_FOCUS, KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE, TERMINAL_PANEL_ID, ITerminalTab, ITerminalProcessExtHostProxy, ITerminalProcessExtHostRequest, KEYBINDING_CONTEXT_TERMINAL_IS_OPEN } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { URI } from 'vs/base/common/uri';\nimport { FindReplaceState } from 'vs/editor/contrib/find/findState';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { escapeNonWindowsPath } from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { isWindows } from 'vs/base/common/platform';\nimport { basename } from 'vs/base/common/path';\n\nexport abstract class TerminalService implements ITerminalService {\n\tpublic _serviceBrand: any;\n\n\tprotected _isShuttingDown: boolean;\n\tprotected _terminalFocusContextKey: IContextKey<boolean>;\n\tprotected _findWidgetVisible: IContextKey<boolean>;\n\tprotected _terminalContainer: HTMLElement;\n\tprotected _terminalTabs: ITerminalTab[] = [];\n\tprotected get _terminalInstances(): ITerminalInstance[] {\n\t\treturn this._terminalTabs.reduce((p, c) => p.concat(c.terminalInstances), <ITerminalInstance[]>[]);\n\t}\n\tprivate _findState: FindReplaceState;\n\n\tprivate _activeTabIndex: number;\n\n\tpublic get activeTabIndex(): number { return this._activeTabIndex; }\n\tpublic get terminalInstances(): ITerminalInstance[] { return this._terminalInstances; }\n\tpublic get terminalTabs(): ITerminalTab[] { return this._terminalTabs; }\n\n\tprivate readonly _onActiveTabChanged = new Emitter<void>();\n\tpublic get onActiveTabChanged(): Event<void> { return this._onActiveTabChanged.event; }\n\tprotected readonly _onInstanceCreated = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceCreated(): Event<ITerminalInstance> { return this._onInstanceCreated.event; }\n\tprotected readonly _onInstanceDisposed = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceDisposed(): Event<ITerminalInstance> { return this._onInstanceDisposed.event; }\n\tprotected readonly _onInstanceProcessIdReady = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceProcessIdReady(): Event<ITerminalInstance> { return this._onInstanceProcessIdReady.event; }\n\tprotected readonly _onInstanceRequestExtHostProcess = new Emitter<ITerminalProcessExtHostRequest>();\n\tpublic get onInstanceRequestExtHostProcess(): Event<ITerminalProcessExtHostRequest> { return this._onInstanceRequestExtHostProcess.event; }\n\tprotected readonly _onInstanceDimensionsChanged = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceDimensionsChanged(): Event<ITerminalInstance> { return this._onInstanceDimensionsChanged.event; }\n\tprotected readonly _onInstancesChanged = new Emitter<void>();\n\tpublic get onInstancesChanged(): Event<void> { return this._onInstancesChanged.event; }\n\tprotected readonly _onInstanceTitleChanged = new Emitter<ITerminalInstance>();\n\tpublic get onInstanceTitleChanged(): Event<ITerminalInstance> { return this._onInstanceTitleChanged.event; }\n\tprotected readonly _onActiveInstanceChanged = new Emitter<ITerminalInstance | undefined>();\n\tpublic get onActiveInstanceChanged(): Event<ITerminalInstance | undefined> { return this._onActiveInstanceChanged.event; }\n\tprotected readonly _onTabDisposed = new Emitter<ITerminalTab>();\n\tpublic get onTabDisposed(): Event<ITerminalTab> { return this._onTabDisposed.event; }\n\n\tpublic abstract get configHelper(): ITerminalConfigHelper;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IPanelService protected readonly _panelService: IPanelService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IStorageService protected readonly _storageService: IStorageService,\n\t\t@INotificationService protected readonly _notificationService: INotificationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IFileService protected readonly _fileService: IFileService\n\t) {\n\t\tthis._activeTabIndex = 0;\n\t\tthis._isShuttingDown = false;\n\t\tthis._findState = new FindReplaceState();\n\t\tlifecycleService.onBeforeShutdown(event => event.veto(this._onBeforeShutdown()));\n\t\tlifecycleService.onShutdown(() => this._onShutdown());\n\t\tthis._terminalFocusContextKey = KEYBINDING_CONTEXT_TERMINAL_FOCUS.bindTo(this._contextKeyService);\n\t\tthis._findWidgetVisible = KEYBINDING_CONTEXT_TERMINAL_FIND_WIDGET_VISIBLE.bindTo(this._contextKeyService);\n\t\tthis.onTabDisposed(tab => this._removeTab(tab));\n\t\tthis.onActiveTabChanged(() => {\n\t\t\tconst instance = this.getActiveInstance();\n\t\t\tthis._onActiveInstanceChanged.fire(instance ? instance : undefined);\n\t\t});\n\n\t\tthis._handleContextKeys();\n\t}\n\n\tprivate _handleContextKeys(): void {\n\t\tconst terminalIsOpenContext = KEYBINDING_CONTEXT_TERMINAL_IS_OPEN.bindTo(this._contextKeyService);\n\n\t\tconst updateTerminalContextKeys = () => {\n\t\t\tterminalIsOpenContext.set(this.terminalInstances.length > 0);\n\t\t};\n\n\t\tthis.onInstancesChanged(() => updateTerminalContextKeys());\n\t}\n\n\tprotected abstract _getWslPath(path: string): Promise<string>;\n\tprotected abstract _getWindowsBuildNumber(): number;\n\n\tpublic abstract createTerminal(shell?: IShellLaunchConfig, wasNewTerminalAction?: boolean): ITerminalInstance;\n\tpublic abstract createInstance(terminalFocusContextKey: IContextKey<boolean>, configHelper: ITerminalConfigHelper, container: HTMLElement, shellLaunchConfig: IShellLaunchConfig, doCreateProcess: boolean): ITerminalInstance;\n\tpublic abstract selectDefaultWindowsShell(): Promise<string | undefined>;\n\tpublic abstract setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): void;\n\n\tpublic createTerminalRenderer(name: string): ITerminalInstance {\n\t\treturn this.createTerminal({ name, isRendererOnly: true });\n\t}\n\n\tpublic getActiveOrCreateInstance(wasNewTerminalAction?: boolean): ITerminalInstance {\n\t\tconst activeInstance = this.getActiveInstance();\n\t\treturn activeInstance ? activeInstance : this.createTerminal(undefined, wasNewTerminalAction);\n\t}\n\n\tpublic requestExtHostProcess(proxy: ITerminalProcessExtHostProxy, shellLaunchConfig: IShellLaunchConfig, activeWorkspaceRootUri: URI, cols: number, rows: number): void {\n\t\t// Ensure extension host is ready before requesting a process\n\t\tthis._extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\t// TODO: MainThreadTerminalService is not ready at this point, fix this\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._onInstanceRequestExtHostProcess.fire({ proxy, shellLaunchConfig, activeWorkspaceRootUri, cols, rows });\n\t\t\t}, 500);\n\t\t});\n\t}\n\n\tprivate _onBeforeShutdown(): boolean | Promise<boolean> {\n\t\tif (this.terminalInstances.length === 0) {\n\t\t\t// No terminal instances, don't veto\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.configHelper.config.confirmOnExit) {\n\t\t\t// veto if configured to show confirmation and the user choosed not to exit\n\t\t\treturn this._showTerminalCloseConfirmation().then(veto => {\n\t\t\t\tif (!veto) {\n\t\t\t\t\tthis._isShuttingDown = true;\n\t\t\t\t}\n\t\t\t\treturn veto;\n\t\t\t});\n\t\t}\n\n\t\tthis._isShuttingDown = true;\n\n\t\treturn false;\n\t}\n\n\tprivate _onShutdown(): void {\n\t\t// Dispose of all instances\n\t\tthis.terminalInstances.forEach(instance => instance.dispose(true));\n\t}\n\n\tpublic getTabLabels(): string[] {\n\t\treturn this._terminalTabs.filter(tab => tab.terminalInstances.length > 0).map((tab, index) => `${index + 1}: ${tab.title ? tab.title : ''}`);\n\t}\n\n\tpublic getFindState(): FindReplaceState {\n\t\treturn this._findState;\n\t}\n\n\tprivate _removeTab(tab: ITerminalTab): void {\n\t\t// Get the index of the tab and remove it from the list\n\t\tconst index = this._terminalTabs.indexOf(tab);\n\t\tconst wasActiveTab = tab === this.getActiveTab();\n\t\tif (index !== -1) {\n\t\t\tthis._terminalTabs.splice(index, 1);\n\t\t}\n\n\t\t// Adjust focus if the tab was active\n\t\tif (wasActiveTab && this._terminalTabs.length > 0) {\n\t\t\t// TODO: Only focus the new tab if the removed tab had focus?\n\t\t\t// const hasFocusOnExit = tab.activeInstance.hadFocusOnExit;\n\t\t\tconst newIndex = index < this._terminalTabs.length ? index : this._terminalTabs.length - 1;\n\t\t\tthis.setActiveTabByIndex(newIndex);\n\t\t\tconst activeInstance = this.getActiveInstance();\n\t\t\tif (activeInstance) {\n\t\t\t\tactiveInstance.focus(true);\n\t\t\t}\n\t\t}\n\n\t\t// Hide the panel if there are no more instances, provided that VS Code is not shutting\n\t\t// down. When shutting down the panel is locked in place so that it is restored upon next\n\t\t// launch.\n\t\tif (this._terminalTabs.length === 0 && !this._isShuttingDown) {\n\t\t\tthis.hidePanel();\n\t\t\tthis._onActiveInstanceChanged.fire(undefined);\n\t\t}\n\n\t\t// Fire events\n\t\tthis._onInstancesChanged.fire();\n\t\tif (wasActiveTab) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tpublic getActiveTab(): ITerminalTab | null {\n\t\tif (this._activeTabIndex < 0 || this._activeTabIndex >= this._terminalTabs.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._terminalTabs[this._activeTabIndex];\n\t}\n\n\tpublic getActiveInstance(): ITerminalInstance | null {\n\t\tconst tab = this.getActiveTab();\n\t\tif (!tab) {\n\t\t\treturn null;\n\t\t}\n\t\treturn tab.activeInstance;\n\t}\n\n\tpublic getInstanceFromId(terminalId: number): ITerminalInstance {\n\t\treturn this.terminalInstances[this._getIndexFromId(terminalId)];\n\t}\n\n\tpublic getInstanceFromIndex(terminalIndex: number): ITerminalInstance {\n\t\treturn this.terminalInstances[terminalIndex];\n\t}\n\n\tpublic setActiveInstance(terminalInstance: ITerminalInstance): void {\n\t\tthis.setActiveInstanceByIndex(this._getIndexFromId(terminalInstance.id));\n\t}\n\n\tpublic setActiveTabByIndex(tabIndex: number): void {\n\t\tif (tabIndex >= this._terminalTabs.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst didTabChange = this._activeTabIndex !== tabIndex;\n\t\tthis._activeTabIndex = tabIndex;\n\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === this._activeTabIndex));\n\t\tif (didTabChange) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tprivate _getInstanceFromGlobalInstanceIndex(index: number): { tab: ITerminalTab, tabIndex: number, instance: ITerminalInstance, localInstanceIndex: number } | null {\n\t\tlet currentTabIndex = 0;\n\t\twhile (index >= 0 && currentTabIndex < this._terminalTabs.length) {\n\t\t\tconst tab = this._terminalTabs[currentTabIndex];\n\t\t\tconst count = tab.terminalInstances.length;\n\t\t\tif (index < count) {\n\t\t\t\treturn {\n\t\t\t\t\ttab,\n\t\t\t\t\ttabIndex: currentTabIndex,\n\t\t\t\t\tinstance: tab.terminalInstances[index],\n\t\t\t\t\tlocalInstanceIndex: index\n\t\t\t\t};\n\t\t\t}\n\t\t\tindex -= count;\n\t\t\tcurrentTabIndex++;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic setActiveInstanceByIndex(terminalIndex: number): void {\n\t\tconst query = this._getInstanceFromGlobalInstanceIndex(terminalIndex);\n\t\tif (!query) {\n\t\t\treturn;\n\t\t}\n\n\t\tquery.tab.setActiveInstanceByIndex(query.localInstanceIndex);\n\t\tconst didTabChange = this._activeTabIndex !== query.tabIndex;\n\t\tthis._activeTabIndex = query.tabIndex;\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === query.tabIndex));\n\n\t\t// Only fire the event if there was a change\n\t\tif (didTabChange) {\n\t\t\tthis._onActiveTabChanged.fire();\n\t\t}\n\t}\n\n\tpublic setActiveTabToNext(): void {\n\t\tif (this._terminalTabs.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet newIndex = this._activeTabIndex + 1;\n\t\tif (newIndex >= this._terminalTabs.length) {\n\t\t\tnewIndex = 0;\n\t\t}\n\t\tthis.setActiveTabByIndex(newIndex);\n\t}\n\n\tpublic setActiveTabToPrevious(): void {\n\t\tif (this._terminalTabs.length <= 1) {\n\t\t\treturn;\n\t\t}\n\t\tlet newIndex = this._activeTabIndex - 1;\n\t\tif (newIndex < 0) {\n\t\t\tnewIndex = this._terminalTabs.length - 1;\n\t\t}\n\t\tthis.setActiveTabByIndex(newIndex);\n\t}\n\n\tpublic splitInstance(instanceToSplit: ITerminalInstance, shellLaunchConfig: IShellLaunchConfig = {}): ITerminalInstance | null {\n\t\tconst tab = this._getTabForInstance(instanceToSplit);\n\t\tif (!tab) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst instance = tab.split(this._terminalFocusContextKey, this.configHelper, shellLaunchConfig);\n\t\tif (!instance) {\n\t\t\tthis._showNotEnoughSpaceToast();\n\t\t\treturn null;\n\t\t}\n\n\t\tthis._initInstanceListeners(instance);\n\t\tthis._onInstancesChanged.fire();\n\n\t\tthis._terminalTabs.forEach((t, i) => t.setVisible(i === this._activeTabIndex));\n\t\treturn instance;\n\t}\n\n\tprotected _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tinstance.addDisposable(instance.onDisposed(this._onInstanceDisposed.fire, this._onInstanceDisposed));\n\t\tinstance.addDisposable(instance.onTitleChanged(this._onInstanceTitleChanged.fire, this._onInstanceTitleChanged));\n\t\tinstance.addDisposable(instance.onProcessIdReady(this._onInstanceProcessIdReady.fire, this._onInstanceProcessIdReady));\n\t\tinstance.addDisposable(instance.onDimensionsChanged(() => this._onInstanceDimensionsChanged.fire(instance)));\n\t\tinstance.addDisposable(instance.onFocus(this._onActiveInstanceChanged.fire, this._onActiveInstanceChanged));\n\t}\n\n\tprivate _getTabForInstance(instance: ITerminalInstance): ITerminalTab | null {\n\t\tfor (const tab of this._terminalTabs) {\n\t\t\tif (tab.terminalInstances.indexOf(instance) !== -1) {\n\t\t\t\treturn tab;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic showPanel(focus?: boolean): Promise<void> {\n\t\treturn new Promise<void>((complete) => {\n\t\t\tconst panel = this._panelService.getActivePanel();\n\t\t\tif (!panel || panel.getId() !== TERMINAL_PANEL_ID) {\n\t\t\t\tthis._panelService.openPanel(TERMINAL_PANEL_ID, focus);\n\t\t\t\tif (focus) {\n\t\t\t\t\t// Do the focus call asynchronously as going through the\n\t\t\t\t\t// command palette will force editor focus\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconst instance = this.getActiveInstance();\n\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\tinstance.focusWhenReady(true).then(() => complete(undefined));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplete(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcomplete(undefined);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (focus) {\n\t\t\t\t\t// Do the focus call asynchronously as going through the\n\t\t\t\t\t// command palette will force editor focus\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tconst instance = this.getActiveInstance();\n\t\t\t\t\t\tif (instance) {\n\t\t\t\t\t\t\tinstance.focusWhenReady(true).then(() => complete(undefined));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcomplete(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcomplete(undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic abstract hidePanel(): void;\n\n\tpublic abstract focusFindWidget(): Promise<void>;\n\tpublic abstract hideFindWidget(): void;\n\n\tpublic abstract findNext(): void;\n\tpublic abstract findPrevious(): void;\n\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.terminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.id === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tpublic setWorkspaceShellAllowed(isAllowed: boolean): void {\n\t\tthis.configHelper.setWorkspaceShellAllowed(isAllowed);\n\t}\n\n\tprotected _showTerminalCloseConfirmation(): Promise<boolean> {\n\t\tlet message;\n\t\tif (this.terminalInstances.length === 1) {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationSingular', \"There is an active terminal session, do you want to kill it?\");\n\t\t} else {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationPlural', \"There are {0} active terminal sessions, do you want to kill them?\", this.terminalInstances.length);\n\t\t}\n\n\t\treturn this._dialogService.confirm({\n\t\t\tmessage,\n\t\t\ttype: 'warning',\n\t\t}).then(res => !res.confirmed);\n\t}\n\n\tprotected _showNotEnoughSpaceToast(): void {\n\t\tthis._notificationService.info(nls.localize('terminal.minWidth', \"Not enough space to split terminal.\"));\n\t}\n\n\tprotected _validateShellPaths(label: string, potentialPaths: string[]): Promise<[string, string] | null> {\n\t\tif (potentialPaths.length === 0) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst current = potentialPaths.shift();\n\t\treturn this._fileService.existsFile(URI.file(current!)).then(exists => {\n\t\t\tif (!exists) {\n\t\t\t\treturn this._validateShellPaths(label, potentialPaths);\n\t\t\t}\n\t\t\treturn [label, current] as [string, string];\n\t\t});\n\t}\n\n\tpublic preparePathForTerminalAsync(originalPath: string, executable: string, title: string): Promise<string> {\n\t\treturn new Promise<string>(c => {\n\t\t\tconst exe = executable;\n\t\t\tif (!exe) {\n\t\t\t\tc(originalPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst hasSpace = originalPath.indexOf(' ') !== -1;\n\n\t\t\tconst pathBasename = basename(exe, '.exe');\n\t\t\tconst isPowerShell = pathBasename === 'pwsh' ||\n\t\t\t\ttitle === 'pwsh' ||\n\t\t\t\tpathBasename === 'powershell' ||\n\t\t\t\ttitle === 'powershell';\n\n\t\t\tif (isPowerShell && (hasSpace || originalPath.indexOf('\\'') !== -1)) {\n\t\t\t\tc(`& '${originalPath.replace(/'/g, '\\'\\'')}'`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (isWindows) {\n\t\t\t\t// 17063 is the build number where wsl path was introduced.\n\t\t\t\t// Update Windows uriPath to be executed in WSL.\n\t\t\t\tif (((exe.indexOf('wsl') !== -1) || ((exe.indexOf('bash.exe') !== -1) && (exe.indexOf('git') === -1))) && (this._getWindowsBuildNumber() >= 17063)) {\n\t\t\t\t\tc(this._getWslPath(originalPath));\n\t\t\t\t\treturn;\n\t\t\t\t} else if (hasSpace) {\n\t\t\t\t\tc('\"' + originalPath + '\"');\n\t\t\t\t} else {\n\t\t\t\t\tc(originalPath);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tc(escapeNonWindowsPath(originalPath));\n\t\t});\n\t}\n}\n"]}]}