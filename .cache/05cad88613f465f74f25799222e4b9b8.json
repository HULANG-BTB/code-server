{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dragAndDropCommand.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/dnd/dragAndDropCommand.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/selection\", \"vs/editor/common/core/range\"], function (require, exports, selection_1, range_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class DragAndDropCommand {\n        constructor(selection, targetPosition, copy) {\n            this.selection = selection;\n            this.targetPosition = targetPosition;\n            this.copy = copy;\n        }\n        getEditOperations(model, builder) {\n            let text = model.getValueInRange(this.selection);\n            if (!this.copy) {\n                builder.addEditOperation(this.selection, null);\n            }\n            builder.addEditOperation(new range_1.Range(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), text);\n            if (this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition)) // we allow users to paste content beside the selection\n            )) {\n                this.targetSelection = this.selection;\n                return;\n            }\n            if (this.copy) {\n                this.targetSelection = new selection_1.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ?\n                    this.targetPosition.column + this.selection.endColumn - this.selection.startColumn :\n                    this.selection.endColumn);\n                return;\n            }\n            if (this.targetPosition.lineNumber > this.selection.endLineNumber) {\n                // Drag the selection downwards\n                this.targetSelection = new selection_1.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ?\n                    this.targetPosition.column + this.selection.endColumn - this.selection.startColumn :\n                    this.selection.endColumn);\n                return;\n            }\n            if (this.targetPosition.lineNumber < this.selection.endLineNumber) {\n                // Drag the selection upwards\n                this.targetSelection = new selection_1.Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ?\n                    this.targetPosition.column + this.selection.endColumn - this.selection.startColumn :\n                    this.selection.endColumn);\n                return;\n            }\n            // The target position is at the same line as the selection's end position.\n            if (this.selection.endColumn <= this.targetPosition.column) {\n                // The target position is after the selection's end position\n                this.targetSelection = new selection_1.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ?\n                    this.targetPosition.column - this.selection.endColumn + this.selection.startColumn :\n                    this.targetPosition.column - this.selection.endColumn + this.selection.startColumn, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ?\n                    this.targetPosition.column :\n                    this.selection.endColumn);\n            }\n            else {\n                // The target position is before the selection's end postion. Since the selection doesn't contain the target position, the selection is one-line and target position is before this selection.\n                this.targetSelection = new selection_1.Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);\n            }\n        }\n        computeCursorState(model, helper) {\n            return this.targetSelection;\n        }\n    }\n    exports.DragAndDropCommand = DragAndDropCommand;\n});\n",null]}