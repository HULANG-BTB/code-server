{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskSystem.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TaskErrors;\n    (function (TaskErrors) {\n        TaskErrors[TaskErrors[\"NotConfigured\"] = 0] = \"NotConfigured\";\n        TaskErrors[TaskErrors[\"RunningTask\"] = 1] = \"RunningTask\";\n        TaskErrors[TaskErrors[\"NoBuildTask\"] = 2] = \"NoBuildTask\";\n        TaskErrors[TaskErrors[\"NoTestTask\"] = 3] = \"NoTestTask\";\n        TaskErrors[TaskErrors[\"ConfigValidationError\"] = 4] = \"ConfigValidationError\";\n        TaskErrors[TaskErrors[\"TaskNotFound\"] = 5] = \"TaskNotFound\";\n        TaskErrors[TaskErrors[\"NoValidTaskRunner\"] = 6] = \"NoValidTaskRunner\";\n        TaskErrors[TaskErrors[\"UnknownError\"] = 7] = \"UnknownError\";\n    })(TaskErrors = exports.TaskErrors || (exports.TaskErrors = {}));\n    class TaskError {\n        constructor(severity, message, code) {\n            this.severity = severity;\n            this.message = message;\n            this.code = code;\n        }\n    }\n    exports.TaskError = TaskError;\n    var Triggers;\n    (function (Triggers) {\n        Triggers.shortcut = 'shortcut';\n        Triggers.command = 'command';\n    })(Triggers = exports.Triggers || (exports.Triggers = {}));\n    var TaskExecuteKind;\n    (function (TaskExecuteKind) {\n        TaskExecuteKind[TaskExecuteKind[\"Started\"] = 1] = \"Started\";\n        TaskExecuteKind[TaskExecuteKind[\"Active\"] = 2] = \"Active\";\n    })(TaskExecuteKind = exports.TaskExecuteKind || (exports.TaskExecuteKind = {}));\n});\n",null]}