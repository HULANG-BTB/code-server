{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/nls\", \"vs/platform/actions/common/actions\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/instantiation/common/descriptors\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/registry/common/platform\", \"vs/workbench/browser/editor\", \"vs/workbench/common/actions\", \"vs/workbench/common/editor\", \"vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory\", \"./webviewCommands\", \"./webviewEditor\", \"./webviewEditorInput\", \"./webviewEditorService\", \"vs/platform/contextkey/common/contextkeys\", \"vs/base/browser/browser\"], function (require, exports, keyCodes_1, nls_1, actions_1, contextkey_1, descriptors_1, extensions_1, keybindingsRegistry_1, platform_1, editor_1, actions_2, editor_2, webviewEditorInputFactory_1, webviewCommands_1, webviewEditor_1, webviewEditorInput_1, webviewEditorService_1, contextkeys_1, browser_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    (platform_1.Registry.as(editor_1.Extensions.Editors)).registerEditor(new editor_1.EditorDescriptor(webviewEditor_1.WebviewEditor, webviewEditor_1.WebviewEditor.ID, nls_1.localize('webview.editor.label', \"webview editor\")), [new descriptors_1.SyncDescriptor(webviewEditorInput_1.WebviewEditorInput)]);\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(webviewEditorInputFactory_1.WebviewEditorInputFactory.ID, webviewEditorInputFactory_1.WebviewEditorInputFactory);\n    extensions_1.registerSingleton(webviewEditorService_1.IWebviewEditorService, webviewEditorService_1.WebviewEditorService, true);\n    const webviewDeveloperCategory = nls_1.localize('developer', \"Developer\");\n    const actionRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    function registerWebViewCommands(editorId) {\n        const contextKeyExpr = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.equals('activeEditor', editorId), contextkey_1.ContextKeyExpr.not('editorFocus') /* https://github.com/Microsoft/vscode/issues/58668 */);\n        const showNextFindWidgetCommand = new webviewCommands_1.ShowWebViewEditorFindWidgetCommand({\n            id: webviewCommands_1.ShowWebViewEditorFindWidgetCommand.ID,\n            precondition: contextKeyExpr,\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        });\n        showNextFindWidgetCommand.register();\n        (new webviewCommands_1.HideWebViewEditorFindCommand({\n            id: webviewCommands_1.HideWebViewEditorFindCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, webviewEditor_1.KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE),\n            kbOpts: {\n                primary: keyCodes_1.KeyCode.Escape,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        (new webviewCommands_1.SelectAllWebviewEditorCommand({\n            id: webviewCommands_1.SelectAllWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_A,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        // These commands are only needed on MacOS where we have to disable the menu bar commands\n        if (browser_1.isMacintosh) {\n            (new webviewCommands_1.CopyWebviewEditorCommand({\n                id: webviewCommands_1.CopyWebviewEditorCommand.ID,\n                precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n                kbOpts: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            })).register();\n            (new webviewCommands_1.PasteWebviewEditorCommand({\n                id: webviewCommands_1.PasteWebviewEditorCommand.ID,\n                precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n                kbOpts: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            })).register();\n            (new webviewCommands_1.CutWebviewEditorCommand({\n                id: webviewCommands_1.CutWebviewEditorCommand.ID,\n                precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n                kbOpts: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            })).register();\n            (new webviewCommands_1.UndoWebviewEditorCommand({\n                id: webviewCommands_1.UndoWebviewEditorCommand.ID,\n                precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n                kbOpts: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Z,\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            })).register();\n            (new webviewCommands_1.RedoWebviewEditorCommand({\n                id: webviewCommands_1.RedoWebviewEditorCommand.ID,\n                precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n                kbOpts: {\n                    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Y,\n                    secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z],\n                    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            })).register();\n        }\n    }\n    exports.registerWebViewCommands = registerWebViewCommands;\n    registerWebViewCommands(webviewEditor_1.WebviewEditor.ID);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(webviewCommands_1.OpenWebviewDeveloperToolsAction, webviewCommands_1.OpenWebviewDeveloperToolsAction.ID, webviewCommands_1.OpenWebviewDeveloperToolsAction.LABEL), 'Webview Tools', webviewDeveloperCategory);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(webviewCommands_1.ReloadWebviewAction, webviewCommands_1.ReloadWebviewAction.ID, webviewCommands_1.ReloadWebviewAction.LABEL), 'Reload Webview', webviewDeveloperCategory);\n});\n",null]}