{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLayout.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLayout.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar scrollable_1 = require(\"vs/base/common/scrollable\");\nvar linesLayout_1 = require(\"vs/editor/common/viewLayout/linesLayout\");\nvar viewModel_1 = require(\"vs/editor/common/viewModel/viewModel\");\nvar SMOOTH_SCROLLING_TIME = 125;\nvar ViewLayout = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewLayout, _super);\n    function ViewLayout(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        var _this = _super.call(this) || this;\n        _this._configuration = configuration;\n        _this._linesLayout = new linesLayout_1.LinesLayout(lineCount, _this._configuration.editor.lineHeight);\n        _this.scrollable = _this._register(new scrollable_1.Scrollable(0, scheduleAtNextAnimationFrame));\n        _this._configureSmoothScrollDuration();\n        _this.scrollable.setScrollDimensions({\n            width: configuration.editor.layoutInfo.contentWidth,\n            height: configuration.editor.layoutInfo.contentHeight\n        });\n        _this.onDidScroll = _this.scrollable.onScroll;\n        _this._updateHeight();\n        return _this;\n    }\n    ViewLayout.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    ViewLayout.prototype.onHeightMaybeChanged = function () {\n        this._updateHeight();\n    };\n    ViewLayout.prototype._configureSmoothScrollDuration = function () {\n        this.scrollable.setSmoothScrollDuration(this._configuration.editor.viewInfo.smoothScrolling ? SMOOTH_SCROLLING_TIME : 0);\n    };\n    // ---- begin view event handlers\n    ViewLayout.prototype.onConfigurationChanged = function (e) {\n        if (e.lineHeight) {\n            this._linesLayout.setLineHeight(this._configuration.editor.lineHeight);\n        }\n        if (e.layoutInfo) {\n            this.scrollable.setScrollDimensions({\n                width: this._configuration.editor.layoutInfo.contentWidth,\n                height: this._configuration.editor.layoutInfo.contentHeight\n            });\n        }\n        if (e.viewInfo) {\n            this._configureSmoothScrollDuration();\n        }\n        this._updateHeight();\n    };\n    ViewLayout.prototype.onFlushed = function (lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    };\n    ViewLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    };\n    ViewLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    };\n    // ---- end view event handlers\n    ViewLayout.prototype._getHorizontalScrollbarHeight = function (scrollDimensions) {\n        if (this._configuration.editor.viewInfo.scrollbar.horizontal === scrollable_1.ScrollbarVisibility.Hidden) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (scrollDimensions.width >= scrollDimensions.scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return this._configuration.editor.viewInfo.scrollbar.horizontalScrollbarSize;\n    };\n    ViewLayout.prototype._getTotalHeight = function () {\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        var result = this._linesLayout.getLinesTotalHeight();\n        if (this._configuration.editor.viewInfo.scrollBeyondLastLine) {\n            result += scrollDimensions.height - this._configuration.editor.lineHeight;\n        }\n        else {\n            result += this._getHorizontalScrollbarHeight(scrollDimensions);\n        }\n        return Math.max(scrollDimensions.height, result);\n    };\n    ViewLayout.prototype._updateHeight = function () {\n        this.scrollable.setScrollDimensions({\n            scrollHeight: this._getTotalHeight()\n        });\n    };\n    // ---- Layouting logic\n    ViewLayout.prototype.getCurrentViewport = function () {\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n        return new viewModel_1.Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    };\n    ViewLayout.prototype.getFutureViewport = function () {\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        var currentScrollPosition = this.scrollable.getFutureScrollPosition();\n        return new viewModel_1.Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    };\n    ViewLayout.prototype._computeScrollWidth = function (maxLineWidth, viewportWidth) {\n        var isViewportWrapping = this._configuration.editor.wrappingInfo.isViewportWrapping;\n        if (!isViewportWrapping) {\n            var extraHorizontalSpace = this._configuration.editor.viewInfo.scrollBeyondLastColumn * this._configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n            var whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace, viewportWidth, whitespaceMinWidth);\n        }\n        return Math.max(maxLineWidth, viewportWidth);\n    };\n    ViewLayout.prototype.onMaxLineWidthChanged = function (maxLineWidth) {\n        var newScrollWidth = this._computeScrollWidth(maxLineWidth, this.getCurrentViewport().width);\n        this.scrollable.setScrollDimensions({\n            scrollWidth: newScrollWidth\n        });\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    };\n    // ---- view state\n    ViewLayout.prototype.saveState = function () {\n        var currentScrollPosition = this.scrollable.getFutureScrollPosition();\n        var scrollTop = currentScrollPosition.scrollTop;\n        var firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        var whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    };\n    // ---- IVerticalLayoutProvider\n    ViewLayout.prototype.addWhitespace = function (afterLineNumber, ordinal, height, minWidth) {\n        return this._linesLayout.insertWhitespace(afterLineNumber, ordinal, height, minWidth);\n    };\n    ViewLayout.prototype.changeWhitespace = function (id, newAfterLineNumber, newHeight) {\n        return this._linesLayout.changeWhitespace(id, newAfterLineNumber, newHeight);\n    };\n    ViewLayout.prototype.removeWhitespace = function (id) {\n        return this._linesLayout.removeWhitespace(id);\n    };\n    ViewLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n    };\n    ViewLayout.prototype.isAfterLines = function (verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    };\n    ViewLayout.prototype.getLineNumberAtVerticalOffset = function (verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    };\n    ViewLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    };\n    ViewLayout.prototype.getLinesViewportData = function () {\n        var visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    };\n    ViewLayout.prototype.getLinesViewportDataAtScrollTop = function (scrollTop) {\n        // do some minimal validations on scrollTop\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    };\n    ViewLayout.prototype.getWhitespaceViewportData = function () {\n        var visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    };\n    ViewLayout.prototype.getWhitespaces = function () {\n        return this._linesLayout.getWhitespaces();\n    };\n    // ---- IScrollingProvider\n    ViewLayout.prototype.getScrollWidth = function () {\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    };\n    ViewLayout.prototype.getScrollHeight = function () {\n        var scrollDimensions = this.scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    };\n    ViewLayout.prototype.getCurrentScrollLeft = function () {\n        var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    };\n    ViewLayout.prototype.getCurrentScrollTop = function () {\n        var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    };\n    ViewLayout.prototype.validateScrollPosition = function (scrollPosition) {\n        return this.scrollable.validateScrollPosition(scrollPosition);\n    };\n    ViewLayout.prototype.setScrollPositionNow = function (position) {\n        this.scrollable.setScrollPositionNow(position);\n    };\n    ViewLayout.prototype.setScrollPositionSmooth = function (position) {\n        this.scrollable.setScrollPositionSmooth(position);\n    };\n    ViewLayout.prototype.deltaScrollNow = function (deltaScrollLeft, deltaScrollTop) {\n        var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n        this.scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    };\n    return ViewLayout;\n}(lifecycle_1.Disposable));\nexports.ViewLayout = ViewLayout;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLayout.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/viewLayout/viewLayout.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,sDAAmE;AACnE,wDAA6H;AAG7H,uEAAsE;AAGtE,kEAA0G;AAE1G,IAAM,qBAAqB,GAAG,GAAG,CAAC;AAElC;IAAgC,sCAAU;IAQzC,oBAAY,aAA0C,EAAE,SAAiB,EAAE,4BAAmE;QAA9I,YACC,iBAAO,SAeP;QAbA,KAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,KAAI,CAAC,YAAY,GAAG,IAAI,yBAAW,CAAC,SAAS,EAAE,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAEtF,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,SAAS,CAAC,IAAI,uBAAU,CAAC,CAAC,EAAE,4BAA4B,CAAC,CAAC,CAAC;QAClF,KAAI,CAAC,8BAA8B,EAAE,CAAC;QAEtC,KAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;YACnC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY;YACnD,MAAM,EAAE,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa;SACrD,CAAC,CAAC;QACH,KAAI,CAAC,WAAW,GAAG,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAE5C,KAAI,CAAC,aAAa,EAAE,CAAC;;IACtB,CAAC;IAEM,4BAAO,GAAd;QACC,iBAAM,OAAO,WAAE,CAAC;IACjB,CAAC;IAEM,yCAAoB,GAA3B;QACC,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAEO,mDAA8B,GAAtC;QACC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1H,CAAC;IAED,iCAAiC;IAE1B,2CAAsB,GAA7B,UAA8B,CAA6B;QAC1D,IAAI,CAAC,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACvE;QACD,IAAI,CAAC,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;gBACnC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY;gBACzD,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa;aAC3D,CAAC,CAAC;SACH;QACD,IAAI,CAAC,CAAC,QAAQ,EAAE;YACf,IAAI,CAAC,8BAA8B,EAAE,CAAC;SACtC;QACD,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IACM,8BAAS,GAAhB,UAAiB,SAAiB;QACjC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IACM,mCAAc,GAArB,UAAsB,cAAsB,EAAE,YAAoB;QACjE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAChE,CAAC;IACM,oCAAe,GAAtB,UAAuB,cAAsB,EAAE,YAAoB;QAClE,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IACjE,CAAC;IAED,+BAA+B;IAEvB,kDAA6B,GAArC,UAAsC,gBAAmC;QACxE,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,KAAK,gCAAmB,CAAC,MAAM,EAAE;YAC5F,mCAAmC;YACnC,OAAO,CAAC,CAAC;SACT;QACD,IAAI,gBAAgB,CAAC,KAAK,IAAI,gBAAgB,CAAC,WAAW,EAAE;YAC3D,mCAAmC;YACnC,OAAO,CAAC,CAAC;SACT;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,uBAAuB,CAAC;IAC9E,CAAC;IAEO,oCAAe,GAAvB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAE/D,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,oBAAoB,EAAE;YAC7D,MAAM,IAAI,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC;SAC1E;aAAM;YACN,MAAM,IAAI,IAAI,CAAC,6BAA6B,CAAC,gBAAgB,CAAC,CAAC;SAC/D;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAEO,kCAAa,GAArB;QACC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;YACnC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE;SACpC,CAAC,CAAC;IACJ,CAAC;IAED,uBAAuB;IAEhB,uCAAkB,GAAzB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAC/D,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACzE,OAAO,IAAI,oBAAQ,CAClB,qBAAqB,CAAC,SAAS,EAC/B,qBAAqB,CAAC,UAAU,EAChC,gBAAgB,CAAC,KAAK,EACtB,gBAAgB,CAAC,MAAM,CACvB,CAAC;IACH,CAAC;IAEM,sCAAiB,GAAxB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAC/D,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,EAAE,CAAC;QACxE,OAAO,IAAI,oBAAQ,CAClB,qBAAqB,CAAC,SAAS,EAC/B,qBAAqB,CAAC,UAAU,EAChC,gBAAgB,CAAC,KAAK,EACtB,gBAAgB,CAAC,MAAM,CACvB,CAAC;IACH,CAAC;IAEO,wCAAmB,GAA3B,UAA4B,YAAoB,EAAE,aAAqB;QACtE,IAAI,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC;QACpF,IAAI,CAAC,kBAAkB,EAAE;YACxB,IAAM,oBAAoB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,8BAA8B,CAAC;YAC7J,IAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC;YACrE,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,oBAAoB,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC;SACxF;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;IAEM,0CAAqB,GAA5B,UAA6B,YAAoB;QAChD,IAAI,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC,CAAC;QAC7F,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC;YACnC,WAAW,EAAE,cAAc;SAC3B,CAAC,CAAC;QAEH,kFAAkF;QAClF,IAAI,CAAC,aAAa,EAAE,CAAC;IACtB,CAAC;IAED,kBAAkB;IAEX,8BAAS,GAAhB;QACC,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,uBAAuB,EAAE,CAAC;QACxE,IAAI,SAAS,GAAG,qBAAqB,CAAC,SAAS,CAAC;QAChD,IAAI,yBAAyB,GAAG,IAAI,CAAC,YAAY,CAAC,oCAAoC,CAAC,SAAS,CAAC,CAAC;QAClG,IAAI,wBAAwB,GAAG,IAAI,CAAC,YAAY,CAAC,8CAA8C,CAAC,yBAAyB,CAAC,CAAC;QAC3H,OAAO;YACN,SAAS,EAAE,SAAS;YACpB,yBAAyB,EAAE,SAAS,GAAG,wBAAwB;YAC/D,UAAU,EAAE,qBAAqB,CAAC,UAAU;SAC5C,CAAC;IACH,CAAC;IAED,+BAA+B;IAExB,kCAAa,GAApB,UAAqB,eAAuB,EAAE,OAAe,EAAE,MAAc,EAAE,QAAgB;QAC9F,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,eAAe,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IACvF,CAAC;IACM,qCAAgB,GAAvB,UAAwB,EAAU,EAAE,kBAA0B,EAAE,SAAiB;QAChF,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,EAAE,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAC9E,CAAC;IACM,qCAAgB,GAAvB,UAAwB,EAAU;QACjC,OAAO,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC;IACM,mDAA8B,GAArC,UAAsC,UAAkB;QACvD,OAAO,IAAI,CAAC,YAAY,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;IACrE,CAAC;IACM,iCAAY,GAAnB,UAAoB,cAAsB;QACzC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACvD,CAAC;IACM,kDAA6B,GAApC,UAAqC,cAAsB;QAC1D,OAAO,IAAI,CAAC,YAAY,CAAC,oCAAoC,CAAC,cAAc,CAAC,CAAC;IAC/E,CAAC;IAEM,kDAA6B,GAApC,UAAqC,cAAsB;QAC1D,OAAO,IAAI,CAAC,YAAY,CAAC,6BAA6B,CAAC,cAAc,CAAC,CAAC;IACxE,CAAC;IACM,yCAAoB,GAA3B;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACnG,CAAC;IACM,oDAA+B,GAAtC,UAAuC,SAAiB;QACvD,2CAA2C;QAC3C,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAC/D,IAAI,SAAS,GAAG,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,CAAC,YAAY,EAAE;YACxE,SAAS,GAAG,gBAAgB,CAAC,YAAY,GAAG,gBAAgB,CAAC,MAAM,CAAC;SACpE;QACD,IAAI,SAAS,GAAG,CAAC,EAAE;YAClB,SAAS,GAAG,CAAC,CAAC;SACd;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/F,CAAC;IACM,8CAAyB,GAAhC;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC7C,OAAO,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACxG,CAAC;IACM,mCAAc,GAArB;QACC,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;IAC3C,CAAC;IAED,0BAA0B;IAGnB,mCAAc,GAArB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAC/D,OAAO,gBAAgB,CAAC,WAAW,CAAC;IACrC,CAAC;IACM,oCAAe,GAAtB;QACC,IAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC;QAC/D,OAAO,gBAAgB,CAAC,YAAY,CAAC;IACtC,CAAC;IAEM,yCAAoB,GAA3B;QACC,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACzE,OAAO,qBAAqB,CAAC,UAAU,CAAC;IACzC,CAAC;IACM,wCAAmB,GAA1B;QACC,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACzE,OAAO,qBAAqB,CAAC,SAAS,CAAC;IACxC,CAAC;IAEM,2CAAsB,GAA7B,UAA8B,cAA+C;QAC5E,OAAO,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;IAC/D,CAAC;IAEM,yCAAoB,GAA3B,UAA4B,QAAyC;QACpE,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;IAEM,4CAAuB,GAA9B,UAA+B,QAAyC;QACvE,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEM,mCAAc,GAArB,UAAsB,eAAuB,EAAE,cAAsB;QACpE,IAAM,qBAAqB,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,EAAE,CAAC;QACzE,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC;YACpC,UAAU,EAAE,qBAAqB,CAAC,UAAU,GAAG,eAAe;YAC9D,SAAS,EAAE,qBAAqB,CAAC,SAAS,GAAG,cAAc;SAC3D,CAAC,CAAC;IACJ,CAAC;IACF,iBAAC;AAAD,CAAC,AAnPD,CAAgC,sBAAU,GAmPzC;AAnPY,gCAAU","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IScrollDimensions, IScrollPosition, ScrollEvent, Scrollable, ScrollbarVisibility } from 'vs/base/common/scrollable';\nimport { IConfigurationChangedEvent } from 'vs/editor/common/config/editorOptions';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { LinesLayout } from 'vs/editor/common/viewLayout/linesLayout';\nimport { IPartialViewLinesViewportData } from 'vs/editor/common/viewLayout/viewLinesViewportData';\nimport { IEditorWhitespace } from 'vs/editor/common/viewLayout/whitespaceComputer';\nimport { IViewLayout, IViewWhitespaceViewportData, Viewport } from 'vs/editor/common/viewModel/viewModel';\n\nconst SMOOTH_SCROLLING_TIME = 125;\n\nexport class ViewLayout extends Disposable implements IViewLayout {\n\n\tprivate readonly _configuration: editorCommon.IConfiguration;\n\tprivate readonly _linesLayout: LinesLayout;\n\n\tpublic readonly scrollable: Scrollable;\n\tpublic readonly onDidScroll: Event<ScrollEvent>;\n\n\tconstructor(configuration: editorCommon.IConfiguration, lineCount: number, scheduleAtNextAnimationFrame: (callback: () => void) => IDisposable) {\n\t\tsuper();\n\n\t\tthis._configuration = configuration;\n\t\tthis._linesLayout = new LinesLayout(lineCount, this._configuration.editor.lineHeight);\n\n\t\tthis.scrollable = this._register(new Scrollable(0, scheduleAtNextAnimationFrame));\n\t\tthis._configureSmoothScrollDuration();\n\n\t\tthis.scrollable.setScrollDimensions({\n\t\t\twidth: configuration.editor.layoutInfo.contentWidth,\n\t\t\theight: configuration.editor.layoutInfo.contentHeight\n\t\t});\n\t\tthis.onDidScroll = this.scrollable.onScroll;\n\n\t\tthis._updateHeight();\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tpublic onHeightMaybeChanged(): void {\n\t\tthis._updateHeight();\n\t}\n\n\tprivate _configureSmoothScrollDuration(): void {\n\t\tthis.scrollable.setSmoothScrollDuration(this._configuration.editor.viewInfo.smoothScrolling ? SMOOTH_SCROLLING_TIME : 0);\n\t}\n\n\t// ---- begin view event handlers\n\n\tpublic onConfigurationChanged(e: IConfigurationChangedEvent): void {\n\t\tif (e.lineHeight) {\n\t\t\tthis._linesLayout.setLineHeight(this._configuration.editor.lineHeight);\n\t\t}\n\t\tif (e.layoutInfo) {\n\t\t\tthis.scrollable.setScrollDimensions({\n\t\t\t\twidth: this._configuration.editor.layoutInfo.contentWidth,\n\t\t\t\theight: this._configuration.editor.layoutInfo.contentHeight\n\t\t\t});\n\t\t}\n\t\tif (e.viewInfo) {\n\t\t\tthis._configureSmoothScrollDuration();\n\t\t}\n\t\tthis._updateHeight();\n\t}\n\tpublic onFlushed(lineCount: number): void {\n\t\tthis._linesLayout.onFlushed(lineCount);\n\t}\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n\t}\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tthis._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n\t}\n\n\t// ---- end view event handlers\n\n\tprivate _getHorizontalScrollbarHeight(scrollDimensions: IScrollDimensions): number {\n\t\tif (this._configuration.editor.viewInfo.scrollbar.horizontal === ScrollbarVisibility.Hidden) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\tif (scrollDimensions.width >= scrollDimensions.scrollWidth) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._configuration.editor.viewInfo.scrollbar.horizontalScrollbarSize;\n\t}\n\n\tprivate _getTotalHeight(): number {\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\n\t\tlet result = this._linesLayout.getLinesTotalHeight();\n\t\tif (this._configuration.editor.viewInfo.scrollBeyondLastLine) {\n\t\t\tresult += scrollDimensions.height - this._configuration.editor.lineHeight;\n\t\t} else {\n\t\t\tresult += this._getHorizontalScrollbarHeight(scrollDimensions);\n\t\t}\n\n\t\treturn Math.max(scrollDimensions.height, result);\n\t}\n\n\tprivate _updateHeight(): void {\n\t\tthis.scrollable.setScrollDimensions({\n\t\t\tscrollHeight: this._getTotalHeight()\n\t\t});\n\t}\n\n\t// ---- Layouting logic\n\n\tpublic getCurrentViewport(): Viewport {\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tpublic getFutureViewport(): Viewport {\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this.scrollable.getFutureScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tprivate _computeScrollWidth(maxLineWidth: number, viewportWidth: number): number {\n\t\tlet isViewportWrapping = this._configuration.editor.wrappingInfo.isViewportWrapping;\n\t\tif (!isViewportWrapping) {\n\t\t\tconst extraHorizontalSpace = this._configuration.editor.viewInfo.scrollBeyondLastColumn * this._configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n\t\t\tconst whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n\t\t\treturn Math.max(maxLineWidth + extraHorizontalSpace, viewportWidth, whitespaceMinWidth);\n\t\t}\n\t\treturn Math.max(maxLineWidth, viewportWidth);\n\t}\n\n\tpublic onMaxLineWidthChanged(maxLineWidth: number): void {\n\t\tlet newScrollWidth = this._computeScrollWidth(maxLineWidth, this.getCurrentViewport().width);\n\t\tthis.scrollable.setScrollDimensions({\n\t\t\tscrollWidth: newScrollWidth\n\t\t});\n\n\t\t// The height might depend on the fact that there is a horizontal scrollbar or not\n\t\tthis._updateHeight();\n\t}\n\n\t// ---- view state\n\n\tpublic saveState(): { scrollTop: number; scrollTopWithoutViewZones: number; scrollLeft: number; } {\n\t\tconst currentScrollPosition = this.scrollable.getFutureScrollPosition();\n\t\tlet scrollTop = currentScrollPosition.scrollTop;\n\t\tlet firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\t\tlet whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n\t\treturn {\n\t\t\tscrollTop: scrollTop,\n\t\t\tscrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft\n\t\t};\n\t}\n\n\t// ---- IVerticalLayoutProvider\n\n\tpublic addWhitespace(afterLineNumber: number, ordinal: number, height: number, minWidth: number): number {\n\t\treturn this._linesLayout.insertWhitespace(afterLineNumber, ordinal, height, minWidth);\n\t}\n\tpublic changeWhitespace(id: number, newAfterLineNumber: number, newHeight: number): boolean {\n\t\treturn this._linesLayout.changeWhitespace(id, newAfterLineNumber, newHeight);\n\t}\n\tpublic removeWhitespace(id: number): boolean {\n\t\treturn this._linesLayout.removeWhitespace(id);\n\t}\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\treturn this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n\t}\n\tpublic isAfterLines(verticalOffset: number): boolean {\n\t\treturn this._linesLayout.isAfterLines(verticalOffset);\n\t}\n\tpublic getLineNumberAtVerticalOffset(verticalOffset: number): number {\n\t\treturn this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n\t}\n\n\tpublic getWhitespaceAtVerticalOffset(verticalOffset: number): IViewWhitespaceViewportData | null {\n\t\treturn this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n\t}\n\tpublic getLinesViewportData(): IPartialViewLinesViewportData {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n\t}\n\tpublic getLinesViewportDataAtScrollTop(scrollTop: number): IPartialViewLinesViewportData {\n\t\t// do some minimal validations on scrollTop\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\t\tif (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n\t\t\tscrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n\t\t}\n\t\tif (scrollTop < 0) {\n\t\t\tscrollTop = 0;\n\t\t}\n\t\treturn this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n\t}\n\tpublic getWhitespaceViewportData(): IViewWhitespaceViewportData[] {\n\t\tconst visibleBox = this.getCurrentViewport();\n\t\treturn this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n\t}\n\tpublic getWhitespaces(): IEditorWhitespace[] {\n\t\treturn this._linesLayout.getWhitespaces();\n\t}\n\n\t// ---- IScrollingProvider\n\n\n\tpublic getScrollWidth(): number {\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollWidth;\n\t}\n\tpublic getScrollHeight(): number {\n\t\tconst scrollDimensions = this.scrollable.getScrollDimensions();\n\t\treturn scrollDimensions.scrollHeight;\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\tconst currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollLeft;\n\t}\n\tpublic getCurrentScrollTop(): number {\n\t\tconst currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n\t\treturn currentScrollPosition.scrollTop;\n\t}\n\n\tpublic validateScrollPosition(scrollPosition: editorCommon.INewScrollPosition): IScrollPosition {\n\t\treturn this.scrollable.validateScrollPosition(scrollPosition);\n\t}\n\n\tpublic setScrollPositionNow(position: editorCommon.INewScrollPosition): void {\n\t\tthis.scrollable.setScrollPositionNow(position);\n\t}\n\n\tpublic setScrollPositionSmooth(position: editorCommon.INewScrollPosition): void {\n\t\tthis.scrollable.setScrollPositionSmooth(position);\n\t}\n\n\tpublic deltaScrollNow(deltaScrollLeft: number, deltaScrollTop: number): void {\n\t\tconst currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n\t\tthis.scrollable.setScrollPositionNow({\n\t\t\tscrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n\t\t\tscrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n\t\t});\n\t}\n}\n"]}]}