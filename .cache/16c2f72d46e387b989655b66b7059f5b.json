{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWorkspace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWorkspace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar nls_1 = require(\"vs/nls\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar search_1 = require(\"vs/workbench/services/search/common/search\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar queryBuilder_1 = require(\"vs/workbench/contrib/search/common/queryBuilder\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar MainThreadWorkspace = /** @class */ (function () {\n    function MainThreadWorkspace(extHostContext, _searchService, _contextService, _textFileService, _workspaceEditingService, _statusbarService, _windowService, _instantiationService, _labelService) {\n        var _this = this;\n        this._searchService = _searchService;\n        this._contextService = _contextService;\n        this._textFileService = _textFileService;\n        this._workspaceEditingService = _workspaceEditingService;\n        this._statusbarService = _statusbarService;\n        this._windowService = _windowService;\n        this._instantiationService = _instantiationService;\n        this._labelService = _labelService;\n        this._toDispose = [];\n        this._activeCancelTokens = Object.create(null);\n        this._queryBuilder = this._instantiationService.createInstance(queryBuilder_1.QueryBuilder);\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostWorkspace);\n        this._contextService.getCompleteWorkspace().then(function (workspace) { return _this._proxy.$initializeWorkspace(_this.getWorkspaceData(workspace)); });\n        this._contextService.onDidChangeWorkspaceFolders(this._onDidChangeWorkspace, this, this._toDispose);\n        this._contextService.onDidChangeWorkbenchState(this._onDidChangeWorkspace, this, this._toDispose);\n    }\n    MainThreadWorkspace.prototype.dispose = function () {\n        lifecycle_1.dispose(this._toDispose);\n        for (var requestId in this._activeCancelTokens) {\n            var tokenSource = this._activeCancelTokens[requestId];\n            tokenSource.cancel();\n        }\n    };\n    // --- workspace ---\n    MainThreadWorkspace.prototype.$updateWorkspaceFolders = function (extensionName, index, deleteCount, foldersToAdd) {\n        var workspaceFoldersToAdd = foldersToAdd.map(function (f) { return ({ uri: uri_1.URI.revive(f.uri), name: f.name }); });\n        // Indicate in status message\n        this._statusbarService.setStatusMessage(this.getStatusMessage(extensionName, workspaceFoldersToAdd.length, deleteCount), 10 * 1000 /* 10s */);\n        return this._workspaceEditingService.updateFolders(index, deleteCount, workspaceFoldersToAdd, true);\n    };\n    MainThreadWorkspace.prototype.getStatusMessage = function (extensionName, addCount, removeCount) {\n        var message;\n        var wantsToAdd = addCount > 0;\n        var wantsToDelete = removeCount > 0;\n        // Add Folders\n        if (wantsToAdd && !wantsToDelete) {\n            if (addCount === 1) {\n                message = nls_1.localize('folderStatusMessageAddSingleFolder', \"Extension '{0}' added 1 folder to the workspace\", extensionName);\n            }\n            else {\n                message = nls_1.localize('folderStatusMessageAddMultipleFolders', \"Extension '{0}' added {1} folders to the workspace\", extensionName, addCount);\n            }\n        }\n        // Delete Folders\n        else if (wantsToDelete && !wantsToAdd) {\n            if (removeCount === 1) {\n                message = nls_1.localize('folderStatusMessageRemoveSingleFolder', \"Extension '{0}' removed 1 folder from the workspace\", extensionName);\n            }\n            else {\n                message = nls_1.localize('folderStatusMessageRemoveMultipleFolders', \"Extension '{0}' removed {1} folders from the workspace\", extensionName, removeCount);\n            }\n        }\n        // Change Folders\n        else {\n            message = nls_1.localize('folderStatusChangeFolder', \"Extension '{0}' changed folders of the workspace\", extensionName);\n        }\n        return message;\n    };\n    MainThreadWorkspace.prototype._onDidChangeWorkspace = function () {\n        this._proxy.$acceptWorkspaceData(this.getWorkspaceData(this._contextService.getWorkspace()));\n    };\n    MainThreadWorkspace.prototype.getWorkspaceData = function (workspace) {\n        if (this._contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            return null;\n        }\n        return {\n            configuration: workspace.configuration || undefined,\n            folders: workspace.folders,\n            id: workspace.id,\n            name: this._labelService.getWorkspaceLabel(workspace)\n        };\n    };\n    // --- search ---\n    MainThreadWorkspace.prototype.$startFileSearch = function (includePattern, _includeFolder, excludePatternOrDisregardExcludes, maxResults, token) {\n        var includeFolder = uri_1.URI.revive(_includeFolder);\n        var workspace = this._contextService.getWorkspace();\n        if (!workspace.folders.length) {\n            return Promise.resolve(undefined);\n        }\n        var query = this._queryBuilder.file(includeFolder ? [includeFolder] : workspace.folders.map(function (f) { return f.uri; }), {\n            maxResults: maxResults,\n            disregardExcludeSettings: (excludePatternOrDisregardExcludes === false) || undefined,\n            disregardSearchExcludeSettings: true,\n            disregardIgnoreFiles: true,\n            includePattern: includePattern,\n            excludePattern: typeof excludePatternOrDisregardExcludes === 'string' ? excludePatternOrDisregardExcludes : undefined,\n            _reason: 'startFileSearch'\n        });\n        return this._searchService.fileSearch(query, token).then(function (result) {\n            return result.results.map(function (m) { return m.resource; });\n        }, function (err) {\n            if (!errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            return undefined;\n        });\n    };\n    MainThreadWorkspace.prototype.$startTextSearch = function (pattern, options, requestId, token) {\n        var _this = this;\n        var workspace = this._contextService.getWorkspace();\n        var folders = workspace.folders.map(function (folder) { return folder.uri; });\n        var query = this._queryBuilder.text(pattern, folders, options);\n        query._reason = 'startTextSearch';\n        var onProgress = function (p) {\n            if (p.results) {\n                _this._proxy.$handleTextSearchResult(p, requestId);\n            }\n        };\n        var search = this._searchService.textSearch(query, token, onProgress).then(function (result) {\n            return { limitHit: result.limitHit };\n        }, function (err) {\n            if (!errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            return undefined;\n        });\n        return search;\n    };\n    MainThreadWorkspace.prototype.$checkExists = function (includes, token) {\n        var queryBuilder = this._instantiationService.createInstance(queryBuilder_1.QueryBuilder);\n        var folders = this._contextService.getWorkspace().folders.map(function (folder) { return folder.uri; });\n        var query = queryBuilder.file(folders, {\n            _reason: 'checkExists',\n            includePattern: includes.join(', '),\n            expandPatterns: true,\n            exists: true\n        });\n        return this._searchService.fileSearch(query, token).then(function (result) {\n            return result.limitHit;\n        }, function (err) {\n            if (!errors_1.isPromiseCanceledError(err)) {\n                return Promise.reject(err);\n            }\n            return undefined;\n        });\n    };\n    // --- save & edit resources ---\n    MainThreadWorkspace.prototype.$saveAll = function (includeUntitled) {\n        return this._textFileService.saveAll(includeUntitled).then(function (result) {\n            return result.results.every(function (each) { return each.success === true; });\n        });\n    };\n    MainThreadWorkspace.prototype.$resolveProxy = function (url) {\n        return this._windowService.resolveProxy(url);\n    };\n    MainThreadWorkspace = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadWorkspace),\n        tslib_1.__param(1, search_1.ISearchService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, textfiles_1.ITextFileService),\n        tslib_1.__param(4, workspaceEditing_1.IWorkspaceEditingService),\n        tslib_1.__param(5, statusbar_1.IStatusbarService),\n        tslib_1.__param(6, windows_1.IWindowService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, label_1.ILabelService)\n    ], MainThreadWorkspace);\n    return MainThreadWorkspace;\n}());\nexports.MainThreadWorkspace = MainThreadWorkspace;\ncommands_1.CommandsRegistry.registerCommand('_workbench.enterWorkspace', function (accessor, workspace, disableExtensions) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var workspaceEditingService, extensionService, windowService, runningExtensions;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    workspaceEditingService = accessor.get(workspaceEditing_1.IWorkspaceEditingService);\n                    extensionService = accessor.get(extensions_2.IExtensionService);\n                    windowService = accessor.get(windows_1.IWindowService);\n                    if (!(disableExtensions && disableExtensions.length)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, extensionService.getExtensions()];\n                case 1:\n                    runningExtensions = _a.sent();\n                    // If requested extension to disable is running, then reload window with given workspace\n                    if (disableExtensions && runningExtensions.some(function (runningExtension) { return disableExtensions.some(function (id) { return extensions_1.ExtensionIdentifier.equals(runningExtension.identifier, id); }); })) {\n                        return [2 /*return*/, windowService.openWindow([{ uri: workspace, typeHint: 'file' }], { args: { _: [], 'disable-extension': disableExtensions } })];\n                    }\n                    _a.label = 2;\n                case 2: return [2 /*return*/, workspaceEditingService.enterWorkspace(workspace)];\n            }\n        });\n    });\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWorkspace.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadWorkspace.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IFileMatch, IPatternInfo, ISearchProgressItem, ISearchService } from 'vs/workbench/services/search/common/search';\nimport { IStatusbarService } from 'vs/platform/statusbar/common/statusbar';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ITextQueryBuilderOptions, QueryBuilder } from 'vs/workbench/contrib/search/common/queryBuilder';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { ExtHostContext, ExtHostWorkspaceShape, IExtHostContext, MainContext, MainThreadWorkspaceShape, IWorkspaceData, ITextSearchComplete } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadWorkspace)\nexport class MainThreadWorkspace implements MainThreadWorkspaceShape {\n\n\tprivate readonly _toDispose: IDisposable[] = [];\n\tprivate readonly _activeCancelTokens: { [id: number]: CancellationTokenSource } = Object.create(null);\n\tprivate readonly _proxy: ExtHostWorkspaceShape;\n\tprivate readonly _queryBuilder = this._instantiationService.createInstance(QueryBuilder);\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IWorkspaceEditingService private readonly _workspaceEditingService: IWorkspaceEditingService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@IWindowService private readonly _windowService: IWindowService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILabelService private readonly _labelService: ILabelService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostWorkspace);\n\t\tthis._contextService.getCompleteWorkspace().then(workspace => this._proxy.$initializeWorkspace(this.getWorkspaceData(workspace)));\n\t\tthis._contextService.onDidChangeWorkspaceFolders(this._onDidChangeWorkspace, this, this._toDispose);\n\t\tthis._contextService.onDidChangeWorkbenchState(this._onDidChangeWorkspace, this, this._toDispose);\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._toDispose);\n\n\t\tfor (let requestId in this._activeCancelTokens) {\n\t\t\tconst tokenSource = this._activeCancelTokens[requestId];\n\t\t\ttokenSource.cancel();\n\t\t}\n\t}\n\n\t// --- workspace ---\n\n\t$updateWorkspaceFolders(extensionName: string, index: number, deleteCount: number, foldersToAdd: { uri: UriComponents, name?: string }[]): Promise<void> {\n\t\tconst workspaceFoldersToAdd = foldersToAdd.map(f => ({ uri: URI.revive(f.uri), name: f.name }));\n\n\t\t// Indicate in status message\n\t\tthis._statusbarService.setStatusMessage(this.getStatusMessage(extensionName, workspaceFoldersToAdd.length, deleteCount), 10 * 1000 /* 10s */);\n\n\t\treturn this._workspaceEditingService.updateFolders(index, deleteCount, workspaceFoldersToAdd, true);\n\t}\n\n\tprivate getStatusMessage(extensionName: string, addCount: number, removeCount: number): string {\n\t\tlet message: string;\n\n\t\tconst wantsToAdd = addCount > 0;\n\t\tconst wantsToDelete = removeCount > 0;\n\n\t\t// Add Folders\n\t\tif (wantsToAdd && !wantsToDelete) {\n\t\t\tif (addCount === 1) {\n\t\t\t\tmessage = localize('folderStatusMessageAddSingleFolder', \"Extension '{0}' added 1 folder to the workspace\", extensionName);\n\t\t\t} else {\n\t\t\t\tmessage = localize('folderStatusMessageAddMultipleFolders', \"Extension '{0}' added {1} folders to the workspace\", extensionName, addCount);\n\t\t\t}\n\t\t}\n\n\t\t// Delete Folders\n\t\telse if (wantsToDelete && !wantsToAdd) {\n\t\t\tif (removeCount === 1) {\n\t\t\t\tmessage = localize('folderStatusMessageRemoveSingleFolder', \"Extension '{0}' removed 1 folder from the workspace\", extensionName);\n\t\t\t} else {\n\t\t\t\tmessage = localize('folderStatusMessageRemoveMultipleFolders', \"Extension '{0}' removed {1} folders from the workspace\", extensionName, removeCount);\n\t\t\t}\n\t\t}\n\n\t\t// Change Folders\n\t\telse {\n\t\t\tmessage = localize('folderStatusChangeFolder', \"Extension '{0}' changed folders of the workspace\", extensionName);\n\t\t}\n\n\t\treturn message;\n\t}\n\n\tprivate _onDidChangeWorkspace(): void {\n\t\tthis._proxy.$acceptWorkspaceData(this.getWorkspaceData(this._contextService.getWorkspace()));\n\t}\n\n\tprivate getWorkspaceData(workspace: IWorkspace): IWorkspaceData | null {\n\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\tconfiguration: workspace.configuration || undefined,\n\t\t\tfolders: workspace.folders,\n\t\t\tid: workspace.id,\n\t\t\tname: this._labelService.getWorkspaceLabel(workspace)\n\t\t};\n\t}\n\n\t// --- search ---\n\n\t$startFileSearch(includePattern: string, _includeFolder: UriComponents | undefined, excludePatternOrDisregardExcludes: string | false | undefined, maxResults: number, token: CancellationToken): Promise<URI[] | undefined> {\n\t\tconst includeFolder = URI.revive(_includeFolder);\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\tif (!workspace.folders.length) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst query = this._queryBuilder.file(\n\t\t\tincludeFolder ? [includeFolder] : workspace.folders.map(f => f.uri),\n\t\t\t{\n\t\t\t\tmaxResults,\n\t\t\t\tdisregardExcludeSettings: (excludePatternOrDisregardExcludes === false) || undefined,\n\t\t\t\tdisregardSearchExcludeSettings: true,\n\t\t\t\tdisregardIgnoreFiles: true,\n\t\t\t\tincludePattern,\n\t\t\t\texcludePattern: typeof excludePatternOrDisregardExcludes === 'string' ? excludePatternOrDisregardExcludes : undefined,\n\t\t\t\t_reason: 'startFileSearch'\n\t\t\t});\n\n\t\treturn this._searchService.fileSearch(query, token).then(result => {\n\t\t\treturn result.results.map(m => m.resource);\n\t\t}, err => {\n\t\t\tif (!isPromiseCanceledError(err)) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t$startTextSearch(pattern: IPatternInfo, options: ITextQueryBuilderOptions, requestId: number, token: CancellationToken): Promise<ITextSearchComplete> {\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\tconst folders = workspace.folders.map(folder => folder.uri);\n\n\t\tconst query = this._queryBuilder.text(pattern, folders, options);\n\t\tquery._reason = 'startTextSearch';\n\n\t\tconst onProgress = (p: ISearchProgressItem) => {\n\t\t\tif ((<IFileMatch>p).results) {\n\t\t\t\tthis._proxy.$handleTextSearchResult(<IFileMatch>p, requestId);\n\t\t\t}\n\t\t};\n\n\t\tconst search = this._searchService.textSearch(query, token, onProgress).then(\n\t\t\tresult => {\n\t\t\t\treturn { limitHit: result.limitHit };\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (!isPromiseCanceledError(err)) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t\treturn search;\n\t}\n\n\t$checkExists(includes: string[], token: CancellationToken): Promise<boolean> {\n\t\tconst queryBuilder = this._instantiationService.createInstance(QueryBuilder);\n\t\tconst folders = this._contextService.getWorkspace().folders.map(folder => folder.uri);\n\t\tconst query = queryBuilder.file(folders, {\n\t\t\t_reason: 'checkExists',\n\t\t\tincludePattern: includes.join(', '),\n\t\t\texpandPatterns: true,\n\t\t\texists: true\n\t\t});\n\n\t\treturn this._searchService.fileSearch(query, token).then(\n\t\t\tresult => {\n\t\t\t\treturn result.limitHit;\n\t\t\t},\n\t\t\terr => {\n\t\t\t\tif (!isPromiseCanceledError(err)) {\n\t\t\t\t\treturn Promise.reject(err);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\t// --- save & edit resources ---\n\n\t$saveAll(includeUntitled?: boolean): Promise<boolean> {\n\t\treturn this._textFileService.saveAll(includeUntitled).then(result => {\n\t\t\treturn result.results.every(each => each.success === true);\n\t\t});\n\t}\n\n\t$resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn this._windowService.resolveProxy(url);\n\t}\n}\n\nCommandsRegistry.registerCommand('_workbench.enterWorkspace', async function (accessor: ServicesAccessor, workspace: URI, disableExtensions: string[]) {\n\tconst workspaceEditingService = accessor.get(IWorkspaceEditingService);\n\tconst extensionService = accessor.get(IExtensionService);\n\tconst windowService = accessor.get(IWindowService);\n\n\tif (disableExtensions && disableExtensions.length) {\n\t\tconst runningExtensions = await extensionService.getExtensions();\n\t\t// If requested extension to disable is running, then reload window with given workspace\n\t\tif (disableExtensions && runningExtensions.some(runningExtension => disableExtensions.some(id => ExtensionIdentifier.equals(runningExtension.identifier, id)))) {\n\t\t\treturn windowService.openWindow([{ uri: workspace, typeHint: 'file' }], { args: { _: [], 'disable-extension': disableExtensions } });\n\t\t}\n\t}\n\n\treturn workspaceEditingService.enterWorkspace(workspace);\n});\n"]}]}