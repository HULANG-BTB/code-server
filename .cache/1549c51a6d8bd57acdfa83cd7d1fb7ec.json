{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar path_1 = require(\"vs/base/common/path\");\nvar intlFileNameCollator;\nfunction setFileNameComparer(collator) {\n    intlFileNameCollator = collator;\n}\nexports.setFileNameComparer = setFileNameComparer;\nfunction compareFileNames(one, other, caseSensitive) {\n    if (caseSensitive === void 0) { caseSensitive = false; }\n    if (intlFileNameCollator) {\n        var a = one || '';\n        var b = other || '';\n        var result = intlFileNameCollator.getValue().collator.compare(a, b);\n        // Using the numeric option in the collator will\n        // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n        if (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && a !== b) {\n            return a < b ? -1 : 1;\n        }\n        return result;\n    }\n    return noIntlCompareFileNames(one, other, caseSensitive);\n}\nexports.compareFileNames = compareFileNames;\nvar FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\nfunction noIntlCompareFileNames(one, other, caseSensitive) {\n    if (caseSensitive === void 0) { caseSensitive = false; }\n    if (!caseSensitive) {\n        one = one && one.toLowerCase();\n        other = other && other.toLowerCase();\n    }\n    var _a = extractNameAndExtension(one), oneName = _a[0], oneExtension = _a[1];\n    var _b = extractNameAndExtension(other), otherName = _b[0], otherExtension = _b[1];\n    if (oneName !== otherName) {\n        return oneName < otherName ? -1 : 1;\n    }\n    if (oneExtension === otherExtension) {\n        return 0;\n    }\n    return oneExtension < otherExtension ? -1 : 1;\n}\nexports.noIntlCompareFileNames = noIntlCompareFileNames;\nfunction compareFileExtensions(one, other) {\n    if (intlFileNameCollator) {\n        var _a = extractNameAndExtension(one), oneName = _a[0], oneExtension = _a[1];\n        var _b = extractNameAndExtension(other), otherName = _b[0], otherExtension = _b[1];\n        var result = intlFileNameCollator.getValue().collator.compare(oneExtension, otherExtension);\n        if (result === 0) {\n            // Using the numeric option in the collator will\n            // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n            if (intlFileNameCollator.getValue().collatorIsNumeric && oneExtension !== otherExtension) {\n                return oneExtension < otherExtension ? -1 : 1;\n            }\n            // Extensions are equal, compare filenames\n            result = intlFileNameCollator.getValue().collator.compare(oneName, otherName);\n            if (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && oneName !== otherName) {\n                return oneName < otherName ? -1 : 1;\n            }\n        }\n        return result;\n    }\n    return noIntlCompareFileExtensions(one, other);\n}\nexports.compareFileExtensions = compareFileExtensions;\nfunction noIntlCompareFileExtensions(one, other) {\n    var _a = extractNameAndExtension(one && one.toLowerCase()), oneName = _a[0], oneExtension = _a[1];\n    var _b = extractNameAndExtension(other && other.toLowerCase()), otherName = _b[0], otherExtension = _b[1];\n    if (oneExtension !== otherExtension) {\n        return oneExtension < otherExtension ? -1 : 1;\n    }\n    if (oneName === otherName) {\n        return 0;\n    }\n    return oneName < otherName ? -1 : 1;\n}\nfunction extractNameAndExtension(str) {\n    var match = str ? FileNameMatch.exec(str) : [];\n    return [(match && match[1]) || '', (match && match[3]) || ''];\n}\nfunction comparePathComponents(one, other, caseSensitive) {\n    if (caseSensitive === void 0) { caseSensitive = false; }\n    if (!caseSensitive) {\n        one = one && one.toLowerCase();\n        other = other && other.toLowerCase();\n    }\n    if (one === other) {\n        return 0;\n    }\n    return one < other ? -1 : 1;\n}\nfunction comparePaths(one, other, caseSensitive) {\n    if (caseSensitive === void 0) { caseSensitive = false; }\n    var oneParts = one.split(path_1.sep);\n    var otherParts = other.split(path_1.sep);\n    var lastOne = oneParts.length - 1;\n    var lastOther = otherParts.length - 1;\n    var endOne, endOther;\n    for (var i = 0;; i++) {\n        endOne = lastOne === i;\n        endOther = lastOther === i;\n        if (endOne && endOther) {\n            return compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n        }\n        else if (endOne) {\n            return -1;\n        }\n        else if (endOther) {\n            return 1;\n        }\n        var result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\n        if (result !== 0) {\n            return result;\n        }\n    }\n}\nexports.comparePaths = comparePaths;\nfunction compareAnything(one, other, lookFor) {\n    var elementAName = one.toLowerCase();\n    var elementBName = other.toLowerCase();\n    // Sort prefix matches over non prefix matches\n    var prefixCompare = compareByPrefix(one, other, lookFor);\n    if (prefixCompare) {\n        return prefixCompare;\n    }\n    // Sort suffix matches over non suffix matches\n    var elementASuffixMatch = strings.endsWith(elementAName, lookFor);\n    var elementBSuffixMatch = strings.endsWith(elementBName, lookFor);\n    if (elementASuffixMatch !== elementBSuffixMatch) {\n        return elementASuffixMatch ? -1 : 1;\n    }\n    // Understand file names\n    var r = compareFileNames(elementAName, elementBName);\n    if (r !== 0) {\n        return r;\n    }\n    // Compare by name\n    return elementAName.localeCompare(elementBName);\n}\nexports.compareAnything = compareAnything;\nfunction compareByPrefix(one, other, lookFor) {\n    var elementAName = one.toLowerCase();\n    var elementBName = other.toLowerCase();\n    // Sort prefix matches over non prefix matches\n    var elementAPrefixMatch = strings.startsWith(elementAName, lookFor);\n    var elementBPrefixMatch = strings.startsWith(elementBName, lookFor);\n    if (elementAPrefixMatch !== elementBPrefixMatch) {\n        return elementAPrefixMatch ? -1 : 1;\n    }\n    // Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n    else if (elementAPrefixMatch && elementBPrefixMatch) {\n        if (elementAName.length < elementBName.length) {\n            return -1;\n        }\n        if (elementAName.length > elementBName.length) {\n            return 1;\n        }\n    }\n    return 0;\n}\nexports.compareByPrefix = compareByPrefix;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/comparers.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gDAAkD;AAClD,4CAA0C;AAG1C,IAAI,oBAAwF,CAAC;AAE7F,SAAgB,mBAAmB,CAAC,QAA4E;IAC/G,oBAAoB,GAAG,QAAQ,CAAC;AACjC,CAAC;AAFD,kDAEC;AAED,SAAgB,gBAAgB,CAAC,GAAkB,EAAE,KAAoB,EAAE,aAAqB;IAArB,8BAAA,EAAA,qBAAqB;IAC/F,IAAI,oBAAoB,EAAE;QACzB,IAAM,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;QACpB,IAAM,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;QACtB,IAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEtE,gDAAgD;QAChD,6DAA6D;QAC7D,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACjF,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;KACd;IAED,OAAO,sBAAsB,CAAC,GAAG,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;AAC1D,CAAC;AAhBD,4CAgBC;AAED,IAAM,aAAa,GAAG,qBAAqB,CAAC;AAE5C,SAAgB,sBAAsB,CAAC,GAAkB,EAAE,KAAoB,EAAE,aAAqB;IAArB,8BAAA,EAAA,qBAAqB;IACrG,IAAI,CAAC,aAAa,EAAE;QACnB,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QAC/B,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;KACrC;IAEK,IAAA,iCAAsD,EAArD,eAAO,EAAE,oBAA4C,CAAC;IACvD,IAAA,mCAA4D,EAA3D,iBAAS,EAAE,sBAAgD,CAAC;IAEnE,IAAI,OAAO,KAAK,SAAS,EAAE;QAC1B,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpC;IAED,IAAI,YAAY,KAAK,cAAc,EAAE;QACpC,OAAO,CAAC,CAAC;KACT;IAED,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC;AAlBD,wDAkBC;AAED,SAAgB,qBAAqB,CAAC,GAAkB,EAAE,KAAoB;IAC7E,IAAI,oBAAoB,EAAE;QACnB,IAAA,iCAAsD,EAArD,eAAO,EAAE,oBAA4C,CAAC;QACvD,IAAA,mCAA4D,EAA3D,iBAAS,EAAE,sBAAgD,CAAC;QAEnE,IAAI,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAE5F,IAAI,MAAM,KAAK,CAAC,EAAE;YACjB,gDAAgD;YAChD,6DAA6D;YAC7D,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,IAAI,YAAY,KAAK,cAAc,EAAE;gBACzF,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9C;YAED,0CAA0C;YAC1C,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAE9E,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,SAAS,EAAE;gBAC/F,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACpC;SACD;QAED,OAAO,MAAM,CAAC;KACd;IAED,OAAO,2BAA2B,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AAChD,CAAC;AA1BD,sDA0BC;AAED,SAAS,2BAA2B,CAAC,GAAkB,EAAE,KAAoB;IACtE,IAAA,sDAA2E,EAA1E,eAAO,EAAE,oBAAiE,CAAC;IAC5E,IAAA,0DAAmF,EAAlF,iBAAS,EAAE,sBAAuE,CAAC;IAE1F,IAAI,YAAY,KAAK,cAAc,EAAE;QACpC,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9C;IAED,IAAI,OAAO,KAAK,SAAS,EAAE;QAC1B,OAAO,CAAC,CAAC;KACT;IAED,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAED,SAAS,uBAAuB,CAAC,GAAmB;IACnD,IAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAkB,CAAC,CAAC,CAAE,EAAoB,CAAC;IAErF,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AAC/D,CAAC;AAED,SAAS,qBAAqB,CAAC,GAAW,EAAE,KAAa,EAAE,aAAqB;IAArB,8BAAA,EAAA,qBAAqB;IAC/E,IAAI,CAAC,aAAa,EAAE;QACnB,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QAC/B,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;KACrC;IAED,IAAI,GAAG,KAAK,KAAK,EAAE;QAClB,OAAO,CAAC,CAAC;KACT;IAED,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC;AAED,SAAgB,YAAY,CAAC,GAAW,EAAE,KAAa,EAAE,aAAqB;IAArB,8BAAA,EAAA,qBAAqB;IAC7E,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC;IAChC,IAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC;IAEpC,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACpC,IAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IACxC,IAAI,MAAe,EAAE,QAAiB,CAAC;IAEvC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE,EAAE;QACtB,MAAM,GAAG,OAAO,KAAK,CAAC,CAAC;QACvB,QAAQ,GAAG,SAAS,KAAK,CAAC,CAAC;QAE3B,IAAI,MAAM,IAAI,QAAQ,EAAE;YACvB,OAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;SACnE;aAAM,IAAI,MAAM,EAAE;YAClB,OAAO,CAAC,CAAC,CAAC;SACV;aAAM,IAAI,QAAQ,EAAE;YACpB,OAAO,CAAC,CAAC;SACT;QAED,IAAM,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAEhF,IAAI,MAAM,KAAK,CAAC,EAAE;YACjB,OAAO,MAAM,CAAC;SACd;KACD;AACF,CAAC;AA1BD,oCA0BC;AAED,SAAgB,eAAe,CAAC,GAAW,EAAE,KAAa,EAAE,OAAe;IAC1E,IAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IACvC,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IAEzC,8CAA8C;IAC9C,IAAM,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3D,IAAI,aAAa,EAAE;QAClB,OAAO,aAAa,CAAC;KACrB;IAED,8CAA8C;IAC9C,IAAM,mBAAmB,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACpE,IAAM,mBAAmB,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACpE,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;QAChD,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpC;IAED,wBAAwB;IACxB,IAAM,CAAC,GAAG,gBAAgB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,CAAC,EAAE;QACZ,OAAO,CAAC,CAAC;KACT;IAED,kBAAkB;IAClB,OAAO,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AACjD,CAAC;AAzBD,0CAyBC;AAED,SAAgB,eAAe,CAAC,GAAW,EAAE,KAAa,EAAE,OAAe;IAC1E,IAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IACvC,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IAEzC,8CAA8C;IAC9C,IAAM,mBAAmB,GAAG,OAAO,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACtE,IAAM,mBAAmB,GAAG,OAAO,CAAC,UAAU,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACtE,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;QAChD,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpC;IAED,8FAA8F;SACzF,IAAI,mBAAmB,IAAI,mBAAmB,EAAE;QACpD,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;YAC9C,OAAO,CAAC,CAAC,CAAC;SACV;QAED,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;YAC9C,OAAO,CAAC,CAAC;SACT;KACD;IAED,OAAO,CAAC,CAAC;AACV,CAAC;AAvBD,0CAuBC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { sep } from 'vs/base/common/path';\nimport { IdleValue } from 'vs/base/common/async';\n\nlet intlFileNameCollator: IdleValue<{ collator: Intl.Collator, collatorIsNumeric: boolean }>;\n\nexport function setFileNameComparer(collator: IdleValue<{ collator: Intl.Collator, collatorIsNumeric: boolean }>): void {\n\tintlFileNameCollator = collator;\n}\n\nexport function compareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\n\tif (intlFileNameCollator) {\n\t\tconst a = one || '';\n\t\tconst b = other || '';\n\t\tconst result = intlFileNameCollator.getValue().collator.compare(a, b);\n\n\t\t// Using the numeric option in the collator will\n\t\t// make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n\t\tif (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && a !== b) {\n\t\t\treturn a < b ? -1 : 1;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\treturn noIntlCompareFileNames(one, other, caseSensitive);\n}\n\nconst FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\n\nexport function noIntlCompareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\n\tif (!caseSensitive) {\n\t\tone = one && one.toLowerCase();\n\t\tother = other && other.toLowerCase();\n\t}\n\n\tconst [oneName, oneExtension] = extractNameAndExtension(one);\n\tconst [otherName, otherExtension] = extractNameAndExtension(other);\n\n\tif (oneName !== otherName) {\n\t\treturn oneName < otherName ? -1 : 1;\n\t}\n\n\tif (oneExtension === otherExtension) {\n\t\treturn 0;\n\t}\n\n\treturn oneExtension < otherExtension ? -1 : 1;\n}\n\nexport function compareFileExtensions(one: string | null, other: string | null): number {\n\tif (intlFileNameCollator) {\n\t\tconst [oneName, oneExtension] = extractNameAndExtension(one);\n\t\tconst [otherName, otherExtension] = extractNameAndExtension(other);\n\n\t\tlet result = intlFileNameCollator.getValue().collator.compare(oneExtension, otherExtension);\n\n\t\tif (result === 0) {\n\t\t\t// Using the numeric option in the collator will\n\t\t\t// make compare(`foo1`, `foo01`) === 0. We must disambiguate.\n\t\t\tif (intlFileNameCollator.getValue().collatorIsNumeric && oneExtension !== otherExtension) {\n\t\t\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t\t\t}\n\n\t\t\t// Extensions are equal, compare filenames\n\t\t\tresult = intlFileNameCollator.getValue().collator.compare(oneName, otherName);\n\n\t\t\tif (intlFileNameCollator.getValue().collatorIsNumeric && result === 0 && oneName !== otherName) {\n\t\t\t\treturn oneName < otherName ? -1 : 1;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\treturn noIntlCompareFileExtensions(one, other);\n}\n\nfunction noIntlCompareFileExtensions(one: string | null, other: string | null): number {\n\tconst [oneName, oneExtension] = extractNameAndExtension(one && one.toLowerCase());\n\tconst [otherName, otherExtension] = extractNameAndExtension(other && other.toLowerCase());\n\n\tif (oneExtension !== otherExtension) {\n\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t}\n\n\tif (oneName === otherName) {\n\t\treturn 0;\n\t}\n\n\treturn oneName < otherName ? -1 : 1;\n}\n\nfunction extractNameAndExtension(str?: string | null): [string, string] {\n\tconst match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\n\n\treturn [(match && match[1]) || '', (match && match[3]) || ''];\n}\n\nfunction comparePathComponents(one: string, other: string, caseSensitive = false): number {\n\tif (!caseSensitive) {\n\t\tone = one && one.toLowerCase();\n\t\tother = other && other.toLowerCase();\n\t}\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\nexport function comparePaths(one: string, other: string, caseSensitive = false): number {\n\tconst oneParts = one.split(sep);\n\tconst otherParts = other.split(sep);\n\n\tconst lastOne = oneParts.length - 1;\n\tconst lastOther = otherParts.length - 1;\n\tlet endOne: boolean, endOther: boolean;\n\n\tfor (let i = 0; ; i++) {\n\t\tendOne = lastOne === i;\n\t\tendOther = lastOther === i;\n\n\t\tif (endOne && endOther) {\n\t\t\treturn compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n\t\t} else if (endOne) {\n\t\t\treturn -1;\n\t\t} else if (endOther) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\n\n\t\tif (result !== 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport function compareAnything(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst prefixCompare = compareByPrefix(one, other, lookFor);\n\tif (prefixCompare) {\n\t\treturn prefixCompare;\n\t}\n\n\t// Sort suffix matches over non suffix matches\n\tconst elementASuffixMatch = strings.endsWith(elementAName, lookFor);\n\tconst elementBSuffixMatch = strings.endsWith(elementBName, lookFor);\n\tif (elementASuffixMatch !== elementBSuffixMatch) {\n\t\treturn elementASuffixMatch ? -1 : 1;\n\t}\n\n\t// Understand file names\n\tconst r = compareFileNames(elementAName, elementBName);\n\tif (r !== 0) {\n\t\treturn r;\n\t}\n\n\t// Compare by name\n\treturn elementAName.localeCompare(elementBName);\n}\n\nexport function compareByPrefix(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst elementAPrefixMatch = strings.startsWith(elementAName, lookFor);\n\tconst elementBPrefixMatch = strings.startsWith(elementBName, lookFor);\n\tif (elementAPrefixMatch !== elementBPrefixMatch) {\n\t\treturn elementAPrefixMatch ? -1 : 1;\n\t}\n\n\t// Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n\telse if (elementAPrefixMatch && elementBPrefixMatch) {\n\t\tif (elementAName.length < elementBName.length) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (elementAName.length > elementBName.length) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"]}]}