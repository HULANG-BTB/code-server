{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTreeViews.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTreeViews.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar types_1 = require(\"vs/base/common/types\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar MainThreadTreeViews = /** @class */ (function (_super) {\n    tslib_1.__extends(MainThreadTreeViews, _super);\n    function MainThreadTreeViews(extHostContext, viewsService, notificationService) {\n        var _this = _super.call(this) || this;\n        _this.viewsService = viewsService;\n        _this.notificationService = notificationService;\n        _this._dataProviders = new Map();\n        _this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostTreeViews);\n        return _this;\n    }\n    MainThreadTreeViews.prototype.$registerTreeViewDataProvider = function (treeViewId, options) {\n        var dataProvider = new TreeViewDataProvider(treeViewId, this._proxy, this.notificationService);\n        this._dataProviders.set(treeViewId, dataProvider);\n        var viewer = this.getTreeView(treeViewId);\n        if (viewer) {\n            viewer.dataProvider = dataProvider;\n            viewer.showCollapseAllAction = !!options.showCollapseAll;\n            this.registerListeners(treeViewId, viewer);\n            this._proxy.$setVisible(treeViewId, viewer.visible);\n        }\n        else {\n            this.notificationService.error('No view is registered with id: ' + treeViewId);\n        }\n    };\n    MainThreadTreeViews.prototype.$reveal = function (treeViewId, item, parentChain, options) {\n        var _this = this;\n        return this.viewsService.openView(treeViewId, options.focus)\n            .then(function () {\n            var viewer = _this.getTreeView(treeViewId);\n            if (viewer) {\n                return _this.reveal(viewer, _this._dataProviders.get(treeViewId), item, parentChain, options);\n            }\n            return undefined;\n        });\n    };\n    MainThreadTreeViews.prototype.$refresh = function (treeViewId, itemsToRefreshByHandle) {\n        var viewer = this.getTreeView(treeViewId);\n        var dataProvider = this._dataProviders.get(treeViewId);\n        if (viewer && dataProvider) {\n            var itemsToRefresh = dataProvider.getItemsToRefresh(itemsToRefreshByHandle);\n            return viewer.refresh(itemsToRefresh.length ? itemsToRefresh : undefined);\n        }\n        return Promise.resolve();\n    };\n    MainThreadTreeViews.prototype.$setMessage = function (treeViewId, message) {\n        var viewer = this.getTreeView(treeViewId);\n        if (viewer) {\n            viewer.message = message;\n        }\n    };\n    MainThreadTreeViews.prototype.reveal = function (treeView, dataProvider, itemIn, parentChain, options) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var select, focus, expand, _i, parentChain_1, parent, item, itemsToExpand;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = options ? options : { select: false, focus: false };\n                        select = types_1.isUndefinedOrNull(options.select) ? false : options.select;\n                        focus = types_1.isUndefinedOrNull(options.focus) ? false : options.focus;\n                        expand = Math.min(types_1.isNumber(options.expand) ? options.expand : options.expand === true ? 1 : 0, 3);\n                        if (!dataProvider.isEmpty()) return [3 /*break*/, 2];\n                        // Refresh if empty\n                        return [4 /*yield*/, treeView.refresh()];\n                    case 1:\n                        // Refresh if empty\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        _i = 0, parentChain_1 = parentChain;\n                        _a.label = 3;\n                    case 3:\n                        if (!(_i < parentChain_1.length)) return [3 /*break*/, 6];\n                        parent = parentChain_1[_i];\n                        return [4 /*yield*/, treeView.expand(parent)];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5:\n                        _i++;\n                        return [3 /*break*/, 3];\n                    case 6:\n                        item = dataProvider.getItem(itemIn.handle);\n                        if (!item) return [3 /*break*/, 11];\n                        return [4 /*yield*/, treeView.reveal(item)];\n                    case 7:\n                        _a.sent();\n                        if (select) {\n                            treeView.setSelection([item]);\n                        }\n                        if (focus) {\n                            treeView.setFocus(item);\n                        }\n                        itemsToExpand = [item];\n                        _a.label = 8;\n                    case 8:\n                        if (!(itemsToExpand.length > 0 && expand > 0)) return [3 /*break*/, 11];\n                        return [4 /*yield*/, treeView.expand(itemsToExpand)];\n                    case 9:\n                        _a.sent();\n                        itemsToExpand = itemsToExpand.reduce(function (result, itemValue) {\n                            var item = dataProvider.getItem(itemValue.handle);\n                            if (item && item.children && item.children.length) {\n                                result.push.apply(result, item.children);\n                            }\n                            return result;\n                        }, []);\n                        _a.label = 10;\n                    case 10:\n                        expand--;\n                        return [3 /*break*/, 8];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MainThreadTreeViews.prototype.registerListeners = function (treeViewId, treeView) {\n        var _this = this;\n        this._register(treeView.onDidExpandItem(function (item) { return _this._proxy.$setExpanded(treeViewId, item.handle, true); }));\n        this._register(treeView.onDidCollapseItem(function (item) { return _this._proxy.$setExpanded(treeViewId, item.handle, false); }));\n        this._register(treeView.onDidChangeSelection(function (items) { return _this._proxy.$setSelection(treeViewId, items.map(function (_a) {\n            var handle = _a.handle;\n            return handle;\n        })); }));\n        this._register(treeView.onDidChangeVisibility(function (isVisible) { return _this._proxy.$setVisible(treeViewId, isVisible); }));\n    };\n    MainThreadTreeViews.prototype.getTreeView = function (treeViewId) {\n        var viewDescriptor = platform_1.Registry.as(views_1.Extensions.ViewsRegistry).getView(treeViewId);\n        return viewDescriptor ? viewDescriptor.treeView : null;\n    };\n    MainThreadTreeViews.prototype.dispose = function () {\n        var _this = this;\n        this._dataProviders.forEach(function (dataProvider, treeViewId) {\n            var treeView = _this.getTreeView(treeViewId);\n            if (treeView) {\n                treeView.dataProvider = null;\n            }\n        });\n        this._dataProviders.clear();\n        _super.prototype.dispose.call(this);\n    };\n    MainThreadTreeViews = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadTreeViews),\n        tslib_1.__param(1, views_1.IViewsService),\n        tslib_1.__param(2, notification_1.INotificationService)\n    ], MainThreadTreeViews);\n    return MainThreadTreeViews;\n}(lifecycle_1.Disposable));\nexports.MainThreadTreeViews = MainThreadTreeViews;\nvar TreeViewDataProvider = /** @class */ (function () {\n    function TreeViewDataProvider(treeViewId, _proxy, notificationService) {\n        this.treeViewId = treeViewId;\n        this._proxy = _proxy;\n        this.notificationService = notificationService;\n        this.itemsMap = new Map();\n    }\n    TreeViewDataProvider.prototype.getChildren = function (treeItem) {\n        var _this = this;\n        return Promise.resolve(this._proxy.$getChildren(this.treeViewId, treeItem ? treeItem.handle : undefined)\n            .then(function (children) { return _this.postGetChildren(children); }, function (err) {\n            _this.notificationService.error(err);\n            return [];\n        }));\n    };\n    TreeViewDataProvider.prototype.getItemsToRefresh = function (itemsToRefreshByHandle) {\n        var itemsToRefresh = [];\n        if (itemsToRefreshByHandle) {\n            for (var _i = 0, _a = Object.keys(itemsToRefreshByHandle); _i < _a.length; _i++) {\n                var treeItemHandle = _a[_i];\n                var currentTreeItem = this.getItem(treeItemHandle);\n                if (currentTreeItem) { // Refresh only if the item exists\n                    var treeItem = itemsToRefreshByHandle[treeItemHandle];\n                    // Update the current item with refreshed item\n                    this.updateTreeItem(currentTreeItem, treeItem);\n                    if (treeItemHandle === treeItem.handle) {\n                        itemsToRefresh.push(currentTreeItem);\n                    }\n                    else {\n                        // Update maps when handle is changed and refresh parent\n                        this.itemsMap.delete(treeItemHandle);\n                        this.itemsMap.set(currentTreeItem.handle, currentTreeItem);\n                        var parent = treeItem.parentHandle ? this.itemsMap.get(treeItem.parentHandle) : null;\n                        if (parent) {\n                            itemsToRefresh.push(parent);\n                        }\n                    }\n                }\n            }\n        }\n        return itemsToRefresh;\n    };\n    TreeViewDataProvider.prototype.getItem = function (treeItemHandle) {\n        return this.itemsMap.get(treeItemHandle);\n    };\n    TreeViewDataProvider.prototype.isEmpty = function () {\n        return this.itemsMap.size === 0;\n    };\n    TreeViewDataProvider.prototype.postGetChildren = function (elements) {\n        var result = [];\n        if (elements) {\n            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n                var element = elements_1[_i];\n                this.itemsMap.set(element.handle, element);\n                result.push(element);\n            }\n        }\n        return result;\n    };\n    TreeViewDataProvider.prototype.updateTreeItem = function (current, treeItem) {\n        treeItem.children = treeItem.children ? treeItem.children : undefined;\n        if (current) {\n            var properties = arrays_1.distinct(Object.keys(current).concat(Object.keys(treeItem)));\n            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n                var property = properties_1[_i];\n                current[property] = treeItem[property];\n            }\n        }\n    };\n    return TreeViewDataProvider;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTreeViews.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTreeViews.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainThreadTreeViewsShape, ExtHostTreeViewsShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { ITreeViewDataProvider, ITreeItem, IViewsService, ITreeView, IViewsRegistry, ITreeViewDescriptor, IRevealOptions, Extensions } from 'vs/workbench/common/views';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { distinct } from 'vs/base/common/arrays';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { isUndefinedOrNull, isNumber } from 'vs/base/common/types';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\n@extHostNamedCustomer(MainContext.MainThreadTreeViews)\nexport class MainThreadTreeViews extends Disposable implements MainThreadTreeViewsShape {\n\n\tprivate readonly _proxy: ExtHostTreeViewsShape;\n\tprivate readonly _dataProviders: Map<string, TreeViewDataProvider> = new Map<string, TreeViewDataProvider>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTreeViews);\n\t}\n\n\t$registerTreeViewDataProvider(treeViewId: string, options: { showCollapseAll: boolean }): void {\n\t\tconst dataProvider = new TreeViewDataProvider(treeViewId, this._proxy, this.notificationService);\n\t\tthis._dataProviders.set(treeViewId, dataProvider);\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.dataProvider = dataProvider;\n\t\t\tviewer.showCollapseAllAction = !!options.showCollapseAll;\n\t\t\tthis.registerListeners(treeViewId, viewer);\n\t\t\tthis._proxy.$setVisible(treeViewId, viewer.visible);\n\t\t} else {\n\t\t\tthis.notificationService.error('No view is registered with id: ' + treeViewId);\n\t\t}\n\t}\n\n\t$reveal(treeViewId: string, item: ITreeItem, parentChain: ITreeItem[], options: IRevealOptions): Promise<void> {\n\t\treturn this.viewsService.openView(treeViewId, options.focus)\n\t\t\t.then(() => {\n\t\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\t\tif (viewer) {\n\t\t\t\t\treturn this.reveal(viewer, this._dataProviders.get(treeViewId)!, item, parentChain, options);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\t$refresh(treeViewId: string, itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): Promise<void> {\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tconst dataProvider = this._dataProviders.get(treeViewId);\n\t\tif (viewer && dataProvider) {\n\t\t\tconst itemsToRefresh = dataProvider.getItemsToRefresh(itemsToRefreshByHandle);\n\t\t\treturn viewer.refresh(itemsToRefresh.length ? itemsToRefresh : undefined);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void {\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.message = message;\n\t\t}\n\t}\n\n\tprivate async reveal(treeView: ITreeView, dataProvider: TreeViewDataProvider, itemIn: ITreeItem, parentChain: ITreeItem[], options: IRevealOptions): Promise<void> {\n\t\toptions = options ? options : { select: false, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select) ? false : options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tlet expand = Math.min(isNumber(options.expand) ? options.expand : options.expand === true ? 1 : 0, 3);\n\n\t\tif (dataProvider.isEmpty()) {\n\t\t\t// Refresh if empty\n\t\t\tawait treeView.refresh();\n\t\t}\n\t\tfor (const parent of parentChain) {\n\t\t\tawait treeView.expand(parent);\n\t\t}\n\t\tconst item = dataProvider.getItem(itemIn.handle);\n\t\tif (item) {\n\t\t\tawait treeView.reveal(item);\n\t\t\tif (select) {\n\t\t\t\ttreeView.setSelection([item]);\n\t\t\t}\n\t\t\tif (focus) {\n\t\t\t\ttreeView.setFocus(item);\n\t\t\t}\n\t\t\tlet itemsToExpand = [item];\n\t\t\tfor (; itemsToExpand.length > 0 && expand > 0; expand--) {\n\t\t\t\tawait treeView.expand(itemsToExpand);\n\t\t\t\titemsToExpand = itemsToExpand.reduce((result, itemValue) => {\n\t\t\t\t\tconst item = dataProvider.getItem(itemValue.handle);\n\t\t\t\t\tif (item && item.children && item.children.length) {\n\t\t\t\t\t\tresult.push(...item.children);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}, [] as ITreeItem[]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(treeViewId: string, treeView: ITreeView): void {\n\t\tthis._register(treeView.onDidExpandItem(item => this._proxy.$setExpanded(treeViewId, item.handle, true)));\n\t\tthis._register(treeView.onDidCollapseItem(item => this._proxy.$setExpanded(treeViewId, item.handle, false)));\n\t\tthis._register(treeView.onDidChangeSelection(items => this._proxy.$setSelection(treeViewId, items.map(({ handle }) => handle))));\n\t\tthis._register(treeView.onDidChangeVisibility(isVisible => this._proxy.$setVisible(treeViewId, isVisible)));\n\t}\n\n\tprivate getTreeView(treeViewId: string): ITreeView | null {\n\t\tconst viewDescriptor: ITreeViewDescriptor = <ITreeViewDescriptor>Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(treeViewId);\n\t\treturn viewDescriptor ? viewDescriptor.treeView : null;\n\t}\n\n\tdispose(): void {\n\t\tthis._dataProviders.forEach((dataProvider, treeViewId) => {\n\t\t\tconst treeView = this.getTreeView(treeViewId);\n\t\t\tif (treeView) {\n\t\t\t\ttreeView.dataProvider = null;\n\t\t\t}\n\t\t});\n\t\tthis._dataProviders.clear();\n\t\tsuper.dispose();\n\t}\n}\n\ntype TreeItemHandle = string;\n\nclass TreeViewDataProvider implements ITreeViewDataProvider {\n\n\tprivate readonly itemsMap: Map<TreeItemHandle, ITreeItem> = new Map<TreeItemHandle, ITreeItem>();\n\n\tconstructor(private readonly treeViewId: string,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape,\n\t\tprivate readonly notificationService: INotificationService\n\t) {\n\t}\n\n\tgetChildren(treeItem?: ITreeItem): Promise<ITreeItem[]> {\n\t\treturn Promise.resolve(this._proxy.$getChildren(this.treeViewId, treeItem ? treeItem.handle : undefined)\n\t\t\t.then(\n\t\t\t\tchildren => this.postGetChildren(children),\n\t\t\t\terr => {\n\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\treturn [];\n\t\t\t\t}));\n\t}\n\n\tgetItemsToRefresh(itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): ITreeItem[] {\n\t\tconst itemsToRefresh: ITreeItem[] = [];\n\t\tif (itemsToRefreshByHandle) {\n\t\t\tfor (const treeItemHandle of Object.keys(itemsToRefreshByHandle)) {\n\t\t\t\tconst currentTreeItem = this.getItem(treeItemHandle);\n\t\t\t\tif (currentTreeItem) { // Refresh only if the item exists\n\t\t\t\t\tconst treeItem = itemsToRefreshByHandle[treeItemHandle];\n\t\t\t\t\t// Update the current item with refreshed item\n\t\t\t\t\tthis.updateTreeItem(currentTreeItem, treeItem);\n\t\t\t\t\tif (treeItemHandle === treeItem.handle) {\n\t\t\t\t\t\titemsToRefresh.push(currentTreeItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Update maps when handle is changed and refresh parent\n\t\t\t\t\t\tthis.itemsMap.delete(treeItemHandle);\n\t\t\t\t\t\tthis.itemsMap.set(currentTreeItem.handle, currentTreeItem);\n\t\t\t\t\t\tconst parent = treeItem.parentHandle ? this.itemsMap.get(treeItem.parentHandle) : null;\n\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\titemsToRefresh.push(parent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn itemsToRefresh;\n\t}\n\n\tgetItem(treeItemHandle: string): ITreeItem | undefined {\n\t\treturn this.itemsMap.get(treeItemHandle);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.itemsMap.size === 0;\n\t}\n\n\tprivate postGetChildren(elements: ITreeItem[]): ITreeItem[] {\n\t\tconst result: ITreeItem[] = [];\n\t\tif (elements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tthis.itemsMap.set(element.handle, element);\n\t\t\t\tresult.push(element);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate updateTreeItem(current: ITreeItem, treeItem: ITreeItem): void {\n\t\ttreeItem.children = treeItem.children ? treeItem.children : undefined;\n\t\tif (current) {\n\t\t\tconst properties = distinct([...Object.keys(current), ...Object.keys(treeItem)]);\n\t\t\tfor (const property of properties) {\n\t\t\t\tcurrent[property] = treeItem[property];\n\t\t\t}\n\t\t}\n\t}\n}\n"]}]}