{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar SCMInput = /** @class */ (function () {\n    function SCMInput() {\n        this._value = '';\n        this._onDidChange = new event_1.Emitter();\n        this._placeholder = '';\n        this._onDidChangePlaceholder = new event_1.Emitter();\n        this._visible = true;\n        this._onDidChangeVisibility = new event_1.Emitter();\n        this._validateInput = function () { return Promise.resolve(undefined); };\n        this._onDidChangeValidateInput = new event_1.Emitter();\n    }\n    Object.defineProperty(SCMInput.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        set: function (value) {\n            this._value = value;\n            this._onDidChange.fire(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"placeholder\", {\n        get: function () {\n            return this._placeholder;\n        },\n        set: function (placeholder) {\n            this._placeholder = placeholder;\n            this._onDidChangePlaceholder.fire(placeholder);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"onDidChangePlaceholder\", {\n        get: function () { return this._onDidChangePlaceholder.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"visible\", {\n        get: function () {\n            return this._visible;\n        },\n        set: function (visible) {\n            this._visible = visible;\n            this._onDidChangeVisibility.fire(visible);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"onDidChangeVisibility\", {\n        get: function () { return this._onDidChangeVisibility.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"validateInput\", {\n        get: function () {\n            return this._validateInput;\n        },\n        set: function (validateInput) {\n            this._validateInput = validateInput;\n            this._onDidChangeValidateInput.fire();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMInput.prototype, \"onDidChangeValidateInput\", {\n        get: function () { return this._onDidChangeValidateInput.event; },\n        enumerable: true,\n        configurable: true\n    });\n    return SCMInput;\n}());\nvar SCMRepository = /** @class */ (function () {\n    function SCMRepository(provider, disposable) {\n        this.provider = provider;\n        this.disposable = disposable;\n        this._onDidFocus = new event_1.Emitter();\n        this.onDidFocus = this._onDidFocus.event;\n        this._selected = false;\n        this._onDidChangeSelection = new event_1.Emitter();\n        this.onDidChangeSelection = this._onDidChangeSelection.event;\n        this.input = new SCMInput();\n    }\n    Object.defineProperty(SCMRepository.prototype, \"selected\", {\n        get: function () {\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SCMRepository.prototype.focus = function () {\n        this._onDidFocus.fire();\n    };\n    SCMRepository.prototype.setSelected = function (selected) {\n        this._selected = selected;\n        this._onDidChangeSelection.fire(selected);\n    };\n    SCMRepository.prototype.dispose = function () {\n        this.disposable.dispose();\n        this.provider.dispose();\n    };\n    return SCMRepository;\n}());\nvar SCMService = /** @class */ (function () {\n    function SCMService(logService) {\n        this.logService = logService;\n        this._providerIds = new Set();\n        this._repositories = [];\n        this._selectedRepositories = [];\n        this._onDidChangeSelectedRepositories = new event_1.Emitter();\n        this.onDidChangeSelectedRepositories = this._onDidChangeSelectedRepositories.event;\n        this._onDidAddProvider = new event_1.Emitter();\n        this._onDidRemoveProvider = new event_1.Emitter();\n    }\n    Object.defineProperty(SCMService.prototype, \"repositories\", {\n        get: function () { return this._repositories.slice(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMService.prototype, \"selectedRepositories\", {\n        get: function () { return this._selectedRepositories.slice(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMService.prototype, \"onDidAddRepository\", {\n        get: function () { return this._onDidAddProvider.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SCMService.prototype, \"onDidRemoveRepository\", {\n        get: function () { return this._onDidRemoveProvider.event; },\n        enumerable: true,\n        configurable: true\n    });\n    SCMService.prototype.registerSCMProvider = function (provider) {\n        var _this = this;\n        this.logService.trace('SCMService#registerSCMProvider');\n        if (this._providerIds.has(provider.id)) {\n            throw new Error(\"SCM Provider \" + provider.id + \" already exists.\");\n        }\n        this._providerIds.add(provider.id);\n        var disposable = lifecycle_1.toDisposable(function () {\n            var index = _this._repositories.indexOf(repository);\n            if (index < 0) {\n                return;\n            }\n            selectedDisposable.dispose();\n            _this._providerIds.delete(provider.id);\n            _this._repositories.splice(index, 1);\n            _this._onDidRemoveProvider.fire(repository);\n            _this.onDidChangeSelection();\n        });\n        var repository = new SCMRepository(provider, disposable);\n        var selectedDisposable = repository.onDidChangeSelection(this.onDidChangeSelection, this);\n        this._repositories.push(repository);\n        this._onDidAddProvider.fire(repository);\n        // automatically select the first repository\n        if (this._repositories.length === 1) {\n            repository.setSelected(true);\n        }\n        return repository;\n    };\n    SCMService.prototype.onDidChangeSelection = function () {\n        var selectedRepositories = this._repositories.filter(function (r) { return r.selected; });\n        if (arrays_1.equals(this._selectedRepositories, selectedRepositories)) {\n            return;\n        }\n        this._selectedRepositories = this._repositories.filter(function (r) { return r.selected; });\n        this._onDidChangeSelectedRepositories.fire(this.selectedRepositories);\n    };\n    SCMService = tslib_1.__decorate([\n        tslib_1.__param(0, log_1.ILogService)\n    ], SCMService);\n    return SCMService;\n}());\nexports.SCMService = SCMService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/scm/common/scmService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ISCMService, ISCMProvider, ISCMInput, ISCMRepository, IInputValidator } from './scm';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { equals } from 'vs/base/common/arrays';\n\nclass SCMInput implements ISCMInput {\n\n\tprivate _value = '';\n\n\tget value(): string {\n\t\treturn this._value;\n\t}\n\n\tset value(value: string) {\n\t\tthis._value = value;\n\t\tthis._onDidChange.fire(value);\n\t}\n\n\tprivate _onDidChange = new Emitter<string>();\n\tget onDidChange(): Event<string> { return this._onDidChange.event; }\n\n\tprivate _placeholder = '';\n\n\tget placeholder(): string {\n\t\treturn this._placeholder;\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis._placeholder = placeholder;\n\t\tthis._onDidChangePlaceholder.fire(placeholder);\n\t}\n\n\tprivate _onDidChangePlaceholder = new Emitter<string>();\n\tget onDidChangePlaceholder(): Event<string> { return this._onDidChangePlaceholder.event; }\n\n\tprivate _visible = true;\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tset visible(visible: boolean) {\n\t\tthis._visible = visible;\n\t\tthis._onDidChangeVisibility.fire(visible);\n\t}\n\n\tprivate _onDidChangeVisibility = new Emitter<boolean>();\n\tget onDidChangeVisibility(): Event<boolean> { return this._onDidChangeVisibility.event; }\n\n\tprivate _validateInput: IInputValidator = () => Promise.resolve(undefined);\n\n\tget validateInput(): IInputValidator {\n\t\treturn this._validateInput;\n\t}\n\n\tset validateInput(validateInput: IInputValidator) {\n\t\tthis._validateInput = validateInput;\n\t\tthis._onDidChangeValidateInput.fire();\n\t}\n\n\tprivate _onDidChangeValidateInput = new Emitter<void>();\n\tget onDidChangeValidateInput(): Event<void> { return this._onDidChangeValidateInput.event; }\n}\n\nclass SCMRepository implements ISCMRepository {\n\n\tprivate _onDidFocus = new Emitter<void>();\n\treadonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n\tprivate _selected = false;\n\tget selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tprivate _onDidChangeSelection = new Emitter<boolean>();\n\treadonly onDidChangeSelection: Event<boolean> = this._onDidChangeSelection.event;\n\n\treadonly input: ISCMInput = new SCMInput();\n\n\tconstructor(\n\t\tpublic readonly provider: ISCMProvider,\n\t\tprivate disposable: IDisposable\n\t) { }\n\n\tfocus(): void {\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tsetSelected(selected: boolean): void {\n\t\tthis._selected = selected;\n\t\tthis._onDidChangeSelection.fire(selected);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.provider.dispose();\n\t}\n}\n\nexport class SCMService implements ISCMService {\n\n\t_serviceBrand: any;\n\n\tprivate _providerIds = new Set<string>();\n\tprivate _repositories: ISCMRepository[] = [];\n\tget repositories(): ISCMRepository[] { return [...this._repositories]; }\n\n\tprivate _selectedRepositories: ISCMRepository[] = [];\n\tget selectedRepositories(): ISCMRepository[] { return [...this._selectedRepositories]; }\n\n\tprivate _onDidChangeSelectedRepositories = new Emitter<ISCMRepository[]>();\n\treadonly onDidChangeSelectedRepositories: Event<ISCMRepository[]> = this._onDidChangeSelectedRepositories.event;\n\n\tprivate _onDidAddProvider = new Emitter<ISCMRepository>();\n\tget onDidAddRepository(): Event<ISCMRepository> { return this._onDidAddProvider.event; }\n\n\tprivate _onDidRemoveProvider = new Emitter<ISCMRepository>();\n\tget onDidRemoveRepository(): Event<ISCMRepository> { return this._onDidRemoveProvider.event; }\n\n\tconstructor(@ILogService private readonly logService: ILogService) { }\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository {\n\t\tthis.logService.trace('SCMService#registerSCMProvider');\n\n\t\tif (this._providerIds.has(provider.id)) {\n\t\t\tthrow new Error(`SCM Provider ${provider.id} already exists.`);\n\t\t}\n\n\t\tthis._providerIds.add(provider.id);\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tconst index = this._repositories.indexOf(repository);\n\n\t\t\tif (index < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tselectedDisposable.dispose();\n\t\t\tthis._providerIds.delete(provider.id);\n\t\t\tthis._repositories.splice(index, 1);\n\t\t\tthis._onDidRemoveProvider.fire(repository);\n\t\t\tthis.onDidChangeSelection();\n\t\t});\n\n\t\tconst repository = new SCMRepository(provider, disposable);\n\t\tconst selectedDisposable = repository.onDidChangeSelection(this.onDidChangeSelection, this);\n\n\t\tthis._repositories.push(repository);\n\t\tthis._onDidAddProvider.fire(repository);\n\n\t\t// automatically select the first repository\n\t\tif (this._repositories.length === 1) {\n\t\t\trepository.setSelected(true);\n\t\t}\n\n\t\treturn repository;\n\t}\n\n\tprivate onDidChangeSelection(): void {\n\t\tconst selectedRepositories = this._repositories.filter(r => r.selected);\n\n\t\tif (equals(this._selectedRepositories, selectedRepositories)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._selectedRepositories = this._repositories.filter(r => r.selected);\n\t\tthis._onDidChangeSelectedRepositories.fire(this.selectedRepositories);\n\t}\n}\n"]}]}