{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findDecorations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/find/findDecorations.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/editor/common/model\", \"vs/editor/common/model/textModel\", \"vs/platform/theme/common/colorRegistry\", \"vs/platform/theme/common/themeService\"], function (require, exports, range_1, model_1, textModel_1, colorRegistry_1, themeService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class FindDecorations {\n        constructor(editor) {\n            this._editor = editor;\n            this._decorations = [];\n            this._overviewRulerApproximateDecorations = [];\n            this._findScopeDecorationId = null;\n            this._rangeHighlightDecorationId = null;\n            this._highlightedDecorationId = null;\n            this._startPosition = this._editor.getPosition();\n        }\n        dispose() {\n            this._editor.deltaDecorations(this._allDecorations(), []);\n            this._decorations = [];\n            this._overviewRulerApproximateDecorations = [];\n            this._findScopeDecorationId = null;\n            this._rangeHighlightDecorationId = null;\n            this._highlightedDecorationId = null;\n        }\n        reset() {\n            this._decorations = [];\n            this._overviewRulerApproximateDecorations = [];\n            this._findScopeDecorationId = null;\n            this._rangeHighlightDecorationId = null;\n            this._highlightedDecorationId = null;\n        }\n        getCount() {\n            return this._decorations.length;\n        }\n        getFindScope() {\n            if (this._findScopeDecorationId) {\n                return this._editor.getModel().getDecorationRange(this._findScopeDecorationId);\n            }\n            return null;\n        }\n        getStartPosition() {\n            return this._startPosition;\n        }\n        setStartPosition(newStartPosition) {\n            this._startPosition = newStartPosition;\n            this.setCurrentFindMatch(null);\n        }\n        _getDecorationIndex(decorationId) {\n            const index = this._decorations.indexOf(decorationId);\n            if (index >= 0) {\n                return index + 1;\n            }\n            return 1;\n        }\n        getCurrentMatchesPosition(desiredRange) {\n            let candidates = this._editor.getModel().getDecorationsInRange(desiredRange);\n            for (const candidate of candidates) {\n                const candidateOpts = candidate.options;\n                if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) {\n                    return this._getDecorationIndex(candidate.id);\n                }\n            }\n            return 1;\n        }\n        setCurrentFindMatch(nextMatch) {\n            let newCurrentDecorationId = null;\n            let matchPosition = 0;\n            if (nextMatch) {\n                for (let i = 0, len = this._decorations.length; i < len; i++) {\n                    let range = this._editor.getModel().getDecorationRange(this._decorations[i]);\n                    if (nextMatch.equalsRange(range)) {\n                        newCurrentDecorationId = this._decorations[i];\n                        matchPosition = (i + 1);\n                        break;\n                    }\n                }\n            }\n            if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) {\n                this._editor.changeDecorations((changeAccessor) => {\n                    if (this._highlightedDecorationId !== null) {\n                        changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);\n                        this._highlightedDecorationId = null;\n                    }\n                    if (newCurrentDecorationId !== null) {\n                        this._highlightedDecorationId = newCurrentDecorationId;\n                        changeAccessor.changeDecorationOptions(this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);\n                    }\n                    if (this._rangeHighlightDecorationId !== null) {\n                        changeAccessor.removeDecoration(this._rangeHighlightDecorationId);\n                        this._rangeHighlightDecorationId = null;\n                    }\n                    if (newCurrentDecorationId !== null) {\n                        let rng = this._editor.getModel().getDecorationRange(newCurrentDecorationId);\n                        if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {\n                            let lineBeforeEnd = rng.endLineNumber - 1;\n                            let lineBeforeEndMaxColumn = this._editor.getModel().getLineMaxColumn(lineBeforeEnd);\n                            rng = new range_1.Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);\n                        }\n                        this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);\n                    }\n                });\n            }\n            return matchPosition;\n        }\n        set(findMatches, findScope) {\n            this._editor.changeDecorations((accessor) => {\n                let findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;\n                let newOverviewRulerApproximateDecorations = [];\n                if (findMatches.length > 1000) {\n                    // we go into a mode where the overview ruler gets \"approximate\" decorations\n                    // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes\n                    findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION;\n                    // approximate a distance in lines where matches should be merged\n                    const lineCount = this._editor.getModel().getLineCount();\n                    const height = this._editor.getLayoutInfo().height;\n                    const approxPixelsPerLine = height / lineCount;\n                    const mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine));\n                    // merge decorations as much as possible\n                    let prevStartLineNumber = findMatches[0].range.startLineNumber;\n                    let prevEndLineNumber = findMatches[0].range.endLineNumber;\n                    for (let i = 1, len = findMatches.length; i < len; i++) {\n                        const range = findMatches[i].range;\n                        if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {\n                            if (range.endLineNumber > prevEndLineNumber) {\n                                prevEndLineNumber = range.endLineNumber;\n                            }\n                        }\n                        else {\n                            newOverviewRulerApproximateDecorations.push({\n                                range: new range_1.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n                                options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n                            });\n                            prevStartLineNumber = range.startLineNumber;\n                            prevEndLineNumber = range.endLineNumber;\n                        }\n                    }\n                    newOverviewRulerApproximateDecorations.push({\n                        range: new range_1.Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n                        options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n                    });\n                }\n                // Find matches\n                let newFindMatchesDecorations = new Array(findMatches.length);\n                for (let i = 0, len = findMatches.length; i < len; i++) {\n                    newFindMatchesDecorations[i] = {\n                        range: findMatches[i].range,\n                        options: findMatchesOptions\n                    };\n                }\n                this._decorations = accessor.deltaDecorations(this._decorations, newFindMatchesDecorations);\n                // Overview ruler approximate decorations\n                this._overviewRulerApproximateDecorations = accessor.deltaDecorations(this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations);\n                // Range highlight\n                if (this._rangeHighlightDecorationId) {\n                    accessor.removeDecoration(this._rangeHighlightDecorationId);\n                    this._rangeHighlightDecorationId = null;\n                }\n                // Find scope\n                if (this._findScopeDecorationId) {\n                    accessor.removeDecoration(this._findScopeDecorationId);\n                    this._findScopeDecorationId = null;\n                }\n                if (findScope) {\n                    this._findScopeDecorationId = accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION);\n                }\n            });\n        }\n        matchBeforePosition(position) {\n            if (this._decorations.length === 0) {\n                return null;\n            }\n            for (let i = this._decorations.length - 1; i >= 0; i--) {\n                let decorationId = this._decorations[i];\n                let r = this._editor.getModel().getDecorationRange(decorationId);\n                if (!r || r.endLineNumber > position.lineNumber) {\n                    continue;\n                }\n                if (r.endLineNumber < position.lineNumber) {\n                    return r;\n                }\n                if (r.endColumn > position.column) {\n                    continue;\n                }\n                return r;\n            }\n            return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);\n        }\n        matchAfterPosition(position) {\n            if (this._decorations.length === 0) {\n                return null;\n            }\n            for (let i = 0, len = this._decorations.length; i < len; i++) {\n                let decorationId = this._decorations[i];\n                let r = this._editor.getModel().getDecorationRange(decorationId);\n                if (!r || r.startLineNumber < position.lineNumber) {\n                    continue;\n                }\n                if (r.startLineNumber > position.lineNumber) {\n                    return r;\n                }\n                if (r.startColumn < position.column) {\n                    continue;\n                }\n                return r;\n            }\n            return this._editor.getModel().getDecorationRange(this._decorations[0]);\n        }\n        _allDecorations() {\n            let result = [];\n            result = result.concat(this._decorations);\n            result = result.concat(this._overviewRulerApproximateDecorations);\n            if (this._findScopeDecorationId) {\n                result.push(this._findScopeDecorationId);\n            }\n            if (this._rangeHighlightDecorationId) {\n                result.push(this._rangeHighlightDecorationId);\n            }\n            return result;\n        }\n    }\n    FindDecorations._CURRENT_FIND_MATCH_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        zIndex: 13,\n        className: 'currentFindMatch',\n        showIfCollapsed: true,\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerFindMatchForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    FindDecorations._FIND_MATCH_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'findMatch',\n        showIfCollapsed: true,\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerFindMatchForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'findMatch',\n        showIfCollapsed: true\n    });\n    FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        overviewRuler: {\n            color: themeService_1.themeColorFromId(colorRegistry_1.overviewRulerFindMatchForeground),\n            position: model_1.OverviewRulerLane.Center\n        }\n    });\n    FindDecorations._RANGE_HIGHLIGHT_DECORATION = textModel_1.ModelDecorationOptions.register({\n        stickiness: model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n        className: 'rangeHighlight',\n        isWholeLine: true\n    });\n    FindDecorations._FIND_SCOPE_DECORATION = textModel_1.ModelDecorationOptions.register({\n        className: 'findScope',\n        isWholeLine: true\n    });\n    exports.FindDecorations = FindDecorations;\n});\n",null]}