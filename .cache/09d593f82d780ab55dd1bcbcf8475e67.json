{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/debugSchemas.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/services/extensions/common/extensionsRegistry\", \"vs/nls\", \"vs/workbench/services/configuration/common/configuration\", \"vs/workbench/services/configurationResolver/common/configurationResolverSchema\"], function (require, exports, extensionsRegistry, nls, configuration_1, configurationResolverSchema_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // debuggers extension point\n    exports.debuggersExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'debuggers',\n        defaultExtensionKind: 'workspace',\n        jsonSchema: {\n            description: nls.localize('vscode.extension.contributes.debuggers', 'Contributes debug adapters.'),\n            type: 'array',\n            defaultSnippets: [{ body: [{ type: '', extensions: [] }] }],\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { type: '', program: '', runtime: '', enableBreakpointsFor: { languageIds: [''] } } }],\n                properties: {\n                    type: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.type', \"Unique identifier for this debug adapter.\"),\n                        type: 'string'\n                    },\n                    label: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.label', \"Display name for this debug adapter.\"),\n                        type: 'string'\n                    },\n                    program: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.program', \"Path to the debug adapter program. Path is either absolute or relative to the extension folder.\"),\n                        type: 'string'\n                    },\n                    args: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.args', \"Optional arguments to pass to the adapter.\"),\n                        type: 'array'\n                    },\n                    runtime: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.runtime', \"Optional runtime in case the program attribute is not an executable but requires a runtime.\"),\n                        type: 'string'\n                    },\n                    runtimeArgs: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.runtimeArgs', \"Optional runtime arguments.\"),\n                        type: 'array'\n                    },\n                    variables: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.variables', \"Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command.\"),\n                        type: 'object'\n                    },\n                    initialConfigurations: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.initialConfigurations', \"Configurations for generating the initial \\'launch.json\\'.\"),\n                        type: ['array', 'string'],\n                    },\n                    languages: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.languages', \"List of languages for which the debug extension could be considered the \\\"default debugger\\\".\"),\n                        type: 'array'\n                    },\n                    adapterExecutableCommand: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.adapterExecutableCommand', \"If specified VS Code will call this command to determine the executable path of the debug adapter and the arguments to pass.\"),\n                        type: 'string'\n                    },\n                    configurationSnippets: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.configurationSnippets', \"Snippets for adding new configurations in \\'launch.json\\'.\"),\n                        type: 'array'\n                    },\n                    configurationAttributes: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.configurationAttributes', \"JSON schema configurations for validating \\'launch.json\\'.\"),\n                        type: 'object'\n                    },\n                    windows: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.windows', \"Windows specific settings.\"),\n                        type: 'object',\n                        properties: {\n                            runtime: {\n                                description: nls.localize('vscode.extension.contributes.debuggers.windows.runtime', \"Runtime used for Windows.\"),\n                                type: 'string'\n                            }\n                        }\n                    },\n                    osx: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.osx', \"macOS specific settings.\"),\n                        type: 'object',\n                        properties: {\n                            runtime: {\n                                description: nls.localize('vscode.extension.contributes.debuggers.osx.runtime', \"Runtime used for macOS.\"),\n                                type: 'string'\n                            }\n                        }\n                    },\n                    linux: {\n                        description: nls.localize('vscode.extension.contributes.debuggers.linux', \"Linux specific settings.\"),\n                        type: 'object',\n                        properties: {\n                            runtime: {\n                                description: nls.localize('vscode.extension.contributes.debuggers.linux.runtime', \"Runtime used for Linux.\"),\n                                type: 'string'\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n    // breakpoints extension point #9037\n    exports.breakpointsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint({\n        extensionPoint: 'breakpoints',\n        jsonSchema: {\n            description: nls.localize('vscode.extension.contributes.breakpoints', 'Contributes breakpoints.'),\n            type: 'array',\n            defaultSnippets: [{ body: [{ language: '' }] }],\n            items: {\n                type: 'object',\n                defaultSnippets: [{ body: { language: '' } }],\n                properties: {\n                    language: {\n                        description: nls.localize('vscode.extension.contributes.breakpoints.language', \"Allow breakpoints for this language.\"),\n                        type: 'string'\n                    },\n                }\n            }\n        }\n    });\n    // debug general schema\n    const defaultCompound = { name: 'Compound', configurations: [] };\n    exports.launchSchema = {\n        id: configuration_1.launchSchemaId,\n        type: 'object',\n        title: nls.localize('app.launch.json.title', \"Launch\"),\n        required: [],\n        default: { version: '0.2.0', configurations: [], compounds: [] },\n        properties: {\n            version: {\n                type: 'string',\n                description: nls.localize('app.launch.json.version', \"Version of this file format.\"),\n                default: '0.2.0'\n            },\n            configurations: {\n                type: 'array',\n                description: nls.localize('app.launch.json.configurations', \"List of configurations. Add new configurations or edit existing ones by using IntelliSense.\"),\n                items: {\n                    defaultSnippets: [],\n                    'type': 'object',\n                    oneOf: []\n                }\n            },\n            compounds: {\n                type: 'array',\n                description: nls.localize('app.launch.json.compounds', \"List of compounds. Each compound references multiple configurations which will get launched together.\"),\n                items: {\n                    type: 'object',\n                    required: ['name', 'configurations'],\n                    properties: {\n                        name: {\n                            type: 'string',\n                            description: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n                        },\n                        configurations: {\n                            type: 'array',\n                            default: [],\n                            items: {\n                                oneOf: [{\n                                        enum: [],\n                                        description: nls.localize('useUniqueNames', \"Please use unique configuration names.\")\n                                    }, {\n                                        type: 'object',\n                                        required: ['name'],\n                                        properties: {\n                                            name: {\n                                                enum: [],\n                                                description: nls.localize('app.launch.json.compound.name', \"Name of compound. Appears in the launch configuration drop down menu.\")\n                                            },\n                                            folder: {\n                                                enum: [],\n                                                description: nls.localize('app.launch.json.compound.folder', \"Name of folder in which the compound is located.\")\n                                            }\n                                        }\n                                    }]\n                            },\n                            description: nls.localize('app.launch.json.compounds.configurations', \"Names of configurations that will be started as part of this compound.\")\n                        }\n                    },\n                    default: defaultCompound\n                },\n                default: [\n                    defaultCompound\n                ]\n            },\n            inputs: configurationResolverSchema_1.inputsSchema.definitions.inputs\n        }\n    };\n});\n",null]}