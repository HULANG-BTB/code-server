{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"vs/css!./contextMenuHandler\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar menu_1 = require(\"vs/base/browser/ui/menu/menu\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar event_1 = require(\"vs/base/browser/event\");\nvar ContextMenuHandler = /** @class */ (function () {\n    function ContextMenuHandler(contextViewService, telemetryService, notificationService, keybindingService, themeService) {\n        this.contextViewService = contextViewService;\n        this.telemetryService = telemetryService;\n        this.notificationService = notificationService;\n        this.keybindingService = keybindingService;\n        this.themeService = themeService;\n        this.options = { blockMouse: true };\n    }\n    ContextMenuHandler.prototype.configure = function (options) {\n        this.options = options;\n    };\n    ContextMenuHandler.prototype.showContextMenu = function (delegate) {\n        var _this = this;\n        var actions = delegate.getActions();\n        if (!actions.length) {\n            return; // Don't render an empty context menu\n        }\n        this.focusToReturn = document.activeElement;\n        var menu;\n        this.contextViewService.showContextView({\n            getAnchor: function () { return delegate.getAnchor(); },\n            canRelayout: false,\n            anchorAlignment: delegate.anchorAlignment,\n            render: function (container) {\n                var className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';\n                if (className) {\n                    container.className += ' ' + className;\n                }\n                // Render invisible div to block mouse interaction in the rest of the UI\n                if (_this.options.blockMouse) {\n                    _this.block = container.appendChild(dom_1.$('.context-view-block'));\n                }\n                var menuDisposables = [];\n                var actionRunner = delegate.actionRunner || new actions_1.ActionRunner();\n                actionRunner.onDidBeforeRun(_this.onActionRun, _this, menuDisposables);\n                actionRunner.onDidRun(_this.onDidActionRun, _this, menuDisposables);\n                menu = new menu_1.Menu(container, actions, {\n                    actionItemProvider: delegate.getActionItem,\n                    context: delegate.getActionsContext ? delegate.getActionsContext() : null,\n                    actionRunner: actionRunner,\n                    getKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : function (action) { return _this.keybindingService.lookupKeybinding(action.id); }\n                });\n                menuDisposables.push(styler_1.attachMenuStyler(menu, _this.themeService));\n                menu.onDidCancel(function () { return _this.contextViewService.hideContextView(true); }, null, menuDisposables);\n                menu.onDidBlur(function () { return _this.contextViewService.hideContextView(true); }, null, menuDisposables);\n                event_1.domEvent(window, dom_1.EventType.BLUR)(function () { _this.contextViewService.hideContextView(true); }, null, menuDisposables);\n                return lifecycle_1.combinedDisposable(menuDisposables.concat([menu]));\n            },\n            focus: function () {\n                if (menu) {\n                    menu.focus(!!delegate.autoSelectFirstItem);\n                }\n            },\n            onHide: function (didCancel) {\n                if (delegate.onHide) {\n                    delegate.onHide(!!didCancel);\n                }\n                if (_this.block) {\n                    dom_1.removeNode(_this.block);\n                    _this.block = null;\n                }\n                if (_this.focusToReturn) {\n                    _this.focusToReturn.focus();\n                }\n            }\n        });\n    };\n    ContextMenuHandler.prototype.onActionRun = function (e) {\n        if (this.telemetryService) {\n            /* __GDPR__\n                \"workbenchActionExecuted\" : {\n                    \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                    \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                }\n            */\n            this.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'contextMenu' });\n        }\n        this.contextViewService.hideContextView(false);\n        // Restore focus here\n        if (this.focusToReturn) {\n            this.focusToReturn.focus();\n        }\n    };\n    ContextMenuHandler.prototype.onDidActionRun = function (e) {\n        if (e.error && this.notificationService) {\n            this.notificationService.error(e.error);\n        }\n    };\n    return ContextMenuHandler;\n}());\nexports.ContextMenuHandler = ContextMenuHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/contextview/browser/contextMenuHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./contextMenuHandler';\n\nimport { combinedDisposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ActionRunner, IRunEvent } from 'vs/base/common/actions';\nimport { Menu } from 'vs/base/browser/ui/menu/menu';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IContextMenuDelegate } from 'vs/base/browser/contextmenu';\nimport { EventType, $, removeNode } from 'vs/base/browser/dom';\nimport { attachMenuStyler } from 'vs/platform/theme/common/styler';\nimport { domEvent } from 'vs/base/browser/event';\n\nexport interface IContextMenuHandlerOptions {\n\tblockMouse: boolean;\n}\n\nexport class ContextMenuHandler {\n\tprivate focusToReturn: HTMLElement;\n\tprivate block: HTMLElement | null;\n\tprivate options: IContextMenuHandlerOptions = { blockMouse: true };\n\n\tconstructor(\n\t\tprivate contextViewService: IContextViewService,\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate notificationService: INotificationService,\n\t\tprivate keybindingService: IKeybindingService,\n\t\tprivate themeService: IThemeService\n\t) { }\n\n\tconfigure(options: IContextMenuHandlerOptions): void {\n\t\tthis.options = options;\n\t}\n\n\tshowContextMenu(delegate: IContextMenuDelegate): void {\n\t\tconst actions = delegate.getActions();\n\t\tif (!actions.length) {\n\t\t\treturn; // Don't render an empty context menu\n\t\t}\n\n\t\tthis.focusToReturn = document.activeElement as HTMLElement;\n\n\t\tlet menu: Menu | undefined;\n\n\t\tthis.contextViewService.showContextView({\n\t\t\tgetAnchor: () => delegate.getAnchor(),\n\t\t\tcanRelayout: false,\n\t\t\tanchorAlignment: delegate.anchorAlignment,\n\n\t\t\trender: (container) => {\n\t\t\t\tlet className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';\n\n\t\t\t\tif (className) {\n\t\t\t\t\tcontainer.className += ' ' + className;\n\t\t\t\t}\n\n\t\t\t\t// Render invisible div to block mouse interaction in the rest of the UI\n\t\t\t\tif (this.options.blockMouse) {\n\t\t\t\t\tthis.block = container.appendChild($('.context-view-block'));\n\t\t\t\t}\n\n\t\t\t\tconst menuDisposables: IDisposable[] = [];\n\n\t\t\t\tconst actionRunner = delegate.actionRunner || new ActionRunner();\n\t\t\t\tactionRunner.onDidBeforeRun(this.onActionRun, this, menuDisposables);\n\t\t\t\tactionRunner.onDidRun(this.onDidActionRun, this, menuDisposables);\n\t\t\t\tmenu = new Menu(container, actions, {\n\t\t\t\t\tactionItemProvider: delegate.getActionItem,\n\t\t\t\t\tcontext: delegate.getActionsContext ? delegate.getActionsContext() : null,\n\t\t\t\t\tactionRunner,\n\t\t\t\t\tgetKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : action => this.keybindingService.lookupKeybinding(action.id)\n\t\t\t\t});\n\n\t\t\t\tmenuDisposables.push(attachMenuStyler(menu, this.themeService));\n\n\t\t\t\tmenu.onDidCancel(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n\t\t\t\tmenu.onDidBlur(() => this.contextViewService.hideContextView(true), null, menuDisposables);\n\t\t\t\tdomEvent(window, EventType.BLUR)(() => { this.contextViewService.hideContextView(true); }, null, menuDisposables);\n\n\t\t\t\treturn combinedDisposable([...menuDisposables, menu]);\n\t\t\t},\n\n\t\t\tfocus: () => {\n\t\t\t\tif (menu) {\n\t\t\t\t\tmenu.focus(!!delegate.autoSelectFirstItem);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tonHide: (didCancel?: boolean) => {\n\t\t\t\tif (delegate.onHide) {\n\t\t\t\t\tdelegate.onHide(!!didCancel);\n\t\t\t\t}\n\n\t\t\t\tif (this.block) {\n\t\t\t\t\tremoveNode(this.block);\n\t\t\t\t\tthis.block = null;\n\t\t\t\t}\n\n\t\t\t\tif (this.focusToReturn) {\n\t\t\t\t\tthis.focusToReturn.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate onActionRun(e: IRunEvent): void {\n\t\tif (this.telemetryService) {\n\t\t\t/* __GDPR__\n\t\t\t\t\"workbenchActionExecuted\" : {\n\t\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('workbenchActionExecuted', { id: e.action.id, from: 'contextMenu' });\n\t\t}\n\n\t\tthis.contextViewService.hideContextView(false);\n\n\t\t// Restore focus here\n\t\tif (this.focusToReturn) {\n\t\t\tthis.focusToReturn.focus();\n\t\t}\n\t}\n\n\tprivate onDidActionRun(e: IRunEvent): void {\n\t\tif (e.error && this.notificationService) {\n\t\t\tthis.notificationService.error(e.error);\n\t\t}\n\t}\n}\n"]}]}