{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/snippet/snippetVariables.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/path\", \"vs/editor/contrib/snippet/snippetParser\", \"vs/editor/common/modes/languageConfigurationRegistry\", \"vs/base/common/strings\", \"vs/platform/workspaces/common/workspaces\"], function (require, exports, nls, path_1, snippetParser_1, languageConfigurationRegistry_1, strings_1, workspaces_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.KnownSnippetVariableNames = Object.freeze({\n        'CURRENT_YEAR': true,\n        'CURRENT_YEAR_SHORT': true,\n        'CURRENT_MONTH': true,\n        'CURRENT_DATE': true,\n        'CURRENT_HOUR': true,\n        'CURRENT_MINUTE': true,\n        'CURRENT_SECOND': true,\n        'CURRENT_DAY_NAME': true,\n        'CURRENT_DAY_NAME_SHORT': true,\n        'CURRENT_MONTH_NAME': true,\n        'CURRENT_MONTH_NAME_SHORT': true,\n        'SELECTION': true,\n        'CLIPBOARD': true,\n        'TM_SELECTED_TEXT': true,\n        'TM_CURRENT_LINE': true,\n        'TM_CURRENT_WORD': true,\n        'TM_LINE_INDEX': true,\n        'TM_LINE_NUMBER': true,\n        'TM_FILENAME': true,\n        'TM_FILENAME_BASE': true,\n        'TM_DIRECTORY': true,\n        'TM_FILEPATH': true,\n        'BLOCK_COMMENT_START': true,\n        'BLOCK_COMMENT_END': true,\n        'LINE_COMMENT': true,\n        'WORKSPACE_NAME': true,\n    });\n    class CompositeSnippetVariableResolver {\n        constructor(_delegates) {\n            this._delegates = _delegates;\n            //\n        }\n        resolve(variable) {\n            for (const delegate of this._delegates) {\n                let value = delegate.resolve(variable);\n                if (value !== undefined) {\n                    return value;\n                }\n            }\n            return undefined;\n        }\n    }\n    exports.CompositeSnippetVariableResolver = CompositeSnippetVariableResolver;\n    class SelectionBasedVariableResolver {\n        constructor(_model, _selection) {\n            this._model = _model;\n            this._selection = _selection;\n            //\n        }\n        resolve(variable) {\n            const { name } = variable;\n            if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n                let value = this._model.getValueInRange(this._selection) || undefined;\n                if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n                    // Selection is a multiline string which we indentation we now\n                    // need to adjust. We compare the indentation of this variable\n                    // with the indentation at the editor position and add potential\n                    // extra indentation to the value\n                    const line = this._model.getLineContent(this._selection.startLineNumber);\n                    const lineLeadingWhitespace = strings_1.getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n                    let varLeadingWhitespace = lineLeadingWhitespace;\n                    variable.snippet.walk(marker => {\n                        if (marker === variable) {\n                            return false;\n                        }\n                        if (marker instanceof snippetParser_1.Text) {\n                            varLeadingWhitespace = strings_1.getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\n                        }\n                        return true;\n                    });\n                    const whitespaceCommonLength = strings_1.commonPrefixLength(varLeadingWhitespace, lineLeadingWhitespace);\n                    value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, (m, newline, rest) => `${newline}${varLeadingWhitespace.substr(whitespaceCommonLength)}${rest}`);\n                }\n                return value;\n            }\n            else if (name === 'TM_CURRENT_LINE') {\n                return this._model.getLineContent(this._selection.positionLineNumber);\n            }\n            else if (name === 'TM_CURRENT_WORD') {\n                const info = this._model.getWordAtPosition({\n                    lineNumber: this._selection.positionLineNumber,\n                    column: this._selection.positionColumn\n                });\n                return info && info.word || undefined;\n            }\n            else if (name === 'TM_LINE_INDEX') {\n                return String(this._selection.positionLineNumber - 1);\n            }\n            else if (name === 'TM_LINE_NUMBER') {\n                return String(this._selection.positionLineNumber);\n            }\n            return undefined;\n        }\n    }\n    exports.SelectionBasedVariableResolver = SelectionBasedVariableResolver;\n    class ModelBasedVariableResolver {\n        constructor(_model) {\n            this._model = _model;\n            //\n        }\n        resolve(variable) {\n            const { name } = variable;\n            if (name === 'TM_FILENAME') {\n                return path_1.basename(this._model.uri.fsPath);\n            }\n            else if (name === 'TM_FILENAME_BASE') {\n                const name = path_1.basename(this._model.uri.fsPath);\n                const idx = name.lastIndexOf('.');\n                if (idx <= 0) {\n                    return name;\n                }\n                else {\n                    return name.slice(0, idx);\n                }\n            }\n            else if (name === 'TM_DIRECTORY') {\n                const dir = path_1.dirname(this._model.uri.fsPath);\n                return dir !== '.' ? dir : '';\n            }\n            else if (name === 'TM_FILEPATH') {\n                return this._model.uri.fsPath;\n            }\n            return undefined;\n        }\n    }\n    exports.ModelBasedVariableResolver = ModelBasedVariableResolver;\n    class ClipboardBasedVariableResolver {\n        constructor(_clipboardService, _selectionIdx, _selectionCount) {\n            this._clipboardService = _clipboardService;\n            this._selectionIdx = _selectionIdx;\n            this._selectionCount = _selectionCount;\n            //\n        }\n        resolve(variable) {\n            if (variable.name !== 'CLIPBOARD' || !this._clipboardService) {\n                return undefined;\n            }\n            const text = this._clipboardService.readText();\n            if (!text) {\n                return undefined;\n            }\n            const lines = text.split(/\\r\\n|\\n|\\r/).filter(s => !strings_1.isFalsyOrWhitespace(s));\n            if (lines.length === this._selectionCount) {\n                return lines[this._selectionIdx];\n            }\n            else {\n                return text;\n            }\n        }\n    }\n    exports.ClipboardBasedVariableResolver = ClipboardBasedVariableResolver;\n    class CommentBasedVariableResolver {\n        constructor(_model) {\n            this._model = _model;\n            //\n        }\n        resolve(variable) {\n            const { name } = variable;\n            const language = this._model.getLanguageIdentifier();\n            const config = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getComments(language.id);\n            if (!config) {\n                return undefined;\n            }\n            if (name === 'LINE_COMMENT') {\n                return config.lineCommentToken || undefined;\n            }\n            else if (name === 'BLOCK_COMMENT_START') {\n                return config.blockCommentStartToken || undefined;\n            }\n            else if (name === 'BLOCK_COMMENT_END') {\n                return config.blockCommentEndToken || undefined;\n            }\n            return undefined;\n        }\n    }\n    exports.CommentBasedVariableResolver = CommentBasedVariableResolver;\n    class TimeBasedVariableResolver {\n        resolve(variable) {\n            const { name } = variable;\n            if (name === 'CURRENT_YEAR') {\n                return String(new Date().getFullYear());\n            }\n            else if (name === 'CURRENT_YEAR_SHORT') {\n                return String(new Date().getFullYear()).slice(-2);\n            }\n            else if (name === 'CURRENT_MONTH') {\n                return strings_1.pad((new Date().getMonth().valueOf() + 1), 2);\n            }\n            else if (name === 'CURRENT_DATE') {\n                return strings_1.pad(new Date().getDate().valueOf(), 2);\n            }\n            else if (name === 'CURRENT_HOUR') {\n                return strings_1.pad(new Date().getHours().valueOf(), 2);\n            }\n            else if (name === 'CURRENT_MINUTE') {\n                return strings_1.pad(new Date().getMinutes().valueOf(), 2);\n            }\n            else if (name === 'CURRENT_SECOND') {\n                return strings_1.pad(new Date().getSeconds().valueOf(), 2);\n            }\n            else if (name === 'CURRENT_DAY_NAME') {\n                return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n            }\n            else if (name === 'CURRENT_DAY_NAME_SHORT') {\n                return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n            }\n            else if (name === 'CURRENT_MONTH_NAME') {\n                return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n            }\n            else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n                return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n            }\n            return undefined;\n        }\n    }\n    TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n    TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n    TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n    TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n    exports.TimeBasedVariableResolver = TimeBasedVariableResolver;\n    class WorkspaceBasedVariableResolver {\n        constructor(_workspaceService) {\n            this._workspaceService = _workspaceService;\n            //\n        }\n        resolve(variable) {\n            if (variable.name !== 'WORKSPACE_NAME' || !this._workspaceService) {\n                return undefined;\n            }\n            const workspaceIdentifier = workspaces_1.toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n            if (!workspaceIdentifier) {\n                return undefined;\n            }\n            if (workspaces_1.isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n                return path_1.basename(workspaceIdentifier.path);\n            }\n            const filename = path_1.basename(workspaceIdentifier.configPath.path);\n            return filename.substr(0, filename.length - workspaces_1.WORKSPACE_EXTENSION.length - 1);\n        }\n    }\n    exports.WorkspaceBasedVariableResolver = WorkspaceBasedVariableResolver;\n});\n",null]}