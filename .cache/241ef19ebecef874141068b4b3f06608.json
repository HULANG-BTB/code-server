{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/task.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/task.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!../common/media/task.contribution\");\nvar nls = require(\"vs/nls\");\nvar semver = require(\"semver\");\nvar taskQuickOpen_1 = require(\"vs/workbench/contrib/tasks/browser/taskQuickOpen\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar Objects = require(\"vs/base/common/objects\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar Dom = require(\"vs/base/browser/dom\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar event_1 = require(\"vs/base/common/event\");\nvar Types = require(\"vs/base/common/types\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar processes_1 = require(\"vs/base/common/processes\");\nvar strings = require(\"vs/base/common/strings\");\nvar parsers_1 = require(\"vs/base/common/parsers\");\nvar UUID = require(\"vs/base/common/uuid\");\nvar Platform = require(\"vs/base/common/platform\");\nvar map_1 = require(\"vs/base/common/map\");\nvar octiconLabel_1 = require(\"vs/base/browser/ui/octiconLabel/octiconLabel\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar problemMatcher_1 = require(\"vs/workbench/contrib/tasks/common/problemMatcher\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar jsonContributionRegistry = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar statusbar_1 = require(\"vs/workbench/browser/parts/statusbar/statusbar\");\nvar statusbar_2 = require(\"vs/platform/statusbar/common/statusbar\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar constants_1 = require(\"vs/workbench/contrib/markers/browser/constants\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar configurationResolver_1 = require(\"vs/workbench/services/configurationResolver/common/configurationResolver\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar output_1 = require(\"vs/workbench/contrib/output/common/output\");\nvar actions_3 = require(\"vs/workbench/browser/actions\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/common/terminal\");\nvar taskSystem_1 = require(\"vs/workbench/contrib/tasks/common/taskSystem\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar taskService_1 = require(\"vs/workbench/contrib/tasks/common/taskService\");\nvar taskTemplates_1 = require(\"vs/workbench/contrib/tasks/common/taskTemplates\");\nvar TaskConfig = require(\"../common/taskConfiguration\");\nvar processTaskSystem_1 = require(\"vs/workbench/contrib/tasks/node/processTaskSystem\");\nvar terminalTaskSystem_1 = require(\"./terminalTaskSystem\");\nvar processRunnerDetector_1 = require(\"vs/workbench/contrib/tasks/node/processRunnerDetector\");\nvar quickOpen_1 = require(\"../browser/quickOpen\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar taskDefinitionRegistry_1 = require(\"vs/workbench/contrib/tasks/common/taskDefinitionRegistry\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar actions_4 = require(\"vs/workbench/common/actions\");\nvar runAutomaticTasks_1 = require(\"vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks\");\nvar tasksCategory = nls.localize('tasksCategory', \"Tasks\");\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(runAutomaticTasks_1.RunAutomaticTasks, lifecycle_2.LifecyclePhase.Eventually);\nvar actionRegistry = platform_1.Registry.as(actions_4.Extensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(runAutomaticTasks_1.AllowAutomaticTaskRunning, runAutomaticTasks_1.AllowAutomaticTaskRunning.ID, runAutomaticTasks_1.AllowAutomaticTaskRunning.LABEL), 'Tasks: Allow Automatic Tasks in Folder', tasksCategory);\nactionRegistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(runAutomaticTasks_1.DisallowAutomaticTaskRunning, runAutomaticTasks_1.DisallowAutomaticTaskRunning.ID, runAutomaticTasks_1.DisallowAutomaticTaskRunning.LABEL), 'Tasks: Disallow Automatic Tasks in Folder', tasksCategory);\nvar ConfigureTaskAction;\n(function (ConfigureTaskAction) {\n    ConfigureTaskAction.ID = 'workbench.action.tasks.configureTaskRunner';\n    ConfigureTaskAction.TEXT = nls.localize('ConfigureTaskRunnerAction.label', \"Configure Task\");\n})(ConfigureTaskAction || (ConfigureTaskAction = {}));\nvar BuildStatusBarItem = /** @class */ (function (_super) {\n    tslib_1.__extends(BuildStatusBarItem, _super);\n    function BuildStatusBarItem(panelService, markerService, taskService, layoutService, themeService, contextService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.panelService = panelService;\n        _this.markerService = markerService;\n        _this.taskService = taskService;\n        _this.layoutService = layoutService;\n        _this.contextService = contextService;\n        _this.activeCount = 0;\n        _this.icons = [];\n        _this.registerListeners();\n        return _this;\n    }\n    BuildStatusBarItem.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.contextService.onDidChangeWorkbenchState(function () { return _this.updateStyles(); }));\n    };\n    BuildStatusBarItem.prototype.updateStyles = function () {\n        var _this = this;\n        _super.prototype.updateStyles.call(this);\n        this.icons.forEach(function (icon) {\n            icon.style.backgroundColor = _this.getColor(_this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY ? theme_1.STATUS_BAR_FOREGROUND : theme_1.STATUS_BAR_NO_FOLDER_FOREGROUND);\n        });\n    };\n    BuildStatusBarItem.prototype.render = function (container) {\n        var _this = this;\n        var callOnDispose = [];\n        var element = document.createElement('div');\n        var label = document.createElement('a');\n        var errorIcon = document.createElement('div');\n        var warningIcon = document.createElement('div');\n        var infoIcon = document.createElement('div');\n        var error = document.createElement('div');\n        var warning = document.createElement('div');\n        var info = document.createElement('div');\n        var building = document.createElement('div');\n        var errorTitle = function (n) { return nls.localize('totalErrors', \"{0} Errors\", n); };\n        var warningTitle = function (n) { return nls.localize('totalWarnings', \"{0} Warnings\", n); };\n        var infoTitle = function (n) { return nls.localize('totalInfos', \"{0} Infos\", n); };\n        Dom.addClass(element, 'task-statusbar-item');\n        element.title = nls.localize('problems', \"Problems\");\n        Dom.addClass(label, 'task-statusbar-item-label');\n        element.appendChild(label);\n        Dom.addClass(errorIcon, 'task-statusbar-item-label-error');\n        Dom.addClass(errorIcon, 'mask-icon');\n        label.appendChild(errorIcon);\n        this.icons.push(errorIcon);\n        Dom.addClass(error, 'task-statusbar-item-label-counter');\n        error.innerHTML = '0';\n        error.title = errorIcon.title = errorTitle(0);\n        label.appendChild(error);\n        Dom.addClass(warningIcon, 'task-statusbar-item-label-warning');\n        Dom.addClass(warningIcon, 'mask-icon');\n        label.appendChild(warningIcon);\n        this.icons.push(warningIcon);\n        Dom.addClass(warning, 'task-statusbar-item-label-counter');\n        warning.innerHTML = '0';\n        warning.title = warningIcon.title = warningTitle(0);\n        label.appendChild(warning);\n        Dom.addClass(infoIcon, 'task-statusbar-item-label-info');\n        Dom.addClass(infoIcon, 'mask-icon');\n        label.appendChild(infoIcon);\n        this.icons.push(infoIcon);\n        Dom.hide(infoIcon);\n        Dom.addClass(info, 'task-statusbar-item-label-counter');\n        label.appendChild(info);\n        Dom.hide(info);\n        Dom.addClass(building, 'task-statusbar-item-building');\n        element.appendChild(building);\n        building.innerHTML = nls.localize('building', 'Building...');\n        Dom.hide(building);\n        callOnDispose.push(Dom.addDisposableListener(label, 'click', function (e) {\n            var panel = _this.panelService.getActivePanel();\n            if (panel && panel.getId() === constants_1.default.MARKERS_PANEL_ID) {\n                _this.layoutService.setPanelHidden(true);\n            }\n            else {\n                _this.panelService.openPanel(constants_1.default.MARKERS_PANEL_ID, true);\n            }\n        }));\n        var manyProblems = nls.localize('manyProblems', \"10K+\");\n        var packNumber = function (n) { return n > 9999 ? manyProblems : n > 999 ? n.toString().charAt(0) + 'K' : n.toString(); };\n        var updateLabel = function (stats) {\n            error.innerHTML = packNumber(stats.errors);\n            error.title = errorIcon.title = errorTitle(stats.errors);\n            warning.innerHTML = packNumber(stats.warnings);\n            warning.title = warningIcon.title = warningTitle(stats.warnings);\n            if (stats.infos > 0) {\n                info.innerHTML = packNumber(stats.infos);\n                info.title = infoIcon.title = infoTitle(stats.infos);\n                Dom.show(info);\n                Dom.show(infoIcon);\n            }\n            else {\n                Dom.hide(info);\n                Dom.hide(infoIcon);\n            }\n        };\n        this.markerService.onMarkerChanged(function (changedResources) {\n            updateLabel(_this.markerService.getStatistics());\n        });\n        callOnDispose.push(this.taskService.onDidStateChange(function (event) {\n            if (_this.ignoreEvent(event)) {\n                return;\n            }\n            switch (event.kind) {\n                case tasks_1.TaskEventKind.Active:\n                    _this.activeCount++;\n                    if (_this.activeCount === 1) {\n                        Dom.show(building);\n                    }\n                    break;\n                case tasks_1.TaskEventKind.Inactive:\n                    // Since the exiting of the sub process is communicated async we can't order inactive and terminate events.\n                    // So try to treat them accordingly.\n                    if (_this.activeCount > 0) {\n                        _this.activeCount--;\n                        if (_this.activeCount === 0) {\n                            Dom.hide(building);\n                        }\n                    }\n                    break;\n                case tasks_1.TaskEventKind.Terminated:\n                    if (_this.activeCount !== 0) {\n                        Dom.hide(building);\n                        _this.activeCount = 0;\n                    }\n                    break;\n            }\n        }));\n        container.appendChild(element);\n        this.updateStyles();\n        return lifecycle_1.toDisposable(function () {\n            callOnDispose = lifecycle_1.dispose(callOnDispose);\n        });\n    };\n    BuildStatusBarItem.prototype.ignoreEvent = function (event) {\n        if (!this.taskService.inTerminal()) {\n            return false;\n        }\n        if (event.group !== tasks_1.TaskGroup.Build) {\n            return true;\n        }\n        if (!event.__task) {\n            return false;\n        }\n        return event.__task.configurationProperties.problemMatchers === undefined || event.__task.configurationProperties.problemMatchers.length === 0;\n    };\n    BuildStatusBarItem = tslib_1.__decorate([\n        tslib_1.__param(0, panelService_1.IPanelService),\n        tslib_1.__param(1, markers_1.IMarkerService),\n        tslib_1.__param(2, taskService_1.ITaskService),\n        tslib_1.__param(3, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService)\n    ], BuildStatusBarItem);\n    return BuildStatusBarItem;\n}(theme_1.Themable));\nvar TaskStatusBarItem = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskStatusBarItem, _super);\n    function TaskStatusBarItem(taskService, themeService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.taskService = taskService;\n        return _this;\n    }\n    TaskStatusBarItem.prototype.updateStyles = function () {\n        _super.prototype.updateStyles.call(this);\n    };\n    TaskStatusBarItem.prototype.render = function (container) {\n        var _this = this;\n        var callOnDispose = [];\n        var element = document.createElement('a');\n        Dom.addClass(element, 'task-statusbar-runningItem');\n        var labelElement = document.createElement('div');\n        Dom.addClass(labelElement, 'task-statusbar-runningItem-label');\n        element.appendChild(labelElement);\n        var label = new octiconLabel_1.OcticonLabel(labelElement);\n        label.title = nls.localize('runningTasks', \"Show Running Tasks\");\n        Dom.hide(element);\n        callOnDispose.push(Dom.addDisposableListener(labelElement, 'click', function (e) {\n            _this.taskService.runShowTasks();\n        }));\n        var updateStatus = function () {\n            _this.taskService.getActiveTasks().then(function (tasks) {\n                if (tasks.length === 0) {\n                    Dom.hide(element);\n                }\n                else {\n                    label.text = \"$(tools) \" + tasks.length;\n                    Dom.show(element);\n                }\n            });\n        };\n        callOnDispose.push(this.taskService.onDidStateChange(function (event) {\n            if (event.kind === tasks_1.TaskEventKind.Changed) {\n                updateStatus();\n            }\n        }));\n        container.appendChild(element);\n        this.updateStyles();\n        updateStatus();\n        return {\n            dispose: function () {\n                callOnDispose = lifecycle_1.dispose(callOnDispose);\n            }\n        };\n    };\n    TaskStatusBarItem = tslib_1.__decorate([\n        tslib_1.__param(0, taskService_1.ITaskService),\n        tslib_1.__param(1, themeService_1.IThemeService)\n    ], TaskStatusBarItem);\n    return TaskStatusBarItem;\n}(theme_1.Themable));\nvar ProblemReporter = /** @class */ (function () {\n    function ProblemReporter(_outputChannel) {\n        this._outputChannel = _outputChannel;\n        this._validationStatus = new parsers_1.ValidationStatus();\n    }\n    ProblemReporter.prototype.info = function (message) {\n        this._validationStatus.state = parsers_1.ValidationState.Info;\n        this._outputChannel.append(message + '\\n');\n    };\n    ProblemReporter.prototype.warn = function (message) {\n        this._validationStatus.state = parsers_1.ValidationState.Warning;\n        this._outputChannel.append(message + '\\n');\n    };\n    ProblemReporter.prototype.error = function (message) {\n        this._validationStatus.state = parsers_1.ValidationState.Error;\n        this._outputChannel.append(message + '\\n');\n    };\n    ProblemReporter.prototype.fatal = function (message) {\n        this._validationStatus.state = parsers_1.ValidationState.Fatal;\n        this._outputChannel.append(message + '\\n');\n    };\n    Object.defineProperty(ProblemReporter.prototype, \"status\", {\n        get: function () {\n            return this._validationStatus;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ProblemReporter;\n}());\nvar TaskMap = /** @class */ (function () {\n    function TaskMap() {\n        this._store = new Map();\n    }\n    TaskMap.prototype.forEach = function (callback) {\n        this._store.forEach(callback);\n    };\n    TaskMap.prototype.get = function (workspaceFolder) {\n        var result = Types.isString(workspaceFolder) ? this._store.get(workspaceFolder) : this._store.get(workspaceFolder.uri.toString());\n        if (!result) {\n            result = [];\n            Types.isString(workspaceFolder) ? this._store.set(workspaceFolder, result) : this._store.set(workspaceFolder.uri.toString(), result);\n        }\n        return result;\n    };\n    TaskMap.prototype.add = function (workspaceFolder) {\n        var task = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            task[_i - 1] = arguments[_i];\n        }\n        var values = Types.isString(workspaceFolder) ? this._store.get(workspaceFolder) : this._store.get(workspaceFolder.uri.toString());\n        if (!values) {\n            values = [];\n            Types.isString(workspaceFolder) ? this._store.set(workspaceFolder, values) : this._store.set(workspaceFolder.uri.toString(), values);\n        }\n        values.push.apply(values, task);\n    };\n    TaskMap.prototype.all = function () {\n        var result = [];\n        this._store.forEach(function (values) { return result.push.apply(result, values); });\n        return result;\n    };\n    return TaskMap;\n}());\nvar TaskService = /** @class */ (function (_super) {\n    tslib_1.__extends(TaskService, _super);\n    function TaskService(configurationService, markerService, outputService, editorService, fileService, contextService, telemetryService, textFileService, lifecycleService, modelService, extensionService, quickInputService, configurationResolverService, terminalService, storageService, progressService, openerService, _windowService, dialogService, notificationService, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.markerService = markerService;\n        _this.outputService = outputService;\n        _this.editorService = editorService;\n        _this.fileService = fileService;\n        _this.contextService = contextService;\n        _this.telemetryService = telemetryService;\n        _this.textFileService = textFileService;\n        _this.modelService = modelService;\n        _this.extensionService = extensionService;\n        _this.quickInputService = quickInputService;\n        _this.configurationResolverService = configurationResolverService;\n        _this.terminalService = terminalService;\n        _this.storageService = storageService;\n        _this.progressService = progressService;\n        _this.openerService = openerService;\n        _this._windowService = _windowService;\n        _this.dialogService = dialogService;\n        _this.notificationService = notificationService;\n        _this._configHasErrors = false;\n        _this._workspaceTasksPromise = undefined;\n        _this._taskSystem = undefined;\n        _this._taskSystemListener = undefined;\n        _this._outputChannel = _this.outputService.getChannel(TaskService.OutputChannelId);\n        _this._providers = new Map();\n        _this._taskSystemInfos = new Map();\n        _this._register(_this.contextService.onDidChangeWorkspaceFolders(function () {\n            if (!_this._taskSystem && !_this._workspaceTasksPromise) {\n                return;\n            }\n            var folderSetup = _this.computeWorkspaceFolderSetup();\n            if (_this.executionEngine !== folderSetup[2]) {\n                if (_this._taskSystem && _this._taskSystem.getActiveTasks().length > 0) {\n                    _this.notificationService.prompt(severity_1.default.Info, nls.localize('TaskSystem.noHotSwap', 'Changing the task execution engine with an active task running requires to reload the Window'), [{\n                            label: nls.localize('reloadWindow', \"Reload Window\"),\n                            run: function () { return _this._windowService.reloadWindow(); }\n                        }], { sticky: true });\n                    return;\n                }\n                else {\n                    _this.disposeTaskSystemListeners();\n                    _this._taskSystem = undefined;\n                }\n            }\n            _this.updateSetup(folderSetup);\n            _this.updateWorkspaceTasks();\n        }));\n        _this._register(_this.configurationService.onDidChangeConfiguration(function () {\n            if (!_this._taskSystem && !_this._workspaceTasksPromise) {\n                return;\n            }\n            if (!_this._taskSystem || _this._taskSystem instanceof terminalTaskSystem_1.TerminalTaskSystem) {\n                _this._outputChannel.clear();\n            }\n            _this.updateWorkspaceTasks(tasks_1.TaskRunSource.ConfigurationChange);\n        }));\n        _this._taskRunningState = tasks_1.TASK_RUNNING_STATE.bindTo(contextKeyService);\n        _this._register(lifecycleService.onBeforeShutdown(function (event) { return event.veto(_this.beforeShutdown()); }));\n        _this._register(storageService.onWillSaveState(function () { return _this.saveState(); }));\n        _this._onDidStateChange = _this._register(new event_1.Emitter());\n        _this.registerCommands();\n        return _this;\n    }\n    Object.defineProperty(TaskService.prototype, \"onDidStateChange\", {\n        get: function () {\n            return this._onDidStateChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskService.prototype, \"supportsMultipleTaskExecutions\", {\n        get: function () {\n            return this.inTerminal();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TaskService.prototype.registerCommands = function () {\n        var _this = this;\n        commands_1.CommandsRegistry.registerCommand({\n            id: 'workbench.action.tasks.runTask',\n            handler: function (accessor, arg) {\n                _this.runTaskCommand(arg);\n            },\n            description: {\n                description: 'Run Task',\n                args: [{\n                        name: 'args',\n                        schema: {\n                            'type': 'string',\n                        }\n                    }]\n            }\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.reRunTask', function (accessor, arg) {\n            _this.reRunTaskCommand(arg);\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.restartTask', function (accessor, arg) {\n            _this.runRestartTaskCommand(arg);\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.terminate', function (accessor, arg) {\n            _this.runTerminateCommand(arg);\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.showLog', function () {\n            if (!_this.canRunCommand()) {\n                return;\n            }\n            _this.showOutput();\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.build', function () {\n            if (!_this.canRunCommand()) {\n                return;\n            }\n            _this.runBuildCommand();\n        });\n        keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({\n            id: 'workbench.action.tasks.build',\n            weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n            when: undefined,\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_B\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.test', function () {\n            if (!_this.canRunCommand()) {\n                return;\n            }\n            _this.runTestCommand();\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.configureTaskRunner', function () {\n            _this.runConfigureTasks();\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultBuildTask', function () {\n            _this.runConfigureDefaultBuildTask();\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultTestTask', function () {\n            _this.runConfigureDefaultTestTask();\n        });\n        commands_1.CommandsRegistry.registerCommand('workbench.action.tasks.showTasks', function () {\n            _this.runShowTasks();\n        });\n    };\n    Object.defineProperty(TaskService.prototype, \"workspaceFolders\", {\n        get: function () {\n            if (!this._workspaceFolders) {\n                this.updateSetup();\n            }\n            return this._workspaceFolders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskService.prototype, \"ignoredWorkspaceFolders\", {\n        get: function () {\n            if (!this._ignoredWorkspaceFolders) {\n                this.updateSetup();\n            }\n            return this._ignoredWorkspaceFolders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskService.prototype, \"executionEngine\", {\n        get: function () {\n            if (this._executionEngine === undefined) {\n                this.updateSetup();\n            }\n            return this._executionEngine;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskService.prototype, \"schemaVersion\", {\n        get: function () {\n            if (this._schemaVersion === undefined) {\n                this.updateSetup();\n            }\n            return this._schemaVersion;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TaskService.prototype, \"showIgnoreMessage\", {\n        get: function () {\n            if (this._showIgnoreMessage === undefined) {\n                this._showIgnoreMessage = !this.storageService.getBoolean(TaskService.IgnoreTask010DonotShowAgain_key, storage_1.StorageScope.WORKSPACE, false);\n            }\n            return this._showIgnoreMessage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TaskService.prototype.updateSetup = function (setup) {\n        if (!setup) {\n            setup = this.computeWorkspaceFolderSetup();\n        }\n        this._workspaceFolders = setup[0];\n        if (this._ignoredWorkspaceFolders) {\n            if (this._ignoredWorkspaceFolders.length !== setup[1].length) {\n                this._showIgnoreMessage = undefined;\n            }\n            else {\n                var set_1 = new Set();\n                this._ignoredWorkspaceFolders.forEach(function (folder) { return set_1.add(folder.uri.toString()); });\n                for (var _i = 0, _a = setup[1]; _i < _a.length; _i++) {\n                    var folder = _a[_i];\n                    if (!set_1.has(folder.uri.toString())) {\n                        this._showIgnoreMessage = undefined;\n                        break;\n                    }\n                }\n            }\n        }\n        this._ignoredWorkspaceFolders = setup[1];\n        this._executionEngine = setup[2];\n        this._schemaVersion = setup[3];\n    };\n    TaskService.prototype.showOutput = function (runSource) {\n        var _this = this;\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.User; }\n        if (runSource === tasks_1.TaskRunSource.User) {\n            this.notificationService.prompt(severity_1.default.Warning, nls.localize('taskServiceOutputPrompt', 'There are task errors. See the output for details.'), [{\n                    label: nls.localize('showOutput', \"Show output\"),\n                    run: function () {\n                        _this.outputService.showChannel(_this._outputChannel.id, true);\n                    }\n                }]);\n        }\n    };\n    TaskService.prototype.disposeTaskSystemListeners = function () {\n        if (this._taskSystemListener) {\n            this._taskSystemListener.dispose();\n        }\n    };\n    TaskService.prototype.registerTaskProvider = function (provider) {\n        var _this = this;\n        if (!provider) {\n            return {\n                dispose: function () { }\n            };\n        }\n        var handle = TaskService.nextHandle++;\n        this._providers.set(handle, provider);\n        return {\n            dispose: function () {\n                _this._providers.delete(handle);\n            }\n        };\n    };\n    TaskService.prototype.registerTaskSystem = function (key, info) {\n        this._taskSystemInfos.set(key, info);\n    };\n    TaskService.prototype.extensionCallbackTaskComplete = function (task, result) {\n        if (!this._taskSystem) {\n            return Promise.resolve();\n        }\n        return this._taskSystem.customExecutionComplete(task, result);\n    };\n    TaskService.prototype.getTask = function (folder, identifier, compareId) {\n        if (compareId === void 0) { compareId = false; }\n        var name = Types.isString(folder) ? folder : folder.name;\n        if (this.ignoredWorkspaceFolders.some(function (ignored) { return ignored.name === name; })) {\n            return Promise.reject(new Error(nls.localize('TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name)));\n        }\n        var key = !Types.isString(identifier)\n            ? tasks_1.TaskDefinition.createTaskIdentifier(identifier, console)\n            : identifier;\n        if (key === undefined) {\n            return Promise.resolve(undefined);\n        }\n        return this.getGroupedTasks().then(function (map) {\n            var values = map.get(folder);\n            if (!values) {\n                return undefined;\n            }\n            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n                var task = values_1[_i];\n                if (task.matches(key, compareId)) {\n                    return task;\n                }\n            }\n            return undefined;\n        });\n    };\n    TaskService.prototype.tasks = function (filter) {\n        var range = filter && filter.version ? filter.version : undefined;\n        var engine = this.executionEngine;\n        if (range && ((semver.satisfies('0.1.0', range) && engine === tasks_1.ExecutionEngine.Terminal) || (semver.satisfies('2.0.0', range) && engine === tasks_1.ExecutionEngine.Process))) {\n            return Promise.resolve([]);\n        }\n        return this.getGroupedTasks().then(function (map) {\n            if (!filter || !filter.type) {\n                return map.all();\n            }\n            var result = [];\n            map.forEach(function (tasks) {\n                for (var _i = 0, tasks_2 = tasks; _i < tasks_2.length; _i++) {\n                    var task = tasks_2[_i];\n                    if (tasks_1.ContributedTask.is(task) && task.defines.type === filter.type) {\n                        result.push(task);\n                    }\n                    else if (tasks_1.CustomTask.is(task)) {\n                        if (task.type === filter.type) {\n                            result.push(task);\n                        }\n                        else {\n                            var customizes = task.customizes();\n                            if (customizes && customizes.type === filter.type) {\n                                result.push(task);\n                            }\n                        }\n                    }\n                }\n            });\n            return result;\n        });\n    };\n    TaskService.prototype.createSorter = function () {\n        return new tasks_1.TaskSorter(this.contextService.getWorkspace() ? this.contextService.getWorkspace().folders : []);\n    };\n    TaskService.prototype.isActive = function () {\n        if (!this._taskSystem) {\n            return Promise.resolve(false);\n        }\n        return this._taskSystem.isActive();\n    };\n    TaskService.prototype.getActiveTasks = function () {\n        if (!this._taskSystem) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(this._taskSystem.getActiveTasks());\n    };\n    TaskService.prototype.getRecentlyUsedTasks = function () {\n        if (this._recentlyUsedTasks) {\n            return this._recentlyUsedTasks;\n        }\n        this._recentlyUsedTasks = new map_1.LinkedMap();\n        var storageValue = this.storageService.get(TaskService.RecentlyUsedTasks_Key, storage_1.StorageScope.WORKSPACE);\n        if (storageValue) {\n            try {\n                var values = JSON.parse(storageValue);\n                if (Array.isArray(values)) {\n                    for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {\n                        var value = values_2[_i];\n                        this._recentlyUsedTasks.set(value, value);\n                    }\n                }\n            }\n            catch (error) {\n                // Ignore. We use the empty result\n            }\n        }\n        return this._recentlyUsedTasks;\n    };\n    TaskService.prototype.saveState = function () {\n        if (!this._taskSystem || !this._recentlyUsedTasks) {\n            return;\n        }\n        var values = this._recentlyUsedTasks.values();\n        if (values.length > 30) {\n            values = values.slice(0, 30);\n        }\n        this.storageService.store(TaskService.RecentlyUsedTasks_Key, JSON.stringify(values), storage_1.StorageScope.WORKSPACE);\n    };\n    TaskService.prototype.openDocumentation = function () {\n        this.openerService.open(uri_1.URI.parse('https://go.microsoft.com/fwlink/?LinkId=733558'));\n    };\n    TaskService.prototype.build = function () {\n        var _this = this;\n        return this.getGroupedTasks().then(function (tasks) {\n            var runnable = _this.createRunnableTask(tasks, tasks_1.TaskGroup.Build);\n            if (!runnable || !runnable.task) {\n                if (_this.schemaVersion === tasks_1.JsonSchemaVersion.V0_1_0) {\n                    throw new taskSystem_1.TaskError(severity_1.default.Info, nls.localize('TaskService.noBuildTask1', 'No build task defined. Mark a task with \\'isBuildCommand\\' in the tasks.json file.'), taskSystem_1.TaskErrors.NoBuildTask);\n                }\n                else {\n                    throw new taskSystem_1.TaskError(severity_1.default.Info, nls.localize('TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \\'build\\' group in the tasks.json file.'), taskSystem_1.TaskErrors.NoBuildTask);\n                }\n            }\n            return _this.executeTask(runnable.task, runnable.resolver);\n        }).then(function (value) { return value; }, function (error) {\n            _this.handleError(error);\n            return Promise.reject(error);\n        });\n    };\n    TaskService.prototype.runTest = function () {\n        var _this = this;\n        return this.getGroupedTasks().then(function (tasks) {\n            var runnable = _this.createRunnableTask(tasks, tasks_1.TaskGroup.Test);\n            if (!runnable || !runnable.task) {\n                if (_this.schemaVersion === tasks_1.JsonSchemaVersion.V0_1_0) {\n                    throw new taskSystem_1.TaskError(severity_1.default.Info, nls.localize('TaskService.noTestTask1', 'No test task defined. Mark a task with \\'isTestCommand\\' in the tasks.json file.'), taskSystem_1.TaskErrors.NoTestTask);\n                }\n                else {\n                    throw new taskSystem_1.TaskError(severity_1.default.Info, nls.localize('TaskService.noTestTask2', 'No test task defined. Mark a task with as a \\'test\\' group in the tasks.json file.'), taskSystem_1.TaskErrors.NoTestTask);\n                }\n            }\n            return _this.executeTask(runnable.task, runnable.resolver);\n        }).then(function (value) { return value; }, function (error) {\n            _this.handleError(error);\n            return Promise.reject(error);\n        });\n    };\n    TaskService.prototype.run = function (task, options, runSource) {\n        var _this = this;\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.System; }\n        if (!task) {\n            throw new taskSystem_1.TaskError(severity_1.default.Info, nls.localize('TaskServer.noTask', 'Task to execute is undefined'), taskSystem_1.TaskErrors.TaskNotFound);\n        }\n        return this.getGroupedTasks().then(function (grouped) {\n            var resolver = _this.createResolver(grouped);\n            if (options && options.attachProblemMatcher && _this.shouldAttachProblemMatcher(task) && !tasks_1.InMemoryTask.is(task)) {\n                return _this.attachProblemMatcher(task).then(function (toExecute) {\n                    if (toExecute) {\n                        return _this.executeTask(toExecute, resolver);\n                    }\n                    else {\n                        return Promise.resolve(undefined);\n                    }\n                });\n            }\n            return _this.executeTask(task, resolver);\n        }).then(function (value) {\n            if (runSource === tasks_1.TaskRunSource.User) {\n                _this.getWorkspaceTasks().then(function (workspaceTasks) {\n                    runAutomaticTasks_1.RunAutomaticTasks.promptForPermission(_this, _this.storageService, _this.notificationService, workspaceTasks);\n                });\n            }\n            return value;\n        }, function (error) {\n            _this.handleError(error);\n            return Promise.reject(error);\n        });\n    };\n    TaskService.prototype.shouldAttachProblemMatcher = function (task) {\n        if (!this.canCustomize(task)) {\n            return false;\n        }\n        if (task.configurationProperties.group !== undefined && task.configurationProperties.group !== tasks_1.TaskGroup.Build) {\n            return false;\n        }\n        if (task.configurationProperties.problemMatchers !== undefined && task.configurationProperties.problemMatchers.length > 0) {\n            return false;\n        }\n        if (tasks_1.ContributedTask.is(task)) {\n            return !task.hasDefinedMatchers && !!task.configurationProperties.problemMatchers && (task.configurationProperties.problemMatchers.length === 0);\n        }\n        if (tasks_1.CustomTask.is(task)) {\n            var configProperties = task._source.config.element;\n            return configProperties.problemMatcher === undefined && !task.hasDefinedMatchers;\n        }\n        return false;\n    };\n    TaskService.prototype.attachProblemMatcher = function (task) {\n        var _this = this;\n        var entries = [];\n        for (var _i = 0, _a = problemMatcher_1.ProblemMatcherRegistry.keys(); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var matcher = problemMatcher_1.ProblemMatcherRegistry.get(key);\n            if (matcher.deprecated) {\n                continue;\n            }\n            if (matcher.name === matcher.label) {\n                entries.push({ label: matcher.name, matcher: matcher });\n            }\n            else {\n                entries.push({\n                    label: matcher.label,\n                    description: \"$\" + matcher.name,\n                    matcher: matcher\n                });\n            }\n        }\n        if (entries.length > 0) {\n            entries = entries.sort(function (a, b) {\n                if (a.label && b.label) {\n                    return a.label.localeCompare(b.label);\n                }\n                else {\n                    return 0;\n                }\n            });\n            entries.unshift({ type: 'separator', label: nls.localize('TaskService.associate', 'associate') });\n            entries.unshift({ label: nls.localize('TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'), matcher: undefined }, { label: nls.localize('TaskService.attachProblemMatcher.never', 'Never scan the task output'), matcher: undefined, never: true }, { label: nls.localize('TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'), matcher: undefined, learnMore: true });\n            return this.quickInputService.pick(entries, {\n                placeHolder: nls.localize('selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output'),\n            }).then(function (selected) {\n                if (selected) {\n                    if (selected.learnMore) {\n                        _this.openDocumentation();\n                        return undefined;\n                    }\n                    else if (selected.never) {\n                        _this.customize(task, { problemMatcher: [] }, true);\n                        return task;\n                    }\n                    else if (selected.matcher) {\n                        var newTask = task.clone();\n                        var matcherReference = \"$\" + selected.matcher.name;\n                        var properties = { problemMatcher: [matcherReference] };\n                        newTask.configurationProperties.problemMatchers = [matcherReference];\n                        var matcher = problemMatcher_1.ProblemMatcherRegistry.get(selected.matcher.name);\n                        if (matcher && matcher.watching !== undefined) {\n                            properties.isBackground = true;\n                            newTask.configurationProperties.isBackground = true;\n                        }\n                        _this.customize(task, properties, true);\n                        return newTask;\n                    }\n                    else {\n                        return task;\n                    }\n                }\n                else {\n                    return undefined;\n                }\n            });\n        }\n        return Promise.resolve(task);\n    };\n    TaskService.prototype.getTasksForGroup = function (group) {\n        return this.getGroupedTasks().then(function (groups) {\n            var result = [];\n            groups.forEach(function (tasks) {\n                for (var _i = 0, tasks_3 = tasks; _i < tasks_3.length; _i++) {\n                    var task = tasks_3[_i];\n                    if (task.configurationProperties.group === group) {\n                        result.push(task);\n                    }\n                }\n            });\n            return result;\n        });\n    };\n    TaskService.prototype.needsFolderQualification = function () {\n        return this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE;\n    };\n    TaskService.prototype.canCustomize = function (task) {\n        if (this.schemaVersion !== tasks_1.JsonSchemaVersion.V2_0_0) {\n            return false;\n        }\n        if (tasks_1.CustomTask.is(task)) {\n            return true;\n        }\n        if (tasks_1.ContributedTask.is(task)) {\n            return !!task.getWorkspaceFolder();\n        }\n        return false;\n    };\n    TaskService.prototype.customize = function (task, properties, openConfig) {\n        var _this = this;\n        var workspaceFolder = task.getWorkspaceFolder();\n        if (!workspaceFolder) {\n            return Promise.resolve(undefined);\n        }\n        var configuration = this.getConfiguration(workspaceFolder);\n        if (configuration.hasParseErrors) {\n            this.notificationService.warn(nls.localize('customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.'));\n            return Promise.resolve(undefined);\n        }\n        var fileConfig = configuration.config;\n        var index;\n        var toCustomize;\n        var taskConfig = tasks_1.CustomTask.is(task) ? task._source.config : undefined;\n        if (taskConfig && taskConfig.element) {\n            index = taskConfig.index;\n            toCustomize = taskConfig.element;\n        }\n        else if (tasks_1.ContributedTask.is(task)) {\n            toCustomize = {};\n            var identifier_1 = Objects.assign(Object.create(null), task.defines);\n            delete identifier_1['_key'];\n            Object.keys(identifier_1).forEach(function (key) { return toCustomize[key] = identifier_1[key]; });\n            if (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length > 0 && Types.isStringArray(task.configurationProperties.problemMatchers)) {\n                toCustomize.problemMatcher = task.configurationProperties.problemMatchers;\n            }\n        }\n        if (!toCustomize) {\n            return Promise.resolve(undefined);\n        }\n        if (properties) {\n            for (var _i = 0, _a = Object.getOwnPropertyNames(properties); _i < _a.length; _i++) {\n                var property = _a[_i];\n                var value = properties[property];\n                if (value !== undefined && value !== null) {\n                    toCustomize[property] = value;\n                }\n            }\n        }\n        else {\n            if (toCustomize.problemMatcher === undefined && task.configurationProperties.problemMatchers === undefined || (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length === 0)) {\n                toCustomize.problemMatcher = [];\n            }\n        }\n        var promise;\n        if (!fileConfig) {\n            var value = {\n                version: '2.0.0',\n                tasks: [toCustomize]\n            };\n            var content = [\n                '{',\n                nls.localize('tasksJsonComment', '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format'),\n            ].join('\\n') + JSON.stringify(value, null, '\\t').substr(1);\n            var editorConfig_1 = this.configurationService.getValue();\n            if (editorConfig_1.editor.insertSpaces) {\n                content = content.replace(/(\\n)(\\t+)/g, function (_, s1, s2) { return s1 + strings.repeat(' ', s2.length * editorConfig_1.editor.tabSize); });\n            }\n            promise = this.fileService.createFile(workspaceFolder.toResource('.vscode/tasks.json'), content).then(function () { });\n        }\n        else {\n            // We have a global task configuration\n            if ((index === -1) && properties) {\n                if (properties.problemMatcher !== undefined) {\n                    fileConfig.problemMatcher = properties.problemMatcher;\n                    promise = this.writeConfiguration(workspaceFolder, 'tasks.problemMatchers', fileConfig.problemMatcher);\n                }\n                else if (properties.group !== undefined) {\n                    fileConfig.group = properties.group;\n                    promise = this.writeConfiguration(workspaceFolder, 'tasks.group', fileConfig.group);\n                }\n            }\n            else {\n                if (!Array.isArray(fileConfig.tasks)) {\n                    fileConfig.tasks = [];\n                }\n                if (index === undefined) {\n                    fileConfig.tasks.push(toCustomize);\n                }\n                else {\n                    fileConfig.tasks[index] = toCustomize;\n                }\n                promise = this.writeConfiguration(workspaceFolder, 'tasks.tasks', fileConfig.tasks);\n            }\n        }\n        if (!promise) {\n            return Promise.resolve(undefined);\n        }\n        return promise.then(function () {\n            var event = {\n                properties: properties ? Object.getOwnPropertyNames(properties) : []\n            };\n            /* __GDPR__\n                \"taskService.customize\" : {\n                    \"properties\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                }\n            */\n            _this.telemetryService.publicLog(TaskService.CustomizationTelemetryEventName, event);\n            if (openConfig) {\n                var resource = workspaceFolder.toResource('.vscode/tasks.json');\n                _this.editorService.openEditor({\n                    resource: resource,\n                    options: {\n                        pinned: false,\n                        forceReload: true // because content might have changed\n                    }\n                });\n            }\n        });\n    };\n    TaskService.prototype.writeConfiguration = function (workspaceFolder, key, value) {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n            return this.configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, configuration_1.ConfigurationTarget.WORKSPACE);\n        }\n        else if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            return this.configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, configuration_1.ConfigurationTarget.WORKSPACE_FOLDER);\n        }\n        else {\n            return undefined;\n        }\n    };\n    TaskService.prototype.openConfig = function (task) {\n        var resource;\n        if (task) {\n            resource = task.getWorkspaceFolder().toResource(task._source.config.file);\n        }\n        else {\n            resource = (this._workspaceFolders && (this._workspaceFolders.length > 0)) ? this._workspaceFolders[0].toResource('.vscode/tasks.json') : undefined;\n        }\n        return this.editorService.openEditor({\n            resource: resource,\n            options: {\n                pinned: false\n            }\n        }).then(function () { return undefined; });\n    };\n    TaskService.prototype.createRunnableTask = function (tasks, group) {\n        var resolverData = new Map();\n        var workspaceTasks = [];\n        var extensionTasks = [];\n        tasks.forEach(function (tasks, folder) {\n            var data = resolverData.get(folder);\n            if (!data) {\n                data = {\n                    id: new Map(),\n                    label: new Map(),\n                    identifier: new Map()\n                };\n                resolverData.set(folder, data);\n            }\n            for (var _i = 0, tasks_4 = tasks; _i < tasks_4.length; _i++) {\n                var task = tasks_4[_i];\n                data.id.set(task._id, task);\n                data.label.set(task._label, task);\n                if (task.configurationProperties.identifier) {\n                    data.identifier.set(task.configurationProperties.identifier, task);\n                }\n                if (group && task.configurationProperties.group === group) {\n                    if (task._source.kind === tasks_1.TaskSourceKind.Workspace) {\n                        workspaceTasks.push(task);\n                    }\n                    else {\n                        extensionTasks.push(task);\n                    }\n                }\n            }\n        });\n        var resolver = {\n            resolve: function (workspaceFolder, alias) {\n                var data = resolverData.get(workspaceFolder.uri.toString());\n                if (!data) {\n                    return undefined;\n                }\n                return data.id.get(alias) || data.label.get(alias) || data.identifier.get(alias);\n            }\n        };\n        if (workspaceTasks.length > 0) {\n            if (workspaceTasks.length > 1) {\n                this._outputChannel.append(nls.localize('moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.\\n'));\n            }\n            return { task: workspaceTasks[0], resolver: resolver };\n        }\n        if (extensionTasks.length === 0) {\n            return undefined;\n        }\n        // We can only have extension tasks if we are in version 2.0.0. Then we can even run\n        // multiple build tasks.\n        if (extensionTasks.length === 1) {\n            return { task: extensionTasks[0], resolver: resolver };\n        }\n        else {\n            var id = UUID.generateUuid();\n            var task = new tasks_1.InMemoryTask(id, { kind: tasks_1.TaskSourceKind.InMemory, label: 'inMemory' }, id, 'inMemory', { reevaluateOnRerun: true }, {\n                identifier: id,\n                dependsOn: extensionTasks.map(function (extensionTask) { return { workspaceFolder: extensionTask.getWorkspaceFolder(), task: extensionTask._id }; }),\n                name: id,\n            });\n            return { task: task, resolver: resolver };\n        }\n    };\n    TaskService.prototype.createResolver = function (grouped) {\n        var resolverData = new Map();\n        grouped.forEach(function (tasks, folder) {\n            var data = resolverData.get(folder);\n            if (!data) {\n                data = { label: new Map(), identifier: new Map(), taskIdentifier: new Map() };\n                resolverData.set(folder, data);\n            }\n            for (var _i = 0, tasks_5 = tasks; _i < tasks_5.length; _i++) {\n                var task = tasks_5[_i];\n                data.label.set(task._label, task);\n                if (task.configurationProperties.identifier) {\n                    data.identifier.set(task.configurationProperties.identifier, task);\n                }\n                var keyedIdentifier = task.getDefinition(true);\n                if (keyedIdentifier !== undefined) {\n                    data.taskIdentifier.set(keyedIdentifier._key, task);\n                }\n            }\n        });\n        return {\n            resolve: function (workspaceFolder, identifier) {\n                var data = resolverData.get(workspaceFolder.uri.toString());\n                if (!data || !identifier) {\n                    return undefined;\n                }\n                if (Types.isString(identifier)) {\n                    return data.label.get(identifier) || data.identifier.get(identifier);\n                }\n                else {\n                    var key = tasks_1.TaskDefinition.createTaskIdentifier(identifier, console);\n                    return key !== undefined ? data.taskIdentifier.get(key._key) : undefined;\n                }\n            }\n        };\n    };\n    TaskService.prototype.executeTask = function (task, resolver) {\n        var _this = this;\n        return problemMatcher_1.ProblemMatcherRegistry.onReady().then(function () {\n            return _this.textFileService.saveAll().then(function (value) {\n                var executeResult = _this.getTaskSystem().run(task, resolver);\n                return _this.handleExecuteResult(executeResult);\n            });\n        });\n    };\n    TaskService.prototype.handleExecuteResult = function (executeResult) {\n        var _this = this;\n        if (executeResult.task.taskLoadMessages && executeResult.task.taskLoadMessages.length > 0) {\n            executeResult.task.taskLoadMessages.forEach(function (loadMessage) {\n                _this._outputChannel.append(loadMessage + '\\n');\n            });\n            this.showOutput();\n        }\n        var key = executeResult.task.getRecentlyUsedKey();\n        if (key) {\n            this.getRecentlyUsedTasks().set(key, key, map_1.Touch.AsOld);\n        }\n        if (executeResult.kind === taskSystem_1.TaskExecuteKind.Active) {\n            var active = executeResult.active;\n            if (active && active.same) {\n                var message = void 0;\n                if (active.background) {\n                    message = nls.localize('TaskSystem.activeSame.background', 'The task \\'{0}\\' is already active and in background mode.', executeResult.task.getQualifiedLabel());\n                }\n                else {\n                    message = nls.localize('TaskSystem.activeSame.noBackground', 'The task \\'{0}\\' is already active.', executeResult.task.getQualifiedLabel());\n                }\n                this.notificationService.prompt(severity_1.default.Info, message, [{\n                        label: nls.localize('terminateTask', \"Terminate Task\"),\n                        run: function () { return _this.terminate(executeResult.task); }\n                    },\n                    {\n                        label: nls.localize('restartTask', \"Restart Task\"),\n                        run: function () { return _this.restart(executeResult.task); }\n                    }], { sticky: true });\n            }\n            else {\n                throw new taskSystem_1.TaskError(severity_1.default.Warning, nls.localize('TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), taskSystem_1.TaskErrors.RunningTask);\n            }\n        }\n        return executeResult.promise;\n    };\n    TaskService.prototype.restart = function (task) {\n        var _this = this;\n        if (!this._taskSystem) {\n            return;\n        }\n        this._taskSystem.terminate(task).then(function (response) {\n            if (response.success) {\n                _this.run(task).then(undefined, function (reason) {\n                    // eat the error, it has already been surfaced to the user and we don't care about it here\n                });\n            }\n            else {\n                _this.notificationService.warn(nls.localize('TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name));\n            }\n            return response;\n        });\n    };\n    TaskService.prototype.terminate = function (task) {\n        if (!this._taskSystem) {\n            return Promise.resolve({ success: true, task: undefined });\n        }\n        return this._taskSystem.terminate(task);\n    };\n    TaskService.prototype.terminateAll = function () {\n        if (!this._taskSystem) {\n            return Promise.resolve([]);\n        }\n        return this._taskSystem.terminateAll();\n    };\n    TaskService.prototype.getTaskSystem = function () {\n        var _this = this;\n        if (this._taskSystem) {\n            return this._taskSystem;\n        }\n        if (this.executionEngine === tasks_1.ExecutionEngine.Terminal) {\n            this._taskSystem = new terminalTaskSystem_1.TerminalTaskSystem(this.terminalService, this.outputService, this.markerService, this.modelService, this.configurationResolverService, this.telemetryService, this.contextService, this._windowService, TaskService.OutputChannelId, function (workspaceFolder) {\n                if (!workspaceFolder) {\n                    return undefined;\n                }\n                return _this._taskSystemInfos.get(workspaceFolder.uri.scheme);\n            });\n        }\n        else {\n            var system = new processTaskSystem_1.ProcessTaskSystem(this.markerService, this.modelService, this.telemetryService, this.outputService, this.configurationResolverService, TaskService.OutputChannelId);\n            system.hasErrors(this._configHasErrors);\n            this._taskSystem = system;\n        }\n        this._taskSystemListener = this._taskSystem.onDidStateChange(function (event) {\n            if (_this._taskSystem) {\n                _this._taskRunningState.set(_this._taskSystem.isActiveSync());\n            }\n            _this._onDidStateChange.fire(event);\n        });\n        return this._taskSystem;\n    };\n    TaskService.prototype.getGroupedTasks = function () {\n        var _this = this;\n        return Promise.all([this.extensionService.activateByEvent('onCommand:workbench.action.tasks.runTask'), taskDefinitionRegistry_1.TaskDefinitionRegistry.onReady()]).then(function () {\n            var validTypes = Object.create(null);\n            taskDefinitionRegistry_1.TaskDefinitionRegistry.all().forEach(function (definition) { return validTypes[definition.taskType] = true; });\n            validTypes['shell'] = true;\n            validTypes['process'] = true;\n            return new Promise(function (resolve) {\n                var result = [];\n                var counter = 0;\n                var done = function (value) {\n                    if (value) {\n                        result.push(value);\n                    }\n                    if (--counter === 0) {\n                        resolve(result);\n                    }\n                };\n                var error = function (error) {\n                    try {\n                        if (error && Types.isString(error.message)) {\n                            _this._outputChannel.append('Error: ');\n                            _this._outputChannel.append(error.message);\n                            _this._outputChannel.append('\\n');\n                            _this.showOutput();\n                        }\n                        else {\n                            _this._outputChannel.append('Unknown error received while collecting tasks from providers.\\n');\n                            _this.showOutput();\n                        }\n                    }\n                    finally {\n                        if (--counter === 0) {\n                            resolve(result);\n                        }\n                    }\n                };\n                if (_this.schemaVersion === tasks_1.JsonSchemaVersion.V2_0_0 && _this._providers.size > 0) {\n                    _this._providers.forEach(function (provider) {\n                        counter++;\n                        provider.provideTasks(validTypes).then(done, error);\n                    });\n                }\n                else {\n                    resolve(result);\n                }\n            });\n        }).then(function (contributedTaskSets) {\n            var result = new TaskMap();\n            var contributedTasks = new TaskMap();\n            for (var _i = 0, contributedTaskSets_1 = contributedTaskSets; _i < contributedTaskSets_1.length; _i++) {\n                var set = contributedTaskSets_1[_i];\n                for (var _a = 0, _b = set.tasks; _a < _b.length; _a++) {\n                    var task = _b[_a];\n                    var workspaceFolder = task.getWorkspaceFolder();\n                    if (workspaceFolder) {\n                        contributedTasks.add(workspaceFolder, task);\n                    }\n                }\n            }\n            return _this.getWorkspaceTasks().then(function (customTasks) {\n                customTasks.forEach(function (folderTasks, key) {\n                    var contributed = contributedTasks.get(key);\n                    if (!folderTasks.set) {\n                        if (contributed) {\n                            result.add.apply(result, [key].concat(contributed));\n                        }\n                        return;\n                    }\n                    if (!contributed) {\n                        result.add.apply(result, [key].concat(folderTasks.set.tasks));\n                    }\n                    else {\n                        var configurations_1 = folderTasks.configurations;\n                        var legacyTaskConfigurations = folderTasks.set ? _this.getLegacyTaskConfigurations(folderTasks.set) : undefined;\n                        var customTasksToDelete = [];\n                        if (configurations_1 || legacyTaskConfigurations) {\n                            var unUsedConfigurations_1 = new Set();\n                            if (configurations_1) {\n                                Object.keys(configurations_1.byIdentifier).forEach(function (key) { return unUsedConfigurations_1.add(key); });\n                            }\n                            for (var _i = 0, contributed_1 = contributed; _i < contributed_1.length; _i++) {\n                                var task = contributed_1[_i];\n                                if (!tasks_1.ContributedTask.is(task)) {\n                                    continue;\n                                }\n                                if (configurations_1) {\n                                    var configuringTask = configurations_1.byIdentifier[task.defines._key];\n                                    if (configuringTask) {\n                                        unUsedConfigurations_1.delete(task.defines._key);\n                                        result.add(key, TaskConfig.createCustomTask(task, configuringTask));\n                                    }\n                                    else {\n                                        result.add(key, task);\n                                    }\n                                }\n                                else if (legacyTaskConfigurations) {\n                                    var configuringTask = legacyTaskConfigurations[task.defines._key];\n                                    if (configuringTask) {\n                                        result.add(key, TaskConfig.createCustomTask(task, configuringTask));\n                                        customTasksToDelete.push(configuringTask);\n                                    }\n                                    else {\n                                        result.add(key, task);\n                                    }\n                                }\n                                else {\n                                    result.add(key, task);\n                                }\n                            }\n                            if (customTasksToDelete.length > 0) {\n                                var toDelete = customTasksToDelete.reduce(function (map, task) {\n                                    map[task._id] = true;\n                                    return map;\n                                }, Object.create(null));\n                                for (var _a = 0, _b = folderTasks.set.tasks; _a < _b.length; _a++) {\n                                    var task = _b[_a];\n                                    if (toDelete[task._id]) {\n                                        continue;\n                                    }\n                                    result.add(key, task);\n                                }\n                            }\n                            else {\n                                result.add.apply(result, [key].concat(folderTasks.set.tasks));\n                            }\n                            unUsedConfigurations_1.forEach(function (value) {\n                                var configuringTask = configurations_1.byIdentifier[value];\n                                _this._outputChannel.append(nls.localize('TaskService.noConfiguration', 'Error: The {0} task detection didn\\'t contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.\\n', configuringTask.configures.type, JSON.stringify(configuringTask._source.config.element, undefined, 4)));\n                                _this.showOutput();\n                            });\n                        }\n                        else {\n                            result.add.apply(result, [key].concat(folderTasks.set.tasks));\n                            result.add.apply(result, [key].concat(contributed));\n                        }\n                    }\n                });\n                return result;\n            }, function () {\n                // If we can't read the tasks.json file provide at least the contributed tasks\n                var result = new TaskMap();\n                for (var _i = 0, contributedTaskSets_2 = contributedTaskSets; _i < contributedTaskSets_2.length; _i++) {\n                    var set = contributedTaskSets_2[_i];\n                    for (var _a = 0, _b = set.tasks; _a < _b.length; _a++) {\n                        var task = _b[_a];\n                        var folder = task.getWorkspaceFolder();\n                        if (folder) {\n                            result.add(folder, task);\n                        }\n                    }\n                }\n                return result;\n            });\n        });\n    };\n    TaskService.prototype.getLegacyTaskConfigurations = function (workspaceTasks) {\n        var result;\n        function getResult() {\n            if (result) {\n                return result;\n            }\n            result = Object.create(null);\n            return result;\n        }\n        for (var _i = 0, _a = workspaceTasks.tasks; _i < _a.length; _i++) {\n            var task = _a[_i];\n            if (tasks_1.CustomTask.is(task)) {\n                var commandName = task.command && task.command.name;\n                // This is for backwards compatibility with the 0.1.0 task annotation code\n                // if we had a gulp, jake or grunt command a task specification was a annotation\n                if (commandName === 'gulp' || commandName === 'grunt' || commandName === 'jake') {\n                    var identifier = tasks_1.KeyedTaskIdentifier.create({\n                        type: commandName,\n                        task: task.configurationProperties.name\n                    });\n                    getResult()[identifier._key] = task;\n                }\n            }\n        }\n        return result;\n    };\n    TaskService.prototype.getWorkspaceTasks = function (runSource) {\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.User; }\n        if (this._workspaceTasksPromise) {\n            return this._workspaceTasksPromise;\n        }\n        this.updateWorkspaceTasks(runSource);\n        return this._workspaceTasksPromise;\n    };\n    TaskService.prototype.updateWorkspaceTasks = function (runSource) {\n        var _this = this;\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.User; }\n        this._workspaceTasksPromise = this.computeWorkspaceTasks(runSource).then(function (value) {\n            if (_this.executionEngine === tasks_1.ExecutionEngine.Process && _this._taskSystem instanceof processTaskSystem_1.ProcessTaskSystem) {\n                // We can only have a process engine if we have one folder.\n                value.forEach(function (value) {\n                    _this._configHasErrors = value.hasErrors;\n                    _this._taskSystem.hasErrors(_this._configHasErrors);\n                });\n            }\n            return value;\n        });\n    };\n    TaskService.prototype.computeWorkspaceTasks = function (runSource) {\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.User; }\n        if (this.workspaceFolders.length === 0) {\n            return Promise.resolve(new Map());\n        }\n        else {\n            var promises = [];\n            for (var _i = 0, _a = this.workspaceFolders; _i < _a.length; _i++) {\n                var folder = _a[_i];\n                promises.push(this.computeWorkspaceFolderTasks(folder, runSource).then(function (value) { return value; }, function () { return undefined; }));\n            }\n            return Promise.all(promises).then(function (values) {\n                var result = new Map();\n                for (var _i = 0, values_3 = values; _i < values_3.length; _i++) {\n                    var value = values_3[_i];\n                    if (value) {\n                        result.set(value.workspaceFolder.uri.toString(), value);\n                    }\n                }\n                return result;\n            });\n        }\n    };\n    TaskService.prototype.computeWorkspaceFolderTasks = function (workspaceFolder, runSource) {\n        var _this = this;\n        if (runSource === void 0) { runSource = tasks_1.TaskRunSource.User; }\n        return (this.executionEngine === tasks_1.ExecutionEngine.Process\n            ? this.computeLegacyConfiguration(workspaceFolder)\n            : this.computeConfiguration(workspaceFolder)).\n            then(function (workspaceFolderConfiguration) {\n            if (!workspaceFolderConfiguration || !workspaceFolderConfiguration.config || workspaceFolderConfiguration.hasErrors) {\n                return Promise.resolve({ workspaceFolder: workspaceFolder, set: undefined, configurations: undefined, hasErrors: workspaceFolderConfiguration ? workspaceFolderConfiguration.hasErrors : false });\n            }\n            return problemMatcher_1.ProblemMatcherRegistry.onReady().then(function () {\n                var taskSystemInfo = _this._taskSystemInfos.get(workspaceFolder.uri.scheme);\n                var problemReporter = new ProblemReporter(_this._outputChannel);\n                var parseResult = TaskConfig.parse(workspaceFolder, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, workspaceFolderConfiguration.config, problemReporter);\n                var hasErrors = false;\n                if (!parseResult.validationStatus.isOK()) {\n                    hasErrors = true;\n                    _this.showOutput(runSource);\n                }\n                if (problemReporter.status.isFatal()) {\n                    problemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n                    return { workspaceFolder: workspaceFolder, set: undefined, configurations: undefined, hasErrors: hasErrors };\n                }\n                var customizedTasks;\n                if (parseResult.configured && parseResult.configured.length > 0) {\n                    customizedTasks = {\n                        byIdentifier: Object.create(null)\n                    };\n                    for (var _i = 0, _a = parseResult.configured; _i < _a.length; _i++) {\n                        var task = _a[_i];\n                        customizedTasks.byIdentifier[task.configures._key] = task;\n                    }\n                }\n                return { workspaceFolder: workspaceFolder, set: { tasks: parseResult.custom }, configurations: customizedTasks, hasErrors: hasErrors };\n            });\n        });\n    };\n    TaskService.prototype.computeConfiguration = function (workspaceFolder) {\n        var _a = this.getConfiguration(workspaceFolder), config = _a.config, hasParseErrors = _a.hasParseErrors;\n        return Promise.resolve({ workspaceFolder: workspaceFolder, config: config, hasErrors: hasParseErrors });\n    };\n    TaskService.prototype.computeLegacyConfiguration = function (workspaceFolder) {\n        var _this = this;\n        var _a = this.getConfiguration(workspaceFolder), config = _a.config, hasParseErrors = _a.hasParseErrors;\n        if (hasParseErrors) {\n            return Promise.resolve({ workspaceFolder: workspaceFolder, hasErrors: true, config: undefined });\n        }\n        if (config) {\n            if (this.hasDetectorSupport(config)) {\n                return new processRunnerDetector_1.ProcessRunnerDetector(workspaceFolder, this.fileService, this.contextService, this.configurationResolverService, config).detect(true).then(function (value) {\n                    var hasErrors = _this.printStderr(value.stderr);\n                    var detectedConfig = value.config;\n                    if (!detectedConfig) {\n                        return { workspaceFolder: workspaceFolder, config: config, hasErrors: hasErrors };\n                    }\n                    var result = Objects.deepClone(config);\n                    var configuredTasks = Object.create(null);\n                    var resultTasks = result.tasks;\n                    if (!resultTasks) {\n                        if (detectedConfig.tasks) {\n                            result.tasks = detectedConfig.tasks;\n                        }\n                    }\n                    else {\n                        resultTasks.forEach(function (task) {\n                            if (task.taskName) {\n                                configuredTasks[task.taskName] = task;\n                            }\n                        });\n                        if (detectedConfig.tasks) {\n                            detectedConfig.tasks.forEach(function (task) {\n                                if (task.taskName && !configuredTasks[task.taskName]) {\n                                    resultTasks.push(task);\n                                }\n                            });\n                        }\n                    }\n                    return { workspaceFolder: workspaceFolder, config: result, hasErrors: hasErrors };\n                });\n            }\n            else {\n                return Promise.resolve({ workspaceFolder: workspaceFolder, config: config, hasErrors: false });\n            }\n        }\n        else {\n            return new processRunnerDetector_1.ProcessRunnerDetector(workspaceFolder, this.fileService, this.contextService, this.configurationResolverService).detect(true).then(function (value) {\n                var hasErrors = _this.printStderr(value.stderr);\n                return { workspaceFolder: workspaceFolder, config: value.config, hasErrors: hasErrors };\n            });\n        }\n    };\n    TaskService.prototype.computeWorkspaceFolderSetup = function () {\n        var workspaceFolders = [];\n        var ignoredWorkspaceFolders = [];\n        var executionEngine = tasks_1.ExecutionEngine.Terminal;\n        var schemaVersion = tasks_1.JsonSchemaVersion.V2_0_0;\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n            var workspaceFolder = this.contextService.getWorkspace().folders[0];\n            workspaceFolders.push(workspaceFolder);\n            executionEngine = this.computeExecutionEngine(workspaceFolder);\n            schemaVersion = this.computeJsonSchemaVersion(workspaceFolder);\n        }\n        else if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n            for (var _i = 0, _a = this.contextService.getWorkspace().folders; _i < _a.length; _i++) {\n                var workspaceFolder = _a[_i];\n                if (schemaVersion === this.computeJsonSchemaVersion(workspaceFolder)) {\n                    workspaceFolders.push(workspaceFolder);\n                }\n                else {\n                    ignoredWorkspaceFolders.push(workspaceFolder);\n                    this._outputChannel.append(nls.localize('taskService.ignoreingFolder', 'Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0\\n', workspaceFolder.uri.fsPath));\n                }\n            }\n        }\n        return [workspaceFolders, ignoredWorkspaceFolders, executionEngine, schemaVersion];\n    };\n    TaskService.prototype.computeExecutionEngine = function (workspaceFolder) {\n        var config = this.getConfiguration(workspaceFolder).config;\n        if (!config) {\n            return tasks_1.ExecutionEngine._default;\n        }\n        return TaskConfig.ExecutionEngine.from(config);\n    };\n    TaskService.prototype.computeJsonSchemaVersion = function (workspaceFolder) {\n        var config = this.getConfiguration(workspaceFolder).config;\n        if (!config) {\n            return tasks_1.JsonSchemaVersion.V2_0_0;\n        }\n        return TaskConfig.JsonSchemaVersion.from(config);\n    };\n    TaskService.prototype.getConfiguration = function (workspaceFolder) {\n        var result = this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.EMPTY\n            ? Objects.deepClone(this.configurationService.getValue('tasks', { resource: workspaceFolder.uri }))\n            : undefined;\n        if (!result) {\n            return { config: undefined, hasParseErrors: false };\n        }\n        var parseErrors = result.$parseErrors;\n        if (parseErrors) {\n            var isAffected = false;\n            for (var _i = 0, parseErrors_1 = parseErrors; _i < parseErrors_1.length; _i++) {\n                var parseError = parseErrors_1[_i];\n                if (/tasks\\.json$/.test(parseError)) {\n                    isAffected = true;\n                    break;\n                }\n            }\n            if (isAffected) {\n                this._outputChannel.append(nls.localize('TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\\n'));\n                this.showOutput();\n                return { config: undefined, hasParseErrors: true };\n            }\n        }\n        return { config: result, hasParseErrors: false };\n    };\n    TaskService.prototype.printStderr = function (stderr) {\n        var _this = this;\n        var result = false;\n        if (stderr && stderr.length > 0) {\n            stderr.forEach(function (line) {\n                result = true;\n                _this._outputChannel.append(line + '\\n');\n            });\n            this.showOutput();\n        }\n        return result;\n    };\n    TaskService.prototype.inTerminal = function () {\n        if (this._taskSystem) {\n            return this._taskSystem instanceof terminalTaskSystem_1.TerminalTaskSystem;\n        }\n        return this.executionEngine === tasks_1.ExecutionEngine.Terminal;\n    };\n    TaskService.prototype.hasDetectorSupport = function (config) {\n        if (!config.command || this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            return false;\n        }\n        return processRunnerDetector_1.ProcessRunnerDetector.supports(TaskConfig.CommandString.value(config.command));\n    };\n    TaskService.prototype.configureAction = function () {\n        var thisCapture = this;\n        return new /** @class */ (function (_super) {\n            tslib_1.__extends(class_1, _super);\n            function class_1() {\n                return _super.call(this, ConfigureTaskAction.ID, ConfigureTaskAction.TEXT, undefined, true, function () { thisCapture.runConfigureTasks(); return Promise.resolve(undefined); }) || this;\n            }\n            return class_1;\n        }(actions_1.Action));\n    };\n    TaskService.prototype.beforeShutdown = function () {\n        var _this = this;\n        if (!this._taskSystem) {\n            return false;\n        }\n        if (!this._taskSystem.isActiveSync()) {\n            return false;\n        }\n        // The terminal service kills all terminal on shutdown. So there\n        // is nothing we can do to prevent this here.\n        if (this._taskSystem instanceof terminalTaskSystem_1.TerminalTaskSystem) {\n            return false;\n        }\n        var terminatePromise;\n        if (this._taskSystem.canAutoTerminate()) {\n            terminatePromise = Promise.resolve({ confirmed: true });\n        }\n        else {\n            terminatePromise = this.dialogService.confirm({\n                message: nls.localize('TaskSystem.runningTask', 'There is a task running. Do you want to terminate it?'),\n                primaryButton: nls.localize({ key: 'TaskSystem.terminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task\"),\n                type: 'question'\n            });\n        }\n        return terminatePromise.then(function (res) {\n            if (res.confirmed) {\n                return _this._taskSystem.terminateAll().then(function (responses) {\n                    var success = true;\n                    var code = undefined;\n                    for (var _i = 0, responses_1 = responses; _i < responses_1.length; _i++) {\n                        var response = responses_1[_i];\n                        success = success && response.success;\n                        // We only have a code in the old output runner which only has one task\n                        // So we can use the first code.\n                        if (code === undefined && response.code !== undefined) {\n                            code = response.code;\n                        }\n                    }\n                    if (success) {\n                        _this._taskSystem = undefined;\n                        _this.disposeTaskSystemListeners();\n                        return false; // no veto\n                    }\n                    else if (code && code === processes_1.TerminateResponseCode.ProcessNotFound) {\n                        return _this.dialogService.confirm({\n                            message: nls.localize('TaskSystem.noProcess', 'The launched task doesn\\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.'),\n                            primaryButton: nls.localize({ key: 'TaskSystem.exitAnyways', comment: ['&& denotes a mnemonic'] }, \"&&Exit Anyways\"),\n                            type: 'info'\n                        }).then(function (res) { return !res.confirmed; });\n                    }\n                    return true; // veto\n                }, function (err) {\n                    return true; // veto\n                });\n            }\n            return true; // veto\n        });\n    };\n    TaskService.prototype.handleError = function (err) {\n        var _this = this;\n        var showOutput = true;\n        if (err instanceof taskSystem_1.TaskError) {\n            var buildError = err;\n            var needsConfig_1 = buildError.code === taskSystem_1.TaskErrors.NotConfigured || buildError.code === taskSystem_1.TaskErrors.NoBuildTask || buildError.code === taskSystem_1.TaskErrors.NoTestTask;\n            var needsTerminate = buildError.code === taskSystem_1.TaskErrors.RunningTask;\n            if (needsConfig_1 || needsTerminate) {\n                this.notificationService.prompt(buildError.severity, buildError.message, [{\n                        label: needsConfig_1 ? ConfigureTaskAction.TEXT : nls.localize('TerminateAction.label', \"Terminate Task\"),\n                        run: function () {\n                            if (needsConfig_1) {\n                                _this.runConfigureTasks();\n                            }\n                            else {\n                                _this.runTerminateCommand();\n                            }\n                        }\n                    }]);\n            }\n            else {\n                this.notificationService.notify({ severity: buildError.severity, message: buildError.message });\n            }\n        }\n        else if (err instanceof Error) {\n            var error = err;\n            this.notificationService.error(error.message);\n            showOutput = false;\n        }\n        else if (Types.isString(err)) {\n            this.notificationService.error(err);\n        }\n        else {\n            this.notificationService.error(nls.localize('TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.'));\n        }\n        if (showOutput) {\n            this.showOutput();\n        }\n    };\n    TaskService.prototype.canRunCommand = function () {\n        if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n            this.notificationService.info(nls.localize('TaskService.noWorkspace', 'Tasks are only available on a workspace folder.'));\n            return false;\n        }\n        return true;\n    };\n    TaskService.prototype.createTaskQuickPickEntries = function (tasks, group, sort, selectedEntry) {\n        var _this = this;\n        if (group === void 0) { group = false; }\n        if (sort === void 0) { sort = false; }\n        if (tasks === undefined || tasks === null || tasks.length === 0) {\n            return [];\n        }\n        var TaskQuickPickEntry = function (task) {\n            var description;\n            if (_this.needsFolderQualification()) {\n                var workspaceFolder = task.getWorkspaceFolder();\n                if (workspaceFolder) {\n                    description = workspaceFolder.name;\n                }\n            }\n            return { label: task._label, description: description, task: task };\n        };\n        function fillEntries(entries, tasks, groupLabel) {\n            if (tasks.length) {\n                entries.push({ type: 'separator', label: groupLabel });\n            }\n            for (var _i = 0, tasks_7 = tasks; _i < tasks_7.length; _i++) {\n                var task = tasks_7[_i];\n                var entry = TaskQuickPickEntry(task);\n                entry.buttons = [{ iconClass: 'quick-open-task-configure', tooltip: nls.localize('configureTask', \"Configure Task\") }];\n                if (selectedEntry && (task === selectedEntry.task)) {\n                    entries.unshift(selectedEntry);\n                }\n                else {\n                    entries.push(entry);\n                }\n            }\n        }\n        var entries;\n        if (group) {\n            entries = [];\n            if (tasks.length === 1) {\n                entries.push(TaskQuickPickEntry(tasks[0]));\n            }\n            else {\n                var recentlyUsedTasks = this.getRecentlyUsedTasks();\n                var recent_1 = [];\n                var configured = [];\n                var detected = [];\n                var taskMap_1 = Object.create(null);\n                tasks.forEach(function (task) {\n                    var key = task.getRecentlyUsedKey();\n                    if (key) {\n                        taskMap_1[key] = task;\n                    }\n                });\n                recentlyUsedTasks.keys().forEach(function (key) {\n                    var task = taskMap_1[key];\n                    if (task) {\n                        recent_1.push(task);\n                    }\n                });\n                for (var _i = 0, tasks_6 = tasks; _i < tasks_6.length; _i++) {\n                    var task = tasks_6[_i];\n                    var key = task.getRecentlyUsedKey();\n                    if (!key || !recentlyUsedTasks.has(key)) {\n                        if (task._source.kind === tasks_1.TaskSourceKind.Workspace) {\n                            configured.push(task);\n                        }\n                        else {\n                            detected.push(task);\n                        }\n                    }\n                }\n                var sorter_1 = this.createSorter();\n                fillEntries(entries, recent_1, nls.localize('recentlyUsed', 'recently used tasks'));\n                configured = configured.sort(function (a, b) { return sorter_1.compare(a, b); });\n                fillEntries(entries, configured, nls.localize('configured', 'configured tasks'));\n                detected = detected.sort(function (a, b) { return sorter_1.compare(a, b); });\n                fillEntries(entries, detected, nls.localize('detected', 'detected tasks'));\n            }\n        }\n        else {\n            if (sort) {\n                var sorter_2 = this.createSorter();\n                tasks = tasks.sort(function (a, b) { return sorter_2.compare(a, b); });\n            }\n            entries = tasks.map(function (task) { return TaskQuickPickEntry(task); });\n        }\n        return entries;\n    };\n    TaskService.prototype.showQuickPick = function (tasks, placeHolder, defaultEntry, group, sort, selectedEntry) {\n        var _this = this;\n        if (group === void 0) { group = false; }\n        if (sort === void 0) { sort = false; }\n        var _createEntries = function () {\n            if (Array.isArray(tasks)) {\n                return Promise.resolve(_this.createTaskQuickPickEntries(tasks, group, sort, selectedEntry));\n            }\n            else {\n                return tasks.then(function (tasks) { return _this.createTaskQuickPickEntries(tasks, group, sort, selectedEntry); });\n            }\n        };\n        return this.quickInputService.pick(_createEntries().then(function (entries) {\n            if ((entries.length === 0) && defaultEntry) {\n                entries.push(defaultEntry);\n            }\n            return entries;\n        }), {\n            placeHolder: placeHolder,\n            matchOnDescription: true,\n            onDidTriggerItemButton: function (context) {\n                var task = context.item.task;\n                _this.quickInputService.cancel();\n                if (tasks_1.ContributedTask.is(task)) {\n                    _this.customize(task, undefined, true);\n                }\n                else if (tasks_1.CustomTask.is(task)) {\n                    _this.openConfig(task);\n                }\n            }\n        }).then(function (entry) { return entry ? entry.task : undefined; });\n    };\n    TaskService.prototype.showIgnoredFoldersMessage = function () {\n        var _this = this;\n        if (this.ignoredWorkspaceFolders.length === 0 || !this.showIgnoreMessage) {\n            return Promise.resolve(undefined);\n        }\n        this.notificationService.prompt(severity_1.default.Info, nls.localize('TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(function (f) { return f.name; }).join(', ')), [{\n                label: nls.localize('TaskService.notAgain', 'Don\\'t Show Again'),\n                isSecondary: true,\n                run: function () {\n                    _this.storageService.store(TaskService.IgnoreTask010DonotShowAgain_key, true, storage_1.StorageScope.WORKSPACE);\n                    _this._showIgnoreMessage = false;\n                }\n            }]);\n        return Promise.resolve(undefined);\n    };\n    TaskService.prototype.runTaskCommand = function (arg) {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        var identifier = this.getTaskIdentifier(arg);\n        if (identifier !== undefined) {\n            this.getGroupedTasks().then(function (grouped) {\n                var resolver = _this.createResolver(grouped);\n                var folders = _this.contextService.getWorkspace().folders;\n                for (var _i = 0, folders_1 = folders; _i < folders_1.length; _i++) {\n                    var folder = folders_1[_i];\n                    var task = resolver.resolve(folder, identifier);\n                    if (task) {\n                        _this.run(task).then(undefined, function (reason) {\n                            // eat the error, it has already been surfaced to the user and we don't care about it here\n                        });\n                        return;\n                    }\n                }\n                _this.doRunTaskCommand(grouped.all());\n            }, function () {\n                _this.doRunTaskCommand();\n            });\n        }\n        else {\n            this.doRunTaskCommand();\n        }\n    };\n    TaskService.prototype.doRunTaskCommand = function (tasks) {\n        var _this = this;\n        this.showIgnoredFoldersMessage().then(function () {\n            _this.showQuickPick(tasks ? tasks : _this.tasks(), nls.localize('TaskService.pickRunTask', 'Select the task to run'), {\n                label: nls.localize('TaslService.noEntryToRun', 'No task to run found. Configure Tasks...'),\n                task: null\n            }, true).\n                then(function (task) {\n                if (task === undefined) {\n                    return;\n                }\n                if (task === null) {\n                    _this.runConfigureTasks();\n                }\n                else {\n                    _this.run(task, { attachProblemMatcher: true }, tasks_1.TaskRunSource.User).then(undefined, function (reason) {\n                        // eat the error, it has already been surfaced to the user and we don't care about it here\n                    });\n                }\n            });\n        });\n    };\n    TaskService.prototype.reRunTaskCommand = function (arg) {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        problemMatcher_1.ProblemMatcherRegistry.onReady().then(function () {\n            return _this.textFileService.saveAll().then(function (value) {\n                var executeResult = _this.getTaskSystem().rerun();\n                if (executeResult) {\n                    return _this.handleExecuteResult(executeResult);\n                }\n                else {\n                    _this.doRunTaskCommand();\n                    return Promise.resolve(undefined);\n                }\n            });\n        });\n    };\n    TaskService.prototype.splitPerGroupType = function (tasks) {\n        var none = [];\n        var defaults = [];\n        var users = [];\n        for (var _i = 0, tasks_8 = tasks; _i < tasks_8.length; _i++) {\n            var task = tasks_8[_i];\n            if (task.configurationProperties.groupType === tasks_1.GroupType.default) {\n                defaults.push(task);\n            }\n            else if (task.configurationProperties.groupType === tasks_1.GroupType.user) {\n                users.push(task);\n            }\n            else {\n                none.push(task);\n            }\n        }\n        return { none: none, defaults: defaults, users: users };\n    };\n    TaskService.prototype.runBuildCommand = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        if (this.schemaVersion === tasks_1.JsonSchemaVersion.V0_1_0) {\n            this.build();\n            return;\n        }\n        var options = {\n            location: progress_1.ProgressLocation.Window,\n            title: nls.localize('TaskService.fetchingBuildTasks', 'Fetching build tasks...')\n        };\n        var promise = this.getTasksForGroup(tasks_1.TaskGroup.Build).then(function (tasks) {\n            if (tasks.length > 0) {\n                var _a = _this.splitPerGroupType(tasks), defaults = _a.defaults, users = _a.users;\n                if (defaults.length === 1) {\n                    _this.run(defaults[0]).then(undefined, function (reason) {\n                        // eat the error, it has already been surfaced to the user and we don't care about it here\n                    });\n                    return;\n                }\n                else if (defaults.length + users.length > 0) {\n                    tasks = defaults.concat(users);\n                }\n            }\n            _this.showIgnoredFoldersMessage().then(function () {\n                _this.showQuickPick(tasks, nls.localize('TaskService.pickBuildTask', 'Select the build task to run'), {\n                    label: nls.localize('TaskService.noBuildTask', 'No build task to run found. Configure Build Task...'),\n                    task: null\n                }, true).then(function (task) {\n                    if (task === undefined) {\n                        return;\n                    }\n                    if (task === null) {\n                        _this.runConfigureDefaultBuildTask();\n                        return;\n                    }\n                    _this.run(task, { attachProblemMatcher: true }).then(undefined, function (reason) {\n                        // eat the error, it has already been surfaced to the user and we don't care about it here\n                    });\n                });\n            });\n        });\n        this.progressService.withProgress(options, function () { return promise; });\n    };\n    TaskService.prototype.runTestCommand = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        if (this.schemaVersion === tasks_1.JsonSchemaVersion.V0_1_0) {\n            this.runTest();\n            return;\n        }\n        var options = {\n            location: progress_1.ProgressLocation.Window,\n            title: nls.localize('TaskService.fetchingTestTasks', 'Fetching test tasks...')\n        };\n        var promise = this.getTasksForGroup(tasks_1.TaskGroup.Test).then(function (tasks) {\n            if (tasks.length > 0) {\n                var _a = _this.splitPerGroupType(tasks), defaults = _a.defaults, users = _a.users;\n                if (defaults.length === 1) {\n                    _this.run(defaults[0]).then(undefined, function (reason) {\n                        // eat the error, it has already been surfaced to the user and we don't care about it here\n                    });\n                    return;\n                }\n                else if (defaults.length + users.length > 0) {\n                    tasks = defaults.concat(users);\n                }\n            }\n            _this.showIgnoredFoldersMessage().then(function () {\n                _this.showQuickPick(tasks, nls.localize('TaskService.pickTestTask', 'Select the test task to run'), {\n                    label: nls.localize('TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...'),\n                    task: null\n                }, true).then(function (task) {\n                    if (task === undefined) {\n                        return;\n                    }\n                    if (task === null) {\n                        _this.runConfigureTasks();\n                        return;\n                    }\n                    _this.run(task).then(undefined, function (reason) {\n                        // eat the error, it has already been surfaced to the user and we don't care about it here\n                    });\n                });\n            });\n        });\n        this.progressService.withProgress(options, function () { return promise; });\n    };\n    TaskService.prototype.runTerminateCommand = function (arg) {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        var runQuickPick = function (promise) {\n            _this.showQuickPick(promise || _this.getActiveTasks(), nls.localize('TaskService.tastToTerminate', 'Select task to terminate'), {\n                label: nls.localize('TaskService.noTaskRunning', 'No task is currently running'),\n                task: null\n            }, false, true).then(function (task) {\n                if (task === undefined || task === null) {\n                    return;\n                }\n                _this.terminate(task);\n            });\n        };\n        if (this.inTerminal()) {\n            var identifier_2 = this.getTaskIdentifier(arg);\n            var promise_1;\n            if (identifier_2 !== undefined) {\n                promise_1 = this.getActiveTasks();\n                promise_1.then(function (tasks) {\n                    for (var _i = 0, tasks_9 = tasks; _i < tasks_9.length; _i++) {\n                        var task = tasks_9[_i];\n                        if (task.matches(identifier_2)) {\n                            _this.terminate(task);\n                            return;\n                        }\n                    }\n                    runQuickPick(promise_1);\n                });\n            }\n            else {\n                runQuickPick();\n            }\n        }\n        else {\n            this.isActive().then(function (active) {\n                if (active) {\n                    _this.terminateAll().then(function (responses) {\n                        // the output runner has only one task\n                        var response = responses[0];\n                        if (response.success) {\n                            return;\n                        }\n                        if (response.code && response.code === processes_1.TerminateResponseCode.ProcessNotFound) {\n                            _this.notificationService.error(nls.localize('TerminateAction.noProcess', 'The launched process doesn\\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.'));\n                        }\n                        else {\n                            _this.notificationService.error(nls.localize('TerminateAction.failed', 'Failed to terminate running task'));\n                        }\n                    });\n                }\n            });\n        }\n    };\n    TaskService.prototype.runRestartTaskCommand = function (arg) {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        var runQuickPick = function (promise) {\n            _this.showQuickPick(promise || _this.getActiveTasks(), nls.localize('TaskService.tastToRestart', 'Select the task to restart'), {\n                label: nls.localize('TaskService.noTaskToRestart', 'No task to restart'),\n                task: null\n            }, false, true).then(function (task) {\n                if (task === undefined || task === null) {\n                    return;\n                }\n                _this.restart(task);\n            });\n        };\n        if (this.inTerminal()) {\n            var identifier_3 = this.getTaskIdentifier(arg);\n            var promise_2;\n            if (identifier_3 !== undefined) {\n                promise_2 = this.getActiveTasks();\n                promise_2.then(function (tasks) {\n                    for (var _i = 0, tasks_10 = tasks; _i < tasks_10.length; _i++) {\n                        var task = tasks_10[_i];\n                        if (task.matches(identifier_3)) {\n                            _this.restart(task);\n                            return;\n                        }\n                    }\n                    runQuickPick(promise_2);\n                });\n            }\n            else {\n                runQuickPick();\n            }\n        }\n        else {\n            this.getActiveTasks().then(function (activeTasks) {\n                if (activeTasks.length === 0) {\n                    return;\n                }\n                var task = activeTasks[0];\n                _this.restart(task);\n            });\n        }\n    };\n    TaskService.prototype.getTaskIdentifier = function (arg) {\n        var result = undefined;\n        if (Types.isString(arg)) {\n            result = arg;\n        }\n        else if (arg && Types.isString(arg.type)) {\n            result = tasks_1.TaskDefinition.createTaskIdentifier(arg, console);\n        }\n        return result;\n    };\n    TaskService.prototype.runConfigureTasks = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return undefined;\n        }\n        var taskPromise;\n        if (this.schemaVersion === tasks_1.JsonSchemaVersion.V2_0_0) {\n            taskPromise = this.getGroupedTasks();\n        }\n        else {\n            taskPromise = Promise.resolve(new TaskMap());\n        }\n        var openTaskFile = function (workspaceFolder) {\n            var resource = workspaceFolder.toResource('.vscode/tasks.json');\n            var configFileCreated = false;\n            _this.fileService.resolveFile(resource).then(function (stat) { return stat; }, function () { return undefined; }).then(function (stat) {\n                if (stat) {\n                    return stat.resource;\n                }\n                return _this.quickInputService.pick(taskTemplates_1.getTemplates(), { placeHolder: nls.localize('TaskService.template', 'Select a Task Template') }).then(function (selection) {\n                    if (!selection) {\n                        return Promise.resolve(undefined);\n                    }\n                    var content = selection.content;\n                    var editorConfig = _this.configurationService.getValue();\n                    if (editorConfig.editor.insertSpaces) {\n                        content = content.replace(/(\\n)(\\t+)/g, function (_, s1, s2) { return s1 + strings.repeat(' ', s2.length * editorConfig.editor.tabSize); });\n                    }\n                    configFileCreated = true;\n                    /* __GDPR__\n                        \"taskService.template\" : {\n                            \"templateId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                            \"autoDetect\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                        }\n                    */\n                    return _this.fileService.createFile(resource, content).then(function (result) {\n                        _this.telemetryService.publicLog(TaskService.TemplateTelemetryEventName, {\n                            templateId: selection.id,\n                            autoDetect: selection.autoDetect\n                        });\n                        return result.resource;\n                    });\n                });\n            }).then(function (resource) {\n                if (!resource) {\n                    return;\n                }\n                _this.editorService.openEditor({\n                    resource: resource,\n                    options: {\n                        pinned: configFileCreated // pin only if config file is created #8727\n                    }\n                });\n            });\n        };\n        var configureTask = function (task) {\n            if (tasks_1.ContributedTask.is(task)) {\n                _this.customize(task, undefined, true);\n            }\n            else if (tasks_1.CustomTask.is(task)) {\n                _this.openConfig(task);\n            }\n            else if (tasks_1.ConfiguringTask.is(task)) {\n                // Do nothing.\n            }\n        };\n        function isTaskEntry(value) {\n            var candidate = value;\n            return candidate && !!candidate.task;\n        }\n        var stats = this.contextService.getWorkspace().folders.map(function (folder) {\n            return _this.fileService.resolveFile(folder.toResource('.vscode/tasks.json')).then(function (stat) { return stat; }, function () { return undefined; });\n        });\n        var createLabel = nls.localize('TaskService.createJsonFile', 'Create tasks.json file from template');\n        var openLabel = nls.localize('TaskService.openJsonFile', 'Open tasks.json file');\n        var entries = Promise.all(stats).then(function (stats) {\n            return taskPromise.then(function (taskMap) {\n                var entries = [];\n                if (_this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                    var tasks = taskMap.all();\n                    var needsCreateOrOpen = true;\n                    if (tasks.length > 0) {\n                        tasks = tasks.sort(function (a, b) { return a._label.localeCompare(b._label); });\n                        for (var _i = 0, tasks_11 = tasks; _i < tasks_11.length; _i++) {\n                            var task = tasks_11[_i];\n                            entries.push({ label: task._label, task: task });\n                            if (!tasks_1.ContributedTask.is(task)) {\n                                needsCreateOrOpen = false;\n                            }\n                        }\n                    }\n                    if (needsCreateOrOpen) {\n                        var label = stats[0] !== undefined ? openLabel : createLabel;\n                        if (entries.length) {\n                            entries.push({ type: 'separator' });\n                        }\n                        entries.push({ label: label, folder: _this.contextService.getWorkspace().folders[0] });\n                    }\n                }\n                else {\n                    var folders = _this.contextService.getWorkspace().folders;\n                    var index = 0;\n                    for (var _a = 0, folders_2 = folders; _a < folders_2.length; _a++) {\n                        var folder = folders_2[_a];\n                        var tasks = taskMap.get(folder);\n                        if (tasks.length > 0) {\n                            tasks = tasks.slice().sort(function (a, b) { return a._label.localeCompare(b._label); });\n                            for (var i = 0; i < tasks.length; i++) {\n                                var entry = { label: tasks[i]._label, task: tasks[i], description: folder.name };\n                                if (i === 0) {\n                                    entries.push({ type: 'separator', label: folder.name });\n                                }\n                                entries.push(entry);\n                            }\n                        }\n                        else {\n                            var label = stats[index] !== undefined ? openLabel : createLabel;\n                            var entry = { label: label, folder: folder };\n                            entries.push({ type: 'separator', label: folder.name });\n                            entries.push(entry);\n                        }\n                        index++;\n                    }\n                }\n                return entries;\n            });\n        });\n        this.quickInputService.pick(entries, { placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }).\n            then(function (selection) {\n            if (!selection) {\n                return;\n            }\n            if (isTaskEntry(selection)) {\n                configureTask(selection.task);\n            }\n            else {\n                openTaskFile(selection.folder);\n            }\n        });\n    };\n    TaskService.prototype.runConfigureDefaultBuildTask = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        if (this.schemaVersion === tasks_1.JsonSchemaVersion.V2_0_0) {\n            this.tasks().then((function (tasks) {\n                if (tasks.length === 0) {\n                    _this.runConfigureTasks();\n                    return;\n                }\n                var selectedTask;\n                var selectedEntry;\n                for (var _i = 0, tasks_12 = tasks; _i < tasks_12.length; _i++) {\n                    var task = tasks_12[_i];\n                    if (task.configurationProperties.group === tasks_1.TaskGroup.Build && task.configurationProperties.groupType === tasks_1.GroupType.default) {\n                        selectedTask = task;\n                        break;\n                    }\n                }\n                if (selectedTask) {\n                    selectedEntry = {\n                        label: nls.localize('TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', selectedTask.getQualifiedLabel()),\n                        task: selectedTask\n                    };\n                }\n                _this.showIgnoredFoldersMessage().then(function () {\n                    _this.showQuickPick(tasks, nls.localize('TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task'), undefined, true, false, selectedEntry).\n                        then(function (task) {\n                        if ((task === undefined) || (task === null)) {\n                            return;\n                        }\n                        if (task === selectedTask && tasks_1.CustomTask.is(task)) {\n                            _this.openConfig(task);\n                        }\n                        if (!tasks_1.InMemoryTask.is(task)) {\n                            _this.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(function () {\n                                if (selectedTask && (task !== selectedTask) && !tasks_1.InMemoryTask.is(selectedTask)) {\n                                    _this.customize(selectedTask, { group: 'build' }, true);\n                                }\n                            });\n                        }\n                    });\n                });\n            }));\n        }\n        else {\n            this.runConfigureTasks();\n        }\n    };\n    TaskService.prototype.runConfigureDefaultTestTask = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        if (this.schemaVersion === tasks_1.JsonSchemaVersion.V2_0_0) {\n            this.tasks().then((function (tasks) {\n                if (tasks.length === 0) {\n                    _this.runConfigureTasks();\n                    return;\n                }\n                var selectedTask;\n                var selectedEntry;\n                for (var _i = 0, tasks_13 = tasks; _i < tasks_13.length; _i++) {\n                    var task = tasks_13[_i];\n                    if (task.configurationProperties.group === tasks_1.TaskGroup.Test && task.configurationProperties.groupType === tasks_1.GroupType.default) {\n                        selectedTask = task;\n                        break;\n                    }\n                }\n                if (selectedTask) {\n                    selectedEntry = {\n                        label: nls.localize('TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()),\n                        task: selectedTask\n                    };\n                }\n                _this.showIgnoredFoldersMessage().then(function () {\n                    _this.showQuickPick(tasks, nls.localize('TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then(function (task) {\n                        if (!task) {\n                            return;\n                        }\n                        if (task === selectedTask && tasks_1.CustomTask.is(task)) {\n                            _this.openConfig(task);\n                        }\n                        if (!tasks_1.InMemoryTask.is(task)) {\n                            _this.customize(task, { group: { kind: 'test', isDefault: true } }, true).then(function () {\n                                if (selectedTask && (task !== selectedTask) && !tasks_1.InMemoryTask.is(selectedTask)) {\n                                    _this.customize(selectedTask, { group: 'test' }, true);\n                                }\n                            });\n                        }\n                    });\n                });\n            }));\n        }\n        else {\n            this.runConfigureTasks();\n        }\n    };\n    TaskService.prototype.runShowTasks = function () {\n        var _this = this;\n        if (!this.canRunCommand()) {\n            return;\n        }\n        this.showQuickPick(this.getActiveTasks(), nls.localize('TaskService.pickShowTask', 'Select the task to show its output'), {\n            label: nls.localize('TaskService.noTaskIsRunning', 'No task is running'),\n            task: null\n        }, false, true).then(function (task) {\n            if (task === undefined || task === null) {\n                return;\n            }\n            _this._taskSystem.revealTask(task);\n        });\n    };\n    // private static autoDetectTelemetryName: string = 'taskServer.autoDetect';\n    TaskService.RecentlyUsedTasks_Key = 'workbench.tasks.recentlyUsedTasks';\n    TaskService.IgnoreTask010DonotShowAgain_key = 'workbench.tasks.ignoreTask010Shown';\n    TaskService.CustomizationTelemetryEventName = 'taskService.customize';\n    TaskService.TemplateTelemetryEventName = 'taskService.template';\n    TaskService.OutputChannelId = 'tasks';\n    TaskService.OutputChannelLabel = nls.localize('tasks', \"Tasks\");\n    TaskService.nextHandle = 0;\n    TaskService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, markers_1.IMarkerService),\n        tslib_1.__param(2, output_1.IOutputService),\n        tslib_1.__param(3, editorService_1.IEditorService),\n        tslib_1.__param(4, files_1.IFileService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(6, telemetry_1.ITelemetryService),\n        tslib_1.__param(7, textfiles_1.ITextFileService),\n        tslib_1.__param(8, lifecycle_2.ILifecycleService),\n        tslib_1.__param(9, modelService_1.IModelService),\n        tslib_1.__param(10, extensions_2.IExtensionService),\n        tslib_1.__param(11, quickInput_1.IQuickInputService),\n        tslib_1.__param(12, configurationResolver_1.IConfigurationResolverService),\n        tslib_1.__param(13, terminal_1.ITerminalService),\n        tslib_1.__param(14, storage_1.IStorageService),\n        tslib_1.__param(15, progress_1.IProgressService2),\n        tslib_1.__param(16, opener_1.IOpenerService),\n        tslib_1.__param(17, windows_1.IWindowService),\n        tslib_1.__param(18, dialogs_1.IDialogService),\n        tslib_1.__param(19, notification_1.INotificationService),\n        tslib_1.__param(20, contextkey_1.IContextKeyService)\n    ], TaskService);\n    return TaskService;\n}(lifecycle_1.Disposable));\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '2_run',\n    command: {\n        id: 'workbench.action.tasks.runTask',\n        title: nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, \"&&Run Task...\")\n    },\n    order: 1\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '2_run',\n    command: {\n        id: 'workbench.action.tasks.build',\n        title: nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, \"Run &&Build Task...\")\n    },\n    order: 2\n});\n// Manage Tasks\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '3_manage',\n    command: {\n        precondition: tasks_1.TASK_RUNNING_STATE,\n        id: 'workbench.action.tasks.showTasks',\n        title: nls.localize({ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, \"Show Runnin&&g Tasks...\")\n    },\n    order: 1\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '3_manage',\n    command: {\n        precondition: tasks_1.TASK_RUNNING_STATE,\n        id: 'workbench.action.tasks.restartTask',\n        title: nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, \"R&&estart Running Task...\")\n    },\n    order: 2\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '3_manage',\n    command: {\n        precondition: tasks_1.TASK_RUNNING_STATE,\n        id: 'workbench.action.tasks.terminate',\n        title: nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task...\")\n    },\n    order: 3\n});\n// Configure Tasks\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '4_configure',\n    command: {\n        id: 'workbench.action.tasks.configureTaskRunner',\n        title: nls.localize({ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, \"&&Configure Tasks...\")\n    },\n    order: 1\n});\nactions_2.MenuRegistry.appendMenuItem(actions_2.MenuId.MenubarTerminalMenu, {\n    group: '4_configure',\n    command: {\n        id: 'workbench.action.tasks.configureDefaultBuildTask',\n        title: nls.localize({ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, \"Configure De&&fault Build Task...\")\n    },\n    order: 2\n});\nactions_2.MenuRegistry.addCommand({ id: ConfigureTaskAction.ID, title: { value: ConfigureTaskAction.TEXT, original: 'Configure Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.showLog', title: { value: nls.localize('ShowLogAction.label', \"Show Task Log\"), original: 'Show Task Log' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.runTask', title: { value: nls.localize('RunTaskAction.label', \"Run Task\"), original: 'Run Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.reRunTask', title: { value: nls.localize('ReRunTaskAction.label', \"Rerun Last Task\"), original: 'Rerun Last Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.restartTask', title: { value: nls.localize('RestartTaskAction.label', \"Restart Running Task\"), original: 'Restart Running Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.showTasks', title: { value: nls.localize('ShowTasksAction.label', \"Show Running Tasks\"), original: 'Show Running Tasks' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.terminate', title: { value: nls.localize('TerminateAction.label', \"Terminate Task\"), original: 'Terminate Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.build', title: { value: nls.localize('BuildAction.label', \"Run Build Task\"), original: 'Run Build Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.test', title: { value: nls.localize('TestAction.label', \"Run Test Task\"), original: 'Run Test Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.configureDefaultBuildTask', title: { value: nls.localize('ConfigureDefaultBuildTask.label', \"Configure Default Build Task\"), original: 'Configure Default Build Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nactions_2.MenuRegistry.addCommand({ id: 'workbench.action.tasks.configureDefaultTestTask', title: { value: nls.localize('ConfigureDefaultTestTask.label', \"Configure Default Test Task\"), original: 'Configure Default Test Task' }, category: { value: tasksCategory, original: 'Tasks' } });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });\n// Tasks Output channel. Register it before using it in Task Service.\nvar outputChannelRegistry = platform_1.Registry.as(output_1.Extensions.OutputChannels);\noutputChannelRegistry.registerChannel({ id: TaskService.OutputChannelId, label: TaskService.OutputChannelLabel, log: false });\n// Task Service\nextensions_1.registerSingleton(taskService_1.ITaskService, TaskService, true);\n// Register Quick Open\nvar quickOpenRegistry = (platform_1.Registry.as(quickopen_1.Extensions.Quickopen));\nvar tasksPickerContextKey = 'inTasksPicker';\nquickOpenRegistry.registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(taskQuickOpen_1.QuickOpenHandler, taskQuickOpen_1.QuickOpenHandler.ID, 'task ', tasksPickerContextKey, nls.localize('quickOpen.task', \"Run Task\")));\nvar actionBarRegistry = platform_1.Registry.as(actions_3.Extensions.Actionbar);\nactionBarRegistry.registerActionBarContributor(actions_3.Scope.VIEWER, quickOpen_1.QuickOpenActionContributor);\n// Status bar\nvar statusbarRegistry = platform_1.Registry.as(statusbar_1.Extensions.Statusbar);\nstatusbarRegistry.registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(BuildStatusBarItem, statusbar_2.StatusbarAlignment.LEFT, 50 /* Medium Priority */));\nstatusbarRegistry.registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(TaskStatusBarItem, statusbar_2.StatusbarAlignment.LEFT, 50 /* Medium Priority */));\n// tasks.json validation\nvar schemaId = 'vscode://schemas/tasks';\nvar schema = {\n    id: schemaId,\n    description: 'Task definition file',\n    type: 'object',\n    default: {\n        version: '2.0.0',\n        tasks: [\n            {\n                label: 'My Task',\n                command: 'echo hello',\n                type: 'shell',\n                args: [],\n                problemMatcher: ['$tsc'],\n                presentation: {\n                    reveal: 'always'\n                },\n                group: 'build'\n            }\n        ]\n    }\n};\nvar jsonSchema_v1_1 = require(\"../common/jsonSchema_v1\");\nvar jsonSchema_v2_1 = require(\"../common/jsonSchema_v2\");\nschema.definitions = tslib_1.__assign({}, jsonSchema_v1_1.default.definitions, jsonSchema_v2_1.default.definitions);\nschema.oneOf = (jsonSchema_v2_1.default.oneOf || []).concat((jsonSchema_v1_1.default.oneOf || []));\nvar jsonRegistry = platform_1.Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(schemaId, schema);\nproblemMatcher_1.ProblemMatcherRegistry.onMatcherChanged(function () {\n    jsonSchema_v2_1.updateProblemMatchers();\n    jsonRegistry.notifySchemaChanged(schemaId);\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/task.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/electron-browser/task.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!../common/media/task.contribution';\n\nimport * as nls from 'vs/nls';\nimport * as semver from 'semver';\n\nimport { QuickOpenHandler } from 'vs/workbench/contrib/tasks/browser/taskQuickOpen';\nimport Severity from 'vs/base/common/severity';\nimport * as Objects from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Action } from 'vs/base/common/actions';\nimport * as Dom from 'vs/base/browser/dom';\nimport { IDisposable, dispose, toDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport * as Types from 'vs/base/common/types';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { TerminateResponseCode } from 'vs/base/common/processes';\nimport * as strings from 'vs/base/common/strings';\nimport { ValidationStatus, ValidationState } from 'vs/base/common/parsers';\nimport * as UUID from 'vs/base/common/uuid';\nimport * as Platform from 'vs/base/common/platform';\nimport { LinkedMap, Touch } from 'vs/base/common/map';\nimport { OcticonLabel } from 'vs/base/browser/ui/octiconLabel/octiconLabel';\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ILifecycleService, LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { MenuRegistry, MenuId, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IMarkerService, MarkerStatistics } from 'vs/platform/markers/common/markers';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IFileService, IFileStat } from 'vs/platform/files/common/files';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ProblemMatcherRegistry, NamedProblemMatcher } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IProgressService2, IProgressOptions, ProgressLocation } from 'vs/platform/progress/common/progress';\n\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IDialogService, IConfirmationResult } from 'vs/platform/dialogs/common/dialogs';\n\nimport { IModelService } from 'vs/editor/common/services/modelService';\n\nimport * as jsonContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\n\nimport { IStatusbarItem, IStatusbarRegistry, Extensions as StatusbarExtensions, StatusbarItemDescriptor } from 'vs/workbench/browser/parts/statusbar/statusbar';\nimport { StatusbarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { IQuickOpenRegistry, Extensions as QuickOpenExtensions, QuickOpenHandlerDescriptor } from 'vs/workbench/browser/quickopen';\n\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport Constants from 'vs/workbench/contrib/markers/browser/constants';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\n\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IOutputService, IOutputChannelRegistry, Extensions as OutputExt, IOutputChannel } from 'vs/workbench/contrib/output/common/output';\nimport { Scope, IActionBarRegistry, Extensions as ActionBarExtensions } from 'vs/workbench/browser/actions';\n\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/common/terminal';\n\nimport { ITaskSystem, ITaskResolver, ITaskSummary, TaskExecuteKind, TaskError, TaskErrors, TaskTerminateResponse, TaskSystemInfo, ITaskExecuteResult } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport {\n\tTask, CustomTask, ConfiguringTask, ContributedTask, InMemoryTask, TaskEvent,\n\tTaskEventKind, TaskSet, TaskGroup, GroupType, ExecutionEngine, JsonSchemaVersion, TaskSourceKind,\n\tTaskSorter, TaskIdentifier, KeyedTaskIdentifier, TASK_RUNNING_STATE, TaskRunSource,\n\tKeyedTaskIdentifier as NKeyedTaskIdentifier, TaskDefinition\n} from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService, ITaskProvider, ProblemMatcherRunOptions, CustomizationProperties, TaskFilter, WorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { getTemplates as getTaskTemplates } from 'vs/workbench/contrib/tasks/common/taskTemplates';\n\nimport * as TaskConfig from '../common/taskConfiguration';\nimport { ProcessTaskSystem } from 'vs/workbench/contrib/tasks/node/processTaskSystem';\nimport { TerminalTaskSystem } from './terminalTaskSystem';\nimport { ProcessRunnerDetector } from 'vs/workbench/contrib/tasks/node/processRunnerDetector';\nimport { QuickOpenActionContributor } from '../browser/quickOpen';\n\nimport { Themable, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IQuickInputService, IQuickPickItem, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\n\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { RunAutomaticTasks, AllowAutomaticTaskRunning, DisallowAutomaticTaskRunning } from 'vs/workbench/contrib/tasks/electron-browser/runAutomaticTasks';\n\nlet tasksCategory = nls.localize('tasksCategory', \"Tasks\");\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RunAutomaticTasks, LifecyclePhase.Eventually);\n\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(AllowAutomaticTaskRunning, AllowAutomaticTaskRunning.ID, AllowAutomaticTaskRunning.LABEL), 'Tasks: Allow Automatic Tasks in Folder', tasksCategory);\nactionRegistry.registerWorkbenchAction(new SyncActionDescriptor(DisallowAutomaticTaskRunning, DisallowAutomaticTaskRunning.ID, DisallowAutomaticTaskRunning.LABEL), 'Tasks: Disallow Automatic Tasks in Folder', tasksCategory);\n\n\nnamespace ConfigureTaskAction {\n\texport const ID = 'workbench.action.tasks.configureTaskRunner';\n\texport const TEXT = nls.localize('ConfigureTaskRunnerAction.label', \"Configure Task\");\n}\n\nclass BuildStatusBarItem extends Themable implements IStatusbarItem {\n\tprivate activeCount: number;\n\tprivate icons: HTMLElement[];\n\n\tconstructor(\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.activeCount = 0;\n\t\tthis.icons = [];\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateStyles()));\n\t}\n\n\tprotected updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tthis.icons.forEach(icon => {\n\t\t\ticon.style.backgroundColor = this.getColor(this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_FOREGROUND : STATUS_BAR_NO_FOLDER_FOREGROUND);\n\t\t});\n\t}\n\n\tpublic render(container: HTMLElement): IDisposable {\n\t\tlet callOnDispose: IDisposable[] = [];\n\n\t\tconst element = document.createElement('div');\n\t\tconst label = document.createElement('a');\n\t\tconst errorIcon = document.createElement('div');\n\t\tconst warningIcon = document.createElement('div');\n\t\tconst infoIcon = document.createElement('div');\n\t\tconst error = document.createElement('div');\n\t\tconst warning = document.createElement('div');\n\t\tconst info = document.createElement('div');\n\t\tconst building = document.createElement('div');\n\n\t\tconst errorTitle = (n: number) => nls.localize('totalErrors', \"{0} Errors\", n);\n\t\tconst warningTitle = (n: number) => nls.localize('totalWarnings', \"{0} Warnings\", n);\n\t\tconst infoTitle = (n: number) => nls.localize('totalInfos', \"{0} Infos\", n);\n\n\t\tDom.addClass(element, 'task-statusbar-item');\n\t\telement.title = nls.localize('problems', \"Problems\");\n\n\t\tDom.addClass(label, 'task-statusbar-item-label');\n\t\telement.appendChild(label);\n\n\t\tDom.addClass(errorIcon, 'task-statusbar-item-label-error');\n\t\tDom.addClass(errorIcon, 'mask-icon');\n\t\tlabel.appendChild(errorIcon);\n\t\tthis.icons.push(errorIcon);\n\n\t\tDom.addClass(error, 'task-statusbar-item-label-counter');\n\t\terror.innerHTML = '0';\n\t\terror.title = errorIcon.title = errorTitle(0);\n\t\tlabel.appendChild(error);\n\n\t\tDom.addClass(warningIcon, 'task-statusbar-item-label-warning');\n\t\tDom.addClass(warningIcon, 'mask-icon');\n\t\tlabel.appendChild(warningIcon);\n\t\tthis.icons.push(warningIcon);\n\n\t\tDom.addClass(warning, 'task-statusbar-item-label-counter');\n\t\twarning.innerHTML = '0';\n\t\twarning.title = warningIcon.title = warningTitle(0);\n\t\tlabel.appendChild(warning);\n\n\t\tDom.addClass(infoIcon, 'task-statusbar-item-label-info');\n\t\tDom.addClass(infoIcon, 'mask-icon');\n\t\tlabel.appendChild(infoIcon);\n\t\tthis.icons.push(infoIcon);\n\t\tDom.hide(infoIcon);\n\n\t\tDom.addClass(info, 'task-statusbar-item-label-counter');\n\t\tlabel.appendChild(info);\n\t\tDom.hide(info);\n\n\t\tDom.addClass(building, 'task-statusbar-item-building');\n\t\telement.appendChild(building);\n\t\tbuilding.innerHTML = nls.localize('building', 'Building...');\n\t\tDom.hide(building);\n\n\t\tcallOnDispose.push(Dom.addDisposableListener(label, 'click', (e: MouseEvent) => {\n\t\t\tconst panel = this.panelService.getActivePanel();\n\t\t\tif (panel && panel.getId() === Constants.MARKERS_PANEL_ID) {\n\t\t\t\tthis.layoutService.setPanelHidden(true);\n\t\t\t} else {\n\t\t\t\tthis.panelService.openPanel(Constants.MARKERS_PANEL_ID, true);\n\t\t\t}\n\t\t}));\n\n\t\tconst manyProblems = nls.localize('manyProblems', \"10K+\");\n\t\tconst packNumber = (n: number) => n > 9999 ? manyProblems : n > 999 ? n.toString().charAt(0) + 'K' : n.toString();\n\t\tlet updateLabel = (stats: MarkerStatistics) => {\n\t\t\terror.innerHTML = packNumber(stats.errors);\n\t\t\terror.title = errorIcon.title = errorTitle(stats.errors);\n\t\t\twarning.innerHTML = packNumber(stats.warnings);\n\t\t\twarning.title = warningIcon.title = warningTitle(stats.warnings);\n\t\t\tif (stats.infos > 0) {\n\t\t\t\tinfo.innerHTML = packNumber(stats.infos);\n\t\t\t\tinfo.title = infoIcon.title = infoTitle(stats.infos);\n\t\t\t\tDom.show(info);\n\t\t\t\tDom.show(infoIcon);\n\t\t\t} else {\n\t\t\t\tDom.hide(info);\n\t\t\t\tDom.hide(infoIcon);\n\t\t\t}\n\t\t};\n\n\t\tthis.markerService.onMarkerChanged((changedResources) => {\n\t\t\tupdateLabel(this.markerService.getStatistics());\n\t\t});\n\n\t\tcallOnDispose.push(this.taskService.onDidStateChange((event) => {\n\t\t\tif (this.ignoreEvent(event)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (event.kind) {\n\t\t\t\tcase TaskEventKind.Active:\n\t\t\t\t\tthis.activeCount++;\n\t\t\t\t\tif (this.activeCount === 1) {\n\t\t\t\t\t\tDom.show(building);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase TaskEventKind.Inactive:\n\t\t\t\t\t// Since the exiting of the sub process is communicated async we can't order inactive and terminate events.\n\t\t\t\t\t// So try to treat them accordingly.\n\t\t\t\t\tif (this.activeCount > 0) {\n\t\t\t\t\t\tthis.activeCount--;\n\t\t\t\t\t\tif (this.activeCount === 0) {\n\t\t\t\t\t\t\tDom.hide(building);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase TaskEventKind.Terminated:\n\t\t\t\t\tif (this.activeCount !== 0) {\n\t\t\t\t\t\tDom.hide(building);\n\t\t\t\t\t\tthis.activeCount = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\tcontainer.appendChild(element);\n\n\t\tthis.updateStyles();\n\n\t\treturn toDisposable(() => {\n\t\t\tcallOnDispose = dispose(callOnDispose);\n\t\t});\n\t}\n\n\tprivate ignoreEvent(event: TaskEvent): boolean {\n\t\tif (!this.taskService.inTerminal()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (event.group !== TaskGroup.Build) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!event.__task) {\n\t\t\treturn false;\n\t\t}\n\t\treturn event.__task.configurationProperties.problemMatchers === undefined || event.__task.configurationProperties.problemMatchers.length === 0;\n\t}\n}\n\nclass TaskStatusBarItem extends Themable implements IStatusbarItem {\n\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IThemeService themeService: IThemeService,\n\t) {\n\t\tsuper(themeService);\n\t}\n\n\tprotected updateStyles(): void {\n\t\tsuper.updateStyles();\n\t}\n\n\tpublic render(container: HTMLElement): IDisposable {\n\n\t\tlet callOnDispose: IDisposable[] = [];\n\t\tconst element = document.createElement('a');\n\t\tDom.addClass(element, 'task-statusbar-runningItem');\n\n\t\tlet labelElement = document.createElement('div');\n\t\tDom.addClass(labelElement, 'task-statusbar-runningItem-label');\n\t\telement.appendChild(labelElement);\n\n\t\tlet label = new OcticonLabel(labelElement);\n\t\tlabel.title = nls.localize('runningTasks', \"Show Running Tasks\");\n\n\t\tDom.hide(element);\n\n\t\tcallOnDispose.push(Dom.addDisposableListener(labelElement, 'click', (e: MouseEvent) => {\n\t\t\t(this.taskService as TaskService).runShowTasks();\n\t\t}));\n\n\t\tlet updateStatus = (): void => {\n\t\t\tthis.taskService.getActiveTasks().then(tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tDom.hide(element);\n\t\t\t\t} else {\n\t\t\t\t\tlabel.text = `$(tools) ${tasks.length}`;\n\t\t\t\t\tDom.show(element);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tcallOnDispose.push(this.taskService.onDidStateChange((event) => {\n\t\t\tif (event.kind === TaskEventKind.Changed) {\n\t\t\t\tupdateStatus();\n\t\t\t}\n\t\t}));\n\n\t\tcontainer.appendChild(element);\n\n\t\tthis.updateStyles();\n\t\tupdateStatus();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tcallOnDispose = dispose(callOnDispose);\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass ProblemReporter implements TaskConfig.IProblemReporter {\n\n\tprivate _validationStatus: ValidationStatus;\n\n\tconstructor(private _outputChannel: IOutputChannel) {\n\t\tthis._validationStatus = new ValidationStatus();\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\ninterface WorkspaceFolderConfigurationResult {\n\tworkspaceFolder: IWorkspaceFolder;\n\tconfig: TaskConfig.ExternalTaskRunnerConfiguration | undefined;\n\thasErrors: boolean;\n}\n\ninterface TaskCustomizationTelementryEvent {\n\tproperties: string[];\n}\n\nclass TaskMap {\n\tprivate _store: Map<string, Task[]> = new Map();\n\n\tconstructor() {\n\t}\n\n\tpublic forEach(callback: (value: Task[], folder: string) => void): void {\n\t\tthis._store.forEach(callback);\n\t}\n\n\tpublic get(workspaceFolder: IWorkspaceFolder | string): Task[] {\n\t\tlet result: Task[] | undefined = Types.isString(workspaceFolder) ? this._store.get(workspaceFolder) : this._store.get(workspaceFolder.uri.toString());\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tTypes.isString(workspaceFolder) ? this._store.set(workspaceFolder, result) : this._store.set(workspaceFolder.uri.toString(), result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic add(workspaceFolder: IWorkspaceFolder | string, ...task: Task[]): void {\n\t\tlet values = Types.isString(workspaceFolder) ? this._store.get(workspaceFolder) : this._store.get(workspaceFolder.uri.toString());\n\t\tif (!values) {\n\t\t\tvalues = [];\n\t\t\tTypes.isString(workspaceFolder) ? this._store.set(workspaceFolder, values) : this._store.set(workspaceFolder.uri.toString(), values);\n\t\t}\n\t\tvalues.push(...task);\n\t}\n\n\tpublic all(): Task[] {\n\t\tlet result: Task[] = [];\n\t\tthis._store.forEach((values) => result.push(...values));\n\t\treturn result;\n\t}\n}\n\ninterface TaskQuickPickEntry extends IQuickPickItem {\n\ttask: Task | undefined | null;\n}\n\nclass TaskService extends Disposable implements ITaskService {\n\n\t// private static autoDetectTelemetryName: string = 'taskServer.autoDetect';\n\tprivate static readonly RecentlyUsedTasks_Key = 'workbench.tasks.recentlyUsedTasks';\n\tprivate static readonly IgnoreTask010DonotShowAgain_key = 'workbench.tasks.ignoreTask010Shown';\n\n\tprivate static CustomizationTelemetryEventName: string = 'taskService.customize';\n\tpublic static TemplateTelemetryEventName: string = 'taskService.template';\n\n\tpublic _serviceBrand: any;\n\tpublic static OutputChannelId: string = 'tasks';\n\tpublic static OutputChannelLabel: string = nls.localize('tasks', \"Tasks\");\n\n\tprivate static nextHandle: number = 0;\n\n\tprivate _configHasErrors: boolean;\n\tprivate _schemaVersion: JsonSchemaVersion;\n\tprivate _executionEngine: ExecutionEngine;\n\tprivate _workspaceFolders: IWorkspaceFolder[];\n\tprivate _ignoredWorkspaceFolders: IWorkspaceFolder[];\n\tprivate _showIgnoreMessage?: boolean;\n\tprivate _providers: Map<number, ITaskProvider>;\n\tprivate _taskSystemInfos: Map<string, TaskSystemInfo>;\n\n\tprivate _workspaceTasksPromise?: Promise<Map<string, WorkspaceFolderTaskResult>>;\n\n\tprivate _taskSystem?: ITaskSystem;\n\tprivate _taskSystemListener?: IDisposable;\n\tprivate _recentlyUsedTasks: LinkedMap<string, string>;\n\n\tprivate _taskRunningState: IContextKey<boolean>;\n\n\tprivate _outputChannel: IOutputChannel;\n\tprivate readonly _onDidStateChange: Emitter<TaskEvent>;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IConfigurationResolverService private readonly configurationResolverService: IConfigurationResolverService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IProgressService2 private readonly progressService: IProgressService2,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IWindowService private readonly _windowService: IWindowService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\n\t\tthis._configHasErrors = false;\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._taskSystem = undefined;\n\t\tthis._taskSystemListener = undefined;\n\t\tthis._outputChannel = this.outputService.getChannel(TaskService.OutputChannelId)!;\n\t\tthis._providers = new Map<number, ITaskProvider>();\n\t\tthis._taskSystemInfos = new Map<string, TaskSystemInfo>();\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tif (!this._taskSystem && !this._workspaceTasksPromise) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet folderSetup = this.computeWorkspaceFolderSetup();\n\t\t\tif (this.executionEngine !== folderSetup[2]) {\n\t\t\t\tif (this._taskSystem && this._taskSystem.getActiveTasks().length > 0) {\n\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t'TaskSystem.noHotSwap',\n\t\t\t\t\t\t\t'Changing the task execution engine with an active task running requires to reload the Window'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\t\trun: () => this._windowService.reloadWindow()\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tthis.disposeTaskSystemListeners();\n\t\t\t\t\tthis._taskSystem = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.updateSetup(folderSetup);\n\t\t\tthis.updateWorkspaceTasks();\n\t\t}));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(() => {\n\t\t\tif (!this._taskSystem && !this._workspaceTasksPromise) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._taskSystem || this._taskSystem instanceof TerminalTaskSystem) {\n\t\t\t\tthis._outputChannel.clear();\n\t\t\t}\n\t\t\tthis.updateWorkspaceTasks(TaskRunSource.ConfigurationChange);\n\t\t}));\n\t\tthis._taskRunningState = TASK_RUNNING_STATE.bindTo(contextKeyService);\n\t\tthis._register(lifecycleService.onBeforeShutdown(event => event.veto(this.beforeShutdown())));\n\t\tthis._register(storageService.onWillSaveState(() => this.saveState()));\n\t\tthis._onDidStateChange = this._register(new Emitter());\n\t\tthis.registerCommands();\n\t}\n\n\tpublic get onDidStateChange(): Event<TaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic get supportsMultipleTaskExecutions(): boolean {\n\t\treturn this.inTerminal();\n\t}\n\n\tprivate registerCommands(): void {\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: 'workbench.action.tasks.runTask',\n\t\t\thandler: (accessor, arg) => {\n\t\t\t\tthis.runTaskCommand(arg);\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Run Task',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.reRunTask', (accessor, arg) => {\n\t\t\tthis.reRunTaskCommand(arg);\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.restartTask', (accessor, arg) => {\n\t\t\tthis.runRestartTaskCommand(arg);\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.terminate', (accessor, arg) => {\n\t\t\tthis.runTerminateCommand(arg);\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showLog', () => {\n\t\t\tif (!this.canRunCommand()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.showOutput();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.build', () => {\n\t\t\tif (!this.canRunCommand()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runBuildCommand();\n\t\t});\n\n\t\tKeybindingsRegistry.registerKeybindingRule({\n\t\t\tid: 'workbench.action.tasks.build',\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: undefined,\n\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_B\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.test', () => {\n\t\t\tif (!this.canRunCommand()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runTestCommand();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureTaskRunner', () => {\n\t\t\tthis.runConfigureTasks();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultBuildTask', () => {\n\t\t\tthis.runConfigureDefaultBuildTask();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultTestTask', () => {\n\t\t\tthis.runConfigureDefaultTestTask();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showTasks', () => {\n\t\t\tthis.runShowTasks();\n\t\t});\n\t}\n\n\tprivate get workspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._workspaceFolders) {\n\t\t\tthis.updateSetup();\n\t\t}\n\t\treturn this._workspaceFolders;\n\t}\n\n\tprivate get ignoredWorkspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._ignoredWorkspaceFolders) {\n\t\t\tthis.updateSetup();\n\t\t}\n\t\treturn this._ignoredWorkspaceFolders;\n\t}\n\n\tprivate get executionEngine(): ExecutionEngine {\n\t\tif (this._executionEngine === undefined) {\n\t\t\tthis.updateSetup();\n\t\t}\n\t\treturn this._executionEngine;\n\t}\n\n\tprivate get schemaVersion(): JsonSchemaVersion {\n\t\tif (this._schemaVersion === undefined) {\n\t\t\tthis.updateSetup();\n\t\t}\n\t\treturn this._schemaVersion;\n\t}\n\n\tprivate get showIgnoreMessage(): boolean {\n\t\tif (this._showIgnoreMessage === undefined) {\n\t\t\tthis._showIgnoreMessage = !this.storageService.getBoolean(TaskService.IgnoreTask010DonotShowAgain_key, StorageScope.WORKSPACE, false);\n\t\t}\n\t\treturn this._showIgnoreMessage;\n\t}\n\n\tprivate updateSetup(setup?: [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion]): void {\n\t\tif (!setup) {\n\t\t\tsetup = this.computeWorkspaceFolderSetup();\n\t\t}\n\t\tthis._workspaceFolders = setup[0];\n\t\tif (this._ignoredWorkspaceFolders) {\n\t\t\tif (this._ignoredWorkspaceFolders.length !== setup[1].length) {\n\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t} else {\n\t\t\t\tlet set: Set<string> = new Set();\n\t\t\t\tthis._ignoredWorkspaceFolders.forEach(folder => set.add(folder.uri.toString()));\n\t\t\t\tfor (let folder of setup[1]) {\n\t\t\t\t\tif (!set.has(folder.uri.toString())) {\n\t\t\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ignoredWorkspaceFolders = setup[1];\n\t\tthis._executionEngine = setup[2];\n\t\tthis._schemaVersion = setup[3];\n\t}\n\n\tprivate showOutput(runSource: TaskRunSource = TaskRunSource.User): void {\n\t\tif (runSource === TaskRunSource.User) {\n\t\t\tthis.notificationService.prompt(Severity.Warning, nls.localize('taskServiceOutputPrompt', 'There are task errors. See the output for details.'),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('showOutput', \"Show output\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.outputService.showChannel(this._outputChannel.id, true);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\t\t}\n\t}\n\n\tprivate disposeTaskSystemListeners(): void {\n\t\tif (this._taskSystemListener) {\n\t\t\tthis._taskSystemListener.dispose();\n\t\t}\n\t}\n\n\tpublic registerTaskProvider(provider: ITaskProvider): IDisposable {\n\t\tif (!provider) {\n\t\t\treturn {\n\t\t\t\tdispose: () => { }\n\t\t\t};\n\t\t}\n\t\tlet handle = TaskService.nextHandle++;\n\t\tthis._providers.set(handle, provider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(handle);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic registerTaskSystem(key: string, info: TaskSystemInfo): void {\n\t\tthis._taskSystemInfos.set(key, info);\n\t}\n\n\tpublic extensionCallbackTaskComplete(task: Task, result: number): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn this._taskSystem.customExecutionComplete(task, result);\n\t}\n\n\tpublic getTask(folder: IWorkspaceFolder | string, identifier: string | TaskIdentifier, compareId: boolean = false): Promise<Task | undefined> {\n\t\tconst name = Types.isString(folder) ? folder : folder.name;\n\t\tif (this.ignoredWorkspaceFolders.some(ignored => ignored.name === name)) {\n\t\t\treturn Promise.reject(new Error(nls.localize('TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name)));\n\t\t}\n\t\tconst key: string | KeyedTaskIdentifier | undefined = !Types.isString(identifier)\n\t\t\t? TaskDefinition.createTaskIdentifier(identifier, console)\n\t\t\t: identifier;\n\n\t\tif (key === undefined) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn this.getGroupedTasks().then((map) => {\n\t\t\tconst values = map.get(folder);\n\t\t\tif (!values) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tfor (const task of values) {\n\t\t\t\tif (task.matches(key, compareId)) {\n\t\t\t\t\treturn task;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic tasks(filter?: TaskFilter): Promise<Task[]> {\n\t\tlet range = filter && filter.version ? filter.version : undefined;\n\t\tlet engine = this.executionEngine;\n\n\t\tif (range && ((semver.satisfies('0.1.0', range) && engine === ExecutionEngine.Terminal) || (semver.satisfies('2.0.0', range) && engine === ExecutionEngine.Process))) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\t\treturn this.getGroupedTasks().then((map) => {\n\t\t\tif (!filter || !filter.type) {\n\t\t\t\treturn map.all();\n\t\t\t}\n\t\t\tlet result: Task[] = [];\n\t\t\tmap.forEach((tasks) => {\n\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\tif (ContributedTask.is(task) && task.defines.type === filter.type) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet customizes = task.customizes();\n\t\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic createSorter(): TaskSorter {\n\t\treturn new TaskSorter(this.contextService.getWorkspace() ? this.contextService.getWorkspace().folders : []);\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\treturn this._taskSystem.isActive();\n\t}\n\n\tpublic getActiveTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve([]);\n\t\t}\n\t\treturn Promise.resolve(this._taskSystem.getActiveTasks());\n\t}\n\n\tpublic getRecentlyUsedTasks(): LinkedMap<string, string> {\n\t\tif (this._recentlyUsedTasks) {\n\t\t\treturn this._recentlyUsedTasks;\n\t\t}\n\t\tthis._recentlyUsedTasks = new LinkedMap<string, string>();\n\t\tlet storageValue = this.storageService.get(TaskService.RecentlyUsedTasks_Key, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tlet values: string[] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasks.set(value, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasks;\n\t}\n\n\tprivate saveState(): void {\n\t\tif (!this._taskSystem || !this._recentlyUsedTasks) {\n\t\t\treturn;\n\t\t}\n\t\tlet values = this._recentlyUsedTasks.values();\n\t\tif (values.length > 30) {\n\t\t\tvalues = values.slice(0, 30);\n\t\t}\n\t\tthis.storageService.store(TaskService.RecentlyUsedTasks_Key, JSON.stringify(values), StorageScope.WORKSPACE);\n\t}\n\n\tprivate openDocumentation(): void {\n\t\tthis.openerService.open(URI.parse('https://go.microsoft.com/fwlink/?LinkId=733558'));\n\t}\n\n\tpublic build(): Promise<ITaskSummary> {\n\t\treturn this.getGroupedTasks().then((tasks) => {\n\t\t\tlet runnable = this.createRunnableTask(tasks, TaskGroup.Build);\n\t\t\tif (!runnable || !runnable.task) {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask1', 'No build task defined. Mark a task with \\'isBuildCommand\\' in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \\'build\\' group in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.executeTask(runnable.task, runnable.resolver);\n\t\t}).then(value => value, (error) => {\n\t\t\tthis.handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tpublic runTest(): Promise<ITaskSummary> {\n\t\treturn this.getGroupedTasks().then((tasks) => {\n\t\t\tlet runnable = this.createRunnableTask(tasks, TaskGroup.Test);\n\t\t\tif (!runnable || !runnable.task) {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask1', 'No test task defined. Mark a task with \\'isTestCommand\\' in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask2', 'No test task defined. Mark a task with as a \\'test\\' group in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.executeTask(runnable.task, runnable.resolver);\n\t\t}).then(value => value, (error) => {\n\t\t\tthis.handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tpublic run(task: Task | undefined, options?: ProblemMatcherRunOptions, runSource: TaskRunSource = TaskRunSource.System): Promise<ITaskSummary> {\n\t\tif (!task) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskServer.noTask', 'Task to execute is undefined'), TaskErrors.TaskNotFound);\n\t\t}\n\t\treturn this.getGroupedTasks().then((grouped) => {\n\t\t\tlet resolver = this.createResolver(grouped);\n\t\t\tif (options && options.attachProblemMatcher && this.shouldAttachProblemMatcher(task) && !InMemoryTask.is(task)) {\n\t\t\t\treturn this.attachProblemMatcher(task).then((toExecute) => {\n\t\t\t\t\tif (toExecute) {\n\t\t\t\t\t\treturn this.executeTask(toExecute, resolver);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn this.executeTask(task, resolver);\n\t\t}).then((value) => {\n\t\t\tif (runSource === TaskRunSource.User) {\n\t\t\t\tthis.getWorkspaceTasks().then(workspaceTasks => {\n\t\t\t\t\tRunAutomaticTasks.promptForPermission(this, this.storageService, this.notificationService, workspaceTasks);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn value;\n\t\t}, (error) => {\n\t\t\tthis.handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t});\n\t}\n\n\tprivate shouldAttachProblemMatcher(task: Task): boolean {\n\t\tif (!this.canCustomize(task)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.group !== undefined && task.configurationProperties.group !== TaskGroup.Build) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers !== undefined && task.configurationProperties.problemMatchers.length > 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !task.hasDefinedMatchers && !!task.configurationProperties.problemMatchers && (task.configurationProperties.problemMatchers.length === 0);\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\tlet configProperties: TaskConfig.ConfigurationProperties = task._source.config.element;\n\t\t\treturn configProperties.problemMatcher === undefined && !task.hasDefinedMatchers;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate attachProblemMatcher(task: ContributedTask | CustomTask): Promise<Task | undefined> {\n\t\tinterface ProblemMatcherPickEntry extends IQuickPickItem {\n\t\t\tmatcher: NamedProblemMatcher | undefined;\n\t\t\tnever?: boolean;\n\t\t\tlearnMore?: boolean;\n\t\t}\n\t\tlet entries: QuickPickInput<ProblemMatcherPickEntry>[] = [];\n\t\tfor (let key of ProblemMatcherRegistry.keys()) {\n\t\t\tlet matcher = ProblemMatcherRegistry.get(key);\n\t\t\tif (matcher.deprecated) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (matcher.name === matcher.label) {\n\t\t\t\tentries.push({ label: matcher.name, matcher: matcher });\n\t\t\t} else {\n\t\t\t\tentries.push({\n\t\t\t\t\tlabel: matcher.label,\n\t\t\t\t\tdescription: `$${matcher.name}`,\n\t\t\t\t\tmatcher: matcher\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (entries.length > 0) {\n\t\t\tentries = entries.sort((a, b) => {\n\t\t\t\tif (a.label && b.label) {\n\t\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\t\t\tentries.unshift({ type: 'separator', label: nls.localize('TaskService.associate', 'associate') });\n\t\t\tentries.unshift(\n\t\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'), matcher: undefined },\n\t\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.never', 'Never scan the task output'), matcher: undefined, never: true },\n\t\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'), matcher: undefined, learnMore: true }\n\t\t\t);\n\t\t\treturn this.quickInputService.pick(entries, {\n\t\t\t\tplaceHolder: nls.localize('selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output'),\n\t\t\t}).then((selected) => {\n\t\t\t\tif (selected) {\n\t\t\t\t\tif (selected.learnMore) {\n\t\t\t\t\t\tthis.openDocumentation();\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else if (selected.never) {\n\t\t\t\t\t\tthis.customize(task, { problemMatcher: [] }, true);\n\t\t\t\t\t\treturn task;\n\t\t\t\t\t} else if (selected.matcher) {\n\t\t\t\t\t\tlet newTask = task.clone();\n\t\t\t\t\t\tlet matcherReference = `$${selected.matcher.name}`;\n\t\t\t\t\t\tlet properties: CustomizationProperties = { problemMatcher: [matcherReference] };\n\t\t\t\t\t\tnewTask.configurationProperties.problemMatchers = [matcherReference];\n\t\t\t\t\t\tlet matcher = ProblemMatcherRegistry.get(selected.matcher.name);\n\t\t\t\t\t\tif (matcher && matcher.watching !== undefined) {\n\t\t\t\t\t\t\tproperties.isBackground = true;\n\t\t\t\t\t\t\tnewTask.configurationProperties.isBackground = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.customize(task, properties, true);\n\t\t\t\t\t\treturn newTask;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn task;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(task);\n\t}\n\n\tpublic getTasksForGroup(group: string): Promise<Task[]> {\n\t\treturn this.getGroupedTasks().then((groups) => {\n\t\t\tlet result: Task[] = [];\n\t\t\tgroups.forEach((tasks) => {\n\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\tif (task.configurationProperties.group === group) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic needsFolderQualification(): boolean {\n\t\treturn this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t}\n\n\tpublic canCustomize(task: Task): boolean {\n\t\tif (this.schemaVersion !== JsonSchemaVersion.V2_0_0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !!task.getWorkspaceFolder();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic customize(task: ContributedTask | CustomTask, properties?: CustomizationProperties, openConfig?: boolean): Promise<void> {\n\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\tif (!workspaceFolder) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tlet configuration = this.getConfiguration(workspaceFolder);\n\t\tif (configuration.hasParseErrors) {\n\t\t\tthis.notificationService.warn(nls.localize('customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.'));\n\t\t\treturn Promise.resolve<void>(undefined);\n\t\t}\n\n\t\tlet fileConfig = configuration.config;\n\t\tlet index: number | undefined;\n\t\tlet toCustomize: TaskConfig.CustomTask | TaskConfig.ConfiguringTask | undefined;\n\t\tlet taskConfig = CustomTask.is(task) ? task._source.config : undefined;\n\t\tif (taskConfig && taskConfig.element) {\n\t\t\tindex = taskConfig.index;\n\t\t\ttoCustomize = taskConfig.element;\n\t\t} else if (ContributedTask.is(task)) {\n\t\t\ttoCustomize = {\n\t\t\t};\n\t\t\tlet identifier: TaskConfig.TaskIdentifier = Objects.assign(Object.create(null), task.defines);\n\t\t\tdelete identifier['_key'];\n\t\t\tObject.keys(identifier).forEach(key => toCustomize![key] = identifier[key]);\n\t\t\tif (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length > 0 && Types.isStringArray(task.configurationProperties.problemMatchers)) {\n\t\t\t\ttoCustomize.problemMatcher = task.configurationProperties.problemMatchers;\n\t\t\t}\n\t\t}\n\t\tif (!toCustomize) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tif (properties) {\n\t\t\tfor (let property of Object.getOwnPropertyNames(properties)) {\n\t\t\t\tlet value = properties[property];\n\t\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\t\ttoCustomize[property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (toCustomize.problemMatcher === undefined && task.configurationProperties.problemMatchers === undefined || (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length === 0)) {\n\t\t\t\ttoCustomize.problemMatcher = [];\n\t\t\t}\n\t\t}\n\n\t\tlet promise: Promise<void> | undefined;\n\t\tif (!fileConfig) {\n\t\t\tlet value = {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\ttasks: [toCustomize]\n\t\t\t};\n\t\t\tlet content = [\n\t\t\t\t'{',\n\t\t\t\tnls.localize('tasksJsonComment', '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format'),\n\t\t\t].join('\\n') + JSON.stringify(value, null, '\\t').substr(1);\n\t\t\tlet editorConfig = this.configurationService.getValue<any>();\n\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.editor.tabSize));\n\t\t\t}\n\t\t\tpromise = this.fileService.createFile(workspaceFolder.toResource('.vscode/tasks.json'), content).then(() => { });\n\t\t} else {\n\t\t\t// We have a global task configuration\n\t\t\tif ((index === -1) && properties) {\n\t\t\t\tif (properties.problemMatcher !== undefined) {\n\t\t\t\t\tfileConfig.problemMatcher = properties.problemMatcher;\n\t\t\t\t\tpromise = this.writeConfiguration(workspaceFolder, 'tasks.problemMatchers', fileConfig.problemMatcher);\n\t\t\t\t} else if (properties.group !== undefined) {\n\t\t\t\t\tfileConfig.group = properties.group;\n\t\t\t\t\tpromise = this.writeConfiguration(workspaceFolder, 'tasks.group', fileConfig.group);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!Array.isArray(fileConfig.tasks)) {\n\t\t\t\t\tfileConfig.tasks = [];\n\t\t\t\t}\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\tfileConfig.tasks.push(toCustomize);\n\t\t\t\t} else {\n\t\t\t\t\tfileConfig.tasks[index] = toCustomize;\n\t\t\t\t}\n\t\t\t\tpromise = this.writeConfiguration(workspaceFolder, 'tasks.tasks', fileConfig.tasks);\n\t\t\t}\n\t\t}\n\t\tif (!promise) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\treturn promise.then(() => {\n\t\t\tlet event: TaskCustomizationTelementryEvent = {\n\t\t\t\tproperties: properties ? Object.getOwnPropertyNames(properties) : []\n\t\t\t};\n\t\t\t/* __GDPR__\n\t\t\t\t\"taskService.customize\" : {\n\t\t\t\t\t\"properties\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog(TaskService.CustomizationTelemetryEventName, event);\n\t\t\tif (openConfig) {\n\t\t\t\tlet resource = workspaceFolder.toResource('.vscode/tasks.json');\n\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\tresource,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: false,\n\t\t\t\t\t\tforceReload: true // because content might have changed\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate writeConfiguration(workspaceFolder: IWorkspaceFolder, key: string, value: any): Promise<void> | undefined {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\treturn this.configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, ConfigurationTarget.WORKSPACE);\n\t\t} else if (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic openConfig(task: CustomTask | undefined): Promise<void> {\n\t\tlet resource: URI | undefined;\n\t\tif (task) {\n\t\t\tresource = task.getWorkspaceFolder().toResource(task._source.config.file);\n\t\t} else {\n\t\t\tresource = (this._workspaceFolders && (this._workspaceFolders.length > 0)) ? this._workspaceFolders[0].toResource('.vscode/tasks.json') : undefined;\n\t\t}\n\t\treturn this.editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tpinned: false\n\t\t\t}\n\t\t}).then(() => undefined);\n\t}\n\n\tprivate createRunnableTask(tasks: TaskMap, group: TaskGroup): { task: Task; resolver: ITaskResolver } | undefined {\n\t\tinterface ResolverData {\n\t\t\tid: Map<string, Task>;\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t}\n\n\t\tlet resolverData: Map<string, ResolverData> = new Map();\n\t\tlet workspaceTasks: Task[] = [];\n\t\tlet extensionTasks: Task[] = [];\n\t\ttasks.forEach((tasks, folder) => {\n\t\t\tlet data = resolverData.get(folder);\n\t\t\tif (!data) {\n\t\t\t\tdata = {\n\t\t\t\t\tid: new Map<string, Task>(),\n\t\t\t\t\tlabel: new Map<string, Task>(),\n\t\t\t\t\tidentifier: new Map<string, Task>()\n\t\t\t\t};\n\t\t\t\tresolverData.set(folder, data);\n\t\t\t}\n\t\t\tfor (let task of tasks) {\n\t\t\t\tdata.id.set(task._id, task);\n\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t}\n\t\t\t\tif (group && task.configurationProperties.group === group) {\n\t\t\t\t\tif (task._source.kind === TaskSourceKind.Workspace) {\n\t\t\t\t\t\tworkspaceTasks.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensionTasks.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlet resolver: ITaskResolver = {\n\t\t\tresolve: (workspaceFolder: IWorkspaceFolder, alias: string) => {\n\t\t\t\tlet data = resolverData.get(workspaceFolder.uri.toString());\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn data.id.get(alias) || data.label.get(alias) || data.identifier.get(alias);\n\t\t\t}\n\t\t};\n\t\tif (workspaceTasks.length > 0) {\n\t\t\tif (workspaceTasks.length > 1) {\n\t\t\t\tthis._outputChannel.append(nls.localize('moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.\\n'));\n\t\t\t}\n\t\t\treturn { task: workspaceTasks[0], resolver };\n\t\t}\n\t\tif (extensionTasks.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We can only have extension tasks if we are in version 2.0.0. Then we can even run\n\t\t// multiple build tasks.\n\t\tif (extensionTasks.length === 1) {\n\t\t\treturn { task: extensionTasks[0], resolver };\n\t\t} else {\n\t\t\tlet id: string = UUID.generateUuid();\n\t\t\tlet task: InMemoryTask = new InMemoryTask(\n\t\t\t\tid,\n\t\t\t\t{ kind: TaskSourceKind.InMemory, label: 'inMemory' },\n\t\t\t\tid,\n\t\t\t\t'inMemory',\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tidentifier: id,\n\t\t\t\t\tdependsOn: extensionTasks.map((extensionTask) => { return { workspaceFolder: extensionTask.getWorkspaceFolder()!, task: extensionTask._id }; }),\n\t\t\t\t\tname: id,\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn { task, resolver };\n\t\t}\n\t}\n\n\tprivate createResolver(grouped: TaskMap): ITaskResolver {\n\t\tinterface ResolverData {\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t\ttaskIdentifier: Map<string, Task>;\n\t\t}\n\n\t\tlet resolverData: Map<string, ResolverData> = new Map();\n\t\tgrouped.forEach((tasks, folder) => {\n\t\t\tlet data = resolverData.get(folder);\n\t\t\tif (!data) {\n\t\t\t\tdata = { label: new Map<string, Task>(), identifier: new Map<string, Task>(), taskIdentifier: new Map<string, Task>() };\n\t\t\t\tresolverData.set(folder, data);\n\t\t\t}\n\t\t\tfor (let task of tasks) {\n\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t}\n\t\t\t\tlet keyedIdentifier = task.getDefinition(true);\n\t\t\t\tif (keyedIdentifier !== undefined) {\n\t\t\t\t\tdata.taskIdentifier.set(keyedIdentifier._key, task);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn {\n\t\t\tresolve: (workspaceFolder: IWorkspaceFolder, identifier: string | TaskIdentifier | undefined) => {\n\t\t\t\tlet data = resolverData.get(workspaceFolder.uri.toString());\n\t\t\t\tif (!data || !identifier) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(identifier)) {\n\t\t\t\t\treturn data.label.get(identifier) || data.identifier.get(identifier);\n\t\t\t\t} else {\n\t\t\t\t\tlet key = TaskDefinition.createTaskIdentifier(identifier, console);\n\t\t\t\t\treturn key !== undefined ? data.taskIdentifier.get(key._key) : undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate executeTask(task: Task, resolver: ITaskResolver): Promise<ITaskSummary> {\n\t\treturn ProblemMatcherRegistry.onReady().then(() => {\n\t\t\treturn this.textFileService.saveAll().then((value) => { // make sure all dirty files are saved\n\t\t\t\tlet executeResult = this.getTaskSystem().run(task, resolver);\n\t\t\t\treturn this.handleExecuteResult(executeResult);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate handleExecuteResult(executeResult: ITaskExecuteResult): Promise<ITaskSummary> {\n\t\tif (executeResult.task.taskLoadMessages && executeResult.task.taskLoadMessages.length > 0) {\n\t\t\texecuteResult.task.taskLoadMessages.forEach(loadMessage => {\n\t\t\t\tthis._outputChannel.append(loadMessage + '\\n');\n\t\t\t});\n\t\t\tthis.showOutput();\n\t\t}\n\n\t\tlet key = executeResult.task.getRecentlyUsedKey();\n\t\tif (key) {\n\t\t\tthis.getRecentlyUsedTasks().set(key, key, Touch.AsOld);\n\t\t}\n\t\tif (executeResult.kind === TaskExecuteKind.Active) {\n\t\t\tlet active = executeResult.active;\n\t\t\tif (active && active.same) {\n\t\t\t\tlet message;\n\t\t\t\tif (active.background) {\n\t\t\t\t\tmessage = nls.localize('TaskSystem.activeSame.background', 'The task \\'{0}\\' is already active and in background mode.', executeResult.task.getQualifiedLabel());\n\t\t\t\t} else {\n\t\t\t\t\tmessage = nls.localize('TaskSystem.activeSame.noBackground', 'The task \\'{0}\\' is already active.', executeResult.task.getQualifiedLabel());\n\t\t\t\t}\n\t\t\t\tthis.notificationService.prompt(Severity.Info, message,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('terminateTask', \"Terminate Task\"),\n\t\t\t\t\t\trun: () => this.terminate(executeResult.task)\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('restartTask', \"Restart Task\"),\n\t\t\t\t\t\trun: () => this.restart(executeResult.task)\n\t\t\t\t\t}],\n\t\t\t\t\t{ sticky: true }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow new TaskError(Severity.Warning, nls.localize('TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), TaskErrors.RunningTask);\n\t\t\t}\n\t\t}\n\t\treturn executeResult.promise;\n\t}\n\n\tpublic restart(task: Task): void {\n\t\tif (!this._taskSystem) {\n\t\t\treturn;\n\t\t}\n\t\tthis._taskSystem.terminate(task).then((response) => {\n\t\t\tif (response.success) {\n\t\t\t\tthis.run(task).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.notificationService.warn(nls.localize('TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name));\n\t\t\t}\n\t\t\treturn response;\n\t\t});\n\t}\n\n\tpublic terminate(task: Task): Promise<TaskTerminateResponse> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve({ success: true, task: undefined });\n\t\t}\n\t\treturn this._taskSystem.terminate(task);\n\t}\n\n\tpublic terminateAll(): Promise<TaskTerminateResponse[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve<TaskTerminateResponse[]>([]);\n\t\t}\n\t\treturn this._taskSystem.terminateAll();\n\t}\n\n\tprivate getTaskSystem(): ITaskSystem {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem;\n\t\t}\n\t\tif (this.executionEngine === ExecutionEngine.Terminal) {\n\t\t\tthis._taskSystem = new TerminalTaskSystem(\n\t\t\t\tthis.terminalService, this.outputService, this.markerService,\n\t\t\t\tthis.modelService, this.configurationResolverService, this.telemetryService,\n\t\t\t\tthis.contextService, this._windowService,\n\t\t\t\tTaskService.OutputChannelId,\n\t\t\t\t(workspaceFolder: IWorkspaceFolder) => {\n\t\t\t\t\tif (!workspaceFolder) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._taskSystemInfos.get(workspaceFolder.uri.scheme);\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tlet system = new ProcessTaskSystem(\n\t\t\t\tthis.markerService, this.modelService, this.telemetryService, this.outputService,\n\t\t\t\tthis.configurationResolverService, TaskService.OutputChannelId,\n\t\t\t);\n\t\t\tsystem.hasErrors(this._configHasErrors);\n\t\t\tthis._taskSystem = system;\n\t\t}\n\t\tthis._taskSystemListener = this._taskSystem!.onDidStateChange((event) => {\n\t\t\tif (this._taskSystem) {\n\t\t\t\tthis._taskRunningState.set(this._taskSystem.isActiveSync());\n\t\t\t}\n\t\t\tthis._onDidStateChange.fire(event);\n\t\t});\n\t\treturn this._taskSystem!;\n\t}\n\n\tprivate getGroupedTasks(): Promise<TaskMap> {\n\t\treturn Promise.all([this.extensionService.activateByEvent('onCommand:workbench.action.tasks.runTask'), TaskDefinitionRegistry.onReady()]).then(() => {\n\t\t\tlet validTypes: IStringDictionary<boolean> = Object.create(null);\n\t\t\tTaskDefinitionRegistry.all().forEach(definition => validTypes[definition.taskType] = true);\n\t\t\tvalidTypes['shell'] = true;\n\t\t\tvalidTypes['process'] = true;\n\t\t\treturn new Promise<TaskSet[]>(resolve => {\n\t\t\t\tlet result: TaskSet[] = [];\n\t\t\t\tlet counter: number = 0;\n\t\t\t\tlet done = (value: TaskSet) => {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tresult.push(value);\n\t\t\t\t\t}\n\t\t\t\t\tif (--counter === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tlet error = (error: any) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (error && Types.isString(error.message)) {\n\t\t\t\t\t\t\tthis._outputChannel.append('Error: ');\n\t\t\t\t\t\t\tthis._outputChannel.append(error.message);\n\t\t\t\t\t\t\tthis._outputChannel.append('\\n');\n\t\t\t\t\t\t\tthis.showOutput();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._outputChannel.append('Unknown error received while collecting tasks from providers.\\n');\n\t\t\t\t\t\t\tthis.showOutput();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (--counter === 0) {\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0 && this._providers.size > 0) {\n\t\t\t\t\tthis._providers.forEach((provider) => {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tprovider.provideTasks(validTypes).then(done, error);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}).then((contributedTaskSets) => {\n\t\t\tlet result: TaskMap = new TaskMap();\n\t\t\tlet contributedTasks: TaskMap = new TaskMap();\n\t\t\tfor (let set of contributedTaskSets) {\n\t\t\t\tfor (let task of set.tasks) {\n\t\t\t\t\tlet workspaceFolder = task.getWorkspaceFolder();\n\t\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\t\tcontributedTasks.add(workspaceFolder, task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.getWorkspaceTasks().then((customTasks) => {\n\t\t\t\tcustomTasks.forEach((folderTasks, key) => {\n\t\t\t\t\tlet contributed = contributedTasks.get(key);\n\t\t\t\t\tif (!folderTasks.set) {\n\t\t\t\t\t\tif (contributed) {\n\t\t\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!contributed) {\n\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet configurations = folderTasks.configurations;\n\t\t\t\t\t\tlet legacyTaskConfigurations = folderTasks.set ? this.getLegacyTaskConfigurations(folderTasks.set) : undefined;\n\t\t\t\t\t\tlet customTasksToDelete: Task[] = [];\n\t\t\t\t\t\tif (configurations || legacyTaskConfigurations) {\n\t\t\t\t\t\t\tlet unUsedConfigurations: Set<string> = new Set<string>();\n\t\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\t\tObject.keys(configurations.byIdentifier).forEach(key => unUsedConfigurations.add(key));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (let task of contributed) {\n\t\t\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\t\t\tlet configuringTask = configurations.byIdentifier[task.defines._key];\n\t\t\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\t\t\tunUsedConfigurations.delete(task.defines._key);\n\t\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (legacyTaskConfigurations) {\n\t\t\t\t\t\t\t\t\tlet configuringTask = legacyTaskConfigurations[task.defines._key];\n\t\t\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t\t\t\tcustomTasksToDelete.push(configuringTask);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (customTasksToDelete.length > 0) {\n\t\t\t\t\t\t\t\tlet toDelete = customTasksToDelete.reduce<IStringDictionary<boolean>>((map, task) => {\n\t\t\t\t\t\t\t\t\tmap[task._id] = true;\n\t\t\t\t\t\t\t\t\treturn map;\n\t\t\t\t\t\t\t\t}, Object.create(null));\n\t\t\t\t\t\t\t\tfor (let task of folderTasks.set.tasks) {\n\t\t\t\t\t\t\t\t\tif (toDelete[task._id]) {\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tunUsedConfigurations.forEach((value) => {\n\t\t\t\t\t\t\t\tlet configuringTask = configurations!.byIdentifier[value];\n\t\t\t\t\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t\t\t\t\t'TaskService.noConfiguration',\n\t\t\t\t\t\t\t\t\t'Error: The {0} task detection didn\\'t contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.\\n',\n\t\t\t\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t\t\t\t\tJSON.stringify(configuringTask._source.config.element, undefined, 4)\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\tthis.showOutput();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t}, () => {\n\t\t\t\t// If we can't read the tasks.json file provide at least the contributed tasks\n\t\t\t\tlet result: TaskMap = new TaskMap();\n\t\t\t\tfor (let set of contributedTaskSets) {\n\t\t\t\t\tfor (let task of set.tasks) {\n\t\t\t\t\t\tconst folder = task.getWorkspaceFolder();\n\t\t\t\t\t\tif (folder) {\n\t\t\t\t\t\t\tresult.add(folder, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate getLegacyTaskConfigurations(workspaceTasks: TaskSet): IStringDictionary<CustomTask> | undefined {\n\t\tlet result: IStringDictionary<CustomTask> | undefined;\n\t\tfunction getResult(): IStringDictionary<CustomTask> {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = Object.create(null);\n\t\t\treturn result!;\n\t\t}\n\t\tfor (let task of workspaceTasks.tasks) {\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tlet commandName = task.command && task.command.name;\n\t\t\t\t// This is for backwards compatibility with the 0.1.0 task annotation code\n\t\t\t\t// if we had a gulp, jake or grunt command a task specification was a annotation\n\t\t\t\tif (commandName === 'gulp' || commandName === 'grunt' || commandName === 'jake') {\n\t\t\t\t\tlet identifier = NKeyedTaskIdentifier.create({\n\t\t\t\t\t\ttype: commandName,\n\t\t\t\t\t\ttask: task.configurationProperties.name\n\t\t\t\t\t});\n\t\t\t\t\tgetResult()[identifier._key] = task;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, WorkspaceFolderTaskResult>> {\n\t\tif (this._workspaceTasksPromise) {\n\t\t\treturn this._workspaceTasksPromise;\n\t\t}\n\t\tthis.updateWorkspaceTasks(runSource);\n\t\treturn this._workspaceTasksPromise!;\n\t}\n\n\tprivate updateWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): void {\n\t\tthis._workspaceTasksPromise = this.computeWorkspaceTasks(runSource).then(value => {\n\t\t\tif (this.executionEngine === ExecutionEngine.Process && this._taskSystem instanceof ProcessTaskSystem) {\n\t\t\t\t// We can only have a process engine if we have one folder.\n\t\t\t\tvalue.forEach((value) => {\n\t\t\t\t\tthis._configHasErrors = value.hasErrors;\n\t\t\t\t\t(this._taskSystem as ProcessTaskSystem).hasErrors(this._configHasErrors);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn value;\n\t\t});\n\t}\n\n\tprivate computeWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, WorkspaceFolderTaskResult>> {\n\t\tif (this.workspaceFolders.length === 0) {\n\t\t\treturn Promise.resolve(new Map<string, WorkspaceFolderTaskResult>());\n\t\t} else {\n\t\t\tlet promises: Promise<WorkspaceFolderTaskResult | undefined>[] = [];\n\t\t\tfor (let folder of this.workspaceFolders) {\n\t\t\t\tpromises.push(this.computeWorkspaceFolderTasks(folder, runSource).then((value) => value, () => undefined));\n\t\t\t}\n\t\t\treturn Promise.all(promises).then((values) => {\n\t\t\t\tlet result = new Map<string, WorkspaceFolderTaskResult>();\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tresult.set(value.workspaceFolder.uri.toString(), value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate computeWorkspaceFolderTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<WorkspaceFolderTaskResult> {\n\t\treturn (this.executionEngine === ExecutionEngine.Process\n\t\t\t? this.computeLegacyConfiguration(workspaceFolder)\n\t\t\t: this.computeConfiguration(workspaceFolder)).\n\t\t\tthen((workspaceFolderConfiguration) => {\n\t\t\t\tif (!workspaceFolderConfiguration || !workspaceFolderConfiguration.config || workspaceFolderConfiguration.hasErrors) {\n\t\t\t\t\treturn Promise.resolve({ workspaceFolder, set: undefined, configurations: undefined, hasErrors: workspaceFolderConfiguration ? workspaceFolderConfiguration.hasErrors : false });\n\t\t\t\t}\n\t\t\t\treturn ProblemMatcherRegistry.onReady().then((): WorkspaceFolderTaskResult => {\n\t\t\t\t\tlet taskSystemInfo: TaskSystemInfo | undefined = this._taskSystemInfos.get(workspaceFolder.uri.scheme);\n\t\t\t\t\tlet problemReporter = new ProblemReporter(this._outputChannel);\n\t\t\t\t\tlet parseResult = TaskConfig.parse(workspaceFolder, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, workspaceFolderConfiguration.config!, problemReporter);\n\t\t\t\t\tlet hasErrors = false;\n\t\t\t\t\tif (!parseResult.validationStatus.isOK()) {\n\t\t\t\t\t\thasErrors = true;\n\t\t\t\t\t\tthis.showOutput(runSource);\n\t\t\t\t\t}\n\t\t\t\t\tif (problemReporter.status.isFatal()) {\n\t\t\t\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n\t\t\t\t\t\treturn { workspaceFolder, set: undefined, configurations: undefined, hasErrors };\n\t\t\t\t\t}\n\t\t\t\t\tlet customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask>; } | undefined;\n\t\t\t\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\t\t\t\tcustomizedTasks = {\n\t\t\t\t\t\t\tbyIdentifier: Object.create(null)\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfor (let task of parseResult.configured) {\n\t\t\t\t\t\t\tcustomizedTasks.byIdentifier[task.configures._key] = task;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn { workspaceFolder, set: { tasks: parseResult.custom }, configurations: customizedTasks, hasErrors };\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate computeConfiguration(workspaceFolder: IWorkspaceFolder): Promise<WorkspaceFolderConfigurationResult> {\n\t\tlet { config, hasParseErrors } = this.getConfiguration(workspaceFolder);\n\t\treturn Promise.resolve<WorkspaceFolderConfigurationResult>({ workspaceFolder, config, hasErrors: hasParseErrors });\n\t}\n\n\tprivate computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<WorkspaceFolderConfigurationResult> {\n\t\tlet { config, hasParseErrors } = this.getConfiguration(workspaceFolder);\n\t\tif (hasParseErrors) {\n\t\t\treturn Promise.resolve({ workspaceFolder: workspaceFolder, hasErrors: true, config: undefined });\n\t\t}\n\t\tif (config) {\n\t\t\tif (this.hasDetectorSupport(config)) {\n\t\t\t\treturn new ProcessRunnerDetector(workspaceFolder, this.fileService, this.contextService, this.configurationResolverService, config).detect(true).then((value): WorkspaceFolderConfigurationResult => {\n\t\t\t\t\tlet hasErrors = this.printStderr(value.stderr);\n\t\t\t\t\tlet detectedConfig = value.config;\n\t\t\t\t\tif (!detectedConfig) {\n\t\t\t\t\t\treturn { workspaceFolder, config, hasErrors };\n\t\t\t\t\t}\n\t\t\t\t\tlet result: TaskConfig.ExternalTaskRunnerConfiguration = Objects.deepClone(config)!;\n\t\t\t\t\tlet configuredTasks: IStringDictionary<TaskConfig.CustomTask> = Object.create(null);\n\t\t\t\t\tconst resultTasks = result.tasks;\n\t\t\t\t\tif (!resultTasks) {\n\t\t\t\t\t\tif (detectedConfig.tasks) {\n\t\t\t\t\t\t\tresult.tasks = detectedConfig.tasks;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultTasks.forEach(task => {\n\t\t\t\t\t\t\tif (task.taskName) {\n\t\t\t\t\t\t\t\tconfiguredTasks[task.taskName] = task;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (detectedConfig.tasks) {\n\t\t\t\t\t\t\tdetectedConfig.tasks.forEach((task) => {\n\t\t\t\t\t\t\t\tif (task.taskName && !configuredTasks[task.taskName]) {\n\t\t\t\t\t\t\t\t\tresultTasks.push(task);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn { workspaceFolder, config: result, hasErrors };\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.resolve({ workspaceFolder, config, hasErrors: false });\n\t\t\t}\n\t\t} else {\n\t\t\treturn new ProcessRunnerDetector(workspaceFolder, this.fileService, this.contextService, this.configurationResolverService).detect(true).then((value) => {\n\t\t\t\tlet hasErrors = this.printStderr(value.stderr);\n\t\t\t\treturn { workspaceFolder, config: value.config!, hasErrors };\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate computeWorkspaceFolderSetup(): [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion] {\n\t\tlet workspaceFolders: IWorkspaceFolder[] = [];\n\t\tlet ignoredWorkspaceFolders: IWorkspaceFolder[] = [];\n\t\tlet executionEngine = ExecutionEngine.Terminal;\n\t\tlet schemaVersion = JsonSchemaVersion.V2_0_0;\n\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tlet workspaceFolder: IWorkspaceFolder = this.contextService.getWorkspace().folders[0];\n\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\texecutionEngine = this.computeExecutionEngine(workspaceFolder);\n\t\t\tschemaVersion = this.computeJsonSchemaVersion(workspaceFolder);\n\t\t} else if (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tfor (let workspaceFolder of this.contextService.getWorkspace().folders) {\n\t\t\t\tif (schemaVersion === this.computeJsonSchemaVersion(workspaceFolder)) {\n\t\t\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\t\t} else {\n\t\t\t\t\tignoredWorkspaceFolders.push(workspaceFolder);\n\t\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t\t'taskService.ignoreingFolder',\n\t\t\t\t\t\t'Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0\\n',\n\t\t\t\t\t\tworkspaceFolder.uri.fsPath));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [workspaceFolders, ignoredWorkspaceFolders, executionEngine, schemaVersion];\n\t}\n\n\tprivate computeExecutionEngine(workspaceFolder: IWorkspaceFolder): ExecutionEngine {\n\t\tlet { config } = this.getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn ExecutionEngine._default;\n\t\t}\n\t\treturn TaskConfig.ExecutionEngine.from(config);\n\t}\n\n\tprivate computeJsonSchemaVersion(workspaceFolder: IWorkspaceFolder): JsonSchemaVersion {\n\t\tlet { config } = this.getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn JsonSchemaVersion.V2_0_0;\n\t\t}\n\t\treturn TaskConfig.JsonSchemaVersion.from(config);\n\t}\n\n\tprivate getConfiguration(workspaceFolder: IWorkspaceFolder): { config: TaskConfig.ExternalTaskRunnerConfiguration | undefined; hasParseErrors: boolean } {\n\t\tlet result = this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY\n\t\t\t? Objects.deepClone(this.configurationService.getValue<TaskConfig.ExternalTaskRunnerConfiguration>('tasks', { resource: workspaceFolder.uri }))\n\t\t\t: undefined;\n\t\tif (!result) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tlet parseErrors: string[] = (result as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._outputChannel.append(nls.localize('TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\\n'));\n\t\t\t\tthis.showOutput();\n\t\t\t\treturn { config: undefined, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config: result, hasParseErrors: false };\n\t}\n\n\tprivate printStderr(stderr: string[]): boolean {\n\t\tlet result = false;\n\t\tif (stderr && stderr.length > 0) {\n\t\t\tstderr.forEach((line) => {\n\t\t\t\tresult = true;\n\t\t\t\tthis._outputChannel.append(line + '\\n');\n\t\t\t});\n\t\t\tthis.showOutput();\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic inTerminal(): boolean {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem instanceof TerminalTaskSystem;\n\t\t}\n\t\treturn this.executionEngine === ExecutionEngine.Terminal;\n\t}\n\n\tprivate hasDetectorSupport(config: TaskConfig.ExternalTaskRunnerConfiguration): boolean {\n\t\tif (!config.command || this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn false;\n\t\t}\n\t\treturn ProcessRunnerDetector.supports(TaskConfig.CommandString.value(config.command));\n\t}\n\n\tpublic configureAction(): Action {\n\t\tconst thisCapture: TaskService = this;\n\t\treturn new class extends Action {\n\t\t\tconstructor() {\n\t\t\t\tsuper(ConfigureTaskAction.ID, ConfigureTaskAction.TEXT, undefined, true, () => { thisCapture.runConfigureTasks(); return Promise.resolve(undefined); });\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic beforeShutdown(): boolean | Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._taskSystem.isActiveSync()) {\n\t\t\treturn false;\n\t\t}\n\t\t// The terminal service kills all terminal on shutdown. So there\n\t\t// is nothing we can do to prevent this here.\n\t\tif (this._taskSystem instanceof TerminalTaskSystem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet terminatePromise: Promise<IConfirmationResult>;\n\t\tif (this._taskSystem.canAutoTerminate()) {\n\t\t\tterminatePromise = Promise.resolve({ confirmed: true });\n\t\t} else {\n\t\t\tterminatePromise = this.dialogService.confirm({\n\t\t\t\tmessage: nls.localize('TaskSystem.runningTask', 'There is a task running. Do you want to terminate it?'),\n\t\t\t\tprimaryButton: nls.localize({ key: 'TaskSystem.terminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task\"),\n\t\t\t\ttype: 'question'\n\t\t\t});\n\t\t}\n\n\t\treturn terminatePromise.then(res => {\n\t\t\tif (res.confirmed) {\n\t\t\t\treturn this._taskSystem!.terminateAll().then((responses) => {\n\t\t\t\t\tlet success = true;\n\t\t\t\t\tlet code: number | undefined = undefined;\n\t\t\t\t\tfor (let response of responses) {\n\t\t\t\t\t\tsuccess = success && response.success;\n\t\t\t\t\t\t// We only have a code in the old output runner which only has one task\n\t\t\t\t\t\t// So we can use the first code.\n\t\t\t\t\t\tif (code === undefined && response.code !== undefined) {\n\t\t\t\t\t\t\tcode = response.code;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (success) {\n\t\t\t\t\t\tthis._taskSystem = undefined;\n\t\t\t\t\t\tthis.disposeTaskSystemListeners();\n\t\t\t\t\t\treturn false; // no veto\n\t\t\t\t\t} else if (code && code === TerminateResponseCode.ProcessNotFound) {\n\t\t\t\t\t\treturn this.dialogService.confirm({\n\t\t\t\t\t\t\tmessage: nls.localize('TaskSystem.noProcess', 'The launched task doesn\\'t exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.'),\n\t\t\t\t\t\t\tprimaryButton: nls.localize({ key: 'TaskSystem.exitAnyways', comment: ['&& denotes a mnemonic'] }, \"&&Exit Anyways\"),\n\t\t\t\t\t\t\ttype: 'info'\n\t\t\t\t\t\t}).then(res => !res.confirmed);\n\t\t\t\t\t}\n\t\t\t\t\treturn true; // veto\n\t\t\t\t}, (err) => {\n\t\t\t\t\treturn true; // veto\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn true; // veto\n\t\t});\n\t}\n\n\tprivate handleError(err: any): void {\n\t\tlet showOutput = true;\n\t\tif (err instanceof TaskError) {\n\t\t\tlet buildError = <TaskError>err;\n\t\t\tlet needsConfig = buildError.code === TaskErrors.NotConfigured || buildError.code === TaskErrors.NoBuildTask || buildError.code === TaskErrors.NoTestTask;\n\t\t\tlet needsTerminate = buildError.code === TaskErrors.RunningTask;\n\t\t\tif (needsConfig || needsTerminate) {\n\t\t\t\tthis.notificationService.prompt(buildError.severity, buildError.message, [{\n\t\t\t\t\tlabel: needsConfig ? ConfigureTaskAction.TEXT : nls.localize('TerminateAction.label', \"Terminate Task\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (needsConfig) {\n\t\t\t\t\t\t\tthis.runConfigureTasks();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.runTerminateCommand();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\t\t\t} else {\n\t\t\t\tthis.notificationService.notify({ severity: buildError.severity, message: buildError.message });\n\t\t\t}\n\t\t} else if (err instanceof Error) {\n\t\t\tlet error = <Error>err;\n\t\t\tthis.notificationService.error(error.message);\n\t\t\tshowOutput = false;\n\t\t} else if (Types.isString(err)) {\n\t\t\tthis.notificationService.error(<string>err);\n\t\t} else {\n\t\t\tthis.notificationService.error(nls.localize('TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.'));\n\t\t}\n\t\tif (showOutput) {\n\t\t\tthis.showOutput();\n\t\t}\n\t}\n\n\tprivate canRunCommand(): boolean {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\tthis.notificationService.info(nls.localize('TaskService.noWorkspace', 'Tasks are only available on a workspace folder.'));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate createTaskQuickPickEntries(tasks: Task[], group: boolean = false, sort: boolean = false, selectedEntry?: TaskQuickPickEntry): TaskQuickPickEntry[] {\n\t\tif (tasks === undefined || tasks === null || tasks.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst TaskQuickPickEntry = (task: Task): TaskQuickPickEntry => {\n\t\t\tlet description: string | undefined;\n\t\t\tif (this.needsFolderQualification()) {\n\t\t\t\tlet workspaceFolder = task.getWorkspaceFolder();\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tdescription = workspaceFolder.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { label: task._label, description, task };\n\t\t};\n\t\tfunction fillEntries(entries: QuickPickInput<TaskQuickPickEntry>[], tasks: Task[], groupLabel: string): void {\n\t\t\tif (tasks.length) {\n\t\t\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\t\t}\n\t\t\tfor (let task of tasks) {\n\t\t\t\tlet entry: TaskQuickPickEntry = TaskQuickPickEntry(task);\n\t\t\t\tentry.buttons = [{ iconClass: 'quick-open-task-configure', tooltip: nls.localize('configureTask', \"Configure Task\") }];\n\t\t\t\tif (selectedEntry && (task === selectedEntry.task)) {\n\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t} else {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet entries: TaskQuickPickEntry[];\n\t\tif (group) {\n\t\t\tentries = [];\n\t\t\tif (tasks.length === 1) {\n\t\t\t\tentries.push(TaskQuickPickEntry(tasks[0]));\n\t\t\t} else {\n\t\t\t\tlet recentlyUsedTasks = this.getRecentlyUsedTasks();\n\t\t\t\tlet recent: Task[] = [];\n\t\t\t\tlet configured: Task[] = [];\n\t\t\t\tlet detected: Task[] = [];\n\t\t\t\tlet taskMap: IStringDictionary<Task> = Object.create(null);\n\t\t\t\ttasks.forEach(task => {\n\t\t\t\t\tlet key = task.getRecentlyUsedKey();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\ttaskMap[key] = task;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\trecentlyUsedTasks.keys().forEach(key => {\n\t\t\t\t\tlet task = taskMap[key];\n\t\t\t\t\tif (task) {\n\t\t\t\t\t\trecent.push(task);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\tlet key = task.getRecentlyUsedKey();\n\t\t\t\t\tif (!key || !recentlyUsedTasks.has(key)) {\n\t\t\t\t\t\tif (task._source.kind === TaskSourceKind.Workspace) {\n\t\t\t\t\t\t\tconfigured.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdetected.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\tfillEntries(entries, recent, nls.localize('recentlyUsed', 'recently used tasks'));\n\t\t\t\tconfigured = configured.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, configured, nls.localize('configured', 'configured tasks'));\n\t\t\t\tdetected = detected.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, detected, nls.localize('detected', 'detected tasks'));\n\t\t\t}\n\t\t} else {\n\t\t\tif (sort) {\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\ttasks = tasks.sort((a, b) => sorter.compare(a, b));\n\t\t\t}\n\t\t\tentries = tasks.map<TaskQuickPickEntry>(task => TaskQuickPickEntry(task));\n\t\t}\n\t\treturn entries;\n\t}\n\n\tprivate showQuickPick(tasks: Promise<Task[]> | Task[], placeHolder: string, defaultEntry?: TaskQuickPickEntry, group: boolean = false, sort: boolean = false, selectedEntry?: TaskQuickPickEntry): Promise<Task | undefined | null> {\n\t\tlet _createEntries = (): Promise<TaskQuickPickEntry[]> => {\n\t\t\tif (Array.isArray(tasks)) {\n\t\t\t\treturn Promise.resolve(this.createTaskQuickPickEntries(tasks, group, sort, selectedEntry));\n\t\t\t} else {\n\t\t\t\treturn tasks.then((tasks) => this.createTaskQuickPickEntries(tasks, group, sort, selectedEntry));\n\t\t\t}\n\t\t};\n\t\treturn this.quickInputService.pick(_createEntries().then((entries) => {\n\t\t\tif ((entries.length === 0) && defaultEntry) {\n\t\t\t\tentries.push(defaultEntry);\n\t\t\t}\n\t\t\treturn entries;\n\t\t}), {\n\t\t\t\tplaceHolder,\n\t\t\t\tmatchOnDescription: true,\n\t\t\t\tonDidTriggerItemButton: context => {\n\t\t\t\t\tlet task = context.item.task;\n\t\t\t\t\tthis.quickInputService.cancel();\n\t\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\t\tthis.customize(task, undefined, true);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).then(entry => entry ? entry.task : undefined);\n\t}\n\n\tprivate showIgnoredFoldersMessage(): Promise<void> {\n\t\tif (this.ignoredWorkspaceFolders.length === 0 || !this.showIgnoreMessage) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(f => f.name).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('TaskService.notAgain', 'Don\\'t Show Again'),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.storageService.store(TaskService.IgnoreTask010DonotShowAgain_key, true, StorageScope.WORKSPACE);\n\t\t\t\t\tthis._showIgnoreMessage = false;\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate runTaskCommand(arg?: any): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tlet identifier = this.getTaskIdentifier(arg);\n\t\tif (identifier !== undefined) {\n\t\t\tthis.getGroupedTasks().then((grouped) => {\n\t\t\t\tlet resolver = this.createResolver(grouped);\n\t\t\t\tlet folders = this.contextService.getWorkspace().folders;\n\t\t\t\tfor (let folder of folders) {\n\t\t\t\t\tlet task = resolver.resolve(folder, identifier);\n\t\t\t\t\tif (task) {\n\t\t\t\t\t\tthis.run(task).then(undefined, reason => {\n\t\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.doRunTaskCommand(grouped.all());\n\t\t\t}, () => {\n\t\t\t\tthis.doRunTaskCommand();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.doRunTaskCommand();\n\t\t}\n\t}\n\n\tprivate doRunTaskCommand(tasks?: Task[]): void {\n\t\tthis.showIgnoredFoldersMessage().then(() => {\n\t\t\tthis.showQuickPick(tasks ? tasks : this.tasks(),\n\t\t\t\tnls.localize('TaskService.pickRunTask', 'Select the task to run'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaslService.noEntryToRun', 'No task to run found. Configure Tasks...'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\ttrue).\n\t\t\t\tthen((task) => {\n\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\tthis.runConfigureTasks();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.run(task, { attachProblemMatcher: true }, TaskRunSource.User).then(undefined, reason => {\n\t\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate reRunTaskCommand(arg?: any): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\n\t\tProblemMatcherRegistry.onReady().then(() => {\n\t\t\treturn this.textFileService.saveAll().then((value) => { // make sure all dirty files are saved\n\t\t\t\tlet executeResult = this.getTaskSystem().rerun();\n\t\t\t\tif (executeResult) {\n\t\t\t\t\treturn this.handleExecuteResult(executeResult);\n\t\t\t\t} else {\n\t\t\t\t\tthis.doRunTaskCommand();\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate splitPerGroupType(tasks: Task[]): { none: Task[], defaults: Task[], users: Task[] } {\n\t\tlet none: Task[] = [];\n\t\tlet defaults: Task[] = [];\n\t\tlet users: Task[] = [];\n\t\tfor (let task of tasks) {\n\t\t\tif (task.configurationProperties.groupType === GroupType.default) {\n\t\t\t\tdefaults.push(task);\n\t\t\t} else if (task.configurationProperties.groupType === GroupType.user) {\n\t\t\t\tusers.push(task);\n\t\t\t} else {\n\t\t\t\tnone.push(task);\n\t\t\t}\n\t\t}\n\t\treturn { none, defaults, users };\n\t}\n\n\tprivate runBuildCommand(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\tthis.build();\n\t\t\treturn;\n\t\t}\n\t\tlet options: IProgressOptions = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: nls.localize('TaskService.fetchingBuildTasks', 'Fetching build tasks...')\n\t\t};\n\t\tlet promise = this.getTasksForGroup(TaskGroup.Build).then((tasks) => {\n\t\t\tif (tasks.length > 0) {\n\t\t\t\tlet { defaults, users } = this.splitPerGroupType(tasks);\n\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\tthis.run(defaults[0]).then(undefined, reason => {\n\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t} else if (defaults.length + users.length > 0) {\n\t\t\t\t\ttasks = defaults.concat(users);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.showIgnoredFoldersMessage().then(() => {\n\t\t\t\tthis.showQuickPick(tasks,\n\t\t\t\t\tnls.localize('TaskService.pickBuildTask', 'Select the build task to run'),\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('TaskService.noBuildTask', 'No build task to run found. Configure Build Task...'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t},\n\t\t\t\t\ttrue).then((task) => {\n\t\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\t\tthis.runConfigureDefaultBuildTask();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.run(task, { attachProblemMatcher: true }).then(undefined, reason => {\n\t\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tthis.progressService.withProgress(options, () => promise);\n\t}\n\n\tprivate runTestCommand(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\tthis.runTest();\n\t\t\treturn;\n\t\t}\n\t\tlet options: IProgressOptions = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: nls.localize('TaskService.fetchingTestTasks', 'Fetching test tasks...')\n\t\t};\n\t\tlet promise = this.getTasksForGroup(TaskGroup.Test).then((tasks) => {\n\t\t\tif (tasks.length > 0) {\n\t\t\t\tlet { defaults, users } = this.splitPerGroupType(tasks);\n\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\tthis.run(defaults[0]).then(undefined, reason => {\n\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t} else if (defaults.length + users.length > 0) {\n\t\t\t\t\ttasks = defaults.concat(users);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.showIgnoredFoldersMessage().then(() => {\n\t\t\t\tthis.showQuickPick(tasks,\n\t\t\t\t\tnls.localize('TaskService.pickTestTask', 'Select the test task to run'),\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize('TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t}, true\n\t\t\t\t).then((task) => {\n\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\tthis.runConfigureTasks();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.run(task).then(undefined, reason => {\n\t\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tthis.progressService.withProgress(options, () => promise);\n\t}\n\n\tprivate runTerminateCommand(arg?: any): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tlet runQuickPick = (promise?: Promise<Task[]>) => {\n\t\t\tthis.showQuickPick(promise || this.getActiveTasks(),\n\t\t\t\tnls.localize('TaskService.tastToTerminate', 'Select task to terminate'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskRunning', 'No task is currently running'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse, true\n\t\t\t).then(task => {\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminate(task);\n\t\t\t});\n\t\t};\n\t\tif (this.inTerminal()) {\n\t\t\tlet identifier = this.getTaskIdentifier(arg);\n\t\t\tlet promise: Promise<Task[]>;\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tpromise = this.getActiveTasks();\n\t\t\t\tpromise.then((tasks) => {\n\t\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\t\tthis.terminate(task);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trunQuickPick(promise);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trunQuickPick();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.isActive().then((active) => {\n\t\t\t\tif (active) {\n\t\t\t\t\tthis.terminateAll().then((responses) => {\n\t\t\t\t\t\t// the output runner has only one task\n\t\t\t\t\t\tlet response = responses[0];\n\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (response.code && response.code === TerminateResponseCode.ProcessNotFound) {\n\t\t\t\t\t\t\tthis.notificationService.error(nls.localize('TerminateAction.noProcess', 'The launched process doesn\\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.notificationService.error(nls.localize('TerminateAction.failed', 'Failed to terminate running task'));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate runRestartTaskCommand(arg?: any): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tlet runQuickPick = (promise?: Promise<Task[]>) => {\n\t\t\tthis.showQuickPick(promise || this.getActiveTasks(),\n\t\t\t\tnls.localize('TaskService.tastToRestart', 'Select the task to restart'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskToRestart', 'No task to restart'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse, true\n\t\t\t).then(task => {\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.restart(task);\n\t\t\t});\n\t\t};\n\t\tif (this.inTerminal()) {\n\t\t\tlet identifier = this.getTaskIdentifier(arg);\n\t\t\tlet promise: Promise<Task[]>;\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tpromise = this.getActiveTasks();\n\t\t\t\tpromise.then((tasks) => {\n\t\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\t\tthis.restart(task);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trunQuickPick(promise);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trunQuickPick();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.getActiveTasks().then((activeTasks) => {\n\t\t\t\tif (activeTasks.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet task = activeTasks[0];\n\t\t\t\tthis.restart(task);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getTaskIdentifier(arg?: any): string | KeyedTaskIdentifier | undefined {\n\t\tlet result: string | KeyedTaskIdentifier | undefined = undefined;\n\t\tif (Types.isString(arg)) {\n\t\t\tresult = arg;\n\t\t} else if (arg && Types.isString((arg as TaskIdentifier).type)) {\n\t\t\tresult = TaskDefinition.createTaskIdentifier(arg as TaskIdentifier, console);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate runConfigureTasks(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskPromise: Promise<TaskMap>;\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskPromise = this.getGroupedTasks();\n\t\t} else {\n\t\t\ttaskPromise = Promise.resolve(new TaskMap());\n\t\t}\n\n\t\tlet openTaskFile = (workspaceFolder: IWorkspaceFolder): void => {\n\t\t\tlet resource = workspaceFolder.toResource('.vscode/tasks.json');\n\t\t\tlet configFileCreated = false;\n\t\t\tthis.fileService.resolveFile(resource).then((stat) => stat, () => undefined).then((stat) => {\n\t\t\t\tif (stat) {\n\t\t\t\t\treturn stat.resource;\n\t\t\t\t}\n\t\t\t\treturn this.quickInputService.pick(getTaskTemplates(), { placeHolder: nls.localize('TaskService.template', 'Select a Task Template') }).then((selection) => {\n\t\t\t\t\tif (!selection) {\n\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tlet content = selection.content;\n\t\t\t\t\tlet editorConfig = this.configurationService.getValue<any>();\n\t\t\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + strings.repeat(' ', s2.length * editorConfig.editor.tabSize));\n\t\t\t\t\t}\n\t\t\t\t\tconfigFileCreated = true;\n\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\"taskService.template\" : {\n\t\t\t\t\t\t\t\"templateId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\"autoDetect\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\treturn this.fileService.createFile(resource, content).then((result): URI => {\n\t\t\t\t\t\tthis.telemetryService.publicLog(TaskService.TemplateTelemetryEventName, {\n\t\t\t\t\t\t\ttemplateId: selection.id,\n\t\t\t\t\t\t\tautoDetect: selection.autoDetect\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn result.resource;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}).then((resource) => {\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\tresource,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: configFileCreated // pin only if config file is created #8727\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tlet configureTask = (task: Task): void => {\n\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\tthis.customize(task, undefined, true);\n\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\tthis.openConfig(task);\n\t\t\t} else if (ConfiguringTask.is(task)) {\n\t\t\t\t// Do nothing.\n\t\t\t}\n\t\t};\n\n\t\tfunction isTaskEntry(value: IQuickPickItem): value is IQuickPickItem & { task: Task } {\n\t\t\tlet candidate: IQuickPickItem & { task: Task } = value as any;\n\t\t\treturn candidate && !!candidate.task;\n\t\t}\n\n\t\tlet stats = this.contextService.getWorkspace().folders.map<Promise<IFileStat | undefined>>((folder) => {\n\t\t\treturn this.fileService.resolveFile(folder.toResource('.vscode/tasks.json')).then(stat => stat, () => undefined);\n\t\t});\n\n\t\tlet createLabel = nls.localize('TaskService.createJsonFile', 'Create tasks.json file from template');\n\t\tlet openLabel = nls.localize('TaskService.openJsonFile', 'Open tasks.json file');\n\t\tlet entries = Promise.all(stats).then((stats) => {\n\t\t\treturn taskPromise.then((taskMap) => {\n\t\t\t\ttype EntryType = (IQuickPickItem & { task: Task; }) | (IQuickPickItem & { folder: IWorkspaceFolder; });\n\t\t\t\tlet entries: QuickPickInput<EntryType>[] = [];\n\t\t\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t\tlet tasks = taskMap.all();\n\t\t\t\t\tlet needsCreateOrOpen: boolean = true;\n\t\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\t\ttasks = tasks.sort((a, b) => a._label.localeCompare(b._label));\n\t\t\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\t\t\tentries.push({ label: task._label, task });\n\t\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\t\tneedsCreateOrOpen = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (needsCreateOrOpen) {\n\t\t\t\t\t\tlet label = stats[0] !== undefined ? openLabel : createLabel;\n\t\t\t\t\t\tif (entries.length) {\n\t\t\t\t\t\t\tentries.push({ type: 'separator' });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tentries.push({ label, folder: this.contextService.getWorkspace().folders[0] });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet folders = this.contextService.getWorkspace().folders;\n\t\t\t\t\tlet index = 0;\n\t\t\t\t\tfor (let folder of folders) {\n\t\t\t\t\t\tlet tasks = taskMap.get(folder);\n\t\t\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\t\t\ttasks = tasks.slice().sort((a, b) => a._label.localeCompare(b._label));\n\t\t\t\t\t\t\tfor (let i = 0; i < tasks.length; i++) {\n\t\t\t\t\t\t\t\tlet entry: EntryType = { label: tasks[i]._label, task: tasks[i], description: folder.name };\n\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\tentries.push({ type: 'separator', label: folder.name });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet label = stats[index] !== undefined ? openLabel : createLabel;\n\t\t\t\t\t\t\tlet entry: EntryType = { label, folder: folder };\n\t\t\t\t\t\t\tentries.push({ type: 'separator', label: folder.name });\n\t\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn entries;\n\t\t\t});\n\t\t});\n\n\t\tthis.quickInputService.pick(entries,\n\t\t\t{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }).\n\t\t\tthen((selection) => {\n\t\t\t\tif (!selection) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isTaskEntry(selection)) {\n\t\t\t\t\tconfigureTask(selection.task);\n\t\t\t\t} else {\n\t\t\t\t\topenTaskFile(selection.folder);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate runConfigureDefaultBuildTask(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis.runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: TaskQuickPickEntry;\n\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\tif (task.configurationProperties.group === TaskGroup.Build && task.configurationProperties.groupType === GroupType.default) {\n\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (selectedTask) {\n\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\tlabel: nls.localize('TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', selectedTask.getQualifiedLabel()),\n\t\t\t\t\t\ttask: selectedTask\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tthis.showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis.showQuickPick(tasks,\n\t\t\t\t\t\tnls.localize('TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task'), undefined, true, false, selectedEntry).\n\t\t\t\t\t\tthen((task) => {\n\t\t\t\t\t\t\tif ((task === undefined) || (task === null)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'build' }, true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.runConfigureTasks();\n\t\t}\n\t}\n\n\tprivate runConfigureDefaultTestTask(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis.runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: TaskQuickPickEntry;\n\n\t\t\t\tfor (let task of tasks) {\n\t\t\t\t\tif (task.configurationProperties.group === TaskGroup.Test && task.configurationProperties.groupType === GroupType.default) {\n\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (selectedTask) {\n\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\tlabel: nls.localize('TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()),\n\t\t\t\t\t\ttask: selectedTask\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis.showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis.showQuickPick(tasks,\n\t\t\t\t\t\tnls.localize('TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then((task) => {\n\t\t\t\t\t\t\tif (!task) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'test', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'test' }, true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.runConfigureTasks();\n\t\t}\n\t}\n\n\tpublic runShowTasks(): void {\n\t\tif (!this.canRunCommand()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.showQuickPick(this.getActiveTasks(),\n\t\t\tnls.localize('TaskService.pickShowTask', 'Select the task to show its output'),\n\t\t\t{\n\t\t\t\tlabel: nls.localize('TaskService.noTaskIsRunning', 'No task is running'),\n\t\t\t\ttask: null\n\t\t\t},\n\t\t\tfalse, true\n\t\t).then((task) => {\n\t\t\tif (task === undefined || task === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._taskSystem!.revealTask(task);\n\t\t});\n\t}\n}\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '2_run',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.runTask',\n\t\ttitle: nls.localize({ key: 'miRunTask', comment: ['&& denotes a mnemonic'] }, \"&&Run Task...\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '2_run',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.build',\n\t\ttitle: nls.localize({ key: 'miBuildTask', comment: ['&& denotes a mnemonic'] }, \"Run &&Build Task...\")\n\t},\n\torder: 2\n});\n\n// Manage Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.showTasks',\n\t\ttitle: nls.localize({ key: 'miRunningTask', comment: ['&& denotes a mnemonic'] }, \"Show Runnin&&g Tasks...\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.restartTask',\n\t\ttitle: nls.localize({ key: 'miRestartTask', comment: ['&& denotes a mnemonic'] }, \"R&&estart Running Task...\")\n\t},\n\torder: 2\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '3_manage',\n\tcommand: {\n\t\tprecondition: TASK_RUNNING_STATE,\n\t\tid: 'workbench.action.tasks.terminate',\n\t\ttitle: nls.localize({ key: 'miTerminateTask', comment: ['&& denotes a mnemonic'] }, \"&&Terminate Task...\")\n\t},\n\torder: 3\n});\n\n// Configure Tasks\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '4_configure',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureTaskRunner',\n\t\ttitle: nls.localize({ key: 'miConfigureTask', comment: ['&& denotes a mnemonic'] }, \"&&Configure Tasks...\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarTerminalMenu, {\n\tgroup: '4_configure',\n\tcommand: {\n\t\tid: 'workbench.action.tasks.configureDefaultBuildTask',\n\t\ttitle: nls.localize({ key: 'miConfigureBuildTask', comment: ['&& denotes a mnemonic'] }, \"Configure De&&fault Build Task...\")\n\t},\n\torder: 2\n});\n\n\nMenuRegistry.addCommand({ id: ConfigureTaskAction.ID, title: { value: ConfigureTaskAction.TEXT, original: 'Configure Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.showLog', title: { value: nls.localize('ShowLogAction.label', \"Show Task Log\"), original: 'Show Task Log' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.runTask', title: { value: nls.localize('RunTaskAction.label', \"Run Task\"), original: 'Run Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.reRunTask', title: { value: nls.localize('ReRunTaskAction.label', \"Rerun Last Task\"), original: 'Rerun Last Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.restartTask', title: { value: nls.localize('RestartTaskAction.label', \"Restart Running Task\"), original: 'Restart Running Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.showTasks', title: { value: nls.localize('ShowTasksAction.label', \"Show Running Tasks\"), original: 'Show Running Tasks' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.terminate', title: { value: nls.localize('TerminateAction.label', \"Terminate Task\"), original: 'Terminate Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.build', title: { value: nls.localize('BuildAction.label', \"Run Build Task\"), original: 'Run Build Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.test', title: { value: nls.localize('TestAction.label', \"Run Test Task\"), original: 'Run Test Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.configureDefaultBuildTask', title: { value: nls.localize('ConfigureDefaultBuildTask.label', \"Configure Default Build Task\"), original: 'Configure Default Build Task' }, category: { value: tasksCategory, original: 'Tasks' } });\nMenuRegistry.addCommand({ id: 'workbench.action.tasks.configureDefaultTestTask', title: { value: nls.localize('ConfigureDefaultTestTask.label', \"Configure Default Test Task\"), original: 'Configure Default Test Task' }, category: { value: tasksCategory, original: 'Tasks' } });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.rebuild', title: nls.localize('RebuildAction.label', 'Run Rebuild Task'), category: tasksCategory });\n// MenuRegistry.addCommand( { id: 'workbench.action.tasks.clean', title: nls.localize('CleanAction.label', 'Run Clean Task'), category: tasksCategory });\n\n// Tasks Output channel. Register it before using it in Task Service.\nlet outputChannelRegistry = Registry.as<IOutputChannelRegistry>(OutputExt.OutputChannels);\noutputChannelRegistry.registerChannel({ id: TaskService.OutputChannelId, label: TaskService.OutputChannelLabel, log: false });\n\n// Task Service\nregisterSingleton(ITaskService, TaskService, true);\n\n// Register Quick Open\nconst quickOpenRegistry = (Registry.as<IQuickOpenRegistry>(QuickOpenExtensions.Quickopen));\nconst tasksPickerContextKey = 'inTasksPicker';\n\nquickOpenRegistry.registerQuickOpenHandler(\n\tnew QuickOpenHandlerDescriptor(\n\t\tQuickOpenHandler,\n\t\tQuickOpenHandler.ID,\n\t\t'task ',\n\t\ttasksPickerContextKey,\n\t\tnls.localize('quickOpen.task', \"Run Task\")\n\t)\n);\n\nconst actionBarRegistry = Registry.as<IActionBarRegistry>(ActionBarExtensions.Actionbar);\nactionBarRegistry.registerActionBarContributor(Scope.VIEWER, QuickOpenActionContributor);\n\n// Status bar\nlet statusbarRegistry = Registry.as<IStatusbarRegistry>(StatusbarExtensions.Statusbar);\nstatusbarRegistry.registerStatusbarItem(new StatusbarItemDescriptor(BuildStatusBarItem, StatusbarAlignment.LEFT, 50 /* Medium Priority */));\nstatusbarRegistry.registerStatusbarItem(new StatusbarItemDescriptor(TaskStatusBarItem, StatusbarAlignment.LEFT, 50 /* Medium Priority */));\n\n// tasks.json validation\nlet schemaId = 'vscode://schemas/tasks';\nlet schema: IJSONSchema = {\n\tid: schemaId,\n\tdescription: 'Task definition file',\n\ttype: 'object',\n\tdefault: {\n\t\tversion: '2.0.0',\n\t\ttasks: [\n\t\t\t{\n\t\t\t\tlabel: 'My Task',\n\t\t\t\tcommand: 'echo hello',\n\t\t\t\ttype: 'shell',\n\t\t\t\targs: [],\n\t\t\t\tproblemMatcher: ['$tsc'],\n\t\t\t\tpresentation: {\n\t\t\t\t\treveal: 'always'\n\t\t\t\t},\n\t\t\t\tgroup: 'build'\n\t\t\t}\n\t\t]\n\t}\n};\n\nimport schemaVersion1 from '../common/jsonSchema_v1';\nimport schemaVersion2, { updateProblemMatchers } from '../common/jsonSchema_v2';\nschema.definitions = {\n\t...schemaVersion1.definitions,\n\t...schemaVersion2.definitions,\n};\nschema.oneOf = [...(schemaVersion2.oneOf || []), ...(schemaVersion1.oneOf || [])];\n\nlet jsonRegistry = <jsonContributionRegistry.IJSONContributionRegistry>Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\njsonRegistry.registerSchema(schemaId, schema);\n\nProblemMatcherRegistry.onMatcherChanged(() => {\n\tupdateProblemMatchers();\n\tjsonRegistry.notifySchemaChanged(schemaId);\n});\n"]}]}