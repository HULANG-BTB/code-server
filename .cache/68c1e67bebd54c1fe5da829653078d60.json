{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/jsonEdit.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonEdit.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_1 = require(\"./json\");\nvar jsonFormatter_1 = require(\"./jsonFormatter\");\nfunction removeProperty(text, path, formattingOptions) {\n    return setProperty(text, path, undefined, formattingOptions);\n}\nexports.removeProperty = removeProperty;\nfunction setProperty(text, originalPath, value, formattingOptions, getInsertionIndex) {\n    var _a;\n    var path = originalPath.slice();\n    var errors = [];\n    var root = json_1.parseTree(text, errors);\n    var parent = undefined;\n    var lastSegment = undefined;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = json_1.findNodeAtLocation(root, path);\n        if (parent === undefined && value !== undefined) {\n            if (typeof lastSegment === 'string') {\n                value = (_a = {}, _a[lastSegment] = value, _a);\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === undefined) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        var existing = json_1.findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== undefined) {\n            if (value === undefined) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                var propertyIndex = parent.children.indexOf(existing.parent);\n                var removeBegin = void 0;\n                var removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    var previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        var next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n            }\n        }\n        else {\n            if (value === undefined) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            var newProperty = JSON.stringify(lastSegment) + \": \" + JSON.stringify(value);\n            var index = getInsertionIndex ? getInsertionIndex(parent.children.map(function (p) { return p.children[0].value; })) : parent.children.length;\n            var edit = void 0;\n            if (index > 0) {\n                var previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        var insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            var newProperty = \"\" + JSON.stringify(value);\n            var edit = void 0;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                var previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, formattingOptions);\n        }\n        else {\n            if (value === undefined && parent.children.length >= 0) {\n                //Removal\n                var removalIndex = lastSegment;\n                var toRemove = parent.children[removalIndex];\n                var edit = void 0;\n                if (parent.children.length === 1) {\n                    // only item\n                    edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n                }\n                else if (parent.children.length - 1 === removalIndex) {\n                    // last item\n                    var previous = parent.children[removalIndex - 1];\n                    var offset = previous.offset + previous.length;\n                    var parentEndOffset = parent.offset + parent.length;\n                    edit = { offset: offset, length: parentEndOffset - 2 - offset, content: '' };\n                }\n                else {\n                    edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n                }\n                return withFormatting(text, edit, formattingOptions);\n            }\n            else {\n                throw new Error('Array modification not supported yet');\n            }\n        }\n    }\n    else {\n        throw new Error(\"Can not add \" + (typeof lastSegment !== 'number' ? 'index' : 'property') + \" to parent of type \" + parent.type);\n    }\n}\nexports.setProperty = setProperty;\nfunction withFormatting(text, edit, formattingOptions) {\n    // apply the edit\n    var newText = applyEdit(text, edit);\n    // format the new text\n    var begin = edit.offset;\n    var end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !jsonFormatter_1.isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !jsonFormatter_1.isEOL(newText, end)) {\n            end++;\n        }\n    }\n    var edits = jsonFormatter_1.format(newText, { offset: begin, length: end - begin }, formattingOptions);\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (var i = edits.length - 1; i >= 0; i--) {\n        var edit_1 = edits[i];\n        newText = applyEdit(newText, edit_1);\n        begin = Math.min(begin, edit_1.offset);\n        end = Math.max(end, edit_1.offset + edit_1.length);\n        end += edit_1.content.length - edit_1.length;\n    }\n    // create a single edit with all changes\n    var editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nfunction applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexports.applyEdit = applyEdit;\nfunction isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\nexports.isWS = isWS;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/jsonEdit.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/jsonEdit.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ParseError, Node, JSONPath, Segment, parseTree, findNodeAtLocation } from './json';\nimport { Edit, format, isEOL, FormattingOptions } from './jsonFormatter';\n\n\nexport function removeProperty(text: string, path: JSONPath, formattingOptions: FormattingOptions): Edit[] {\n\treturn setProperty(text, path, undefined, formattingOptions);\n}\n\nexport function setProperty(text: string, originalPath: JSONPath, value: any, formattingOptions: FormattingOptions, getInsertionIndex?: (properties: string[]) => number): Edit[] {\n\tconst path = originalPath.slice();\n\tconst errors: ParseError[] = [];\n\tconst root = parseTree(text, errors);\n\tlet parent: Node | undefined = undefined;\n\n\tlet lastSegment: Segment | undefined = undefined;\n\twhile (path.length > 0) {\n\t\tlastSegment = path.pop();\n\t\tparent = findNodeAtLocation(root, path);\n\t\tif (parent === undefined && value !== undefined) {\n\t\t\tif (typeof lastSegment === 'string') {\n\t\t\t\tvalue = { [lastSegment]: value };\n\t\t\t} else {\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!parent) {\n\t\t// empty document\n\t\tif (value === undefined) { // delete\n\t\t\tthrow new Error('Can not delete in empty document');\n\t\t}\n\t\treturn withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, formattingOptions);\n\t} else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n\t\tconst existing = findNodeAtLocation(parent, [lastSegment]);\n\t\tif (existing !== undefined) {\n\t\t\tif (value === undefined) { // delete\n\t\t\t\tif (!existing.parent) {\n\t\t\t\t\tthrow new Error('Malformed AST');\n\t\t\t\t}\n\t\t\t\tconst propertyIndex = parent.children.indexOf(existing.parent);\n\t\t\t\tlet removeBegin: number;\n\t\t\t\tlet removeEnd = existing.parent.offset + existing.parent.length;\n\t\t\t\tif (propertyIndex > 0) {\n\t\t\t\t\t// remove the comma of the previous node\n\t\t\t\t\tconst previous = parent.children[propertyIndex - 1];\n\t\t\t\t\tremoveBegin = previous.offset + previous.length;\n\t\t\t\t} else {\n\t\t\t\t\tremoveBegin = parent.offset + 1;\n\t\t\t\t\tif (parent.children.length > 1) {\n\t\t\t\t\t\t// remove the comma of the next node\n\t\t\t\t\t\tconst next = parent.children[1];\n\t\t\t\t\t\tremoveEnd = next.offset;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, formattingOptions);\n\t\t\t} else {\n\t\t\t\t// set value of existing property\n\t\t\t\treturn withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, formattingOptions);\n\t\t\t}\n\t\t} else {\n\t\t\tif (value === undefined) { // delete\n\t\t\t\treturn []; // property does not exist, nothing to do\n\t\t\t}\n\t\t\tconst newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;\n\t\t\tconst index = getInsertionIndex ? getInsertionIndex(parent.children.map(p => p.children![0].value)) : parent.children.length;\n\t\t\tlet edit: Edit;\n\t\t\tif (index > 0) {\n\t\t\t\tconst previous = parent.children[index - 1];\n\t\t\t\tedit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n\t\t\t} else if (parent.children.length === 0) {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: newProperty };\n\t\t\t} else {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n\t\t\t}\n\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t}\n\t} else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n\t\tconst insertIndex = lastSegment;\n\t\tif (insertIndex === -1) {\n\t\t\t// Insert\n\t\t\tconst newProperty = `${JSON.stringify(value)}`;\n\t\t\tlet edit: Edit;\n\t\t\tif (parent.children.length === 0) {\n\t\t\t\tedit = { offset: parent.offset + 1, length: 0, content: newProperty };\n\t\t\t} else {\n\t\t\t\tconst previous = parent.children[parent.children.length - 1];\n\t\t\t\tedit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n\t\t\t}\n\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t} else {\n\t\t\tif (value === undefined && parent.children.length >= 0) {\n\t\t\t\t//Removal\n\t\t\t\tconst removalIndex = lastSegment;\n\t\t\t\tconst toRemove = parent.children[removalIndex];\n\t\t\t\tlet edit: Edit;\n\t\t\t\tif (parent.children.length === 1) {\n\t\t\t\t\t// only item\n\t\t\t\t\tedit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n\t\t\t\t} else if (parent.children.length - 1 === removalIndex) {\n\t\t\t\t\t// last item\n\t\t\t\t\tconst previous = parent.children[removalIndex - 1];\n\t\t\t\t\tconst offset = previous.offset + previous.length;\n\t\t\t\t\tconst parentEndOffset = parent.offset + parent.length;\n\t\t\t\t\tedit = { offset, length: parentEndOffset - 2 - offset, content: '' };\n\t\t\t\t} else {\n\t\t\t\t\tedit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n\t\t\t\t}\n\t\t\t\treturn withFormatting(text, edit, formattingOptions);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Array modification not supported yet');\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);\n\t}\n}\n\nfunction withFormatting(text: string, edit: Edit, formattingOptions: FormattingOptions): Edit[] {\n\t// apply the edit\n\tlet newText = applyEdit(text, edit);\n\n\t// format the new text\n\tlet begin = edit.offset;\n\tlet end = edit.offset + edit.content.length;\n\tif (edit.length === 0 || edit.content.length === 0) { // insert or remove\n\t\twhile (begin > 0 && !isEOL(newText, begin - 1)) {\n\t\t\tbegin--;\n\t\t}\n\t\twhile (end < newText.length && !isEOL(newText, end)) {\n\t\t\tend++;\n\t\t}\n\t}\n\n\tconst edits = format(newText, { offset: begin, length: end - begin }, formattingOptions);\n\n\t// apply the formatting edits and track the begin and end offsets of the changes\n\tfor (let i = edits.length - 1; i >= 0; i--) {\n\t\tconst edit = edits[i];\n\t\tnewText = applyEdit(newText, edit);\n\t\tbegin = Math.min(begin, edit.offset);\n\t\tend = Math.max(end, edit.offset + edit.length);\n\t\tend += edit.content.length - edit.length;\n\t}\n\t// create a single edit with all changes\n\tconst editLength = text.length - (newText.length - end) - begin;\n\treturn [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\n\nexport function applyEdit(text: string, edit: Edit): string {\n\treturn text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\n\nexport function isWS(text: string, offset: number) {\n\treturn '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}"]}]}