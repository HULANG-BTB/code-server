{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/electron-browser/extensionManagementServerService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/network\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/platform/extensionManagement/node/extensionManagementIpc\", \"vs/workbench/services/remote/common/remoteAgentService\", \"vs/platform/remote/common/remoteHosts\", \"vs/platform/ipc/electron-browser/sharedProcessService\", \"vs/platform/instantiation/common/extensions\"], function (require, exports, nls_1, network_1, extensionManagement_1, extensionManagementIpc_1, remoteAgentService_1, remoteHosts_1, sharedProcessService_1, extensions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const localExtensionManagementServerAuthority = 'vscode-local';\n    let ExtensionManagementServerService = class ExtensionManagementServerService {\n        constructor(sharedProcessService, remoteAgentService) {\n            this.remoteExtensionManagementServer = null;\n            const localExtensionManagementService = new extensionManagementIpc_1.ExtensionManagementChannelClient(sharedProcessService.getChannel('extensions'));\n            this.localExtensionManagementServer = { extensionManagementService: localExtensionManagementService, authority: localExtensionManagementServerAuthority, label: nls_1.localize('local', \"Local\") };\n            const remoteAgentConnection = remoteAgentService.getConnection();\n            if (remoteAgentConnection) {\n                const extensionManagementService = new extensionManagementIpc_1.ExtensionManagementChannelClient(remoteAgentConnection.getChannel('extensions'));\n                this.remoteExtensionManagementServer = { authority: remoteAgentConnection.remoteAuthority, extensionManagementService, label: remoteAgentConnection.remoteAuthority };\n            }\n        }\n        getExtensionManagementServer(location) {\n            if (location.scheme === network_1.Schemas.file) {\n                return this.localExtensionManagementServer;\n            }\n            if (location.scheme === remoteHosts_1.REMOTE_HOST_SCHEME) {\n                return this.remoteExtensionManagementServer;\n            }\n            return null;\n        }\n    };\n    ExtensionManagementServerService = __decorate([\n        __param(0, sharedProcessService_1.ISharedProcessService),\n        __param(1, remoteAgentService_1.IRemoteAgentService)\n    ], ExtensionManagementServerService);\n    exports.ExtensionManagementServerService = ExtensionManagementServerService;\n    extensions_1.registerSingleton(extensionManagement_1.IExtensionManagementServerService, ExtensionManagementServerService);\n});\n",null]}