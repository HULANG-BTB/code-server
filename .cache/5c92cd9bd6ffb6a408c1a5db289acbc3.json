{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/workspace/common/workspace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/uri\", \"vs/base/common/path\", \"vs/base/common/resources\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/map\", \"vs/platform/workspaces/common/workspaces\", \"vs/base/common/arrays\", \"vs/base/common/platform\"], function (require, exports, uri_1, path_1, resources, instantiation_1, map_1, workspaces_1, arrays_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IWorkspaceContextService = instantiation_1.createDecorator('contextService');\n    var WorkbenchState;\n    (function (WorkbenchState) {\n        WorkbenchState[WorkbenchState[\"EMPTY\"] = 1] = \"EMPTY\";\n        WorkbenchState[WorkbenchState[\"FOLDER\"] = 2] = \"FOLDER\";\n        WorkbenchState[WorkbenchState[\"WORKSPACE\"] = 3] = \"WORKSPACE\";\n    })(WorkbenchState = exports.WorkbenchState || (exports.WorkbenchState = {}));\n    var IWorkspace;\n    (function (IWorkspace) {\n        function isIWorkspace(thing) {\n            return thing && typeof thing === 'object'\n                && typeof thing.id === 'string'\n                && Array.isArray(thing.folders);\n        }\n        IWorkspace.isIWorkspace = isIWorkspace;\n    })(IWorkspace = exports.IWorkspace || (exports.IWorkspace = {}));\n    var IWorkspaceFolder;\n    (function (IWorkspaceFolder) {\n        function isIWorkspaceFolder(thing) {\n            return thing && typeof thing === 'object'\n                && uri_1.URI.isUri(thing.uri)\n                && typeof thing.name === 'string'\n                && typeof thing.toResource === 'function';\n        }\n        IWorkspaceFolder.isIWorkspaceFolder = isIWorkspaceFolder;\n    })(IWorkspaceFolder = exports.IWorkspaceFolder || (exports.IWorkspaceFolder = {}));\n    class Workspace {\n        constructor(_id, folders = [], _configuration = null) {\n            this._id = _id;\n            this._configuration = _configuration;\n            this._foldersMap = map_1.TernarySearchTree.forPaths();\n            this.folders = folders;\n        }\n        update(workspace) {\n            this._id = workspace.id;\n            this._configuration = workspace.configuration;\n            this.folders = workspace.folders;\n        }\n        get folders() {\n            return this._folders;\n        }\n        set folders(folders) {\n            this._folders = folders;\n            this.updateFoldersMap();\n        }\n        get id() {\n            return this._id;\n        }\n        get configuration() {\n            return this._configuration;\n        }\n        set configuration(configuration) {\n            this._configuration = configuration;\n        }\n        getFolder(resource) {\n            if (!resource) {\n                return null;\n            }\n            return this._foldersMap.findSubstr(resource.toString()) || null;\n        }\n        updateFoldersMap() {\n            this._foldersMap = map_1.TernarySearchTree.forPaths();\n            for (const folder of this.folders) {\n                this._foldersMap.set(folder.uri.toString(), folder);\n            }\n        }\n        toJSON() {\n            return { id: this.id, folders: this.folders, configuration: this.configuration };\n        }\n    }\n    exports.Workspace = Workspace;\n    class WorkspaceFolder {\n        constructor(data, raw) {\n            this.raw = raw;\n            this.uri = data.uri;\n            this.index = data.index;\n            this.name = data.name;\n        }\n        toResource(relativePath) {\n            return resources.joinPath(this.uri, relativePath);\n        }\n        toJSON() {\n            return { uri: this.uri, name: this.name, index: this.index };\n        }\n    }\n    exports.WorkspaceFolder = WorkspaceFolder;\n    function toWorkspaceFolders(configuredFolders, relativeTo) {\n        let workspaceFolders = parseWorkspaceFolders(configuredFolders, relativeTo);\n        return ensureUnique(arrays_1.coalesce(workspaceFolders))\n            .map(({ uri, raw, name }, index) => new WorkspaceFolder({ uri, name: name || resources.basenameOrAuthority(uri), index }, raw));\n    }\n    exports.toWorkspaceFolders = toWorkspaceFolders;\n    function parseWorkspaceFolders(configuredFolders, relativeTo) {\n        return configuredFolders.map((configuredFolder, index) => {\n            let uri = null;\n            if (workspaces_1.isRawFileWorkspaceFolder(configuredFolder)) {\n                uri = toUri(configuredFolder.path, relativeTo);\n            }\n            else if (workspaces_1.isRawUriWorkspaceFolder(configuredFolder)) {\n                try {\n                    uri = uri_1.URI.parse(configuredFolder.uri);\n                    // this makes sure all workspace folder are absolute\n                    if (uri.path[0] !== '/') {\n                        uri = uri.with({ path: '/' + uri.path });\n                    }\n                }\n                catch (e) {\n                    console.warn(e);\n                    // ignore\n                }\n            }\n            if (!uri) {\n                return undefined;\n            }\n            return new WorkspaceFolder({ uri, name: configuredFolder.name /*is ensured in caller*/, index }, configuredFolder);\n        });\n    }\n    function toUri(path, relativeTo) {\n        if (path) {\n            if (path_1.isAbsolute(path)) {\n                return uri_1.URI.file(path);\n            }\n            if (relativeTo) {\n                return resources.joinPath(relativeTo, path);\n            }\n        }\n        return null;\n    }\n    function ensureUnique(folders) {\n        return arrays_1.distinct(folders, folder => platform_1.isLinux ? folder.uri.toString() : folder.uri.toString().toLowerCase());\n    }\n});\n",null]}