{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/languagesRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/event\", \"vs/base/common/lifecycle\", \"vs/base/common/mime\", \"vs/base/common/strings\", \"vs/editor/common/modes\", \"vs/editor/common/modes/modesRegistry\", \"vs/editor/common/modes/nullMode\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/platform/registry/common/platform\", \"vs/base/common/types\"], function (require, exports, errors_1, event_1, lifecycle_1, mime, strings, modes_1, modesRegistry_1, nullMode_1, configurationRegistry_1, platform_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n    class LanguagesRegistry extends lifecycle_1.Disposable {\n        constructor(useModesRegistry = true, warnOnOverwrite = false) {\n            super();\n            this._onDidChange = this._register(new event_1.Emitter());\n            this.onDidChange = this._onDidChange.event;\n            this._warnOnOverwrite = warnOnOverwrite;\n            this._nextLanguageId2 = 1;\n            this._languageIdToLanguage = [];\n            this._languageToLanguageId = Object.create(null);\n            this._languages = {};\n            this._mimeTypesMap = {};\n            this._nameMap = {};\n            this._lowercaseNameMap = {};\n            if (useModesRegistry) {\n                this._initializeFromRegistry();\n                this._register(modesRegistry_1.ModesRegistry.onDidChangeLanguages((m) => this._initializeFromRegistry()));\n            }\n        }\n        _initializeFromRegistry() {\n            this._languages = {};\n            this._mimeTypesMap = {};\n            this._nameMap = {};\n            this._lowercaseNameMap = {};\n            const desc = modesRegistry_1.ModesRegistry.getLanguages();\n            this._registerLanguages(desc);\n        }\n        _registerLanguages(desc) {\n            for (const d of desc) {\n                this._registerLanguage(d);\n            }\n            // Rebuild fast path maps\n            this._mimeTypesMap = {};\n            this._nameMap = {};\n            this._lowercaseNameMap = {};\n            Object.keys(this._languages).forEach((langId) => {\n                let language = this._languages[langId];\n                if (language.name) {\n                    this._nameMap[language.name] = language.identifier;\n                }\n                language.aliases.forEach((alias) => {\n                    this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n                });\n                language.mimetypes.forEach((mimetype) => {\n                    this._mimeTypesMap[mimetype] = language.identifier;\n                });\n            });\n            platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerOverrideIdentifiers(modesRegistry_1.ModesRegistry.getLanguages().map(language => language.id));\n            this._onDidChange.fire();\n        }\n        _getLanguageId(language) {\n            if (this._languageToLanguageId[language]) {\n                return this._languageToLanguageId[language];\n            }\n            const languageId = this._nextLanguageId2++;\n            this._languageIdToLanguage[languageId] = language;\n            this._languageToLanguageId[language] = languageId;\n            return languageId;\n        }\n        _registerLanguage(lang) {\n            const langId = lang.id;\n            let resolvedLanguage;\n            if (hasOwnProperty.call(this._languages, langId)) {\n                resolvedLanguage = this._languages[langId];\n            }\n            else {\n                const languageId = this._getLanguageId(langId);\n                resolvedLanguage = {\n                    identifier: new modes_1.LanguageIdentifier(langId, languageId),\n                    name: null,\n                    mimetypes: [],\n                    aliases: [],\n                    extensions: [],\n                    filenames: [],\n                    configurationFiles: []\n                };\n                this._languages[langId] = resolvedLanguage;\n            }\n            this._mergeLanguage(resolvedLanguage, lang);\n        }\n        _mergeLanguage(resolvedLanguage, lang) {\n            const langId = lang.id;\n            let primaryMime = null;\n            if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n                resolvedLanguage.mimetypes.push(...lang.mimetypes);\n                primaryMime = lang.mimetypes[0];\n            }\n            if (!primaryMime) {\n                primaryMime = `text/x-${langId}`;\n                resolvedLanguage.mimetypes.push(primaryMime);\n            }\n            if (Array.isArray(lang.extensions)) {\n                for (let extension of lang.extensions) {\n                    mime.registerTextMime({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n                    resolvedLanguage.extensions.push(extension);\n                }\n            }\n            if (Array.isArray(lang.filenames)) {\n                for (let filename of lang.filenames) {\n                    mime.registerTextMime({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                    resolvedLanguage.filenames.push(filename);\n                }\n            }\n            if (Array.isArray(lang.filenamePatterns)) {\n                for (let filenamePattern of lang.filenamePatterns) {\n                    mime.registerTextMime({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n                }\n            }\n            if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n                let firstLineRegexStr = lang.firstLine;\n                if (firstLineRegexStr.charAt(0) !== '^') {\n                    firstLineRegexStr = '^' + firstLineRegexStr;\n                }\n                try {\n                    let firstLineRegex = new RegExp(firstLineRegexStr);\n                    if (!strings.regExpLeadsToEndlessLoop(firstLineRegex)) {\n                        mime.registerTextMime({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                    }\n                }\n                catch (err) {\n                    // Most likely, the regex was bad\n                    errors_1.onUnexpectedError(err);\n                }\n            }\n            resolvedLanguage.aliases.push(langId);\n            let langAliases = null;\n            if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n                if (lang.aliases.length === 0) {\n                    // signal that this language should not get a name\n                    langAliases = [null];\n                }\n                else {\n                    langAliases = lang.aliases;\n                }\n            }\n            if (langAliases !== null) {\n                for (const langAlias of langAliases) {\n                    if (!langAlias || langAlias.length === 0) {\n                        continue;\n                    }\n                    resolvedLanguage.aliases.push(langAlias);\n                }\n            }\n            let containsAliases = (langAliases !== null && langAliases.length > 0);\n            if (containsAliases && langAliases[0] === null) {\n                // signal that this language should not get a name\n            }\n            else {\n                let bestName = (containsAliases ? langAliases[0] : null) || langId;\n                if (containsAliases || !resolvedLanguage.name) {\n                    resolvedLanguage.name = bestName;\n                }\n            }\n            if (lang.configuration) {\n                resolvedLanguage.configurationFiles.push(lang.configuration);\n            }\n        }\n        isRegisteredMode(mimetypeOrModeId) {\n            // Is this a known mime type ?\n            if (hasOwnProperty.call(this._mimeTypesMap, mimetypeOrModeId)) {\n                return true;\n            }\n            // Is this a known mode id ?\n            return hasOwnProperty.call(this._languages, mimetypeOrModeId);\n        }\n        getRegisteredModes() {\n            return Object.keys(this._languages);\n        }\n        getRegisteredLanguageNames() {\n            return Object.keys(this._nameMap);\n        }\n        getLanguageName(modeId) {\n            if (!hasOwnProperty.call(this._languages, modeId)) {\n                return null;\n            }\n            return this._languages[modeId].name;\n        }\n        getModeIdForLanguageNameLowercase(languageNameLower) {\n            if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n                return null;\n            }\n            return this._lowercaseNameMap[languageNameLower].language;\n        }\n        getConfigurationFiles(modeId) {\n            if (!hasOwnProperty.call(this._languages, modeId)) {\n                return [];\n            }\n            return this._languages[modeId].configurationFiles || [];\n        }\n        getMimeForMode(modeId) {\n            if (!hasOwnProperty.call(this._languages, modeId)) {\n                return null;\n            }\n            const language = this._languages[modeId];\n            return types_1.withUndefinedAsNull(language.mimetypes[0]);\n        }\n        extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds) {\n            if (!commaSeparatedMimetypesOrCommaSeparatedIds) {\n                return [];\n            }\n            return (commaSeparatedMimetypesOrCommaSeparatedIds.\n                split(',').\n                map((mimeTypeOrId) => mimeTypeOrId.trim()).\n                map((mimeTypeOrId) => {\n                if (hasOwnProperty.call(this._mimeTypesMap, mimeTypeOrId)) {\n                    return this._mimeTypesMap[mimeTypeOrId].language;\n                }\n                return mimeTypeOrId;\n            }).\n                filter((modeId) => {\n                return hasOwnProperty.call(this._languages, modeId);\n            }));\n        }\n        getLanguageIdentifier(_modeId) {\n            if (_modeId === nullMode_1.NULL_MODE_ID || _modeId === modes_1.LanguageId.Null) {\n                return nullMode_1.NULL_LANGUAGE_IDENTIFIER;\n            }\n            let modeId;\n            if (typeof _modeId === 'string') {\n                modeId = _modeId;\n            }\n            else {\n                modeId = this._languageIdToLanguage[_modeId];\n                if (!modeId) {\n                    return null;\n                }\n            }\n            if (!hasOwnProperty.call(this._languages, modeId)) {\n                return null;\n            }\n            return this._languages[modeId].identifier;\n        }\n        getModeIdsFromLanguageName(languageName) {\n            if (!languageName) {\n                return [];\n            }\n            if (hasOwnProperty.call(this._nameMap, languageName)) {\n                return [this._nameMap[languageName].language];\n            }\n            return [];\n        }\n        getModeIdsFromFilepathOrFirstLine(filepath, firstLine) {\n            if (!filepath && !firstLine) {\n                return [];\n            }\n            let mimeTypes = mime.guessMimeTypes(filepath, firstLine);\n            return this.extractModeIds(mimeTypes.join(','));\n        }\n        getExtensions(languageName) {\n            if (!hasOwnProperty.call(this._nameMap, languageName)) {\n                return [];\n            }\n            const languageId = this._nameMap[languageName];\n            return this._languages[languageId.language].extensions;\n        }\n        getFilenames(languageName) {\n            if (!hasOwnProperty.call(this._nameMap, languageName)) {\n                return [];\n            }\n            const languageId = this._nameMap[languageName];\n            return this._languages[languageId.language].filenames;\n        }\n    }\n    exports.LanguagesRegistry = LanguagesRegistry;\n});\n",null]}