{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\n/**\n * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n */\nvar BaseTextEditorModel = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseTextEditorModel, _super);\n    function BaseTextEditorModel(modelService, modeService, textEditorModelHandle) {\n        var _this = _super.call(this) || this;\n        _this.modelService = modelService;\n        _this.modeService = modeService;\n        if (textEditorModelHandle) {\n            _this.handleExistingModel(textEditorModelHandle);\n        }\n        return _this;\n    }\n    BaseTextEditorModel.prototype.handleExistingModel = function (textEditorModelHandle) {\n        // We need the resource to point to an existing model\n        var model = this.modelService.getModel(textEditorModelHandle);\n        if (!model) {\n            throw new Error(\"Document with resource \" + textEditorModelHandle.toString() + \" does not exist\");\n        }\n        this.textEditorModelHandle = textEditorModelHandle;\n        // Make sure we clean up when this model gets disposed\n        this.registerModelDisposeListener(model);\n    };\n    BaseTextEditorModel.prototype.registerModelDisposeListener = function (model) {\n        var _this = this;\n        if (this.modelDisposeListener) {\n            this.modelDisposeListener.dispose();\n        }\n        this.modelDisposeListener = model.onWillDispose(function () {\n            _this.textEditorModelHandle = null; // make sure we do not dispose code editor model again\n            _this.dispose();\n        });\n    };\n    Object.defineProperty(BaseTextEditorModel.prototype, \"textEditorModel\", {\n        get: function () {\n            return this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates the text editor model with the provided value, modeId (can be comma separated for multiple values) and optional resource URL.\n     */\n    BaseTextEditorModel.prototype.createTextEditorModel = function (value, resource, modeId) {\n        var firstLineText = this.getFirstLineText(value);\n        var languageSelection = this.getOrCreateMode(this.modeService, modeId, firstLineText);\n        return this.doCreateTextEditorModel(value, languageSelection, resource);\n    };\n    BaseTextEditorModel.prototype.doCreateTextEditorModel = function (value, languageSelection, resource) {\n        var model = resource && this.modelService.getModel(resource);\n        if (!model) {\n            model = this.modelService.createModel(value, languageSelection, resource);\n            this.createdEditorModel = true;\n            // Make sure we clean up when this model gets disposed\n            this.registerModelDisposeListener(model);\n        }\n        else {\n            this.modelService.updateModel(model, value);\n            this.modelService.setMode(model, languageSelection);\n        }\n        this.textEditorModelHandle = model.uri;\n        return this;\n    };\n    BaseTextEditorModel.prototype.getFirstLineText = function (value) {\n        // text buffer factory\n        var textBufferFactory = value;\n        if (typeof textBufferFactory.getFirstLineText === 'function') {\n            return textBufferFactory.getFirstLineText(100);\n        }\n        // text model\n        var textSnapshot = value;\n        return textSnapshot.getLineContent(1).substr(0, 100);\n    };\n    /**\n     * Gets the mode for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n     *\n     * @param firstLineText optional first line of the text buffer to set the mode on. This can be used to guess a mode from content.\n     */\n    BaseTextEditorModel.prototype.getOrCreateMode = function (modeService, modeId, firstLineText) {\n        return modeService.create(modeId);\n    };\n    /**\n     * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n     */\n    BaseTextEditorModel.prototype.updateTextEditorModel = function (newValue) {\n        if (!this.textEditorModel) {\n            return;\n        }\n        this.modelService.updateModel(this.textEditorModel, newValue);\n    };\n    BaseTextEditorModel.prototype.createSnapshot = function () {\n        var model = this.textEditorModel;\n        if (model) {\n            return model.createSnapshot(true /* Preserve BOM */);\n        }\n        return null;\n    };\n    BaseTextEditorModel.prototype.isResolved = function () {\n        return !!this.textEditorModelHandle;\n    };\n    BaseTextEditorModel.prototype.dispose = function () {\n        if (this.modelDisposeListener) {\n            this.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n            this.modelDisposeListener = null;\n        }\n        if (this.textEditorModelHandle && this.createdEditorModel) {\n            this.modelService.destroyModel(this.textEditorModelHandle);\n        }\n        this.textEditorModelHandle = null;\n        this.createdEditorModel = false;\n        _super.prototype.dispose.call(this);\n    };\n    BaseTextEditorModel = tslib_1.__decorate([\n        tslib_1.__param(0, modelService_1.IModelService),\n        tslib_1.__param(1, modeService_1.IModeService)\n    ], BaseTextEditorModel);\n    return BaseTextEditorModel;\n}(editor_1.EditorModel));\nexports.BaseTextEditorModel = BaseTextEditorModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textEditorModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel, ITextBufferFactory } from 'vs/editor/common/model';\nimport { EditorModel } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextEditorModel, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IModeService, ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ITextSnapshot } from 'vs/platform/files/common/files';\n\n/**\n * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class BaseTextEditorModel extends EditorModel implements ITextEditorModel {\n\n\tprotected createdEditorModel: boolean;\n\n\tprivate textEditorModelHandle: URI | null;\n\tprivate modelDisposeListener: IDisposable | null;\n\n\tconstructor(\n\t\t@IModelService protected modelService: IModelService,\n\t\t@IModeService protected modeService: IModeService,\n\t\ttextEditorModelHandle?: URI\n\t) {\n\t\tsuper();\n\n\t\tif (textEditorModelHandle) {\n\t\t\tthis.handleExistingModel(textEditorModelHandle);\n\t\t}\n\t}\n\n\tprivate handleExistingModel(textEditorModelHandle: URI): void {\n\n\t\t// We need the resource to point to an existing model\n\t\tconst model = this.modelService.getModel(textEditorModelHandle);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Document with resource ${textEditorModelHandle.toString()} does not exist`);\n\t\t}\n\n\t\tthis.textEditorModelHandle = textEditorModelHandle;\n\n\t\t// Make sure we clean up when this model gets disposed\n\t\tthis.registerModelDisposeListener(model);\n\t}\n\n\tprivate registerModelDisposeListener(model: ITextModel): void {\n\t\tif (this.modelDisposeListener) {\n\t\t\tthis.modelDisposeListener.dispose();\n\t\t}\n\n\t\tthis.modelDisposeListener = model.onWillDispose(() => {\n\t\t\tthis.textEditorModelHandle = null; // make sure we do not dispose code editor model again\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget textEditorModel(): ITextModel | null {\n\t\treturn this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n\t}\n\n\tabstract isReadonly(): boolean;\n\n\t/**\n\t * Creates the text editor model with the provided value, modeId (can be comma separated for multiple values) and optional resource URL.\n\t */\n\tprotected createTextEditorModel(value: ITextBufferFactory, resource: URI | undefined, modeId?: string): EditorModel {\n\t\tconst firstLineText = this.getFirstLineText(value);\n\t\tconst languageSelection = this.getOrCreateMode(this.modeService, modeId, firstLineText);\n\n\t\treturn this.doCreateTextEditorModel(value, languageSelection, resource);\n\t}\n\n\tprivate doCreateTextEditorModel(value: ITextBufferFactory, languageSelection: ILanguageSelection, resource: URI | undefined): EditorModel {\n\t\tlet model = resource && this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\tmodel = this.modelService.createModel(value, languageSelection, resource);\n\t\t\tthis.createdEditorModel = true;\n\n\t\t\t// Make sure we clean up when this model gets disposed\n\t\t\tthis.registerModelDisposeListener(model);\n\t\t} else {\n\t\t\tthis.modelService.updateModel(model, value);\n\t\t\tthis.modelService.setMode(model, languageSelection);\n\t\t}\n\n\t\tthis.textEditorModelHandle = model.uri;\n\n\t\treturn this;\n\t}\n\n\tprotected getFirstLineText(value: ITextBufferFactory | ITextModel): string {\n\n\t\t// text buffer factory\n\t\tconst textBufferFactory = value as ITextBufferFactory;\n\t\tif (typeof textBufferFactory.getFirstLineText === 'function') {\n\t\t\treturn textBufferFactory.getFirstLineText(100);\n\t\t}\n\n\t\t// text model\n\t\tconst textSnapshot = value as ITextModel;\n\t\treturn textSnapshot.getLineContent(1).substr(0, 100);\n\t}\n\n\t/**\n\t * Gets the mode for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n\t *\n\t * @param firstLineText optional first line of the text buffer to set the mode on. This can be used to guess a mode from content.\n\t */\n\tprotected getOrCreateMode(modeService: IModeService, modeId: string | undefined, firstLineText?: string): ILanguageSelection {\n\t\treturn modeService.create(modeId);\n\t}\n\n\t/**\n\t * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n\t */\n\tprotected updateTextEditorModel(newValue: ITextBufferFactory): void {\n\t\tif (!this.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modelService.updateModel(this.textEditorModel, newValue);\n\t}\n\n\tcreateSnapshot(): ITextSnapshot | null {\n\t\tconst model = this.textEditorModel;\n\t\tif (model) {\n\t\t\treturn model.createSnapshot(true /* Preserve BOM */);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisResolved(): this is IResolvedTextEditorModel {\n\t\treturn !!this.textEditorModelHandle;\n\t}\n\n\tdispose(): void {\n\t\tif (this.modelDisposeListener) {\n\t\t\tthis.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n\t\t\tthis.modelDisposeListener = null;\n\t\t}\n\n\t\tif (this.textEditorModelHandle && this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.textEditorModelHandle);\n\t\t}\n\n\t\tthis.textEditorModelHandle = null;\n\t\tthis.createdEditorModel = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}]}