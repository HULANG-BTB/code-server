{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/node/terminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"os\", \"vs/base/common/platform\", \"vs/base/node/processes\", \"vs/base/node/pfs\", \"vs/workbench/contrib/terminal/common/terminal\"], function (require, exports, os, platform, processes, pfs_1, terminal_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getDefaultShell(p) {\n        if (p === platform.Platform.Windows) {\n            if (platform.isWindows) {\n                return getTerminalDefaultShellWindows();\n            }\n            // Don't detect Windows shell when not on Windows\n            return processes.getWindowsShell();\n        }\n        // Only use $SHELL for the current OS\n        if (platform.isLinux && p === platform.Platform.Mac || platform.isMacintosh && p === platform.Platform.Linux) {\n            return '/bin/bash';\n        }\n        return getTerminalDefaultShellUnixLike();\n    }\n    exports.getDefaultShell = getDefaultShell;\n    let _TERMINAL_DEFAULT_SHELL_UNIX_LIKE = null;\n    function getTerminalDefaultShellUnixLike() {\n        if (!_TERMINAL_DEFAULT_SHELL_UNIX_LIKE) {\n            let unixLikeTerminal = 'sh';\n            if (!platform.isWindows && process.env.SHELL) {\n                unixLikeTerminal = process.env.SHELL;\n                // Some systems have $SHELL set to /bin/false which breaks the terminal\n                if (unixLikeTerminal === '/bin/false') {\n                    unixLikeTerminal = '/bin/bash';\n                }\n            }\n            if (platform.isWindows) {\n                unixLikeTerminal = '/bin/bash'; // for WSL\n            }\n            _TERMINAL_DEFAULT_SHELL_UNIX_LIKE = unixLikeTerminal;\n        }\n        return _TERMINAL_DEFAULT_SHELL_UNIX_LIKE;\n    }\n    let _TERMINAL_DEFAULT_SHELL_WINDOWS = null;\n    function getTerminalDefaultShellWindows() {\n        if (!_TERMINAL_DEFAULT_SHELL_WINDOWS) {\n            const isAtLeastWindows10 = platform.isWindows && parseFloat(os.release()) >= 10;\n            const is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n            const powerShellPath = `${process.env.windir}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`;\n            _TERMINAL_DEFAULT_SHELL_WINDOWS = isAtLeastWindows10 ? powerShellPath : processes.getWindowsShell();\n        }\n        return _TERMINAL_DEFAULT_SHELL_WINDOWS;\n    }\n    let detectedDistro = terminal_1.LinuxDistro.Unknown;\n    if (platform.isLinux) {\n        const file = '/etc/os-release';\n        pfs_1.fileExists(file).then(exists => {\n            if (!exists) {\n                return;\n            }\n            pfs_1.readFile(file).then(b => {\n                const contents = b.toString();\n                if (/NAME=\"?Fedora\"?/.test(contents)) {\n                    detectedDistro = terminal_1.LinuxDistro.Fedora;\n                }\n                else if (/NAME=\"?Ubuntu\"?/.test(contents)) {\n                    detectedDistro = terminal_1.LinuxDistro.Ubuntu;\n                }\n            });\n        });\n    }\n    exports.linuxDistro = detectedDistro;\n    function getWindowsBuildNumber() {\n        const osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n        let buildNumber = 0;\n        if (osVersion && osVersion.length === 4) {\n            buildNumber = parseInt(osVersion[3]);\n        }\n        return buildNumber;\n    }\n    exports.getWindowsBuildNumber = getWindowsBuildNumber;\n});\n",null]}