{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostTypeConverters.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHostTypeConverters.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/modes\", \"./extHostTypes\", \"vs/editor/common/model\", \"vs/base/common/uri\", \"vs/platform/progress/common/progress\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/base/common/htmlContent\", \"vs/platform/markers/common/markers\", \"vs/workbench/services/editor/common/editorService\", \"vs/base/common/marked/marked\", \"vs/base/common/marshalling\", \"vs/base/common/objects\", \"vs/platform/log/common/log\", \"vs/editor/common/config/editorOptions\"], function (require, exports, modes, types, model_1, uri_1, progress_1, textfiles_1, htmlContent, markers_1, editorService_1, marked, marshalling_1, objects_1, log_1, editorOptions_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Selection;\n    (function (Selection) {\n        function to(selection) {\n            const { selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn } = selection;\n            const start = new types.Position(selectionStartLineNumber - 1, selectionStartColumn - 1);\n            const end = new types.Position(positionLineNumber - 1, positionColumn - 1);\n            return new types.Selection(start, end);\n        }\n        Selection.to = to;\n        function from(selection) {\n            const { anchor, active } = selection;\n            return {\n                selectionStartLineNumber: anchor.line + 1,\n                selectionStartColumn: anchor.character + 1,\n                positionLineNumber: active.line + 1,\n                positionColumn: active.character + 1\n            };\n        }\n        Selection.from = from;\n    })(Selection = exports.Selection || (exports.Selection = {}));\n    var Range;\n    (function (Range) {\n        function from(range) {\n            if (!range) {\n                return undefined;\n            }\n            const { start, end } = range;\n            return {\n                startLineNumber: start.line + 1,\n                startColumn: start.character + 1,\n                endLineNumber: end.line + 1,\n                endColumn: end.character + 1\n            };\n        }\n        Range.from = from;\n        function to(range) {\n            if (!range) {\n                return undefined;\n            }\n            const { startLineNumber, startColumn, endLineNumber, endColumn } = range;\n            return new types.Range(startLineNumber - 1, startColumn - 1, endLineNumber - 1, endColumn - 1);\n        }\n        Range.to = to;\n    })(Range = exports.Range || (exports.Range = {}));\n    var Position;\n    (function (Position) {\n        function to(position) {\n            return new types.Position(position.lineNumber - 1, position.column - 1);\n        }\n        Position.to = to;\n        function from(position) {\n            return { lineNumber: position.line + 1, column: position.character + 1 };\n        }\n        Position.from = from;\n    })(Position = exports.Position || (exports.Position = {}));\n    var DiagnosticTag;\n    (function (DiagnosticTag) {\n        function from(value) {\n            switch (value) {\n                case types.DiagnosticTag.Unnecessary:\n                    return markers_1.MarkerTag.Unnecessary;\n            }\n            return undefined;\n        }\n        DiagnosticTag.from = from;\n    })(DiagnosticTag = exports.DiagnosticTag || (exports.DiagnosticTag = {}));\n    var Diagnostic;\n    (function (Diagnostic) {\n        function from(value) {\n            const { isString, isNumber } = require('vs/base/common/types');\n            const { coalesce } = require('vs/base/common/arrays');\n            return Object.assign({}, Range.from(value.range), { message: value.message, source: value.source, code: isString(value.code) || isNumber(value.code) ? String(value.code) : undefined, severity: DiagnosticSeverity.from(value.severity), relatedInformation: value.relatedInformation && value.relatedInformation.map(DiagnosticRelatedInformation.from), tags: Array.isArray(value.tags) ? coalesce(value.tags.map(DiagnosticTag.from)) : undefined });\n        }\n        Diagnostic.from = from;\n    })(Diagnostic = exports.Diagnostic || (exports.Diagnostic = {}));\n    var DiagnosticRelatedInformation;\n    (function (DiagnosticRelatedInformation) {\n        function from(value) {\n            return Object.assign({}, Range.from(value.location.range), { message: value.message, resource: value.location.uri });\n        }\n        DiagnosticRelatedInformation.from = from;\n        function to(value) {\n            return new types.DiagnosticRelatedInformation(new types.Location(value.resource, Range.to(value)), value.message);\n        }\n        DiagnosticRelatedInformation.to = to;\n    })(DiagnosticRelatedInformation = exports.DiagnosticRelatedInformation || (exports.DiagnosticRelatedInformation = {}));\n    var DiagnosticSeverity;\n    (function (DiagnosticSeverity) {\n        function from(value) {\n            switch (value) {\n                case types.DiagnosticSeverity.Error:\n                    return markers_1.MarkerSeverity.Error;\n                case types.DiagnosticSeverity.Warning:\n                    return markers_1.MarkerSeverity.Warning;\n                case types.DiagnosticSeverity.Information:\n                    return markers_1.MarkerSeverity.Info;\n                case types.DiagnosticSeverity.Hint:\n                    return markers_1.MarkerSeverity.Hint;\n            }\n            return markers_1.MarkerSeverity.Error;\n        }\n        DiagnosticSeverity.from = from;\n        function to(value) {\n            switch (value) {\n                case markers_1.MarkerSeverity.Info:\n                    return types.DiagnosticSeverity.Information;\n                case markers_1.MarkerSeverity.Warning:\n                    return types.DiagnosticSeverity.Warning;\n                case markers_1.MarkerSeverity.Error:\n                    return types.DiagnosticSeverity.Error;\n                case markers_1.MarkerSeverity.Hint:\n                    return types.DiagnosticSeverity.Hint;\n            }\n            return types.DiagnosticSeverity.Error;\n        }\n        DiagnosticSeverity.to = to;\n    })(DiagnosticSeverity = exports.DiagnosticSeverity || (exports.DiagnosticSeverity = {}));\n    var ViewColumn;\n    (function (ViewColumn) {\n        function from(column) {\n            if (typeof column === 'number' && column >= types.ViewColumn.One) {\n                return column - 1; // adjust zero index (ViewColumn.ONE => 0)\n            }\n            if (column === types.ViewColumn.Beside) {\n                return editorService_1.SIDE_GROUP;\n            }\n            return editorService_1.ACTIVE_GROUP; // default is always the active group\n        }\n        ViewColumn.from = from;\n        function to(position) {\n            if (typeof position === 'number' && position >= 0) {\n                return position + 1; // adjust to index (ViewColumn.ONE => 1)\n            }\n            throw new Error(`invalid 'EditorViewColumn'`);\n        }\n        ViewColumn.to = to;\n    })(ViewColumn = exports.ViewColumn || (exports.ViewColumn = {}));\n    function isDecorationOptions(something) {\n        return (typeof something.range !== 'undefined');\n    }\n    function isDecorationOptionsArr(something) {\n        if (something.length === 0) {\n            return true;\n        }\n        return isDecorationOptions(something[0]) ? true : false;\n    }\n    exports.isDecorationOptionsArr = isDecorationOptionsArr;\n    var MarkdownString;\n    (function (MarkdownString) {\n        function fromMany(markup) {\n            return markup.map(MarkdownString.from);\n        }\n        MarkdownString.fromMany = fromMany;\n        function isCodeblock(thing) {\n            return thing && typeof thing === 'object'\n                && typeof thing.language === 'string'\n                && typeof thing.value === 'string';\n        }\n        function from(markup) {\n            let res;\n            if (isCodeblock(markup)) {\n                const { language, value } = markup;\n                res = { value: '```' + language + '\\n' + value + '\\n```\\n' };\n            }\n            else if (htmlContent.isMarkdownString(markup)) {\n                res = markup;\n            }\n            else if (typeof markup === 'string') {\n                res = { value: markup };\n            }\n            else {\n                res = { value: '' };\n            }\n            // extract uris into a separate object\n            const resUris = Object.create(null);\n            res.uris = resUris;\n            const renderer = new marked.Renderer();\n            renderer.image = renderer.link = (href) => {\n                try {\n                    let uri = uri_1.URI.parse(href, true);\n                    uri = uri.with({ query: _uriMassage(uri.query, resUris) });\n                    resUris[href] = uri;\n                }\n                catch (e) {\n                    // ignore\n                }\n                return '';\n            };\n            marked(res.value, { renderer });\n            return res;\n        }\n        MarkdownString.from = from;\n        function _uriMassage(part, bucket) {\n            if (!part) {\n                return part;\n            }\n            let data;\n            try {\n                data = marshalling_1.parse(decodeURIComponent(part));\n            }\n            catch (e) {\n                // ignore\n            }\n            if (!data) {\n                return part;\n            }\n            data = objects_1.cloneAndChange(data, value => {\n                if (value instanceof uri_1.URI) {\n                    const key = `__uri_${Math.random().toString(16).slice(2, 8)}`;\n                    bucket[key] = value;\n                    return key;\n                }\n                else {\n                    return undefined;\n                }\n            });\n            return encodeURIComponent(JSON.stringify(data));\n        }\n        function to(value) {\n            const ret = new htmlContent.MarkdownString(value.value);\n            ret.isTrusted = value.isTrusted;\n            return ret;\n        }\n        MarkdownString.to = to;\n        function fromStrict(value) {\n            if (!value) {\n                return undefined;\n            }\n            return typeof value === 'string' ? value : MarkdownString.from(value);\n        }\n        MarkdownString.fromStrict = fromStrict;\n    })(MarkdownString = exports.MarkdownString || (exports.MarkdownString = {}));\n    function fromRangeOrRangeWithMessage(ranges) {\n        if (isDecorationOptionsArr(ranges)) {\n            return ranges.map((r) => {\n                return {\n                    range: Range.from(r.range),\n                    hoverMessage: Array.isArray(r.hoverMessage)\n                        ? MarkdownString.fromMany(r.hoverMessage)\n                        : (r.hoverMessage ? MarkdownString.from(r.hoverMessage) : undefined),\n                    renderOptions: r.renderOptions\n                };\n            });\n        }\n        else {\n            return ranges.map((r) => {\n                return {\n                    range: Range.from(r)\n                };\n            });\n        }\n    }\n    exports.fromRangeOrRangeWithMessage = fromRangeOrRangeWithMessage;\n    function pathOrURIToURI(value) {\n        if (typeof value === 'undefined') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return uri_1.URI.file(value);\n        }\n        else {\n            return value;\n        }\n    }\n    exports.pathOrURIToURI = pathOrURIToURI;\n    var ThemableDecorationAttachmentRenderOptions;\n    (function (ThemableDecorationAttachmentRenderOptions) {\n        function from(options) {\n            if (typeof options === 'undefined') {\n                return options;\n            }\n            return {\n                contentText: options.contentText,\n                contentIconPath: options.contentIconPath ? pathOrURIToURI(options.contentIconPath) : undefined,\n                border: options.border,\n                borderColor: options.borderColor,\n                fontStyle: options.fontStyle,\n                fontWeight: options.fontWeight,\n                textDecoration: options.textDecoration,\n                color: options.color,\n                backgroundColor: options.backgroundColor,\n                margin: options.margin,\n                width: options.width,\n                height: options.height,\n            };\n        }\n        ThemableDecorationAttachmentRenderOptions.from = from;\n    })(ThemableDecorationAttachmentRenderOptions = exports.ThemableDecorationAttachmentRenderOptions || (exports.ThemableDecorationAttachmentRenderOptions = {}));\n    var ThemableDecorationRenderOptions;\n    (function (ThemableDecorationRenderOptions) {\n        function from(options) {\n            if (typeof options === 'undefined') {\n                return options;\n            }\n            return {\n                backgroundColor: options.backgroundColor,\n                outline: options.outline,\n                outlineColor: options.outlineColor,\n                outlineStyle: options.outlineStyle,\n                outlineWidth: options.outlineWidth,\n                border: options.border,\n                borderColor: options.borderColor,\n                borderRadius: options.borderRadius,\n                borderSpacing: options.borderSpacing,\n                borderStyle: options.borderStyle,\n                borderWidth: options.borderWidth,\n                fontStyle: options.fontStyle,\n                fontWeight: options.fontWeight,\n                textDecoration: options.textDecoration,\n                cursor: options.cursor,\n                color: options.color,\n                opacity: options.opacity,\n                letterSpacing: options.letterSpacing,\n                gutterIconPath: options.gutterIconPath ? pathOrURIToURI(options.gutterIconPath) : undefined,\n                gutterIconSize: options.gutterIconSize,\n                overviewRulerColor: options.overviewRulerColor,\n                before: options.before ? ThemableDecorationAttachmentRenderOptions.from(options.before) : undefined,\n                after: options.after ? ThemableDecorationAttachmentRenderOptions.from(options.after) : undefined,\n            };\n        }\n        ThemableDecorationRenderOptions.from = from;\n    })(ThemableDecorationRenderOptions = exports.ThemableDecorationRenderOptions || (exports.ThemableDecorationRenderOptions = {}));\n    var DecorationRangeBehavior;\n    (function (DecorationRangeBehavior) {\n        function from(value) {\n            if (typeof value === 'undefined') {\n                return value;\n            }\n            switch (value) {\n                case types.DecorationRangeBehavior.OpenOpen:\n                    return model_1.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\n                case types.DecorationRangeBehavior.ClosedClosed:\n                    return model_1.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n                case types.DecorationRangeBehavior.OpenClosed:\n                    return model_1.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore;\n                case types.DecorationRangeBehavior.ClosedOpen:\n                    return model_1.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter;\n            }\n        }\n        DecorationRangeBehavior.from = from;\n    })(DecorationRangeBehavior = exports.DecorationRangeBehavior || (exports.DecorationRangeBehavior = {}));\n    var DecorationRenderOptions;\n    (function (DecorationRenderOptions) {\n        function from(options) {\n            return {\n                isWholeLine: options.isWholeLine,\n                rangeBehavior: options.rangeBehavior ? DecorationRangeBehavior.from(options.rangeBehavior) : undefined,\n                overviewRulerLane: options.overviewRulerLane,\n                light: options.light ? ThemableDecorationRenderOptions.from(options.light) : undefined,\n                dark: options.dark ? ThemableDecorationRenderOptions.from(options.dark) : undefined,\n                backgroundColor: options.backgroundColor,\n                outline: options.outline,\n                outlineColor: options.outlineColor,\n                outlineStyle: options.outlineStyle,\n                outlineWidth: options.outlineWidth,\n                border: options.border,\n                borderColor: options.borderColor,\n                borderRadius: options.borderRadius,\n                borderSpacing: options.borderSpacing,\n                borderStyle: options.borderStyle,\n                borderWidth: options.borderWidth,\n                fontStyle: options.fontStyle,\n                fontWeight: options.fontWeight,\n                textDecoration: options.textDecoration,\n                cursor: options.cursor,\n                color: options.color,\n                opacity: options.opacity,\n                letterSpacing: options.letterSpacing,\n                gutterIconPath: options.gutterIconPath ? pathOrURIToURI(options.gutterIconPath) : undefined,\n                gutterIconSize: options.gutterIconSize,\n                overviewRulerColor: options.overviewRulerColor,\n                before: options.before ? ThemableDecorationAttachmentRenderOptions.from(options.before) : undefined,\n                after: options.after ? ThemableDecorationAttachmentRenderOptions.from(options.after) : undefined,\n            };\n        }\n        DecorationRenderOptions.from = from;\n    })(DecorationRenderOptions = exports.DecorationRenderOptions || (exports.DecorationRenderOptions = {}));\n    var TextEdit;\n    (function (TextEdit) {\n        function from(edit) {\n            return {\n                text: edit.newText,\n                eol: EndOfLine.from(edit.newEol),\n                range: Range.from(edit.range)\n            };\n        }\n        TextEdit.from = from;\n        function to(edit) {\n            const result = new types.TextEdit(Range.to(edit.range), edit.text);\n            result.newEol = (typeof edit.eol === 'undefined' ? undefined : EndOfLine.to(edit.eol));\n            return result;\n        }\n        TextEdit.to = to;\n    })(TextEdit = exports.TextEdit || (exports.TextEdit = {}));\n    var WorkspaceEdit;\n    (function (WorkspaceEdit) {\n        function from(value, documents) {\n            const result = {\n                edits: []\n            };\n            for (const entry of value._allEntries()) {\n                const [uri, uriOrEdits] = entry;\n                if (Array.isArray(uriOrEdits)) {\n                    // text edits\n                    const doc = documents && uri ? documents.getDocument(uri) : undefined;\n                    result.edits.push({ resource: uri, modelVersionId: doc && doc.version, edits: uriOrEdits.map(TextEdit.from) });\n                }\n                else {\n                    // resource edits\n                    result.edits.push({ oldUri: uri, newUri: uriOrEdits, options: entry[2] });\n                }\n            }\n            return result;\n        }\n        WorkspaceEdit.from = from;\n        function to(value) {\n            const result = new types.WorkspaceEdit();\n            for (const edit of value.edits) {\n                if (Array.isArray(edit.edits)) {\n                    result.set(uri_1.URI.revive(edit.resource), edit.edits.map(TextEdit.to));\n                }\n                else {\n                    result.renameFile(uri_1.URI.revive(edit.oldUri), uri_1.URI.revive(edit.newUri), edit.options);\n                }\n            }\n            return result;\n        }\n        WorkspaceEdit.to = to;\n    })(WorkspaceEdit = exports.WorkspaceEdit || (exports.WorkspaceEdit = {}));\n    var SymbolKind;\n    (function (SymbolKind) {\n        const _fromMapping = Object.create(null);\n        _fromMapping[types.SymbolKind.File] = modes.SymbolKind.File;\n        _fromMapping[types.SymbolKind.Module] = modes.SymbolKind.Module;\n        _fromMapping[types.SymbolKind.Namespace] = modes.SymbolKind.Namespace;\n        _fromMapping[types.SymbolKind.Package] = modes.SymbolKind.Package;\n        _fromMapping[types.SymbolKind.Class] = modes.SymbolKind.Class;\n        _fromMapping[types.SymbolKind.Method] = modes.SymbolKind.Method;\n        _fromMapping[types.SymbolKind.Property] = modes.SymbolKind.Property;\n        _fromMapping[types.SymbolKind.Field] = modes.SymbolKind.Field;\n        _fromMapping[types.SymbolKind.Constructor] = modes.SymbolKind.Constructor;\n        _fromMapping[types.SymbolKind.Enum] = modes.SymbolKind.Enum;\n        _fromMapping[types.SymbolKind.Interface] = modes.SymbolKind.Interface;\n        _fromMapping[types.SymbolKind.Function] = modes.SymbolKind.Function;\n        _fromMapping[types.SymbolKind.Variable] = modes.SymbolKind.Variable;\n        _fromMapping[types.SymbolKind.Constant] = modes.SymbolKind.Constant;\n        _fromMapping[types.SymbolKind.String] = modes.SymbolKind.String;\n        _fromMapping[types.SymbolKind.Number] = modes.SymbolKind.Number;\n        _fromMapping[types.SymbolKind.Boolean] = modes.SymbolKind.Boolean;\n        _fromMapping[types.SymbolKind.Array] = modes.SymbolKind.Array;\n        _fromMapping[types.SymbolKind.Object] = modes.SymbolKind.Object;\n        _fromMapping[types.SymbolKind.Key] = modes.SymbolKind.Key;\n        _fromMapping[types.SymbolKind.Null] = modes.SymbolKind.Null;\n        _fromMapping[types.SymbolKind.EnumMember] = modes.SymbolKind.EnumMember;\n        _fromMapping[types.SymbolKind.Struct] = modes.SymbolKind.Struct;\n        _fromMapping[types.SymbolKind.Event] = modes.SymbolKind.Event;\n        _fromMapping[types.SymbolKind.Operator] = modes.SymbolKind.Operator;\n        _fromMapping[types.SymbolKind.TypeParameter] = modes.SymbolKind.TypeParameter;\n        function from(kind) {\n            return typeof _fromMapping[kind] === 'number' ? _fromMapping[kind] : modes.SymbolKind.Property;\n        }\n        SymbolKind.from = from;\n        function to(kind) {\n            for (const k in _fromMapping) {\n                if (_fromMapping[k] === kind) {\n                    return Number(k);\n                }\n            }\n            return types.SymbolKind.Property;\n        }\n        SymbolKind.to = to;\n    })(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));\n    var WorkspaceSymbol;\n    (function (WorkspaceSymbol) {\n        function from(info) {\n            return {\n                name: info.name,\n                kind: SymbolKind.from(info.kind),\n                containerName: info.containerName,\n                location: location.from(info.location)\n            };\n        }\n        WorkspaceSymbol.from = from;\n        function to(info) {\n            return new types.SymbolInformation(info.name, SymbolKind.to(info.kind), info.containerName, location.to(info.location));\n        }\n        WorkspaceSymbol.to = to;\n    })(WorkspaceSymbol = exports.WorkspaceSymbol || (exports.WorkspaceSymbol = {}));\n    var DocumentSymbol;\n    (function (DocumentSymbol) {\n        function from(info) {\n            const result = {\n                name: info.name || '!!MISSING: name!!',\n                detail: info.detail,\n                range: Range.from(info.range),\n                selectionRange: Range.from(info.selectionRange),\n                kind: SymbolKind.from(info.kind)\n            };\n            if (info.children) {\n                result.children = info.children.map(from);\n            }\n            return result;\n        }\n        DocumentSymbol.from = from;\n        function to(info) {\n            const result = new types.DocumentSymbol(info.name, info.detail, SymbolKind.to(info.kind), Range.to(info.range), Range.to(info.selectionRange));\n            if (info.children) {\n                result.children = info.children.map(to);\n            }\n            return result;\n        }\n        DocumentSymbol.to = to;\n    })(DocumentSymbol = exports.DocumentSymbol || (exports.DocumentSymbol = {}));\n    var location;\n    (function (location) {\n        function from(value) {\n            return {\n                range: value.range && Range.from(value.range),\n                uri: value.uri\n            };\n        }\n        location.from = from;\n        function to(value) {\n            return new types.Location(value.uri, Range.to(value.range));\n        }\n        location.to = to;\n    })(location = exports.location || (exports.location = {}));\n    var DefinitionLink;\n    (function (DefinitionLink) {\n        function from(value) {\n            const definitionLink = value;\n            const location = value;\n            return {\n                originSelectionRange: definitionLink.originSelectionRange\n                    ? Range.from(definitionLink.originSelectionRange)\n                    : undefined,\n                uri: definitionLink.targetUri ? definitionLink.targetUri : location.uri,\n                range: Range.from(definitionLink.targetRange ? definitionLink.targetRange : location.range),\n                targetSelectionRange: definitionLink.targetSelectionRange\n                    ? Range.from(definitionLink.targetSelectionRange)\n                    : undefined,\n            };\n        }\n        DefinitionLink.from = from;\n    })(DefinitionLink = exports.DefinitionLink || (exports.DefinitionLink = {}));\n    var Hover;\n    (function (Hover) {\n        function from(hover) {\n            return {\n                range: Range.from(hover.range),\n                contents: MarkdownString.fromMany(hover.contents)\n            };\n        }\n        Hover.from = from;\n        function to(info) {\n            return new types.Hover(info.contents.map(MarkdownString.to), Range.to(info.range));\n        }\n        Hover.to = to;\n    })(Hover = exports.Hover || (exports.Hover = {}));\n    var DocumentHighlight;\n    (function (DocumentHighlight) {\n        function from(documentHighlight) {\n            return {\n                range: Range.from(documentHighlight.range),\n                kind: documentHighlight.kind\n            };\n        }\n        DocumentHighlight.from = from;\n        function to(occurrence) {\n            return new types.DocumentHighlight(Range.to(occurrence.range), occurrence.kind);\n        }\n        DocumentHighlight.to = to;\n    })(DocumentHighlight = exports.DocumentHighlight || (exports.DocumentHighlight = {}));\n    var CompletionTriggerKind;\n    (function (CompletionTriggerKind) {\n        function to(kind) {\n            switch (kind) {\n                case modes.CompletionTriggerKind.TriggerCharacter:\n                    return types.CompletionTriggerKind.TriggerCharacter;\n                case modes.CompletionTriggerKind.TriggerForIncompleteCompletions:\n                    return types.CompletionTriggerKind.TriggerForIncompleteCompletions;\n                case modes.CompletionTriggerKind.Invoke:\n                default:\n                    return types.CompletionTriggerKind.Invoke;\n            }\n        }\n        CompletionTriggerKind.to = to;\n    })(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\n    var CompletionContext;\n    (function (CompletionContext) {\n        function to(context) {\n            return {\n                triggerKind: CompletionTriggerKind.to(context.triggerKind),\n                triggerCharacter: context.triggerCharacter\n            };\n        }\n        CompletionContext.to = to;\n    })(CompletionContext = exports.CompletionContext || (exports.CompletionContext = {}));\n    var CompletionItemKind;\n    (function (CompletionItemKind) {\n        function from(kind) {\n            switch (kind) {\n                case types.CompletionItemKind.Method: return modes.CompletionItemKind.Method;\n                case types.CompletionItemKind.Function: return modes.CompletionItemKind.Function;\n                case types.CompletionItemKind.Constructor: return modes.CompletionItemKind.Constructor;\n                case types.CompletionItemKind.Field: return modes.CompletionItemKind.Field;\n                case types.CompletionItemKind.Variable: return modes.CompletionItemKind.Variable;\n                case types.CompletionItemKind.Class: return modes.CompletionItemKind.Class;\n                case types.CompletionItemKind.Interface: return modes.CompletionItemKind.Interface;\n                case types.CompletionItemKind.Struct: return modes.CompletionItemKind.Struct;\n                case types.CompletionItemKind.Module: return modes.CompletionItemKind.Module;\n                case types.CompletionItemKind.Property: return modes.CompletionItemKind.Property;\n                case types.CompletionItemKind.Unit: return modes.CompletionItemKind.Unit;\n                case types.CompletionItemKind.Value: return modes.CompletionItemKind.Value;\n                case types.CompletionItemKind.Constant: return modes.CompletionItemKind.Constant;\n                case types.CompletionItemKind.Enum: return modes.CompletionItemKind.Enum;\n                case types.CompletionItemKind.EnumMember: return modes.CompletionItemKind.EnumMember;\n                case types.CompletionItemKind.Keyword: return modes.CompletionItemKind.Keyword;\n                case types.CompletionItemKind.Snippet: return modes.CompletionItemKind.Snippet;\n                case types.CompletionItemKind.Text: return modes.CompletionItemKind.Text;\n                case types.CompletionItemKind.Color: return modes.CompletionItemKind.Color;\n                case types.CompletionItemKind.File: return modes.CompletionItemKind.File;\n                case types.CompletionItemKind.Reference: return modes.CompletionItemKind.Reference;\n                case types.CompletionItemKind.Folder: return modes.CompletionItemKind.Folder;\n                case types.CompletionItemKind.Event: return modes.CompletionItemKind.Event;\n                case types.CompletionItemKind.Operator: return modes.CompletionItemKind.Operator;\n                case types.CompletionItemKind.TypeParameter: return modes.CompletionItemKind.TypeParameter;\n            }\n            return modes.CompletionItemKind.Property;\n        }\n        CompletionItemKind.from = from;\n        function to(kind) {\n            switch (kind) {\n                case modes.CompletionItemKind.Method: return types.CompletionItemKind.Method;\n                case modes.CompletionItemKind.Function: return types.CompletionItemKind.Function;\n                case modes.CompletionItemKind.Constructor: return types.CompletionItemKind.Constructor;\n                case modes.CompletionItemKind.Field: return types.CompletionItemKind.Field;\n                case modes.CompletionItemKind.Variable: return types.CompletionItemKind.Variable;\n                case modes.CompletionItemKind.Class: return types.CompletionItemKind.Class;\n                case modes.CompletionItemKind.Interface: return types.CompletionItemKind.Interface;\n                case modes.CompletionItemKind.Struct: return types.CompletionItemKind.Struct;\n                case modes.CompletionItemKind.Module: return types.CompletionItemKind.Module;\n                case modes.CompletionItemKind.Property: return types.CompletionItemKind.Property;\n                case modes.CompletionItemKind.Unit: return types.CompletionItemKind.Unit;\n                case modes.CompletionItemKind.Value: return types.CompletionItemKind.Value;\n                case modes.CompletionItemKind.Constant: return types.CompletionItemKind.Constant;\n                case modes.CompletionItemKind.Enum: return types.CompletionItemKind.Enum;\n                case modes.CompletionItemKind.EnumMember: return types.CompletionItemKind.EnumMember;\n                case modes.CompletionItemKind.Keyword: return types.CompletionItemKind.Keyword;\n                case modes.CompletionItemKind.Snippet: return types.CompletionItemKind.Snippet;\n                case modes.CompletionItemKind.Text: return types.CompletionItemKind.Text;\n                case modes.CompletionItemKind.Color: return types.CompletionItemKind.Color;\n                case modes.CompletionItemKind.File: return types.CompletionItemKind.File;\n                case modes.CompletionItemKind.Reference: return types.CompletionItemKind.Reference;\n                case modes.CompletionItemKind.Folder: return types.CompletionItemKind.Folder;\n                case modes.CompletionItemKind.Event: return types.CompletionItemKind.Event;\n                case modes.CompletionItemKind.Operator: return types.CompletionItemKind.Operator;\n                case modes.CompletionItemKind.TypeParameter: return types.CompletionItemKind.TypeParameter;\n            }\n            return types.CompletionItemKind.Property;\n        }\n        CompletionItemKind.to = to;\n    })(CompletionItemKind = exports.CompletionItemKind || (exports.CompletionItemKind = {}));\n    var CompletionItem;\n    (function (CompletionItem) {\n        function to(suggestion) {\n            const result = new types.CompletionItem(suggestion.label);\n            result.insertText = suggestion.insertText;\n            result.kind = CompletionItemKind.to(suggestion.kind);\n            result.detail = suggestion.detail;\n            result.documentation = htmlContent.isMarkdownString(suggestion.documentation) ? MarkdownString.to(suggestion.documentation) : suggestion.documentation;\n            result.sortText = suggestion.sortText;\n            result.filterText = suggestion.filterText;\n            result.preselect = suggestion.preselect;\n            result.commitCharacters = suggestion.commitCharacters;\n            result.range = Range.to(suggestion.range);\n            result.keepWhitespace = typeof suggestion.insertTextRules === 'undefined' ? false : Boolean(suggestion.insertTextRules & modes.CompletionItemInsertTextRule.KeepWhitespace);\n            // 'inserText'-logic\n            if (typeof suggestion.insertTextRules !== 'undefined' && suggestion.insertTextRules & modes.CompletionItemInsertTextRule.InsertAsSnippet) {\n                result.insertText = new types.SnippetString(suggestion.insertText);\n            }\n            else {\n                result.insertText = suggestion.insertText;\n                result.textEdit = new types.TextEdit(result.range, result.insertText);\n            }\n            // TODO additionalEdits, command\n            return result;\n        }\n        CompletionItem.to = to;\n    })(CompletionItem = exports.CompletionItem || (exports.CompletionItem = {}));\n    var ParameterInformation;\n    (function (ParameterInformation) {\n        function from(info) {\n            return {\n                label: info.label,\n                documentation: info.documentation ? MarkdownString.fromStrict(info.documentation) : undefined\n            };\n        }\n        ParameterInformation.from = from;\n        function to(info) {\n            return {\n                label: info.label,\n                documentation: htmlContent.isMarkdownString(info.documentation) ? MarkdownString.to(info.documentation) : info.documentation\n            };\n        }\n        ParameterInformation.to = to;\n    })(ParameterInformation = exports.ParameterInformation || (exports.ParameterInformation = {}));\n    var SignatureInformation;\n    (function (SignatureInformation) {\n        function from(info) {\n            return {\n                label: info.label,\n                documentation: info.documentation ? MarkdownString.fromStrict(info.documentation) : undefined,\n                parameters: info.parameters && info.parameters.map(ParameterInformation.from)\n            };\n        }\n        SignatureInformation.from = from;\n        function to(info) {\n            return {\n                label: info.label,\n                documentation: htmlContent.isMarkdownString(info.documentation) ? MarkdownString.to(info.documentation) : info.documentation,\n                parameters: info.parameters && info.parameters.map(ParameterInformation.to)\n            };\n        }\n        SignatureInformation.to = to;\n    })(SignatureInformation = exports.SignatureInformation || (exports.SignatureInformation = {}));\n    var SignatureHelp;\n    (function (SignatureHelp) {\n        function from(help) {\n            return {\n                activeSignature: help.activeSignature,\n                activeParameter: help.activeParameter,\n                signatures: help.signatures && help.signatures.map(SignatureInformation.from)\n            };\n        }\n        SignatureHelp.from = from;\n        function to(help) {\n            return {\n                activeSignature: help.activeSignature,\n                activeParameter: help.activeParameter,\n                signatures: help.signatures && help.signatures.map(SignatureInformation.to)\n            };\n        }\n        SignatureHelp.to = to;\n    })(SignatureHelp = exports.SignatureHelp || (exports.SignatureHelp = {}));\n    var DocumentLink;\n    (function (DocumentLink) {\n        function from(link) {\n            return {\n                range: Range.from(link.range),\n                url: link.target\n            };\n        }\n        DocumentLink.from = from;\n        function to(link) {\n            let target = undefined;\n            if (link.url) {\n                try {\n                    target = typeof link.url === 'string' ? uri_1.URI.parse(link.url, true) : uri_1.URI.revive(link.url);\n                }\n                catch (err) {\n                    // ignore\n                }\n            }\n            return new types.DocumentLink(Range.to(link.range), target);\n        }\n        DocumentLink.to = to;\n    })(DocumentLink = exports.DocumentLink || (exports.DocumentLink = {}));\n    var ColorPresentation;\n    (function (ColorPresentation) {\n        function to(colorPresentation) {\n            const cp = new types.ColorPresentation(colorPresentation.label);\n            if (colorPresentation.textEdit) {\n                cp.textEdit = TextEdit.to(colorPresentation.textEdit);\n            }\n            if (colorPresentation.additionalTextEdits) {\n                cp.additionalTextEdits = colorPresentation.additionalTextEdits.map(value => TextEdit.to(value));\n            }\n            return cp;\n        }\n        ColorPresentation.to = to;\n        function from(colorPresentation) {\n            return {\n                label: colorPresentation.label,\n                textEdit: colorPresentation.textEdit ? TextEdit.from(colorPresentation.textEdit) : undefined,\n                additionalTextEdits: colorPresentation.additionalTextEdits ? colorPresentation.additionalTextEdits.map(value => TextEdit.from(value)) : undefined\n            };\n        }\n        ColorPresentation.from = from;\n    })(ColorPresentation = exports.ColorPresentation || (exports.ColorPresentation = {}));\n    var Color;\n    (function (Color) {\n        function to(c) {\n            return new types.Color(c[0], c[1], c[2], c[3]);\n        }\n        Color.to = to;\n        function from(color) {\n            return [color.red, color.green, color.blue, color.alpha];\n        }\n        Color.from = from;\n    })(Color = exports.Color || (exports.Color = {}));\n    var SelectionRange;\n    (function (SelectionRange) {\n        function from(obj) {\n            return {\n                kind: '',\n                range: Range.from(obj.range)\n            };\n        }\n        SelectionRange.from = from;\n        function to(obj) {\n            return new types.SelectionRange(Range.to(obj.range));\n        }\n        SelectionRange.to = to;\n    })(SelectionRange = exports.SelectionRange || (exports.SelectionRange = {}));\n    var TextDocumentSaveReason;\n    (function (TextDocumentSaveReason) {\n        function to(reason) {\n            switch (reason) {\n                case textfiles_1.SaveReason.AUTO:\n                    return types.TextDocumentSaveReason.AfterDelay;\n                case textfiles_1.SaveReason.EXPLICIT:\n                    return types.TextDocumentSaveReason.Manual;\n                case textfiles_1.SaveReason.FOCUS_CHANGE:\n                case textfiles_1.SaveReason.WINDOW_CHANGE:\n                    return types.TextDocumentSaveReason.FocusOut;\n            }\n        }\n        TextDocumentSaveReason.to = to;\n    })(TextDocumentSaveReason = exports.TextDocumentSaveReason || (exports.TextDocumentSaveReason = {}));\n    var TextEditorLineNumbersStyle;\n    (function (TextEditorLineNumbersStyle) {\n        function from(style) {\n            switch (style) {\n                case types.TextEditorLineNumbersStyle.Off:\n                    return editorOptions_1.RenderLineNumbersType.Off;\n                case types.TextEditorLineNumbersStyle.Relative:\n                    return editorOptions_1.RenderLineNumbersType.Relative;\n                case types.TextEditorLineNumbersStyle.On:\n                default:\n                    return editorOptions_1.RenderLineNumbersType.On;\n            }\n        }\n        TextEditorLineNumbersStyle.from = from;\n        function to(style) {\n            switch (style) {\n                case editorOptions_1.RenderLineNumbersType.Off:\n                    return types.TextEditorLineNumbersStyle.Off;\n                case editorOptions_1.RenderLineNumbersType.Relative:\n                    return types.TextEditorLineNumbersStyle.Relative;\n                case editorOptions_1.RenderLineNumbersType.On:\n                default:\n                    return types.TextEditorLineNumbersStyle.On;\n            }\n        }\n        TextEditorLineNumbersStyle.to = to;\n    })(TextEditorLineNumbersStyle = exports.TextEditorLineNumbersStyle || (exports.TextEditorLineNumbersStyle = {}));\n    var EndOfLine;\n    (function (EndOfLine) {\n        function from(eol) {\n            if (eol === types.EndOfLine.CRLF) {\n                return model_1.EndOfLineSequence.CRLF;\n            }\n            else if (eol === types.EndOfLine.LF) {\n                return model_1.EndOfLineSequence.LF;\n            }\n            return undefined;\n        }\n        EndOfLine.from = from;\n        function to(eol) {\n            if (eol === model_1.EndOfLineSequence.CRLF) {\n                return types.EndOfLine.CRLF;\n            }\n            else if (eol === model_1.EndOfLineSequence.LF) {\n                return types.EndOfLine.LF;\n            }\n            return undefined;\n        }\n        EndOfLine.to = to;\n    })(EndOfLine = exports.EndOfLine || (exports.EndOfLine = {}));\n    var ProgressLocation;\n    (function (ProgressLocation) {\n        function from(loc) {\n            switch (loc) {\n                case types.ProgressLocation.SourceControl: return progress_1.ProgressLocation.Scm;\n                case types.ProgressLocation.Window: return progress_1.ProgressLocation.Window;\n                case types.ProgressLocation.Notification: return progress_1.ProgressLocation.Notification;\n            }\n            throw new Error(`Unknown 'ProgressLocation'`);\n        }\n        ProgressLocation.from = from;\n    })(ProgressLocation = exports.ProgressLocation || (exports.ProgressLocation = {}));\n    var FoldingRange;\n    (function (FoldingRange) {\n        function from(r) {\n            const range = { start: r.start + 1, end: r.end + 1 };\n            if (r.kind) {\n                range.kind = FoldingRangeKind.from(r.kind);\n            }\n            return range;\n        }\n        FoldingRange.from = from;\n    })(FoldingRange = exports.FoldingRange || (exports.FoldingRange = {}));\n    var FoldingRangeKind;\n    (function (FoldingRangeKind) {\n        function from(kind) {\n            if (kind) {\n                switch (kind) {\n                    case types.FoldingRangeKind.Comment:\n                        return modes.FoldingRangeKind.Comment;\n                    case types.FoldingRangeKind.Imports:\n                        return modes.FoldingRangeKind.Imports;\n                    case types.FoldingRangeKind.Region:\n                        return modes.FoldingRangeKind.Region;\n                }\n            }\n            return undefined;\n        }\n        FoldingRangeKind.from = from;\n    })(FoldingRangeKind = exports.FoldingRangeKind || (exports.FoldingRangeKind = {}));\n    var TextEditorOptions;\n    (function (TextEditorOptions) {\n        function from(options) {\n            if (options) {\n                return {\n                    pinned: typeof options.preview === 'boolean' ? !options.preview : undefined,\n                    preserveFocus: options.preserveFocus,\n                    selection: typeof options.selection === 'object' ? Range.from(options.selection) : undefined\n                };\n            }\n            return undefined;\n        }\n        TextEditorOptions.from = from;\n    })(TextEditorOptions = exports.TextEditorOptions || (exports.TextEditorOptions = {}));\n    var GlobPattern;\n    (function (GlobPattern) {\n        function from(pattern) {\n            if (pattern instanceof types.RelativePattern) {\n                return pattern;\n            }\n            if (typeof pattern === 'string') {\n                return pattern;\n            }\n            if (isRelativePattern(pattern)) {\n                return new types.RelativePattern(pattern.base, pattern.pattern);\n            }\n            return pattern; // preserve `undefined` and `null`\n        }\n        GlobPattern.from = from;\n        function isRelativePattern(obj) {\n            const rp = obj;\n            return rp && typeof rp.base === 'string' && typeof rp.pattern === 'string';\n        }\n    })(GlobPattern = exports.GlobPattern || (exports.GlobPattern = {}));\n    var LanguageSelector;\n    (function (LanguageSelector) {\n        function from(selector) {\n            if (!selector) {\n                return undefined;\n            }\n            else if (Array.isArray(selector)) {\n                return selector.map(from);\n            }\n            else if (typeof selector === 'string') {\n                return selector;\n            }\n            else {\n                return {\n                    language: selector.language,\n                    scheme: selector.scheme,\n                    pattern: typeof selector.pattern === 'undefined' ? undefined : GlobPattern.from(selector.pattern),\n                    exclusive: selector.exclusive\n                };\n            }\n        }\n        LanguageSelector.from = from;\n    })(LanguageSelector = exports.LanguageSelector || (exports.LanguageSelector = {}));\n    var LogLevel;\n    (function (LogLevel) {\n        function from(extLevel) {\n            switch (extLevel) {\n                case types.LogLevel.Trace:\n                    return log_1.LogLevel.Trace;\n                case types.LogLevel.Debug:\n                    return log_1.LogLevel.Debug;\n                case types.LogLevel.Info:\n                    return log_1.LogLevel.Info;\n                case types.LogLevel.Warning:\n                    return log_1.LogLevel.Warning;\n                case types.LogLevel.Error:\n                    return log_1.LogLevel.Error;\n                case types.LogLevel.Critical:\n                    return log_1.LogLevel.Critical;\n                case types.LogLevel.Off:\n                    return log_1.LogLevel.Off;\n            }\n            return log_1.LogLevel.Info;\n        }\n        LogLevel.from = from;\n        function to(mainLevel) {\n            switch (mainLevel) {\n                case log_1.LogLevel.Trace:\n                    return types.LogLevel.Trace;\n                case log_1.LogLevel.Debug:\n                    return types.LogLevel.Debug;\n                case log_1.LogLevel.Info:\n                    return types.LogLevel.Info;\n                case log_1.LogLevel.Warning:\n                    return types.LogLevel.Warning;\n                case log_1.LogLevel.Error:\n                    return types.LogLevel.Error;\n                case log_1.LogLevel.Critical:\n                    return types.LogLevel.Critical;\n                case log_1.LogLevel.Off:\n                    return types.LogLevel.Off;\n            }\n            return types.LogLevel.Info;\n        }\n        LogLevel.to = to;\n    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n});\n",null]}