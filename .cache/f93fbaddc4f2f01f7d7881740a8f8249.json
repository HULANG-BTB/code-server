{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/notifications.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/notifications.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar errorMessage_1 = require(\"vs/base/common/errorMessage\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar errorsWithActions_1 = require(\"vs/base/common/errorsWithActions\");\nvar NotificationChangeType;\n(function (NotificationChangeType) {\n    NotificationChangeType[NotificationChangeType[\"ADD\"] = 0] = \"ADD\";\n    NotificationChangeType[NotificationChangeType[\"CHANGE\"] = 1] = \"CHANGE\";\n    NotificationChangeType[NotificationChangeType[\"REMOVE\"] = 2] = \"REMOVE\";\n})(NotificationChangeType = exports.NotificationChangeType || (exports.NotificationChangeType = {}));\nvar NotificationHandle = /** @class */ (function () {\n    function NotificationHandle(item, closeItem) {\n        this.item = item;\n        this.closeItem = closeItem;\n        this._onDidClose = new event_1.Emitter();\n        this.registerListeners();\n    }\n    Object.defineProperty(NotificationHandle.prototype, \"onDidClose\", {\n        get: function () { return this._onDidClose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationHandle.prototype.registerListeners = function () {\n        var _this = this;\n        event_1.Event.once(this.item.onDidClose)(function () {\n            _this._onDidClose.fire();\n            _this._onDidClose.dispose();\n        });\n    };\n    Object.defineProperty(NotificationHandle.prototype, \"progress\", {\n        get: function () {\n            return this.item.progress;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationHandle.prototype.updateSeverity = function (severity) {\n        this.item.updateSeverity(severity);\n    };\n    NotificationHandle.prototype.updateMessage = function (message) {\n        this.item.updateMessage(message);\n    };\n    NotificationHandle.prototype.updateActions = function (actions) {\n        this.item.updateActions(actions);\n    };\n    NotificationHandle.prototype.close = function () {\n        this.closeItem(this.item);\n        this._onDidClose.dispose();\n    };\n    return NotificationHandle;\n}());\nexports.NotificationHandle = NotificationHandle;\nvar NotificationsModel = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsModel, _super);\n    function NotificationsModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onDidNotificationChange = _this._register(new event_1.Emitter());\n        _this._notifications = [];\n        return _this;\n    }\n    Object.defineProperty(NotificationsModel.prototype, \"onDidNotificationChange\", {\n        get: function () { return this._onDidNotificationChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationsModel.prototype, \"notifications\", {\n        get: function () {\n            return this._notifications;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationsModel.prototype.notify = function (notification) {\n        var _this = this;\n        var item = this.createViewItem(notification);\n        if (!item) {\n            return NotificationsModel.NO_OP_NOTIFICATION; // return early if this is a no-op\n        }\n        // Deduplicate\n        var duplicate = this.findNotification(item);\n        if (duplicate) {\n            duplicate.close();\n        }\n        // Add to list as first entry\n        this._notifications.splice(0, 0, item);\n        // Events\n        this._onDidNotificationChange.fire({ item: item, index: 0, kind: NotificationChangeType.ADD });\n        // Wrap into handle\n        return new NotificationHandle(item, function (item) { return _this.closeItem(item); });\n    };\n    NotificationsModel.prototype.closeItem = function (item) {\n        var liveItem = this.findNotification(item);\n        if (liveItem && liveItem !== item) {\n            liveItem.close(); // item could have been replaced with another one, make sure to close the live item\n        }\n        else {\n            item.close(); // otherwise just close the item that was passed in\n        }\n    };\n    NotificationsModel.prototype.findNotification = function (item) {\n        for (var _i = 0, _a = this._notifications; _i < _a.length; _i++) {\n            var notification = _a[_i];\n            if (notification.equals(item)) {\n                return notification;\n            }\n        }\n        return undefined;\n    };\n    NotificationsModel.prototype.createViewItem = function (notification) {\n        var _this = this;\n        var item = NotificationViewItem.create(notification);\n        if (!item) {\n            return null;\n        }\n        // Item Events\n        var onItemChangeEvent = function () {\n            var index = _this._notifications.indexOf(item);\n            if (index >= 0) {\n                _this._onDidNotificationChange.fire({ item: item, index: index, kind: NotificationChangeType.CHANGE });\n            }\n        };\n        var itemExpansionChangeListener = item.onDidExpansionChange(function () { return onItemChangeEvent(); });\n        var itemLabelChangeListener = item.onDidLabelChange(function (e) {\n            // a label change in the area of actions or the message is a change that potentially has an impact\n            // on the size of the notification and as such we emit a change event so that viewers can redraw\n            if (e.kind === NotificationViewItemLabelKind.ACTIONS || e.kind === NotificationViewItemLabelKind.MESSAGE) {\n                onItemChangeEvent();\n            }\n        });\n        event_1.Event.once(item.onDidClose)(function () {\n            itemExpansionChangeListener.dispose();\n            itemLabelChangeListener.dispose();\n            var index = _this._notifications.indexOf(item);\n            if (index >= 0) {\n                _this._notifications.splice(index, 1);\n                _this._onDidNotificationChange.fire({ item: item, index: index, kind: NotificationChangeType.REMOVE });\n            }\n        });\n        return item;\n    };\n    NotificationsModel.NO_OP_NOTIFICATION = new notification_1.NoOpNotification();\n    return NotificationsModel;\n}(lifecycle_1.Disposable));\nexports.NotificationsModel = NotificationsModel;\nfunction isNotificationViewItem(obj) {\n    return obj instanceof NotificationViewItem;\n}\nexports.isNotificationViewItem = isNotificationViewItem;\nvar NotificationViewItemLabelKind;\n(function (NotificationViewItemLabelKind) {\n    NotificationViewItemLabelKind[NotificationViewItemLabelKind[\"SEVERITY\"] = 0] = \"SEVERITY\";\n    NotificationViewItemLabelKind[NotificationViewItemLabelKind[\"MESSAGE\"] = 1] = \"MESSAGE\";\n    NotificationViewItemLabelKind[NotificationViewItemLabelKind[\"ACTIONS\"] = 2] = \"ACTIONS\";\n    NotificationViewItemLabelKind[NotificationViewItemLabelKind[\"PROGRESS\"] = 3] = \"PROGRESS\";\n})(NotificationViewItemLabelKind = exports.NotificationViewItemLabelKind || (exports.NotificationViewItemLabelKind = {}));\nvar NotificationViewItemProgress = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationViewItemProgress, _super);\n    function NotificationViewItemProgress() {\n        var _this = _super.call(this) || this;\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this._state = Object.create(null);\n        return _this;\n    }\n    Object.defineProperty(NotificationViewItemProgress.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItemProgress.prototype, \"state\", {\n        get: function () {\n            return this._state;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationViewItemProgress.prototype.infinite = function () {\n        if (this._state.infinite) {\n            return;\n        }\n        this._state.infinite = true;\n        this._state.total = undefined;\n        this._state.worked = undefined;\n        this._state.done = undefined;\n        this._onDidChange.fire();\n    };\n    NotificationViewItemProgress.prototype.done = function () {\n        if (this._state.done) {\n            return;\n        }\n        this._state.done = true;\n        this._state.infinite = undefined;\n        this._state.total = undefined;\n        this._state.worked = undefined;\n        this._onDidChange.fire();\n    };\n    NotificationViewItemProgress.prototype.total = function (value) {\n        if (this._state.total === value) {\n            return;\n        }\n        this._state.total = value;\n        this._state.infinite = undefined;\n        this._state.done = undefined;\n        this._onDidChange.fire();\n    };\n    NotificationViewItemProgress.prototype.worked = function (value) {\n        if (typeof this._state.worked === 'number') {\n            this._state.worked += value;\n        }\n        else {\n            this._state.worked = value;\n        }\n        this._state.infinite = undefined;\n        this._state.done = undefined;\n        this._onDidChange.fire();\n    };\n    return NotificationViewItemProgress;\n}(lifecycle_1.Disposable));\nexports.NotificationViewItemProgress = NotificationViewItemProgress;\nvar NotificationViewItem = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationViewItem, _super);\n    function NotificationViewItem(_severity, _sticky, _silent, _message, _source, actions) {\n        var _this = _super.call(this) || this;\n        _this._severity = _severity;\n        _this._sticky = _sticky;\n        _this._silent = _silent;\n        _this._message = _message;\n        _this._source = _source;\n        _this._onDidExpansionChange = _this._register(new event_1.Emitter());\n        _this._onDidClose = _this._register(new event_1.Emitter());\n        _this._onDidLabelChange = _this._register(new event_1.Emitter());\n        _this.setActions(actions);\n        return _this;\n    }\n    Object.defineProperty(NotificationViewItem.prototype, \"onDidExpansionChange\", {\n        get: function () { return this._onDidExpansionChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"onDidClose\", {\n        get: function () { return this._onDidClose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"onDidLabelChange\", {\n        get: function () { return this._onDidLabelChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationViewItem.create = function (notification) {\n        if (!notification || !notification.message || errors_1.isPromiseCanceledError(notification.message)) {\n            return null; // we need a message to show\n        }\n        var severity;\n        if (typeof notification.severity === 'number') {\n            severity = notification.severity;\n        }\n        else {\n            severity = notification_1.Severity.Info;\n        }\n        var message = NotificationViewItem.parseNotificationMessage(notification.message);\n        if (!message) {\n            return null; // we need a message to show\n        }\n        var actions;\n        if (notification.actions) {\n            actions = notification.actions;\n        }\n        else if (errorsWithActions_1.isErrorWithActions(notification.message)) {\n            actions = { primary: notification.message.actions };\n        }\n        return new NotificationViewItem(severity, notification.sticky, notification.silent, message, notification.source, actions);\n    };\n    NotificationViewItem.parseNotificationMessage = function (input) {\n        var message;\n        if (input instanceof Error) {\n            message = errorMessage_1.toErrorMessage(input, false);\n        }\n        else if (typeof input === 'string') {\n            message = input;\n        }\n        if (!message) {\n            return undefined; // we need a message to show\n        }\n        var raw = message;\n        // Make sure message is in the limits\n        if (message.length > NotificationViewItem.MAX_MESSAGE_LENGTH) {\n            message = message.substr(0, NotificationViewItem.MAX_MESSAGE_LENGTH) + \"...\";\n        }\n        // Remove newlines from messages as we do not support that and it makes link parsing hard\n        message = message.replace(/(\\r\\n|\\n|\\r)/gm, ' ').trim();\n        // Parse Links\n        var links = [];\n        message.replace(NotificationViewItem.LINK_REGEX, function (matchString, name, href, offset) {\n            links.push({ name: name, href: href, offset: offset, length: matchString.length });\n            return matchString;\n        });\n        return { raw: raw, value: message, links: links, original: input };\n    };\n    NotificationViewItem.prototype.setActions = function (actions) {\n        if (actions === void 0) { actions = { primary: [], secondary: [] }; }\n        if (!Array.isArray(actions.primary)) {\n            actions.primary = [];\n        }\n        if (!Array.isArray(actions.secondary)) {\n            actions.secondary = [];\n        }\n        this._actions = actions;\n        this._expanded = actions.primary.length > 0;\n    };\n    Object.defineProperty(NotificationViewItem.prototype, \"canCollapse\", {\n        get: function () {\n            return !this.hasPrompt();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"expanded\", {\n        get: function () {\n            return this._expanded;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"severity\", {\n        get: function () {\n            return this._severity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"sticky\", {\n        get: function () {\n            if (this._sticky) {\n                return true; // explicitly sticky\n            }\n            var hasPrompt = this.hasPrompt();\n            if ((hasPrompt && this._severity === notification_1.Severity.Error) || // notification errors with actions are sticky\n                (!hasPrompt && this._expanded) || // notifications that got expanded are sticky\n                (this._progress && !this._progress.state.done) // notifications with running progress are sticky\n            ) {\n                return true;\n            }\n            return false; // not sticky\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"silent\", {\n        get: function () {\n            return !!this._silent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationViewItem.prototype.hasPrompt = function () {\n        if (!this._actions.primary) {\n            return false;\n        }\n        return this._actions.primary.length > 0;\n    };\n    NotificationViewItem.prototype.hasProgress = function () {\n        return !!this._progress;\n    };\n    Object.defineProperty(NotificationViewItem.prototype, \"progress\", {\n        get: function () {\n            var _this = this;\n            if (!this._progress) {\n                this._progress = this._register(new NotificationViewItemProgress());\n                this._register(this._progress.onDidChange(function () { return _this._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.PROGRESS }); }));\n            }\n            return this._progress;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"message\", {\n        get: function () {\n            return this._message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"source\", {\n        get: function () {\n            return this._source;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NotificationViewItem.prototype, \"actions\", {\n        get: function () {\n            return this._actions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationViewItem.prototype.updateSeverity = function (severity) {\n        this._severity = severity;\n        this._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.SEVERITY });\n    };\n    NotificationViewItem.prototype.updateMessage = function (input) {\n        var message = NotificationViewItem.parseNotificationMessage(input);\n        if (!message) {\n            return;\n        }\n        this._message = message;\n        this._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.MESSAGE });\n    };\n    NotificationViewItem.prototype.updateActions = function (actions) {\n        this.setActions(actions);\n        this._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.ACTIONS });\n    };\n    NotificationViewItem.prototype.expand = function () {\n        if (this._expanded || !this.canCollapse) {\n            return;\n        }\n        this._expanded = true;\n        this._onDidExpansionChange.fire();\n    };\n    NotificationViewItem.prototype.collapse = function (skipEvents) {\n        if (!this._expanded || !this.canCollapse) {\n            return;\n        }\n        this._expanded = false;\n        if (!skipEvents) {\n            this._onDidExpansionChange.fire();\n        }\n    };\n    NotificationViewItem.prototype.toggle = function () {\n        if (this._expanded) {\n            this.collapse();\n        }\n        else {\n            this.expand();\n        }\n    };\n    NotificationViewItem.prototype.close = function () {\n        this._onDidClose.fire();\n        this.dispose();\n    };\n    NotificationViewItem.prototype.equals = function (other) {\n        if (this.hasProgress() || other.hasProgress()) {\n            return false;\n        }\n        if (this._source !== other.source) {\n            return false;\n        }\n        if (this._message.value !== other.message.value) {\n            return false;\n        }\n        var primaryActions = this._actions.primary || [];\n        var otherPrimaryActions = other.actions.primary || [];\n        if (primaryActions.length !== otherPrimaryActions.length) {\n            return false;\n        }\n        for (var i = 0; i < primaryActions.length; i++) {\n            if ((primaryActions[i].id + primaryActions[i].label) !== (otherPrimaryActions[i].id + otherPrimaryActions[i].label)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    NotificationViewItem.MAX_MESSAGE_LENGTH = 1000;\n    // Example link: \"Some message with [link text](http://link.href).\"\n    // RegEx: [, anything not ], ], (, http:|https:, //, no whitespace)\n    NotificationViewItem.LINK_REGEX = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\)\\s]+)\\)/gi;\n    return NotificationViewItem;\n}(lifecycle_1.Disposable));\nexports.NotificationViewItem = NotificationViewItem;\nvar ChoiceAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ChoiceAction, _super);\n    function ChoiceAction(id, choice) {\n        var _this = _super.call(this, id, choice.label, undefined, true, function () {\n            // Pass to runner\n            choice.run();\n            // Emit Event\n            _this._onDidRun.fire();\n            return Promise.resolve();\n        }) || this;\n        _this._onDidRun = new event_1.Emitter();\n        _this._keepOpen = !!choice.keepOpen;\n        return _this;\n    }\n    Object.defineProperty(ChoiceAction.prototype, \"onDidRun\", {\n        get: function () { return this._onDidRun.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ChoiceAction.prototype, \"keepOpen\", {\n        get: function () {\n            return this._keepOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ChoiceAction.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this._onDidRun.dispose();\n    };\n    return ChoiceAction;\n}(actions_1.Action));\nexports.ChoiceAction = ChoiceAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/notifications.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/notifications.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotification, INotificationHandle, INotificationActions, INotificationProgress, NoOpNotification, Severity, NotificationMessage, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isPromiseCanceledError } from 'vs/base/common/errors';\nimport { Action } from 'vs/base/common/actions';\nimport { isErrorWithActions } from 'vs/base/common/errorsWithActions';\n\nexport interface INotificationsModel {\n\n\treadonly notifications: INotificationViewItem[];\n\treadonly onDidNotificationChange: Event<INotificationChangeEvent>;\n\n\tnotify(notification: INotification): INotificationHandle;\n}\n\nexport const enum NotificationChangeType {\n\tADD,\n\tCHANGE,\n\tREMOVE\n}\n\nexport interface INotificationChangeEvent {\n\n\t/**\n\t * The index this notification has in the list of notifications.\n\t */\n\tindex: number;\n\n\t/**\n\t * The notification this change is about.\n\t */\n\titem: INotificationViewItem;\n\n\t/**\n\t * The kind of notification change.\n\t */\n\tkind: NotificationChangeType;\n}\n\nexport class NotificationHandle implements INotificationHandle {\n\n\tprivate readonly _onDidClose: Emitter<void> = new Emitter();\n\tget onDidClose(): Event<void> { return this._onDidClose.event; }\n\n\tconstructor(private readonly item: INotificationViewItem, private readonly closeItem: (item: INotificationViewItem) => void) {\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tEvent.once(this.item.onDidClose)(() => {\n\t\t\tthis._onDidClose.fire();\n\t\t\tthis._onDidClose.dispose();\n\t\t});\n\t}\n\n\tget progress(): INotificationProgress {\n\t\treturn this.item.progress;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tthis.item.updateSeverity(severity);\n\t}\n\n\tupdateMessage(message: NotificationMessage): void {\n\t\tthis.item.updateMessage(message);\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.item.updateActions(actions);\n\t}\n\n\tclose(): void {\n\t\tthis.closeItem(this.item);\n\t\tthis._onDidClose.dispose();\n\t}\n}\n\nexport class NotificationsModel extends Disposable implements INotificationsModel {\n\n\tprivate static NO_OP_NOTIFICATION = new NoOpNotification();\n\n\tprivate readonly _onDidNotificationChange: Emitter<INotificationChangeEvent> = this._register(new Emitter<INotificationChangeEvent>());\n\tget onDidNotificationChange(): Event<INotificationChangeEvent> { return this._onDidNotificationChange.event; }\n\n\tprivate readonly _notifications: INotificationViewItem[] = [];\n\n\tget notifications(): INotificationViewItem[] {\n\t\treturn this._notifications;\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\tconst item = this.createViewItem(notification);\n\t\tif (!item) {\n\t\t\treturn NotificationsModel.NO_OP_NOTIFICATION; // return early if this is a no-op\n\t\t}\n\n\t\t// Deduplicate\n\t\tconst duplicate = this.findNotification(item);\n\t\tif (duplicate) {\n\t\t\tduplicate.close();\n\t\t}\n\n\t\t// Add to list as first entry\n\t\tthis._notifications.splice(0, 0, item);\n\n\t\t// Events\n\t\tthis._onDidNotificationChange.fire({ item, index: 0, kind: NotificationChangeType.ADD });\n\n\t\t// Wrap into handle\n\t\treturn new NotificationHandle(item, item => this.closeItem(item));\n\t}\n\n\tprivate closeItem(item: INotificationViewItem): void {\n\t\tconst liveItem = this.findNotification(item);\n\t\tif (liveItem && liveItem !== item) {\n\t\t\tliveItem.close(); // item could have been replaced with another one, make sure to close the live item\n\t\t} else {\n\t\t\titem.close(); // otherwise just close the item that was passed in\n\t\t}\n\t}\n\n\tprivate findNotification(item: INotificationViewItem): INotificationViewItem | undefined {\n\t\tfor (const notification of this._notifications) {\n\t\t\tif (notification.equals(item)) {\n\t\t\t\treturn notification;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate createViewItem(notification: INotification): INotificationViewItem | null {\n\t\tconst item = NotificationViewItem.create(notification);\n\t\tif (!item) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Item Events\n\t\tconst onItemChangeEvent = () => {\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._onDidNotificationChange.fire({ item, index, kind: NotificationChangeType.CHANGE });\n\t\t\t}\n\t\t};\n\n\t\tconst itemExpansionChangeListener = item.onDidExpansionChange(() => onItemChangeEvent());\n\n\t\tconst itemLabelChangeListener = item.onDidLabelChange(e => {\n\t\t\t// a label change in the area of actions or the message is a change that potentially has an impact\n\t\t\t// on the size of the notification and as such we emit a change event so that viewers can redraw\n\t\t\tif (e.kind === NotificationViewItemLabelKind.ACTIONS || e.kind === NotificationViewItemLabelKind.MESSAGE) {\n\t\t\t\tonItemChangeEvent();\n\t\t\t}\n\t\t});\n\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\titemExpansionChangeListener.dispose();\n\t\t\titemLabelChangeListener.dispose();\n\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._notifications.splice(index, 1);\n\t\t\t\tthis._onDidNotificationChange.fire({ item, index, kind: NotificationChangeType.REMOVE });\n\t\t\t}\n\t\t});\n\n\t\treturn item;\n\t}\n}\n\nexport interface INotificationViewItem {\n\treadonly severity: Severity;\n\treadonly sticky: boolean;\n\treadonly silent: boolean;\n\treadonly message: INotificationMessage;\n\treadonly source: string | undefined;\n\treadonly actions: INotificationActions;\n\treadonly progress: INotificationViewItemProgress;\n\n\treadonly expanded: boolean;\n\treadonly canCollapse: boolean;\n\n\treadonly onDidExpansionChange: Event<void>;\n\treadonly onDidClose: Event<void>;\n\treadonly onDidLabelChange: Event<INotificationViewItemLabelChangeEvent>;\n\n\texpand(): void;\n\tcollapse(skipEvents?: boolean): void;\n\ttoggle(): void;\n\n\thasProgress(): boolean;\n\thasPrompt(): boolean;\n\n\tupdateSeverity(severity: Severity): void;\n\tupdateMessage(message: NotificationMessage): void;\n\tupdateActions(actions?: INotificationActions): void;\n\n\tclose(): void;\n\n\tequals(item: INotificationViewItem): boolean;\n}\n\nexport function isNotificationViewItem(obj: any): obj is INotificationViewItem {\n\treturn obj instanceof NotificationViewItem;\n}\n\nexport const enum NotificationViewItemLabelKind {\n\tSEVERITY,\n\tMESSAGE,\n\tACTIONS,\n\tPROGRESS\n}\n\nexport interface INotificationViewItemLabelChangeEvent {\n\tkind: NotificationViewItemLabelKind;\n}\n\nexport interface INotificationViewItemProgressState {\n\tinfinite?: boolean;\n\ttotal?: number;\n\tworked?: number;\n\tdone?: boolean;\n}\n\nexport interface INotificationViewItemProgress extends INotificationProgress {\n\treadonly state: INotificationViewItemProgressState;\n\n\tdispose(): void;\n}\n\nexport class NotificationViewItemProgress extends Disposable implements INotificationViewItemProgress {\n\tprivate readonly _state: INotificationViewItemProgressState;\n\n\tprivate readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidChange(): Event<void> { return this._onDidChange.event; }\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._state = Object.create(null);\n\t}\n\n\tget state(): INotificationViewItemProgressState {\n\t\treturn this._state;\n\t}\n\n\tinfinite(): void {\n\t\tif (this._state.infinite) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.infinite = true;\n\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tdone(): void {\n\t\tif (this._state.done) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.done = true;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\ttotal(value: number): void {\n\t\tif (this._state.total === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.total = value;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tworked(value: number): void {\n\t\tif (typeof this._state.worked === 'number') {\n\t\t\tthis._state.worked += value;\n\t\t} else {\n\t\t\tthis._state.worked = value;\n\t\t}\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n}\n\nexport interface IMessageLink {\n\tname: string;\n\thref: string;\n\toffset: number;\n\tlength: number;\n}\n\nexport interface INotificationMessage {\n\traw: string;\n\toriginal: NotificationMessage;\n\tvalue: string;\n\tlinks: IMessageLink[];\n}\n\nexport class NotificationViewItem extends Disposable implements INotificationViewItem {\n\n\tprivate static MAX_MESSAGE_LENGTH = 1000;\n\n\t// Example link: \"Some message with [link text](http://link.href).\"\n\t// RegEx: [, anything not ], ], (, http:|https:, //, no whitespace)\n\tprivate static LINK_REGEX = /\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\)\\s]+)\\)/gi;\n\n\tprivate _expanded: boolean;\n\n\tprivate _actions: INotificationActions;\n\tprivate _progress: NotificationViewItemProgress;\n\n\tprivate readonly _onDidExpansionChange: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidExpansionChange(): Event<void> { return this._onDidExpansionChange.event; }\n\n\tprivate readonly _onDidClose: Emitter<void> = this._register(new Emitter<void>());\n\tget onDidClose(): Event<void> { return this._onDidClose.event; }\n\n\tprivate readonly _onDidLabelChange: Emitter<INotificationViewItemLabelChangeEvent> = this._register(new Emitter<INotificationViewItemLabelChangeEvent>());\n\tget onDidLabelChange(): Event<INotificationViewItemLabelChangeEvent> { return this._onDidLabelChange.event; }\n\n\tstatic create(notification: INotification): INotificationViewItem | null {\n\t\tif (!notification || !notification.message || isPromiseCanceledError(notification.message)) {\n\t\t\treturn null; // we need a message to show\n\t\t}\n\n\t\tlet severity: Severity;\n\t\tif (typeof notification.severity === 'number') {\n\t\t\tseverity = notification.severity;\n\t\t} else {\n\t\t\tseverity = Severity.Info;\n\t\t}\n\n\t\tconst message = NotificationViewItem.parseNotificationMessage(notification.message);\n\t\tif (!message) {\n\t\t\treturn null; // we need a message to show\n\t\t}\n\n\t\tlet actions: INotificationActions | undefined;\n\t\tif (notification.actions) {\n\t\t\tactions = notification.actions;\n\t\t} else if (isErrorWithActions(notification.message)) {\n\t\t\tactions = { primary: notification.message.actions };\n\t\t}\n\n\t\treturn new NotificationViewItem(severity, notification.sticky, notification.silent, message, notification.source, actions);\n\t}\n\n\tprivate static parseNotificationMessage(input: NotificationMessage): INotificationMessage | undefined {\n\t\tlet message: string | undefined;\n\t\tif (input instanceof Error) {\n\t\t\tmessage = toErrorMessage(input, false);\n\t\t} else if (typeof input === 'string') {\n\t\t\tmessage = input;\n\t\t}\n\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tconst raw = message;\n\n\t\t// Make sure message is in the limits\n\t\tif (message.length > NotificationViewItem.MAX_MESSAGE_LENGTH) {\n\t\t\tmessage = `${message.substr(0, NotificationViewItem.MAX_MESSAGE_LENGTH)}...`;\n\t\t}\n\n\t\t// Remove newlines from messages as we do not support that and it makes link parsing hard\n\t\tmessage = message.replace(/(\\r\\n|\\n|\\r)/gm, ' ').trim();\n\n\t\t// Parse Links\n\t\tconst links: IMessageLink[] = [];\n\t\tmessage.replace(NotificationViewItem.LINK_REGEX, (matchString: string, name: string, href: string, offset: number) => {\n\t\t\tlinks.push({ name, href, offset, length: matchString.length });\n\n\t\t\treturn matchString;\n\t\t});\n\n\t\treturn { raw, value: message, links, original: input };\n\t}\n\n\tprivate constructor(\n\t\tprivate _severity: Severity,\n\t\tprivate _sticky: boolean | undefined,\n\t\tprivate _silent: boolean | undefined,\n\t\tprivate _message: INotificationMessage,\n\t\tprivate _source: string | undefined,\n\t\tactions?: INotificationActions\n\t) {\n\t\tsuper();\n\n\t\tthis.setActions(actions);\n\t}\n\n\tprivate setActions(actions: INotificationActions = { primary: [], secondary: [] }): void {\n\t\tif (!Array.isArray(actions.primary)) {\n\t\t\tactions.primary = [];\n\t\t}\n\n\t\tif (!Array.isArray(actions.secondary)) {\n\t\t\tactions.secondary = [];\n\t\t}\n\n\t\tthis._actions = actions;\n\t\tthis._expanded = actions.primary.length > 0;\n\t}\n\n\tget canCollapse(): boolean {\n\t\treturn !this.hasPrompt();\n\t}\n\n\tget expanded(): boolean {\n\t\treturn this._expanded;\n\t}\n\n\tget severity(): Severity {\n\t\treturn this._severity;\n\t}\n\n\tget sticky(): boolean {\n\t\tif (this._sticky) {\n\t\t\treturn true; // explicitly sticky\n\t\t}\n\n\t\tconst hasPrompt = this.hasPrompt();\n\t\tif (\n\t\t\t(hasPrompt && this._severity === Severity.Error) || // notification errors with actions are sticky\n\t\t\t(!hasPrompt && this._expanded) ||\t\t\t\t\t// notifications that got expanded are sticky\n\t\t\t(this._progress && !this._progress.state.done)\t\t// notifications with running progress are sticky\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false; // not sticky\n\t}\n\n\tget silent(): boolean {\n\t\treturn !!this._silent;\n\t}\n\n\thasPrompt(): boolean {\n\t\tif (!this._actions.primary) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._actions.primary.length > 0;\n\t}\n\n\thasProgress(): boolean {\n\t\treturn !!this._progress;\n\t}\n\n\tget progress(): INotificationViewItemProgress {\n\t\tif (!this._progress) {\n\t\t\tthis._progress = this._register(new NotificationViewItemProgress());\n\t\t\tthis._register(this._progress.onDidChange(() => this._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.PROGRESS })));\n\t\t}\n\n\t\treturn this._progress;\n\t}\n\n\tget message(): INotificationMessage {\n\t\treturn this._message;\n\t}\n\n\tget source(): string | undefined {\n\t\treturn this._source;\n\t}\n\n\tget actions(): INotificationActions {\n\t\treturn this._actions;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tthis._severity = severity;\n\t\tthis._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.SEVERITY });\n\t}\n\n\tupdateMessage(input: NotificationMessage): void {\n\t\tconst message = NotificationViewItem.parseNotificationMessage(input);\n\t\tif (!message) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._message = message;\n\t\tthis._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.MESSAGE });\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.setActions(actions);\n\n\t\tthis._onDidLabelChange.fire({ kind: NotificationViewItemLabelKind.ACTIONS });\n\t}\n\n\texpand(): void {\n\t\tif (this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = true;\n\t\tthis._onDidExpansionChange.fire();\n\t}\n\n\tcollapse(skipEvents?: boolean): void {\n\t\tif (!this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = false;\n\n\t\tif (!skipEvents) {\n\t\t\tthis._onDidExpansionChange.fire();\n\t\t}\n\t}\n\n\ttoggle(): void {\n\t\tif (this._expanded) {\n\t\t\tthis.collapse();\n\t\t} else {\n\t\t\tthis.expand();\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tthis._onDidClose.fire();\n\n\t\tthis.dispose();\n\t}\n\n\tequals(other: INotificationViewItem): boolean {\n\t\tif (this.hasProgress() || other.hasProgress()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._source !== other.source) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._message.value !== other.message.value) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst primaryActions = this._actions.primary || [];\n\t\tconst otherPrimaryActions = other.actions.primary || [];\n\t\tif (primaryActions.length !== otherPrimaryActions.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < primaryActions.length; i++) {\n\t\t\tif ((primaryActions[i].id + primaryActions[i].label) !== (otherPrimaryActions[i].id + otherPrimaryActions[i].label)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport class ChoiceAction extends Action {\n\n\tprivate readonly _onDidRun = new Emitter<void>();\n\tget onDidRun(): Event<void> { return this._onDidRun.event; }\n\n\tprivate readonly _keepOpen: boolean;\n\n\tconstructor(id: string, choice: IPromptChoice) {\n\t\tsuper(id, choice.label, undefined, true, () => {\n\n\t\t\t// Pass to runner\n\t\t\tchoice.run();\n\n\t\t\t// Emit Event\n\t\t\tthis._onDidRun.fire();\n\n\t\t\treturn Promise.resolve();\n\t\t});\n\n\t\tthis._keepOpen = !!choice.keepOpen;\n\t}\n\n\tget keepOpen(): boolean {\n\t\treturn this._keepOpen;\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._onDidRun.dispose();\n\t}\n}"]}]}