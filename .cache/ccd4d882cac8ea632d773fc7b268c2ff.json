{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/editorGroup.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/editorGroup.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar map_1 = require(\"vs/base/common/map\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar EditorOpenPositioning = {\n    LEFT: 'left',\n    RIGHT: 'right',\n    FIRST: 'first',\n    LAST: 'last'\n};\nfunction isSerializedEditorGroup(obj) {\n    var group = obj;\n    return obj && typeof obj === 'object' && Array.isArray(group.editors) && Array.isArray(group.mru);\n}\nexports.isSerializedEditorGroup = isSerializedEditorGroup;\nvar EditorGroup = /** @class */ (function (_super) {\n    tslib_1.__extends(EditorGroup, _super);\n    function EditorGroup(labelOrSerializedGroup, instantiationService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.instantiationService = instantiationService;\n        _this.configurationService = configurationService;\n        //#region events\n        _this._onDidEditorActivate = _this._register(new event_1.Emitter());\n        _this._onDidEditorOpen = _this._register(new event_1.Emitter());\n        _this._onDidEditorClose = _this._register(new event_1.Emitter());\n        _this._onDidEditorDispose = _this._register(new event_1.Emitter());\n        _this._onDidEditorBecomeDirty = _this._register(new event_1.Emitter());\n        _this._onDidEditorLabelChange = _this._register(new event_1.Emitter());\n        _this._onDidEditorMove = _this._register(new event_1.Emitter());\n        _this._onDidEditorPin = _this._register(new event_1.Emitter());\n        _this._onDidEditorUnpin = _this._register(new event_1.Emitter());\n        _this.editors = [];\n        _this.mru = [];\n        _this.mapResourceToEditorCount = new map_1.ResourceMap();\n        if (isSerializedEditorGroup(labelOrSerializedGroup)) {\n            _this.deserialize(labelOrSerializedGroup);\n        }\n        else {\n            _this._id = EditorGroup.IDS++;\n        }\n        _this.onConfigurationUpdated();\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorActivate\", {\n        get: function () { return this._onDidEditorActivate.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorOpen\", {\n        get: function () { return this._onDidEditorOpen.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorClose\", {\n        get: function () { return this._onDidEditorClose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorDispose\", {\n        get: function () { return this._onDidEditorDispose.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorBecomeDirty\", {\n        get: function () { return this._onDidEditorBecomeDirty.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorLabelChange\", {\n        get: function () { return this._onDidEditorLabelChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorMove\", {\n        get: function () { return this._onDidEditorMove.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorPin\", {\n        get: function () { return this._onDidEditorPin.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"onDidEditorUnpin\", {\n        get: function () { return this._onDidEditorUnpin.event; },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroup.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(e); }));\n    };\n    EditorGroup.prototype.onConfigurationUpdated = function (event) {\n        this.editorOpenPositioning = this.configurationService.getValue('workbench.editor.openPositioning');\n        this.focusRecentEditorAfterClose = this.configurationService.getValue('workbench.editor.focusRecentEditorAfterClose');\n    };\n    Object.defineProperty(EditorGroup.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EditorGroup.prototype, \"count\", {\n        get: function () {\n            return this.editors.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroup.prototype.getEditors = function (mru) {\n        return mru ? this.mru.slice(0) : this.editors.slice(0);\n    };\n    EditorGroup.prototype.getEditor = function (arg1) {\n        if (typeof arg1 === 'number') {\n            return this.editors[arg1];\n        }\n        var resource = arg1;\n        if (!this.contains(resource)) {\n            return null; // fast check for resource opened or not\n        }\n        for (var _i = 0, _a = this.editors; _i < _a.length; _i++) {\n            var editor = _a[_i];\n            var editorResource = editor_1.toResource(editor, { supportSideBySide: true });\n            if (editorResource && editorResource.toString() === resource.toString()) {\n                return editor;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(EditorGroup.prototype, \"activeEditor\", {\n        get: function () {\n            return this.active;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroup.prototype.isActive = function (editor) {\n        return this.matches(this.active, editor);\n    };\n    Object.defineProperty(EditorGroup.prototype, \"previewEditor\", {\n        get: function () {\n            return this.preview;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    EditorGroup.prototype.isPreview = function (editor) {\n        return this.matches(this.preview, editor);\n    };\n    EditorGroup.prototype.openEditor = function (editor, options) {\n        var index = this.indexOf(editor);\n        var makePinned = options && options.pinned;\n        var makeActive = (options && options.active) || !this.activeEditor || (!makePinned && this.matches(this.preview, this.activeEditor));\n        // New editor\n        if (index === -1) {\n            var targetIndex = void 0;\n            var indexOfActive = this.indexOf(this.active);\n            // Insert into specific position\n            if (options && typeof options.index === 'number') {\n                targetIndex = options.index;\n            }\n            // Insert to the BEGINNING\n            else if (this.editorOpenPositioning === EditorOpenPositioning.FIRST) {\n                targetIndex = 0;\n            }\n            // Insert to the END\n            else if (this.editorOpenPositioning === EditorOpenPositioning.LAST) {\n                targetIndex = this.editors.length;\n            }\n            // Insert to the LEFT of active editor\n            else if (this.editorOpenPositioning === EditorOpenPositioning.LEFT) {\n                if (indexOfActive === 0 || !this.editors.length) {\n                    targetIndex = 0; // to the left becoming first editor in list\n                }\n                else {\n                    targetIndex = indexOfActive; // to the left of active editor\n                }\n            }\n            // Insert to the RIGHT of active editor\n            else {\n                targetIndex = indexOfActive + 1;\n            }\n            // Insert into our list of editors if pinned or we have no preview editor\n            if (makePinned || !this.preview) {\n                this.splice(targetIndex, false, editor);\n            }\n            // Handle preview\n            if (!makePinned) {\n                // Replace existing preview with this editor if we have a preview\n                if (this.preview) {\n                    var indexOfPreview = this.indexOf(this.preview);\n                    if (targetIndex > indexOfPreview) {\n                        targetIndex--; // accomodate for the fact that the preview editor closes\n                    }\n                    this.replaceEditor(this.preview, editor, targetIndex, !makeActive);\n                }\n                this.preview = editor;\n            }\n            // Listeners\n            this.registerEditorListeners(editor);\n            // Event\n            this._onDidEditorOpen.fire(editor);\n            // Handle active\n            if (makeActive) {\n                this.setActive(editor);\n            }\n        }\n        // Existing editor\n        else {\n            // Pin it\n            if (makePinned) {\n                this.pin(editor);\n            }\n            // Activate it\n            if (makeActive) {\n                this.setActive(editor);\n            }\n            // Respect index\n            if (options && typeof options.index === 'number') {\n                this.moveEditor(editor, options.index);\n            }\n        }\n    };\n    EditorGroup.prototype.registerEditorListeners = function (editor) {\n        var _this = this;\n        var unbind = [];\n        // Re-emit disposal of editor input as our own event\n        var onceDispose = event_1.Event.once(editor.onDispose);\n        unbind.push(onceDispose(function () {\n            if (_this.indexOf(editor) >= 0) {\n                _this._onDidEditorDispose.fire(editor);\n            }\n        }));\n        // Re-Emit dirty state changes\n        unbind.push(editor.onDidChangeDirty(function () {\n            _this._onDidEditorBecomeDirty.fire(editor);\n        }));\n        // Re-Emit label changes\n        unbind.push(editor.onDidChangeLabel(function () {\n            _this._onDidEditorLabelChange.fire(editor);\n        }));\n        // Clean up dispose listeners once the editor gets closed\n        unbind.push(this.onDidEditorClose(function (event) {\n            if (event.editor.matches(editor)) {\n                lifecycle_1.dispose(unbind);\n            }\n        }));\n    };\n    EditorGroup.prototype.replaceEditor = function (toReplace, replaceWith, replaceIndex, openNext) {\n        if (openNext === void 0) { openNext = true; }\n        var event = this.doCloseEditor(toReplace, openNext, true); // optimization to prevent multiple setActive() in one call\n        // We want to first add the new editor into our model before emitting the close event because\n        // firing the close event can trigger a dispose on the same editor that is now being added.\n        // This can lead into opening a disposed editor which is not what we want.\n        this.splice(replaceIndex, false, replaceWith);\n        if (event) {\n            this._onDidEditorClose.fire(event);\n        }\n    };\n    EditorGroup.prototype.closeEditor = function (editor, openNext) {\n        if (openNext === void 0) { openNext = true; }\n        var event = this.doCloseEditor(editor, openNext, false);\n        if (event) {\n            this._onDidEditorClose.fire(event);\n            return event.index;\n        }\n        return undefined;\n    };\n    EditorGroup.prototype.doCloseEditor = function (editor, openNext, replaced) {\n        var index = this.indexOf(editor);\n        if (index === -1) {\n            return null; // not found\n        }\n        // Active Editor closed\n        if (openNext && this.matches(this.active, editor)) {\n            // More than one editor\n            if (this.mru.length > 1) {\n                var newActive = void 0;\n                if (this.focusRecentEditorAfterClose) {\n                    newActive = this.mru[1]; // active editor is always first in MRU, so pick second editor after as new active\n                }\n                else {\n                    if (index === this.editors.length - 1) {\n                        newActive = this.editors[index - 1]; // last editor is closed, pick previous as new active\n                    }\n                    else {\n                        newActive = this.editors[index + 1]; // pick next editor as new active\n                    }\n                }\n                this.setActive(newActive);\n            }\n            // One Editor\n            else {\n                this.active = null;\n            }\n        }\n        // Preview Editor closed\n        if (this.matches(this.preview, editor)) {\n            this.preview = null;\n        }\n        // Remove from arrays\n        this.splice(index, true);\n        // Event\n        return { editor: editor, replaced: replaced, index: index, groupId: this.id };\n    };\n    EditorGroup.prototype.closeEditors = function (except, direction) {\n        var _this = this;\n        var index = this.indexOf(except);\n        if (index === -1) {\n            return; // not found\n        }\n        // Close to the left\n        if (direction === editor_1.CloseDirection.LEFT) {\n            for (var i = index - 1; i >= 0; i--) {\n                this.closeEditor(this.editors[i]);\n            }\n        }\n        // Close to the right\n        else if (direction === editor_1.CloseDirection.RIGHT) {\n            for (var i = this.editors.length - 1; i > index; i--) {\n                this.closeEditor(this.editors[i]);\n            }\n        }\n        // Both directions\n        else {\n            this.mru.filter(function (e) { return !_this.matches(e, except); }).forEach(function (e) { return _this.closeEditor(e); });\n        }\n    };\n    EditorGroup.prototype.closeAllEditors = function () {\n        var _this = this;\n        // Optimize: close all non active editors first to produce less upstream work\n        this.mru.filter(function (e) { return !_this.matches(e, _this.active); }).forEach(function (e) { return _this.closeEditor(e); });\n        if (this.active) {\n            this.closeEditor(this.active);\n        }\n    };\n    EditorGroup.prototype.moveEditor = function (editor, toIndex) {\n        var index = this.indexOf(editor);\n        if (index < 0) {\n            return;\n        }\n        // Move\n        this.editors.splice(index, 1);\n        this.editors.splice(toIndex, 0, editor);\n        // Event\n        this._onDidEditorMove.fire(editor);\n    };\n    EditorGroup.prototype.setActive = function (editor) {\n        var index = this.indexOf(editor);\n        if (index === -1) {\n            return; // not found\n        }\n        if (this.matches(this.active, editor)) {\n            return; // already active\n        }\n        this.active = editor;\n        // Bring to front in MRU list\n        this.setMostRecentlyUsed(editor);\n        // Event\n        this._onDidEditorActivate.fire(editor);\n    };\n    EditorGroup.prototype.pin = function (editor) {\n        var index = this.indexOf(editor);\n        if (index === -1) {\n            return; // not found\n        }\n        if (!this.isPreview(editor)) {\n            return; // can only pin a preview editor\n        }\n        // Convert the preview editor to be a pinned editor\n        this.preview = null;\n        // Event\n        this._onDidEditorPin.fire(editor);\n    };\n    EditorGroup.prototype.unpin = function (editor) {\n        var index = this.indexOf(editor);\n        if (index === -1) {\n            return; // not found\n        }\n        if (!this.isPinned(editor)) {\n            return; // can only unpin a pinned editor\n        }\n        // Set new\n        var oldPreview = this.preview;\n        this.preview = editor;\n        // Event\n        this._onDidEditorUnpin.fire(editor);\n        // Close old preview editor if any\n        if (oldPreview) {\n            this.closeEditor(oldPreview);\n        }\n    };\n    EditorGroup.prototype.isPinned = function (arg1) {\n        var editor;\n        var index;\n        if (typeof arg1 === 'number') {\n            editor = this.editors[arg1];\n            index = arg1;\n        }\n        else {\n            editor = arg1;\n            index = this.indexOf(editor);\n        }\n        if (index === -1 || !editor) {\n            return false; // editor not found\n        }\n        if (!this.preview) {\n            return true; // no preview editor\n        }\n        return !this.matches(this.preview, editor);\n    };\n    EditorGroup.prototype.splice = function (index, del, editor) {\n        var editorToDeleteOrReplace = this.editors[index];\n        var args = [index, del ? 1 : 0];\n        if (editor) {\n            args.push(editor);\n        }\n        // Perform on editors array\n        this.editors.splice.apply(this.editors, args);\n        // Add\n        if (!del && editor) {\n            this.mru.push(editor); // make it LRU editor\n            this.updateResourceMap(editor, false /* add */); // add new to resource map\n        }\n        // Remove / Replace\n        else {\n            var indexInMRU = this.indexOf(editorToDeleteOrReplace, this.mru);\n            // Remove\n            if (del && !editor) {\n                this.mru.splice(indexInMRU, 1); // remove from MRU\n                this.updateResourceMap(editorToDeleteOrReplace, true /* delete */); // remove from resource map\n            }\n            // Replace\n            else if (del && editor) {\n                this.mru.splice(indexInMRU, 1, editor); // replace MRU at location\n                this.updateResourceMap(editor, false /* add */); // add new to resource map\n                this.updateResourceMap(editorToDeleteOrReplace, true /* delete */); // remove replaced from resource map\n            }\n        }\n    };\n    EditorGroup.prototype.updateResourceMap = function (editor, remove) {\n        var resource = editor_1.toResource(editor, { supportSideBySide: true });\n        if (resource) {\n            // It is possible to have the same resource opened twice (once as normal input and once as diff input)\n            // So we need to do ref counting on the resource to provide the correct picture\n            var counter = this.mapResourceToEditorCount.get(resource) || 0;\n            // Add\n            var newCounter = void 0;\n            if (!remove) {\n                newCounter = counter + 1;\n            }\n            // Delete\n            else {\n                newCounter = counter - 1;\n            }\n            if (newCounter > 0) {\n                this.mapResourceToEditorCount.set(resource, newCounter);\n            }\n            else {\n                this.mapResourceToEditorCount.delete(resource);\n            }\n        }\n    };\n    EditorGroup.prototype.indexOf = function (candidate, editors) {\n        if (editors === void 0) { editors = this.editors; }\n        if (!candidate) {\n            return -1;\n        }\n        for (var i = 0; i < editors.length; i++) {\n            if (this.matches(editors[i], candidate)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    EditorGroup.prototype.contains = function (editorOrResource, supportSideBySide) {\n        if (editorOrResource instanceof editor_1.EditorInput) {\n            var index = this.indexOf(editorOrResource);\n            if (index >= 0) {\n                return true;\n            }\n            if (supportSideBySide && editorOrResource instanceof editor_1.SideBySideEditorInput) {\n                var index_1 = this.indexOf(editorOrResource.master);\n                if (index_1 >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        var counter = this.mapResourceToEditorCount.get(editorOrResource);\n        return typeof counter === 'number' && counter > 0;\n    };\n    EditorGroup.prototype.setMostRecentlyUsed = function (editor) {\n        var index = this.indexOf(editor);\n        if (index === -1) {\n            return; // editor not found\n        }\n        var mruIndex = this.indexOf(editor, this.mru);\n        // Remove old index\n        this.mru.splice(mruIndex, 1);\n        // Set editor to front\n        this.mru.unshift(editor);\n    };\n    EditorGroup.prototype.matches = function (editorA, editorB) {\n        return !!editorA && !!editorB && editorA.matches(editorB);\n    };\n    EditorGroup.prototype.clone = function () {\n        var group = this.instantiationService.createInstance(EditorGroup, undefined);\n        group.editors = this.editors.slice(0);\n        group.mru = this.mru.slice(0);\n        group.mapResourceToEditorCount = this.mapResourceToEditorCount.clone();\n        group.preview = this.preview;\n        group.active = this.active;\n        group.editorOpenPositioning = this.editorOpenPositioning;\n        return group;\n    };\n    EditorGroup.prototype.serialize = function () {\n        var _this = this;\n        var registry = platform_1.Registry.as(editor_1.Extensions.EditorInputFactories);\n        // Serialize all editor inputs so that we can store them.\n        // Editors that cannot be serialized need to be ignored\n        // from mru, active and preview if any.\n        var serializableEditors = [];\n        var serializedEditors = [];\n        var serializablePreviewIndex;\n        this.editors.forEach(function (e) {\n            var factory = registry.getEditorInputFactory(e.getTypeId());\n            if (factory) {\n                var value = factory.serialize(e);\n                if (typeof value === 'string') {\n                    serializedEditors.push({ id: e.getTypeId(), value: value });\n                    serializableEditors.push(e);\n                    if (_this.preview === e) {\n                        serializablePreviewIndex = serializableEditors.length - 1;\n                    }\n                }\n            }\n        });\n        var serializableMru = this.mru.map(function (e) { return _this.indexOf(e, serializableEditors); }).filter(function (i) { return i >= 0; });\n        return {\n            id: this.id,\n            editors: serializedEditors,\n            mru: serializableMru,\n            preview: serializablePreviewIndex,\n        };\n    };\n    EditorGroup.prototype.deserialize = function (data) {\n        var _this = this;\n        var registry = platform_1.Registry.as(editor_1.Extensions.EditorInputFactories);\n        if (typeof data.id === 'number') {\n            this._id = data.id;\n            EditorGroup.IDS = Math.max(data.id + 1, EditorGroup.IDS); // make sure our ID generator is always larger\n        }\n        else {\n            this._id = EditorGroup.IDS++; // backwards compatibility\n        }\n        this.editors = arrays_1.coalesce(data.editors.map(function (e) {\n            var factory = registry.getEditorInputFactory(e.id);\n            if (factory) {\n                var editor = factory.deserialize(_this.instantiationService, e.value);\n                _this.registerEditorListeners(editor);\n                _this.updateResourceMap(editor, false /* add */);\n                return editor;\n            }\n            return null;\n        }));\n        this.mru = data.mru.map(function (i) { return _this.editors[i]; });\n        this.active = this.mru[0];\n        if (typeof data.preview === 'number') {\n            this.preview = this.editors[data.preview];\n        }\n    };\n    EditorGroup.IDS = 0;\n    EditorGroup = tslib_1.__decorate([\n        tslib_1.__param(1, instantiation_1.IInstantiationService),\n        tslib_1.__param(2, configuration_1.IConfigurationService)\n    ], EditorGroup);\n    return EditorGroup;\n}(lifecycle_1.Disposable));\nexports.EditorGroup = EditorGroup;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/editorGroup.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/editorGroup.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Extensions, IEditorInputFactoryRegistry, EditorInput, toResource, IEditorIdentifier, IEditorCloseEvent, GroupIdentifier, SideBySideEditorInput, CloseDirection } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { dispose, IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { coalesce } from 'vs/base/common/arrays';\n\nconst EditorOpenPositioning = {\n\tLEFT: 'left',\n\tRIGHT: 'right',\n\tFIRST: 'first',\n\tLAST: 'last'\n};\n\nexport interface EditorCloseEvent extends IEditorCloseEvent {\n\teditor: EditorInput;\n}\n\nexport interface EditorIdentifier extends IEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\teditor: EditorInput;\n}\n\nexport interface IEditorOpenOptions {\n\tpinned?: boolean;\n\tactive?: boolean;\n\tindex?: number;\n}\n\nexport interface ISerializedEditorInput {\n\tid: string;\n\tvalue: string;\n}\n\nexport interface ISerializedEditorGroup {\n\tid: number;\n\teditors: ISerializedEditorInput[];\n\tmru: number[];\n\tpreview?: number;\n}\n\nexport function isSerializedEditorGroup(obj?: any): obj is ISerializedEditorGroup {\n\tconst group = obj as ISerializedEditorGroup;\n\n\treturn obj && typeof obj === 'object' && Array.isArray(group.editors) && Array.isArray(group.mru);\n}\n\nexport class EditorGroup extends Disposable {\n\n\tprivate static IDS = 0;\n\n\t//#region events\n\n\tprivate readonly _onDidEditorActivate = this._register(new Emitter<EditorInput>());\n\tget onDidEditorActivate(): Event<EditorInput> { return this._onDidEditorActivate.event; }\n\n\tprivate readonly _onDidEditorOpen = this._register(new Emitter<EditorInput>());\n\tget onDidEditorOpen(): Event<EditorInput> { return this._onDidEditorOpen.event; }\n\n\tprivate readonly _onDidEditorClose = this._register(new Emitter<EditorCloseEvent>());\n\tget onDidEditorClose(): Event<EditorCloseEvent> { return this._onDidEditorClose.event; }\n\n\tprivate readonly _onDidEditorDispose = this._register(new Emitter<EditorInput>());\n\tget onDidEditorDispose(): Event<EditorInput> { return this._onDidEditorDispose.event; }\n\n\tprivate readonly _onDidEditorBecomeDirty = this._register(new Emitter<EditorInput>());\n\tget onDidEditorBecomeDirty(): Event<EditorInput> { return this._onDidEditorBecomeDirty.event; }\n\n\tprivate readonly _onDidEditorLabelChange = this._register(new Emitter<EditorInput>());\n\tget onDidEditorLabelChange(): Event<EditorInput> { return this._onDidEditorLabelChange.event; }\n\n\tprivate readonly _onDidEditorMove = this._register(new Emitter<EditorInput>());\n\tget onDidEditorMove(): Event<EditorInput> { return this._onDidEditorMove.event; }\n\n\tprivate readonly _onDidEditorPin = this._register(new Emitter<EditorInput>());\n\tget onDidEditorPin(): Event<EditorInput> { return this._onDidEditorPin.event; }\n\n\tprivate readonly _onDidEditorUnpin = this._register(new Emitter<EditorInput>());\n\tget onDidEditorUnpin(): Event<EditorInput> { return this._onDidEditorUnpin.event; }\n\n\t//#endregion\n\n\tprivate _id: GroupIdentifier;\n\n\tprivate editors: EditorInput[] = [];\n\tprivate mru: EditorInput[] = [];\n\tprivate mapResourceToEditorCount: ResourceMap<number> = new ResourceMap<number>();\n\n\tprivate preview: EditorInput | null; // editor in preview state\n\tprivate active: EditorInput | null;  // editor in active state\n\n\tprivate editorOpenPositioning: 'left' | 'right' | 'first' | 'last';\n\tprivate focusRecentEditorAfterClose: boolean;\n\n\tconstructor(\n\t\tlabelOrSerializedGroup: ISerializedEditorGroup,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tif (isSerializedEditorGroup(labelOrSerializedGroup)) {\n\t\t\tthis.deserialize(labelOrSerializedGroup);\n\t\t} else {\n\t\t\tthis._id = EditorGroup.IDS++;\n\t\t}\n\n\t\tthis.onConfigurationUpdated();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t}\n\n\tprivate onConfigurationUpdated(event?: IConfigurationChangeEvent): void {\n\t\tthis.editorOpenPositioning = this.configurationService.getValue('workbench.editor.openPositioning');\n\t\tthis.focusRecentEditorAfterClose = this.configurationService.getValue('workbench.editor.focusRecentEditorAfterClose');\n\t}\n\n\tget id(): GroupIdentifier {\n\t\treturn this._id;\n\t}\n\n\tget count(): number {\n\t\treturn this.editors.length;\n\t}\n\n\tgetEditors(mru?: boolean): EditorInput[] {\n\t\treturn mru ? this.mru.slice(0) : this.editors.slice(0);\n\t}\n\n\tgetEditor(index: number): EditorInput | null;\n\tgetEditor(resource: URI): EditorInput | null;\n\tgetEditor(arg1: any): EditorInput | null {\n\t\tif (typeof arg1 === 'number') {\n\t\t\treturn this.editors[arg1];\n\t\t}\n\n\t\tconst resource: URI = arg1;\n\t\tif (!this.contains(resource)) {\n\t\t\treturn null; // fast check for resource opened or not\n\t\t}\n\n\t\tfor (const editor of this.editors) {\n\t\t\tconst editorResource = toResource(editor, { supportSideBySide: true });\n\t\t\tif (editorResource && editorResource.toString() === resource.toString()) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tget activeEditor(): EditorInput | null {\n\t\treturn this.active;\n\t}\n\n\tisActive(editor: EditorInput): boolean {\n\t\treturn this.matches(this.active, editor);\n\t}\n\n\tget previewEditor(): EditorInput | null {\n\t\treturn this.preview;\n\t}\n\n\tisPreview(editor: EditorInput): boolean {\n\t\treturn this.matches(this.preview, editor);\n\t}\n\n\topenEditor(editor: EditorInput, options?: IEditorOpenOptions): void {\n\t\tconst index = this.indexOf(editor);\n\n\t\tconst makePinned = options && options.pinned;\n\t\tconst makeActive = (options && options.active) || !this.activeEditor || (!makePinned && this.matches(this.preview, this.activeEditor));\n\n\t\t// New editor\n\t\tif (index === -1) {\n\t\t\tlet targetIndex: number;\n\t\t\tconst indexOfActive = this.indexOf(this.active);\n\n\t\t\t// Insert into specific position\n\t\t\tif (options && typeof options.index === 'number') {\n\t\t\t\ttargetIndex = options.index;\n\t\t\t}\n\n\t\t\t// Insert to the BEGINNING\n\t\t\telse if (this.editorOpenPositioning === EditorOpenPositioning.FIRST) {\n\t\t\t\ttargetIndex = 0;\n\t\t\t}\n\n\t\t\t// Insert to the END\n\t\t\telse if (this.editorOpenPositioning === EditorOpenPositioning.LAST) {\n\t\t\t\ttargetIndex = this.editors.length;\n\t\t\t}\n\n\t\t\t// Insert to the LEFT of active editor\n\t\t\telse if (this.editorOpenPositioning === EditorOpenPositioning.LEFT) {\n\t\t\t\tif (indexOfActive === 0 || !this.editors.length) {\n\t\t\t\t\ttargetIndex = 0; // to the left becoming first editor in list\n\t\t\t\t} else {\n\t\t\t\t\ttargetIndex = indexOfActive; // to the left of active editor\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Insert to the RIGHT of active editor\n\t\t\telse {\n\t\t\t\ttargetIndex = indexOfActive + 1;\n\t\t\t}\n\n\t\t\t// Insert into our list of editors if pinned or we have no preview editor\n\t\t\tif (makePinned || !this.preview) {\n\t\t\t\tthis.splice(targetIndex, false, editor);\n\t\t\t}\n\n\t\t\t// Handle preview\n\t\t\tif (!makePinned) {\n\n\t\t\t\t// Replace existing preview with this editor if we have a preview\n\t\t\t\tif (this.preview) {\n\t\t\t\t\tconst indexOfPreview = this.indexOf(this.preview);\n\t\t\t\t\tif (targetIndex > indexOfPreview) {\n\t\t\t\t\t\ttargetIndex--; // accomodate for the fact that the preview editor closes\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.replaceEditor(this.preview, editor, targetIndex, !makeActive);\n\t\t\t\t}\n\n\t\t\t\tthis.preview = editor;\n\t\t\t}\n\n\t\t\t// Listeners\n\t\t\tthis.registerEditorListeners(editor);\n\n\t\t\t// Event\n\t\t\tthis._onDidEditorOpen.fire(editor);\n\n\t\t\t// Handle active\n\t\t\tif (makeActive) {\n\t\t\t\tthis.setActive(editor);\n\t\t\t}\n\t\t}\n\n\t\t// Existing editor\n\t\telse {\n\n\t\t\t// Pin it\n\t\t\tif (makePinned) {\n\t\t\t\tthis.pin(editor);\n\t\t\t}\n\n\t\t\t// Activate it\n\t\t\tif (makeActive) {\n\t\t\t\tthis.setActive(editor);\n\t\t\t}\n\n\t\t\t// Respect index\n\t\t\tif (options && typeof options.index === 'number') {\n\t\t\t\tthis.moveEditor(editor, options.index);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerEditorListeners(editor: EditorInput): void {\n\t\tconst unbind: IDisposable[] = [];\n\n\t\t// Re-emit disposal of editor input as our own event\n\t\tconst onceDispose = Event.once(editor.onDispose);\n\t\tunbind.push(onceDispose(() => {\n\t\t\tif (this.indexOf(editor) >= 0) {\n\t\t\t\tthis._onDidEditorDispose.fire(editor);\n\t\t\t}\n\t\t}));\n\n\t\t// Re-Emit dirty state changes\n\t\tunbind.push(editor.onDidChangeDirty(() => {\n\t\t\tthis._onDidEditorBecomeDirty.fire(editor);\n\t\t}));\n\n\t\t// Re-Emit label changes\n\t\tunbind.push(editor.onDidChangeLabel(() => {\n\t\t\tthis._onDidEditorLabelChange.fire(editor);\n\t\t}));\n\n\t\t// Clean up dispose listeners once the editor gets closed\n\t\tunbind.push(this.onDidEditorClose(event => {\n\t\t\tif (event.editor.matches(editor)) {\n\t\t\t\tdispose(unbind);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate replaceEditor(toReplace: EditorInput, replaceWith: EditorInput, replaceIndex: number, openNext = true): void {\n\t\tconst event = this.doCloseEditor(toReplace, openNext, true); // optimization to prevent multiple setActive() in one call\n\n\t\t// We want to first add the new editor into our model before emitting the close event because\n\t\t// firing the close event can trigger a dispose on the same editor that is now being added.\n\t\t// This can lead into opening a disposed editor which is not what we want.\n\t\tthis.splice(replaceIndex, false, replaceWith);\n\n\t\tif (event) {\n\t\t\tthis._onDidEditorClose.fire(event);\n\t\t}\n\t}\n\n\tcloseEditor(editor: EditorInput, openNext = true): number | undefined {\n\t\tconst event = this.doCloseEditor(editor, openNext, false);\n\n\t\tif (event) {\n\t\t\tthis._onDidEditorClose.fire(event);\n\n\t\t\treturn event.index;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate doCloseEditor(editor: EditorInput, openNext: boolean, replaced: boolean): EditorCloseEvent | null {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index === -1) {\n\t\t\treturn null; // not found\n\t\t}\n\n\t\t// Active Editor closed\n\t\tif (openNext && this.matches(this.active, editor)) {\n\n\t\t\t// More than one editor\n\t\t\tif (this.mru.length > 1) {\n\t\t\t\tlet newActive: EditorInput;\n\t\t\t\tif (this.focusRecentEditorAfterClose) {\n\t\t\t\t\tnewActive = this.mru[1]; // active editor is always first in MRU, so pick second editor after as new active\n\t\t\t\t} else {\n\t\t\t\t\tif (index === this.editors.length - 1) {\n\t\t\t\t\t\tnewActive = this.editors[index - 1]; // last editor is closed, pick previous as new active\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewActive = this.editors[index + 1]; // pick next editor as new active\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setActive(newActive);\n\t\t\t}\n\n\t\t\t// One Editor\n\t\t\telse {\n\t\t\t\tthis.active = null;\n\t\t\t}\n\t\t}\n\n\t\t// Preview Editor closed\n\t\tif (this.matches(this.preview, editor)) {\n\t\t\tthis.preview = null;\n\t\t}\n\n\t\t// Remove from arrays\n\t\tthis.splice(index, true);\n\n\t\t// Event\n\t\treturn { editor, replaced, index, groupId: this.id };\n\t}\n\n\tcloseEditors(except: EditorInput, direction?: CloseDirection): void {\n\t\tconst index = this.indexOf(except);\n\t\tif (index === -1) {\n\t\t\treturn; // not found\n\t\t}\n\n\t\t// Close to the left\n\t\tif (direction === CloseDirection.LEFT) {\n\t\t\tfor (let i = index - 1; i >= 0; i--) {\n\t\t\t\tthis.closeEditor(this.editors[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Close to the right\n\t\telse if (direction === CloseDirection.RIGHT) {\n\t\t\tfor (let i = this.editors.length - 1; i > index; i--) {\n\t\t\t\tthis.closeEditor(this.editors[i]);\n\t\t\t}\n\t\t}\n\n\t\t// Both directions\n\t\telse {\n\t\t\tthis.mru.filter(e => !this.matches(e, except)).forEach(e => this.closeEditor(e));\n\t\t}\n\t}\n\n\tcloseAllEditors(): void {\n\n\t\t// Optimize: close all non active editors first to produce less upstream work\n\t\tthis.mru.filter(e => !this.matches(e, this.active)).forEach(e => this.closeEditor(e));\n\t\tif (this.active) {\n\t\t\tthis.closeEditor(this.active);\n\t\t}\n\t}\n\n\tmoveEditor(editor: EditorInput, toIndex: number): void {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Move\n\t\tthis.editors.splice(index, 1);\n\t\tthis.editors.splice(toIndex, 0, editor);\n\n\t\t// Event\n\t\tthis._onDidEditorMove.fire(editor);\n\t}\n\n\tsetActive(editor: EditorInput): void {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index === -1) {\n\t\t\treturn; // not found\n\t\t}\n\n\t\tif (this.matches(this.active, editor)) {\n\t\t\treturn; // already active\n\t\t}\n\n\t\tthis.active = editor;\n\n\t\t// Bring to front in MRU list\n\t\tthis.setMostRecentlyUsed(editor);\n\n\t\t// Event\n\t\tthis._onDidEditorActivate.fire(editor);\n\t}\n\n\tpin(editor: EditorInput): void {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index === -1) {\n\t\t\treturn; // not found\n\t\t}\n\n\t\tif (!this.isPreview(editor)) {\n\t\t\treturn; // can only pin a preview editor\n\t\t}\n\n\t\t// Convert the preview editor to be a pinned editor\n\t\tthis.preview = null;\n\n\t\t// Event\n\t\tthis._onDidEditorPin.fire(editor);\n\t}\n\n\tunpin(editor: EditorInput): void {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index === -1) {\n\t\t\treturn; // not found\n\t\t}\n\n\t\tif (!this.isPinned(editor)) {\n\t\t\treturn; // can only unpin a pinned editor\n\t\t}\n\n\t\t// Set new\n\t\tconst oldPreview = this.preview;\n\t\tthis.preview = editor;\n\n\t\t// Event\n\t\tthis._onDidEditorUnpin.fire(editor);\n\n\t\t// Close old preview editor if any\n\t\tif (oldPreview) {\n\t\t\tthis.closeEditor(oldPreview);\n\t\t}\n\t}\n\n\tisPinned(editor: EditorInput): boolean;\n\tisPinned(index: number): boolean;\n\tisPinned(arg1: EditorInput | number): boolean {\n\t\tlet editor: EditorInput;\n\t\tlet index: number;\n\t\tif (typeof arg1 === 'number') {\n\t\t\teditor = this.editors[arg1];\n\t\t\tindex = arg1;\n\t\t} else {\n\t\t\teditor = arg1;\n\t\t\tindex = this.indexOf(editor);\n\t\t}\n\n\t\tif (index === -1 || !editor) {\n\t\t\treturn false; // editor not found\n\t\t}\n\n\t\tif (!this.preview) {\n\t\t\treturn true; // no preview editor\n\t\t}\n\n\t\treturn !this.matches(this.preview, editor);\n\t}\n\n\tprivate splice(index: number, del: boolean, editor?: EditorInput): void {\n\t\tconst editorToDeleteOrReplace = this.editors[index];\n\n\t\tconst args: any[] = [index, del ? 1 : 0];\n\t\tif (editor) {\n\t\t\targs.push(editor);\n\t\t}\n\n\t\t// Perform on editors array\n\t\tthis.editors.splice.apply(this.editors, args);\n\n\t\t// Add\n\t\tif (!del && editor) {\n\t\t\tthis.mru.push(editor); // make it LRU editor\n\t\t\tthis.updateResourceMap(editor, false /* add */); // add new to resource map\n\t\t}\n\n\t\t// Remove / Replace\n\t\telse {\n\t\t\tconst indexInMRU = this.indexOf(editorToDeleteOrReplace, this.mru);\n\n\t\t\t// Remove\n\t\t\tif (del && !editor) {\n\t\t\t\tthis.mru.splice(indexInMRU, 1); // remove from MRU\n\t\t\t\tthis.updateResourceMap(editorToDeleteOrReplace, true /* delete */); // remove from resource map\n\t\t\t}\n\n\t\t\t// Replace\n\t\t\telse if (del && editor) {\n\t\t\t\tthis.mru.splice(indexInMRU, 1, editor); // replace MRU at location\n\t\t\t\tthis.updateResourceMap(editor, false /* add */); // add new to resource map\n\t\t\t\tthis.updateResourceMap(editorToDeleteOrReplace, true /* delete */); // remove replaced from resource map\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateResourceMap(editor: EditorInput, remove: boolean): void {\n\t\tconst resource = toResource(editor, { supportSideBySide: true });\n\t\tif (resource) {\n\n\t\t\t// It is possible to have the same resource opened twice (once as normal input and once as diff input)\n\t\t\t// So we need to do ref counting on the resource to provide the correct picture\n\t\t\tconst counter = this.mapResourceToEditorCount.get(resource) || 0;\n\n\t\t\t// Add\n\t\t\tlet newCounter: number;\n\t\t\tif (!remove) {\n\t\t\t\tnewCounter = counter + 1;\n\t\t\t}\n\n\t\t\t// Delete\n\t\t\telse {\n\t\t\t\tnewCounter = counter - 1;\n\t\t\t}\n\n\t\t\tif (newCounter > 0) {\n\t\t\t\tthis.mapResourceToEditorCount.set(resource, newCounter);\n\t\t\t} else {\n\t\t\t\tthis.mapResourceToEditorCount.delete(resource);\n\t\t\t}\n\t\t}\n\t}\n\n\tindexOf(candidate: EditorInput | null, editors = this.editors): number {\n\t\tif (!candidate) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tfor (let i = 0; i < editors.length; i++) {\n\t\t\tif (this.matches(editors[i], candidate)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tcontains(editorOrResource: EditorInput | URI): boolean;\n\tcontains(editor: EditorInput, supportSideBySide?: boolean): boolean;\n\tcontains(editorOrResource: EditorInput | URI, supportSideBySide?: boolean): boolean {\n\t\tif (editorOrResource instanceof EditorInput) {\n\t\t\tconst index = this.indexOf(editorOrResource);\n\t\t\tif (index >= 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (supportSideBySide && editorOrResource instanceof SideBySideEditorInput) {\n\t\t\t\tconst index = this.indexOf(editorOrResource.master);\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tconst counter = this.mapResourceToEditorCount.get(editorOrResource);\n\n\t\treturn typeof counter === 'number' && counter > 0;\n\t}\n\n\tprivate setMostRecentlyUsed(editor: EditorInput): void {\n\t\tconst index = this.indexOf(editor);\n\t\tif (index === -1) {\n\t\t\treturn; // editor not found\n\t\t}\n\n\t\tconst mruIndex = this.indexOf(editor, this.mru);\n\n\t\t// Remove old index\n\t\tthis.mru.splice(mruIndex, 1);\n\n\t\t// Set editor to front\n\t\tthis.mru.unshift(editor);\n\t}\n\n\tprivate matches(editorA: EditorInput | null, editorB: EditorInput | null): boolean {\n\t\treturn !!editorA && !!editorB && editorA.matches(editorB);\n\t}\n\n\tclone(): EditorGroup {\n\t\tconst group = this.instantiationService.createInstance(EditorGroup, undefined);\n\t\tgroup.editors = this.editors.slice(0);\n\t\tgroup.mru = this.mru.slice(0);\n\t\tgroup.mapResourceToEditorCount = this.mapResourceToEditorCount.clone();\n\t\tgroup.preview = this.preview;\n\t\tgroup.active = this.active;\n\t\tgroup.editorOpenPositioning = this.editorOpenPositioning;\n\n\t\treturn group;\n\t}\n\n\tserialize(): ISerializedEditorGroup {\n\t\tconst registry = Registry.as<IEditorInputFactoryRegistry>(Extensions.EditorInputFactories);\n\n\t\t// Serialize all editor inputs so that we can store them.\n\t\t// Editors that cannot be serialized need to be ignored\n\t\t// from mru, active and preview if any.\n\t\tlet serializableEditors: EditorInput[] = [];\n\t\tlet serializedEditors: ISerializedEditorInput[] = [];\n\t\tlet serializablePreviewIndex: number | undefined;\n\t\tthis.editors.forEach(e => {\n\t\t\tconst factory = registry.getEditorInputFactory(e.getTypeId());\n\t\t\tif (factory) {\n\t\t\t\tconst value = factory.serialize(e);\n\t\t\t\tif (typeof value === 'string') {\n\t\t\t\t\tserializedEditors.push({ id: e.getTypeId(), value });\n\t\t\t\t\tserializableEditors.push(e);\n\n\t\t\t\t\tif (this.preview === e) {\n\t\t\t\t\t\tserializablePreviewIndex = serializableEditors.length - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst serializableMru = this.mru.map(e => this.indexOf(e, serializableEditors)).filter(i => i >= 0);\n\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\teditors: serializedEditors,\n\t\t\tmru: serializableMru,\n\t\t\tpreview: serializablePreviewIndex,\n\t\t};\n\t}\n\n\tprivate deserialize(data: ISerializedEditorGroup): void {\n\t\tconst registry = Registry.as<IEditorInputFactoryRegistry>(Extensions.EditorInputFactories);\n\n\t\tif (typeof data.id === 'number') {\n\t\t\tthis._id = data.id;\n\n\t\t\tEditorGroup.IDS = Math.max(data.id + 1, EditorGroup.IDS); // make sure our ID generator is always larger\n\t\t} else {\n\t\t\tthis._id = EditorGroup.IDS++; // backwards compatibility\n\t\t}\n\n\t\tthis.editors = coalesce(data.editors.map(e => {\n\t\t\tconst factory = registry.getEditorInputFactory(e.id);\n\t\t\tif (factory) {\n\t\t\t\tconst editor = factory.deserialize(this.instantiationService, e.value)!;\n\n\t\t\t\tthis.registerEditorListeners(editor);\n\t\t\t\tthis.updateResourceMap(editor, false /* add */);\n\n\t\t\t\treturn editor;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}));\n\t\tthis.mru = data.mru.map(i => this.editors[i]);\n\t\tthis.active = this.mru[0];\n\t\tif (typeof data.preview === 'number') {\n\t\t\tthis.preview = this.editors[data.preview];\n\t\t}\n\t}\n}\n"]}]}