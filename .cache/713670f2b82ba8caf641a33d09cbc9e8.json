{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/broadcast/electron-browser/broadcastService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/broadcast/electron-browser/broadcastService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar electron_1 = require(\"electron\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar broadcast_1 = require(\"vs/workbench/services/broadcast/common/broadcast\");\nvar BroadcastService = /** @class */ (function (_super) {\n    tslib_1.__extends(BroadcastService, _super);\n    function BroadcastService(windowService, logService) {\n        var _this = _super.call(this) || this;\n        _this.windowService = windowService;\n        _this.logService = logService;\n        _this._onBroadcast = _this._register(new event_1.Emitter());\n        _this.windowId = windowService.getCurrentWindowId();\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(BroadcastService.prototype, \"onBroadcast\", {\n        get: function () { return this._onBroadcast.event; },\n        enumerable: true,\n        configurable: true\n    });\n    BroadcastService.prototype.registerListeners = function () {\n        var _this = this;\n        electron_1.ipcRenderer.on('vscode:broadcast', function (event, b) {\n            _this.logService.trace(\"Received broadcast from main in window \" + _this.windowId + \": \", b);\n            _this._onBroadcast.fire(b);\n        });\n    };\n    BroadcastService.prototype.broadcast = function (b) {\n        this.logService.trace(\"Sending broadcast to main from window \" + this.windowId + \": \", b);\n        electron_1.ipcRenderer.send('vscode:broadcast', this.windowId, {\n            channel: b.channel,\n            payload: b.payload\n        });\n    };\n    BroadcastService = tslib_1.__decorate([\n        tslib_1.__param(0, windows_1.IWindowService),\n        tslib_1.__param(1, log_1.ILogService)\n    ], BroadcastService);\n    return BroadcastService;\n}(lifecycle_1.Disposable));\nexports.BroadcastService = BroadcastService;\nextensions_1.registerSingleton(broadcast_1.IBroadcastService, BroadcastService, true);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/broadcast/electron-browser/broadcastService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/broadcast/electron-browser/broadcastService.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,8CAAsD;AACtD,qCAA8C;AAC9C,kDAAyD;AACzD,sDAAsD;AACtD,0EAAgF;AAChF,8DAAoE;AACpE,8EAAiG;AAEjG;IAAsC,4CAAU;IAQ/C,0BAC0B,aAA6B,EACxB,UAAuB;QAFtD,YAIC,iBAAO,SAKP;QARyB,mBAAa,GAAb,aAAa,CAAgB;QACxB,gBAAU,GAAV,UAAU,CAAa;QAPrC,kBAAY,GAAwB,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAc,CAAC,CAAC;QAW9F,KAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,kBAAkB,EAAE,CAAC;QAEnD,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IAbD,sBAAI,yCAAW;aAAf,cAAuC,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAehE,4CAAiB,GAAzB;QAAA,iBAMC;QALA,sBAAG,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAC,KAAc,EAAE,CAAa;YACxD,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,4CAA0C,KAAI,CAAC,QAAQ,OAAI,EAAE,CAAC,CAAC,CAAC;YAEtF,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,oCAAS,GAAT,UAAU,CAAa;QACtB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,2CAAyC,IAAI,CAAC,QAAQ,OAAI,EAAE,CAAC,CAAC,CAAC;QAErF,sBAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,EAAE;YAC3C,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,OAAO,EAAE,CAAC,CAAC,OAAO;SAClB,CAAC,CAAC;IACJ,CAAC;IAlCW,gBAAgB;QAS1B,mBAAA,wBAAc,CAAA;QACd,mBAAA,iBAAW,CAAA;OAVD,gBAAgB,CAmC5B;IAAD,uBAAC;CAAA,AAnCD,CAAsC,sBAAU,GAmC/C;AAnCY,4CAAgB;AAqC7B,8BAAiB,CAAC,6BAAiB,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ipcRenderer as ipc } from 'electron';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IBroadcastService, IBroadcast } from 'vs/workbench/services/broadcast/common/broadcast';\n\nexport class BroadcastService extends Disposable implements IBroadcastService {\n\t_serviceBrand: any;\n\n\tprivate readonly _onBroadcast: Emitter<IBroadcast> = this._register(new Emitter<IBroadcast>());\n\tget onBroadcast(): Event<IBroadcast> { return this._onBroadcast.event; }\n\n\tprivate windowId: number;\n\n\tconstructor(\n\t\t@IWindowService readonly windowService: IWindowService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.windowId = windowService.getCurrentWindowId();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tipc.on('vscode:broadcast', (event: unknown, b: IBroadcast) => {\n\t\t\tthis.logService.trace(`Received broadcast from main in window ${this.windowId}: `, b);\n\n\t\t\tthis._onBroadcast.fire(b);\n\t\t});\n\t}\n\n\tbroadcast(b: IBroadcast): void {\n\t\tthis.logService.trace(`Sending broadcast to main from window ${this.windowId}: `, b);\n\n\t\tipc.send('vscode:broadcast', this.windowId, {\n\t\t\tchannel: b.channel,\n\t\t\tpayload: b.payload\n\t\t});\n\t}\n}\n\nregisterSingleton(IBroadcastService, BroadcastService, true);\n"]}]}