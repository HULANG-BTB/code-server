{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/workspacesService.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/workspacesService.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar workspacesMainService_1 = require(\"vs/platform/workspaces/electron-main/workspacesMainService\");\nvar workspacesIpc = require(\"vs/platform/workspaces/node/workspacesIpc\");\nvar workbench_1 = require(\"../workbench\");\n/**\n * Instead of going to the shared process, we'll directly run these methods on\n * the client. This setup means we can only control the current window.\n */\nvar WorkspacesService = /** @class */ (function () {\n    function WorkspacesService() {\n    }\n    WorkspacesService.prototype.createUntitledWorkspace = function (folders) {\n        var mainService = new workspacesMainService_1.WorkspacesMainService(workbench_1.workbench.serviceCollection.get(environment_1.IEnvironmentService), workbench_1.workbench.serviceCollection.get(log_1.ILogService));\n        // lib/vscode/src/vs/platform/workspaces/node/workspacesIpc.ts\n        var rawFolders = folders;\n        if (Array.isArray(rawFolders)) {\n            folders = rawFolders.map(function (rawFolder) {\n                return {\n                    uri: uri_1.URI.revive(rawFolder.uri),\n                    name: rawFolder.name,\n                };\n            });\n        }\n        return mainService.createUntitledWorkspace(folders);\n    };\n    return WorkspacesService;\n}());\nvar target = workspacesIpc;\n// @ts-ignore TODO: don't ignore it.\ntarget.WorkspacesChannelClient = WorkspacesService;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/workspacesService.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/workspacesService.ts"],"names":[],"mappings":";;AAAA,0CAAyC;AACzC,0EAAiF;AACjF,kDAAyD;AAEzD,oGAAmG;AACnG,yEAA2E;AAC3E,0CAAyC;AAEzC;;;GAGG;AACH;IAAA;IAuBA,CAAC;IAnBO,mDAAuB,GAA9B,UAA+B,OAAoD;QAClF,IAAM,WAAW,GAAG,IAAI,6CAAqB,CAC5C,qBAAS,CAAC,iBAAiB,CAAC,GAAG,CAAsB,iCAAmB,CAAwB,EAChG,qBAAS,CAAC,iBAAiB,CAAC,GAAG,CAAc,iBAAW,CAAgB,CACxE,CAAC;QAEF,8DAA8D;QAC9D,IAAM,UAAU,GAAmC,OAAQ,CAAC;QAC5D,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC9B,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,UAAA,SAAS;gBACjC,OAAO;oBACN,GAAG,EAAE,SAAG,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;oBAC9B,IAAI,EAAE,SAAS,CAAC,IAAK;iBACW,CAAC;YACnC,CAAC,CAAC,CAAC;SACH;QAED,OAAO,WAAW,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IACF,wBAAC;AAAD,CAAC,AAvBD,IAuBC;AAED,IAAM,MAAM,GAAG,aAAqC,CAAC;AACrD,oCAAoC;AACpC,MAAM,CAAC,uBAAuB,GAAG,iBAAiB,CAAC","sourcesContent":["import { URI } from \"vs/base/common/uri\";\nimport { IEnvironmentService } from \"vs/platform/environment/common/environment\";\nimport { ILogService } from \"vs/platform/log/common/log\";\nimport { IWorkspaceFolderCreationData, IWorkspaceIdentifier, IWorkspacesService } from \"vs/platform/workspaces/common/workspaces\";\nimport { WorkspacesMainService } from \"vs/platform/workspaces/electron-main/workspacesMainService\";\nimport * as workspacesIpc from \"vs/platform/workspaces/node/workspacesIpc\";\nimport { workbench } from \"../workbench\";\n\n/**\n * Instead of going to the shared process, we'll directly run these methods on\n * the client. This setup means we can only control the current window.\n */\nclass WorkspacesService implements IWorkspacesService {\n\t// tslint:disable-next-line:no-any\n\tpublic _serviceBrand: any;\n\n\tpublic createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[] | undefined): Promise<IWorkspaceIdentifier> {\n\t\tconst mainService = new WorkspacesMainService(\n\t\t\tworkbench.serviceCollection.get<IEnvironmentService>(IEnvironmentService) as IEnvironmentService,\n\t\t\tworkbench.serviceCollection.get<ILogService>(ILogService) as ILogService,\n\t\t);\n\n\t\t// lib/vscode/src/vs/platform/workspaces/node/workspacesIpc.ts\n\t\tconst rawFolders: IWorkspaceFolderCreationData[] = folders!;\n\t\tif (Array.isArray(rawFolders)) {\n\t\t\tfolders = rawFolders.map(rawFolder => {\n\t\t\t\treturn {\n\t\t\t\t\turi: URI.revive(rawFolder.uri), // convert raw URI back to real URI\n\t\t\t\t\tname: rawFolder.name!,\n\t\t\t\t} as IWorkspaceFolderCreationData;\n\t\t\t});\n\t\t}\n\n\t\treturn mainService.createUntitledWorkspace(folders);\n\t}\n}\n\nconst target = workspacesIpc as typeof workspacesIpc;\n// @ts-ignore TODO: don't ignore it.\ntarget.WorkspacesChannelClient = WorkspacesService;\n"]}]}