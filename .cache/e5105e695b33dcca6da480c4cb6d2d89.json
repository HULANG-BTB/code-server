{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/code/node/paths.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/code/node/paths.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/path\", \"vs/base/common/arrays\", \"vs/base/common/strings\", \"vs/base/common/extpath\", \"vs/base/common/platform\", \"vs/base/common/types\", \"vs/base/node/extfs\"], function (require, exports, path, arrays, strings, extpath, platform, types, extfs_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function validatePaths(args) {\n        // Track URLs if they're going to be used\n        if (args['open-url']) {\n            args._urls = args._;\n            args._ = [];\n        }\n        // Normalize paths and watch out for goto line mode\n        const paths = doValidatePaths(args._, args.goto);\n        // Update environment\n        args._ = paths;\n        args.diff = args.diff && paths.length === 2;\n        return args;\n    }\n    exports.validatePaths = validatePaths;\n    function doValidatePaths(args, gotoLineMode) {\n        const cwd = process.env['VSCODE_CWD'] || process.cwd();\n        const result = args.map(arg => {\n            let pathCandidate = String(arg);\n            let parsedPath = undefined;\n            if (gotoLineMode) {\n                parsedPath = parseLineAndColumnAware(pathCandidate);\n                pathCandidate = parsedPath.path;\n            }\n            if (pathCandidate) {\n                pathCandidate = preparePath(cwd, pathCandidate);\n            }\n            const sanitizedFilePath = extfs_1.sanitizeFilePath(pathCandidate, cwd);\n            const basename = path.basename(sanitizedFilePath);\n            if (basename /* can be empty if code is opened on root */ && !extpath.isValidBasename(basename)) {\n                return null; // do not allow invalid file names\n            }\n            if (gotoLineMode && parsedPath) {\n                parsedPath.path = sanitizedFilePath;\n                return toPath(parsedPath);\n            }\n            return sanitizedFilePath;\n        });\n        const caseInsensitive = platform.isWindows || platform.isMacintosh;\n        const distinct = arrays.distinct(result, e => e && caseInsensitive ? e.toLowerCase() : (e || ''));\n        return arrays.coalesce(distinct);\n    }\n    function preparePath(cwd, p) {\n        // Trim trailing quotes\n        if (platform.isWindows) {\n            p = strings.rtrim(p, '\"'); // https://github.com/Microsoft/vscode/issues/1498\n        }\n        // Trim whitespaces\n        p = strings.trim(strings.trim(p, ' '), '\\t');\n        if (platform.isWindows) {\n            // Resolve the path against cwd if it is relative\n            p = path.resolve(cwd, p);\n            // Trim trailing '.' chars on Windows to prevent invalid file names\n            p = strings.rtrim(p, '.');\n        }\n        return p;\n    }\n    function parseLineAndColumnAware(rawPath) {\n        const segments = rawPath.split(':'); // C:\\file.txt:<line>:<column>\n        let path = null;\n        let line = null;\n        let column = null;\n        segments.forEach(segment => {\n            const segmentAsNumber = Number(segment);\n            if (!types.isNumber(segmentAsNumber)) {\n                path = !!path ? [path, segment].join(':') : segment; // a colon can well be part of a path (e.g. C:\\...)\n            }\n            else if (line === null) {\n                line = segmentAsNumber;\n            }\n            else if (column === null) {\n                column = segmentAsNumber;\n            }\n        });\n        if (!path) {\n            throw new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`');\n        }\n        return {\n            path: path,\n            line: line !== null ? line : undefined,\n            column: column !== null ? column : line !== null ? 1 : undefined // if we have a line, make sure column is also set\n        };\n    }\n    exports.parseLineAndColumnAware = parseLineAndColumnAware;\n    function toPath(p) {\n        const segments = [p.path];\n        if (types.isNumber(p.line)) {\n            segments.push(String(p.line));\n        }\n        if (types.isNumber(p.column)) {\n            segments.push(String(p.column));\n        }\n        return segments.join(':');\n    }\n});\n",null]}