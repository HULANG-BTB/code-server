{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/workbench.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/workbench.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar os = require(\"os\");\nvar logger_1 = require(\"@coder/logger\");\nvar client_1 = require(\"./client\");\nrequire(\"./fill/platform\");\nrequire(\"./fill/dom\");\nrequire(\"./fill/codeEditor\");\nrequire(\"./fill/environmentService\");\nrequire(\"./fill/labels\");\nrequire(\"./fill/menuRegistry\");\nrequire(\"./fill/mouseEvent\");\nrequire(\"./fill/storageDatabase\");\nrequire(\"./fill/vscodeTextmate\");\nrequire(\"./fill/windowsService\");\nrequire(\"./fill/workbenchRegistry\");\nrequire(\"./fill/workspacesService\");\nvar paths = require(\"./fill/paths\");\nvar paste_1 = require(\"./fill/paste\");\nvar explorerModel_1 = require(\"vs/workbench/contrib/files/common/explorerModel\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar uri_1 = require(\"vs/base/common/uri\");\n/**\n * Initializes VS Code and provides a way to call into general client\n * functionality.\n */\nvar Workbench = /** @class */ (function () {\n    function Workbench() {\n        this.retry = client_1.client.retry;\n        this.windowId = parseInt(new Date().toISOString().replace(/[-:.TZ]/g, \"\"), 10);\n    }\n    /**\n     * Handle a drop event on the file explorer.\n     */\n    Workbench.prototype.handleExternalDrop = function (target, originalEvent) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, client_1.client.upload.uploadDropped(originalEvent, (target instanceof explorerModel_1.ExplorerItem ? target : target.roots[0]).resource)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Handle a drop event on the editor.\n     */\n    Workbench.prototype.handleDrop = function (event, resolveTargetGroup, afterDrop, targetIndex) {\n        var _this = this;\n        client_1.client.upload.uploadDropped(event, uri_1.URI.file(paths.getWorkingDirectory())).then(function (paths) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var uris, editors, targetGroup;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        uris = paths.map(function (p) { return uri_1.URI.file(p); });\n                        if (!uris.length) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.serviceCollection.get(windows_1.IWindowsService).addRecentlyOpened(uris)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        editors = uris.map(function (uri) { return ({\n                            resource: uri,\n                            options: {\n                                pinned: true,\n                                index: targetIndex,\n                            },\n                        }); });\n                        targetGroup = resolveTargetGroup();\n                        return [4 /*yield*/, this.serviceCollection.get(editorService_1.IEditorService).openEditors(editors, targetGroup)];\n                    case 3:\n                        _a.sent();\n                        afterDrop(targetGroup);\n                        return [2 /*return*/];\n                }\n            });\n        }); }).catch(function (error) {\n            logger_1.logger.error(error.message);\n        });\n    };\n    Object.defineProperty(Workbench.prototype, \"clipboardContextKey\", {\n        /**\n         * Use to toggle the paste option inside editors based on the native clipboard.\n         */\n        get: function () {\n            if (!this._clipboardContextKey) {\n                throw new Error(\"Trying to access clipboard context key before it has been set\");\n            }\n            return this._clipboardContextKey;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workbench.prototype, \"clipboardText\", {\n        get: function () {\n            return client_1.client.clipboard.readText();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workbench.prototype, \"pasteAction\", {\n        /**\n         * Create a paste action for use in text inputs.\n         */\n        get: function () {\n            return new paste_1.PasteAction();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workbench.prototype, \"workspace\", {\n        get: function () {\n            var ws = window.localStorage.getItem(\"workspace\");\n            try {\n                return JSON.parse(ws);\n            }\n            catch (ex) {\n                return undefined;\n            }\n        },\n        set: function (ws) {\n            if (typeof ws === \"undefined\") {\n                window.localStorage.removeItem(\"workspace\");\n            }\n            else {\n                window.localStorage.setItem(\"workspace\", JSON.stringify(ws));\n            }\n            location.reload();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Workbench.prototype, \"serviceCollection\", {\n        get: function () {\n            if (!this._serviceCollection) {\n                throw new Error(\"Trying to access service collection before it has been set\");\n            }\n            return this._serviceCollection;\n        },\n        set: function (collection) {\n            var _this = this;\n            this._serviceCollection = collection;\n            var contextKeys = this.serviceCollection.get(contextkey_1.IContextKeyService);\n            var bounded = this.clipboardContextKey.bindTo(contextKeys);\n            client_1.client.clipboard.onPermissionChange(function (enabled) {\n                bounded.set(enabled);\n            });\n            client_1.client.clipboard.initialize();\n            client_1.client.progressService = {\n                start: function (title, task, onCancel) {\n                    var lastProgress = 0;\n                    return _this.serviceCollection.get(progress_1.IProgressService2).withProgress({\n                        location: progress_1.ProgressLocation.Notification,\n                        title: title,\n                        cancellable: true,\n                    }, function (progress) {\n                        return task({\n                            report: function (p) {\n                                progress.report({ increment: p - lastProgress });\n                                lastProgress = p;\n                            },\n                        });\n                    }, function () {\n                        onCancel();\n                    });\n                },\n            };\n            client_1.client.notificationService = {\n                error: function (error) { return _this.serviceCollection.get(notification_1.INotificationService).error(error); },\n                prompt: function (severity, message, buttons, onCancel) {\n                    var handle = _this.serviceCollection.get(notification_1.INotificationService).prompt(severity, message, buttons, { onCancel: onCancel });\n                    return {\n                        close: function () { return handle.close(); },\n                        updateMessage: function (message) { return handle.updateMessage(message); },\n                        updateButtons: function (buttons) { return handle.updateActions({\n                            primary: buttons.map(function (button) { return ({\n                                id: \"\",\n                                label: button.label,\n                                tooltip: \"\",\n                                class: undefined,\n                                enabled: true,\n                                checked: false,\n                                radio: false,\n                                dispose: function () { return undefined; },\n                                run: function () { return Promise.resolve(button.run()); },\n                            }); }),\n                        }); },\n                    };\n                },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start VS Code.\n     */\n    Workbench.prototype.initialize = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var workspace, main, config, wid, ex_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._clipboardContextKey = new contextkey_1.RawContextKey(\"nativeClipboard\", client_1.client.clipboard.isEnabled);\n                        workspace = this.workspace || uri_1.URI.file(paths.getWorkingDirectory());\n                        // If we try to import this above, workbench will be undefined due to\n                        // circular imports.\n                        require(\"vs/workbench/workbench.main\");\n                        main = require(\"vs/workbench/electron-browser/main\").main;\n                        config = {\n                            machineId: \"1\",\n                            windowId: this.windowId,\n                            logLevel: log_1.LogLevel.Info,\n                            mainPid: 1,\n                            appRoot: paths.getDefaultUserDataPath(),\n                            execPath: os.tmpdir(),\n                            userEnv: {},\n                            nodeCachedDataDir: os.tmpdir(),\n                            perfEntries: [],\n                            _: [],\n                        };\n                        if (workspace.configPath) {\n                            wid = Object.assign({}, workspace);\n                            if (!uri_1.URI.isUri(wid.configPath)) {\n                                // Ensure that the configPath is a valid URI.\n                                wid.configPath = uri_1.URI.file(wid.configPath);\n                            }\n                            config.workspace = wid;\n                        }\n                        else {\n                            config.folderUri = workspace;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, main(config)];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        ex_1 = _a.sent();\n                        if (ex_1.toString().indexOf(\"UriError\") !== -1 || ex_1.toString().indexOf(\"backupPath\") !== -1) {\n                            /**\n                             * Resolves the error of the workspace identifier being invalid.\n                             */\n                            // tslint:disable-next-line:no-console\n                            console.error(ex_1);\n                            this.workspace = undefined;\n                            location.reload();\n                            return [2 /*return*/];\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return Workbench;\n}());\nexports.Workbench = Workbench;\nexports.workbench = new Workbench();\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/workbench.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/workbench.ts"],"names":[],"mappings":"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","sourcesContent":["import * as os from \"os\";\nimport { IProgress, INotificationHandle } from \"@coder/ide\";\nimport { logger } from \"@coder/logger\";\nimport { client } from \"./client\";\n\nimport \"./fill/platform\";\nimport \"./fill/dom\";\nimport \"./fill/codeEditor\";\nimport \"./fill/environmentService\";\nimport \"./fill/labels\";\nimport \"./fill/menuRegistry\";\nimport \"./fill/mouseEvent\";\nimport \"./fill/storageDatabase\";\nimport \"./fill/vscodeTextmate\";\nimport \"./fill/windowsService\";\nimport \"./fill/workbenchRegistry\";\nimport \"./fill/workspacesService\";\nimport * as paths from \"./fill/paths\";\nimport { PasteAction } from \"./fill/paste\";\n\nimport { ExplorerItem, ExplorerModel } from \"vs/workbench/contrib/files/common/explorerModel\";\nimport { IEditorGroup } from \"vs/workbench/services/editor/common/editorGroupsService\";\nimport { IEditorService, IResourceEditor } from \"vs/workbench/services/editor/common/editorService\";\nimport { INotificationService } from \"vs/platform/notification/common/notification\";\nimport { IProgressService2, ProgressLocation } from \"vs/platform/progress/common/progress\";\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from \"vs/platform/workspaces/common/workspaces\";\nimport { IWindowsService, IWindowConfiguration } from \"vs/platform/windows/common/windows\";\nimport { LogLevel } from \"vs/platform/log/common/log\";\nimport { RawContextKey, IContextKeyService } from \"vs/platform/contextkey/common/contextkey\";\nimport { ServiceCollection } from \"vs/platform/instantiation/common/serviceCollection\";\nimport { URI } from \"vs/base/common/uri\";\n\n/**\n * Initializes VS Code and provides a way to call into general client\n * functionality.\n */\nexport class Workbench {\n\tpublic readonly retry = client.retry;\n\n\tprivate readonly windowId = parseInt(new Date().toISOString().replace(/[-:.TZ]/g, \"\"), 10);\n\tprivate _serviceCollection: ServiceCollection | undefined;\n\tprivate _clipboardContextKey: RawContextKey<boolean> | undefined;\n\n\t/**\n\t * Handle a drop event on the file explorer.\n\t */\n\tpublic async handleExternalDrop(target: ExplorerItem | ExplorerModel, originalEvent: DragEvent): Promise<void> {\n\t\tawait client.upload.uploadDropped(\n\t\t\toriginalEvent,\n\t\t\t(target instanceof ExplorerItem ? target : target.roots[0]).resource,\n\t\t);\n\t}\n\n\t/**\n\t * Handle a drop event on the editor.\n\t */\n\tpublic handleDrop(event: DragEvent, resolveTargetGroup: () => IEditorGroup, afterDrop: (targetGroup: IEditorGroup) => void, targetIndex?: number): void {\n\t\tclient.upload.uploadDropped(event, URI.file(paths.getWorkingDirectory())).then(async (paths) => {\n\t\t\tconst uris = paths.map((p) => URI.file(p));\n\t\t\tif (uris.length) {\n\t\t\t\tawait (this.serviceCollection.get(IWindowsService) as IWindowsService).addRecentlyOpened(uris);\n\t\t\t}\n\n\t\t\tconst editors: IResourceEditor[] = uris.map(uri => ({\n\t\t\t\tresource: uri,\n\t\t\t\toptions: {\n\t\t\t\t\tpinned: true,\n\t\t\t\t\tindex: targetIndex,\n\t\t\t\t},\n\t\t\t}));\n\n\t\t\tconst targetGroup = resolveTargetGroup();\n\t\t\tawait (this.serviceCollection.get(IEditorService) as IEditorService).openEditors(editors, targetGroup);\n\t\t\tafterDrop(targetGroup);\n\t\t}).catch((error) => {\n\t\t\tlogger.error(error.message);\n\t\t});\n\t}\n\n\t/**\n\t * Use to toggle the paste option inside editors based on the native clipboard.\n\t */\n\tpublic get clipboardContextKey(): RawContextKey<boolean> {\n\t\tif (!this._clipboardContextKey) {\n\t\t\tthrow new Error(\"Trying to access clipboard context key before it has been set\");\n\t\t}\n\n\t\treturn this._clipboardContextKey;\n\t}\n\n\tpublic get clipboardText(): Promise<string> {\n\t\treturn client.clipboard.readText();\n\t}\n\n\t/**\n\t * Create a paste action for use in text inputs.\n\t */\n\tpublic get pasteAction(): PasteAction {\n\t\treturn new PasteAction();\n\t}\n\n\tpublic set workspace(ws: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined) {\n\t\tif (typeof ws === \"undefined\") {\n\t\t\twindow.localStorage.removeItem(\"workspace\");\n\t\t} else {\n\t\t\twindow.localStorage.setItem(\"workspace\", JSON.stringify(ws));\n\t\t}\n\n\t\tlocation.reload();\n\t}\n\n\tpublic get workspace(): undefined | IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier {\n\t\tconst ws = window.localStorage.getItem(\"workspace\");\n\t\ttry {\n\t\t\treturn JSON.parse(ws!);\n\t\t} catch (ex) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic get serviceCollection(): ServiceCollection {\n\t\tif (!this._serviceCollection) {\n\t\t\tthrow new Error(\"Trying to access service collection before it has been set\");\n\t\t}\n\n\t\treturn this._serviceCollection;\n\t}\n\n\tpublic set serviceCollection(collection: ServiceCollection) {\n\t\tthis._serviceCollection = collection;\n\n\t\tconst contextKeys = this.serviceCollection.get(IContextKeyService) as IContextKeyService;\n\t\tconst bounded = this.clipboardContextKey.bindTo(contextKeys);\n\t\tclient.clipboard.onPermissionChange((enabled) => {\n\t\t\tbounded.set(enabled);\n\t\t});\n\t\tclient.clipboard.initialize();\n\n\t\tclient.progressService = {\n\t\t\tstart: <T>(title: string, task: (progress: IProgress) => Promise<T>, onCancel: () => void): Promise<T> => {\n\t\t\t\tlet lastProgress = 0;\n\n\t\t\t\treturn (this.serviceCollection.get(IProgressService2) as IProgressService2).withProgress({\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcancellable: true,\n\t\t\t\t}, (progress) => {\n\t\t\t\t\treturn task({\n\t\t\t\t\t\treport: (p): void => {\n\t\t\t\t\t\t\tprogress.report({ increment: p - lastProgress });\n\t\t\t\t\t\t\tlastProgress = p;\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}, () => {\n\t\t\t\t\tonCancel();\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\n\t\tclient.notificationService = {\n\t\t\terror: (error: Error): void => (this.serviceCollection.get(INotificationService) as INotificationService).error(error),\n\t\t\tprompt: (severity, message, buttons, onCancel): INotificationHandle => {\n\t\t\t\tconst handle = (this.serviceCollection.get(INotificationService) as INotificationService).prompt(\n\t\t\t\t\tseverity, message, buttons, { onCancel },\n\t\t\t\t);\n\n\t\t\t\treturn {\n\t\t\t\t\tclose: (): void => handle.close(),\n\t\t\t\t\tupdateMessage: (message): void => handle.updateMessage(message),\n\t\t\t\t\tupdateButtons: (buttons): void => handle.updateActions({\n\t\t\t\t\t\tprimary: buttons.map((button) => ({\n\t\t\t\t\t\t\tid: \"\",\n\t\t\t\t\t\t\tlabel: button.label,\n\t\t\t\t\t\t\ttooltip: \"\",\n\t\t\t\t\t\t\tclass: undefined,\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tchecked: false,\n\t\t\t\t\t\t\tradio: false,\n\t\t\t\t\t\t\tdispose: (): void => undefined,\n\t\t\t\t\t\t\trun: (): Promise<void> => Promise.resolve(button.run()),\n\t\t\t\t\t\t})),\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Start VS Code.\n\t */\n\tpublic async initialize(): Promise<void> {\n\t\tthis._clipboardContextKey = new RawContextKey(\"nativeClipboard\", client.clipboard.isEnabled);\n\n\t\tconst workspace = this.workspace || URI.file(paths.getWorkingDirectory());\n\t\t// If we try to import this above, workbench will be undefined due to\n\t\t// circular imports.\n\t\trequire(\"vs/workbench/workbench.main\");\n\t\tconst { main } = require(\"vs/workbench/electron-browser/main\");\n\t\tconst config: IWindowConfiguration = {\n\t\t\tmachineId: \"1\",\n\t\t\twindowId: this.windowId,\n\t\t\tlogLevel: LogLevel.Info,\n\t\t\tmainPid: 1,\n\t\t\tappRoot: paths.getDefaultUserDataPath(),\n\t\t\texecPath: os.tmpdir(),\n\t\t\tuserEnv: {},\n\t\t\tnodeCachedDataDir: os.tmpdir(),\n\t\t\tperfEntries: [],\n\t\t\t_: [],\n\t\t};\n\t\tif ((workspace as IWorkspaceIdentifier).configPath) {\n\t\t\t// tslint:disable-next-line:no-any\n\t\t\tlet wid: IWorkspaceIdentifier = (<any>Object).assign({}, workspace);\n\t\t\tif (!URI.isUri(wid.configPath)) {\n\t\t\t\t// Ensure that the configPath is a valid URI.\n\t\t\t\twid.configPath = URI.file(wid.configPath);\n\t\t\t}\n\t\t\tconfig.workspace = wid;\n\t\t} else {\n\t\t\tconfig.folderUri = workspace as URI;\n\t\t}\n\t\ttry {\n\t\t\tawait main(config);\n\t\t} catch (ex) {\n\t\t\tif (ex.toString().indexOf(\"UriError\") !== -1 || ex.toString().indexOf(\"backupPath\") !== -1) {\n\t\t\t\t/**\n\t\t\t\t * Resolves the error of the workspace identifier being invalid.\n\t\t\t\t */\n\t\t\t\t// tslint:disable-next-line:no-console\n\t\t\t\tconsole.error(ex);\n\t\t\t\tthis.workspace = undefined;\n\t\t\t\tlocation.reload();\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const workbench = new Workbench();\n"]}]}