{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsStatus.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsStatus.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar notifications_1 = require(\"vs/workbench/common/notifications\");\nvar statusbar_1 = require(\"vs/platform/statusbar/common/statusbar\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar notificationsCommands_1 = require(\"vs/workbench/browser/parts/notifications/notificationsCommands\");\nvar nls_1 = require(\"vs/nls\");\nvar NotificationsStatus = /** @class */ (function (_super) {\n    tslib_1.__extends(NotificationsStatus, _super);\n    function NotificationsStatus(model, statusbarService) {\n        var _this = _super.call(this) || this;\n        _this.model = model;\n        _this.statusbarService = statusbarService;\n        _this._counter = new Set();\n        _this.updateNotificationsStatusItem();\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(NotificationsStatus.prototype, \"count\", {\n        get: function () {\n            return this._counter.size;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NotificationsStatus.prototype.update = function (isCenterVisible) {\n        if (this.isNotificationsCenterVisible !== isCenterVisible) {\n            this.isNotificationsCenterVisible = isCenterVisible;\n            // Showing the notification center resets the counter to 0\n            this._counter.clear();\n            this.updateNotificationsStatusItem();\n        }\n    };\n    NotificationsStatus.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.model.onDidNotificationChange(function (e) { return _this.onDidNotificationChange(e); }));\n    };\n    NotificationsStatus.prototype.onDidNotificationChange = function (e) {\n        if (this.isNotificationsCenterVisible) {\n            return; // no change if notification center is visible\n        }\n        // Notification got Added\n        if (e.kind === notifications_1.NotificationChangeType.ADD) {\n            this._counter.add(e.item);\n        }\n        // Notification got Removed\n        else if (e.kind === notifications_1.NotificationChangeType.REMOVE) {\n            this._counter.delete(e.item);\n        }\n        this.updateNotificationsStatusItem();\n    };\n    NotificationsStatus.prototype.updateNotificationsStatusItem = function () {\n        // Dispose old first\n        if (this.statusItem) {\n            this.statusItem.dispose();\n        }\n        // Create new\n        this.statusItem = this.statusbarService.addEntry({\n            text: this.count === 0 ? '$(bell)' : \"$(bell) \" + this.count,\n            command: this.isNotificationsCenterVisible ? notificationsCommands_1.HIDE_NOTIFICATIONS_CENTER : notificationsCommands_1.SHOW_NOTIFICATIONS_CENTER,\n            tooltip: this.getTooltip(),\n            showBeak: this.isNotificationsCenterVisible\n        }, statusbar_1.StatusbarAlignment.RIGHT, -1000 /* towards the far end of the right hand side */);\n    };\n    NotificationsStatus.prototype.getTooltip = function () {\n        if (this.isNotificationsCenterVisible) {\n            return nls_1.localize('hideNotifications', \"Hide Notifications\");\n        }\n        if (this.model.notifications.length === 0) {\n            return nls_1.localize('zeroNotifications', \"No Notifications\");\n        }\n        if (this.count === 0) {\n            return nls_1.localize('noNotifications', \"No New Notifications\");\n        }\n        if (this.count === 1) {\n            return nls_1.localize('oneNotification', \"1 New Notification\");\n        }\n        return nls_1.localize('notifications', \"{0} New Notifications\", this.count);\n    };\n    NotificationsStatus.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.statusItem) {\n            this.statusItem.dispose();\n        }\n    };\n    NotificationsStatus = tslib_1.__decorate([\n        tslib_1.__param(1, statusbar_1.IStatusbarService)\n    ], NotificationsStatus);\n    return NotificationsStatus;\n}(lifecycle_1.Disposable));\nexports.NotificationsStatus = NotificationsStatus;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsStatus.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/notifications/notificationsStatus.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,mEAAiJ;AACjJ,oEAA+F;AAC/F,sDAAmE;AACnE,wGAAsI;AACtI,8BAAkC;AAElC;IAAyC,+CAAU;IAKlD,6BACS,KAA0B,EACE,gBAAmC;QAFxE,YAIC,iBAAO,SAOP;QAVQ,WAAK,GAAL,KAAK,CAAqB;QACE,sBAAgB,GAAhB,gBAAgB,CAAmB;QAIvE,KAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAyB,CAAC;QAEjD,KAAI,CAAC,6BAA6B,EAAE,CAAC;QAErC,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IAED,sBAAY,sCAAK;aAAjB;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QAC3B,CAAC;;;OAAA;IAED,oCAAM,GAAN,UAAO,eAAwB;QAC9B,IAAI,IAAI,CAAC,4BAA4B,KAAK,eAAe,EAAE;YAC1D,IAAI,CAAC,4BAA4B,GAAG,eAAe,CAAC;YAEpD,0DAA0D;YAC1D,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACtB,IAAI,CAAC,6BAA6B,EAAE,CAAC;SACrC;IACF,CAAC;IAEO,+CAAiB,GAAzB;QAAA,iBAEC;QADA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAA/B,CAA+B,CAAC,CAAC,CAAC;IAC1F,CAAC;IAEO,qDAAuB,GAA/B,UAAgC,CAA2B;QAC1D,IAAI,IAAI,CAAC,4BAA4B,EAAE;YACtC,OAAO,CAAC,8CAA8C;SACtD;QAED,yBAAyB;QACzB,IAAI,CAAC,CAAC,IAAI,KAAK,sCAAsB,CAAC,GAAG,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC1B;QAED,2BAA2B;aACtB,IAAI,CAAC,CAAC,IAAI,KAAK,sCAAsB,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,6BAA6B,EAAE,CAAC;IACtC,CAAC;IAEO,2DAA6B,GAArC;QAEC,oBAAoB;QACpB,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAC1B;QAED,aAAa;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC;YAChD,IAAI,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAW,IAAI,CAAC,KAAO;YAC5D,OAAO,EAAE,IAAI,CAAC,4BAA4B,CAAC,CAAC,CAAC,iDAAyB,CAAC,CAAC,CAAC,iDAAyB;YAClG,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAC1B,QAAQ,EAAE,IAAI,CAAC,4BAA4B;SAC3C,EAAE,8BAAkB,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;IACtF,CAAC;IAEO,wCAAU,GAAlB;QACC,IAAI,IAAI,CAAC,4BAA4B,EAAE;YACtC,OAAO,cAAQ,CAAC,mBAAmB,EAAE,oBAAoB,CAAC,CAAC;SAC3D;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1C,OAAO,cAAQ,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;SACzD;QAED,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACrB,OAAO,cAAQ,CAAC,iBAAiB,EAAE,sBAAsB,CAAC,CAAC;SAC3D;QAED,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;YACrB,OAAO,cAAQ,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,CAAC;SACzD;QAED,OAAO,cAAQ,CAAC,eAAe,EAAE,uBAAuB,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,CAAC;IAED,qCAAO,GAAP;QACC,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAC1B;IACF,CAAC;IAhGW,mBAAmB;QAO7B,mBAAA,6BAAiB,CAAA;OAPP,mBAAmB,CAiG/B;IAAD,0BAAC;CAAA,AAjGD,CAAyC,sBAAU,GAiGlD;AAjGY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, INotificationViewItem } from 'vs/workbench/common/notifications';\nimport { IStatusbarService, StatusbarAlignment } from 'vs/platform/statusbar/common/statusbar';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { HIDE_NOTIFICATIONS_CENTER, SHOW_NOTIFICATIONS_CENTER } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { localize } from 'vs/nls';\n\nexport class NotificationsStatus extends Disposable {\n\tprivate statusItem: IDisposable;\n\tprivate isNotificationsCenterVisible: boolean;\n\tprivate _counter: Set<INotificationViewItem>;\n\n\tconstructor(\n\t\tprivate model: INotificationsModel,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\n\t\tthis._counter = new Set<INotificationViewItem>();\n\n\t\tthis.updateNotificationsStatusItem();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate get count(): number {\n\t\treturn this._counter.size;\n\t}\n\n\tupdate(isCenterVisible: boolean): void {\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\n\t\t\t// Showing the notification center resets the counter to 0\n\t\t\tthis._counter.clear();\n\t\t\tthis.updateNotificationsStatusItem();\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidNotificationChange(e => this.onDidNotificationChange(e)));\n\t}\n\n\tprivate onDidNotificationChange(e: INotificationChangeEvent): void {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn; // no change if notification center is visible\n\t\t}\n\n\t\t// Notification got Added\n\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\tthis._counter.add(e.item);\n\t\t}\n\n\t\t// Notification got Removed\n\t\telse if (e.kind === NotificationChangeType.REMOVE) {\n\t\t\tthis._counter.delete(e.item);\n\t\t}\n\n\t\tthis.updateNotificationsStatusItem();\n\t}\n\n\tprivate updateNotificationsStatusItem(): void {\n\n\t\t// Dispose old first\n\t\tif (this.statusItem) {\n\t\t\tthis.statusItem.dispose();\n\t\t}\n\n\t\t// Create new\n\t\tthis.statusItem = this.statusbarService.addEntry({\n\t\t\ttext: this.count === 0 ? '$(bell)' : `$(bell) ${this.count}`,\n\t\t\tcommand: this.isNotificationsCenterVisible ? HIDE_NOTIFICATIONS_CENTER : SHOW_NOTIFICATIONS_CENTER,\n\t\t\ttooltip: this.getTooltip(),\n\t\t\tshowBeak: this.isNotificationsCenterVisible\n\t\t}, StatusbarAlignment.RIGHT, -1000 /* towards the far end of the right hand side */);\n\t}\n\n\tprivate getTooltip(): string {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn localize('hideNotifications', \"Hide Notifications\");\n\t\t}\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\treturn localize('zeroNotifications', \"No Notifications\");\n\t\t}\n\n\t\tif (this.count === 0) {\n\t\t\treturn localize('noNotifications', \"No New Notifications\");\n\t\t}\n\n\t\tif (this.count === 1) {\n\t\t\treturn localize('oneNotification', \"1 New Notification\");\n\t\t}\n\n\t\treturn localize('notifications', \"{0} New Notifications\", this.count);\n\t}\n\n\tdispose() {\n\t\tsuper.dispose();\n\n\t\tif (this.statusItem) {\n\t\t\tthis.statusItem.dispose();\n\t\t}\n\t}\n}"]}]}