{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/minimapCharRenderer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/minimapCharRenderer.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar event_1 = require(\"vs/base/common/event\");\nvar rgba_1 = require(\"vs/editor/common/core/rgba\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar MinimapTokensColorTracker = /** @class */ (function () {\n    function MinimapTokensColorTracker() {\n        var _this = this;\n        this._onDidChange = new event_1.Emitter();\n        this.onDidChange = this._onDidChange.event;\n        this._updateColorMap();\n        modes_1.TokenizationRegistry.onDidChange(function (e) {\n            if (e.changedColorMap) {\n                _this._updateColorMap();\n            }\n        });\n    }\n    MinimapTokensColorTracker.getInstance = function () {\n        if (!this._INSTANCE) {\n            this._INSTANCE = new MinimapTokensColorTracker();\n        }\n        return this._INSTANCE;\n    };\n    MinimapTokensColorTracker.prototype._updateColorMap = function () {\n        var colorMap = modes_1.TokenizationRegistry.getColorMap();\n        if (!colorMap) {\n            this._colors = [rgba_1.RGBA8.Empty];\n            this._backgroundIsLight = true;\n            return;\n        }\n        this._colors = [rgba_1.RGBA8.Empty];\n        for (var colorId = 1; colorId < colorMap.length; colorId++) {\n            var source = colorMap[colorId].rgba;\n            // Use a VM friendly data-type\n            this._colors[colorId] = new rgba_1.RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n        }\n        var backgroundLuminosity = colorMap[modes_1.ColorId.DefaultBackground].getRelativeLuminance();\n        this._backgroundIsLight = (backgroundLuminosity >= 0.5);\n        this._onDidChange.fire(undefined);\n    };\n    MinimapTokensColorTracker.prototype.getColor = function (colorId) {\n        if (colorId < 1 || colorId >= this._colors.length) {\n            // background color (basically invisible)\n            colorId = modes_1.ColorId.DefaultBackground;\n        }\n        return this._colors[colorId];\n    };\n    MinimapTokensColorTracker.prototype.backgroundIsLight = function () {\n        return this._backgroundIsLight;\n    };\n    MinimapTokensColorTracker._INSTANCE = null;\n    return MinimapTokensColorTracker;\n}());\nexports.MinimapTokensColorTracker = MinimapTokensColorTracker;\nvar Constants;\n(function (Constants) {\n    Constants[Constants[\"START_CH_CODE\"] = 32] = \"START_CH_CODE\";\n    Constants[Constants[\"END_CH_CODE\"] = 126] = \"END_CH_CODE\";\n    Constants[Constants[\"CHAR_COUNT\"] = 95] = \"CHAR_COUNT\";\n    Constants[Constants[\"SAMPLED_CHAR_HEIGHT\"] = 16] = \"SAMPLED_CHAR_HEIGHT\";\n    Constants[Constants[\"SAMPLED_CHAR_WIDTH\"] = 10] = \"SAMPLED_CHAR_WIDTH\";\n    Constants[Constants[\"SAMPLED_HALF_CHAR_WIDTH\"] = 5] = \"SAMPLED_HALF_CHAR_WIDTH\";\n    Constants[Constants[\"x2_CHAR_HEIGHT\"] = 4] = \"x2_CHAR_HEIGHT\";\n    Constants[Constants[\"x2_CHAR_WIDTH\"] = 2] = \"x2_CHAR_WIDTH\";\n    Constants[Constants[\"x1_CHAR_HEIGHT\"] = 2] = \"x1_CHAR_HEIGHT\";\n    Constants[Constants[\"x1_CHAR_WIDTH\"] = 1] = \"x1_CHAR_WIDTH\";\n    Constants[Constants[\"RGBA_CHANNELS_CNT\"] = 4] = \"RGBA_CHANNELS_CNT\";\n})(Constants = exports.Constants || (exports.Constants = {}));\nvar MinimapCharRenderer = /** @class */ (function () {\n    function MinimapCharRenderer(x2CharData, x1CharData) {\n        var x2ExpectedLen = Constants.x2_CHAR_HEIGHT * Constants.x2_CHAR_WIDTH * Constants.CHAR_COUNT;\n        if (x2CharData.length !== x2ExpectedLen) {\n            throw new Error('Invalid x2CharData');\n        }\n        var x1ExpectedLen = Constants.x1_CHAR_HEIGHT * Constants.x1_CHAR_WIDTH * Constants.CHAR_COUNT;\n        if (x1CharData.length !== x1ExpectedLen) {\n            throw new Error('Invalid x1CharData');\n        }\n        this.x2charData = x2CharData;\n        this.x1charData = x1CharData;\n        this.x2charDataLight = MinimapCharRenderer.soften(x2CharData, 12 / 15);\n        this.x1charDataLight = MinimapCharRenderer.soften(x1CharData, 50 / 60);\n    }\n    MinimapCharRenderer.soften = function (input, ratio) {\n        var result = new Uint8ClampedArray(input.length);\n        for (var i = 0, len = input.length; i < len; i++) {\n            result[i] = input[i] * ratio;\n        }\n        return result;\n    };\n    MinimapCharRenderer._getChIndex = function (chCode) {\n        chCode -= Constants.START_CH_CODE;\n        if (chCode < 0) {\n            chCode += Constants.CHAR_COUNT;\n        }\n        return (chCode % Constants.CHAR_COUNT);\n    };\n    MinimapCharRenderer.prototype.x2RenderChar = function (target, dx, dy, chCode, color, backgroundColor, useLighterFont) {\n        if (dx + Constants.x2_CHAR_WIDTH > target.width || dy + Constants.x2_CHAR_HEIGHT > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        var x2CharData = useLighterFont ? this.x2charDataLight : this.x2charData;\n        var chIndex = MinimapCharRenderer._getChIndex(chCode);\n        var outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n        var backgroundR = backgroundColor.r;\n        var backgroundG = backgroundColor.g;\n        var backgroundB = backgroundColor.b;\n        var deltaR = color.r - backgroundR;\n        var deltaG = color.g - backgroundG;\n        var deltaB = color.b - backgroundB;\n        var dest = target.data;\n        var sourceOffset = chIndex * Constants.x2_CHAR_HEIGHT * Constants.x2_CHAR_WIDTH;\n        var destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n        {\n            var c = x2CharData[sourceOffset] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n        {\n            var c = x2CharData[sourceOffset + 1] / 255;\n            dest[destOffset + 4] = backgroundR + deltaR * c;\n            dest[destOffset + 5] = backgroundG + deltaG * c;\n            dest[destOffset + 6] = backgroundB + deltaB * c;\n        }\n        destOffset += outWidth;\n        {\n            var c = x2CharData[sourceOffset + 2] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n        {\n            var c = x2CharData[sourceOffset + 3] / 255;\n            dest[destOffset + 4] = backgroundR + deltaR * c;\n            dest[destOffset + 5] = backgroundG + deltaG * c;\n            dest[destOffset + 6] = backgroundB + deltaB * c;\n        }\n        destOffset += outWidth;\n        {\n            var c = x2CharData[sourceOffset + 4] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n        {\n            var c = x2CharData[sourceOffset + 5] / 255;\n            dest[destOffset + 4] = backgroundR + deltaR * c;\n            dest[destOffset + 5] = backgroundG + deltaG * c;\n            dest[destOffset + 6] = backgroundB + deltaB * c;\n        }\n        destOffset += outWidth;\n        {\n            var c = x2CharData[sourceOffset + 6] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n        {\n            var c = x2CharData[sourceOffset + 7] / 255;\n            dest[destOffset + 4] = backgroundR + deltaR * c;\n            dest[destOffset + 5] = backgroundG + deltaG * c;\n            dest[destOffset + 6] = backgroundB + deltaB * c;\n        }\n    };\n    MinimapCharRenderer.prototype.x1RenderChar = function (target, dx, dy, chCode, color, backgroundColor, useLighterFont) {\n        if (dx + Constants.x1_CHAR_WIDTH > target.width || dy + Constants.x1_CHAR_HEIGHT > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        var x1CharData = useLighterFont ? this.x1charDataLight : this.x1charData;\n        var chIndex = MinimapCharRenderer._getChIndex(chCode);\n        var outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n        var backgroundR = backgroundColor.r;\n        var backgroundG = backgroundColor.g;\n        var backgroundB = backgroundColor.b;\n        var deltaR = color.r - backgroundR;\n        var deltaG = color.g - backgroundG;\n        var deltaB = color.b - backgroundB;\n        var dest = target.data;\n        var sourceOffset = chIndex * Constants.x1_CHAR_HEIGHT * Constants.x1_CHAR_WIDTH;\n        var destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n        {\n            var c = x1CharData[sourceOffset] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n        destOffset += outWidth;\n        {\n            var c = x1CharData[sourceOffset + 1] / 255;\n            dest[destOffset + 0] = backgroundR + deltaR * c;\n            dest[destOffset + 1] = backgroundG + deltaG * c;\n            dest[destOffset + 2] = backgroundB + deltaB * c;\n        }\n    };\n    MinimapCharRenderer.prototype.x2BlockRenderChar = function (target, dx, dy, color, backgroundColor, useLighterFont) {\n        if (dx + Constants.x2_CHAR_WIDTH > target.width || dy + Constants.x2_CHAR_HEIGHT > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        var outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n        var c = 0.5;\n        var backgroundR = backgroundColor.r;\n        var backgroundG = backgroundColor.g;\n        var backgroundB = backgroundColor.b;\n        var deltaR = color.r - backgroundR;\n        var deltaG = color.g - backgroundG;\n        var deltaB = color.b - backgroundB;\n        var colorR = backgroundR + deltaR * c;\n        var colorG = backgroundG + deltaG * c;\n        var colorB = backgroundB + deltaB * c;\n        var dest = target.data;\n        var destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n        {\n            dest[destOffset + 4] = colorR;\n            dest[destOffset + 5] = colorG;\n            dest[destOffset + 6] = colorB;\n        }\n        destOffset += outWidth;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n        {\n            dest[destOffset + 4] = colorR;\n            dest[destOffset + 5] = colorG;\n            dest[destOffset + 6] = colorB;\n        }\n        destOffset += outWidth;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n        {\n            dest[destOffset + 4] = colorR;\n            dest[destOffset + 5] = colorG;\n            dest[destOffset + 6] = colorB;\n        }\n        destOffset += outWidth;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n        {\n            dest[destOffset + 4] = colorR;\n            dest[destOffset + 5] = colorG;\n            dest[destOffset + 6] = colorB;\n        }\n    };\n    MinimapCharRenderer.prototype.x1BlockRenderChar = function (target, dx, dy, color, backgroundColor, useLighterFont) {\n        if (dx + Constants.x1_CHAR_WIDTH > target.width || dy + Constants.x1_CHAR_HEIGHT > target.height) {\n            console.warn('bad render request outside image data');\n            return;\n        }\n        var outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n        var c = 0.5;\n        var backgroundR = backgroundColor.r;\n        var backgroundG = backgroundColor.g;\n        var backgroundB = backgroundColor.b;\n        var deltaR = color.r - backgroundR;\n        var deltaG = color.g - backgroundG;\n        var deltaB = color.b - backgroundB;\n        var colorR = backgroundR + deltaR * c;\n        var colorG = backgroundG + deltaG * c;\n        var colorB = backgroundB + deltaB * c;\n        var dest = target.data;\n        var destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n        destOffset += outWidth;\n        {\n            dest[destOffset + 0] = colorR;\n            dest[destOffset + 1] = colorG;\n            dest[destOffset + 2] = colorB;\n        }\n    };\n    return MinimapCharRenderer;\n}());\nexports.MinimapCharRenderer = MinimapCharRenderer;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/minimapCharRenderer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/view/minimapCharRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { RGBA8 } from 'vs/editor/common/core/rgba';\nimport { ColorId, TokenizationRegistry } from 'vs/editor/common/modes';\n\nexport class MinimapTokensColorTracker {\n\tprivate static _INSTANCE: MinimapTokensColorTracker | null = null;\n\tpublic static getInstance(): MinimapTokensColorTracker {\n\t\tif (!this._INSTANCE) {\n\t\t\tthis._INSTANCE = new MinimapTokensColorTracker();\n\t\t}\n\t\treturn this._INSTANCE;\n\t}\n\n\tprivate _colors: RGBA8[];\n\tprivate _backgroundIsLight: boolean;\n\n\tprivate _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate constructor() {\n\t\tthis._updateColorMap();\n\t\tTokenizationRegistry.onDidChange((e) => {\n\t\t\tif (e.changedColorMap) {\n\t\t\t\tthis._updateColorMap();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _updateColorMap(): void {\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tif (!colorMap) {\n\t\t\tthis._colors = [RGBA8.Empty];\n\t\t\tthis._backgroundIsLight = true;\n\t\t\treturn;\n\t\t}\n\t\tthis._colors = [RGBA8.Empty];\n\t\tfor (let colorId = 1; colorId < colorMap.length; colorId++) {\n\t\t\tconst source = colorMap[colorId].rgba;\n\t\t\t// Use a VM friendly data-type\n\t\t\tthis._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\n\t\t}\n\t\tlet backgroundLuminosity = colorMap[ColorId.DefaultBackground].getRelativeLuminance();\n\t\tthis._backgroundIsLight = (backgroundLuminosity >= 0.5);\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tpublic getColor(colorId: ColorId): RGBA8 {\n\t\tif (colorId < 1 || colorId >= this._colors.length) {\n\t\t\t// background color (basically invisible)\n\t\t\tcolorId = ColorId.DefaultBackground;\n\t\t}\n\t\treturn this._colors[colorId];\n\t}\n\n\tpublic backgroundIsLight(): boolean {\n\t\treturn this._backgroundIsLight;\n\t}\n}\n\nexport const enum Constants {\n\tSTART_CH_CODE = 32, // Space\n\tEND_CH_CODE = 126, // Tilde (~)\n\tCHAR_COUNT = END_CH_CODE - START_CH_CODE + 1,\n\n\tSAMPLED_CHAR_HEIGHT = 16,\n\tSAMPLED_CHAR_WIDTH = 10,\n\tSAMPLED_HALF_CHAR_WIDTH = SAMPLED_CHAR_WIDTH / 2,\n\n\tx2_CHAR_HEIGHT = 4,\n\tx2_CHAR_WIDTH = 2,\n\n\tx1_CHAR_HEIGHT = 2,\n\tx1_CHAR_WIDTH = 1,\n\n\tRGBA_CHANNELS_CNT = 4,\n}\n\nexport class MinimapCharRenderer {\n\n\t_minimapCharRendererBrand: void;\n\n\tpublic readonly x2charData: Uint8ClampedArray;\n\tpublic readonly x1charData: Uint8ClampedArray;\n\n\tpublic readonly x2charDataLight: Uint8ClampedArray;\n\tpublic readonly x1charDataLight: Uint8ClampedArray;\n\n\tconstructor(x2CharData: Uint8ClampedArray, x1CharData: Uint8ClampedArray) {\n\t\tconst x2ExpectedLen = Constants.x2_CHAR_HEIGHT * Constants.x2_CHAR_WIDTH * Constants.CHAR_COUNT;\n\t\tif (x2CharData.length !== x2ExpectedLen) {\n\t\t\tthrow new Error('Invalid x2CharData');\n\t\t}\n\t\tconst x1ExpectedLen = Constants.x1_CHAR_HEIGHT * Constants.x1_CHAR_WIDTH * Constants.CHAR_COUNT;\n\t\tif (x1CharData.length !== x1ExpectedLen) {\n\t\t\tthrow new Error('Invalid x1CharData');\n\t\t}\n\t\tthis.x2charData = x2CharData;\n\t\tthis.x1charData = x1CharData;\n\n\t\tthis.x2charDataLight = MinimapCharRenderer.soften(x2CharData, 12 / 15);\n\t\tthis.x1charDataLight = MinimapCharRenderer.soften(x1CharData, 50 / 60);\n\t}\n\n\tprivate static soften(input: Uint8ClampedArray, ratio: number): Uint8ClampedArray {\n\t\tlet result = new Uint8ClampedArray(input.length);\n\t\tfor (let i = 0, len = input.length; i < len; i++) {\n\t\t\tresult[i] = input[i] * ratio;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _getChIndex(chCode: number): number {\n\t\tchCode -= Constants.START_CH_CODE;\n\t\tif (chCode < 0) {\n\t\t\tchCode += Constants.CHAR_COUNT;\n\t\t}\n\t\treturn (chCode % Constants.CHAR_COUNT);\n\t}\n\n\tpublic x2RenderChar(target: ImageData, dx: number, dy: number, chCode: number, color: RGBA8, backgroundColor: RGBA8, useLighterFont: boolean): void {\n\t\tif (dx + Constants.x2_CHAR_WIDTH > target.width || dy + Constants.x2_CHAR_HEIGHT > target.height) {\n\t\t\tconsole.warn('bad render request outside image data');\n\t\t\treturn;\n\t\t}\n\t\tconst x2CharData = useLighterFont ? this.x2charDataLight : this.x2charData;\n\t\tconst chIndex = MinimapCharRenderer._getChIndex(chCode);\n\n\t\tconst outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n\n\t\tconst backgroundR = backgroundColor.r;\n\t\tconst backgroundG = backgroundColor.g;\n\t\tconst backgroundB = backgroundColor.b;\n\n\t\tconst deltaR = color.r - backgroundR;\n\t\tconst deltaG = color.g - backgroundG;\n\t\tconst deltaB = color.b - backgroundB;\n\n\t\tconst dest = target.data;\n\t\tconst sourceOffset = chIndex * Constants.x2_CHAR_HEIGHT * Constants.x2_CHAR_WIDTH;\n\t\tlet destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 1] / 255;\n\t\t\tdest[destOffset + 4] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 5] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 6] = backgroundB + deltaB * c;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 2] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 3] / 255;\n\t\t\tdest[destOffset + 4] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 5] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 6] = backgroundB + deltaB * c;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 4] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 5] / 255;\n\t\t\tdest[destOffset + 4] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 5] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 6] = backgroundB + deltaB * c;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 6] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\t\t{\n\t\t\tconst c = x2CharData[sourceOffset + 7] / 255;\n\t\t\tdest[destOffset + 4] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 5] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 6] = backgroundB + deltaB * c;\n\t\t}\n\t}\n\n\tpublic x1RenderChar(target: ImageData, dx: number, dy: number, chCode: number, color: RGBA8, backgroundColor: RGBA8, useLighterFont: boolean): void {\n\t\tif (dx + Constants.x1_CHAR_WIDTH > target.width || dy + Constants.x1_CHAR_HEIGHT > target.height) {\n\t\t\tconsole.warn('bad render request outside image data');\n\t\t\treturn;\n\t\t}\n\t\tconst x1CharData = useLighterFont ? this.x1charDataLight : this.x1charData;\n\t\tconst chIndex = MinimapCharRenderer._getChIndex(chCode);\n\n\t\tconst outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n\n\t\tconst backgroundR = backgroundColor.r;\n\t\tconst backgroundG = backgroundColor.g;\n\t\tconst backgroundB = backgroundColor.b;\n\n\t\tconst deltaR = color.r - backgroundR;\n\t\tconst deltaG = color.g - backgroundG;\n\t\tconst deltaB = color.b - backgroundB;\n\n\t\tconst dest = target.data;\n\t\tconst sourceOffset = chIndex * Constants.x1_CHAR_HEIGHT * Constants.x1_CHAR_WIDTH;\n\t\tlet destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n\t\t{\n\t\t\tconst c = x1CharData[sourceOffset] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tconst c = x1CharData[sourceOffset + 1] / 255;\n\t\t\tdest[destOffset + 0] = backgroundR + deltaR * c;\n\t\t\tdest[destOffset + 1] = backgroundG + deltaG * c;\n\t\t\tdest[destOffset + 2] = backgroundB + deltaB * c;\n\t\t}\n\t}\n\n\tpublic x2BlockRenderChar(target: ImageData, dx: number, dy: number, color: RGBA8, backgroundColor: RGBA8, useLighterFont: boolean): void {\n\t\tif (dx + Constants.x2_CHAR_WIDTH > target.width || dy + Constants.x2_CHAR_HEIGHT > target.height) {\n\t\t\tconsole.warn('bad render request outside image data');\n\t\t\treturn;\n\t\t}\n\n\t\tconst outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n\n\t\tconst c = 0.5;\n\n\t\tconst backgroundR = backgroundColor.r;\n\t\tconst backgroundG = backgroundColor.g;\n\t\tconst backgroundB = backgroundColor.b;\n\n\t\tconst deltaR = color.r - backgroundR;\n\t\tconst deltaG = color.g - backgroundG;\n\t\tconst deltaB = color.b - backgroundB;\n\n\t\tconst colorR = backgroundR + deltaR * c;\n\t\tconst colorG = backgroundG + deltaG * c;\n\t\tconst colorB = backgroundB + deltaB * c;\n\n\t\tconst dest = target.data;\n\t\tlet destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\t\t{\n\t\t\tdest[destOffset + 4] = colorR;\n\t\t\tdest[destOffset + 5] = colorG;\n\t\t\tdest[destOffset + 6] = colorB;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\t\t{\n\t\t\tdest[destOffset + 4] = colorR;\n\t\t\tdest[destOffset + 5] = colorG;\n\t\t\tdest[destOffset + 6] = colorB;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\t\t{\n\t\t\tdest[destOffset + 4] = colorR;\n\t\t\tdest[destOffset + 5] = colorG;\n\t\t\tdest[destOffset + 6] = colorB;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\t\t{\n\t\t\tdest[destOffset + 4] = colorR;\n\t\t\tdest[destOffset + 5] = colorG;\n\t\t\tdest[destOffset + 6] = colorB;\n\t\t}\n\t}\n\n\tpublic x1BlockRenderChar(target: ImageData, dx: number, dy: number, color: RGBA8, backgroundColor: RGBA8, useLighterFont: boolean): void {\n\t\tif (dx + Constants.x1_CHAR_WIDTH > target.width || dy + Constants.x1_CHAR_HEIGHT > target.height) {\n\t\t\tconsole.warn('bad render request outside image data');\n\t\t\treturn;\n\t\t}\n\n\t\tconst outWidth = target.width * Constants.RGBA_CHANNELS_CNT;\n\n\t\tconst c = 0.5;\n\n\t\tconst backgroundR = backgroundColor.r;\n\t\tconst backgroundG = backgroundColor.g;\n\t\tconst backgroundB = backgroundColor.b;\n\n\t\tconst deltaR = color.r - backgroundR;\n\t\tconst deltaG = color.g - backgroundG;\n\t\tconst deltaB = color.b - backgroundB;\n\n\t\tconst colorR = backgroundR + deltaR * c;\n\t\tconst colorG = backgroundG + deltaG * c;\n\t\tconst colorB = backgroundB + deltaB * c;\n\n\t\tconst dest = target.data;\n\n\t\tlet destOffset = dy * outWidth + dx * Constants.RGBA_CHANNELS_CNT;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\n\t\tdestOffset += outWidth;\n\t\t{\n\t\t\tdest[destOffset + 0] = colorR;\n\t\t\tdest[destOffset + 1] = colorG;\n\t\t\tdest[destOffset + 2] = colorB;\n\t\t}\n\t}\n}\n"]}]}