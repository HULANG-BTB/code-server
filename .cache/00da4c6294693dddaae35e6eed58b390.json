{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/parts/ipc/node/ipc.electron.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Protocol {\n        constructor(sender, onMessage) {\n            this.sender = sender;\n            this.onMessage = onMessage;\n        }\n        send(message) {\n            try {\n                this.sender.send('ipc:message', message.buffer);\n            }\n            catch (e) {\n                // systems are going down\n            }\n        }\n        dispose() {\n            this.sender.send('ipc:disconnect', null);\n        }\n    }\n    exports.Protocol = Protocol;\n});\n",null]}