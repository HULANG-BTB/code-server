{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggest.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggest.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar async_1 = require(\"vs/base/common/async\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar modes = require(\"vs/editor/common/modes\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar filters_1 = require(\"vs/base/common/filters\");\nexports.Context = {\n    Visible: new contextkey_1.RawContextKey('suggestWidgetVisible', false),\n    MultipleSuggestions: new contextkey_1.RawContextKey('suggestWidgetMultipleSuggestions', false),\n    MakesTextEdit: new contextkey_1.RawContextKey('suggestionMakesTextEdit', true),\n    AcceptSuggestionsOnEnter: new contextkey_1.RawContextKey('acceptSuggestionOnEnter', true)\n};\nvar CompletionItem = /** @class */ (function () {\n    function CompletionItem(position, completion, container, provider, model) {\n        this.position = position;\n        this.completion = completion;\n        this.container = container;\n        this.provider = provider;\n        // sorting, filtering\n        this.score = filters_1.FuzzyScore.Default;\n        this.distance = 0;\n        // ensure lower-variants (perf)\n        this.labelLow = completion.label.toLowerCase();\n        this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n        this.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n        // create the suggestion resolver\n        var resolveCompletionItem = provider.resolveCompletionItem;\n        if (typeof resolveCompletionItem !== 'function') {\n            this.resolve = function () { return Promise.resolve(); };\n        }\n        else {\n            var cached_1;\n            this.resolve = function (token) {\n                if (!cached_1) {\n                    var isDone_1 = false;\n                    cached_1 = Promise.resolve(resolveCompletionItem.call(provider, model, position, completion, token)).then(function (value) {\n                        objects_1.assign(completion, value);\n                        isDone_1 = true;\n                    }, function (err) {\n                        if (errors_1.isPromiseCanceledError(err)) {\n                            // the IPC queue will reject the request with the\n                            // cancellation error -> reset cached\n                            cached_1 = undefined;\n                        }\n                    });\n                    token.onCancellationRequested(function () {\n                        if (!isDone_1) {\n                            // cancellation after the request has been\n                            // dispatched -> reset cache\n                            cached_1 = undefined;\n                        }\n                    });\n                }\n                return cached_1;\n            };\n        }\n    }\n    return CompletionItem;\n}());\nexports.CompletionItem = CompletionItem;\nvar SnippetSortOrder;\n(function (SnippetSortOrder) {\n    SnippetSortOrder[SnippetSortOrder[\"Top\"] = 0] = \"Top\";\n    SnippetSortOrder[SnippetSortOrder[\"Inline\"] = 1] = \"Inline\";\n    SnippetSortOrder[SnippetSortOrder[\"Bottom\"] = 2] = \"Bottom\";\n})(SnippetSortOrder = exports.SnippetSortOrder || (exports.SnippetSortOrder = {}));\nvar CompletionOptions = /** @class */ (function () {\n    function CompletionOptions(snippetSortOrder, kindFilter, providerFilter) {\n        if (snippetSortOrder === void 0) { snippetSortOrder = SnippetSortOrder.Bottom; }\n        if (kindFilter === void 0) { kindFilter = new Set(); }\n        if (providerFilter === void 0) { providerFilter = new Set(); }\n        this.snippetSortOrder = snippetSortOrder;\n        this.kindFilter = kindFilter;\n        this.providerFilter = providerFilter;\n    }\n    CompletionOptions.default = new CompletionOptions();\n    return CompletionOptions;\n}());\nexports.CompletionOptions = CompletionOptions;\nvar _snippetSuggestSupport;\nfunction getSnippetSuggestSupport() {\n    return _snippetSuggestSupport;\n}\nexports.getSnippetSuggestSupport = getSnippetSuggestSupport;\nfunction setSnippetSuggestSupport(support) {\n    var old = _snippetSuggestSupport;\n    _snippetSuggestSupport = support;\n    return old;\n}\nexports.setSnippetSuggestSupport = setSnippetSuggestSupport;\nfunction provideSuggestionItems(model, position, options, context, token) {\n    if (options === void 0) { options = CompletionOptions.default; }\n    if (context === void 0) { context = { triggerKind: modes.CompletionTriggerKind.Invoke }; }\n    if (token === void 0) { token = cancellation_1.CancellationToken.None; }\n    var allSuggestions = [];\n    var wordUntil = model.getWordUntilPosition(position);\n    var defaultRange = new range_1.Range(position.lineNumber, wordUntil.startColumn, position.lineNumber, wordUntil.endColumn);\n    position = position.clone();\n    // get provider groups, always add snippet suggestion provider\n    var supports = modes.CompletionProviderRegistry.orderedGroups(model);\n    // add snippets provider unless turned off\n    if (!options.kindFilter.has(modes.CompletionItemKind.Snippet) && _snippetSuggestSupport) {\n        supports.unshift([_snippetSuggestSupport]);\n    }\n    // add suggestions from contributed providers - providers are ordered in groups of\n    // equal score and once a group produces a result the process stops\n    var hasResult = false;\n    var factory = supports.map(function (supports) { return function () {\n        // for each support in the group ask for suggestions\n        return Promise.all(supports.map(function (provider) {\n            if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n                return undefined;\n            }\n            return Promise.resolve(provider.provideCompletionItems(model, position, context, token)).then(function (container) {\n                var len = allSuggestions.length;\n                if (container) {\n                    for (var _i = 0, _a = container.suggestions || []; _i < _a.length; _i++) {\n                        var suggestion = _a[_i];\n                        if (!options.kindFilter.has(suggestion.kind)) {\n                            // fill in default range when missing\n                            if (!suggestion.range) {\n                                suggestion.range = defaultRange;\n                            }\n                            allSuggestions.push(new CompletionItem(position, suggestion, container, provider, model));\n                        }\n                    }\n                }\n                if (len !== allSuggestions.length && provider !== _snippetSuggestSupport) {\n                    hasResult = true;\n                }\n            }, errors_1.onUnexpectedExternalError);\n        }));\n    }; });\n    var result = async_1.first(factory, function () {\n        // stop on result or cancellation\n        return hasResult || token.isCancellationRequested;\n    }).then(function () {\n        if (token.isCancellationRequested) {\n            return Promise.reject(errors_1.canceled());\n        }\n        return allSuggestions.sort(getSuggestionComparator(options.snippetSortOrder));\n    });\n    // result.then(items => {\n    // \tconsole.log(model.getWordUntilPosition(position), items.map(item => `${item.suggestion.label}, type=${item.suggestion.type}, incomplete?${item.container.incomplete}, overwriteBefore=${item.suggestion.overwriteBefore}`));\n    // \treturn items;\n    // }, err => {\n    // \tconsole.warn(model.getWordUntilPosition(position), err);\n    // });\n    return result;\n}\nexports.provideSuggestionItems = provideSuggestionItems;\nfunction defaultComparator(a, b) {\n    // check with 'sortText'\n    if (a.sortTextLow && b.sortTextLow) {\n        if (a.sortTextLow < b.sortTextLow) {\n            return -1;\n        }\n        else if (a.sortTextLow > b.sortTextLow) {\n            return 1;\n        }\n    }\n    // check with 'label'\n    if (a.completion.label < b.completion.label) {\n        return -1;\n    }\n    else if (a.completion.label > b.completion.label) {\n        return 1;\n    }\n    // check with 'type'\n    return a.completion.kind - b.completion.kind;\n}\nfunction snippetUpComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === modes.CompletionItemKind.Snippet) {\n            return -1;\n        }\n        else if (b.completion.kind === modes.CompletionItemKind.Snippet) {\n            return 1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nfunction snippetDownComparator(a, b) {\n    if (a.completion.kind !== b.completion.kind) {\n        if (a.completion.kind === modes.CompletionItemKind.Snippet) {\n            return 1;\n        }\n        else if (b.completion.kind === modes.CompletionItemKind.Snippet) {\n            return -1;\n        }\n    }\n    return defaultComparator(a, b);\n}\nvar _snippetComparators = new Map();\n_snippetComparators.set(SnippetSortOrder.Top, snippetUpComparator);\n_snippetComparators.set(SnippetSortOrder.Bottom, snippetDownComparator);\n_snippetComparators.set(SnippetSortOrder.Inline, defaultComparator);\nfunction getSuggestionComparator(snippetConfig) {\n    return _snippetComparators.get(snippetConfig);\n}\nexports.getSuggestionComparator = getSuggestionComparator;\neditorExtensions_1.registerDefaultLanguageCommand('_executeCompletionItemProvider', function (model, position, args) {\n    var result = {\n        incomplete: false,\n        suggestions: []\n    };\n    var resolving = [];\n    var maxItemsToResolve = args['maxItemsToResolve'] || 0;\n    return provideSuggestionItems(model, position).then(function (items) {\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n            var item = items_1[_i];\n            if (resolving.length < maxItemsToResolve) {\n                resolving.push(item.resolve(cancellation_1.CancellationToken.None));\n            }\n            result.incomplete = result.incomplete || item.container.incomplete;\n            result.suggestions.push(item.completion);\n        }\n    }).then(function () {\n        return Promise.all(resolving);\n    }).then(function () {\n        return result;\n    });\n});\nvar _provider = new /** @class */ (function () {\n    function class_1() {\n        this.onlyOnceSuggestions = [];\n    }\n    class_1.prototype.provideCompletionItems = function () {\n        var suggestions = this.onlyOnceSuggestions.slice(0);\n        var result = { suggestions: suggestions };\n        this.onlyOnceSuggestions.length = 0;\n        return result;\n    };\n    return class_1;\n}());\nmodes.CompletionProviderRegistry.register('*', _provider);\nfunction showSimpleSuggestions(editor, suggestions) {\n    setTimeout(function () {\n        var _a;\n        (_a = _provider.onlyOnceSuggestions).push.apply(_a, suggestions);\n        editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));\n    }, 0);\n}\nexports.showSimpleSuggestions = showSimpleSuggestions;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggest.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/suggest/suggest.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { first } from 'vs/base/common/async';\nimport { assign } from 'vs/base/common/objects';\nimport { onUnexpectedExternalError, canceled, isPromiseCanceledError } from 'vs/base/common/errors';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { registerDefaultLanguageCommand } from 'vs/editor/browser/editorExtensions';\nimport * as modes from 'vs/editor/common/modes';\nimport { Position, IPosition } from 'vs/editor/common/core/position';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { FuzzyScore } from 'vs/base/common/filters';\n\nexport const Context = {\n\tVisible: new RawContextKey<boolean>('suggestWidgetVisible', false),\n\tMultipleSuggestions: new RawContextKey<boolean>('suggestWidgetMultipleSuggestions', false),\n\tMakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true),\n\tAcceptSuggestionsOnEnter: new RawContextKey<boolean>('acceptSuggestionOnEnter', true)\n};\n\nexport class CompletionItem {\n\n\t_brand: 'ISuggestionItem';\n\n\treadonly resolve: (token: CancellationToken) => Promise<void>;\n\n\t// perf\n\treadonly labelLow: string;\n\treadonly sortTextLow?: string;\n\treadonly filterTextLow?: string;\n\n\t// sorting, filtering\n\tscore: FuzzyScore = FuzzyScore.Default;\n\tdistance: number = 0;\n\tidx?: number;\n\tword?: string;\n\n\tconstructor(\n\t\treadonly position: IPosition,\n\t\treadonly completion: modes.CompletionItem,\n\t\treadonly container: modes.CompletionList,\n\t\treadonly provider: modes.CompletionItemProvider,\n\t\tmodel: ITextModel\n\t) {\n\t\t// ensure lower-variants (perf)\n\t\tthis.labelLow = completion.label.toLowerCase();\n\t\tthis.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n\t\tthis.filterTextLow = completion.filterText && completion.filterText.toLowerCase();\n\n\t\t// create the suggestion resolver\n\t\tconst { resolveCompletionItem } = provider;\n\t\tif (typeof resolveCompletionItem !== 'function') {\n\t\t\tthis.resolve = () => Promise.resolve();\n\t\t} else {\n\t\t\tlet cached: Promise<void> | undefined;\n\t\t\tthis.resolve = (token) => {\n\t\t\t\tif (!cached) {\n\t\t\t\t\tlet isDone = false;\n\t\t\t\t\tcached = Promise.resolve(resolveCompletionItem.call(provider, model, position, completion, token)).then(value => {\n\t\t\t\t\t\tassign(completion, value);\n\t\t\t\t\t\tisDone = true;\n\t\t\t\t\t}, err => {\n\t\t\t\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\t\t\t\t// the IPC queue will reject the request with the\n\t\t\t\t\t\t\t// cancellation error -> reset cached\n\t\t\t\t\t\t\tcached = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\t\tif (!isDone) {\n\t\t\t\t\t\t\t// cancellation after the request has been\n\t\t\t\t\t\t\t// dispatched -> reset cache\n\t\t\t\t\t\t\tcached = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn cached;\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport const enum SnippetSortOrder {\n\tTop, Inline, Bottom\n}\n\nexport class CompletionOptions {\n\n\tstatic readonly default = new CompletionOptions();\n\n\tconstructor(\n\t\treadonly snippetSortOrder = SnippetSortOrder.Bottom,\n\t\treadonly kindFilter = new Set<modes.CompletionItemKind>(),\n\t\treadonly providerFilter = new Set<modes.CompletionItemProvider>(),\n\t) { }\n}\n\nlet _snippetSuggestSupport: modes.CompletionItemProvider;\n\nexport function getSnippetSuggestSupport(): modes.CompletionItemProvider {\n\treturn _snippetSuggestSupport;\n}\n\nexport function setSnippetSuggestSupport(support: modes.CompletionItemProvider): modes.CompletionItemProvider {\n\tconst old = _snippetSuggestSupport;\n\t_snippetSuggestSupport = support;\n\treturn old;\n}\n\nexport function provideSuggestionItems(\n\tmodel: ITextModel,\n\tposition: Position,\n\toptions: CompletionOptions = CompletionOptions.default,\n\tcontext: modes.CompletionContext = { triggerKind: modes.CompletionTriggerKind.Invoke },\n\ttoken: CancellationToken = CancellationToken.None\n): Promise<CompletionItem[]> {\n\n\tconst allSuggestions: CompletionItem[] = [];\n\tconst wordUntil = model.getWordUntilPosition(position);\n\tconst defaultRange = new Range(position.lineNumber, wordUntil.startColumn, position.lineNumber, wordUntil.endColumn);\n\n\tposition = position.clone();\n\n\t// get provider groups, always add snippet suggestion provider\n\tconst supports = modes.CompletionProviderRegistry.orderedGroups(model);\n\n\t// add snippets provider unless turned off\n\tif (!options.kindFilter.has(modes.CompletionItemKind.Snippet) && _snippetSuggestSupport) {\n\t\tsupports.unshift([_snippetSuggestSupport]);\n\t}\n\n\t// add suggestions from contributed providers - providers are ordered in groups of\n\t// equal score and once a group produces a result the process stops\n\tlet hasResult = false;\n\tconst factory = supports.map(supports => () => {\n\t\t// for each support in the group ask for suggestions\n\t\treturn Promise.all(supports.map(provider => {\n\n\t\t\tif (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn Promise.resolve(provider.provideCompletionItems(model, position, context, token)).then(container => {\n\n\t\t\t\tconst len = allSuggestions.length;\n\n\t\t\t\tif (container) {\n\t\t\t\t\tfor (let suggestion of container.suggestions || []) {\n\t\t\t\t\t\tif (!options.kindFilter.has(suggestion.kind)) {\n\n\t\t\t\t\t\t\t// fill in default range when missing\n\t\t\t\t\t\t\tif (!suggestion.range) {\n\t\t\t\t\t\t\t\tsuggestion.range = defaultRange;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tallSuggestions.push(new CompletionItem(position, suggestion, container, provider, model));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (len !== allSuggestions.length && provider !== _snippetSuggestSupport) {\n\t\t\t\t\thasResult = true;\n\t\t\t\t}\n\n\t\t\t}, onUnexpectedExternalError);\n\t\t}));\n\t});\n\n\tconst result = first(factory, () => {\n\t\t// stop on result or cancellation\n\t\treturn hasResult || token.isCancellationRequested;\n\t}).then(() => {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn Promise.reject<any>(canceled());\n\t\t}\n\t\treturn allSuggestions.sort(getSuggestionComparator(options.snippetSortOrder));\n\t});\n\n\t// result.then(items => {\n\t// \tconsole.log(model.getWordUntilPosition(position), items.map(item => `${item.suggestion.label}, type=${item.suggestion.type}, incomplete?${item.container.incomplete}, overwriteBefore=${item.suggestion.overwriteBefore}`));\n\t// \treturn items;\n\t// }, err => {\n\t// \tconsole.warn(model.getWordUntilPosition(position), err);\n\t// });\n\n\treturn result;\n}\n\n\nfunction defaultComparator(a: CompletionItem, b: CompletionItem): number {\n\t// check with 'sortText'\n\tif (a.sortTextLow && b.sortTextLow) {\n\t\tif (a.sortTextLow < b.sortTextLow) {\n\t\t\treturn -1;\n\t\t} else if (a.sortTextLow > b.sortTextLow) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t// check with 'label'\n\tif (a.completion.label < b.completion.label) {\n\t\treturn -1;\n\t} else if (a.completion.label > b.completion.label) {\n\t\treturn 1;\n\t}\n\t// check with 'type'\n\treturn a.completion.kind - b.completion.kind;\n}\n\nfunction snippetUpComparator(a: CompletionItem, b: CompletionItem): number {\n\tif (a.completion.kind !== b.completion.kind) {\n\t\tif (a.completion.kind === modes.CompletionItemKind.Snippet) {\n\t\t\treturn -1;\n\t\t} else if (b.completion.kind === modes.CompletionItemKind.Snippet) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn defaultComparator(a, b);\n}\n\nfunction snippetDownComparator(a: CompletionItem, b: CompletionItem): number {\n\tif (a.completion.kind !== b.completion.kind) {\n\t\tif (a.completion.kind === modes.CompletionItemKind.Snippet) {\n\t\t\treturn 1;\n\t\t} else if (b.completion.kind === modes.CompletionItemKind.Snippet) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn defaultComparator(a, b);\n}\n\ninterface Comparator<T> { (a: T, b: T): number; }\nconst _snippetComparators = new Map<SnippetSortOrder, Comparator<CompletionItem>>();\n_snippetComparators.set(SnippetSortOrder.Top, snippetUpComparator);\n_snippetComparators.set(SnippetSortOrder.Bottom, snippetDownComparator);\n_snippetComparators.set(SnippetSortOrder.Inline, defaultComparator);\n\nexport function getSuggestionComparator(snippetConfig: SnippetSortOrder): (a: CompletionItem, b: CompletionItem) => number {\n\treturn _snippetComparators.get(snippetConfig)!;\n}\n\nregisterDefaultLanguageCommand('_executeCompletionItemProvider', (model, position, args) => {\n\n\tconst result: modes.CompletionList = {\n\t\tincomplete: false,\n\t\tsuggestions: []\n\t};\n\n\tlet resolving: Promise<any>[] = [];\n\tlet maxItemsToResolve = args['maxItemsToResolve'] || 0;\n\n\treturn provideSuggestionItems(model, position).then(items => {\n\t\tfor (const item of items) {\n\t\t\tif (resolving.length < maxItemsToResolve) {\n\t\t\t\tresolving.push(item.resolve(CancellationToken.None));\n\t\t\t}\n\t\t\tresult.incomplete = result.incomplete || item.container.incomplete;\n\t\t\tresult.suggestions.push(item.completion);\n\t\t}\n\t}).then(() => {\n\t\treturn Promise.all(resolving);\n\t}).then(() => {\n\t\treturn result;\n\t});\n});\n\ninterface SuggestController extends IEditorContribution {\n\ttriggerSuggest(onlyFrom?: Set<modes.CompletionItemProvider>): void;\n}\n\nconst _provider = new class implements modes.CompletionItemProvider {\n\n\tonlyOnceSuggestions: modes.CompletionItem[] = [];\n\n\tprovideCompletionItems(): modes.CompletionList {\n\t\tlet suggestions = this.onlyOnceSuggestions.slice(0);\n\t\tlet result = { suggestions };\n\t\tthis.onlyOnceSuggestions.length = 0;\n\t\treturn result;\n\t}\n};\n\nmodes.CompletionProviderRegistry.register('*', _provider);\n\nexport function showSimpleSuggestions(editor: ICodeEditor, suggestions: modes.CompletionItem[]) {\n\tsetTimeout(() => {\n\t\t_provider.onlyOnceSuggestions.push(...suggestions);\n\t\teditor.getContribution<SuggestController>('editor.contrib.suggestController').triggerSuggest(new Set<modes.CompletionItemProvider>().add(_provider));\n\t}, 0);\n}\n"]}]}