{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerViewer.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerViewer.ts","mtime":1555846338040},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar glob = require(\"vs/base/common/glob\");\nvar list_1 = require(\"vs/base/browser/ui/list/list\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar tree_1 = require(\"vs/base/browser/ui/tree/tree\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar files_2 = require(\"vs/workbench/contrib/files/common/files\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar inputBox_1 = require(\"vs/base/browser/ui/inputbox/inputBox\");\nvar nls_1 = require(\"vs/nls\");\nvar styler_1 = require(\"vs/platform/theme/common/styler\");\nvar functional_1 = require(\"vs/base/common/functional\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar path = require(\"vs/base/common/path\");\nvar explorerModel_1 = require(\"vs/workbench/contrib/files/common/explorerModel\");\nvar comparers_1 = require(\"vs/base/common/comparers\");\nvar dnd_1 = require(\"vs/workbench/browser/dnd\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar dnd_2 = require(\"vs/base/browser/dnd\");\nvar network_1 = require(\"vs/base/common/network\");\nvar listView_1 = require(\"vs/base/browser/ui/list/listView\");\nvar browser_1 = require(\"vs/base/browser/browser\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar workspaceEditing_1 = require(\"vs/workbench/services/workspace/common/workspaceEditing\");\nvar async_1 = require(\"vs/base/common/async\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar fileActions_1 = require(\"vs/workbench/contrib/files/browser/fileActions\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar ExplorerDelegate = /** @class */ (function () {\n    function ExplorerDelegate() {\n    }\n    ExplorerDelegate.prototype.getHeight = function (element) {\n        return ExplorerDelegate.ITEM_HEIGHT;\n    };\n    ExplorerDelegate.prototype.getTemplateId = function (element) {\n        return FilesRenderer.ID;\n    };\n    ExplorerDelegate.ITEM_HEIGHT = 22;\n    return ExplorerDelegate;\n}());\nexports.ExplorerDelegate = ExplorerDelegate;\nvar ExplorerDataSource = /** @class */ (function () {\n    function ExplorerDataSource(progressService, notificationService, layoutService, fileService, explorerService, contextService) {\n        this.progressService = progressService;\n        this.notificationService = notificationService;\n        this.layoutService = layoutService;\n        this.fileService = fileService;\n        this.explorerService = explorerService;\n        this.contextService = contextService;\n    }\n    ExplorerDataSource.prototype.hasChildren = function (element) {\n        return Array.isArray(element) || element.isDirectory;\n    };\n    ExplorerDataSource.prototype.getChildren = function (element) {\n        var _this = this;\n        if (Array.isArray(element)) {\n            return Promise.resolve(element);\n        }\n        var promise = element.fetchChildren(this.fileService, this.explorerService).then(undefined, function (e) {\n            if (element instanceof explorerModel_1.ExplorerItem && element.isRoot) {\n                if (_this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                    // Single folder create a dummy explorer item to show error\n                    var placeholder = new explorerModel_1.ExplorerItem(element.resource, undefined, false);\n                    placeholder.isError = true;\n                    return [placeholder];\n                }\n            }\n            else {\n                // Do not show error for roots since we already use an explorer decoration to notify user\n                _this.notificationService.error(e);\n            }\n            return []; // we could not resolve any children because of an error\n        });\n        this.progressService.showWhile(promise, this.layoutService.isRestored() ? 800 : 3200 /* less ugly initial startup */);\n        return promise;\n    };\n    ExplorerDataSource = tslib_1.__decorate([\n        tslib_1.__param(0, progress_1.IProgressService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, files_1.IFileService),\n        tslib_1.__param(4, files_2.IExplorerService),\n        tslib_1.__param(5, workspace_1.IWorkspaceContextService)\n    ], ExplorerDataSource);\n    return ExplorerDataSource;\n}());\nexports.ExplorerDataSource = ExplorerDataSource;\nvar FilesRenderer = /** @class */ (function () {\n    function FilesRenderer(labels, updateWidth, contextViewService, themeService, configurationService, explorerService) {\n        var _this = this;\n        this.labels = labels;\n        this.updateWidth = updateWidth;\n        this.contextViewService = contextViewService;\n        this.themeService = themeService;\n        this.configurationService = configurationService;\n        this.explorerService = explorerService;\n        this.config = this.configurationService.getValue();\n        this.configListener = this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('explorer')) {\n                _this.config = _this.configurationService.getValue();\n            }\n        });\n    }\n    Object.defineProperty(FilesRenderer.prototype, \"templateId\", {\n        get: function () {\n            return FilesRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FilesRenderer.prototype.renderTemplate = function (container) {\n        var elementDisposable = lifecycle_1.Disposable.None;\n        var label = this.labels.create(container, { supportHighlights: true });\n        return { elementDisposable: elementDisposable, label: label, container: container };\n    };\n    FilesRenderer.prototype.renderElement = function (node, index, templateData) {\n        var _this = this;\n        templateData.elementDisposable.dispose();\n        var stat = node.element;\n        var editableData = this.explorerService.getEditableData(stat);\n        // File Label\n        if (!editableData) {\n            templateData.label.element.style.display = 'flex';\n            var extraClasses = ['explorer-item'];\n            if (this.explorerService.isCut(stat)) {\n                extraClasses.push('cut');\n            }\n            templateData.label.setFile(stat.resource, {\n                hidePath: true,\n                fileKind: stat.isRoot ? files_1.FileKind.ROOT_FOLDER : stat.isDirectory ? files_1.FileKind.FOLDER : files_1.FileKind.FILE,\n                extraClasses: extraClasses,\n                fileDecorations: this.config.explorer.decorations,\n                matches: filters_1.createMatches(node.filterData)\n            });\n            templateData.elementDisposable = templateData.label.onDidRender(function () {\n                _this.updateWidth(stat);\n            });\n        }\n        // Input Box\n        else {\n            templateData.label.element.style.display = 'none';\n            templateData.elementDisposable = this.renderInputBox(templateData.container, stat, editableData);\n        }\n    };\n    FilesRenderer.prototype.renderInputBox = function (container, stat, editableData) {\n        var _this = this;\n        // Use a file label only for the icon next to the input box\n        var label = this.labels.create(container);\n        var extraClasses = ['explorer-item', 'explorer-item-edited'];\n        var fileKind = stat.isRoot ? files_1.FileKind.ROOT_FOLDER : stat.isDirectory ? files_1.FileKind.FOLDER : files_1.FileKind.FILE;\n        var labelOptions = { hidePath: true, hideLabel: true, fileKind: fileKind, extraClasses: extraClasses };\n        var parent = stat.name ? resources_1.dirname(stat.resource) : stat.resource;\n        var value = stat.name || '';\n        label.setFile(resources_1.joinPath(parent, value || ' '), labelOptions); // Use icon for ' ' if name is empty.\n        // Input field for name\n        var inputBox = new inputBox_1.InputBox(label.element, this.contextViewService, {\n            validationOptions: {\n                validation: function (value) {\n                    var content = editableData.validationMessage(value);\n                    if (!content) {\n                        return null;\n                    }\n                    return {\n                        content: content,\n                        formatContent: true,\n                        type: inputBox_1.MessageType.ERROR\n                    };\n                }\n            },\n            ariaLabel: nls_1.localize('fileInputAriaLabel', \"Type file name. Press Enter to confirm or Escape to cancel.\")\n        });\n        var styler = styler_1.attachInputBoxStyler(inputBox, this.themeService);\n        inputBox.onDidChange(function (value) {\n            label.setFile(resources_1.joinPath(parent, value || ' '), labelOptions); // update label icon while typing!\n        });\n        var lastDot = value.lastIndexOf('.');\n        inputBox.value = value;\n        inputBox.focus();\n        inputBox.select({ start: 0, end: lastDot > 0 && !stat.isDirectory ? lastDot : value.length });\n        var done = functional_1.once(function (success) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var value;\n            return tslib_1.__generator(this, function (_a) {\n                label.element.style.display = 'none';\n                value = inputBox.value;\n                lifecycle_1.dispose(toDispose);\n                container.removeChild(label.element);\n                // Timeout: once done rendering only then re-render #70902\n                setTimeout(function () { return editableData.onFinish(value, success); }, 0);\n                return [2 /*return*/];\n            });\n        }); });\n        var ignoreDisposeAndBlur = true;\n        setTimeout(function () { return ignoreDisposeAndBlur = false; }, 100);\n        var blurDisposable = DOM.addDisposableListener(inputBox.inputElement, DOM.EventType.BLUR, function () {\n            if (!ignoreDisposeAndBlur) {\n                done(inputBox.isInputValid());\n            }\n        });\n        var toDispose = [\n            inputBox,\n            DOM.addStandardDisposableListener(inputBox.inputElement, DOM.EventType.KEY_DOWN, function (e) {\n                if (e.equals(keyCodes_1.KeyCode.Enter)) {\n                    if (inputBox.validate()) {\n                        done(true);\n                    }\n                }\n                else if (e.equals(keyCodes_1.KeyCode.Escape)) {\n                    done(false);\n                }\n            }),\n            blurDisposable,\n            label,\n            styler\n        ];\n        return lifecycle_1.toDisposable(function () {\n            if (!ignoreDisposeAndBlur) {\n                blurDisposable.dispose();\n                done(false);\n            }\n        });\n    };\n    FilesRenderer.prototype.disposeElement = function (element, index, templateData) {\n        templateData.elementDisposable.dispose();\n    };\n    FilesRenderer.prototype.disposeTemplate = function (templateData) {\n        templateData.elementDisposable.dispose();\n        templateData.label.dispose();\n    };\n    FilesRenderer.prototype.dispose = function () {\n        this.configListener.dispose();\n    };\n    FilesRenderer.ID = 'file';\n    FilesRenderer = tslib_1.__decorate([\n        tslib_1.__param(2, contextView_1.IContextViewService),\n        tslib_1.__param(3, themeService_1.IThemeService),\n        tslib_1.__param(4, configuration_1.IConfigurationService),\n        tslib_1.__param(5, files_2.IExplorerService)\n    ], FilesRenderer);\n    return FilesRenderer;\n}());\nexports.FilesRenderer = FilesRenderer;\nvar ExplorerAccessibilityProvider = /** @class */ (function () {\n    function ExplorerAccessibilityProvider() {\n    }\n    ExplorerAccessibilityProvider.prototype.getAriaLabel = function (element) {\n        return element.name;\n    };\n    return ExplorerAccessibilityProvider;\n}());\nexports.ExplorerAccessibilityProvider = ExplorerAccessibilityProvider;\nvar FilesFilter = /** @class */ (function () {\n    function FilesFilter(contextService, configurationService, explorerService) {\n        var _this = this;\n        this.contextService = contextService;\n        this.configurationService = configurationService;\n        this.explorerService = explorerService;\n        this.hiddenExpressionPerRoot = new Map();\n        this.workspaceFolderChangeListener = this.contextService.onDidChangeWorkspaceFolders(function () { return _this.updateConfiguration(); });\n    }\n    FilesFilter.prototype.updateConfiguration = function () {\n        var _this = this;\n        var needsRefresh = false;\n        this.contextService.getWorkspace().folders.forEach(function (folder) {\n            var configuration = _this.configurationService.getValue({ resource: folder.uri });\n            var excludesConfig = (configuration && configuration.files && configuration.files.exclude) || Object.create(null);\n            if (!needsRefresh) {\n                var cached = _this.hiddenExpressionPerRoot.get(folder.uri.toString());\n                needsRefresh = !cached || !objects_1.equals(cached.original, excludesConfig);\n            }\n            var excludesConfigCopy = objects_1.deepClone(excludesConfig); // do not keep the config, as it gets mutated under our hoods\n            _this.hiddenExpressionPerRoot.set(folder.uri.toString(), { original: excludesConfigCopy, parsed: glob.parse(excludesConfigCopy) });\n        });\n        return needsRefresh;\n    };\n    FilesFilter.prototype.filter = function (stat, parentVisibility) {\n        if (parentVisibility === tree_1.TreeVisibility.Hidden) {\n            return false;\n        }\n        if (this.explorerService.getEditableData(stat) || stat.isRoot) {\n            return true; // always visible\n        }\n        // Hide those that match Hidden Patterns\n        var cached = this.hiddenExpressionPerRoot.get(stat.root.resource.toString());\n        if (cached && cached.parsed(path.normalize(path.relative(stat.root.resource.path, stat.resource.path)), stat.name, function (name) { return !!(stat.parent && stat.parent.getChild(name)); })) {\n            // review (isidor): is path.normalize necessary? path.relative already returns an os path\n            return false; // hidden through pattern\n        }\n        return true;\n    };\n    FilesFilter.prototype.dispose = function () {\n        this.workspaceFolderChangeListener = lifecycle_1.dispose(this.workspaceFolderChangeListener);\n    };\n    FilesFilter = tslib_1.__decorate([\n        tslib_1.__param(0, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, files_2.IExplorerService)\n    ], FilesFilter);\n    return FilesFilter;\n}());\nexports.FilesFilter = FilesFilter;\n// // Explorer Sorter\nvar FileSorter = /** @class */ (function () {\n    function FileSorter(explorerService, contextService) {\n        this.explorerService = explorerService;\n        this.contextService = contextService;\n    }\n    FileSorter.prototype.compare = function (statA, statB) {\n        // Do not sort roots\n        if (statA.isRoot) {\n            if (statB.isRoot) {\n                var workspaceA = this.contextService.getWorkspaceFolder(statA.resource);\n                var workspaceB = this.contextService.getWorkspaceFolder(statB.resource);\n                return workspaceA && workspaceB ? (workspaceA.index - workspaceB.index) : -1;\n            }\n            return -1;\n        }\n        if (statB.isRoot) {\n            return 1;\n        }\n        var sortOrder = this.explorerService.sortOrder;\n        // Sort Directories\n        switch (sortOrder) {\n            case 'type':\n                if (statA.isDirectory && !statB.isDirectory) {\n                    return -1;\n                }\n                if (statB.isDirectory && !statA.isDirectory) {\n                    return 1;\n                }\n                if (statA.isDirectory && statB.isDirectory) {\n                    return comparers_1.compareFileNames(statA.name, statB.name);\n                }\n                break;\n            case 'filesFirst':\n                if (statA.isDirectory && !statB.isDirectory) {\n                    return 1;\n                }\n                if (statB.isDirectory && !statA.isDirectory) {\n                    return -1;\n                }\n                break;\n            case 'mixed':\n                break; // not sorting when \"mixed\" is on\n            default: /* 'default', 'modified' */\n                if (statA.isDirectory && !statB.isDirectory) {\n                    return -1;\n                }\n                if (statB.isDirectory && !statA.isDirectory) {\n                    return 1;\n                }\n                break;\n        }\n        // Sort Files\n        switch (sortOrder) {\n            case 'type':\n                return comparers_1.compareFileExtensions(statA.name, statB.name);\n            case 'modified':\n                if (statA.mtime !== statB.mtime) {\n                    return (statA.mtime && statB.mtime && statA.mtime < statB.mtime) ? 1 : -1;\n                }\n                return comparers_1.compareFileNames(statA.name, statB.name);\n            default: /* 'default', 'mixed', 'filesFirst' */\n                return comparers_1.compareFileNames(statA.name, statB.name);\n        }\n    };\n    FileSorter = tslib_1.__decorate([\n        tslib_1.__param(0, files_2.IExplorerService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService)\n    ], FileSorter);\n    return FileSorter;\n}());\nexports.FileSorter = FileSorter;\nvar FileDragAndDrop = /** @class */ (function () {\n    function FileDragAndDrop(notificationService, explorerService, editorService, dialogService, contextService, fileService, configurationService, instantiationService, textFileService, windowService, workspaceEditingService) {\n        var _this = this;\n        this.notificationService = notificationService;\n        this.explorerService = explorerService;\n        this.editorService = editorService;\n        this.dialogService = dialogService;\n        this.contextService = contextService;\n        this.fileService = fileService;\n        this.configurationService = configurationService;\n        this.instantiationService = instantiationService;\n        this.textFileService = textFileService;\n        this.windowService = windowService;\n        this.workspaceEditingService = workspaceEditingService;\n        this.toDispose = [];\n        var updateDropEnablement = function () {\n            _this.dropEnabled = _this.configurationService.getValue('explorer.enableDragAndDrop');\n        };\n        updateDropEnablement();\n        this.toDispose.push(this.configurationService.onDidChangeConfiguration(function (e) { return updateDropEnablement(); }));\n    }\n    FileDragAndDrop.prototype.onDragOver = function (data, target, targetIndex, originalEvent) {\n        if (!this.dropEnabled) {\n            return false;\n        }\n        var isCopy = originalEvent && ((originalEvent.ctrlKey && !browser_1.isMacintosh) || (originalEvent.altKey && browser_1.isMacintosh));\n        var fromDesktop = data instanceof listView_1.DesktopDragAndDropData;\n        var effect = (fromDesktop || isCopy) ? list_1.ListDragOverEffect.Copy : list_1.ListDragOverEffect.Move;\n        // Desktop DND\n        if (fromDesktop && originalEvent.dataTransfer) {\n            var types = originalEvent.dataTransfer.types;\n            var typesArray = [];\n            for (var i = 0; i < types.length; i++) {\n                typesArray.push(types[i].toLowerCase()); // somehow the types are lowercase\n            }\n            if (typesArray.indexOf(dnd_2.DataTransfers.FILES.toLowerCase()) === -1 && typesArray.indexOf(dnd_1.CodeDataTransfers.FILES.toLowerCase()) === -1) {\n                return false;\n            }\n        }\n        // Other-Tree DND\n        else if (data instanceof listView_1.ExternalElementsDragAndDropData) {\n            return false;\n        }\n        // In-Explorer DND\n        else {\n            var items = data.elements;\n            if (!target) {\n                // Droping onto the empty area. Do not accept if items dragged are already\n                // children of the root unless we are copying the file\n                if (!isCopy && items.every(function (i) { return !!i.parent && i.parent.isRoot; })) {\n                    return false;\n                }\n                return { accept: true, bubble: tree_1.TreeDragOverBubble.Down, effect: effect, autoExpand: false };\n            }\n            if (!Array.isArray(items)) {\n                return false;\n            }\n            if (items.some(function (source) {\n                if (source.isRoot && target instanceof explorerModel_1.ExplorerItem && !target.isRoot) {\n                    return true; // Root folder can not be moved to a non root file stat.\n                }\n                if (source.resource.toString() === target.resource.toString()) {\n                    return true; // Can not move anything onto itself\n                }\n                if (source.isRoot && target instanceof explorerModel_1.ExplorerItem && target.isRoot) {\n                    // Disable moving workspace roots in one another\n                    return false;\n                }\n                if (!isCopy && resources_1.dirname(source.resource).toString() === target.resource.toString()) {\n                    return true; // Can not move a file to the same parent unless we copy\n                }\n                if (resources_1.isEqualOrParent(target.resource, source.resource, !browser_1.isLinux /* ignorecase */)) {\n                    return true; // Can not move a parent folder into one of its children\n                }\n                return false;\n            })) {\n                return false;\n            }\n        }\n        // All (target = model)\n        if (!target) {\n            return { accept: true, bubble: tree_1.TreeDragOverBubble.Down, effect: effect };\n        }\n        // All (target = file/folder)\n        else {\n            if (target.isDirectory) {\n                if (target.isReadonly) {\n                    return false;\n                }\n                return { accept: true, bubble: tree_1.TreeDragOverBubble.Down, effect: effect, autoExpand: true };\n            }\n            if (this.contextService.getWorkspace().folders.every(function (folder) { return folder.uri.toString() !== target.resource.toString(); })) {\n                return { accept: true, bubble: tree_1.TreeDragOverBubble.Up, effect: effect };\n            }\n        }\n        return false;\n    };\n    FileDragAndDrop.prototype.getDragURI = function (element) {\n        if (this.explorerService.isEditable(element)) {\n            return null;\n        }\n        return element.resource.toString();\n    };\n    FileDragAndDrop.prototype.getDragLabel = function (elements) {\n        if (elements.length > 1) {\n            return String(elements.length);\n        }\n        return elements[0].name;\n    };\n    FileDragAndDrop.prototype.onDragStart = function (data, originalEvent) {\n        var items = data.elements;\n        if (items && items.length && originalEvent.dataTransfer) {\n            // Apply some datatransfer types to allow for dragging the element outside of the application\n            this.instantiationService.invokeFunction(dnd_1.fillResourceDataTransfers, items, originalEvent);\n            // The only custom data transfer we set from the explorer is a file transfer\n            // to be able to DND between multiple code file explorers across windows\n            var fileResources = items.filter(function (s) { return !s.isDirectory && s.resource.scheme === network_1.Schemas.file; }).map(function (r) { return r.resource.fsPath; });\n            if (fileResources.length) {\n                originalEvent.dataTransfer.setData(dnd_1.CodeDataTransfers.FILES, JSON.stringify(fileResources));\n            }\n        }\n    };\n    FileDragAndDrop.prototype.drop = function (data, target, targetIndex, originalEvent) {\n        // Find parent to add to\n        if (!target) {\n            target = this.explorerService.roots[this.explorerService.roots.length - 1];\n        }\n        if (!target.isDirectory && target.parent) {\n            target = target.parent;\n        }\n        if (target.isReadonly) {\n            return;\n        }\n        // Desktop DND (Import file)\n        if (data instanceof listView_1.DesktopDragAndDropData) {\n            this.handleExternalDrop(data, target, originalEvent);\n        }\n        // In-Explorer DND (Move/Copy file)\n        else {\n            this.handleExplorerDrop(data, target, originalEvent);\n        }\n    };\n    FileDragAndDrop.prototype.handleExternalDrop = function (data, target, originalEvent) {\n        var _this = this;\n        return require('vs/../../../../packages/vscode/src/workbench').workbench.handleExternalDrop(target, originalEvent);\n        var droppedResources = dnd_1.extractResources(originalEvent, true);\n        // Check for dropped external files to be folders\n        return this.fileService.resolveFiles(droppedResources).then(function (result) {\n            // Pass focus to window\n            _this.windowService.focusWindow();\n            // Handle folders by adding to workspace if we are in workspace context\n            var folders = result.filter(function (r) { return r.success && r.stat && r.stat.isDirectory; }).map(function (result) { return ({ uri: result.stat.resource }); });\n            if (folders.length > 0) {\n                // If we are in no-workspace context, ask for confirmation to create a workspace\n                var confirmedPromise = Promise.resolve({ confirmed: true });\n                if (_this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.WORKSPACE) {\n                    confirmedPromise = _this.dialogService.confirm({\n                        message: folders.length > 1 ? nls_1.localize('dropFolders', \"Do you want to add the folders to the workspace?\") : nls_1.localize('dropFolder', \"Do you want to add the folder to the workspace?\"),\n                        type: 'question',\n                        primaryButton: folders.length > 1 ? nls_1.localize('addFolders', \"&&Add Folders\") : nls_1.localize('addFolder', \"&&Add Folder\")\n                    });\n                }\n                return confirmedPromise.then(function (res) {\n                    if (res.confirmed) {\n                        return _this.workspaceEditingService.addFolders(folders);\n                    }\n                    return undefined;\n                });\n            }\n            // Handle dropped files (only support FileStat as target)\n            else if (target instanceof explorerModel_1.ExplorerItem) {\n                return _this.addResources(target, droppedResources.map(function (res) { return res.resource; }));\n            }\n            return undefined;\n        });\n    };\n    FileDragAndDrop.prototype.addResources = function (target, resources) {\n        var _this = this;\n        if (resources && resources.length > 0) {\n            // Resolve target to check for name collisions and ask user\n            return this.fileService.resolveFile(target.resource).then(function (targetStat) {\n                // Check for name collisions\n                var targetNames = new Set();\n                if (targetStat.children) {\n                    targetStat.children.forEach(function (child) {\n                        targetNames.add(browser_1.isLinux ? child.name : child.name.toLowerCase());\n                    });\n                }\n                var overwritePromise = Promise.resolve({ confirmed: true });\n                if (resources.some(function (resource) {\n                    return targetNames.has(!resources_1.hasToIgnoreCase(resource) ? resources_1.basename(resource) : resources_1.basename(resource).toLowerCase());\n                })) {\n                    var confirm = {\n                        message: nls_1.localize('confirmOverwrite', \"A file or folder with the same name already exists in the destination folder. Do you want to replace it?\"),\n                        detail: nls_1.localize('irreversible', \"This action is irreversible!\"),\n                        primaryButton: nls_1.localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n                        type: 'warning'\n                    };\n                    overwritePromise = _this.dialogService.confirm(confirm);\n                }\n                return overwritePromise.then(function (res) {\n                    if (!res.confirmed) {\n                        return [];\n                    }\n                    // Run add in sequence\n                    var addPromisesFactory = [];\n                    resources.forEach(function (resource) {\n                        addPromisesFactory.push(function () {\n                            var sourceFile = resource;\n                            var targetFile = resources_1.joinPath(target.resource, resources_1.basename(sourceFile));\n                            // if the target exists and is dirty, make sure to revert it. otherwise the dirty contents\n                            // of the target file would replace the contents of the added file. since we already\n                            // confirmed the overwrite before, this is OK.\n                            var revertPromise = Promise.resolve(null);\n                            if (_this.textFileService.isDirty(targetFile)) {\n                                revertPromise = _this.textFileService.revertAll([targetFile], { soft: true });\n                            }\n                            return revertPromise.then(function () {\n                                var copyTarget = resources_1.joinPath(target.resource, resources_1.basename(sourceFile));\n                                return _this.fileService.copyFile(sourceFile, copyTarget, true).then(function (stat) {\n                                    // if we only add one file, just open it directly\n                                    if (resources.length === 1) {\n                                        _this.editorService.openEditor({ resource: stat.resource, options: { pinned: true } });\n                                    }\n                                });\n                            });\n                        });\n                    });\n                    return async_1.sequence(addPromisesFactory);\n                });\n            });\n        }\n        return Promise.resolve(undefined);\n    };\n    FileDragAndDrop.prototype.handleExplorerDrop = function (data, target, originalEvent) {\n        var _this = this;\n        var elementsData = data.elements;\n        var items = resources_1.distinctParents(elementsData, function (s) { return s.resource; });\n        var isCopy = (originalEvent.ctrlKey && !browser_1.isMacintosh) || (originalEvent.altKey && browser_1.isMacintosh);\n        var confirmPromise;\n        // Handle confirm setting\n        var confirmDragAndDrop = !isCopy && this.configurationService.getValue(FileDragAndDrop.CONFIRM_DND_SETTING_KEY);\n        if (confirmDragAndDrop) {\n            confirmPromise = this.dialogService.confirm({\n                message: items.length > 1 && items.every(function (s) { return s.isRoot; }) ? nls_1.localize('confirmRootsMove', \"Are you sure you want to change the order of multiple root folders in your workspace?\")\n                    : items.length > 1 ? dialogs_1.getConfirmMessage(nls_1.localize('confirmMultiMove', \"Are you sure you want to move the following {0} files?\", items.length), items.map(function (s) { return s.resource; }))\n                        : items[0].isRoot ? nls_1.localize('confirmRootMove', \"Are you sure you want to change the order of root folder '{0}' in your workspace?\", items[0].name)\n                            : nls_1.localize('confirmMove', \"Are you sure you want to move '{0}'?\", items[0].name),\n                checkbox: {\n                    label: nls_1.localize('doNotAskAgain', \"Do not ask me again\")\n                },\n                type: 'question',\n                primaryButton: nls_1.localize({ key: 'moveButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Move\")\n            });\n        }\n        else {\n            confirmPromise = Promise.resolve({ confirmed: true });\n        }\n        return confirmPromise.then(function (res) {\n            // Check for confirmation checkbox\n            var updateConfirmSettingsPromise = Promise.resolve(undefined);\n            if (res.confirmed && res.checkboxChecked === true) {\n                updateConfirmSettingsPromise = _this.configurationService.updateValue(FileDragAndDrop.CONFIRM_DND_SETTING_KEY, false, configuration_1.ConfigurationTarget.USER);\n            }\n            return updateConfirmSettingsPromise.then(function () {\n                if (res.confirmed) {\n                    var rootDropPromise = _this.doHandleRootDrop(items.filter(function (s) { return s.isRoot; }), target);\n                    return Promise.all(items.filter(function (s) { return !s.isRoot; }).map(function (source) { return _this.doHandleExplorerDrop(source, target, isCopy); }).concat(rootDropPromise)).then(function () { return undefined; });\n                }\n                return Promise.resolve(undefined);\n            });\n        });\n    };\n    FileDragAndDrop.prototype.doHandleRootDrop = function (roots, target) {\n        if (roots.length === 0) {\n            return Promise.resolve(undefined);\n        }\n        var folders = this.contextService.getWorkspace().folders;\n        var targetIndex;\n        var workspaceCreationData = [];\n        var rootsToMove = [];\n        var _loop_1 = function (index) {\n            var data = {\n                uri: folders[index].uri,\n                name: folders[index].name\n            };\n            if (target instanceof explorerModel_1.ExplorerItem && folders[index].uri.toString() === target.resource.toString()) {\n                targetIndex = index;\n            }\n            if (roots.every(function (r) { return r.resource.toString() !== folders[index].uri.toString(); })) {\n                workspaceCreationData.push(data);\n            }\n            else {\n                rootsToMove.push(data);\n            }\n        };\n        for (var index = 0; index < folders.length; index++) {\n            _loop_1(index);\n        }\n        if (targetIndex === undefined) {\n            targetIndex = workspaceCreationData.length;\n        }\n        workspaceCreationData.splice.apply(workspaceCreationData, [targetIndex, 0].concat(rootsToMove));\n        return this.workspaceEditingService.updateFolders(0, workspaceCreationData.length, workspaceCreationData);\n    };\n    FileDragAndDrop.prototype.doHandleExplorerDrop = function (source, target, isCopy) {\n        var _this = this;\n        // Reuse duplicate action if user copies\n        if (isCopy) {\n            return this.fileService.copyFile(source.resource, fileActions_1.findValidPasteFileTarget(target, { resource: source.resource, isDirectory: source.isDirectory, allowOverwirte: false })).then(function (stat) {\n                if (!stat.isDirectory) {\n                    return _this.editorService.openEditor({ resource: stat.resource, options: { pinned: true } }).then(function () { return undefined; });\n                }\n                return undefined;\n            });\n        }\n        // Otherwise move\n        var targetResource = resources_1.joinPath(target.resource, source.name);\n        if (source.isReadonly) {\n            // Do not allow moving readonly items\n            return Promise.resolve();\n        }\n        return this.textFileService.move(source.resource, targetResource).then(undefined, function (error) {\n            // Conflict\n            if (error.fileOperationResult === files_1.FileOperationResult.FILE_MOVE_CONFLICT) {\n                var confirm = {\n                    message: nls_1.localize('confirmOverwriteMessage', \"'{0}' already exists in the destination folder. Do you want to replace it?\", source.name),\n                    detail: nls_1.localize('irreversible', \"This action is irreversible!\"),\n                    primaryButton: nls_1.localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n                    type: 'warning'\n                };\n                // Move with overwrite if the user confirms\n                return _this.dialogService.confirm(confirm).then(function (res) {\n                    if (res.confirmed) {\n                        return _this.textFileService.move(source.resource, targetResource, true /* overwrite */).then(undefined, function (error) { return _this.notificationService.error(error); });\n                    }\n                    return undefined;\n                });\n            }\n            // Any other error\n            else {\n                _this.notificationService.error(error);\n            }\n            return undefined;\n        });\n    };\n    FileDragAndDrop.CONFIRM_DND_SETTING_KEY = 'explorer.confirmDragAndDrop';\n    FileDragAndDrop = tslib_1.__decorate([\n        tslib_1.__param(0, notification_1.INotificationService),\n        tslib_1.__param(1, files_2.IExplorerService),\n        tslib_1.__param(2, editorService_1.IEditorService),\n        tslib_1.__param(3, dialogs_1.IDialogService),\n        tslib_1.__param(4, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(5, files_1.IFileService),\n        tslib_1.__param(6, configuration_1.IConfigurationService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, textfiles_1.ITextFileService),\n        tslib_1.__param(9, windows_1.IWindowService),\n        tslib_1.__param(10, workspaceEditing_1.IWorkspaceEditingService)\n    ], FileDragAndDrop);\n    return FileDragAndDrop;\n}());\nexports.FileDragAndDrop = FileDragAndDrop;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerViewer.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerViewer.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';\nimport * as DOM from 'vs/base/browser/dom';\nimport * as glob from 'vs/base/common/glob';\nimport { IListVirtualDelegate, ListDragOverEffect } from 'vs/base/browser/ui/list/list';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IFileService, FileKind, FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IDisposable, Disposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { IFileLabelOptions, IResourceLabel, ResourceLabels } from 'vs/workbench/browser/labels';\nimport { ITreeRenderer, ITreeNode, ITreeFilter, TreeVisibility, TreeFilterResult, IAsyncDataSource, ITreeSorter, ITreeDragAndDrop, ITreeDragOverReaction, TreeDragOverBubble } from 'vs/base/browser/ui/tree/tree';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfiguration, IExplorerService, IEditableData } from 'vs/workbench/contrib/files/common/files';\nimport { dirname, joinPath, isEqualOrParent, basename, hasToIgnoreCase, distinctParents } from 'vs/base/common/resources';\nimport { InputBox, MessageType } from 'vs/base/browser/ui/inputbox/inputBox';\nimport { localize } from 'vs/nls';\nimport { attachInputBoxStyler } from 'vs/platform/theme/common/styler';\nimport { once } from 'vs/base/common/functional';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { equals, deepClone } from 'vs/base/common/objects';\nimport * as path from 'vs/base/common/path';\nimport { ExplorerItem } from 'vs/workbench/contrib/files/common/explorerModel';\nimport { compareFileExtensions, compareFileNames } from 'vs/base/common/comparers';\nimport { fillResourceDataTransfers, CodeDataTransfers, extractResources } from 'vs/workbench/browser/dnd';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IDragAndDropData, DataTransfers } from 'vs/base/browser/dnd';\nimport { Schemas } from 'vs/base/common/network';\nimport { DesktopDragAndDropData, ExternalElementsDragAndDropData, ElementsDragAndDropData } from 'vs/base/browser/ui/list/listView';\nimport { isMacintosh, isLinux } from 'vs/base/browser/browser';\nimport { IDialogService, IConfirmationResult, IConfirmation, getConfirmMessage } from 'vs/platform/dialogs/common/dialogs';\nimport { ITextFileService, ITextFileOperationResult } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspace/common/workspaceEditing';\nimport { URI } from 'vs/base/common/uri';\nimport { ITask, sequence } from 'vs/base/common/async';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkspaceFolderCreationData } from 'vs/platform/workspaces/common/workspaces';\nimport { findValidPasteFileTarget } from 'vs/workbench/contrib/files/browser/fileActions';\nimport { FuzzyScore, createMatches } from 'vs/base/common/filters';\n\nexport class ExplorerDelegate implements IListVirtualDelegate<ExplorerItem> {\n\n\tprivate static readonly ITEM_HEIGHT = 22;\n\n\tgetHeight(element: ExplorerItem): number {\n\t\treturn ExplorerDelegate.ITEM_HEIGHT;\n\t}\n\n\tgetTemplateId(element: ExplorerItem): string {\n\t\treturn FilesRenderer.ID;\n\t}\n}\n\nexport class ExplorerDataSource implements IAsyncDataSource<ExplorerItem | ExplorerItem[], ExplorerItem> {\n\n\tconstructor(\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) { }\n\n\thasChildren(element: ExplorerItem | ExplorerItem[]): boolean {\n\t\treturn Array.isArray(element) || element.isDirectory;\n\t}\n\n\tgetChildren(element: ExplorerItem | ExplorerItem[]): Promise<ExplorerItem[]> {\n\t\tif (Array.isArray(element)) {\n\t\t\treturn Promise.resolve(element);\n\t\t}\n\n\t\tconst promise = element.fetchChildren(this.fileService, this.explorerService).then(undefined, e => {\n\n\t\t\tif (element instanceof ExplorerItem && element.isRoot) {\n\t\t\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t\t// Single folder create a dummy explorer item to show error\n\t\t\t\t\tconst placeholder = new ExplorerItem(element.resource, undefined, false);\n\t\t\t\t\tplaceholder.isError = true;\n\n\t\t\t\t\treturn [placeholder];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Do not show error for roots since we already use an explorer decoration to notify user\n\t\t\t\tthis.notificationService.error(e);\n\t\t\t}\n\n\t\t\treturn []; // we could not resolve any children because of an error\n\t\t});\n\n\t\tthis.progressService.showWhile(promise, this.layoutService.isRestored() ? 800 : 3200 /* less ugly initial startup */);\n\t\treturn promise;\n\t}\n}\n\nexport interface IFileTemplateData {\n\telementDisposable: IDisposable;\n\tlabel: IResourceLabel;\n\tcontainer: HTMLElement;\n}\n\nexport class FilesRenderer implements ITreeRenderer<ExplorerItem, FuzzyScore, IFileTemplateData>, IDisposable {\n\tstatic readonly ID = 'file';\n\n\tprivate config: IFilesConfiguration;\n\tprivate configListener: IDisposable;\n\n\tconstructor(\n\t\tprivate labels: ResourceLabels,\n\t\tprivate updateWidth: (stat: ExplorerItem) => void,\n\t\t@IContextViewService private readonly contextViewService: IContextViewService,\n\t\t@IThemeService private readonly themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService\n\t) {\n\t\tthis.config = this.configurationService.getValue<IFilesConfiguration>();\n\t\tthis.configListener = this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('explorer')) {\n\t\t\t\tthis.config = this.configurationService.getValue();\n\t\t\t}\n\t\t});\n\t}\n\n\tget templateId(): string {\n\t\treturn FilesRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IFileTemplateData {\n\t\tconst elementDisposable = Disposable.None;\n\t\tconst label = this.labels.create(container, { supportHighlights: true });\n\n\t\treturn { elementDisposable, label, container };\n\t}\n\n\trenderElement(node: ITreeNode<ExplorerItem, FuzzyScore>, index: number, templateData: IFileTemplateData): void {\n\t\ttemplateData.elementDisposable.dispose();\n\t\tconst stat = node.element;\n\t\tconst editableData = this.explorerService.getEditableData(stat);\n\n\t\t// File Label\n\t\tif (!editableData) {\n\t\t\ttemplateData.label.element.style.display = 'flex';\n\t\t\tconst extraClasses = ['explorer-item'];\n\t\t\tif (this.explorerService.isCut(stat)) {\n\t\t\t\textraClasses.push('cut');\n\t\t\t}\n\t\t\ttemplateData.label.setFile(stat.resource, {\n\t\t\t\thidePath: true,\n\t\t\t\tfileKind: stat.isRoot ? FileKind.ROOT_FOLDER : stat.isDirectory ? FileKind.FOLDER : FileKind.FILE,\n\t\t\t\textraClasses,\n\t\t\t\tfileDecorations: this.config.explorer.decorations,\n\t\t\t\tmatches: createMatches(node.filterData)\n\t\t\t});\n\n\t\t\ttemplateData.elementDisposable = templateData.label.onDidRender(() => {\n\t\t\t\tthis.updateWidth(stat);\n\t\t\t});\n\t\t}\n\n\t\t// Input Box\n\t\telse {\n\t\t\ttemplateData.label.element.style.display = 'none';\n\t\t\ttemplateData.elementDisposable = this.renderInputBox(templateData.container, stat, editableData);\n\t\t}\n\t}\n\n\tprivate renderInputBox(container: HTMLElement, stat: ExplorerItem, editableData: IEditableData): IDisposable {\n\n\t\t// Use a file label only for the icon next to the input box\n\t\tconst label = this.labels.create(container);\n\t\tconst extraClasses = ['explorer-item', 'explorer-item-edited'];\n\t\tconst fileKind = stat.isRoot ? FileKind.ROOT_FOLDER : stat.isDirectory ? FileKind.FOLDER : FileKind.FILE;\n\t\tconst labelOptions: IFileLabelOptions = { hidePath: true, hideLabel: true, fileKind, extraClasses };\n\n\t\tconst parent = stat.name ? dirname(stat.resource) : stat.resource;\n\t\tconst value = stat.name || '';\n\n\t\tlabel.setFile(joinPath(parent, value || ' '), labelOptions); // Use icon for ' ' if name is empty.\n\n\t\t// Input field for name\n\t\tconst inputBox = new InputBox(label.element, this.contextViewService, {\n\t\t\tvalidationOptions: {\n\t\t\t\tvalidation: (value) => {\n\t\t\t\t\tconst content = editableData.validationMessage(value);\n\t\t\t\t\tif (!content) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\tformatContent: true,\n\t\t\t\t\t\ttype: MessageType.ERROR\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\t\t\tariaLabel: localize('fileInputAriaLabel', \"Type file name. Press Enter to confirm or Escape to cancel.\")\n\t\t});\n\t\tconst styler = attachInputBoxStyler(inputBox, this.themeService);\n\n\t\tinputBox.onDidChange(value => {\n\t\t\tlabel.setFile(joinPath(parent, value || ' '), labelOptions); // update label icon while typing!\n\t\t});\n\n\t\tconst lastDot = value.lastIndexOf('.');\n\n\t\tinputBox.value = value;\n\t\tinputBox.focus();\n\t\tinputBox.select({ start: 0, end: lastDot > 0 && !stat.isDirectory ? lastDot : value.length });\n\n\t\tconst done = once(async (success: boolean) => {\n\t\t\tlabel.element.style.display = 'none';\n\t\t\tconst value = inputBox.value;\n\t\t\tdispose(toDispose);\n\t\t\tcontainer.removeChild(label.element);\n\t\t\t// Timeout: once done rendering only then re-render #70902\n\t\t\tsetTimeout(() => editableData.onFinish(value, success), 0);\n\t\t});\n\n\t\tlet ignoreDisposeAndBlur = true;\n\t\tsetTimeout(() => ignoreDisposeAndBlur = false, 100);\n\t\tconst blurDisposable = DOM.addDisposableListener(inputBox.inputElement, DOM.EventType.BLUR, () => {\n\t\t\tif (!ignoreDisposeAndBlur) {\n\t\t\t\tdone(inputBox.isInputValid());\n\t\t\t}\n\t\t});\n\n\t\tconst toDispose = [\n\t\t\tinputBox,\n\t\t\tDOM.addStandardDisposableListener(inputBox.inputElement, DOM.EventType.KEY_DOWN, (e: IKeyboardEvent) => {\n\t\t\t\tif (e.equals(KeyCode.Enter)) {\n\t\t\t\t\tif (inputBox.validate()) {\n\t\t\t\t\t\tdone(true);\n\t\t\t\t\t}\n\t\t\t\t} else if (e.equals(KeyCode.Escape)) {\n\t\t\t\t\tdone(false);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tblurDisposable,\n\t\t\tlabel,\n\t\t\tstyler\n\t\t];\n\n\t\treturn toDisposable(() => {\n\t\t\tif (!ignoreDisposeAndBlur) {\n\t\t\t\tblurDisposable.dispose();\n\t\t\t\tdone(false);\n\t\t\t}\n\t\t});\n\t}\n\n\tdisposeElement?(element: ITreeNode<ExplorerItem, FuzzyScore>, index: number, templateData: IFileTemplateData): void {\n\t\ttemplateData.elementDisposable.dispose();\n\t}\n\n\tdisposeTemplate(templateData: IFileTemplateData): void {\n\t\ttemplateData.elementDisposable.dispose();\n\t\ttemplateData.label.dispose();\n\t}\n\n\tdispose(): void {\n\t\tthis.configListener.dispose();\n\t}\n}\n\nexport class ExplorerAccessibilityProvider implements IAccessibilityProvider<ExplorerItem> {\n\tgetAriaLabel(element: ExplorerItem): string {\n\t\treturn element.name;\n\t}\n}\n\ninterface CachedParsedExpression {\n\toriginal: glob.IExpression;\n\tparsed: glob.ParsedExpression;\n}\n\nexport class FilesFilter implements ITreeFilter<ExplorerItem, FuzzyScore> {\n\tprivate hiddenExpressionPerRoot: Map<string, CachedParsedExpression>;\n\tprivate workspaceFolderChangeListener: IDisposable;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService\n\t) {\n\t\tthis.hiddenExpressionPerRoot = new Map<string, CachedParsedExpression>();\n\t\tthis.workspaceFolderChangeListener = this.contextService.onDidChangeWorkspaceFolders(() => this.updateConfiguration());\n\t}\n\n\tupdateConfiguration(): boolean {\n\t\tlet needsRefresh = false;\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tconst configuration = this.configurationService.getValue<IFilesConfiguration>({ resource: folder.uri });\n\t\t\tconst excludesConfig: glob.IExpression = (configuration && configuration.files && configuration.files.exclude) || Object.create(null);\n\n\t\t\tif (!needsRefresh) {\n\t\t\t\tconst cached = this.hiddenExpressionPerRoot.get(folder.uri.toString());\n\t\t\t\tneedsRefresh = !cached || !equals(cached.original, excludesConfig);\n\t\t\t}\n\n\t\t\tconst excludesConfigCopy = deepClone(excludesConfig); // do not keep the config, as it gets mutated under our hoods\n\n\t\t\tthis.hiddenExpressionPerRoot.set(folder.uri.toString(), { original: excludesConfigCopy, parsed: glob.parse(excludesConfigCopy) } as CachedParsedExpression);\n\t\t});\n\n\t\treturn needsRefresh;\n\t}\n\n\tfilter(stat: ExplorerItem, parentVisibility: TreeVisibility): TreeFilterResult<FuzzyScore> {\n\t\tif (parentVisibility === TreeVisibility.Hidden) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.explorerService.getEditableData(stat) || stat.isRoot) {\n\t\t\treturn true; // always visible\n\t\t}\n\n\t\t// Hide those that match Hidden Patterns\n\t\tconst cached = this.hiddenExpressionPerRoot.get(stat.root.resource.toString());\n\t\tif (cached && cached.parsed(path.normalize(path.relative(stat.root.resource.path, stat.resource.path)), stat.name, name => !!(stat.parent && stat.parent.getChild(name)))) {\n\t\t\t// review (isidor): is path.normalize necessary? path.relative already returns an os path\n\t\t\treturn false; // hidden through pattern\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.workspaceFolderChangeListener = dispose(this.workspaceFolderChangeListener);\n\t}\n}\n\n// // Explorer Sorter\nexport class FileSorter implements ITreeSorter<ExplorerItem> {\n\n\tconstructor(\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) { }\n\n\tpublic compare(statA: ExplorerItem, statB: ExplorerItem): number {\n\t\t// Do not sort roots\n\t\tif (statA.isRoot) {\n\t\t\tif (statB.isRoot) {\n\t\t\t\tconst workspaceA = this.contextService.getWorkspaceFolder(statA.resource);\n\t\t\t\tconst workspaceB = this.contextService.getWorkspaceFolder(statB.resource);\n\t\t\t\treturn workspaceA && workspaceB ? (workspaceA.index - workspaceB.index) : -1;\n\t\t\t}\n\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (statB.isRoot) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst sortOrder = this.explorerService.sortOrder;\n\n\t\t// Sort Directories\n\t\tswitch (sortOrder) {\n\t\t\tcase 'type':\n\t\t\t\tif (statA.isDirectory && !statB.isDirectory) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tif (statB.isDirectory && !statA.isDirectory) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\tif (statA.isDirectory && statB.isDirectory) {\n\t\t\t\t\treturn compareFileNames(statA.name, statB.name);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'filesFirst':\n\t\t\t\tif (statA.isDirectory && !statB.isDirectory) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\tif (statB.isDirectory && !statA.isDirectory) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'mixed':\n\t\t\t\tbreak; // not sorting when \"mixed\" is on\n\n\t\t\tdefault: /* 'default', 'modified' */\n\t\t\t\tif (statA.isDirectory && !statB.isDirectory) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tif (statB.isDirectory && !statA.isDirectory) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Sort Files\n\t\tswitch (sortOrder) {\n\t\t\tcase 'type':\n\t\t\t\treturn compareFileExtensions(statA.name, statB.name);\n\n\t\t\tcase 'modified':\n\t\t\t\tif (statA.mtime !== statB.mtime) {\n\t\t\t\t\treturn (statA.mtime && statB.mtime && statA.mtime < statB.mtime) ? 1 : -1;\n\t\t\t\t}\n\n\t\t\t\treturn compareFileNames(statA.name, statB.name);\n\n\t\t\tdefault: /* 'default', 'mixed', 'filesFirst' */\n\t\t\t\treturn compareFileNames(statA.name, statB.name);\n\t\t}\n\t}\n}\n\nexport class FileDragAndDrop implements ITreeDragAndDrop<ExplorerItem> {\n\tprivate static readonly CONFIRM_DND_SETTING_KEY = 'explorer.confirmDragAndDrop';\n\n\tprivate toDispose: IDisposable[];\n\tprivate dropEnabled: boolean;\n\n\tconstructor(\n\t\t@INotificationService private notificationService: INotificationService,\n\t\t@IExplorerService private explorerService: IExplorerService,\n\t\t@IEditorService private editorService: IEditorService,\n\t\t@IDialogService private dialogService: IDialogService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IFileService private fileService: IFileService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IInstantiationService private instantiationService: IInstantiationService,\n\t\t@ITextFileService private textFileService: ITextFileService,\n\t\t@IWindowService private windowService: IWindowService,\n\t\t@IWorkspaceEditingService private workspaceEditingService: IWorkspaceEditingService\n\t) {\n\t\tthis.toDispose = [];\n\n\t\tconst updateDropEnablement = () => {\n\t\t\tthis.dropEnabled = this.configurationService.getValue('explorer.enableDragAndDrop');\n\t\t};\n\t\tupdateDropEnablement();\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration((e) => updateDropEnablement()));\n\t}\n\n\tonDragOver(data: IDragAndDropData, target: ExplorerItem | undefined, targetIndex: number | undefined, originalEvent: DragEvent): boolean | ITreeDragOverReaction {\n\t\tif (!this.dropEnabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst isCopy = originalEvent && ((originalEvent.ctrlKey && !isMacintosh) || (originalEvent.altKey && isMacintosh));\n\t\tconst fromDesktop = data instanceof DesktopDragAndDropData;\n\t\tconst effect = (fromDesktop || isCopy) ? ListDragOverEffect.Copy : ListDragOverEffect.Move;\n\n\t\t// Desktop DND\n\t\tif (fromDesktop && originalEvent.dataTransfer) {\n\t\t\tconst types = originalEvent.dataTransfer.types;\n\t\t\tconst typesArray: string[] = [];\n\t\t\tfor (let i = 0; i < types.length; i++) {\n\t\t\t\ttypesArray.push(types[i].toLowerCase()); // somehow the types are lowercase\n\t\t\t}\n\n\t\t\tif (typesArray.indexOf(DataTransfers.FILES.toLowerCase()) === -1 && typesArray.indexOf(CodeDataTransfers.FILES.toLowerCase()) === -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Other-Tree DND\n\t\telse if (data instanceof ExternalElementsDragAndDropData) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// In-Explorer DND\n\t\telse {\n\t\t\tconst items = (data as ElementsDragAndDropData<ExplorerItem>).elements;\n\n\t\t\tif (!target) {\n\t\t\t\t// Droping onto the empty area. Do not accept if items dragged are already\n\t\t\t\t// children of the root unless we are copying the file\n\t\t\t\tif (!isCopy && items.every(i => !!i.parent && i.parent.isRoot)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn { accept: true, bubble: TreeDragOverBubble.Down, effect, autoExpand: false };\n\t\t\t}\n\n\t\t\tif (!Array.isArray(items)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (items.some((source) => {\n\t\t\t\tif (source.isRoot && target instanceof ExplorerItem && !target.isRoot) {\n\t\t\t\t\treturn true; // Root folder can not be moved to a non root file stat.\n\t\t\t\t}\n\n\t\t\t\tif (source.resource.toString() === target.resource.toString()) {\n\t\t\t\t\treturn true; // Can not move anything onto itself\n\t\t\t\t}\n\n\t\t\t\tif (source.isRoot && target instanceof ExplorerItem && target.isRoot) {\n\t\t\t\t\t// Disable moving workspace roots in one another\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!isCopy && dirname(source.resource).toString() === target.resource.toString()) {\n\t\t\t\t\treturn true; // Can not move a file to the same parent unless we copy\n\t\t\t\t}\n\n\t\t\t\tif (isEqualOrParent(target.resource, source.resource, !isLinux /* ignorecase */)) {\n\t\t\t\t\treturn true; // Can not move a parent folder into one of its children\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// All (target = model)\n\t\tif (!target) {\n\t\t\treturn { accept: true, bubble: TreeDragOverBubble.Down, effect };\n\t\t}\n\n\t\t// All (target = file/folder)\n\t\telse {\n\t\t\tif (target.isDirectory) {\n\t\t\t\tif (target.isReadonly) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn { accept: true, bubble: TreeDragOverBubble.Down, effect, autoExpand: true };\n\t\t\t}\n\n\t\t\tif (this.contextService.getWorkspace().folders.every(folder => folder.uri.toString() !== target.resource.toString())) {\n\t\t\t\treturn { accept: true, bubble: TreeDragOverBubble.Up, effect };\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetDragURI(element: ExplorerItem): string | null {\n\t\tif (this.explorerService.isEditable(element)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn element.resource.toString();\n\t}\n\n\tgetDragLabel(elements: ExplorerItem[]): string | undefined {\n\t\tif (elements.length > 1) {\n\t\t\treturn String(elements.length);\n\t\t}\n\n\t\treturn elements[0].name;\n\t}\n\n\tonDragStart(data: IDragAndDropData, originalEvent: DragEvent): void {\n\t\tconst items = (data as ElementsDragAndDropData<ExplorerItem>).elements;\n\t\tif (items && items.length && originalEvent.dataTransfer) {\n\t\t\t// Apply some datatransfer types to allow for dragging the element outside of the application\n\t\t\tthis.instantiationService.invokeFunction(fillResourceDataTransfers, items, originalEvent);\n\n\t\t\t// The only custom data transfer we set from the explorer is a file transfer\n\t\t\t// to be able to DND between multiple code file explorers across windows\n\t\t\tconst fileResources = items.filter(s => !s.isDirectory && s.resource.scheme === Schemas.file).map(r => r.resource.fsPath);\n\t\t\tif (fileResources.length) {\n\t\t\t\toriginalEvent.dataTransfer.setData(CodeDataTransfers.FILES, JSON.stringify(fileResources));\n\t\t\t}\n\t\t}\n\t}\n\n\tdrop(data: IDragAndDropData, target: ExplorerItem | undefined, targetIndex: number | undefined, originalEvent: DragEvent): void {\n\t\t// Find parent to add to\n\t\tif (!target) {\n\t\t\ttarget = this.explorerService.roots[this.explorerService.roots.length - 1];\n\t\t}\n\t\tif (!target.isDirectory && target.parent) {\n\t\t\ttarget = target.parent;\n\t\t}\n\t\tif (target.isReadonly) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Desktop DND (Import file)\n\t\tif (data instanceof DesktopDragAndDropData) {\n\t\t\tthis.handleExternalDrop(data, target, originalEvent);\n\t\t}\n\t\t// In-Explorer DND (Move/Copy file)\n\t\telse {\n\t\t\tthis.handleExplorerDrop(data, target, originalEvent);\n\t\t}\n\t}\n\n\n\tprivate handleExternalDrop(data: DesktopDragAndDropData, target: ExplorerItem, originalEvent: DragEvent): Promise<void> {\n\t\treturn (require('vs/../../../../packages/vscode/src/workbench') as typeof import('vs/../../../../packages/vscode/src/workbench')).workbench.handleExternalDrop(target, originalEvent);\n\t\tconst droppedResources = extractResources(originalEvent, true);\n\n\t\t// Check for dropped external files to be folders\n\t\treturn this.fileService.resolveFiles(droppedResources).then(result => {\n\n\t\t\t// Pass focus to window\n\t\t\tthis.windowService.focusWindow();\n\n\t\t\t// Handle folders by adding to workspace if we are in workspace context\n\t\t\tconst folders = result.filter(r => r.success && r.stat && r.stat.isDirectory).map(result => ({ uri: result.stat!.resource }));\n\t\t\tif (folders.length > 0) {\n\n\t\t\t\t// If we are in no-workspace context, ask for confirmation to create a workspace\n\t\t\t\tlet confirmedPromise: Promise<IConfirmationResult> = Promise.resolve({ confirmed: true });\n\t\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.WORKSPACE) {\n\t\t\t\t\tconfirmedPromise = this.dialogService.confirm({\n\t\t\t\t\t\tmessage: folders.length > 1 ? localize('dropFolders', \"Do you want to add the folders to the workspace?\") : localize('dropFolder', \"Do you want to add the folder to the workspace?\"),\n\t\t\t\t\t\ttype: 'question',\n\t\t\t\t\t\tprimaryButton: folders.length > 1 ? localize('addFolders', \"&&Add Folders\") : localize('addFolder', \"&&Add Folder\")\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn confirmedPromise.then(res => {\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\treturn this.workspaceEditingService.addFolders(folders);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handle dropped files (only support FileStat as target)\n\t\t\telse if (target instanceof ExplorerItem) {\n\t\t\t\treturn this.addResources(target, droppedResources.map(res => res.resource));\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate addResources(target: ExplorerItem, resources: URI[]): Promise<any> {\n\t\tif (resources && resources.length > 0) {\n\n\t\t\t// Resolve target to check for name collisions and ask user\n\t\t\treturn this.fileService.resolveFile(target.resource).then(targetStat => {\n\n\t\t\t\t// Check for name collisions\n\t\t\t\tconst targetNames = new Set<string>();\n\t\t\t\tif (targetStat.children) {\n\t\t\t\t\ttargetStat.children.forEach(child => {\n\t\t\t\t\t\ttargetNames.add(isLinux ? child.name : child.name.toLowerCase());\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tlet overwritePromise: Promise<IConfirmationResult> = Promise.resolve({ confirmed: true });\n\t\t\t\tif (resources.some(resource => {\n\t\t\t\t\treturn targetNames.has(!hasToIgnoreCase(resource) ? basename(resource) : basename(resource).toLowerCase());\n\t\t\t\t})) {\n\t\t\t\t\tconst confirm: IConfirmation = {\n\t\t\t\t\t\tmessage: localize('confirmOverwrite', \"A file or folder with the same name already exists in the destination folder. Do you want to replace it?\"),\n\t\t\t\t\t\tdetail: localize('irreversible', \"This action is irreversible!\"),\n\t\t\t\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t\t\t\t\ttype: 'warning'\n\t\t\t\t\t};\n\n\t\t\t\t\toverwritePromise = this.dialogService.confirm(confirm);\n\t\t\t\t}\n\n\t\t\t\treturn overwritePromise.then(res => {\n\t\t\t\t\tif (!res.confirmed) {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Run add in sequence\n\t\t\t\t\tconst addPromisesFactory: ITask<Promise<void>>[] = [];\n\t\t\t\t\tresources.forEach(resource => {\n\t\t\t\t\t\taddPromisesFactory.push(() => {\n\t\t\t\t\t\t\tconst sourceFile = resource;\n\t\t\t\t\t\t\tconst targetFile = joinPath(target.resource, basename(sourceFile));\n\n\t\t\t\t\t\t\t// if the target exists and is dirty, make sure to revert it. otherwise the dirty contents\n\t\t\t\t\t\t\t// of the target file would replace the contents of the added file. since we already\n\t\t\t\t\t\t\t// confirmed the overwrite before, this is OK.\n\t\t\t\t\t\t\tlet revertPromise: Promise<ITextFileOperationResult | null> = Promise.resolve(null);\n\t\t\t\t\t\t\tif (this.textFileService.isDirty(targetFile)) {\n\t\t\t\t\t\t\t\trevertPromise = this.textFileService.revertAll([targetFile], { soft: true });\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn revertPromise.then(() => {\n\t\t\t\t\t\t\t\tconst copyTarget = joinPath(target.resource, basename(sourceFile));\n\t\t\t\t\t\t\t\treturn this.fileService.copyFile(sourceFile, copyTarget, true).then(stat => {\n\n\t\t\t\t\t\t\t\t\t// if we only add one file, just open it directly\n\t\t\t\t\t\t\t\t\tif (resources.length === 1) {\n\t\t\t\t\t\t\t\t\t\tthis.editorService.openEditor({ resource: stat.resource, options: { pinned: true } });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\treturn sequence(addPromisesFactory);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate handleExplorerDrop(data: IDragAndDropData, target: ExplorerItem, originalEvent: DragEvent): Promise<void> {\n\t\tconst elementsData = (data as ElementsDragAndDropData<ExplorerItem>).elements;\n\t\tconst items = distinctParents(elementsData, s => s.resource);\n\t\tconst isCopy = (originalEvent.ctrlKey && !isMacintosh) || (originalEvent.altKey && isMacintosh);\n\n\t\tlet confirmPromise: Promise<IConfirmationResult>;\n\n\t\t// Handle confirm setting\n\t\tconst confirmDragAndDrop = !isCopy && this.configurationService.getValue<boolean>(FileDragAndDrop.CONFIRM_DND_SETTING_KEY);\n\t\tif (confirmDragAndDrop) {\n\t\t\tconfirmPromise = this.dialogService.confirm({\n\t\t\t\tmessage: items.length > 1 && items.every(s => s.isRoot) ? localize('confirmRootsMove', \"Are you sure you want to change the order of multiple root folders in your workspace?\")\n\t\t\t\t\t: items.length > 1 ? getConfirmMessage(localize('confirmMultiMove', \"Are you sure you want to move the following {0} files?\", items.length), items.map(s => s.resource))\n\t\t\t\t\t\t: items[0].isRoot ? localize('confirmRootMove', \"Are you sure you want to change the order of root folder '{0}' in your workspace?\", items[0].name)\n\t\t\t\t\t\t\t: localize('confirmMove', \"Are you sure you want to move '{0}'?\", items[0].name),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('doNotAskAgain', \"Do not ask me again\")\n\t\t\t\t},\n\t\t\t\ttype: 'question',\n\t\t\t\tprimaryButton: localize({ key: 'moveButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Move\")\n\t\t\t});\n\t\t} else {\n\t\t\tconfirmPromise = Promise.resolve({ confirmed: true } as IConfirmationResult);\n\t\t}\n\n\t\treturn confirmPromise.then(res => {\n\n\t\t\t// Check for confirmation checkbox\n\t\t\tlet updateConfirmSettingsPromise: Promise<void> = Promise.resolve(undefined);\n\t\t\tif (res.confirmed && res.checkboxChecked === true) {\n\t\t\t\tupdateConfirmSettingsPromise = this.configurationService.updateValue(FileDragAndDrop.CONFIRM_DND_SETTING_KEY, false, ConfigurationTarget.USER);\n\t\t\t}\n\n\t\t\treturn updateConfirmSettingsPromise.then(() => {\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tconst rootDropPromise = this.doHandleRootDrop(items.filter(s => s.isRoot), target);\n\t\t\t\t\treturn Promise.all(items.filter(s => !s.isRoot).map(source => this.doHandleExplorerDrop(source, target, isCopy)).concat(rootDropPromise)).then(() => undefined);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate doHandleRootDrop(roots: ExplorerItem[], target: ExplorerItem): Promise<void> {\n\t\tif (roots.length === 0) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tlet targetIndex: number | undefined;\n\t\tconst workspaceCreationData: IWorkspaceFolderCreationData[] = [];\n\t\tconst rootsToMove: IWorkspaceFolderCreationData[] = [];\n\n\t\tfor (let index = 0; index < folders.length; index++) {\n\t\t\tconst data = {\n\t\t\t\turi: folders[index].uri,\n\t\t\t\tname: folders[index].name\n\t\t\t};\n\t\t\tif (target instanceof ExplorerItem && folders[index].uri.toString() === target.resource.toString()) {\n\t\t\t\ttargetIndex = index;\n\t\t\t}\n\n\t\t\tif (roots.every(r => r.resource.toString() !== folders[index].uri.toString())) {\n\t\t\t\tworkspaceCreationData.push(data);\n\t\t\t} else {\n\t\t\t\trootsToMove.push(data);\n\t\t\t}\n\t\t}\n\t\tif (targetIndex === undefined) {\n\t\t\ttargetIndex = workspaceCreationData.length;\n\t\t}\n\n\t\tworkspaceCreationData.splice(targetIndex, 0, ...rootsToMove);\n\t\treturn this.workspaceEditingService.updateFolders(0, workspaceCreationData.length, workspaceCreationData);\n\t}\n\n\tprivate doHandleExplorerDrop(source: ExplorerItem, target: ExplorerItem, isCopy: boolean): Promise<void> {\n\t\t// Reuse duplicate action if user copies\n\t\tif (isCopy) {\n\n\t\t\treturn this.fileService.copyFile(source.resource, findValidPasteFileTarget(target, { resource: source.resource, isDirectory: source.isDirectory, allowOverwirte: false })).then(stat => {\n\t\t\t\tif (!stat.isDirectory) {\n\t\t\t\t\treturn this.editorService.openEditor({ resource: stat.resource, options: { pinned: true } }).then(() => undefined);\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t}\n\n\t\t// Otherwise move\n\t\tconst targetResource = joinPath(target.resource, source.name);\n\t\tif (source.isReadonly) {\n\t\t\t// Do not allow moving readonly items\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn this.textFileService.move(source.resource, targetResource).then(undefined, error => {\n\n\t\t\t// Conflict\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_MOVE_CONFLICT) {\n\t\t\t\tconst confirm: IConfirmation = {\n\t\t\t\t\tmessage: localize('confirmOverwriteMessage', \"'{0}' already exists in the destination folder. Do you want to replace it?\", source.name),\n\t\t\t\t\tdetail: localize('irreversible', \"This action is irreversible!\"),\n\t\t\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t\t\t\ttype: 'warning'\n\t\t\t\t};\n\n\t\t\t\t// Move with overwrite if the user confirms\n\t\t\t\treturn this.dialogService.confirm(confirm).then(res => {\n\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\treturn this.textFileService.move(source.resource, targetResource, true /* overwrite */).then(undefined, error => this.notificationService.error(error));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Any other error\n\t\t\telse {\n\t\t\t\tthis.notificationService.error(error);\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n}\n"]}]}