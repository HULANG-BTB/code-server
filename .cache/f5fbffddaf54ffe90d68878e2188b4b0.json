{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/views.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/views.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/views\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar event_1 = require(\"vs/base/common/event\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar types_1 = require(\"vs/base/common/types\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar nls_1 = require(\"vs/nls\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar map_1 = require(\"vs/base/common/map\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nfunction filterViewRegisterEvent(container, event) {\n    return event_1.Event.chain(event)\n        .map(function (_a) {\n        var views = _a.views, viewContainer = _a.viewContainer;\n        return viewContainer === container ? views : [];\n    })\n        .filter(function (views) { return views.length > 0; })\n        .event;\n}\nfunction filterViewMoveEvent(container, event) {\n    return event_1.Event.chain(event)\n        .map(function (_a) {\n        var views = _a.views, from = _a.from, to = _a.to;\n        return from === container ? { removed: views } : to === container ? { added: views } : {};\n    })\n        .filter(function (_a) {\n        var added = _a.added, removed = _a.removed;\n        return arrays_1.isNonEmptyArray(added) || arrays_1.isNonEmptyArray(removed);\n    })\n        .event;\n}\nvar CounterSet = /** @class */ (function () {\n    function CounterSet() {\n        this.map = new Map();\n    }\n    CounterSet.prototype.add = function (value) {\n        this.map.set(value, (this.map.get(value) || 0) + 1);\n        return this;\n    };\n    CounterSet.prototype.delete = function (value) {\n        var counter = this.map.get(value) || 0;\n        if (counter === 0) {\n            return false;\n        }\n        counter--;\n        if (counter === 0) {\n            this.map.delete(value);\n        }\n        else {\n            this.map.set(value, counter);\n        }\n        return true;\n    };\n    CounterSet.prototype.has = function (value) {\n        return this.map.has(value);\n    };\n    return CounterSet;\n}());\nvar ViewDescriptorCollection = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewDescriptorCollection, _super);\n    function ViewDescriptorCollection(container, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.contextKeyService = contextKeyService;\n        _this.contextKeys = new CounterSet();\n        _this.items = [];\n        _this._onDidChange = _this._register(new event_1.Emitter());\n        _this.onDidChangeActiveViews = _this._onDidChange.event;\n        var viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\n        var onRelevantViewsRegistered = filterViewRegisterEvent(container, viewsRegistry.onViewsRegistered);\n        _this._register(onRelevantViewsRegistered(_this.onViewsRegistered, _this));\n        var onRelevantViewsMoved = filterViewMoveEvent(container, viewsRegistry.onDidChangeContainer);\n        _this._register(onRelevantViewsMoved(function (_a) {\n            var added = _a.added, removed = _a.removed;\n            if (arrays_1.isNonEmptyArray(added)) {\n                _this.onViewsRegistered(added);\n            }\n            if (arrays_1.isNonEmptyArray(removed)) {\n                _this.onViewsDeregistered(removed);\n            }\n        }));\n        var onRelevantViewsDeregistered = filterViewRegisterEvent(container, viewsRegistry.onViewsDeregistered);\n        _this._register(onRelevantViewsDeregistered(_this.onViewsDeregistered, _this));\n        var onRelevantContextChange = event_1.Event.filter(contextKeyService.onDidChangeContext, function (e) { return e.affectsSome(_this.contextKeys); });\n        _this._register(onRelevantContextChange(_this.onContextChanged, _this));\n        _this.onViewsRegistered(viewsRegistry.getViews(container));\n        return _this;\n    }\n    Object.defineProperty(ViewDescriptorCollection.prototype, \"activeViewDescriptors\", {\n        get: function () {\n            return this.items\n                .filter(function (i) { return i.active; })\n                .map(function (i) { return i.viewDescriptor; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewDescriptorCollection.prototype, \"allViewDescriptors\", {\n        get: function () {\n            return this.items.map(function (i) { return i.viewDescriptor; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ViewDescriptorCollection.prototype.onViewsRegistered = function (viewDescriptors) {\n        var added = [];\n        for (var _i = 0, viewDescriptors_1 = viewDescriptors; _i < viewDescriptors_1.length; _i++) {\n            var viewDescriptor = viewDescriptors_1[_i];\n            var item = {\n                viewDescriptor: viewDescriptor,\n                active: this.isViewDescriptorActive(viewDescriptor) // TODO: should read from some state?\n            };\n            this.items.push(item);\n            if (viewDescriptor.when) {\n                for (var _a = 0, _b = viewDescriptor.when.keys(); _a < _b.length; _a++) {\n                    var key = _b[_a];\n                    this.contextKeys.add(key);\n                }\n            }\n            if (item.active) {\n                added.push(viewDescriptor);\n            }\n        }\n        if (added.length) {\n            this._onDidChange.fire({ added: added, removed: [] });\n        }\n    };\n    ViewDescriptorCollection.prototype.onViewsDeregistered = function (viewDescriptors) {\n        var removed = [];\n        var _loop_1 = function (viewDescriptor) {\n            var index = arrays_1.firstIndex(this_1.items, function (i) { return i.viewDescriptor.id === viewDescriptor.id; });\n            if (index === -1) {\n                return \"continue\";\n            }\n            var item = this_1.items[index];\n            this_1.items.splice(index, 1);\n            if (viewDescriptor.when) {\n                for (var _i = 0, _a = viewDescriptor.when.keys(); _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    this_1.contextKeys.delete(key);\n                }\n            }\n            if (item.active) {\n                removed.push(viewDescriptor);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, viewDescriptors_2 = viewDescriptors; _i < viewDescriptors_2.length; _i++) {\n            var viewDescriptor = viewDescriptors_2[_i];\n            _loop_1(viewDescriptor);\n        }\n        if (removed.length) {\n            this._onDidChange.fire({ added: [], removed: removed });\n        }\n    };\n    ViewDescriptorCollection.prototype.onContextChanged = function (event) {\n        var removed = [];\n        var added = [];\n        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {\n            var item = _a[_i];\n            var active = this.isViewDescriptorActive(item.viewDescriptor);\n            if (item.active !== active) {\n                if (active) {\n                    added.push(item.viewDescriptor);\n                }\n                else {\n                    removed.push(item.viewDescriptor);\n                }\n            }\n            item.active = active;\n        }\n        if (added.length || removed.length) {\n            this._onDidChange.fire({ added: added, removed: removed });\n        }\n    };\n    ViewDescriptorCollection.prototype.isViewDescriptorActive = function (viewDescriptor) {\n        return !viewDescriptor.when || this.contextKeyService.contextMatchesRules(viewDescriptor.when);\n    };\n    ViewDescriptorCollection = tslib_1.__decorate([\n        tslib_1.__param(1, contextkey_1.IContextKeyService)\n    ], ViewDescriptorCollection);\n    return ViewDescriptorCollection;\n}(lifecycle_1.Disposable));\nvar ContributableViewsModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ContributableViewsModel, _super);\n    function ContributableViewsModel(container, viewsService, viewStates) {\n        if (viewStates === void 0) { viewStates = new Map(); }\n        var _this = _super.call(this) || this;\n        _this.viewStates = viewStates;\n        _this.viewDescriptors = [];\n        _this._onDidAdd = _this._register(new event_1.Emitter());\n        _this.onDidAdd = _this._onDidAdd.event;\n        _this._onDidRemove = _this._register(new event_1.Emitter());\n        _this.onDidRemove = _this._onDidRemove.event;\n        _this._onDidMove = _this._register(new event_1.Emitter());\n        _this.onDidMove = _this._onDidMove.event;\n        var viewDescriptorCollection = viewsService.getViewDescriptors(container);\n        if (viewDescriptorCollection) {\n            _this._register(viewDescriptorCollection.onDidChangeActiveViews(function () { return _this.onDidChangeViewDescriptors(viewDescriptorCollection.activeViewDescriptors); }));\n            _this.onDidChangeViewDescriptors(viewDescriptorCollection.activeViewDescriptors);\n        }\n        return _this;\n    }\n    Object.defineProperty(ContributableViewsModel.prototype, \"visibleViewDescriptors\", {\n        get: function () {\n            var _this = this;\n            return this.viewDescriptors.filter(function (v) { return _this.isViewDescriptorVisible(v); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContributableViewsModel.prototype.isVisible = function (id) {\n        var viewDescriptor = this.viewDescriptors.filter(function (v) { return v.id === id; })[0];\n        if (!viewDescriptor) {\n            throw new Error(\"Unknown view \" + id);\n        }\n        return this.isViewDescriptorVisible(viewDescriptor);\n    };\n    ContributableViewsModel.prototype.setVisible = function (id, visible, size) {\n        var _a = this.find(id), visibleIndex = _a.visibleIndex, viewDescriptor = _a.viewDescriptor, state = _a.state;\n        if (!viewDescriptor.canToggleVisibility) {\n            throw new Error(\"Can't toggle this view's visibility\");\n        }\n        if (this.isViewDescriptorVisible(viewDescriptor) === visible) {\n            return;\n        }\n        if (viewDescriptor.workspace) {\n            state.visibleWorkspace = visible;\n        }\n        else {\n            state.visibleGlobal = visible;\n        }\n        if (typeof size === 'number') {\n            state.size = size;\n        }\n        if (visible) {\n            this._onDidAdd.fire([{ index: visibleIndex, viewDescriptor: viewDescriptor, size: state.size, collapsed: state.collapsed }]);\n        }\n        else {\n            this._onDidRemove.fire([{ index: visibleIndex, viewDescriptor: viewDescriptor }]);\n        }\n    };\n    ContributableViewsModel.prototype.isCollapsed = function (id) {\n        var state = this.viewStates.get(id);\n        if (!state) {\n            throw new Error(\"Unknown view \" + id);\n        }\n        return state.collapsed;\n    };\n    ContributableViewsModel.prototype.setCollapsed = function (id, collapsed) {\n        var state = this.find(id).state;\n        state.collapsed = collapsed;\n    };\n    ContributableViewsModel.prototype.getSize = function (id) {\n        var state = this.viewStates.get(id);\n        if (!state) {\n            throw new Error(\"Unknown view \" + id);\n        }\n        return state.size;\n    };\n    ContributableViewsModel.prototype.setSize = function (id, size) {\n        var state = this.find(id).state;\n        state.size = size;\n    };\n    ContributableViewsModel.prototype.move = function (from, to) {\n        var fromIndex = arrays_1.firstIndex(this.viewDescriptors, function (v) { return v.id === from; });\n        var toIndex = arrays_1.firstIndex(this.viewDescriptors, function (v) { return v.id === to; });\n        var fromViewDescriptor = this.viewDescriptors[fromIndex];\n        var toViewDescriptor = this.viewDescriptors[toIndex];\n        arrays_1.move(this.viewDescriptors, fromIndex, toIndex);\n        for (var index = 0; index < this.viewDescriptors.length; index++) {\n            var state = this.viewStates.get(this.viewDescriptors[index].id);\n            state.order = index;\n        }\n        this._onDidMove.fire({\n            from: { index: fromIndex, viewDescriptor: fromViewDescriptor },\n            to: { index: toIndex, viewDescriptor: toViewDescriptor }\n        });\n    };\n    ContributableViewsModel.prototype.isViewDescriptorVisible = function (viewDescriptor) {\n        var viewState = this.viewStates.get(viewDescriptor.id);\n        if (!viewState) {\n            throw new Error(\"Unknown view \" + viewDescriptor.id);\n        }\n        return viewDescriptor.workspace ? viewState.visibleWorkspace : viewState.visibleGlobal;\n    };\n    ContributableViewsModel.prototype.find = function (id) {\n        for (var i = 0, visibleIndex = 0; i < this.viewDescriptors.length; i++) {\n            var viewDescriptor = this.viewDescriptors[i];\n            var state = this.viewStates.get(viewDescriptor.id);\n            if (!state) {\n                throw new Error(\"View state for \" + id + \" not found\");\n            }\n            if (viewDescriptor.id === id) {\n                return { index: i, visibleIndex: visibleIndex, viewDescriptor: viewDescriptor, state: state };\n            }\n            if (viewDescriptor.workspace ? state.visibleWorkspace : state.visibleGlobal) {\n                visibleIndex++;\n            }\n        }\n        throw new Error(\"view descriptor \" + id + \" not found\");\n    };\n    ContributableViewsModel.prototype.compareViewDescriptors = function (a, b) {\n        if (a.id === b.id) {\n            return 0;\n        }\n        return (this.getViewOrder(a) - this.getViewOrder(b)) || (a.id < b.id ? -1 : 1);\n    };\n    ContributableViewsModel.prototype.getViewOrder = function (viewDescriptor) {\n        var viewState = this.viewStates.get(viewDescriptor.id);\n        var viewOrder = viewState && typeof viewState.order === 'number' ? viewState.order : viewDescriptor.order;\n        return typeof viewOrder === 'number' ? viewOrder : Number.MAX_VALUE;\n    };\n    ContributableViewsModel.prototype.onDidChangeViewDescriptors = function (viewDescriptors) {\n        var _a;\n        var ids = new Set();\n        for (var _i = 0, _b = this.viewDescriptors; _i < _b.length; _i++) {\n            var viewDescriptor = _b[_i];\n            ids.add(viewDescriptor.id);\n        }\n        viewDescriptors = viewDescriptors.sort(this.compareViewDescriptors.bind(this));\n        for (var _c = 0, viewDescriptors_3 = viewDescriptors; _c < viewDescriptors_3.length; _c++) {\n            var viewDescriptor = viewDescriptors_3[_c];\n            var viewState = this.viewStates.get(viewDescriptor.id);\n            if (viewState) {\n                // set defaults if not set\n                if (viewDescriptor.workspace) {\n                    viewState.visibleWorkspace = types_1.isUndefinedOrNull(viewState.visibleWorkspace) ? !viewDescriptor.hideByDefault : viewState.visibleWorkspace;\n                }\n                else {\n                    viewState.visibleGlobal = types_1.isUndefinedOrNull(viewState.visibleGlobal) ? !viewDescriptor.hideByDefault : viewState.visibleGlobal;\n                }\n                viewState.collapsed = types_1.isUndefinedOrNull(viewState.collapsed) ? !!viewDescriptor.collapsed : viewState.collapsed;\n            }\n            else {\n                this.viewStates.set(viewDescriptor.id, {\n                    visibleGlobal: !viewDescriptor.hideByDefault,\n                    visibleWorkspace: !viewDescriptor.hideByDefault,\n                    collapsed: !!viewDescriptor.collapsed\n                });\n            }\n        }\n        var splices = arrays_1.sortedDiff(this.viewDescriptors, viewDescriptors, this.compareViewDescriptors.bind(this)).reverse();\n        var toRemove = [];\n        var toAdd = [];\n        for (var _d = 0, splices_1 = splices; _d < splices_1.length; _d++) {\n            var splice = splices_1[_d];\n            var startViewDescriptor = this.viewDescriptors[splice.start];\n            var startIndex = startViewDescriptor ? this.find(startViewDescriptor.id).visibleIndex : this.viewDescriptors.length;\n            for (var i = 0; i < splice.deleteCount; i++) {\n                var viewDescriptor = this.viewDescriptors[splice.start + i];\n                if (this.isViewDescriptorVisible(viewDescriptor)) {\n                    toRemove.push({ index: startIndex++, viewDescriptor: viewDescriptor });\n                }\n            }\n            for (var _e = 0, _f = splice.toInsert; _e < _f.length; _e++) {\n                var viewDescriptor = _f[_e];\n                var state = this.viewStates.get(viewDescriptor.id);\n                if (this.isViewDescriptorVisible(viewDescriptor)) {\n                    toAdd.push({ index: startIndex++, viewDescriptor: viewDescriptor, size: state.size, collapsed: state.collapsed });\n                }\n            }\n        }\n        (_a = this.viewDescriptors).splice.apply(_a, [0, this.viewDescriptors.length].concat(viewDescriptors));\n        if (toRemove.length) {\n            this._onDidRemove.fire(toRemove);\n        }\n        if (toAdd.length) {\n            this._onDidAdd.fire(toAdd);\n        }\n    };\n    return ContributableViewsModel;\n}(lifecycle_1.Disposable));\nexports.ContributableViewsModel = ContributableViewsModel;\nvar PersistentContributableViewsModel = /** @class */ (function (_super) {\n    tslib_1.__extends(PersistentContributableViewsModel, _super);\n    function PersistentContributableViewsModel(container, viewletStateStorageId, viewsService, storageService) {\n        var _this = this;\n        var hiddenViewsStorageId = viewletStateStorageId + \".hidden\";\n        var viewStates = PersistentContributableViewsModel.loadViewsStates(viewletStateStorageId, hiddenViewsStorageId, storageService);\n        _this = _super.call(this, container, viewsService, viewStates) || this;\n        _this.viewletStateStorageId = viewletStateStorageId;\n        _this.hiddenViewsStorageId = hiddenViewsStorageId;\n        _this.storageService = storageService;\n        _this._register(_this.onDidAdd(function (viewDescriptorRefs) { return _this.saveVisibilityStates(viewDescriptorRefs.map(function (r) { return r.viewDescriptor; })); }));\n        _this._register(_this.onDidRemove(function (viewDescriptorRefs) { return _this.saveVisibilityStates(viewDescriptorRefs.map(function (r) { return r.viewDescriptor; })); }));\n        _this._register(_this.storageService.onWillSaveState(function () { return _this.saveViewsStates(); }));\n        return _this;\n    }\n    PersistentContributableViewsModel.prototype.saveViewsStates = function () {\n        var storedViewsStates = {};\n        var hasState = false;\n        for (var _i = 0, _a = this.viewDescriptors; _i < _a.length; _i++) {\n            var viewDescriptor = _a[_i];\n            var viewState = this.viewStates.get(viewDescriptor.id);\n            if (viewState) {\n                storedViewsStates[viewDescriptor.id] = { collapsed: viewState.collapsed, size: viewState.size, order: viewState.order };\n                hasState = true;\n            }\n        }\n        if (hasState) {\n            this.storageService.store(this.viewletStateStorageId, JSON.stringify(storedViewsStates), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(this.viewletStateStorageId, storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    PersistentContributableViewsModel.prototype.saveVisibilityStates = function (viewDescriptors) {\n        var globalViews = viewDescriptors.filter(function (v) { return !v.workspace; });\n        var workspaceViews = viewDescriptors.filter(function (v) { return v.workspace; });\n        if (globalViews.length) {\n            this.saveVisibilityStatesInScope(globalViews, storage_1.StorageScope.GLOBAL);\n        }\n        if (workspaceViews.length) {\n            this.saveVisibilityStatesInScope(workspaceViews, storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    PersistentContributableViewsModel.prototype.saveVisibilityStatesInScope = function (viewDescriptors, scope) {\n        var storedViewsVisibilityStates = PersistentContributableViewsModel.loadViewsVisibilityState(this.hiddenViewsStorageId, this.storageService, scope);\n        for (var _i = 0, viewDescriptors_4 = viewDescriptors; _i < viewDescriptors_4.length; _i++) {\n            var viewDescriptor = viewDescriptors_4[_i];\n            if (viewDescriptor.canToggleVisibility) {\n                var viewState = this.viewStates.get(viewDescriptor.id);\n                storedViewsVisibilityStates.set(viewDescriptor.id, { id: viewDescriptor.id, isHidden: viewState ? (scope === storage_1.StorageScope.GLOBAL ? !viewState.visibleGlobal : !viewState.visibleWorkspace) : false });\n            }\n        }\n        this.storageService.store(this.hiddenViewsStorageId, JSON.stringify(map_1.values(storedViewsVisibilityStates)), scope);\n    };\n    PersistentContributableViewsModel.loadViewsStates = function (viewletStateStorageId, hiddenViewsStorageId, storageService) {\n        var viewStates = new Map();\n        var storedViewsStates = JSON.parse(storageService.get(viewletStateStorageId, storage_1.StorageScope.WORKSPACE, '{}'));\n        var globalVisibilityStates = this.loadViewsVisibilityState(hiddenViewsStorageId, storageService, storage_1.StorageScope.GLOBAL);\n        var workspaceVisibilityStates = this.loadViewsVisibilityState(hiddenViewsStorageId, storageService, storage_1.StorageScope.WORKSPACE);\n        for (var _i = 0, _a = map_1.values(globalVisibilityStates); _i < _a.length; _i++) {\n            var _b = _a[_i], id = _b.id, isHidden = _b.isHidden;\n            var viewState = storedViewsStates[id];\n            if (viewState) {\n                viewStates.set(id, tslib_1.__assign({}, viewState, { visibleGlobal: !isHidden }));\n            }\n            else {\n                // New workspace\n                viewStates.set(id, tslib_1.__assign({ visibleGlobal: !isHidden }));\n            }\n        }\n        for (var _c = 0, _d = map_1.values(workspaceVisibilityStates); _c < _d.length; _c++) {\n            var _e = _d[_c], id = _e.id, isHidden = _e.isHidden;\n            var viewState = storedViewsStates[id];\n            if (viewState) {\n                viewStates.set(id, tslib_1.__assign({}, viewState, { visibleWorkspace: !isHidden }));\n            }\n            else {\n                // New workspace\n                viewStates.set(id, tslib_1.__assign({ visibleWorkspace: !isHidden }));\n            }\n        }\n        for (var _f = 0, _g = Object.keys(storedViewsStates); _f < _g.length; _f++) {\n            var id = _g[_f];\n            if (!viewStates.has(id)) {\n                viewStates.set(id, tslib_1.__assign({}, storedViewsStates[id]));\n            }\n        }\n        return viewStates;\n    };\n    PersistentContributableViewsModel.loadViewsVisibilityState = function (hiddenViewsStorageId, storageService, scope) {\n        var storedVisibilityStates = JSON.parse(storageService.get(hiddenViewsStorageId, scope, '[]'));\n        var hasDuplicates = false;\n        var storedViewsVisibilityStates = storedVisibilityStates.reduce(function (result, storedState) {\n            if (typeof storedState === 'string' /* migration */) {\n                hasDuplicates = hasDuplicates || result.has(storedState);\n                result.set(storedState, { id: storedState, isHidden: true });\n            }\n            else {\n                hasDuplicates = hasDuplicates || result.has(storedState.id);\n                result.set(storedState.id, storedState);\n            }\n            return result;\n        }, new Map());\n        if (hasDuplicates) {\n            storageService.store(hiddenViewsStorageId, JSON.stringify(map_1.values(storedViewsVisibilityStates)), scope);\n        }\n        return storedViewsVisibilityStates;\n    };\n    PersistentContributableViewsModel = tslib_1.__decorate([\n        tslib_1.__param(2, views_1.IViewsService),\n        tslib_1.__param(3, storage_1.IStorageService)\n    ], PersistentContributableViewsModel);\n    return PersistentContributableViewsModel;\n}(ContributableViewsModel));\nexports.PersistentContributableViewsModel = PersistentContributableViewsModel;\nvar ViewsService = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewsService, _super);\n    function ViewsService(viewletService, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.viewletService = viewletService;\n        _this.contextKeyService = contextKeyService;\n        _this.viewDescriptorCollections = new Map();\n        _this.viewDisposable = new Map();\n        _this.activeViewContextKeys = new Map();\n        var viewContainersRegistry = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry);\n        var viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\n        viewContainersRegistry.all.forEach(function (viewContainer) {\n            _this.onDidRegisterViews(viewContainer, viewsRegistry.getViews(viewContainer));\n            _this.onDidRegisterViewContainer(viewContainer);\n        });\n        _this._register(viewsRegistry.onViewsRegistered(function (_a) {\n            var views = _a.views, viewContainer = _a.viewContainer;\n            return _this.onDidRegisterViews(viewContainer, views);\n        }));\n        _this._register(viewsRegistry.onViewsDeregistered(function (_a) {\n            var views = _a.views;\n            return _this.onDidDeregisterViews(views);\n        }));\n        _this._register(viewsRegistry.onDidChangeContainer(function (_a) {\n            var views = _a.views, to = _a.to;\n            _this.onDidDeregisterViews(views);\n            _this.onDidRegisterViews(to, views);\n        }));\n        _this._register(lifecycle_1.toDisposable(function () {\n            _this.viewDisposable.forEach(function (disposable) { return disposable.dispose(); });\n            _this.viewDisposable.clear();\n        }));\n        _this._register(viewContainersRegistry.onDidRegister(function (viewContainer) { return _this.onDidRegisterViewContainer(viewContainer); }));\n        _this._register(viewContainersRegistry.onDidDeregister(function (viewContainer) { return _this.onDidDeregisterViewContainer(viewContainer); }));\n        _this._register(lifecycle_1.toDisposable(function () {\n            _this.viewDescriptorCollections.forEach(function (_a) {\n                var disposable = _a.disposable;\n                return disposable.dispose();\n            });\n            _this.viewDescriptorCollections.clear();\n        }));\n        return _this;\n    }\n    ViewsService.prototype.getViewDescriptors = function (container) {\n        var viewDescriptorCollectionItem = this.viewDescriptorCollections.get(container);\n        return viewDescriptorCollectionItem ? viewDescriptorCollectionItem.viewDescriptorCollection : null;\n    };\n    ViewsService.prototype.openView = function (id, focus) {\n        var viewContainer = platform_1.Registry.as(views_1.Extensions.ViewsRegistry).getViewContainer(id);\n        if (viewContainer) {\n            var viewletDescriptor = this.viewletService.getViewlet(viewContainer.id);\n            if (viewletDescriptor) {\n                return this.viewletService.openViewlet(viewletDescriptor.id, focus)\n                    .then(function (viewlet) {\n                    if (viewlet && viewlet.openView) {\n                        return viewlet.openView(id, focus);\n                    }\n                    return null;\n                });\n            }\n        }\n        return Promise.resolve(null);\n    };\n    ViewsService.prototype.onDidRegisterViewContainer = function (viewContainer) {\n        var _this = this;\n        var viewDescriptorCollection = new ViewDescriptorCollection(viewContainer, this.contextKeyService);\n        var disposables = [viewDescriptorCollection];\n        this.onDidChangeActiveViews({ added: viewDescriptorCollection.activeViewDescriptors, removed: [] });\n        viewDescriptorCollection.onDidChangeActiveViews(function (changed) { return _this.onDidChangeActiveViews(changed); }, this, disposables);\n        this.viewDescriptorCollections.set(viewContainer, { viewDescriptorCollection: viewDescriptorCollection, disposable: lifecycle_1.toDisposable(function () { return lifecycle_1.dispose(disposables); }) });\n    };\n    ViewsService.prototype.onDidDeregisterViewContainer = function (viewContainer) {\n        var viewDescriptorCollectionItem = this.viewDescriptorCollections.get(viewContainer);\n        if (viewDescriptorCollectionItem) {\n            viewDescriptorCollectionItem.disposable.dispose();\n            this.viewDescriptorCollections.delete(viewContainer);\n        }\n    };\n    ViewsService.prototype.onDidChangeActiveViews = function (_a) {\n        var _this = this;\n        var added = _a.added, removed = _a.removed;\n        added.forEach(function (viewDescriptor) { return _this.getOrCreateActiveViewContextKey(viewDescriptor).set(true); });\n        removed.forEach(function (viewDescriptor) { return _this.getOrCreateActiveViewContextKey(viewDescriptor).set(false); });\n    };\n    ViewsService.prototype.onDidRegisterViews = function (container, views) {\n        var _this = this;\n        var viewlet = this.viewletService.getViewlet(container.id);\n        var _loop_2 = function (viewDescriptor) {\n            var disposables = [];\n            var command = {\n                id: viewDescriptor.focusCommand ? viewDescriptor.focusCommand.id : viewDescriptor.id + \".focus\",\n                title: { original: \"Focus on \" + viewDescriptor.name + \" View\", value: nls_1.localize('focus view', \"Focus on {0} View\", viewDescriptor.name) },\n                category: viewlet ? viewlet.name : nls_1.localize('view category', \"View\"),\n            };\n            var when = contextkey_1.ContextKeyExpr.has(viewDescriptor.id + \".active\");\n            disposables.push(commands_1.CommandsRegistry.registerCommand(command.id, function () { return _this.openView(viewDescriptor.id, true).then(function () { return null; }); }));\n            disposables.push(actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n                command: command,\n                when: when\n            }));\n            if (viewDescriptor.focusCommand && viewDescriptor.focusCommand.keybindings) {\n                keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({\n                    id: command.id,\n                    when: when,\n                    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n                    primary: viewDescriptor.focusCommand.keybindings.primary,\n                    secondary: viewDescriptor.focusCommand.keybindings.secondary,\n                    linux: viewDescriptor.focusCommand.keybindings.linux,\n                    mac: viewDescriptor.focusCommand.keybindings.mac,\n                    win: viewDescriptor.focusCommand.keybindings.win\n                });\n            }\n            this_2.viewDisposable.set(viewDescriptor, lifecycle_1.toDisposable(function () { return lifecycle_1.dispose(disposables); }));\n        };\n        var this_2 = this;\n        for (var _i = 0, views_2 = views; _i < views_2.length; _i++) {\n            var viewDescriptor = views_2[_i];\n            _loop_2(viewDescriptor);\n        }\n    };\n    ViewsService.prototype.onDidDeregisterViews = function (views) {\n        for (var _i = 0, views_3 = views; _i < views_3.length; _i++) {\n            var view = views_3[_i];\n            var disposable = this.viewDisposable.get(view);\n            if (disposable) {\n                disposable.dispose();\n                this.viewDisposable.delete(view);\n            }\n        }\n    };\n    ViewsService.prototype.getOrCreateActiveViewContextKey = function (viewDescriptor) {\n        var activeContextKeyId = viewDescriptor.id + \".active\";\n        var contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n        if (!contextKey) {\n            contextKey = new contextkey_1.RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n            this.activeViewContextKeys.set(activeContextKeyId, contextKey);\n        }\n        return contextKey;\n    };\n    ViewsService = tslib_1.__decorate([\n        tslib_1.__param(0, viewlet_1.IViewletService),\n        tslib_1.__param(1, contextkey_1.IContextKeyService)\n    ], ViewsService);\n    return ViewsService;\n}(lifecycle_1.Disposable));\nexports.ViewsService = ViewsService;\nfunction createFileIconThemableTreeContainerScope(container, themeService) {\n    dom_1.addClass(container, 'file-icon-themable-tree');\n    dom_1.addClass(container, 'show-file-icons');\n    var onDidChangeFileIconTheme = function (theme) {\n        dom_1.toggleClass(container, 'align-icons-and-twisties', theme.hasFileIcons && !theme.hasFolderIcons);\n        dom_1.toggleClass(container, 'hide-arrows', theme.hidesExplorerArrows === true);\n    };\n    onDidChangeFileIconTheme(themeService.getFileIconTheme());\n    return themeService.onDidFileIconThemeChange(onDidChangeFileIconTheme);\n}\nexports.createFileIconThemableTreeContainerScope = createFileIconThemableTreeContainerScope;\nextensions_1.registerSingleton(views_1.IViewsService, ViewsService);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/views.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/views/views.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/views';\nimport { Disposable, IDisposable, toDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { IViewsService, IViewsViewlet, ViewContainer, IViewDescriptor, IViewContainersRegistry, Extensions as ViewExtensions, IView, IViewDescriptorCollection, IViewsRegistry } from 'vs/workbench/common/views';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IContextKeyService, IContextKeyChangeEvent, IReadableSet, IContextKey, RawContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { sortedDiff, firstIndex, move, isNonEmptyArray } from 'vs/base/common/arrays';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { MenuId, MenuRegistry, ICommandAction } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { localize } from 'vs/nls';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { values } from 'vs/base/common/map';\nimport { IFileIconTheme, IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { toggleClass, addClass } from 'vs/base/browser/dom';\nimport { ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nfunction filterViewRegisterEvent(container: ViewContainer, event: Event<{ viewContainer: ViewContainer, views: IViewDescriptor[] }>): Event<IViewDescriptor[]> {\n\treturn Event.chain(event)\n\t\t.map(({ views, viewContainer }) => viewContainer === container ? views : [])\n\t\t.filter(views => views.length > 0)\n\t\t.event;\n}\n\nfunction filterViewMoveEvent(container: ViewContainer, event: Event<{ from: ViewContainer, to: ViewContainer, views: IViewDescriptor[] }>): Event<{ added?: IViewDescriptor[], removed?: IViewDescriptor[] }> {\n\treturn Event.chain(event)\n\t\t.map(({ views, from, to }) => from === container ? { removed: views } : to === container ? { added: views } : {})\n\t\t.filter(({ added, removed }) => isNonEmptyArray(added) || isNonEmptyArray(removed))\n\t\t.event;\n}\n\nclass CounterSet<T> implements IReadableSet<T> {\n\n\tprivate map = new Map<T, number>();\n\n\tadd(value: T): CounterSet<T> {\n\t\tthis.map.set(value, (this.map.get(value) || 0) + 1);\n\t\treturn this;\n\t}\n\n\tdelete(value: T): boolean {\n\t\tlet counter = this.map.get(value) || 0;\n\n\t\tif (counter === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tcounter--;\n\n\t\tif (counter === 0) {\n\t\t\tthis.map.delete(value);\n\t\t} else {\n\t\t\tthis.map.set(value, counter);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\thas(value: T): boolean {\n\t\treturn this.map.has(value);\n\t}\n}\n\ninterface IViewItem {\n\tviewDescriptor: IViewDescriptor;\n\tactive: boolean;\n}\n\nclass ViewDescriptorCollection extends Disposable implements IViewDescriptorCollection {\n\n\tprivate contextKeys = new CounterSet<string>();\n\tprivate items: IViewItem[] = [];\n\n\tprivate _onDidChange: Emitter<{ added: IViewDescriptor[], removed: IViewDescriptor[] }> = this._register(new Emitter<{ added: IViewDescriptor[], removed: IViewDescriptor[] }>());\n\treadonly onDidChangeActiveViews: Event<{ added: IViewDescriptor[], removed: IViewDescriptor[] }> = this._onDidChange.event;\n\n\tget activeViewDescriptors(): IViewDescriptor[] {\n\t\treturn this.items\n\t\t\t.filter(i => i.active)\n\t\t\t.map(i => i.viewDescriptor);\n\t}\n\n\tget allViewDescriptors(): IViewDescriptor[] {\n\t\treturn this.items.map(i => i.viewDescriptor);\n\t}\n\n\tconstructor(\n\t\tcontainer: ViewContainer,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\t\tconst onRelevantViewsRegistered = filterViewRegisterEvent(container, viewsRegistry.onViewsRegistered);\n\t\tthis._register(onRelevantViewsRegistered(this.onViewsRegistered, this));\n\n\t\tconst onRelevantViewsMoved = filterViewMoveEvent(container, viewsRegistry.onDidChangeContainer);\n\t\tthis._register(onRelevantViewsMoved(({ added, removed }) => {\n\t\t\tif (isNonEmptyArray(added)) {\n\t\t\t\tthis.onViewsRegistered(added);\n\t\t\t}\n\t\t\tif (isNonEmptyArray(removed)) {\n\t\t\t\tthis.onViewsDeregistered(removed);\n\t\t\t}\n\t\t}));\n\n\t\tconst onRelevantViewsDeregistered = filterViewRegisterEvent(container, viewsRegistry.onViewsDeregistered);\n\t\tthis._register(onRelevantViewsDeregistered(this.onViewsDeregistered, this));\n\n\t\tconst onRelevantContextChange = Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys));\n\t\tthis._register(onRelevantContextChange(this.onContextChanged, this));\n\n\t\tthis.onViewsRegistered(viewsRegistry.getViews(container));\n\t}\n\n\tprivate onViewsRegistered(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst added: IViewDescriptor[] = [];\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst item = {\n\t\t\t\tviewDescriptor,\n\t\t\t\tactive: this.isViewDescriptorActive(viewDescriptor) // TODO: should read from some state?\n\t\t\t};\n\n\t\t\tthis.items.push(item);\n\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (item.active) {\n\t\t\t\tadded.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (added.length) {\n\t\t\tthis._onDidChange.fire({ added, removed: [] });\n\t\t}\n\t}\n\n\tprivate onViewsDeregistered(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst removed: IViewDescriptor[] = [];\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst index = firstIndex(this.items, i => i.viewDescriptor.id === viewDescriptor.id);\n\n\t\t\tif (index === -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst item = this.items[index];\n\t\t\tthis.items.splice(index, 1);\n\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (item.active) {\n\t\t\t\tremoved.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (removed.length) {\n\t\t\tthis._onDidChange.fire({ added: [], removed });\n\t\t}\n\t}\n\n\tprivate onContextChanged(event: IContextKeyChangeEvent): void {\n\t\tconst removed: IViewDescriptor[] = [];\n\t\tconst added: IViewDescriptor[] = [];\n\n\t\tfor (const item of this.items) {\n\t\t\tconst active = this.isViewDescriptorActive(item.viewDescriptor);\n\n\t\t\tif (item.active !== active) {\n\t\t\t\tif (active) {\n\t\t\t\t\tadded.push(item.viewDescriptor);\n\t\t\t\t} else {\n\t\t\t\t\tremoved.push(item.viewDescriptor);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titem.active = active;\n\t\t}\n\n\t\tif (added.length || removed.length) {\n\t\t\tthis._onDidChange.fire({ added, removed });\n\t\t}\n\t}\n\n\tprivate isViewDescriptorActive(viewDescriptor: IViewDescriptor): boolean {\n\t\treturn !viewDescriptor.when || this.contextKeyService.contextMatchesRules(viewDescriptor.when);\n\t}\n}\n\nexport interface IViewState {\n\tvisibleGlobal: boolean;\n\tvisibleWorkspace: boolean;\n\tcollapsed: boolean;\n\torder?: number;\n\tsize?: number;\n}\n\nexport interface IViewDescriptorRef {\n\tviewDescriptor: IViewDescriptor;\n\tindex: number;\n}\n\nexport interface IAddedViewDescriptorRef extends IViewDescriptorRef {\n\tcollapsed: boolean;\n\tsize?: number;\n}\n\nexport class ContributableViewsModel extends Disposable {\n\n\treadonly viewDescriptors: IViewDescriptor[] = [];\n\tget visibleViewDescriptors(): IViewDescriptor[] {\n\t\treturn this.viewDescriptors.filter(v => this.isViewDescriptorVisible(v));\n\t}\n\n\tprivate _onDidAdd = this._register(new Emitter<IAddedViewDescriptorRef[]>());\n\treadonly onDidAdd: Event<IAddedViewDescriptorRef[]> = this._onDidAdd.event;\n\n\tprivate _onDidRemove = this._register(new Emitter<IViewDescriptorRef[]>());\n\treadonly onDidRemove: Event<IViewDescriptorRef[]> = this._onDidRemove.event;\n\n\tprivate _onDidMove = this._register(new Emitter<{ from: IViewDescriptorRef; to: IViewDescriptorRef; }>());\n\treadonly onDidMove: Event<{ from: IViewDescriptorRef; to: IViewDescriptorRef; }> = this._onDidMove.event;\n\n\tconstructor(\n\t\tcontainer: ViewContainer,\n\t\tviewsService: IViewsService,\n\t\tprotected viewStates = new Map<string, IViewState>(),\n\t) {\n\t\tsuper();\n\t\tconst viewDescriptorCollection = viewsService.getViewDescriptors(container);\n\n\t\tif (viewDescriptorCollection) {\n\t\t\tthis._register(viewDescriptorCollection.onDidChangeActiveViews(() => this.onDidChangeViewDescriptors(viewDescriptorCollection.activeViewDescriptors)));\n\t\t\tthis.onDidChangeViewDescriptors(viewDescriptorCollection.activeViewDescriptors);\n\t\t}\n\t}\n\n\tisVisible(id: string): boolean {\n\t\tconst viewDescriptor = this.viewDescriptors.filter(v => v.id === id)[0];\n\n\t\tif (!viewDescriptor) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\n\t\treturn this.isViewDescriptorVisible(viewDescriptor);\n\t}\n\n\tsetVisible(id: string, visible: boolean, size?: number): void {\n\t\tconst { visibleIndex, viewDescriptor, state } = this.find(id);\n\n\t\tif (!viewDescriptor.canToggleVisibility) {\n\t\t\tthrow new Error(`Can't toggle this view's visibility`);\n\t\t}\n\n\t\tif (this.isViewDescriptorVisible(viewDescriptor) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (viewDescriptor.workspace) {\n\t\t\tstate.visibleWorkspace = visible;\n\t\t} else {\n\t\t\tstate.visibleGlobal = visible;\n\t\t}\n\n\t\tif (typeof size === 'number') {\n\t\t\tstate.size = size;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis._onDidAdd.fire([{ index: visibleIndex, viewDescriptor, size: state.size, collapsed: state.collapsed }]);\n\t\t} else {\n\t\t\tthis._onDidRemove.fire([{ index: visibleIndex, viewDescriptor }]);\n\t\t}\n\t}\n\n\tisCollapsed(id: string): boolean {\n\t\tconst state = this.viewStates.get(id);\n\n\t\tif (!state) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\n\t\treturn state.collapsed;\n\t}\n\n\tsetCollapsed(id: string, collapsed: boolean): void {\n\t\tconst { state } = this.find(id);\n\t\tstate.collapsed = collapsed;\n\t}\n\n\tgetSize(id: string): number | undefined {\n\t\tconst state = this.viewStates.get(id);\n\n\t\tif (!state) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\n\t\treturn state.size;\n\t}\n\n\tsetSize(id: string, size: number): void {\n\t\tconst { state } = this.find(id);\n\t\tstate.size = size;\n\t}\n\n\tmove(from: string, to: string): void {\n\t\tconst fromIndex = firstIndex(this.viewDescriptors, v => v.id === from);\n\t\tconst toIndex = firstIndex(this.viewDescriptors, v => v.id === to);\n\n\t\tconst fromViewDescriptor = this.viewDescriptors[fromIndex];\n\t\tconst toViewDescriptor = this.viewDescriptors[toIndex];\n\n\t\tmove(this.viewDescriptors, fromIndex, toIndex);\n\n\t\tfor (let index = 0; index < this.viewDescriptors.length; index++) {\n\t\t\tconst state = this.viewStates.get(this.viewDescriptors[index].id)!;\n\t\t\tstate.order = index;\n\t\t}\n\n\t\tthis._onDidMove.fire({\n\t\t\tfrom: { index: fromIndex, viewDescriptor: fromViewDescriptor },\n\t\t\tto: { index: toIndex, viewDescriptor: toViewDescriptor }\n\t\t});\n\t}\n\n\tprivate isViewDescriptorVisible(viewDescriptor: IViewDescriptor): boolean {\n\t\tconst viewState = this.viewStates.get(viewDescriptor.id);\n\t\tif (!viewState) {\n\t\t\tthrow new Error(`Unknown view ${viewDescriptor.id}`);\n\t\t}\n\t\treturn viewDescriptor.workspace ? viewState.visibleWorkspace : viewState.visibleGlobal;\n\t}\n\n\tprivate find(id: string): { index: number, visibleIndex: number, viewDescriptor: IViewDescriptor, state: IViewState } {\n\t\tfor (let i = 0, visibleIndex = 0; i < this.viewDescriptors.length; i++) {\n\t\t\tconst viewDescriptor = this.viewDescriptors[i];\n\t\t\tconst state = this.viewStates.get(viewDescriptor.id);\n\t\t\tif (!state) {\n\t\t\t\tthrow new Error(`View state for ${id} not found`);\n\t\t\t}\n\n\t\t\tif (viewDescriptor.id === id) {\n\t\t\t\treturn { index: i, visibleIndex, viewDescriptor, state };\n\t\t\t}\n\n\t\t\tif (viewDescriptor.workspace ? state.visibleWorkspace : state.visibleGlobal) {\n\t\t\t\tvisibleIndex++;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`view descriptor ${id} not found`);\n\t}\n\n\tprivate compareViewDescriptors(a: IViewDescriptor, b: IViewDescriptor): number {\n\t\tif (a.id === b.id) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn (this.getViewOrder(a) - this.getViewOrder(b)) || (a.id < b.id ? -1 : 1);\n\t}\n\n\tprivate getViewOrder(viewDescriptor: IViewDescriptor): number {\n\t\tconst viewState = this.viewStates.get(viewDescriptor.id);\n\t\tconst viewOrder = viewState && typeof viewState.order === 'number' ? viewState.order : viewDescriptor.order;\n\t\treturn typeof viewOrder === 'number' ? viewOrder : Number.MAX_VALUE;\n\t}\n\n\tprivate onDidChangeViewDescriptors(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst ids = new Set<string>();\n\n\t\tfor (const viewDescriptor of this.viewDescriptors) {\n\t\t\tids.add(viewDescriptor.id);\n\t\t}\n\n\t\tviewDescriptors = viewDescriptors.sort(this.compareViewDescriptors.bind(this));\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst viewState = this.viewStates.get(viewDescriptor.id);\n\t\t\tif (viewState) {\n\t\t\t\t// set defaults if not set\n\t\t\t\tif (viewDescriptor.workspace) {\n\t\t\t\t\tviewState.visibleWorkspace = isUndefinedOrNull(viewState.visibleWorkspace) ? !viewDescriptor.hideByDefault : viewState.visibleWorkspace;\n\t\t\t\t} else {\n\t\t\t\t\tviewState.visibleGlobal = isUndefinedOrNull(viewState.visibleGlobal) ? !viewDescriptor.hideByDefault : viewState.visibleGlobal;\n\t\t\t\t}\n\t\t\t\tviewState.collapsed = isUndefinedOrNull(viewState.collapsed) ? !!viewDescriptor.collapsed : viewState.collapsed;\n\t\t\t} else {\n\t\t\t\tthis.viewStates.set(viewDescriptor.id, {\n\t\t\t\t\tvisibleGlobal: !viewDescriptor.hideByDefault,\n\t\t\t\t\tvisibleWorkspace: !viewDescriptor.hideByDefault,\n\t\t\t\t\tcollapsed: !!viewDescriptor.collapsed\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst splices = sortedDiff<IViewDescriptor>(\n\t\t\tthis.viewDescriptors,\n\t\t\tviewDescriptors,\n\t\t\tthis.compareViewDescriptors.bind(this)\n\t\t).reverse();\n\n\t\tconst toRemove: { index: number, viewDescriptor: IViewDescriptor }[] = [];\n\t\tconst toAdd: { index: number, viewDescriptor: IViewDescriptor, size?: number, collapsed: boolean }[] = [];\n\n\t\tfor (const splice of splices) {\n\t\t\tconst startViewDescriptor = this.viewDescriptors[splice.start];\n\t\t\tlet startIndex = startViewDescriptor ? this.find(startViewDescriptor.id).visibleIndex : this.viewDescriptors.length;\n\n\t\t\tfor (let i = 0; i < splice.deleteCount; i++) {\n\t\t\t\tconst viewDescriptor = this.viewDescriptors[splice.start + i];\n\n\t\t\t\tif (this.isViewDescriptorVisible(viewDescriptor)) {\n\t\t\t\t\ttoRemove.push({ index: startIndex++, viewDescriptor });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const viewDescriptor of splice.toInsert) {\n\t\t\t\tconst state = this.viewStates.get(viewDescriptor.id)!;\n\n\t\t\t\tif (this.isViewDescriptorVisible(viewDescriptor)) {\n\t\t\t\t\ttoAdd.push({ index: startIndex++, viewDescriptor, size: state.size, collapsed: state.collapsed });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.viewDescriptors.splice(0, this.viewDescriptors.length, ...viewDescriptors);\n\n\t\tif (toRemove.length) {\n\t\t\tthis._onDidRemove.fire(toRemove);\n\t\t}\n\n\t\tif (toAdd.length) {\n\t\t\tthis._onDidAdd.fire(toAdd);\n\t\t}\n\t}\n}\n\nexport class PersistentContributableViewsModel extends ContributableViewsModel {\n\n\tprivate viewletStateStorageId: string;\n\tprivate readonly hiddenViewsStorageId: string;\n\n\tprivate storageService: IStorageService;\n\n\tconstructor(\n\t\tcontainer: ViewContainer,\n\t\tviewletStateStorageId: string,\n\t\t@IViewsService viewsService: IViewsService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tconst hiddenViewsStorageId = `${viewletStateStorageId}.hidden`;\n\t\tconst viewStates = PersistentContributableViewsModel.loadViewsStates(viewletStateStorageId, hiddenViewsStorageId, storageService);\n\n\t\tsuper(container, viewsService, viewStates);\n\n\t\tthis.viewletStateStorageId = viewletStateStorageId;\n\t\tthis.hiddenViewsStorageId = hiddenViewsStorageId;\n\t\tthis.storageService = storageService;\n\n\t\tthis._register(this.onDidAdd(viewDescriptorRefs => this.saveVisibilityStates(viewDescriptorRefs.map(r => r.viewDescriptor))));\n\t\tthis._register(this.onDidRemove(viewDescriptorRefs => this.saveVisibilityStates(viewDescriptorRefs.map(r => r.viewDescriptor))));\n\t\tthis._register(this.storageService.onWillSaveState(() => this.saveViewsStates()));\n\t}\n\n\tprivate saveViewsStates(): void {\n\t\tconst storedViewsStates: { [id: string]: { collapsed: boolean, size?: number, order?: number } } = {};\n\n\t\tlet hasState = false;\n\t\tfor (const viewDescriptor of this.viewDescriptors) {\n\t\t\tconst viewState = this.viewStates.get(viewDescriptor.id);\n\t\t\tif (viewState) {\n\t\t\t\tstoredViewsStates[viewDescriptor.id] = { collapsed: viewState.collapsed, size: viewState.size, order: viewState.order };\n\t\t\t\thasState = true;\n\t\t\t}\n\t\t}\n\n\t\tif (hasState) {\n\t\t\tthis.storageService.store(this.viewletStateStorageId, JSON.stringify(storedViewsStates), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.viewletStateStorageId, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate saveVisibilityStates(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst globalViews: IViewDescriptor[] = viewDescriptors.filter(v => !v.workspace);\n\t\tconst workspaceViews: IViewDescriptor[] = viewDescriptors.filter(v => v.workspace);\n\t\tif (globalViews.length) {\n\t\t\tthis.saveVisibilityStatesInScope(globalViews, StorageScope.GLOBAL);\n\t\t}\n\t\tif (workspaceViews.length) {\n\t\t\tthis.saveVisibilityStatesInScope(workspaceViews, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate saveVisibilityStatesInScope(viewDescriptors: IViewDescriptor[], scope: StorageScope): void {\n\t\tconst storedViewsVisibilityStates = PersistentContributableViewsModel.loadViewsVisibilityState(this.hiddenViewsStorageId, this.storageService, scope);\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (viewDescriptor.canToggleVisibility) {\n\t\t\t\tconst viewState = this.viewStates.get(viewDescriptor.id);\n\t\t\t\tstoredViewsVisibilityStates.set(viewDescriptor.id, { id: viewDescriptor.id, isHidden: viewState ? (scope === StorageScope.GLOBAL ? !viewState.visibleGlobal : !viewState.visibleWorkspace) : false });\n\t\t\t}\n\t\t}\n\t\tthis.storageService.store(this.hiddenViewsStorageId, JSON.stringify(values(storedViewsVisibilityStates)), scope);\n\t}\n\n\tprivate static loadViewsStates(viewletStateStorageId: string, hiddenViewsStorageId: string, storageService: IStorageService): Map<string, IViewState> {\n\t\tconst viewStates = new Map<string, IViewState>();\n\t\tconst storedViewsStates = JSON.parse(storageService.get(viewletStateStorageId, StorageScope.WORKSPACE, '{}'));\n\t\tconst globalVisibilityStates = this.loadViewsVisibilityState(hiddenViewsStorageId, storageService, StorageScope.GLOBAL);\n\t\tconst workspaceVisibilityStates = this.loadViewsVisibilityState(hiddenViewsStorageId, storageService, StorageScope.WORKSPACE);\n\n\t\tfor (const { id, isHidden } of values(globalVisibilityStates)) {\n\t\t\tconst viewState = storedViewsStates[id];\n\t\t\tif (viewState) {\n\t\t\t\tviewStates.set(id, <IViewState>{ ...viewState, ...{ visibleGlobal: !isHidden } });\n\t\t\t} else {\n\t\t\t\t// New workspace\n\t\t\t\tviewStates.set(id, <IViewState>{ ...{ visibleGlobal: !isHidden } });\n\t\t\t}\n\t\t}\n\t\tfor (const { id, isHidden } of values(workspaceVisibilityStates)) {\n\t\t\tconst viewState = storedViewsStates[id];\n\t\t\tif (viewState) {\n\t\t\t\tviewStates.set(id, <IViewState>{ ...viewState, ...{ visibleWorkspace: !isHidden } });\n\t\t\t} else {\n\t\t\t\t// New workspace\n\t\t\t\tviewStates.set(id, <IViewState>{ ...{ visibleWorkspace: !isHidden } });\n\t\t\t}\n\t\t}\n\t\tfor (const id of Object.keys(storedViewsStates)) {\n\t\t\tif (!viewStates.has(id)) {\n\t\t\t\tviewStates.set(id, <IViewState>{ ...storedViewsStates[id] });\n\t\t\t}\n\t\t}\n\t\treturn viewStates;\n\t}\n\n\tprivate static loadViewsVisibilityState(hiddenViewsStorageId: string, storageService: IStorageService, scope: StorageScope): Map<string, { id: string, isHidden: boolean }> {\n\t\tconst storedVisibilityStates = <Array<string | { id: string, isHidden: boolean }>>JSON.parse(storageService.get(hiddenViewsStorageId, scope, '[]'));\n\t\tlet hasDuplicates = false;\n\t\tconst storedViewsVisibilityStates = storedVisibilityStates.reduce((result, storedState) => {\n\t\t\tif (typeof storedState === 'string' /* migration */) {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState);\n\t\t\t\tresult.set(storedState, { id: storedState, isHidden: true });\n\t\t\t} else {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState.id);\n\t\t\t\tresult.set(storedState.id, storedState);\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Map<string, { id: string, isHidden: boolean }>());\n\n\t\tif (hasDuplicates) {\n\t\t\tstorageService.store(hiddenViewsStorageId, JSON.stringify(values(storedViewsVisibilityStates)), scope);\n\t\t}\n\n\t\treturn storedViewsVisibilityStates;\n\t}\n}\n\nexport class ViewsService extends Disposable implements IViewsService {\n\n\t_serviceBrand: ServiceIdentifier<any>;\n\n\tprivate readonly viewDescriptorCollections: Map<ViewContainer, { viewDescriptorCollection: IViewDescriptorCollection, disposable: IDisposable }>;\n\tprivate readonly viewDisposable: Map<IViewDescriptor, IDisposable>;\n\tprivate readonly activeViewContextKeys: Map<string, IContextKey<boolean>>;\n\n\tconstructor(\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\n\t\tthis.viewDescriptorCollections = new Map<ViewContainer, { viewDescriptorCollection: IViewDescriptorCollection, disposable: IDisposable }>();\n\t\tthis.viewDisposable = new Map<IViewDescriptor, IDisposable>();\n\t\tthis.activeViewContextKeys = new Map<string, IContextKey<boolean>>();\n\n\t\tconst viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry);\n\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\t\tviewContainersRegistry.all.forEach(viewContainer => {\n\t\t\tthis.onDidRegisterViews(viewContainer, viewsRegistry.getViews(viewContainer));\n\t\t\tthis.onDidRegisterViewContainer(viewContainer);\n\t\t});\n\t\tthis._register(viewsRegistry.onViewsRegistered(({ views, viewContainer }) => this.onDidRegisterViews(viewContainer, views)));\n\t\tthis._register(viewsRegistry.onViewsDeregistered(({ views }) => this.onDidDeregisterViews(views)));\n\t\tthis._register(viewsRegistry.onDidChangeContainer(({ views, to }) => { this.onDidDeregisterViews(views); this.onDidRegisterViews(to, views); }));\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.viewDisposable.forEach(disposable => disposable.dispose());\n\t\t\tthis.viewDisposable.clear();\n\t\t}));\n\t\tthis._register(viewContainersRegistry.onDidRegister(viewContainer => this.onDidRegisterViewContainer(viewContainer)));\n\t\tthis._register(viewContainersRegistry.onDidDeregister(viewContainer => this.onDidDeregisterViewContainer(viewContainer)));\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.viewDescriptorCollections.forEach(({ disposable }) => disposable.dispose());\n\t\t\tthis.viewDescriptorCollections.clear();\n\t\t}));\n\t}\n\n\tgetViewDescriptors(container: ViewContainer): IViewDescriptorCollection | null {\n\t\tconst viewDescriptorCollectionItem = this.viewDescriptorCollections.get(container);\n\t\treturn viewDescriptorCollectionItem ? viewDescriptorCollectionItem.viewDescriptorCollection : null;\n\t}\n\n\topenView(id: string, focus: boolean): Promise<IView | null> {\n\t\tconst viewContainer = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).getViewContainer(id);\n\t\tif (viewContainer) {\n\t\t\tconst viewletDescriptor = this.viewletService.getViewlet(viewContainer.id);\n\t\t\tif (viewletDescriptor) {\n\t\t\t\treturn this.viewletService.openViewlet(viewletDescriptor.id, focus)\n\t\t\t\t\t.then((viewlet: IViewsViewlet) => {\n\t\t\t\t\t\tif (viewlet && viewlet.openView) {\n\t\t\t\t\t\t\treturn viewlet.openView(id, focus);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(null);\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst viewDescriptorCollection = new ViewDescriptorCollection(viewContainer, this.contextKeyService);\n\t\tconst disposables: IDisposable[] = [viewDescriptorCollection];\n\n\t\tthis.onDidChangeActiveViews({ added: viewDescriptorCollection.activeViewDescriptors, removed: [] });\n\t\tviewDescriptorCollection.onDidChangeActiveViews(changed => this.onDidChangeActiveViews(changed), this, disposables);\n\n\t\tthis.viewDescriptorCollections.set(viewContainer, { viewDescriptorCollection, disposable: toDisposable(() => dispose(disposables)) });\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst viewDescriptorCollectionItem = this.viewDescriptorCollections.get(viewContainer);\n\t\tif (viewDescriptorCollectionItem) {\n\t\t\tviewDescriptorCollectionItem.disposable.dispose();\n\t\t\tthis.viewDescriptorCollections.delete(viewContainer);\n\t\t}\n\t}\n\n\tprivate onDidChangeActiveViews({ added, removed }: { added: IViewDescriptor[], removed: IViewDescriptor[] }): void {\n\t\tadded.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(true));\n\t\tremoved.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(false));\n\t}\n\n\tprivate onDidRegisterViews(container: ViewContainer, views: IViewDescriptor[]): void {\n\t\tconst viewlet = this.viewletService.getViewlet(container.id);\n\t\tfor (const viewDescriptor of views) {\n\t\t\tconst disposables: IDisposable[] = [];\n\t\t\tconst command: ICommandAction = {\n\t\t\t\tid: viewDescriptor.focusCommand ? viewDescriptor.focusCommand.id : `${viewDescriptor.id}.focus`,\n\t\t\t\ttitle: { original: `Focus on ${viewDescriptor.name} View`, value: localize('focus view', \"Focus on {0} View\", viewDescriptor.name) },\n\t\t\t\tcategory: viewlet ? viewlet.name : localize('view category', \"View\"),\n\t\t\t};\n\t\t\tconst when = ContextKeyExpr.has(`${viewDescriptor.id}.active`);\n\n\t\t\tdisposables.push(CommandsRegistry.registerCommand(command.id, () => this.openView(viewDescriptor.id, true).then(() => null)));\n\n\t\t\tdisposables.push(MenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\t\t\tcommand,\n\t\t\t\twhen\n\t\t\t}));\n\n\t\t\tif (viewDescriptor.focusCommand && viewDescriptor.focusCommand.keybindings) {\n\t\t\t\tKeybindingsRegistry.registerKeybindingRule({\n\t\t\t\t\tid: command.id,\n\t\t\t\t\twhen,\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: viewDescriptor.focusCommand.keybindings.primary,\n\t\t\t\t\tsecondary: viewDescriptor.focusCommand.keybindings.secondary,\n\t\t\t\t\tlinux: viewDescriptor.focusCommand.keybindings.linux,\n\t\t\t\t\tmac: viewDescriptor.focusCommand.keybindings.mac,\n\t\t\t\t\twin: viewDescriptor.focusCommand.keybindings.win\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.viewDisposable.set(viewDescriptor, toDisposable(() => dispose(disposables)));\n\t\t}\n\t}\n\n\tprivate onDidDeregisterViews(views: IViewDescriptor[]): void {\n\t\tfor (const view of views) {\n\t\t\tconst disposable = this.viewDisposable.get(view);\n\t\t\tif (disposable) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tthis.viewDisposable.delete(view);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.active`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n}\n\nexport function createFileIconThemableTreeContainerScope(container: HTMLElement, themeService: IWorkbenchThemeService): IDisposable {\n\taddClass(container, 'file-icon-themable-tree');\n\taddClass(container, 'show-file-icons');\n\n\tconst onDidChangeFileIconTheme = (theme: IFileIconTheme) => {\n\t\ttoggleClass(container, 'align-icons-and-twisties', theme.hasFileIcons && !theme.hasFolderIcons);\n\t\ttoggleClass(container, 'hide-arrows', theme.hidesExplorerArrows === true);\n\t};\n\n\tonDidChangeFileIconTheme(themeService.getFileIconTheme());\n\treturn themeService.onDidFileIconThemeChange(onDidChangeFileIconTheme);\n}\n\nregisterSingleton(IViewsService, ViewsService);"]}]}