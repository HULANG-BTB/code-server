{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/log/node/logIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/log/common/log\", \"vs/base/common/event\"], function (require, exports, log_1, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class LogLevelSetterChannel {\n        constructor(service) {\n            this.service = service;\n            this.onDidChangeLogLevel = event_1.Event.buffer(service.onDidChangeLogLevel, true);\n        }\n        listen(_, event) {\n            switch (event) {\n                case 'onDidChangeLogLevel': return this.onDidChangeLogLevel;\n            }\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command, arg) {\n            switch (command) {\n                case 'setLevel':\n                    this.service.setLevel(arg);\n                    return Promise.resolve();\n            }\n            throw new Error(`Call not found: ${command}`);\n        }\n    }\n    exports.LogLevelSetterChannel = LogLevelSetterChannel;\n    class LogLevelSetterChannelClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        get onDidChangeLogLevel() {\n            return this.channel.listen('onDidChangeLogLevel');\n        }\n        setLevel(level) {\n            this.channel.call('setLevel', level);\n        }\n    }\n    exports.LogLevelSetterChannelClient = LogLevelSetterChannelClient;\n    class FollowerLogService extends log_1.DelegatedLogService {\n        constructor(master, logService) {\n            super(logService);\n            this.master = master;\n            this._register(master.onDidChangeLogLevel(level => logService.setLevel(level)));\n        }\n        setLevel(level) {\n            this.master.setLevel(level);\n        }\n    }\n    exports.FollowerLogService = FollowerLogService;\n});\n",null]}