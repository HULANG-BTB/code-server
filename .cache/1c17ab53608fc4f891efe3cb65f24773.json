{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/emmetActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/emmetActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar TMGrammars_1 = require(\"vs/workbench/services/textMate/common/TMGrammars\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar GrammarContributions = /** @class */ (function () {\n    function GrammarContributions(contributions) {\n        if (!Object.keys(GrammarContributions._grammars).length) {\n            this.fillModeScopeMap(contributions);\n        }\n    }\n    GrammarContributions.prototype.fillModeScopeMap = function (contributions) {\n        contributions.forEach(function (contribution) {\n            contribution.value.forEach(function (grammar) {\n                if (grammar.language && grammar.scopeName) {\n                    GrammarContributions._grammars[grammar.language] = grammar.scopeName;\n                }\n            });\n        });\n    };\n    GrammarContributions.prototype.getGrammar = function (mode) {\n        return GrammarContributions._grammars[mode];\n    };\n    GrammarContributions._grammars = {};\n    return GrammarContributions;\n}());\nvar EmmetEditorAction = /** @class */ (function (_super) {\n    tslib_1.__extends(EmmetEditorAction, _super);\n    function EmmetEditorAction(opts) {\n        var _this = _super.call(this, opts) || this;\n        _this._lastGrammarContributions = null;\n        _this._lastExtensionService = null;\n        _this.emmetActionName = opts.actionName;\n        return _this;\n    }\n    EmmetEditorAction.prototype._withGrammarContributions = function (extensionService) {\n        if (this._lastExtensionService !== extensionService) {\n            this._lastExtensionService = extensionService;\n            this._lastGrammarContributions = extensionService.readExtensionPointContributions(TMGrammars_1.grammarsExtPoint).then(function (contributions) {\n                return new GrammarContributions(contributions);\n            });\n        }\n        return this._lastGrammarContributions || Promise.resolve(null);\n    };\n    EmmetEditorAction.prototype.run = function (accessor, editor) {\n        var _this = this;\n        var extensionService = accessor.get(extensions_1.IExtensionService);\n        var modeService = accessor.get(modeService_1.IModeService);\n        var commandService = accessor.get(commands_1.ICommandService);\n        return this._withGrammarContributions(extensionService).then(function (grammarContributions) {\n            if (_this.id === 'editor.emmet.action.expandAbbreviation' && grammarContributions) {\n                return commandService.executeCommand('emmet.expandAbbreviation', EmmetEditorAction.getLanguage(modeService, editor, grammarContributions));\n            }\n            return undefined;\n        });\n    };\n    EmmetEditorAction.getLanguage = function (languageIdentifierResolver, editor, grammars) {\n        var _this = this;\n        var model = editor.getModel();\n        var selection = editor.getSelection();\n        if (!model || !selection) {\n            return null;\n        }\n        var position = selection.getStartPosition();\n        model.tokenizeIfCheap(position.lineNumber);\n        var languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n        var languageIdentifier = languageIdentifierResolver.getLanguageIdentifier(languageId);\n        var language = languageIdentifier ? languageIdentifier.language : '';\n        var syntax = language.split('.').pop();\n        if (!syntax) {\n            return null;\n        }\n        var checkParentMode = function () {\n            var languageGrammar = grammars.getGrammar(syntax);\n            if (!languageGrammar) {\n                return syntax;\n            }\n            var languages = languageGrammar.split('.');\n            if (languages.length < 2) {\n                return syntax;\n            }\n            for (var i = 1; i < languages.length; i++) {\n                var language_1 = languages[languages.length - i];\n                if (_this.emmetSupportedModes.indexOf(language_1) !== -1) {\n                    return language_1;\n                }\n            }\n            return syntax;\n        };\n        return {\n            language: syntax,\n            parentMode: checkParentMode()\n        };\n    };\n    EmmetEditorAction.emmetSupportedModes = ['html', 'css', 'xml', 'xsl', 'haml', 'jade', 'jsx', 'slim', 'scss', 'sass', 'less', 'stylus', 'styl', 'svg'];\n    return EmmetEditorAction;\n}(editorExtensions_1.EditorAction));\nexports.EmmetEditorAction = EmmetEditorAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/emmetActions.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/emmet/browser/emmetActions.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,uEAAoG;AACpG,+EAA6G;AAC7G,qEAAqE;AACrE,iFAAmH;AACnH,iEAAuE;AAgBvE;IAIC,8BAAY,aAAsE;QACjF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE;YACxD,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;SACrC;IACF,CAAC;IAEO,+CAAgB,GAAxB,UAAyB,aAAsE;QAC9F,aAAa,CAAC,OAAO,CAAC,UAAC,YAAY;YAClC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,OAAO;gBAClC,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,SAAS,EAAE;oBAC1C,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;iBACrE;YACF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,yCAAU,GAAjB,UAAkB,IAAY;QAC7B,OAAO,oBAAoB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IApBc,8BAAS,GAAiB,EAAE,CAAC;IAqB7C,2BAAC;CAAA,AAvBD,IAuBC;AAMD;IAAgD,6CAAY;IAI3D,2BAAY,IAAyB;QAArC,YACC,kBAAM,IAAI,CAAC,SAEX;QAIO,+BAAyB,GAAyC,IAAI,CAAC;QACvE,2BAAqB,GAA6B,IAAI,CAAC;QAN9D,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;;IACxC,CAAC;IAMO,qDAAyB,GAAjC,UAAkC,gBAAmC;QACpE,IAAI,IAAI,CAAC,qBAAqB,KAAK,gBAAgB,EAAE;YACpD,IAAI,CAAC,qBAAqB,GAAG,gBAAgB,CAAC;YAC9C,IAAI,CAAC,yBAAyB,GAAG,gBAAgB,CAAC,+BAA+B,CAAC,6BAAgB,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;gBACtH,OAAO,IAAI,oBAAoB,CAAC,aAAa,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,yBAAyB,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC;IAEM,+BAAG,GAAV,UAAW,QAA0B,EAAE,MAAmB;QAA1D,iBAcC;QAbA,IAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,8BAAiB,CAAC,CAAC;QACzD,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,0BAAY,CAAC,CAAC;QAC/C,IAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,0BAAe,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAC,oBAAoB;YAEjF,IAAI,KAAI,CAAC,EAAE,KAAK,wCAAwC,IAAI,oBAAoB,EAAE;gBACjF,OAAO,cAAc,CAAC,cAAc,CAAO,0BAA0B,EAAE,iBAAiB,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC,CAAC;aACjJ;YAED,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,CAAC;IAEJ,CAAC;IAEa,6BAAW,GAAzB,UAA0B,0BAAuD,EAAE,MAAmB,EAAE,QAA+B;QAAvI,iBAyCC;QAxCA,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAExC,IAAI,CAAC,KAAK,IAAI,CAAC,SAAS,EAAE;YACzB,OAAO,IAAI,CAAC;SACZ;QAED,IAAM,QAAQ,GAAG,SAAS,CAAC,gBAAgB,EAAE,CAAC;QAC9C,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC3C,IAAM,UAAU,GAAG,KAAK,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvF,IAAM,kBAAkB,GAAG,0BAA0B,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACxF,IAAM,QAAQ,GAAG,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;QACvE,IAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QAEzC,IAAI,CAAC,MAAM,EAAE;YACZ,OAAO,IAAI,CAAC;SACZ;QAED,IAAI,eAAe,GAAG;YACrB,IAAI,eAAe,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAClD,IAAI,CAAC,eAAe,EAAE;gBACrB,OAAO,MAAM,CAAC;aACd;YACD,IAAI,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,OAAO,MAAM,CAAC;aACd;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAM,UAAQ,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACjD,IAAI,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,UAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;oBACtD,OAAO,UAAQ,CAAC;iBAChB;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC,CAAC;QAEF,OAAO;YACN,QAAQ,EAAE,MAAM;YAChB,UAAU,EAAE,eAAe,EAAE;SAC7B,CAAC;IACH,CAAC;IAvEuB,qCAAmB,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IA0E7J,wBAAC;CAAA,AAnFD,CAAgD,+BAAY,GAmF3D;AAnFqB,8CAAiB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorAction, ServicesAccessor, IActionOptions } from 'vs/editor/browser/editorExtensions';\nimport { grammarsExtPoint, ITMSyntaxExtensionPoint } from 'vs/workbench/services/textMate/common/TMGrammars';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport { IExtensionService, ExtensionPointContribution } from 'vs/workbench/services/extensions/common/extensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { LanguageId, LanguageIdentifier } from 'vs/editor/common/modes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\n\ninterface ModeScopeMap {\n\t[key: string]: string;\n}\n\nexport interface IGrammarContributions {\n\tgetGrammar(mode: string): string;\n}\n\nexport interface ILanguageIdentifierResolver {\n\tgetLanguageIdentifier(modeId: string | LanguageId): LanguageIdentifier | null;\n}\n\nclass GrammarContributions implements IGrammarContributions {\n\n\tprivate static _grammars: ModeScopeMap = {};\n\n\tconstructor(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tif (!Object.keys(GrammarContributions._grammars).length) {\n\t\t\tthis.fillModeScopeMap(contributions);\n\t\t}\n\t}\n\n\tprivate fillModeScopeMap(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tcontributions.forEach((contribution) => {\n\t\t\tcontribution.value.forEach((grammar) => {\n\t\t\t\tif (grammar.language && grammar.scopeName) {\n\t\t\t\t\tGrammarContributions._grammars[grammar.language] = grammar.scopeName;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn GrammarContributions._grammars[mode];\n\t}\n}\n\nexport interface IEmmetActionOptions extends IActionOptions {\n\tactionName: string;\n}\n\nexport abstract class EmmetEditorAction extends EditorAction {\n\n\tprotected emmetActionName: string;\n\n\tconstructor(opts: IEmmetActionOptions) {\n\t\tsuper(opts);\n\t\tthis.emmetActionName = opts.actionName;\n\t}\n\n\tprivate static readonly emmetSupportedModes = ['html', 'css', 'xml', 'xsl', 'haml', 'jade', 'jsx', 'slim', 'scss', 'sass', 'less', 'stylus', 'styl', 'svg'];\n\n\tprivate _lastGrammarContributions: Promise<GrammarContributions> | null = null;\n\tprivate _lastExtensionService: IExtensionService | null = null;\n\tprivate _withGrammarContributions(extensionService: IExtensionService): Promise<GrammarContributions | null> {\n\t\tif (this._lastExtensionService !== extensionService) {\n\t\t\tthis._lastExtensionService = extensionService;\n\t\t\tthis._lastGrammarContributions = extensionService.readExtensionPointContributions(grammarsExtPoint).then((contributions) => {\n\t\t\t\treturn new GrammarContributions(contributions);\n\t\t\t});\n\t\t}\n\t\treturn this._lastGrammarContributions || Promise.resolve(null);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst modeService = accessor.get(IModeService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\treturn this._withGrammarContributions(extensionService).then((grammarContributions) => {\n\n\t\t\tif (this.id === 'editor.emmet.action.expandAbbreviation' && grammarContributions) {\n\t\t\t\treturn commandService.executeCommand<void>('emmet.expandAbbreviation', EmmetEditorAction.getLanguage(modeService, editor, grammarContributions));\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\n\t}\n\n\tpublic static getLanguage(languageIdentifierResolver: ILanguageIdentifierResolver, editor: ICodeEditor, grammars: IGrammarContributions) {\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (!model || !selection) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst position = selection.getStartPosition();\n\t\tmodel.tokenizeIfCheap(position.lineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tconst languageIdentifier = languageIdentifierResolver.getLanguageIdentifier(languageId);\n\t\tconst language = languageIdentifier ? languageIdentifier.language : '';\n\t\tconst syntax = language.split('.').pop();\n\n\t\tif (!syntax) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet checkParentMode = (): string => {\n\t\t\tlet languageGrammar = grammars.getGrammar(syntax);\n\t\t\tif (!languageGrammar) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tlet languages = languageGrammar.split('.');\n\t\t\tif (languages.length < 2) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tfor (let i = 1; i < languages.length; i++) {\n\t\t\t\tconst language = languages[languages.length - i];\n\t\t\t\tif (this.emmetSupportedModes.indexOf(language) !== -1) {\n\t\t\t\t\treturn language;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn syntax;\n\t\t};\n\n\t\treturn {\n\t\t\tlanguage: syntax,\n\t\t\tparentMode: checkParentMode()\n\t\t};\n\t}\n\n\n}\n"]}]}