{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/relauncher/electron-browser/relauncher.contribution.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/workbench/common/contributions\", \"vs/platform/registry/common/platform\", \"vs/platform/windows/common/windows\", \"vs/platform/configuration/common/configuration\", \"vs/nls\", \"vs/platform/environment/common/environment\", \"vs/platform/workspace/common/workspace\", \"vs/workbench/services/extensions/common/extensions\", \"vs/base/common/async\", \"vs/base/common/resources\", \"vs/base/common/platform\", \"vs/base/browser/browser\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/platform/dialogs/common/dialogs\", \"vs/base/common/objects\"], function (require, exports, lifecycle_1, contributions_1, platform_1, windows_1, configuration_1, nls_1, environment_1, workspace_1, extensions_1, async_1, resources_1, platform_2, browser_1, lifecycle_2, dialogs_1, objects_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let SettingsChangeRelauncher = class SettingsChangeRelauncher extends lifecycle_1.Disposable {\n        constructor(windowsService, windowService, configurationService, envService, dialogService, contextService) {\n            super();\n            this.windowsService = windowsService;\n            this.windowService = windowService;\n            this.configurationService = configurationService;\n            this.envService = envService;\n            this.dialogService = dialogService;\n            this.contextService = contextService;\n            this.onConfigurationChange(configurationService.getValue(), false);\n            this._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(this.configurationService.getValue(), true)));\n        }\n        onConfigurationChange(config, notify) {\n            let changed = false;\n            // Titlebar style\n            if (config.window && config.window.titleBarStyle !== this.titleBarStyle && (config.window.titleBarStyle === 'native' || config.window.titleBarStyle === 'custom')) {\n                this.titleBarStyle = config.window.titleBarStyle;\n                changed = true;\n            }\n            // macOS: Native tabs\n            if (platform_2.isNative && browser_1.isMacintosh && config.window && typeof config.window.nativeTabs === 'boolean' && config.window.nativeTabs !== this.nativeTabs) {\n                this.nativeTabs = config.window.nativeTabs;\n                changed = true;\n            }\n            // macOS: Native fullscreen\n            if (platform_2.isNative && browser_1.isMacintosh && config.window && typeof config.window.nativeFullScreen === 'boolean' && config.window.nativeFullScreen !== this.nativeFullScreen) {\n                this.nativeFullScreen = config.window.nativeFullScreen;\n                changed = true;\n            }\n            // macOS: Click through (accept first mouse)\n            if (browser_1.isMacintosh && config.window && typeof config.window.clickThroughInactive === 'boolean' && config.window.clickThroughInactive !== this.clickThroughInactive) {\n                this.clickThroughInactive = config.window.clickThroughInactive;\n                changed = true;\n            }\n            // Update channel\n            if (config.update && typeof config.update.mode === 'string' && config.update.mode !== this.updateMode) {\n                this.updateMode = config.update.mode;\n                changed = true;\n            }\n            // Crash reporter\n            if (config.telemetry && typeof config.telemetry.enableCrashReporter === 'boolean' && config.telemetry.enableCrashReporter !== this.enableCrashReporter) {\n                this.enableCrashReporter = config.telemetry.enableCrashReporter;\n                changed = true;\n            }\n            // Experimental File Watcher\n            if (config.files && typeof config.files.useExperimentalFileWatcher === 'boolean' && config.files.useExperimentalFileWatcher !== this.experimentalFileWatcher) {\n                this.experimentalFileWatcher = config.files.useExperimentalFileWatcher;\n                changed = true;\n            }\n            // File Watcher Excludes (only if in folder workspace mode)\n            if (!this.experimentalFileWatcher && this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                if (config.files && typeof config.files.watcherExclude === 'object' && !objects_1.equals(config.files.watcherExclude, this.fileWatcherExclude)) {\n                    this.fileWatcherExclude = config.files.watcherExclude;\n                    changed = true;\n                }\n            }\n            // macOS: Touchbar config\n            if (browser_1.isMacintosh && config.keyboard && config.keyboard.touchbar && typeof config.keyboard.touchbar.enabled === 'boolean' && config.keyboard.touchbar.enabled !== this.touchbarEnabled) {\n                this.touchbarEnabled = config.keyboard.touchbar.enabled;\n                changed = true;\n            }\n            // Tree horizontal scrolling support\n            if (config.workbench && config.workbench.list && typeof config.workbench.list.horizontalScrolling === 'boolean' && config.workbench.list.horizontalScrolling !== this.treeHorizontalScrolling) {\n                this.treeHorizontalScrolling = config.workbench.list.horizontalScrolling;\n                changed = true;\n            }\n            // Workbench Grid Layout\n            if (config.workbench && typeof config.workbench.useExperimentalGridLayout === 'boolean' && config.workbench.useExperimentalGridLayout !== this.useGridLayout) {\n                this.useGridLayout = config.workbench.useExperimentalGridLayout;\n                changed = true;\n            }\n            // Notify only when changed and we are the focused window (avoids notification spam across windows)\n            if (notify && changed) {\n                this.doConfirm(nls_1.localize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\"), nls_1.localize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.envService.appNameLong), nls_1.localize('restart', \"&&Restart\"), () => this.windowsService.relaunch(Object.create(null)));\n            }\n        }\n        doConfirm(message, detail, primaryButton, confirmed) {\n            this.windowService.isFocused().then(focused => {\n                if (focused) {\n                    return this.dialogService.confirm({\n                        type: 'info',\n                        message,\n                        detail,\n                        primaryButton\n                    }).then(res => {\n                        if (res.confirmed) {\n                            confirmed();\n                        }\n                    });\n                }\n                return undefined;\n            });\n        }\n    };\n    SettingsChangeRelauncher = __decorate([\n        __param(0, windows_1.IWindowsService),\n        __param(1, windows_1.IWindowService),\n        __param(2, configuration_1.IConfigurationService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, dialogs_1.IDialogService),\n        __param(5, workspace_1.IWorkspaceContextService)\n    ], SettingsChangeRelauncher);\n    exports.SettingsChangeRelauncher = SettingsChangeRelauncher;\n    let WorkspaceChangeExtHostRelauncher = class WorkspaceChangeExtHostRelauncher extends lifecycle_1.Disposable {\n        constructor(contextService, extensionService, windowSevice, environmentService) {\n            super();\n            this.contextService = contextService;\n            this.extensionHostRestarter = this._register(new async_1.RunOnceScheduler(() => {\n                if (!!environmentService.extensionTestsLocationURI) {\n                    return; // no restart when in tests: see https://github.com/Microsoft/vscode/issues/66936\n                }\n                if (windowSevice.getConfiguration().remoteAuthority) {\n                    windowSevice.reloadWindow(); // TODO aeschli, workaround\n                }\n                else {\n                    extensionService.restartExtensionHost();\n                }\n            }, 10));\n            this.contextService.getCompleteWorkspace()\n                .then(workspace => {\n                this.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n                this.handleWorkbenchState();\n                this._register(this.contextService.onDidChangeWorkbenchState(() => setTimeout(() => this.handleWorkbenchState())));\n            });\n            this._register(lifecycle_1.toDisposable(() => {\n                if (this.onDidChangeWorkspaceFoldersUnbind) {\n                    this.onDidChangeWorkspaceFoldersUnbind.dispose();\n                }\n            }));\n        }\n        handleWorkbenchState() {\n            // React to folder changes when we are in workspace state\n            if (this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE) {\n                // Update our known first folder path if we entered workspace\n                const workspace = this.contextService.getWorkspace();\n                this.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n                // Install workspace folder listener\n                if (!this.onDidChangeWorkspaceFoldersUnbind) {\n                    this.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(() => this.onDidChangeWorkspaceFolders());\n                }\n            }\n            // Ignore the workspace folder changes in EMPTY or FOLDER state\n            else {\n                this.onDidChangeWorkspaceFoldersUnbind = lifecycle_1.dispose(this.onDidChangeWorkspaceFoldersUnbind);\n            }\n        }\n        onDidChangeWorkspaceFolders() {\n            const workspace = this.contextService.getWorkspace();\n            // Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n            const newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n            if (!resources_1.isEqual(this.firstFolderResource, newFirstFolderResource, !platform_2.isLinux)) {\n                this.firstFolderResource = newFirstFolderResource;\n                this.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n            }\n        }\n    };\n    WorkspaceChangeExtHostRelauncher = __decorate([\n        __param(0, workspace_1.IWorkspaceContextService),\n        __param(1, extensions_1.IExtensionService),\n        __param(2, windows_1.IWindowService),\n        __param(3, environment_1.IEnvironmentService)\n    ], WorkspaceChangeExtHostRelauncher);\n    exports.WorkspaceChangeExtHostRelauncher = WorkspaceChangeExtHostRelauncher;\n    const workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, lifecycle_2.LifecyclePhase.Restored);\n    workbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, lifecycle_2.LifecyclePhase.Restored);\n});\n",null]}