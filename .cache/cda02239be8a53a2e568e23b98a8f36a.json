{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uri_1 = require(\"vs/base/common/uri\");\nvar URLServiceChannel = /** @class */ (function () {\n    function URLServiceChannel(service) {\n        this.service = service;\n    }\n    URLServiceChannel.prototype.listen = function (_, event) {\n        throw new Error(\"Event not found: \" + event);\n    };\n    URLServiceChannel.prototype.call = function (_, command, arg) {\n        switch (command) {\n            case 'open': return this.service.open(uri_1.URI.revive(arg));\n        }\n        throw new Error(\"Call not found: \" + command);\n    };\n    return URLServiceChannel;\n}());\nexports.URLServiceChannel = URLServiceChannel;\nvar URLServiceChannelClient = /** @class */ (function () {\n    function URLServiceChannelClient(channel) {\n        this.channel = channel;\n    }\n    URLServiceChannelClient.prototype.open = function (url) {\n        return this.channel.call('open', url.toJSON());\n    };\n    URLServiceChannelClient.prototype.registerHandler = function (handler) {\n        throw new Error('Not implemented.');\n    };\n    return URLServiceChannelClient;\n}());\nexports.URLServiceChannelClient = URLServiceChannelClient;\nvar URLHandlerChannel = /** @class */ (function () {\n    function URLHandlerChannel(handler) {\n        this.handler = handler;\n    }\n    URLHandlerChannel.prototype.listen = function (_, event) {\n        throw new Error(\"Event not found: \" + event);\n    };\n    URLHandlerChannel.prototype.call = function (_, command, arg) {\n        switch (command) {\n            case 'handleURL': return this.handler.handleURL(uri_1.URI.revive(arg));\n        }\n        throw new Error(\"Call not found: \" + command);\n    };\n    return URLHandlerChannel;\n}());\nexports.URLHandlerChannel = URLHandlerChannel;\nvar URLHandlerChannelClient = /** @class */ (function () {\n    function URLHandlerChannelClient(channel) {\n        this.channel = channel;\n    }\n    URLHandlerChannelClient.prototype.handleURL = function (uri) {\n        return this.channel.call('handleURL', uri.toJSON());\n    };\n    return URLHandlerChannelClient;\n}());\nexports.URLHandlerChannelClient = URLHandlerChannelClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/url/node/urlIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,0CAAyC;AAKzC;IAEC,2BAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,kCAAM,GAAN,UAAU,CAAU,EAAE,KAAa;QAClC,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,gCAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,GAAS;QAC1C,QAAQ,OAAO,EAAE;YAChB,KAAK,MAAM,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACvD;QAED,MAAM,IAAI,KAAK,CAAC,qBAAmB,OAAS,CAAC,CAAC;IAC/C,CAAC;IACF,wBAAC;AAAD,CAAC,AAfD,IAeC;AAfY,8CAAiB;AAiB9B;IAIC,iCAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,sCAAI,GAAJ,UAAK,GAAQ;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,iDAAe,GAAf,UAAgB,OAAoB;QACnC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACrC,CAAC;IACF,8BAAC;AAAD,CAAC,AAbD,IAaC;AAbY,0DAAuB;AAepC;IAEC,2BAAoB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAAI,CAAC;IAE7C,kCAAM,GAAN,UAAU,CAAU,EAAE,KAAa;QAClC,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,gCAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,GAAS;QAC1C,QAAQ,OAAO,EAAE;YAChB,KAAK,WAAW,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACjE;QAED,MAAM,IAAI,KAAK,CAAC,qBAAmB,OAAS,CAAC,CAAC;IAC/C,CAAC;IACF,wBAAC;AAAD,CAAC,AAfD,IAeC;AAfY,8CAAiB;AAiB9B;IAEC,iCAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;IAAI,CAAC;IAE1C,2CAAS,GAAT,UAAU,GAAQ;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;IACrD,CAAC;IACF,8BAAC;AAAD,CAAC,AAPD,IAOC;AAPY,0DAAuB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { IURLService, IURLHandler } from 'vs/platform/url/common/url';\n\nexport class URLServiceChannel implements IServerChannel {\n\n\tconstructor(private service: IURLService) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'open': return this.service.open(URI.revive(arg));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class URLServiceChannelClient implements IURLService {\n\n\t_serviceBrand: any;\n\n\tconstructor(private channel: IChannel) { }\n\n\topen(url: URI): Promise<boolean> {\n\t\treturn this.channel.call('open', url.toJSON());\n\t}\n\n\tregisterHandler(handler: IURLHandler): IDisposable {\n\t\tthrow new Error('Not implemented.');\n\t}\n}\n\nexport class URLHandlerChannel implements IServerChannel {\n\n\tconstructor(private handler: IURLHandler) { }\n\n\tlisten<T>(_: unknown, event: string): Event<T> {\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'handleURL': return this.handler.handleURL(URI.revive(arg));\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class URLHandlerChannelClient implements IURLHandler {\n\n\tconstructor(private channel: IChannel) { }\n\n\thandleURL(uri: URI): Promise<boolean> {\n\t\treturn this.channel.call('handleURL', uri.toJSON());\n\t}\n}\n"]}]}