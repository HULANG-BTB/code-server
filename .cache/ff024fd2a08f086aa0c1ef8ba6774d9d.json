{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/contextkey/browser/contextKeyService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/contextkey/browser/contextKeyService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar map_1 = require(\"vs/base/common/map\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar keybindingResolver_1 = require(\"vs/platform/keybinding/common/keybindingResolver\");\nvar KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nvar Context = /** @class */ (function () {\n    function Context(id, parent) {\n        this._id = id;\n        this._parent = parent;\n        this._value = Object.create(null);\n        this._value['_contextId'] = id;\n    }\n    Context.prototype.setValue = function (key, value) {\n        // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n        if (this._value[key] !== value) {\n            this._value[key] = value;\n            return true;\n        }\n        return false;\n    };\n    Context.prototype.removeValue = function (key) {\n        // console.log('REMOVE ' + key + ' FROM ' + this._id);\n        if (key in this._value) {\n            delete this._value[key];\n            return true;\n        }\n        return false;\n    };\n    Context.prototype.getValue = function (key) {\n        var ret = this._value[key];\n        if (typeof ret === 'undefined' && this._parent) {\n            return this._parent.getValue(key);\n        }\n        return ret;\n    };\n    Context.prototype.collectAllValues = function () {\n        var result = this._parent ? this._parent.collectAllValues() : Object.create(null);\n        result = tslib_1.__assign({}, result, this._value);\n        delete result['_contextId'];\n        return result;\n    };\n    return Context;\n}());\nexports.Context = Context;\nvar NullContext = /** @class */ (function (_super) {\n    tslib_1.__extends(NullContext, _super);\n    function NullContext() {\n        return _super.call(this, -1, null) || this;\n    }\n    NullContext.prototype.setValue = function (key, value) {\n        return false;\n    };\n    NullContext.prototype.removeValue = function (key) {\n        return false;\n    };\n    NullContext.prototype.getValue = function (key) {\n        return undefined;\n    };\n    NullContext.prototype.collectAllValues = function () {\n        return Object.create(null);\n    };\n    NullContext.INSTANCE = new NullContext();\n    return NullContext;\n}(Context));\nvar ConfigAwareContextValuesContainer = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfigAwareContextValuesContainer, _super);\n    function ConfigAwareContextValuesContainer(id, _configurationService, emitter) {\n        var _this = _super.call(this, id, null) || this;\n        _this._configurationService = _configurationService;\n        _this._values = new Map();\n        _this._listener = _this._configurationService.onDidChangeConfiguration(function (event) {\n            if (event.source === configuration_1.ConfigurationTarget.DEFAULT) {\n                // new setting, reset everything\n                var allKeys = map_1.keys(_this._values);\n                _this._values.clear();\n                emitter.fire(allKeys);\n            }\n            else {\n                var changedKeys = [];\n                for (var _i = 0, _a = event.affectedKeys; _i < _a.length; _i++) {\n                    var configKey = _a[_i];\n                    var contextKey = \"config.\" + configKey;\n                    if (_this._values.has(contextKey)) {\n                        _this._values.delete(contextKey);\n                        changedKeys.push(contextKey);\n                    }\n                }\n                emitter.fire(changedKeys);\n            }\n        });\n        return _this;\n    }\n    ConfigAwareContextValuesContainer.prototype.dispose = function () {\n        this._listener.dispose();\n    };\n    ConfigAwareContextValuesContainer.prototype.getValue = function (key) {\n        if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n            return _super.prototype.getValue.call(this, key);\n        }\n        if (this._values.has(key)) {\n            return this._values.get(key);\n        }\n        var configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n        var configValue = this._configurationService.getValue(configKey);\n        var value = undefined;\n        switch (typeof configValue) {\n            case 'number':\n            case 'boolean':\n            case 'string':\n                value = configValue;\n                break;\n        }\n        this._values.set(key, value);\n        return value;\n    };\n    ConfigAwareContextValuesContainer.prototype.setValue = function (key, value) {\n        return _super.prototype.setValue.call(this, key, value);\n    };\n    ConfigAwareContextValuesContainer.prototype.removeValue = function (key) {\n        return _super.prototype.removeValue.call(this, key);\n    };\n    ConfigAwareContextValuesContainer.prototype.collectAllValues = function () {\n        var result = Object.create(null);\n        this._values.forEach(function (value, index) { return result[index] = value; });\n        return tslib_1.__assign({}, result, _super.prototype.collectAllValues.call(this));\n    };\n    ConfigAwareContextValuesContainer._keyPrefix = 'config.';\n    return ConfigAwareContextValuesContainer;\n}(Context));\nvar ContextKey = /** @class */ (function () {\n    function ContextKey(parent, key, defaultValue) {\n        this._parent = parent;\n        this._key = key;\n        this._defaultValue = defaultValue;\n        this.reset();\n    }\n    ContextKey.prototype.set = function (value) {\n        this._parent.setContext(this._key, value);\n    };\n    ContextKey.prototype.reset = function () {\n        if (typeof this._defaultValue === 'undefined') {\n            this._parent.removeContext(this._key);\n        }\n        else {\n            this._parent.setContext(this._key, this._defaultValue);\n        }\n    };\n    ContextKey.prototype.get = function () {\n        return this._parent.getContextKeyValue(this._key);\n    };\n    return ContextKey;\n}());\nvar SimpleContextKeyChangeEvent = /** @class */ (function () {\n    function SimpleContextKeyChangeEvent(_key) {\n        this._key = _key;\n    }\n    SimpleContextKeyChangeEvent.prototype.affectsSome = function (keys) {\n        return keys.has(this._key);\n    };\n    return SimpleContextKeyChangeEvent;\n}());\nvar ArrayContextKeyChangeEvent = /** @class */ (function () {\n    function ArrayContextKeyChangeEvent(_keys) {\n        this._keys = _keys;\n    }\n    ArrayContextKeyChangeEvent.prototype.affectsSome = function (keys) {\n        for (var _i = 0, _a = this._keys; _i < _a.length; _i++) {\n            var key = _a[_i];\n            if (keys.has(key)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return ArrayContextKeyChangeEvent;\n}());\nvar AbstractContextKeyService = /** @class */ (function () {\n    function AbstractContextKeyService(myContextId) {\n        this._isDisposed = false;\n        this._myContextId = myContextId;\n        this._onDidChangeContextKey = new event_1.Emitter();\n    }\n    AbstractContextKeyService.prototype.createKey = function (key, defaultValue) {\n        if (this._isDisposed) {\n            throw new Error(\"AbstractContextKeyService has been disposed\");\n        }\n        return new ContextKey(this, key, defaultValue);\n    };\n    Object.defineProperty(AbstractContextKeyService.prototype, \"onDidChangeContext\", {\n        get: function () {\n            if (!this._onDidChangeContext) {\n                this._onDidChangeContext = event_1.Event.map(this._onDidChangeContextKey.event, (function (changedKeyOrKeys) {\n                    return typeof changedKeyOrKeys === 'string'\n                        ? new SimpleContextKeyChangeEvent(changedKeyOrKeys)\n                        : new ArrayContextKeyChangeEvent(changedKeyOrKeys);\n                }));\n            }\n            return this._onDidChangeContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractContextKeyService.prototype.createScoped = function (domNode) {\n        if (this._isDisposed) {\n            throw new Error(\"AbstractContextKeyService has been disposed\");\n        }\n        return new ScopedContextKeyService(this, this._onDidChangeContextKey, domNode);\n    };\n    AbstractContextKeyService.prototype.contextMatchesRules = function (rules) {\n        if (this._isDisposed) {\n            throw new Error(\"AbstractContextKeyService has been disposed\");\n        }\n        var context = this.getContextValuesContainer(this._myContextId);\n        var result = keybindingResolver_1.KeybindingResolver.contextMatchesRules(context, rules);\n        // console.group(rules.serialize() + ' -> ' + result);\n        // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n        // console.groupEnd();\n        return result;\n    };\n    AbstractContextKeyService.prototype.getContextKeyValue = function (key) {\n        if (this._isDisposed) {\n            return undefined;\n        }\n        return this.getContextValuesContainer(this._myContextId).getValue(key);\n    };\n    AbstractContextKeyService.prototype.setContext = function (key, value) {\n        if (this._isDisposed) {\n            return;\n        }\n        var myContext = this.getContextValuesContainer(this._myContextId);\n        if (!myContext) {\n            return;\n        }\n        if (myContext.setValue(key, value)) {\n            this._onDidChangeContextKey.fire(key);\n        }\n    };\n    AbstractContextKeyService.prototype.removeContext = function (key) {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n            this._onDidChangeContextKey.fire(key);\n        }\n    };\n    AbstractContextKeyService.prototype.getContext = function (target) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this.getContextValuesContainer(findContextAttr(target));\n    };\n    return AbstractContextKeyService;\n}());\nexports.AbstractContextKeyService = AbstractContextKeyService;\nvar ContextKeyService = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextKeyService, _super);\n    function ContextKeyService(configurationService) {\n        var _this = _super.call(this, 0) || this;\n        _this._toDispose = [];\n        _this._lastContextId = 0;\n        _this._contexts = Object.create(null);\n        var myContext = new ConfigAwareContextValuesContainer(_this._myContextId, configurationService, _this._onDidChangeContextKey);\n        _this._contexts[String(_this._myContextId)] = myContext;\n        _this._toDispose.push(myContext);\n        return _this;\n        // Uncomment this to see the contexts continuously logged\n        // let lastLoggedValue: string | null = null;\n        // setInterval(() => {\n        // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n        // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n        // \tif (lastLoggedValue !== logValue) {\n        // \t\tlastLoggedValue = logValue;\n        // \t\tconsole.log(lastLoggedValue);\n        // \t}\n        // }, 2000);\n    }\n    ContextKeyService.prototype.dispose = function () {\n        this._isDisposed = true;\n        this._toDispose = lifecycle_1.dispose(this._toDispose);\n    };\n    ContextKeyService.prototype.getContextValuesContainer = function (contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._contexts[String(contextId)];\n    };\n    ContextKeyService.prototype.createChildContext = function (parentContextId) {\n        if (parentContextId === void 0) { parentContextId = this._myContextId; }\n        if (this._isDisposed) {\n            throw new Error(\"ContextKeyService has been disposed\");\n        }\n        var id = (++this._lastContextId);\n        this._contexts[String(id)] = new Context(id, this.getContextValuesContainer(parentContextId));\n        return id;\n    };\n    ContextKeyService.prototype.disposeContext = function (contextId) {\n        if (this._isDisposed) {\n            return;\n        }\n        delete this._contexts[String(contextId)];\n    };\n    ContextKeyService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService)\n    ], ContextKeyService);\n    return ContextKeyService;\n}(AbstractContextKeyService));\nexports.ContextKeyService = ContextKeyService;\nvar ScopedContextKeyService = /** @class */ (function (_super) {\n    tslib_1.__extends(ScopedContextKeyService, _super);\n    function ScopedContextKeyService(parent, emitter, domNode) {\n        var _this = _super.call(this, parent.createChildContext()) || this;\n        _this._parent = parent;\n        _this._onDidChangeContextKey = emitter;\n        if (domNode) {\n            _this._domNode = domNode;\n            _this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(_this._myContextId));\n        }\n        return _this;\n    }\n    ScopedContextKeyService.prototype.dispose = function () {\n        this._isDisposed = true;\n        this._parent.disposeContext(this._myContextId);\n        if (this._domNode) {\n            this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n            this._domNode = undefined;\n        }\n    };\n    Object.defineProperty(ScopedContextKeyService.prototype, \"onDidChangeContext\", {\n        get: function () {\n            return this._parent.onDidChangeContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScopedContextKeyService.prototype.getContextValuesContainer = function (contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._parent.getContextValuesContainer(contextId);\n    };\n    ScopedContextKeyService.prototype.createChildContext = function (parentContextId) {\n        if (parentContextId === void 0) { parentContextId = this._myContextId; }\n        if (this._isDisposed) {\n            throw new Error(\"ScopedContextKeyService has been disposed\");\n        }\n        return this._parent.createChildContext(parentContextId);\n    };\n    ScopedContextKeyService.prototype.disposeContext = function (contextId) {\n        if (this._isDisposed) {\n            return;\n        }\n        this._parent.disposeContext(contextId);\n    };\n    return ScopedContextKeyService;\n}(AbstractContextKeyService));\nfunction findContextAttr(domNode) {\n    while (domNode) {\n        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n            var attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n            if (attr) {\n                return parseInt(attr, 10);\n            }\n            return NaN;\n        }\n        domNode = domNode.parentElement;\n    }\n    return 0;\n}\ncommands_1.CommandsRegistry.registerCommand(contextkey_1.SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n    accessor.get(contextkey_1.IContextKeyService).createKey(String(contextKey), contextValue);\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/contextkey/browser/contextKeyService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/contextkey/browser/contextKeyService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { keys } from 'vs/base/common/map';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr, IContext, IContextKey, IContextKeyChangeEvent, IContextKeyService, IContextKeyServiceTarget, IReadableSet, SET_CONTEXT_COMMAND_ID } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingResolver } from 'vs/platform/keybinding/common/keybindingResolver';\n\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\n\nexport class Context implements IContext {\n\n\tprotected _parent: Context | null;\n\tprotected _value: { [key: string]: any; };\n\tprotected _id: number;\n\n\tconstructor(id: number, parent: Context | null) {\n\t\tthis._id = id;\n\t\tthis._parent = parent;\n\t\tthis._value = Object.create(null);\n\t\tthis._value['_contextId'] = id;\n\t}\n\n\tpublic setValue(key: string, value: any): boolean {\n\t\t// console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n\t\tif (this._value[key] !== value) {\n\t\t\tthis._value[key] = value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic removeValue(key: string): boolean {\n\t\t// console.log('REMOVE ' + key + ' FROM ' + this._id);\n\t\tif (key in this._value) {\n\t\t\tdelete this._value[key];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getValue<T>(key: string): T | undefined {\n\t\tconst ret = this._value[key];\n\t\tif (typeof ret === 'undefined' && this._parent) {\n\t\t\treturn this._parent.getValue<T>(key);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tcollectAllValues(): { [key: string]: any; } {\n\t\tlet result = this._parent ? this._parent.collectAllValues() : Object.create(null);\n\t\tresult = { ...result, ...this._value };\n\t\tdelete result['_contextId'];\n\t\treturn result;\n\t}\n}\n\nclass NullContext extends Context {\n\n\tstatic readonly INSTANCE = new NullContext();\n\n\tconstructor() {\n\t\tsuper(-1, null);\n\t}\n\n\tpublic setValue(key: string, value: any): boolean {\n\t\treturn false;\n\t}\n\n\tpublic removeValue(key: string): boolean {\n\t\treturn false;\n\t}\n\n\tpublic getValue<T>(key: string): T | undefined {\n\t\treturn undefined;\n\t}\n\n\tcollectAllValues(): { [key: string]: any; } {\n\t\treturn Object.create(null);\n\t}\n}\n\nclass ConfigAwareContextValuesContainer extends Context {\n\n\tprivate static _keyPrefix = 'config.';\n\n\tprivate readonly _values = new Map<string, any>();\n\tprivate readonly _listener: IDisposable;\n\n\tconstructor(\n\t\tid: number,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\temitter: Emitter<string | string[]>\n\t) {\n\t\tsuper(id, null);\n\n\t\tthis._listener = this._configurationService.onDidChangeConfiguration(event => {\n\t\t\tif (event.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t// new setting, reset everything\n\t\t\t\tconst allKeys = keys(this._values);\n\t\t\t\tthis._values.clear();\n\t\t\t\temitter.fire(allKeys);\n\t\t\t} else {\n\t\t\t\tconst changedKeys: string[] = [];\n\t\t\t\tfor (const configKey of event.affectedKeys) {\n\t\t\t\t\tconst contextKey = `config.${configKey}`;\n\t\t\t\t\tif (this._values.has(contextKey)) {\n\t\t\t\t\t\tthis._values.delete(contextKey);\n\t\t\t\t\t\tchangedKeys.push(contextKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\temitter.fire(changedKeys);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._listener.dispose();\n\t}\n\n\tgetValue(key: string): any {\n\n\t\tif (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n\t\t\treturn super.getValue(key);\n\t\t}\n\n\t\tif (this._values.has(key)) {\n\t\t\treturn this._values.get(key);\n\t\t}\n\n\t\tconst configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n\t\tconst configValue = this._configurationService.getValue(configKey);\n\t\tlet value: any = undefined;\n\t\tswitch (typeof configValue) {\n\t\t\tcase 'number':\n\t\t\tcase 'boolean':\n\t\t\tcase 'string':\n\t\t\t\tvalue = configValue;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis._values.set(key, value);\n\t\treturn value;\n\t}\n\n\tsetValue(key: string, value: any): boolean {\n\t\treturn super.setValue(key, value);\n\t}\n\n\tremoveValue(key: string): boolean {\n\t\treturn super.removeValue(key);\n\t}\n\n\tcollectAllValues(): { [key: string]: any; } {\n\t\tconst result: { [key: string]: any } = Object.create(null);\n\t\tthis._values.forEach((value, index) => result[index] = value);\n\t\treturn { ...result, ...super.collectAllValues() };\n\t}\n}\n\nclass ContextKey<T> implements IContextKey<T> {\n\n\tprivate _parent: AbstractContextKeyService;\n\tprivate _key: string;\n\tprivate _defaultValue: T | undefined;\n\n\tconstructor(parent: AbstractContextKeyService, key: string, defaultValue: T | undefined) {\n\t\tthis._parent = parent;\n\t\tthis._key = key;\n\t\tthis._defaultValue = defaultValue;\n\t\tthis.reset();\n\t}\n\n\tpublic set(value: T): void {\n\t\tthis._parent.setContext(this._key, value);\n\t}\n\n\tpublic reset(): void {\n\t\tif (typeof this._defaultValue === 'undefined') {\n\t\t\tthis._parent.removeContext(this._key);\n\t\t} else {\n\t\t\tthis._parent.setContext(this._key, this._defaultValue);\n\t\t}\n\t}\n\n\tpublic get(): T | undefined {\n\t\treturn this._parent.getContextKeyValue<T>(this._key);\n\t}\n}\n\nclass SimpleContextKeyChangeEvent implements IContextKeyChangeEvent {\n\tconstructor(private readonly _key: string) { }\n\taffectsSome(keys: IReadableSet<string>): boolean {\n\t\treturn keys.has(this._key);\n\t}\n}\nclass ArrayContextKeyChangeEvent implements IContextKeyChangeEvent {\n\tconstructor(private readonly _keys: string[]) { }\n\taffectsSome(keys: IReadableSet<string>): boolean {\n\t\tfor (const key of this._keys) {\n\t\t\tif (keys.has(key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport abstract class AbstractContextKeyService implements IContextKeyService {\n\tpublic _serviceBrand: any;\n\n\tprotected _isDisposed: boolean;\n\tprotected _onDidChangeContext: Event<IContextKeyChangeEvent>;\n\tprotected _onDidChangeContextKey: Emitter<string | string[]>;\n\tprotected _myContextId: number;\n\n\tconstructor(myContextId: number) {\n\t\tthis._isDisposed = false;\n\t\tthis._myContextId = myContextId;\n\t\tthis._onDidChangeContextKey = new Emitter<string>();\n\t}\n\n\tabstract dispose(): void;\n\n\tpublic createKey<T>(key: string, defaultValue: T | undefined): IContextKey<T> {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\treturn new ContextKey(this, key, defaultValue);\n\t}\n\n\tpublic get onDidChangeContext(): Event<IContextKeyChangeEvent> {\n\t\tif (!this._onDidChangeContext) {\n\t\t\tthis._onDidChangeContext = Event.map(this._onDidChangeContextKey.event, ((changedKeyOrKeys): IContextKeyChangeEvent => {\n\t\t\t\treturn typeof changedKeyOrKeys === 'string'\n\t\t\t\t\t? new SimpleContextKeyChangeEvent(changedKeyOrKeys)\n\t\t\t\t\t: new ArrayContextKeyChangeEvent(changedKeyOrKeys);\n\t\t\t}));\n\t\t}\n\t\treturn this._onDidChangeContext;\n\t}\n\n\tpublic createScoped(domNode: IContextKeyServiceTarget): IContextKeyService {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\treturn new ScopedContextKeyService(this, this._onDidChangeContextKey, domNode);\n\t}\n\n\tpublic contextMatchesRules(rules: ContextKeyExpr | undefined): boolean {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`AbstractContextKeyService has been disposed`);\n\t\t}\n\t\tconst context = this.getContextValuesContainer(this._myContextId);\n\t\tconst result = KeybindingResolver.contextMatchesRules(context, rules);\n\t\t// console.group(rules.serialize() + ' -> ' + result);\n\t\t// rules.keys().forEach(key => { console.log(key, ctx[key]); });\n\t\t// console.groupEnd();\n\t\treturn result;\n\t}\n\n\tpublic getContextKeyValue<T>(key: string): T | undefined {\n\t\tif (this._isDisposed) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.getContextValuesContainer(this._myContextId).getValue<T>(key);\n\t}\n\n\tpublic setContext(key: string, value: any): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst myContext = this.getContextValuesContainer(this._myContextId);\n\t\tif (!myContext) {\n\t\t\treturn;\n\t\t}\n\t\tif (myContext.setValue(key, value)) {\n\t\t\tthis._onDidChangeContextKey.fire(key);\n\t\t}\n\t}\n\n\tpublic removeContext(key: string): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n\t\t\tthis._onDidChangeContextKey.fire(key);\n\t\t}\n\t}\n\n\tpublic getContext(target: IContextKeyServiceTarget | null): IContext {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this.getContextValuesContainer(findContextAttr(target));\n\t}\n\n\tpublic abstract getContextValuesContainer(contextId: number): Context;\n\tpublic abstract createChildContext(parentContextId?: number): number;\n\tpublic abstract disposeContext(contextId: number): void;\n}\n\nexport class ContextKeyService extends AbstractContextKeyService implements IContextKeyService {\n\n\tprivate _lastContextId: number;\n\tprivate _contexts: {\n\t\t[contextId: string]: Context;\n\t};\n\n\tprivate _toDispose: IDisposable[] = [];\n\n\tconstructor(@IConfigurationService configurationService: IConfigurationService) {\n\t\tsuper(0);\n\t\tthis._lastContextId = 0;\n\t\tthis._contexts = Object.create(null);\n\n\t\tconst myContext = new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContextKey);\n\t\tthis._contexts[String(this._myContextId)] = myContext;\n\t\tthis._toDispose.push(myContext);\n\n\t\t// Uncomment this to see the contexts continuously logged\n\t\t// let lastLoggedValue: string | null = null;\n\t\t// setInterval(() => {\n\t\t// \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n\t\t// \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n\t\t// \tif (lastLoggedValue !== logValue) {\n\t\t// \t\tlastLoggedValue = logValue;\n\t\t// \t\tconsole.log(lastLoggedValue);\n\t\t// \t}\n\t\t// }, 2000);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tthis._toDispose = dispose(this._toDispose);\n\t}\n\n\tpublic getContextValuesContainer(contextId: number): Context {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this._contexts[String(contextId)];\n\t}\n\n\tpublic createChildContext(parentContextId: number = this._myContextId): number {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`ContextKeyService has been disposed`);\n\t\t}\n\t\tlet id = (++this._lastContextId);\n\t\tthis._contexts[String(id)] = new Context(id, this.getContextValuesContainer(parentContextId));\n\t\treturn id;\n\t}\n\n\tpublic disposeContext(contextId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._contexts[String(contextId)];\n\t}\n}\n\nclass ScopedContextKeyService extends AbstractContextKeyService {\n\n\tprivate _parent: AbstractContextKeyService;\n\tprivate _domNode: IContextKeyServiceTarget | undefined;\n\n\tconstructor(parent: AbstractContextKeyService, emitter: Emitter<string | string[]>, domNode?: IContextKeyServiceTarget) {\n\t\tsuper(parent.createChildContext());\n\t\tthis._parent = parent;\n\t\tthis._onDidChangeContextKey = emitter;\n\n\t\tif (domNode) {\n\t\t\tthis._domNode = domNode;\n\t\t\tthis._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tthis._parent.disposeContext(this._myContextId);\n\t\tif (this._domNode) {\n\t\t\tthis._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n\t\t\tthis._domNode = undefined;\n\t\t}\n\t}\n\n\tpublic get onDidChangeContext(): Event<IContextKeyChangeEvent> {\n\t\treturn this._parent.onDidChangeContext;\n\t}\n\n\tpublic getContextValuesContainer(contextId: number): Context {\n\t\tif (this._isDisposed) {\n\t\t\treturn NullContext.INSTANCE;\n\t\t}\n\t\treturn this._parent.getContextValuesContainer(contextId);\n\t}\n\n\tpublic createChildContext(parentContextId: number = this._myContextId): number {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new Error(`ScopedContextKeyService has been disposed`);\n\t\t}\n\t\treturn this._parent.createChildContext(parentContextId);\n\t}\n\n\tpublic disposeContext(contextId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._parent.disposeContext(contextId);\n\t}\n}\n\nfunction findContextAttr(domNode: IContextKeyServiceTarget | null): number {\n\twhile (domNode) {\n\t\tif (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n\t\t\tconst attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n\t\t\tif (attr) {\n\t\t\t\treturn parseInt(attr, 10);\n\t\t\t}\n\t\t\treturn NaN;\n\t\t}\n\t\tdomNode = domNode.parentElement;\n\t}\n\treturn 0;\n}\n\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey: any, contextValue: any) {\n\taccessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});\n"]}]}