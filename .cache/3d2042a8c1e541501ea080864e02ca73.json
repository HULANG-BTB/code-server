{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizations.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizations.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar jsonContributionRegistry_1 = require(\"vs/platform/jsonschemas/common/jsonContributionRegistry\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar localizationsActions_1 = require(\"vs/workbench/contrib/localizations/browser/localizationsActions\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar localizations_1 = require(\"vs/platform/localizations/common/localizations\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar platform = require(\"vs/base/common/platform\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar jsonEditing_1 = require(\"vs/workbench/services/configuration/common/jsonEditing\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar path_1 = require(\"vs/base/common/path\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar minimalTranslations_1 = require(\"vs/workbench/contrib/localizations/browser/minimalTranslations\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar extensions_2 = require(\"vs/platform/extensions/common/extensions\");\n// Register action to configure locale and related settings\nvar registry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(localizationsActions_1.ConfigureLocaleAction, localizationsActions_1.ConfigureLocaleAction.ID, localizationsActions_1.ConfigureLocaleAction.LABEL), 'Configure Display Language');\nvar LocalizationWorkbenchContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(LocalizationWorkbenchContribution, _super);\n    function LocalizationWorkbenchContribution(localizationService, notificationService, jsonEditingService, environmentService, windowsService, storageService, extensionManagementService, galleryService, viewletService, telemetryService) {\n        var _this = _super.call(this) || this;\n        _this.localizationService = localizationService;\n        _this.notificationService = notificationService;\n        _this.jsonEditingService = jsonEditingService;\n        _this.environmentService = environmentService;\n        _this.windowsService = windowsService;\n        _this.storageService = storageService;\n        _this.extensionManagementService = extensionManagementService;\n        _this.galleryService = galleryService;\n        _this.viewletService = viewletService;\n        _this.telemetryService = telemetryService;\n        _this.updateLocaleDefintionSchema();\n        _this.checkAndInstall();\n        _this._register(_this.localizationService.onDidLanguagesChange(function () { return _this.updateLocaleDefintionSchema(); }));\n        _this._register(_this.extensionManagementService.onDidInstallExtension(function (e) { return _this.onDidInstallExtension(e); }));\n        return _this;\n    }\n    LocalizationWorkbenchContribution.prototype.updateLocaleDefintionSchema = function () {\n        this.localizationService.getLanguageIds()\n            .then(function (languageIds) {\n            var lowercaseLanguageIds = [];\n            languageIds.forEach(function (languageId) {\n                var lowercaseLanguageId = languageId.toLowerCase();\n                if (lowercaseLanguageId !== languageId) {\n                    lowercaseLanguageIds.push(lowercaseLanguageId);\n                }\n            });\n            registerLocaleDefinitionSchema(languageIds.concat(lowercaseLanguageIds));\n        });\n    };\n    LocalizationWorkbenchContribution.prototype.onDidInstallExtension = function (e) {\n        var _this = this;\n        var donotAskUpdateKey = 'langugage.update.donotask';\n        if (!this.storageService.getBoolean(donotAskUpdateKey, storage_1.StorageScope.GLOBAL) && e.local && e.operation === extensionManagement_1.InstallOperation.Install && e.local.manifest.contributes && e.local.manifest.contributes.localizations && e.local.manifest.contributes.localizations.length) {\n            var locale_1 = e.local.manifest.contributes.localizations[0].languageId;\n            if (platform.language !== locale_1) {\n                var updateAndRestart_1 = platform.locale !== locale_1;\n                this.notificationService.prompt(severity_1.default.Info, updateAndRestart_1 ? nls_1.localize('updateLocale', \"Would you like to change VS Code's UI language to {0} and restart?\", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId)\n                    : nls_1.localize('activateLanguagePack', \"In order to use VS Code in {0}, VS Code needs to restart.\", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId), [{\n                        label: updateAndRestart_1 ? nls_1.localize('yes', \"Yes\") : nls_1.localize('restart now', \"Restart Now\"),\n                        run: function () {\n                            var file = uri_1.URI.file(path_1.join(_this.environmentService.appSettingsHome, 'locale.json'));\n                            var updatePromise = updateAndRestart_1 ? _this.jsonEditingService.write(file, { key: 'locale', value: locale_1 }, true) : Promise.resolve(undefined);\n                            updatePromise.then(function () { return _this.windowsService.relaunch({}); }, function (e) { return _this.notificationService.error(e); });\n                        }\n                    }, {\n                        label: nls_1.localize('neverAgain', \"Don't Show Again\"),\n                        isSecondary: true,\n                        run: function () { return _this.storageService.store(donotAskUpdateKey, true, storage_1.StorageScope.GLOBAL); }\n                    }], { sticky: true });\n            }\n        }\n    };\n    LocalizationWorkbenchContribution.prototype.checkAndInstall = function () {\n        var _this = this;\n        var language = platform.language;\n        var locale = platform.locale;\n        var languagePackSuggestionIgnoreList = JSON.parse(this.storageService.get('extensionsAssistant/languagePackSuggestionIgnore', storage_1.StorageScope.GLOBAL, '[]'));\n        if (!this.galleryService.isEnabled()) {\n            return;\n        }\n        if (!language || !locale || language === 'en' || language.indexOf('en-') === 0) {\n            return;\n        }\n        if (language === locale || languagePackSuggestionIgnoreList.indexOf(language) > -1) {\n            return;\n        }\n        this.isLanguageInstalled(locale)\n            .then(function (installed) {\n            if (installed) {\n                return;\n            }\n            _this.galleryService.query({ text: \"tag:lp-\" + locale }, cancellation_1.CancellationToken.None).then(function (tagResult) {\n                if (tagResult.total === 0) {\n                    return;\n                }\n                var extensionToInstall = tagResult.total === 1 ? tagResult.firstPage[0] : tagResult.firstPage.filter(function (e) { return e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0; })[0];\n                var extensionToFetchTranslationsFrom = extensionToInstall || tagResult.firstPage[0];\n                if (!extensionToFetchTranslationsFrom.assets.manifest) {\n                    return;\n                }\n                Promise.all([_this.galleryService.getManifest(extensionToFetchTranslationsFrom, cancellation_1.CancellationToken.None), _this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, locale)])\n                    .then(function (_a) {\n                    var manifest = _a[0], translation = _a[1];\n                    var loc = manifest && manifest.contributes && manifest.contributes.localizations && manifest.contributes.localizations.filter(function (x) { return x.languageId.toLowerCase() === locale; })[0];\n                    var languageName = loc ? (loc.languageName || locale) : locale;\n                    var languageDisplayName = loc ? (loc.localizedLanguageName || loc.languageName || locale) : locale;\n                    var translationsFromPack = translation && translation.contents ? translation.contents['vs/workbench/contrib/localizations/browser/minimalTranslations'] : {};\n                    var promptMessageKey = extensionToInstall ? 'installAndRestartMessage' : 'showLanguagePackExtensions';\n                    var useEnglish = !translationsFromPack[promptMessageKey];\n                    var translations = {};\n                    Object.keys(minimalTranslations_1.minimumTranslatedStrings).forEach(function (key) {\n                        if (!translationsFromPack[key] || useEnglish) {\n                            translations[key] = minimalTranslations_1.minimumTranslatedStrings[key].replace('{0}', languageName);\n                        }\n                        else {\n                            translations[key] = translationsFromPack[key].replace('{0}', languageDisplayName) + \" (\" + minimalTranslations_1.minimumTranslatedStrings[key].replace('{0}', languageName) + \")\";\n                        }\n                    });\n                    var logUserReaction = function (userReaction) {\n                        /* __GDPR__\n                            \"languagePackSuggestion:popup\" : {\n                                \"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                                \"language\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                            }\n                        */\n                        _this.telemetryService.publicLog('languagePackSuggestion:popup', { userReaction: userReaction, language: language });\n                    };\n                    var searchAction = {\n                        label: translations['searchMarketplace'],\n                        run: function () {\n                            logUserReaction('search');\n                            _this.viewletService.openViewlet(extensions_1.VIEWLET_ID, true)\n                                .then(function (viewlet) { return viewlet; })\n                                .then(function (viewlet) {\n                                viewlet.search(\"tag:lp-\" + locale);\n                                viewlet.focus();\n                            });\n                        }\n                    };\n                    var installAndRestartAction = {\n                        label: translations['installAndRestart'],\n                        run: function () {\n                            logUserReaction('installAndRestart');\n                            _this.installExtension(extensionToInstall).then(function () { return _this.windowsService.relaunch({}); });\n                        }\n                    };\n                    var promptMessage = translations[promptMessageKey];\n                    _this.notificationService.prompt(severity_1.default.Info, promptMessage, [extensionToInstall ? installAndRestartAction : searchAction,\n                        {\n                            label: nls_1.localize('neverAgain', \"Don't Show Again\"),\n                            isSecondary: true,\n                            run: function () {\n                                languagePackSuggestionIgnoreList.push(language);\n                                _this.storageService.store('extensionsAssistant/languagePackSuggestionIgnore', JSON.stringify(languagePackSuggestionIgnoreList), storage_1.StorageScope.GLOBAL);\n                                logUserReaction('neverShowAgain');\n                            }\n                        }], {\n                        onCancel: function () {\n                            logUserReaction('cancelled');\n                        }\n                    });\n                });\n            });\n        });\n    };\n    LocalizationWorkbenchContribution.prototype.isLanguageInstalled = function (language) {\n        return this.extensionManagementService.getInstalled(extensions_2.ExtensionType.User)\n            .then(function (installed) { return installed.some(function (i) {\n            return !!(i.manifest\n                && i.manifest.contributes\n                && i.manifest.contributes.localizations\n                && i.manifest.contributes.localizations.length\n                && i.manifest.contributes.localizations.some(function (l) { return l.languageId.toLowerCase() === language; }));\n        }); });\n    };\n    LocalizationWorkbenchContribution.prototype.installExtension = function (extension) {\n        var _this = this;\n        return this.viewletService.openViewlet(extensions_1.VIEWLET_ID)\n            .then(function (viewlet) { return viewlet; })\n            .then(function (viewlet) { return viewlet.search(\"@id:\" + extension.identifier.id); })\n            .then(function () { return _this.extensionManagementService.installFromGallery(extension); })\n            .then(function () { return undefined; }, function (err) { return _this.notificationService.error(err); });\n    };\n    LocalizationWorkbenchContribution = tslib_1.__decorate([\n        tslib_1.__param(0, localizations_1.ILocalizationsService),\n        tslib_1.__param(1, notification_1.INotificationService),\n        tslib_1.__param(2, jsonEditing_1.IJSONEditingService),\n        tslib_1.__param(3, environment_1.IEnvironmentService),\n        tslib_1.__param(4, windows_1.IWindowsService),\n        tslib_1.__param(5, storage_1.IStorageService),\n        tslib_1.__param(6, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(7, extensionManagement_1.IExtensionGalleryService),\n        tslib_1.__param(8, viewlet_1.IViewletService),\n        tslib_1.__param(9, telemetry_1.ITelemetryService)\n    ], LocalizationWorkbenchContribution);\n    return LocalizationWorkbenchContribution;\n}(lifecycle_1.Disposable));\nexports.LocalizationWorkbenchContribution = LocalizationWorkbenchContribution;\nfunction registerLocaleDefinitionSchema(languages) {\n    var localeDefinitionFileSchemaId = 'vscode://schemas/locale';\n    var jsonRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\n    // Keep en-US since we generated files with that content.\n    jsonRegistry.registerSchema(localeDefinitionFileSchemaId, {\n        id: localeDefinitionFileSchemaId,\n        allowComments: true,\n        description: 'Locale Definition file',\n        type: 'object',\n        default: {\n            'locale': 'en'\n        },\n        required: ['locale'],\n        properties: {\n            locale: {\n                type: 'string',\n                enum: languages,\n                description: nls_1.localize('JsonSchema.locale', 'The UI Language to use.')\n            }\n        }\n    });\n}\nregisterLocaleDefinitionSchema(platform.language ? [platform.language] : []);\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(LocalizationWorkbenchContribution, lifecycle_2.LifecyclePhase.Eventually);\nextensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'localizations',\n    jsonSchema: {\n        description: nls_1.localize('vscode.extension.contributes.localizations', \"Contributes localizations to the editor\"),\n        type: 'array',\n        default: [],\n        items: {\n            type: 'object',\n            required: ['languageId', 'translations'],\n            defaultSnippets: [{ body: { languageId: '', languageName: '', localizedLanguageName: '', translations: [{ id: 'vscode', path: '' }] } }],\n            properties: {\n                languageId: {\n                    description: nls_1.localize('vscode.extension.contributes.localizations.languageId', 'Id of the language into which the display strings are translated.'),\n                    type: 'string'\n                },\n                languageName: {\n                    description: nls_1.localize('vscode.extension.contributes.localizations.languageName', 'Name of the language in English.'),\n                    type: 'string'\n                },\n                localizedLanguageName: {\n                    description: nls_1.localize('vscode.extension.contributes.localizations.languageNameLocalized', 'Name of the language in contributed language.'),\n                    type: 'string'\n                },\n                translations: {\n                    description: nls_1.localize('vscode.extension.contributes.localizations.translations', 'List of translations associated to the language.'),\n                    type: 'array',\n                    default: [{ id: 'vscode', path: '' }],\n                    items: {\n                        type: 'object',\n                        required: ['id', 'path'],\n                        properties: {\n                            id: {\n                                type: 'string',\n                                description: nls_1.localize('vscode.extension.contributes.localizations.translations.id', \"Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`.\"),\n                                pattern: '^((vscode)|([a-z0-9A-Z][a-z0-9\\-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9\\-A-Z]*))$',\n                                patternErrorMessage: nls_1.localize('vscode.extension.contributes.localizations.translations.id.pattern', \"Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively.\")\n                            },\n                            path: {\n                                type: 'string',\n                                description: nls_1.localize('vscode.extension.contributes.localizations.translations.path', \"A relative path to a file containing translations for the language.\")\n                            }\n                        },\n                        defaultSnippets: [{ body: { id: '', path: '' } }],\n                    },\n                }\n            }\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizations.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/localizations/browser/localizations.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IWorkbenchActionRegistry, Extensions } from 'vs/workbench/common/actions';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ConfigureLocaleAction } from 'vs/workbench/contrib/localizations/browser/localizationsActions';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ILocalizationsService } from 'vs/platform/localizations/common/localizations';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport { IExtensionManagementService, DidInstallExtensionEvent, IExtensionGalleryService, IGalleryExtension, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport Severity from 'vs/base/common/severity';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { URI } from 'vs/base/common/uri';\nimport { join } from 'vs/base/common/path';\nimport { IWindowsService } from 'vs/platform/windows/common/windows';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { VIEWLET_ID as EXTENSIONS_VIEWLET_ID, IExtensionsViewlet } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { minimumTranslatedStrings } from 'vs/workbench/contrib/localizations/browser/minimalTranslations';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\n\n// Register action to configure locale and related settings\nconst registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ConfigureLocaleAction, ConfigureLocaleAction.ID, ConfigureLocaleAction.LABEL), 'Configure Display Language');\n\nexport class LocalizationWorkbenchContribution extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@ILocalizationsService private readonly localizationService: ILocalizationsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IWindowsService private readonly windowsService: IWindowsService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\t\tthis.updateLocaleDefintionSchema();\n\t\tthis.checkAndInstall();\n\t\tthis._register(this.localizationService.onDidLanguagesChange(() => this.updateLocaleDefintionSchema()));\n\t\tthis._register(this.extensionManagementService.onDidInstallExtension(e => this.onDidInstallExtension(e)));\n\t}\n\n\tprivate updateLocaleDefintionSchema(): void {\n\t\tthis.localizationService.getLanguageIds()\n\t\t\t.then(languageIds => {\n\t\t\t\tlet lowercaseLanguageIds: string[] = [];\n\t\t\t\tlanguageIds.forEach((languageId) => {\n\t\t\t\t\tlet lowercaseLanguageId = languageId.toLowerCase();\n\t\t\t\t\tif (lowercaseLanguageId !== languageId) {\n\t\t\t\t\t\tlowercaseLanguageIds.push(lowercaseLanguageId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tregisterLocaleDefinitionSchema([...languageIds, ...lowercaseLanguageIds]);\n\t\t\t});\n\t}\n\n\tprivate onDidInstallExtension(e: DidInstallExtensionEvent): void {\n\t\tconst donotAskUpdateKey = 'langugage.update.donotask';\n\t\tif (!this.storageService.getBoolean(donotAskUpdateKey, StorageScope.GLOBAL) && e.local && e.operation === InstallOperation.Install && e.local.manifest.contributes && e.local.manifest.contributes.localizations && e.local.manifest.contributes.localizations.length) {\n\t\t\tconst locale = e.local.manifest.contributes.localizations[0].languageId;\n\t\t\tif (platform.language !== locale) {\n\t\t\t\tconst updateAndRestart = platform.locale !== locale;\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tupdateAndRestart ? localize('updateLocale', \"Would you like to change VS Code's UI language to {0} and restart?\", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId)\n\t\t\t\t\t\t: localize('activateLanguagePack', \"In order to use VS Code in {0}, VS Code needs to restart.\", e.local.manifest.contributes.localizations[0].languageName || e.local.manifest.contributes.localizations[0].languageId),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: updateAndRestart ? localize('yes', \"Yes\") : localize('restart now', \"Restart Now\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tconst file = URI.file(join(this.environmentService.appSettingsHome, 'locale.json'));\n\t\t\t\t\t\t\tconst updatePromise = updateAndRestart ? this.jsonEditingService.write(file, { key: 'locale', value: locale }, true) : Promise.resolve(undefined);\n\t\t\t\t\t\t\tupdatePromise.then(() => this.windowsService.relaunch({}), e => this.notificationService.error(e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\trun: () => this.storageService.store(donotAskUpdateKey, true, StorageScope.GLOBAL)\n\t\t\t\t\t}],\n\t\t\t\t\t{ sticky: true }\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate checkAndInstall(): void {\n\t\tconst language = platform.language;\n\t\tconst locale = platform.locale;\n\t\tconst languagePackSuggestionIgnoreList = <string[]>JSON.parse(this.storageService.get('extensionsAssistant/languagePackSuggestionIgnore', StorageScope.GLOBAL, '[]'));\n\n\t\tif (!this.galleryService.isEnabled()) {\n\t\t\treturn;\n\t\t}\n\t\tif (!language || !locale || language === 'en' || language.indexOf('en-') === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (language === locale || languagePackSuggestionIgnoreList.indexOf(language) > -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isLanguageInstalled(locale)\n\t\t\t.then(installed => {\n\t\t\t\tif (installed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.galleryService.query({ text: `tag:lp-${locale}` }, CancellationToken.None).then(tagResult => {\n\t\t\t\t\tif (tagResult.total === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst extensionToInstall = tagResult.total === 1 ? tagResult.firstPage[0] : tagResult.firstPage.filter(e => e.publisher === 'MS-CEINTL' && e.name.indexOf('vscode-language-pack') === 0)[0];\n\t\t\t\t\tconst extensionToFetchTranslationsFrom = extensionToInstall || tagResult.firstPage[0];\n\n\t\t\t\t\tif (!extensionToFetchTranslationsFrom.assets.manifest) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tPromise.all([this.galleryService.getManifest(extensionToFetchTranslationsFrom, CancellationToken.None), this.galleryService.getCoreTranslation(extensionToFetchTranslationsFrom, locale)])\n\t\t\t\t\t\t.then(([manifest, translation]) => {\n\t\t\t\t\t\t\tconst loc = manifest && manifest.contributes && manifest.contributes.localizations && manifest.contributes.localizations.filter(x => x.languageId.toLowerCase() === locale)[0];\n\t\t\t\t\t\t\tconst languageName = loc ? (loc.languageName || locale) : locale;\n\t\t\t\t\t\t\tconst languageDisplayName = loc ? (loc.localizedLanguageName || loc.languageName || locale) : locale;\n\t\t\t\t\t\t\tconst translationsFromPack = translation && translation.contents ? translation.contents['vs/workbench/contrib/localizations/browser/minimalTranslations'] : {};\n\t\t\t\t\t\t\tconst promptMessageKey = extensionToInstall ? 'installAndRestartMessage' : 'showLanguagePackExtensions';\n\t\t\t\t\t\t\tconst useEnglish = !translationsFromPack[promptMessageKey];\n\n\t\t\t\t\t\t\tconst translations = {};\n\t\t\t\t\t\t\tObject.keys(minimumTranslatedStrings).forEach(key => {\n\t\t\t\t\t\t\t\tif (!translationsFromPack[key] || useEnglish) {\n\t\t\t\t\t\t\t\t\ttranslations[key] = minimumTranslatedStrings[key].replace('{0}', languageName);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttranslations[key] = `${translationsFromPack[key].replace('{0}', languageDisplayName)} (${minimumTranslatedStrings[key].replace('{0}', languageName)})`;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst logUserReaction = (userReaction: string) => {\n\t\t\t\t\t\t\t\t/* __GDPR__\n\t\t\t\t\t\t\t\t\t\"languagePackSuggestion:popup\" : {\n\t\t\t\t\t\t\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\t\t\t\t\t\"language\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t\t\tthis.telemetryService.publicLog('languagePackSuggestion:popup', { userReaction, language });\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst searchAction = {\n\t\t\t\t\t\t\t\tlabel: translations['searchMarketplace'],\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tlogUserReaction('search');\n\t\t\t\t\t\t\t\t\tthis.viewletService.openViewlet(EXTENSIONS_VIEWLET_ID, true)\n\t\t\t\t\t\t\t\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t\t\t\t\t\t\t\t.then(viewlet => {\n\t\t\t\t\t\t\t\t\t\t\tviewlet.search(`tag:lp-${locale}`);\n\t\t\t\t\t\t\t\t\t\t\tviewlet.focus();\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst installAndRestartAction = {\n\t\t\t\t\t\t\t\tlabel: translations['installAndRestart'],\n\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\tlogUserReaction('installAndRestart');\n\t\t\t\t\t\t\t\t\tthis.installExtension(extensionToInstall).then(() => this.windowsService.relaunch({}));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst promptMessage = translations[promptMessageKey];\n\n\t\t\t\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\t\t\t\tSeverity.Info,\n\t\t\t\t\t\t\t\tpromptMessage,\n\t\t\t\t\t\t\t\t[extensionToInstall ? installAndRestartAction : searchAction,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\t\t\t\t\t\tisSecondary: true,\n\t\t\t\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\t\t\t\tlanguagePackSuggestionIgnoreList.push(language);\n\t\t\t\t\t\t\t\t\t\tthis.storageService.store(\n\t\t\t\t\t\t\t\t\t\t\t'extensionsAssistant/languagePackSuggestionIgnore',\n\t\t\t\t\t\t\t\t\t\t\tJSON.stringify(languagePackSuggestionIgnoreList),\n\t\t\t\t\t\t\t\t\t\t\tStorageScope.GLOBAL\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tlogUserReaction('neverShowAgain');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t\t\t\tlogUserReaction('cancelled');\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t}\n\n\tprivate isLanguageInstalled(language: string | undefined): Promise<boolean> {\n\t\treturn this.extensionManagementService.getInstalled(ExtensionType.User)\n\t\t\t.then(installed => installed.some(i =>\n\t\t\t\t!!(i.manifest\n\t\t\t\t\t&& i.manifest.contributes\n\t\t\t\t\t&& i.manifest.contributes.localizations\n\t\t\t\t\t&& i.manifest.contributes.localizations.length\n\t\t\t\t\t&& i.manifest.contributes.localizations.some(l => l.languageId.toLowerCase() === language))));\n\t}\n\n\tprivate installExtension(extension: IGalleryExtension): Promise<void> {\n\t\treturn this.viewletService.openViewlet(EXTENSIONS_VIEWLET_ID)\n\t\t\t.then(viewlet => viewlet as IExtensionsViewlet)\n\t\t\t.then(viewlet => viewlet.search(`@id:${extension.identifier.id}`))\n\t\t\t.then(() => this.extensionManagementService.installFromGallery(extension))\n\t\t\t.then(() => undefined, err => this.notificationService.error(err));\n\t}\n}\n\nfunction registerLocaleDefinitionSchema(languages: string[]): void {\n\tconst localeDefinitionFileSchemaId = 'vscode://schemas/locale';\n\tconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\t// Keep en-US since we generated files with that content.\n\tjsonRegistry.registerSchema(localeDefinitionFileSchemaId, {\n\t\tid: localeDefinitionFileSchemaId,\n\t\tallowComments: true,\n\t\tdescription: 'Locale Definition file',\n\t\ttype: 'object',\n\t\tdefault: {\n\t\t\t'locale': 'en'\n\t\t},\n\t\trequired: ['locale'],\n\t\tproperties: {\n\t\t\tlocale: {\n\t\t\t\ttype: 'string',\n\t\t\t\tenum: languages,\n\t\t\t\tdescription: localize('JsonSchema.locale', 'The UI Language to use.')\n\t\t\t}\n\t\t}\n\t});\n}\n\nregisterLocaleDefinitionSchema(platform.language ? [platform.language] : []);\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(LocalizationWorkbenchContribution, LifecyclePhase.Eventually);\n\nExtensionsRegistry.registerExtensionPoint({\n\textensionPoint: 'localizations',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.localizations', \"Contributes localizations to the editor\"),\n\t\ttype: 'array',\n\t\tdefault: [],\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\trequired: ['languageId', 'translations'],\n\t\t\tdefaultSnippets: [{ body: { languageId: '', languageName: '', localizedLanguageName: '', translations: [{ id: 'vscode', path: '' }] } }],\n\t\t\tproperties: {\n\t\t\t\tlanguageId: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.languageId', 'Id of the language into which the display strings are translated.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlanguageName: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.languageName', 'Name of the language in English.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlocalizedLanguageName: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.languageNameLocalized', 'Name of the language in contributed language.'),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\ttranslations: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.translations', 'List of translations associated to the language.'),\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdefault: [{ id: 'vscode', path: '' }],\n\t\t\t\t\titems: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\trequired: ['id', 'path'],\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tid: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.translations.id', \"Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`.\"),\n\t\t\t\t\t\t\t\tpattern: '^((vscode)|([a-z0-9A-Z][a-z0-9\\-A-Z]*)\\\\.([a-z0-9A-Z][a-z0-9\\-A-Z]*))$',\n\t\t\t\t\t\t\t\tpatternErrorMessage: localize('vscode.extension.contributes.localizations.translations.id.pattern', \"Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively.\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: localize('vscode.extension.contributes.localizations.translations.path', \"A relative path to a file containing translations for the language.\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefaultSnippets: [{ body: { id: '', path: '' } }],\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});"]}]}