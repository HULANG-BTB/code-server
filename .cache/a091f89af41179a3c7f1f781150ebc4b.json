{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/codeinset/electron-browser/codeInsetWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/editor/common/model/textModel\", \"vs/css!./codeInsetWidget\"], function (require, exports, range_1, textModel_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CodeInsetHelper {\n        constructor() {\n            this._removeDecorations = [];\n            this._addDecorations = [];\n            this._addDecorationsCallbacks = [];\n        }\n        addDecoration(decoration, callback) {\n            this._addDecorations.push(decoration);\n            this._addDecorationsCallbacks.push(callback);\n        }\n        removeDecoration(decorationId) {\n            this._removeDecorations.push(decorationId);\n        }\n        commit(changeAccessor) {\n            let resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);\n            for (let i = 0, len = resultingDecorations.length; i < len; i++) {\n                this._addDecorationsCallbacks[i](resultingDecorations[i]);\n            }\n        }\n    }\n    exports.CodeInsetHelper = CodeInsetHelper;\n    class CodeInsetWidget {\n        constructor(data, // all the insets on the same line (often just one)\n        editor, helper) {\n            this._viewZoneId = undefined;\n            this._editor = editor;\n            this._data = data;\n            this._decorationIds = new Array(this._data.length);\n            this._data.forEach((codeInsetData, i) => {\n                helper.addDecoration({\n                    range: codeInsetData.symbol.range,\n                    options: textModel_1.ModelDecorationOptions.EMPTY\n                }, id => this._decorationIds[i] = id);\n                // the range contains all insets on this line\n                if (!this._range) {\n                    this._range = range_1.Range.lift(codeInsetData.symbol.range);\n                }\n                else {\n                    this._range = range_1.Range.plusRange(this._range, codeInsetData.symbol.range);\n                }\n            });\n        }\n        dispose(helper, viewZoneChangeAccessor) {\n            while (this._decorationIds.length) {\n                const decoration = this._decorationIds.pop();\n                if (decoration) {\n                    helper.removeDecoration(decoration);\n                }\n            }\n            if (viewZoneChangeAccessor) {\n                if (typeof this._viewZoneId !== 'undefined') {\n                    viewZoneChangeAccessor.removeZone(this._viewZoneId);\n                }\n                this._viewZone = undefined;\n            }\n            if (this._webview) {\n                this._webview.dispose();\n            }\n        }\n        isValid() {\n            return this._editor.hasModel() && this._decorationIds.some((id, i) => {\n                const range = this._editor.getModel().getDecorationRange(id);\n                const symbol = this._data[i].symbol;\n                return !!range && range_1.Range.isEmpty(symbol.range) === range.isEmpty();\n            });\n        }\n        updateCodeInsetSymbols(data, helper) {\n            while (this._decorationIds.length) {\n                const decoration = this._decorationIds.pop();\n                if (decoration) {\n                    helper.removeDecoration(decoration);\n                }\n            }\n            this._data = data;\n            this._decorationIds = new Array(this._data.length);\n            this._data.forEach((codeInsetData, i) => {\n                helper.addDecoration({\n                    range: codeInsetData.symbol.range,\n                    options: textModel_1.ModelDecorationOptions.EMPTY\n                }, id => this._decorationIds[i] = id);\n            });\n        }\n        computeIfNecessary(model) {\n            // Read editor current state\n            for (let i = 0; i < this._decorationIds.length; i++) {\n                const range = model.getDecorationRange(this._decorationIds[i]);\n                if (range) {\n                    this._data[i].symbol.range = range;\n                }\n            }\n            return this._data;\n        }\n        getLineNumber() {\n            if (this._editor.hasModel()) {\n                const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n                if (range) {\n                    return range.startLineNumber;\n                }\n            }\n            return -1;\n        }\n        adoptWebview(webview) {\n            const lineNumber = this._range.endLineNumber;\n            this._editor.changeViewZones(accessor => {\n                if (this._viewZoneId) {\n                    accessor.removeZone(this._viewZoneId);\n                    this._webview.dispose();\n                }\n                const div = document.createElement('div');\n                webview.mountTo(div);\n                webview.onMessage((e) => {\n                    // The webview contents can use a \"size-info\" message to report its size.\n                    if (e && e.type === 'size-info') {\n                        const margin = e.payload.height > 0 ? 5 : 0;\n                        this._viewZone.heightInPx = e.payload.height + margin;\n                        this._editor.changeViewZones(accessor => {\n                            if (this._viewZoneId) {\n                                accessor.layoutZone(this._viewZoneId);\n                            }\n                        });\n                    }\n                });\n                this._viewZone = {\n                    afterLineNumber: lineNumber,\n                    heightInPx: 50,\n                    domNode: div\n                };\n                this._viewZoneId = accessor.addZone(this._viewZone);\n                this._webview = webview;\n            });\n        }\n        reposition(viewZoneChangeAccessor) {\n            if (this.isValid() && this._editor.hasModel()) {\n                const range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n                if (range) {\n                    this._viewZone.afterLineNumber = range.endLineNumber;\n                }\n                if (this._viewZoneId) {\n                    viewZoneChangeAccessor.layoutZone(this._viewZoneId);\n                }\n            }\n        }\n    }\n    exports.CodeInsetWidget = CodeInsetWidget;\n});\n",null]}