{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/ripgrepSearchProvider.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/node/ripgrepSearchProvider.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/cancellation\", \"vs/workbench/services/search/node/ripgrepTextSearchEngine\"], function (require, exports, cancellation_1, ripgrepTextSearchEngine_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class RipgrepSearchProvider {\n        constructor(outputChannel) {\n            this.outputChannel = outputChannel;\n            this.inProgress = new Set();\n            process.once('exit', () => this.dispose());\n        }\n        provideTextSearchResults(query, options, progress, token) {\n            const engine = new ripgrepTextSearchEngine_1.RipgrepTextSearchEngine(this.outputChannel);\n            return this.withToken(token, token => engine.provideTextSearchResults(query, options, progress, token));\n        }\n        withToken(token, fn) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const merged = mergedTokenSource(token);\n                this.inProgress.add(merged);\n                const result = yield fn(merged.token);\n                this.inProgress.delete(merged);\n                return result;\n            });\n        }\n        dispose() {\n            this.inProgress.forEach(engine => engine.cancel());\n        }\n    }\n    exports.RipgrepSearchProvider = RipgrepSearchProvider;\n    function mergedTokenSource(token) {\n        const tokenSource = new cancellation_1.CancellationTokenSource();\n        token.onCancellationRequested(() => tokenSource.cancel());\n        return tokenSource;\n    }\n});\n",null]}