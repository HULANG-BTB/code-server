{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/editorColorRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/editorColorRegistry.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar color_1 = require(\"vs/base/common/color\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\n/**\n * Definition of the editor colors\n */\nexports.editorLineHighlight = colorRegistry_1.registerColor('editor.lineHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexports.editorLineHighlightBorder = colorRegistry_1.registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hc: '#f38518' }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexports.editorRangeHighlight = colorRegistry_1.registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hc: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.editorRangeHighlightBorder = colorRegistry_1.registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hc: colorRegistry_1.activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);\nexports.editorCursorForeground = colorRegistry_1.registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: color_1.Color.black, hc: color_1.Color.white }, nls.localize('caret', 'Color of the editor cursor.'));\nexports.editorCursorBackground = colorRegistry_1.registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexports.editorWhitespaces = colorRegistry_1.registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hc: '#e3e4e229' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexports.editorIndentGuides = colorRegistry_1.registerColor('editorIndentGuide.background', { dark: exports.editorWhitespaces, light: exports.editorWhitespaces, hc: exports.editorWhitespaces }, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'));\nexports.editorActiveIndentGuides = colorRegistry_1.registerColor('editorIndentGuide.activeBackground', { dark: exports.editorWhitespaces, light: exports.editorWhitespaces, hc: exports.editorWhitespaces }, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'));\nexports.editorLineNumbers = colorRegistry_1.registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hc: color_1.Color.white }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\nvar deprecatedEditorActiveLineNumber = colorRegistry_1.registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hc: colorRegistry_1.activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexports.editorActiveLineNumber = colorRegistry_1.registerColor('editorLineNumber.activeForeground', { dark: deprecatedEditorActiveLineNumber, light: deprecatedEditorActiveLineNumber, hc: deprecatedEditorActiveLineNumber }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\nexports.editorRuler = colorRegistry_1.registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: color_1.Color.lightgrey, hc: color_1.Color.white }, nls.localize('editorRuler', 'Color of the editor rulers.'));\nexports.editorCodeLensForeground = colorRegistry_1.registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#999999', hc: '#999999' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor code lenses'));\nexports.editorBracketMatchBackground = colorRegistry_1.registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hc: '#0064001a' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexports.editorBracketMatchBorder = colorRegistry_1.registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hc: '#fff' }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\nexports.editorOverviewRulerBorder = colorRegistry_1.registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hc: '#7f7f7f4d' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\nexports.editorGutter = colorRegistry_1.registerColor('editorGutter.background', { dark: colorRegistry_1.editorBackground, light: colorRegistry_1.editorBackground, hc: colorRegistry_1.editorBackground }, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\nexports.editorErrorForeground = colorRegistry_1.registerColor('editorError.foreground', { dark: '#ea4646', light: '#d60a0a', hc: null }, nls.localize('errorForeground', 'Foreground color of error squigglies in the editor.'));\nexports.editorErrorBorder = colorRegistry_1.registerColor('editorError.border', { dark: null, light: null, hc: color_1.Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error squigglies in the editor.'));\nexports.editorWarningForeground = colorRegistry_1.registerColor('editorWarning.foreground', { dark: '#4d9e4d', light: '#117711', hc: null }, nls.localize('warningForeground', 'Foreground color of warning squigglies in the editor.'));\nexports.editorWarningBorder = colorRegistry_1.registerColor('editorWarning.border', { dark: null, light: null, hc: color_1.Color.fromHex('#71B771').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning squigglies in the editor.'));\nexports.editorInfoForeground = colorRegistry_1.registerColor('editorInfo.foreground', { dark: '#008000', light: '#008000', hc: null }, nls.localize('infoForeground', 'Foreground color of info squigglies in the editor.'));\nexports.editorInfoBorder = colorRegistry_1.registerColor('editorInfo.border', { dark: null, light: null, hc: color_1.Color.fromHex('#71B771').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info squigglies in the editor.'));\nexports.editorHintForeground = colorRegistry_1.registerColor('editorHint.foreground', { dark: color_1.Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('hintForeground', 'Foreground color of hint squigglies in the editor.'));\nexports.editorHintBorder = colorRegistry_1.registerColor('editorHint.border', { dark: null, light: null, hc: color_1.Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint squigglies in the editor.'));\nexports.editorUnnecessaryCodeBorder = colorRegistry_1.registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hc: color_1.Color.fromHex('#fff').transparent(0.8) }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexports.editorUnnecessaryCodeOpacity = colorRegistry_1.registerColor('editorUnnecessaryCode.opacity', { dark: color_1.Color.fromHex('#000a'), light: color_1.Color.fromHex('#0007'), hc: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\nvar rulerRangeDefault = new color_1.Color(new color_1.RGBA(0, 122, 204, 0.6));\nexports.overviewRulerRangeHighlight = colorRegistry_1.registerColor('editorOverviewRuler.rangeHighlightForeground', { dark: rulerRangeDefault, light: rulerRangeDefault, hc: rulerRangeDefault }, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexports.overviewRulerError = colorRegistry_1.registerColor('editorOverviewRuler.errorForeground', { dark: new color_1.Color(new color_1.RGBA(255, 18, 18, 0.7)), light: new color_1.Color(new color_1.RGBA(255, 18, 18, 0.7)), hc: new color_1.Color(new color_1.RGBA(255, 50, 50, 1)) }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexports.overviewRulerWarning = colorRegistry_1.registerColor('editorOverviewRuler.warningForeground', { dark: new color_1.Color(new color_1.RGBA(18, 136, 18, 0.7)), light: new color_1.Color(new color_1.RGBA(18, 136, 18, 0.7)), hc: new color_1.Color(new color_1.RGBA(50, 255, 50, 1)) }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexports.overviewRulerInfo = colorRegistry_1.registerColor('editorOverviewRuler.infoForeground', { dark: new color_1.Color(new color_1.RGBA(18, 18, 136, 0.7)), light: new color_1.Color(new color_1.RGBA(18, 18, 136, 0.7)), hc: new color_1.Color(new color_1.RGBA(50, 50, 255, 1)) }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));\n// contains all color rules that used to defined in editor/browser/widget/editor.css\nthemeService_1.registerThemingParticipant(function (theme, collector) {\n    var background = theme.getColor(colorRegistry_1.editorBackground);\n    if (background) {\n        collector.addRule(\".monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input { background-color: \" + background + \"; }\");\n    }\n    var foreground = theme.getColor(colorRegistry_1.editorForeground);\n    if (foreground) {\n        collector.addRule(\".monaco-editor, .monaco-editor .inputarea.ime-input { color: \" + foreground + \"; }\");\n    }\n    var gutter = theme.getColor(exports.editorGutter);\n    if (gutter) {\n        collector.addRule(\".monaco-editor .margin { background-color: \" + gutter + \"; }\");\n    }\n    var rangeHighlight = theme.getColor(exports.editorRangeHighlight);\n    if (rangeHighlight) {\n        collector.addRule(\".monaco-editor .rangeHighlight { background-color: \" + rangeHighlight + \"; }\");\n    }\n    var rangeHighlightBorder = theme.getColor(exports.editorRangeHighlightBorder);\n    if (rangeHighlightBorder) {\n        collector.addRule(\".monaco-editor .rangeHighlight { border: 1px \" + (theme.type === 'hc' ? 'dotted' : 'solid') + \" \" + rangeHighlightBorder + \"; }\");\n    }\n    var invisibles = theme.getColor(exports.editorWhitespaces);\n    if (invisibles) {\n        collector.addRule(\".vs-whitespace { color: \" + invisibles + \" !important; }\");\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/editorColorRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/view/editorColorRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { activeContrastBorder, editorBackground, editorForeground, registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\n\n/**\n * Definition of the editor colors\n */\nexport const editorLineHighlight = registerColor('editor.lineHighlightBackground', { dark: null, light: null, hc: null }, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexport const editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', { dark: '#282828', light: '#eeeeee', hc: '#f38518' }, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexport const editorRangeHighlight = registerColor('editor.rangeHighlightBackground', { dark: '#ffffff0b', light: '#fdff0033', hc: null }, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', { dark: null, light: null, hc: activeContrastBorder }, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);\n\nexport const editorCursorForeground = registerColor('editorCursor.foreground', { dark: '#AEAFAD', light: Color.black, hc: Color.white }, nls.localize('caret', 'Color of the editor cursor.'));\nexport const editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexport const editorWhitespaces = registerColor('editorWhitespace.foreground', { dark: '#e3e4e229', light: '#33333333', hc: '#e3e4e229' }, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexport const editorIndentGuides = registerColor('editorIndentGuide.background', { dark: editorWhitespaces, light: editorWhitespaces, hc: editorWhitespaces }, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'));\nexport const editorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', { dark: editorWhitespaces, light: editorWhitespaces, hc: editorWhitespaces }, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'));\nexport const editorLineNumbers = registerColor('editorLineNumber.foreground', { dark: '#858585', light: '#237893', hc: Color.white }, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\n\nconst deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', { dark: '#c6c6c6', light: '#0B216F', hc: activeContrastBorder }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexport const editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', { dark: deprecatedEditorActiveLineNumber, light: deprecatedEditorActiveLineNumber, hc: deprecatedEditorActiveLineNumber }, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\n\nexport const editorRuler = registerColor('editorRuler.foreground', { dark: '#5A5A5A', light: Color.lightgrey, hc: Color.white }, nls.localize('editorRuler', 'Color of the editor rulers.'));\n\nexport const editorCodeLensForeground = registerColor('editorCodeLens.foreground', { dark: '#999999', light: '#999999', hc: '#999999' }, nls.localize('editorCodeLensForeground', 'Foreground color of editor code lenses'));\n\nexport const editorBracketMatchBackground = registerColor('editorBracketMatch.background', { dark: '#0064001a', light: '#0064001a', hc: '#0064001a' }, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexport const editorBracketMatchBorder = registerColor('editorBracketMatch.border', { dark: '#888', light: '#B9B9B9', hc: '#fff' }, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\n\nexport const editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', { dark: '#7f7f7f4d', light: '#7f7f7f4d', hc: '#7f7f7f4d' }, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\n\nexport const editorGutter = registerColor('editorGutter.background', { dark: editorBackground, light: editorBackground, hc: editorBackground }, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\n\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#ea4646', light: '#d60a0a', hc: null }, nls.localize('errorForeground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hc: Color.fromHex('#E47777').transparent(0.8) }, nls.localize('errorBorder', 'Border color of error squigglies in the editor.'));\n\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#4d9e4d', light: '#117711', hc: null }, nls.localize('warningForeground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hc: Color.fromHex('#71B771').transparent(0.8) }, nls.localize('warningBorder', 'Border color of warning squigglies in the editor.'));\n\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#008000', light: '#008000', hc: null }, nls.localize('infoForeground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hc: Color.fromHex('#71B771').transparent(0.8) }, nls.localize('infoBorder', 'Border color of info squigglies in the editor.'));\n\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hc: null }, nls.localize('hintForeground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hc: Color.fromHex('#eeeeee').transparent(0.8) }, nls.localize('hintBorder', 'Border color of hint squigglies in the editor.'));\n\nexport const editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', { dark: null, light: null, hc: Color.fromHex('#fff').transparent(0.8) }, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexport const editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', { dark: Color.fromHex('#000a'), light: Color.fromHex('#0007'), hc: null }, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\n\nconst rulerRangeDefault = new Color(new RGBA(0, 122, 204, 0.6));\nexport const overviewRulerRangeHighlight = registerColor('editorOverviewRuler.rangeHighlightForeground', { dark: rulerRangeDefault, light: rulerRangeDefault, hc: rulerRangeDefault }, nls.localize('overviewRulerRangeHighlight', 'Overview ruler marker color for range highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerError = registerColor('editorOverviewRuler.errorForeground', { dark: new Color(new RGBA(255, 18, 18, 0.7)), light: new Color(new RGBA(255, 18, 18, 0.7)), hc: new Color(new RGBA(255, 50, 50, 1)) }, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexport const overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', { dark: new Color(new RGBA(18, 136, 18, 0.7)), light: new Color(new RGBA(18, 136, 18, 0.7)), hc: new Color(new RGBA(50, 255, 50, 1)) }, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexport const overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', { dark: new Color(new RGBA(18, 18, 136, 0.7)), light: new Color(new RGBA(18, 18, 136, 0.7)), hc: new Color(new RGBA(50, 50, 255, 1)) }, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.'));\n\n// contains all color rules that used to defined in editor/browser/widget/editor.css\nregisterThemingParticipant((theme, collector) => {\n\tconst background = theme.getColor(editorBackground);\n\tif (background) {\n\t\tcollector.addRule(`.monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input { background-color: ${background}; }`);\n\t}\n\n\tconst foreground = theme.getColor(editorForeground);\n\tif (foreground) {\n\t\tcollector.addRule(`.monaco-editor, .monaco-editor .inputarea.ime-input { color: ${foreground}; }`);\n\t}\n\n\tconst gutter = theme.getColor(editorGutter);\n\tif (gutter) {\n\t\tcollector.addRule(`.monaco-editor .margin { background-color: ${gutter}; }`);\n\t}\n\n\tconst rangeHighlight = theme.getColor(editorRangeHighlight);\n\tif (rangeHighlight) {\n\t\tcollector.addRule(`.monaco-editor .rangeHighlight { background-color: ${rangeHighlight}; }`);\n\t}\n\n\tconst rangeHighlightBorder = theme.getColor(editorRangeHighlightBorder);\n\tif (rangeHighlightBorder) {\n\t\tcollector.addRule(`.monaco-editor .rangeHighlight { border: 1px ${theme.type === 'hc' ? 'dotted' : 'solid'} ${rangeHighlightBorder}; }`);\n\t}\n\n\tconst invisibles = theme.getColor(editorWhitespaces);\n\tif (invisibles) {\n\t\tcollector.addRule(`.vs-whitespace { color: ${invisibles} !important; }`);\n\t}\n});\n"]}]}