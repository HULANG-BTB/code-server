{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/mouseTarget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/mouseTarget.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar browser = require(\"vs/base/browser/browser\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar editorDom_1 = require(\"vs/editor/browser/editorDom\");\nvar viewPart_1 = require(\"vs/editor/browser/view/viewPart\");\nvar viewLine_1 = require(\"vs/editor/browser/viewParts/lines/viewLine\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar MouseTarget = /** @class */ (function () {\n    function MouseTarget(element, type, mouseColumn, position, range, detail) {\n        if (mouseColumn === void 0) { mouseColumn = 0; }\n        if (position === void 0) { position = null; }\n        if (range === void 0) { range = null; }\n        if (detail === void 0) { detail = null; }\n        this.element = element;\n        this.type = type;\n        this.mouseColumn = mouseColumn;\n        this.position = position;\n        if (!range && position) {\n            range = new range_1.Range(position.lineNumber, position.column, position.lineNumber, position.column);\n        }\n        this.range = range;\n        this.detail = detail;\n    }\n    MouseTarget._typeToString = function (type) {\n        if (type === editorBrowser_1.MouseTargetType.TEXTAREA) {\n            return 'TEXTAREA';\n        }\n        if (type === editorBrowser_1.MouseTargetType.GUTTER_GLYPH_MARGIN) {\n            return 'GUTTER_GLYPH_MARGIN';\n        }\n        if (type === editorBrowser_1.MouseTargetType.GUTTER_LINE_NUMBERS) {\n            return 'GUTTER_LINE_NUMBERS';\n        }\n        if (type === editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS) {\n            return 'GUTTER_LINE_DECORATIONS';\n        }\n        if (type === editorBrowser_1.MouseTargetType.GUTTER_VIEW_ZONE) {\n            return 'GUTTER_VIEW_ZONE';\n        }\n        if (type === editorBrowser_1.MouseTargetType.CONTENT_TEXT) {\n            return 'CONTENT_TEXT';\n        }\n        if (type === editorBrowser_1.MouseTargetType.CONTENT_EMPTY) {\n            return 'CONTENT_EMPTY';\n        }\n        if (type === editorBrowser_1.MouseTargetType.CONTENT_VIEW_ZONE) {\n            return 'CONTENT_VIEW_ZONE';\n        }\n        if (type === editorBrowser_1.MouseTargetType.CONTENT_WIDGET) {\n            return 'CONTENT_WIDGET';\n        }\n        if (type === editorBrowser_1.MouseTargetType.OVERVIEW_RULER) {\n            return 'OVERVIEW_RULER';\n        }\n        if (type === editorBrowser_1.MouseTargetType.SCROLLBAR) {\n            return 'SCROLLBAR';\n        }\n        if (type === editorBrowser_1.MouseTargetType.OVERLAY_WIDGET) {\n            return 'OVERLAY_WIDGET';\n        }\n        return 'UNKNOWN';\n    };\n    MouseTarget.toString = function (target) {\n        return this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + target.detail;\n    };\n    MouseTarget.prototype.toString = function () {\n        return MouseTarget.toString(this);\n    };\n    return MouseTarget;\n}());\nexports.MouseTarget = MouseTarget;\nvar ElementPath = /** @class */ (function () {\n    function ElementPath() {\n    }\n    ElementPath.isTextArea = function (path) {\n        return (path.length === 2\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[1] === viewPart_1.PartFingerprint.TextArea);\n    };\n    ElementPath.isChildOfViewLines = function (path) {\n        return (path.length >= 4\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[3] === viewPart_1.PartFingerprint.ViewLines);\n    };\n    ElementPath.isStrictChildOfViewLines = function (path) {\n        return (path.length > 4\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[3] === viewPart_1.PartFingerprint.ViewLines);\n    };\n    ElementPath.isChildOfScrollableElement = function (path) {\n        return (path.length >= 2\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[1] === viewPart_1.PartFingerprint.ScrollableElement);\n    };\n    ElementPath.isChildOfMinimap = function (path) {\n        return (path.length >= 2\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[1] === viewPart_1.PartFingerprint.Minimap);\n    };\n    ElementPath.isChildOfContentWidgets = function (path) {\n        return (path.length >= 4\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[3] === viewPart_1.PartFingerprint.ContentWidgets);\n    };\n    ElementPath.isChildOfOverflowingContentWidgets = function (path) {\n        return (path.length >= 1\n            && path[0] === viewPart_1.PartFingerprint.OverflowingContentWidgets);\n    };\n    ElementPath.isChildOfOverlayWidgets = function (path) {\n        return (path.length >= 2\n            && path[0] === viewPart_1.PartFingerprint.OverflowGuard\n            && path[1] === viewPart_1.PartFingerprint.OverlayWidgets);\n    };\n    return ElementPath;\n}());\nvar HitTestContext = /** @class */ (function () {\n    function HitTestContext(context, viewHelper, lastViewCursorsRenderData) {\n        this.model = context.model;\n        this.layoutInfo = context.configuration.editor.layoutInfo;\n        this.viewDomNode = viewHelper.viewDomNode;\n        this.lineHeight = context.configuration.editor.lineHeight;\n        this.typicalHalfwidthCharacterWidth = context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n        this.lastViewCursorsRenderData = lastViewCursorsRenderData;\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    HitTestContext.prototype.getZoneAtCoord = function (mouseVerticalOffset) {\n        return HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n    };\n    HitTestContext.getZoneAtCoord = function (context, mouseVerticalOffset) {\n        // The target is either a view zone or the empty space after the last view-line\n        var viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n        if (viewZoneWhitespace) {\n            var viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2, lineCount = context.model.getLineCount(), positionBefore = null, position = void 0, positionAfter = null;\n            if (viewZoneWhitespace.afterLineNumber !== lineCount) {\n                // There are more lines after this view zone\n                positionAfter = new position_1.Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n            }\n            if (viewZoneWhitespace.afterLineNumber > 0) {\n                // There are more lines above this view zone\n                positionBefore = new position_1.Position(viewZoneWhitespace.afterLineNumber, context.model.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n            }\n            if (positionAfter === null) {\n                position = positionBefore;\n            }\n            else if (positionBefore === null) {\n                position = positionAfter;\n            }\n            else if (mouseVerticalOffset < viewZoneMiddle) {\n                position = positionBefore;\n            }\n            else {\n                position = positionAfter;\n            }\n            return {\n                viewZoneId: viewZoneWhitespace.id,\n                afterLineNumber: viewZoneWhitespace.afterLineNumber,\n                positionBefore: positionBefore,\n                positionAfter: positionAfter,\n                position: position\n            };\n        }\n        return null;\n    };\n    HitTestContext.prototype.getFullLineRangeAtCoord = function (mouseVerticalOffset) {\n        if (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n            // Below the last line\n            var lineNumber_1 = this._context.model.getLineCount();\n            var maxLineColumn_1 = this._context.model.getLineMaxColumn(lineNumber_1);\n            return {\n                range: new range_1.Range(lineNumber_1, maxLineColumn_1, lineNumber_1, maxLineColumn_1),\n                isAfterLines: true\n            };\n        }\n        var lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n        var maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n        return {\n            range: new range_1.Range(lineNumber, 1, lineNumber, maxLineColumn),\n            isAfterLines: false\n        };\n    };\n    HitTestContext.prototype.getLineNumberAtVerticalOffset = function (mouseVerticalOffset) {\n        return this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n    };\n    HitTestContext.prototype.isAfterLines = function (mouseVerticalOffset) {\n        return this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n    };\n    HitTestContext.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n        return this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    };\n    HitTestContext.prototype.findAttribute = function (element, attr) {\n        return HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n    };\n    HitTestContext._findAttribute = function (element, attr, stopAt) {\n        while (element && element !== document.body) {\n            if (element.hasAttribute && element.hasAttribute(attr)) {\n                return element.getAttribute(attr);\n            }\n            if (element === stopAt) {\n                return null;\n            }\n            element = element.parentNode;\n        }\n        return null;\n    };\n    HitTestContext.prototype.getLineWidth = function (lineNumber) {\n        return this._viewHelper.getLineWidth(lineNumber);\n    };\n    HitTestContext.prototype.visibleRangeForPosition2 = function (lineNumber, column) {\n        return this._viewHelper.visibleRangeForPosition2(lineNumber, column);\n    };\n    HitTestContext.prototype.getPositionFromDOMInfo = function (spanNode, offset) {\n        return this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n    };\n    HitTestContext.prototype.getCurrentScrollTop = function () {\n        return this._context.viewLayout.getCurrentScrollTop();\n    };\n    HitTestContext.prototype.getCurrentScrollLeft = function () {\n        return this._context.viewLayout.getCurrentScrollLeft();\n    };\n    return HitTestContext;\n}());\nexports.HitTestContext = HitTestContext;\nvar BareHitTestRequest = /** @class */ (function () {\n    function BareHitTestRequest(ctx, editorPos, pos) {\n        this.editorPos = editorPos;\n        this.pos = pos;\n        this.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + pos.y - editorPos.y);\n        this.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + pos.x - editorPos.x - ctx.layoutInfo.contentLeft;\n        this.isInMarginArea = (pos.x - editorPos.x < ctx.layoutInfo.contentLeft && pos.x - editorPos.x >= ctx.layoutInfo.glyphMarginLeft);\n        this.isInContentArea = !this.isInMarginArea;\n        this.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n    }\n    return BareHitTestRequest;\n}());\nvar HitTestRequest = /** @class */ (function (_super) {\n    tslib_1.__extends(HitTestRequest, _super);\n    function HitTestRequest(ctx, editorPos, pos, target) {\n        var _this = _super.call(this, ctx, editorPos, pos) || this;\n        _this._ctx = ctx;\n        if (target) {\n            _this.target = target;\n            _this.targetPath = viewPart_1.PartFingerprints.collect(target, ctx.viewDomNode);\n        }\n        else {\n            _this.target = null;\n            _this.targetPath = new Uint8Array(0);\n        }\n        return _this;\n    }\n    HitTestRequest.prototype.toString = function () {\n        return \"pos(\" + this.pos.x + \",\" + this.pos.y + \"), editorPos(\" + this.editorPos.x + \",\" + this.editorPos.y + \"), mouseVerticalOffset: \" + this.mouseVerticalOffset + \", mouseContentHorizontalOffset: \" + this.mouseContentHorizontalOffset + \"\\n\\ttarget: \" + (this.target ? this.target.outerHTML : null);\n    };\n    HitTestRequest.prototype.fulfill = function (type, position, range, detail) {\n        if (position === void 0) { position = null; }\n        if (range === void 0) { range = null; }\n        if (detail === void 0) { detail = null; }\n        return new MouseTarget(this.target, type, this.mouseColumn, position, range, detail);\n    };\n    HitTestRequest.prototype.withTarget = function (target) {\n        return new HitTestRequest(this._ctx, this.editorPos, this.pos, target);\n    };\n    return HitTestRequest;\n}(BareHitTestRequest));\nvar EMPTY_CONTENT_AFTER_LINES = { isAfterLines: true };\nfunction createEmptyContentDataInLines(horizontalDistanceToText) {\n    return {\n        isAfterLines: false,\n        horizontalDistanceToText: horizontalDistanceToText\n    };\n}\nvar MouseTargetFactory = /** @class */ (function () {\n    function MouseTargetFactory(context, viewHelper) {\n        this._context = context;\n        this._viewHelper = viewHelper;\n    }\n    MouseTargetFactory.prototype.mouseTargetIsWidget = function (e) {\n        var t = e.target;\n        var path = viewPart_1.PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n            return true;\n        }\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(path)) {\n            return true;\n        }\n        return false;\n    };\n    MouseTargetFactory.prototype.createMouseTarget = function (lastViewCursorsRenderData, editorPos, pos, target) {\n        var ctx = new HitTestContext(this._context, this._viewHelper, lastViewCursorsRenderData);\n        var request = new HitTestRequest(ctx, editorPos, pos, target);\n        try {\n            var r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n            // console.log(r.toString());\n            return r;\n        }\n        catch (err) {\n            // console.log(err);\n            return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN);\n        }\n    };\n    MouseTargetFactory._createMouseTarget = function (ctx, request, domHitTestExecuted) {\n        // console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n        // First ensure the request has a target\n        if (request.target === null) {\n            if (domHitTestExecuted) {\n                // Still no target... and we have already executed hit test...\n                return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN);\n            }\n            var hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n            if (hitTestResult.position) {\n                return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.position.lineNumber, hitTestResult.position.column);\n            }\n            return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n        }\n        // we know for a fact that request.target is not null\n        var resolvedRequest = request;\n        var result = null;\n        result = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n        result = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n        result = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n        return (result || request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN));\n    };\n    MouseTargetFactory._hitTestContentWidget = function (ctx, request) {\n        // Is it a content widget?\n        if (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n            var widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_WIDGET, null, null, widgetId);\n            }\n            else {\n                return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN);\n            }\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestOverlayWidget = function (ctx, request) {\n        // Is it an overlay widget?\n        if (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n            var widgetId = ctx.findAttribute(request.target, 'widgetId');\n            if (widgetId) {\n                return request.fulfill(editorBrowser_1.MouseTargetType.OVERLAY_WIDGET, null, null, widgetId);\n            }\n            else {\n                return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN);\n            }\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestViewCursor = function (ctx, request) {\n        if (request.target) {\n            // Check if we've hit a painted cursor\n            var lastViewCursorsRenderData = ctx.lastViewCursorsRenderData;\n            for (var _i = 0, lastViewCursorsRenderData_1 = lastViewCursorsRenderData; _i < lastViewCursorsRenderData_1.length; _i++) {\n                var d = lastViewCursorsRenderData_1[_i];\n                if (request.target === d.domNode) {\n                    return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_TEXT, d.position);\n                }\n            }\n        }\n        if (request.isInContentArea) {\n            // Edge has a bug when hit-testing the exact position of a cursor,\n            // instead of returning the correct dom node, it returns the\n            // first or last rendered view line dom node, therefore help it out\n            // and first check if we are on top of a cursor\n            var lastViewCursorsRenderData = ctx.lastViewCursorsRenderData;\n            var mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n            var mouseVerticalOffset = request.mouseVerticalOffset;\n            for (var _a = 0, lastViewCursorsRenderData_2 = lastViewCursorsRenderData; _a < lastViewCursorsRenderData_2.length; _a++) {\n                var d = lastViewCursorsRenderData_2[_a];\n                if (mouseContentHorizontalOffset < d.contentLeft) {\n                    // mouse position is to the left of the cursor\n                    continue;\n                }\n                if (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n                    // mouse position is to the right of the cursor\n                    continue;\n                }\n                var cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n                if (cursorVerticalOffset <= mouseVerticalOffset\n                    && mouseVerticalOffset <= cursorVerticalOffset + d.height) {\n                    return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_TEXT, d.position);\n                }\n            }\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestViewZone = function (ctx, request) {\n        var viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n        if (viewZoneData) {\n            var mouseTargetType = (request.isInContentArea ? editorBrowser_1.MouseTargetType.CONTENT_VIEW_ZONE : editorBrowser_1.MouseTargetType.GUTTER_VIEW_ZONE);\n            return request.fulfill(mouseTargetType, viewZoneData.position, null, viewZoneData);\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestTextArea = function (ctx, request) {\n        // Is it the textarea?\n        if (ElementPath.isTextArea(request.targetPath)) {\n            return request.fulfill(editorBrowser_1.MouseTargetType.TEXTAREA);\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestMargin = function (ctx, request) {\n        if (request.isInMarginArea) {\n            var res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n            var pos = res.range.getStartPosition();\n            var offset = Math.abs(request.pos.x - request.editorPos.x);\n            var detail = {\n                isAfterLines: res.isAfterLines,\n                glyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n                glyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n                lineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n                offsetX: offset\n            };\n            offset -= ctx.layoutInfo.glyphMarginLeft;\n            if (offset <= ctx.layoutInfo.glyphMarginWidth) {\n                // On the glyph margin\n                return request.fulfill(editorBrowser_1.MouseTargetType.GUTTER_GLYPH_MARGIN, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.glyphMarginWidth;\n            if (offset <= ctx.layoutInfo.lineNumbersWidth) {\n                // On the line numbers\n                return request.fulfill(editorBrowser_1.MouseTargetType.GUTTER_LINE_NUMBERS, pos, res.range, detail);\n            }\n            offset -= ctx.layoutInfo.lineNumbersWidth;\n            // On the line decorations\n            return request.fulfill(editorBrowser_1.MouseTargetType.GUTTER_LINE_DECORATIONS, pos, res.range, detail);\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestViewLines = function (ctx, request, domHitTestExecuted) {\n        if (!ElementPath.isChildOfViewLines(request.targetPath)) {\n            return null;\n        }\n        // Check if it is below any lines and any view zones\n        if (ctx.isAfterLines(request.mouseVerticalOffset)) {\n            // This most likely indicates it happened after the last view-line\n            var lineCount = ctx.model.getLineCount();\n            var maxLineColumn = ctx.model.getLineMaxColumn(lineCount);\n            return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_EMPTY, new position_1.Position(lineCount, maxLineColumn), undefined, EMPTY_CONTENT_AFTER_LINES);\n        }\n        if (domHitTestExecuted) {\n            // Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n            // See https://github.com/Microsoft/vscode/issues/46942\n            if (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n                var lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                if (ctx.model.getLineLength(lineNumber) === 0) {\n                    var lineWidth = ctx.getLineWidth(lineNumber);\n                    var detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                    return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_EMPTY, new position_1.Position(lineNumber, 1), undefined, detail);\n                }\n            }\n            // We have already executed hit test...\n            return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN);\n        }\n        var hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n        if (hitTestResult.position) {\n            return MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.position.lineNumber, hitTestResult.position.column);\n        }\n        return this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n    };\n    MouseTargetFactory._hitTestMinimap = function (ctx, request) {\n        if (ElementPath.isChildOfMinimap(request.targetPath)) {\n            var possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            var maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n            return request.fulfill(editorBrowser_1.MouseTargetType.SCROLLBAR, new position_1.Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestScrollbarSlider = function (ctx, request) {\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            if (request.target && request.target.nodeType === 1) {\n                var className = request.target.className;\n                if (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n                    var possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n                    var maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n                    return request.fulfill(editorBrowser_1.MouseTargetType.SCROLLBAR, new position_1.Position(possibleLineNumber, maxColumn));\n                }\n            }\n        }\n        return null;\n    };\n    MouseTargetFactory._hitTestScrollbar = function (ctx, request) {\n        // Is it the overview ruler?\n        // Is it a child of the scrollable element?\n        if (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n            var possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n            var maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n            return request.fulfill(editorBrowser_1.MouseTargetType.SCROLLBAR, new position_1.Position(possibleLineNumber, maxColumn));\n        }\n        return null;\n    };\n    MouseTargetFactory.prototype.getMouseColumn = function (editorPos, pos) {\n        var layoutInfo = this._context.configuration.editor.layoutInfo;\n        var mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + pos.x - editorPos.x - layoutInfo.contentLeft;\n        return MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth);\n    };\n    MouseTargetFactory._getMouseColumn = function (mouseContentHorizontalOffset, typicalHalfwidthCharacterWidth) {\n        if (mouseContentHorizontalOffset < 0) {\n            return 1;\n        }\n        var chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n        return (chars + 1);\n    };\n    MouseTargetFactory.createMouseTargetFromHitTestPosition = function (ctx, request, lineNumber, column) {\n        var pos = new position_1.Position(lineNumber, column);\n        var lineWidth = ctx.getLineWidth(lineNumber);\n        if (request.mouseContentHorizontalOffset > lineWidth) {\n            if (browser.isEdge && pos.column === 1) {\n                // See https://github.com/Microsoft/vscode/issues/10875\n                var detail_1 = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n                return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_EMPTY, new position_1.Position(lineNumber, ctx.model.getLineMaxColumn(lineNumber)), undefined, detail_1);\n            }\n            var detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n            return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_EMPTY, pos, undefined, detail);\n        }\n        var visibleRange = ctx.visibleRangeForPosition2(lineNumber, column);\n        if (!visibleRange) {\n            return request.fulfill(editorBrowser_1.MouseTargetType.UNKNOWN, pos);\n        }\n        var columnHorizontalOffset = visibleRange.left;\n        if (request.mouseContentHorizontalOffset === columnHorizontalOffset) {\n            return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_TEXT, pos);\n        }\n        var points = [];\n        points.push({ offset: visibleRange.left, column: column });\n        if (column > 1) {\n            var visibleRange_1 = ctx.visibleRangeForPosition2(lineNumber, column - 1);\n            if (visibleRange_1) {\n                points.push({ offset: visibleRange_1.left, column: column - 1 });\n            }\n        }\n        var lineMaxColumn = ctx.model.getLineMaxColumn(lineNumber);\n        if (column < lineMaxColumn) {\n            var visibleRange_2 = ctx.visibleRangeForPosition2(lineNumber, column + 1);\n            if (visibleRange_2) {\n                points.push({ offset: visibleRange_2.left, column: column + 1 });\n            }\n        }\n        points.sort(function (a, b) { return a.offset - b.offset; });\n        for (var i = 1; i < points.length; i++) {\n            var prev = points[i - 1];\n            var curr = points[i];\n            if (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n                var rng = new range_1.Range(lineNumber, prev.column, lineNumber, curr.column);\n                return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_TEXT, pos, rng);\n            }\n        }\n        return request.fulfill(editorBrowser_1.MouseTargetType.CONTENT_TEXT, pos);\n    };\n    /**\n     * Most probably WebKit browsers and Edge\n     */\n    MouseTargetFactory._doHitTestWithCaretRangeFromPoint = function (ctx, request) {\n        // In Chrome, especially on Linux it is possible to click between lines,\n        // so try to adjust the `hity` below so that it lands in the center of a line\n        var lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n        var lineVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n        var lineCenteredVerticalOffset = lineVerticalOffset + Math.floor(ctx.lineHeight / 2);\n        var adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n        if (adjustedPageY <= request.editorPos.y) {\n            adjustedPageY = request.editorPos.y + 1;\n        }\n        if (adjustedPageY >= request.editorPos.y + ctx.layoutInfo.height) {\n            adjustedPageY = request.editorPos.y + ctx.layoutInfo.height - 1;\n        }\n        var adjustedPage = new editorDom_1.PageCoordinates(request.pos.x, adjustedPageY);\n        var r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n        if (r.position) {\n            return r;\n        }\n        // Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n        return this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n    };\n    MouseTargetFactory._actualDoHitTestWithCaretRangeFromPoint = function (ctx, coords) {\n        var range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n        if (!range || !range.startContainer) {\n            return {\n                position: null,\n                hitTarget: null\n            };\n        }\n        // Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n        var startContainer = range.startContainer;\n        var hitTarget = null;\n        if (startContainer.nodeType === startContainer.TEXT_NODE) {\n            // startContainer is expected to be the token text\n            var parent1 = startContainer.parentNode; // expected to be the token span\n            var parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            var parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            var parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === viewLine_1.ViewLine.CLASS_NAME) {\n                var p = ctx.getPositionFromDOMInfo(parent1, range.startOffset);\n                return {\n                    position: p,\n                    hitTarget: null\n                };\n            }\n            else {\n                hitTarget = startContainer.parentNode;\n            }\n        }\n        else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n            // startContainer is expected to be the token span\n            var parent1 = startContainer.parentNode; // expected to be the view line container span\n            var parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n            var parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : null;\n            if (parent2ClassName === viewLine_1.ViewLine.CLASS_NAME) {\n                var p = ctx.getPositionFromDOMInfo(startContainer, startContainer.textContent.length);\n                return {\n                    position: p,\n                    hitTarget: null\n                };\n            }\n            else {\n                hitTarget = startContainer;\n            }\n        }\n        return {\n            position: null,\n            hitTarget: hitTarget\n        };\n    };\n    /**\n     * Most probably Gecko\n     */\n    MouseTargetFactory._doHitTestWithCaretPositionFromPoint = function (ctx, coords) {\n        var hitResult = document.caretPositionFromPoint(coords.clientX, coords.clientY);\n        if (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n            // offsetNode is expected to be the token text\n            var parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n            var parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n            var parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n            var parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? parent3.className : null;\n            if (parent3ClassName === viewLine_1.ViewLine.CLASS_NAME) {\n                var p = ctx.getPositionFromDOMInfo(hitResult.offsetNode.parentNode, hitResult.offset);\n                return {\n                    position: p,\n                    hitTarget: null\n                };\n            }\n            else {\n                return {\n                    position: null,\n                    hitTarget: hitResult.offsetNode.parentNode\n                };\n            }\n        }\n        return {\n            position: null,\n            hitTarget: hitResult.offsetNode\n        };\n    };\n    /**\n     * Most probably IE\n     */\n    MouseTargetFactory._doHitTestWithMoveToPoint = function (ctx, coords) {\n        var resultPosition = null;\n        var resultHitTarget = null;\n        var textRange = document.body.createTextRange();\n        try {\n            textRange.moveToPoint(coords.clientX, coords.clientY);\n        }\n        catch (err) {\n            return {\n                position: null,\n                hitTarget: null\n            };\n        }\n        textRange.collapse(true);\n        // Now, let's do our best to figure out what we hit :)\n        var parentElement = textRange ? textRange.parentElement() : null;\n        var parent1 = parentElement ? parentElement.parentNode : null;\n        var parent2 = parent1 ? parent1.parentNode : null;\n        var parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? parent2.className : '';\n        if (parent2ClassName === viewLine_1.ViewLine.CLASS_NAME) {\n            var rangeToContainEntireSpan = textRange.duplicate();\n            rangeToContainEntireSpan.moveToElementText(parentElement);\n            rangeToContainEntireSpan.setEndPoint('EndToStart', textRange);\n            resultPosition = ctx.getPositionFromDOMInfo(parentElement, rangeToContainEntireSpan.text.length);\n            // Move range out of the span node, IE doesn't like having many ranges in\n            // the same spot and will act badly for lines containing dashes ('-')\n            rangeToContainEntireSpan.moveToElementText(ctx.viewDomNode);\n        }\n        else {\n            // Looks like we've hit the hover or something foreign\n            resultHitTarget = parentElement;\n        }\n        // Move range out of the span node, IE doesn't like having many ranges in\n        // the same spot and will act badly for lines containing dashes ('-')\n        textRange.moveToElementText(ctx.viewDomNode);\n        return {\n            position: resultPosition,\n            hitTarget: resultHitTarget\n        };\n    };\n    MouseTargetFactory._doHitTest = function (ctx, request) {\n        // State of the art (18.10.2012):\n        // The spec says browsers should support document.caretPositionFromPoint, but nobody implemented it (http://dev.w3.org/csswg/cssom-view/)\n        // Gecko:\n        //    - they tried to implement it once, but failed: https://bugzilla.mozilla.org/show_bug.cgi?id=654352\n        //    - however, they do give out rangeParent/rangeOffset properties on mouse events\n        // Webkit:\n        //    - they have implemented a previous version of the spec which was using document.caretRangeFromPoint\n        // IE:\n        //    - they have a proprietary method on ranges, moveToPoint: https://msdn.microsoft.com/en-us/library/ie/ms536632(v=vs.85).aspx\n        // 24.08.2016: Edge has added WebKit's document.caretRangeFromPoint, but it is quite buggy\n        //    - when hit testing the cursor it returns the first or the last line in the viewport\n        //    - it inconsistently hits text nodes or span nodes, while WebKit only hits text nodes\n        //    - when toggling render whitespace on, and hit testing in the empty content after a line, it always hits offset 0 of the first span of the line\n        // Thank you browsers for making this so 'easy' :)\n        if (document.caretRangeFromPoint) {\n            return this._doHitTestWithCaretRangeFromPoint(ctx, request);\n        }\n        else if (document.caretPositionFromPoint) {\n            return this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n        }\n        else if (document.body.createTextRange) {\n            return this._doHitTestWithMoveToPoint(ctx, request.pos.toClientCoordinates());\n        }\n        return {\n            position: null,\n            hitTarget: null\n        };\n    };\n    return MouseTargetFactory;\n}());\nexports.MouseTargetFactory = MouseTargetFactory;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/mouseTarget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/mouseTarget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from 'vs/base/browser/browser';\nimport { IPointerHandlerHelper } from 'vs/editor/browser/controller/mouseHandler';\nimport { IMouseTarget, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { ClientCoordinates, EditorMouseEvent, EditorPagePosition, PageCoordinates } from 'vs/editor/browser/editorDom';\nimport { PartFingerprint, PartFingerprints } from 'vs/editor/browser/view/viewPart';\nimport { ViewLine } from 'vs/editor/browser/viewParts/lines/viewLine';\nimport { IViewCursorRenderData } from 'vs/editor/browser/viewParts/viewCursors/viewCursor';\nimport { EditorLayoutInfo } from 'vs/editor/common/config/editorOptions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range as EditorRange } from 'vs/editor/common/core/range';\nimport { HorizontalRange } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport { IViewModel } from 'vs/editor/common/viewModel/viewModel';\n\nexport interface IViewZoneData {\n\tviewZoneId: number;\n\tpositionBefore: Position | null;\n\tpositionAfter: Position | null;\n\tposition: Position;\n\tafterLineNumber: number;\n}\n\nexport interface IMarginData {\n\tisAfterLines: boolean;\n\tglyphMarginLeft: number;\n\tglyphMarginWidth: number;\n\tlineNumbersWidth: number;\n\toffsetX: number;\n}\n\nexport interface IEmptyContentData {\n\tisAfterLines: boolean;\n\thorizontalDistanceToText?: number;\n}\n\ninterface IETextRange {\n\tboundingHeight: number;\n\tboundingLeft: number;\n\tboundingTop: number;\n\tboundingWidth: number;\n\thtmlText: string;\n\toffsetLeft: number;\n\toffsetTop: number;\n\ttext: string;\n\tcollapse(start?: boolean): void;\n\tcompareEndPoints(how: string, sourceRange: IETextRange): number;\n\tduplicate(): IETextRange;\n\texecCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\n\texecCommandShowHelp(cmdID: string): boolean;\n\texpand(Unit: string): boolean;\n\tfindText(string: string, count?: number, flags?: number): boolean;\n\tgetBookmark(): string;\n\tgetBoundingClientRect(): ClientRect;\n\tgetClientRects(): ClientRectList;\n\tinRange(range: IETextRange): boolean;\n\tisEqual(range: IETextRange): boolean;\n\tmove(unit: string, count?: number): number;\n\tmoveEnd(unit: string, count?: number): number;\n\tmoveStart(unit: string, count?: number): number;\n\tmoveToBookmark(bookmark: string): boolean;\n\tmoveToElementText(element: Element): void;\n\tmoveToPoint(x: number, y: number): void;\n\tparentElement(): Element;\n\tpasteHTML(html: string): void;\n\tqueryCommandEnabled(cmdID: string): boolean;\n\tqueryCommandIndeterm(cmdID: string): boolean;\n\tqueryCommandState(cmdID: string): boolean;\n\tqueryCommandSupported(cmdID: string): boolean;\n\tqueryCommandText(cmdID: string): string;\n\tqueryCommandValue(cmdID: string): any;\n\tscrollIntoView(fStart?: boolean): void;\n\tselect(): void;\n\tsetEndPoint(how: string, SourceRange: IETextRange): void;\n}\n\ndeclare var IETextRange: {\n\tprototype: IETextRange;\n\tnew(): IETextRange;\n};\n\ninterface IHitTestResult {\n\tposition: Position | null;\n\thitTarget: Element | null;\n}\n\nexport class MouseTarget implements IMouseTarget {\n\n\tpublic readonly element: Element | null;\n\tpublic readonly type: MouseTargetType;\n\tpublic readonly mouseColumn: number;\n\tpublic readonly position: Position | null;\n\tpublic readonly range: EditorRange | null;\n\tpublic readonly detail: any;\n\n\tconstructor(element: Element | null, type: MouseTargetType, mouseColumn: number = 0, position: Position | null = null, range: EditorRange | null = null, detail: any = null) {\n\t\tthis.element = element;\n\t\tthis.type = type;\n\t\tthis.mouseColumn = mouseColumn;\n\t\tthis.position = position;\n\t\tif (!range && position) {\n\t\t\trange = new EditorRange(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t}\n\t\tthis.range = range;\n\t\tthis.detail = detail;\n\t}\n\n\tprivate static _typeToString(type: MouseTargetType): string {\n\t\tif (type === MouseTargetType.TEXTAREA) {\n\t\t\treturn 'TEXTAREA';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_GLYPH_MARGIN) {\n\t\t\treturn 'GUTTER_GLYPH_MARGIN';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_NUMBERS) {\n\t\t\treturn 'GUTTER_LINE_NUMBERS';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_LINE_DECORATIONS) {\n\t\t\treturn 'GUTTER_LINE_DECORATIONS';\n\t\t}\n\t\tif (type === MouseTargetType.GUTTER_VIEW_ZONE) {\n\t\t\treturn 'GUTTER_VIEW_ZONE';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn 'CONTENT_TEXT';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_EMPTY) {\n\t\t\treturn 'CONTENT_EMPTY';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_VIEW_ZONE) {\n\t\t\treturn 'CONTENT_VIEW_ZONE';\n\t\t}\n\t\tif (type === MouseTargetType.CONTENT_WIDGET) {\n\t\t\treturn 'CONTENT_WIDGET';\n\t\t}\n\t\tif (type === MouseTargetType.OVERVIEW_RULER) {\n\t\t\treturn 'OVERVIEW_RULER';\n\t\t}\n\t\tif (type === MouseTargetType.SCROLLBAR) {\n\t\t\treturn 'SCROLLBAR';\n\t\t}\n\t\tif (type === MouseTargetType.OVERLAY_WIDGET) {\n\t\t\treturn 'OVERLAY_WIDGET';\n\t\t}\n\t\treturn 'UNKNOWN';\n\t}\n\n\tpublic static toString(target: IMouseTarget): string {\n\t\treturn this._typeToString(target.type) + ': ' + target.position + ' - ' + target.range + ' - ' + target.detail;\n\t}\n\n\tpublic toString(): string {\n\t\treturn MouseTarget.toString(this);\n\t}\n}\n\nclass ElementPath {\n\n\tpublic static isTextArea(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length === 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.TextArea\n\t\t);\n\t}\n\n\tpublic static isChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isStrictChildOfViewLines(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length > 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ViewLines\n\t\t);\n\t}\n\n\tpublic static isChildOfScrollableElement(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.ScrollableElement\n\t\t);\n\t}\n\n\tpublic static isChildOfMinimap(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.Minimap\n\t\t);\n\t}\n\n\tpublic static isChildOfContentWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 4\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[3] === PartFingerprint.ContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverflowingContentWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 1\n\t\t\t&& path[0] === PartFingerprint.OverflowingContentWidgets\n\t\t);\n\t}\n\n\tpublic static isChildOfOverlayWidgets(path: Uint8Array): boolean {\n\t\treturn (\n\t\t\tpath.length >= 2\n\t\t\t&& path[0] === PartFingerprint.OverflowGuard\n\t\t\t&& path[1] === PartFingerprint.OverlayWidgets\n\t\t);\n\t}\n}\n\nexport class HitTestContext {\n\n\tpublic readonly model: IViewModel;\n\tpublic readonly layoutInfo: EditorLayoutInfo;\n\tpublic readonly viewDomNode: HTMLElement;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly lastViewCursorsRenderData: IViewCursorRenderData[];\n\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(context: ViewContext, viewHelper: IPointerHandlerHelper, lastViewCursorsRenderData: IViewCursorRenderData[]) {\n\t\tthis.model = context.model;\n\t\tthis.layoutInfo = context.configuration.editor.layoutInfo;\n\t\tthis.viewDomNode = viewHelper.viewDomNode;\n\t\tthis.lineHeight = context.configuration.editor.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth = context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.lastViewCursorsRenderData = lastViewCursorsRenderData;\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic getZoneAtCoord(mouseVerticalOffset: number): IViewZoneData | null {\n\t\treturn HitTestContext.getZoneAtCoord(this._context, mouseVerticalOffset);\n\t}\n\n\tpublic static getZoneAtCoord(context: ViewContext, mouseVerticalOffset: number): IViewZoneData | null {\n\t\t// The target is either a view zone or the empty space after the last view-line\n\t\tconst viewZoneWhitespace = context.viewLayout.getWhitespaceAtVerticalOffset(mouseVerticalOffset);\n\n\t\tif (viewZoneWhitespace) {\n\t\t\tlet viewZoneMiddle = viewZoneWhitespace.verticalOffset + viewZoneWhitespace.height / 2,\n\t\t\t\tlineCount = context.model.getLineCount(),\n\t\t\t\tpositionBefore: Position | null = null,\n\t\t\t\tposition: Position | null,\n\t\t\t\tpositionAfter: Position | null = null;\n\n\t\t\tif (viewZoneWhitespace.afterLineNumber !== lineCount) {\n\t\t\t\t// There are more lines after this view zone\n\t\t\t\tpositionAfter = new Position(viewZoneWhitespace.afterLineNumber + 1, 1);\n\t\t\t}\n\t\t\tif (viewZoneWhitespace.afterLineNumber > 0) {\n\t\t\t\t// There are more lines above this view zone\n\t\t\t\tpositionBefore = new Position(viewZoneWhitespace.afterLineNumber, context.model.getLineMaxColumn(viewZoneWhitespace.afterLineNumber));\n\t\t\t}\n\n\t\t\tif (positionAfter === null) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else if (positionBefore === null) {\n\t\t\t\tposition = positionAfter;\n\t\t\t} else if (mouseVerticalOffset < viewZoneMiddle) {\n\t\t\t\tposition = positionBefore;\n\t\t\t} else {\n\t\t\t\tposition = positionAfter;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tviewZoneId: viewZoneWhitespace.id,\n\t\t\t\tafterLineNumber: viewZoneWhitespace.afterLineNumber,\n\t\t\t\tpositionBefore: positionBefore,\n\t\t\t\tpositionAfter: positionAfter,\n\t\t\t\tposition: position!\n\t\t\t};\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getFullLineRangeAtCoord(mouseVerticalOffset: number): { range: EditorRange; isAfterLines: boolean; } {\n\t\tif (this._context.viewLayout.isAfterLines(mouseVerticalOffset)) {\n\t\t\t// Below the last line\n\t\t\tconst lineNumber = this._context.model.getLineCount();\n\t\t\tconst maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n\t\t\treturn {\n\t\t\t\trange: new EditorRange(lineNumber, maxLineColumn, lineNumber, maxLineColumn),\n\t\t\t\tisAfterLines: true\n\t\t\t};\n\t\t}\n\n\t\tconst lineNumber = this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n\t\tconst maxLineColumn = this._context.model.getLineMaxColumn(lineNumber);\n\t\treturn {\n\t\t\trange: new EditorRange(lineNumber, 1, lineNumber, maxLineColumn),\n\t\t\tisAfterLines: false\n\t\t};\n\t}\n\n\tpublic getLineNumberAtVerticalOffset(mouseVerticalOffset: number): number {\n\t\treturn this._context.viewLayout.getLineNumberAtVerticalOffset(mouseVerticalOffset);\n\t}\n\n\tpublic isAfterLines(mouseVerticalOffset: number): boolean {\n\t\treturn this._context.viewLayout.isAfterLines(mouseVerticalOffset);\n\t}\n\n\tpublic getVerticalOffsetForLineNumber(lineNumber: number): number {\n\t\treturn this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n\t}\n\n\tpublic findAttribute(element: Element, attr: string): string | null {\n\t\treturn HitTestContext._findAttribute(element, attr, this._viewHelper.viewDomNode);\n\t}\n\n\tprivate static _findAttribute(element: Element, attr: string, stopAt: Element): string | null {\n\t\twhile (element && element !== document.body) {\n\t\t\tif (element.hasAttribute && element.hasAttribute(attr)) {\n\t\t\t\treturn element.getAttribute(attr);\n\t\t\t}\n\t\t\tif (element === stopAt) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telement = <Element>element.parentNode;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getLineWidth(lineNumber: number): number {\n\t\treturn this._viewHelper.getLineWidth(lineNumber);\n\t}\n\n\tpublic visibleRangeForPosition2(lineNumber: number, column: number): HorizontalRange | null {\n\t\treturn this._viewHelper.visibleRangeForPosition2(lineNumber, column);\n\t}\n\n\tpublic getPositionFromDOMInfo(spanNode: HTMLElement, offset: number): Position | null {\n\t\treturn this._viewHelper.getPositionFromDOMInfo(spanNode, offset);\n\t}\n\n\tpublic getCurrentScrollTop(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollTop();\n\t}\n\n\tpublic getCurrentScrollLeft(): number {\n\t\treturn this._context.viewLayout.getCurrentScrollLeft();\n\t}\n}\n\nabstract class BareHitTestRequest {\n\n\tpublic readonly editorPos: EditorPagePosition;\n\tpublic readonly pos: PageCoordinates;\n\tpublic readonly mouseVerticalOffset: number;\n\tpublic readonly isInMarginArea: boolean;\n\tpublic readonly isInContentArea: boolean;\n\tpublic readonly mouseContentHorizontalOffset: number;\n\n\tprotected readonly mouseColumn: number;\n\n\tconstructor(ctx: HitTestContext, editorPos: EditorPagePosition, pos: PageCoordinates) {\n\t\tthis.editorPos = editorPos;\n\t\tthis.pos = pos;\n\n\t\tthis.mouseVerticalOffset = Math.max(0, ctx.getCurrentScrollTop() + pos.y - editorPos.y);\n\t\tthis.mouseContentHorizontalOffset = ctx.getCurrentScrollLeft() + pos.x - editorPos.x - ctx.layoutInfo.contentLeft;\n\t\tthis.isInMarginArea = (pos.x - editorPos.x < ctx.layoutInfo.contentLeft && pos.x - editorPos.x >= ctx.layoutInfo.glyphMarginLeft);\n\t\tthis.isInContentArea = !this.isInMarginArea;\n\t\tthis.mouseColumn = Math.max(0, MouseTargetFactory._getMouseColumn(this.mouseContentHorizontalOffset, ctx.typicalHalfwidthCharacterWidth));\n\t}\n}\n\nclass HitTestRequest extends BareHitTestRequest {\n\tprivate readonly _ctx: HitTestContext;\n\tpublic readonly target: Element | null;\n\tpublic readonly targetPath: Uint8Array;\n\n\tconstructor(ctx: HitTestContext, editorPos: EditorPagePosition, pos: PageCoordinates, target: Element | null) {\n\t\tsuper(ctx, editorPos, pos);\n\t\tthis._ctx = ctx;\n\n\t\tif (target) {\n\t\t\tthis.target = target;\n\t\t\tthis.targetPath = PartFingerprints.collect(target, ctx.viewDomNode);\n\t\t} else {\n\t\t\tthis.target = null;\n\t\t\tthis.targetPath = new Uint8Array(0);\n\t\t}\n\t}\n\n\tpublic toString(): string {\n\t\treturn `pos(${this.pos.x},${this.pos.y}), editorPos(${this.editorPos.x},${this.editorPos.y}), mouseVerticalOffset: ${this.mouseVerticalOffset}, mouseContentHorizontalOffset: ${this.mouseContentHorizontalOffset}\\n\\ttarget: ${this.target ? (<HTMLElement>this.target).outerHTML : null}`;\n\t}\n\n\tpublic fulfill(type: MouseTargetType, position: Position | null = null, range: EditorRange | null = null, detail: any = null): MouseTarget {\n\t\treturn new MouseTarget(this.target, type, this.mouseColumn, position, range, detail);\n\t}\n\n\tpublic withTarget(target: Element | null): HitTestRequest {\n\t\treturn new HitTestRequest(this._ctx, this.editorPos, this.pos, target);\n\t}\n}\n\ninterface ResolvedHitTestRequest extends HitTestRequest {\n\treadonly target: Element;\n}\n\nconst EMPTY_CONTENT_AFTER_LINES: IEmptyContentData = { isAfterLines: true };\n\nfunction createEmptyContentDataInLines(horizontalDistanceToText: number): IEmptyContentData {\n\treturn {\n\t\tisAfterLines: false,\n\t\thorizontalDistanceToText: horizontalDistanceToText\n\t};\n}\n\nexport class MouseTargetFactory {\n\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _viewHelper: IPointerHandlerHelper;\n\n\tconstructor(context: ViewContext, viewHelper: IPointerHandlerHelper) {\n\t\tthis._context = context;\n\t\tthis._viewHelper = viewHelper;\n\t}\n\n\tpublic mouseTargetIsWidget(e: EditorMouseEvent): boolean {\n\t\tconst t = <Element>e.target;\n\t\tconst path = PartFingerprints.collect(t, this._viewHelper.viewDomNode);\n\n\t\t// Is it a content widget?\n\t\tif (ElementPath.isChildOfContentWidgets(path) || ElementPath.isChildOfOverflowingContentWidgets(path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Is it an overlay widget?\n\t\tif (ElementPath.isChildOfOverlayWidgets(path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic createMouseTarget(lastViewCursorsRenderData: IViewCursorRenderData[], editorPos: EditorPagePosition, pos: PageCoordinates, target: HTMLElement | null): IMouseTarget {\n\t\tconst ctx = new HitTestContext(this._context, this._viewHelper, lastViewCursorsRenderData);\n\t\tconst request = new HitTestRequest(ctx, editorPos, pos, target);\n\t\ttry {\n\t\t\tconst r = MouseTargetFactory._createMouseTarget(ctx, request, false);\n\t\t\t// console.log(r.toString());\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\t// console.log(err);\n\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN);\n\t\t}\n\t}\n\n\tprivate static _createMouseTarget(ctx: HitTestContext, request: HitTestRequest, domHitTestExecuted: boolean): MouseTarget {\n\n\t\t// console.log(`${domHitTestExecuted ? '=>' : ''}CAME IN REQUEST: ${request}`);\n\n\t\t// First ensure the request has a target\n\t\tif (request.target === null) {\n\t\t\tif (domHitTestExecuted) {\n\t\t\t\t// Still no target... and we have already executed hit test...\n\t\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN);\n\t\t\t}\n\n\t\t\tconst hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n\n\t\t\tif (hitTestResult.position) {\n\t\t\t\treturn MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.position.lineNumber, hitTestResult.position.column);\n\t\t\t}\n\n\t\t\treturn this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n\t\t}\n\n\t\t// we know for a fact that request.target is not null\n\t\tconst resolvedRequest = <ResolvedHitTestRequest>request;\n\n\t\tlet result: MouseTarget | null = null;\n\n\t\tresult = result || MouseTargetFactory._hitTestContentWidget(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestOverlayWidget(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestMinimap(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestScrollbarSlider(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewZone(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestMargin(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewCursor(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestTextArea(ctx, resolvedRequest);\n\t\tresult = result || MouseTargetFactory._hitTestViewLines(ctx, resolvedRequest, domHitTestExecuted);\n\t\tresult = result || MouseTargetFactory._hitTestScrollbar(ctx, resolvedRequest);\n\n\t\treturn (result || request.fulfill(MouseTargetType.UNKNOWN));\n\t}\n\n\tprivate static _hitTestContentWidget(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\t// Is it a content widget?\n\t\tif (ElementPath.isChildOfContentWidgets(request.targetPath) || ElementPath.isChildOfOverflowingContentWidgets(request.targetPath)) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, 'widgetId');\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_WIDGET, null, null, widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestOverlayWidget(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\t// Is it an overlay widget?\n\t\tif (ElementPath.isChildOfOverlayWidgets(request.targetPath)) {\n\t\t\tconst widgetId = ctx.findAttribute(request.target, 'widgetId');\n\t\t\tif (widgetId) {\n\t\t\t\treturn request.fulfill(MouseTargetType.OVERLAY_WIDGET, null, null, widgetId);\n\t\t\t} else {\n\t\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewCursor(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\n\t\tif (request.target) {\n\t\t\t// Check if we've hit a painted cursor\n\t\t\tconst lastViewCursorsRenderData = ctx.lastViewCursorsRenderData;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\n\t\t\t\tif (request.target === d.domNode) {\n\t\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_TEXT, d.position);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (request.isInContentArea) {\n\t\t\t// Edge has a bug when hit-testing the exact position of a cursor,\n\t\t\t// instead of returning the correct dom node, it returns the\n\t\t\t// first or last rendered view line dom node, therefore help it out\n\t\t\t// and first check if we are on top of a cursor\n\n\t\t\tconst lastViewCursorsRenderData = ctx.lastViewCursorsRenderData;\n\t\t\tconst mouseContentHorizontalOffset = request.mouseContentHorizontalOffset;\n\t\t\tconst mouseVerticalOffset = request.mouseVerticalOffset;\n\n\t\t\tfor (const d of lastViewCursorsRenderData) {\n\n\t\t\t\tif (mouseContentHorizontalOffset < d.contentLeft) {\n\t\t\t\t\t// mouse position is to the left of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (mouseContentHorizontalOffset > d.contentLeft + d.width) {\n\t\t\t\t\t// mouse position is to the right of the cursor\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst cursorVerticalOffset = ctx.getVerticalOffsetForLineNumber(d.position.lineNumber);\n\n\t\t\t\tif (\n\t\t\t\t\tcursorVerticalOffset <= mouseVerticalOffset\n\t\t\t\t\t&& mouseVerticalOffset <= cursorVerticalOffset + d.height\n\t\t\t\t) {\n\t\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_TEXT, d.position);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewZone(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\tconst viewZoneData = ctx.getZoneAtCoord(request.mouseVerticalOffset);\n\t\tif (viewZoneData) {\n\t\t\tconst mouseTargetType = (request.isInContentArea ? MouseTargetType.CONTENT_VIEW_ZONE : MouseTargetType.GUTTER_VIEW_ZONE);\n\t\t\treturn request.fulfill(mouseTargetType, viewZoneData.position, null, viewZoneData);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestTextArea(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\t// Is it the textarea?\n\t\tif (ElementPath.isTextArea(request.targetPath)) {\n\t\t\treturn request.fulfill(MouseTargetType.TEXTAREA);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestMargin(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\tif (request.isInMarginArea) {\n\t\t\tconst res = ctx.getFullLineRangeAtCoord(request.mouseVerticalOffset);\n\t\t\tconst pos = res.range.getStartPosition();\n\t\t\tlet offset = Math.abs(request.pos.x - request.editorPos.x);\n\t\t\tconst detail: IMarginData = {\n\t\t\t\tisAfterLines: res.isAfterLines,\n\t\t\t\tglyphMarginLeft: ctx.layoutInfo.glyphMarginLeft,\n\t\t\t\tglyphMarginWidth: ctx.layoutInfo.glyphMarginWidth,\n\t\t\t\tlineNumbersWidth: ctx.layoutInfo.lineNumbersWidth,\n\t\t\t\toffsetX: offset\n\t\t\t};\n\n\t\t\toffset -= ctx.layoutInfo.glyphMarginLeft;\n\n\t\t\tif (offset <= ctx.layoutInfo.glyphMarginWidth) {\n\t\t\t\t// On the glyph margin\n\t\t\t\treturn request.fulfill(MouseTargetType.GUTTER_GLYPH_MARGIN, pos, res.range, detail);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.glyphMarginWidth;\n\n\t\t\tif (offset <= ctx.layoutInfo.lineNumbersWidth) {\n\t\t\t\t// On the line numbers\n\t\t\t\treturn request.fulfill(MouseTargetType.GUTTER_LINE_NUMBERS, pos, res.range, detail);\n\t\t\t}\n\t\t\toffset -= ctx.layoutInfo.lineNumbersWidth;\n\n\t\t\t// On the line decorations\n\t\t\treturn request.fulfill(MouseTargetType.GUTTER_LINE_DECORATIONS, pos, res.range, detail);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestViewLines(ctx: HitTestContext, request: ResolvedHitTestRequest, domHitTestExecuted: boolean): MouseTarget | null {\n\t\tif (!ElementPath.isChildOfViewLines(request.targetPath)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Check if it is below any lines and any view zones\n\t\tif (ctx.isAfterLines(request.mouseVerticalOffset)) {\n\t\t\t// This most likely indicates it happened after the last view-line\n\t\t\tconst lineCount = ctx.model.getLineCount();\n\t\t\tconst maxLineColumn = ctx.model.getLineMaxColumn(lineCount);\n\t\t\treturn request.fulfill(MouseTargetType.CONTENT_EMPTY, new Position(lineCount, maxLineColumn), undefined, EMPTY_CONTENT_AFTER_LINES);\n\t\t}\n\n\t\tif (domHitTestExecuted) {\n\t\t\t// Check if we are hitting a view-line (can happen in the case of inline decorations on empty lines)\n\t\t\t// See https://github.com/Microsoft/vscode/issues/46942\n\t\t\tif (ElementPath.isStrictChildOfViewLines(request.targetPath)) {\n\t\t\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\t\tif (ctx.model.getLineLength(lineNumber) === 0) {\n\t\t\t\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\t\t\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_EMPTY, new Position(lineNumber, 1), undefined, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We have already executed hit test...\n\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN);\n\t\t}\n\n\t\tconst hitTestResult = MouseTargetFactory._doHitTest(ctx, request);\n\n\t\tif (hitTestResult.position) {\n\t\t\treturn MouseTargetFactory.createMouseTargetFromHitTestPosition(ctx, request, hitTestResult.position.lineNumber, hitTestResult.position.column);\n\t\t}\n\n\t\treturn this._createMouseTarget(ctx, request.withTarget(hitTestResult.hitTarget), true);\n\t}\n\n\tprivate static _hitTestMinimap(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\tif (ElementPath.isChildOfMinimap(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\tconst maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfill(MouseTargetType.SCROLLBAR, new Position(possibleLineNumber, maxColumn));\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbarSlider(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tif (request.target && request.target.nodeType === 1) {\n\t\t\t\tconst className = request.target.className;\n\t\t\t\tif (className && /\\b(slider|scrollbar)\\b/.test(className)) {\n\t\t\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\t\t\tconst maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n\t\t\t\t\treturn request.fulfill(MouseTargetType.SCROLLBAR, new Position(possibleLineNumber, maxColumn));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static _hitTestScrollbar(ctx: HitTestContext, request: ResolvedHitTestRequest): MouseTarget | null {\n\t\t// Is it the overview ruler?\n\t\t// Is it a child of the scrollable element?\n\t\tif (ElementPath.isChildOfScrollableElement(request.targetPath)) {\n\t\t\tconst possibleLineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\t\tconst maxColumn = ctx.model.getLineMaxColumn(possibleLineNumber);\n\t\t\treturn request.fulfill(MouseTargetType.SCROLLBAR, new Position(possibleLineNumber, maxColumn));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic getMouseColumn(editorPos: EditorPagePosition, pos: PageCoordinates): number {\n\t\tconst layoutInfo = this._context.configuration.editor.layoutInfo;\n\t\tconst mouseContentHorizontalOffset = this._context.viewLayout.getCurrentScrollLeft() + pos.x - editorPos.x - layoutInfo.contentLeft;\n\t\treturn MouseTargetFactory._getMouseColumn(mouseContentHorizontalOffset, this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth);\n\t}\n\n\tpublic static _getMouseColumn(mouseContentHorizontalOffset: number, typicalHalfwidthCharacterWidth: number): number {\n\t\tif (mouseContentHorizontalOffset < 0) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst chars = Math.round(mouseContentHorizontalOffset / typicalHalfwidthCharacterWidth);\n\t\treturn (chars + 1);\n\t}\n\n\tprivate static createMouseTargetFromHitTestPosition(ctx: HitTestContext, request: HitTestRequest, lineNumber: number, column: number): MouseTarget {\n\t\tconst pos = new Position(lineNumber, column);\n\n\t\tconst lineWidth = ctx.getLineWidth(lineNumber);\n\n\t\tif (request.mouseContentHorizontalOffset > lineWidth) {\n\t\t\tif (browser.isEdge && pos.column === 1) {\n\t\t\t\t// See https://github.com/Microsoft/vscode/issues/10875\n\t\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_EMPTY, new Position(lineNumber, ctx.model.getLineMaxColumn(lineNumber)), undefined, detail);\n\t\t\t}\n\t\t\tconst detail = createEmptyContentDataInLines(request.mouseContentHorizontalOffset - lineWidth);\n\t\t\treturn request.fulfill(MouseTargetType.CONTENT_EMPTY, pos, undefined, detail);\n\t\t}\n\n\t\tconst visibleRange = ctx.visibleRangeForPosition2(lineNumber, column);\n\n\t\tif (!visibleRange) {\n\t\t\treturn request.fulfill(MouseTargetType.UNKNOWN, pos);\n\t\t}\n\n\t\tconst columnHorizontalOffset = visibleRange.left;\n\n\t\tif (request.mouseContentHorizontalOffset === columnHorizontalOffset) {\n\t\t\treturn request.fulfill(MouseTargetType.CONTENT_TEXT, pos);\n\t\t}\n\n\t\t// Let's define a, b, c and check if the offset is in between them...\n\t\tinterface OffsetColumn { offset: number; column: number; }\n\n\t\tconst points: OffsetColumn[] = [];\n\t\tpoints.push({ offset: visibleRange.left, column: column });\n\t\tif (column > 1) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition2(lineNumber, column - 1);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column - 1 });\n\t\t\t}\n\t\t}\n\t\tconst lineMaxColumn = ctx.model.getLineMaxColumn(lineNumber);\n\t\tif (column < lineMaxColumn) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition2(lineNumber, column + 1);\n\t\t\tif (visibleRange) {\n\t\t\t\tpoints.push({ offset: visibleRange.left, column: column + 1 });\n\t\t\t}\n\t\t}\n\n\t\tpoints.sort((a, b) => a.offset - b.offset);\n\n\t\tfor (let i = 1; i < points.length; i++) {\n\t\t\tconst prev = points[i - 1];\n\t\t\tconst curr = points[i];\n\t\t\tif (prev.offset <= request.mouseContentHorizontalOffset && request.mouseContentHorizontalOffset <= curr.offset) {\n\t\t\t\tconst rng = new EditorRange(lineNumber, prev.column, lineNumber, curr.column);\n\t\t\t\treturn request.fulfill(MouseTargetType.CONTENT_TEXT, pos, rng);\n\t\t\t}\n\t\t}\n\t\treturn request.fulfill(MouseTargetType.CONTENT_TEXT, pos);\n\t}\n\n\t/**\n\t * Most probably WebKit browsers and Edge\n\t */\n\tprivate static _doHitTestWithCaretRangeFromPoint(ctx: HitTestContext, request: BareHitTestRequest): IHitTestResult {\n\n\t\t// In Chrome, especially on Linux it is possible to click between lines,\n\t\t// so try to adjust the `hity` below so that it lands in the center of a line\n\t\tconst lineNumber = ctx.getLineNumberAtVerticalOffset(request.mouseVerticalOffset);\n\t\tconst lineVerticalOffset = ctx.getVerticalOffsetForLineNumber(lineNumber);\n\t\tconst lineCenteredVerticalOffset = lineVerticalOffset + Math.floor(ctx.lineHeight / 2);\n\t\tlet adjustedPageY = request.pos.y + (lineCenteredVerticalOffset - request.mouseVerticalOffset);\n\n\t\tif (adjustedPageY <= request.editorPos.y) {\n\t\t\tadjustedPageY = request.editorPos.y + 1;\n\t\t}\n\t\tif (adjustedPageY >= request.editorPos.y + ctx.layoutInfo.height) {\n\t\t\tadjustedPageY = request.editorPos.y + ctx.layoutInfo.height - 1;\n\t\t}\n\n\t\tconst adjustedPage = new PageCoordinates(request.pos.x, adjustedPageY);\n\n\t\tconst r = this._actualDoHitTestWithCaretRangeFromPoint(ctx, adjustedPage.toClientCoordinates());\n\t\tif (r.position) {\n\t\t\treturn r;\n\t\t}\n\n\t\t// Also try to hit test without the adjustment (for the edge cases that we are near the top or bottom)\n\t\treturn this._actualDoHitTestWithCaretRangeFromPoint(ctx, request.pos.toClientCoordinates());\n\t}\n\n\tprivate static _actualDoHitTestWithCaretRangeFromPoint(ctx: HitTestContext, coords: ClientCoordinates): IHitTestResult {\n\n\t\tconst range: Range = document.caretRangeFromPoint(coords.clientX, coords.clientY);\n\n\t\tif (!range || !range.startContainer) {\n\t\t\treturn {\n\t\t\t\tposition: null,\n\t\t\t\thitTarget: null\n\t\t\t};\n\t\t}\n\n\t\t// Chrome always hits a TEXT_NODE, while Edge sometimes hits a token span\n\t\tconst startContainer = range.startContainer;\n\t\tlet hitTarget: HTMLElement | null = null;\n\n\t\tif (startContainer.nodeType === startContainer.TEXT_NODE) {\n\t\t\t// startContainer is expected to be the token text\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? (<HTMLElement>parent3).className : null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\tconst p = ctx.getPositionFromDOMInfo(<HTMLElement>parent1, range.startOffset);\n\t\t\t\treturn {\n\t\t\t\t\tposition: p,\n\t\t\t\t\thitTarget: null\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\thitTarget = <HTMLElement>startContainer.parentNode;\n\t\t\t}\n\t\t} else if (startContainer.nodeType === startContainer.ELEMENT_NODE) {\n\t\t\t// startContainer is expected to be the token span\n\t\t\tconst parent1 = startContainer.parentNode; // expected to be the view line container span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line div\n\t\t\tconst parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? (<HTMLElement>parent2).className : null;\n\n\t\t\tif (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\tconst p = ctx.getPositionFromDOMInfo(<HTMLElement>startContainer, (<HTMLElement>startContainer).textContent!.length);\n\t\t\t\treturn {\n\t\t\t\t\tposition: p,\n\t\t\t\t\thitTarget: null\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\thitTarget = <HTMLElement>startContainer;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: null,\n\t\t\thitTarget: hitTarget\n\t\t};\n\t}\n\n\t/**\n\t * Most probably Gecko\n\t */\n\tprivate static _doHitTestWithCaretPositionFromPoint(ctx: HitTestContext, coords: ClientCoordinates): IHitTestResult {\n\t\tconst hitResult: { offsetNode: Node; offset: number; } = (<any>document).caretPositionFromPoint(coords.clientX, coords.clientY);\n\n\t\tif (hitResult.offsetNode.nodeType === hitResult.offsetNode.TEXT_NODE) {\n\t\t\t// offsetNode is expected to be the token text\n\t\t\tconst parent1 = hitResult.offsetNode.parentNode; // expected to be the token span\n\t\t\tconst parent2 = parent1 ? parent1.parentNode : null; // expected to be the view line container span\n\t\t\tconst parent3 = parent2 ? parent2.parentNode : null; // expected to be the view line div\n\t\t\tconst parent3ClassName = parent3 && parent3.nodeType === parent3.ELEMENT_NODE ? (<HTMLElement>parent3).className : null;\n\n\t\t\tif (parent3ClassName === ViewLine.CLASS_NAME) {\n\t\t\t\tconst p = ctx.getPositionFromDOMInfo(<HTMLElement>hitResult.offsetNode.parentNode, hitResult.offset);\n\t\t\t\treturn {\n\t\t\t\t\tposition: p,\n\t\t\t\t\thitTarget: null\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\tposition: null,\n\t\t\t\t\thitTarget: <HTMLElement>hitResult.offsetNode.parentNode\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tposition: null,\n\t\t\thitTarget: <HTMLElement>hitResult.offsetNode\n\t\t};\n\t}\n\n\t/**\n\t * Most probably IE\n\t */\n\tprivate static _doHitTestWithMoveToPoint(ctx: HitTestContext, coords: ClientCoordinates): IHitTestResult {\n\t\tlet resultPosition: Position | null = null;\n\t\tlet resultHitTarget: Element | null = null;\n\n\t\tconst textRange: IETextRange = (<any>document.body).createTextRange();\n\t\ttry {\n\t\t\ttextRange.moveToPoint(coords.clientX, coords.clientY);\n\t\t} catch (err) {\n\t\t\treturn {\n\t\t\t\tposition: null,\n\t\t\t\thitTarget: null\n\t\t\t};\n\t\t}\n\n\t\ttextRange.collapse(true);\n\n\t\t// Now, let's do our best to figure out what we hit :)\n\t\tconst parentElement = textRange ? textRange.parentElement() : null;\n\t\tconst parent1 = parentElement ? parentElement.parentNode : null;\n\t\tconst parent2 = parent1 ? parent1.parentNode : null;\n\n\t\tconst parent2ClassName = parent2 && parent2.nodeType === parent2.ELEMENT_NODE ? (<HTMLElement>parent2).className : '';\n\n\t\tif (parent2ClassName === ViewLine.CLASS_NAME) {\n\t\t\tconst rangeToContainEntireSpan = textRange.duplicate();\n\t\t\trangeToContainEntireSpan.moveToElementText(parentElement!);\n\t\t\trangeToContainEntireSpan.setEndPoint('EndToStart', textRange);\n\n\t\t\tresultPosition = ctx.getPositionFromDOMInfo(<HTMLElement>parentElement, rangeToContainEntireSpan.text.length);\n\t\t\t// Move range out of the span node, IE doesn't like having many ranges in\n\t\t\t// the same spot and will act badly for lines containing dashes ('-')\n\t\t\trangeToContainEntireSpan.moveToElementText(ctx.viewDomNode);\n\t\t} else {\n\t\t\t// Looks like we've hit the hover or something foreign\n\t\t\tresultHitTarget = parentElement;\n\t\t}\n\n\t\t// Move range out of the span node, IE doesn't like having many ranges in\n\t\t// the same spot and will act badly for lines containing dashes ('-')\n\t\ttextRange.moveToElementText(ctx.viewDomNode);\n\n\t\treturn {\n\t\t\tposition: resultPosition,\n\t\t\thitTarget: resultHitTarget\n\t\t};\n\t}\n\n\tprivate static _doHitTest(ctx: HitTestContext, request: BareHitTestRequest): IHitTestResult {\n\t\t// State of the art (18.10.2012):\n\t\t// The spec says browsers should support document.caretPositionFromPoint, but nobody implemented it (http://dev.w3.org/csswg/cssom-view/)\n\t\t// Gecko:\n\t\t//    - they tried to implement it once, but failed: https://bugzilla.mozilla.org/show_bug.cgi?id=654352\n\t\t//    - however, they do give out rangeParent/rangeOffset properties on mouse events\n\t\t// Webkit:\n\t\t//    - they have implemented a previous version of the spec which was using document.caretRangeFromPoint\n\t\t// IE:\n\t\t//    - they have a proprietary method on ranges, moveToPoint: https://msdn.microsoft.com/en-us/library/ie/ms536632(v=vs.85).aspx\n\n\t\t// 24.08.2016: Edge has added WebKit's document.caretRangeFromPoint, but it is quite buggy\n\t\t//    - when hit testing the cursor it returns the first or the last line in the viewport\n\t\t//    - it inconsistently hits text nodes or span nodes, while WebKit only hits text nodes\n\t\t//    - when toggling render whitespace on, and hit testing in the empty content after a line, it always hits offset 0 of the first span of the line\n\n\t\t// Thank you browsers for making this so 'easy' :)\n\n\t\tif (document.caretRangeFromPoint) {\n\n\t\t\treturn this._doHitTestWithCaretRangeFromPoint(ctx, request);\n\n\t\t} else if ((<any>document).caretPositionFromPoint) {\n\n\t\t\treturn this._doHitTestWithCaretPositionFromPoint(ctx, request.pos.toClientCoordinates());\n\n\t\t} else if ((<any>document.body).createTextRange) {\n\n\t\t\treturn this._doHitTestWithMoveToPoint(ctx, request.pos.toClientCoordinates());\n\n\t\t}\n\n\t\treturn {\n\t\t\tposition: null,\n\t\t\thitTarget: null\n\t\t};\n\t}\n}\n"]}]}