{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/gotoLineHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/gotoLineHandler.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar quickOpen_2 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar editorColorRegistry_1 = require(\"vs/editor/common/view/editorColorRegistry\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar event_1 = require(\"vs/base/common/event\");\nexports.GOTO_LINE_PREFIX = ':';\nvar GotoLineAction = /** @class */ (function (_super) {\n    tslib_1.__extends(GotoLineAction, _super);\n    function GotoLineAction(actionId, actionLabel, _quickOpenService, editorService) {\n        var _this = _super.call(this, actionId, actionLabel, exports.GOTO_LINE_PREFIX, _quickOpenService) || this;\n        _this._quickOpenService = _quickOpenService;\n        _this.editorService = editorService;\n        return _this;\n    }\n    GotoLineAction.prototype.run = function () {\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (!activeTextEditorWidget) {\n            return Promise.resolve();\n        }\n        if (editorBrowser_1.isDiffEditor(activeTextEditorWidget)) {\n            activeTextEditorWidget = activeTextEditorWidget.getModifiedEditor();\n        }\n        var restoreOptions = null;\n        if (editorBrowser_1.isCodeEditor(activeTextEditorWidget)) {\n            var config = activeTextEditorWidget.getConfiguration();\n            if (config.viewInfo.renderLineNumbers === editorOptions_1.RenderLineNumbersType.Relative) {\n                activeTextEditorWidget.updateOptions({\n                    lineNumbers: 'on'\n                });\n                restoreOptions = {\n                    lineNumbers: 'relative'\n                };\n            }\n        }\n        var result = _super.prototype.run.call(this);\n        if (restoreOptions) {\n            event_1.Event.once(this._quickOpenService.onHide)(function () {\n                activeTextEditorWidget.updateOptions(restoreOptions);\n            });\n        }\n        return result;\n    };\n    GotoLineAction.ID = 'workbench.action.gotoLine';\n    GotoLineAction.LABEL = nls.localize('gotoLine', \"Go to Line...\");\n    GotoLineAction = tslib_1.__decorate([\n        tslib_1.__param(2, quickOpen_2.IQuickOpenService),\n        tslib_1.__param(3, editorService_1.IEditorService)\n    ], GotoLineAction);\n    return GotoLineAction;\n}(quickopen_1.QuickOpenAction));\nexports.GotoLineAction = GotoLineAction;\nvar GotoLineEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(GotoLineEntry, _super);\n    function GotoLineEntry(line, editorService, handler) {\n        var _this = _super.call(this, editorService) || this;\n        _this.parseInput(line);\n        _this.handler = handler;\n        return _this;\n    }\n    GotoLineEntry.prototype.parseInput = function (line) {\n        var numbers = line.split(/,|:|#/).map(function (part) { return parseInt(part, 10); }).filter(function (part) { return !isNaN(part); });\n        this.line = numbers[0];\n        this.column = numbers[1];\n    };\n    GotoLineEntry.prototype.getLabel = function () {\n        // Inform user about valid range if input is invalid\n        var maxLineNumber = this.getMaxLineNumber();\n        if (this.editorService.activeTextEditorWidget && this.invalidRange(maxLineNumber)) {\n            var position = this.editorService.activeTextEditorWidget.getPosition();\n            if (position) {\n                var currentLine = position.lineNumber;\n                if (maxLineNumber > 0) {\n                    return nls.localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}. Type a line number between 1 and {1} to navigate to.\", currentLine, maxLineNumber);\n                }\n                return nls.localize('gotoLineLabelEmpty', \"Current Line: {0}. Type a line number to navigate to.\", currentLine);\n            }\n        }\n        // Input valid, indicate action\n        return this.column ? nls.localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", this.line, this.column) : nls.localize('gotoLineLabel', \"Go to line {0}.\", this.line);\n    };\n    GotoLineEntry.prototype.invalidRange = function (maxLineNumber) {\n        if (maxLineNumber === void 0) { maxLineNumber = this.getMaxLineNumber(); }\n        return !this.line || !types.isNumber(this.line) || (maxLineNumber > 0 && types.isNumber(this.line) && this.line > maxLineNumber);\n    };\n    GotoLineEntry.prototype.getMaxLineNumber = function () {\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (!activeTextEditorWidget) {\n            return -1;\n        }\n        var model = activeTextEditorWidget.getModel();\n        if (model && model.modified && model.original) {\n            model = model.modified; // Support for diff editor models\n        }\n        return model && types.isFunction(model.getLineCount) ? model.getLineCount() : -1;\n    };\n    GotoLineEntry.prototype.run = function (mode, context) {\n        if (mode === quickOpen_1.Mode.OPEN) {\n            return this.runOpen(context);\n        }\n        return this.runPreview();\n    };\n    GotoLineEntry.prototype.getInput = function () {\n        return types.withUndefinedAsNull(this.editorService.activeEditor);\n    };\n    GotoLineEntry.prototype.getOptions = function (pinned) {\n        return {\n            selection: this.toSelection(),\n            pinned: pinned\n        };\n    };\n    GotoLineEntry.prototype.runOpen = function (context) {\n        // No-op if range is not valid\n        if (this.invalidRange()) {\n            return false;\n        }\n        // Check for sideBySide use\n        var sideBySide = context.keymods.ctrlCmd;\n        if (sideBySide) {\n            this.editorService.openEditor(this.getInput(), this.getOptions(context.keymods.alt), editorService_1.SIDE_GROUP);\n        }\n        // Apply selection and focus\n        var range = this.toSelection();\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (activeTextEditorWidget) {\n            activeTextEditorWidget.setSelection(range);\n            activeTextEditorWidget.revealRangeInCenter(range, editorCommon_1.ScrollType.Smooth);\n        }\n        return true;\n    };\n    GotoLineEntry.prototype.runPreview = function () {\n        // No-op if range is not valid\n        if (this.invalidRange()) {\n            this.handler.clearDecorations();\n            return false;\n        }\n        // Select Line Position\n        var range = this.toSelection();\n        var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n        if (activeTextEditorWidget) {\n            activeTextEditorWidget.revealRangeInCenter(range, editorCommon_1.ScrollType.Smooth);\n            // Decorate if possible\n            if (this.editorService.activeControl && types.isFunction(activeTextEditorWidget.changeDecorations)) {\n                this.handler.decorateOutline(range, activeTextEditorWidget, this.editorService.activeControl.group);\n            }\n        }\n        return false;\n    };\n    GotoLineEntry.prototype.toSelection = function () {\n        return {\n            startLineNumber: this.line,\n            startColumn: this.column || 1,\n            endLineNumber: this.line,\n            endColumn: this.column || 1\n        };\n    };\n    return GotoLineEntry;\n}(quickopen_1.EditorQuickOpenEntry));\nvar GotoLineHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(GotoLineHandler, _super);\n    function GotoLineHandler(editorService) {\n        var _this = _super.call(this) || this;\n        _this.editorService = editorService;\n        _this.rangeHighlightDecorationId = null;\n        _this.lastKnownEditorViewState = null;\n        return _this;\n    }\n    GotoLineHandler.prototype.getAriaLabel = function () {\n        if (this.editorService.activeTextEditorWidget) {\n            var position = this.editorService.activeTextEditorWidget.getPosition();\n            if (position) {\n                var currentLine = position.lineNumber;\n                return nls.localize('gotoLineLabelEmpty', \"Current Line: {0}. Type a line number to navigate to.\", currentLine);\n            }\n        }\n        return nls.localize('cannotRunGotoLine', \"Open a text file first to go to a line.\");\n    };\n    GotoLineHandler.prototype.getResults = function (searchValue, token) {\n        searchValue = searchValue.trim();\n        // Remember view state to be able to restore on cancel\n        if (!this.lastKnownEditorViewState) {\n            var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n            if (activeTextEditorWidget) {\n                this.lastKnownEditorViewState = activeTextEditorWidget.saveViewState();\n            }\n        }\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel([new GotoLineEntry(searchValue, this.editorService, this)]));\n    };\n    GotoLineHandler.prototype.canRun = function () {\n        var canRun = !!this.editorService.activeTextEditorWidget;\n        return canRun ? true : nls.localize('cannotRunGotoLine', \"Open a text file first to go to a line.\");\n    };\n    GotoLineHandler.prototype.decorateOutline = function (range, editor, group) {\n        var _this = this;\n        editor.changeDecorations(function (changeAccessor) {\n            var deleteDecorations = [];\n            if (_this.rangeHighlightDecorationId) {\n                deleteDecorations.push(_this.rangeHighlightDecorationId.lineDecorationId);\n                deleteDecorations.push(_this.rangeHighlightDecorationId.rangeHighlightId);\n                _this.rangeHighlightDecorationId = null;\n            }\n            var newDecorations = [\n                // rangeHighlight at index 0\n                {\n                    range: range,\n                    options: {\n                        className: 'rangeHighlight',\n                        isWholeLine: true\n                    }\n                },\n                // lineDecoration at index 1\n                {\n                    range: range,\n                    options: {\n                        overviewRuler: {\n                            color: themeService_1.themeColorFromId(editorColorRegistry_1.overviewRulerRangeHighlight),\n                            position: model_1.OverviewRulerLane.Full\n                        }\n                    }\n                }\n            ];\n            var decorations = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n            var rangeHighlightId = decorations[0];\n            var lineDecorationId = decorations[1];\n            _this.rangeHighlightDecorationId = {\n                groupId: group.id,\n                rangeHighlightId: rangeHighlightId,\n                lineDecorationId: lineDecorationId,\n            };\n        });\n    };\n    GotoLineHandler.prototype.clearDecorations = function () {\n        var rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n        if (rangeHighlightDecorationId) {\n            this.editorService.visibleControls.forEach(function (editor) {\n                if (editor.group && editor.group.id === rangeHighlightDecorationId.groupId) {\n                    var editorControl = editor.getControl();\n                    editorControl.changeDecorations(function (changeAccessor) {\n                        changeAccessor.deltaDecorations([\n                            rangeHighlightDecorationId.lineDecorationId,\n                            rangeHighlightDecorationId.rangeHighlightId\n                        ], []);\n                    });\n                }\n            });\n            this.rangeHighlightDecorationId = null;\n        }\n    };\n    GotoLineHandler.prototype.onClose = function (canceled) {\n        // Clear Highlight Decorations if present\n        this.clearDecorations();\n        // Restore selection if canceled\n        if (canceled && this.lastKnownEditorViewState) {\n            var activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n            if (activeTextEditorWidget) {\n                activeTextEditorWidget.restoreViewState(this.lastKnownEditorViewState);\n            }\n        }\n        this.lastKnownEditorViewState = null;\n    };\n    GotoLineHandler.prototype.getAutoFocus = function (searchValue) {\n        return {\n            autoFocusFirstEntry: searchValue.trim().length > 0\n        };\n    };\n    GotoLineHandler.ID = 'workbench.picker.line';\n    GotoLineHandler = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService)\n    ], GotoLineHandler);\n    return GotoLineHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.GotoLineHandler = GotoLineHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/gotoLineHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/quickopen/browser/gotoLineHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { IEntryRunContext, Mode, IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenModel } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { QuickOpenHandler, EditorQuickOpenEntry, QuickOpenAction } from 'vs/workbench/browser/quickopen';\nimport { IEditor, IEditorViewState, IDiffEditorModel, ScrollType } from 'vs/editor/common/editorCommon';\nimport { OverviewRulerLane, IModelDeltaDecoration, ITextModel } from 'vs/editor/common/model';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorInput, GroupIdentifier } from 'vs/workbench/common/editor';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { overviewRulerRangeHighlight } from 'vs/editor/common/view/editorColorRegistry';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\nimport { IEditorOptions, RenderLineNumbersType } from 'vs/editor/common/config/editorOptions';\nimport { IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { isCodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Event } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const GOTO_LINE_PREFIX = ':';\n\nexport class GotoLineAction extends QuickOpenAction {\n\n\tstatic readonly ID = 'workbench.action.gotoLine';\n\tstatic readonly LABEL = nls.localize('gotoLine', \"Go to Line...\");\n\n\tconstructor(actionId: string, actionLabel: string,\n\t\t@IQuickOpenService private readonly _quickOpenService: IQuickOpenService,\n\t\t@IEditorService private readonly editorService: IEditorService\n\t) {\n\t\tsuper(actionId, actionLabel, GOTO_LINE_PREFIX, _quickOpenService);\n\t}\n\n\trun(): Promise<void> {\n\n\t\tlet activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (!activeTextEditorWidget) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (isDiffEditor(activeTextEditorWidget)) {\n\t\t\tactiveTextEditorWidget = activeTextEditorWidget.getModifiedEditor();\n\t\t}\n\t\tlet restoreOptions: IEditorOptions | null = null;\n\n\t\tif (isCodeEditor(activeTextEditorWidget)) {\n\t\t\tconst config = activeTextEditorWidget.getConfiguration();\n\t\t\tif (config.viewInfo.renderLineNumbers === RenderLineNumbersType.Relative) {\n\t\t\t\tactiveTextEditorWidget.updateOptions({\n\t\t\t\t\tlineNumbers: 'on'\n\t\t\t\t});\n\t\t\t\trestoreOptions = {\n\t\t\t\t\tlineNumbers: 'relative'\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst result = super.run();\n\n\t\tif (restoreOptions) {\n\t\t\tEvent.once(this._quickOpenService.onHide)(() => {\n\t\t\t\tactiveTextEditorWidget!.updateOptions(restoreOptions!);\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass GotoLineEntry extends EditorQuickOpenEntry {\n\tprivate line!: number;\n\tprivate column!: number;\n\tprivate handler: GotoLineHandler;\n\n\tconstructor(line: string, editorService: IEditorService, handler: GotoLineHandler) {\n\t\tsuper(editorService);\n\n\t\tthis.parseInput(line);\n\t\tthis.handler = handler;\n\t}\n\n\tprivate parseInput(line: string) {\n\t\tconst numbers = line.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n\t\tthis.line = numbers[0];\n\t\tthis.column = numbers[1];\n\t}\n\n\tgetLabel(): string {\n\n\t\t// Inform user about valid range if input is invalid\n\t\tconst maxLineNumber = this.getMaxLineNumber();\n\n\t\tif (this.editorService.activeTextEditorWidget && this.invalidRange(maxLineNumber)) {\n\t\t\tconst position = this.editorService.activeTextEditorWidget.getPosition();\n\t\t\tif (position) {\n\t\t\t\tconst currentLine = position.lineNumber;\n\n\t\t\t\tif (maxLineNumber > 0) {\n\t\t\t\t\treturn nls.localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}. Type a line number between 1 and {1} to navigate to.\", currentLine, maxLineNumber);\n\t\t\t\t}\n\n\t\t\t\treturn nls.localize('gotoLineLabelEmpty', \"Current Line: {0}. Type a line number to navigate to.\", currentLine);\n\t\t\t}\n\t\t}\n\n\t\t// Input valid, indicate action\n\t\treturn this.column ? nls.localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", this.line, this.column) : nls.localize('gotoLineLabel', \"Go to line {0}.\", this.line);\n\t}\n\n\tprivate invalidRange(maxLineNumber: number = this.getMaxLineNumber()): boolean {\n\t\treturn !this.line || !types.isNumber(this.line) || (maxLineNumber > 0 && types.isNumber(this.line) && this.line > maxLineNumber);\n\t}\n\n\tprivate getMaxLineNumber(): number {\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (!activeTextEditorWidget) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet model = activeTextEditorWidget.getModel();\n\t\tif (model && (<IDiffEditorModel>model).modified && (<IDiffEditorModel>model).original) {\n\t\t\tmodel = (<IDiffEditorModel>model).modified; // Support for diff editor models\n\t\t}\n\n\t\treturn model && types.isFunction((<ITextModel>model).getLineCount) ? (<ITextModel>model).getLineCount() : -1;\n\t}\n\n\trun(mode: Mode, context: IEntryRunContext): boolean {\n\t\tif (mode === Mode.OPEN) {\n\t\t\treturn this.runOpen(context);\n\t\t}\n\n\t\treturn this.runPreview();\n\t}\n\n\tgetInput(): IEditorInput | null {\n\t\treturn types.withUndefinedAsNull(this.editorService.activeEditor);\n\t}\n\n\tgetOptions(pinned?: boolean): ITextEditorOptions {\n\t\treturn {\n\t\t\tselection: this.toSelection(),\n\t\t\tpinned\n\t\t};\n\t}\n\n\trunOpen(context: IEntryRunContext): boolean {\n\n\t\t// No-op if range is not valid\n\t\tif (this.invalidRange()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for sideBySide use\n\t\tconst sideBySide = context.keymods.ctrlCmd;\n\t\tif (sideBySide) {\n\t\t\tthis.editorService.openEditor(this.getInput()!, this.getOptions(context.keymods.alt), SIDE_GROUP);\n\t\t}\n\n\t\t// Apply selection and focus\n\t\tconst range = this.toSelection();\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (activeTextEditorWidget) {\n\t\t\tactiveTextEditorWidget.setSelection(range);\n\t\t\tactiveTextEditorWidget.revealRangeInCenter(range, ScrollType.Smooth);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\trunPreview(): boolean {\n\n\t\t// No-op if range is not valid\n\t\tif (this.invalidRange()) {\n\t\t\tthis.handler.clearDecorations();\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Select Line Position\n\t\tconst range = this.toSelection();\n\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\tif (activeTextEditorWidget) {\n\t\t\tactiveTextEditorWidget.revealRangeInCenter(range, ScrollType.Smooth);\n\n\t\t\t// Decorate if possible\n\t\t\tif (this.editorService.activeControl && types.isFunction(activeTextEditorWidget.changeDecorations)) {\n\t\t\t\tthis.handler.decorateOutline(range, activeTextEditorWidget, this.editorService.activeControl.group);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate toSelection(): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: this.line,\n\t\t\tstartColumn: this.column || 1,\n\t\t\tendLineNumber: this.line,\n\t\t\tendColumn: this.column || 1\n\t\t};\n\t}\n}\n\ninterface IEditorLineDecoration {\n\tgroupId: GroupIdentifier;\n\trangeHighlightId: string;\n\tlineDecorationId: string;\n}\n\nexport class GotoLineHandler extends QuickOpenHandler {\n\n\tstatic readonly ID = 'workbench.picker.line';\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | null = null;\n\tprivate lastKnownEditorViewState: IEditorViewState | null = null;\n\n\tconstructor(@IEditorService private readonly editorService: IEditorService) {\n\t\tsuper();\n\t}\n\n\tgetAriaLabel(): string {\n\t\tif (this.editorService.activeTextEditorWidget) {\n\t\t\tconst position = this.editorService.activeTextEditorWidget.getPosition();\n\t\t\tif (position) {\n\t\t\t\tconst currentLine = position.lineNumber;\n\t\t\t\treturn nls.localize('gotoLineLabelEmpty', \"Current Line: {0}. Type a line number to navigate to.\", currentLine);\n\t\t\t}\n\t\t}\n\n\t\treturn nls.localize('cannotRunGotoLine', \"Open a text file first to go to a line.\");\n\t}\n\n\tgetResults(searchValue: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tsearchValue = searchValue.trim();\n\n\t\t// Remember view state to be able to restore on cancel\n\t\tif (!this.lastKnownEditorViewState) {\n\t\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\t\tif (activeTextEditorWidget) {\n\t\t\t\tthis.lastKnownEditorViewState = activeTextEditorWidget.saveViewState();\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(new QuickOpenModel([new GotoLineEntry(searchValue, this.editorService, this)]));\n\t}\n\n\tcanRun(): boolean | string {\n\t\tconst canRun = !!this.editorService.activeTextEditorWidget;\n\n\t\treturn canRun ? true : nls.localize('cannotRunGotoLine', \"Open a text file first to go to a line.\");\n\t}\n\n\tdecorateOutline(range: IRange, editor: IEditor, group: IEditorGroup): void {\n\t\teditor.changeDecorations(changeAccessor => {\n\t\t\tconst deleteDecorations: string[] = [];\n\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.lineDecorationId);\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n\t\t\t\tthis.rangeHighlightDecorationId = null;\n\t\t\t}\n\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\t\t\t\t// rangeHighlight at index 0\n\t\t\t\t{\n\t\t\t\t\trange: range,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tclassName: 'rangeHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// lineDecoration at index 1\n\t\t\t\t{\n\t\t\t\t\trange: range,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(overviewRulerRangeHighlight),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tconst decorations = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n\t\t\tconst rangeHighlightId = decorations[0];\n\t\t\tconst lineDecorationId = decorations[1];\n\n\t\t\tthis.rangeHighlightDecorationId = {\n\t\t\t\tgroupId: group.id,\n\t\t\t\trangeHighlightId: rangeHighlightId,\n\t\t\t\tlineDecorationId: lineDecorationId,\n\t\t\t};\n\t\t});\n\t}\n\n\tclearDecorations(): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\tthis.editorService.visibleControls.forEach(editor => {\n\t\t\t\tif (editor.group && editor.group.id === rangeHighlightDecorationId.groupId) {\n\t\t\t\t\tconst editorControl = <IEditor>editor.getControl();\n\t\t\t\t\teditorControl.changeDecorations(changeAccessor => {\n\t\t\t\t\t\tchangeAccessor.deltaDecorations([\n\t\t\t\t\t\t\trangeHighlightDecorationId.lineDecorationId,\n\t\t\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId\n\t\t\t\t\t\t], []);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = null;\n\t\t}\n\t}\n\n\tonClose(canceled: boolean): void {\n\n\t\t// Clear Highlight Decorations if present\n\t\tthis.clearDecorations();\n\n\t\t// Restore selection if canceled\n\t\tif (canceled && this.lastKnownEditorViewState) {\n\t\t\tconst activeTextEditorWidget = this.editorService.activeTextEditorWidget;\n\t\t\tif (activeTextEditorWidget) {\n\t\t\t\tactiveTextEditorWidget.restoreViewState(this.lastKnownEditorViewState);\n\t\t\t}\n\t\t}\n\n\t\tthis.lastKnownEditorViewState = null;\n\t}\n\n\tgetAutoFocus(searchValue: string): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: searchValue.trim().length > 0\n\t\t};\n\t}\n}\n"]}]}