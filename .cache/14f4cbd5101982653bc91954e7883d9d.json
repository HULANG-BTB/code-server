{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/codeEditor.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/codeEditor.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path_1 = require(\"path\");\nvar editor = require(\"vs/editor/browser/services/codeEditorServiceImpl\");\n/**\n * This converts icon paths for decorations to the correct URL.\n */\nvar CodeEditorServiceImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(CodeEditorServiceImpl, _super);\n    function CodeEditorServiceImpl() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CodeEditorServiceImpl.prototype.registerDecorationType = function (key, options, parentTypeKey) {\n        _super.prototype.registerDecorationType.call(this, key, options ? tslib_1.__assign({}, options, { gutterIconPath: options.gutterIconPath && options.gutterIconPath.scheme === \"file\" ? tslib_1.__assign({}, options.gutterIconPath, { scheme: location.protocol.replace(\":\", \"\"), authority: location.host, path: path_1.join(\"/resource\", options.gutterIconPath.path) }) : options.gutterIconPath }) : {}, parentTypeKey);\n    };\n    return CodeEditorServiceImpl;\n}(editor.CodeEditorServiceImpl));\nvar target = editor;\ntarget.CodeEditorServiceImpl = CodeEditorServiceImpl;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/codeEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/codeEditor.ts"],"names":[],"mappings":";;;AAAA,6BAA4B;AAC5B,yEAA2E;AAG3E;;GAEG;AACH;IAA6C,iDAA4B;IAAzE;;IAYA,CAAC;IAXO,sDAAsB,GAA7B,UAA8B,GAAW,EAAE,OAAiC,EAAE,aAAsB;QACnG,iBAAM,sBAAsB,YAAC,GAAG,EAAE,OAAO,CAAC,CAAC,sBACvC,OAAO,IACV,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,cAAc,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,sBAChF,OAAO,CAAC,cAAc,IACzB,MAAM,EAAE,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAC1C,SAAS,EAAE,QAAQ,CAAC,IAAI,EACxB,IAAI,EAAE,WAAI,CAAC,WAAW,EAAE,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IACnD,CAAC,CAAA,OAAO,CAAC,cAAc,IACxB,CAAC,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;IACxB,CAAC;IACF,4BAAC;AAAD,CAAC,AAZD,CAA6C,MAAM,CAAC,qBAAqB,GAYxE;AAED,IAAM,MAAM,GAAG,MAAuB,CAAC;AACvC,MAAM,CAAC,qBAAqB,GAAG,qBAAqB,CAAC","sourcesContent":["import { join } from \"path\";\nimport * as editor from \"vs/editor/browser/services/codeEditorServiceImpl\";\nimport { IDecorationRenderOptions } from \"vs/editor/common/editorCommon\";\n\n/**\n * This converts icon paths for decorations to the correct URL.\n */\nabstract class CodeEditorServiceImpl extends editor.CodeEditorServiceImpl {\n\tpublic registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string): void {\n\t\tsuper.registerDecorationType(key, options ? {\n\t\t\t...options,\n\t\t\tgutterIconPath: options.gutterIconPath && options.gutterIconPath.scheme === \"file\" ? {\n\t\t\t\t...options.gutterIconPath,\n\t\t\t\tscheme: location.protocol.replace(\":\", \"\"),\n\t\t\t\tauthority: location.host,\n\t\t\t\tpath: join(\"/resource\", options.gutterIconPath.path),\n\t\t\t} :options.gutterIconPath,\n\t\t} : {}, parentTypeKey);\n\t}\n}\n\nconst target = editor as typeof editor;\ntarget.CodeEditorServiceImpl = CodeEditorServiceImpl;\n"]}]}