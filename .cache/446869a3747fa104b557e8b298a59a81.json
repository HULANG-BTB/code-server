{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/marked/marked\", \"vs/base/common/platform\", \"vs/base/common/uri\", \"vs/base/node/request\", \"vs/editor/common/modes\", \"vs/editor/common/modes/supports/tokenization\", \"vs/editor/common/modes/textToHtmlTokenizer\", \"vs/editor/common/services/modeService\", \"vs/nls\", \"vs/platform/environment/common/environment\", \"vs/platform/keybinding/common/keybinding\", \"vs/platform/opener/common/opener\", \"vs/platform/request/node/request\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/telemetry/node/telemetryNodeUtils\", \"vs/workbench/contrib/webview/electron-browser/webviewEditorService\", \"vs/workbench/services/editor/common/editorService\", \"vs/base/common/keybindingParser\", \"vs/base/common/cancellation\", \"vs/workbench/services/extensions/common/extensions\", \"vs/workbench/services/editor/common/editorGroupsService\"], function (require, exports, errors_1, marked, platform_1, uri_1, request_1, modes_1, tokenization_1, textToHtmlTokenizer_1, modeService_1, nls, environment_1, keybinding_1, opener_1, request_2, telemetry_1, telemetryNodeUtils_1, webviewEditorService_1, editorService_1, keybindingParser_1, cancellation_1, extensions_1, editorGroupsService_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function renderBody(body, css) {\n        const styleSheetPath = require.toUrl('./media/markdown.css').replace('file://', 'vscode-core-resource://');\n        return `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<base href=\"https://code.visualstudio.com/raw/\">\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource: https: 'unsafe-inline'; child-src 'none'; frame-src 'none';\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${styleSheetPath}\">\n\t\t\t\t<style>${css}</style>\n\t\t\t</head>\n\t\t\t<body>${body}</body>\n\t\t</html>`;\n    }\n    let ReleaseNotesManager = class ReleaseNotesManager {\n        constructor(_environmentService, _keybindingService, _modeService, _openerService, _requestService, _telemetryService, _editorService, _editorGroupService, _webviewEditorService, _extensionService) {\n            this._environmentService = _environmentService;\n            this._keybindingService = _keybindingService;\n            this._modeService = _modeService;\n            this._openerService = _openerService;\n            this._requestService = _requestService;\n            this._telemetryService = _telemetryService;\n            this._editorService = _editorService;\n            this._editorGroupService = _editorGroupService;\n            this._webviewEditorService = _webviewEditorService;\n            this._extensionService = _extensionService;\n            this._releaseNotesCache = Object.create(null);\n            this._currentReleaseNotes = undefined;\n            modes_1.TokenizationRegistry.onDidChange(() => __awaiter(this, void 0, void 0, function* () {\n                if (!this._currentReleaseNotes || !this._lastText) {\n                    return;\n                }\n                const html = yield this.renderBody(this._lastText);\n                if (this._currentReleaseNotes) {\n                    this._currentReleaseNotes.html = html;\n                }\n            }));\n        }\n        show(accessor, version) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const releaseNoteText = yield this.loadReleaseNotes(version);\n                this._lastText = releaseNoteText;\n                const html = yield this.renderBody(releaseNoteText);\n                const title = nls.localize('releaseNotesInputName', \"Release Notes: {0}\", version);\n                const activeControl = this._editorService.activeControl;\n                if (this._currentReleaseNotes) {\n                    this._currentReleaseNotes.setName(title);\n                    this._currentReleaseNotes.html = html;\n                    this._webviewEditorService.revealWebview(this._currentReleaseNotes, activeControl ? activeControl.group : this._editorGroupService.activeGroup, false);\n                }\n                else {\n                    this._currentReleaseNotes = this._webviewEditorService.createWebview('releaseNotes', title, { group: editorService_1.ACTIVE_GROUP, preserveFocus: false }, { tryRestoreScrollPosition: true, enableFindWidget: true }, undefined, {\n                        onDidClickLink: uri => this.onDidClickLink(uri),\n                        onDispose: () => { this._currentReleaseNotes = undefined; }\n                    });\n                    const iconPath = uri_1.URI.parse(require.toUrl('./media/code-icon.svg'));\n                    this._currentReleaseNotes.iconPath = {\n                        light: iconPath,\n                        dark: iconPath\n                    };\n                    this._currentReleaseNotes.html = html;\n                }\n                return true;\n            });\n        }\n        loadReleaseNotes(version) {\n            const match = /^(\\d+\\.\\d+)\\./.exec(version);\n            if (!match) {\n                return Promise.reject(new Error('not found'));\n            }\n            const versionLabel = match[1].replace(/\\./g, '_');\n            const baseUrl = 'https://code.visualstudio.com/raw';\n            const url = `${baseUrl}/v${versionLabel}.md`;\n            const unassigned = nls.localize('unassigned', \"unassigned\");\n            const patchKeybindings = (text) => {\n                const kb = (match, kb) => {\n                    const keybinding = this._keybindingService.lookupKeybinding(kb);\n                    if (!keybinding) {\n                        return unassigned;\n                    }\n                    return keybinding.getLabel() || unassigned;\n                };\n                const kbstyle = (match, kb) => {\n                    const keybinding = keybindingParser_1.KeybindingParser.parseKeybinding(kb, platform_1.OS);\n                    if (!keybinding) {\n                        return unassigned;\n                    }\n                    const resolvedKeybindings = this._keybindingService.resolveKeybinding(keybinding);\n                    if (resolvedKeybindings.length === 0) {\n                        return unassigned;\n                    }\n                    return resolvedKeybindings[0].getLabel() || unassigned;\n                };\n                return text\n                    .replace(/kb\\(([a-z.\\d\\-]+)\\)/gi, kb)\n                    .replace(/kbstyle\\(([^\\)]+)\\)/gi, kbstyle);\n            };\n            if (!this._releaseNotesCache[version]) {\n                this._releaseNotesCache[version] = this._requestService.request({ url }, cancellation_1.CancellationToken.None)\n                    .then(request_1.asText)\n                    .then(text => {\n                    if (!text || !/^#\\s/.test(text)) { // release notes always starts with `#` followed by whitespace\n                        return Promise.reject(new Error('Invalid release notes'));\n                    }\n                    return Promise.resolve(text);\n                })\n                    .then(text => patchKeybindings(text));\n            }\n            return this._releaseNotesCache[version];\n        }\n        onDidClickLink(uri) {\n            telemetryNodeUtils_1.addGAParameters(this._telemetryService, this._environmentService, uri, 'ReleaseNotes')\n                .then(updated => this._openerService.open(updated))\n                .then(undefined, errors_1.onUnexpectedError);\n        }\n        renderBody(text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const content = yield this.renderContent(text);\n                const colorMap = modes_1.TokenizationRegistry.getColorMap();\n                const css = colorMap ? tokenization_1.generateTokensCSSForColorMap(colorMap) : '';\n                const body = renderBody(content, css);\n                return body;\n            });\n        }\n        renderContent(text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const renderer = yield this.getRenderer(text);\n                return marked(text, { renderer });\n            });\n        }\n        getRenderer(text) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let result = [];\n                const renderer = new marked.Renderer();\n                renderer.code = (_code, lang) => {\n                    const modeId = this._modeService.getModeIdForLanguageName(lang);\n                    if (modeId) {\n                        result.push(this._extensionService.whenInstalledExtensionsRegistered().then(() => {\n                            this._modeService.triggerMode(modeId);\n                            return modes_1.TokenizationRegistry.getPromise(modeId);\n                        }));\n                    }\n                    return '';\n                };\n                marked(text, { renderer });\n                yield Promise.all(result);\n                renderer.code = (code, lang) => {\n                    const modeId = this._modeService.getModeIdForLanguageName(lang);\n                    return `<code>${textToHtmlTokenizer_1.tokenizeToString(code, modeId ? modes_1.TokenizationRegistry.get(modeId) : undefined)}</code>`;\n                };\n                return renderer;\n            });\n        }\n    };\n    ReleaseNotesManager = __decorate([\n        __param(0, environment_1.IEnvironmentService),\n        __param(1, keybinding_1.IKeybindingService),\n        __param(2, modeService_1.IModeService),\n        __param(3, opener_1.IOpenerService),\n        __param(4, request_2.IRequestService),\n        __param(5, telemetry_1.ITelemetryService),\n        __param(6, editorService_1.IEditorService),\n        __param(7, editorGroupsService_1.IEditorGroupsService),\n        __param(8, webviewEditorService_1.IWebviewEditorService),\n        __param(9, extensions_1.IExtensionService)\n    ], ReleaseNotesManager);\n    exports.ReleaseNotesManager = ReleaseNotesManager;\n});\n",null]}