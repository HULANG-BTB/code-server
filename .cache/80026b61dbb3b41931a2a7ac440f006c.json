{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/wordPartOperations/wordPartOperations.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/editor/browser/editorExtensions\", \"vs/editor/common/controller/cursorWordOperations\", \"vs/editor/common/core/range\", \"vs/editor/common/editorContextKeys\", \"vs/editor/contrib/wordOperations/wordOperations\", \"vs/platform/commands/common/commands\", \"vs/platform/keybinding/common/keybindingsRegistry\"], function (require, exports, keyCodes_1, editorExtensions_1, cursorWordOperations_1, range_1, editorContextKeys_1, wordOperations_1, commands_1, keybindingsRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class DeleteWordPartLeft extends wordOperations_1.DeleteWordCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'deleteWordPartLeft',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Backspace },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _delete(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n            let r = cursorWordOperations_1.WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);\n            if (r) {\n                return r;\n            }\n            return new range_1.Range(1, 1, 1, 1);\n        }\n    }\n    exports.DeleteWordPartLeft = DeleteWordPartLeft;\n    class DeleteWordPartRight extends wordOperations_1.DeleteWordCommand {\n        constructor() {\n            super({\n                whitespaceHeuristics: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'deleteWordPartRight',\n                precondition: editorContextKeys_1.EditorContextKeys.writable,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.Delete },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n        _delete(wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n            let r = cursorWordOperations_1.WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);\n            if (r) {\n                return r;\n            }\n            const lineCount = model.getLineCount();\n            const maxColumn = model.getLineMaxColumn(lineCount);\n            return new range_1.Range(lineCount, maxColumn, lineCount, maxColumn);\n        }\n    }\n    exports.DeleteWordPartRight = DeleteWordPartRight;\n    class WordPartLeftCommand extends wordOperations_1.MoveWordCommand {\n        _move(wordSeparators, model, position, wordNavigationType) {\n            return cursorWordOperations_1.WordPartOperations.moveWordPartLeft(wordSeparators, model, position);\n        }\n    }\n    exports.WordPartLeftCommand = WordPartLeftCommand;\n    class CursorWordPartLeft extends WordPartLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordPartLeft',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.LeftArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordPartLeft = CursorWordPartLeft;\n    // Register previous id for compatibility purposes\n    commands_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');\n    class CursorWordPartLeftSelect extends WordPartLeftCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordStart,\n                id: 'cursorWordPartLeftSelect',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.LeftArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordPartLeftSelect = CursorWordPartLeftSelect;\n    // Register previous id for compatibility purposes\n    commands_1.CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');\n    class WordPartRightCommand extends wordOperations_1.MoveWordCommand {\n        _move(wordSeparators, model, position, wordNavigationType) {\n            return cursorWordOperations_1.WordPartOperations.moveWordPartRight(wordSeparators, model, position);\n        }\n    }\n    exports.WordPartRightCommand = WordPartRightCommand;\n    class CursorWordPartRight extends WordPartRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: false,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordPartRight',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.RightArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordPartRight = CursorWordPartRight;\n    class CursorWordPartRightSelect extends WordPartRightCommand {\n        constructor() {\n            super({\n                inSelectionMode: true,\n                wordNavigationType: cursorWordOperations_1.WordNavigationType.WordEnd,\n                id: 'cursorWordPartRightSelect',\n                precondition: null,\n                kbOpts: {\n                    kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: keyCodes_1.KeyMod.WinCtrl | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.RightArrow },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                }\n            });\n        }\n    }\n    exports.CursorWordPartRightSelect = CursorWordPartRightSelect;\n    editorExtensions_1.registerEditorCommand(new DeleteWordPartLeft());\n    editorExtensions_1.registerEditorCommand(new DeleteWordPartRight());\n    editorExtensions_1.registerEditorCommand(new CursorWordPartLeft());\n    editorExtensions_1.registerEditorCommand(new CursorWordPartLeftSelect());\n    editorExtensions_1.registerEditorCommand(new CursorWordPartRight());\n    editorExtensions_1.registerEditorCommand(new CursorWordPartRightSelect());\n});\n",null]}