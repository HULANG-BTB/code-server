{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true}!/home/coding/workspace/packages/server/src/vscode/bootstrapFork.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/vscode/bootstrapFork.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cp = require(\"child_process\");\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst vm = require(\"vm\");\nconst logger_1 = require(\"@coder/logger\");\nconst constants_1 = require(\"../constants\");\nlet ipcMsgBuffer = [];\nlet ipcMsgListener = process.send ? (d) => ipcMsgBuffer.push(d) : undefined;\nif (ipcMsgListener) {\n    process.on(\"message\", ipcMsgListener);\n}\n/**\n * Requires a module from the filesystem.\n *\n * Will load from the CLI if file is included inside of the default extensions dir\n */\n// tslint:disable-next-line:no-any\nconst requireFilesystemModule = (id, builtInExtensionsDir) => {\n    const mod = require(\"module\");\n    const customMod = new mod.Module(id);\n    customMod.filename = id;\n    // tslint:disable-next-line:no-any\n    customMod.paths = mod._nodeModulePaths(path.dirname(id));\n    if (id.startsWith(builtInExtensionsDir)) {\n        customMod.loaded = true;\n        const fileName = id.endsWith(\".js\") ? id : `${id}.js`;\n        const req = vm.runInThisContext(mod.wrap(fs.readFileSync(fileName).toString()), {\n            displayErrors: true,\n            filename: fileName,\n        });\n        req(customMod.exports, customMod.require.bind(customMod), customMod, fileName, path.dirname(id));\n        return customMod.exports;\n    }\n    return customMod.require(id);\n};\nexports.requireModule = (modulePath, builtInExtensionsDir) => {\n    process.env.AMD_ENTRYPOINT = modulePath;\n    const xml = require(\"xhr2\");\n    xml.XMLHttpRequest.prototype._restrictedHeaders[\"user-agent\"] = false;\n    // tslint:disable-next-line no-any this makes installing extensions work.\n    global.XMLHttpRequest = xml.XMLHttpRequest;\n    const promiseFinally = require(\"promise.prototype.finally\");\n    promiseFinally.shim();\n    /**\n     * Used for loading extensions. Using __non_webpack_require__ didn't work\n     * as it was not resolving to the FS.\n     */\n    // tslint:disable-next-line:no-any\n    global.nativeNodeRequire = (id) => {\n        return requireFilesystemModule(id, builtInExtensionsDir);\n    };\n    if (constants_1.isCli) {\n        process.env.NBIN_BYPASS = \"true\";\n    }\n    const baseDir = path.join(constants_1.buildDir, \"build\");\n    if (constants_1.isCli) {\n        __non_webpack_require__(path.join(baseDir, \"bootstrap-fork.js.gz\"));\n    }\n    else {\n        // We need to check `isCli` here to confuse webpack.\n        require(path.join(__dirname, constants_1.isCli ? \"\" : \"../../../vscode/out/bootstrap-fork.js\"));\n    }\n};\n/**\n * Uses the internal bootstrap-fork.js to load a module\n * @example\n * const cp = forkModule(\"vs/code/electron-browser/sharedProcess/sharedProcessMain\");\n * cp.stdout.on(\"data\", (data) => console.log(data.toString(\"utf8\")));\n * cp.stderr.on(\"data\", (data) => console.log(data.toString(\"utf8\")));\n * @param modulePath Path of the VS Code module to load.\n */\nexports.forkModule = (modulePath, args, options, dataDir) => {\n    const forkOptions = {\n        stdio: [null, null, null, \"ipc\"],\n    };\n    if (options && options.env) {\n        // This prevents vscode from trying to load original-fs from electron.\n        delete options.env.ELECTRON_RUN_AS_NODE;\n        forkOptions.env = options.env;\n    }\n    const forkArgs = [\"--bootstrap-fork\", modulePath];\n    if (args) {\n        forkArgs.push(\"--extra-args\", JSON.stringify(args));\n    }\n    if (dataDir) {\n        forkArgs.push(\"--user-data-dir\", dataDir);\n    }\n    const nodeArgs = [];\n    if (constants_1.isCli) {\n        nodeArgs.push(path.join(constants_1.buildDir, \"out\", \"cli.js\"));\n    }\n    else {\n        nodeArgs.push(\"--require\", \"ts-node/register\", \"--require\", \"tsconfig-paths/register\", process.argv[1]);\n    }\n    const proc = cp.spawn(process.execPath, [...nodeArgs, ...forkArgs], forkOptions);\n    if (args && args[0] === \"--type=watcherService\" && os.platform() === \"linux\") {\n        cp.exec(`renice -n 19 -p ${proc.pid}`, (error) => {\n            if (error) {\n                logger_1.logger.warn(error.message);\n            }\n        });\n    }\n    return proc;\n};\n",{"version":3,"file":"/home/coding/workspace/packages/server/src/vscode/bootstrapFork.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/server/src/vscode/bootstrapFork.ts"],"names":[],"mappings":";;AAAA,oCAAoC;AACpC,yBAAyB;AACzB,yBAAyB;AACzB,6BAA6B;AAC7B,yBAAyB;AACzB,0CAAuC;AACvC,4CAA+C;AAE/C,IAAI,YAAY,GAAyB,EAAE,CAAC;AAC5C,IAAI,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAS,EAAU,EAAE,CAAC,YAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC7F,IAAI,cAAc,EAAE;IACnB,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;CACtC;AAID;;;;GAIG;AACH,kCAAkC;AAClC,MAAM,uBAAuB,GAAG,CAAC,EAAU,EAAE,oBAA4B,EAAO,EAAE;IACjF,MAAM,GAAG,GAAG,OAAO,CAAC,QAAQ,CAA4B,CAAC;IACzD,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACrC,SAAS,CAAC,QAAQ,GAAG,EAAE,CAAC;IACxB,kCAAkC;IAClC,SAAS,CAAC,KAAK,GAAS,GAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAEhE,IAAI,EAAE,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;QACxC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC;QACxB,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC;QACtD,MAAM,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE;YAC/E,aAAa,EAAE,IAAI;YACnB,QAAQ,EAAE,QAAQ;SAClB,CAAC,CAAC;QACH,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QAEjG,OAAO,SAAS,CAAC,OAAO,CAAC;KACzB;IAED,OAAO,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEW,QAAA,aAAa,GAAG,CAAC,UAAkB,EAAE,oBAA4B,EAAQ,EAAE;IACvF,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,UAAU,CAAC;IACxC,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IAC5B,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,kBAAkB,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;IACtE,yEAAyE;IACxE,MAAc,CAAC,cAAc,GAAG,GAAG,CAAC,cAAc,CAAC;IAEpD,MAAM,cAAc,GAAG,OAAO,CAAC,2BAA2B,CAAyB,CAAC;IACpF,cAAc,CAAC,IAAI,EAAE,CAAC;IACtB;;;OAGG;IACH,kCAAkC;IACjC,MAAc,CAAC,iBAAiB,GAAG,CAAC,EAAU,EAAO,EAAE;QACvD,OAAO,uBAAuB,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,IAAI,iBAAK,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;KACjC;IAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAQ,EAAE,OAAO,CAAC,CAAC;IAC7C,IAAI,iBAAK,EAAE;QACV,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,sBAAsB,CAAC,CAAC,CAAC;KACpE;SAAM;QACN,oDAAoD;QACpD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iBAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uCAAuC,CAAC,CAAC,CAAC;KACpF;AACF,CAAC,CAAC;AAEF;;;;;;;GAOG;AACU,QAAA,UAAU,GAAG,CAAC,UAAkB,EAAE,IAAe,EAAE,OAAwB,EAAE,OAAgB,EAAmB,EAAE;IAC9H,MAAM,WAAW,GAAmB;QACnC,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;KAChC,CAAC;IACF,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE;QAC3B,sEAAsE;QACtE,OAAO,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;QACxC,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;KAC9B;IAED,MAAM,QAAQ,GAAG,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAClD,IAAI,IAAI,EAAE;QACT,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACpD;IACD,IAAI,OAAO,EAAE;QACZ,QAAQ,CAAC,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;KAC1C;IAED,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,IAAI,iBAAK,EAAE;QACV,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;KACpD;SAAM;QACN,QAAQ,CAAC,IAAI,CACZ,WAAW,EAAE,kBAAkB,EAC/B,WAAW,EAAE,yBAAyB,EACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CACf,CAAC;KACF;IAED,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,QAAQ,EAAE,GAAG,QAAQ,CAAC,EAAE,WAAW,CAAC,CAAC;IACjF,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,uBAAuB,IAAI,EAAE,CAAC,QAAQ,EAAE,KAAK,OAAO,EAAE;QAC7E,EAAE,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE;YAChD,IAAI,KAAK,EAAE;gBACV,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC3B;QACF,CAAC,CAAC,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACb,CAAC,CAAC","sourcesContent":["import * as cp from \"child_process\";\nimport * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport * as vm from \"vm\";\nimport { logger } from \"@coder/logger\";\nimport { buildDir, isCli } from \"../constants\";\n\nlet ipcMsgBuffer: Buffer[] | undefined = [];\nlet ipcMsgListener = process.send ? (d: Buffer): number => ipcMsgBuffer!.push(d) : undefined;\nif (ipcMsgListener) {\n\tprocess.on(\"message\", ipcMsgListener);\n}\n\ndeclare var __non_webpack_require__: typeof require;\n\n/**\n * Requires a module from the filesystem.\n *\n * Will load from the CLI if file is included inside of the default extensions dir\n */\n// tslint:disable-next-line:no-any\nconst requireFilesystemModule = (id: string, builtInExtensionsDir: string): any => {\n\tconst mod = require(\"module\") as typeof import(\"module\");\n\tconst customMod = new mod.Module(id);\n\tcustomMod.filename = id;\n\t// tslint:disable-next-line:no-any\n\tcustomMod.paths = (<any>mod)._nodeModulePaths(path.dirname(id));\n\n\tif (id.startsWith(builtInExtensionsDir)) {\n\t\tcustomMod.loaded = true;\n\t\tconst fileName = id.endsWith(\".js\") ? id : `${id}.js`;\n\t\tconst req = vm.runInThisContext(mod.wrap(fs.readFileSync(fileName).toString()), {\n\t\t\tdisplayErrors: true,\n\t\t\tfilename: fileName,\n\t\t});\n\t\treq(customMod.exports, customMod.require.bind(customMod), customMod, fileName, path.dirname(id));\n\n\t\treturn customMod.exports;\n\t}\n\n\treturn customMod.require(id);\n};\n\nexport const requireModule = (modulePath: string, builtInExtensionsDir: string): void => {\n\tprocess.env.AMD_ENTRYPOINT = modulePath;\n\tconst xml = require(\"xhr2\");\n\txml.XMLHttpRequest.prototype._restrictedHeaders[\"user-agent\"] = false;\n\t// tslint:disable-next-line no-any this makes installing extensions work.\n\t(global as any).XMLHttpRequest = xml.XMLHttpRequest;\n\n\tconst promiseFinally = require(\"promise.prototype.finally\") as { shim: () => void };\n\tpromiseFinally.shim();\n\t/**\n\t * Used for loading extensions. Using __non_webpack_require__ didn't work\n\t * as it was not resolving to the FS.\n\t */\n\t// tslint:disable-next-line:no-any\n\t(global as any).nativeNodeRequire = (id: string): any => {\n\t\treturn requireFilesystemModule(id, builtInExtensionsDir);\n\t};\n\n\tif (isCli) {\n\t\tprocess.env.NBIN_BYPASS = \"true\";\n\t}\n\n\tconst baseDir = path.join(buildDir, \"build\");\n\tif (isCli) {\n\t\t__non_webpack_require__(path.join(baseDir, \"bootstrap-fork.js.gz\"));\n\t} else {\n\t\t// We need to check `isCli` here to confuse webpack.\n\t\trequire(path.join(__dirname, isCli ? \"\" : \"../../../vscode/out/bootstrap-fork.js\"));\n\t}\n};\n\n/**\n * Uses the internal bootstrap-fork.js to load a module\n * @example\n * const cp = forkModule(\"vs/code/electron-browser/sharedProcess/sharedProcessMain\");\n * cp.stdout.on(\"data\", (data) => console.log(data.toString(\"utf8\")));\n * cp.stderr.on(\"data\", (data) => console.log(data.toString(\"utf8\")));\n * @param modulePath Path of the VS Code module to load.\n */\nexport const forkModule = (modulePath: string, args?: string[], options?: cp.ForkOptions, dataDir?: string): cp.ChildProcess => {\n\tconst forkOptions: cp.ForkOptions = {\n\t\tstdio: [null, null, null, \"ipc\"],\n\t};\n\tif (options && options.env) {\n\t\t// This prevents vscode from trying to load original-fs from electron.\n\t\tdelete options.env.ELECTRON_RUN_AS_NODE;\n\t\tforkOptions.env = options.env;\n\t}\n\n\tconst forkArgs = [\"--bootstrap-fork\", modulePath];\n\tif (args) {\n\t\tforkArgs.push(\"--extra-args\", JSON.stringify(args));\n\t}\n\tif (dataDir) {\n\t\tforkArgs.push(\"--user-data-dir\", dataDir);\n\t}\n\n\tconst nodeArgs = [];\n\tif (isCli) {\n\t\tnodeArgs.push(path.join(buildDir, \"out\", \"cli.js\"));\n\t} else {\n\t\tnodeArgs.push(\n\t\t\t\"--require\", \"ts-node/register\",\n\t\t\t\"--require\", \"tsconfig-paths/register\",\n\t\t\tprocess.argv[1],\n\t\t);\n\t}\n\n\tconst proc = cp.spawn(process.execPath, [...nodeArgs, ...forkArgs], forkOptions);\n\tif (args && args[0] === \"--type=watcherService\" && os.platform() === \"linux\") {\n\t\tcp.exec(`renice -n 19 -p ${proc.pid}`, (error) => {\n\t\t\tif (error) {\n\t\t\t\tlogger.warn(error.message);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn proc;\n};\n"]}]}