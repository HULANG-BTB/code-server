{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/model/indentationGuesser.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/model/indentationGuesser.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/charCode\"], function (require, exports, charCode_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class SpacesDiffResult {\n    }\n    /**\n     * Compute the diff in spaces between two line's indentation.\n     */\n    function spacesDiff(a, aLength, b, bLength, result) {\n        result.spacesDiff = 0;\n        result.looksLikeAlignment = false;\n        // This can go both ways (e.g.):\n        //  - a: \"\\t\"\n        //  - b: \"\\t    \"\n        //  => This should count 1 tab and 4 spaces\n        let i;\n        for (i = 0; i < aLength && i < bLength; i++) {\n            let aCharCode = a.charCodeAt(i);\n            let bCharCode = b.charCodeAt(i);\n            if (aCharCode !== bCharCode) {\n                break;\n            }\n        }\n        let aSpacesCnt = 0, aTabsCount = 0;\n        for (let j = i; j < aLength; j++) {\n            let aCharCode = a.charCodeAt(j);\n            if (aCharCode === charCode_1.CharCode.Space) {\n                aSpacesCnt++;\n            }\n            else {\n                aTabsCount++;\n            }\n        }\n        let bSpacesCnt = 0, bTabsCount = 0;\n        for (let j = i; j < bLength; j++) {\n            let bCharCode = b.charCodeAt(j);\n            if (bCharCode === charCode_1.CharCode.Space) {\n                bSpacesCnt++;\n            }\n            else {\n                bTabsCount++;\n            }\n        }\n        if (aSpacesCnt > 0 && aTabsCount > 0) {\n            return;\n        }\n        if (bSpacesCnt > 0 && bTabsCount > 0) {\n            return;\n        }\n        let tabsDiff = Math.abs(aTabsCount - bTabsCount);\n        let spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n        if (tabsDiff === 0) {\n            // check if the indentation difference might be caused by alignment reasons\n            // sometime folks like to align their code, but this should not be used as a hint\n            result.spacesDiff = spacesDiff;\n            if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n                if (b.charCodeAt(bSpacesCnt) !== charCode_1.CharCode.Space && a.charCodeAt(bSpacesCnt - 1) === charCode_1.CharCode.Space) {\n                    // This looks like an alignment desire: e.g.\n                    // const a = b + c,\n                    //       d = b - c;\n                    result.looksLikeAlignment = true;\n                }\n            }\n            return;\n        }\n        if (spacesDiff % tabsDiff === 0) {\n            result.spacesDiff = spacesDiff / tabsDiff;\n            return;\n        }\n    }\n    function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n        // Look at most at the first 10k lines\n        const linesCount = Math.min(source.getLineCount(), 10000);\n        let linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n        let linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n        let previousLineText = ''; // content of latest line that contained non-whitespace chars\n        let previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n        const ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n        const MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n        let spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n        let tmp = new SpacesDiffResult();\n        for (let lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n            let currentLineLength = source.getLineLength(lineNumber);\n            let currentLineText = source.getLineContent(lineNumber);\n            // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n            // checking charCode on chunks directly is cheaper.\n            const useCurrentLineText = (currentLineLength <= 65536);\n            let currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n            let currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n            let currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n            let currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n            for (let j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n                let charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\n                if (charCode === charCode_1.CharCode.Tab) {\n                    currentLineTabsCount++;\n                }\n                else if (charCode === charCode_1.CharCode.Space) {\n                    currentLineSpacesCount++;\n                }\n                else {\n                    // Hit non whitespace character on this line\n                    currentLineHasContent = true;\n                    currentLineIndentation = j;\n                    break;\n                }\n            }\n            // Ignore empty or only whitespace lines\n            if (!currentLineHasContent) {\n                continue;\n            }\n            if (currentLineTabsCount > 0) {\n                linesIndentedWithTabsCount++;\n            }\n            else if (currentLineSpacesCount > 1) {\n                linesIndentedWithSpacesCount++;\n            }\n            spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n            if (tmp.looksLikeAlignment) {\n                // skip this line entirely\n                continue;\n            }\n            let currentSpacesDiff = tmp.spacesDiff;\n            if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n                spacesDiffCount[currentSpacesDiff]++;\n            }\n            previousLineText = currentLineText;\n            previousLineIndentation = currentLineIndentation;\n        }\n        let insertSpaces = defaultInsertSpaces;\n        if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n            insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\n        }\n        let tabSize = defaultTabSize;\n        let tabSizeScore = (insertSpaces ? 0 : 0.1 * linesCount);\n        // console.log(\"score threshold: \" + tabSizeScore);\n        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize) => {\n            let possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n            if (possibleTabSizeScore > tabSizeScore) {\n                tabSizeScore = possibleTabSizeScore;\n                tabSize = possibleTabSize;\n            }\n        });\n        // Let a tabSize of 2 win even if it is not the maximum\n        // (only in case 4 was guessed)\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n            tabSize = 2;\n        }\n        // console.log('--------------------------');\n        // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n        // console.log('spacesDiffCount: ' + spacesDiffCount);\n        // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n        return {\n            insertSpaces: insertSpaces,\n            tabSize: tabSize\n        };\n    }\n    exports.guessIndentation = guessIndentation;\n});\n",null]}