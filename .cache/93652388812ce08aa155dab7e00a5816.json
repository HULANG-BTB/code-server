{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/workbench/services/panel/common/panelService\", \"vs/workbench/services/layout/browser/layoutService\", \"vs/platform/configuration/common/configuration\", \"vs/workbench/contrib/terminal/browser/terminalService\", \"vs/workbench/contrib/terminal/browser/terminalConfigHelper\", \"vs/platform/storage/common/storage\", \"vs/workbench/contrib/terminal/node/terminal\", \"vs/platform/dialogs/common/dialogs\", \"vs/platform/notification/common/notification\", \"electron\", \"vs/platform/windows/common/windows\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/quickinput/common/quickInput\", \"vs/base/common/arrays\", \"vs/platform/files/common/files\", \"vs/workbench/contrib/terminal/common/terminalEnvironment\", \"child_process\", \"vs/base/common/uri\"], function (require, exports, nls, contextkey_1, instantiation_1, lifecycle_1, panelService_1, layoutService_1, configuration_1, terminalService_1, terminalConfigHelper_1, storage_1, terminal_1, dialogs_1, notification_1, electron_1, windows_1, extensions_1, quickInput_1, arrays_1, files_1, terminalEnvironment_1, child_process_1, uri_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let TerminalService = class TerminalService extends terminalService_1.TerminalService {\n        constructor(contextKeyService, panelService, layoutService, storageService, lifecycleService, _configurationService, instantiationService, _quickInputService, notificationService, dialogService, extensionService, windowService, fileService) {\n            super(contextKeyService, panelService, layoutService, lifecycleService, storageService, notificationService, dialogService, instantiationService, windowService, extensionService, fileService);\n            this._configurationService = _configurationService;\n            this._quickInputService = _quickInputService;\n            this._configHelper = this._instantiationService.createInstance(terminalConfigHelper_1.TerminalConfigHelper, terminal_1.linuxDistro);\n            electron_1.ipcRenderer.on('vscode:openFiles', (_event, request) => {\n                // if the request to open files is coming in from the integrated terminal (identified though\n                // the termProgram variable) and we are instructed to wait for editors close, wait for the\n                // marker file to get deleted and then focus back to the integrated terminal.\n                if (request.termProgram === 'vscode' && request.filesToWait) {\n                    const waitMarkerFileUri = uri_1.URI.revive(request.filesToWait.waitMarkerFileUri);\n                    this.whenDeleted(waitMarkerFileUri).then(() => {\n                        if (this.terminalInstances.length > 0) {\n                            const terminal = this.getActiveInstance();\n                            if (terminal) {\n                                terminal.focus();\n                            }\n                        }\n                    });\n                }\n            });\n            electron_1.ipcRenderer.on('vscode:osResume', () => {\n                const activeTab = this.getActiveTab();\n                if (!activeTab) {\n                    return;\n                }\n                activeTab.terminalInstances.forEach(instance => instance.forceRedraw());\n            });\n        }\n        get configHelper() { return this._configHelper; }\n        whenDeleted(path) {\n            // Complete when wait marker file is deleted\n            return new Promise(resolve => {\n                let running = false;\n                const interval = setInterval(() => {\n                    if (!running) {\n                        running = true;\n                        this._fileService.existsFile(path).then(exists => {\n                            running = false;\n                            if (!exists) {\n                                clearInterval(interval);\n                                resolve(undefined);\n                            }\n                        });\n                    }\n                }, 1000);\n            });\n        }\n        _getDefaultShell(p) {\n            return terminal_1.getDefaultShell(p);\n        }\n        selectDefaultWindowsShell() {\n            return this._detectWindowsShells().then(shells => {\n                const options = {\n                    placeHolder: nls.localize('terminal.integrated.chooseWindowsShell', \"Select your preferred terminal shell, you can change this later in your settings\")\n                };\n                return this._quickInputService.pick(shells, options).then(value => {\n                    if (!value) {\n                        return undefined;\n                    }\n                    const shell = value.description;\n                    return this._configurationService.updateValue('terminal.integrated.shell.windows', shell, configuration_1.ConfigurationTarget.USER).then(() => shell);\n                });\n            });\n        }\n        _detectWindowsShells() {\n            // Determine the correct System32 path. We want to point to Sysnative\n            // when the 32-bit version of VS Code is running on a 64-bit machine.\n            // The reason for this is because PowerShell's important PSReadline\n            // module doesn't work if this is not the case. See #27915.\n            const is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n            const system32Path = `${process.env['windir']}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}`;\n            let useWSLexe = false;\n            if (terminal_1.getWindowsBuildNumber() >= 16299) {\n                useWSLexe = true;\n            }\n            const expectedLocations = {\n                'Command Prompt': [`${system32Path}\\\\cmd.exe`],\n                PowerShell: [`${system32Path}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`],\n                'WSL Bash': [`${system32Path}\\\\${useWSLexe ? 'wsl.exe' : 'bash.exe'}`],\n                'Git Bash': [\n                    `${process.env['ProgramW6432']}\\\\Git\\\\bin\\\\bash.exe`,\n                    `${process.env['ProgramW6432']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n                    `${process.env['ProgramFiles']}\\\\Git\\\\bin\\\\bash.exe`,\n                    `${process.env['ProgramFiles']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n                    `${process.env['LocalAppData']}\\\\Programs\\\\Git\\\\bin\\\\bash.exe`,\n                ]\n            };\n            const promises = [];\n            Object.keys(expectedLocations).forEach(key => promises.push(this._validateShellPaths(key, expectedLocations[key])));\n            return Promise.all(promises)\n                .then(arrays_1.coalesce)\n                .then(results => {\n                return results.map(result => {\n                    return {\n                        label: result[0],\n                        description: result[1]\n                    };\n                });\n            });\n        }\n        _getWindowsBuildNumber() {\n            return terminal_1.getWindowsBuildNumber();\n        }\n        /**\n         * Converts a path to a path on WSL using the wslpath utility.\n         * @param path The original path.\n         */\n        _getWslPath(path) {\n            if (terminal_1.getWindowsBuildNumber() < 17063) {\n                throw new Error('wslpath does not exist on Windows build < 17063');\n            }\n            return new Promise(c => {\n                child_process_1.execFile('bash.exe', ['-c', 'echo $(wslpath ' + terminalEnvironment_1.escapeNonWindowsPath(path) + ')'], {}, (error, stdout, stderr) => {\n                    c(terminalEnvironment_1.escapeNonWindowsPath(stdout.trim()));\n                });\n            });\n        }\n    };\n    TerminalService = __decorate([\n        __param(0, contextkey_1.IContextKeyService),\n        __param(1, panelService_1.IPanelService),\n        __param(2, layoutService_1.IWorkbenchLayoutService),\n        __param(3, storage_1.IStorageService),\n        __param(4, lifecycle_1.ILifecycleService),\n        __param(5, configuration_1.IConfigurationService),\n        __param(6, instantiation_1.IInstantiationService),\n        __param(7, quickInput_1.IQuickInputService),\n        __param(8, notification_1.INotificationService),\n        __param(9, dialogs_1.IDialogService),\n        __param(10, extensions_1.IExtensionService),\n        __param(11, windows_1.IWindowService),\n        __param(12, files_1.IFileService)\n    ], TerminalService);\n    exports.TerminalService = TerminalService;\n});\n",null]}