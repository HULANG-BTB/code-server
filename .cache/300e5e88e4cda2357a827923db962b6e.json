{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionsManifestCache.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/extensionManagement/node/extensionsManifestCache.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/path\", \"vs/platform/extensions/common/extensions\", \"vs/base/node/pfs\"], function (require, exports, lifecycle_1, path_1, extensions_1, pfs) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ExtensionsManifestCache extends lifecycle_1.Disposable {\n        constructor(environmentService, extensionsManagementServuce) {\n            super();\n            this.environmentService = environmentService;\n            this.extensionsManifestCache = path_1.join(this.environmentService.userDataPath, extensions_1.MANIFEST_CACHE_FOLDER, extensions_1.USER_MANIFEST_CACHE_FILE);\n            this._register(extensionsManagementServuce.onDidInstallExtension(e => this.onDidInstallExtension(e)));\n            this._register(extensionsManagementServuce.onDidUninstallExtension(e => this.onDidUnInstallExtension(e)));\n        }\n        onDidInstallExtension(e) {\n            if (!e.error) {\n                this.invalidate();\n            }\n        }\n        onDidUnInstallExtension(e) {\n            if (!e.error) {\n                this.invalidate();\n            }\n        }\n        invalidate() {\n            pfs.del(this.extensionsManifestCache).then(() => { }, () => { });\n        }\n    }\n    exports.ExtensionsManifestCache = ExtensionsManifestCache;\n});\n",null]}