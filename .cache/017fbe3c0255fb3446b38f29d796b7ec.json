{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/appInsightsAppender.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/appInsightsAppender.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"applicationinsights\", \"vs/base/common/types\", \"vs/base/common/objects\", \"vs/platform/log/common/log\"], function (require, exports, appInsights, types_1, objects_1, log_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function getClient(aiKey) {\n        let client;\n        if (appInsights.defaultClient) {\n            client = new appInsights.TelemetryClient(aiKey);\n            client.channel.setUseDiskRetryCaching(true);\n        }\n        else {\n            appInsights.setup(aiKey)\n                .setAutoCollectRequests(false)\n                .setAutoCollectPerformance(false)\n                .setAutoCollectExceptions(false)\n                .setAutoCollectDependencies(false)\n                .setAutoDependencyCorrelation(false)\n                .setAutoCollectConsole(false)\n                .setInternalLogging(false, false)\n                .setUseDiskRetryCaching(true)\n                .start();\n            client = appInsights.defaultClient;\n        }\n        if (aiKey.indexOf('AIF-') === 0) {\n            client.config.endpointUrl = 'https://vortex.data.microsoft.com/collect/v1';\n        }\n        return client;\n    }\n    let AppInsightsAppender = class AppInsightsAppender {\n        constructor(_eventPrefix, _defaultData, aiKeyOrClientFactory, // allow factory function for testing\n        _logService) {\n            this._eventPrefix = _eventPrefix;\n            this._defaultData = _defaultData;\n            this._logService = _logService;\n            if (!this._defaultData) {\n                this._defaultData = Object.create(null);\n            }\n            if (typeof aiKeyOrClientFactory === 'string') {\n                this._aiClient = getClient(aiKeyOrClientFactory);\n            }\n            else if (typeof aiKeyOrClientFactory === 'function') {\n                this._aiClient = aiKeyOrClientFactory();\n            }\n        }\n        static _getData(data) {\n            const properties = Object.create(null);\n            const measurements = Object.create(null);\n            const flat = Object.create(null);\n            AppInsightsAppender._flaten(data, flat);\n            for (let prop in flat) {\n                // enforce property names less than 150 char, take the last 150 char\n                prop = prop.length > 150 ? prop.substr(prop.length - 149) : prop;\n                const value = flat[prop];\n                if (typeof value === 'number') {\n                    measurements[prop] = value;\n                }\n                else if (typeof value === 'boolean') {\n                    measurements[prop] = value ? 1 : 0;\n                }\n                else if (typeof value === 'string') {\n                    //enforce property value to be less than 1024 char, take the first 1024 char\n                    properties[prop] = value.substring(0, 1023);\n                }\n                else if (typeof value !== 'undefined' && value !== null) {\n                    properties[prop] = value;\n                }\n            }\n            return {\n                properties,\n                measurements\n            };\n        }\n        static _flaten(obj, result, order = 0, prefix) {\n            if (!obj) {\n                return;\n            }\n            for (let item of Object.getOwnPropertyNames(obj)) {\n                const value = obj[item];\n                const index = prefix ? prefix + item : item;\n                if (Array.isArray(value)) {\n                    result[index] = objects_1.safeStringify(value);\n                }\n                else if (value instanceof Date) {\n                    // TODO unsure why this is here and not in _getData\n                    result[index] = value.toISOString();\n                }\n                else if (types_1.isObject(value)) {\n                    if (order < 2) {\n                        AppInsightsAppender._flaten(value, result, order + 1, index + '.');\n                    }\n                    else {\n                        result[index] = objects_1.safeStringify(value);\n                    }\n                }\n                else {\n                    result[index] = value;\n                }\n            }\n        }\n        log(eventName, data) {\n            if (!this._aiClient) {\n                return;\n            }\n            data = objects_1.mixin(data, this._defaultData);\n            data = AppInsightsAppender._getData(data);\n            if (this._logService) {\n                this._logService.trace(`telemetry/${eventName}`, data);\n            }\n            this._aiClient.trackEvent({\n                name: this._eventPrefix + '/' + eventName,\n                properties: data.properties,\n                measurements: data.measurements\n            });\n        }\n        dispose() {\n            if (this._aiClient) {\n                return new Promise(resolve => {\n                    this._aiClient.flush({\n                        callback: () => {\n                            // all data flushed\n                            this._aiClient = undefined;\n                            resolve(undefined);\n                        }\n                    });\n                });\n            }\n            return undefined;\n        }\n    };\n    AppInsightsAppender = __decorate([\n        __param(3, log_1.ILogService)\n    ], AppInsightsAppender);\n    exports.AppInsightsAppender = AppInsightsAppender;\n});\n",null]}