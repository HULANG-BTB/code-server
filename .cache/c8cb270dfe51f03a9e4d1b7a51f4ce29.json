{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/searchHelpers.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/searchHelpers.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/range\", \"vs/workbench/services/search/common/search\"], function (require, exports, range_1, search_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function editorMatchToTextSearchResult(matches, model, previewOptions) {\n        const firstLine = matches[0].range.startLineNumber;\n        const lastLine = matches[matches.length - 1].range.endLineNumber;\n        const lineTexts = [];\n        for (let i = firstLine; i <= lastLine; i++) {\n            lineTexts.push(model.getLineContent(i));\n        }\n        return new search_1.TextSearchMatch(lineTexts.join('\\n') + '\\n', matches.map(m => new range_1.Range(m.range.startLineNumber - 1, m.range.startColumn - 1, m.range.endLineNumber - 1, m.range.endColumn - 1)), previewOptions);\n    }\n    /**\n     * Combine a set of FindMatches into a set of TextSearchResults. They should be grouped by matches that start on the same line that the previous match ends on.\n     */\n    function editorMatchesToTextSearchResults(matches, model, previewOptions) {\n        let previousEndLine = -1;\n        const groupedMatches = [];\n        let currentMatches = [];\n        matches.forEach((match) => {\n            if (match.range.startLineNumber !== previousEndLine) {\n                currentMatches = [];\n                groupedMatches.push(currentMatches);\n            }\n            currentMatches.push(match);\n            previousEndLine = match.range.endLineNumber;\n        });\n        return groupedMatches.map(sameLineMatches => {\n            return editorMatchToTextSearchResult(sameLineMatches, model, previewOptions);\n        });\n    }\n    exports.editorMatchesToTextSearchResults = editorMatchesToTextSearchResults;\n    function addContextToEditorMatches(matches, model, query) {\n        const results = [];\n        let prevLine = -1;\n        for (let i = 0; i < matches.length; i++) {\n            const { start: matchStartLine, end: matchEndLine } = getMatchStartEnd(matches[i]);\n            if (typeof query.beforeContext === 'number' && query.beforeContext > 0) {\n                const beforeContextStartLine = Math.max(prevLine + 1, matchStartLine - query.beforeContext);\n                for (let b = beforeContextStartLine; b < matchStartLine; b++) {\n                    results.push({\n                        text: model.getLineContent(b + 1),\n                        lineNumber: b\n                    });\n                }\n            }\n            results.push(matches[i]);\n            const nextMatch = matches[i + 1];\n            const nextMatchStartLine = nextMatch ? getMatchStartEnd(nextMatch).start : Number.MAX_VALUE;\n            if (typeof query.afterContext === 'number' && query.afterContext > 0) {\n                const afterContextToLine = Math.min(nextMatchStartLine - 1, matchEndLine + query.afterContext, model.getLineCount() - 1);\n                for (let a = matchEndLine + 1; a <= afterContextToLine; a++) {\n                    results.push({\n                        text: model.getLineContent(a + 1),\n                        lineNumber: a\n                    });\n                }\n            }\n            prevLine = matchEndLine;\n        }\n        return results;\n    }\n    exports.addContextToEditorMatches = addContextToEditorMatches;\n    function getMatchStartEnd(match) {\n        const matchRanges = match.ranges;\n        const matchStartLine = Array.isArray(matchRanges) ? matchRanges[0].startLineNumber : matchRanges.startLineNumber;\n        const matchEndLine = Array.isArray(matchRanges) ? matchRanges[matchRanges.length - 1].endLineNumber : matchRanges.endLineNumber;\n        return {\n            start: matchStartLine,\n            end: matchEndLine\n        };\n    }\n});\n",null]}