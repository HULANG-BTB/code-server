{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedback.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/feedback/electron-browser/feedback.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/lifecycle\", \"vs/base/browser/ui/dropdown/dropdown\", \"vs/platform/product/node/product\", \"vs/base/browser/dom\", \"vs/platform/commands/common/commands\", \"vs/workbench/services/integrity/common/integrity\", \"vs/platform/theme/common/themeService\", \"vs/platform/theme/common/styler\", \"vs/platform/theme/common/colorRegistry\", \"vs/base/browser/ui/button/button\", \"vs/platform/telemetry/common/telemetry\", \"vs/platform/configuration/common/configuration\", \"vs/css!./media/feedback\"], function (require, exports, nls, lifecycle_1, dropdown_1, product_1, dom, commands_1, integrity_1, themeService_1, styler_1, colorRegistry_1, button_1, telemetry_1, configuration_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.FEEDBACK_VISIBLE_CONFIG = 'workbench.statusBar.feedback.visible';\n    let FeedbackDropdown = class FeedbackDropdown extends dropdown_1.Dropdown {\n        constructor(container, options, commandService, telemetryService, integrityService, themeService, configurationService) {\n            super(container, {\n                contextViewProvider: options.contextViewProvider,\n                labelRenderer: (container) => {\n                    dom.addClasses(container, 'send-feedback', 'mask-icon');\n                    return lifecycle_1.Disposable.None;\n                }\n            });\n            this.options = options;\n            this.commandService = commandService;\n            this.telemetryService = telemetryService;\n            this.integrityService = integrityService;\n            this.themeService = themeService;\n            this.configurationService = configurationService;\n            this.feedback = '';\n            this.sentiment = 1;\n            this.isPure = true;\n            this.feedbackDelegate = options.feedbackService;\n            this.maxFeedbackCharacters = this.feedbackDelegate.getCharacterLimit(this.sentiment);\n            this.requestFeatureLink = product_1.default.sendASmile.requestFeatureUrl;\n            this.integrityService.isPure().then(result => {\n                if (!result.isPure) {\n                    this.isPure = false;\n                }\n            });\n            dom.addClass(this.element, 'send-feedback');\n            this.element.title = nls.localize('sendFeedback', \"Tweet Feedback\");\n        }\n        getAnchor() {\n            const position = dom.getDomNodePagePosition(this.element);\n            return {\n                x: position.left + position.width,\n                y: position.top - 9,\n                width: position.width,\n                height: position.height\n            };\n        }\n        renderContents(container) {\n            const disposables = [];\n            dom.addClass(container, 'monaco-menu-container');\n            // Form\n            this.feedbackForm = dom.append(container, dom.$('form.feedback-form'));\n            this.feedbackForm.setAttribute('action', 'javascript:void(0);');\n            // Title\n            dom.append(this.feedbackForm, dom.$('h2.title')).textContent = nls.localize(\"label.sendASmile\", \"Tweet us your feedback.\");\n            // Close Button (top right)\n            const closeBtn = dom.append(this.feedbackForm, dom.$('div.cancel'));\n            closeBtn.tabIndex = 0;\n            closeBtn.setAttribute('role', 'button');\n            closeBtn.title = nls.localize('close', \"Close\");\n            disposables.push(dom.addDisposableListener(closeBtn, dom.EventType.MOUSE_OVER, () => {\n                const theme = this.themeService.getTheme();\n                let darkenFactor;\n                switch (theme.type) {\n                    case 'light':\n                        darkenFactor = 0.1;\n                        break;\n                    case 'dark':\n                        darkenFactor = 0.2;\n                        break;\n                }\n                if (darkenFactor) {\n                    const backgroundBaseColor = theme.getColor(colorRegistry_1.editorWidgetBackground);\n                    if (backgroundBaseColor) {\n                        const backgroundColor = colorRegistry_1.darken(backgroundBaseColor, darkenFactor)(theme);\n                        if (backgroundColor) {\n                            closeBtn.style.backgroundColor = backgroundColor.toString();\n                        }\n                    }\n                }\n            }));\n            disposables.push(dom.addDisposableListener(closeBtn, dom.EventType.MOUSE_OUT, () => {\n                closeBtn.style.backgroundColor = null;\n            }));\n            this.invoke(closeBtn, disposables, () => this.hide());\n            // Content\n            const content = dom.append(this.feedbackForm, dom.$('div.content'));\n            // Sentiment Buttons\n            const sentimentContainer = dom.append(content, dom.$('div'));\n            if (!this.isPure) {\n                dom.append(sentimentContainer, dom.$('span')).textContent = nls.localize(\"patchedVersion1\", \"Your installation is corrupt.\");\n                sentimentContainer.appendChild(document.createElement('br'));\n                dom.append(sentimentContainer, dom.$('span')).textContent = nls.localize(\"patchedVersion2\", \"Please specify this if you submit a bug.\");\n                sentimentContainer.appendChild(document.createElement('br'));\n            }\n            dom.append(sentimentContainer, dom.$('span')).textContent = nls.localize(\"sentiment\", \"How was your experience?\");\n            const feedbackSentiment = dom.append(sentimentContainer, dom.$('div.feedback-sentiment'));\n            // Sentiment: Smiley\n            this.smileyInput = dom.append(feedbackSentiment, dom.$('div.sentiment'));\n            dom.addClass(this.smileyInput, 'smile');\n            this.smileyInput.setAttribute('aria-checked', 'false');\n            this.smileyInput.setAttribute('aria-label', nls.localize('smileCaption', \"Happy Feedback Sentiment\"));\n            this.smileyInput.setAttribute('role', 'checkbox');\n            this.smileyInput.title = nls.localize('smileCaption', \"Happy Feedback Sentiment\");\n            this.smileyInput.tabIndex = 0;\n            this.invoke(this.smileyInput, disposables, () => this.setSentiment(true));\n            // Sentiment: Frowny\n            this.frownyInput = dom.append(feedbackSentiment, dom.$('div.sentiment'));\n            dom.addClass(this.frownyInput, 'frown');\n            this.frownyInput.setAttribute('aria-checked', 'false');\n            this.frownyInput.setAttribute('aria-label', nls.localize('frownCaption', \"Sad Feedback Sentiment\"));\n            this.frownyInput.setAttribute('role', 'checkbox');\n            this.frownyInput.title = nls.localize('frownCaption', \"Sad Feedback Sentiment\");\n            this.frownyInput.tabIndex = 0;\n            this.invoke(this.frownyInput, disposables, () => this.setSentiment(false));\n            if (this.sentiment === 1) {\n                dom.addClass(this.smileyInput, 'checked');\n                this.smileyInput.setAttribute('aria-checked', 'true');\n            }\n            else {\n                dom.addClass(this.frownyInput, 'checked');\n                this.frownyInput.setAttribute('aria-checked', 'true');\n            }\n            // Contact Us Box\n            const contactUsContainer = dom.append(content, dom.$('div.contactus'));\n            dom.append(contactUsContainer, dom.$('span')).textContent = nls.localize(\"other ways to contact us\", \"Other ways to contact us\");\n            const channelsContainer = dom.append(contactUsContainer, dom.$('div.channels'));\n            // Contact: Submit a Bug\n            const submitBugLinkContainer = dom.append(channelsContainer, dom.$('div'));\n            const submitBugLink = dom.append(submitBugLinkContainer, dom.$('a'));\n            submitBugLink.setAttribute('target', '_blank');\n            submitBugLink.setAttribute('href', '#');\n            submitBugLink.textContent = nls.localize(\"submit a bug\", \"Submit a bug\");\n            submitBugLink.tabIndex = 0;\n            disposables.push(dom.addDisposableListener(submitBugLink, 'click', e => {\n                dom.EventHelper.stop(e);\n                const actionId = 'workbench.action.openIssueReporter';\n                this.commandService.executeCommand(actionId);\n                this.hide();\n                /* __GDPR__\n                    \"workbenchActionExecuted\" : {\n                        \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                this.telemetryService.publicLog('workbenchActionExecuted', { id: actionId, from: 'feedback' });\n            }));\n            // Contact: Request a Feature\n            if (!!this.requestFeatureLink) {\n                const requestFeatureLinkContainer = dom.append(channelsContainer, dom.$('div'));\n                const requestFeatureLink = dom.append(requestFeatureLinkContainer, dom.$('a'));\n                requestFeatureLink.setAttribute('target', '_blank');\n                requestFeatureLink.setAttribute('href', this.requestFeatureLink);\n                requestFeatureLink.textContent = nls.localize(\"request a missing feature\", \"Request a missing feature\");\n                requestFeatureLink.tabIndex = 0;\n                disposables.push(dom.addDisposableListener(requestFeatureLink, 'click', e => this.hide()));\n            }\n            // Remaining Characters\n            const remainingCharacterCountContainer = dom.append(this.feedbackForm, dom.$('h3'));\n            remainingCharacterCountContainer.textContent = nls.localize(\"tell us why\", \"Tell us why?\");\n            this.remainingCharacterCount = dom.append(remainingCharacterCountContainer, dom.$('span.char-counter'));\n            this.remainingCharacterCount.textContent = this.getCharCountText(0);\n            // Feedback Input Form\n            this.feedbackDescriptionInput = dom.append(this.feedbackForm, dom.$('textarea.feedback-description'));\n            this.feedbackDescriptionInput.rows = 3;\n            this.feedbackDescriptionInput.maxLength = this.maxFeedbackCharacters;\n            this.feedbackDescriptionInput.textContent = this.feedback;\n            this.feedbackDescriptionInput.required = true;\n            this.feedbackDescriptionInput.setAttribute('aria-label', nls.localize(\"feedbackTextInput\", \"Tell us your feedback\"));\n            this.feedbackDescriptionInput.focus();\n            disposables.push(dom.addDisposableListener(this.feedbackDescriptionInput, 'keyup', () => this.updateCharCountText()));\n            // Feedback Input Form Buttons Container\n            const buttonsContainer = dom.append(this.feedbackForm, dom.$('div.form-buttons'));\n            // Checkbox: Hide Feedback Smiley\n            const hideButtonContainer = dom.append(buttonsContainer, dom.$('div.hide-button-container'));\n            this.hideButton = dom.append(hideButtonContainer, dom.$('input.hide-button'));\n            this.hideButton.type = 'checkbox';\n            this.hideButton.checked = true;\n            this.hideButton.id = 'hide-button';\n            const hideButtonLabel = dom.append(hideButtonContainer, dom.$('label'));\n            hideButtonLabel.setAttribute('for', 'hide-button');\n            hideButtonLabel.textContent = nls.localize('showFeedback', \"Show Feedback Smiley in Status Bar\");\n            // Button: Send Feedback\n            this.sendButton = new button_1.Button(buttonsContainer);\n            this.sendButton.enabled = false;\n            this.sendButton.label = nls.localize('tweet', \"Tweet\");\n            dom.addClass(this.sendButton.element, 'send');\n            this.sendButton.element.title = nls.localize('tweetFeedback', \"Tweet Feedback\");\n            disposables.push(styler_1.attachButtonStyler(this.sendButton, this.themeService));\n            this.sendButton.onDidClick(() => this.onSubmit());\n            disposables.push(styler_1.attachStylerCallback(this.themeService, { widgetShadow: colorRegistry_1.widgetShadow, editorWidgetBackground: colorRegistry_1.editorWidgetBackground, inputBackground: colorRegistry_1.inputBackground, inputForeground: colorRegistry_1.inputForeground, inputBorder: colorRegistry_1.inputBorder, editorBackground: colorRegistry_1.editorBackground, contrastBorder: colorRegistry_1.contrastBorder }, colors => {\n                if (this.feedbackForm) {\n                    this.feedbackForm.style.backgroundColor = colors.editorWidgetBackground ? colors.editorWidgetBackground.toString() : null;\n                    this.feedbackForm.style.boxShadow = colors.widgetShadow ? `0 0 8px ${colors.widgetShadow}` : null;\n                }\n                if (this.feedbackDescriptionInput) {\n                    this.feedbackDescriptionInput.style.backgroundColor = colors.inputBackground ? colors.inputBackground.toString() : null;\n                    this.feedbackDescriptionInput.style.color = colors.inputForeground ? colors.inputForeground.toString() : null;\n                    this.feedbackDescriptionInput.style.border = `1px solid ${colors.inputBorder || 'transparent'}`;\n                }\n                contactUsContainer.style.backgroundColor = colors.editorBackground ? colors.editorBackground.toString() : null;\n                contactUsContainer.style.border = `1px solid ${colors.contrastBorder || 'transparent'}`;\n            }));\n            return {\n                dispose: () => {\n                    this.feedbackForm = null;\n                    this.feedbackDescriptionInput = null;\n                    this.smileyInput = null;\n                    this.frownyInput = null;\n                    lifecycle_1.dispose(disposables);\n                }\n            };\n        }\n        getCharCountText(charCount) {\n            const remaining = this.maxFeedbackCharacters - charCount;\n            const text = (remaining === 1)\n                ? nls.localize(\"character left\", \"character left\")\n                : nls.localize(\"characters left\", \"characters left\");\n            return `(${remaining} ${text})`;\n        }\n        updateCharCountText() {\n            if (this.feedbackDescriptionInput) {\n                this.remainingCharacterCount.innerText = this.getCharCountText(this.feedbackDescriptionInput.value.length);\n                this.sendButton.enabled = this.feedbackDescriptionInput.value.length > 0;\n            }\n        }\n        setSentiment(smile) {\n            if (smile) {\n                if (this.smileyInput) {\n                    dom.addClass(this.smileyInput, 'checked');\n                    this.smileyInput.setAttribute('aria-checked', 'true');\n                }\n                if (this.frownyInput) {\n                    dom.removeClass(this.frownyInput, 'checked');\n                    this.frownyInput.setAttribute('aria-checked', 'false');\n                }\n            }\n            else {\n                if (this.frownyInput) {\n                    dom.addClass(this.frownyInput, 'checked');\n                    this.frownyInput.setAttribute('aria-checked', 'true');\n                }\n                if (this.smileyInput) {\n                    dom.removeClass(this.smileyInput, 'checked');\n                    this.smileyInput.setAttribute('aria-checked', 'false');\n                }\n            }\n            this.sentiment = smile ? 1 : 0;\n            this.maxFeedbackCharacters = this.feedbackDelegate.getCharacterLimit(this.sentiment);\n            this.updateCharCountText();\n            if (this.feedbackDescriptionInput) {\n                this.feedbackDescriptionInput.maxLength = this.maxFeedbackCharacters;\n            }\n        }\n        invoke(element, disposables, callback) {\n            disposables.push(dom.addDisposableListener(element, 'click', callback));\n            disposables.push(dom.addDisposableListener(element, 'keypress', e => {\n                if (e instanceof KeyboardEvent) {\n                    const keyboardEvent = e;\n                    if (keyboardEvent.keyCode === 13 || keyboardEvent.keyCode === 32) { // Enter or Spacebar\n                        callback();\n                    }\n                }\n            }));\n            return element;\n        }\n        show() {\n            super.show();\n            if (this.options.onFeedbackVisibilityChange) {\n                this.options.onFeedbackVisibilityChange(true);\n            }\n        }\n        onHide() {\n            if (this.options.onFeedbackVisibilityChange) {\n                this.options.onFeedbackVisibilityChange(false);\n            }\n        }\n        hide() {\n            if (this.feedbackDescriptionInput) {\n                this.feedback = this.feedbackDescriptionInput.value;\n            }\n            if (this.autoHideTimeout) {\n                clearTimeout(this.autoHideTimeout);\n                this.autoHideTimeout = undefined;\n            }\n            if (this.hideButton && !this.hideButton.checked) {\n                this.configurationService.updateValue(exports.FEEDBACK_VISIBLE_CONFIG, false);\n            }\n            super.hide();\n        }\n        onEvent(e, activeElement) {\n            if (e instanceof KeyboardEvent) {\n                const keyboardEvent = e;\n                if (keyboardEvent.keyCode === 27) { // Escape\n                    this.hide();\n                }\n            }\n        }\n        onSubmit() {\n            if (!this.feedbackForm || !this.feedbackDescriptionInput || (this.feedbackForm.checkValidity && !this.feedbackForm.checkValidity())) {\n                return;\n            }\n            this.feedbackDelegate.submitFeedback({\n                feedback: this.feedbackDescriptionInput.value,\n                sentiment: this.sentiment\n            });\n            this.hide();\n        }\n    };\n    FeedbackDropdown = __decorate([\n        __param(2, commands_1.ICommandService),\n        __param(3, telemetry_1.ITelemetryService),\n        __param(4, integrity_1.IIntegrityService),\n        __param(5, themeService_1.IThemeService),\n        __param(6, configuration_1.IConfigurationService)\n    ], FeedbackDropdown);\n    exports.FeedbackDropdown = FeedbackDropdown;\n    themeService_1.registerThemingParticipant((theme, collector) => {\n        // Sentiment Buttons\n        const inputActiveOptionBorderColor = theme.getColor(colorRegistry_1.inputActiveOptionBorder);\n        if (inputActiveOptionBorderColor) {\n            collector.addRule(`.monaco-workbench .feedback-form .sentiment.checked { border: 1px solid ${inputActiveOptionBorderColor}; }`);\n        }\n        // Links\n        const linkColor = theme.getColor(colorRegistry_1.buttonBackground) || theme.getColor(colorRegistry_1.contrastBorder);\n        if (linkColor) {\n            collector.addRule(`.monaco-workbench .feedback-form .content .channels a { color: ${linkColor}; }`);\n        }\n    });\n});\n",null]}