{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/browser/contextScopedHistoryWidget.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/browser/contextScopedHistoryWidget.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar inputBox_1 = require(\"vs/base/browser/ui/inputbox/inputBox\");\nvar findInput_1 = require(\"vs/base/browser/ui/findinput/findInput\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nexports.HistoryNavigationWidgetContext = 'historyNavigationWidget';\nexports.HistoryNavigationEnablementContext = 'historyNavigationEnabled';\nfunction bindContextScopedWidget(contextKeyService, widget, contextKey) {\n    new contextkey_1.RawContextKey(contextKey, widget).bindTo(contextKeyService);\n}\nfunction createWidgetScopedContextKeyService(contextKeyService, widget) {\n    return contextKeyService.createScoped(widget.target);\n}\nfunction getContextScopedWidget(contextKeyService, contextKey) {\n    return contextKeyService.getContext(document.activeElement).getValue(contextKey);\n}\nfunction createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, widget) {\n    var scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);\n    bindContextScopedWidget(scopedContextKeyService, widget, exports.HistoryNavigationWidgetContext);\n    var historyNavigationEnablement = new contextkey_1.RawContextKey(exports.HistoryNavigationEnablementContext, true).bindTo(scopedContextKeyService);\n    return { scopedContextKeyService: scopedContextKeyService, historyNavigationEnablement: historyNavigationEnablement };\n}\nexports.createAndBindHistoryNavigationWidgetScopedContextKeyService = createAndBindHistoryNavigationWidgetScopedContextKeyService;\nvar ContextScopedHistoryInputBox = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextScopedHistoryInputBox, _super);\n    function ContextScopedHistoryInputBox(container, contextViewProvider, options, contextKeyService) {\n        var _this = _super.call(this, container, contextViewProvider, options) || this;\n        _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, { target: _this.element, historyNavigator: _this }).scopedContextKeyService);\n        return _this;\n    }\n    ContextScopedHistoryInputBox = tslib_1.__decorate([\n        tslib_1.__param(3, contextkey_1.IContextKeyService)\n    ], ContextScopedHistoryInputBox);\n    return ContextScopedHistoryInputBox;\n}(inputBox_1.HistoryInputBox));\nexports.ContextScopedHistoryInputBox = ContextScopedHistoryInputBox;\nvar ContextScopedFindInput = /** @class */ (function (_super) {\n    tslib_1.__extends(ContextScopedFindInput, _super);\n    function ContextScopedFindInput(container, contextViewProvider, options, contextKeyService, showFindOptions) {\n        if (showFindOptions === void 0) { showFindOptions = false; }\n        var _this = _super.call(this, container, contextViewProvider, showFindOptions, options) || this;\n        _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, { target: _this.inputBox.element, historyNavigator: _this.inputBox }).scopedContextKeyService);\n        return _this;\n    }\n    ContextScopedFindInput = tslib_1.__decorate([\n        tslib_1.__param(3, contextkey_1.IContextKeyService)\n    ], ContextScopedFindInput);\n    return ContextScopedFindInput;\n}(findInput_1.FindInput));\nexports.ContextScopedFindInput = ContextScopedFindInput;\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'history.showPrevious',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(new contextkey_1.ContextKeyDefinedExpr(exports.HistoryNavigationWidgetContext), new contextkey_1.ContextKeyEqualsExpr(exports.HistoryNavigationEnablementContext, true)),\n    primary: keyCodes_1.KeyCode.UpArrow,\n    secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.UpArrow],\n    handler: function (accessor, arg2) {\n        var widget = getContextScopedWidget(accessor.get(contextkey_1.IContextKeyService), exports.HistoryNavigationWidgetContext);\n        if (widget) {\n            var historyInputBox = widget.historyNavigator;\n            historyInputBox.showPreviousValue();\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: 'history.showNext',\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: new contextkey_1.ContextKeyAndExpr([new contextkey_1.ContextKeyDefinedExpr(exports.HistoryNavigationWidgetContext), new contextkey_1.ContextKeyEqualsExpr(exports.HistoryNavigationEnablementContext, true)]),\n    primary: keyCodes_1.KeyCode.DownArrow,\n    secondary: [keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.DownArrow],\n    handler: function (accessor, arg2) {\n        var widget = getContextScopedWidget(accessor.get(contextkey_1.IContextKeyService), exports.HistoryNavigationWidgetContext);\n        if (widget) {\n            var historyInputBox = widget.historyNavigator;\n            historyInputBox.showNextValue();\n        }\n    }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/browser/contextScopedHistoryWidget.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/browser/contextScopedHistoryWidget.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContextKeyService, ContextKeyDefinedExpr, ContextKeyExpr, ContextKeyAndExpr, ContextKeyEqualsExpr, RawContextKey, IContextKey, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { HistoryInputBox, IHistoryInputOptions } from 'vs/base/browser/ui/inputbox/inputBox';\nimport { FindInput, IFindInputOptions } from 'vs/base/browser/ui/findinput/findInput';\nimport { IContextViewProvider } from 'vs/base/browser/ui/contextview/contextview';\nimport { IHistoryNavigationWidget } from 'vs/base/browser/history';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\n\nexport const HistoryNavigationWidgetContext = 'historyNavigationWidget';\nexport const HistoryNavigationEnablementContext = 'historyNavigationEnabled';\n\nfunction bindContextScopedWidget(contextKeyService: IContextKeyService, widget: IContextScopedWidget, contextKey: string): void {\n\tnew RawContextKey<IContextScopedWidget>(contextKey, widget).bindTo(contextKeyService);\n}\n\nfunction createWidgetScopedContextKeyService(contextKeyService: IContextKeyService, widget: IContextScopedWidget): IContextKeyService {\n\treturn contextKeyService.createScoped(widget.target);\n}\n\nfunction getContextScopedWidget<T extends IContextScopedWidget>(contextKeyService: IContextKeyService, contextKey: string): T | undefined {\n\treturn contextKeyService.getContext(document.activeElement).getValue(contextKey);\n}\n\ninterface IContextScopedWidget {\n\treadonly target: IContextKeyServiceTarget;\n}\n\ninterface IContextScopedHistoryNavigationWidget extends IContextScopedWidget {\n\thistoryNavigator: IHistoryNavigationWidget;\n}\n\nexport function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService: IContextKeyService, widget: IContextScopedHistoryNavigationWidget): { scopedContextKeyService: IContextKeyService, historyNavigationEnablement: IContextKey<boolean> } {\n\tconst scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);\n\tbindContextScopedWidget(scopedContextKeyService, widget, HistoryNavigationWidgetContext);\n\tconst historyNavigationEnablement = new RawContextKey<boolean>(HistoryNavigationEnablementContext, true).bindTo(scopedContextKeyService);\n\treturn { scopedContextKeyService, historyNavigationEnablement };\n}\n\nexport class ContextScopedHistoryInputBox extends HistoryInputBox {\n\n\tconstructor(container: HTMLElement, contextViewProvider: IContextViewProvider | undefined, options: IHistoryInputOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(container, contextViewProvider, options);\n\t\tthis._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, <IContextScopedHistoryNavigationWidget>{ target: this.element, historyNavigator: this }).scopedContextKeyService);\n\t}\n\n}\n\nexport class ContextScopedFindInput extends FindInput {\n\n\tconstructor(container: HTMLElement | null, contextViewProvider: IContextViewProvider, options: IFindInputOptions,\n\t\t@IContextKeyService contextKeyService: IContextKeyService, showFindOptions: boolean = false\n\t) {\n\t\tsuper(container, contextViewProvider, showFindOptions, options);\n\t\tthis._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, <IContextScopedHistoryNavigationWidget>{ target: this.inputBox.element, historyNavigator: this.inputBox }).scopedContextKeyService);\n\t}\n\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'history.showPrevious',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(new ContextKeyDefinedExpr(HistoryNavigationWidgetContext), new ContextKeyEqualsExpr(HistoryNavigationEnablementContext, true)),\n\tprimary: KeyCode.UpArrow,\n\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\thandler: (accessor, arg2) => {\n\t\tconst widget = getContextScopedWidget<IContextScopedHistoryNavigationWidget>(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\t\tif (widget) {\n\t\t\tconst historyInputBox: IHistoryNavigationWidget = widget.historyNavigator;\n\t\t\thistoryInputBox.showPreviousValue();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'history.showNext',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: new ContextKeyAndExpr([new ContextKeyDefinedExpr(HistoryNavigationWidgetContext), new ContextKeyEqualsExpr(HistoryNavigationEnablementContext, true)]),\n\tprimary: KeyCode.DownArrow,\n\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\thandler: (accessor, arg2) => {\n\t\tconst widget = getContextScopedWidget<IContextScopedHistoryNavigationWidget>(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\t\tif (widget) {\n\t\t\tconst historyInputBox: IHistoryNavigationWidget = widget.historyNavigator;\n\t\t\thistoryInputBox.showNextValue();\n\t\t}\n\t}\n});\n"]}]}