{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/configuration/common/configurationRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/event\", \"vs/platform/registry/common/platform\", \"vs/base/common/types\", \"vs/base/common/strings\", \"vs/platform/jsonschemas/common/jsonContributionRegistry\"], function (require, exports, nls, event_1, platform_1, types, strings, jsonContributionRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Extensions = {\n        Configuration: 'base.contributions.configuration'\n    };\n    var ConfigurationScope;\n    (function (ConfigurationScope) {\n        ConfigurationScope[ConfigurationScope[\"APPLICATION\"] = 1] = \"APPLICATION\";\n        ConfigurationScope[ConfigurationScope[\"WINDOW\"] = 2] = \"WINDOW\";\n        ConfigurationScope[ConfigurationScope[\"RESOURCE\"] = 3] = \"RESOURCE\";\n    })(ConfigurationScope = exports.ConfigurationScope || (exports.ConfigurationScope = {}));\n    exports.allSettings = { properties: {}, patternProperties: {} };\n    exports.applicationSettings = { properties: {}, patternProperties: {} };\n    exports.windowSettings = { properties: {}, patternProperties: {} };\n    exports.resourceSettings = { properties: {}, patternProperties: {} };\n    exports.editorConfigurationSchemaId = 'vscode://schemas/settings/editor';\n    const contributionRegistry = platform_1.Registry.as(jsonContributionRegistry_1.Extensions.JSONContribution);\n    class ConfigurationRegistry {\n        constructor() {\n            this.overrideIdentifiers = [];\n            this._onDidSchemaChange = new event_1.Emitter();\n            this.onDidSchemaChange = this._onDidSchemaChange.event;\n            this._onDidUpdateConfiguration = new event_1.Emitter();\n            this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;\n            this.defaultOverridesConfigurationNode = {\n                id: 'defaultOverrides',\n                title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n                properties: {}\n            };\n            this.configurationContributors = [this.defaultOverridesConfigurationNode];\n            this.editorConfigurationSchema = { properties: {}, patternProperties: {}, additionalProperties: false, errorMessage: 'Unknown editor configuration setting' };\n            this.configurationProperties = {};\n            this.excludedConfigurationProperties = {};\n            this.computeOverridePropertyPattern();\n            contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n        }\n        registerConfiguration(configuration, validate = true) {\n            this.registerConfigurations([configuration], validate);\n        }\n        registerConfigurations(configurations, validate = true) {\n            const properties = [];\n            configurations.forEach(configuration => {\n                properties.push(...this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n                this.configurationContributors.push(configuration);\n                this.registerJSONConfiguration(configuration);\n                this.updateSchemaForOverrideSettingsConfiguration(configuration);\n            });\n            this._onDidSchemaChange.fire();\n            this._onDidUpdateConfiguration.fire(properties);\n        }\n        deregisterConfigurations(configurations) {\n            const properties = [];\n            const deregisterConfiguration = (configuration) => {\n                if (configuration.properties) {\n                    for (const key in configuration.properties) {\n                        properties.push(key);\n                        delete this.configurationProperties[key];\n                        delete this.editorConfigurationSchema.properties[key];\n                        // Delete from schema\n                        delete exports.allSettings.properties[key];\n                        switch (configuration.properties[key].scope) {\n                            case ConfigurationScope.APPLICATION:\n                                delete exports.applicationSettings.properties[key];\n                                break;\n                            case ConfigurationScope.WINDOW:\n                                delete exports.windowSettings.properties[key];\n                                break;\n                            case ConfigurationScope.RESOURCE:\n                                delete exports.resourceSettings.properties[key];\n                                break;\n                        }\n                    }\n                }\n                if (configuration.allOf) {\n                    configuration.allOf.forEach(node => deregisterConfiguration(node));\n                }\n            };\n            for (const configuration of configurations) {\n                deregisterConfiguration(configuration);\n                const index = this.configurationContributors.indexOf(configuration);\n                if (index !== -1) {\n                    this.configurationContributors.splice(index, 1);\n                }\n            }\n            contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n            this._onDidSchemaChange.fire();\n            this._onDidUpdateConfiguration.fire(properties);\n        }\n        registerDefaultConfigurations(defaultConfigurations) {\n            const properties = [];\n            for (const defaultConfiguration of defaultConfigurations) {\n                for (const key in defaultConfiguration.defaults) {\n                    const defaultValue = defaultConfiguration.defaults[key];\n                    if (exports.OVERRIDE_PROPERTY_PATTERN.test(key) && typeof defaultValue === 'object') {\n                        const propertySchema = {\n                            type: 'object',\n                            default: defaultValue,\n                            description: nls.localize('overrideSettings.description', \"Configure editor settings to be overridden for {0} language.\", key),\n                            $ref: exports.editorConfigurationSchemaId\n                        };\n                        exports.allSettings.properties[key] = propertySchema;\n                        this.defaultOverridesConfigurationNode.properties[key] = propertySchema;\n                        this.configurationProperties[key] = propertySchema;\n                        properties.push(key);\n                    }\n                }\n            }\n            this._onDidSchemaChange.fire();\n            this._onDidUpdateConfiguration.fire(properties);\n        }\n        deregisterDefaultConfigurations(defaultConfigurations) {\n            const properties = [];\n            for (const defaultConfiguration of defaultConfigurations) {\n                for (const key in defaultConfiguration.defaults) {\n                    properties.push(key);\n                    delete exports.allSettings.properties[key];\n                    delete this.defaultOverridesConfigurationNode.properties[key];\n                    delete this.configurationProperties[key];\n                }\n            }\n            this._onDidSchemaChange.fire();\n            this._onDidUpdateConfiguration.fire(properties);\n        }\n        notifyConfigurationSchemaUpdated(...configurations) {\n            this._onDidSchemaChange.fire();\n        }\n        registerOverrideIdentifiers(overrideIdentifiers) {\n            this.overrideIdentifiers.push(...overrideIdentifiers);\n            this.updateOverridePropertyPatternKey();\n        }\n        validateAndRegisterProperties(configuration, validate = true, scope = ConfigurationScope.WINDOW, overridable = false) {\n            scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n            overridable = configuration.overridable || overridable;\n            let propertyKeys = [];\n            let properties = configuration.properties;\n            if (properties) {\n                for (let key in properties) {\n                    let message;\n                    if (validate && (message = validateProperty(key))) {\n                        console.warn(message);\n                        delete properties[key];\n                        continue;\n                    }\n                    // fill in default values\n                    let property = properties[key];\n                    let defaultValue = property.default;\n                    if (types.isUndefined(defaultValue)) {\n                        property.default = getDefaultValue(property.type);\n                    }\n                    // Inherit overridable property from parent\n                    if (overridable) {\n                        property.overridable = true;\n                    }\n                    if (exports.OVERRIDE_PROPERTY_PATTERN.test(key)) {\n                        property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                    }\n                    else {\n                        property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    }\n                    // Add to properties maps\n                    // Property is included by default if 'included' is unspecified\n                    if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                        this.excludedConfigurationProperties[key] = properties[key];\n                        delete properties[key];\n                        continue;\n                    }\n                    else {\n                        this.configurationProperties[key] = properties[key];\n                    }\n                    propertyKeys.push(key);\n                }\n            }\n            let subNodes = configuration.allOf;\n            if (subNodes) {\n                for (let node of subNodes) {\n                    propertyKeys.push(...this.validateAndRegisterProperties(node, validate, scope, overridable));\n                }\n            }\n            return propertyKeys;\n        }\n        getConfigurations() {\n            return this.configurationContributors;\n        }\n        getConfigurationProperties() {\n            return this.configurationProperties;\n        }\n        getExcludedConfigurationProperties() {\n            return this.excludedConfigurationProperties;\n        }\n        registerJSONConfiguration(configuration) {\n            function register(configuration) {\n                let properties = configuration.properties;\n                if (properties) {\n                    for (const key in properties) {\n                        exports.allSettings.properties[key] = properties[key];\n                        switch (properties[key].scope) {\n                            case ConfigurationScope.APPLICATION:\n                                exports.applicationSettings.properties[key] = properties[key];\n                                break;\n                            case ConfigurationScope.WINDOW:\n                                exports.windowSettings.properties[key] = properties[key];\n                                break;\n                            case ConfigurationScope.RESOURCE:\n                                exports.resourceSettings.properties[key] = properties[key];\n                                break;\n                        }\n                    }\n                }\n                let subNodes = configuration.allOf;\n                if (subNodes) {\n                    subNodes.forEach(register);\n                }\n            }\n            register(configuration);\n        }\n        updateSchemaForOverrideSettingsConfiguration(configuration) {\n            if (configuration.id !== SETTINGS_OVERRRIDE_NODE_ID) {\n                this.update(configuration);\n                contributionRegistry.registerSchema(exports.editorConfigurationSchemaId, this.editorConfigurationSchema);\n            }\n        }\n        updateOverridePropertyPatternKey() {\n            let patternProperties = exports.allSettings.patternProperties[this.overridePropertyPattern];\n            if (!patternProperties) {\n                patternProperties = {\n                    type: 'object',\n                    description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                    errorMessage: 'Unknown Identifier. Use language identifiers',\n                    $ref: exports.editorConfigurationSchemaId\n                };\n            }\n            delete exports.allSettings.patternProperties[this.overridePropertyPattern];\n            delete exports.applicationSettings.patternProperties[this.overridePropertyPattern];\n            delete exports.windowSettings.patternProperties[this.overridePropertyPattern];\n            delete exports.resourceSettings.patternProperties[this.overridePropertyPattern];\n            this.computeOverridePropertyPattern();\n            exports.allSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n            exports.applicationSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n            exports.windowSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n            exports.resourceSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n            this._onDidSchemaChange.fire();\n        }\n        update(configuration) {\n            let properties = configuration.properties;\n            if (properties) {\n                for (let key in properties) {\n                    if (properties[key].overridable) {\n                        this.editorConfigurationSchema.properties[key] = this.getConfigurationProperties()[key];\n                    }\n                }\n            }\n            let subNodes = configuration.allOf;\n            if (subNodes) {\n                subNodes.forEach(subNode => this.update(subNode));\n            }\n        }\n        computeOverridePropertyPattern() {\n            this.overridePropertyPattern = this.overrideIdentifiers.length ? OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(identifier => strings.createRegExp(identifier, false).source).join('|')) : OVERRIDE_PROPERTY;\n        }\n    }\n    const SETTINGS_OVERRRIDE_NODE_ID = 'override';\n    const OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\n    const OVERRIDE_PATTERN_WITH_SUBSTITUTION = '\\\\[(${0})\\\\]$';\n    exports.OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\n    function getDefaultValue(type) {\n        const t = Array.isArray(type) ? type[0] : type;\n        switch (t) {\n            case 'boolean':\n                return false;\n            case 'integer':\n            case 'number':\n                return 0;\n            case 'string':\n                return '';\n            case 'array':\n                return [];\n            case 'object':\n                return {};\n            default:\n                return null;\n        }\n    }\n    exports.getDefaultValue = getDefaultValue;\n    const configurationRegistry = new ConfigurationRegistry();\n    platform_1.Registry.add(exports.Extensions.Configuration, configurationRegistry);\n    function validateProperty(property) {\n        if (exports.OVERRIDE_PROPERTY_PATTERN.test(property)) {\n            return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n        }\n        if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n            return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n        }\n        return null;\n    }\n    exports.validateProperty = validateProperty;\n    function getScopes() {\n        const scopes = {};\n        const configurationProperties = configurationRegistry.getConfigurationProperties();\n        for (const key of Object.keys(configurationProperties)) {\n            scopes[key] = configurationProperties[key].scope;\n        }\n        scopes['launch'] = ConfigurationScope.RESOURCE;\n        scopes['task'] = ConfigurationScope.RESOURCE;\n        return scopes;\n    }\n    exports.getScopes = getScopes;\n});\n",null]}