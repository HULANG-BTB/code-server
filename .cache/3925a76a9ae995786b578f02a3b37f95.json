{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/macLinuxFallbackKeyboardMapper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/keyCodes\", \"vs/base/common/scanCode\", \"vs/platform/keybinding/common/usLayoutResolvedKeybinding\", \"vs/platform/keybinding/common/resolvedKeybindingItem\"], function (require, exports, keyCodes_1, scanCode_1, usLayoutResolvedKeybinding_1, resolvedKeybindingItem_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A keyboard mapper to be used when reading the keymap from the OS fails.\n     */\n    class MacLinuxFallbackKeyboardMapper {\n        constructor(OS) {\n            this._OS = OS;\n        }\n        dumpDebugInfo() {\n            return 'FallbackKeyboardMapper dispatching on keyCode';\n        }\n        resolveKeybinding(keybinding) {\n            return [new usLayoutResolvedKeybinding_1.USLayoutResolvedKeybinding(keybinding, this._OS)];\n        }\n        resolveKeyboardEvent(keyboardEvent) {\n            let keybinding = new keyCodes_1.SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n            return new usLayoutResolvedKeybinding_1.USLayoutResolvedKeybinding(keybinding.toChord(), this._OS);\n        }\n        _scanCodeToKeyCode(scanCode) {\n            const immutableKeyCode = scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n            if (immutableKeyCode !== -1) {\n                return immutableKeyCode;\n            }\n            switch (scanCode) {\n                case scanCode_1.ScanCode.KeyA: return keyCodes_1.KeyCode.KEY_A;\n                case scanCode_1.ScanCode.KeyB: return keyCodes_1.KeyCode.KEY_B;\n                case scanCode_1.ScanCode.KeyC: return keyCodes_1.KeyCode.KEY_C;\n                case scanCode_1.ScanCode.KeyD: return keyCodes_1.KeyCode.KEY_D;\n                case scanCode_1.ScanCode.KeyE: return keyCodes_1.KeyCode.KEY_E;\n                case scanCode_1.ScanCode.KeyF: return keyCodes_1.KeyCode.KEY_F;\n                case scanCode_1.ScanCode.KeyG: return keyCodes_1.KeyCode.KEY_G;\n                case scanCode_1.ScanCode.KeyH: return keyCodes_1.KeyCode.KEY_H;\n                case scanCode_1.ScanCode.KeyI: return keyCodes_1.KeyCode.KEY_I;\n                case scanCode_1.ScanCode.KeyJ: return keyCodes_1.KeyCode.KEY_J;\n                case scanCode_1.ScanCode.KeyK: return keyCodes_1.KeyCode.KEY_K;\n                case scanCode_1.ScanCode.KeyL: return keyCodes_1.KeyCode.KEY_L;\n                case scanCode_1.ScanCode.KeyM: return keyCodes_1.KeyCode.KEY_M;\n                case scanCode_1.ScanCode.KeyN: return keyCodes_1.KeyCode.KEY_N;\n                case scanCode_1.ScanCode.KeyO: return keyCodes_1.KeyCode.KEY_O;\n                case scanCode_1.ScanCode.KeyP: return keyCodes_1.KeyCode.KEY_P;\n                case scanCode_1.ScanCode.KeyQ: return keyCodes_1.KeyCode.KEY_Q;\n                case scanCode_1.ScanCode.KeyR: return keyCodes_1.KeyCode.KEY_R;\n                case scanCode_1.ScanCode.KeyS: return keyCodes_1.KeyCode.KEY_S;\n                case scanCode_1.ScanCode.KeyT: return keyCodes_1.KeyCode.KEY_T;\n                case scanCode_1.ScanCode.KeyU: return keyCodes_1.KeyCode.KEY_U;\n                case scanCode_1.ScanCode.KeyV: return keyCodes_1.KeyCode.KEY_V;\n                case scanCode_1.ScanCode.KeyW: return keyCodes_1.KeyCode.KEY_W;\n                case scanCode_1.ScanCode.KeyX: return keyCodes_1.KeyCode.KEY_X;\n                case scanCode_1.ScanCode.KeyY: return keyCodes_1.KeyCode.KEY_Y;\n                case scanCode_1.ScanCode.KeyZ: return keyCodes_1.KeyCode.KEY_Z;\n                case scanCode_1.ScanCode.Digit1: return keyCodes_1.KeyCode.KEY_1;\n                case scanCode_1.ScanCode.Digit2: return keyCodes_1.KeyCode.KEY_2;\n                case scanCode_1.ScanCode.Digit3: return keyCodes_1.KeyCode.KEY_3;\n                case scanCode_1.ScanCode.Digit4: return keyCodes_1.KeyCode.KEY_4;\n                case scanCode_1.ScanCode.Digit5: return keyCodes_1.KeyCode.KEY_5;\n                case scanCode_1.ScanCode.Digit6: return keyCodes_1.KeyCode.KEY_6;\n                case scanCode_1.ScanCode.Digit7: return keyCodes_1.KeyCode.KEY_7;\n                case scanCode_1.ScanCode.Digit8: return keyCodes_1.KeyCode.KEY_8;\n                case scanCode_1.ScanCode.Digit9: return keyCodes_1.KeyCode.KEY_9;\n                case scanCode_1.ScanCode.Digit0: return keyCodes_1.KeyCode.KEY_0;\n                case scanCode_1.ScanCode.Minus: return keyCodes_1.KeyCode.US_MINUS;\n                case scanCode_1.ScanCode.Equal: return keyCodes_1.KeyCode.US_EQUAL;\n                case scanCode_1.ScanCode.BracketLeft: return keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET;\n                case scanCode_1.ScanCode.BracketRight: return keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET;\n                case scanCode_1.ScanCode.Backslash: return keyCodes_1.KeyCode.US_BACKSLASH;\n                case scanCode_1.ScanCode.IntlHash: return keyCodes_1.KeyCode.Unknown; // missing\n                case scanCode_1.ScanCode.Semicolon: return keyCodes_1.KeyCode.US_SEMICOLON;\n                case scanCode_1.ScanCode.Quote: return keyCodes_1.KeyCode.US_QUOTE;\n                case scanCode_1.ScanCode.Backquote: return keyCodes_1.KeyCode.US_BACKTICK;\n                case scanCode_1.ScanCode.Comma: return keyCodes_1.KeyCode.US_COMMA;\n                case scanCode_1.ScanCode.Period: return keyCodes_1.KeyCode.US_DOT;\n                case scanCode_1.ScanCode.Slash: return keyCodes_1.KeyCode.US_SLASH;\n                case scanCode_1.ScanCode.IntlBackslash: return keyCodes_1.KeyCode.OEM_102;\n            }\n            return keyCodes_1.KeyCode.Unknown;\n        }\n        _resolveSimpleUserBinding(binding) {\n            if (!binding) {\n                return null;\n            }\n            if (binding instanceof keyCodes_1.SimpleKeybinding) {\n                return binding;\n            }\n            const keyCode = this._scanCodeToKeyCode(binding.scanCode);\n            if (keyCode === keyCodes_1.KeyCode.Unknown) {\n                return null;\n            }\n            return new keyCodes_1.SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n        }\n        resolveUserBinding(input) {\n            const parts = resolvedKeybindingItem_1.removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n            if (parts.length > 0) {\n                return [new usLayoutResolvedKeybinding_1.USLayoutResolvedKeybinding(new keyCodes_1.ChordKeybinding(parts), this._OS)];\n            }\n            return [];\n        }\n    }\n    exports.MacLinuxFallbackKeyboardMapper = MacLinuxFallbackKeyboardMapper;\n});\n",null]}