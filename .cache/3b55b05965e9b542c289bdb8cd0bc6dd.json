{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/theme/common/themeService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/lifecycle\", \"vs/platform/registry/common/platform\", \"vs/base/common/event\"], function (require, exports, instantiation_1, lifecycle_1, platform, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IThemeService = instantiation_1.createDecorator('themeService');\n    function themeColorFromId(id) {\n        return { id };\n    }\n    exports.themeColorFromId = themeColorFromId;\n    exports.FileThemeIcon = { id: 'file' };\n    exports.FolderThemeIcon = { id: 'folder' };\n    // base themes\n    exports.DARK = 'dark';\n    exports.LIGHT = 'light';\n    exports.HIGH_CONTRAST = 'hc';\n    function getThemeTypeSelector(type) {\n        switch (type) {\n            case exports.DARK: return 'vs-dark';\n            case exports.HIGH_CONTRAST: return 'hc-black';\n            default: return 'vs';\n        }\n    }\n    exports.getThemeTypeSelector = getThemeTypeSelector;\n    // static theming participant\n    exports.Extensions = {\n        ThemingContribution: 'base.contributions.theming'\n    };\n    class ThemingRegistry {\n        constructor() {\n            this.themingParticipants = [];\n            this.themingParticipants = [];\n            this.onThemingParticipantAddedEmitter = new event_1.Emitter();\n        }\n        onThemeChange(participant) {\n            this.themingParticipants.push(participant);\n            this.onThemingParticipantAddedEmitter.fire(participant);\n            return lifecycle_1.toDisposable(() => {\n                const idx = this.themingParticipants.indexOf(participant);\n                this.themingParticipants.splice(idx, 1);\n            });\n        }\n        get onThemingParticipantAdded() {\n            return this.onThemingParticipantAddedEmitter.event;\n        }\n        getThemingParticipants() {\n            return this.themingParticipants;\n        }\n    }\n    let themingRegistry = new ThemingRegistry();\n    platform.Registry.add(exports.Extensions.ThemingContribution, themingRegistry);\n    function registerThemingParticipant(participant) {\n        return themingRegistry.onThemeChange(participant);\n    }\n    exports.registerThemingParticipant = registerThemingParticipant;\n});\n",null]}