{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/opener/common/opener.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/opener/common/opener.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IOpenerService = instantiation_1.createDecorator('openerService');\nexports.NullOpenerService = Object.freeze({\n    _serviceBrand: undefined,\n    registerOpener: function () { return { dispose: function () { } }; },\n    open: function () { return Promise.resolve(false); }\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/opener/common/opener.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/opener/common/opener.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAGpE,QAAA,cAAc,GAAG,+BAAe,CAAiB,eAAe,CAAC,CAAC;AAsBlE,QAAA,iBAAiB,GAAmB,MAAM,CAAC,MAAM,CAAC;IAC9D,aAAa,EAAE,SAAS;IACxB,cAAc,gBAAK,OAAO,EAAE,OAAO,gBAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,IAAI,gBAAK,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CACzC,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\n\nexport const IOpenerService = createDecorator<IOpenerService>('openerService');\n\n\nexport interface IOpener {\n\topen(resource: URI, options?: { openToSide?: boolean }): Promise<boolean>;\n}\n\nexport interface IOpenerService {\n\n\t_serviceBrand: any;\n\n\tregisterOpener(opener: IOpener): IDisposable;\n\n\t/**\n\t * Opens a resource, like a webadress, a document uri, or executes command.\n\t *\n\t * @param resource A resource\n\t * @return A promise that resolves when the opening is done.\n\t */\n\topen(resource: URI, options?: { openToSide?: boolean }): Promise<boolean>;\n}\n\nexport const NullOpenerService: IOpenerService = Object.freeze({\n\t_serviceBrand: undefined,\n\tregisterOpener() { return { dispose() { } }; },\n\topen() { return Promise.resolve(false); }\n});\n"]}]}