{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/request/node/request.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/platform/registry/common/platform\"], function (require, exports, nls_1, instantiation_1, configurationRegistry_1, platform_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.IRequestService = instantiation_1.createDecorator('requestService');\n    platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration)\n        .registerConfiguration({\n        id: 'http',\n        order: 15,\n        title: nls_1.localize('httpConfigurationTitle', \"HTTP\"),\n        type: 'object',\n        properties: {\n            'http.proxy': {\n                type: 'string',\n                pattern: '^https?://([^:]*(:[^@]*)?@)?([^:]+)(:\\\\d+)?/?$|^$',\n                description: nls_1.localize('proxy', \"The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.\")\n            },\n            'http.proxyStrictSSL': {\n                type: 'boolean',\n                default: true,\n                description: nls_1.localize('strictSSL', \"Controls whether the proxy server certificate should be verified against the list of supplied CAs.\")\n            },\n            'http.proxyAuthorization': {\n                type: ['null', 'string'],\n                default: null,\n                description: nls_1.localize('proxyAuthorization', \"The value to send as the 'Proxy-Authorization' header for every network request.\")\n            },\n            'http.proxySupport': {\n                type: 'string',\n                enum: ['off', 'on', 'override'],\n                enumDescriptions: [\n                    nls_1.localize('proxySupportOff', \"Disable proxy support for extensions.\"),\n                    nls_1.localize('proxySupportOn', \"Enable proxy support for extensions.\"),\n                    nls_1.localize('proxySupportOverride', \"Enable proxy support for extensions, override request options.\"),\n                ],\n                default: 'override',\n                description: nls_1.localize('proxySupport', \"Use the proxy support for extensions.\")\n            },\n            'http.systemCertificates': {\n                type: 'boolean',\n                default: true,\n                description: nls_1.localize('systemCertificates', \"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)\")\n            }\n        }\n    });\n});\n",null]}