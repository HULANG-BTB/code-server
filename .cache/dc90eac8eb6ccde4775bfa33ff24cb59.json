{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/tokenization/tokenization.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/tokenization/tokenization.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar stopwatch_1 = require(\"vs/base/common/stopwatch\");\nvar ForceRetokenizeAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ForceRetokenizeAction, _super);\n    function ForceRetokenizeAction() {\n        return _super.call(this, {\n            id: 'editor.action.forceRetokenize',\n            label: nls.localize('forceRetokenize', \"Developer: Force Retokenize\"),\n            alias: 'Developer: Force Retokenize',\n            precondition: null\n        }) || this;\n    }\n    ForceRetokenizeAction.prototype.run = function (accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        var model = editor.getModel();\n        model.flushTokens();\n        var sw = new stopwatch_1.StopWatch(true);\n        model.forceTokenization(model.getLineCount());\n        sw.stop();\n        console.log(\"tokenization took \" + sw.elapsed());\n    };\n    return ForceRetokenizeAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(ForceRetokenizeAction);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/tokenization/tokenization.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/tokenization/tokenization.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,4BAA8B;AAE9B,uEAA0G;AAC1G,sDAAqD;AAErD;IAAoC,iDAAY;IAC/C;eACC,kBAAM;YACL,EAAE,EAAE,+BAA+B;YACnC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,EAAE,6BAA6B,CAAC;YACrE,KAAK,EAAE,6BAA6B;YACpC,YAAY,EAAE,IAAI;SAClB,CAAC;IACH,CAAC;IAEM,mCAAG,GAAV,UAAW,QAA0B,EAAE,MAAmB;QACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;YACvB,OAAO;SACP;QACD,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAChC,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAM,EAAE,GAAG,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC;QAC/B,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;QAC9C,EAAE,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,CAAC,GAAG,CAAC,uBAAqB,EAAE,CAAC,OAAO,EAAI,CAAC,CAAC;IAClD,CAAC;IACF,4BAAC;AAAD,CAAC,AArBD,CAAoC,+BAAY,GAqB/C;AAED,uCAAoB,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { StopWatch } from 'vs/base/common/stopwatch';\n\nclass ForceRetokenizeAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.forceRetokenize',\n\t\t\tlabel: nls.localize('forceRetokenize', \"Developer: Force Retokenize\"),\n\t\t\talias: 'Developer: Force Retokenize',\n\t\t\tprecondition: null\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tmodel.flushTokens();\n\t\tconst sw = new StopWatch(true);\n\t\tmodel.forceTokenization(model.getLineCount());\n\t\tsw.stop();\n\t\tconsole.log(`tokenization took ${sw.elapsed()}`);\n\t}\n}\n\nregisterEditorAction(ForceRetokenizeAction);\n"]}]}