{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.snap.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/update/electron-main/updateService.snap.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/base/common/async\", \"vs/platform/lifecycle/electron-main/lifecycleMain\", \"vs/platform/update/common/update\", \"vs/platform/environment/common/environment\", \"vs/platform/log/common/log\", \"vs/base/common/path\", \"fs\", \"child_process\", \"vs/platform/telemetry/common/telemetry\"], function (require, exports, event_1, async_1, lifecycleMain_1, update_1, environment_1, log_1, path, fs_1, child_process_1, telemetry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let AbstractUpdateService2 = class AbstractUpdateService2 {\n        constructor(lifecycleService, environmentService, logService) {\n            this.lifecycleService = lifecycleService;\n            this.logService = logService;\n            this._state = update_1.State.Uninitialized;\n            this._onStateChange = new event_1.Emitter();\n            if (environmentService.disableUpdates) {\n                this.logService.info('update#ctor - updates are disabled');\n                return;\n            }\n            this.setState(update_1.State.Idle(this.getUpdateType()));\n            // Start checking for updates after 30 seconds\n            this.scheduleCheckForUpdates(30 * 1000).then(undefined, err => this.logService.error(err));\n        }\n        get onStateChange() { return this._onStateChange.event; }\n        get state() {\n            return this._state;\n        }\n        setState(state) {\n            this.logService.info('update#setState', state.type);\n            this._state = state;\n            this._onStateChange.fire(state);\n        }\n        scheduleCheckForUpdates(delay = 60 * 60 * 1000) {\n            return async_1.timeout(delay)\n                .then(() => this.checkForUpdates(null))\n                .then(() => {\n                // Check again after 1 hour\n                return this.scheduleCheckForUpdates(60 * 60 * 1000);\n            });\n        }\n        checkForUpdates(context) {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('update#checkForUpdates, state = ', this.state.type);\n                if (this.state.type !== update_1.StateType.Idle) {\n                    return;\n                }\n                this.doCheckForUpdates(context);\n            });\n        }\n        downloadUpdate() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('update#downloadUpdate, state = ', this.state.type);\n                if (this.state.type !== update_1.StateType.AvailableForDownload) {\n                    return;\n                }\n                yield this.doDownloadUpdate(this.state);\n            });\n        }\n        doDownloadUpdate(state) {\n            return Promise.resolve(undefined);\n        }\n        applyUpdate() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.logService.trace('update#applyUpdate, state = ', this.state.type);\n                if (this.state.type !== update_1.StateType.Downloaded) {\n                    return;\n                }\n                yield this.doApplyUpdate();\n            });\n        }\n        doApplyUpdate() {\n            return Promise.resolve(undefined);\n        }\n        quitAndInstall() {\n            this.logService.trace('update#quitAndInstall, state = ', this.state.type);\n            if (this.state.type !== update_1.StateType.Ready) {\n                return Promise.resolve(undefined);\n            }\n            this.logService.trace('update#quitAndInstall(): before lifecycle quit()');\n            this.lifecycleService.quit(true /* from update */).then(vetod => {\n                this.logService.trace(`update#quitAndInstall(): after lifecycle quit() with veto: ${vetod}`);\n                if (vetod) {\n                    return;\n                }\n                this.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n                this.doQuitAndInstall();\n            });\n            return Promise.resolve(undefined);\n        }\n        getUpdateType() {\n            return update_1.UpdateType.Snap;\n        }\n        doQuitAndInstall() {\n            // noop\n        }\n    };\n    AbstractUpdateService2 = __decorate([\n        __param(0, lifecycleMain_1.ILifecycleService),\n        __param(1, environment_1.IEnvironmentService),\n        __param(2, log_1.ILogService)\n    ], AbstractUpdateService2);\n    let SnapUpdateService = class SnapUpdateService extends AbstractUpdateService2 {\n        constructor(snap, snapRevision, lifecycleService, environmentService, logService, telemetryService) {\n            super(lifecycleService, environmentService, logService);\n            this.snap = snap;\n            this.snapRevision = snapRevision;\n            this.telemetryService = telemetryService;\n            const watcher = fs_1.watch(path.dirname(this.snap));\n            const onChange = event_1.Event.fromNodeEventEmitter(watcher, 'change', (_, fileName) => fileName);\n            const onCurrentChange = event_1.Event.filter(onChange, n => n === 'current');\n            const onDebouncedCurrentChange = event_1.Event.debounce(onCurrentChange, (_, e) => e, 2000);\n            const listener = onDebouncedCurrentChange(this.checkForUpdates, this);\n            lifecycleService.onWillShutdown(() => {\n                listener.dispose();\n                watcher.close();\n            });\n        }\n        doCheckForUpdates(context) {\n            this.setState(update_1.State.CheckingForUpdates(context));\n            this.isUpdateAvailable().then(result => {\n                if (result) {\n                    this.setState(update_1.State.Ready({ version: 'something', productVersion: 'something' }));\n                }\n                else {\n                    /* __GDPR__\n                        \"update:notAvailable\" : {\n                            \"explicit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                        }\n                        */\n                    this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });\n                    this.setState(update_1.State.Idle(update_1.UpdateType.Snap));\n                }\n            }, err => {\n                this.logService.error(err);\n                /* __GDPR__\n                    \"update:notAvailable\" : {\n                        \"explicit\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n                    }\n                    */\n                this.telemetryService.publicLog('update:notAvailable', { explicit: !!context });\n                this.setState(update_1.State.Idle(update_1.UpdateType.Snap, err.message || err));\n            });\n        }\n        doQuitAndInstall() {\n            this.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n            // Allow 3 seconds for VS Code to close\n            child_process_1.spawn('sleep 3 && ' + path.basename(process.argv[0]), {\n                shell: true,\n                detached: true,\n                stdio: 'ignore',\n            });\n        }\n        isUpdateAvailable() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const resolvedCurrentSnapPath = yield new Promise((c, e) => fs_1.realpath(`${path.dirname(this.snap)}/current`, (err, r) => err ? e(err) : c(r)));\n                const currentRevision = path.basename(resolvedCurrentSnapPath);\n                return this.snapRevision !== currentRevision;\n            });\n        }\n        isLatestVersion() {\n            return this.isUpdateAvailable().then(undefined, err => {\n                this.logService.error('update#checkForSnapUpdate(): Could not get realpath of application.');\n                return undefined;\n            });\n        }\n    };\n    SnapUpdateService = __decorate([\n        __param(2, lifecycleMain_1.ILifecycleService),\n        __param(3, environment_1.IEnvironmentService),\n        __param(4, log_1.ILogService),\n        __param(5, telemetry_1.ITelemetryService)\n    ], SnapUpdateService);\n    exports.SnapUpdateService = SnapUpdateService;\n});\n",null]}