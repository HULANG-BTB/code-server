{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/extpath.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/extpath.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/base/common/platform\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar path_1 = require(\"vs/base/common/path\");\nfunction isPathSeparator(code) {\n    return code === charCode_1.CharCode.Slash || code === charCode_1.CharCode.Backslash;\n}\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nfunction toSlashes(osPath) {\n    return osPath.replace(/[\\\\/]/g, path_1.posix.sep);\n}\nexports.toSlashes = toSlashes;\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nfunction getRoot(path, sep) {\n    if (sep === void 0) { sep = path_1.posix.sep; }\n    if (!path) {\n        return '';\n    }\n    var len = path.length;\n    var firstLetter = path.charCodeAt(0);\n    if (isPathSeparator(firstLetter)) {\n        if (isPathSeparator(path.charCodeAt(1))) {\n            // UNC candidate \\\\localhost\\shares\\ddd\n            //               ^^^^^^^^^^^^^^^^^^^\n            if (!isPathSeparator(path.charCodeAt(2))) {\n                var pos_1 = 3;\n                var start = pos_1;\n                for (; pos_1 < len; pos_1++) {\n                    if (isPathSeparator(path.charCodeAt(pos_1))) {\n                        break;\n                    }\n                }\n                if (start !== pos_1 && !isPathSeparator(path.charCodeAt(pos_1 + 1))) {\n                    pos_1 += 1;\n                    for (; pos_1 < len; pos_1++) {\n                        if (isPathSeparator(path.charCodeAt(pos_1))) {\n                            return path.slice(0, pos_1 + 1) // consume this separator\n                                .replace(/[\\\\/]/g, sep);\n                        }\n                    }\n                }\n            }\n        }\n        // /user/far\n        // ^\n        return sep;\n    }\n    else if (isWindowsDriveLetter(firstLetter)) {\n        // check for windows drive letter c:\\ or c:\n        if (path.charCodeAt(1) === charCode_1.CharCode.Colon) {\n            if (isPathSeparator(path.charCodeAt(2))) {\n                // C:\\fff\n                // ^^^\n                return path.slice(0, 2) + sep;\n            }\n            else {\n                // C:\n                // ^^\n                return path.slice(0, 2);\n            }\n        }\n    }\n    // check for URI\n    // scheme://authority/path\n    // ^^^^^^^^^^^^^^^^^^^\n    var pos = path.indexOf('://');\n    if (pos !== -1) {\n        pos += 3; // 3 -> \"://\".length\n        for (; pos < len; pos++) {\n            if (isPathSeparator(path.charCodeAt(pos))) {\n                return path.slice(0, pos + 1); // consume this separator\n            }\n        }\n    }\n    return '';\n}\nexports.getRoot = getRoot;\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nfunction isUNC(path) {\n    if (!platform_1.isWindows) {\n        // UNC is a windows concept\n        return false;\n    }\n    if (!path || path.length < 5) {\n        // at least \\\\a\\b\n        return false;\n    }\n    var code = path.charCodeAt(0);\n    if (code !== charCode_1.CharCode.Backslash) {\n        return false;\n    }\n    code = path.charCodeAt(1);\n    if (code !== charCode_1.CharCode.Backslash) {\n        return false;\n    }\n    var pos = 2;\n    var start = pos;\n    for (; pos < path.length; pos++) {\n        code = path.charCodeAt(pos);\n        if (code === charCode_1.CharCode.Backslash) {\n            break;\n        }\n    }\n    if (start === pos) {\n        return false;\n    }\n    code = path.charCodeAt(pos + 1);\n    if (isNaN(code) || code === charCode_1.CharCode.Backslash) {\n        return false;\n    }\n    return true;\n}\nexports.isUNC = isUNC;\n// Reference: https://en.wikipedia.org/wiki/Filename\nvar INVALID_FILE_CHARS = platform_1.isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\nvar WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\nfunction isValidBasename(name) {\n    if (!name || name.length === 0 || /^\\s+$/.test(name)) {\n        return false; // require a name that is not just whitespace\n    }\n    INVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\n    if (INVALID_FILE_CHARS.test(name)) {\n        return false; // check for certain invalid file characters\n    }\n    if (platform_1.isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n        return false; // check for certain invalid file names\n    }\n    if (name === '.' || name === '..') {\n        return false; // check for reserved values\n    }\n    if (platform_1.isWindows && name[name.length - 1] === '.') {\n        return false; // Windows: file cannot end with a \".\"\n    }\n    if (platform_1.isWindows && name.length !== name.trim().length) {\n        return false; // Windows: file cannot end with a whitespace\n    }\n    if (name.length > 255) {\n        return false; // most file systems do not allow files > 255 lenth\n    }\n    return true;\n}\nexports.isValidBasename = isValidBasename;\nfunction isEqual(pathA, pathB, ignoreCase) {\n    var identityEquals = (pathA === pathB);\n    if (!ignoreCase || identityEquals) {\n        return identityEquals;\n    }\n    if (!pathA || !pathB) {\n        return false;\n    }\n    return strings_1.equalsIgnoreCase(pathA, pathB);\n}\nexports.isEqual = isEqual;\nfunction isEqualOrParent(path, candidate, ignoreCase, separator) {\n    if (separator === void 0) { separator = path_1.sep; }\n    if (path === candidate) {\n        return true;\n    }\n    if (!path || !candidate) {\n        return false;\n    }\n    if (candidate.length > path.length) {\n        return false;\n    }\n    if (ignoreCase) {\n        var beginsWith = strings_1.startsWithIgnoreCase(path, candidate);\n        if (!beginsWith) {\n            return false;\n        }\n        if (candidate.length === path.length) {\n            return true; // same path, different casing\n        }\n        var sepOffset = candidate.length;\n        if (candidate.charAt(candidate.length - 1) === separator) {\n            sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n        }\n        return path.charAt(sepOffset) === separator;\n    }\n    if (candidate.charAt(candidate.length - 1) !== separator) {\n        candidate += separator;\n    }\n    return path.indexOf(candidate) === 0;\n}\nexports.isEqualOrParent = isEqualOrParent;\nfunction isWindowsDriveLetter(char0) {\n    return char0 >= charCode_1.CharCode.A && char0 <= charCode_1.CharCode.Z || char0 >= charCode_1.CharCode.a && char0 <= charCode_1.CharCode.z;\n}\nexports.isWindowsDriveLetter = isWindowsDriveLetter;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/extpath.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/extpath.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWindows } from 'vs/base/common/platform';\nimport { startsWithIgnoreCase, equalsIgnoreCase } from 'vs/base/common/strings';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { sep, posix } from 'vs/base/common/path';\n\nfunction isPathSeparator(code: number) {\n\treturn code === CharCode.Slash || code === CharCode.Backslash;\n}\n\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\nexport function toSlashes(osPath: string) {\n\treturn osPath.replace(/[\\\\/]/g, posix.sep);\n}\n\n/**\n * Computes the _root_ this path, like `getRoot('c:\\files') === c:\\`,\n * `getRoot('files:///files/path') === files:///`,\n * or `getRoot('\\\\server\\shares\\path') === \\\\server\\shares\\`\n */\nexport function getRoot(path: string, sep: string = posix.sep): string {\n\n\tif (!path) {\n\t\treturn '';\n\t}\n\n\tconst len = path.length;\n\tconst firstLetter = path.charCodeAt(0);\n\tif (isPathSeparator(firstLetter)) {\n\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t// UNC candidate \\\\localhost\\shares\\ddd\n\t\t\t//               ^^^^^^^^^^^^^^^^^^^\n\t\t\tif (!isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\tlet pos = 3;\n\t\t\t\tconst start = pos;\n\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {\n\t\t\t\t\tpos += 1;\n\t\t\t\t\tfor (; pos < len; pos++) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\t\t\t\treturn path.slice(0, pos + 1) // consume this separator\n\t\t\t\t\t\t\t\t.replace(/[\\\\/]/g, sep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// /user/far\n\t\t// ^\n\t\treturn sep;\n\n\t} else if (isWindowsDriveLetter(firstLetter)) {\n\t\t// check for windows drive letter c:\\ or c:\n\n\t\tif (path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t// C:\\fff\n\t\t\t\t// ^^^\n\t\t\t\treturn path.slice(0, 2) + sep;\n\t\t\t} else {\n\t\t\t\t// C:\n\t\t\t\t// ^^\n\t\t\t\treturn path.slice(0, 2);\n\t\t\t}\n\t\t}\n\t}\n\n\t// check for URI\n\t// scheme://authority/path\n\t// ^^^^^^^^^^^^^^^^^^^\n\tlet pos = path.indexOf('://');\n\tif (pos !== -1) {\n\t\tpos += 3; // 3 -> \"://\".length\n\t\tfor (; pos < len; pos++) {\n\t\t\tif (isPathSeparator(path.charCodeAt(pos))) {\n\t\t\t\treturn path.slice(0, pos + 1); // consume this separator\n\t\t\t}\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if the path follows this pattern: `\\\\hostname\\sharename`.\n *\n * @see https://msdn.microsoft.com/en-us/library/gg465305.aspx\n * @return A boolean indication if the path is a UNC path, on none-windows\n * always false.\n */\nexport function isUNC(path: string): boolean {\n\tif (!isWindows) {\n\t\t// UNC is a windows concept\n\t\treturn false;\n\t}\n\n\tif (!path || path.length < 5) {\n\t\t// at least \\\\a\\b\n\t\treturn false;\n\t}\n\n\tlet code = path.charCodeAt(0);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(1);\n\tif (code !== CharCode.Backslash) {\n\t\treturn false;\n\t}\n\tlet pos = 2;\n\tconst start = pos;\n\tfor (; pos < path.length; pos++) {\n\t\tcode = path.charCodeAt(pos);\n\t\tif (code === CharCode.Backslash) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (start === pos) {\n\t\treturn false;\n\t}\n\tcode = path.charCodeAt(pos + 1);\n\tif (isNaN(code) || code === CharCode.Backslash) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n// Reference: https://en.wikipedia.org/wiki/Filename\nconst INVALID_FILE_CHARS = isWindows ? /[\\\\/:\\*\\?\"<>\\|]/g : /[\\\\/]/g;\nconst WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\\$|nul|lpt[0-9]|com[0-9])$/i;\nexport function isValidBasename(name: string | null | undefined): boolean {\n\tif (!name || name.length === 0 || /^\\s+$/.test(name)) {\n\t\treturn false; // require a name that is not just whitespace\n\t}\n\n\tINVALID_FILE_CHARS.lastIndex = 0; // the holy grail of software development\n\tif (INVALID_FILE_CHARS.test(name)) {\n\t\treturn false; // check for certain invalid file characters\n\t}\n\n\tif (isWindows && WINDOWS_FORBIDDEN_NAMES.test(name)) {\n\t\treturn false; // check for certain invalid file names\n\t}\n\n\tif (name === '.' || name === '..') {\n\t\treturn false; // check for reserved values\n\t}\n\n\tif (isWindows && name[name.length - 1] === '.') {\n\t\treturn false; // Windows: file cannot end with a \".\"\n\t}\n\n\tif (isWindows && name.length !== name.trim().length) {\n\t\treturn false; // Windows: file cannot end with a whitespace\n\t}\n\n\tif (name.length > 255) {\n\t\treturn false; // most file systems do not allow files > 255 lenth\n\t}\n\n\treturn true;\n}\n\nexport function isEqual(pathA: string, pathB: string, ignoreCase?: boolean): boolean {\n\tconst identityEquals = (pathA === pathB);\n\tif (!ignoreCase || identityEquals) {\n\t\treturn identityEquals;\n\t}\n\n\tif (!pathA || !pathB) {\n\t\treturn false;\n\t}\n\n\treturn equalsIgnoreCase(pathA, pathB);\n}\n\nexport function isEqualOrParent(path: string, candidate: string, ignoreCase?: boolean, separator = sep): boolean {\n\tif (path === candidate) {\n\t\treturn true;\n\t}\n\n\tif (!path || !candidate) {\n\t\treturn false;\n\t}\n\n\tif (candidate.length > path.length) {\n\t\treturn false;\n\t}\n\n\tif (ignoreCase) {\n\t\tconst beginsWith = startsWithIgnoreCase(path, candidate);\n\t\tif (!beginsWith) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (candidate.length === path.length) {\n\t\t\treturn true; // same path, different casing\n\t\t}\n\n\t\tlet sepOffset = candidate.length;\n\t\tif (candidate.charAt(candidate.length - 1) === separator) {\n\t\t\tsepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n\t\t}\n\n\t\treturn path.charAt(sepOffset) === separator;\n\t}\n\n\tif (candidate.charAt(candidate.length - 1) !== separator) {\n\t\tcandidate += separator;\n\t}\n\n\treturn path.indexOf(candidate) === 0;\n}\n\nexport function isWindowsDriveLetter(char0: number): boolean {\n\treturn char0 >= CharCode.A && char0 <= CharCode.Z || char0 >= CharCode.a && char0 <= CharCode.z;\n}"]}]}