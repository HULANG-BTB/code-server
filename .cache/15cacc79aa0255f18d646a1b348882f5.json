{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/charCode\", \"vs/base/common/keyCodes\", \"vs/base/common/keybindingLabels\", \"vs/base/common/platform\", \"vs/base/common/scanCode\", \"vs/platform/keybinding/common/baseResolvedKeybinding\", \"vs/platform/keybinding/common/resolvedKeybindingItem\"], function (require, exports, charCode_1, keyCodes_1, keybindingLabels_1, platform_1, scanCode_1, baseResolvedKeybinding_1, resolvedKeybindingItem_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function windowsKeyMappingEquals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.vkey === b.vkey\n            && a.value === b.value\n            && a.withShift === b.withShift\n            && a.withAltGr === b.withAltGr\n            && a.withShiftAltGr === b.withShiftAltGr);\n    }\n    function windowsKeyboardMappingEquals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        for (let scanCode = 0; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n            const strScanCode = scanCode_1.ScanCodeUtils.toString(scanCode);\n            const aEntry = a[strScanCode];\n            const bEntry = b[strScanCode];\n            if (!windowsKeyMappingEquals(aEntry, bEntry)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    exports.windowsKeyboardMappingEquals = windowsKeyboardMappingEquals;\n    const LOG = false;\n    function log(str) {\n        if (LOG) {\n            console.info(str);\n        }\n    }\n    const NATIVE_KEY_CODE_TO_KEY_CODE = _getNativeMap();\n    class WindowsNativeResolvedKeybinding extends baseResolvedKeybinding_1.BaseResolvedKeybinding {\n        constructor(mapper, parts) {\n            super(platform_1.OperatingSystem.Windows, parts);\n            this._mapper = mapper;\n        }\n        _getLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            return this._mapper.getUILabelForKeyCode(keybinding.keyCode);\n        }\n        _getUSLabelForKeybinding(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            return keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n        }\n        getUSLabel() {\n            return keybindingLabels_1.UILabelProvider.toLabel(this._os, this._parts, (keybinding) => this._getUSLabelForKeybinding(keybinding));\n        }\n        _getAriaLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            return this._mapper.getAriaLabelForKeyCode(keybinding.keyCode);\n        }\n        _keyCodeToElectronAccelerator(keyCode) {\n            if (keyCode >= keyCodes_1.KeyCode.NUMPAD_0 && keyCode <= keyCodes_1.KeyCode.NUMPAD_DIVIDE) {\n                // Electron cannot handle numpad keys\n                return null;\n            }\n            switch (keyCode) {\n                case keyCodes_1.KeyCode.UpArrow:\n                    return 'Up';\n                case keyCodes_1.KeyCode.DownArrow:\n                    return 'Down';\n                case keyCodes_1.KeyCode.LeftArrow:\n                    return 'Left';\n                case keyCodes_1.KeyCode.RightArrow:\n                    return 'Right';\n            }\n            // electron menus always do the correct rendering on Windows\n            return keyCodes_1.KeyCodeUtils.toString(keyCode);\n        }\n        _getElectronAccelerator(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return null;\n            }\n            return this._keyCodeToElectronAccelerator(keybinding.keyCode);\n        }\n        _getUserSettingsLabel(keybinding) {\n            if (keybinding.isDuplicateModifierCase()) {\n                return '';\n            }\n            const result = this._mapper.getUserSettingsLabelForKeyCode(keybinding.keyCode);\n            return (result ? result.toLowerCase() : result);\n        }\n        _isWYSIWYG(keybinding) {\n            return this.__isWYSIWYG(keybinding.keyCode);\n        }\n        __isWYSIWYG(keyCode) {\n            if (keyCode === keyCodes_1.KeyCode.LeftArrow\n                || keyCode === keyCodes_1.KeyCode.UpArrow\n                || keyCode === keyCodes_1.KeyCode.RightArrow\n                || keyCode === keyCodes_1.KeyCode.DownArrow) {\n                return true;\n            }\n            const ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n            const userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n            return (ariaLabel === userSettingsLabel);\n        }\n        _getDispatchPart(keybinding) {\n            if (keybinding.isModifierKey()) {\n                return null;\n            }\n            let result = '';\n            if (keybinding.ctrlKey) {\n                result += 'ctrl+';\n            }\n            if (keybinding.shiftKey) {\n                result += 'shift+';\n            }\n            if (keybinding.altKey) {\n                result += 'alt+';\n            }\n            if (keybinding.metaKey) {\n                result += 'meta+';\n            }\n            result += keyCodes_1.KeyCodeUtils.toString(keybinding.keyCode);\n            return result;\n        }\n        static getProducedCharCode(kb, mapping) {\n            if (!mapping) {\n                return null;\n            }\n            if (kb.ctrlKey && kb.shiftKey && kb.altKey) {\n                return mapping.withShiftAltGr;\n            }\n            if (kb.ctrlKey && kb.altKey) {\n                return mapping.withAltGr;\n            }\n            if (kb.shiftKey) {\n                return mapping.withShift;\n            }\n            return mapping.value;\n        }\n        static getProducedChar(kb, mapping) {\n            const char = this.getProducedCharCode(kb, mapping);\n            if (char === null || char.length === 0) {\n                return ' --- ';\n            }\n            return '  ' + char + '  ';\n        }\n    }\n    exports.WindowsNativeResolvedKeybinding = WindowsNativeResolvedKeybinding;\n    class WindowsKeyboardMapper {\n        constructor(isUSStandard, rawMappings) {\n            this._keyCodeToLabel = [];\n            this.isUSStandard = isUSStandard;\n            this._scanCodeToKeyCode = [];\n            this._keyCodeToLabel = [];\n            this._keyCodeExists = [];\n            this._keyCodeToLabel[keyCodes_1.KeyCode.Unknown] = keyCodes_1.KeyCodeUtils.toString(keyCodes_1.KeyCode.Unknown);\n            for (let scanCode = scanCode_1.ScanCode.None; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n                const immutableKeyCode = scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n                if (immutableKeyCode !== -1) {\n                    this._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n                    this._keyCodeToLabel[immutableKeyCode] = keyCodes_1.KeyCodeUtils.toString(immutableKeyCode);\n                    this._keyCodeExists[immutableKeyCode] = true;\n                }\n            }\n            let producesLetter = [];\n            this._codeInfo = [];\n            for (let strCode in rawMappings) {\n                if (rawMappings.hasOwnProperty(strCode)) {\n                    const scanCode = scanCode_1.ScanCodeUtils.toEnum(strCode);\n                    if (scanCode === scanCode_1.ScanCode.None) {\n                        log(`Unknown scanCode ${strCode} in mapping.`);\n                        continue;\n                    }\n                    const rawMapping = rawMappings[strCode];\n                    const immutableKeyCode = scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n                    if (immutableKeyCode !== -1) {\n                        const keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || keyCodes_1.KeyCode.Unknown;\n                        if (keyCode === keyCodes_1.KeyCode.Unknown || immutableKeyCode === keyCode) {\n                            continue;\n                        }\n                        if (scanCode !== scanCode_1.ScanCode.NumpadComma) {\n                            // Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n                            // e.g. on POR - PTB\n                            continue;\n                        }\n                    }\n                    const value = rawMapping.value;\n                    const withShift = rawMapping.withShift;\n                    const withAltGr = rawMapping.withAltGr;\n                    const withShiftAltGr = rawMapping.withShiftAltGr;\n                    const keyCode = NATIVE_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || keyCodes_1.KeyCode.Unknown;\n                    const mapping = {\n                        scanCode: scanCode,\n                        keyCode: keyCode,\n                        value: value,\n                        withShift: withShift,\n                        withAltGr: withAltGr,\n                        withShiftAltGr: withShiftAltGr,\n                    };\n                    this._codeInfo[scanCode] = mapping;\n                    this._scanCodeToKeyCode[scanCode] = keyCode;\n                    if (keyCode === keyCodes_1.KeyCode.Unknown) {\n                        continue;\n                    }\n                    this._keyCodeExists[keyCode] = true;\n                    if (value.length === 0) {\n                        // This key does not produce strings\n                        this._keyCodeToLabel[keyCode] = null;\n                    }\n                    else if (value.length > 1) {\n                        // This key produces a letter representable with multiple UTF-16 code units.\n                        this._keyCodeToLabel[keyCode] = value;\n                    }\n                    else {\n                        const charCode = value.charCodeAt(0);\n                        if (charCode >= charCode_1.CharCode.a && charCode <= charCode_1.CharCode.z) {\n                            const upperCaseValue = charCode_1.CharCode.A + (charCode - charCode_1.CharCode.a);\n                            producesLetter[upperCaseValue] = true;\n                            this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode_1.CharCode.A + (charCode - charCode_1.CharCode.a));\n                        }\n                        else if (charCode >= charCode_1.CharCode.A && charCode <= charCode_1.CharCode.Z) {\n                            producesLetter[charCode] = true;\n                            this._keyCodeToLabel[keyCode] = value;\n                        }\n                        else {\n                            this._keyCodeToLabel[keyCode] = value;\n                        }\n                    }\n                }\n            }\n            // Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n            const _registerLetterIfMissing = (charCode, keyCode) => {\n                if (!producesLetter[charCode]) {\n                    this._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n                }\n            };\n            _registerLetterIfMissing(charCode_1.CharCode.A, keyCodes_1.KeyCode.KEY_A);\n            _registerLetterIfMissing(charCode_1.CharCode.B, keyCodes_1.KeyCode.KEY_B);\n            _registerLetterIfMissing(charCode_1.CharCode.C, keyCodes_1.KeyCode.KEY_C);\n            _registerLetterIfMissing(charCode_1.CharCode.D, keyCodes_1.KeyCode.KEY_D);\n            _registerLetterIfMissing(charCode_1.CharCode.E, keyCodes_1.KeyCode.KEY_E);\n            _registerLetterIfMissing(charCode_1.CharCode.F, keyCodes_1.KeyCode.KEY_F);\n            _registerLetterIfMissing(charCode_1.CharCode.G, keyCodes_1.KeyCode.KEY_G);\n            _registerLetterIfMissing(charCode_1.CharCode.H, keyCodes_1.KeyCode.KEY_H);\n            _registerLetterIfMissing(charCode_1.CharCode.I, keyCodes_1.KeyCode.KEY_I);\n            _registerLetterIfMissing(charCode_1.CharCode.J, keyCodes_1.KeyCode.KEY_J);\n            _registerLetterIfMissing(charCode_1.CharCode.K, keyCodes_1.KeyCode.KEY_K);\n            _registerLetterIfMissing(charCode_1.CharCode.L, keyCodes_1.KeyCode.KEY_L);\n            _registerLetterIfMissing(charCode_1.CharCode.M, keyCodes_1.KeyCode.KEY_M);\n            _registerLetterIfMissing(charCode_1.CharCode.N, keyCodes_1.KeyCode.KEY_N);\n            _registerLetterIfMissing(charCode_1.CharCode.O, keyCodes_1.KeyCode.KEY_O);\n            _registerLetterIfMissing(charCode_1.CharCode.P, keyCodes_1.KeyCode.KEY_P);\n            _registerLetterIfMissing(charCode_1.CharCode.Q, keyCodes_1.KeyCode.KEY_Q);\n            _registerLetterIfMissing(charCode_1.CharCode.R, keyCodes_1.KeyCode.KEY_R);\n            _registerLetterIfMissing(charCode_1.CharCode.S, keyCodes_1.KeyCode.KEY_S);\n            _registerLetterIfMissing(charCode_1.CharCode.T, keyCodes_1.KeyCode.KEY_T);\n            _registerLetterIfMissing(charCode_1.CharCode.U, keyCodes_1.KeyCode.KEY_U);\n            _registerLetterIfMissing(charCode_1.CharCode.V, keyCodes_1.KeyCode.KEY_V);\n            _registerLetterIfMissing(charCode_1.CharCode.W, keyCodes_1.KeyCode.KEY_W);\n            _registerLetterIfMissing(charCode_1.CharCode.X, keyCodes_1.KeyCode.KEY_X);\n            _registerLetterIfMissing(charCode_1.CharCode.Y, keyCodes_1.KeyCode.KEY_Y);\n            _registerLetterIfMissing(charCode_1.CharCode.Z, keyCodes_1.KeyCode.KEY_Z);\n        }\n        dumpDebugInfo() {\n            let result = [];\n            let immutableSamples = [\n                scanCode_1.ScanCode.ArrowUp,\n                scanCode_1.ScanCode.Numpad0\n            ];\n            let cnt = 0;\n            result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n            for (let scanCode = scanCode_1.ScanCode.None; scanCode < scanCode_1.ScanCode.MAX_VALUE; scanCode++) {\n                if (scanCode_1.IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== -1) {\n                    if (immutableSamples.indexOf(scanCode) === -1) {\n                        continue;\n                    }\n                }\n                if (cnt % 6 === 0) {\n                    result.push(`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`);\n                    result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n                }\n                cnt++;\n                const mapping = this._codeInfo[scanCode];\n                const strCode = scanCode_1.ScanCodeUtils.toString(scanCode);\n                const mods = [0b000, 0b010, 0b101, 0b111];\n                for (const mod of mods) {\n                    const ctrlKey = (mod & 0b001) ? true : false;\n                    const shiftKey = (mod & 0b010) ? true : false;\n                    const altKey = (mod & 0b100) ? true : false;\n                    const scanCodeBinding = new scanCode_1.ScanCodeBinding(ctrlKey, shiftKey, altKey, false, scanCode);\n                    const kb = this._resolveSimpleUserBinding(scanCodeBinding);\n                    const strKeyCode = (kb ? keyCodes_1.KeyCodeUtils.toString(kb.keyCode) : null);\n                    const resolvedKb = (kb ? new WindowsNativeResolvedKeybinding(this, [kb]) : null);\n                    const outScanCode = `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strCode}`;\n                    const ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n                    const outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n                    const outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n                    const outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeBinding, mapping);\n                    const outKb = (strKeyCode ? `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strKeyCode}` : null);\n                    const isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n                    const outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n                    result.push(`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`);\n                }\n                result.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n            }\n            return result.join('\\n');\n        }\n        _leftPad(str, cnt) {\n            if (str === null) {\n                str = 'null';\n            }\n            while (str.length < cnt) {\n                str = ' ' + str;\n            }\n            return str;\n        }\n        getUILabelForKeyCode(keyCode) {\n            return this._getLabelForKeyCode(keyCode);\n        }\n        getAriaLabelForKeyCode(keyCode) {\n            return this._getLabelForKeyCode(keyCode);\n        }\n        getUserSettingsLabelForKeyCode(keyCode) {\n            if (this.isUSStandard) {\n                return keyCodes_1.KeyCodeUtils.toUserSettingsUS(keyCode);\n            }\n            return keyCodes_1.KeyCodeUtils.toUserSettingsGeneral(keyCode);\n        }\n        _getLabelForKeyCode(keyCode) {\n            return this._keyCodeToLabel[keyCode] || keyCodes_1.KeyCodeUtils.toString(keyCodes_1.KeyCode.Unknown);\n        }\n        resolveKeybinding(keybinding) {\n            const parts = keybinding.parts;\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const part = parts[i];\n                if (!this._keyCodeExists[part.keyCode]) {\n                    return [];\n                }\n            }\n            return [new WindowsNativeResolvedKeybinding(this, parts)];\n        }\n        resolveKeyboardEvent(keyboardEvent) {\n            const keybinding = new keyCodes_1.SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n            return new WindowsNativeResolvedKeybinding(this, [keybinding]);\n        }\n        _resolveSimpleUserBinding(binding) {\n            if (!binding) {\n                return null;\n            }\n            if (binding instanceof keyCodes_1.SimpleKeybinding) {\n                if (!this._keyCodeExists[binding.keyCode]) {\n                    return null;\n                }\n                return binding;\n            }\n            const keyCode = this._scanCodeToKeyCode[binding.scanCode] || keyCodes_1.KeyCode.Unknown;\n            if (keyCode === keyCodes_1.KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n                return null;\n            }\n            return new keyCodes_1.SimpleKeybinding(binding.ctrlKey, binding.shiftKey, binding.altKey, binding.metaKey, keyCode);\n        }\n        resolveUserBinding(input) {\n            const parts = resolvedKeybindingItem_1.removeElementsAfterNulls(input.map(keybinding => this._resolveSimpleUserBinding(keybinding)));\n            if (parts.length > 0) {\n                return [new WindowsNativeResolvedKeybinding(this, parts)];\n            }\n            return [];\n        }\n    }\n    exports.WindowsKeyboardMapper = WindowsKeyboardMapper;\n    // See https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n    // See https://github.com/Microsoft/node-native-keymap/blob/master/deps/chromium/keyboard_codes_win.h\n    function _getNativeMap() {\n        return {\n            VK_BACK: keyCodes_1.KeyCode.Backspace,\n            VK_TAB: keyCodes_1.KeyCode.Tab,\n            VK_CLEAR: keyCodes_1.KeyCode.Unknown,\n            VK_RETURN: keyCodes_1.KeyCode.Enter,\n            VK_SHIFT: keyCodes_1.KeyCode.Shift,\n            VK_CONTROL: keyCodes_1.KeyCode.Ctrl,\n            VK_MENU: keyCodes_1.KeyCode.Alt,\n            VK_PAUSE: keyCodes_1.KeyCode.PauseBreak,\n            VK_CAPITAL: keyCodes_1.KeyCode.CapsLock,\n            VK_KANA: keyCodes_1.KeyCode.Unknown,\n            VK_HANGUL: keyCodes_1.KeyCode.Unknown,\n            VK_JUNJA: keyCodes_1.KeyCode.Unknown,\n            VK_FINAL: keyCodes_1.KeyCode.Unknown,\n            VK_HANJA: keyCodes_1.KeyCode.Unknown,\n            VK_KANJI: keyCodes_1.KeyCode.Unknown,\n            VK_ESCAPE: keyCodes_1.KeyCode.Escape,\n            VK_CONVERT: keyCodes_1.KeyCode.Unknown,\n            VK_NONCONVERT: keyCodes_1.KeyCode.Unknown,\n            VK_ACCEPT: keyCodes_1.KeyCode.Unknown,\n            VK_MODECHANGE: keyCodes_1.KeyCode.Unknown,\n            VK_SPACE: keyCodes_1.KeyCode.Space,\n            VK_PRIOR: keyCodes_1.KeyCode.PageUp,\n            VK_NEXT: keyCodes_1.KeyCode.PageDown,\n            VK_END: keyCodes_1.KeyCode.End,\n            VK_HOME: keyCodes_1.KeyCode.Home,\n            VK_LEFT: keyCodes_1.KeyCode.LeftArrow,\n            VK_UP: keyCodes_1.KeyCode.UpArrow,\n            VK_RIGHT: keyCodes_1.KeyCode.RightArrow,\n            VK_DOWN: keyCodes_1.KeyCode.DownArrow,\n            VK_SELECT: keyCodes_1.KeyCode.Unknown,\n            VK_PRINT: keyCodes_1.KeyCode.Unknown,\n            VK_EXECUTE: keyCodes_1.KeyCode.Unknown,\n            VK_SNAPSHOT: keyCodes_1.KeyCode.Unknown,\n            VK_INSERT: keyCodes_1.KeyCode.Insert,\n            VK_DELETE: keyCodes_1.KeyCode.Delete,\n            VK_HELP: keyCodes_1.KeyCode.Unknown,\n            VK_0: keyCodes_1.KeyCode.KEY_0,\n            VK_1: keyCodes_1.KeyCode.KEY_1,\n            VK_2: keyCodes_1.KeyCode.KEY_2,\n            VK_3: keyCodes_1.KeyCode.KEY_3,\n            VK_4: keyCodes_1.KeyCode.KEY_4,\n            VK_5: keyCodes_1.KeyCode.KEY_5,\n            VK_6: keyCodes_1.KeyCode.KEY_6,\n            VK_7: keyCodes_1.KeyCode.KEY_7,\n            VK_8: keyCodes_1.KeyCode.KEY_8,\n            VK_9: keyCodes_1.KeyCode.KEY_9,\n            VK_A: keyCodes_1.KeyCode.KEY_A,\n            VK_B: keyCodes_1.KeyCode.KEY_B,\n            VK_C: keyCodes_1.KeyCode.KEY_C,\n            VK_D: keyCodes_1.KeyCode.KEY_D,\n            VK_E: keyCodes_1.KeyCode.KEY_E,\n            VK_F: keyCodes_1.KeyCode.KEY_F,\n            VK_G: keyCodes_1.KeyCode.KEY_G,\n            VK_H: keyCodes_1.KeyCode.KEY_H,\n            VK_I: keyCodes_1.KeyCode.KEY_I,\n            VK_J: keyCodes_1.KeyCode.KEY_J,\n            VK_K: keyCodes_1.KeyCode.KEY_K,\n            VK_L: keyCodes_1.KeyCode.KEY_L,\n            VK_M: keyCodes_1.KeyCode.KEY_M,\n            VK_N: keyCodes_1.KeyCode.KEY_N,\n            VK_O: keyCodes_1.KeyCode.KEY_O,\n            VK_P: keyCodes_1.KeyCode.KEY_P,\n            VK_Q: keyCodes_1.KeyCode.KEY_Q,\n            VK_R: keyCodes_1.KeyCode.KEY_R,\n            VK_S: keyCodes_1.KeyCode.KEY_S,\n            VK_T: keyCodes_1.KeyCode.KEY_T,\n            VK_U: keyCodes_1.KeyCode.KEY_U,\n            VK_V: keyCodes_1.KeyCode.KEY_V,\n            VK_W: keyCodes_1.KeyCode.KEY_W,\n            VK_X: keyCodes_1.KeyCode.KEY_X,\n            VK_Y: keyCodes_1.KeyCode.KEY_Y,\n            VK_Z: keyCodes_1.KeyCode.KEY_Z,\n            VK_LWIN: keyCodes_1.KeyCode.Meta,\n            VK_COMMAND: keyCodes_1.KeyCode.Meta,\n            VK_RWIN: keyCodes_1.KeyCode.Meta,\n            VK_APPS: keyCodes_1.KeyCode.Unknown,\n            VK_SLEEP: keyCodes_1.KeyCode.Unknown,\n            VK_NUMPAD0: keyCodes_1.KeyCode.NUMPAD_0,\n            VK_NUMPAD1: keyCodes_1.KeyCode.NUMPAD_1,\n            VK_NUMPAD2: keyCodes_1.KeyCode.NUMPAD_2,\n            VK_NUMPAD3: keyCodes_1.KeyCode.NUMPAD_3,\n            VK_NUMPAD4: keyCodes_1.KeyCode.NUMPAD_4,\n            VK_NUMPAD5: keyCodes_1.KeyCode.NUMPAD_5,\n            VK_NUMPAD6: keyCodes_1.KeyCode.NUMPAD_6,\n            VK_NUMPAD7: keyCodes_1.KeyCode.NUMPAD_7,\n            VK_NUMPAD8: keyCodes_1.KeyCode.NUMPAD_8,\n            VK_NUMPAD9: keyCodes_1.KeyCode.NUMPAD_9,\n            VK_MULTIPLY: keyCodes_1.KeyCode.NUMPAD_MULTIPLY,\n            VK_ADD: keyCodes_1.KeyCode.NUMPAD_ADD,\n            VK_SEPARATOR: keyCodes_1.KeyCode.NUMPAD_SEPARATOR,\n            VK_SUBTRACT: keyCodes_1.KeyCode.NUMPAD_SUBTRACT,\n            VK_DECIMAL: keyCodes_1.KeyCode.NUMPAD_DECIMAL,\n            VK_DIVIDE: keyCodes_1.KeyCode.NUMPAD_DIVIDE,\n            VK_F1: keyCodes_1.KeyCode.F1,\n            VK_F2: keyCodes_1.KeyCode.F2,\n            VK_F3: keyCodes_1.KeyCode.F3,\n            VK_F4: keyCodes_1.KeyCode.F4,\n            VK_F5: keyCodes_1.KeyCode.F5,\n            VK_F6: keyCodes_1.KeyCode.F6,\n            VK_F7: keyCodes_1.KeyCode.F7,\n            VK_F8: keyCodes_1.KeyCode.F8,\n            VK_F9: keyCodes_1.KeyCode.F9,\n            VK_F10: keyCodes_1.KeyCode.F10,\n            VK_F11: keyCodes_1.KeyCode.F11,\n            VK_F12: keyCodes_1.KeyCode.F12,\n            VK_F13: keyCodes_1.KeyCode.F13,\n            VK_F14: keyCodes_1.KeyCode.F14,\n            VK_F15: keyCodes_1.KeyCode.F15,\n            VK_F16: keyCodes_1.KeyCode.F16,\n            VK_F17: keyCodes_1.KeyCode.F17,\n            VK_F18: keyCodes_1.KeyCode.F18,\n            VK_F19: keyCodes_1.KeyCode.F19,\n            VK_F20: keyCodes_1.KeyCode.Unknown,\n            VK_F21: keyCodes_1.KeyCode.Unknown,\n            VK_F22: keyCodes_1.KeyCode.Unknown,\n            VK_F23: keyCodes_1.KeyCode.Unknown,\n            VK_F24: keyCodes_1.KeyCode.Unknown,\n            VK_NUMLOCK: keyCodes_1.KeyCode.NumLock,\n            VK_SCROLL: keyCodes_1.KeyCode.ScrollLock,\n            VK_LSHIFT: keyCodes_1.KeyCode.Shift,\n            VK_RSHIFT: keyCodes_1.KeyCode.Shift,\n            VK_LCONTROL: keyCodes_1.KeyCode.Ctrl,\n            VK_RCONTROL: keyCodes_1.KeyCode.Ctrl,\n            VK_LMENU: keyCodes_1.KeyCode.Unknown,\n            VK_RMENU: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_BACK: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_FORWARD: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_REFRESH: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_STOP: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_SEARCH: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_FAVORITES: keyCodes_1.KeyCode.Unknown,\n            VK_BROWSER_HOME: keyCodes_1.KeyCode.Unknown,\n            VK_VOLUME_MUTE: keyCodes_1.KeyCode.Unknown,\n            VK_VOLUME_DOWN: keyCodes_1.KeyCode.Unknown,\n            VK_VOLUME_UP: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_NEXT_TRACK: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_PREV_TRACK: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_STOP: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_PLAY_PAUSE: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_LAUNCH_MAIL: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_LAUNCH_MEDIA_SELECT: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_LAUNCH_APP1: keyCodes_1.KeyCode.Unknown,\n            VK_MEDIA_LAUNCH_APP2: keyCodes_1.KeyCode.Unknown,\n            VK_OEM_1: keyCodes_1.KeyCode.US_SEMICOLON,\n            VK_OEM_PLUS: keyCodes_1.KeyCode.US_EQUAL,\n            VK_OEM_COMMA: keyCodes_1.KeyCode.US_COMMA,\n            VK_OEM_MINUS: keyCodes_1.KeyCode.US_MINUS,\n            VK_OEM_PERIOD: keyCodes_1.KeyCode.US_DOT,\n            VK_OEM_2: keyCodes_1.KeyCode.US_SLASH,\n            VK_OEM_3: keyCodes_1.KeyCode.US_BACKTICK,\n            VK_ABNT_C1: keyCodes_1.KeyCode.ABNT_C1,\n            VK_ABNT_C2: keyCodes_1.KeyCode.ABNT_C2,\n            VK_OEM_4: keyCodes_1.KeyCode.US_OPEN_SQUARE_BRACKET,\n            VK_OEM_5: keyCodes_1.KeyCode.US_BACKSLASH,\n            VK_OEM_6: keyCodes_1.KeyCode.US_CLOSE_SQUARE_BRACKET,\n            VK_OEM_7: keyCodes_1.KeyCode.US_QUOTE,\n            VK_OEM_8: keyCodes_1.KeyCode.OEM_8,\n            VK_OEM_102: keyCodes_1.KeyCode.OEM_102,\n            VK_PROCESSKEY: keyCodes_1.KeyCode.Unknown,\n            VK_PACKET: keyCodes_1.KeyCode.Unknown,\n            VK_DBE_SBCSCHAR: keyCodes_1.KeyCode.Unknown,\n            VK_DBE_DBCSCHAR: keyCodes_1.KeyCode.Unknown,\n            VK_ATTN: keyCodes_1.KeyCode.Unknown,\n            VK_CRSEL: keyCodes_1.KeyCode.Unknown,\n            VK_EXSEL: keyCodes_1.KeyCode.Unknown,\n            VK_EREOF: keyCodes_1.KeyCode.Unknown,\n            VK_PLAY: keyCodes_1.KeyCode.Unknown,\n            VK_ZOOM: keyCodes_1.KeyCode.Unknown,\n            VK_NONAME: keyCodes_1.KeyCode.Unknown,\n            VK_PA1: keyCodes_1.KeyCode.Unknown,\n            VK_OEM_CLEAR: keyCodes_1.KeyCode.Unknown,\n            VK_UNKNOWN: keyCodes_1.KeyCode.Unknown,\n        };\n    }\n});\n",null]}