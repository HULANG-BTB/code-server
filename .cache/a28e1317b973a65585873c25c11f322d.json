{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/client.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/client.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"@coder/ide\", \"@coder/ide/src/fill/client\", \"vs/base/common/severity\", \"vs/platform/notification/common/notification\", \"vs/platform/statusbar/common/statusbar\", \"./fill/paths\", \"./fill/product\", \"vs/platform/actions/common/actions\", \"vs/platform/commands/common/commands\", \"vs/platform/files/common/files\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/editor/common/services/modelService\", \"vs/workbench/contrib/terminal/common/terminal\", \"vs/platform/storage/common/storage\", \"./vscode.scss\"], function (require, exports, ide_1, client_1, severity_1, notification_1, statusbar_1, paths, product_1, actions_1, commands_1, files_1, textfiles_1, modelService_1, terminal_1, storage_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // NOTE: shouldn't import anything from VS Code here or anything that will\n    // depend on a synchronous fill like `os`.\n    class VSClient extends ide_1.IdeClient {\n        initialize() {\n            return this.task(\"Start workbench\", 1000, (data, sharedData) => __awaiter(this, void 0, void 0, function* () {\n                paths._paths.initialize(data, sharedData);\n                product_1.default.initialize(data);\n                process.env.SHELL = data.shell;\n                // At this point everything should be filled, including `os`. `os` also\n                // relies on `initData` but it listens first so it initialize before this\n                // callback, meaning we are safe to include everything from VS Code now.\n                const { workbench } = require(\"./workbench\");\n                yield workbench.initialize();\n                // tslint:disable-next-line:no-any\n                const getService = (id) => workbench.serviceCollection.get(id);\n                window.ide = {\n                    client: client_1.client,\n                    workbench: {\n                        commandRegistry: commands_1.CommandsRegistry,\n                        // tslint:disable-next-line:no-any\n                        menuRegistry: actions_1.MenuRegistry,\n                        // tslint:disable-next-line:no-any\n                        statusbarService: getService(statusbar_1.IStatusbarService),\n                        notificationService: getService(notification_1.INotificationService),\n                        storageService: {\n                            save: () => {\n                                // tslint:disable-next-line:no-any\n                                const storageService = getService(storage_1.IStorageService);\n                                return storageService.close();\n                            },\n                        },\n                        onFileCreate: (cb) => {\n                            getService(files_1.IFileService).onAfterOperation((e) => {\n                                if (e.operation === files_1.FileOperation.CREATE) {\n                                    cb(e.resource.path);\n                                }\n                            });\n                        },\n                        onFileMove: (cb) => {\n                            getService(files_1.IFileService).onAfterOperation((e) => {\n                                if (e.operation === files_1.FileOperation.MOVE) {\n                                    cb(e.resource.path, e.target ? e.target.resource.path : undefined);\n                                }\n                            });\n                        },\n                        onFileDelete: (cb) => {\n                            getService(files_1.IFileService).onAfterOperation((e) => {\n                                if (e.operation === files_1.FileOperation.DELETE) {\n                                    cb(e.resource.path);\n                                }\n                            });\n                        },\n                        onFileSaved: (cb) => {\n                            getService(textfiles_1.ITextFileService).models.onModelSaved((e) => {\n                                cb(e.resource.path);\n                            });\n                        },\n                        onFileCopy: (cb) => {\n                            getService(files_1.IFileService).onAfterOperation((e) => {\n                                if (e.operation === files_1.FileOperation.COPY) {\n                                    cb(e.resource.path, e.target ? e.target.resource.path : undefined);\n                                }\n                            });\n                        },\n                        onModelAdded: (cb) => {\n                            getService(modelService_1.IModelService).onModelAdded((e) => {\n                                cb(e.uri.path, e.getLanguageIdentifier().language);\n                            });\n                        },\n                        onModelRemoved: (cb) => {\n                            getService(modelService_1.IModelService).onModelRemoved((e) => {\n                                cb(e.uri.path, e.getLanguageIdentifier().language);\n                            });\n                        },\n                        onModelLanguageChange: (cb) => {\n                            getService(modelService_1.IModelService).onModelModeChanged((e) => {\n                                cb(e.model.uri.path, e.model.getLanguageIdentifier().language, e.oldModeId);\n                            });\n                        },\n                        onTerminalAdded: (cb) => {\n                            getService(terminal_1.ITerminalService).onInstanceCreated(() => cb());\n                        },\n                        onTerminalRemoved: (cb) => {\n                            getService(terminal_1.ITerminalService).onInstanceDisposed(() => cb());\n                        },\n                    },\n                    // @ts-ignore\n                    // tslint:disable-next-line:no-any\n                    MenuId: actions_1.MenuId,\n                    // tslint:disable-next-line:no-any\n                    Severity: severity_1.default,\n                    // @ts-ignore\n                    // tslint:disable-next-line:no-any\n                    StatusbarAlignment: statusbar_1.StatusbarAlignment,\n                };\n                const event = new CustomEvent(\"ide-ready\");\n                // tslint:disable-next-line:no-any\n                event.ide = window.ide;\n                window.dispatchEvent(event);\n            }), this.initData, this.sharedProcessData);\n        }\n    }\n    exports.client = new VSClient();\n});\n",null]}