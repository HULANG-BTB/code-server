{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/lifecycle\", \"vs/base/parts/ipc/common/ipc\", \"vs/platform/environment/common/environment\", \"vs/platform/remote/common/remoteAgentConnection\", \"vs/workbench/services/remote/common/remoteAgentService\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/workbench/common/contributions\", \"vs/platform/registry/common/platform\", \"vs/workbench/services/remote/common/remoteAgentEnvironmentChannel\", \"vs/platform/notification/common/notification\"], function (require, exports, nls, lifecycle_1, ipc_1, environment_1, remoteAgentConnection_1, remoteAgentService_1, lifecycle_2, contributions_1, platform_1, remoteAgentEnvironmentChannel_1, notification_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let AbstractRemoteAgentService = class AbstractRemoteAgentService extends lifecycle_1.Disposable {\n        constructor(_environmentService) {\n            super();\n            this._environmentService = _environmentService;\n        }\n        getEnvironment(bail) {\n            if (!this._environment) {\n                const connection = this.getConnection();\n                if (connection) {\n                    const client = new remoteAgentEnvironmentChannel_1.RemoteExtensionEnvironmentChannelClient(connection.getChannel('remoteextensionsenvironment'));\n                    this._environment = client.getEnvironmentData(connection.remoteAuthority, this._environmentService.extensionDevelopmentLocationURI);\n                }\n                else {\n                    this._environment = Promise.resolve(null);\n                }\n            }\n            return bail ? this._environment : this._environment.then(undefined, () => null);\n        }\n    };\n    AbstractRemoteAgentService = __decorate([\n        __param(0, environment_1.IEnvironmentService)\n    ], AbstractRemoteAgentService);\n    exports.AbstractRemoteAgentService = AbstractRemoteAgentService;\n    class RemoteAgentConnection extends lifecycle_1.Disposable {\n        constructor(remoteAuthority, _commit, _webSocketFactory, _environmentService, _remoteAuthorityResolverService) {\n            super();\n            this._commit = _commit;\n            this._webSocketFactory = _webSocketFactory;\n            this._environmentService = _environmentService;\n            this._remoteAuthorityResolverService = _remoteAuthorityResolverService;\n            this.remoteAuthority = remoteAuthority;\n            this._connection = null;\n        }\n        getChannel(channelName) {\n            return ipc_1.getDelayedChannel(this._getOrCreateConnection().then(c => c.getChannel(channelName)));\n        }\n        registerChannel(channelName, channel) {\n            this._getOrCreateConnection().then(client => client.registerChannel(channelName, channel));\n        }\n        _getOrCreateConnection() {\n            if (!this._connection) {\n                this._connection = this._createConnection();\n            }\n            return this._connection;\n        }\n        _createConnection() {\n            return __awaiter(this, void 0, void 0, function* () {\n                const options = {\n                    isBuilt: this._environmentService.isBuilt,\n                    commit: this._commit,\n                    webSocketFactory: this._webSocketFactory,\n                    addressProvider: {\n                        getAddress: () => __awaiter(this, void 0, void 0, function* () {\n                            const { host, port } = yield this._remoteAuthorityResolverService.resolveAuthority(this.remoteAuthority);\n                            return { host, port };\n                        })\n                    }\n                };\n                const connection = yield remoteAgentConnection_1.connectRemoteAgentManagement(options, this.remoteAuthority, `renderer`);\n                this._register(connection);\n                return connection.client;\n            });\n        }\n    }\n    exports.RemoteAgentConnection = RemoteAgentConnection;\n    let RemoteConnectionFailureNotificationContribution = class RemoteConnectionFailureNotificationContribution {\n        constructor(remoteAgentService, notificationService) {\n            // Let's cover the case where connecting to fetch the remote extension info fails\n            remoteAgentService.getEnvironment(true)\n                .then(undefined, err => notificationService.error(nls.localize('connectionError', \"Failed to connect to the remote extension host agent (Error: {0})\", err ? err.message : '')));\n        }\n    };\n    RemoteConnectionFailureNotificationContribution = __decorate([\n        __param(0, remoteAgentService_1.IRemoteAgentService),\n        __param(1, notification_1.INotificationService)\n    ], RemoteConnectionFailureNotificationContribution);\n    const workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, lifecycle_2.LifecyclePhase.Ready);\n});\n",null]}