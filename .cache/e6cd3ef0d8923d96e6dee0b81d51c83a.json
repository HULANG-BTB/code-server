{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/modes.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/types\", \"vs/base/common/uri\", \"vs/editor/common/core/range\", \"vs/editor/common/modes/languageFeatureRegistry\", \"vs/editor/common/modes/tokenizationRegistry\"], function (require, exports, types_1, uri_1, range_1, languageFeatureRegistry_1, tokenizationRegistry_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Open ended enum at runtime\n     * @internal\n     */\n    var LanguageId;\n    (function (LanguageId) {\n        LanguageId[LanguageId[\"Null\"] = 0] = \"Null\";\n        LanguageId[LanguageId[\"PlainText\"] = 1] = \"PlainText\";\n    })(LanguageId = exports.LanguageId || (exports.LanguageId = {}));\n    /**\n     * @internal\n     */\n    class LanguageIdentifier {\n        constructor(language, id) {\n            this.language = language;\n            this.id = id;\n        }\n    }\n    exports.LanguageIdentifier = LanguageIdentifier;\n    /**\n     * A font style. Values are 2^x such that a bit mask can be used.\n     * @internal\n     */\n    var FontStyle;\n    (function (FontStyle) {\n        FontStyle[FontStyle[\"NotSet\"] = -1] = \"NotSet\";\n        FontStyle[FontStyle[\"None\"] = 0] = \"None\";\n        FontStyle[FontStyle[\"Italic\"] = 1] = \"Italic\";\n        FontStyle[FontStyle[\"Bold\"] = 2] = \"Bold\";\n        FontStyle[FontStyle[\"Underline\"] = 4] = \"Underline\";\n    })(FontStyle = exports.FontStyle || (exports.FontStyle = {}));\n    /**\n     * Open ended enum at runtime\n     * @internal\n     */\n    var ColorId;\n    (function (ColorId) {\n        ColorId[ColorId[\"None\"] = 0] = \"None\";\n        ColorId[ColorId[\"DefaultForeground\"] = 1] = \"DefaultForeground\";\n        ColorId[ColorId[\"DefaultBackground\"] = 2] = \"DefaultBackground\";\n    })(ColorId = exports.ColorId || (exports.ColorId = {}));\n    /**\n     * A standard token type. Values are 2^x such that a bit mask can be used.\n     * @internal\n     */\n    var StandardTokenType;\n    (function (StandardTokenType) {\n        StandardTokenType[StandardTokenType[\"Other\"] = 0] = \"Other\";\n        StandardTokenType[StandardTokenType[\"Comment\"] = 1] = \"Comment\";\n        StandardTokenType[StandardTokenType[\"String\"] = 2] = \"String\";\n        StandardTokenType[StandardTokenType[\"RegEx\"] = 4] = \"RegEx\";\n    })(StandardTokenType = exports.StandardTokenType || (exports.StandardTokenType = {}));\n    /**\n     * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n     * The following assumptions have been made:\n     *  - languageId < 256 => needs 8 bits\n     *  - unique color count < 512 => needs 9 bits\n     *\n     * The binary format is:\n     * - -------------------------------------------\n     *     3322 2222 2222 1111 1111 1100 0000 0000\n     *     1098 7654 3210 9876 5432 1098 7654 3210\n     * - -------------------------------------------\n     *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n     *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n     * - -------------------------------------------\n     *  - L = LanguageId (8 bits)\n     *  - T = StandardTokenType (3 bits)\n     *  - F = FontStyle (3 bits)\n     *  - f = foreground color (9 bits)\n     *  - b = background color (9 bits)\n     *\n     * @internal\n     */\n    var MetadataConsts;\n    (function (MetadataConsts) {\n        MetadataConsts[MetadataConsts[\"LANGUAGEID_MASK\"] = 255] = \"LANGUAGEID_MASK\";\n        MetadataConsts[MetadataConsts[\"TOKEN_TYPE_MASK\"] = 1792] = \"TOKEN_TYPE_MASK\";\n        MetadataConsts[MetadataConsts[\"FONT_STYLE_MASK\"] = 14336] = \"FONT_STYLE_MASK\";\n        MetadataConsts[MetadataConsts[\"FOREGROUND_MASK\"] = 8372224] = \"FOREGROUND_MASK\";\n        MetadataConsts[MetadataConsts[\"BACKGROUND_MASK\"] = 4286578688] = \"BACKGROUND_MASK\";\n        MetadataConsts[MetadataConsts[\"LANGUAGEID_OFFSET\"] = 0] = \"LANGUAGEID_OFFSET\";\n        MetadataConsts[MetadataConsts[\"TOKEN_TYPE_OFFSET\"] = 8] = \"TOKEN_TYPE_OFFSET\";\n        MetadataConsts[MetadataConsts[\"FONT_STYLE_OFFSET\"] = 11] = \"FONT_STYLE_OFFSET\";\n        MetadataConsts[MetadataConsts[\"FOREGROUND_OFFSET\"] = 14] = \"FOREGROUND_OFFSET\";\n        MetadataConsts[MetadataConsts[\"BACKGROUND_OFFSET\"] = 23] = \"BACKGROUND_OFFSET\";\n    })(MetadataConsts = exports.MetadataConsts || (exports.MetadataConsts = {}));\n    /**\n     * @internal\n     */\n    class TokenMetadata {\n        static getLanguageId(metadata) {\n            return (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n        }\n        static getTokenType(metadata) {\n            return (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n        }\n        static getFontStyle(metadata) {\n            return (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n        }\n        static getForeground(metadata) {\n            return (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n        }\n        static getBackground(metadata) {\n            return (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n        }\n        static getClassNameFromMetadata(metadata) {\n            let foreground = this.getForeground(metadata);\n            let className = 'mtk' + foreground;\n            let fontStyle = this.getFontStyle(metadata);\n            if (fontStyle & FontStyle.Italic) {\n                className += ' mtki';\n            }\n            if (fontStyle & FontStyle.Bold) {\n                className += ' mtkb';\n            }\n            if (fontStyle & FontStyle.Underline) {\n                className += ' mtku';\n            }\n            return className;\n        }\n        static getInlineStyleFromMetadata(metadata, colorMap) {\n            const foreground = this.getForeground(metadata);\n            const fontStyle = this.getFontStyle(metadata);\n            let result = `color: ${colorMap[foreground]};`;\n            if (fontStyle & FontStyle.Italic) {\n                result += 'font-style: italic;';\n            }\n            if (fontStyle & FontStyle.Bold) {\n                result += 'font-weight: bold;';\n            }\n            if (fontStyle & FontStyle.Underline) {\n                result += 'text-decoration: underline;';\n            }\n            return result;\n        }\n    }\n    exports.TokenMetadata = TokenMetadata;\n    var CompletionItemKind;\n    (function (CompletionItemKind) {\n        CompletionItemKind[CompletionItemKind[\"Method\"] = 0] = \"Method\";\n        CompletionItemKind[CompletionItemKind[\"Function\"] = 1] = \"Function\";\n        CompletionItemKind[CompletionItemKind[\"Constructor\"] = 2] = \"Constructor\";\n        CompletionItemKind[CompletionItemKind[\"Field\"] = 3] = \"Field\";\n        CompletionItemKind[CompletionItemKind[\"Variable\"] = 4] = \"Variable\";\n        CompletionItemKind[CompletionItemKind[\"Class\"] = 5] = \"Class\";\n        CompletionItemKind[CompletionItemKind[\"Struct\"] = 6] = \"Struct\";\n        CompletionItemKind[CompletionItemKind[\"Interface\"] = 7] = \"Interface\";\n        CompletionItemKind[CompletionItemKind[\"Module\"] = 8] = \"Module\";\n        CompletionItemKind[CompletionItemKind[\"Property\"] = 9] = \"Property\";\n        CompletionItemKind[CompletionItemKind[\"Event\"] = 10] = \"Event\";\n        CompletionItemKind[CompletionItemKind[\"Operator\"] = 11] = \"Operator\";\n        CompletionItemKind[CompletionItemKind[\"Unit\"] = 12] = \"Unit\";\n        CompletionItemKind[CompletionItemKind[\"Value\"] = 13] = \"Value\";\n        CompletionItemKind[CompletionItemKind[\"Constant\"] = 14] = \"Constant\";\n        CompletionItemKind[CompletionItemKind[\"Enum\"] = 15] = \"Enum\";\n        CompletionItemKind[CompletionItemKind[\"EnumMember\"] = 16] = \"EnumMember\";\n        CompletionItemKind[CompletionItemKind[\"Keyword\"] = 17] = \"Keyword\";\n        CompletionItemKind[CompletionItemKind[\"Text\"] = 18] = \"Text\";\n        CompletionItemKind[CompletionItemKind[\"Color\"] = 19] = \"Color\";\n        CompletionItemKind[CompletionItemKind[\"File\"] = 20] = \"File\";\n        CompletionItemKind[CompletionItemKind[\"Reference\"] = 21] = \"Reference\";\n        CompletionItemKind[CompletionItemKind[\"Customcolor\"] = 22] = \"Customcolor\";\n        CompletionItemKind[CompletionItemKind[\"Folder\"] = 23] = \"Folder\";\n        CompletionItemKind[CompletionItemKind[\"TypeParameter\"] = 24] = \"TypeParameter\";\n        CompletionItemKind[CompletionItemKind[\"Snippet\"] = 25] = \"Snippet\";\n    })(CompletionItemKind = exports.CompletionItemKind || (exports.CompletionItemKind = {}));\n    /**\n     * @internal\n     */\n    exports.completionKindToCssClass = (function () {\n        let data = Object.create(null);\n        data[CompletionItemKind.Method] = 'method';\n        data[CompletionItemKind.Function] = 'function';\n        data[CompletionItemKind.Constructor] = 'constructor';\n        data[CompletionItemKind.Field] = 'field';\n        data[CompletionItemKind.Variable] = 'variable';\n        data[CompletionItemKind.Class] = 'class';\n        data[CompletionItemKind.Struct] = 'struct';\n        data[CompletionItemKind.Interface] = 'interface';\n        data[CompletionItemKind.Module] = 'module';\n        data[CompletionItemKind.Property] = 'property';\n        data[CompletionItemKind.Event] = 'event';\n        data[CompletionItemKind.Operator] = 'operator';\n        data[CompletionItemKind.Unit] = 'unit';\n        data[CompletionItemKind.Value] = 'value';\n        data[CompletionItemKind.Constant] = 'constant';\n        data[CompletionItemKind.Enum] = 'enum';\n        data[CompletionItemKind.EnumMember] = 'enum-member';\n        data[CompletionItemKind.Keyword] = 'keyword';\n        data[CompletionItemKind.Snippet] = 'snippet';\n        data[CompletionItemKind.Text] = 'text';\n        data[CompletionItemKind.Color] = 'color';\n        data[CompletionItemKind.File] = 'file';\n        data[CompletionItemKind.Reference] = 'reference';\n        data[CompletionItemKind.Customcolor] = 'customcolor';\n        data[CompletionItemKind.Folder] = 'folder';\n        data[CompletionItemKind.TypeParameter] = 'type-parameter';\n        return function (kind) {\n            return data[kind] || 'property';\n        };\n    })();\n    /**\n     * @internal\n     */\n    exports.completionKindFromString = (function () {\n        let data = Object.create(null);\n        data['method'] = CompletionItemKind.Method;\n        data['function'] = CompletionItemKind.Function;\n        data['constructor'] = CompletionItemKind.Constructor;\n        data['field'] = CompletionItemKind.Field;\n        data['variable'] = CompletionItemKind.Variable;\n        data['class'] = CompletionItemKind.Class;\n        data['struct'] = CompletionItemKind.Struct;\n        data['interface'] = CompletionItemKind.Interface;\n        data['module'] = CompletionItemKind.Module;\n        data['property'] = CompletionItemKind.Property;\n        data['event'] = CompletionItemKind.Event;\n        data['operator'] = CompletionItemKind.Operator;\n        data['unit'] = CompletionItemKind.Unit;\n        data['value'] = CompletionItemKind.Value;\n        data['constant'] = CompletionItemKind.Constant;\n        data['enum'] = CompletionItemKind.Enum;\n        data['enum-member'] = CompletionItemKind.EnumMember;\n        data['enumMember'] = CompletionItemKind.EnumMember;\n        data['keyword'] = CompletionItemKind.Keyword;\n        data['snippet'] = CompletionItemKind.Snippet;\n        data['text'] = CompletionItemKind.Text;\n        data['color'] = CompletionItemKind.Color;\n        data['file'] = CompletionItemKind.File;\n        data['reference'] = CompletionItemKind.Reference;\n        data['customcolor'] = CompletionItemKind.Customcolor;\n        data['folder'] = CompletionItemKind.Folder;\n        data['type-parameter'] = CompletionItemKind.TypeParameter;\n        data['typeParameter'] = CompletionItemKind.TypeParameter;\n        return function (value, strict) {\n            let res = data[value];\n            if (typeof res === 'undefined' && !strict) {\n                res = CompletionItemKind.Property;\n            }\n            return res;\n        };\n    })();\n    var CompletionItemInsertTextRule;\n    (function (CompletionItemInsertTextRule) {\n        /**\n         * Adjust whitespace/indentation of multiline insert texts to\n         * match the current line indentation.\n         */\n        CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"KeepWhitespace\"] = 1] = \"KeepWhitespace\";\n        /**\n         * `insertText` is a snippet.\n         */\n        CompletionItemInsertTextRule[CompletionItemInsertTextRule[\"InsertAsSnippet\"] = 4] = \"InsertAsSnippet\";\n    })(CompletionItemInsertTextRule = exports.CompletionItemInsertTextRule || (exports.CompletionItemInsertTextRule = {}));\n    /**\n     * How a suggest provider was triggered.\n     */\n    var CompletionTriggerKind;\n    (function (CompletionTriggerKind) {\n        CompletionTriggerKind[CompletionTriggerKind[\"Invoke\"] = 0] = \"Invoke\";\n        CompletionTriggerKind[CompletionTriggerKind[\"TriggerCharacter\"] = 1] = \"TriggerCharacter\";\n        CompletionTriggerKind[CompletionTriggerKind[\"TriggerForIncompleteCompletions\"] = 2] = \"TriggerForIncompleteCompletions\";\n    })(CompletionTriggerKind = exports.CompletionTriggerKind || (exports.CompletionTriggerKind = {}));\n    /**\n     * @internal\n     */\n    var CodeActionTrigger;\n    (function (CodeActionTrigger) {\n        CodeActionTrigger[CodeActionTrigger[\"Automatic\"] = 1] = \"Automatic\";\n        CodeActionTrigger[CodeActionTrigger[\"Manual\"] = 2] = \"Manual\";\n    })(CodeActionTrigger = exports.CodeActionTrigger || (exports.CodeActionTrigger = {}));\n    var SignatureHelpTriggerKind;\n    (function (SignatureHelpTriggerKind) {\n        SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"Invoke\"] = 1] = \"Invoke\";\n        SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"TriggerCharacter\"] = 2] = \"TriggerCharacter\";\n        SignatureHelpTriggerKind[SignatureHelpTriggerKind[\"ContentChange\"] = 3] = \"ContentChange\";\n    })(SignatureHelpTriggerKind = exports.SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = {}));\n    /**\n     * A document highlight kind.\n     */\n    var DocumentHighlightKind;\n    (function (DocumentHighlightKind) {\n        /**\n         * A textual occurrence.\n         */\n        DocumentHighlightKind[DocumentHighlightKind[\"Text\"] = 0] = \"Text\";\n        /**\n         * Read-access of a symbol, like reading a variable.\n         */\n        DocumentHighlightKind[DocumentHighlightKind[\"Read\"] = 1] = \"Read\";\n        /**\n         * Write-access of a symbol, like writing to a variable.\n         */\n        DocumentHighlightKind[DocumentHighlightKind[\"Write\"] = 2] = \"Write\";\n    })(DocumentHighlightKind = exports.DocumentHighlightKind || (exports.DocumentHighlightKind = {}));\n    /**\n     * @internal\n     */\n    function isLocationLink(thing) {\n        return thing\n            && uri_1.URI.isUri(thing.uri)\n            && range_1.Range.isIRange(thing.range)\n            && (range_1.Range.isIRange(thing.originSelectionRange) || range_1.Range.isIRange(thing.targetSelectionRange));\n    }\n    exports.isLocationLink = isLocationLink;\n    /**\n     * A symbol kind.\n     */\n    var SymbolKind;\n    (function (SymbolKind) {\n        SymbolKind[SymbolKind[\"File\"] = 0] = \"File\";\n        SymbolKind[SymbolKind[\"Module\"] = 1] = \"Module\";\n        SymbolKind[SymbolKind[\"Namespace\"] = 2] = \"Namespace\";\n        SymbolKind[SymbolKind[\"Package\"] = 3] = \"Package\";\n        SymbolKind[SymbolKind[\"Class\"] = 4] = \"Class\";\n        SymbolKind[SymbolKind[\"Method\"] = 5] = \"Method\";\n        SymbolKind[SymbolKind[\"Property\"] = 6] = \"Property\";\n        SymbolKind[SymbolKind[\"Field\"] = 7] = \"Field\";\n        SymbolKind[SymbolKind[\"Constructor\"] = 8] = \"Constructor\";\n        SymbolKind[SymbolKind[\"Enum\"] = 9] = \"Enum\";\n        SymbolKind[SymbolKind[\"Interface\"] = 10] = \"Interface\";\n        SymbolKind[SymbolKind[\"Function\"] = 11] = \"Function\";\n        SymbolKind[SymbolKind[\"Variable\"] = 12] = \"Variable\";\n        SymbolKind[SymbolKind[\"Constant\"] = 13] = \"Constant\";\n        SymbolKind[SymbolKind[\"String\"] = 14] = \"String\";\n        SymbolKind[SymbolKind[\"Number\"] = 15] = \"Number\";\n        SymbolKind[SymbolKind[\"Boolean\"] = 16] = \"Boolean\";\n        SymbolKind[SymbolKind[\"Array\"] = 17] = \"Array\";\n        SymbolKind[SymbolKind[\"Object\"] = 18] = \"Object\";\n        SymbolKind[SymbolKind[\"Key\"] = 19] = \"Key\";\n        SymbolKind[SymbolKind[\"Null\"] = 20] = \"Null\";\n        SymbolKind[SymbolKind[\"EnumMember\"] = 21] = \"EnumMember\";\n        SymbolKind[SymbolKind[\"Struct\"] = 22] = \"Struct\";\n        SymbolKind[SymbolKind[\"Event\"] = 23] = \"Event\";\n        SymbolKind[SymbolKind[\"Operator\"] = 24] = \"Operator\";\n        SymbolKind[SymbolKind[\"TypeParameter\"] = 25] = \"TypeParameter\";\n    })(SymbolKind = exports.SymbolKind || (exports.SymbolKind = {}));\n    /**\n     * @internal\n     */\n    exports.symbolKindToCssClass = (function () {\n        const _fromMapping = Object.create(null);\n        _fromMapping[SymbolKind.File] = 'file';\n        _fromMapping[SymbolKind.Module] = 'module';\n        _fromMapping[SymbolKind.Namespace] = 'namespace';\n        _fromMapping[SymbolKind.Package] = 'package';\n        _fromMapping[SymbolKind.Class] = 'class';\n        _fromMapping[SymbolKind.Method] = 'method';\n        _fromMapping[SymbolKind.Property] = 'property';\n        _fromMapping[SymbolKind.Field] = 'field';\n        _fromMapping[SymbolKind.Constructor] = 'constructor';\n        _fromMapping[SymbolKind.Enum] = 'enum';\n        _fromMapping[SymbolKind.Interface] = 'interface';\n        _fromMapping[SymbolKind.Function] = 'function';\n        _fromMapping[SymbolKind.Variable] = 'variable';\n        _fromMapping[SymbolKind.Constant] = 'constant';\n        _fromMapping[SymbolKind.String] = 'string';\n        _fromMapping[SymbolKind.Number] = 'number';\n        _fromMapping[SymbolKind.Boolean] = 'boolean';\n        _fromMapping[SymbolKind.Array] = 'array';\n        _fromMapping[SymbolKind.Object] = 'object';\n        _fromMapping[SymbolKind.Key] = 'key';\n        _fromMapping[SymbolKind.Null] = 'null';\n        _fromMapping[SymbolKind.EnumMember] = 'enum-member';\n        _fromMapping[SymbolKind.Struct] = 'struct';\n        _fromMapping[SymbolKind.Event] = 'event';\n        _fromMapping[SymbolKind.Operator] = 'operator';\n        _fromMapping[SymbolKind.TypeParameter] = 'type-parameter';\n        return function toCssClassName(kind, inline) {\n            return `symbol-icon ${inline ? 'inline' : 'block'} ${_fromMapping[kind] || 'property'}`;\n        };\n    })();\n    class FoldingRangeKind {\n        /**\n         * Creates a new [FoldingRangeKind](#FoldingRangeKind).\n         *\n         * @param value of the kind.\n         */\n        constructor(value) {\n            this.value = value;\n        }\n    }\n    /**\n     * Kind for folding range representing a comment. The value of the kind is 'comment'.\n     */\n    FoldingRangeKind.Comment = new FoldingRangeKind('comment');\n    /**\n     * Kind for folding range representing a import. The value of the kind is 'imports'.\n     */\n    FoldingRangeKind.Imports = new FoldingRangeKind('imports');\n    /**\n     * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n     * The value of the kind is 'region'.\n     */\n    FoldingRangeKind.Region = new FoldingRangeKind('region');\n    exports.FoldingRangeKind = FoldingRangeKind;\n    /**\n     * @internal\n     */\n    function isResourceFileEdit(thing) {\n        return types_1.isObject(thing) && (Boolean(thing.newUri) || Boolean(thing.oldUri));\n    }\n    exports.isResourceFileEdit = isResourceFileEdit;\n    /**\n     * @internal\n     */\n    function isResourceTextEdit(thing) {\n        return types_1.isObject(thing) && thing.resource && Array.isArray(thing.edits);\n    }\n    exports.isResourceTextEdit = isResourceTextEdit;\n    /**\n     * @internal\n     */\n    var DraftMode;\n    (function (DraftMode) {\n        DraftMode[DraftMode[\"NotSupported\"] = 0] = \"NotSupported\";\n        DraftMode[DraftMode[\"InDraft\"] = 1] = \"InDraft\";\n        DraftMode[DraftMode[\"NotInDraft\"] = 2] = \"NotInDraft\";\n    })(DraftMode = exports.DraftMode || (exports.DraftMode = {}));\n    /**\n     * @internal\n     */\n    var CommentThreadCollapsibleState;\n    (function (CommentThreadCollapsibleState) {\n        /**\n         * Determines an item is collapsed\n         */\n        CommentThreadCollapsibleState[CommentThreadCollapsibleState[\"Collapsed\"] = 0] = \"Collapsed\";\n        /**\n         * Determines an item is expanded\n         */\n        CommentThreadCollapsibleState[CommentThreadCollapsibleState[\"Expanded\"] = 1] = \"Expanded\";\n    })(CommentThreadCollapsibleState = exports.CommentThreadCollapsibleState || (exports.CommentThreadCollapsibleState = {}));\n    // --- feature registries ------\n    /**\n     * @internal\n     */\n    exports.ReferenceProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.RenameProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.CompletionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.SignatureHelpProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.HoverProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DocumentSymbolProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DocumentHighlightProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DefinitionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DeclarationProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.ImplementationProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.TypeDefinitionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.CodeLensProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.CodeActionProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DocumentFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.DocumentRangeFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.OnTypeFormattingEditProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.LinkProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.ColorProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.SelectionRangeRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.FoldingRangeProviderRegistry = new languageFeatureRegistry_1.LanguageFeatureRegistry();\n    /**\n     * @internal\n     */\n    exports.TokenizationRegistry = new tokenizationRegistry_1.TokenizationRegistryImpl();\n});\n",null]}