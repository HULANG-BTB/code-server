{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar types_1 = require(\"vs/base/common/types\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar MAX_REPL_LENGTH = 10000;\nvar topReplElementCounter = 0;\nvar ReplModel = /** @class */ (function () {\n    function ReplModel(session) {\n        this.session = session;\n        this.replElements = [];\n    }\n    ReplModel.prototype.getReplElements = function () {\n        return this.replElements;\n    };\n    ReplModel.prototype.addReplExpression = function (stackFrame, name) {\n        var expression = new debugModel_1.Expression(name);\n        this.addReplElement(expression);\n        return expression.evaluate(this.session, stackFrame, 'repl');\n    };\n    ReplModel.prototype.appendToRepl = function (data, sev, source) {\n        var clearAnsiSequence = '\\u001b[2J';\n        if (typeof data === 'string' && data.indexOf(clearAnsiSequence) >= 0) {\n            // [2J is the ansi escape sequence for clearing the display http://ascii-table.com/ansi-escape-sequences.php\n            this.removeReplExpressions();\n            this.appendToRepl(nls.localize('consoleCleared', \"Console was cleared\"), severity_1.default.Ignore);\n            data = data.substr(data.lastIndexOf(clearAnsiSequence) + clearAnsiSequence.length);\n        }\n        if (typeof data === 'string') {\n            var element = new debugModel_1.SimpleReplElement(\"topReplElement:\" + topReplElementCounter++, data.trimRight(), sev, source);\n            this.addReplElement(element);\n        }\n        else {\n            // TODO@Isidor hack, we should introduce a new type which is an output that can fetch children like an expression\n            data.severity = sev;\n            data.sourceData = source;\n            this.addReplElement(data);\n        }\n    };\n    ReplModel.prototype.addReplElement = function (newElement) {\n        this.replElements.push(newElement);\n        if (this.replElements.length > MAX_REPL_LENGTH) {\n            this.replElements.splice(0, this.replElements.length - MAX_REPL_LENGTH);\n        }\n    };\n    ReplModel.prototype.logToRepl = function (sev, args, frame) {\n        var source;\n        if (frame) {\n            source = {\n                column: frame.column,\n                lineNumber: frame.line,\n                source: this.session.getSource({\n                    name: resources_1.basenameOrAuthority(frame.uri),\n                    path: frame.uri.fsPath\n                })\n            };\n        }\n        // add output for each argument logged\n        var simpleVals = [];\n        for (var i = 0; i < args.length; i++) {\n            var a = args[i];\n            // undefined gets printed as 'undefined'\n            if (typeof a === 'undefined') {\n                simpleVals.push('undefined');\n            }\n            // null gets printed as 'null'\n            else if (a === null) {\n                simpleVals.push('null');\n            }\n            // objects & arrays are special because we want to inspect them in the REPL\n            else if (types_1.isObject(a) || Array.isArray(a)) {\n                // flush any existing simple values logged\n                if (simpleVals.length) {\n                    this.appendToRepl(simpleVals.join(' '), sev, source);\n                    simpleVals = [];\n                }\n                // show object\n                this.appendToRepl(new debugModel_1.RawObjectReplElement(\"topReplElement:\" + topReplElementCounter++, a.prototype, a, undefined, nls.localize('snapshotObj', \"Only primitive values are shown for this object.\")), sev, source);\n            }\n            // string: watch out for % replacement directive\n            // string substitution and formatting @ https://developer.chrome.com/devtools/docs/console\n            else if (typeof a === 'string') {\n                var buf = '';\n                for (var j = 0, len = a.length; j < len; j++) {\n                    if (a[j] === '%' && (a[j + 1] === 's' || a[j + 1] === 'i' || a[j + 1] === 'd' || a[j + 1] === 'O')) {\n                        i++; // read over substitution\n                        buf += !types_1.isUndefinedOrNull(args[i]) ? args[i] : ''; // replace\n                        j++; // read over directive\n                    }\n                    else {\n                        buf += a[j];\n                    }\n                }\n                simpleVals.push(buf);\n            }\n            // number or boolean is joined together\n            else {\n                simpleVals.push(a);\n            }\n        }\n        // flush simple values\n        // always append a new line for output coming from an extension such that separate logs go to separate lines #23695\n        if (simpleVals.length) {\n            this.appendToRepl(simpleVals.join(' ') + '\\n', sev, source);\n        }\n    };\n    ReplModel.prototype.removeReplExpressions = function () {\n        if (this.replElements.length > 0) {\n            this.replElements = [];\n        }\n    };\n    return ReplModel;\n}());\nexports.ReplModel = ReplModel;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/common/replModel.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport severity from 'vs/base/common/severity';\nimport { IReplElement, IStackFrame, IExpression, IReplElementSource, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { Expression, SimpleReplElement, RawObjectReplElement } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { isUndefinedOrNull, isObject } from 'vs/base/common/types';\nimport { basenameOrAuthority } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\n\nconst MAX_REPL_LENGTH = 10000;\nlet topReplElementCounter = 0;\n\nexport class ReplModel {\n\tprivate replElements: IReplElement[] = [];\n\n\tconstructor(private session: IDebugSession) { }\n\n\tgetReplElements(): IReplElement[] {\n\t\treturn this.replElements;\n\t}\n\n\taddReplExpression(stackFrame: IStackFrame | undefined, name: string): Promise<void> {\n\t\tconst expression = new Expression(name);\n\t\tthis.addReplElement(expression);\n\t\treturn expression.evaluate(this.session, stackFrame, 'repl');\n\t}\n\n\tappendToRepl(data: string | IExpression, sev: severity, source?: IReplElementSource): void {\n\t\tconst clearAnsiSequence = '\\u001b[2J';\n\t\tif (typeof data === 'string' && data.indexOf(clearAnsiSequence) >= 0) {\n\t\t\t// [2J is the ansi escape sequence for clearing the display http://ascii-table.com/ansi-escape-sequences.php\n\t\t\tthis.removeReplExpressions();\n\t\t\tthis.appendToRepl(nls.localize('consoleCleared', \"Console was cleared\"), severity.Ignore);\n\t\t\tdata = data.substr(data.lastIndexOf(clearAnsiSequence) + clearAnsiSequence.length);\n\t\t}\n\n\t\tif (typeof data === 'string') {\n\t\t\tconst element = new SimpleReplElement(`topReplElement:${topReplElementCounter++}`, data.trimRight(), sev, source);\n\t\t\tthis.addReplElement(element);\n\t\t} else {\n\t\t\t// TODO@Isidor hack, we should introduce a new type which is an output that can fetch children like an expression\n\t\t\t(<any>data).severity = sev;\n\t\t\t(<any>data).sourceData = source;\n\t\t\tthis.addReplElement(data);\n\t\t}\n\t}\n\n\tprivate addReplElement(newElement: IReplElement): void {\n\t\tthis.replElements.push(newElement);\n\t\tif (this.replElements.length > MAX_REPL_LENGTH) {\n\t\t\tthis.replElements.splice(0, this.replElements.length - MAX_REPL_LENGTH);\n\t\t}\n\t}\n\n\tlogToRepl(sev: severity, args: any[], frame?: { uri: URI, line: number, column: number }) {\n\n\t\tlet source: IReplElementSource | undefined;\n\t\tif (frame) {\n\t\t\tsource = {\n\t\t\t\tcolumn: frame.column,\n\t\t\t\tlineNumber: frame.line,\n\t\t\t\tsource: this.session.getSource({\n\t\t\t\t\tname: basenameOrAuthority(frame.uri),\n\t\t\t\t\tpath: frame.uri.fsPath\n\t\t\t\t})\n\t\t\t};\n\t\t}\n\n\t\t// add output for each argument logged\n\t\tlet simpleVals: any[] = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tlet a = args[i];\n\n\t\t\t// undefined gets printed as 'undefined'\n\t\t\tif (typeof a === 'undefined') {\n\t\t\t\tsimpleVals.push('undefined');\n\t\t\t}\n\n\t\t\t// null gets printed as 'null'\n\t\t\telse if (a === null) {\n\t\t\t\tsimpleVals.push('null');\n\t\t\t}\n\n\t\t\t// objects & arrays are special because we want to inspect them in the REPL\n\t\t\telse if (isObject(a) || Array.isArray(a)) {\n\n\t\t\t\t// flush any existing simple values logged\n\t\t\t\tif (simpleVals.length) {\n\t\t\t\t\tthis.appendToRepl(simpleVals.join(' '), sev, source);\n\t\t\t\t\tsimpleVals = [];\n\t\t\t\t}\n\n\t\t\t\t// show object\n\t\t\t\tthis.appendToRepl(new RawObjectReplElement(`topReplElement:${topReplElementCounter++}`, (<any>a).prototype, a, undefined, nls.localize('snapshotObj', \"Only primitive values are shown for this object.\")), sev, source);\n\t\t\t}\n\n\t\t\t// string: watch out for % replacement directive\n\t\t\t// string substitution and formatting @ https://developer.chrome.com/devtools/docs/console\n\t\t\telse if (typeof a === 'string') {\n\t\t\t\tlet buf = '';\n\n\t\t\t\tfor (let j = 0, len = a.length; j < len; j++) {\n\t\t\t\t\tif (a[j] === '%' && (a[j + 1] === 's' || a[j + 1] === 'i' || a[j + 1] === 'd' || a[j + 1] === 'O')) {\n\t\t\t\t\t\ti++; // read over substitution\n\t\t\t\t\t\tbuf += !isUndefinedOrNull(args[i]) ? args[i] : ''; // replace\n\t\t\t\t\t\tj++; // read over directive\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbuf += a[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsimpleVals.push(buf);\n\t\t\t}\n\n\t\t\t// number or boolean is joined together\n\t\t\telse {\n\t\t\t\tsimpleVals.push(a);\n\t\t\t}\n\t\t}\n\n\t\t// flush simple values\n\t\t// always append a new line for output coming from an extension such that separate logs go to separate lines #23695\n\t\tif (simpleVals.length) {\n\t\t\tthis.appendToRepl(simpleVals.join(' ') + '\\n', sev, source);\n\t\t}\n\t}\n\n\tremoveReplExpressions(): void {\n\t\tif (this.replElements.length > 0) {\n\t\t\tthis.replElements = [];\n\t\t}\n\t}\n}\n"]}]}