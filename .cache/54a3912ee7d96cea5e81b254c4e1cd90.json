{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/vscode/src/fill/paste.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/paste.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/actions\", \"vs/workbench/contrib/terminal/common/terminalCommands\", \"vs/workbench/contrib/terminal/common/terminal\", \"vs/workbench/contrib/terminal/browser/terminalActions\", \"vs/workbench/contrib/terminal/browser/terminalInstance\", \"../client\"], function (require, exports, nls, actions_1, terminalCommands_1, terminal_1, actions, instance, client_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const getLabel = (key, enabled) => {\n        return enabled\n            ? nls.localize(key, \"Paste\")\n            : nls.localize(`${key}WithKeybind`, \"Paste (must use keybind)\");\n    };\n    class PasteAction extends actions_1.Action {\n        constructor() {\n            super(\"editor.action.clipboardPasteAction\", getLabel(PasteAction.KEY, client_1.client.clipboard.isEnabled), undefined, client_1.client.clipboard.isEnabled, () => __awaiter(this, void 0, void 0, function* () { return client_1.client.clipboard.paste(); }));\n            client_1.client.clipboard.onPermissionChange((enabled) => {\n                this.label = getLabel(PasteAction.KEY, enabled);\n                this.enabled = enabled;\n            });\n        }\n    }\n    PasteAction.KEY = \"paste\";\n    exports.PasteAction = PasteAction;\n    let TerminalPasteAction = class TerminalPasteAction extends actions_1.Action {\n        constructor(id, label, terminalService) {\n            super(id, label);\n            this.terminalService = terminalService;\n            client_1.client.clipboard.onPermissionChange((enabled) => {\n                this._setLabel(getLabel(TerminalPasteAction.KEY, enabled));\n            });\n            this._setLabel(getLabel(TerminalPasteAction.KEY, client_1.client.clipboard.isEnabled));\n        }\n        run() {\n            const instance = this.terminalService.getActiveOrCreateInstance();\n            if (instance) {\n                // tslint:disable-next-line no-any it will return a promise (see below)\n                return instance.paste();\n            }\n            return Promise.resolve();\n        }\n    };\n    TerminalPasteAction.KEY = \"workbench.action.terminal.paste\";\n    TerminalPasteAction.ID = terminalCommands_1.TERMINAL_COMMAND_ID.PASTE;\n    TerminalPasteAction.LABEL = nls.localize(\"workbench.action.terminal.paste\", \"Paste into Active Terminal\");\n    TerminalPasteAction.SHORT_LABEL = getLabel(TerminalPasteAction.KEY, client_1.client.clipboard.isEnabled);\n    TerminalPasteAction = __decorate([\n        __param(2, terminal_1.ITerminalService)\n    ], TerminalPasteAction);\n    class TerminalInstance extends instance.TerminalInstance {\n        paste() {\n            return __awaiter(this, void 0, void 0, function* () {\n                this.focus();\n                if (client_1.client.clipboard.isEnabled) {\n                    const text = yield client_1.client.clipboard.readText();\n                    this.sendText(text, false);\n                }\n                else {\n                    document.execCommand(\"paste\");\n                }\n            });\n        }\n    }\n    const actionsTarget = actions;\n    // @ts-ignore TODO: don't ignore it.\n    actionsTarget.TerminalPasteAction = TerminalPasteAction;\n    const instanceTarget = instance;\n    instanceTarget.TerminalInstance = TerminalInstance;\n});\n",null]}