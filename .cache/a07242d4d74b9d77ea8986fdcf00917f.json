{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/textDiffEditorModel.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/workbench/common/editor/diffEditorModel\"], function (require, exports, diffEditorModel_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * The base text editor model for the diff editor. It is made up of two text editor models, the original version\n     * and the modified version.\n     */\n    class TextDiffEditorModel extends diffEditorModel_1.DiffEditorModel {\n        constructor(originalModel, modifiedModel) {\n            super(originalModel, modifiedModel);\n            this.updateTextDiffEditorModel();\n        }\n        get originalModel() {\n            return this._originalModel;\n        }\n        get modifiedModel() {\n            return this._modifiedModel;\n        }\n        load() {\n            return super.load().then(() => {\n                this.updateTextDiffEditorModel();\n                return this;\n            });\n        }\n        updateTextDiffEditorModel() {\n            if (this.originalModel.isResolved() && this.modifiedModel.isResolved()) {\n                // Create new\n                if (!this._textDiffEditorModel) {\n                    this._textDiffEditorModel = {\n                        original: this.originalModel.textEditorModel,\n                        modified: this.modifiedModel.textEditorModel\n                    };\n                }\n                // Update existing\n                else {\n                    this._textDiffEditorModel.original = this.originalModel.textEditorModel;\n                    this._textDiffEditorModel.modified = this.modifiedModel.textEditorModel;\n                }\n            }\n        }\n        get textDiffEditorModel() {\n            return this._textDiffEditorModel;\n        }\n        isResolved() {\n            return !!this._textDiffEditorModel;\n        }\n        isReadonly() {\n            return this.modifiedModel.isReadonly();\n        }\n        dispose() {\n            // Free the diff editor model but do not propagate the dispose() call to the two models\n            // inside. We never created the two models (original and modified) so we can not dispose\n            // them without sideeffects. Rather rely on the models getting disposed when their related\n            // inputs get disposed from the diffEditorInput.\n            this._textDiffEditorModel = null;\n            super.dispose();\n        }\n    }\n    exports.TextDiffEditorModel = TextDiffEditorModel;\n});\n",null]}