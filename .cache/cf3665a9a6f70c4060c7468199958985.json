{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/repl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/repl.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!vs/workbench/contrib/debug/browser/media/repl\");\nvar nls = require(\"vs/nls\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar errors = require(\"vs/base/common/errors\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar dom = require(\"vs/base/browser/dom\");\nvar aria = require(\"vs/base/browser/ui/aria/aria\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar suggestController_1 = require(\"vs/editor/contrib/suggest/suggestController\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar codeEditorWidget_1 = require(\"vs/editor/browser/widget/codeEditorWidget\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar history_1 = require(\"vs/base/common/history\");\nvar contextScopedHistoryWidget_1 = require(\"vs/platform/browser/contextScopedHistoryWidget\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar simpleEditorOptions_1 = require(\"vs/workbench/contrib/codeEditor/browser/simpleEditorOptions\");\nvar colorRegistry_1 = require(\"vs/platform/theme/common/colorRegistry\");\nvar codeEditorService_1 = require(\"vs/editor/browser/services/codeEditorService\");\nvar debugActionItems_1 = require(\"vs/workbench/contrib/debug/browser/debugActionItems\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar baseDebugView_1 = require(\"vs/workbench/contrib/debug/browser/baseDebugView\");\nvar debugANSIHandling_1 = require(\"vs/workbench/contrib/debug/browser/debugANSIHandling\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar linkDetector_1 = require(\"vs/workbench/contrib/debug/browser/linkDetector\");\nvar actionbar_1 = require(\"vs/base/browser/ui/actionbar/actionbar\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar strings_1 = require(\"vs/base/common/strings\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar async_1 = require(\"vs/base/common/async\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar highlightedLabel_1 = require(\"vs/base/browser/ui/highlightedlabel/highlightedLabel\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar variablesView_1 = require(\"vs/workbench/contrib/debug/browser/variablesView\");\nvar $ = dom.$;\nvar HISTORY_STORAGE_KEY = 'debug.repl.history';\nvar IPrivateReplService = instantiation_1.createDecorator('privateReplService');\nvar DECORATION_KEY = 'replinputdecoration';\nfunction revealLastElement(tree) {\n    tree.scrollTop = tree.scrollHeight - tree.renderHeight;\n}\nvar sessionsToIgnore = new Set();\nvar Repl = /** @class */ (function (_super) {\n    tslib_1.__extends(Repl, _super);\n    function Repl(debugService, telemetryService, instantiationService, storageService, themeService, modelService, contextKeyService, codeEditorService, contextMenuService, configurationService, textResourcePropertiesService, clipboardService) {\n        var _this = _super.call(this, debug_1.REPL_ID, telemetryService, themeService, storageService) || this;\n        _this.debugService = debugService;\n        _this.instantiationService = instantiationService;\n        _this.storageService = storageService;\n        _this.themeService = themeService;\n        _this.modelService = modelService;\n        _this.contextKeyService = contextKeyService;\n        _this.contextMenuService = contextMenuService;\n        _this.configurationService = configurationService;\n        _this.textResourcePropertiesService = textResourcePropertiesService;\n        _this.clipboardService = clipboardService;\n        _this.replInputHeight = Repl.REPL_INPUT_INITIAL_HEIGHT;\n        _this.history = new history_1.HistoryNavigator(JSON.parse(_this.storageService.get(HISTORY_STORAGE_KEY, storage_1.StorageScope.WORKSPACE, '[]')), 50);\n        codeEditorService.registerDecorationType(DECORATION_KEY, {});\n        _this.registerListeners();\n        return _this;\n    }\n    Repl.prototype.registerListeners = function () {\n        var _this = this;\n        this._register(this.debugService.getViewModel().onDidFocusSession(function (session) {\n            if (session) {\n                sessionsToIgnore.delete(session);\n            }\n            _this.selectSession();\n        }));\n        this._register(this.debugService.onWillNewSession(function () {\n            // Need to listen to output events for sessions which are not yet fully initialised\n            var input = _this.tree.getInput();\n            if (!input || input.state === debug_1.State.Inactive) {\n                _this.selectSession();\n            }\n            _this.updateTitleArea();\n        }));\n        this._register(this.themeService.onThemeChange(function () {\n            if (_this.isVisible()) {\n                _this.updateInputDecoration();\n            }\n        }));\n        this._register(this.onDidChangeVisibility(function (visible) {\n            if (!visible) {\n                lifecycle_1.dispose(_this.model);\n            }\n            else {\n                _this.model = _this.modelService.createModel('', null, uri_1.URI.parse(debug_1.DEBUG_SCHEME + \":replinput\"), true);\n                _this.replInput.setModel(_this.model);\n                _this.updateInputDecoration();\n                _this.refreshReplElements(true);\n            }\n        }));\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n            if (e.affectsConfiguration('debug.console.lineHeight') || e.affectsConfiguration('debug.console.fontSize') || e.affectsConfiguration('debug.console.fontFamily')) {\n                _this.onDidFontChange();\n            }\n        }));\n    };\n    Object.defineProperty(Repl.prototype, \"isReadonly\", {\n        get: function () {\n            // Do not allow to edit inactive sessions\n            var session = this.tree.getInput();\n            if (session && session.state !== debug_1.State.Inactive) {\n                return false;\n            }\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Repl.prototype.showPreviousValue = function () {\n        this.navigateHistory(true);\n    };\n    Repl.prototype.showNextValue = function () {\n        this.navigateHistory(false);\n    };\n    Repl.prototype.onDidFontChange = function () {\n        if (this.styleElement) {\n            var debugConsole = this.configurationService.getValue('debug').console;\n            var fontSize = debugConsole.fontSize;\n            var fontFamily = debugConsole.fontFamily === 'default' ? 'var(--monaco-monospace-font)' : debugConsole.fontFamily;\n            var lineHeight = debugConsole.lineHeight ? debugConsole.lineHeight + \"px\" : '1.4em';\n            // Set the font size, font family, line height and align the twistie to be centered\n            this.styleElement.innerHTML = \"\\n\\t\\t\\t\\t.repl .repl-tree .expression {\\n\\t\\t\\t\\t\\tfont-size: \" + fontSize + \"px;\\n\\t\\t\\t\\t\\tfont-family: \" + fontFamily + \";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.repl .repl-tree .expression {\\n\\t\\t\\t\\t\\tline-height: \" + lineHeight + \";\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.repl .repl-tree .monaco-tl-twistie {\\n\\t\\t\\t\\t\\tbackground-position-y: calc(100% - \" + (fontSize * 1.4 / 2 - 8) + \"px);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\";\n            this.tree.rerender();\n        }\n    };\n    Repl.prototype.navigateHistory = function (previous) {\n        var historyInput = previous ? this.history.previous() : this.history.next();\n        if (historyInput) {\n            this.replInput.setValue(historyInput);\n            aria.status(historyInput);\n            // always leave cursor at the end.\n            this.replInput.setPosition({ lineNumber: 1, column: historyInput.length + 1 });\n            this.historyNavigationEnablement.set(true);\n        }\n    };\n    Repl.prototype.selectSession = function (session) {\n        var _this = this;\n        var treeInput = this.tree.getInput();\n        if (!session) {\n            var focusedSession = this.debugService.getViewModel().focusedSession;\n            // If there is a focusedSession focus on that one, otherwise just show any other not ignored session\n            if (focusedSession) {\n                session = focusedSession;\n            }\n            else if (!treeInput || sessionsToIgnore.has(treeInput)) {\n                session = arrays_1.first(this.debugService.getModel().getSessions(true), function (s) { return !sessionsToIgnore.has(s); }) || undefined;\n            }\n        }\n        if (session) {\n            if (this.replElementsChangeListener) {\n                this.replElementsChangeListener.dispose();\n            }\n            this.replElementsChangeListener = session.onDidChangeReplElements(function () {\n                _this.refreshReplElements(session.getReplElements().length === 0);\n            });\n            if (this.tree && treeInput !== session) {\n                this.tree.setInput(session).then(function () { return revealLastElement(_this.tree); }).then(undefined, errors.onUnexpectedError);\n            }\n        }\n        this.replInput.updateOptions({ readOnly: this.isReadonly });\n        this.updateInputDecoration();\n    };\n    Repl.prototype.clearRepl = function () {\n        var session = this.tree.getInput();\n        if (session) {\n            session.removeReplExpressions();\n            if (session.state === debug_1.State.Inactive) {\n                // Ignore inactive sessions which got cleared - so they are not shown any more\n                sessionsToIgnore.add(session);\n                this.selectSession();\n                this.updateTitleArea();\n            }\n        }\n        this.replInput.focus();\n    };\n    Repl.prototype.acceptReplInput = function () {\n        var session = this.tree.getInput();\n        if (session) {\n            session.addReplExpression(this.debugService.getViewModel().focusedStackFrame, this.replInput.getValue());\n            revealLastElement(this.tree);\n            this.history.add(this.replInput.getValue());\n            this.replInput.setValue('');\n            var shouldRelayout = this.replInputHeight > Repl.REPL_INPUT_INITIAL_HEIGHT;\n            this.replInputHeight = Repl.REPL_INPUT_INITIAL_HEIGHT;\n            if (shouldRelayout) {\n                // Trigger a layout to shrink a potential multi line input\n                this.layout(this.dimension);\n            }\n        }\n    };\n    Repl.prototype.getVisibleContent = function () {\n        var text = '';\n        var lineDelimiter = this.textResourcePropertiesService.getEOL(this.model.uri);\n        var traverseAndAppend = function (node) {\n            node.children.forEach(function (child) {\n                text += child.element.toString() + lineDelimiter;\n                if (!child.collapsed && child.children.length) {\n                    traverseAndAppend(child);\n                }\n            });\n        };\n        traverseAndAppend(this.tree.getNode());\n        return strings_1.removeAnsiEscapeCodes(text);\n    };\n    Repl.prototype.layout = function (dimension) {\n        this.dimension = dimension;\n        if (this.tree) {\n            var treeHeight = dimension.height - this.replInputHeight;\n            this.tree.getHTMLElement().style.height = treeHeight + \"px\";\n            this.tree.layout(treeHeight, dimension.width);\n        }\n        this.replInputContainer.style.height = this.replInputHeight + \"px\";\n        this.replInput.layout({ width: dimension.width - 20, height: this.replInputHeight });\n    };\n    Repl.prototype.focus = function () {\n        this.replInput.focus();\n    };\n    Repl.prototype.getActionItem = function (action) {\n        if (action.id === SelectReplAction.ID) {\n            return this.instantiationService.createInstance(SelectReplActionItem, this.selectReplAction);\n        }\n        return undefined;\n    };\n    Repl.prototype.getActions = function () {\n        var _this = this;\n        var result = [];\n        if (this.debugService.getModel().getSessions(true).filter(function (s) { return !sessionsToIgnore.has(s); }).length > 1) {\n            result.push(this.selectReplAction);\n        }\n        result.push(this.clearReplAction);\n        result.forEach(function (a) { return _this._register(a); });\n        return result;\n    };\n    Object.defineProperty(Repl.prototype, \"selectReplAction\", {\n        // --- Cached locals\n        get: function () {\n            return this.scopedInstantiationService.createInstance(SelectReplAction, SelectReplAction.ID, SelectReplAction.LABEL);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Repl.prototype, \"clearReplAction\", {\n        get: function () {\n            return this.scopedInstantiationService.createInstance(ClearReplAction, ClearReplAction.ID, ClearReplAction.LABEL);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Repl.prototype, \"refreshScheduler\", {\n        get: function () {\n            var _this = this;\n            return new async_1.RunOnceScheduler(function () {\n                if (!_this.tree.getInput()) {\n                    return;\n                }\n                var lastElementVisible = _this.tree.scrollTop + _this.tree.renderHeight >= _this.tree.scrollHeight;\n                _this.tree.updateChildren().then(function () {\n                    if (lastElementVisible) {\n                        // Only scroll if we were scrolled all the way down before tree refreshed #10486\n                        revealLastElement(_this.tree);\n                    }\n                }, errors.onUnexpectedError);\n            }, Repl.REFRESH_DELAY);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // --- Creation\n    Repl.prototype.create = function (parent) {\n        var _this = this;\n        _super.prototype.create.call(this, parent);\n        this.container = dom.append(parent, $('.repl'));\n        var treeContainer = dom.append(this.container, $('.repl-tree'));\n        this.createReplInput(this.container);\n        this.replDelegate = new ReplDelegate(this.configurationService);\n        this.tree = this.instantiationService.createInstance(listService_1.WorkbenchAsyncDataTree, treeContainer, this.replDelegate, [\n            this.instantiationService.createInstance(variablesView_1.VariablesRenderer),\n            this.instantiationService.createInstance(ReplSimpleElementsRenderer),\n            new ReplExpressionsRenderer(),\n            new ReplRawObjectsRenderer()\n        ], new ReplDataSource(), {\n            ariaLabel: nls.localize('replAriaLabel', \"Read Eval Print Loop Panel\"),\n            accessibilityProvider: new ReplAccessibilityProvider(),\n            identityProvider: { getId: function (element) { return element.getId(); } },\n            mouseSupport: false,\n            keyboardNavigationLabelProvider: { getKeyboardNavigationLabel: function (e) { return e; } },\n            horizontalScrolling: false,\n            setRowLineHeight: false,\n            supportDynamicHeights: true\n        });\n        this.toDispose.push(this.tree.onContextMenu(function (e) { return _this.onContextMenu(e); }));\n        // Make sure to select the session if debugging is already active\n        this.selectSession();\n        this.styleElement = dom.createStyleSheet(this.container);\n        this.onDidFontChange();\n    };\n    Repl.prototype.createReplInput = function (container) {\n        var _this = this;\n        this.replInputContainer = dom.append(container, $('.repl-input-wrapper'));\n        var _a = contextScopedHistoryWidget_1.createAndBindHistoryNavigationWidgetScopedContextKeyService(this.contextKeyService, { target: this.replInputContainer, historyNavigator: this }), scopedContextKeyService = _a.scopedContextKeyService, historyNavigationEnablement = _a.historyNavigationEnablement;\n        this.historyNavigationEnablement = historyNavigationEnablement;\n        this._register(scopedContextKeyService);\n        debug_1.CONTEXT_IN_DEBUG_REPL.bindTo(scopedContextKeyService).set(true);\n        this.scopedInstantiationService = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([contextkey_1.IContextKeyService, scopedContextKeyService], [IPrivateReplService, this]));\n        var options = simpleEditorOptions_1.getSimpleEditorOptions();\n        options.readOnly = true;\n        this.replInput = this.scopedInstantiationService.createInstance(codeEditorWidget_1.CodeEditorWidget, this.replInputContainer, options, simpleEditorOptions_1.getSimpleCodeEditorWidgetOptions());\n        modes_1.CompletionProviderRegistry.register({ scheme: debug_1.DEBUG_SCHEME, pattern: '**/replinput', hasAccessToAllModels: true }, {\n            triggerCharacters: ['.'],\n            provideCompletionItems: function (model, position, _context, token) {\n                // Disable history navigation because up and down are used to navigate through the suggest widget\n                _this.historyNavigationEnablement.set(false);\n                var focusedSession = _this.debugService.getViewModel().focusedSession;\n                if (focusedSession && focusedSession.capabilities.supportsCompletionsRequest) {\n                    var model_1 = _this.replInput.getModel();\n                    if (model_1) {\n                        var word = model_1.getWordAtPosition(position);\n                        var overwriteBefore = word ? word.word.length : 0;\n                        var text = model_1.getLineContent(position.lineNumber);\n                        var focusedStackFrame = _this.debugService.getViewModel().focusedStackFrame;\n                        var frameId = focusedStackFrame ? focusedStackFrame.frameId : undefined;\n                        return focusedSession.completions(frameId, text, position, overwriteBefore).then(function (suggestions) {\n                            return { suggestions: suggestions };\n                        }, function (err) {\n                            return { suggestions: [] };\n                        });\n                    }\n                }\n                return Promise.resolve({ suggestions: [] });\n            }\n        });\n        this._register(this.replInput.onDidScrollChange(function (e) {\n            if (!e.scrollHeightChanged) {\n                return;\n            }\n            _this.replInputHeight = Math.max(Repl.REPL_INPUT_INITIAL_HEIGHT, Math.min(Repl.REPL_INPUT_MAX_HEIGHT, e.scrollHeight, _this.dimension.height));\n            _this.layout(_this.dimension);\n        }));\n        this._register(this.replInput.onDidChangeModelContent(function () {\n            var model = _this.replInput.getModel();\n            _this.historyNavigationEnablement.set(!!model && model.getValue() === '');\n        }));\n        // We add the input decoration only when the focus is in the input #61126\n        this._register(this.replInput.onDidFocusEditorText(function () { return _this.updateInputDecoration(); }));\n        this._register(this.replInput.onDidBlurEditorText(function () { return _this.updateInputDecoration(); }));\n        this._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.FOCUS, function () { return dom.addClass(_this.replInputContainer, 'synthetic-focus'); }));\n        this._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.BLUR, function () { return dom.removeClass(_this.replInputContainer, 'synthetic-focus'); }));\n    };\n    Repl.prototype.onContextMenu = function (e) {\n        var _this = this;\n        var actions = [];\n        actions.push(new actions_1.Action('debug.replCopy', nls.localize('copy', \"Copy\"), undefined, true, function () {\n            var nativeSelection = window.getSelection();\n            if (nativeSelection) {\n                _this.clipboardService.writeText(nativeSelection.toString());\n            }\n            return Promise.resolve();\n        }));\n        actions.push(new actions_1.Action('workbench.debug.action.copyAll', nls.localize('copyAll', \"Copy All\"), undefined, true, function () {\n            _this.clipboardService.writeText(_this.getVisibleContent());\n            return Promise.resolve(undefined);\n        }));\n        actions.push(new actions_1.Action('debug.collapseRepl', nls.localize('collapse', \"Collapse All\"), undefined, true, function () {\n            _this.tree.collapseAll();\n            _this.replInput.focus();\n            return Promise.resolve();\n        }));\n        actions.push(new actionbar_1.Separator());\n        actions.push(this.clearReplAction);\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return e.anchor; },\n            getActions: function () { return actions; },\n            getActionsContext: function () { return e.element; }\n        });\n    };\n    // --- Update\n    Repl.prototype.refreshReplElements = function (noDelay) {\n        if (this.tree && this.isVisible()) {\n            if (this.refreshScheduler.isScheduled()) {\n                return;\n            }\n            this.refreshScheduler.schedule(noDelay ? 0 : undefined);\n        }\n    };\n    Repl.prototype.updateInputDecoration = function () {\n        if (!this.replInput) {\n            return;\n        }\n        var decorations = [];\n        if (this.isReadonly && this.replInput.hasTextFocus() && !this.replInput.getValue()) {\n            var transparentForeground = colorRegistry_1.transparent(colorRegistry_1.editorForeground, 0.4)(this.themeService.getTheme());\n            decorations.push({\n                range: {\n                    startLineNumber: 0,\n                    endLineNumber: 0,\n                    startColumn: 0,\n                    endColumn: 1\n                },\n                renderOptions: {\n                    after: {\n                        contentText: nls.localize('startDebugFirst', \"Please start a debug session to evaluate expressions\"),\n                        color: transparentForeground ? transparentForeground.toString() : undefined\n                    }\n                }\n            });\n        }\n        this.replInput.setDecorations(DECORATION_KEY, decorations);\n    };\n    Repl.prototype.saveState = function () {\n        var replHistory = this.history.getHistory();\n        if (replHistory.length) {\n            this.storageService.store(HISTORY_STORAGE_KEY, JSON.stringify(replHistory), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(HISTORY_STORAGE_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        _super.prototype.saveState.call(this);\n    };\n    Repl.prototype.dispose = function () {\n        this.replInput.dispose();\n        if (this.replElementsChangeListener) {\n            this.replElementsChangeListener.dispose();\n        }\n        _super.prototype.dispose.call(this);\n    };\n    Repl.REFRESH_DELAY = 100; // delay in ms to refresh the repl for new elements to show\n    Repl.REPL_INPUT_INITIAL_HEIGHT = 19;\n    Repl.REPL_INPUT_MAX_HEIGHT = 170;\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], Repl.prototype, \"selectReplAction\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], Repl.prototype, \"clearReplAction\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], Repl.prototype, \"refreshScheduler\", null);\n    Repl = tslib_1.__decorate([\n        tslib_1.__param(0, debug_1.IDebugService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, themeService_1.IThemeService),\n        tslib_1.__param(5, modelService_1.IModelService),\n        tslib_1.__param(6, contextkey_1.IContextKeyService),\n        tslib_1.__param(7, codeEditorService_1.ICodeEditorService),\n        tslib_1.__param(8, contextView_1.IContextMenuService),\n        tslib_1.__param(9, configuration_1.IConfigurationService),\n        tslib_1.__param(10, resourceConfiguration_1.ITextResourcePropertiesService),\n        tslib_1.__param(11, clipboardService_1.IClipboardService)\n    ], Repl);\n    return Repl;\n}(panel_1.Panel));\nexports.Repl = Repl;\nvar ReplExpressionsRenderer = /** @class */ (function () {\n    function ReplExpressionsRenderer() {\n    }\n    Object.defineProperty(ReplExpressionsRenderer.prototype, \"templateId\", {\n        get: function () {\n            return ReplExpressionsRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ReplExpressionsRenderer.prototype.renderTemplate = function (container) {\n        dom.addClass(container, 'input-output-pair');\n        var input = dom.append(container, $('.input.expression'));\n        var label = new highlightedLabel_1.HighlightedLabel(input, false);\n        var output = dom.append(container, $('.output.expression'));\n        var value = dom.append(output, $('span.value'));\n        var annotation = dom.append(output, $('span'));\n        return { input: input, label: label, output: output, value: value, annotation: annotation };\n    };\n    ReplExpressionsRenderer.prototype.renderElement = function (element, index, templateData) {\n        var expression = element.element;\n        templateData.label.set(expression.name, filters_1.createMatches(element.filterData));\n        baseDebugView_1.renderExpressionValue(expression, templateData.value, {\n            preserveWhitespace: !expression.hasChildren,\n            showHover: false,\n            colorize: true\n        });\n        if (expression.hasChildren) {\n            templateData.annotation.className = 'annotation octicon octicon-info';\n            templateData.annotation.title = nls.localize('stateCapture', \"Object state is captured from first evaluation\");\n        }\n    };\n    ReplExpressionsRenderer.prototype.disposeTemplate = function (templateData) {\n        // noop\n    };\n    ReplExpressionsRenderer.ID = 'expressionRepl';\n    return ReplExpressionsRenderer;\n}());\nvar ReplSimpleElementsRenderer = /** @class */ (function () {\n    function ReplSimpleElementsRenderer(editorService, labelService, instantiationService) {\n        this.editorService = editorService;\n        this.labelService = labelService;\n        this.instantiationService = instantiationService;\n    }\n    Object.defineProperty(ReplSimpleElementsRenderer.prototype, \"templateId\", {\n        get: function () {\n            return ReplSimpleElementsRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReplSimpleElementsRenderer.prototype, \"linkDetector\", {\n        get: function () {\n            return this.instantiationService.createInstance(linkDetector_1.LinkDetector);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ReplSimpleElementsRenderer.prototype.renderTemplate = function (container) {\n        var _this = this;\n        var data = Object.create(null);\n        dom.addClass(container, 'output');\n        var expression = dom.append(container, $('.output.expression.value-and-source'));\n        data.container = container;\n        data.value = dom.append(expression, $('span.value'));\n        data.source = dom.append(expression, $('.source'));\n        data.toDispose = [];\n        data.toDispose.push(dom.addDisposableListener(data.source, 'click', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var source = data.getReplElementSource();\n            if (source) {\n                source.source.openInEditor(_this.editorService, {\n                    startLineNumber: source.lineNumber,\n                    startColumn: source.column,\n                    endLineNumber: source.lineNumber,\n                    endColumn: source.column\n                });\n            }\n        }));\n        return data;\n    };\n    ReplSimpleElementsRenderer.prototype.renderElement = function (_a, index, templateData) {\n        var element = _a.element;\n        // value\n        dom.clearNode(templateData.value);\n        // Reset classes to clear ansi decorations since templates are reused\n        templateData.value.className = 'value';\n        var result = debugANSIHandling_1.handleANSIOutput(element.value, this.linkDetector);\n        templateData.value.appendChild(result);\n        dom.addClass(templateData.value, (element.severity === severity_1.default.Warning) ? 'warn' : (element.severity === severity_1.default.Error) ? 'error' : (element.severity === severity_1.default.Ignore) ? 'ignore' : 'info');\n        templateData.source.textContent = element.sourceData ? element.sourceData.source.name + \":\" + element.sourceData.lineNumber : '';\n        templateData.source.title = element.sourceData ? this.labelService.getUriLabel(element.sourceData.source.uri) : '';\n        templateData.getReplElementSource = function () { return element.sourceData; };\n    };\n    ReplSimpleElementsRenderer.prototype.disposeTemplate = function (templateData) {\n        lifecycle_1.dispose(templateData.toDispose);\n    };\n    ReplSimpleElementsRenderer.ID = 'simpleReplElement';\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ReplSimpleElementsRenderer.prototype, \"linkDetector\", null);\n    ReplSimpleElementsRenderer = tslib_1.__decorate([\n        tslib_1.__param(0, editorService_1.IEditorService),\n        tslib_1.__param(1, label_1.ILabelService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService)\n    ], ReplSimpleElementsRenderer);\n    return ReplSimpleElementsRenderer;\n}());\nvar ReplRawObjectsRenderer = /** @class */ (function () {\n    function ReplRawObjectsRenderer() {\n    }\n    Object.defineProperty(ReplRawObjectsRenderer.prototype, \"templateId\", {\n        get: function () {\n            return ReplRawObjectsRenderer.ID;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ReplRawObjectsRenderer.prototype.renderTemplate = function (container) {\n        dom.addClass(container, 'output');\n        var expression = dom.append(container, $('.output.expression'));\n        var name = dom.append(expression, $('span.name'));\n        var label = new highlightedLabel_1.HighlightedLabel(name, false);\n        var value = dom.append(expression, $('span.value'));\n        var annotation = dom.append(expression, $('span'));\n        return { container: container, expression: expression, name: name, label: label, value: value, annotation: annotation };\n    };\n    ReplRawObjectsRenderer.prototype.renderElement = function (node, index, templateData) {\n        // key\n        var element = node.element;\n        templateData.label.set(element.name ? element.name + \":\" : '', filters_1.createMatches(node.filterData));\n        if (element.name) {\n            templateData.name.textContent = element.name + \":\";\n        }\n        else {\n            templateData.name.textContent = '';\n        }\n        // value\n        baseDebugView_1.renderExpressionValue(element.value, templateData.value, {\n            preserveWhitespace: true,\n            showHover: false\n        });\n        // annotation if any\n        if (element.annotation) {\n            templateData.annotation.className = 'annotation octicon octicon-info';\n            templateData.annotation.title = element.annotation;\n        }\n        else {\n            templateData.annotation.className = '';\n            templateData.annotation.title = '';\n        }\n    };\n    ReplRawObjectsRenderer.prototype.disposeTemplate = function (templateData) {\n        // noop\n    };\n    ReplRawObjectsRenderer.ID = 'rawObject';\n    return ReplRawObjectsRenderer;\n}());\nvar ReplDelegate = /** @class */ (function () {\n    function ReplDelegate(configurationService) {\n        this.configurationService = configurationService;\n    }\n    ReplDelegate.prototype.getHeight = function (element) {\n        // Give approximate heights. Repl has dynamic height so the tree will measure the actual height on its own.\n        var fontSize = this.configurationService.getValue('debug').console.fontSize;\n        if (element instanceof debugModel_1.Expression && element.hasChildren) {\n            return Math.ceil(2 * 1.4 * fontSize);\n        }\n        return Math.ceil(1.4 * fontSize);\n    };\n    ReplDelegate.prototype.getTemplateId = function (element) {\n        if (element instanceof debugModel_1.Variable && element.name) {\n            return variablesView_1.VariablesRenderer.ID;\n        }\n        if (element instanceof debugModel_1.Expression) {\n            return ReplExpressionsRenderer.ID;\n        }\n        if (element instanceof debugModel_1.SimpleReplElement || (element instanceof debugModel_1.Variable && !element.name)) {\n            // Variable with no name is a top level variable which should be rendered like a repl element #17404\n            return ReplSimpleElementsRenderer.ID;\n        }\n        return ReplRawObjectsRenderer.ID;\n    };\n    ReplDelegate.prototype.hasDynamicHeight = function (element) {\n        // Empty elements should not have dynamic height since they will be invisible\n        return element.toString().length > 0;\n    };\n    return ReplDelegate;\n}());\nfunction isDebugSession(obj) {\n    return typeof obj.getReplElements === 'function';\n}\nvar ReplDataSource = /** @class */ (function () {\n    function ReplDataSource() {\n    }\n    ReplDataSource.prototype.hasChildren = function (element) {\n        if (isDebugSession(element)) {\n            return true;\n        }\n        return !!element.hasChildren;\n    };\n    ReplDataSource.prototype.getChildren = function (element) {\n        if (isDebugSession(element)) {\n            return Promise.resolve(element.getReplElements());\n        }\n        if (element instanceof debugModel_1.RawObjectReplElement) {\n            return element.getChildren();\n        }\n        return element.getChildren();\n    };\n    return ReplDataSource;\n}());\nvar ReplAccessibilityProvider = /** @class */ (function () {\n    function ReplAccessibilityProvider() {\n    }\n    ReplAccessibilityProvider.prototype.getAriaLabel = function (element) {\n        if (element instanceof debugModel_1.Variable) {\n            return nls.localize('replVariableAriaLabel', \"Variable {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n        }\n        if (element instanceof debugModel_1.Expression) {\n            return nls.localize('replExpressionAriaLabel', \"Expression {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n        }\n        if (element instanceof debugModel_1.SimpleReplElement) {\n            return nls.localize('replValueOutputAriaLabel', \"{0}, read eval print loop, debug\", element.value);\n        }\n        if (element instanceof debugModel_1.RawObjectReplElement) {\n            return nls.localize('replRawObjectAriaLabel', \"Repl variable {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n        }\n        return '';\n    };\n    return ReplAccessibilityProvider;\n}());\n// Repl actions and commands\nvar AcceptReplInputAction = /** @class */ (function (_super) {\n    tslib_1.__extends(AcceptReplInputAction, _super);\n    function AcceptReplInputAction() {\n        return _super.call(this, {\n            id: 'repl.action.acceptInput',\n            label: nls.localize({ key: 'actions.repl.acceptInput', comment: ['Apply input from the debug console input box'] }, \"REPL Accept Input\"),\n            alias: 'REPL Accept Input',\n            precondition: debug_1.CONTEXT_IN_DEBUG_REPL,\n            kbOpts: {\n                kbExpr: editorContextKeys_1.EditorContextKeys.textInputFocus,\n                primary: keyCodes_1.KeyCode.Enter,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        }) || this;\n    }\n    AcceptReplInputAction.prototype.run = function (accessor, editor) {\n        suggestController_1.SuggestController.get(editor).acceptSelectedSuggestion();\n        accessor.get(IPrivateReplService).acceptReplInput();\n    };\n    return AcceptReplInputAction;\n}(editorExtensions_1.EditorAction));\nvar ReplCopyAllAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ReplCopyAllAction, _super);\n    function ReplCopyAllAction() {\n        return _super.call(this, {\n            id: 'repl.action.copyAll',\n            label: nls.localize('actions.repl.copyAll', \"Debug: Console Copy All\"),\n            alias: 'Debug Console Copy All',\n            precondition: debug_1.CONTEXT_IN_DEBUG_REPL,\n        }) || this;\n    }\n    ReplCopyAllAction.prototype.run = function (accessor, editor) {\n        var clipboardService = accessor.get(clipboardService_1.IClipboardService);\n        clipboardService.writeText(accessor.get(IPrivateReplService).getVisibleContent());\n    };\n    return ReplCopyAllAction;\n}(editorExtensions_1.EditorAction));\neditorExtensions_1.registerEditorAction(AcceptReplInputAction);\neditorExtensions_1.registerEditorAction(ReplCopyAllAction);\nvar SelectReplActionItem = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectReplActionItem, _super);\n    function SelectReplActionItem() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectReplActionItem.prototype.getActionContext = function (_, index) {\n        return this.debugService.getModel().getSessions(true)[index];\n    };\n    SelectReplActionItem.prototype.getSessions = function () {\n        return this.debugService.getModel().getSessions(true).filter(function (s) { return !sessionsToIgnore.has(s); });\n    };\n    return SelectReplActionItem;\n}(debugActionItems_1.FocusSessionActionItem));\nvar SelectReplAction = /** @class */ (function (_super) {\n    tslib_1.__extends(SelectReplAction, _super);\n    function SelectReplAction(id, label, debugService, replService) {\n        var _this = _super.call(this, id, label) || this;\n        _this.debugService = debugService;\n        _this.replService = replService;\n        return _this;\n    }\n    SelectReplAction.prototype.run = function (session) {\n        // If session is already the focused session we need to manualy update the tree since view model will not send a focused change event\n        if (session && session.state !== debug_1.State.Inactive && session !== this.debugService.getViewModel().focusedSession) {\n            this.debugService.focusStackFrame(undefined, undefined, session, true);\n        }\n        else {\n            this.replService.selectSession(session);\n        }\n        return Promise.resolve(undefined);\n    };\n    SelectReplAction.ID = 'workbench.action.debug.selectRepl';\n    SelectReplAction.LABEL = nls.localize('selectRepl', \"Select Debug Console\");\n    SelectReplAction = tslib_1.__decorate([\n        tslib_1.__param(2, debug_1.IDebugService),\n        tslib_1.__param(3, IPrivateReplService)\n    ], SelectReplAction);\n    return SelectReplAction;\n}(actions_1.Action));\nvar ClearReplAction = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearReplAction, _super);\n    function ClearReplAction(id, label, panelService) {\n        var _this = _super.call(this, id, label, 'debug-action clear-repl') || this;\n        _this.panelService = panelService;\n        return _this;\n    }\n    ClearReplAction.prototype.run = function () {\n        var repl = this.panelService.openPanel(debug_1.REPL_ID);\n        repl.clearRepl();\n        aria.status(nls.localize('debugConsoleCleared', \"Debug console was cleared\"));\n        return Promise.resolve(undefined);\n    };\n    ClearReplAction.ID = 'workbench.debug.panel.action.clearReplAction';\n    ClearReplAction.LABEL = nls.localize('clearRepl', \"Clear Console\");\n    ClearReplAction = tslib_1.__decorate([\n        tslib_1.__param(2, panelService_1.IPanelService)\n    ], ClearReplAction);\n    return ClearReplAction;\n}(actions_1.Action));\nexports.ClearReplAction = ClearReplAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/repl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/repl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!vs/workbench/contrib/debug/browser/media/repl';\nimport * as nls from 'vs/nls';\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as errors from 'vs/base/common/errors';\nimport { IAction, IActionItem, Action } from 'vs/base/common/actions';\nimport * as dom from 'vs/base/browser/dom';\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport severity from 'vs/base/common/severity';\nimport { SuggestController } from 'vs/editor/contrib/suggest/suggestController';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Position } from 'vs/editor/common/core/position';\nimport { registerEditorAction, ServicesAccessor, EditorAction } from 'vs/editor/browser/editorExtensions';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IInstantiationService, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { Panel } from 'vs/workbench/browser/panel';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { memoize } from 'vs/base/common/decorators';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { IDebugService, REPL_ID, DEBUG_SCHEME, CONTEXT_IN_DEBUG_REPL, IDebugSession, State, IReplElement, IExpressionContainer, IExpression, IReplElementSource, IDebugConfiguration } from 'vs/workbench/contrib/debug/common/debug';\nimport { HistoryNavigator } from 'vs/base/common/history';\nimport { IHistoryNavigationWidget } from 'vs/base/browser/history';\nimport { createAndBindHistoryNavigationWidgetScopedContextKeyService } from 'vs/platform/browser/contextScopedHistoryWidget';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { getSimpleEditorOptions, getSimpleCodeEditorWidgetOptions } from 'vs/workbench/contrib/codeEditor/browser/simpleEditorOptions';\nimport { IDecorationOptions } from 'vs/editor/common/editorCommon';\nimport { transparent, editorForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { FocusSessionActionItem } from 'vs/workbench/contrib/debug/browser/debugActionItems';\nimport { CompletionContext, CompletionList, CompletionProviderRegistry } from 'vs/editor/common/modes';\nimport { first } from 'vs/base/common/arrays';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';\nimport { Variable, Expression, SimpleReplElement, RawObjectReplElement } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { ITreeRenderer, ITreeNode, ITreeContextMenuEvent, IAsyncDataSource } from 'vs/base/browser/ui/tree/tree';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { renderExpressionValue } from 'vs/workbench/contrib/debug/browser/baseDebugView';\nimport { handleANSIOutput } from 'vs/workbench/contrib/debug/browser/debugANSIHandling';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { LinkDetector } from 'vs/workbench/contrib/debug/browser/linkDetector';\nimport { Separator } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { removeAnsiEscapeCodes } from 'vs/base/common/strings';\nimport { WorkbenchAsyncDataTree } from 'vs/platform/list/browser/listService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/resourceConfiguration';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { FuzzyScore, createMatches } from 'vs/base/common/filters';\nimport { HighlightedLabel } from 'vs/base/browser/ui/highlightedlabel/highlightedLabel';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { VariablesRenderer } from 'vs/workbench/contrib/debug/browser/variablesView';\n\nconst $ = dom.$;\n\nconst HISTORY_STORAGE_KEY = 'debug.repl.history';\nconst IPrivateReplService = createDecorator<IPrivateReplService>('privateReplService');\nconst DECORATION_KEY = 'replinputdecoration';\n\ninterface IPrivateReplService {\n\t_serviceBrand: any;\n\tacceptReplInput(): void;\n\tgetVisibleContent(): string;\n\tselectSession(session?: IDebugSession): void;\n\tclearRepl(): void;\n}\n\nfunction revealLastElement(tree: WorkbenchAsyncDataTree<any, any, any>) {\n\ttree.scrollTop = tree.scrollHeight - tree.renderHeight;\n}\n\nconst sessionsToIgnore = new Set<IDebugSession>();\nexport class Repl extends Panel implements IPrivateReplService, IHistoryNavigationWidget {\n\t_serviceBrand: any;\n\n\tprivate static readonly REFRESH_DELAY = 100; // delay in ms to refresh the repl for new elements to show\n\tprivate static readonly REPL_INPUT_INITIAL_HEIGHT = 19;\n\tprivate static readonly REPL_INPUT_MAX_HEIGHT = 170;\n\n\tprivate history: HistoryNavigator<string>;\n\tprivate tree: WorkbenchAsyncDataTree<IDebugSession, IReplElement, FuzzyScore>;\n\tprivate replDelegate: ReplDelegate;\n\tprivate container: HTMLElement;\n\tprivate replInput: CodeEditorWidget;\n\tprivate replInputContainer: HTMLElement;\n\tprivate dimension: dom.Dimension;\n\tprivate replInputHeight: number;\n\tprivate model: ITextModel;\n\tprivate historyNavigationEnablement: IContextKey<boolean>;\n\tprivate scopedInstantiationService: IInstantiationService;\n\tprivate replElementsChangeListener: IDisposable;\n\tprivate styleElement: HTMLStyleElement;\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IThemeService protected themeService: IThemeService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService private readonly textResourcePropertiesService: ITextResourcePropertiesService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper(REPL_ID, telemetryService, themeService, storageService);\n\n\t\tthis.replInputHeight = Repl.REPL_INPUT_INITIAL_HEIGHT;\n\t\tthis.history = new HistoryNavigator(JSON.parse(this.storageService.get(HISTORY_STORAGE_KEY, StorageScope.WORKSPACE, '[]')), 50);\n\t\tcodeEditorService.registerDecorationType(DECORATION_KEY, {});\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.debugService.getViewModel().onDidFocusSession(session => {\n\t\t\tif (session) {\n\t\t\t\tsessionsToIgnore.delete(session);\n\t\t\t}\n\t\t\tthis.selectSession();\n\t\t}));\n\t\tthis._register(this.debugService.onWillNewSession(() => {\n\t\t\t// Need to listen to output events for sessions which are not yet fully initialised\n\t\t\tconst input = this.tree.getInput();\n\t\t\tif (!input || input.state === State.Inactive) {\n\t\t\t\tthis.selectSession();\n\t\t\t}\n\t\t\tthis.updateTitleArea();\n\t\t}));\n\t\tthis._register(this.themeService.onThemeChange(() => {\n\t\t\tif (this.isVisible()) {\n\t\t\t\tthis.updateInputDecoration();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.onDidChangeVisibility(visible => {\n\t\t\tif (!visible) {\n\t\t\t\tdispose(this.model);\n\t\t\t} else {\n\t\t\t\tthis.model = this.modelService.createModel('', null, uri.parse(`${DEBUG_SCHEME}:replinput`), true);\n\t\t\t\tthis.replInput.setModel(this.model);\n\t\t\t\tthis.updateInputDecoration();\n\t\t\t\tthis.refreshReplElements(true);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('debug.console.lineHeight') || e.affectsConfiguration('debug.console.fontSize') || e.affectsConfiguration('debug.console.fontFamily')) {\n\t\t\t\tthis.onDidFontChange();\n\t\t\t}\n\t\t}));\n\t}\n\n\tget isReadonly(): boolean {\n\t\t// Do not allow to edit inactive sessions\n\t\tconst session = this.tree.getInput();\n\t\tif (session && session.state !== State.Inactive) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tshowPreviousValue(): void {\n\t\tthis.navigateHistory(true);\n\t}\n\n\tshowNextValue(): void {\n\t\tthis.navigateHistory(false);\n\t}\n\n\tprivate onDidFontChange(): void {\n\t\tif (this.styleElement) {\n\t\t\tconst debugConsole = this.configurationService.getValue<IDebugConfiguration>('debug').console;\n\t\t\tconst fontSize = debugConsole.fontSize;\n\t\t\tconst fontFamily = debugConsole.fontFamily === 'default' ? 'var(--monaco-monospace-font)' : debugConsole.fontFamily;\n\t\t\tconst lineHeight = debugConsole.lineHeight ? `${debugConsole.lineHeight}px` : '1.4em';\n\n\t\t\t// Set the font size, font family, line height and align the twistie to be centered\n\t\t\tthis.styleElement.innerHTML = `\n\t\t\t\t.repl .repl-tree .expression {\n\t\t\t\t\tfont-size: ${fontSize}px;\n\t\t\t\t\tfont-family: ${fontFamily};\n\t\t\t\t}\n\n\t\t\t\t.repl .repl-tree .expression {\n\t\t\t\t\tline-height: ${lineHeight};\n\t\t\t\t}\n\n\t\t\t\t.repl .repl-tree .monaco-tl-twistie {\n\t\t\t\t\tbackground-position-y: calc(100% - ${fontSize * 1.4 / 2 - 8}px);\n\t\t\t\t}\n\t\t\t`;\n\n\t\t\tthis.tree.rerender();\n\t\t}\n\t}\n\n\tprivate navigateHistory(previous: boolean): void {\n\t\tconst historyInput = previous ? this.history.previous() : this.history.next();\n\t\tif (historyInput) {\n\t\t\tthis.replInput.setValue(historyInput);\n\t\t\taria.status(historyInput);\n\t\t\t// always leave cursor at the end.\n\t\t\tthis.replInput.setPosition({ lineNumber: 1, column: historyInput.length + 1 });\n\t\t\tthis.historyNavigationEnablement.set(true);\n\t\t}\n\t}\n\n\tselectSession(session?: IDebugSession): void {\n\t\tconst treeInput = this.tree.getInput();\n\t\tif (!session) {\n\t\t\tconst focusedSession = this.debugService.getViewModel().focusedSession;\n\t\t\t// If there is a focusedSession focus on that one, otherwise just show any other not ignored session\n\t\t\tif (focusedSession) {\n\t\t\t\tsession = focusedSession;\n\t\t\t} else if (!treeInput || sessionsToIgnore.has(treeInput)) {\n\t\t\t\tsession = first(this.debugService.getModel().getSessions(true), s => !sessionsToIgnore.has(s)) || undefined;\n\t\t\t}\n\t\t}\n\t\tif (session) {\n\t\t\tif (this.replElementsChangeListener) {\n\t\t\t\tthis.replElementsChangeListener.dispose();\n\t\t\t}\n\t\t\tthis.replElementsChangeListener = session.onDidChangeReplElements(() => {\n\t\t\t\tthis.refreshReplElements(session!.getReplElements().length === 0);\n\t\t\t});\n\n\t\t\tif (this.tree && treeInput !== session) {\n\t\t\t\tthis.tree.setInput(session).then(() => revealLastElement(this.tree)).then(undefined, errors.onUnexpectedError);\n\t\t\t}\n\t\t}\n\n\t\tthis.replInput.updateOptions({ readOnly: this.isReadonly });\n\t\tthis.updateInputDecoration();\n\t}\n\n\tclearRepl(): void {\n\t\tconst session = this.tree.getInput();\n\t\tif (session) {\n\t\t\tsession.removeReplExpressions();\n\t\t\tif (session.state === State.Inactive) {\n\t\t\t\t// Ignore inactive sessions which got cleared - so they are not shown any more\n\t\t\t\tsessionsToIgnore.add(session);\n\t\t\t\tthis.selectSession();\n\t\t\t\tthis.updateTitleArea();\n\t\t\t}\n\t\t}\n\t\tthis.replInput.focus();\n\t}\n\n\tacceptReplInput(): void {\n\t\tconst session = this.tree.getInput();\n\t\tif (session) {\n\t\t\tsession.addReplExpression(this.debugService.getViewModel().focusedStackFrame, this.replInput.getValue());\n\t\t\trevealLastElement(this.tree);\n\t\t\tthis.history.add(this.replInput.getValue());\n\t\t\tthis.replInput.setValue('');\n\t\t\tconst shouldRelayout = this.replInputHeight > Repl.REPL_INPUT_INITIAL_HEIGHT;\n\t\t\tthis.replInputHeight = Repl.REPL_INPUT_INITIAL_HEIGHT;\n\t\t\tif (shouldRelayout) {\n\t\t\t\t// Trigger a layout to shrink a potential multi line input\n\t\t\t\tthis.layout(this.dimension);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetVisibleContent(): string {\n\t\tlet text = '';\n\t\tconst lineDelimiter = this.textResourcePropertiesService.getEOL(this.model.uri);\n\t\tconst traverseAndAppend = (node: ITreeNode<IReplElement, FuzzyScore>) => {\n\t\t\tnode.children.forEach(child => {\n\t\t\t\ttext += child.element.toString() + lineDelimiter;\n\t\t\t\tif (!child.collapsed && child.children.length) {\n\t\t\t\t\ttraverseAndAppend(child);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\ttraverseAndAppend(this.tree.getNode());\n\n\t\treturn removeAnsiEscapeCodes(text);\n\t}\n\n\tlayout(dimension: dom.Dimension): void {\n\t\tthis.dimension = dimension;\n\t\tif (this.tree) {\n\t\t\tconst treeHeight = dimension.height - this.replInputHeight;\n\t\t\tthis.tree.getHTMLElement().style.height = `${treeHeight}px`;\n\t\t\tthis.tree.layout(treeHeight, dimension.width);\n\t\t}\n\t\tthis.replInputContainer.style.height = `${this.replInputHeight}px`;\n\n\t\tthis.replInput.layout({ width: dimension.width - 20, height: this.replInputHeight });\n\t}\n\n\tfocus(): void {\n\t\tthis.replInput.focus();\n\t}\n\n\tgetActionItem(action: IAction): IActionItem | undefined {\n\t\tif (action.id === SelectReplAction.ID) {\n\t\t\treturn this.instantiationService.createInstance(SelectReplActionItem, this.selectReplAction);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tgetActions(): IAction[] {\n\t\tconst result: IAction[] = [];\n\t\tif (this.debugService.getModel().getSessions(true).filter(s => !sessionsToIgnore.has(s)).length > 1) {\n\t\t\tresult.push(this.selectReplAction);\n\t\t}\n\t\tresult.push(this.clearReplAction);\n\n\t\tresult.forEach(a => this._register(a));\n\n\t\treturn result;\n\t}\n\n\t// --- Cached locals\n\t@memoize\n\tprivate get selectReplAction(): SelectReplAction {\n\t\treturn this.scopedInstantiationService.createInstance(SelectReplAction, SelectReplAction.ID, SelectReplAction.LABEL);\n\t}\n\n\t@memoize\n\tprivate get clearReplAction(): ClearReplAction {\n\t\treturn this.scopedInstantiationService.createInstance(ClearReplAction, ClearReplAction.ID, ClearReplAction.LABEL);\n\t}\n\n\t@memoize\n\tprivate get refreshScheduler(): RunOnceScheduler {\n\t\treturn new RunOnceScheduler(() => {\n\t\t\tif (!this.tree.getInput()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst lastElementVisible = this.tree.scrollTop + this.tree.renderHeight >= this.tree.scrollHeight;\n\t\t\tthis.tree.updateChildren().then(() => {\n\t\t\t\tif (lastElementVisible) {\n\t\t\t\t\t// Only scroll if we were scrolled all the way down before tree refreshed #10486\n\t\t\t\t\trevealLastElement(this.tree);\n\t\t\t\t}\n\t\t\t}, errors.onUnexpectedError);\n\t\t}, Repl.REFRESH_DELAY);\n\t}\n\n\t// --- Creation\n\n\tcreate(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tthis.container = dom.append(parent, $('.repl'));\n\t\tconst treeContainer = dom.append(this.container, $('.repl-tree'));\n\t\tthis.createReplInput(this.container);\n\n\t\tthis.replDelegate = new ReplDelegate(this.configurationService);\n\t\tthis.tree = this.instantiationService.createInstance(WorkbenchAsyncDataTree, treeContainer, this.replDelegate, [\n\t\t\tthis.instantiationService.createInstance(VariablesRenderer),\n\t\t\tthis.instantiationService.createInstance(ReplSimpleElementsRenderer),\n\t\t\tnew ReplExpressionsRenderer(),\n\t\t\tnew ReplRawObjectsRenderer()\n\t\t], new ReplDataSource(), {\n\t\t\t\tariaLabel: nls.localize('replAriaLabel', \"Read Eval Print Loop Panel\"),\n\t\t\t\taccessibilityProvider: new ReplAccessibilityProvider(),\n\t\t\t\tidentityProvider: { getId: (element: IReplElement) => element.getId() },\n\t\t\t\tmouseSupport: false,\n\t\t\t\tkeyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e: IReplElement) => e },\n\t\t\t\thorizontalScrolling: false,\n\t\t\t\tsetRowLineHeight: false,\n\t\t\t\tsupportDynamicHeights: true\n\t\t\t}) as WorkbenchAsyncDataTree<IDebugSession, IReplElement, FuzzyScore>;\n\n\t\tthis.toDispose.push(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\t\t// Make sure to select the session if debugging is already active\n\t\tthis.selectSession();\n\t\tthis.styleElement = dom.createStyleSheet(this.container);\n\t\tthis.onDidFontChange();\n\t}\n\n\tprivate createReplInput(container: HTMLElement): void {\n\t\tthis.replInputContainer = dom.append(container, $('.repl-input-wrapper'));\n\n\t\tconst { scopedContextKeyService, historyNavigationEnablement } = createAndBindHistoryNavigationWidgetScopedContextKeyService(this.contextKeyService, { target: this.replInputContainer, historyNavigator: this });\n\t\tthis.historyNavigationEnablement = historyNavigationEnablement;\n\t\tthis._register(scopedContextKeyService);\n\t\tCONTEXT_IN_DEBUG_REPL.bindTo(scopedContextKeyService).set(true);\n\n\t\tthis.scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection(\n\t\t\t[IContextKeyService, scopedContextKeyService], [IPrivateReplService, this]));\n\t\tconst options = getSimpleEditorOptions();\n\t\toptions.readOnly = true;\n\t\tthis.replInput = this.scopedInstantiationService.createInstance(CodeEditorWidget, this.replInputContainer, options, getSimpleCodeEditorWidgetOptions());\n\n\t\tCompletionProviderRegistry.register({ scheme: DEBUG_SCHEME, pattern: '**/replinput', hasAccessToAllModels: true }, {\n\t\t\ttriggerCharacters: ['.'],\n\t\t\tprovideCompletionItems: (model: ITextModel, position: Position, _context: CompletionContext, token: CancellationToken): Promise<CompletionList> => {\n\t\t\t\t// Disable history navigation because up and down are used to navigate through the suggest widget\n\t\t\t\tthis.historyNavigationEnablement.set(false);\n\n\t\t\t\tconst focusedSession = this.debugService.getViewModel().focusedSession;\n\t\t\t\tif (focusedSession && focusedSession.capabilities.supportsCompletionsRequest) {\n\n\t\t\t\t\tconst model = this.replInput.getModel();\n\t\t\t\t\tif (model) {\n\t\t\t\t\t\tconst word = model.getWordAtPosition(position);\n\t\t\t\t\t\tconst overwriteBefore = word ? word.word.length : 0;\n\t\t\t\t\t\tconst text = model.getLineContent(position.lineNumber);\n\t\t\t\t\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\t\t\t\t\tconst frameId = focusedStackFrame ? focusedStackFrame.frameId : undefined;\n\n\t\t\t\t\t\treturn focusedSession.completions(frameId, text, position, overwriteBefore).then(suggestions => {\n\t\t\t\t\t\t\treturn { suggestions };\n\t\t\t\t\t\t}, err => {\n\t\t\t\t\t\t\treturn { suggestions: [] };\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve({ suggestions: [] });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.replInput.onDidScrollChange(e => {\n\t\t\tif (!e.scrollHeightChanged) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.replInputHeight = Math.max(Repl.REPL_INPUT_INITIAL_HEIGHT, Math.min(Repl.REPL_INPUT_MAX_HEIGHT, e.scrollHeight, this.dimension.height));\n\t\t\tthis.layout(this.dimension);\n\t\t}));\n\t\tthis._register(this.replInput.onDidChangeModelContent(() => {\n\t\t\tconst model = this.replInput.getModel();\n\t\t\tthis.historyNavigationEnablement.set(!!model && model.getValue() === '');\n\t\t}));\n\t\t// We add the input decoration only when the focus is in the input #61126\n\t\tthis._register(this.replInput.onDidFocusEditorText(() => this.updateInputDecoration()));\n\t\tthis._register(this.replInput.onDidBlurEditorText(() => this.updateInputDecoration()));\n\n\t\tthis._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.FOCUS, () => dom.addClass(this.replInputContainer, 'synthetic-focus')));\n\t\tthis._register(dom.addStandardDisposableListener(this.replInputContainer, dom.EventType.BLUR, () => dom.removeClass(this.replInputContainer, 'synthetic-focus')));\n\t}\n\n\tprivate onContextMenu(e: ITreeContextMenuEvent<IReplElement>): void {\n\t\tconst actions: IAction[] = [];\n\t\tactions.push(new Action('debug.replCopy', nls.localize('copy', \"Copy\"), undefined, true, () => {\n\t\t\tconst nativeSelection = window.getSelection();\n\t\t\tif (nativeSelection) {\n\t\t\t\tthis.clipboardService.writeText(nativeSelection.toString());\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t}));\n\t\tactions.push(new Action('workbench.debug.action.copyAll', nls.localize('copyAll', \"Copy All\"), undefined, true, () => {\n\t\t\tthis.clipboardService.writeText(this.getVisibleContent());\n\t\t\treturn Promise.resolve(undefined);\n\t\t}));\n\t\tactions.push(new Action('debug.collapseRepl', nls.localize('collapse', \"Collapse All\"), undefined, true, () => {\n\t\t\tthis.tree.collapseAll();\n\t\t\tthis.replInput.focus();\n\t\t\treturn Promise.resolve();\n\t\t}));\n\t\tactions.push(new Separator());\n\t\tactions.push(this.clearReplAction);\n\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => e.anchor,\n\t\t\tgetActions: () => actions,\n\t\t\tgetActionsContext: () => e.element\n\t\t});\n\t}\n\n\t// --- Update\n\n\tprivate refreshReplElements(noDelay: boolean): void {\n\t\tif (this.tree && this.isVisible()) {\n\t\t\tif (this.refreshScheduler.isScheduled()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.refreshScheduler.schedule(noDelay ? 0 : undefined);\n\t\t}\n\t}\n\n\tprivate updateInputDecoration(): void {\n\t\tif (!this.replInput) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst decorations: IDecorationOptions[] = [];\n\t\tif (this.isReadonly && this.replInput.hasTextFocus() && !this.replInput.getValue()) {\n\t\t\tconst transparentForeground = transparent(editorForeground, 0.4)(this.themeService.getTheme());\n\t\t\tdecorations.push({\n\t\t\t\trange: {\n\t\t\t\t\tstartLineNumber: 0,\n\t\t\t\t\tendLineNumber: 0,\n\t\t\t\t\tstartColumn: 0,\n\t\t\t\t\tendColumn: 1\n\t\t\t\t},\n\t\t\t\trenderOptions: {\n\t\t\t\t\tafter: {\n\t\t\t\t\t\tcontentText: nls.localize('startDebugFirst', \"Please start a debug session to evaluate expressions\"),\n\t\t\t\t\t\tcolor: transparentForeground ? transparentForeground.toString() : undefined\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.replInput.setDecorations(DECORATION_KEY, decorations);\n\t}\n\n\tprotected saveState(): void {\n\t\tconst replHistory = this.history.getHistory();\n\t\tif (replHistory.length) {\n\t\t\tthis.storageService.store(HISTORY_STORAGE_KEY, JSON.stringify(replHistory), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(HISTORY_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\tdispose(): void {\n\t\tthis.replInput.dispose();\n\t\tif (this.replElementsChangeListener) {\n\t\t\tthis.replElementsChangeListener.dispose();\n\t\t}\n\t\tsuper.dispose();\n\t}\n}\n\n// Repl tree\n\ninterface IExpressionTemplateData {\n\tinput: HTMLElement;\n\toutput: HTMLElement;\n\tvalue: HTMLElement;\n\tannotation: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\ninterface ISimpleReplElementTemplateData {\n\tcontainer: HTMLElement;\n\tvalue: HTMLElement;\n\tsource: HTMLElement;\n\tgetReplElementSource(): IReplElementSource | undefined;\n\ttoDispose: IDisposable[];\n}\n\ninterface IRawObjectReplTemplateData {\n\tcontainer: HTMLElement;\n\texpression: HTMLElement;\n\tname: HTMLElement;\n\tvalue: HTMLElement;\n\tannotation: HTMLElement;\n\tlabel: HighlightedLabel;\n}\n\nclass ReplExpressionsRenderer implements ITreeRenderer<Expression, FuzzyScore, IExpressionTemplateData> {\n\tstatic readonly ID = 'expressionRepl';\n\n\tget templateId(): string {\n\t\treturn ReplExpressionsRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IExpressionTemplateData {\n\t\tdom.addClass(container, 'input-output-pair');\n\t\tconst input = dom.append(container, $('.input.expression'));\n\t\tconst label = new HighlightedLabel(input, false);\n\t\tconst output = dom.append(container, $('.output.expression'));\n\t\tconst value = dom.append(output, $('span.value'));\n\t\tconst annotation = dom.append(output, $('span'));\n\n\t\treturn { input, label, output, value, annotation };\n\t}\n\n\trenderElement(element: ITreeNode<Expression, FuzzyScore>, index: number, templateData: IExpressionTemplateData): void {\n\t\tconst expression = element.element;\n\t\ttemplateData.label.set(expression.name, createMatches(element.filterData));\n\t\trenderExpressionValue(expression, templateData.value, {\n\t\t\tpreserveWhitespace: !expression.hasChildren,\n\t\t\tshowHover: false,\n\t\t\tcolorize: true\n\t\t});\n\t\tif (expression.hasChildren) {\n\t\t\ttemplateData.annotation.className = 'annotation octicon octicon-info';\n\t\t\ttemplateData.annotation.title = nls.localize('stateCapture', \"Object state is captured from first evaluation\");\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: IExpressionTemplateData): void {\n\t\t// noop\n\t}\n}\n\nclass ReplSimpleElementsRenderer implements ITreeRenderer<SimpleReplElement, FuzzyScore, ISimpleReplElementTemplateData> {\n\tstatic readonly ID = 'simpleReplElement';\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) { }\n\n\tget templateId(): string {\n\t\treturn ReplSimpleElementsRenderer.ID;\n\t}\n\n\t@memoize\n\tget linkDetector(): LinkDetector {\n\t\treturn this.instantiationService.createInstance(LinkDetector);\n\t}\n\n\trenderTemplate(container: HTMLElement): ISimpleReplElementTemplateData {\n\t\tconst data: ISimpleReplElementTemplateData = Object.create(null);\n\t\tdom.addClass(container, 'output');\n\t\tconst expression = dom.append(container, $('.output.expression.value-and-source'));\n\n\t\tdata.container = container;\n\t\tdata.value = dom.append(expression, $('span.value'));\n\t\tdata.source = dom.append(expression, $('.source'));\n\t\tdata.toDispose = [];\n\t\tdata.toDispose.push(dom.addDisposableListener(data.source, 'click', e => {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tconst source = data.getReplElementSource();\n\t\t\tif (source) {\n\t\t\t\tsource.source.openInEditor(this.editorService, {\n\t\t\t\t\tstartLineNumber: source.lineNumber,\n\t\t\t\t\tstartColumn: source.column,\n\t\t\t\t\tendLineNumber: source.lineNumber,\n\t\t\t\t\tendColumn: source.column\n\t\t\t\t});\n\t\t\t}\n\t\t}));\n\n\t\treturn data;\n\t}\n\n\trenderElement({ element }: ITreeNode<SimpleReplElement, FuzzyScore>, index: number, templateData: ISimpleReplElementTemplateData): void {\n\t\t// value\n\t\tdom.clearNode(templateData.value);\n\t\t// Reset classes to clear ansi decorations since templates are reused\n\t\ttemplateData.value.className = 'value';\n\t\tconst result = handleANSIOutput(element.value, this.linkDetector);\n\t\ttemplateData.value.appendChild(result);\n\n\t\tdom.addClass(templateData.value, (element.severity === severity.Warning) ? 'warn' : (element.severity === severity.Error) ? 'error' : (element.severity === severity.Ignore) ? 'ignore' : 'info');\n\t\ttemplateData.source.textContent = element.sourceData ? `${element.sourceData.source.name}:${element.sourceData.lineNumber}` : '';\n\t\ttemplateData.source.title = element.sourceData ? this.labelService.getUriLabel(element.sourceData.source.uri) : '';\n\t\ttemplateData.getReplElementSource = () => element.sourceData;\n\t}\n\n\tdisposeTemplate(templateData: ISimpleReplElementTemplateData): void {\n\t\tdispose(templateData.toDispose);\n\t}\n}\n\nclass ReplRawObjectsRenderer implements ITreeRenderer<RawObjectReplElement, FuzzyScore, IRawObjectReplTemplateData> {\n\tstatic readonly ID = 'rawObject';\n\n\tget templateId(): string {\n\t\treturn ReplRawObjectsRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IRawObjectReplTemplateData {\n\t\tdom.addClass(container, 'output');\n\n\t\tconst expression = dom.append(container, $('.output.expression'));\n\t\tconst name = dom.append(expression, $('span.name'));\n\t\tconst label = new HighlightedLabel(name, false);\n\t\tconst value = dom.append(expression, $('span.value'));\n\t\tconst annotation = dom.append(expression, $('span'));\n\n\t\treturn { container, expression, name, label, value, annotation };\n\t}\n\n\trenderElement(node: ITreeNode<RawObjectReplElement, FuzzyScore>, index: number, templateData: IRawObjectReplTemplateData): void {\n\t\t// key\n\t\tconst element = node.element;\n\t\ttemplateData.label.set(element.name ? `${element.name}:` : '', createMatches(node.filterData));\n\t\tif (element.name) {\n\t\t\ttemplateData.name.textContent = `${element.name}:`;\n\t\t} else {\n\t\t\ttemplateData.name.textContent = '';\n\t\t}\n\n\t\t// value\n\t\trenderExpressionValue(element.value, templateData.value, {\n\t\t\tpreserveWhitespace: true,\n\t\t\tshowHover: false\n\t\t});\n\n\t\t// annotation if any\n\t\tif (element.annotation) {\n\t\t\ttemplateData.annotation.className = 'annotation octicon octicon-info';\n\t\t\ttemplateData.annotation.title = element.annotation;\n\t\t} else {\n\t\t\ttemplateData.annotation.className = '';\n\t\t\ttemplateData.annotation.title = '';\n\t\t}\n\t}\n\n\tdisposeTemplate(templateData: IRawObjectReplTemplateData): void {\n\t\t// noop\n\t}\n}\n\nclass ReplDelegate implements IListVirtualDelegate<IReplElement> {\n\n\tconstructor(private configurationService: IConfigurationService) { }\n\n\tgetHeight(element: IReplElement): number {\n\t\t// Give approximate heights. Repl has dynamic height so the tree will measure the actual height on its own.\n\t\tconst fontSize = this.configurationService.getValue<IDebugConfiguration>('debug').console.fontSize;\n\t\tif (element instanceof Expression && element.hasChildren) {\n\t\t\treturn Math.ceil(2 * 1.4 * fontSize);\n\t\t}\n\n\t\treturn Math.ceil(1.4 * fontSize);\n\t}\n\n\tgetTemplateId(element: IReplElement): string {\n\t\tif (element instanceof Variable && element.name) {\n\t\t\treturn VariablesRenderer.ID;\n\t\t}\n\t\tif (element instanceof Expression) {\n\t\t\treturn ReplExpressionsRenderer.ID;\n\t\t}\n\t\tif (element instanceof SimpleReplElement || (element instanceof Variable && !element.name)) {\n\t\t\t// Variable with no name is a top level variable which should be rendered like a repl element #17404\n\t\t\treturn ReplSimpleElementsRenderer.ID;\n\t\t}\n\n\t\treturn ReplRawObjectsRenderer.ID;\n\t}\n\n\thasDynamicHeight?(element: IReplElement): boolean {\n\t\t// Empty elements should not have dynamic height since they will be invisible\n\t\treturn element.toString().length > 0;\n\t}\n}\n\nfunction isDebugSession(obj: any): obj is IDebugSession {\n\treturn typeof obj.getReplElements === 'function';\n}\n\nclass ReplDataSource implements IAsyncDataSource<IDebugSession, IReplElement> {\n\n\thasChildren(element: IReplElement | IDebugSession): boolean {\n\t\tif (isDebugSession(element)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !!(<IExpressionContainer>element).hasChildren;\n\t}\n\n\tgetChildren(element: IReplElement | IDebugSession): Promise<IReplElement[]> {\n\t\tif (isDebugSession(element)) {\n\t\t\treturn Promise.resolve(element.getReplElements());\n\t\t}\n\t\tif (element instanceof RawObjectReplElement) {\n\t\t\treturn element.getChildren();\n\t\t}\n\n\t\treturn (<IExpression>element).getChildren();\n\t}\n}\n\nclass ReplAccessibilityProvider implements IAccessibilityProvider<IReplElement> {\n\tgetAriaLabel(element: IReplElement): string {\n\t\tif (element instanceof Variable) {\n\t\t\treturn nls.localize('replVariableAriaLabel', \"Variable {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n\t\t}\n\t\tif (element instanceof Expression) {\n\t\t\treturn nls.localize('replExpressionAriaLabel', \"Expression {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n\t\t}\n\t\tif (element instanceof SimpleReplElement) {\n\t\t\treturn nls.localize('replValueOutputAriaLabel', \"{0}, read eval print loop, debug\", element.value);\n\t\t}\n\t\tif (element instanceof RawObjectReplElement) {\n\t\t\treturn nls.localize('replRawObjectAriaLabel', \"Repl variable {0} has value {1}, read eval print loop, debug\", element.name, element.value);\n\t\t}\n\n\t\treturn '';\n\t}\n}\n\n\n// Repl actions and commands\n\nclass AcceptReplInputAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'repl.action.acceptInput',\n\t\t\tlabel: nls.localize({ key: 'actions.repl.acceptInput', comment: ['Apply input from the debug console input box'] }, \"REPL Accept Input\"),\n\t\t\talias: 'REPL Accept Input',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\tSuggestController.get(editor).acceptSelectedSuggestion();\n\t\taccessor.get(IPrivateReplService).acceptReplInput();\n\t}\n}\n\nclass ReplCopyAllAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'repl.action.copyAll',\n\t\t\tlabel: nls.localize('actions.repl.copyAll', \"Debug: Console Copy All\"),\n\t\t\talias: 'Debug Console Copy All',\n\t\t\tprecondition: CONTEXT_IN_DEBUG_REPL,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tclipboardService.writeText(accessor.get(IPrivateReplService).getVisibleContent());\n\t}\n}\n\nregisterEditorAction(AcceptReplInputAction);\nregisterEditorAction(ReplCopyAllAction);\n\nclass SelectReplActionItem extends FocusSessionActionItem {\n\n\tprotected getActionContext(_: string, index: number): any {\n\t\treturn this.debugService.getModel().getSessions(true)[index];\n\t}\n\n\tprotected getSessions(): ReadonlyArray<IDebugSession> {\n\t\treturn this.debugService.getModel().getSessions(true).filter(s => !sessionsToIgnore.has(s));\n\t}\n}\n\nclass SelectReplAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.debug.selectRepl';\n\tstatic LABEL = nls.localize('selectRepl', \"Select Debug Console\");\n\n\tconstructor(id: string, label: string,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IPrivateReplService private readonly replService: IPrivateReplService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\trun(session: IDebugSession): Promise<any> {\n\t\t// If session is already the focused session we need to manualy update the tree since view model will not send a focused change event\n\t\tif (session && session.state !== State.Inactive && session !== this.debugService.getViewModel().focusedSession) {\n\t\t\tthis.debugService.focusStackFrame(undefined, undefined, session, true);\n\t\t} else {\n\t\t\tthis.replService.selectSession(session);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nexport class ClearReplAction extends Action {\n\tstatic readonly ID = 'workbench.debug.panel.action.clearReplAction';\n\tstatic LABEL = nls.localize('clearRepl', \"Clear Console\");\n\n\tconstructor(id: string, label: string,\n\t\t@IPanelService private readonly panelService: IPanelService\n\t) {\n\t\tsuper(id, label, 'debug-action clear-repl');\n\t}\n\n\trun(): Promise<any> {\n\t\tconst repl = <Repl>this.panelService.openPanel(REPL_ID);\n\t\trepl.clearRepl();\n\t\taria.status(nls.localize('debugConsoleCleared', \"Debug console was cleared\"));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n"]}]}