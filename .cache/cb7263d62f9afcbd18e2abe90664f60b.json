{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strings = require(\"vs/base/common/strings\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar ReplacePattern = /** @class */ (function () {\n    function ReplacePattern(replaceString, arg2, arg3) {\n        this._hasParameters = false;\n        this._replacePattern = replaceString;\n        var searchPatternInfo;\n        var parseParameters;\n        if (typeof arg2 === 'boolean') {\n            parseParameters = arg2;\n            this._regExp = arg3;\n        }\n        else {\n            searchPatternInfo = arg2;\n            parseParameters = !!searchPatternInfo.isRegExp;\n            this._regExp = strings.createRegExp(searchPatternInfo.pattern, !!searchPatternInfo.isRegExp, { matchCase: searchPatternInfo.isCaseSensitive, wholeWord: searchPatternInfo.isWordMatch, multiline: searchPatternInfo.isMultiline, global: false });\n        }\n        if (parseParameters) {\n            this.parseReplaceString(replaceString);\n        }\n        if (this._regExp.global) {\n            this._regExp = strings.createRegExp(this._regExp.source, true, { matchCase: !this._regExp.ignoreCase, wholeWord: false, multiline: this._regExp.multiline, global: false });\n        }\n    }\n    Object.defineProperty(ReplacePattern.prototype, \"hasParameters\", {\n        get: function () {\n            return this._hasParameters;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReplacePattern.prototype, \"pattern\", {\n        get: function () {\n            return this._replacePattern;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ReplacePattern.prototype, \"regExp\", {\n        get: function () {\n            return this._regExp;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n    * Returns the replace string for the first match in the given text.\n    * If text has no matches then returns null.\n    */\n    ReplacePattern.prototype.getReplaceString = function (text) {\n        this._regExp.lastIndex = 0;\n        var match = this._regExp.exec(text);\n        if (match) {\n            if (this.hasParameters) {\n                if (match[0] === text) {\n                    return text.replace(this._regExp, this.pattern);\n                }\n                var replaceString = text.replace(this._regExp, this.pattern);\n                return replaceString.substr(match.index, match[0].length - (text.length - replaceString.length));\n            }\n            return this.pattern;\n        }\n        return null;\n    };\n    /**\n     * \\n => LF\n     * \\t => TAB\n     * \\\\ => \\\n     * $0 => $& (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter)\n     * everything else stays untouched\n     */\n    ReplacePattern.prototype.parseReplaceString = function (replaceString) {\n        if (!replaceString || replaceString.length === 0) {\n            return;\n        }\n        var substrFrom = 0, result = '';\n        for (var i = 0, len = replaceString.length; i < len; i++) {\n            var chCode = replaceString.charCodeAt(i);\n            if (chCode === charCode_1.CharCode.Backslash) {\n                // move to next char\n                i++;\n                if (i >= len) {\n                    // string ends with a \\\n                    break;\n                }\n                var nextChCode = replaceString.charCodeAt(i);\n                var replaceWithCharacter = null;\n                switch (nextChCode) {\n                    case charCode_1.CharCode.Backslash:\n                        // \\\\ => \\\n                        replaceWithCharacter = '\\\\';\n                        break;\n                    case charCode_1.CharCode.n:\n                        // \\n => LF\n                        replaceWithCharacter = '\\n';\n                        break;\n                    case charCode_1.CharCode.t:\n                        // \\t => TAB\n                        replaceWithCharacter = '\\t';\n                        break;\n                }\n                if (replaceWithCharacter) {\n                    result += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n                    substrFrom = i + 1;\n                }\n            }\n            if (chCode === charCode_1.CharCode.DollarSign) {\n                // move to next char\n                i++;\n                if (i >= len) {\n                    // string ends with a $\n                    break;\n                }\n                var nextChCode = replaceString.charCodeAt(i);\n                var replaceWithCharacter = null;\n                switch (nextChCode) {\n                    case charCode_1.CharCode.Digit0:\n                        // $0 => $&\n                        replaceWithCharacter = '$&';\n                        this._hasParameters = true;\n                        break;\n                    case charCode_1.CharCode.BackTick:\n                    case charCode_1.CharCode.SingleQuote:\n                        this._hasParameters = true;\n                        break;\n                    default:\n                        // check if it is a valid string parameter $n (0 <= n <= 99). $0 is already handled by now.\n                        if (!this.between(nextChCode, charCode_1.CharCode.Digit1, charCode_1.CharCode.Digit9)) {\n                            break;\n                        }\n                        if (i === replaceString.length - 1) {\n                            this._hasParameters = true;\n                            break;\n                        }\n                        var charCode = replaceString.charCodeAt(++i);\n                        if (!this.between(charCode, charCode_1.CharCode.Digit0, charCode_1.CharCode.Digit9)) {\n                            this._hasParameters = true;\n                            --i;\n                            break;\n                        }\n                        if (i === replaceString.length - 1) {\n                            this._hasParameters = true;\n                            break;\n                        }\n                        charCode = replaceString.charCodeAt(++i);\n                        if (!this.between(charCode, charCode_1.CharCode.Digit0, charCode_1.CharCode.Digit9)) {\n                            this._hasParameters = true;\n                            --i;\n                            break;\n                        }\n                        break;\n                }\n                if (replaceWithCharacter) {\n                    result += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n                    substrFrom = i + 1;\n                }\n            }\n        }\n        if (substrFrom === 0) {\n            // no replacement occurred\n            return;\n        }\n        this._replacePattern = result + replaceString.substring(substrFrom);\n    };\n    ReplacePattern.prototype.between = function (value, from, to) {\n        return from <= value && value <= to;\n    };\n    return ReplacePattern;\n}());\nexports.ReplacePattern = ReplacePattern;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/search/common/replace.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { IPatternInfo } from 'vs/workbench/services/search/common/search';\nimport { CharCode } from 'vs/base/common/charCode';\n\nexport class ReplacePattern {\n\n\tprivate _replacePattern: string;\n\tprivate _hasParameters: boolean = false;\n\tprivate _regExp: RegExp;\n\n\tconstructor(replaceString: string, searchPatternInfo: IPatternInfo)\n\tconstructor(replaceString: string, parseParameters: boolean, regEx: RegExp)\n\tconstructor(replaceString: string, arg2: any, arg3?: any) {\n\t\tthis._replacePattern = replaceString;\n\t\tlet searchPatternInfo: IPatternInfo;\n\t\tlet parseParameters: boolean;\n\t\tif (typeof arg2 === 'boolean') {\n\t\t\tparseParameters = arg2;\n\t\t\tthis._regExp = arg3;\n\n\t\t} else {\n\t\t\tsearchPatternInfo = arg2;\n\t\t\tparseParameters = !!searchPatternInfo.isRegExp;\n\t\t\tthis._regExp = strings.createRegExp(searchPatternInfo.pattern, !!searchPatternInfo.isRegExp, { matchCase: searchPatternInfo.isCaseSensitive, wholeWord: searchPatternInfo.isWordMatch, multiline: searchPatternInfo.isMultiline, global: false });\n\t\t}\n\n\t\tif (parseParameters) {\n\t\t\tthis.parseReplaceString(replaceString);\n\t\t}\n\n\t\tif (this._regExp.global) {\n\t\t\tthis._regExp = strings.createRegExp(this._regExp.source, true, { matchCase: !this._regExp.ignoreCase, wholeWord: false, multiline: this._regExp.multiline, global: false });\n\t\t}\n\t}\n\n\tget hasParameters(): boolean {\n\t\treturn this._hasParameters;\n\t}\n\n\tget pattern(): string {\n\t\treturn this._replacePattern;\n\t}\n\n\tget regExp(): RegExp {\n\t\treturn this._regExp;\n\t}\n\n\t/**\n\t* Returns the replace string for the first match in the given text.\n\t* If text has no matches then returns null.\n\t*/\n\tgetReplaceString(text: string): string | null {\n\t\tthis._regExp.lastIndex = 0;\n\t\tlet match = this._regExp.exec(text);\n\t\tif (match) {\n\t\t\tif (this.hasParameters) {\n\t\t\t\tif (match[0] === text) {\n\t\t\t\t\treturn text.replace(this._regExp, this.pattern);\n\t\t\t\t}\n\t\t\t\tlet replaceString = text.replace(this._regExp, this.pattern);\n\t\t\t\treturn replaceString.substr(match.index, match[0].length - (text.length - replaceString.length));\n\t\t\t}\n\t\t\treturn this.pattern;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * \\n => LF\n\t * \\t => TAB\n\t * \\\\ => \\\n\t * $0 => $& (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter)\n\t * everything else stays untouched\n\t */\n\tprivate parseReplaceString(replaceString: string): void {\n\t\tif (!replaceString || replaceString.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet substrFrom = 0, result = '';\n\t\tfor (let i = 0, len = replaceString.length; i < len; i++) {\n\t\t\tlet chCode = replaceString.charCodeAt(i);\n\n\t\t\tif (chCode === CharCode.Backslash) {\n\n\t\t\t\t// move to next char\n\t\t\t\ti++;\n\n\t\t\t\tif (i >= len) {\n\t\t\t\t\t// string ends with a \\\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet nextChCode = replaceString.charCodeAt(i);\n\t\t\t\tlet replaceWithCharacter: string | null = null;\n\n\t\t\t\tswitch (nextChCode) {\n\t\t\t\t\tcase CharCode.Backslash:\n\t\t\t\t\t\t// \\\\ => \\\n\t\t\t\t\t\treplaceWithCharacter = '\\\\';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.n:\n\t\t\t\t\t\t// \\n => LF\n\t\t\t\t\t\treplaceWithCharacter = '\\n';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.t:\n\t\t\t\t\t\t// \\t => TAB\n\t\t\t\t\t\treplaceWithCharacter = '\\t';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (replaceWithCharacter) {\n\t\t\t\t\tresult += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n\t\t\t\t\tsubstrFrom = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (chCode === CharCode.DollarSign) {\n\n\t\t\t\t// move to next char\n\t\t\t\ti++;\n\n\t\t\t\tif (i >= len) {\n\t\t\t\t\t// string ends with a $\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet nextChCode = replaceString.charCodeAt(i);\n\t\t\t\tlet replaceWithCharacter: string | null = null;\n\n\t\t\t\tswitch (nextChCode) {\n\t\t\t\t\tcase CharCode.Digit0:\n\t\t\t\t\t\t// $0 => $&\n\t\t\t\t\t\treplaceWithCharacter = '$&';\n\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase CharCode.BackTick:\n\t\t\t\t\tcase CharCode.SingleQuote:\n\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// check if it is a valid string parameter $n (0 <= n <= 99). $0 is already handled by now.\n\t\t\t\t\t\tif (!this.between(nextChCode, CharCode.Digit1, CharCode.Digit9)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i === replaceString.length - 1) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet charCode = replaceString.charCodeAt(++i);\n\t\t\t\t\t\tif (!this.between(charCode, CharCode.Digit0, CharCode.Digit9)) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i === replaceString.length - 1) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcharCode = replaceString.charCodeAt(++i);\n\t\t\t\t\t\tif (!this.between(charCode, CharCode.Digit0, CharCode.Digit9)) {\n\t\t\t\t\t\t\tthis._hasParameters = true;\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (replaceWithCharacter) {\n\t\t\t\t\tresult += replaceString.substring(substrFrom, i - 1) + replaceWithCharacter;\n\t\t\t\t\tsubstrFrom = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (substrFrom === 0) {\n\t\t\t// no replacement occurred\n\t\t\treturn;\n\t\t}\n\n\t\tthis._replacePattern = result + replaceString.substring(substrFrom);\n\t}\n\n\tprivate between(value: number, from: number, to: number): boolean {\n\t\treturn from <= value && value <= to;\n\t}\n}\n"]}]}