{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar map_1 = require(\"vs/base/common/map\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar workbenchCommonProperties_1 = require(\"vs/platform/telemetry/node/workbenchCommonProperties\");\nvar GlobalStorageDatabaseChannel = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalStorageDatabaseChannel, _super);\n    function GlobalStorageDatabaseChannel(logService, storageMainService) {\n        var _this = _super.call(this) || this;\n        _this.logService = logService;\n        _this.storageMainService = storageMainService;\n        _this._onDidChangeItems = _this._register(new event_1.Emitter());\n        _this.whenReady = _this.init();\n        return _this;\n    }\n    Object.defineProperty(GlobalStorageDatabaseChannel.prototype, \"onDidChangeItems\", {\n        get: function () { return this._onDidChangeItems.event; },\n        enumerable: true,\n        configurable: true\n    });\n    GlobalStorageDatabaseChannel.prototype.init = function () {\n        var _this = this;\n        return this.storageMainService.initialize().then(undefined, function (error) {\n            errors_1.onUnexpectedError(error);\n            _this.logService.error(error);\n        }).then(function () {\n            // Apply global telemetry values as part of the initialization\n            // These are global across all windows and thereby should be\n            // written from the main process once.\n            _this.initTelemetry();\n            // Setup storage change listeners\n            _this.registerListeners();\n        });\n    };\n    GlobalStorageDatabaseChannel.prototype.initTelemetry = function () {\n        var instanceId = this.storageMainService.get(workbenchCommonProperties_1.instanceStorageKey, undefined);\n        if (instanceId === undefined) {\n            this.storageMainService.store(workbenchCommonProperties_1.instanceStorageKey, uuid_1.generateUuid());\n        }\n        var firstSessionDate = this.storageMainService.get(workbenchCommonProperties_1.firstSessionDateStorageKey, undefined);\n        if (firstSessionDate === undefined) {\n            this.storageMainService.store(workbenchCommonProperties_1.firstSessionDateStorageKey, new Date().toUTCString());\n        }\n        var lastSessionDate = this.storageMainService.get(workbenchCommonProperties_1.currentSessionDateStorageKey, undefined); // previous session date was the \"current\" one at that time\n        var currentSessionDate = new Date().toUTCString(); // current session date is \"now\"\n        this.storageMainService.store(workbenchCommonProperties_1.lastSessionDateStorageKey, typeof lastSessionDate === 'undefined' ? null : lastSessionDate);\n        this.storageMainService.store(workbenchCommonProperties_1.currentSessionDateStorageKey, currentSessionDate);\n    };\n    GlobalStorageDatabaseChannel.prototype.registerListeners = function () {\n        var _this = this;\n        // Listen for changes in global storage to send to listeners\n        // that are listening. Use a debouncer to reduce IPC traffic.\n        this._register(event_1.Event.debounce(this.storageMainService.onDidChangeStorage, function (prev, cur) {\n            if (!prev) {\n                prev = [cur];\n            }\n            else {\n                prev.push(cur);\n            }\n            return prev;\n        }, GlobalStorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME)(function (events) {\n            if (events.length) {\n                _this._onDidChangeItems.fire(_this.serializeEvents(events));\n            }\n        }));\n    };\n    GlobalStorageDatabaseChannel.prototype.serializeEvents = function (events) {\n        var _this = this;\n        var items = new Map();\n        events.forEach(function (event) { return items.set(event.key, _this.storageMainService.get(event.key)); });\n        return { items: map_1.mapToSerializable(items) };\n    };\n    GlobalStorageDatabaseChannel.prototype.listen = function (_, event) {\n        switch (event) {\n            case 'onDidChangeItems': return this.onDidChangeItems;\n        }\n        throw new Error(\"Event not found: \" + event);\n    };\n    GlobalStorageDatabaseChannel.prototype.call = function (_, command, arg) {\n        var _this = this;\n        switch (command) {\n            case 'getItems': {\n                return this.whenReady.then(function () { return map_1.mapToSerializable(_this.storageMainService.items); });\n            }\n            case 'updateItems': {\n                return this.whenReady.then(function () {\n                    var items = arg;\n                    if (items.insert) {\n                        for (var _i = 0, _a = items.insert; _i < _a.length; _i++) {\n                            var _b = _a[_i], key = _b[0], value = _b[1];\n                            _this.storageMainService.store(key, value);\n                        }\n                    }\n                    if (items.delete) {\n                        items.delete.forEach(function (key) { return _this.storageMainService.remove(key); });\n                    }\n                });\n            }\n            case 'checkIntegrity': {\n                return this.whenReady.then(function () { return _this.storageMainService.checkIntegrity(arg); });\n            }\n        }\n        throw new Error(\"Call not found: \" + command);\n    };\n    GlobalStorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n    return GlobalStorageDatabaseChannel;\n}(lifecycle_1.Disposable));\nexports.GlobalStorageDatabaseChannel = GlobalStorageDatabaseChannel;\nvar GlobalStorageDatabaseChannelClient = /** @class */ (function (_super) {\n    tslib_1.__extends(GlobalStorageDatabaseChannelClient, _super);\n    function GlobalStorageDatabaseChannelClient(channel) {\n        var _this = _super.call(this) || this;\n        _this.channel = channel;\n        _this._onDidChangeItemsExternal = _this._register(new event_1.Emitter());\n        _this.registerListeners();\n        return _this;\n    }\n    Object.defineProperty(GlobalStorageDatabaseChannelClient.prototype, \"onDidChangeItemsExternal\", {\n        get: function () { return this._onDidChangeItemsExternal.event; },\n        enumerable: true,\n        configurable: true\n    });\n    GlobalStorageDatabaseChannelClient.prototype.registerListeners = function () {\n        var _this = this;\n        this.onDidChangeItemsOnMainListener = this.channel.listen('onDidChangeItems')(function (e) { return _this.onDidChangeItemsOnMain(e); });\n    };\n    GlobalStorageDatabaseChannelClient.prototype.onDidChangeItemsOnMain = function (e) {\n        if (Array.isArray(e.items)) {\n            this._onDidChangeItemsExternal.fire({ items: map_1.serializableToMap(e.items) });\n        }\n    };\n    GlobalStorageDatabaseChannelClient.prototype.getItems = function () {\n        return this.channel.call('getItems').then(function (data) { return map_1.serializableToMap(data); });\n    };\n    GlobalStorageDatabaseChannelClient.prototype.updateItems = function (request) {\n        var updateCount = 0;\n        var serializableRequest = Object.create(null);\n        if (request.insert) {\n            serializableRequest.insert = map_1.mapToSerializable(request.insert);\n            updateCount += request.insert.size;\n        }\n        if (request.delete) {\n            serializableRequest.delete = map_1.values(request.delete);\n            updateCount += request.delete.size;\n        }\n        if (updateCount === 0) {\n            return Promise.resolve(); // prevent work if not needed\n        }\n        return this.channel.call('updateItems', serializableRequest);\n    };\n    GlobalStorageDatabaseChannelClient.prototype.checkIntegrity = function (full) {\n        return this.channel.call('checkIntegrity', full);\n    };\n    GlobalStorageDatabaseChannelClient.prototype.close = function () {\n        // when we are about to close, we start to ignore main-side changes since we close anyway\n        this.onDidChangeItemsOnMainListener = lifecycle_1.dispose(this.onDidChangeItemsOnMainListener);\n        return Promise.resolve(); // global storage is closed on the main side\n    };\n    GlobalStorageDatabaseChannelClient.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.onDidChangeItemsOnMainListener = lifecycle_1.dispose(this.onDidChangeItemsOnMainListener);\n    };\n    return GlobalStorageDatabaseChannelClient;\n}(lifecycle_1.Disposable));\nexports.GlobalStorageDatabaseChannelClient = GlobalStorageDatabaseChannelClient;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageIpc.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/storage/node/storageIpc.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAGhG,8CAAsD;AAGtD,0CAAkF;AAClF,sDAA4E;AAC5E,gDAA0D;AAE1D,4CAAmD;AACnD,kGAA+K;AAe/K;IAAkD,wDAAU;IAS3D,sCACS,UAAuB,EACvB,kBAAsC;QAF/C,YAIC,iBAAO,SAGP;QANQ,gBAAU,GAAV,UAAU,CAAa;QACvB,wBAAkB,GAAlB,kBAAkB,CAAoB;QAP9B,uBAAiB,GAA2C,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAAiC,CAAC,CAAC;QAWzI,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,IAAI,EAAE,CAAC;;IAC9B,CAAC;IAXD,sBAAI,0DAAgB;aAApB,cAA+D,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAa7F,2CAAI,GAAZ;QAAA,iBAcC;QAbA,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,UAAA,KAAK;YAChE,0BAAiB,CAAC,KAAK,CAAC,CAAC;YACzB,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC,IAAI,CAAC;YAEP,8DAA8D;YAC9D,4DAA4D;YAC5D,sCAAsC;YACtC,KAAI,CAAC,aAAa,EAAE,CAAC;YAErB,iCAAiC;YACjC,KAAI,CAAC,iBAAiB,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;IACJ,CAAC;IAEO,oDAAa,GAArB;QACC,IAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,8CAAkB,EAAE,SAAS,CAAC,CAAC;QAC9E,IAAI,UAAU,KAAK,SAAS,EAAE;YAC7B,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,8CAAkB,EAAE,mBAAY,EAAE,CAAC,CAAC;SAClE;QAED,IAAM,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,sDAA0B,EAAE,SAAS,CAAC,CAAC;QAC5F,IAAI,gBAAgB,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,sDAA0B,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;SACpF;QAED,IAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,wDAA4B,EAAE,SAAS,CAAC,CAAC,CAAC,2DAA2D;QACzJ,IAAM,kBAAkB,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,gCAAgC;QACrF,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,qDAAyB,EAAE,OAAO,eAAe,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC;QAC1H,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,wDAA4B,EAAE,kBAAkB,CAAC,CAAC;IACjF,CAAC;IAEO,wDAAiB,GAAzB;QAAA,iBAiBC;QAfA,4DAA4D;QAC5D,6DAA6D;QAC7D,IAAI,CAAC,SAAS,CAAC,aAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,UAAC,IAA2B,EAAE,GAAwB;YAC/H,IAAI,CAAC,IAAI,EAAE;gBACV,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;aACb;iBAAM;gBACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACf;YAED,OAAO,IAAI,CAAC;QACb,CAAC,EAAE,4BAA4B,CAAC,4BAA4B,CAAC,CAAC,UAAA,MAAM;YACnE,IAAI,MAAM,CAAC,MAAM,EAAE;gBAClB,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC;aAC1D;QACF,CAAC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,sDAAe,GAAvB,UAAwB,MAA6B;QAArD,iBAKC;QAJA,IAAM,KAAK,GAAG,IAAI,GAAG,EAAc,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAA5D,CAA4D,CAAC,CAAC;QAEtF,OAAO,EAAE,KAAK,EAAE,uBAAiB,CAAC,KAAK,CAAC,EAAmC,CAAC;IAC7E,CAAC;IAED,6CAAM,GAAN,UAAO,CAAU,EAAE,KAAa;QAC/B,QAAQ,KAAK,EAAE;YACd,KAAK,kBAAkB,CAAC,CAAC,OAAO,IAAI,CAAC,gBAAgB,CAAC;SACtD;QAED,MAAM,IAAI,KAAK,CAAC,sBAAoB,KAAO,CAAC,CAAC;IAC9C,CAAC;IAED,2CAAI,GAAJ,UAAK,CAAU,EAAE,OAAe,EAAE,GAAS;QAA3C,iBA2BC;QA1BA,QAAQ,OAAO,EAAE;YAChB,KAAK,UAAU,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAM,OAAA,uBAAiB,CAAC,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAhD,CAAgD,CAAC,CAAC;aACnF;YAED,KAAK,aAAa,CAAC,CAAC;gBACnB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;oBAC1B,IAAM,KAAK,GAAG,GAAiC,CAAC;oBAChD,IAAI,KAAK,CAAC,MAAM,EAAE;wBACjB,KAA2B,UAAY,EAAZ,KAAA,KAAK,CAAC,MAAM,EAAZ,cAAY,EAAZ,IAAY,EAAE;4BAA9B,IAAA,WAAY,EAAX,WAAG,EAAE,aAAK;4BACrB,KAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;yBAC1C;qBACD;oBAED,IAAI,KAAK,CAAC,MAAM,EAAE;wBACjB,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAnC,CAAmC,CAAC,CAAC;qBACjE;gBACF,CAAC,CAAC,CAAC;aACH;YAED,KAAK,gBAAgB,CAAC,CAAC;gBACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,EAA3C,CAA2C,CAAC,CAAC;aAC9E;SACD;QAED,MAAM,IAAI,KAAK,CAAC,qBAAmB,OAAS,CAAC,CAAC;IAC/C,CAAC;IA9Gc,yDAA4B,GAAG,GAAG,CAAC;IA+GnD,mCAAC;CAAA,AAjHD,CAAkD,sBAAU,GAiH3D;AAjHY,oEAA4B;AAmHzC;IAAwD,8DAAU;IASjE,4CAAoB,OAAiB;QAArC,YACC,iBAAO,SAGP;QAJmB,aAAO,GAAP,OAAO,CAAU;QALpB,+BAAyB,GAAsC,KAAI,CAAC,SAAS,CAAC,IAAI,eAAO,EAA4B,CAAC,CAAC;QAQvI,KAAI,CAAC,iBAAiB,EAAE,CAAC;;IAC1B,CAAC;IARD,sBAAI,wEAAwB;aAA5B,cAAkE,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAUxG,8DAAiB,GAAzB;QAAA,iBAEC;QADA,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,UAAC,CAAgC,IAAK,OAAA,KAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,EAA9B,CAA8B,CAAC,CAAC;IACrJ,CAAC;IAEO,mEAAsB,GAA9B,UAA+B,CAAgC;QAC9D,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YAC3B,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;SAC3E;IACF,CAAC;IAED,qDAAQ,GAAR;QACC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,uBAAiB,CAAC,IAAI,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACtF,CAAC;IAED,wDAAW,GAAX,UAAY,OAAuB;QAClC,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAM,mBAAmB,GAA+B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE5E,IAAI,OAAO,CAAC,MAAM,EAAE;YACnB,mBAAmB,CAAC,MAAM,GAAG,uBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC/D,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;SACnC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YACnB,mBAAmB,CAAC,MAAM,GAAG,YAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACpD,WAAW,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;SACnC;QAED,IAAI,WAAW,KAAK,CAAC,EAAE;YACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,6BAA6B;SACvD;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;IAC9D,CAAC;IAED,2DAAc,GAAd,UAAe,IAAa;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,kDAAK,GAAL;QAEC,yFAAyF;QACzF,IAAI,CAAC,8BAA8B,GAAG,mBAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;QAEnF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,4CAA4C;IACvE,CAAC;IAED,oDAAO,GAAP;QACC,iBAAM,OAAO,WAAE,CAAC;QAEhB,IAAI,CAAC,8BAA8B,GAAG,mBAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;IACpF,CAAC;IACF,yCAAC;AAAD,CAAC,AAnED,CAAwD,sBAAU,GAmEjE;AAnEY,gFAAkC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { StorageMainService, IStorageChangeEvent } from 'vs/platform/storage/node/storageMainService';\nimport { IUpdateRequest, IStorageDatabase, IStorageItemsChangeEvent } from 'vs/base/node/storage';\nimport { mapToSerializable, serializableToMap, values } from 'vs/base/common/map';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { instanceStorageKey, firstSessionDateStorageKey, lastSessionDateStorageKey, currentSessionDateStorageKey } from 'vs/platform/telemetry/node/workbenchCommonProperties';\n\ntype Key = string;\ntype Value = string;\ntype Item = [Key, Value];\n\ninterface ISerializableUpdateRequest {\n\tinsert?: Item[];\n\tdelete?: Key[];\n}\n\ninterface ISerializableItemsChangeEvent {\n\titems: Item[];\n}\n\nexport class GlobalStorageDatabaseChannel extends Disposable implements IServerChannel {\n\n\tprivate static STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n\n\tprivate readonly _onDidChangeItems: Emitter<ISerializableItemsChangeEvent> = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\tget onDidChangeItems(): Event<ISerializableItemsChangeEvent> { return this._onDidChangeItems.event; }\n\n\tprivate whenReady: Promise<void>;\n\n\tconstructor(\n\t\tprivate logService: ILogService,\n\t\tprivate storageMainService: StorageMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.whenReady = this.init();\n\t}\n\n\tprivate init(): Promise<void> {\n\t\treturn this.storageMainService.initialize().then(undefined, error => {\n\t\t\tonUnexpectedError(error);\n\t\t\tthis.logService.error(error);\n\t\t}).then(() => {\n\n\t\t\t// Apply global telemetry values as part of the initialization\n\t\t\t// These are global across all windows and thereby should be\n\t\t\t// written from the main process once.\n\t\t\tthis.initTelemetry();\n\n\t\t\t// Setup storage change listeners\n\t\t\tthis.registerListeners();\n\t\t});\n\t}\n\n\tprivate initTelemetry(): void {\n\t\tconst instanceId = this.storageMainService.get(instanceStorageKey, undefined);\n\t\tif (instanceId === undefined) {\n\t\t\tthis.storageMainService.store(instanceStorageKey, generateUuid());\n\t\t}\n\n\t\tconst firstSessionDate = this.storageMainService.get(firstSessionDateStorageKey, undefined);\n\t\tif (firstSessionDate === undefined) {\n\t\t\tthis.storageMainService.store(firstSessionDateStorageKey, new Date().toUTCString());\n\t\t}\n\n\t\tconst lastSessionDate = this.storageMainService.get(currentSessionDateStorageKey, undefined); // previous session date was the \"current\" one at that time\n\t\tconst currentSessionDate = new Date().toUTCString(); // current session date is \"now\"\n\t\tthis.storageMainService.store(lastSessionDateStorageKey, typeof lastSessionDate === 'undefined' ? null : lastSessionDate);\n\t\tthis.storageMainService.store(currentSessionDateStorageKey, currentSessionDate);\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Listen for changes in global storage to send to listeners\n\t\t// that are listening. Use a debouncer to reduce IPC traffic.\n\t\tthis._register(Event.debounce(this.storageMainService.onDidChangeStorage, (prev: IStorageChangeEvent[], cur: IStorageChangeEvent) => {\n\t\t\tif (!prev) {\n\t\t\t\tprev = [cur];\n\t\t\t} else {\n\t\t\t\tprev.push(cur);\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t}, GlobalStorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME)(events => {\n\t\t\tif (events.length) {\n\t\t\t\tthis._onDidChangeItems.fire(this.serializeEvents(events));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate serializeEvents(events: IStorageChangeEvent[]): ISerializableItemsChangeEvent {\n\t\tconst items = new Map<Key, Value>();\n\t\tevents.forEach(event => items.set(event.key, this.storageMainService.get(event.key)));\n\n\t\treturn { items: mapToSerializable(items) } as ISerializableItemsChangeEvent;\n\t}\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeItems': return this.onDidChangeItems;\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tcall(_: unknown, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'getItems': {\n\t\t\t\treturn this.whenReady.then(() => mapToSerializable(this.storageMainService.items));\n\t\t\t}\n\n\t\t\tcase 'updateItems': {\n\t\t\t\treturn this.whenReady.then(() => {\n\t\t\t\t\tconst items = arg as ISerializableUpdateRequest;\n\t\t\t\t\tif (items.insert) {\n\t\t\t\t\t\tfor (const [key, value] of items.insert) {\n\t\t\t\t\t\t\tthis.storageMainService.store(key, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (items.delete) {\n\t\t\t\t\t\titems.delete.forEach(key => this.storageMainService.remove(key));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcase 'checkIntegrity': {\n\t\t\t\treturn this.whenReady.then(() => this.storageMainService.checkIntegrity(arg));\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n}\n\nexport class GlobalStorageDatabaseChannelClient extends Disposable implements IStorageDatabase {\n\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChangeItemsExternal: Emitter<IStorageItemsChangeEvent> = this._register(new Emitter<IStorageItemsChangeEvent>());\n\tget onDidChangeItemsExternal(): Event<IStorageItemsChangeEvent> { return this._onDidChangeItemsExternal.event; }\n\n\tprivate onDidChangeItemsOnMainListener: IDisposable;\n\n\tconstructor(private channel: IChannel) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.onDidChangeItemsOnMainListener = this.channel.listen('onDidChangeItems')((e: ISerializableItemsChangeEvent) => this.onDidChangeItemsOnMain(e));\n\t}\n\n\tprivate onDidChangeItemsOnMain(e: ISerializableItemsChangeEvent): void {\n\t\tif (Array.isArray(e.items)) {\n\t\t\tthis._onDidChangeItemsExternal.fire({ items: serializableToMap(e.items) });\n\t\t}\n\t}\n\n\tgetItems(): Promise<Map<string, string>> {\n\t\treturn this.channel.call('getItems').then((data: Item[]) => serializableToMap(data));\n\t}\n\n\tupdateItems(request: IUpdateRequest): Promise<void> {\n\t\tlet updateCount = 0;\n\t\tconst serializableRequest: ISerializableUpdateRequest = Object.create(null);\n\n\t\tif (request.insert) {\n\t\t\tserializableRequest.insert = mapToSerializable(request.insert);\n\t\t\tupdateCount += request.insert.size;\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\tserializableRequest.delete = values(request.delete);\n\t\t\tupdateCount += request.delete.size;\n\t\t}\n\n\t\tif (updateCount === 0) {\n\t\t\treturn Promise.resolve(); // prevent work if not needed\n\t\t}\n\n\t\treturn this.channel.call('updateItems', serializableRequest);\n\t}\n\n\tcheckIntegrity(full: boolean): Promise<string> {\n\t\treturn this.channel.call('checkIntegrity', full);\n\t}\n\n\tclose(): Promise<void> {\n\n\t\t// when we are about to close, we start to ignore main-side changes since we close anyway\n\t\tthis.onDidChangeItemsOnMainListener = dispose(this.onDidChangeItemsOnMainListener);\n\n\t\treturn Promise.resolve(); // global storage is closed on the main side\n\t}\n\n\tdispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.onDidChangeItemsOnMainListener = dispose(this.onDidChangeItemsOnMainListener);\n\t}\n}"]}]}