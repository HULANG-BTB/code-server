{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/explorerViewlet.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/explorerViewlet.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nrequire(\"vs/css!./media/explorerviewlet\");\nvar nls_1 = require(\"vs/nls\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar viewsViewlet_1 = require(\"vs/workbench/browser/parts/views/viewsViewlet\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar explorerView_1 = require(\"vs/workbench/contrib/files/browser/views/explorerView\");\nvar emptyView_1 = require(\"vs/workbench/contrib/files/browser/views/emptyView\");\nvar openEditorsView_1 = require(\"vs/workbench/contrib/files/browser/views/openEditorsView\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar serviceCollection_1 = require(\"vs/platform/instantiation/common/serviceCollection\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/browser/editorService\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar editorService_2 = require(\"vs/workbench/services/editor/common/editorService\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar ExplorerViewletViewsContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(ExplorerViewletViewsContribution, _super);\n    function ExplorerViewletViewsContribution(workspaceContextService, configurationService, contextKeyService) {\n        var _this = _super.call(this) || this;\n        _this.workspaceContextService = workspaceContextService;\n        _this.configurationService = configurationService;\n        _this.registerViews();\n        _this.openEditorsVisibleContextKey = files_1.OpenEditorsVisibleContext.bindTo(contextKeyService);\n        _this.updateOpenEditorsVisibility();\n        _this._register(workspaceContextService.onDidChangeWorkbenchState(function () { return _this.registerViews(); }));\n        _this._register(workspaceContextService.onDidChangeWorkspaceFolders(function () { return _this.registerViews(); }));\n        _this._register(_this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(e); }));\n        return _this;\n    }\n    ExplorerViewletViewsContribution.prototype.registerViews = function () {\n        var viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\n        var viewDescriptors = viewsRegistry.getViews(files_1.VIEW_CONTAINER);\n        var viewDescriptorsToRegister = [];\n        var viewDescriptorsToDeregister = [];\n        var openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();\n        if (!viewDescriptors.some(function (v) { return v.id === openEditorsViewDescriptor.id; })) {\n            viewDescriptorsToRegister.push(openEditorsViewDescriptor);\n        }\n        var explorerViewDescriptor = this.createExplorerViewDescriptor();\n        var registeredExplorerViewDescriptor = viewDescriptors.filter(function (v) { return v.id === explorerViewDescriptor.id; })[0];\n        var emptyViewDescriptor = this.createEmptyViewDescriptor();\n        var registeredEmptyViewDescriptor = viewDescriptors.filter(function (v) { return v.id === emptyViewDescriptor.id; })[0];\n        if (this.workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY || this.workspaceContextService.getWorkspace().folders.length === 0) {\n            if (registeredExplorerViewDescriptor) {\n                viewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);\n            }\n            if (!registeredEmptyViewDescriptor) {\n                viewDescriptorsToRegister.push(emptyViewDescriptor);\n            }\n        }\n        else {\n            if (registeredEmptyViewDescriptor) {\n                viewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);\n            }\n            if (!registeredExplorerViewDescriptor) {\n                viewDescriptorsToRegister.push(explorerViewDescriptor);\n            }\n        }\n        if (viewDescriptorsToRegister.length) {\n            viewsRegistry.registerViews(viewDescriptorsToRegister, files_1.VIEW_CONTAINER);\n        }\n        if (viewDescriptorsToDeregister.length) {\n            viewsRegistry.deregisterViews(viewDescriptorsToDeregister, files_1.VIEW_CONTAINER);\n        }\n    };\n    ExplorerViewletViewsContribution.prototype.createOpenEditorsViewDescriptor = function () {\n        return {\n            id: openEditorsView_1.OpenEditorsView.ID,\n            name: openEditorsView_1.OpenEditorsView.NAME,\n            ctorDescriptor: { ctor: openEditorsView_1.OpenEditorsView },\n            order: 0,\n            when: files_1.OpenEditorsVisibleCondition,\n            canToggleVisibility: true,\n            focusCommand: {\n                id: 'workbench.files.action.focusOpenEditorsView',\n                keybindings: { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_E) }\n            }\n        };\n    };\n    ExplorerViewletViewsContribution.prototype.createEmptyViewDescriptor = function () {\n        return {\n            id: emptyView_1.EmptyView.ID,\n            name: emptyView_1.EmptyView.NAME,\n            ctorDescriptor: { ctor: emptyView_1.EmptyView },\n            order: 1,\n            canToggleVisibility: false\n        };\n    };\n    ExplorerViewletViewsContribution.prototype.createExplorerViewDescriptor = function () {\n        return {\n            id: explorerView_1.ExplorerView.ID,\n            name: nls_1.localize('folders', \"Folders\"),\n            ctorDescriptor: { ctor: explorerView_1.ExplorerView },\n            order: 1,\n            canToggleVisibility: false\n        };\n    };\n    ExplorerViewletViewsContribution.prototype.onConfigurationUpdated = function (e) {\n        if (e.affectsConfiguration('explorer.openEditors.visible')) {\n            this.updateOpenEditorsVisibility();\n        }\n    };\n    ExplorerViewletViewsContribution.prototype.updateOpenEditorsVisibility = function () {\n        this.openEditorsVisibleContextKey.set(this.workspaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY || this.configurationService.getValue('explorer.openEditors.visible') !== 0);\n    };\n    ExplorerViewletViewsContribution = tslib_1.__decorate([\n        tslib_1.__param(0, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(1, configuration_1.IConfigurationService),\n        tslib_1.__param(2, contextkey_1.IContextKeyService)\n    ], ExplorerViewletViewsContribution);\n    return ExplorerViewletViewsContribution;\n}(lifecycle_1.Disposable));\nexports.ExplorerViewletViewsContribution = ExplorerViewletViewsContribution;\nvar ExplorerViewlet = /** @class */ (function (_super) {\n    tslib_1.__extends(ExplorerViewlet, _super);\n    function ExplorerViewlet(layoutService, telemetryService, contextService, storageService, editorService, editorGroupService, configurationService, instantiationService, contextKeyService, themeService, contextMenuService, extensionService) {\n        var _this = _super.call(this, files_1.VIEWLET_ID, ExplorerViewlet.EXPLORER_VIEWS_STATE, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) || this;\n        _this.contextService = contextService;\n        _this.storageService = storageService;\n        _this.editorService = editorService;\n        _this.editorGroupService = editorGroupService;\n        _this.instantiationService = instantiationService;\n        _this.viewletVisibleContextKey = files_1.ExplorerViewletVisibleContext.bindTo(contextKeyService);\n        _this._register(_this.contextService.onDidChangeWorkspaceName(function (e) { return _this.updateTitleArea(); }));\n        return _this;\n    }\n    ExplorerViewlet.prototype.create = function (parent) {\n        _super.prototype.create.call(this, parent);\n        DOM.addClass(parent, 'explorer-viewlet');\n    };\n    ExplorerViewlet.prototype.createView = function (viewDescriptor, options) {\n        var _this = this;\n        if (viewDescriptor.id === explorerView_1.ExplorerView.ID) {\n            // Create a delegating editor service for the explorer to be able to delay the refresh in the opened\n            // editors view above. This is a workaround for being able to double click on a file to make it pinned\n            // without causing the animation in the opened editors view to kick in and change scroll position.\n            // We try to be smart and only use the delay if we recognize that the user action is likely to cause\n            // a new entry in the opened editors view.\n            var delegatingEditorService = this.instantiationService.createInstance(editorService_1.DelegatingEditorService);\n            delegatingEditorService.setEditorOpenHandler(function (group, editor, options) {\n                var openEditorsView = _this.getOpenEditorsView();\n                if (openEditorsView) {\n                    var delay = 0;\n                    var config = _this.configurationService.getValue();\n                    var delayEditorOpeningInOpenedEditors = !!config.workbench.editor.enablePreview; // No need to delay if preview is disabled\n                    var activeGroup = _this.editorGroupService.activeGroup;\n                    if (delayEditorOpeningInOpenedEditors && group === activeGroup && !activeGroup.previewEditor) {\n                        delay = 250; // a new editor entry is likely because there is either no group or no preview in group\n                    }\n                    openEditorsView.setStructuralRefreshDelay(delay);\n                }\n                var onSuccessOrError = function (editor) {\n                    var openEditorsView = _this.getOpenEditorsView();\n                    if (openEditorsView) {\n                        openEditorsView.setStructuralRefreshDelay(0);\n                    }\n                    return editor;\n                };\n                return _this.editorService.openEditor(editor, options, group).then(onSuccessOrError, onSuccessOrError);\n            });\n            var explorerInstantiator = this.instantiationService.createChild(new serviceCollection_1.ServiceCollection([editorService_2.IEditorService, delegatingEditorService]));\n            return explorerInstantiator.createInstance(explorerView_1.ExplorerView, options);\n        }\n        return _super.prototype.createView.call(this, viewDescriptor, options);\n    };\n    ExplorerViewlet.prototype.getExplorerView = function () {\n        return this.getView(explorerView_1.ExplorerView.ID);\n    };\n    ExplorerViewlet.prototype.getOpenEditorsView = function () {\n        return this.getView(openEditorsView_1.OpenEditorsView.ID);\n    };\n    ExplorerViewlet.prototype.getEmptyView = function () {\n        return this.getView(emptyView_1.EmptyView.ID);\n    };\n    ExplorerViewlet.prototype.setVisible = function (visible) {\n        this.viewletVisibleContextKey.set(visible);\n        _super.prototype.setVisible.call(this, visible);\n    };\n    ExplorerViewlet.prototype.focus = function () {\n        var explorerView = this.getView(explorerView_1.ExplorerView.ID);\n        if (explorerView && explorerView.isExpanded()) {\n            explorerView.focus();\n        }\n        else {\n            _super.prototype.focus.call(this);\n        }\n    };\n    ExplorerViewlet.EXPLORER_VIEWS_STATE = 'workbench.explorer.views.state';\n    ExplorerViewlet = tslib_1.__decorate([\n        tslib_1.__param(0, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(1, telemetry_1.ITelemetryService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, editorService_2.IEditorService),\n        tslib_1.__param(5, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(6, configuration_1.IConfigurationService),\n        tslib_1.__param(7, instantiation_1.IInstantiationService),\n        tslib_1.__param(8, contextkey_1.IContextKeyService),\n        tslib_1.__param(9, themeService_1.IThemeService),\n        tslib_1.__param(10, contextView_1.IContextMenuService),\n        tslib_1.__param(11, extensions_1.IExtensionService)\n    ], ExplorerViewlet);\n    return ExplorerViewlet;\n}(viewsViewlet_1.ViewContainerViewlet));\nexports.ExplorerViewlet = ExplorerViewlet;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/explorerViewlet.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/explorerViewlet.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/explorerviewlet';\nimport { localize } from 'vs/nls';\nimport * as DOM from 'vs/base/browser/dom';\nimport { VIEWLET_ID, ExplorerViewletVisibleContext, IFilesConfiguration, OpenEditorsVisibleContext, OpenEditorsVisibleCondition, VIEW_CONTAINER } from 'vs/workbench/contrib/files/common/files';\nimport { ViewContainerViewlet, IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { ExplorerView } from 'vs/workbench/contrib/files/browser/views/explorerView';\nimport { EmptyView } from 'vs/workbench/contrib/files/browser/views/emptyView';\nimport { OpenEditorsView } from 'vs/workbench/contrib/files/browser/views/openEditorsView';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { BaseEditor } from 'vs/workbench/browser/parts/editor/baseEditor';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IViewsRegistry, IViewDescriptor, Extensions } from 'vs/workbench/common/views';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { DelegatingEditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorInput, IEditor } from 'vs/workbench/common/editor';\nimport { ViewletPanel } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { KeyChord, KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\nexport class ExplorerViewletViewsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate openEditorsVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerViews();\n\n\t\tthis.openEditorsVisibleContextKey = OpenEditorsVisibleContext.bindTo(contextKeyService);\n\t\tthis.updateOpenEditorsVisibility();\n\n\t\tthis._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));\n\t\tthis._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(e)));\n\t}\n\n\tprivate registerViews(): void {\n\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\t\tconst viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);\n\n\t\tlet viewDescriptorsToRegister: IViewDescriptor[] = [];\n\t\tlet viewDescriptorsToDeregister: IViewDescriptor[] = [];\n\n\t\tconst openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();\n\t\tif (!viewDescriptors.some(v => v.id === openEditorsViewDescriptor.id)) {\n\t\t\tviewDescriptorsToRegister.push(openEditorsViewDescriptor);\n\t\t}\n\n\t\tconst explorerViewDescriptor = this.createExplorerViewDescriptor();\n\t\tconst registeredExplorerViewDescriptor = viewDescriptors.filter(v => v.id === explorerViewDescriptor.id)[0];\n\t\tconst emptyViewDescriptor = this.createEmptyViewDescriptor();\n\t\tconst registeredEmptyViewDescriptor = viewDescriptors.filter(v => v.id === emptyViewDescriptor.id)[0];\n\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.workspaceContextService.getWorkspace().folders.length === 0) {\n\t\t\tif (registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(emptyViewDescriptor);\n\t\t\t}\n\t\t} else {\n\t\t\tif (registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(explorerViewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (viewDescriptorsToRegister.length) {\n\t\t\tviewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);\n\t\t}\n\t\tif (viewDescriptorsToDeregister.length) {\n\t\t\tviewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);\n\t\t}\n\t}\n\n\tprivate createOpenEditorsViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: OpenEditorsView.ID,\n\t\t\tname: OpenEditorsView.NAME,\n\t\t\tctorDescriptor: { ctor: OpenEditorsView },\n\t\t\torder: 0,\n\t\t\twhen: OpenEditorsVisibleCondition,\n\t\t\tcanToggleVisibility: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.files.action.focusOpenEditorsView',\n\t\t\t\tkeybindings: { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_E) }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createEmptyViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: EmptyView.ID,\n\t\t\tname: EmptyView.NAME,\n\t\t\tctorDescriptor: { ctor: EmptyView },\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: false\n\t\t};\n\t}\n\n\tprivate createExplorerViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: ExplorerView.ID,\n\t\t\tname: localize('folders', \"Folders\"),\n\t\t\tctorDescriptor: { ctor: ExplorerView },\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: false\n\t\t};\n\t}\n\n\tprivate onConfigurationUpdated(e: IConfigurationChangeEvent): void {\n\t\tif (e.affectsConfiguration('explorer.openEditors.visible')) {\n\t\t\tthis.updateOpenEditorsVisibility();\n\t\t}\n\t}\n\n\tprivate updateOpenEditorsVisibility(): void {\n\t\tthis.openEditorsVisibleContextKey.set(this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.configurationService.getValue('explorer.openEditors.visible') !== 0);\n\t}\n}\n\nexport class ExplorerViewlet extends ViewContainerViewlet {\n\n\tprivate static readonly EXPLORER_VIEWS_STATE = 'workbench.explorer.views.state';\n\n\tprivate viewletVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService protected contextService: IWorkspaceContextService,\n\t\t@IStorageService protected storageService: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService protected instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\tsuper(VIEWLET_ID, ExplorerViewlet.EXPLORER_VIEWS_STATE, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\n\t\tthis.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));\n\t}\n\n\tcreate(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tDOM.addClass(parent, 'explorer-viewlet');\n\t}\n\n\tprotected createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewletPanel {\n\t\tif (viewDescriptor.id === ExplorerView.ID) {\n\t\t\t// Create a delegating editor service for the explorer to be able to delay the refresh in the opened\n\t\t\t// editors view above. This is a workaround for being able to double click on a file to make it pinned\n\t\t\t// without causing the animation in the opened editors view to kick in and change scroll position.\n\t\t\t// We try to be smart and only use the delay if we recognize that the user action is likely to cause\n\t\t\t// a new entry in the opened editors view.\n\t\t\tconst delegatingEditorService = this.instantiationService.createInstance(DelegatingEditorService);\n\t\t\tdelegatingEditorService.setEditorOpenHandler((group: IEditorGroup, editor: IEditorInput, options?: IEditorOptions): Promise<IEditor | null> => {\n\t\t\t\tlet openEditorsView = this.getOpenEditorsView();\n\t\t\t\tif (openEditorsView) {\n\t\t\t\t\tlet delay = 0;\n\n\t\t\t\t\tconst config = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\t\t\tconst delayEditorOpeningInOpenedEditors = !!config.workbench.editor.enablePreview; // No need to delay if preview is disabled\n\n\t\t\t\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\t\t\t\tif (delayEditorOpeningInOpenedEditors && group === activeGroup && !activeGroup.previewEditor) {\n\t\t\t\t\t\tdelay = 250; // a new editor entry is likely because there is either no group or no preview in group\n\t\t\t\t\t}\n\n\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(delay);\n\t\t\t\t}\n\n\t\t\t\tconst onSuccessOrError = (editor: BaseEditor | null) => {\n\t\t\t\t\tconst openEditorsView = this.getOpenEditorsView();\n\t\t\t\t\tif (openEditorsView) {\n\t\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn editor;\n\t\t\t\t};\n\n\t\t\t\treturn this.editorService.openEditor(editor, options, group).then(onSuccessOrError, onSuccessOrError);\n\t\t\t});\n\n\t\t\tconst explorerInstantiator = this.instantiationService.createChild(new ServiceCollection([IEditorService, delegatingEditorService]));\n\t\t\treturn explorerInstantiator.createInstance(ExplorerView, options);\n\t\t}\n\t\treturn super.createView(viewDescriptor, options);\n\t}\n\n\tpublic getExplorerView(): ExplorerView {\n\t\treturn <ExplorerView>this.getView(ExplorerView.ID);\n\t}\n\n\tpublic getOpenEditorsView(): OpenEditorsView {\n\t\treturn <OpenEditorsView>this.getView(OpenEditorsView.ID);\n\t}\n\n\tpublic getEmptyView(): EmptyView {\n\t\treturn <EmptyView>this.getView(EmptyView.ID);\n\t}\n\n\tpublic setVisible(visible: boolean): void {\n\t\tthis.viewletVisibleContextKey.set(visible);\n\t\tsuper.setVisible(visible);\n\t}\n\n\tfocus(): void {\n\t\tconst explorerView = this.getView(ExplorerView.ID);\n\t\tif (explorerView && explorerView.isExpanded()) {\n\t\t\texplorerView.focus();\n\t\t} else {\n\t\t\tsuper.focus();\n\t\t}\n\t}\n}\n"]}]}