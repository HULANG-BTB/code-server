{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferencesSearch.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferencesSearch.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar strings = require(\"vs/base/common/strings\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar request_1 = require(\"vs/platform/request/node/request\");\nvar request_2 = require(\"vs/base/node/request\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar extensionManagement_1 = require(\"vs/platform/extensionManagement/common/extensionManagement\");\nvar log_1 = require(\"vs/platform/log/common/log\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar preferencesModels_1 = require(\"vs/workbench/services/preferences/common/preferencesModels\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar PreferencesSearchService = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesSearchService, _super);\n    function PreferencesSearchService(configurationService, environmentService, instantiationService, extensionManagementService, extensionEnablementService) {\n        var _this = _super.call(this) || this;\n        _this.configurationService = configurationService;\n        _this.environmentService = environmentService;\n        _this.instantiationService = instantiationService;\n        _this.extensionManagementService = extensionManagementService;\n        _this.extensionEnablementService = extensionEnablementService;\n        // This request goes to the shared process but results won't change during a window's lifetime, so cache the results.\n        _this._installedExtensions = _this.extensionManagementService.getInstalled(extensions_1.ExtensionType.User).then(function (exts) {\n            // Filter to enabled extensions that have settings\n            return exts\n                .filter(function (ext) { return _this.extensionEnablementService.isEnabled(ext); })\n                .filter(function (ext) { return ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration; })\n                .filter(function (ext) { return !!ext.identifier.uuid; });\n        });\n        return _this;\n    }\n    Object.defineProperty(PreferencesSearchService.prototype, \"remoteSearchAllowed\", {\n        get: function () {\n            var workbenchSettings = this.configurationService.getValue().workbench.settings;\n            if (!workbenchSettings.enableNaturalLanguageSearch) {\n                return false;\n            }\n            return !!this._endpoint.urlBase;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreferencesSearchService.prototype, \"_endpoint\", {\n        get: function () {\n            var workbenchSettings = this.configurationService.getValue().workbench.settings;\n            if (workbenchSettings.naturalLanguageSearchEndpoint) {\n                return {\n                    urlBase: workbenchSettings.naturalLanguageSearchEndpoint,\n                    key: workbenchSettings.naturalLanguageSearchKey\n                };\n            }\n            else {\n                return {\n                    urlBase: this.environmentService.settingsSearchUrl\n                };\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PreferencesSearchService.prototype.getRemoteSearchProvider = function (filter, newExtensionsOnly) {\n        if (newExtensionsOnly === void 0) { newExtensionsOnly = false; }\n        var opts = {\n            filter: filter,\n            newExtensionsOnly: newExtensionsOnly,\n            endpoint: this._endpoint\n        };\n        return this.remoteSearchAllowed ? this.instantiationService.createInstance(RemoteSearchProvider, opts, this._installedExtensions) : undefined;\n    };\n    PreferencesSearchService.prototype.getLocalSearchProvider = function (filter) {\n        return this.instantiationService.createInstance(LocalSearchProvider, filter);\n    };\n    PreferencesSearchService = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, environment_1.IEnvironmentService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, extensionManagement_1.IExtensionManagementService),\n        tslib_1.__param(4, extensionManagement_1.IExtensionEnablementService)\n    ], PreferencesSearchService);\n    return PreferencesSearchService;\n}(lifecycle_1.Disposable));\nexports.PreferencesSearchService = PreferencesSearchService;\nvar LocalSearchProvider = /** @class */ (function () {\n    function LocalSearchProvider(_filter) {\n        this._filter = _filter;\n        // Remove \" and : which are likely to be copypasted as part of a setting name.\n        // Leave other special characters which the user might want to search for.\n        this._filter = this._filter\n            .replace(/[\":]/g, ' ')\n            .replace(/  /g, ' ')\n            .trim();\n    }\n    LocalSearchProvider.prototype.searchModel = function (preferencesModel, token) {\n        var _this = this;\n        if (!this._filter) {\n            return Promise.resolve(null);\n        }\n        var orderedScore = LocalSearchProvider.START_SCORE; // Sort is not stable\n        var settingMatcher = function (setting) {\n            var matches = new SettingMatches(_this._filter, setting, true, true, function (filter, setting) { return preferencesModel.findValueMatches(filter, setting); }).matches;\n            var score = _this._filter === setting.key ?\n                LocalSearchProvider.EXACT_MATCH_SCORE :\n                orderedScore--;\n            return matches && matches.length ?\n                {\n                    matches: matches,\n                    score: score\n                } :\n                null;\n        };\n        var filterMatches = preferencesModel.filterSettings(this._filter, this.getGroupFilter(this._filter), settingMatcher);\n        if (filterMatches[0] && filterMatches[0].score === LocalSearchProvider.EXACT_MATCH_SCORE) {\n            return Promise.resolve({\n                filterMatches: filterMatches.slice(0, 1),\n                exactMatch: true\n            });\n        }\n        else {\n            return Promise.resolve({\n                filterMatches: filterMatches\n            });\n        }\n    };\n    LocalSearchProvider.prototype.getGroupFilter = function (filter) {\n        var regex = strings.createRegExp(filter, false, { global: true });\n        return function (group) {\n            return regex.test(group.title);\n        };\n    };\n    LocalSearchProvider.EXACT_MATCH_SCORE = 10000;\n    LocalSearchProvider.START_SCORE = 1000;\n    return LocalSearchProvider;\n}());\nexports.LocalSearchProvider = LocalSearchProvider;\nvar RemoteSearchProvider = /** @class */ (function () {\n    function RemoteSearchProvider(options, installedExtensions, environmentService, requestService, logService) {\n        this.options = options;\n        this.installedExtensions = installedExtensions;\n        this.environmentService = environmentService;\n        this.requestService = requestService;\n        this.logService = logService;\n        this._remoteSearchP = this.options.filter ?\n            Promise.resolve(this.getSettingsForFilter(this.options.filter)) :\n            Promise.resolve(null);\n    }\n    RemoteSearchProvider.prototype.searchModel = function (preferencesModel, token) {\n        var _this = this;\n        return this._remoteSearchP.then(function (remoteResult) {\n            if (!remoteResult) {\n                return null;\n            }\n            if (token && token.isCancellationRequested) {\n                throw errors_1.canceled();\n            }\n            var resultKeys = Object.keys(remoteResult.scoredResults);\n            var highScoreKey = arrays_1.top(resultKeys, function (a, b) { return remoteResult.scoredResults[b].score - remoteResult.scoredResults[a].score; }, 1)[0];\n            var highScore = highScoreKey ? remoteResult.scoredResults[highScoreKey].score : 0;\n            var minScore = highScore / 5;\n            if (_this.options.newExtensionsOnly) {\n                return _this.installedExtensions.then(function (installedExtensions) {\n                    var newExtsMinScore = Math.max(RemoteSearchProvider.NEW_EXTENSIONS_MIN_SCORE, minScore);\n                    var passingScoreKeys = resultKeys\n                        .filter(function (k) {\n                        var result = remoteResult.scoredResults[k];\n                        var resultExtId = (result.extensionPublisher + '.' + result.extensionName).toLowerCase();\n                        return !installedExtensions.some(function (ext) { return ext.identifier.id.toLowerCase() === resultExtId; });\n                    })\n                        .filter(function (k) { return remoteResult.scoredResults[k].score >= newExtsMinScore; });\n                    var filterMatches = passingScoreKeys.map(function (k) {\n                        var remoteSetting = remoteResult.scoredResults[k];\n                        var setting = remoteSettingToISetting(remoteSetting);\n                        return {\n                            setting: setting,\n                            score: remoteSetting.score,\n                            matches: [] // TODO\n                        };\n                    });\n                    return {\n                        filterMatches: filterMatches,\n                        metadata: remoteResult\n                    };\n                });\n            }\n            else {\n                var settingMatcher = _this.getRemoteSettingMatcher(remoteResult.scoredResults, minScore, preferencesModel);\n                var filterMatches = preferencesModel.filterSettings(_this.options.filter, function (group) { return null; }, settingMatcher);\n                return {\n                    filterMatches: filterMatches,\n                    metadata: remoteResult\n                };\n            }\n        });\n    };\n    RemoteSearchProvider.prototype.getSettingsForFilter = function (filter) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var allRequestDetails, i, details;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        allRequestDetails = [];\n                        i = 0;\n                        _a.label = 1;\n                    case 1:\n                        if (!(i < RemoteSearchProvider.MAX_REQUESTS)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.prepareRequest(filter, i)];\n                    case 2:\n                        details = _a.sent();\n                        allRequestDetails.push(details);\n                        if (!details.hasMoreFilters) {\n                            return [3 /*break*/, 4];\n                        }\n                        _a.label = 3;\n                    case 3:\n                        i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, Promise.all(allRequestDetails.map(function (details) { return _this.getSettingsFromBing(details); })).then(function (allResponses) {\n                            // Merge all IFilterMetadata\n                            var metadata = allResponses[0];\n                            metadata.requestCount = 1;\n                            for (var _i = 0, _a = allResponses.slice(1); _i < _a.length; _i++) {\n                                var response = _a[_i];\n                                metadata.requestCount++;\n                                metadata.scoredResults = tslib_1.__assign({}, metadata.scoredResults, response.scoredResults);\n                            }\n                            return metadata;\n                        })];\n                }\n            });\n        });\n    };\n    RemoteSearchProvider.prototype.getSettingsFromBing = function (details) {\n        this.logService.debug(\"Searching settings via \" + details.url);\n        if (details.body) {\n            this.logService.debug(\"Body: \" + details.body);\n        }\n        var requestType = details.body ? 'post' : 'get';\n        var headers = {\n            'User-Agent': 'request',\n            'Content-Type': 'application/json; charset=utf-8',\n        };\n        if (this.options.endpoint.key) {\n            headers['api-key'] = this.options.endpoint.key;\n        }\n        var start = Date.now();\n        return this.requestService.request({\n            type: requestType,\n            url: details.url,\n            data: details.body,\n            headers: headers,\n            timeout: 5000\n        }, cancellation_1.CancellationToken.None).then(function (context) {\n            if (typeof context.res.statusCode === 'number' && context.res.statusCode >= 300) {\n                throw new Error(JSON.stringify(details) + \" returned status code: \" + context.res.statusCode);\n            }\n            return request_2.asJson(context);\n        }).then(function (result) {\n            var timestamp = Date.now();\n            var duration = timestamp - start;\n            var remoteSettings = (result.value || [])\n                .map(function (r) {\n                var _a;\n                var key = JSON.parse(r.setting || r.Setting);\n                var packageId = r['packageid'];\n                var id = getSettingKey(key, packageId);\n                var value = r['value'];\n                var defaultValue = value ? JSON.parse(value) : value;\n                var packageName = r['packagename'];\n                var extensionName;\n                var extensionPublisher;\n                if (packageName && packageName.indexOf('##') >= 0) {\n                    _a = packageName.split('##'), extensionPublisher = _a[0], extensionName = _a[1];\n                }\n                return {\n                    key: key,\n                    id: id,\n                    defaultValue: defaultValue,\n                    score: r['@search.score'],\n                    description: JSON.parse(r['details']),\n                    packageId: packageId,\n                    extensionName: extensionName,\n                    extensionPublisher: extensionPublisher\n                };\n            });\n            var scoredResults = Object.create(null);\n            remoteSettings.forEach(function (s) {\n                scoredResults[s.id] = s;\n            });\n            return {\n                requestUrl: details.url,\n                requestBody: details.body,\n                duration: duration,\n                timestamp: timestamp,\n                scoredResults: scoredResults,\n                context: result['@odata.context']\n            };\n        });\n    };\n    RemoteSearchProvider.prototype.getRemoteSettingMatcher = function (scoredResults, minScore, preferencesModel) {\n        var _this = this;\n        return function (setting, group) {\n            var remoteSetting = scoredResults[getSettingKey(setting.key, group.id)] || // extension setting\n                scoredResults[getSettingKey(setting.key, 'core')] || // core setting\n                scoredResults[getSettingKey(setting.key)]; // core setting from original prod endpoint\n            if (remoteSetting && remoteSetting.score >= minScore) {\n                var settingMatches = new SettingMatches(_this.options.filter, setting, false, true, function (filter, setting) { return preferencesModel.findValueMatches(filter, setting); }).matches;\n                return { matches: settingMatches, score: remoteSetting.score };\n            }\n            return null;\n        };\n    };\n    RemoteSearchProvider.prototype.prepareRequest = function (query, filterPage) {\n        if (filterPage === void 0) { filterPage = 0; }\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var verbatimQuery, boost, boostedQuery, encodedQuery, url, extensions, filters, filterStr, hasMoreFilters, body;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        verbatimQuery = query;\n                        query = escapeSpecialChars(query);\n                        boost = 10;\n                        boostedQuery = \"(\" + query + \")^\" + boost;\n                        // Appending Fuzzy after each word.\n                        query = query.replace(/\\ +/g, '~ ') + '~';\n                        encodedQuery = encodeURIComponent(boostedQuery + ' || ' + query);\n                        url = \"\" + this.options.endpoint.urlBase;\n                        if (this.options.endpoint.key) {\n                            url += API_VERSION + \"&\" + QUERY_TYPE;\n                        }\n                        return [4 /*yield*/, this.installedExtensions];\n                    case 1:\n                        extensions = _a.sent();\n                        filters = this.options.newExtensionsOnly ?\n                            [\"diminish eq 'latest'\"] :\n                            this.getVersionFilters(extensions, this.environmentService.settingsSearchBuildId);\n                        filterStr = filters\n                            .slice(filterPage * RemoteSearchProvider.MAX_REQUEST_FILTERS, (filterPage + 1) * RemoteSearchProvider.MAX_REQUEST_FILTERS)\n                            .join(' or ');\n                        hasMoreFilters = filters.length > (filterPage + 1) * RemoteSearchProvider.MAX_REQUEST_FILTERS;\n                        body = JSON.stringify({\n                            query: encodedQuery,\n                            filters: encodeURIComponent(filterStr),\n                            rawQuery: encodeURIComponent(verbatimQuery)\n                        });\n                        return [2 /*return*/, {\n                                url: url,\n                                body: body,\n                                hasMoreFilters: hasMoreFilters\n                            }];\n                }\n            });\n        });\n    };\n    RemoteSearchProvider.prototype.getVersionFilters = function (exts, buildNumber) {\n        var _this = this;\n        // Only search extensions that contribute settings\n        var filters = exts\n            .filter(function (ext) { return ext.manifest.contributes && ext.manifest.contributes.configuration; })\n            .map(function (ext) { return _this.getExtensionFilter(ext); });\n        if (buildNumber) {\n            filters.push(\"(packageid eq 'core' and startbuildno le '\" + buildNumber + \"' and endbuildno ge '\" + buildNumber + \"')\");\n        }\n        return filters;\n    };\n    RemoteSearchProvider.prototype.getExtensionFilter = function (ext) {\n        var uuid = ext.identifier.uuid;\n        var versionString = ext.manifest.version\n            .split('.')\n            .map(function (versionPart) { return strings.pad(versionPart, 10); })\n            .join('');\n        return \"(packageid eq '\" + uuid + \"' and startbuildno le '\" + versionString + \"' and endbuildno ge '\" + versionString + \"')\";\n    };\n    // Must keep extension filter size under 8kb. 42 filters puts us there.\n    RemoteSearchProvider.MAX_REQUEST_FILTERS = 42;\n    RemoteSearchProvider.MAX_REQUESTS = 10;\n    RemoteSearchProvider.NEW_EXTENSIONS_MIN_SCORE = 1;\n    RemoteSearchProvider = tslib_1.__decorate([\n        tslib_1.__param(2, environment_1.IEnvironmentService),\n        tslib_1.__param(3, request_1.IRequestService),\n        tslib_1.__param(4, log_1.ILogService)\n    ], RemoteSearchProvider);\n    return RemoteSearchProvider;\n}());\nfunction getSettingKey(name, packageId) {\n    return packageId ?\n        packageId + '##' + name :\n        name;\n}\nvar API_VERSION = 'api-version=2016-09-01-Preview';\nvar QUERY_TYPE = 'querytype=full';\nfunction escapeSpecialChars(query) {\n    return query.replace(/\\./g, ' ')\n        .replace(/[\\\\/+\\-&|!\"~*?:(){}\\[\\]\\^]/g, '\\\\$&')\n        .replace(/  /g, ' ') // collapse spaces\n        .trim();\n}\nfunction remoteSettingToISetting(remoteSetting) {\n    return {\n        description: remoteSetting.description.split('\\n'),\n        descriptionIsMarkdown: false,\n        descriptionRanges: [],\n        key: remoteSetting.key,\n        keyRange: preferencesModels_1.nullRange,\n        value: remoteSetting.defaultValue,\n        range: preferencesModels_1.nullRange,\n        valueRange: preferencesModels_1.nullRange,\n        overrides: [],\n        extensionName: remoteSetting.extensionName,\n        extensionPublisher: remoteSetting.extensionPublisher\n    };\n}\nvar SettingMatches = /** @class */ (function () {\n    function SettingMatches(searchString, setting, requireFullQueryMatch, searchDescription, valuesMatcher) {\n        this.requireFullQueryMatch = requireFullQueryMatch;\n        this.searchDescription = searchDescription;\n        this.valuesMatcher = valuesMatcher;\n        this.descriptionMatchingWords = new Map();\n        this.keyMatchingWords = new Map();\n        this.valueMatchingWords = new Map();\n        this.matches = arrays_1.distinct(this._findMatchesInSetting(searchString, setting), function (match) { return match.startLineNumber + \"_\" + match.startColumn + \"_\" + match.endLineNumber + \"_\" + match.endColumn + \"_\"; });\n    }\n    SettingMatches.prototype._findMatchesInSetting = function (searchString, setting) {\n        var result = this._doFindMatchesInSetting(searchString, setting);\n        if (setting.overrides && setting.overrides.length) {\n            for (var _i = 0, _a = setting.overrides; _i < _a.length; _i++) {\n                var subSetting = _a[_i];\n                var subSettingMatches = new SettingMatches(searchString, subSetting, this.requireFullQueryMatch, this.searchDescription, this.valuesMatcher);\n                var words = searchString.split(' ');\n                var descriptionRanges = this.getRangesForWords(words, this.descriptionMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                var keyRanges = this.getRangesForWords(words, this.keyMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                var subSettingKeyRanges = this.getRangesForWords(words, subSettingMatches.keyMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n                var subSettinValueRanges = this.getRangesForWords(words, subSettingMatches.valueMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.keyMatchingWords]);\n                result.push.apply(result, descriptionRanges.concat(keyRanges, subSettingKeyRanges, subSettinValueRanges));\n                result.push.apply(result, subSettingMatches.matches);\n            }\n        }\n        return result;\n    };\n    SettingMatches.prototype._doFindMatchesInSetting = function (searchString, setting) {\n        var _this = this;\n        var registry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).getConfigurationProperties();\n        var schema = registry[setting.key];\n        var words = searchString.split(' ');\n        var settingKeyAsWords = setting.key.split('.').join(' ');\n        var _loop_1 = function (word) {\n            if (this_1.searchDescription) {\n                var _loop_3 = function (lineIndex) {\n                    var descriptionMatches = filters_1.matchesWords(word, setting.description[lineIndex], true);\n                    if (descriptionMatches) {\n                        this_1.descriptionMatchingWords.set(word, descriptionMatches.map(function (match) { return _this.toDescriptionRange(setting, match, lineIndex); }));\n                    }\n                };\n                for (var lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n                    _loop_3(lineIndex);\n                }\n            }\n            var keyMatches_1 = filters_1.or(filters_1.matchesWords, filters_1.matchesCamelCase)(word, settingKeyAsWords);\n            if (keyMatches_1) {\n                this_1.keyMatchingWords.set(word, keyMatches_1.map(function (match) { return _this.toKeyRange(setting, match); }));\n            }\n            var valueMatches = typeof setting.value === 'string' ? filters_1.matchesContiguousSubString(word, setting.value) : null;\n            if (valueMatches) {\n                this_1.valueMatchingWords.set(word, valueMatches.map(function (match) { return _this.toValueRange(setting, match); }));\n            }\n            else if (schema && schema.enum && schema.enum.some(function (enumValue) { return typeof enumValue === 'string' && !!filters_1.matchesContiguousSubString(word, enumValue); })) {\n                this_1.valueMatchingWords.set(word, []);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {\n            var word = words_1[_i];\n            _loop_1(word);\n        }\n        var descriptionRanges = [];\n        if (this.searchDescription) {\n            var _loop_2 = function (lineIndex) {\n                var matches = filters_1.or(filters_1.matchesContiguousSubString)(searchString, setting.description[lineIndex] || '') || [];\n                descriptionRanges.push.apply(descriptionRanges, matches.map(function (match) { return _this.toDescriptionRange(setting, match, lineIndex); }));\n            };\n            for (var lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n                _loop_2(lineIndex);\n            }\n            if (descriptionRanges.length === 0) {\n                descriptionRanges.push.apply(descriptionRanges, this.getRangesForWords(words, this.descriptionMatchingWords, [this.keyMatchingWords, this.valueMatchingWords]));\n            }\n        }\n        var keyMatches = filters_1.or(filters_1.matchesPrefix, filters_1.matchesContiguousSubString)(searchString, setting.key);\n        var keyRanges = keyMatches ? keyMatches.map(function (match) { return _this.toKeyRange(setting, match); }) : this.getRangesForWords(words, this.keyMatchingWords, [this.descriptionMatchingWords, this.valueMatchingWords]);\n        var valueRanges = [];\n        if (setting.value && typeof setting.value === 'string') {\n            var valueMatches = filters_1.or(filters_1.matchesPrefix, filters_1.matchesContiguousSubString)(searchString, setting.value);\n            valueRanges = valueMatches ? valueMatches.map(function (match) { return _this.toValueRange(setting, match); }) : this.getRangesForWords(words, this.valueMatchingWords, [this.keyMatchingWords, this.descriptionMatchingWords]);\n        }\n        else {\n            valueRanges = this.valuesMatcher ? this.valuesMatcher(searchString, setting) : [];\n        }\n        return descriptionRanges.concat(keyRanges, valueRanges);\n    };\n    SettingMatches.prototype.getRangesForWords = function (words, from, others) {\n        var result = [];\n        var _loop_4 = function (word) {\n            var ranges = from.get(word);\n            if (ranges) {\n                result.push.apply(result, ranges);\n            }\n            else if (this_2.requireFullQueryMatch && others.every(function (o) { return !o.has(word); })) {\n                return { value: [] };\n            }\n        };\n        var this_2 = this;\n        for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {\n            var word = words_2[_i];\n            var state_1 = _loop_4(word);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n        return result;\n    };\n    SettingMatches.prototype.toKeyRange = function (setting, match) {\n        return {\n            startLineNumber: setting.keyRange.startLineNumber,\n            startColumn: setting.keyRange.startColumn + match.start,\n            endLineNumber: setting.keyRange.startLineNumber,\n            endColumn: setting.keyRange.startColumn + match.end\n        };\n    };\n    SettingMatches.prototype.toDescriptionRange = function (setting, match, lineIndex) {\n        return {\n            startLineNumber: setting.descriptionRanges[lineIndex].startLineNumber,\n            startColumn: setting.descriptionRanges[lineIndex].startColumn + match.start,\n            endLineNumber: setting.descriptionRanges[lineIndex].endLineNumber,\n            endColumn: setting.descriptionRanges[lineIndex].startColumn + match.end\n        };\n    };\n    SettingMatches.prototype.toValueRange = function (setting, match) {\n        return {\n            startLineNumber: setting.valueRange.startLineNumber,\n            startColumn: setting.valueRange.startColumn + match.start + 1,\n            endLineNumber: setting.valueRange.startLineNumber,\n            endColumn: setting.valueRange.startColumn + match.end + 1\n        };\n    };\n    return SettingMatches;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferencesSearch.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferencesSearch.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISettingsEditorModel, ISetting, ISettingsGroup, IFilterMetadata, ISearchResult, IGroupFilter, ISettingMatcher, IScoredResults, ISettingMatch, IRemoteSetting, IExtensionSetting } from 'vs/workbench/services/preferences/common/preferences';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { distinct, top } from 'vs/base/common/arrays';\nimport * as strings from 'vs/base/common/strings';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IMatch, or, matchesContiguousSubString, matchesPrefix, matchesCamelCase, matchesWords } from 'vs/base/common/filters';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IRequestService } from 'vs/platform/request/node/request';\nimport { asJson } from 'vs/base/node/request';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionManagementService, ILocalExtension, IExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IPreferencesSearchService, ISearchProvider, IWorkbenchSettingsConfiguration } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { nullRange } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport interface IEndpointDetails {\n\turlBase?: string;\n\tkey?: string;\n}\n\nexport class PreferencesSearchService extends Disposable implements IPreferencesSearchService {\n\t_serviceBrand: any;\n\n\tprivate _installedExtensions: Promise<ILocalExtension[]>;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionEnablementService private readonly extensionEnablementService: IExtensionEnablementService\n\t) {\n\t\tsuper();\n\n\t\t// This request goes to the shared process but results won't change during a window's lifetime, so cache the results.\n\t\tthis._installedExtensions = this.extensionManagementService.getInstalled(ExtensionType.User).then(exts => {\n\t\t\t// Filter to enabled extensions that have settings\n\t\t\treturn exts\n\t\t\t\t.filter(ext => this.extensionEnablementService.isEnabled(ext))\n\t\t\t\t.filter(ext => ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration)\n\t\t\t\t.filter(ext => !!ext.identifier.uuid);\n\t\t});\n\t}\n\n\tprivate get remoteSearchAllowed(): boolean {\n\t\tconst workbenchSettings = this.configurationService.getValue<IWorkbenchSettingsConfiguration>().workbench.settings;\n\t\tif (!workbenchSettings.enableNaturalLanguageSearch) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!this._endpoint.urlBase;\n\t}\n\n\tprivate get _endpoint(): IEndpointDetails {\n\t\tconst workbenchSettings = this.configurationService.getValue<IWorkbenchSettingsConfiguration>().workbench.settings;\n\t\tif (workbenchSettings.naturalLanguageSearchEndpoint) {\n\t\t\treturn {\n\t\t\t\turlBase: workbenchSettings.naturalLanguageSearchEndpoint,\n\t\t\t\tkey: workbenchSettings.naturalLanguageSearchKey\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\turlBase: this.environmentService.settingsSearchUrl\n\t\t\t};\n\t\t}\n\t}\n\n\tgetRemoteSearchProvider(filter: string, newExtensionsOnly = false): ISearchProvider | undefined {\n\t\tconst opts: IRemoteSearchProviderOptions = {\n\t\t\tfilter,\n\t\t\tnewExtensionsOnly,\n\t\t\tendpoint: this._endpoint\n\t\t};\n\n\t\treturn this.remoteSearchAllowed ? this.instantiationService.createInstance(RemoteSearchProvider, opts, this._installedExtensions) : undefined;\n\t}\n\n\tgetLocalSearchProvider(filter: string): LocalSearchProvider {\n\t\treturn this.instantiationService.createInstance(LocalSearchProvider, filter);\n\t}\n}\n\nexport class LocalSearchProvider implements ISearchProvider {\n\tstatic readonly EXACT_MATCH_SCORE = 10000;\n\tstatic readonly START_SCORE = 1000;\n\n\tconstructor(private _filter: string) {\n\t\t// Remove \" and : which are likely to be copypasted as part of a setting name.\n\t\t// Leave other special characters which the user might want to search for.\n\t\tthis._filter = this._filter\n\t\t\t.replace(/[\":]/g, ' ')\n\t\t\t.replace(/  /g, ' ')\n\t\t\t.trim();\n\t}\n\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tif (!this._filter) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet orderedScore = LocalSearchProvider.START_SCORE; // Sort is not stable\n\t\tconst settingMatcher = (setting: ISetting) => {\n\t\t\tconst matches = new SettingMatches(this._filter, setting, true, true, (filter, setting) => preferencesModel.findValueMatches(filter, setting)).matches;\n\t\t\tconst score = this._filter === setting.key ?\n\t\t\t\tLocalSearchProvider.EXACT_MATCH_SCORE :\n\t\t\t\torderedScore--;\n\n\t\t\treturn matches && matches.length ?\n\t\t\t\t{\n\t\t\t\t\tmatches,\n\t\t\t\t\tscore\n\t\t\t\t} :\n\t\t\t\tnull;\n\t\t};\n\n\t\tconst filterMatches = preferencesModel.filterSettings(this._filter, this.getGroupFilter(this._filter), settingMatcher);\n\t\tif (filterMatches[0] && filterMatches[0].score === LocalSearchProvider.EXACT_MATCH_SCORE) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches: filterMatches.slice(0, 1),\n\t\t\t\texactMatch: true\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getGroupFilter(filter: string): IGroupFilter {\n\t\tconst regex = strings.createRegExp(filter, false, { global: true });\n\t\treturn (group: ISettingsGroup) => {\n\t\t\treturn regex.test(group.title);\n\t\t};\n\t}\n}\n\ninterface IRemoteSearchProviderOptions {\n\tfilter: string;\n\tendpoint: IEndpointDetails;\n\tnewExtensionsOnly: boolean;\n}\n\ninterface IBingRequestDetails {\n\turl: string;\n\tbody?: string;\n\thasMoreFilters?: boolean;\n\textensions?: ILocalExtension[];\n}\n\nclass RemoteSearchProvider implements ISearchProvider {\n\t// Must keep extension filter size under 8kb. 42 filters puts us there.\n\tprivate static readonly MAX_REQUEST_FILTERS = 42;\n\tprivate static readonly MAX_REQUESTS = 10;\n\tprivate static readonly NEW_EXTENSIONS_MIN_SCORE = 1;\n\n\tprivate _remoteSearchP: Promise<IFilterMetadata | null>;\n\n\tconstructor(private options: IRemoteSearchProviderOptions, private installedExtensions: Promise<ILocalExtension[]>,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis._remoteSearchP = this.options.filter ?\n\t\t\tPromise.resolve(this.getSettingsForFilter(this.options.filter)) :\n\t\t\tPromise.resolve(null);\n\t}\n\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\treturn this._remoteSearchP.then<ISearchResult | null>((remoteResult) => {\n\t\t\tif (!remoteResult) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\tthrow canceled();\n\t\t\t}\n\n\t\t\tconst resultKeys = Object.keys(remoteResult.scoredResults);\n\t\t\tconst highScoreKey = top(resultKeys, (a, b) => remoteResult.scoredResults[b].score - remoteResult.scoredResults[a].score, 1)[0];\n\t\t\tconst highScore = highScoreKey ? remoteResult.scoredResults[highScoreKey].score : 0;\n\t\t\tconst minScore = highScore / 5;\n\t\t\tif (this.options.newExtensionsOnly) {\n\t\t\t\treturn this.installedExtensions.then(installedExtensions => {\n\t\t\t\t\tconst newExtsMinScore = Math.max(RemoteSearchProvider.NEW_EXTENSIONS_MIN_SCORE, minScore);\n\t\t\t\t\tconst passingScoreKeys = resultKeys\n\t\t\t\t\t\t.filter(k => {\n\t\t\t\t\t\t\tconst result = remoteResult.scoredResults[k];\n\t\t\t\t\t\t\tconst resultExtId = (result.extensionPublisher + '.' + result.extensionName).toLowerCase();\n\t\t\t\t\t\t\treturn !installedExtensions.some(ext => ext.identifier.id.toLowerCase() === resultExtId);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(k => remoteResult.scoredResults[k].score >= newExtsMinScore);\n\n\t\t\t\t\tconst filterMatches: ISettingMatch[] = passingScoreKeys.map(k => {\n\t\t\t\t\t\tconst remoteSetting = remoteResult.scoredResults[k];\n\t\t\t\t\t\tconst setting = remoteSettingToISetting(remoteSetting);\n\t\t\t\t\t\treturn <ISettingMatch>{\n\t\t\t\t\t\t\tsetting,\n\t\t\t\t\t\t\tscore: remoteSetting.score,\n\t\t\t\t\t\t\tmatches: [] // TODO\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\t\treturn <ISearchResult>{\n\t\t\t\t\t\tfilterMatches,\n\t\t\t\t\t\tmetadata: remoteResult\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst settingMatcher = this.getRemoteSettingMatcher(remoteResult.scoredResults, minScore, preferencesModel);\n\t\t\t\tconst filterMatches = preferencesModel.filterSettings(this.options.filter, group => null, settingMatcher);\n\t\t\t\treturn <ISearchResult>{\n\t\t\t\t\tfilterMatches,\n\t\t\t\t\tmetadata: remoteResult\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async getSettingsForFilter(filter: string): Promise<IFilterMetadata> {\n\t\tconst allRequestDetails: IBingRequestDetails[] = [];\n\n\t\t// Only send MAX_REQUESTS requests in total just to keep it sane\n\t\tfor (let i = 0; i < RemoteSearchProvider.MAX_REQUESTS; i++) {\n\t\t\tconst details = await this.prepareRequest(filter, i);\n\t\t\tallRequestDetails.push(details);\n\t\t\tif (!details.hasMoreFilters) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(allRequestDetails.map(details => this.getSettingsFromBing(details))).then(allResponses => {\n\t\t\t// Merge all IFilterMetadata\n\t\t\tconst metadata = allResponses[0];\n\t\t\tmetadata.requestCount = 1;\n\n\t\t\tfor (const response of allResponses.slice(1)) {\n\t\t\t\tmetadata.requestCount++;\n\t\t\t\tmetadata.scoredResults = { ...metadata.scoredResults, ...response.scoredResults };\n\t\t\t}\n\n\t\t\treturn metadata;\n\t\t});\n\t}\n\n\tprivate getSettingsFromBing(details: IBingRequestDetails): Promise<IFilterMetadata> {\n\t\tthis.logService.debug(`Searching settings via ${details.url}`);\n\t\tif (details.body) {\n\t\t\tthis.logService.debug(`Body: ${details.body}`);\n\t\t}\n\n\t\tconst requestType = details.body ? 'post' : 'get';\n\t\tconst headers = {\n\t\t\t'User-Agent': 'request',\n\t\t\t'Content-Type': 'application/json; charset=utf-8',\n\t\t};\n\n\t\tif (this.options.endpoint.key) {\n\t\t\theaders['api-key'] = this.options.endpoint.key;\n\t\t}\n\n\t\tconst start = Date.now();\n\t\treturn this.requestService.request({\n\t\t\ttype: requestType,\n\t\t\turl: details.url,\n\t\t\tdata: details.body,\n\t\t\theaders,\n\t\t\ttimeout: 5000\n\t\t}, CancellationToken.None).then(context => {\n\t\t\tif (typeof context.res.statusCode === 'number' && context.res.statusCode >= 300) {\n\t\t\t\tthrow new Error(`${JSON.stringify(details)} returned status code: ${context.res.statusCode}`);\n\t\t\t}\n\n\t\t\treturn asJson(context);\n\t\t}).then((result: any) => {\n\t\t\tconst timestamp = Date.now();\n\t\t\tconst duration = timestamp - start;\n\t\t\tconst remoteSettings: IRemoteSetting[] = (result.value || [])\n\t\t\t\t.map((r: any) => {\n\t\t\t\t\tconst key = JSON.parse(r.setting || r.Setting);\n\t\t\t\t\tconst packageId = r['packageid'];\n\t\t\t\t\tconst id = getSettingKey(key, packageId);\n\n\t\t\t\t\tconst value = r['value'];\n\t\t\t\t\tconst defaultValue = value ? JSON.parse(value) : value;\n\n\t\t\t\t\tconst packageName = r['packagename'];\n\t\t\t\t\tlet extensionName: string | undefined;\n\t\t\t\t\tlet extensionPublisher: string | undefined;\n\t\t\t\t\tif (packageName && packageName.indexOf('##') >= 0) {\n\t\t\t\t\t\t[extensionPublisher, extensionName] = packageName.split('##');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn <IRemoteSetting>{\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tdefaultValue,\n\t\t\t\t\t\tscore: r['@search.score'],\n\t\t\t\t\t\tdescription: JSON.parse(r['details']),\n\t\t\t\t\t\tpackageId,\n\t\t\t\t\t\textensionName,\n\t\t\t\t\t\textensionPublisher\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\tconst scoredResults = Object.create(null);\n\t\t\tremoteSettings.forEach(s => {\n\t\t\t\tscoredResults[s.id] = s;\n\t\t\t});\n\n\t\t\treturn <IFilterMetadata>{\n\t\t\t\trequestUrl: details.url,\n\t\t\t\trequestBody: details.body,\n\t\t\t\tduration,\n\t\t\t\ttimestamp,\n\t\t\t\tscoredResults,\n\t\t\t\tcontext: result['@odata.context']\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate getRemoteSettingMatcher(scoredResults: IScoredResults, minScore: number, preferencesModel: ISettingsEditorModel): ISettingMatcher {\n\t\treturn (setting: ISetting, group: ISettingsGroup) => {\n\t\t\tconst remoteSetting = scoredResults[getSettingKey(setting.key, group.id)] || // extension setting\n\t\t\t\tscoredResults[getSettingKey(setting.key, 'core')] || // core setting\n\t\t\t\tscoredResults[getSettingKey(setting.key)]; // core setting from original prod endpoint\n\t\t\tif (remoteSetting && remoteSetting.score >= minScore) {\n\t\t\t\tconst settingMatches = new SettingMatches(this.options.filter, setting, false, true, (filter, setting) => preferencesModel.findValueMatches(filter, setting)).matches;\n\t\t\t\treturn { matches: settingMatches, score: remoteSetting.score };\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tprivate async prepareRequest(query: string, filterPage = 0): Promise<IBingRequestDetails> {\n\t\tconst verbatimQuery = query;\n\t\tquery = escapeSpecialChars(query);\n\t\tconst boost = 10;\n\t\tconst boostedQuery = `(${query})^${boost}`;\n\n\t\t// Appending Fuzzy after each word.\n\t\tquery = query.replace(/\\ +/g, '~ ') + '~';\n\n\t\tconst encodedQuery = encodeURIComponent(boostedQuery + ' || ' + query);\n\t\tlet url = `${this.options.endpoint.urlBase}`;\n\n\t\tif (this.options.endpoint.key) {\n\t\t\turl += `${API_VERSION}&${QUERY_TYPE}`;\n\t\t}\n\n\t\tconst extensions = await this.installedExtensions;\n\t\tconst filters = this.options.newExtensionsOnly ?\n\t\t\t[`diminish eq 'latest'`] :\n\t\t\tthis.getVersionFilters(extensions, this.environmentService.settingsSearchBuildId);\n\n\t\tconst filterStr = filters\n\t\t\t.slice(filterPage * RemoteSearchProvider.MAX_REQUEST_FILTERS, (filterPage + 1) * RemoteSearchProvider.MAX_REQUEST_FILTERS)\n\t\t\t.join(' or ');\n\t\tconst hasMoreFilters = filters.length > (filterPage + 1) * RemoteSearchProvider.MAX_REQUEST_FILTERS;\n\n\t\tconst body = JSON.stringify({\n\t\t\tquery: encodedQuery,\n\t\t\tfilters: encodeURIComponent(filterStr),\n\t\t\trawQuery: encodeURIComponent(verbatimQuery)\n\t\t});\n\n\t\treturn {\n\t\t\turl,\n\t\t\tbody,\n\t\t\thasMoreFilters\n\t\t};\n\t}\n\n\tprivate getVersionFilters(exts: ILocalExtension[], buildNumber?: number): string[] {\n\t\t// Only search extensions that contribute settings\n\t\tconst filters = exts\n\t\t\t.filter(ext => ext.manifest.contributes && ext.manifest.contributes.configuration)\n\t\t\t.map(ext => this.getExtensionFilter(ext));\n\n\t\tif (buildNumber) {\n\t\t\tfilters.push(`(packageid eq 'core' and startbuildno le '${buildNumber}' and endbuildno ge '${buildNumber}')`);\n\t\t}\n\n\t\treturn filters;\n\t}\n\n\tprivate getExtensionFilter(ext: ILocalExtension): string {\n\t\tconst uuid = ext.identifier.uuid;\n\t\tconst versionString = ext.manifest.version\n\t\t\t.split('.')\n\t\t\t.map(versionPart => strings.pad(<any>versionPart, 10))\n\t\t\t.join('');\n\n\t\treturn `(packageid eq '${uuid}' and startbuildno le '${versionString}' and endbuildno ge '${versionString}')`;\n\t}\n}\n\nfunction getSettingKey(name: string, packageId?: string): string {\n\treturn packageId ?\n\t\tpackageId + '##' + name :\n\t\tname;\n}\n\nconst API_VERSION = 'api-version=2016-09-01-Preview';\nconst QUERY_TYPE = 'querytype=full';\n\nfunction escapeSpecialChars(query: string): string {\n\treturn query.replace(/\\./g, ' ')\n\t\t.replace(/[\\\\/+\\-&|!\"~*?:(){}\\[\\]\\^]/g, '\\\\$&')\n\t\t.replace(/  /g, ' ') // collapse spaces\n\t\t.trim();\n}\n\nfunction remoteSettingToISetting(remoteSetting: IRemoteSetting): IExtensionSetting {\n\treturn {\n\t\tdescription: remoteSetting.description.split('\\n'),\n\t\tdescriptionIsMarkdown: false,\n\t\tdescriptionRanges: [],\n\t\tkey: remoteSetting.key,\n\t\tkeyRange: nullRange,\n\t\tvalue: remoteSetting.defaultValue,\n\t\trange: nullRange,\n\t\tvalueRange: nullRange,\n\t\toverrides: [],\n\t\textensionName: remoteSetting.extensionName,\n\t\textensionPublisher: remoteSetting.extensionPublisher\n\t};\n}\n\nclass SettingMatches {\n\n\tprivate readonly descriptionMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\tprivate readonly keyMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\tprivate readonly valueMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\n\treadonly matches: IRange[];\n\n\tconstructor(searchString: string, setting: ISetting, private requireFullQueryMatch: boolean, private searchDescription: boolean, private valuesMatcher: (filter: string, setting: ISetting) => IRange[]) {\n\t\tthis.matches = distinct(this._findMatchesInSetting(searchString, setting), (match) => `${match.startLineNumber}_${match.startColumn}_${match.endLineNumber}_${match.endColumn}_`);\n\t}\n\n\tprivate _findMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst result = this._doFindMatchesInSetting(searchString, setting);\n\t\tif (setting.overrides && setting.overrides.length) {\n\t\t\tfor (const subSetting of setting.overrides) {\n\t\t\t\tconst subSettingMatches = new SettingMatches(searchString, subSetting, this.requireFullQueryMatch, this.searchDescription, this.valuesMatcher);\n\t\t\t\tconst words = searchString.split(' ');\n\t\t\t\tconst descriptionRanges: IRange[] = this.getRangesForWords(words, this.descriptionMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst keyRanges: IRange[] = this.getRangesForWords(words, this.keyMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst subSettingKeyRanges: IRange[] = this.getRangesForWords(words, subSettingMatches.keyMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst subSettinValueRanges: IRange[] = this.getRangesForWords(words, subSettingMatches.valueMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.keyMatchingWords]);\n\t\t\t\tresult.push(...descriptionRanges, ...keyRanges, ...subSettingKeyRanges, ...subSettinValueRanges);\n\t\t\t\tresult.push(...subSettingMatches.matches);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _doFindMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst registry: { [qualifiedKey: string]: IJSONSchema } = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst schema: IJSONSchema = registry[setting.key];\n\n\t\tconst words = searchString.split(' ');\n\t\tconst settingKeyAsWords: string = setting.key.split('.').join(' ');\n\n\t\tfor (const word of words) {\n\t\t\tif (this.searchDescription) {\n\t\t\t\tfor (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n\t\t\t\t\tconst descriptionMatches = matchesWords(word, setting.description[lineIndex], true);\n\t\t\t\t\tif (descriptionMatches) {\n\t\t\t\t\t\tthis.descriptionMatchingWords.set(word, descriptionMatches.map(match => this.toDescriptionRange(setting, match, lineIndex)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst keyMatches = or(matchesWords, matchesCamelCase)(word, settingKeyAsWords);\n\t\t\tif (keyMatches) {\n\t\t\t\tthis.keyMatchingWords.set(word, keyMatches.map(match => this.toKeyRange(setting, match)));\n\t\t\t}\n\n\t\t\tconst valueMatches = typeof setting.value === 'string' ? matchesContiguousSubString(word, setting.value) : null;\n\t\t\tif (valueMatches) {\n\t\t\t\tthis.valueMatchingWords.set(word, valueMatches.map(match => this.toValueRange(setting, match)));\n\t\t\t} else if (schema && schema.enum && schema.enum.some(enumValue => typeof enumValue === 'string' && !!matchesContiguousSubString(word, enumValue))) {\n\t\t\t\tthis.valueMatchingWords.set(word, []);\n\t\t\t}\n\t\t}\n\n\t\tconst descriptionRanges: IRange[] = [];\n\t\tif (this.searchDescription) {\n\t\t\tfor (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n\t\t\t\tconst matches = or(matchesContiguousSubString)(searchString, setting.description[lineIndex] || '') || [];\n\t\t\t\tdescriptionRanges.push(...matches.map(match => this.toDescriptionRange(setting, match, lineIndex)));\n\t\t\t}\n\t\t\tif (descriptionRanges.length === 0) {\n\t\t\t\tdescriptionRanges.push(...this.getRangesForWords(words, this.descriptionMatchingWords, [this.keyMatchingWords, this.valueMatchingWords]));\n\t\t\t}\n\t\t}\n\n\t\tconst keyMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, setting.key);\n\t\tconst keyRanges: IRange[] = keyMatches ? keyMatches.map(match => this.toKeyRange(setting, match)) : this.getRangesForWords(words, this.keyMatchingWords, [this.descriptionMatchingWords, this.valueMatchingWords]);\n\n\t\tlet valueRanges: IRange[] = [];\n\t\tif (setting.value && typeof setting.value === 'string') {\n\t\t\tconst valueMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, setting.value);\n\t\t\tvalueRanges = valueMatches ? valueMatches.map(match => this.toValueRange(setting, match)) : this.getRangesForWords(words, this.valueMatchingWords, [this.keyMatchingWords, this.descriptionMatchingWords]);\n\t\t} else {\n\t\t\tvalueRanges = this.valuesMatcher ? this.valuesMatcher(searchString, setting) : [];\n\t\t}\n\n\t\treturn [...descriptionRanges, ...keyRanges, ...valueRanges];\n\t}\n\n\tprivate getRangesForWords(words: string[], from: Map<string, IRange[]>, others: Map<string, IRange[]>[]): IRange[] {\n\t\tconst result: IRange[] = [];\n\t\tfor (const word of words) {\n\t\t\tconst ranges = from.get(word);\n\t\t\tif (ranges) {\n\t\t\t\tresult.push(...ranges);\n\t\t\t} else if (this.requireFullQueryMatch && others.every(o => !o.has(word))) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate toKeyRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.keyRange.startLineNumber,\n\t\t\tstartColumn: setting.keyRange.startColumn + match.start,\n\t\t\tendLineNumber: setting.keyRange.startLineNumber,\n\t\t\tendColumn: setting.keyRange.startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toDescriptionRange(setting: ISetting, match: IMatch, lineIndex: number): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.descriptionRanges[lineIndex].startLineNumber,\n\t\t\tstartColumn: setting.descriptionRanges[lineIndex].startColumn + match.start,\n\t\t\tendLineNumber: setting.descriptionRanges[lineIndex].endLineNumber,\n\t\t\tendColumn: setting.descriptionRanges[lineIndex].startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toValueRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.valueRange.startLineNumber,\n\t\t\tstartColumn: setting.valueRange.startColumn + match.start + 1,\n\t\t\tendLineNumber: setting.valueRange.startLineNumber,\n\t\t\tendColumn: setting.valueRange.startColumn + match.end + 1\n\t\t};\n\t}\n}\n"]}]}