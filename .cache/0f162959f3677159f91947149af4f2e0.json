{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textfiles.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/textfile/common/textfiles.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/contextkey/common/contextkey\"], function (require, exports, instantiation_1, contextkey_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * States the text file editor model can be in.\n     */\n    var ModelState;\n    (function (ModelState) {\n        ModelState[ModelState[\"SAVED\"] = 0] = \"SAVED\";\n        ModelState[ModelState[\"DIRTY\"] = 1] = \"DIRTY\";\n        ModelState[ModelState[\"PENDING_SAVE\"] = 2] = \"PENDING_SAVE\";\n        /**\n         * A model is in conflict mode when changes cannot be saved because the\n         * underlying file has changed. Models in conflict mode are always dirty.\n         */\n        ModelState[ModelState[\"CONFLICT\"] = 3] = \"CONFLICT\";\n        /**\n         * A model is in orphan state when the underlying file has been deleted.\n         */\n        ModelState[ModelState[\"ORPHAN\"] = 4] = \"ORPHAN\";\n        /**\n         * Any error that happens during a save that is not causing the CONFLICT state.\n         * Models in error mode are always diry.\n         */\n        ModelState[ModelState[\"ERROR\"] = 5] = \"ERROR\";\n    })(ModelState = exports.ModelState || (exports.ModelState = {}));\n    var StateChange;\n    (function (StateChange) {\n        StateChange[StateChange[\"DIRTY\"] = 0] = \"DIRTY\";\n        StateChange[StateChange[\"SAVING\"] = 1] = \"SAVING\";\n        StateChange[StateChange[\"SAVE_ERROR\"] = 2] = \"SAVE_ERROR\";\n        StateChange[StateChange[\"SAVED\"] = 3] = \"SAVED\";\n        StateChange[StateChange[\"REVERTED\"] = 4] = \"REVERTED\";\n        StateChange[StateChange[\"ENCODING\"] = 5] = \"ENCODING\";\n        StateChange[StateChange[\"CONTENT_CHANGE\"] = 6] = \"CONTENT_CHANGE\";\n        StateChange[StateChange[\"ORPHANED_CHANGE\"] = 7] = \"ORPHANED_CHANGE\";\n    })(StateChange = exports.StateChange || (exports.StateChange = {}));\n    class TextFileModelChangeEvent {\n        constructor(model, kind) {\n            this._resource = model.getResource();\n            this._kind = kind;\n        }\n        get resource() {\n            return this._resource;\n        }\n        get kind() {\n            return this._kind;\n        }\n    }\n    exports.TextFileModelChangeEvent = TextFileModelChangeEvent;\n    exports.TEXT_FILE_SERVICE_ID = 'textFileService';\n    exports.AutoSaveContext = new contextkey_1.RawContextKey('config.files.autoSave', undefined);\n    var AutoSaveMode;\n    (function (AutoSaveMode) {\n        AutoSaveMode[AutoSaveMode[\"OFF\"] = 0] = \"OFF\";\n        AutoSaveMode[AutoSaveMode[\"AFTER_SHORT_DELAY\"] = 1] = \"AFTER_SHORT_DELAY\";\n        AutoSaveMode[AutoSaveMode[\"AFTER_LONG_DELAY\"] = 2] = \"AFTER_LONG_DELAY\";\n        AutoSaveMode[AutoSaveMode[\"ON_FOCUS_CHANGE\"] = 3] = \"ON_FOCUS_CHANGE\";\n        AutoSaveMode[AutoSaveMode[\"ON_WINDOW_CHANGE\"] = 4] = \"ON_WINDOW_CHANGE\";\n    })(AutoSaveMode = exports.AutoSaveMode || (exports.AutoSaveMode = {}));\n    var SaveReason;\n    (function (SaveReason) {\n        SaveReason[SaveReason[\"EXPLICIT\"] = 1] = \"EXPLICIT\";\n        SaveReason[SaveReason[\"AUTO\"] = 2] = \"AUTO\";\n        SaveReason[SaveReason[\"FOCUS_CHANGE\"] = 3] = \"FOCUS_CHANGE\";\n        SaveReason[SaveReason[\"WINDOW_CHANGE\"] = 4] = \"WINDOW_CHANGE\";\n    })(SaveReason = exports.SaveReason || (exports.SaveReason = {}));\n    var LoadReason;\n    (function (LoadReason) {\n        LoadReason[LoadReason[\"EDITOR\"] = 1] = \"EDITOR\";\n        LoadReason[LoadReason[\"REFERENCE\"] = 2] = \"REFERENCE\";\n        LoadReason[LoadReason[\"OTHER\"] = 3] = \"OTHER\";\n    })(LoadReason = exports.LoadReason || (exports.LoadReason = {}));\n    exports.ITextFileService = instantiation_1.createDecorator(exports.TEXT_FILE_SERVICE_ID);\n});\n",null]}