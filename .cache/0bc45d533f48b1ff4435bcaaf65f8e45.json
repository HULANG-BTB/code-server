{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensions.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/keyCodes\", \"vs/platform/registry/common/platform\", \"vs/platform/actions/common/actions\", \"vs/platform/instantiation/common/extensions\", \"vs/platform/extensionManagement/common/extensionManagement\", \"vs/workbench/common/actions\", \"vs/workbench/contrib/extensions/electron-browser/extensionTipsService\", \"vs/workbench/common/contributions\", \"vs/workbench/contrib/output/common/output\", \"vs/platform/instantiation/common/descriptors\", \"../common/extensions\", \"vs/workbench/contrib/extensions/node/extensionsWorkbenchService\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActions\", \"vs/workbench/contrib/extensions/common/extensionsInput\", \"vs/workbench/browser/viewlet\", \"vs/workbench/contrib/extensions/electron-browser/extensionEditor\", \"vs/workbench/contrib/extensions/electron-browser/extensionsViewlet\", \"vs/workbench/browser/quickopen\", \"vs/platform/configuration/common/configurationRegistry\", \"vs/platform/jsonschemas/common/jsonContributionRegistry\", \"vs/workbench/contrib/extensions/common/extensionsFileTemplate\", \"vs/platform/commands/common/commands\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/contrib/extensions/common/extensionsUtils\", \"vs/platform/extensionManagement/common/extensionManagementUtil\", \"vs/workbench/contrib/extensions/browser/extensionsQuickOpen\", \"vs/workbench/browser/editor\", \"vs/platform/lifecycle/common/lifecycle\", \"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor\", \"vs/workbench/common/editor\", \"vs/workbench/contrib/extensions/electron-browser/extensionProfileService\", \"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\", \"vs/base/common/uri\", \"vs/platform/contextkey/common/contextkey\", \"vs/workbench/contrib/extensions/electron-browser/extensionsActivationProgress\", \"vs/workbench/contrib/extensions/electron-browser/extensionsAutoProfiler\", \"vs/base/common/errors\", \"vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker\", \"vs/base/common/cancellation\", \"vs/css!./media/extensions\"], function (require, exports, nls_1, keyCodes_1, platform_1, actions_1, extensions_1, extensionManagement_1, actions_2, extensionTipsService_1, contributions_1, output_1, descriptors_1, extensions_2, extensionsWorkbenchService_1, extensionsActions_1, extensionsInput_1, viewlet_1, extensionEditor_1, extensionsViewlet_1, quickopen_1, configurationRegistry_1, jsonContributionRegistry, extensionsFileTemplate_1, commands_1, instantiation_1, extensionsUtils_1, extensionManagementUtil_1, extensionsQuickOpen_1, editor_1, lifecycle_1, runtimeExtensionsEditor_1, editor_2, extensionProfileService_1, runtimeExtensionsInput_1, uri_1, contextkey_1, extensionsActivationProgress_1, extensionsAutoProfiler_1, errors_1, extensionsDependencyChecker_1, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Singletons\n    extensions_1.registerSingleton(extensions_2.IExtensionsWorkbenchService, extensionsWorkbenchService_1.ExtensionsWorkbenchService);\n    extensions_1.registerSingleton(extensionManagement_1.IExtensionTipsService, extensionTipsService_1.ExtensionTipsService);\n    extensions_1.registerSingleton(runtimeExtensionsEditor_1.IExtensionHostProfileService, extensionProfileService_1.ExtensionHostProfileService, true);\n    const workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\n    workbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.StatusUpdater, lifecycle_1.LifecyclePhase.Restored);\n    workbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.MaliciousExtensionChecker, lifecycle_1.LifecyclePhase.Eventually);\n    workbenchRegistry.registerWorkbenchContribution(extensionsActions_1.ConfigureRecommendedExtensionsCommandsContributor, lifecycle_1.LifecyclePhase.Eventually);\n    workbenchRegistry.registerWorkbenchContribution(extensionsUtils_1.KeymapExtensions, lifecycle_1.LifecyclePhase.Restored);\n    workbenchRegistry.registerWorkbenchContribution(extensionsViewlet_1.ExtensionsViewletViewsContribution, lifecycle_1.LifecyclePhase.Starting);\n    workbenchRegistry.registerWorkbenchContribution(extensionsActivationProgress_1.ExtensionActivationProgress, lifecycle_1.LifecyclePhase.Eventually);\n    workbenchRegistry.registerWorkbenchContribution(extensionsAutoProfiler_1.ExtensionsAutoProfiler, lifecycle_1.LifecyclePhase.Eventually);\n    workbenchRegistry.registerWorkbenchContribution(extensionsDependencyChecker_1.ExtensionDependencyChecker, lifecycle_1.LifecyclePhase.Eventually);\n    platform_1.Registry.as(output_1.Extensions.OutputChannels)\n        .registerChannel({ id: extensionManagement_1.ExtensionsChannelId, label: extensionManagement_1.ExtensionsLabel, log: false });\n    // Quickopen\n    platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(extensionsQuickOpen_1.ExtensionsHandler, extensionsQuickOpen_1.ExtensionsHandler.ID, 'ext ', undefined, nls_1.localize('extensionsCommands', \"Manage Extensions\"), true));\n    platform_1.Registry.as(quickopen_1.Extensions.Quickopen).registerQuickOpenHandler(new quickopen_1.QuickOpenHandlerDescriptor(extensionsQuickOpen_1.GalleryExtensionsHandler, extensionsQuickOpen_1.GalleryExtensionsHandler.ID, 'ext install ', undefined, nls_1.localize('galleryExtensionsCommands', \"Install Gallery Extensions\"), true));\n    // Editor\n    const editorDescriptor = new editor_1.EditorDescriptor(extensionEditor_1.ExtensionEditor, extensionEditor_1.ExtensionEditor.ID, nls_1.localize('extension', \"Extension\"));\n    platform_1.Registry.as(editor_1.Extensions.Editors)\n        .registerEditor(editorDescriptor, [new descriptors_1.SyncDescriptor(extensionsInput_1.ExtensionsInput)]);\n    // Running Extensions Editor\n    const runtimeExtensionsEditorDescriptor = new editor_1.EditorDescriptor(runtimeExtensionsEditor_1.RuntimeExtensionsEditor, runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID, nls_1.localize('runtimeExtension', \"Running Extensions\"));\n    platform_1.Registry.as(editor_1.Extensions.Editors)\n        .registerEditor(runtimeExtensionsEditorDescriptor, [new descriptors_1.SyncDescriptor(runtimeExtensionsInput_1.RuntimeExtensionsInput)]);\n    class RuntimeExtensionsInputFactory {\n        serialize(editorInput) {\n            return '';\n        }\n        deserialize(instantiationService, serializedEditorInput) {\n            return new runtimeExtensionsInput_1.RuntimeExtensionsInput();\n        }\n    }\n    platform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(runtimeExtensionsInput_1.RuntimeExtensionsInput.ID, RuntimeExtensionsInputFactory);\n    // Viewlet\n    const viewletDescriptor = new viewlet_1.ViewletDescriptor(extensionsViewlet_1.ExtensionsViewlet, extensions_2.VIEWLET_ID, nls_1.localize('extensions', \"Extensions\"), 'extensions', 4);\n    platform_1.Registry.as(viewlet_1.Extensions.Viewlets)\n        .registerViewlet(viewletDescriptor);\n    // Global actions\n    const actionRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\n    const openViewletActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.OpenExtensionsViewletAction, extensionsActions_1.OpenExtensionsViewletAction.ID, extensionsActions_1.OpenExtensionsViewletAction.LABEL, { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_X });\n    actionRegistry.registerWorkbenchAction(openViewletActionDescriptor, 'View: Show Extensions', nls_1.localize('view', \"View\"));\n    const installActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.InstallExtensionsAction, extensionsActions_1.InstallExtensionsAction.ID, extensionsActions_1.InstallExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(installActionDescriptor, 'Extensions: Install Extensions', extensionManagement_1.ExtensionsLabel);\n    const listOutdatedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowOutdatedExtensionsAction, extensionsActions_1.ShowOutdatedExtensionsAction.ID, extensionsActions_1.ShowOutdatedExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(listOutdatedActionDescriptor, 'Extensions: Show Outdated Extensions', extensionManagement_1.ExtensionsLabel);\n    const recommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedExtensionsAction, extensionsActions_1.ShowRecommendedExtensionsAction.ID, extensionsActions_1.ShowRecommendedExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(recommendationsActionDescriptor, 'Extensions: Show Recommended Extensions', extensionManagement_1.ExtensionsLabel);\n    const keymapRecommendationsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowRecommendedKeymapExtensionsAction, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID, extensionsActions_1.ShowRecommendedKeymapExtensionsAction.SHORT_LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_M) });\n    actionRegistry.registerWorkbenchAction(keymapRecommendationsActionDescriptor, 'Preferences: Keymaps', extensionManagement_1.PreferencesLabel);\n    const languageExtensionsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowLanguageExtensionsAction, extensionsActions_1.ShowLanguageExtensionsAction.ID, extensionsActions_1.ShowLanguageExtensionsAction.SHORT_LABEL);\n    actionRegistry.registerWorkbenchAction(languageExtensionsActionDescriptor, 'Preferences: Language Extensions', extensionManagement_1.PreferencesLabel);\n    const azureExtensionsActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowAzureExtensionsAction, extensionsActions_1.ShowAzureExtensionsAction.ID, extensionsActions_1.ShowAzureExtensionsAction.SHORT_LABEL);\n    actionRegistry.registerWorkbenchAction(azureExtensionsActionDescriptor, 'Preferences: Azure Extensions', extensionManagement_1.PreferencesLabel);\n    const popularActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowPopularExtensionsAction, extensionsActions_1.ShowPopularExtensionsAction.ID, extensionsActions_1.ShowPopularExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(popularActionDescriptor, 'Extensions: Show Popular Extensions', extensionManagement_1.ExtensionsLabel);\n    const enabledActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowEnabledExtensionsAction, extensionsActions_1.ShowEnabledExtensionsAction.ID, extensionsActions_1.ShowEnabledExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(enabledActionDescriptor, 'Extensions: Show Enabled Extensions', extensionManagement_1.ExtensionsLabel);\n    const installedActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowInstalledExtensionsAction, extensionsActions_1.ShowInstalledExtensionsAction.ID, extensionsActions_1.ShowInstalledExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(installedActionDescriptor, 'Extensions: Show Installed Extensions', extensionManagement_1.ExtensionsLabel);\n    const disabledActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowDisabledExtensionsAction, extensionsActions_1.ShowDisabledExtensionsAction.ID, extensionsActions_1.ShowDisabledExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(disabledActionDescriptor, 'Extensions: Show Disabled Extensions', extensionManagement_1.ExtensionsLabel);\n    const builtinActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.ShowBuiltInExtensionsAction, extensionsActions_1.ShowBuiltInExtensionsAction.ID, extensionsActions_1.ShowBuiltInExtensionsAction.LABEL);\n    actionRegistry.registerWorkbenchAction(builtinActionDescriptor, 'Extensions: Show Built-in Extensions', extensionManagement_1.ExtensionsLabel);\n    const updateAllActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.UpdateAllAction, extensionsActions_1.UpdateAllAction.ID, extensionsActions_1.UpdateAllAction.LABEL);\n    actionRegistry.registerWorkbenchAction(updateAllActionDescriptor, 'Extensions: Update All Extensions', extensionManagement_1.ExtensionsLabel);\n    const openExtensionsFolderActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.OpenExtensionsFolderAction, extensionsActions_1.OpenExtensionsFolderAction.ID, extensionsActions_1.OpenExtensionsFolderAction.LABEL);\n    actionRegistry.registerWorkbenchAction(openExtensionsFolderActionDescriptor, 'Extensions: Open Extensions Folder', extensionManagement_1.ExtensionsLabel);\n    const installVSIXActionDescriptor = new actions_1.SyncActionDescriptor(extensionsActions_1.InstallVSIXAction, extensionsActions_1.InstallVSIXAction.ID, extensionsActions_1.InstallVSIXAction.LABEL);\n    actionRegistry.registerWorkbenchAction(installVSIXActionDescriptor, 'Extensions: Install from VSIX...', extensionManagement_1.ExtensionsLabel);\n    const disableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllAction, extensionsActions_1.DisableAllAction.ID, extensionsActions_1.DisableAllAction.LABEL);\n    actionRegistry.registerWorkbenchAction(disableAllAction, 'Extensions: Disable All Installed Extensions', extensionManagement_1.ExtensionsLabel);\n    const disableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAllWorkpsaceAction, extensionsActions_1.DisableAllWorkpsaceAction.ID, extensionsActions_1.DisableAllWorkpsaceAction.LABEL);\n    actionRegistry.registerWorkbenchAction(disableAllWorkspaceAction, 'Extensions: Disable All Installed Extensions for this Workspace', extensionManagement_1.ExtensionsLabel);\n    const enableAllAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllAction, extensionsActions_1.EnableAllAction.ID, extensionsActions_1.EnableAllAction.LABEL);\n    actionRegistry.registerWorkbenchAction(enableAllAction, 'Extensions: Enable All Installed Extensions', extensionManagement_1.ExtensionsLabel);\n    const enableAllWorkspaceAction = new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAllWorkpsaceAction, extensionsActions_1.EnableAllWorkpsaceAction.ID, extensionsActions_1.EnableAllWorkpsaceAction.LABEL);\n    actionRegistry.registerWorkbenchAction(enableAllWorkspaceAction, 'Extensions: Enable All Installed Extensions for this Workspace', extensionManagement_1.ExtensionsLabel);\n    const checkForUpdatesAction = new actions_1.SyncActionDescriptor(extensionsActions_1.CheckForUpdatesAction, extensionsActions_1.CheckForUpdatesAction.ID, extensionsActions_1.CheckForUpdatesAction.LABEL);\n    actionRegistry.registerWorkbenchAction(checkForUpdatesAction, `Extensions: Check for Updates`, extensionManagement_1.ExtensionsLabel);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.EnableAutoUpdateAction, extensionsActions_1.EnableAutoUpdateAction.ID, extensionsActions_1.EnableAutoUpdateAction.LABEL), `Extensions: Enable Auto Updating Extensions`, extensionManagement_1.ExtensionsLabel);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.DisableAutoUpdateAction, extensionsActions_1.DisableAutoUpdateAction.ID, extensionsActions_1.DisableAutoUpdateAction.LABEL), `Extensions: Disable Auto Updating Extensions`, extensionManagement_1.ExtensionsLabel);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.InstallSpecificVersionOfExtensionAction, extensionsActions_1.InstallSpecificVersionOfExtensionAction.ID, extensionsActions_1.InstallSpecificVersionOfExtensionAction.LABEL), 'Install Specific Version of Extension...', extensionManagement_1.ExtensionsLabel);\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction, runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction.ID, runtimeExtensionsEditor_1.ShowRuntimeExtensionsAction.LABEL), 'Show Running Extensions', nls_1.localize('developer', \"Developer\"));\n    actionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(extensionsActions_1.ReinstallAction, extensionsActions_1.ReinstallAction.ID, extensionsActions_1.ReinstallAction.LABEL), 'Reinstall Extension...', nls_1.localize('developer', \"Developer\"));\n    platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration)\n        .registerConfiguration({\n        id: 'extensions',\n        order: 30,\n        title: nls_1.localize('extensionsConfigurationTitle', \"Extensions\"),\n        type: 'object',\n        properties: {\n            'extensions.autoUpdate': {\n                type: 'boolean',\n                description: nls_1.localize('extensionsAutoUpdate', \"When enabled, automatically installs updates for extensions. The updates are fetched from a Microsoft online service.\"),\n                default: true,\n                scope: configurationRegistry_1.ConfigurationScope.APPLICATION,\n                tags: ['usesOnlineServices']\n            },\n            'extensions.autoCheckUpdates': {\n                type: 'boolean',\n                description: nls_1.localize('extensionsCheckUpdates', \"When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.\"),\n                default: true,\n                scope: configurationRegistry_1.ConfigurationScope.APPLICATION,\n                tags: ['usesOnlineServices']\n            },\n            'extensions.ignoreRecommendations': {\n                type: 'boolean',\n                description: nls_1.localize('extensionsIgnoreRecommendations', \"When enabled, the notifications for extension recommendations will not be shown.\"),\n                default: false\n            },\n            'extensions.showRecommendationsOnlyOnDemand': {\n                type: 'boolean',\n                description: nls_1.localize('extensionsShowRecommendationsOnlyOnDemand', \"When enabled, recommendations will not be fetched or shown unless specifically requested by the user. Some recommendations are fetched from a Microsoft online service.\"),\n                default: false,\n                tags: ['usesOnlineServices']\n            },\n            'extensions.closeExtensionDetailsOnViewChange': {\n                type: 'boolean',\n                description: nls_1.localize('extensionsCloseExtensionDetailsOnViewChange', \"When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.\"),\n                default: false\n            }\n        }\n    });\n    const jsonRegistry = platform_1.Registry.as(jsonContributionRegistry.Extensions.JSONContribution);\n    jsonRegistry.registerSchema(extensionsFileTemplate_1.ExtensionsConfigurationSchemaId, extensionsFileTemplate_1.ExtensionsConfigurationSchema);\n    // Register Commands\n    commands_1.CommandsRegistry.registerCommand('_extensions.manage', (accessor, extensionId) => {\n        const extensionService = accessor.get(extensions_2.IExtensionsWorkbenchService);\n        const extension = extensionService.local.filter(e => extensionManagementUtil_1.areSameExtensions(e.identifier, { id: extensionId }));\n        if (extension.length === 1) {\n            extensionService.open(extension[0]);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand('extension.open', (accessor, extensionId) => {\n        const extensionService = accessor.get(extensions_2.IExtensionsWorkbenchService);\n        return extensionService.queryGallery({ names: [extensionId], pageSize: 1 }, cancellation_1.CancellationToken.None).then(pager => {\n            if (pager.total !== 1) {\n                return;\n            }\n            extensionService.open(pager.firstPage[0]);\n        });\n    });\n    commands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.DebugExtensionHostAction.ID, (accessor) => {\n        const instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        instantiationService.createInstance(runtimeExtensionsEditor_1.DebugExtensionHostAction).run();\n    });\n    commands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID, (accessor) => {\n        const instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        instantiationService.createInstance(runtimeExtensionsEditor_1.StartExtensionHostProfileAction, runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.StartExtensionHostProfileAction.LABEL).run();\n    });\n    commands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID, (accessor) => {\n        const instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        instantiationService.createInstance(runtimeExtensionsEditor_1.StopExtensionHostProfileAction, runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.StopExtensionHostProfileAction.LABEL).run();\n    });\n    commands_1.CommandsRegistry.registerCommand(runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID, (accessor) => {\n        const instantiationService = accessor.get(instantiation_1.IInstantiationService);\n        instantiationService.createInstance(runtimeExtensionsEditor_1.SaveExtensionHostProfileAction, runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID, runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.LABEL).run();\n    });\n    // File menu registration\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n        group: '2_keybindings',\n        command: {\n            id: extensionsActions_1.ShowRecommendedKeymapExtensionsAction.ID,\n            title: nls_1.localize({ key: 'miOpenKeymapExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Keymaps\")\n        },\n        order: 2\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n        group: '1_settings',\n        command: {\n            id: extensions_2.VIEWLET_ID,\n            title: nls_1.localize({ key: 'miPreferencesExtensions', comment: ['&& denotes a mnemonic'] }, \"&&Extensions\")\n        },\n        order: 2\n    });\n    // View menu\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarViewMenu, {\n        group: '3_views',\n        command: {\n            id: extensions_2.VIEWLET_ID,\n            title: nls_1.localize({ key: 'miViewExtensions', comment: ['&& denotes a mnemonic'] }, \"E&&xtensions\")\n        },\n        order: 5\n    });\n    // Running extensions\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: runtimeExtensionsEditor_1.DebugExtensionHostAction.ID,\n            title: runtimeExtensionsEditor_1.DebugExtensionHostAction.LABEL,\n            iconLocation: {\n                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/start-inverse.svg`)),\n                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/start.svg`)),\n            }\n        },\n        group: 'navigation',\n        when: editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID)\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: runtimeExtensionsEditor_1.StartExtensionHostProfileAction.ID,\n            title: runtimeExtensionsEditor_1.StartExtensionHostProfileAction.LABEL,\n            iconLocation: {\n                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-start-inverse.svg`)),\n                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-start.svg`)),\n            }\n        },\n        group: 'navigation',\n        when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID), runtimeExtensionsEditor_1.CONTEXT_PROFILE_SESSION_STATE.notEqualsTo('running'))\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: runtimeExtensionsEditor_1.StopExtensionHostProfileAction.ID,\n            title: runtimeExtensionsEditor_1.StopExtensionHostProfileAction.LABEL,\n            iconLocation: {\n                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-stop-inverse.svg`)),\n                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/profile-stop.svg`)),\n            }\n        },\n        group: 'navigation',\n        when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID), runtimeExtensionsEditor_1.CONTEXT_PROFILE_SESSION_STATE.isEqualTo('running'))\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n        command: {\n            id: runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.ID,\n            title: runtimeExtensionsEditor_1.SaveExtensionHostProfileAction.LABEL,\n            iconLocation: {\n                dark: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/save-inverse.svg`)),\n                light: uri_1.URI.parse(require.toUrl(`vs/workbench/contrib/extensions/electron-browser/media/save.svg`)),\n            },\n            precondition: runtimeExtensionsEditor_1.CONTEXT_EXTENSION_HOST_PROFILE_RECORDED\n        },\n        group: 'navigation',\n        when: contextkey_1.ContextKeyExpr.and(editor_2.ActiveEditorContext.isEqualTo(runtimeExtensionsEditor_1.RuntimeExtensionsEditor.ID))\n    });\n    commands_1.CommandsRegistry.registerCommand({\n        id: 'workbench.extensions.installExtension',\n        description: {\n            description: nls_1.localize('workbench.extensions.installExtension.description', \"Install the given extension\"),\n            args: [\n                {\n                    name: nls_1.localize('workbench.extensions.installExtension.arg.name', \"Extension id or VSIX resource uri\"),\n                    schema: {\n                        'type': ['object', 'string']\n                    }\n                }\n            ]\n        },\n        handler: (accessor, arg) => __awaiter(this, void 0, void 0, function* () {\n            const extensionManagementService = accessor.get(extensionManagement_1.IExtensionManagementService);\n            const extensionGalleryService = accessor.get(extensionManagement_1.IExtensionGalleryService);\n            try {\n                if (typeof arg === 'string') {\n                    const extension = yield extensionGalleryService.getCompatibleExtension({ id: arg });\n                    if (extension) {\n                        yield extensionManagementService.installFromGallery(extension);\n                    }\n                    else {\n                        throw new Error(nls_1.localize('notFound', \"Extension '{0}' not found.\", arg));\n                    }\n                }\n                else {\n                    const vsix = uri_1.URI.revive(arg);\n                    yield extensionManagementService.install(vsix);\n                }\n            }\n            catch (e) {\n                errors_1.onUnexpectedError(e);\n            }\n        })\n    });\n});\n",null]}