{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar extensions_1 = require(\"vs/workbench/contrib/extensions/common/extensions\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar nls_1 = require(\"vs/nls\");\nvar map_1 = require(\"vs/base/common/map\");\nvar extensionManagementUtil_1 = require(\"vs/platform/extensionManagement/common/extensionManagementUtil\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar actions_2 = require(\"vs/base/common/actions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar ExtensionDependencyChecker = /** @class */ (function (_super) {\n    tslib_1.__extends(ExtensionDependencyChecker, _super);\n    function ExtensionDependencyChecker(extensionService, extensionsWorkbenchService, notificationService, windowService) {\n        var _this = _super.call(this) || this;\n        _this.extensionService = extensionService;\n        _this.extensionsWorkbenchService = extensionsWorkbenchService;\n        _this.notificationService = notificationService;\n        _this.windowService = windowService;\n        commands_1.CommandsRegistry.registerCommand('workbench.extensions.installMissingDepenencies', function () { return _this.installMissingDependencies(); });\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n            command: {\n                id: 'workbench.extensions.installMissingDepenencies',\n                category: nls_1.localize('extensions', \"Extensions\"),\n                title: nls_1.localize('auto install missing deps', \"Install Missing Dependencies\")\n            }\n        });\n        return _this;\n    }\n    ExtensionDependencyChecker.prototype.getUninstalledMissingDependencies = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var allMissingDependencies, localExtensions;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getAllMissingDependencies()];\n                    case 1:\n                        allMissingDependencies = _a.sent();\n                        return [4 /*yield*/, this.extensionsWorkbenchService.queryLocal()];\n                    case 2:\n                        localExtensions = _a.sent();\n                        return [2 /*return*/, allMissingDependencies.filter(function (id) { return localExtensions.every(function (l) { return !extensionManagementUtil_1.areSameExtensions(l.identifier, { id: id }); }); })];\n                }\n            });\n        });\n    };\n    ExtensionDependencyChecker.prototype.getAllMissingDependencies = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var runningExtensions, runningExtensionsIds, missingDependencies, _i, runningExtensions_1, extension;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.extensionService.getExtensions()];\n                    case 1:\n                        runningExtensions = _a.sent();\n                        runningExtensionsIds = runningExtensions.reduce(function (result, r) { result.add(r.identifier.value.toLowerCase()); return result; }, new Set());\n                        missingDependencies = new Set();\n                        for (_i = 0, runningExtensions_1 = runningExtensions; _i < runningExtensions_1.length; _i++) {\n                            extension = runningExtensions_1[_i];\n                            if (extension.extensionDependencies) {\n                                extension.extensionDependencies.forEach(function (dep) {\n                                    if (!runningExtensionsIds.has(dep.toLowerCase())) {\n                                        missingDependencies.add(dep);\n                                    }\n                                });\n                            }\n                        }\n                        return [2 /*return*/, map_1.values(missingDependencies)];\n                }\n            });\n        });\n    };\n    ExtensionDependencyChecker.prototype.installMissingDependencies = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var missingDependencies, extensions;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getUninstalledMissingDependencies()];\n                    case 1:\n                        missingDependencies = _a.sent();\n                        if (!missingDependencies.length) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.extensionsWorkbenchService.queryGallery({ names: missingDependencies, pageSize: missingDependencies.length }, cancellation_1.CancellationToken.None)];\n                    case 2:\n                        extensions = (_a.sent()).firstPage;\n                        if (!extensions.length) return [3 /*break*/, 4];\n                        return [4 /*yield*/, Promise.all(extensions.map(function (extension) { return _this.extensionsWorkbenchService.install(extension); }))];\n                    case 3:\n                        _a.sent();\n                        this.notificationService.notify({\n                            severity: notification_1.Severity.Info,\n                            message: nls_1.localize('finished installing missing deps', \"Finished installing missing dependencies. Please reload the window now.\"),\n                            actions: {\n                                primary: [new actions_2.Action('realod', nls_1.localize('reload', \"Realod Window\"), '', true, function () { return _this.windowService.reloadWindow(); })]\n                            }\n                        });\n                        _a.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        this.notificationService.info(nls_1.localize('no missing deps', \"There are no missing dependencies to install.\"));\n                        _a.label = 6;\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExtensionDependencyChecker = tslib_1.__decorate([\n        tslib_1.__param(0, extensions_2.IExtensionService),\n        tslib_1.__param(1, extensions_1.IExtensionsWorkbenchService),\n        tslib_1.__param(2, notification_1.INotificationService),\n        tslib_1.__param(3, windows_1.IWindowService)\n    ], ExtensionDependencyChecker);\n    return ExtensionDependencyChecker;\n}(lifecycle_1.Disposable));\nexports.ExtensionDependencyChecker = ExtensionDependencyChecker;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionsDependencyChecker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { values } from 'vs/base/common/map';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class ExtensionDependencyChecker extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWindowService private readonly windowService: IWindowService\n\t) {\n\t\tsuper();\n\t\tCommandsRegistry.registerCommand('workbench.extensions.installMissingDepenencies', () => this.installMissingDependencies());\n\t\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\t\tcommand: {\n\t\t\t\tid: 'workbench.extensions.installMissingDepenencies',\n\t\t\t\tcategory: localize('extensions', \"Extensions\"),\n\t\t\t\ttitle: localize('auto install missing deps', \"Install Missing Dependencies\")\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async getUninstalledMissingDependencies(): Promise<string[]> {\n\t\tconst allMissingDependencies = await this.getAllMissingDependencies();\n\t\tconst localExtensions = await this.extensionsWorkbenchService.queryLocal();\n\t\treturn allMissingDependencies.filter(id => localExtensions.every(l => !areSameExtensions(l.identifier, { id })));\n\t}\n\n\tprivate async getAllMissingDependencies(): Promise<string[]> {\n\t\tconst runningExtensions = await this.extensionService.getExtensions();\n\t\tconst runningExtensionsIds: Set<string> = runningExtensions.reduce((result, r) => { result.add(r.identifier.value.toLowerCase()); return result; }, new Set<string>());\n\t\tconst missingDependencies: Set<string> = new Set<string>();\n\t\tfor (const extension of runningExtensions) {\n\t\t\tif (extension.extensionDependencies) {\n\t\t\t\textension.extensionDependencies.forEach(dep => {\n\t\t\t\t\tif (!runningExtensionsIds.has(dep.toLowerCase())) {\n\t\t\t\t\t\tmissingDependencies.add(dep);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn values(missingDependencies);\n\t}\n\n\tprivate async installMissingDependencies(): Promise<void> {\n\t\tconst missingDependencies = await this.getUninstalledMissingDependencies();\n\t\tif (missingDependencies.length) {\n\t\t\tconst extensions = (await this.extensionsWorkbenchService.queryGallery({ names: missingDependencies, pageSize: missingDependencies.length }, CancellationToken.None)).firstPage;\n\t\t\tif (extensions.length) {\n\t\t\t\tawait Promise.all(extensions.map(extension => this.extensionsWorkbenchService.install(extension)));\n\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\tmessage: localize('finished installing missing deps', \"Finished installing missing dependencies. Please reload the window now.\"),\n\t\t\t\t\tactions: {\n\t\t\t\t\t\tprimary: [new Action('realod', localize('reload', \"Realod Window\"), '', true,\n\t\t\t\t\t\t\t() => this.windowService.reloadWindow())]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.notificationService.info(localize('no missing deps', \"There are no missing dependencies to install.\"));\n\t\t}\n\t}\n}"]}]}