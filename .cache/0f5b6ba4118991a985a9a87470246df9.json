{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar env = require(\"vs/base/common/platform\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar _DEFAULT_TERMINAL_LINUX_READY = null;\nfunction getDefaultTerminalLinuxReady() {\n    if (!_DEFAULT_TERMINAL_LINUX_READY) {\n        _DEFAULT_TERMINAL_LINUX_READY = new Promise(function (c) {\n            if (env.isLinux) {\n                Promise.all([pfs.exists('/etc/debian_version'), process.lazyEnv || Promise.resolve(undefined)]).then(function (_a) {\n                    var isDebian = _a[0];\n                    if (isDebian) {\n                        c('x-terminal-emulator');\n                    }\n                    else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n                        c('gnome-terminal');\n                    }\n                    else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n                        c('konsole');\n                    }\n                    else if (process.env.COLORTERM) {\n                        c(process.env.COLORTERM);\n                    }\n                    else if (process.env.TERM) {\n                        c(process.env.TERM);\n                    }\n                    else {\n                        c('xterm');\n                    }\n                });\n                return;\n            }\n            c('xterm');\n        });\n    }\n    return _DEFAULT_TERMINAL_LINUX_READY;\n}\nexports.getDefaultTerminalLinuxReady = getDefaultTerminalLinuxReady;\nexports.DEFAULT_TERMINAL_OSX = 'Terminal.app';\nvar _DEFAULT_TERMINAL_WINDOWS = null;\nfunction getDefaultTerminalWindows() {\n    if (!_DEFAULT_TERMINAL_WINDOWS) {\n        var isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n        _DEFAULT_TERMINAL_WINDOWS = (process.env.windir ? process.env.windir : 'C:\\\\Windows') + \"\\\\\" + (isWoW64 ? 'Sysnative' : 'System32') + \"\\\\cmd.exe\";\n    }\n    return _DEFAULT_TERMINAL_WINDOWS;\n}\nexports.getDefaultTerminalWindows = getDefaultTerminalWindows;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/externalTerminal/electron-browser/externalTerminal.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,6CAA+C;AAC/C,sCAAwC;AAExC,IAAI,6BAA6B,GAA2B,IAAI,CAAC;AACjE,SAAgB,4BAA4B;IAC3C,IAAI,CAAC,6BAA6B,EAAE;QACnC,6BAA6B,GAAG,IAAI,OAAO,CAAS,UAAA,CAAC;YACpD,IAAI,GAAG,CAAC,OAAO,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU;wBAAT,gBAAQ;oBAC9G,IAAI,QAAQ,EAAE;wBACb,CAAC,CAAC,qBAAqB,CAAC,CAAC;qBACzB;yBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,eAAe,EAAE;wBACtG,CAAC,CAAC,gBAAgB,CAAC,CAAC;qBACpB;yBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,KAAK,YAAY,EAAE;wBACxD,CAAC,CAAC,SAAS,CAAC,CAAC;qBACb;yBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE;wBACjC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;qBACzB;yBAAM,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE;wBAC5B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBACpB;yBAAM;wBACN,CAAC,CAAC,OAAO,CAAC,CAAC;qBACX;gBACF,CAAC,CAAC,CAAC;gBACH,OAAO;aACP;YAED,CAAC,CAAC,OAAO,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;KACH;IACD,OAAO,6BAA6B,CAAC;AACtC,CAAC;AA1BD,oEA0BC;AAEY,QAAA,oBAAoB,GAAG,cAAc,CAAC;AAEnD,IAAI,yBAAyB,GAAkB,IAAI,CAAC;AACpD,SAAgB,yBAAyB;IACxC,IAAI,CAAC,yBAAyB,EAAE;QAC/B,IAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;QACvE,yBAAyB,GAAG,CAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,YAAK,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,eAAW,CAAC;KACzI;IACD,OAAO,yBAAyB,CAAC;AAClC,CAAC;AAND,8DAMC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as env from 'vs/base/common/platform';\nimport * as pfs from 'vs/base/node/pfs';\n\nlet _DEFAULT_TERMINAL_LINUX_READY: Promise<string> | null = null;\nexport function getDefaultTerminalLinuxReady(): Promise<string> {\n\tif (!_DEFAULT_TERMINAL_LINUX_READY) {\n\t\t_DEFAULT_TERMINAL_LINUX_READY = new Promise<string>(c => {\n\t\t\tif (env.isLinux) {\n\t\t\t\tPromise.all([pfs.exists('/etc/debian_version'), process.lazyEnv || Promise.resolve(undefined)]).then(([isDebian]) => {\n\t\t\t\t\tif (isDebian) {\n\t\t\t\t\t\tc('x-terminal-emulator');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n\t\t\t\t\t\tc('gnome-terminal');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n\t\t\t\t\t\tc('konsole');\n\t\t\t\t\t} else if (process.env.COLORTERM) {\n\t\t\t\t\t\tc(process.env.COLORTERM);\n\t\t\t\t\t} else if (process.env.TERM) {\n\t\t\t\t\t\tc(process.env.TERM);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc('xterm');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tc('xterm');\n\t\t});\n\t}\n\treturn _DEFAULT_TERMINAL_LINUX_READY;\n}\n\nexport const DEFAULT_TERMINAL_OSX = 'Terminal.app';\n\nlet _DEFAULT_TERMINAL_WINDOWS: string | null = null;\nexport function getDefaultTerminalWindows(): string {\n\tif (!_DEFAULT_TERMINAL_WINDOWS) {\n\t\tconst isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t_DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : 'C:\\\\Windows'}\\\\${isWoW64 ? 'Sysnative' : 'System32'}\\\\cmd.exe`;\n\t}\n\treturn _DEFAULT_TERMINAL_WINDOWS;\n}\n"]}]}