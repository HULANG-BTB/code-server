{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar Types = require(\"vs/base/common/types\");\nvar Objects = require(\"vs/base/common/objects\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar taskDefinitionSchema = {\n    type: 'object',\n    additionalProperties: false,\n    properties: {\n        type: {\n            type: 'string',\n            description: nls.localize('TaskDefinition.description', 'The actual task type. Please note that types starting with a \\'$\\' are reserved for internal usage.')\n        },\n        required: {\n            type: 'array',\n            items: {\n                type: 'string'\n            }\n        },\n        properties: {\n            type: 'object',\n            description: nls.localize('TaskDefinition.properties', 'Additional properties of the task type'),\n            additionalProperties: {\n                $ref: 'http://json-schema.org/draft-04/schema#'\n            }\n        }\n    }\n};\nvar Configuration;\n(function (Configuration) {\n    function from(value, extensionId, messageCollector) {\n        if (!value) {\n            return undefined;\n        }\n        var taskType = Types.isString(value.type) ? value.type : undefined;\n        if (!taskType || taskType.length === 0) {\n            messageCollector.error(nls.localize('TaskTypeConfiguration.noType', 'The task type configuration is missing the required \\'taskType\\' property'));\n            return undefined;\n        }\n        var required = [];\n        if (Array.isArray(value.required)) {\n            for (var _i = 0, _a = value.required; _i < _a.length; _i++) {\n                var element = _a[_i];\n                if (Types.isString(element)) {\n                    required.push(element);\n                }\n            }\n        }\n        return { extensionId: extensionId.value, taskType: taskType, required: required, properties: value.properties ? Objects.deepClone(value.properties) : {} };\n    }\n    Configuration.from = from;\n})(Configuration || (Configuration = {}));\nvar taskDefinitionsExtPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'taskDefinitions',\n    jsonSchema: {\n        description: nls.localize('TaskDefinitionExtPoint', 'Contributes task kinds'),\n        type: 'array',\n        items: taskDefinitionSchema\n    }\n});\nvar TaskDefinitionRegistryImpl = /** @class */ (function () {\n    function TaskDefinitionRegistryImpl() {\n        var _this = this;\n        this.taskTypes = Object.create(null);\n        this.readyPromise = new Promise(function (resolve, reject) {\n            taskDefinitionsExtPoint.setHandler(function (extensions, delta) {\n                try {\n                    for (var _i = 0, _a = delta.removed; _i < _a.length; _i++) {\n                        var extension = _a[_i];\n                        var taskTypes = extension.value;\n                        for (var _b = 0, taskTypes_1 = taskTypes; _b < taskTypes_1.length; _b++) {\n                            var taskType = taskTypes_1[_b];\n                            if (_this.taskTypes && taskType.type && _this.taskTypes[taskType.type]) {\n                                delete _this.taskTypes[taskType.type];\n                            }\n                        }\n                    }\n                    for (var _c = 0, _d = delta.added; _c < _d.length; _c++) {\n                        var extension = _d[_c];\n                        var taskTypes = extension.value;\n                        for (var _e = 0, taskTypes_2 = taskTypes; _e < taskTypes_2.length; _e++) {\n                            var taskType = taskTypes_2[_e];\n                            var type = Configuration.from(taskType, extension.description.identifier, extension.collector);\n                            if (type) {\n                                _this.taskTypes[type.taskType] = type;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                }\n                resolve(undefined);\n            });\n        });\n    }\n    TaskDefinitionRegistryImpl.prototype.onReady = function () {\n        return this.readyPromise;\n    };\n    TaskDefinitionRegistryImpl.prototype.get = function (key) {\n        return this.taskTypes[key];\n    };\n    TaskDefinitionRegistryImpl.prototype.all = function () {\n        var _this = this;\n        return Object.keys(this.taskTypes).map(function (key) { return _this.taskTypes[key]; });\n    };\n    TaskDefinitionRegistryImpl.prototype.getJsonSchema = function () {\n        if (this._schema === undefined) {\n            var schemas = [];\n            for (var _i = 0, _a = this.all(); _i < _a.length; _i++) {\n                var definition = _a[_i];\n                var schema = {\n                    type: 'object',\n                    additionalProperties: false\n                };\n                if (definition.required.length > 0) {\n                    schema.required = definition.required.slice(0);\n                }\n                if (definition.properties !== undefined) {\n                    schema.properties = Objects.deepClone(definition.properties);\n                }\n                else {\n                    schema.properties = Object.create(null);\n                }\n                schema.properties.type = {\n                    type: 'string',\n                    enum: [definition.taskType]\n                };\n                schemas.push(schema);\n            }\n            this._schema = { oneOf: schemas };\n        }\n        return this._schema;\n    };\n    return TaskDefinitionRegistryImpl;\n}());\nexports.TaskDefinitionRegistry = new TaskDefinitionRegistryImpl();\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport * as Types from 'vs/base/common/types';\nimport * as Objects from 'vs/base/common/objects';\n\nimport { ExtensionsRegistry, ExtensionMessageCollector } from 'vs/workbench/services/extensions/common/extensionsRegistry';\n\nimport * as Tasks from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\n\nconst taskDefinitionSchema: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\ttype: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('TaskDefinition.description', 'The actual task type. Please note that types starting with a \\'$\\' are reserved for internal usage.')\n\t\t},\n\t\trequired: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tproperties: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('TaskDefinition.properties', 'Additional properties of the task type'),\n\t\t\tadditionalProperties: {\n\t\t\t\t$ref: 'http://json-schema.org/draft-04/schema#'\n\t\t\t}\n\t\t}\n\t}\n};\n\nnamespace Configuration {\n\texport interface TaskDefinition {\n\t\ttype?: string;\n\t\trequired?: string[];\n\t\tproperties?: IJSONSchemaMap;\n\t}\n\n\texport function from(value: TaskDefinition, extensionId: ExtensionIdentifier, messageCollector: ExtensionMessageCollector): Tasks.TaskDefinition | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskType = Types.isString(value.type) ? value.type : undefined;\n\t\tif (!taskType || taskType.length === 0) {\n\t\t\tmessageCollector.error(nls.localize('TaskTypeConfiguration.noType', 'The task type configuration is missing the required \\'taskType\\' property'));\n\t\t\treturn undefined;\n\t\t}\n\t\tlet required: string[] = [];\n\t\tif (Array.isArray(value.required)) {\n\t\t\tfor (let element of value.required) {\n\t\t\t\tif (Types.isString(element)) {\n\t\t\t\t\trequired.push(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { extensionId: extensionId.value, taskType, required: required, properties: value.properties ? Objects.deepClone(value.properties) : {} };\n\t}\n}\n\n\nconst taskDefinitionsExtPoint = ExtensionsRegistry.registerExtensionPoint<Configuration.TaskDefinition[]>({\n\textensionPoint: 'taskDefinitions',\n\tjsonSchema: {\n\t\tdescription: nls.localize('TaskDefinitionExtPoint', 'Contributes task kinds'),\n\t\ttype: 'array',\n\t\titems: taskDefinitionSchema\n\t}\n});\n\nexport interface ITaskDefinitionRegistry {\n\tonReady(): Promise<void>;\n\n\tget(key: string): Tasks.TaskDefinition;\n\tall(): Tasks.TaskDefinition[];\n\tgetJsonSchema(): IJSONSchema;\n}\n\nclass TaskDefinitionRegistryImpl implements ITaskDefinitionRegistry {\n\n\tprivate taskTypes: IStringDictionary<Tasks.TaskDefinition>;\n\tprivate readyPromise: Promise<void>;\n\tprivate _schema: IJSONSchema;\n\n\tconstructor() {\n\t\tthis.taskTypes = Object.create(null);\n\t\tthis.readyPromise = new Promise<void>((resolve, reject) => {\n\t\t\ttaskDefinitionsExtPoint.setHandler((extensions, delta) => {\n\t\t\t\ttry {\n\t\t\t\t\tfor (let extension of delta.removed) {\n\t\t\t\t\t\tlet taskTypes = extension.value;\n\t\t\t\t\t\tfor (let taskType of taskTypes) {\n\t\t\t\t\t\t\tif (this.taskTypes && taskType.type && this.taskTypes[taskType.type]) {\n\t\t\t\t\t\t\t\tdelete this.taskTypes[taskType.type];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let extension of delta.added) {\n\t\t\t\t\t\tlet taskTypes = extension.value;\n\t\t\t\t\t\tfor (let taskType of taskTypes) {\n\t\t\t\t\t\t\tlet type = Configuration.from(taskType, extension.description.identifier, extension.collector);\n\t\t\t\t\t\t\tif (type) {\n\t\t\t\t\t\t\t\tthis.taskTypes[type.taskType] = type;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t}\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic onReady(): Promise<void> {\n\t\treturn this.readyPromise;\n\t}\n\n\tpublic get(key: string): Tasks.TaskDefinition {\n\t\treturn this.taskTypes[key];\n\t}\n\n\tpublic all(): Tasks.TaskDefinition[] {\n\t\treturn Object.keys(this.taskTypes).map(key => this.taskTypes[key]);\n\t}\n\n\tpublic getJsonSchema(): IJSONSchema {\n\t\tif (this._schema === undefined) {\n\t\t\tlet schemas: IJSONSchema[] = [];\n\t\t\tfor (let definition of this.all()) {\n\t\t\t\tlet schema: IJSONSchema = {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tadditionalProperties: false\n\t\t\t\t};\n\t\t\t\tif (definition.required.length > 0) {\n\t\t\t\t\tschema.required = definition.required.slice(0);\n\t\t\t\t}\n\t\t\t\tif (definition.properties !== undefined) {\n\t\t\t\t\tschema.properties = Objects.deepClone(definition.properties);\n\t\t\t\t} else {\n\t\t\t\t\tschema.properties = Object.create(null);\n\t\t\t\t}\n\t\t\t\tschema.properties!.type = {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [definition.taskType]\n\t\t\t\t};\n\t\t\t\tschemas.push(schema);\n\t\t\t}\n\t\t\tthis._schema = { oneOf: schemas };\n\t\t}\n\t\treturn this._schema;\n\t}\n}\n\nexport const TaskDefinitionRegistry: ITaskDefinitionRegistry = new TaskDefinitionRegistryImpl();\n"]}]}