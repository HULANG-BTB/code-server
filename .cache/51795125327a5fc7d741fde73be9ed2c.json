{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryUtils.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/common/telemetryUtils.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/platform/configuration/common/configuration\", \"vs/platform/keybinding/common/keybinding\", \"vs/platform/log/common/log\"], function (require, exports, configuration_1, keybinding_1, log_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.NullTelemetryService = new class {\n        publicLog(eventName, data) {\n            return Promise.resolve(undefined);\n        }\n        getTelemetryInfo() {\n            return Promise.resolve({\n                instanceId: 'someValue.instanceId',\n                sessionId: 'someValue.sessionId',\n                machineId: 'someValue.machineId'\n            });\n        }\n    };\n    function combinedAppender(...appenders) {\n        return {\n            log: (e, d) => appenders.forEach(a => a.log(e, d)),\n            dispose: () => Promise.all(appenders.map(a => a.dispose()))\n        };\n    }\n    exports.combinedAppender = combinedAppender;\n    exports.NullAppender = { log: () => null, dispose: () => Promise.resolve(null) };\n    let LogAppender = class LogAppender {\n        constructor(_logService) {\n            this._logService = _logService;\n            this.commonPropertiesRegex = /^sessionID$|^version$|^timestamp$|^commitHash$|^common\\./;\n        }\n        dispose() {\n            return Promise.resolve(undefined);\n        }\n        log(eventName, data) {\n            const strippedData = {};\n            Object.keys(data).forEach(key => {\n                if (!this.commonPropertiesRegex.test(key)) {\n                    strippedData[key] = data[key];\n                }\n            });\n            this._logService.trace(`telemetry/${eventName}`, strippedData);\n        }\n    };\n    LogAppender = __decorate([\n        __param(0, log_1.ILogService)\n    ], LogAppender);\n    exports.LogAppender = LogAppender;\n    /**\n     * Only add settings that cannot contain any personal/private information of users (PII).\n     */\n    const configurationValueWhitelist = [\n        'editor.fontFamily',\n        'editor.fontWeight',\n        'editor.fontSize',\n        'editor.lineHeight',\n        'editor.letterSpacing',\n        'editor.lineNumbers',\n        'editor.rulers',\n        'editor.wordSeparators',\n        'editor.tabSize',\n        'editor.indentSize',\n        'editor.insertSpaces',\n        'editor.detectIndentation',\n        'editor.roundedSelection',\n        'editor.scrollBeyondLastLine',\n        'editor.minimap.enabled',\n        'editor.minimap.side',\n        'editor.minimap.renderCharacters',\n        'editor.minimap.maxColumn',\n        'editor.find.seedSearchStringFromSelection',\n        'editor.find.autoFindInSelection',\n        'editor.wordWrap',\n        'editor.wordWrapColumn',\n        'editor.wrappingIndent',\n        'editor.mouseWheelScrollSensitivity',\n        'editor.multiCursorModifier',\n        'editor.quickSuggestions',\n        'editor.quickSuggestionsDelay',\n        'editor.parameterHints.enabled',\n        'editor.parameterHints.cycle',\n        'editor.autoClosingBrackets',\n        'editor.autoClosingQuotes',\n        'editor.autoSurround',\n        'editor.autoIndent',\n        'editor.formatOnType',\n        'editor.formatOnPaste',\n        'editor.suggestOnTriggerCharacters',\n        'editor.acceptSuggestionOnEnter',\n        'editor.acceptSuggestionOnCommitCharacter',\n        'editor.snippetSuggestions',\n        'editor.emptySelectionClipboard',\n        'editor.wordBasedSuggestions',\n        'editor.suggestSelection',\n        'editor.suggestFontSize',\n        'editor.suggestLineHeight',\n        'editor.tabCompletion',\n        'editor.selectionHighlight',\n        'editor.occurrencesHighlight',\n        'editor.overviewRulerLanes',\n        'editor.overviewRulerBorder',\n        'editor.cursorBlinking',\n        'editor.cursorSmoothCaretAnimation',\n        'editor.cursorStyle',\n        'editor.mouseWheelZoom',\n        'editor.fontLigatures',\n        'editor.hideCursorInOverviewRuler',\n        'editor.renderWhitespace',\n        'editor.renderControlCharacters',\n        'editor.renderIndentGuides',\n        'editor.renderLineHighlight',\n        'editor.codeLens',\n        'editor.folding',\n        'editor.showFoldingControls',\n        'editor.matchBrackets',\n        'editor.glyphMargin',\n        'editor.useTabStops',\n        'editor.trimAutoWhitespace',\n        'editor.stablePeek',\n        'editor.dragAndDrop',\n        'editor.formatOnSave',\n        'editor.colorDecorators',\n        'breadcrumbs.enabled',\n        'breadcrumbs.filePath',\n        'breadcrumbs.symbolPath',\n        'breadcrumbs.symbolSortOrder',\n        'breadcrumbs.useQuickPick',\n        'explorer.openEditors.visible',\n        'extensions.autoUpdate',\n        'files.associations',\n        'files.autoGuessEncoding',\n        'files.autoSave',\n        'files.autoSaveDelay',\n        'files.encoding',\n        'files.eol',\n        'files.hotExit',\n        'files.trimTrailingWhitespace',\n        'git.confirmSync',\n        'git.enabled',\n        'http.proxyStrictSSL',\n        'javascript.validate.enable',\n        'php.builtInCompletions.enable',\n        'php.validate.enable',\n        'php.validate.run',\n        'terminal.integrated.fontFamily',\n        'window.openFilesInNewWindow',\n        'window.restoreWindows',\n        'window.zoomLevel',\n        'workbench.editor.enablePreview',\n        'workbench.editor.enablePreviewFromQuickOpen',\n        'workbench.editor.showTabs',\n        'workbench.editor.highlightModifiedTabs',\n        'workbench.editor.swipeToNavigate',\n        'workbench.sideBar.location',\n        'workbench.startupEditor',\n        'workbench.statusBar.visible',\n        'workbench.welcome.enabled',\n    ];\n    function configurationTelemetry(telemetryService, configurationService) {\n        return configurationService.onDidChangeConfiguration(event => {\n            if (event.source !== configuration_1.ConfigurationTarget.DEFAULT) {\n                /* __GDPR__\n                    \"updateConfiguration\" : {\n                        \"configurationSource\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"configurationKeys\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                telemetryService.publicLog('updateConfiguration', {\n                    configurationSource: configuration_1.ConfigurationTargetToString(event.source),\n                    configurationKeys: flattenKeys(event.sourceConfig)\n                });\n                /* __GDPR__\n                    \"updateConfigurationValues\" : {\n                        \"configurationSource\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                        \"configurationValues\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                telemetryService.publicLog('updateConfigurationValues', {\n                    configurationSource: configuration_1.ConfigurationTargetToString(event.source),\n                    configurationValues: flattenValues(event.sourceConfig, configurationValueWhitelist)\n                });\n            }\n        });\n    }\n    exports.configurationTelemetry = configurationTelemetry;\n    function keybindingsTelemetry(telemetryService, keybindingService) {\n        return keybindingService.onDidUpdateKeybindings(event => {\n            if (event.source === keybinding_1.KeybindingSource.User && event.keybindings) {\n                /* __GDPR__\n                    \"updateKeybindings\" : {\n                        \"bindings\": { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" }\n                    }\n                */\n                telemetryService.publicLog('updateKeybindings', {\n                    bindings: event.keybindings.map(binding => ({\n                        key: binding.key,\n                        command: binding.command,\n                        when: binding.when,\n                        args: binding.args ? true : undefined\n                    }))\n                });\n            }\n        });\n    }\n    exports.keybindingsTelemetry = keybindingsTelemetry;\n    function flattenKeys(value) {\n        if (!value) {\n            return [];\n        }\n        const result = [];\n        flatKeys(result, '', value);\n        return result;\n    }\n    function flatKeys(result, prefix, value) {\n        if (value && typeof value === 'object' && !Array.isArray(value)) {\n            Object.keys(value)\n                .forEach(key => flatKeys(result, prefix ? `${prefix}.${key}` : key, value[key]));\n        }\n        else {\n            result.push(prefix);\n        }\n    }\n    function flattenValues(value, keys) {\n        if (!value) {\n            return [];\n        }\n        return keys.reduce((array, key) => {\n            const v = key.split('.')\n                .reduce((tmp, k) => tmp && typeof tmp === 'object' ? tmp[k] : undefined, value);\n            if (typeof v !== 'undefined') {\n                array.push({ [key]: v });\n            }\n            return array;\n        }, []);\n    }\n});\n",null]}