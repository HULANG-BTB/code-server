{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar memento_1 = require(\"vs/workbench/common/memento\");\nvar theme_1 = require(\"vs/workbench/common/theme\");\nvar Component = /** @class */ (function (_super) {\n    tslib_1.__extends(Component, _super);\n    function Component(id, themeService, storageService) {\n        var _this = _super.call(this, themeService) || this;\n        _this.id = id;\n        _this.id = id;\n        _this.memento = new memento_1.Memento(_this.id, storageService);\n        _this._register(storageService.onWillSaveState(function () {\n            // Ask the component to persist state into the memento\n            _this.saveState();\n            // Then save the memento into storage\n            _this.memento.saveMemento();\n        }));\n        return _this;\n    }\n    Component.prototype.getId = function () {\n        return this.id;\n    };\n    Component.prototype.getMemento = function (scope) {\n        return this.memento.getMemento(scope);\n    };\n    Component.prototype.saveState = function () {\n        // Subclasses to implement for storing state\n    };\n    return Component;\n}(theme_1.Themable));\nexports.Component = Component;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/component.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,uDAAsD;AAEtD,mDAAqD;AAGrD;IAA+B,qCAAQ;IAGtC,mBACkB,EAAU,EAC3B,YAA2B,EAC3B,cAA+B;QAHhC,YAKC,kBAAM,YAAY,CAAC,SAanB;QAjBiB,QAAE,GAAF,EAAE,CAAQ;QAM3B,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,KAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,KAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;QAEpD,KAAI,CAAC,SAAS,CAAC,cAAc,CAAC,eAAe,CAAC;YAE7C,sDAAsD;YACtD,KAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,qCAAqC;YACrC,KAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC,CAAC;;IACL,CAAC;IAED,yBAAK,GAAL;QACC,OAAO,IAAI,CAAC,EAAE,CAAC;IAChB,CAAC;IAES,8BAAU,GAApB,UAAqB,KAAmB;QACvC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAES,6BAAS,GAAnB;QACC,4CAA4C;IAC7C,CAAC;IACF,gBAAC;AAAD,CAAC,AAlCD,CAA+B,gBAAQ,GAkCtC;AAlCY,8BAAS","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Memento } from 'vs/workbench/common/memento';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Themable } from 'vs/workbench/common/theme';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\n\nexport class Component extends Themable {\n\tprivate readonly memento: Memento;\n\n\tconstructor(\n\t\tprivate readonly id: string,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.id = id;\n\t\tthis.memento = new Memento(this.id, storageService);\n\n\t\tthis._register(storageService.onWillSaveState(() => {\n\n\t\t\t// Ask the component to persist state into the memento\n\t\t\tthis.saveState();\n\n\t\t\t// Then save the memento into storage\n\t\t\tthis.memento.saveMemento();\n\t\t}));\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tprotected getMemento(scope: StorageScope): object {\n\t\treturn this.memento.getMemento(scope);\n\t}\n\n\tprotected saveState(): void {\n\t\t// Subclasses to implement for storing state\n\t}\n}"]}]}