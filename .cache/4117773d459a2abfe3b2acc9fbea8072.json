{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugQuickOpen.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugQuickOpen.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar debugActions_1 = require(\"vs/workbench/contrib/debug/browser/debugActions\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar quickOpenModel_1 = require(\"vs/base/parts/quickopen/browser/quickOpenModel\");\nvar quickOpen_1 = require(\"vs/base/parts/quickopen/common/quickOpen\");\nvar quickopen_1 = require(\"vs/workbench/browser/quickopen\");\nvar filters_1 = require(\"vs/base/common/filters\");\nvar AddConfigEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(AddConfigEntry, _super);\n    function AddConfigEntry(label, launch, commandService, contextService, highlights) {\n        if (highlights === void 0) { highlights = []; }\n        var _this = _super.call(this, highlights) || this;\n        _this.label = label;\n        _this.launch = launch;\n        _this.commandService = commandService;\n        _this.contextService = contextService;\n        return _this;\n    }\n    AddConfigEntry.prototype.getLabel = function () {\n        return this.label;\n    };\n    AddConfigEntry.prototype.getDescription = function () {\n        return this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE ? this.launch.name : '';\n    };\n    AddConfigEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, debug\", this.getLabel());\n    };\n    AddConfigEntry.prototype.run = function (mode) {\n        if (mode === quickOpen_1.Mode.PREVIEW) {\n            return false;\n        }\n        this.commandService.executeCommand('debug.addConfiguration', this.launch.uri.toString());\n        return true;\n    };\n    return AddConfigEntry;\n}(quickOpenModel_1.QuickOpenEntry));\nvar StartDebugEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(StartDebugEntry, _super);\n    function StartDebugEntry(debugService, contextService, notificationService, launch, configurationName, highlights) {\n        if (highlights === void 0) { highlights = []; }\n        var _this = _super.call(this, highlights) || this;\n        _this.debugService = debugService;\n        _this.contextService = contextService;\n        _this.notificationService = notificationService;\n        _this.launch = launch;\n        _this.configurationName = configurationName;\n        return _this;\n    }\n    StartDebugEntry.prototype.getLabel = function () {\n        return this.configurationName;\n    };\n    StartDebugEntry.prototype.getDescription = function () {\n        return this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE ? this.launch.name : '';\n    };\n    StartDebugEntry.prototype.getAriaLabel = function () {\n        return nls.localize('entryAriaLabel', \"{0}, debug\", this.getLabel());\n    };\n    StartDebugEntry.prototype.run = function (mode) {\n        var _this = this;\n        if (mode === quickOpen_1.Mode.PREVIEW || !debugActions_1.StartAction.isEnabled(this.debugService)) {\n            return false;\n        }\n        // Run selected debug configuration\n        this.debugService.getConfigurationManager().selectConfiguration(this.launch, this.configurationName);\n        this.debugService.startDebugging(this.launch).then(undefined, function (e) { return _this.notificationService.error(e); });\n        return true;\n    };\n    return StartDebugEntry;\n}(quickOpenModel_1.QuickOpenEntry));\nvar DebugQuickOpenHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugQuickOpenHandler, _super);\n    function DebugQuickOpenHandler(debugService, contextService, commandService, notificationService) {\n        var _this = _super.call(this) || this;\n        _this.debugService = debugService;\n        _this.contextService = contextService;\n        _this.commandService = commandService;\n        _this.notificationService = notificationService;\n        return _this;\n    }\n    DebugQuickOpenHandler.prototype.getAriaLabel = function () {\n        return nls.localize('debugAriaLabel', \"Type a name of a launch configuration to run.\");\n    };\n    DebugQuickOpenHandler.prototype.getResults = function (input, token) {\n        var _this = this;\n        var configurations = [];\n        var configManager = this.debugService.getConfigurationManager();\n        var launches = configManager.getLaunches();\n        var _loop_1 = function (launch) {\n            launch.getConfigurationNames().map(function (config) { return ({ config: config, highlights: filters_1.matchesFuzzy(input, config, true) || undefined }); })\n                .filter(function (_a) {\n                var highlights = _a.highlights;\n                return !!highlights;\n            })\n                .forEach(function (_a) {\n                var config = _a.config, highlights = _a.highlights;\n                if (launch === configManager.selectedConfiguration.launch && config === configManager.selectedConfiguration.name) {\n                    _this.autoFocusIndex = configurations.length;\n                }\n                configurations.push(new StartDebugEntry(_this.debugService, _this.contextService, _this.notificationService, launch, config, highlights));\n            });\n        };\n        for (var _i = 0, launches_1 = launches; _i < launches_1.length; _i++) {\n            var launch = launches_1[_i];\n            _loop_1(launch);\n        }\n        launches.filter(function (l) { return !l.hidden; }).forEach(function (l, index) {\n            var label = _this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE ? nls.localize(\"addConfigTo\", \"Add Config ({0})...\", l.name) : nls.localize('addConfiguration', \"Add Configuration...\");\n            var entry = new AddConfigEntry(label, l, _this.commandService, _this.contextService, filters_1.matchesFuzzy(input, label, true) || undefined);\n            if (index === 0) {\n                configurations.push(new quickOpenModel_1.QuickOpenEntryGroup(entry, undefined, true));\n            }\n            else {\n                configurations.push(entry);\n            }\n        });\n        return Promise.resolve(new quickOpenModel_1.QuickOpenModel(configurations));\n    };\n    DebugQuickOpenHandler.prototype.getAutoFocus = function (input) {\n        return {\n            autoFocusFirstEntry: !!input,\n            autoFocusIndex: this.autoFocusIndex\n        };\n    };\n    DebugQuickOpenHandler.prototype.getEmptyLabel = function (searchString) {\n        if (searchString.length > 0) {\n            return nls.localize('noConfigurationsMatching', \"No debug configurations matching\");\n        }\n        return nls.localize('noConfigurationsFound', \"No debug configurations found. Please create a 'launch.json' file.\");\n    };\n    DebugQuickOpenHandler.ID = 'workbench.picker.launch';\n    DebugQuickOpenHandler = tslib_1.__decorate([\n        tslib_1.__param(0, debug_1.IDebugService),\n        tslib_1.__param(1, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(2, commands_1.ICommandService),\n        tslib_1.__param(3, notification_1.INotificationService)\n    ], DebugQuickOpenHandler);\n    return DebugQuickOpenHandler;\n}(quickopen_1.QuickOpenHandler));\nexports.DebugQuickOpenHandler = DebugQuickOpenHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugQuickOpen.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/browser/debugQuickOpen.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IDebugService, ILaunch } from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { StartAction } from 'vs/workbench/contrib/debug/browser/debugActions';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { QuickOpenEntry, QuickOpenModel, QuickOpenEntryGroup, IHighlight } from 'vs/base/parts/quickopen/browser/quickOpenModel';\nimport { Mode, IAutoFocus } from 'vs/base/parts/quickopen/common/quickOpen';\nimport { QuickOpenHandler } from 'vs/workbench/browser/quickopen';\nimport { matchesFuzzy } from 'vs/base/common/filters';\n\nclass AddConfigEntry extends QuickOpenEntry {\n\n\tconstructor(private label: string, private launch: ILaunch, private commandService: ICommandService, private contextService: IWorkspaceContextService, highlights: IHighlight[] = []) {\n\t\tsuper(highlights);\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.label;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ? this.launch.name : '';\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, debug\", this.getLabel());\n\t}\n\n\tpublic run(mode: Mode): boolean {\n\t\tif (mode === Mode.PREVIEW) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.commandService.executeCommand('debug.addConfiguration', this.launch.uri.toString());\n\n\t\treturn true;\n\t}\n}\n\nclass StartDebugEntry extends QuickOpenEntry {\n\n\tconstructor(private debugService: IDebugService, private contextService: IWorkspaceContextService, private notificationService: INotificationService, private launch: ILaunch, private configurationName: string, highlights: IHighlight[] = []) {\n\t\tsuper(highlights);\n\t}\n\n\tpublic getLabel(): string {\n\t\treturn this.configurationName;\n\t}\n\n\tpublic getDescription(): string {\n\t\treturn this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ? this.launch.name : '';\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('entryAriaLabel', \"{0}, debug\", this.getLabel());\n\t}\n\n\tpublic run(mode: Mode): boolean {\n\t\tif (mode === Mode.PREVIEW || !StartAction.isEnabled(this.debugService)) {\n\t\t\treturn false;\n\t\t}\n\t\t// Run selected debug configuration\n\t\tthis.debugService.getConfigurationManager().selectConfiguration(this.launch, this.configurationName);\n\t\tthis.debugService.startDebugging(this.launch).then(undefined, e => this.notificationService.error(e));\n\n\t\treturn true;\n\t}\n}\n\nexport class DebugQuickOpenHandler extends QuickOpenHandler {\n\n\tpublic static readonly ID = 'workbench.picker.launch';\n\n\tprivate autoFocusIndex: number;\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic getAriaLabel(): string {\n\t\treturn nls.localize('debugAriaLabel', \"Type a name of a launch configuration to run.\");\n\t}\n\n\tpublic getResults(input: string, token: CancellationToken): Promise<QuickOpenModel> {\n\t\tconst configurations: QuickOpenEntry[] = [];\n\n\t\tconst configManager = this.debugService.getConfigurationManager();\n\t\tconst launches = configManager.getLaunches();\n\t\tfor (let launch of launches) {\n\t\t\tlaunch.getConfigurationNames().map(config => ({ config: config, highlights: matchesFuzzy(input, config, true) || undefined }))\n\t\t\t\t.filter(({ highlights }) => !!highlights)\n\t\t\t\t.forEach(({ config, highlights }) => {\n\t\t\t\t\tif (launch === configManager.selectedConfiguration.launch && config === configManager.selectedConfiguration.name) {\n\t\t\t\t\t\tthis.autoFocusIndex = configurations.length;\n\t\t\t\t\t}\n\t\t\t\t\tconfigurations.push(new StartDebugEntry(this.debugService, this.contextService, this.notificationService, launch, config, highlights));\n\t\t\t\t});\n\t\t}\n\t\tlaunches.filter(l => !l.hidden).forEach((l, index) => {\n\n\t\t\tconst label = this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE ? nls.localize(\"addConfigTo\", \"Add Config ({0})...\", l.name) : nls.localize('addConfiguration', \"Add Configuration...\");\n\t\t\tconst entry = new AddConfigEntry(label, l, this.commandService, this.contextService, matchesFuzzy(input, label, true) || undefined);\n\t\t\tif (index === 0) {\n\t\t\t\tconfigurations.push(new QuickOpenEntryGroup(entry, undefined, true));\n\t\t\t} else {\n\t\t\t\tconfigurations.push(entry);\n\t\t\t}\n\n\t\t});\n\n\t\treturn Promise.resolve(new QuickOpenModel(configurations));\n\t}\n\n\tpublic getAutoFocus(input: string): IAutoFocus {\n\t\treturn {\n\t\t\tautoFocusFirstEntry: !!input,\n\t\t\tautoFocusIndex: this.autoFocusIndex\n\t\t};\n\t}\n\n\tpublic getEmptyLabel(searchString: string): string {\n\t\tif (searchString.length > 0) {\n\t\t\treturn nls.localize('noConfigurationsMatching', \"No debug configurations matching\");\n\t\t}\n\n\t\treturn nls.localize('noConfigurationsFound', \"No debug configurations found. Please create a 'launch.json' file.\");\n\t}\n}\n"]}]}