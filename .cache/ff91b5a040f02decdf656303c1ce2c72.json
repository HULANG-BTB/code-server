{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar modelService_1 = require(\"vs/editor/common/services/modelService\");\nvar codeActionTrigger_1 = require(\"./codeActionTrigger\");\nvar CodeActionSet = /** @class */ (function () {\n    function CodeActionSet(actions) {\n        this.actions = arrays_1.mergeSort(actions, CodeActionSet.codeActionsComparator);\n    }\n    CodeActionSet.codeActionsComparator = function (a, b) {\n        if (arrays_1.isNonEmptyArray(a.diagnostics)) {\n            if (arrays_1.isNonEmptyArray(b.diagnostics)) {\n                return a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (arrays_1.isNonEmptyArray(b.diagnostics)) {\n            return 1;\n        }\n        else {\n            return 0; // both have no diagnostics\n        }\n    };\n    Object.defineProperty(CodeActionSet.prototype, \"hasAutoFix\", {\n        get: function () {\n            return this.actions.some(function (fix) { return !!fix.kind && codeActionTrigger_1.CodeActionKind.QuickFix.contains(new codeActionTrigger_1.CodeActionKind(fix.kind)) && !!fix.isPreferred; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CodeActionSet;\n}());\nexports.CodeActionSet = CodeActionSet;\nfunction getCodeActions(model, rangeOrSelection, trigger, token) {\n    var filter = trigger.filter || {};\n    var codeActionContext = {\n        only: filter.kind ? filter.kind.value : undefined,\n        trigger: trigger.type === 'manual' ? modes_1.CodeActionTrigger.Manual : modes_1.CodeActionTrigger.Automatic\n    };\n    var chainedCancellation = new cancellation_1.CancellationTokenSource();\n    token.onCancellationRequested(function () { return chainedCancellation.cancel(); });\n    var providers = getCodeActionProviders(model, filter);\n    var promises = providers.map(function (provider) {\n        return Promise.resolve(provider.provideCodeActions(model, rangeOrSelection, codeActionContext, chainedCancellation.token)).then(function (providedCodeActions) {\n            if (!Array.isArray(providedCodeActions)) {\n                return [];\n            }\n            return providedCodeActions.filter(function (action) { return action && codeActionTrigger_1.filtersAction(filter, action); });\n        }, function (err) {\n            if (errors_1.isPromiseCanceledError(err)) {\n                throw err;\n            }\n            errors_1.onUnexpectedExternalError(err);\n            return [];\n        });\n    });\n    var listener = modes_1.CodeActionProviderRegistry.onDidChange(function () {\n        var newProviders = modes_1.CodeActionProviderRegistry.all(model);\n        if (!arrays_1.equals(newProviders, providers)) {\n            chainedCancellation.cancel();\n        }\n    });\n    return Promise.all(promises)\n        .then(arrays_1.flatten)\n        .then(function (actions) { return new CodeActionSet(actions); })\n        .finally(function () {\n        listener.dispose();\n    });\n}\nexports.getCodeActions = getCodeActions;\nfunction getCodeActionProviders(model, filter) {\n    return modes_1.CodeActionProviderRegistry.all(model)\n        // Don't include providers that we know will not return code actions of interest\n        .filter(function (provider) {\n        if (!provider.providedCodeActionKinds) {\n            // We don't know what type of actions this provider will return.\n            return true;\n        }\n        return provider.providedCodeActionKinds.some(function (kind) { return codeActionTrigger_1.mayIncludeActionsOfKind(filter, new codeActionTrigger_1.CodeActionKind(kind)); });\n    });\n}\neditorExtensions_1.registerLanguageCommand('_executeCodeActionProvider', function (accessor, args) {\n    var resource = args.resource, range = args.range, kind = args.kind;\n    if (!(resource instanceof uri_1.URI) || !range_1.Range.isIRange(range)) {\n        throw errors_1.illegalArgument();\n    }\n    var model = accessor.get(modelService_1.IModelService).getModel(resource);\n    if (!model) {\n        throw errors_1.illegalArgument();\n    }\n    return getCodeActions(model, model.validateRange(range), { type: 'manual', filter: { includeSourceActions: true, kind: kind && kind.value ? new codeActionTrigger_1.CodeActionKind(kind.value) : undefined } }, cancellation_1.CancellationToken.None).then(function (actions) { return actions.actions; });\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeAction.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals, flatten, isNonEmptyArray, mergeSort } from 'vs/base/common/arrays';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { illegalArgument, isPromiseCanceledError, onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { registerLanguageCommand } from 'vs/editor/browser/editorExtensions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CodeAction, CodeActionContext, CodeActionProviderRegistry, CodeActionTrigger as CodeActionTriggerKind } from 'vs/editor/common/modes';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { CodeActionFilter, CodeActionKind, CodeActionTrigger, filtersAction, mayIncludeActionsOfKind } from './codeActionTrigger';\n\nexport class CodeActionSet {\n\n\tprivate static codeActionsComparator(a: CodeAction, b: CodeAction): number {\n\t\tif (isNonEmptyArray(a.diagnostics)) {\n\t\t\tif (isNonEmptyArray(b.diagnostics)) {\n\t\t\t\treturn a.diagnostics[0].message.localeCompare(b.diagnostics[0].message);\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else if (isNonEmptyArray(b.diagnostics)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\t// both have no diagnostics\n\t\t}\n\t}\n\n\tpublic readonly actions: ReadonlyArray<CodeAction>;\n\n\tpublic constructor(actions: CodeAction[]) {\n\t\tthis.actions = mergeSort(actions, CodeActionSet.codeActionsComparator);\n\t}\n\n\tpublic get hasAutoFix() {\n\t\treturn this.actions.some(fix => !!fix.kind && CodeActionKind.QuickFix.contains(new CodeActionKind(fix.kind)) && !!fix.isPreferred);\n\t}\n}\n\nexport function getCodeActions(\n\tmodel: ITextModel,\n\trangeOrSelection: Range | Selection,\n\ttrigger: CodeActionTrigger,\n\ttoken: CancellationToken\n): Promise<CodeActionSet> {\n\tconst filter = trigger.filter || {};\n\n\tconst codeActionContext: CodeActionContext = {\n\t\tonly: filter.kind ? filter.kind.value : undefined,\n\t\ttrigger: trigger.type === 'manual' ? CodeActionTriggerKind.Manual : CodeActionTriggerKind.Automatic\n\t};\n\n\tconst chainedCancellation = new CancellationTokenSource();\n\ttoken.onCancellationRequested(() => chainedCancellation.cancel());\n\n\tconst providers = getCodeActionProviders(model, filter);\n\n\tconst promises = providers.map(provider => {\n\t\treturn Promise.resolve(provider.provideCodeActions(model, rangeOrSelection, codeActionContext, chainedCancellation.token)).then(providedCodeActions => {\n\t\t\tif (!Array.isArray(providedCodeActions)) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn providedCodeActions.filter(action => action && filtersAction(filter, action));\n\t\t}, (err): CodeAction[] => {\n\t\t\tif (isPromiseCanceledError(err)) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tonUnexpectedExternalError(err);\n\t\t\treturn [];\n\t\t});\n\t});\n\n\tconst listener = CodeActionProviderRegistry.onDidChange(() => {\n\t\tconst newProviders = CodeActionProviderRegistry.all(model);\n\t\tif (!equals(newProviders, providers)) {\n\t\t\tchainedCancellation.cancel();\n\t\t}\n\t});\n\n\treturn Promise.all(promises)\n\t\t.then(flatten)\n\t\t.then(actions => new CodeActionSet(actions))\n\t\t.finally(() => {\n\t\t\tlistener.dispose();\n\t\t});\n}\n\nfunction getCodeActionProviders(\n\tmodel: ITextModel,\n\tfilter: CodeActionFilter\n) {\n\treturn CodeActionProviderRegistry.all(model)\n\t\t// Don't include providers that we know will not return code actions of interest\n\t\t.filter(provider => {\n\t\t\tif (!provider.providedCodeActionKinds) {\n\t\t\t\t// We don't know what type of actions this provider will return.\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn provider.providedCodeActionKinds.some(kind => mayIncludeActionsOfKind(filter, new CodeActionKind(kind)));\n\t\t});\n}\n\nregisterLanguageCommand('_executeCodeActionProvider', function (accessor, args): Promise<ReadonlyArray<CodeAction>> {\n\tconst { resource, range, kind } = args;\n\tif (!(resource instanceof URI) || !Range.isIRange(range)) {\n\t\tthrow illegalArgument();\n\t}\n\n\tconst model = accessor.get(IModelService).getModel(resource);\n\tif (!model) {\n\t\tthrow illegalArgument();\n\t}\n\n\treturn getCodeActions(\n\t\tmodel,\n\t\tmodel.validateRange(range),\n\t\t{ type: 'manual', filter: { includeSourceActions: true, kind: kind && kind.value ? new CodeActionKind(kind.value) : undefined } },\n\t\tCancellationToken.None).then(actions => actions.actions);\n});\n"]}]}