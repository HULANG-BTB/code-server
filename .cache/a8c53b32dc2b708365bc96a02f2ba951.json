{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/cache.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/cancellation\"], function (require, exports, cancellation_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class Cache {\n        constructor(task) {\n            this.task = task;\n            this.result = null;\n        }\n        get() {\n            if (this.result) {\n                return this.result;\n            }\n            const cts = new cancellation_1.CancellationTokenSource();\n            const promise = this.task(cts.token);\n            promise.finally(() => cts.dispose());\n            this.result = {\n                promise,\n                dispose: () => {\n                    this.result = null;\n                    cts.cancel();\n                    cts.dispose();\n                }\n            };\n            return this.result;\n        }\n    }\n    exports.Cache = Cache;\n});\n",null]}