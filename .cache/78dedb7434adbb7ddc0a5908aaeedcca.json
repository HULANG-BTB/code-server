{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts","mtime":1555846338032},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar event_1 = require(\"vs/base/common/event\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nexports.IWindowsService = instantiation_1.createDecorator('windowsService');\nexports.IWindowService = instantiation_1.createDecorator('windowService');\nfunction getTitleBarStyle(configurationService, environment, isExtensionDevelopment) {\n    if (isExtensionDevelopment === void 0) { isExtensionDevelopment = environment.isExtensionDevelopment; }\n    if (platform_1.isWeb) {\n        return 'custom';\n    }\n    var configuration = configurationService.getValue('window');\n    var isDev = !environment.isBuilt || isExtensionDevelopment;\n    if (platform_1.isMacintosh && isDev) {\n        return 'native'; // not enabled when developing due to https://github.com/electron/electron/issues/3647\n    }\n    if (configuration) {\n        var useNativeTabs = platform_1.isMacintosh && configuration.nativeTabs === true;\n        if (useNativeTabs) {\n            return 'native'; // native tabs on sierra do not work with custom title style\n        }\n        var useSimpleFullScreen = platform_1.isMacintosh && configuration.nativeFullScreen === false;\n        if (useSimpleFullScreen) {\n            return 'native'; // simple fullscreen does not work well with custom title style (https://github.com/Microsoft/vscode/issues/63291)\n        }\n        var style = configuration.titleBarStyle;\n        if (style === 'native' || style === 'custom') {\n            return style;\n        }\n    }\n    return platform_1.isLinux ? 'native' : 'custom'; // default to custom on all macOS and Windows\n}\nexports.getTitleBarStyle = getTitleBarStyle;\nvar OpenContext;\n(function (OpenContext) {\n    // opening when running from the command line\n    OpenContext[OpenContext[\"CLI\"] = 0] = \"CLI\";\n    // macOS only: opening from the dock (also when opening files to a running instance from desktop)\n    OpenContext[OpenContext[\"DOCK\"] = 1] = \"DOCK\";\n    // opening from the main application window\n    OpenContext[OpenContext[\"MENU\"] = 2] = \"MENU\";\n    // opening from a file or folder dialog\n    OpenContext[OpenContext[\"DIALOG\"] = 3] = \"DIALOG\";\n    // opening from the OS's UI\n    OpenContext[OpenContext[\"DESKTOP\"] = 4] = \"DESKTOP\";\n    // opening through the API\n    OpenContext[OpenContext[\"API\"] = 5] = \"API\";\n})(OpenContext = exports.OpenContext || (exports.OpenContext = {}));\nvar ReadyState;\n(function (ReadyState) {\n    /**\n     * This window has not loaded any HTML yet\n     */\n    ReadyState[ReadyState[\"NONE\"] = 0] = \"NONE\";\n    /**\n     * This window is loading HTML\n     */\n    ReadyState[ReadyState[\"LOADING\"] = 1] = \"LOADING\";\n    /**\n     * This window is navigating to another HTML\n     */\n    ReadyState[ReadyState[\"NAVIGATING\"] = 2] = \"NAVIGATING\";\n    /**\n     * This window is done loading HTML\n     */\n    ReadyState[ReadyState[\"READY\"] = 3] = \"READY\";\n})(ReadyState = exports.ReadyState || (exports.ReadyState = {}));\nvar ActiveWindowManager = /** @class */ (function () {\n    function ActiveWindowManager(windowsService) {\n        var _this = this;\n        this.disposables = [];\n        var onActiveWindowChange = event_1.Event.latch(event_1.Event.any(windowsService.onWindowOpen, windowsService.onWindowFocus));\n        onActiveWindowChange(this.setActiveWindow, this, this.disposables);\n        this.firstActiveWindowIdPromise = windowsService.getActiveWindowId()\n            .then(function (id) { return (typeof _this._activeWindowId === 'undefined') && _this.setActiveWindow(id); });\n    }\n    ActiveWindowManager.prototype.setActiveWindow = function (windowId) {\n        if (this.firstActiveWindowIdPromise) {\n            this.firstActiveWindowIdPromise = null;\n        }\n        this._activeWindowId = windowId;\n    };\n    ActiveWindowManager.prototype.getActiveClientId = function () {\n        if (this.firstActiveWindowIdPromise) {\n            return this.firstActiveWindowIdPromise;\n        }\n        return Promise.resolve(\"window:\" + this._activeWindowId);\n    };\n    ActiveWindowManager.prototype.dispose = function () {\n        this.disposables = lifecycle_1.dispose(this.disposables);\n    };\n    ActiveWindowManager = tslib_1.__decorate([\n        tslib_1.__param(0, exports.IWindowsService)\n    ], ActiveWindowManager);\n    return ActiveWindowManager;\n}());\nexports.ActiveWindowManager = ActiveWindowManager;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/windows/common/windows.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { ITelemetryData } from 'vs/platform/telemetry/common/telemetry';\nimport { IProcessEnvironment, isMacintosh, isLinux, isWeb } from 'vs/base/common/platform';\nimport { ParsedArgs, IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceIdentifier, ISingleFolderWorkspaceIdentifier } from 'vs/platform/workspaces/common/workspaces';\nimport { IRecentlyOpened, IRecent } from 'vs/platform/history/common/history';\nimport { ISerializableCommandAction } from 'vs/platform/actions/common/actions';\nimport { ExportData } from 'vs/base/common/performance';\nimport { LogLevel } from 'vs/platform/log/common/log';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport const IWindowsService = createDecorator<IWindowsService>('windowsService');\n\nexport interface INativeOpenDialogOptions {\n\twindowId?: number;\n\tforceNewWindow?: boolean;\n\n\tdialogOptions?: OpenDialogOptions;\n\n\ttelemetryEventName?: string;\n\ttelemetryExtraData?: ITelemetryData;\n}\n\nexport interface IEnterWorkspaceResult {\n\tworkspace: IWorkspaceIdentifier;\n\tbackupPath?: string;\n}\n\nexport interface CrashReporterStartOptions {\n\tcompanyName?: string;\n\tsubmitURL: string;\n\tproductName?: string;\n\tuploadToServer?: boolean;\n\tignoreSystemCrashHandler?: boolean;\n\textra?: any;\n\tcrashesDirectory?: string;\n}\n\nexport interface OpenDialogOptions {\n\ttitle?: string;\n\tdefaultPath?: string;\n\tbuttonLabel?: string;\n\tfilters?: FileFilter[];\n\tproperties?: Array<'openFile' | 'openDirectory' | 'multiSelections' | 'showHiddenFiles' | 'createDirectory' | 'promptToCreate' | 'noResolveAliases' | 'treatPackageAsDirectory'>;\n\tmessage?: string;\n}\n\nexport interface FileFilter {\n\textensions: string[];\n\tname: string;\n}\n\nexport interface MessageBoxOptions {\n\ttype?: string;\n\tbuttons?: string[];\n\tdefaultId?: number;\n\ttitle?: string;\n\tmessage: string;\n\tdetail?: string;\n\tcheckboxLabel?: string;\n\tcheckboxChecked?: boolean;\n\tcancelId?: number;\n\tnoLink?: boolean;\n\tnormalizeAccessKeys?: boolean;\n}\n\nexport interface SaveDialogOptions {\n\ttitle?: string;\n\tdefaultPath?: string;\n\tbuttonLabel?: string;\n\tfilters?: FileFilter[];\n\tmessage?: string;\n\tnameFieldLabel?: string;\n\tshowsTagField?: boolean;\n}\n\nexport interface INewWindowOptions {\n\tremoteAuthority?: string;\n\treuseWindow?: boolean;\n}\n\nexport interface IDevToolsOptions {\n\tmode: 'right' | 'bottom' | 'undocked' | 'detach';\n}\n\nexport interface IWindowsService {\n\n\t_serviceBrand: any;\n\n\tonWindowOpen: Event<number>;\n\tonWindowFocus: Event<number>;\n\tonWindowBlur: Event<number>;\n\tonWindowMaximize: Event<number>;\n\tonWindowUnmaximize: Event<number>;\n\tonRecentlyOpenedChange: Event<void>;\n\n\t// Dialogs\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tshowMessageBox(windowId: number, options: MessageBoxOptions): Promise<IMessageBoxResult>;\n\tshowSaveDialog(windowId: number, options: SaveDialogOptions): Promise<string>;\n\tshowOpenDialog(windowId: number, options: OpenDialogOptions): Promise<string[]>;\n\n\treloadWindow(windowId: number, args?: ParsedArgs): Promise<void>;\n\topenDevTools(windowId: number, options?: IDevToolsOptions): Promise<void>;\n\ttoggleDevTools(windowId: number): Promise<void>;\n\tcloseWorkspace(windowId: number): Promise<void>;\n\tenterWorkspace(windowId: number, path: URI): Promise<IEnterWorkspaceResult | undefined>;\n\ttoggleFullScreen(windowId: number): Promise<void>;\n\tsetRepresentedFilename(windowId: number, fileName: string): Promise<void>;\n\taddRecentlyOpened(recents: IRecent[]): Promise<void>;\n\tremoveFromRecentlyOpened(paths: URI[]): Promise<void>;\n\tclearRecentlyOpened(): Promise<void>;\n\tgetRecentlyOpened(windowId: number): Promise<IRecentlyOpened>;\n\tfocusWindow(windowId: number): Promise<void>;\n\tcloseWindow(windowId: number): Promise<void>;\n\tisFocused(windowId: number): Promise<boolean>;\n\tisMaximized(windowId: number): Promise<boolean>;\n\tmaximizeWindow(windowId: number): Promise<void>;\n\tunmaximizeWindow(windowId: number): Promise<void>;\n\tminimizeWindow(windowId: number): Promise<void>;\n\tonWindowTitleDoubleClick(windowId: number): Promise<void>;\n\tsetDocumentEdited(windowId: number, flag: boolean): Promise<void>;\n\tquit(): Promise<void>;\n\trelaunch(options: { addArgs?: string[], removeArgs?: string[] }): Promise<void>;\n\n\t// macOS Native Tabs\n\tnewWindowTab(): Promise<void>;\n\tshowPreviousWindowTab(): Promise<void>;\n\tshowNextWindowTab(): Promise<void>;\n\tmoveWindowTabToNewWindow(): Promise<void>;\n\tmergeAllWindowTabs(): Promise<void>;\n\ttoggleWindowTabsBar(): Promise<void>;\n\n\t// macOS TouchBar\n\tupdateTouchBar(windowId: number, items: ISerializableCommandAction[][]): Promise<void>;\n\n\t// Shared process\n\twhenSharedProcessReady(): Promise<void>;\n\ttoggleSharedProcess(): Promise<void>;\n\n\t// Global methods\n\topenWindow(windowId: number, uris: IURIToOpen[], options: IOpenSettings): Promise<void>;\n\topenNewWindow(options?: INewWindowOptions): Promise<void>;\n\tgetWindows(): Promise<{ id: number; workspace?: IWorkspaceIdentifier; folderUri?: ISingleFolderWorkspaceIdentifier; title: string; filename?: string; }[]>;\n\tgetWindowCount(): Promise<number>;\n\tlog(severity: string, ...messages: string[]): Promise<void>;\n\tshowItemInFolder(path: URI): Promise<void>;\n\tgetActiveWindowId(): Promise<number | undefined>;\n\n\t// This needs to be handled from browser process to prevent\n\t// foreground ordering issues on Windows\n\topenExternal(url: string): Promise<boolean>;\n\n\t// TODO: this is a bit backwards\n\tstartCrashReporter(config: CrashReporterStartOptions): Promise<void>;\n\n\topenAboutDialog(): Promise<void>;\n\tresolveProxy(windowId: number, url: string): Promise<string | undefined>;\n}\n\nexport const IWindowService = createDecorator<IWindowService>('windowService');\n\nexport interface IMessageBoxResult {\n\tbutton: number;\n\tcheckboxChecked?: boolean;\n}\n\nexport interface IOpenSettings {\n\tforceNewWindow?: boolean;\n\tforceReuseWindow?: boolean;\n\tforceOpenWorkspaceAsFile?: boolean;\n\tdiffMode?: boolean;\n\taddMode?: boolean;\n\tnoRecentEntry?: boolean;\n\twaitMarkerFileURI?: URI;\n\targs?: ParsedArgs;\n}\n\nexport type URIType = 'file' | 'folder';\n\nexport interface IURIToOpen {\n\turi: URI;\n\ttypeHint?: URIType;\n\tlabel?: string;\n}\n\nexport interface IWindowService {\n\n\t_serviceBrand: any;\n\n\treadonly onDidChangeFocus: Event<boolean>;\n\treadonly onDidChangeMaximize: Event<boolean>;\n\n\treadonly hasFocus: boolean;\n\n\tgetConfiguration(): IWindowConfiguration;\n\tgetCurrentWindowId(): number;\n\tpickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFileAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\tpickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void>;\n\treloadWindow(args?: ParsedArgs): Promise<void>;\n\topenDevTools(options?: IDevToolsOptions): Promise<void>;\n\ttoggleDevTools(): Promise<void>;\n\tcloseWorkspace(): Promise<void>;\n\tupdateTouchBar(items: ISerializableCommandAction[][]): Promise<void>;\n\tenterWorkspace(path: URI): Promise<IEnterWorkspaceResult | undefined>;\n\ttoggleFullScreen(): Promise<void>;\n\tsetRepresentedFilename(fileName: string): Promise<void>;\n\tgetRecentlyOpened(): Promise<IRecentlyOpened>;\n\tfocusWindow(): Promise<void>;\n\tcloseWindow(): Promise<void>;\n\topenWindow(uris: IURIToOpen[], options?: IOpenSettings): Promise<void>;\n\tisFocused(): Promise<boolean>;\n\tsetDocumentEdited(flag: boolean): Promise<void>;\n\tisMaximized(): Promise<boolean>;\n\tmaximizeWindow(): Promise<void>;\n\tunmaximizeWindow(): Promise<void>;\n\tminimizeWindow(): Promise<void>;\n\tonWindowTitleDoubleClick(): Promise<void>;\n\tshowMessageBox(options: MessageBoxOptions): Promise<IMessageBoxResult>;\n\tshowSaveDialog(options: SaveDialogOptions): Promise<string>;\n\tshowOpenDialog(options: OpenDialogOptions): Promise<string[]>;\n\tresolveProxy(url: string): Promise<string | undefined>;\n}\n\nexport type MenuBarVisibility = 'default' | 'visible' | 'toggle' | 'hidden';\n\nexport interface IWindowsConfiguration {\n\twindow: IWindowSettings;\n}\n\nexport interface IWindowSettings {\n\topenFilesInNewWindow: 'on' | 'off' | 'default';\n\topenFoldersInNewWindow: 'on' | 'off' | 'default';\n\topenWithoutArgumentsInNewWindow: 'on' | 'off';\n\trestoreWindows: 'all' | 'folders' | 'one' | 'none';\n\trestoreFullscreen: boolean;\n\tzoomLevel: number;\n\ttitleBarStyle: 'native' | 'custom';\n\tautoDetectHighContrast: boolean;\n\tmenuBarVisibility: MenuBarVisibility;\n\tnewWindowDimensions: 'default' | 'inherit' | 'maximized' | 'fullscreen';\n\tnativeTabs: boolean;\n\tnativeFullScreen: boolean;\n\tenableMenuBarMnemonics: boolean;\n\tcloseWhenEmpty: boolean;\n\tclickThroughInactive: boolean;\n}\n\nexport function getTitleBarStyle(configurationService: IConfigurationService, environment: IEnvironmentService, isExtensionDevelopment = environment.isExtensionDevelopment): 'native' | 'custom' {\n\tif (isWeb) { return 'custom'; }\n\tconst configuration = configurationService.getValue<IWindowSettings>('window');\n\n\tconst isDev = !environment.isBuilt || isExtensionDevelopment;\n\tif (isMacintosh && isDev) {\n\t\treturn 'native'; // not enabled when developing due to https://github.com/electron/electron/issues/3647\n\t}\n\n\tif (configuration) {\n\t\tconst useNativeTabs = isMacintosh && configuration.nativeTabs === true;\n\t\tif (useNativeTabs) {\n\t\t\treturn 'native'; // native tabs on sierra do not work with custom title style\n\t\t}\n\n\t\tconst useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;\n\t\tif (useSimpleFullScreen) {\n\t\t\treturn 'native'; // simple fullscreen does not work well with custom title style (https://github.com/Microsoft/vscode/issues/63291)\n\t\t}\n\n\t\tconst style = configuration.titleBarStyle;\n\t\tif (style === 'native' || style === 'custom') {\n\t\t\treturn style;\n\t\t}\n\t}\n\n\treturn isLinux ? 'native' : 'custom'; // default to custom on all macOS and Windows\n}\n\nexport const enum OpenContext {\n\n\t// opening when running from the command line\n\tCLI,\n\n\t// macOS only: opening from the dock (also when opening files to a running instance from desktop)\n\tDOCK,\n\n\t// opening from the main application window\n\tMENU,\n\n\t// opening from a file or folder dialog\n\tDIALOG,\n\n\t// opening from the OS's UI\n\tDESKTOP,\n\n\t// opening through the API\n\tAPI\n}\n\nexport const enum ReadyState {\n\n\t/**\n\t * This window has not loaded any HTML yet\n\t */\n\tNONE,\n\n\t/**\n\t * This window is loading HTML\n\t */\n\tLOADING,\n\n\t/**\n\t * This window is navigating to another HTML\n\t */\n\tNAVIGATING,\n\n\t/**\n\t * This window is done loading HTML\n\t */\n\tREADY\n}\n\nexport interface IPath extends IPathData {\n\n\t// the file path to open within a Code instance\n\tfileUri?: URI;\n}\n\nexport interface IPathsToWaitFor extends IPathsToWaitForData {\n\tpaths: IPath[];\n\twaitMarkerFileUri: URI;\n}\n\nexport interface IPathsToWaitForData {\n\tpaths: IPathData[];\n\twaitMarkerFileUri: UriComponents;\n}\n\nexport interface IPathData {\n\n\t// the file path to open within a Code instance\n\tfileUri?: UriComponents;\n\n\t// the line number in the file path to open\n\tlineNumber?: number;\n\n\t// the column number in the file path to open\n\tcolumnNumber?: number;\n}\n\nexport interface IOpenFileRequest {\n\tfilesToOpen?: IPathData[];\n\tfilesToCreate?: IPathData[];\n\tfilesToDiff?: IPathData[];\n\tfilesToWait?: IPathsToWaitForData;\n\ttermProgram?: string;\n}\n\nexport interface IAddFoldersRequest {\n\tfoldersToAdd: UriComponents[];\n}\n\nexport interface IWindowConfiguration extends ParsedArgs {\n\tmachineId: string;\n\twindowId: number;\n\tlogLevel: LogLevel;\n\n\tmainPid: number;\n\n\tappRoot: string;\n\texecPath: string;\n\tisInitialStartup?: boolean;\n\n\tuserEnv: IProcessEnvironment;\n\tnodeCachedDataDir?: string;\n\n\tbackupPath?: string;\n\n\tworkspace?: IWorkspaceIdentifier;\n\tfolderUri?: ISingleFolderWorkspaceIdentifier;\n\n\tremoteAuthority?: string;\n\n\tzoomLevel?: number;\n\tfullscreen?: boolean;\n\tmaximized?: boolean;\n\thighContrast?: boolean;\n\tframeless?: boolean;\n\taccessibilitySupport?: boolean;\n\tpartsSplashPath?: string;\n\n\tperfStartTime?: number;\n\tperfAppReady?: number;\n\tperfWindowLoadTime?: number;\n\tperfEntries: ExportData;\n\n\tfilesToOpen?: IPath[];\n\tfilesToCreate?: IPath[];\n\tfilesToDiff?: IPath[];\n\tfilesToWait?: IPathsToWaitFor;\n\ttermProgram?: string;\n}\n\nexport interface IRunActionInWindowRequest {\n\tid: string;\n\tfrom: 'menu' | 'touchbar' | 'mouse';\n\targs?: any[];\n}\n\nexport interface IRunKeybindingInWindowRequest {\n\tuserSettingsLabel: string;\n}\n\nexport class ActiveWindowManager implements IDisposable {\n\n\tprivate disposables: IDisposable[] = [];\n\tprivate firstActiveWindowIdPromise: Promise<any> | null;\n\tprivate _activeWindowId: number | undefined;\n\n\tconstructor(@IWindowsService windowsService: IWindowsService) {\n\t\tconst onActiveWindowChange = Event.latch(Event.any(windowsService.onWindowOpen, windowsService.onWindowFocus));\n\t\tonActiveWindowChange(this.setActiveWindow, this, this.disposables);\n\n\t\tthis.firstActiveWindowIdPromise = windowsService.getActiveWindowId()\n\t\t\t.then(id => (typeof this._activeWindowId === 'undefined') && this.setActiveWindow(id));\n\t}\n\n\tprivate setActiveWindow(windowId: number | undefined) {\n\t\tif (this.firstActiveWindowIdPromise) {\n\t\t\tthis.firstActiveWindowIdPromise = null;\n\t\t}\n\n\t\tthis._activeWindowId = windowId;\n\t}\n\n\tgetActiveClientId(): Promise<string> {\n\t\tif (this.firstActiveWindowIdPromise) {\n\t\t\treturn this.firstActiveWindowIdPromise;\n\t\t}\n\n\t\treturn Promise.resolve(`window:${this._activeWindowId}`);\n\t}\n\n\tdispose() {\n\t\tthis.disposables = dispose(this.disposables);\n\t}\n}\n"]}]}