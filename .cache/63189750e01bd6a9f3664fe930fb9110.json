{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/replace.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/replace.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IReplaceService = instantiation_1.createDecorator('replaceService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/replace.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/search/common/replace.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAGhG,gFAAiF;AAGpE,QAAA,eAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Match, FileMatch, FileMatchOrMatch } from 'vs/workbench/contrib/search/common/searchModel';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressRunner } from 'vs/platform/progress/common/progress';\n\nexport const IReplaceService = createDecorator<IReplaceService>('replaceService');\n\nexport interface IReplaceService {\n\n\t_serviceBrand: any;\n\n\t/**\n\t * Replaces the given match in the file that match belongs to\n\t */\n\treplace(match: Match): Promise<any>;\n\n\t/**\n\t *\tReplace all the matches from the given file matches in the files\n\t *  You can also pass the progress runner to update the progress of replacing.\n\t */\n\treplace(files: FileMatch[], progress?: IProgressRunner): Promise<any>;\n\n\t/**\n\t * Opens the replace preview for given file match or match\n\t */\n\topenReplacePreview(element: FileMatchOrMatch, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<any>;\n\n\t/**\n\t * Update the replace preview for the given file.\n\t * If `override` is `true`, then replace preview is constructed from source model\n\t */\n\tupdateReplacePreview(file: FileMatch, override?: boolean): Promise<void>;\n}\n"]}]}