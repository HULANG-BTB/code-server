{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/characterClassifier.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/characterClassifier.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/editor/common/core/uint\"], function (require, exports, uint_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A fast character classifier that uses a compact array for ASCII values.\n     */\n    class CharacterClassifier {\n        constructor(_defaultValue) {\n            let defaultValue = uint_1.toUint8(_defaultValue);\n            this._defaultValue = defaultValue;\n            this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\n            this._map = new Map();\n        }\n        static _createAsciiMap(defaultValue) {\n            let asciiMap = new Uint8Array(256);\n            for (let i = 0; i < 256; i++) {\n                asciiMap[i] = defaultValue;\n            }\n            return asciiMap;\n        }\n        set(charCode, _value) {\n            let value = uint_1.toUint8(_value);\n            if (charCode >= 0 && charCode < 256) {\n                this._asciiMap[charCode] = value;\n            }\n            else {\n                this._map.set(charCode, value);\n            }\n        }\n        get(charCode) {\n            if (charCode >= 0 && charCode < 256) {\n                return this._asciiMap[charCode];\n            }\n            else {\n                return (this._map.get(charCode) || this._defaultValue);\n            }\n        }\n    }\n    exports.CharacterClassifier = CharacterClassifier;\n    var Boolean;\n    (function (Boolean) {\n        Boolean[Boolean[\"False\"] = 0] = \"False\";\n        Boolean[Boolean[\"True\"] = 1] = \"True\";\n    })(Boolean || (Boolean = {}));\n    class CharacterSet {\n        constructor() {\n            this._actual = new CharacterClassifier(Boolean.False);\n        }\n        add(charCode) {\n            this._actual.set(charCode, Boolean.True);\n        }\n        has(charCode) {\n            return (this._actual.get(charCode) === Boolean.True);\n        }\n    }\n    exports.CharacterSet = CharacterSet;\n});\n",null]}