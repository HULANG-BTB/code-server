{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadComments.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadComments.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar editorBrowser_1 = require(\"vs/editor/browser/editorBrowser\");\nvar modes = require(\"vs/editor/common/modes\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar map_1 = require(\"vs/base/common/map\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar commentService_1 = require(\"vs/workbench/contrib/comments/browser/commentService\");\nvar commentsPanel_1 = require(\"vs/workbench/contrib/comments/browser/commentsPanel\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar uuid_1 = require(\"vs/base/common/uuid\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar panel_1 = require(\"vs/workbench/browser/panel\");\nvar event_1 = require(\"vs/base/common/event\");\nvar MainThreadDocumentCommentProvider = /** @class */ (function () {\n    function MainThreadDocumentCommentProvider(proxy, handle, features) {\n        this._proxy = proxy;\n        this._handle = handle;\n        this._features = features;\n    }\n    Object.defineProperty(MainThreadDocumentCommentProvider.prototype, \"startDraftLabel\", {\n        get: function () { return this._features.startDraftLabel; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadDocumentCommentProvider.prototype, \"deleteDraftLabel\", {\n        get: function () { return this._features.deleteDraftLabel; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadDocumentCommentProvider.prototype, \"finishDraftLabel\", {\n        get: function () { return this._features.finishDraftLabel; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadDocumentCommentProvider.prototype, \"reactionGroup\", {\n        get: function () { return this._features.reactionGroup; },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadDocumentCommentProvider.prototype.provideDocumentComments = function (uri, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$provideDocumentComments(this._handle, uri)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.createNewCommentThread = function (uri, range, text, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$createNewCommentThread(this._handle, uri, range, text)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.replyToCommentThread = function (uri, range, thread, text, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$replyToCommentThread(this._handle, uri, range, thread, text)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.editComment = function (uri, comment, text, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$editComment(this._handle, uri, comment, text)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.deleteComment = function (uri, comment, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$deleteComment(this._handle, uri, comment)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.startDraft = function (uri, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$startDraft(this._handle, uri)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.deleteDraft = function (uri, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$deleteDraft(this._handle, uri)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.finishDraft = function (uri, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$finishDraft(this._handle, uri)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.addReaction = function (uri, comment, reaction, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$addReaction(this._handle, uri, comment, reaction)];\n            });\n        });\n    };\n    MainThreadDocumentCommentProvider.prototype.deleteReaction = function (uri, comment, reaction, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$deleteReaction(this._handle, uri, comment, reaction)];\n            });\n        });\n    };\n    return MainThreadDocumentCommentProvider;\n}());\nexports.MainThreadDocumentCommentProvider = MainThreadDocumentCommentProvider;\nvar MainThreadCommentThread = /** @class */ (function () {\n    function MainThreadCommentThread(commentThreadHandle, controller, extensionId, threadId, resource, _range, _comments, _acceptInputCommand, _additionalCommands, _deleteCommand, _collapsibleState) {\n        this.commentThreadHandle = commentThreadHandle;\n        this.controller = controller;\n        this.extensionId = extensionId;\n        this.threadId = threadId;\n        this.resource = resource;\n        this._range = _range;\n        this._comments = _comments;\n        this._acceptInputCommand = _acceptInputCommand;\n        this._additionalCommands = _additionalCommands;\n        this._deleteCommand = _deleteCommand;\n        this._collapsibleState = _collapsibleState;\n        this._onDidChangeInput = new event_1.Emitter();\n        this._onDidChangeLabel = new event_1.Emitter();\n        this._onDidChangeComments = new event_1.Emitter();\n        this._onDidChangeAcceptInputCommand = new event_1.Emitter();\n        this._onDidChangeAdditionalCommands = new event_1.Emitter();\n        this._onDidChangeRange = new event_1.Emitter();\n        this.onDidChangeRange = this._onDidChangeRange.event;\n        this._onDidChangeCollasibleState = new event_1.Emitter();\n        this.onDidChangeCollasibleState = this._onDidChangeCollasibleState.event;\n    }\n    Object.defineProperty(MainThreadCommentThread.prototype, \"input\", {\n        get: function () {\n            return this._input;\n        },\n        set: function (value) {\n            this._input = value;\n            this._onDidChangeInput.fire(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"onDidChangeInput\", {\n        get: function () { return this._onDidChangeInput.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"label\", {\n        get: function () {\n            return this._label;\n        },\n        set: function (label) {\n            this._label = label;\n            this._onDidChangeLabel.fire(this._label);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"onDidChangeLabel\", {\n        get: function () { return this._onDidChangeLabel.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"comments\", {\n        get: function () {\n            return this._comments;\n        },\n        set: function (newComments) {\n            this._comments = newComments;\n            this._onDidChangeComments.fire(this._comments);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"onDidChangeComments\", {\n        get: function () { return this._onDidChangeComments.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"acceptInputCommand\", {\n        get: function () {\n            return this._acceptInputCommand;\n        },\n        set: function (newCommand) {\n            this._acceptInputCommand = newCommand;\n            this._onDidChangeAcceptInputCommand.fire(this._acceptInputCommand);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"onDidChangeAcceptInputCommand\", {\n        get: function () { return this._onDidChangeAcceptInputCommand.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"additionalCommands\", {\n        get: function () {\n            return this._additionalCommands;\n        },\n        set: function (newCommands) {\n            this._additionalCommands = newCommands;\n            this._onDidChangeAdditionalCommands.fire(this._additionalCommands);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"deleteCommand\", {\n        get: function () {\n            return this._deleteCommand;\n        },\n        set: function (newCommand) {\n            this._deleteCommand = newCommand;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"onDidChangeAdditionalCommands\", {\n        get: function () { return this._onDidChangeAdditionalCommands.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"range\", {\n        get: function () {\n            return this._range;\n        },\n        set: function (range) {\n            this._range = range;\n            this._onDidChangeRange.fire(this._range);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentThread.prototype, \"collapsibleState\", {\n        get: function () {\n            return this._collapsibleState;\n        },\n        set: function (newState) {\n            this._collapsibleState = newState;\n            this._onDidChangeCollasibleState.fire(this._collapsibleState);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadCommentThread.prototype.dispose = function () { };\n    MainThreadCommentThread.prototype.toJSON = function () {\n        return {\n            $mid: 7,\n            commentControlHandle: this.controller.handle,\n            commentThreadHandle: this.commentThreadHandle,\n        };\n    };\n    return MainThreadCommentThread;\n}());\nexports.MainThreadCommentThread = MainThreadCommentThread;\nvar MainThreadCommentController = /** @class */ (function () {\n    function MainThreadCommentController(_proxy, _commentService, _handle, _uniqueId, _id, _label, _features) {\n        this._proxy = _proxy;\n        this._commentService = _commentService;\n        this._handle = _handle;\n        this._uniqueId = _uniqueId;\n        this._id = _id;\n        this._label = _label;\n        this._features = _features;\n        this._threads = new Map();\n    }\n    Object.defineProperty(MainThreadCommentController.prototype, \"handle\", {\n        get: function () {\n            return this._handle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentController.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentController.prototype, \"proxy\", {\n        get: function () {\n            return this._proxy;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentController.prototype, \"label\", {\n        get: function () {\n            return this._label;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadCommentController.prototype, \"reactions\", {\n        get: function () {\n            return this._reactions;\n        },\n        set: function (reactions) {\n            this._reactions = reactions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadCommentController.prototype.updateFeatures = function (features) {\n        this._features = features;\n    };\n    MainThreadCommentController.prototype.createCommentThread = function (commentThreadHandle, threadId, resource, range, comments, acceptInputCommand, additionalCommands, deleteCommand, collapseState) {\n        var thread = new MainThreadCommentThread(commentThreadHandle, this, '', threadId, uri_1.URI.revive(resource).toString(), range, comments, acceptInputCommand, additionalCommands, deleteCommand, collapseState);\n        this._threads.set(commentThreadHandle, thread);\n        this._commentService.updateComments(this._uniqueId, {\n            added: [thread],\n            removed: [],\n            changed: [],\n            draftMode: modes.DraftMode.NotSupported\n        });\n        return thread;\n    };\n    MainThreadCommentController.prototype.deleteCommentThread = function (commentThreadHandle) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        this._threads.delete(commentThreadHandle);\n        this._commentService.updateComments(this._uniqueId, {\n            added: [],\n            removed: [thread],\n            changed: [],\n            draftMode: modes.DraftMode.NotSupported\n        });\n        thread.dispose();\n    };\n    MainThreadCommentController.prototype.updateComments = function (commentThreadHandle, comments) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.comments = comments;\n        this._commentService.updateComments(this._uniqueId, {\n            added: [],\n            removed: [],\n            changed: [thread],\n            draftMode: modes.DraftMode.NotSupported\n        });\n    };\n    MainThreadCommentController.prototype.updateAcceptInputCommand = function (commentThreadHandle, acceptInputCommand) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.acceptInputCommand = acceptInputCommand;\n    };\n    MainThreadCommentController.prototype.updateAdditionalCommands = function (commentThreadHandle, additionalCommands) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.additionalCommands = additionalCommands;\n    };\n    MainThreadCommentController.prototype.updateDeleteCommand = function (commentThreadHandle, deleteCommand) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.deleteCommand = deleteCommand;\n    };\n    MainThreadCommentController.prototype.updateCollapsibleState = function (commentThreadHandle, collapseState) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.collapsibleState = collapseState;\n    };\n    MainThreadCommentController.prototype.updateCommentThreadRange = function (commentThreadHandle, range) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.range = range;\n    };\n    MainThreadCommentController.prototype.updateCommentThreadLabel = function (commentThreadHandle, label) {\n        var thread = this.getKnownThread(commentThreadHandle);\n        thread.label = label;\n    };\n    MainThreadCommentController.prototype.updateInput = function (input) {\n        var thread = this.activeCommentThread;\n        if (thread && thread.input) {\n            var commentInput = thread.input;\n            commentInput.value = input;\n            thread.input = commentInput;\n        }\n    };\n    MainThreadCommentController.prototype.getKnownThread = function (commentThreadHandle) {\n        var thread = this._threads.get(commentThreadHandle);\n        if (!thread) {\n            throw new Error('unknown thread');\n        }\n        return thread;\n    };\n    MainThreadCommentController.prototype.getDocumentComments = function (resource, token) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var ret, _i, _a, thread, commentThread, commentingRanges;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        ret = [];\n                        for (_i = 0, _a = map_1.keys(this._threads); _i < _a.length; _i++) {\n                            thread = _a[_i];\n                            commentThread = this._threads.get(thread);\n                            if (commentThread.resource === resource.toString()) {\n                                ret.push(commentThread);\n                            }\n                        }\n                        return [4 /*yield*/, this._proxy.$provideCommentingRanges(this.handle, resource, token)];\n                    case 1:\n                        commentingRanges = _b.sent();\n                        return [2 /*return*/, {\n                                owner: this._uniqueId,\n                                threads: ret,\n                                commentingRanges: commentingRanges ?\n                                    {\n                                        resource: resource, ranges: commentingRanges, newCommentThreadCallback: function (uri, range) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                                            return tslib_1.__generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0: return [4 /*yield*/, this._proxy.$createNewCommentWidgetCallback(this.handle, uri, range, token)];\n                                                    case 1:\n                                                        _a.sent();\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); }\n                                    } : [],\n                                draftMode: modes.DraftMode.NotSupported\n                            }];\n                }\n            });\n        });\n    };\n    MainThreadCommentController.prototype.getCommentingRanges = function (resource, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var commentingRanges;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._proxy.$provideCommentingRanges(this.handle, resource, token)];\n                    case 1:\n                        commentingRanges = _a.sent();\n                        return [2 /*return*/, commentingRanges || []];\n                }\n            });\n        });\n    };\n    MainThreadCommentController.prototype.getReactionGroup = function () {\n        return this._features.reactionGroup;\n    };\n    MainThreadCommentController.prototype.toggleReaction = function (uri, thread, comment, reaction, token) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, this._proxy.$toggleReaction(this._handle, thread.commentThreadHandle, uri, comment, reaction)];\n            });\n        });\n    };\n    MainThreadCommentController.prototype.getAllComments = function () {\n        var ret = [];\n        for (var _i = 0, _a = map_1.keys(this._threads); _i < _a.length; _i++) {\n            var thread = _a[_i];\n            ret.push(this._threads.get(thread));\n        }\n        return ret;\n    };\n    MainThreadCommentController.prototype.toJSON = function () {\n        return {\n            $mid: 6,\n            handle: this.handle\n        };\n    };\n    return MainThreadCommentController;\n}());\nexports.MainThreadCommentController = MainThreadCommentController;\nvar MainThreadComments = /** @class */ (function (_super) {\n    tslib_1.__extends(MainThreadComments, _super);\n    function MainThreadComments(extHostContext, _editorService, _commentService, _panelService, _telemetryService, _configurationService) {\n        var _this = _super.call(this) || this;\n        _this._editorService = _editorService;\n        _this._commentService = _commentService;\n        _this._panelService = _panelService;\n        _this._telemetryService = _telemetryService;\n        _this._configurationService = _configurationService;\n        _this._documentProviders = new Map();\n        _this._workspaceProviders = new Map();\n        _this._handlers = new Map();\n        _this._commentControllers = new Map();\n        _this._disposables = [];\n        _this._activeCommentThreadDisposables = [];\n        _this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostComments);\n        _this._disposables.push(_this._commentService.onDidChangeActiveCommentThread(function (thread) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var controller;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        controller = thread.controller;\n                        if (!controller) {\n                            return [2 /*return*/];\n                        }\n                        this._activeCommentThreadDisposables = lifecycle_1.dispose(this._activeCommentThreadDisposables);\n                        this._activeCommentThread = thread;\n                        controller.activeCommentThread = this._activeCommentThread;\n                        this._activeCommentThreadDisposables.push(this._activeCommentThread.onDidChangeInput(function (input) {\n                            _this._input = input;\n                            _this._proxy.$onCommentWidgetInputChange(controller.handle, _this._input ? _this._input.value : undefined);\n                        }));\n                        return [4 /*yield*/, this._proxy.$onCommentWidgetInputChange(controller.handle, this._input ? this._input.value : undefined)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }); }));\n        return _this;\n    }\n    MainThreadComments.prototype.$registerCommentController = function (handle, id, label) {\n        var providerId = uuid_1.generateUuid();\n        this._handlers.set(handle, providerId);\n        var provider = new MainThreadCommentController(this._proxy, this._commentService, handle, providerId, id, label, {});\n        this._commentService.registerCommentController(providerId, provider);\n        this._commentControllers.set(handle, provider);\n        var commentsPanelAlreadyConstructed = this._panelService.getPanels().some(function (panel) { return panel.id === commentsPanel_1.COMMENTS_PANEL_ID; });\n        if (!commentsPanelAlreadyConstructed) {\n            this.registerPanel(commentsPanelAlreadyConstructed);\n            this.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n        }\n        this._commentService.setWorkspaceComments(String(handle), []);\n    };\n    MainThreadComments.prototype.$unregisterCommentController = function (handle) {\n        var providerId = this._handlers.get(handle);\n        if (typeof providerId !== 'string') {\n            throw new Error('unknown handler');\n        }\n        this._commentService.unregisterCommentController(providerId);\n        this._handlers.delete(handle);\n        this._commentControllers.delete(handle);\n    };\n    MainThreadComments.prototype.$updateCommentControllerFeatures = function (handle, features) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return undefined;\n        }\n        provider.updateFeatures(features);\n    };\n    MainThreadComments.prototype.$createCommentThread = function (handle, commentThreadHandle, threadId, resource, range, comments, acceptInputCommand, additionalCommands, deleteCommand, collapseState) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return undefined;\n        }\n        return provider.createCommentThread(commentThreadHandle, threadId, resource, range, comments, acceptInputCommand, additionalCommands, deleteCommand, collapseState);\n    };\n    MainThreadComments.prototype.$deleteCommentThread = function (handle, commentThreadHandle) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        return provider.deleteCommentThread(commentThreadHandle);\n    };\n    MainThreadComments.prototype.$updateComments = function (handle, commentThreadHandle, comments) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateComments(commentThreadHandle, comments);\n    };\n    MainThreadComments.prototype.$setInputValue = function (handle, input) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateInput(input);\n    };\n    MainThreadComments.prototype.$updateCommentThreadAcceptInputCommand = function (handle, commentThreadHandle, acceptInputCommand) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateAcceptInputCommand(commentThreadHandle, acceptInputCommand);\n    };\n    MainThreadComments.prototype.$updateCommentThreadAdditionalCommands = function (handle, commentThreadHandle, additionalCommands) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateAdditionalCommands(commentThreadHandle, additionalCommands);\n    };\n    MainThreadComments.prototype.$updateCommentThreadDeleteCommand = function (handle, commentThreadHandle, acceptInputCommand) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateDeleteCommand(commentThreadHandle, acceptInputCommand);\n    };\n    MainThreadComments.prototype.$updateCommentThreadCollapsibleState = function (handle, commentThreadHandle, collapseState) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateCollapsibleState(commentThreadHandle, collapseState);\n    };\n    MainThreadComments.prototype.$updateCommentThreadRange = function (handle, commentThreadHandle, range) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateCommentThreadRange(commentThreadHandle, range);\n    };\n    MainThreadComments.prototype.$updateCommentThreadLabel = function (handle, commentThreadHandle, label) {\n        var provider = this._commentControllers.get(handle);\n        if (!provider) {\n            return;\n        }\n        provider.updateCommentThreadLabel(commentThreadHandle, label);\n    };\n    MainThreadComments.prototype.$registerDocumentCommentProvider = function (handle, features) {\n        this._documentProviders.set(handle, undefined);\n        var handler = new MainThreadDocumentCommentProvider(this._proxy, handle, features);\n        var providerId = uuid_1.generateUuid();\n        this._handlers.set(handle, providerId);\n        this._commentService.registerDataProvider(providerId, handler);\n    };\n    MainThreadComments.prototype.registerPanel = function (commentsPanelAlreadyConstructed) {\n        if (!commentsPanelAlreadyConstructed) {\n            platform_1.Registry.as(panel_1.Extensions.Panels).registerPanel(new panel_1.PanelDescriptor(commentsPanel_1.CommentsPanel, commentsPanel_1.COMMENTS_PANEL_ID, commentsPanel_1.COMMENTS_PANEL_TITLE, 'commentsPanel', 10));\n        }\n    };\n    /**\n     * If the comments panel has never been opened, the constructor for it has not yet run so it has\n     * no listeners for comment threads being set or updated. Listen for the panel opening for the\n     * first time and send it comments then.\n     */\n    MainThreadComments.prototype.registerOpenPanelListener = function (commentsPanelAlreadyConstructed) {\n        var _this = this;\n        if (!commentsPanelAlreadyConstructed && !this._openPanelListener) {\n            this._openPanelListener = this._panelService.onDidPanelOpen(function (e) {\n                if (e.panel.getId() === commentsPanel_1.COMMENTS_PANEL_ID) {\n                    map_1.keys(_this._workspaceProviders).forEach(function (handle) {\n                        _this._proxy.$provideWorkspaceComments(handle).then(function (commentThreads) {\n                            if (commentThreads) {\n                                var providerId = _this.getHandler(handle);\n                                _this._commentService.setWorkspaceComments(providerId, commentThreads);\n                            }\n                        });\n                    });\n                    map_1.keys(_this._commentControllers).forEach(function (handle) {\n                        var threads = _this._commentControllers.get(handle).getAllComments();\n                        if (threads.length) {\n                            var providerId = _this.getHandler(handle);\n                            _this._commentService.setWorkspaceComments(providerId, threads);\n                        }\n                    });\n                    if (_this._openPanelListener) {\n                        _this._openPanelListener.dispose();\n                        _this._openPanelListener = null;\n                    }\n                }\n            });\n        }\n    };\n    MainThreadComments.prototype.getHandler = function (handle) {\n        if (!this._handlers.has(handle)) {\n            throw new Error('Unknown handler');\n        }\n        return this._handlers.get(handle);\n    };\n    MainThreadComments.prototype.$registerWorkspaceCommentProvider = function (handle, extensionId) {\n        var _this = this;\n        this._workspaceProviders.set(handle, undefined);\n        var providerId = uuid_1.generateUuid();\n        this._handlers.set(handle, providerId);\n        var commentsPanelAlreadyConstructed = this._panelService.getPanels().some(function (panel) { return panel.id === commentsPanel_1.COMMENTS_PANEL_ID; });\n        if (!commentsPanelAlreadyConstructed) {\n            this.registerPanel(commentsPanelAlreadyConstructed);\n        }\n        var openPanel = this._configurationService.getValue('comments').openPanel;\n        if (openPanel === 'neverOpen') {\n            this.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n        }\n        if (openPanel === 'openOnSessionStart') {\n            this._panelService.openPanel(commentsPanel_1.COMMENTS_PANEL_ID);\n        }\n        this._proxy.$provideWorkspaceComments(handle).then(function (commentThreads) {\n            if (commentThreads) {\n                if (openPanel === 'openOnSessionStartWithComments' && commentThreads.length) {\n                    if (commentThreads.length) {\n                        _this._panelService.openPanel(commentsPanel_1.COMMENTS_PANEL_ID);\n                    }\n                    else {\n                        _this.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n                    }\n                }\n                _this._commentService.setWorkspaceComments(providerId, commentThreads);\n            }\n        });\n        /* __GDPR__\n            \"comments:registerWorkspaceCommentProvider\" : {\n                \"extensionId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        this._telemetryService.publicLog('comments:registerWorkspaceCommentProvider', {\n            extensionId: extensionId.value\n        });\n    };\n    MainThreadComments.prototype.$unregisterDocumentCommentProvider = function (handle) {\n        this._documentProviders.delete(handle);\n        var handlerId = this.getHandler(handle);\n        this._commentService.unregisterDataProvider(handlerId);\n        this._handlers.delete(handle);\n    };\n    MainThreadComments.prototype.$unregisterWorkspaceCommentProvider = function (handle) {\n        this._workspaceProviders.delete(handle);\n        if (this._workspaceProviders.size === 0) {\n            platform_1.Registry.as(panel_1.Extensions.Panels).deregisterPanel(commentsPanel_1.COMMENTS_PANEL_ID);\n            if (this._openPanelListener) {\n                this._openPanelListener.dispose();\n                this._openPanelListener = null;\n            }\n        }\n        var handlerId = this.getHandler(handle);\n        this._commentService.removeWorkspaceComments(handlerId);\n        this._handlers.delete(handle);\n    };\n    MainThreadComments.prototype.$onDidCommentThreadsChange = function (handle, event) {\n        // notify comment service\n        var providerId = this.getHandler(handle);\n        this._commentService.updateComments(providerId, event);\n    };\n    MainThreadComments.prototype.getVisibleEditors = function () {\n        var ret = [];\n        this._editorService.visibleControls.forEach(function (control) {\n            if (editorBrowser_1.isCodeEditor(control.getControl())) {\n                ret.push(control.getControl());\n            }\n            if (editorBrowser_1.isDiffEditor(control.getControl())) {\n                var diffEditor = control.getControl();\n                ret.push(diffEditor.getOriginalEditor(), diffEditor.getModifiedEditor());\n            }\n        });\n        return ret;\n    };\n    MainThreadComments.prototype.provideWorkspaceComments = function () {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result, _i, _a, handle, result_1;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        result = [];\n                        _i = 0, _a = map_1.keys(this._workspaceProviders);\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        handle = _a[_i];\n                        return [4 /*yield*/, this._proxy.$provideWorkspaceComments(handle)];\n                    case 2:\n                        result_1 = _b.sent();\n                        if (Array.isArray(result_1)) {\n                            result_1.push.apply(result_1, result_1);\n                        }\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    MainThreadComments.prototype.provideDocumentComments = function (resource) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result, _i, _a, handle, _b, _c;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        result = [];\n                        _i = 0, _a = map_1.keys(this._documentProviders);\n                        _d.label = 1;\n                    case 1:\n                        if (!(_i < _a.length)) return [3 /*break*/, 4];\n                        handle = _a[_i];\n                        _c = (_b = result).push;\n                        return [4 /*yield*/, this._proxy.$provideDocumentComments(handle, resource)];\n                    case 2:\n                        _c.apply(_b, [_d.sent()]);\n                        _d.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    MainThreadComments.prototype.dispose = function () {\n        this._disposables = lifecycle_1.dispose(this._disposables);\n        this._activeCommentThreadDisposables = lifecycle_1.dispose(this._activeCommentThreadDisposables);\n        this._workspaceProviders.forEach(function (value) { return lifecycle_1.dispose(value); });\n        this._workspaceProviders.clear();\n        this._documentProviders.forEach(function (value) { return lifecycle_1.dispose(value); });\n        this._documentProviders.clear();\n    };\n    MainThreadComments = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadComments),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, commentService_1.ICommentService),\n        tslib_1.__param(3, panelService_1.IPanelService),\n        tslib_1.__param(4, telemetry_1.ITelemetryService),\n        tslib_1.__param(5, configuration_1.IConfigurationService)\n    ], MainThreadComments);\n    return MainThreadComments;\n}(lifecycle_1.Disposable));\nexports.MainThreadComments = MainThreadComments;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadComments.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadComments.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, isCodeEditor, isDiffEditor, IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport * as modes from 'vs/editor/common/modes';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { keys } from 'vs/base/common/map';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ExtHostCommentsShape, ExtHostContext, IExtHostContext, MainContext, MainThreadCommentsShape, CommentProviderFeatures } from '../common/extHost.protocol';\n\nimport { ICommentService, ICommentInfo } from 'vs/workbench/contrib/comments/browser/commentService';\nimport { COMMENTS_PANEL_ID, CommentsPanel, COMMENTS_PANEL_TITLE } from 'vs/workbench/contrib/comments/browser/commentsPanel';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ICommentsConfiguration } from 'vs/workbench/contrib/comments/browser/comments.contribution';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { PanelRegistry, Extensions as PanelExtensions, PanelDescriptor } from 'vs/workbench/browser/panel';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class MainThreadDocumentCommentProvider implements modes.DocumentCommentProvider {\n\tprivate readonly _proxy: ExtHostCommentsShape;\n\tprivate readonly _handle: number;\n\tprivate readonly _features: CommentProviderFeatures;\n\tget startDraftLabel(): string | undefined { return this._features.startDraftLabel; }\n\tget deleteDraftLabel(): string | undefined { return this._features.deleteDraftLabel; }\n\tget finishDraftLabel(): string | undefined { return this._features.finishDraftLabel; }\n\tget reactionGroup(): modes.CommentReaction[] | undefined { return this._features.reactionGroup; }\n\n\tconstructor(proxy: ExtHostCommentsShape, handle: number, features: CommentProviderFeatures) {\n\t\tthis._proxy = proxy;\n\t\tthis._handle = handle;\n\t\tthis._features = features;\n\t}\n\n\tasync provideDocumentComments(uri: URI, token: CancellationToken) {\n\t\treturn this._proxy.$provideDocumentComments(this._handle, uri);\n\t}\n\n\tasync createNewCommentThread(uri: URI, range: Range, text: string, token: CancellationToken) {\n\t\treturn this._proxy.$createNewCommentThread(this._handle, uri, range, text);\n\t}\n\n\tasync replyToCommentThread(uri: URI, range: Range, thread: modes.CommentThread, text: string, token: CancellationToken) {\n\t\treturn this._proxy.$replyToCommentThread(this._handle, uri, range, thread, text);\n\t}\n\n\tasync editComment(uri: URI, comment: modes.Comment, text: string, token: CancellationToken) {\n\t\treturn this._proxy.$editComment(this._handle, uri, comment, text);\n\t}\n\n\tasync deleteComment(uri: URI, comment: modes.Comment, token: CancellationToken) {\n\t\treturn this._proxy.$deleteComment(this._handle, uri, comment);\n\t}\n\n\tasync startDraft(uri: URI, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$startDraft(this._handle, uri);\n\t}\n\tasync deleteDraft(uri: URI, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$deleteDraft(this._handle, uri);\n\t}\n\tasync finishDraft(uri: URI, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$finishDraft(this._handle, uri);\n\t}\n\tasync addReaction(uri: URI, comment: modes.Comment, reaction: modes.CommentReaction, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$addReaction(this._handle, uri, comment, reaction);\n\t}\n\tasync deleteReaction(uri: URI, comment: modes.Comment, reaction: modes.CommentReaction, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$deleteReaction(this._handle, uri, comment, reaction);\n\t}\n\n\n\t// onDidChangeCommentThreads = null;\n}\n\nexport class MainThreadCommentThread implements modes.CommentThread2 {\n\tprivate _input?: modes.CommentInput;\n\tget input(): modes.CommentInput | undefined {\n\t\treturn this._input;\n\t}\n\n\tset input(value: modes.CommentInput | undefined) {\n\t\tthis._input = value;\n\t\tthis._onDidChangeInput.fire(value);\n\t}\n\n\tprivate _onDidChangeInput = new Emitter<modes.CommentInput | undefined>();\n\tget onDidChangeInput(): Event<modes.CommentInput | undefined> { return this._onDidChangeInput.event; }\n\n\tprivate _label: string;\n\n\tget label(): string {\n\t\treturn this._label;\n\t}\n\n\tset label(label: string) {\n\t\tthis._label = label;\n\t\tthis._onDidChangeLabel.fire(this._label);\n\t}\n\n\tprivate _onDidChangeLabel = new Emitter<string>();\n\tget onDidChangeLabel(): Event<string> { return this._onDidChangeLabel.event; }\n\n\n\tpublic get comments(): modes.Comment[] {\n\t\treturn this._comments;\n\t}\n\n\tpublic set comments(newComments: modes.Comment[]) {\n\t\tthis._comments = newComments;\n\t\tthis._onDidChangeComments.fire(this._comments);\n\t}\n\n\tprivate _onDidChangeComments = new Emitter<modes.Comment[]>();\n\tget onDidChangeComments(): Event<modes.Comment[]> { return this._onDidChangeComments.event; }\n\n\tset acceptInputCommand(newCommand: modes.Command) {\n\t\tthis._acceptInputCommand = newCommand;\n\t\tthis._onDidChangeAcceptInputCommand.fire(this._acceptInputCommand);\n\t}\n\n\tget acceptInputCommand(): modes.Command {\n\t\treturn this._acceptInputCommand!;\n\t}\n\n\tprivate _onDidChangeAcceptInputCommand = new Emitter<modes.Command>();\n\tget onDidChangeAcceptInputCommand(): Event<modes.Command> { return this._onDidChangeAcceptInputCommand.event; }\n\n\tset additionalCommands(newCommands: modes.Command[]) {\n\t\tthis._additionalCommands = newCommands;\n\t\tthis._onDidChangeAdditionalCommands.fire(this._additionalCommands);\n\t}\n\n\tget additionalCommands(): modes.Command[] {\n\t\treturn this._additionalCommands;\n\t}\n\n\tset deleteCommand(newCommand: modes.Command | undefined) {\n\t\tthis._deleteCommand = newCommand;\n\t}\n\n\tget deleteCommand(): modes.Command | undefined {\n\t\treturn this._deleteCommand;\n\t}\n\n\tprivate _onDidChangeAdditionalCommands = new Emitter<modes.Command[]>();\n\tget onDidChangeAdditionalCommands(): Event<modes.Command[]> { return this._onDidChangeAdditionalCommands.event; }\n\n\tset range(range: IRange) {\n\t\tthis._range = range;\n\t\tthis._onDidChangeRange.fire(this._range);\n\t}\n\n\tget range(): IRange {\n\t\treturn this._range;\n\t}\n\n\tprivate _onDidChangeRange = new Emitter<IRange>();\n\tpublic onDidChangeRange = this._onDidChangeRange.event;\n\n\tget collapsibleState() {\n\t\treturn this._collapsibleState;\n\t}\n\n\tset collapsibleState(newState: modes.CommentThreadCollapsibleState) {\n\t\tthis._collapsibleState = newState;\n\t\tthis._onDidChangeCollasibleState.fire(this._collapsibleState);\n\t}\n\n\tprivate _onDidChangeCollasibleState = new Emitter<modes.CommentThreadCollapsibleState>();\n\tpublic onDidChangeCollasibleState = this._onDidChangeCollasibleState.event;\n\n\tconstructor(\n\t\tpublic commentThreadHandle: number,\n\t\tpublic controller: MainThreadCommentController,\n\t\tpublic extensionId: string,\n\t\tpublic threadId: string,\n\t\tpublic resource: string,\n\t\tprivate _range: IRange,\n\t\tprivate _comments: modes.Comment[],\n\t\tprivate _acceptInputCommand: modes.Command | undefined,\n\t\tprivate _additionalCommands: modes.Command[],\n\t\tprivate _deleteCommand: modes.Command | undefined,\n\t\tprivate _collapsibleState: modes.CommentThreadCollapsibleState\n\t) {\n\n\t}\n\n\tdispose() { }\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: 7,\n\t\t\tcommentControlHandle: this.controller.handle,\n\t\t\tcommentThreadHandle: this.commentThreadHandle,\n\t\t};\n\t}\n}\n\nexport class MainThreadCommentController {\n\tget handle(): number {\n\t\treturn this._handle;\n\t}\n\n\tget id(): string {\n\t\treturn this._id;\n\t}\n\n\tget proxy(): ExtHostCommentsShape {\n\t\treturn this._proxy;\n\t}\n\n\tget label(): string {\n\t\treturn this._label;\n\t}\n\n\tprivate _reactions: modes.CommentReaction[] | undefined;\n\n\tget reactions() {\n\t\treturn this._reactions;\n\t}\n\n\tset reactions(reactions: modes.CommentReaction[] | undefined) {\n\t\tthis._reactions = reactions;\n\t}\n\n\tprivate readonly _threads: Map<number, MainThreadCommentThread> = new Map<number, MainThreadCommentThread>();\n\tpublic activeCommentThread?: MainThreadCommentThread;\n\n\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostCommentsShape,\n\t\tprivate readonly _commentService: ICommentService,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _uniqueId: string,\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _label: string,\n\t\tprivate _features: CommentProviderFeatures\n\t) { }\n\n\tupdateFeatures(features: CommentProviderFeatures) {\n\t\tthis._features = features;\n\t}\n\n\tcreateCommentThread(commentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\tcomments: modes.Comment[],\n\t\tacceptInputCommand: modes.Command | undefined,\n\t\tadditionalCommands: modes.Command[],\n\t\tdeleteCommand: modes.Command | undefined,\n\t\tcollapseState: modes.CommentThreadCollapsibleState): modes.CommentThread2 {\n\t\tlet thread = new MainThreadCommentThread(\n\t\t\tcommentThreadHandle,\n\t\t\tthis,\n\t\t\t'',\n\t\t\tthreadId,\n\t\t\tURI.revive(resource).toString(),\n\t\t\trange,\n\t\t\tcomments,\n\t\t\tacceptInputCommand,\n\t\t\tadditionalCommands,\n\t\t\tdeleteCommand,\n\t\t\tcollapseState\n\t\t);\n\n\t\tthis._threads.set(commentThreadHandle, thread);\n\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\tadded: [thread],\n\t\t\tremoved: [],\n\t\t\tchanged: [],\n\t\t\tdraftMode: modes.DraftMode.NotSupported\n\t\t});\n\n\t\treturn thread;\n\t}\n\n\tdeleteCommentThread(commentThreadHandle: number) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthis._threads.delete(commentThreadHandle);\n\n\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\tadded: [],\n\t\t\tremoved: [thread],\n\t\t\tchanged: [],\n\t\t\tdraftMode: modes.DraftMode.NotSupported\n\t\t});\n\n\t\tthread.dispose();\n\t}\n\n\tupdateComments(commentThreadHandle: number, comments: modes.Comment[]) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.comments = comments;\n\n\t\tthis._commentService.updateComments(this._uniqueId, {\n\t\t\tadded: [],\n\t\t\tremoved: [],\n\t\t\tchanged: [thread],\n\t\t\tdraftMode: modes.DraftMode.NotSupported\n\t\t});\n\t}\n\n\tupdateAcceptInputCommand(commentThreadHandle: number, acceptInputCommand: modes.Command) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.acceptInputCommand = acceptInputCommand;\n\t}\n\n\tupdateAdditionalCommands(commentThreadHandle: number, additionalCommands: modes.Command[]) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.additionalCommands = additionalCommands;\n\t}\n\n\tupdateDeleteCommand(commentThreadHandle: number, deleteCommand: modes.Command) {\n\t\tconst thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.deleteCommand = deleteCommand;\n\t}\n\n\tupdateCollapsibleState(commentThreadHandle: number, collapseState: modes.CommentThreadCollapsibleState) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.collapsibleState = collapseState;\n\t}\n\n\tupdateCommentThreadRange(commentThreadHandle: number, range: IRange) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.range = range;\n\t}\n\n\tupdateCommentThreadLabel(commentThreadHandle: number, label: string) {\n\t\tlet thread = this.getKnownThread(commentThreadHandle);\n\t\tthread.label = label;\n\t}\n\n\tupdateInput(input: string) {\n\t\tlet thread = this.activeCommentThread;\n\n\t\tif (thread && thread.input) {\n\t\t\tlet commentInput = thread.input;\n\t\t\tcommentInput.value = input;\n\t\t\tthread.input = commentInput;\n\t\t}\n\t}\n\n\tprivate getKnownThread(commentThreadHandle: number): MainThreadCommentThread {\n\t\tconst thread = this._threads.get(commentThreadHandle);\n\t\tif (!thread) {\n\t\t\tthrow new Error('unknown thread');\n\t\t}\n\t\treturn thread;\n\t}\n\n\n\tasync getDocumentComments(resource: URI, token: CancellationToken) {\n\t\tlet ret: modes.CommentThread2[] = [];\n\t\tfor (let thread of keys(this._threads)) {\n\t\t\tconst commentThread = this._threads.get(thread)!;\n\t\t\tif (commentThread.resource === resource.toString()) {\n\t\t\t\tret.push(commentThread);\n\t\t\t}\n\t\t}\n\n\t\tlet commentingRanges = await this._proxy.$provideCommentingRanges(this.handle, resource, token);\n\n\t\treturn <ICommentInfo>{\n\t\t\towner: this._uniqueId,\n\t\t\tthreads: ret,\n\t\t\tcommentingRanges: commentingRanges ?\n\t\t\t\t{\n\t\t\t\t\tresource: resource, ranges: commentingRanges, newCommentThreadCallback: async (uri: UriComponents, range: IRange) => {\n\t\t\t\t\t\tawait this._proxy.$createNewCommentWidgetCallback(this.handle, uri, range, token);\n\t\t\t\t\t}\n\t\t\t\t} : [],\n\t\t\tdraftMode: modes.DraftMode.NotSupported\n\t\t};\n\t}\n\n\tasync getCommentingRanges(resource: URI, token: CancellationToken): Promise<IRange[]> {\n\t\tlet commentingRanges = await this._proxy.$provideCommentingRanges(this.handle, resource, token);\n\t\treturn commentingRanges || [];\n\t}\n\n\tgetReactionGroup(): modes.CommentReaction[] | undefined {\n\t\treturn this._features.reactionGroup;\n\t}\n\n\tasync toggleReaction(uri: URI, thread: modes.CommentThread2, comment: modes.Comment, reaction: modes.CommentReaction, token: CancellationToken): Promise<void> {\n\t\treturn this._proxy.$toggleReaction(this._handle, thread.commentThreadHandle, uri, comment, reaction);\n\t}\n\n\tgetAllComments(): MainThreadCommentThread[] {\n\t\tlet ret: MainThreadCommentThread[] = [];\n\t\tfor (let thread of keys(this._threads)) {\n\t\t\tret.push(this._threads.get(thread)!);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: 6,\n\t\t\thandle: this.handle\n\t\t};\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadComments)\nexport class MainThreadComments extends Disposable implements MainThreadCommentsShape {\n\tprivate _disposables: IDisposable[];\n\tprivate _activeCommentThreadDisposables: IDisposable[];\n\tprivate readonly _proxy: ExtHostCommentsShape;\n\tprivate _documentProviders = new Map<number, IDisposable>();\n\tprivate _workspaceProviders = new Map<number, IDisposable>();\n\tprivate _handlers = new Map<number, string>();\n\tprivate _commentControllers = new Map<number, MainThreadCommentController>();\n\n\tprivate _activeCommentThread?: MainThreadCommentThread;\n\tprivate _input?: modes.CommentInput;\n\tprivate _openPanelListener: IDisposable | null;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ICommentService private readonly _commentService: ICommentService,\n\t\t@IPanelService private readonly _panelService: IPanelService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._disposables = [];\n\t\tthis._activeCommentThreadDisposables = [];\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostComments);\n\t\tthis._disposables.push(this._commentService.onDidChangeActiveCommentThread(async thread => {\n\t\t\tlet controller = (thread as MainThreadCommentThread).controller;\n\n\t\t\tif (!controller) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._activeCommentThreadDisposables = dispose(this._activeCommentThreadDisposables);\n\t\t\tthis._activeCommentThread = thread as MainThreadCommentThread;\n\t\t\tcontroller.activeCommentThread = this._activeCommentThread;\n\n\t\t\tthis._activeCommentThreadDisposables.push(this._activeCommentThread.onDidChangeInput(input => { // todo, dispose\n\t\t\t\tthis._input = input;\n\t\t\t\tthis._proxy.$onCommentWidgetInputChange(controller.handle, this._input ? this._input.value : undefined);\n\t\t\t}));\n\n\t\t\tawait this._proxy.$onCommentWidgetInputChange(controller.handle, this._input ? this._input.value : undefined);\n\t\t}));\n\t}\n\n\t$registerCommentController(handle: number, id: string, label: string): void {\n\t\tconst providerId = generateUuid();\n\t\tthis._handlers.set(handle, providerId);\n\n\t\tconst provider = new MainThreadCommentController(this._proxy, this._commentService, handle, providerId, id, label, {});\n\t\tthis._commentService.registerCommentController(providerId, provider);\n\t\tthis._commentControllers.set(handle, provider);\n\n\t\tconst commentsPanelAlreadyConstructed = this._panelService.getPanels().some(panel => panel.id === COMMENTS_PANEL_ID);\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerPanel(commentsPanelAlreadyConstructed);\n\t\t\tthis.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n\t\t}\n\t\tthis._commentService.setWorkspaceComments(String(handle), []);\n\t}\n\n\t$unregisterCommentController(handle: number): void {\n\t\tconst providerId = this._handlers.get(handle);\n\t\tif (typeof providerId !== 'string') {\n\t\t\tthrow new Error('unknown handler');\n\t\t}\n\t\tthis._commentService.unregisterCommentController(providerId);\n\t\tthis._handlers.delete(handle);\n\t\tthis._commentControllers.delete(handle);\n\t}\n\n\t$updateCommentControllerFeatures(handle: number, features: CommentProviderFeatures): void {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tprovider.updateFeatures(features);\n\t}\n\n\t$createCommentThread(handle: number,\n\t\tcommentThreadHandle: number,\n\t\tthreadId: string,\n\t\tresource: UriComponents,\n\t\trange: IRange,\n\t\tcomments: modes.Comment[],\n\t\tacceptInputCommand: modes.Command | undefined,\n\t\tadditionalCommands: modes.Command[],\n\t\tdeleteCommand: modes.Command,\n\t\tcollapseState: modes.CommentThreadCollapsibleState): modes.CommentThread2 | undefined {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn provider.createCommentThread(commentThreadHandle, threadId, resource, range, comments, acceptInputCommand, additionalCommands, deleteCommand, collapseState);\n\t}\n\n\t$deleteCommentThread(handle: number, commentThreadHandle: number) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn provider.deleteCommentThread(commentThreadHandle);\n\t}\n\n\t$updateComments(handle: number, commentThreadHandle: number, comments: modes.Comment[]) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateComments(commentThreadHandle, comments);\n\t}\n\n\t$setInputValue(handle: number, input: string) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateInput(input);\n\t}\n\n\t$updateCommentThreadAcceptInputCommand(handle: number, commentThreadHandle: number, acceptInputCommand: modes.Command) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateAcceptInputCommand(commentThreadHandle, acceptInputCommand);\n\t}\n\n\t$updateCommentThreadAdditionalCommands(handle: number, commentThreadHandle: number, additionalCommands: modes.Command[]) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateAdditionalCommands(commentThreadHandle, additionalCommands);\n\t}\n\n\t$updateCommentThreadDeleteCommand(handle: number, commentThreadHandle: number, acceptInputCommand: modes.Command) {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateDeleteCommand(commentThreadHandle, acceptInputCommand);\n\t}\n\n\t$updateCommentThreadCollapsibleState(handle: number, commentThreadHandle: number, collapseState: modes.CommentThreadCollapsibleState): void {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateCollapsibleState(commentThreadHandle, collapseState);\n\t}\n\n\t$updateCommentThreadRange(handle: number, commentThreadHandle: number, range: any): void {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateCommentThreadRange(commentThreadHandle, range);\n\t}\n\n\t$updateCommentThreadLabel(handle: number, commentThreadHandle: number, label: string): void {\n\t\tlet provider = this._commentControllers.get(handle);\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tprovider.updateCommentThreadLabel(commentThreadHandle, label);\n\t}\n\n\t$registerDocumentCommentProvider(handle: number, features: CommentProviderFeatures): void {\n\t\tthis._documentProviders.set(handle, undefined);\n\t\tconst handler = new MainThreadDocumentCommentProvider(this._proxy, handle, features);\n\n\t\tconst providerId = generateUuid();\n\t\tthis._handlers.set(handle, providerId);\n\n\t\tthis._commentService.registerDataProvider(providerId, handler);\n\t}\n\n\tprivate registerPanel(commentsPanelAlreadyConstructed: boolean) {\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tRegistry.as<PanelRegistry>(PanelExtensions.Panels).registerPanel(new PanelDescriptor(\n\t\t\t\tCommentsPanel,\n\t\t\t\tCOMMENTS_PANEL_ID,\n\t\t\t\tCOMMENTS_PANEL_TITLE,\n\t\t\t\t'commentsPanel',\n\t\t\t\t10\n\t\t\t));\n\t\t}\n\t}\n\n\t/**\n\t * If the comments panel has never been opened, the constructor for it has not yet run so it has\n\t * no listeners for comment threads being set or updated. Listen for the panel opening for the\n\t * first time and send it comments then.\n\t */\n\tprivate registerOpenPanelListener(commentsPanelAlreadyConstructed: boolean) {\n\t\tif (!commentsPanelAlreadyConstructed && !this._openPanelListener) {\n\t\t\tthis._openPanelListener = this._panelService.onDidPanelOpen(e => {\n\t\t\t\tif (e.panel.getId() === COMMENTS_PANEL_ID) {\n\t\t\t\t\tkeys(this._workspaceProviders).forEach(handle => {\n\t\t\t\t\t\tthis._proxy.$provideWorkspaceComments(handle).then(commentThreads => {\n\t\t\t\t\t\t\tif (commentThreads) {\n\t\t\t\t\t\t\t\tconst providerId = this.getHandler(handle);\n\t\t\t\t\t\t\t\tthis._commentService.setWorkspaceComments(providerId, commentThreads);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t\tkeys(this._commentControllers).forEach(handle => {\n\t\t\t\t\t\tlet threads = this._commentControllers.get(handle)!.getAllComments();\n\n\t\t\t\t\t\tif (threads.length) {\n\t\t\t\t\t\t\tconst providerId = this.getHandler(handle);\n\t\t\t\t\t\t\tthis._commentService.setWorkspaceComments(providerId, threads);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (this._openPanelListener) {\n\t\t\t\t\t\tthis._openPanelListener.dispose();\n\t\t\t\t\t\tthis._openPanelListener = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getHandler(handle: number) {\n\t\tif (!this._handlers.has(handle)) {\n\t\t\tthrow new Error('Unknown handler');\n\t\t}\n\t\treturn this._handlers.get(handle)!;\n\t}\n\n\t$registerWorkspaceCommentProvider(handle: number, extensionId: ExtensionIdentifier): void {\n\t\tthis._workspaceProviders.set(handle, undefined);\n\n\t\tconst providerId = generateUuid();\n\t\tthis._handlers.set(handle, providerId);\n\n\t\tconst commentsPanelAlreadyConstructed = this._panelService.getPanels().some(panel => panel.id === COMMENTS_PANEL_ID);\n\t\tif (!commentsPanelAlreadyConstructed) {\n\t\t\tthis.registerPanel(commentsPanelAlreadyConstructed);\n\t\t}\n\n\t\tconst openPanel = this._configurationService.getValue<ICommentsConfiguration>('comments').openPanel;\n\n\t\tif (openPanel === 'neverOpen') {\n\t\t\tthis.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n\t\t}\n\n\t\tif (openPanel === 'openOnSessionStart') {\n\t\t\tthis._panelService.openPanel(COMMENTS_PANEL_ID);\n\t\t}\n\n\t\tthis._proxy.$provideWorkspaceComments(handle).then(commentThreads => {\n\t\t\tif (commentThreads) {\n\t\t\t\tif (openPanel === 'openOnSessionStartWithComments' && commentThreads.length) {\n\t\t\t\t\tif (commentThreads.length) {\n\t\t\t\t\t\tthis._panelService.openPanel(COMMENTS_PANEL_ID);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.registerOpenPanelListener(commentsPanelAlreadyConstructed);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._commentService.setWorkspaceComments(providerId, commentThreads);\n\t\t\t}\n\t\t});\n\n\t\t/* __GDPR__\n\t\t\t\"comments:registerWorkspaceCommentProvider\" : {\n\t\t\t\t\"extensionId\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\tthis._telemetryService.publicLog('comments:registerWorkspaceCommentProvider', {\n\t\t\textensionId: extensionId.value\n\t\t});\n\t}\n\n\t$unregisterDocumentCommentProvider(handle: number): void {\n\t\tthis._documentProviders.delete(handle);\n\t\tconst handlerId = this.getHandler(handle);\n\t\tthis._commentService.unregisterDataProvider(handlerId);\n\t\tthis._handlers.delete(handle);\n\t}\n\n\t$unregisterWorkspaceCommentProvider(handle: number): void {\n\t\tthis._workspaceProviders.delete(handle);\n\t\tif (this._workspaceProviders.size === 0) {\n\t\t\tRegistry.as<PanelRegistry>(PanelExtensions.Panels).deregisterPanel(COMMENTS_PANEL_ID);\n\n\t\t\tif (this._openPanelListener) {\n\t\t\t\tthis._openPanelListener.dispose();\n\t\t\t\tthis._openPanelListener = null;\n\t\t\t}\n\t\t}\n\n\t\tconst handlerId = this.getHandler(handle);\n\t\tthis._commentService.removeWorkspaceComments(handlerId);\n\t\tthis._handlers.delete(handle);\n\t}\n\n\t$onDidCommentThreadsChange(handle: number, event: modes.CommentThreadChangedEvent) {\n\t\t// notify comment service\n\t\tconst providerId = this.getHandler(handle);\n\t\tthis._commentService.updateComments(providerId, event);\n\t}\n\n\tgetVisibleEditors(): ICodeEditor[] {\n\t\tlet ret: ICodeEditor[] = [];\n\n\t\tthis._editorService.visibleControls.forEach(control => {\n\t\t\tif (isCodeEditor(control.getControl())) {\n\t\t\t\tret.push(control.getControl() as ICodeEditor);\n\t\t\t}\n\n\t\t\tif (isDiffEditor(control.getControl())) {\n\t\t\t\tlet diffEditor = control.getControl() as IDiffEditor;\n\t\t\t\tret.push(diffEditor.getOriginalEditor(), diffEditor.getModifiedEditor());\n\t\t\t}\n\t\t});\n\n\t\treturn ret;\n\t}\n\n\tasync provideWorkspaceComments(): Promise<modes.CommentThread[]> {\n\t\tconst result: modes.CommentThread[] = [];\n\t\tfor (const handle of keys(this._workspaceProviders)) {\n\t\t\tconst result = await this._proxy.$provideWorkspaceComments(handle);\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tresult.push(...result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync provideDocumentComments(resource: URI): Promise<Array<modes.CommentInfo | null>> {\n\t\tconst result: Array<modes.CommentInfo | null> = [];\n\t\tfor (const handle of keys(this._documentProviders)) {\n\t\t\tresult.push(await this._proxy.$provideDocumentComments(handle, resource));\n\t\t}\n\t\treturn result;\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables = dispose(this._disposables);\n\t\tthis._activeCommentThreadDisposables = dispose(this._activeCommentThreadDisposables);\n\t\tthis._workspaceProviders.forEach(value => dispose(value));\n\t\tthis._workspaceProviders.clear();\n\t\tthis._documentProviders.forEach(value => dispose(value));\n\t\tthis._documentProviders.clear();\n\t}\n}\n"]}]}