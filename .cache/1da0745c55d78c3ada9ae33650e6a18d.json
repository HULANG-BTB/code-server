{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/core/lineTokens.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/lineTokens.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar LineTokens = /** @class */ (function () {\n    function LineTokens(tokens, text) {\n        this._tokens = tokens;\n        this._tokensCount = (this._tokens.length >>> 1);\n        this._text = text;\n    }\n    LineTokens.prototype.equals = function (other) {\n        if (other instanceof LineTokens) {\n            return this.slicedEquals(other, 0, this._tokensCount);\n        }\n        return false;\n    };\n    LineTokens.prototype.slicedEquals = function (other, sliceFromTokenIndex, sliceTokenCount) {\n        if (this._text !== other._text) {\n            return false;\n        }\n        if (this._tokensCount !== other._tokensCount) {\n            return false;\n        }\n        var from = (sliceFromTokenIndex << 1);\n        var to = from + (sliceTokenCount << 1);\n        for (var i = from; i < to; i++) {\n            if (this._tokens[i] !== other._tokens[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LineTokens.prototype.getLineContent = function () {\n        return this._text;\n    };\n    LineTokens.prototype.getCount = function () {\n        return this._tokensCount;\n    };\n    LineTokens.prototype.getStartOffset = function (tokenIndex) {\n        if (tokenIndex > 0) {\n            return this._tokens[(tokenIndex - 1) << 1];\n        }\n        return 0;\n    };\n    LineTokens.prototype.getLanguageId = function (tokenIndex) {\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\n        return modes_1.TokenMetadata.getLanguageId(metadata);\n    };\n    LineTokens.prototype.getStandardTokenType = function (tokenIndex) {\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\n        return modes_1.TokenMetadata.getTokenType(metadata);\n    };\n    LineTokens.prototype.getForeground = function (tokenIndex) {\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\n        return modes_1.TokenMetadata.getForeground(metadata);\n    };\n    LineTokens.prototype.getClassName = function (tokenIndex) {\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\n        return modes_1.TokenMetadata.getClassNameFromMetadata(metadata);\n    };\n    LineTokens.prototype.getInlineStyle = function (tokenIndex, colorMap) {\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\n        return modes_1.TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n    };\n    LineTokens.prototype.getEndOffset = function (tokenIndex) {\n        return this._tokens[tokenIndex << 1];\n    };\n    /**\n     * Find the token containing offset `offset`.\n     * @param offset The search offset\n     * @return The index of the token containing the offset.\n     */\n    LineTokens.prototype.findTokenIndexAtOffset = function (offset) {\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\n    };\n    LineTokens.prototype.inflate = function () {\n        return this;\n    };\n    LineTokens.prototype.sliceAndInflate = function (startOffset, endOffset, deltaOffset) {\n        return new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\n    };\n    LineTokens.convertToEndOffset = function (tokens, lineTextLength) {\n        var tokenCount = (tokens.length >>> 1);\n        var lastTokenIndex = tokenCount - 1;\n        for (var tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n        }\n        tokens[lastTokenIndex << 1] = lineTextLength;\n    };\n    LineTokens.findIndexInTokensArray = function (tokens, desiredIndex) {\n        if (tokens.length <= 2) {\n            return 0;\n        }\n        var low = 0;\n        var high = (tokens.length >>> 1) - 1;\n        while (low < high) {\n            var mid = low + Math.floor((high - low) / 2);\n            var endOffset = tokens[(mid << 1)];\n            if (endOffset === desiredIndex) {\n                return mid + 1;\n            }\n            else if (endOffset < desiredIndex) {\n                low = mid + 1;\n            }\n            else if (endOffset > desiredIndex) {\n                high = mid;\n            }\n        }\n        return low;\n    };\n    return LineTokens;\n}());\nexports.LineTokens = LineTokens;\nvar SlicedLineTokens = /** @class */ (function () {\n    function SlicedLineTokens(source, startOffset, endOffset, deltaOffset) {\n        this._source = source;\n        this._startOffset = startOffset;\n        this._endOffset = endOffset;\n        this._deltaOffset = deltaOffset;\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n        this._tokensCount = 0;\n        for (var i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n            var tokenStartOffset = source.getStartOffset(i);\n            if (tokenStartOffset >= endOffset) {\n                break;\n            }\n            this._tokensCount++;\n        }\n    }\n    SlicedLineTokens.prototype.equals = function (other) {\n        if (other instanceof SlicedLineTokens) {\n            return (this._startOffset === other._startOffset\n                && this._endOffset === other._endOffset\n                && this._deltaOffset === other._deltaOffset\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\n        }\n        return false;\n    };\n    SlicedLineTokens.prototype.getCount = function () {\n        return this._tokensCount;\n    };\n    SlicedLineTokens.prototype.getForeground = function (tokenIndex) {\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\n    };\n    SlicedLineTokens.prototype.getEndOffset = function (tokenIndex) {\n        var tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n    };\n    SlicedLineTokens.prototype.getClassName = function (tokenIndex) {\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\n    };\n    SlicedLineTokens.prototype.getInlineStyle = function (tokenIndex, colorMap) {\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n    };\n    SlicedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n    };\n    return SlicedLineTokens;\n}());\nexports.SlicedLineTokens = SlicedLineTokens;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/core/lineTokens.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/core/lineTokens.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorId, LanguageId, StandardTokenType, TokenMetadata } from 'vs/editor/common/modes';\n\nexport interface IViewLineTokens {\n\tequals(other: IViewLineTokens): boolean;\n\tgetCount(): number;\n\tgetForeground(tokenIndex: number): ColorId;\n\tgetEndOffset(tokenIndex: number): number;\n\tgetClassName(tokenIndex: number): string;\n\tgetInlineStyle(tokenIndex: number, colorMap: string[]): string;\n\tfindTokenIndexAtOffset(offset: number): number;\n}\n\nexport class LineTokens implements IViewLineTokens {\n\t_lineTokensBrand: void;\n\n\tprivate readonly _tokens: Uint32Array;\n\tprivate readonly _tokensCount: number;\n\tprivate readonly _text: string;\n\n\tconstructor(tokens: Uint32Array, text: string) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokensCount = (this._tokens.length >>> 1);\n\t\tthis._text = text;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\treturn this.slicedEquals(other, 0, this._tokensCount);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic slicedEquals(other: LineTokens, sliceFromTokenIndex: number, sliceTokenCount: number): boolean {\n\t\tif (this._text !== other._text) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._tokensCount !== other._tokensCount) {\n\t\t\treturn false;\n\t\t}\n\t\tconst from = (sliceFromTokenIndex << 1);\n\t\tconst to = from + (sliceTokenCount << 1);\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStartOffset(tokenIndex: number): number {\n\t\tif (tokenIndex > 0) {\n\t\t\treturn this._tokens[(tokenIndex - 1) << 1];\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): LanguageId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getLanguageId(metadata);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getTokenType(metadata);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getForeground(metadata);\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getClassNameFromMetadata(metadata);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._tokens[tokenIndex << 1];\n\t}\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn LineTokens.findIndexInTokensArray(this._tokens, offset);\n\t}\n\n\tpublic inflate(): IViewLineTokens {\n\t\treturn this;\n\t}\n\n\tpublic sliceAndInflate(startOffset: number, endOffset: number, deltaOffset: number): IViewLineTokens {\n\t\treturn new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\n\t}\n\n\tpublic static convertToEndOffset(tokens: Uint32Array, lineTextLength: number): void {\n\t\tconst tokenCount = (tokens.length >>> 1);\n\t\tconst lastTokenIndex = tokenCount - 1;\n\t\tfor (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n\t\t}\n\t\ttokens[lastTokenIndex << 1] = lineTextLength;\n\t}\n\n\tpublic static findIndexInTokensArray(tokens: Uint32Array, desiredIndex: number): number {\n\t\tif (tokens.length <= 2) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet low = 0;\n\t\tlet high = (tokens.length >>> 1) - 1;\n\n\t\twhile (low < high) {\n\n\t\t\tlet mid = low + Math.floor((high - low) / 2);\n\t\t\tlet endOffset = tokens[(mid << 1)];\n\n\t\t\tif (endOffset === desiredIndex) {\n\t\t\t\treturn mid + 1;\n\t\t\t} else if (endOffset < desiredIndex) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (endOffset > desiredIndex) {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n}\n\nexport class SlicedLineTokens implements IViewLineTokens {\n\n\tprivate readonly _source: LineTokens;\n\tprivate readonly _startOffset: number;\n\tprivate readonly _endOffset: number;\n\tprivate readonly _deltaOffset: number;\n\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _tokensCount: number;\n\n\tconstructor(source: LineTokens, startOffset: number, endOffset: number, deltaOffset: number) {\n\t\tthis._source = source;\n\t\tthis._startOffset = startOffset;\n\t\tthis._endOffset = endOffset;\n\t\tthis._deltaOffset = deltaOffset;\n\t\tthis._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n\n\t\tthis._tokensCount = 0;\n\t\tfor (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n\t\t\tconst tokenStartOffset = source.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._tokensCount++;\n\t\t}\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof SlicedLineTokens) {\n\t\t\treturn (\n\t\t\t\tthis._startOffset === other._startOffset\n\t\t\t\t&& this._endOffset === other._endOffset\n\t\t\t\t&& this._deltaOffset === other._deltaOffset\n\t\t\t\t&& this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._source.getForeground(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\tconst tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n\t\treturn Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._source.getClassName(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n\t}\n}\n"]}]}