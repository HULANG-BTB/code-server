{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/packages/vscode/src/fill/mouseEvent.ts","dependencies":[{"path":"/home/coding/workspace/packages/vscode/src/fill/mouseEvent.ts","mtime":1555841535694},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar mouse = require(\"vs/base/browser/mouseEvent\");\n/**\n * Fix the wheel event for Firefox.\n */\nvar StandardWheelEvent = /** @class */ (function (_super) {\n    tslib_1.__extends(StandardWheelEvent, _super);\n    function StandardWheelEvent(event) {\n        return _super.call(this, event, (-event.deltaX || 0) / 3, // tslint:disable-line no-any\n        (-event.deltaY || 0) / 3) || this;\n    }\n    return StandardWheelEvent;\n}(mouse.StandardWheelEvent));\nvar target = mouse;\ntarget.StandardWheelEvent = StandardWheelEvent;\n",{"version":3,"file":"/home/coding/workspace/packages/vscode/src/fill/mouseEvent.ts","sourceRoot":"","sources":["/home/coding/workspace/packages/vscode/src/fill/mouseEvent.ts"],"names":[],"mappings":";;;AAAA,kDAAoD;AAEpD;;GAEG;AACH;IAAiC,8CAAwB;IACxD,4BAAmB,KAAoC;eACtD,kBACC,KAAK,EACL,CAAC,CAAE,KAAgC,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,6BAA6B;QACnF,CAAC,CAAE,KAAgC,CAAC,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CACpD;IACF,CAAC;IACF,yBAAC;AAAD,CAAC,AARD,CAAiC,KAAK,CAAC,kBAAkB,GAQxD;AAED,IAAM,MAAM,GAAG,KAAqB,CAAC;AACrC,MAAM,CAAC,kBAAkB,GAAG,kBAAkB,CAAC","sourcesContent":["import * as mouse from \"vs/base/browser/mouseEvent\";\n\n/**\n * Fix the wheel event for Firefox.\n */\nclass StandardWheelEvent extends mouse.StandardWheelEvent {\n\tpublic constructor(event: mouse.IMouseWheelEvent | null) {\n\t\tsuper(\n\t\t\tevent,\n\t\t\t(-(event as any as MouseWheelEvent).deltaX || 0) / 3, // tslint:disable-line no-any\n\t\t\t(-(event as any as MouseWheelEvent).deltaY || 0) / 3, // tslint:disable-line no-any\n\t\t);\n\t}\n}\n\nconst target = mouse as typeof mouse;\ntarget.StandardWheelEvent = StandardWheelEvent;\n"]}]}