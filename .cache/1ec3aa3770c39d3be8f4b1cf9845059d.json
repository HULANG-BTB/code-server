{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/format/formatActions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/base/common/arrays\", \"vs/base/common/cancellation\", \"vs/base/common/keyCodes\", \"vs/base/common/lifecycle\", \"vs/editor/browser/editorExtensions\", \"vs/editor/browser/services/codeEditorService\", \"vs/editor/common/core/characterClassifier\", \"vs/editor/common/core/range\", \"vs/editor/common/editorContextKeys\", \"vs/editor/common/modes\", \"vs/editor/common/services/editorWorkerService\", \"vs/editor/contrib/format/format\", \"vs/editor/contrib/format/formattingEdit\", \"vs/nls\", \"vs/platform/commands/common/commands\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/errors\"], function (require, exports, arrays_1, cancellation_1, keyCodes_1, lifecycle_1, editorExtensions_1, codeEditorService_1, characterClassifier_1, range_1, editorContextKeys_1, modes_1, editorWorkerService_1, format_1, formattingEdit_1, nls, commands_1, contextkey_1, keybindingsRegistry_1, instantiation_1, errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let FormatOnType = class FormatOnType {\n        constructor(editor, _workerService) {\n            this._workerService = _workerService;\n            this._callOnDispose = [];\n            this._callOnModel = [];\n            this._editor = editor;\n            this._callOnDispose.push(editor.onDidChangeConfiguration(() => this._update()));\n            this._callOnDispose.push(editor.onDidChangeModel(() => this._update()));\n            this._callOnDispose.push(editor.onDidChangeModelLanguage(() => this._update()));\n            this._callOnDispose.push(modes_1.OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n        }\n        getId() {\n            return FormatOnType.ID;\n        }\n        dispose() {\n            this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n            this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n        }\n        _update() {\n            // clean up\n            this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n            // we are disabled\n            if (!this._editor.getConfiguration().contribInfo.formatOnType) {\n                return;\n            }\n            // no model\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            const model = this._editor.getModel();\n            // no support\n            const [support] = modes_1.OnTypeFormattingEditProviderRegistry.ordered(model);\n            if (!support || !support.autoFormatTriggerCharacters) {\n                return;\n            }\n            // register typing listeners that will trigger the format\n            let triggerChars = new characterClassifier_1.CharacterSet();\n            for (let ch of support.autoFormatTriggerCharacters) {\n                triggerChars.add(ch.charCodeAt(0));\n            }\n            this._callOnModel.push(this._editor.onDidType((text) => {\n                let lastCharCode = text.charCodeAt(text.length - 1);\n                if (triggerChars.has(lastCharCode)) {\n                    this._trigger(String.fromCharCode(lastCharCode));\n                }\n            }));\n        }\n        _trigger(ch) {\n            if (!this._editor.hasModel()) {\n                return;\n            }\n            if (this._editor.getSelections().length > 1) {\n                return;\n            }\n            const model = this._editor.getModel();\n            const position = this._editor.getPosition();\n            let canceled = false;\n            // install a listener that checks if edits happens before the\n            // position on which we format right now. If so, we won't\n            // apply the format edits\n            const unbind = this._editor.onDidChangeModelContent((e) => {\n                if (e.isFlush) {\n                    // a model.setValue() was called\n                    // cancel only once\n                    canceled = true;\n                    unbind.dispose();\n                    return;\n                }\n                for (let i = 0, len = e.changes.length; i < len; i++) {\n                    const change = e.changes[i];\n                    if (change.range.endLineNumber <= position.lineNumber) {\n                        // cancel only once\n                        canceled = true;\n                        unbind.dispose();\n                        return;\n                    }\n                }\n            });\n            format_1.getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(edits => {\n                unbind.dispose();\n                if (canceled) {\n                    return;\n                }\n                if (arrays_1.isNonEmptyArray(edits)) {\n                    formattingEdit_1.FormattingEdit.execute(this._editor, edits);\n                    format_1.alertFormattingEdits(edits);\n                }\n            }, (err) => {\n                unbind.dispose();\n                throw err;\n            });\n        }\n    };\n    FormatOnType.ID = 'editor.contrib.autoFormat';\n    FormatOnType = __decorate([\n        __param(1, editorWorkerService_1.IEditorWorkerService)\n    ], FormatOnType);\n    let FormatOnPaste = class FormatOnPaste {\n        constructor(editor, _instantiationService) {\n            this.editor = editor;\n            this._instantiationService = _instantiationService;\n            this._callOnDispose = [];\n            this._callOnModel = [];\n            this._callOnDispose.push(editor.onDidChangeConfiguration(() => this._update()));\n            this._callOnDispose.push(editor.onDidChangeModel(() => this._update()));\n            this._callOnDispose.push(editor.onDidChangeModelLanguage(() => this._update()));\n            this._callOnDispose.push(modes_1.DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n        }\n        getId() {\n            return FormatOnPaste.ID;\n        }\n        dispose() {\n            this._callOnDispose = lifecycle_1.dispose(this._callOnDispose);\n            this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n        }\n        _update() {\n            // clean up\n            this._callOnModel = lifecycle_1.dispose(this._callOnModel);\n            // we are disabled\n            if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {\n                return;\n            }\n            // no model\n            if (!this.editor.hasModel()) {\n                return;\n            }\n            // no formatter\n            if (!modes_1.DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n                return;\n            }\n            this._callOnModel.push(this.editor.onDidPaste(range => this._trigger(range)));\n        }\n        _trigger(range) {\n            if (!this.editor.hasModel()) {\n                return;\n            }\n            if (this.editor.getSelections().length > 1) {\n                return;\n            }\n            this._instantiationService.invokeFunction(format_1.formatDocumentRangeWithSelectedProvider, this.editor, range, format_1.FormattingMode.Silent, cancellation_1.CancellationToken.None).catch(errors_1.onUnexpectedError);\n        }\n    };\n    FormatOnPaste.ID = 'editor.contrib.formatOnPaste';\n    FormatOnPaste = __decorate([\n        __param(1, instantiation_1.IInstantiationService)\n    ], FormatOnPaste);\n    class FormatDocumentAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.formatDocument',\n                label: nls.localize('formatDocument.label', \"Format Document\"),\n                alias: 'Format Document',\n                precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider),\n                kbOpts: {\n                    kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider),\n                    primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_F,\n                    linux: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_I },\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menuOpts: {\n                    when: editorContextKeys_1.EditorContextKeys.hasDocumentFormattingProvider,\n                    group: '1_modification',\n                    order: 1.3\n                }\n            });\n        }\n        run(accessor, editor) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (editor.hasModel()) {\n                    const instaService = accessor.get(instantiation_1.IInstantiationService);\n                    yield instaService.invokeFunction(format_1.formatDocumentWithSelectedProvider, editor, format_1.FormattingMode.Explicit, cancellation_1.CancellationToken.None);\n                }\n            });\n        }\n    }\n    class FormatSelectionAction extends editorExtensions_1.EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.formatSelection',\n                label: nls.localize('formatSelection.label', \"Format Selection\"),\n                alias: 'Format Code',\n                precondition: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.writable, editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider),\n                kbOpts: {\n                    kbExpr: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.editorTextFocus, editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider),\n                    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F),\n                    weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n                },\n                menuOpts: {\n                    when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.hasDocumentSelectionFormattingProvider, editorContextKeys_1.EditorContextKeys.hasNonEmptySelection),\n                    group: '1_modification',\n                    order: 1.31\n                }\n            });\n        }\n        run(accessor, editor) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!editor.hasModel()) {\n                    return;\n                }\n                const instaService = accessor.get(instantiation_1.IInstantiationService);\n                const model = editor.getModel();\n                let range = editor.getSelection();\n                if (range.isEmpty()) {\n                    range = new range_1.Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n                }\n                yield instaService.invokeFunction(format_1.formatDocumentRangeWithSelectedProvider, editor, range, format_1.FormattingMode.Explicit, cancellation_1.CancellationToken.None);\n            });\n        }\n    }\n    editorExtensions_1.registerEditorContribution(FormatOnType);\n    editorExtensions_1.registerEditorContribution(FormatOnPaste);\n    editorExtensions_1.registerEditorAction(FormatDocumentAction);\n    editorExtensions_1.registerEditorAction(FormatSelectionAction);\n    // this is the old format action that does both (format document OR format selection)\n    // and we keep it here such that existing keybinding configurations etc will still work\n    commands_1.CommandsRegistry.registerCommand('editor.action.format', (accessor) => __awaiter(this, void 0, void 0, function* () {\n        const editor = accessor.get(codeEditorService_1.ICodeEditorService).getFocusedCodeEditor();\n        if (!editor || !editor.hasModel()) {\n            return;\n        }\n        const commandService = accessor.get(commands_1.ICommandService);\n        if (editor.getSelection().isEmpty()) {\n            yield commandService.executeCommand('editor.action.formatDocument');\n        }\n        else {\n            yield commandService.executeCommand('editor.action.formatSelection');\n        }\n    }));\n});\n",null]}