{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = require(\"vs/base/common/buffer\");\nvar MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"Initialized\"] = 0] = \"Initialized\";\n    MessageType[MessageType[\"Ready\"] = 1] = \"Ready\";\n    MessageType[MessageType[\"Terminate\"] = 2] = \"Terminate\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\nfunction createMessageOfType(type) {\n    var result = buffer_1.VSBuffer.alloc(1);\n    switch (type) {\n        case MessageType.Initialized:\n            result.writeUint8(1, 0);\n            break;\n        case MessageType.Ready:\n            result.writeUint8(2, 0);\n            break;\n        case MessageType.Terminate:\n            result.writeUint8(3, 0);\n            break;\n    }\n    return result;\n}\nexports.createMessageOfType = createMessageOfType;\nfunction isMessageOfType(message, type) {\n    if (message.byteLength !== 1) {\n        return false;\n    }\n    switch (message.readUint8(0)) {\n        case 1: return type === MessageType.Initialized;\n        case 2: return type === MessageType.Ready;\n        case 3: return type === MessageType.Terminate;\n        default: return false;\n    }\n}\nexports.isMessageOfType = isMessageOfType;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/services/extensions/node/extensionHostProtocol.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gDAAiD;AAWjD,IAAkB,WAIjB;AAJD,WAAkB,WAAW;IAC5B,2DAAW,CAAA;IACX,+CAAK,CAAA;IACL,uDAAS,CAAA;AACV,CAAC,EAJiB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAI5B;AAED,SAAgB,mBAAmB,CAAC,IAAiB;IACpD,IAAM,MAAM,GAAG,iBAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEjC,QAAQ,IAAI,EAAE;QACb,KAAK,WAAW,CAAC,WAAW;YAAE,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM;QAC7D,KAAK,WAAW,CAAC,KAAK;YAAE,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM;QACvD,KAAK,WAAW,CAAC,SAAS;YAAE,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM;KAC3D;IAED,OAAO,MAAM,CAAC;AACf,CAAC;AAVD,kDAUC;AAED,SAAgB,eAAe,CAAC,OAAiB,EAAE,IAAiB;IACnE,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;QAC7B,OAAO,KAAK,CAAC;KACb;IAED,QAAQ,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;QAC7B,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,WAAW,CAAC;QAChD,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,KAAK,CAAC;QAC1C,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,SAAS,CAAC;QAC9C,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;KACtB;AACF,CAAC;AAXD,0CAWC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport interface IExtHostReadyMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_READY';\n}\n\nexport interface IExtHostSocketMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_SOCKET';\n\tinitialDataChunk: string;\n}\n\nexport const enum MessageType {\n\tInitialized,\n\tReady,\n\tTerminate\n}\n\nexport function createMessageOfType(type: MessageType): VSBuffer {\n\tconst result = VSBuffer.alloc(1);\n\n\tswitch (type) {\n\t\tcase MessageType.Initialized: result.writeUint8(1, 0); break;\n\t\tcase MessageType.Ready: result.writeUint8(2, 0); break;\n\t\tcase MessageType.Terminate: result.writeUint8(3, 0); break;\n\t}\n\n\treturn result;\n}\n\nexport function isMessageOfType(message: VSBuffer, type: MessageType): boolean {\n\tif (message.byteLength !== 1) {\n\t\treturn false;\n\t}\n\n\tswitch (message.readUint8(0)) {\n\t\tcase 1: return type === MessageType.Initialized;\n\t\tcase 2: return type === MessageType.Ready;\n\t\tcase 3: return type === MessageType.Terminate;\n\t\tdefault: return false;\n\t}\n}"]}]}