{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/dataUriEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/dataUriEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar binaryEditorModel_1 = require(\"vs/workbench/common/editor/binaryEditorModel\");\nvar resources_1 = require(\"vs/base/common/resources\");\nvar types_1 = require(\"vs/base/common/types\");\n/**\n * An editor input to present data URIs in a binary editor. Data URIs have the form of:\n * data:[mime type];[meta data <key=value>;...];base64,[base64 encoded value]\n */\nvar DataUriEditorInput = /** @class */ (function (_super) {\n    tslib_1.__extends(DataUriEditorInput, _super);\n    function DataUriEditorInput(name, description, resource, instantiationService) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this.description = description;\n        _this.resource = resource;\n        _this.instantiationService = instantiationService;\n        _this.name = name;\n        _this.description = description;\n        _this.resource = resource;\n        if (!_this.name || !_this.description) {\n            var metadata = resources_1.DataUri.parseMetaData(_this.resource);\n            if (!_this.name) {\n                _this.name = metadata.get(resources_1.DataUri.META_DATA_LABEL);\n            }\n            if (!_this.description) {\n                _this.description = metadata.get(resources_1.DataUri.META_DATA_DESCRIPTION);\n            }\n        }\n        return _this;\n    }\n    DataUriEditorInput.prototype.getResource = function () {\n        return this.resource;\n    };\n    DataUriEditorInput.prototype.getTypeId = function () {\n        return DataUriEditorInput.ID;\n    };\n    DataUriEditorInput.prototype.getName = function () {\n        return types_1.withUndefinedAsNull(this.name);\n    };\n    DataUriEditorInput.prototype.getDescription = function () {\n        return types_1.withUndefinedAsNull(this.description);\n    };\n    DataUriEditorInput.prototype.resolve = function () {\n        return this.instantiationService.createInstance(binaryEditorModel_1.BinaryEditorModel, this.resource, this.getName()).load().then(function (m) { return m; });\n    };\n    DataUriEditorInput.prototype.matches = function (otherInput) {\n        if (_super.prototype.matches.call(this, otherInput) === true) {\n            return true;\n        }\n        if (otherInput instanceof DataUriEditorInput) {\n            var otherDataUriEditorInput = otherInput;\n            // Compare by resource\n            return otherDataUriEditorInput.resource.toString() === this.resource.toString();\n        }\n        return false;\n    };\n    DataUriEditorInput.ID = 'workbench.editors.dataUriEditorInput';\n    DataUriEditorInput = tslib_1.__decorate([\n        tslib_1.__param(3, instantiation_1.IInstantiationService)\n    ], DataUriEditorInput);\n    return DataUriEditorInput;\n}(editor_1.EditorInput));\nexports.DataUriEditorInput = DataUriEditorInput;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/dataUriEditorInput.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/dataUriEditorInput.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,qDAAyD;AAEzD,gFAAuF;AACvF,kFAAiF;AACjF,sDAAmD;AACnD,8CAA2D;AAE3D;;;GAGG;AACH;IAAwC,8CAAW;IAIlD,4BACkB,IAAwB,EACxB,WAA+B,EAC/B,QAAa,EACU,oBAA2C;QAJpF,YAMC,iBAAO,SAiBP;QAtBiB,UAAI,GAAJ,IAAI,CAAoB;QACxB,iBAAW,GAAX,WAAW,CAAoB;QAC/B,cAAQ,GAAR,QAAQ,CAAK;QACU,0BAAoB,GAApB,oBAAoB,CAAuB;QAInF,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,KAAI,CAAC,IAAI,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE;YACpC,IAAM,QAAQ,GAAG,mBAAO,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;YAEtD,IAAI,CAAC,KAAI,CAAC,IAAI,EAAE;gBACf,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAO,CAAC,eAAe,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,KAAI,CAAC,WAAW,EAAE;gBACtB,KAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAO,CAAC,qBAAqB,CAAC,CAAC;aAC/D;SACD;;IACF,CAAC;IAED,wCAAW,GAAX;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED,sCAAS,GAAT;QACC,OAAO,kBAAkB,CAAC,EAAE,CAAC;IAC9B,CAAC;IAED,oCAAO,GAAP;QACC,OAAO,2BAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,2CAAc,GAAd;QACC,OAAO,2BAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED,oCAAO,GAAP;QACC,OAAO,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,qCAAiB,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAsB,EAAtB,CAAsB,CAAC,CAAC;IAC5I,CAAC;IAED,oCAAO,GAAP,UAAQ,UAAe;QACtB,IAAI,iBAAM,OAAO,YAAC,UAAU,CAAC,KAAK,IAAI,EAAE;YACvC,OAAO,IAAI,CAAC;SACZ;QAED,IAAI,UAAU,YAAY,kBAAkB,EAAE;YAC7C,IAAM,uBAAuB,GAAuB,UAAU,CAAC;YAE/D,sBAAsB;YACtB,OAAO,uBAAuB,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;SAChF;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IA5De,qBAAE,GAAW,sCAAsC,CAAC;IAFxD,kBAAkB;QAQ5B,mBAAA,qCAAqB,CAAA;OARX,kBAAkB,CA+D9B;IAAD,yBAAC;CAAA,AA/DD,CAAwC,oBAAW,GA+DlD;AA/DY,gDAAkB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorInput } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { DataUri } from 'vs/base/common/resources';\nimport { withUndefinedAsNull } from 'vs/base/common/types';\n\n/**\n * An editor input to present data URIs in a binary editor. Data URIs have the form of:\n * data:[mime type];[meta data <key=value>;...];base64,[base64 encoded value]\n */\nexport class DataUriEditorInput extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.editors.dataUriEditorInput';\n\n\tconstructor(\n\t\tprivate readonly name: string | undefined,\n\t\tprivate readonly description: string | undefined,\n\t\tprivate readonly resource: URI,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t\tthis.resource = resource;\n\n\t\tif (!this.name || !this.description) {\n\t\t\tconst metadata = DataUri.parseMetaData(this.resource);\n\n\t\t\tif (!this.name) {\n\t\t\t\tthis.name = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\t}\n\n\t\t\tif (!this.description) {\n\t\t\t\tthis.description = metadata.get(DataUri.META_DATA_DESCRIPTION);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetResource(): URI {\n\t\treturn this.resource;\n\t}\n\n\tgetTypeId(): string {\n\t\treturn DataUriEditorInput.ID;\n\t}\n\n\tgetName(): string | null {\n\t\treturn withUndefinedAsNull(this.name);\n\t}\n\n\tgetDescription(): string | null {\n\t\treturn withUndefinedAsNull(this.description);\n\t}\n\n\tresolve(): Promise<BinaryEditorModel> {\n\t\treturn this.instantiationService.createInstance(BinaryEditorModel, this.resource, this.getName()).load().then(m => m as BinaryEditorModel);\n\t}\n\n\tmatches(otherInput: any): boolean {\n\t\tif (super.matches(otherInput) === true) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof DataUriEditorInput) {\n\t\t\tconst otherDataUriEditorInput = <DataUriEditorInput>otherInput;\n\n\t\t\t// Compare by resource\n\t\t\treturn otherDataUriEditorInput.resource.toString() === this.resource.toString();\n\t\t}\n\n\t\treturn false;\n\t}\n}\n"]}]}