{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/telemetry/node/telemetryIpc.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class TelemetryAppenderChannel {\n        constructor(appender) {\n            this.appender = appender;\n        }\n        listen(_, event) {\n            throw new Error(`Event not found: ${event}`);\n        }\n        call(_, command, { eventName, data }) {\n            this.appender.log(eventName, data);\n            return Promise.resolve(null);\n        }\n    }\n    exports.TelemetryAppenderChannel = TelemetryAppenderChannel;\n    class TelemetryAppenderClient {\n        constructor(channel) {\n            this.channel = channel;\n        }\n        log(eventName, data) {\n            this.channel.call('log', { eventName, data })\n                .then(undefined, err => `Failed to log telemetry: ${console.warn(err)}`);\n            return Promise.resolve(null);\n        }\n        dispose() {\n            // TODO\n        }\n    }\n    exports.TelemetryAppenderClient = TelemetryAppenderClient;\n});\n",null]}