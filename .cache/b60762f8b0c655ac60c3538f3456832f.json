{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/viewsExtensionPoint.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/viewsExtensionPoint.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls_1 = require(\"vs/nls\");\nvar collections_1 = require(\"vs/base/common/collections\");\nvar resources = require(\"vs/base/common/resources\");\nvar extensionsRegistry_1 = require(\"vs/workbench/services/extensions/common/extensionsRegistry\");\nvar views_1 = require(\"vs/workbench/common/views\");\nvar customView_1 = require(\"vs/workbench/browser/parts/views/customView\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar scm_1 = require(\"vs/workbench/contrib/scm/common/scm\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar extensions_1 = require(\"vs/platform/extensions/common/extensions\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar viewsViewlet_1 = require(\"vs/workbench/browser/parts/views/viewsViewlet\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar viewlet_2 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar actions_1 = require(\"vs/workbench/common/actions\");\nvar actions_2 = require(\"vs/platform/actions/common/actions\");\nvar dom_1 = require(\"vs/base/browser/dom\");\nvar viewsContainerSchema = {\n    type: 'object',\n    properties: {\n        id: {\n            description: nls_1.localize({ key: 'vscode.extension.contributes.views.containers.id', comment: ['Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. '] }, \"Unique id used to identify the container in which views can be contributed using 'views' contribution point\"),\n            type: 'string',\n            pattern: '^[a-zA-Z0-9_-]+$'\n        },\n        title: {\n            description: nls_1.localize('vscode.extension.contributes.views.containers.title', 'Human readable string used to render the container'),\n            type: 'string'\n        },\n        icon: {\n            description: nls_1.localize('vscode.extension.contributes.views.containers.icon', \"Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted.\"),\n            type: 'string'\n        }\n    }\n};\nexports.viewsContainersContribution = {\n    description: nls_1.localize('vscode.extension.contributes.viewsContainers', 'Contributes views containers to the editor'),\n    type: 'object',\n    properties: {\n        'activitybar': {\n            description: nls_1.localize('views.container.activitybar', \"Contribute views containers to Activity Bar\"),\n            type: 'array',\n            items: viewsContainerSchema\n        }\n    }\n};\nvar viewDescriptor = {\n    type: 'object',\n    properties: {\n        id: {\n            description: nls_1.localize('vscode.extension.contributes.view.id', 'Identifier of the view. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),\n            type: 'string'\n        },\n        name: {\n            description: nls_1.localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),\n            type: 'string'\n        },\n        when: {\n            description: nls_1.localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),\n            type: 'string'\n        },\n    }\n};\nvar viewsContribution = {\n    description: nls_1.localize('vscode.extension.contributes.views', \"Contributes views to the editor\"),\n    type: 'object',\n    properties: {\n        'explorer': {\n            description: nls_1.localize('views.explorer', \"Contributes views to Explorer container in the Activity bar\"),\n            type: 'array',\n            items: viewDescriptor,\n            default: []\n        },\n        'debug': {\n            description: nls_1.localize('views.debug', \"Contributes views to Debug container in the Activity bar\"),\n            type: 'array',\n            items: viewDescriptor,\n            default: []\n        },\n        'scm': {\n            description: nls_1.localize('views.scm', \"Contributes views to SCM container in the Activity bar\"),\n            type: 'array',\n            items: viewDescriptor,\n            default: []\n        },\n        'test': {\n            description: nls_1.localize('views.test', \"Contributes views to Test container in the Activity bar\"),\n            type: 'array',\n            items: viewDescriptor,\n            default: []\n        }\n    },\n    additionalProperties: {\n        description: nls_1.localize('views.contributed', \"Contributes views to contributed views container\"),\n        type: 'array',\n        items: viewDescriptor,\n        default: []\n    }\n};\nvar viewsContainersExtensionPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'viewsContainers',\n    jsonSchema: exports.viewsContainersContribution\n});\nvar viewsExtensionPoint = extensionsRegistry_1.ExtensionsRegistry.registerExtensionPoint({\n    extensionPoint: 'views',\n    deps: [viewsContainersExtensionPoint],\n    jsonSchema: viewsContribution\n});\nvar TEST_VIEW_CONTAINER_ORDER = 6;\nvar ViewsExtensionHandler = /** @class */ (function () {\n    function ViewsExtensionHandler(instantiationService) {\n        this.instantiationService = instantiationService;\n        this.viewContainersRegistry = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry);\n        this.viewsRegistry = platform_1.Registry.as(views_1.Extensions.ViewsRegistry);\n        this.handleAndRegisterCustomViewContainers();\n        this.handleAndRegisterCustomViews();\n    }\n    ViewsExtensionHandler.prototype.handleAndRegisterCustomViewContainers = function () {\n        var _this = this;\n        this.registerTestViewContainer();\n        viewsContainersExtensionPoint.setHandler(function (extensions, _a) {\n            var added = _a.added, removed = _a.removed;\n            if (removed.length) {\n                _this.removeCustomViewContainers(removed);\n            }\n            if (added.length) {\n                _this.addCustomViewContainers(added, _this.viewContainersRegistry.all);\n            }\n        });\n    };\n    ViewsExtensionHandler.prototype.addCustomViewContainers = function (extensionPoints, existingViewContainers) {\n        var _this = this;\n        var viewContainersRegistry = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry);\n        var order = TEST_VIEW_CONTAINER_ORDER + viewContainersRegistry.all.filter(function (v) { return !!v.extensionId; }).length + 1;\n        var _loop_1 = function (value, collector, description) {\n            collections_1.forEach(value, function (entry) {\n                if (!_this.isValidViewsContainer(entry.value, collector)) {\n                    return;\n                }\n                switch (entry.key) {\n                    case 'activitybar':\n                        order = _this.registerCustomViewContainers(entry.value, description, order, existingViewContainers);\n                        break;\n                }\n            });\n        };\n        for (var _i = 0, extensionPoints_1 = extensionPoints; _i < extensionPoints_1.length; _i++) {\n            var _a = extensionPoints_1[_i], value = _a.value, collector = _a.collector, description = _a.description;\n            _loop_1(value, collector, description);\n        }\n    };\n    ViewsExtensionHandler.prototype.removeCustomViewContainers = function (extensionPoints) {\n        var viewContainersRegistry = platform_1.Registry.as(views_1.Extensions.ViewContainersRegistry);\n        var removedExtensions = extensionPoints.reduce(function (result, e) { result.add(extensions_1.ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set());\n        for (var _i = 0, _a = viewContainersRegistry.all; _i < _a.length; _i++) {\n            var viewContainer = _a[_i];\n            if (viewContainer.extensionId && removedExtensions.has(extensions_1.ExtensionIdentifier.toKey(viewContainer.extensionId))) {\n                // move only those views that do not belong to the removed extension\n                var views = this.viewsRegistry.getViews(viewContainer).filter(function (view) { return !removedExtensions.has(extensions_1.ExtensionIdentifier.toKey(view.extensionId)); });\n                if (views.length) {\n                    this.viewsRegistry.moveViews(views, this.getDefaultViewContainer());\n                }\n                this.deregisterCustomViewContainer(viewContainer);\n            }\n        }\n    };\n    ViewsExtensionHandler.prototype.registerTestViewContainer = function () {\n        var title = nls_1.localize('test', \"Test\");\n        var cssClass = \"extensionViewlet-test\";\n        var icon = uri_1.URI.parse(require.toUrl('./media/test.svg'));\n        this.registerCustomViewContainer(views_1.TEST_VIEW_CONTAINER_ID, title, icon, TEST_VIEW_CONTAINER_ORDER, cssClass, undefined);\n    };\n    ViewsExtensionHandler.prototype.isValidViewsContainer = function (viewsContainersDescriptors, collector) {\n        if (!Array.isArray(viewsContainersDescriptors)) {\n            collector.error(nls_1.localize('viewcontainer requirearray', \"views containers must be an array\"));\n            return false;\n        }\n        for (var _i = 0, viewsContainersDescriptors_1 = viewsContainersDescriptors; _i < viewsContainersDescriptors_1.length; _i++) {\n            var descriptor = viewsContainersDescriptors_1[_i];\n            if (typeof descriptor.id !== 'string') {\n                collector.error(nls_1.localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n                return false;\n            }\n            if (!(/^[a-z0-9_-]+$/i.test(descriptor.id))) {\n                collector.error(nls_1.localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n                return false;\n            }\n            if (typeof descriptor.title !== 'string') {\n                collector.error(nls_1.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'title'));\n                return false;\n            }\n            if (typeof descriptor.icon !== 'string') {\n                collector.error(nls_1.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'icon'));\n                return false;\n            }\n        }\n        return true;\n    };\n    ViewsExtensionHandler.prototype.registerCustomViewContainers = function (containers, extension, order, existingViewContainers) {\n        var _this = this;\n        containers.forEach(function (descriptor) {\n            var cssClass = \"extensionViewlet-\" + descriptor.id;\n            var icon = resources.joinPath(extension.extensionLocation, descriptor.icon);\n            var id = \"workbench.view.extension.\" + descriptor.id;\n            var viewContainer = _this.registerCustomViewContainer(id, descriptor.title, icon, order++, cssClass, extension.identifier);\n            // Move those views that belongs to this container\n            if (existingViewContainers.length) {\n                var viewsToMove = [];\n                for (var _i = 0, existingViewContainers_1 = existingViewContainers; _i < existingViewContainers_1.length; _i++) {\n                    var existingViewContainer = existingViewContainers_1[_i];\n                    if (viewContainer !== existingViewContainer) {\n                        viewsToMove.push.apply(viewsToMove, _this.viewsRegistry.getViews(existingViewContainer).filter(function (view) { return view.originalContainerId === descriptor.id; }));\n                    }\n                }\n                if (viewsToMove.length) {\n                    _this.viewsRegistry.moveViews(viewsToMove, viewContainer);\n                }\n            }\n        });\n        return order;\n    };\n    ViewsExtensionHandler.prototype.registerCustomViewContainer = function (id, title, icon, order, cssClass, extensionId) {\n        var viewContainer = this.viewContainersRegistry.get(id);\n        if (!viewContainer) {\n            viewContainer = this.viewContainersRegistry.registerViewContainer(id, true, extensionId);\n            // Register as viewlet\n            var CustomViewlet = /** @class */ (function (_super) {\n                tslib_1.__extends(CustomViewlet, _super);\n                function CustomViewlet(configurationService, layoutService, telemetryService, contextService, storageService, editorService, instantiationService, themeService, contextMenuService, extensionService) {\n                    return _super.call(this, id, id + \".state\", true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService) || this;\n                }\n                CustomViewlet = tslib_1.__decorate([\n                    tslib_1.__param(0, configuration_1.IConfigurationService),\n                    tslib_1.__param(1, layoutService_1.IWorkbenchLayoutService),\n                    tslib_1.__param(2, telemetry_1.ITelemetryService),\n                    tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n                    tslib_1.__param(4, storage_1.IStorageService),\n                    tslib_1.__param(5, editorService_1.IEditorService),\n                    tslib_1.__param(6, instantiation_1.IInstantiationService),\n                    tslib_1.__param(7, themeService_1.IThemeService),\n                    tslib_1.__param(8, contextView_1.IContextMenuService),\n                    tslib_1.__param(9, extensions_2.IExtensionService)\n                ], CustomViewlet);\n                return CustomViewlet;\n            }(viewsViewlet_1.ViewContainerViewlet));\n            var viewletDescriptor = new viewlet_1.ViewletDescriptor(CustomViewlet, id, title, cssClass, order, icon);\n            platform_1.Registry.as(viewlet_1.Extensions.Viewlets).registerViewlet(viewletDescriptor);\n            // Register Action to Open Viewlet\n            var OpenCustomViewletAction = /** @class */ (function (_super) {\n                tslib_1.__extends(OpenCustomViewletAction, _super);\n                function OpenCustomViewletAction(id, label, viewletService, editorGroupService, layoutService) {\n                    return _super.call(this, id, label, id, viewletService, editorGroupService, layoutService) || this;\n                }\n                OpenCustomViewletAction = tslib_1.__decorate([\n                    tslib_1.__param(2, viewlet_2.IViewletService),\n                    tslib_1.__param(3, editorGroupsService_1.IEditorGroupsService),\n                    tslib_1.__param(4, layoutService_1.IWorkbenchLayoutService)\n                ], OpenCustomViewletAction);\n                return OpenCustomViewletAction;\n            }(viewlet_1.ShowViewletAction));\n            var registry = platform_1.Registry.as(actions_1.Extensions.WorkbenchActions);\n            registry.registerWorkbenchAction(new actions_2.SyncActionDescriptor(OpenCustomViewletAction, id, nls_1.localize('showViewlet', \"Show {0}\", title)), 'View: Show {0}', nls_1.localize('view', \"View\"));\n            // Generate CSS to show the icon in the activity bar\n            var iconClass = \".monaco-workbench .activitybar .monaco-action-bar .action-label.\" + cssClass;\n            dom_1.createCSSRule(iconClass, \"-webkit-mask: url('\" + icon + \"') no-repeat 50% 50%\");\n        }\n        return viewContainer;\n    };\n    ViewsExtensionHandler.prototype.deregisterCustomViewContainer = function (viewContainer) {\n        this.viewContainersRegistry.deregisterViewContainer(viewContainer);\n        platform_1.Registry.as(viewlet_1.Extensions.Viewlets).deregisterViewlet(viewContainer.id);\n    };\n    ViewsExtensionHandler.prototype.handleAndRegisterCustomViews = function () {\n        var _this = this;\n        viewsExtensionPoint.setHandler(function (extensions, _a) {\n            var added = _a.added, removed = _a.removed;\n            if (removed.length) {\n                _this.removeViews(removed);\n            }\n            if (added.length) {\n                _this.addViews(added);\n            }\n        });\n    };\n    ViewsExtensionHandler.prototype.addViews = function (extensions) {\n        var _this = this;\n        var _loop_2 = function (extension) {\n            var value = extension.value, collector = extension.collector;\n            collections_1.forEach(value, function (entry) {\n                if (!_this.isValidViewDescriptors(entry.value, collector)) {\n                    return;\n                }\n                var viewContainer = _this.getViewContainer(entry.key);\n                if (!viewContainer) {\n                    collector.warn(nls_1.localize('ViewContainerDoesnotExist', \"View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.\", entry.key));\n                }\n                var container = viewContainer || _this.getDefaultViewContainer();\n                var registeredViews = _this.viewsRegistry.getViews(container);\n                var viewIds = [];\n                var viewDescriptors = arrays_1.coalesce(entry.value.map(function (item, index) {\n                    // validate\n                    if (viewIds.indexOf(item.id) !== -1) {\n                        collector.error(nls_1.localize('duplicateView1', \"Cannot register multiple views with same id `{0}` in the view container `{1}`\", item.id, container.id));\n                        return null;\n                    }\n                    if (registeredViews.some(function (v) { return v.id === item.id; })) {\n                        collector.error(nls_1.localize('duplicateView2', \"A view with id `{0}` is already registered in the view container `{1}`\", item.id, container.id));\n                        return null;\n                    }\n                    var viewDescriptor = {\n                        id: item.id,\n                        name: item.name,\n                        ctorDescriptor: { ctor: customView_1.CustomTreeViewPanel },\n                        when: contextkey_1.ContextKeyExpr.deserialize(item.when),\n                        canToggleVisibility: true,\n                        collapsed: _this.showCollapsed(container),\n                        treeView: _this.instantiationService.createInstance(customView_1.CustomTreeView, item.id, container),\n                        order: extensions_1.ExtensionIdentifier.equals(extension.description.identifier, container.extensionId) ? index + 1 : undefined,\n                        extensionId: extension.description.identifier,\n                        originalContainerId: entry.key\n                    };\n                    viewIds.push(viewDescriptor.id);\n                    return viewDescriptor;\n                }));\n                _this.viewsRegistry.registerViews(viewDescriptors, container);\n            });\n        };\n        for (var _i = 0, extensions_3 = extensions; _i < extensions_3.length; _i++) {\n            var extension = extensions_3[_i];\n            _loop_2(extension);\n        }\n    };\n    ViewsExtensionHandler.prototype.getDefaultViewContainer = function () {\n        return this.viewContainersRegistry.get(files_1.VIEWLET_ID);\n    };\n    ViewsExtensionHandler.prototype.removeViews = function (extensions) {\n        var removedExtensions = extensions.reduce(function (result, e) { result.add(extensions_1.ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set());\n        for (var _i = 0, _a = this.viewContainersRegistry.all; _i < _a.length; _i++) {\n            var viewContainer = _a[_i];\n            var removedViews = this.viewsRegistry.getViews(viewContainer).filter(function (v) { return v.extensionId && removedExtensions.has(extensions_1.ExtensionIdentifier.toKey(v.extensionId)); });\n            if (removedViews.length) {\n                this.viewsRegistry.deregisterViews(removedViews, viewContainer);\n            }\n        }\n    };\n    ViewsExtensionHandler.prototype.isValidViewDescriptors = function (viewDescriptors, collector) {\n        if (!Array.isArray(viewDescriptors)) {\n            collector.error(nls_1.localize('requirearray', \"views must be an array\"));\n            return false;\n        }\n        for (var _i = 0, viewDescriptors_1 = viewDescriptors; _i < viewDescriptors_1.length; _i++) {\n            var descriptor = viewDescriptors_1[_i];\n            if (typeof descriptor.id !== 'string') {\n                collector.error(nls_1.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n                return false;\n            }\n            if (typeof descriptor.name !== 'string') {\n                collector.error(nls_1.localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'name'));\n                return false;\n            }\n            if (descriptor.when && typeof descriptor.when !== 'string') {\n                collector.error(nls_1.localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n                return false;\n            }\n        }\n        return true;\n    };\n    ViewsExtensionHandler.prototype.getViewContainer = function (value) {\n        switch (value) {\n            case 'explorer': return this.viewContainersRegistry.get(files_1.VIEWLET_ID);\n            case 'debug': return this.viewContainersRegistry.get(debug_1.VIEWLET_ID);\n            case 'scm': return this.viewContainersRegistry.get(scm_1.VIEWLET_ID);\n            default: return this.viewContainersRegistry.get(\"workbench.view.extension.\" + value);\n        }\n    };\n    ViewsExtensionHandler.prototype.showCollapsed = function (container) {\n        switch (container.id) {\n            case files_1.VIEWLET_ID:\n            case scm_1.VIEWLET_ID:\n            case debug_1.VIEWLET_ID:\n                return true;\n        }\n        return false;\n    };\n    ViewsExtensionHandler = tslib_1.__decorate([\n        tslib_1.__param(0, instantiation_1.IInstantiationService)\n    ], ViewsExtensionHandler);\n    return ViewsExtensionHandler;\n}());\nvar workbenchRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ViewsExtensionHandler, lifecycle_1.LifecyclePhase.Starting);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/viewsExtensionPoint.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/viewsExtensionPoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { forEach } from 'vs/base/common/collections';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as resources from 'vs/base/common/resources';\nimport { ExtensionMessageCollector, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ViewContainer, IViewsRegistry, ITreeViewDescriptor, IViewContainersRegistry, Extensions as ViewContainerExtensions, TEST_VIEW_CONTAINER_ID, IViewDescriptor } from 'vs/workbench/common/views';\nimport { CustomTreeViewPanel, CustomTreeView } from 'vs/workbench/browser/parts/views/customView';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { coalesce, } from 'vs/base/common/arrays';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { VIEWLET_ID as EXPLORER } from 'vs/workbench/contrib/files/common/files';\nimport { VIEWLET_ID as SCM } from 'vs/workbench/contrib/scm/common/scm';\nimport { VIEWLET_ID as DEBUG } from 'vs/workbench/contrib/debug/common/debug';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { ViewletRegistry, Extensions as ViewletExtensions, ViewletDescriptor, ShowViewletAction } from 'vs/workbench/browser/viewlet';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ViewContainerViewlet } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IWorkbenchActionRegistry, Extensions as ActionExtensions } from 'vs/workbench/common/actions';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { createCSSRule } from 'vs/base/browser/dom';\n\nexport interface IUserFriendlyViewsContainerDescriptor {\n\tid: string;\n\ttitle: string;\n\ticon: string;\n}\n\nconst viewsContainerSchema: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: localize({ key: 'vscode.extension.contributes.views.containers.id', comment: ['Contribution refers to those that an extension contributes to VS Code through an extension/contribution point. '] }, \"Unique id used to identify the container in which views can be contributed using 'views' contribution point\"),\n\t\t\ttype: 'string',\n\t\t\tpattern: '^[a-zA-Z0-9_-]+$'\n\t\t},\n\t\ttitle: {\n\t\t\tdescription: localize('vscode.extension.contributes.views.containers.title', 'Human readable string used to render the container'),\n\t\t\ttype: 'string'\n\t\t},\n\t\ticon: {\n\t\t\tdescription: localize('vscode.extension.contributes.views.containers.icon', \"Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill color of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted.\"),\n\t\t\ttype: 'string'\n\t\t}\n\t}\n};\n\nexport const viewsContainersContribution: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.viewsContainers', 'Contributes views containers to the editor'),\n\ttype: 'object',\n\tproperties: {\n\t\t'activitybar': {\n\t\t\tdescription: localize('views.container.activitybar', \"Contribute views containers to Activity Bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewsContainerSchema\n\t\t}\n\t}\n};\n\ninterface IUserFriendlyViewDescriptor {\n\tid: string;\n\tname: string;\n\twhen?: string;\n}\n\nconst viewDescriptor: IJSONSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tid: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.id', 'Identifier of the view. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.'),\n\t\t\ttype: 'string'\n\t\t},\n\t\tname: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.name', 'The human-readable name of the view. Will be shown'),\n\t\t\ttype: 'string'\n\t\t},\n\t\twhen: {\n\t\t\tdescription: localize('vscode.extension.contributes.view.when', 'Condition which must be true to show this view'),\n\t\t\ttype: 'string'\n\t\t},\n\t}\n};\n\nconst viewsContribution: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.views', \"Contributes views to the editor\"),\n\ttype: 'object',\n\tproperties: {\n\t\t'explorer': {\n\t\t\tdescription: localize('views.explorer', \"Contributes views to Explorer container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'debug': {\n\t\t\tdescription: localize('views.debug', \"Contributes views to Debug container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'scm': {\n\t\t\tdescription: localize('views.scm', \"Contributes views to SCM container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t},\n\t\t'test': {\n\t\t\tdescription: localize('views.test', \"Contributes views to Test container in the Activity bar\"),\n\t\t\ttype: 'array',\n\t\t\titems: viewDescriptor,\n\t\t\tdefault: []\n\t\t}\n\t},\n\tadditionalProperties: {\n\t\tdescription: localize('views.contributed', \"Contributes views to contributed views container\"),\n\t\ttype: 'array',\n\t\titems: viewDescriptor,\n\t\tdefault: []\n\t}\n};\n\nexport interface ICustomViewDescriptor extends ITreeViewDescriptor {\n\treadonly extensionId: ExtensionIdentifier;\n\treadonly originalContainerId: string;\n}\n\ntype ViewContainerExtensionPointType = { [loc: string]: IUserFriendlyViewsContainerDescriptor[] };\nconst viewsContainersExtensionPoint: IExtensionPoint<ViewContainerExtensionPointType> = ExtensionsRegistry.registerExtensionPoint<ViewContainerExtensionPointType>({\n\textensionPoint: 'viewsContainers',\n\tjsonSchema: viewsContainersContribution\n});\n\ntype ViewExtensionPointType = { [loc: string]: IUserFriendlyViewDescriptor[] };\nconst viewsExtensionPoint: IExtensionPoint<ViewExtensionPointType> = ExtensionsRegistry.registerExtensionPoint<ViewExtensionPointType>({\n\textensionPoint: 'views',\n\tdeps: [viewsContainersExtensionPoint],\n\tjsonSchema: viewsContribution\n});\n\nconst TEST_VIEW_CONTAINER_ORDER = 6;\nclass ViewsExtensionHandler implements IWorkbenchContribution {\n\n\tprivate viewContainersRegistry: IViewContainersRegistry;\n\tprivate viewsRegistry: IViewsRegistry;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\t\tthis.handleAndRegisterCustomViewContainers();\n\t\tthis.handleAndRegisterCustomViews();\n\t}\n\n\tprivate handleAndRegisterCustomViewContainers() {\n\t\tthis.registerTestViewContainer();\n\t\tviewsContainersExtensionPoint.setHandler((extensions, { added, removed }) => {\n\t\t\tif (removed.length) {\n\t\t\t\tthis.removeCustomViewContainers(removed);\n\t\t\t}\n\t\t\tif (added.length) {\n\t\t\t\tthis.addCustomViewContainers(added, this.viewContainersRegistry.all);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addCustomViewContainers(extensionPoints: IExtensionPointUser<ViewContainerExtensionPointType>[], existingViewContainers: ViewContainer[]): void {\n\t\tconst viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tlet order = TEST_VIEW_CONTAINER_ORDER + viewContainersRegistry.all.filter(v => !!v.extensionId).length + 1;\n\t\tfor (let { value, collector, description } of extensionPoints) {\n\t\t\tforEach(value, entry => {\n\t\t\t\tif (!this.isValidViewsContainer(entry.value, collector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tswitch (entry.key) {\n\t\t\t\t\tcase 'activitybar':\n\t\t\t\t\t\torder = this.registerCustomViewContainers(entry.value, description, order, existingViewContainers);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate removeCustomViewContainers(extensionPoints: IExtensionPointUser<ViewContainerExtensionPointType>[]): void {\n\t\tconst viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\n\t\tconst removedExtensions: Set<string> = extensionPoints.reduce((result, e) => { result.add(ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set<string>());\n\t\tfor (const viewContainer of viewContainersRegistry.all) {\n\t\t\tif (viewContainer.extensionId && removedExtensions.has(ExtensionIdentifier.toKey(viewContainer.extensionId))) {\n\t\t\t\t// move only those views that do not belong to the removed extension\n\t\t\t\tconst views = this.viewsRegistry.getViews(viewContainer).filter((view: ICustomViewDescriptor) => !removedExtensions.has(ExtensionIdentifier.toKey(view.extensionId)));\n\t\t\t\tif (views.length) {\n\t\t\t\t\tthis.viewsRegistry.moveViews(views, this.getDefaultViewContainer());\n\t\t\t\t}\n\t\t\t\tthis.deregisterCustomViewContainer(viewContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerTestViewContainer(): void {\n\t\tconst title = localize('test', \"Test\");\n\t\tconst cssClass = `extensionViewlet-test`;\n\t\tconst icon = URI.parse(require.toUrl('./media/test.svg'));\n\n\t\tthis.registerCustomViewContainer(TEST_VIEW_CONTAINER_ID, title, icon, TEST_VIEW_CONTAINER_ORDER, cssClass, undefined);\n\t}\n\n\tprivate isValidViewsContainer(viewsContainersDescriptors: IUserFriendlyViewsContainerDescriptor[], collector: ExtensionMessageCollector): boolean {\n\t\tif (!Array.isArray(viewsContainersDescriptors)) {\n\t\t\tcollector.error(localize('viewcontainer requirearray', \"views containers must be an array\"));\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let descriptor of viewsContainersDescriptors) {\n\t\t\tif (typeof descriptor.id !== 'string') {\n\t\t\t\tcollector.error(localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (!(/^[a-z0-9_-]+$/i.test(descriptor.id))) {\n\t\t\t\tcollector.error(localize('requireidstring', \"property `{0}` is mandatory and must be of type `string`. Only alphanumeric characters, '_', and '-' are allowed.\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.title !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'title'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.icon !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'icon'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate registerCustomViewContainers(containers: IUserFriendlyViewsContainerDescriptor[], extension: IExtensionDescription, order: number, existingViewContainers: ViewContainer[]): number {\n\t\tcontainers.forEach(descriptor => {\n\t\t\tconst cssClass = `extensionViewlet-${descriptor.id}`;\n\t\t\tconst icon = resources.joinPath(extension.extensionLocation, descriptor.icon);\n\t\t\tconst id = `workbench.view.extension.${descriptor.id}`;\n\t\t\tconst viewContainer = this.registerCustomViewContainer(id, descriptor.title, icon, order++, cssClass, extension.identifier);\n\n\t\t\t// Move those views that belongs to this container\n\t\t\tif (existingViewContainers.length) {\n\t\t\t\tconst viewsToMove: IViewDescriptor[] = [];\n\t\t\t\tfor (const existingViewContainer of existingViewContainers) {\n\t\t\t\t\tif (viewContainer !== existingViewContainer) {\n\t\t\t\t\t\tviewsToMove.push(...this.viewsRegistry.getViews(existingViewContainer).filter((view: ICustomViewDescriptor) => view.originalContainerId === descriptor.id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (viewsToMove.length) {\n\t\t\t\t\tthis.viewsRegistry.moveViews(viewsToMove, viewContainer);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn order;\n\t}\n\n\tprivate registerCustomViewContainer(id: string, title: string, icon: URI, order: number, cssClass: string, extensionId: ExtensionIdentifier | undefined): ViewContainer {\n\t\tlet viewContainer = this.viewContainersRegistry.get(id);\n\n\t\tif (!viewContainer) {\n\n\t\t\tviewContainer = this.viewContainersRegistry.registerViewContainer(id, true, extensionId);\n\n\t\t\t// Register as viewlet\n\t\t\tclass CustomViewlet extends ViewContainerViewlet {\n\t\t\t\tconstructor(\n\t\t\t\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t\t\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t\t\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t\t\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t\t\t\t@IStorageService storageService: IStorageService,\n\t\t\t\t\t@IEditorService editorService: IEditorService,\n\t\t\t\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t\t\t\t@IThemeService themeService: IThemeService,\n\t\t\t\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t\t\t\t@IExtensionService extensionService: IExtensionService\n\t\t\t\t) {\n\t\t\t\t\tsuper(id, `${id}.state`, true, configurationService, layoutService, telemetryService, storageService, instantiationService, themeService, contextMenuService, extensionService, contextService);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst viewletDescriptor = new ViewletDescriptor(\n\t\t\t\tCustomViewlet,\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\tcssClass,\n\t\t\t\torder,\n\t\t\t\ticon\n\t\t\t);\n\n\t\t\tRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).registerViewlet(viewletDescriptor);\n\n\t\t\t// Register Action to Open Viewlet\n\t\t\tclass OpenCustomViewletAction extends ShowViewletAction {\n\t\t\t\tconstructor(\n\t\t\t\t\tid: string, label: string,\n\t\t\t\t\t@IViewletService viewletService: IViewletService,\n\t\t\t\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t\t\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService\n\t\t\t\t) {\n\t\t\t\t\tsuper(id, label, id, viewletService, editorGroupService, layoutService);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst registry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\n\t\t\tregistry.registerWorkbenchAction(\n\t\t\t\tnew SyncActionDescriptor(OpenCustomViewletAction, id, localize('showViewlet', \"Show {0}\", title)),\n\t\t\t\t'View: Show {0}',\n\t\t\t\tlocalize('view', \"View\")\n\t\t\t);\n\n\t\t\t// Generate CSS to show the icon in the activity bar\n\t\t\tconst iconClass = `.monaco-workbench .activitybar .monaco-action-bar .action-label.${cssClass}`;\n\t\t\tcreateCSSRule(iconClass, `-webkit-mask: url('${icon}') no-repeat 50% 50%`);\n\t\t}\n\n\t\treturn viewContainer;\n\t}\n\n\tprivate deregisterCustomViewContainer(viewContainer: ViewContainer): void {\n\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\tRegistry.as<ViewletRegistry>(ViewletExtensions.Viewlets).deregisterViewlet(viewContainer.id);\n\t}\n\n\tprivate handleAndRegisterCustomViews() {\n\t\tviewsExtensionPoint.setHandler((extensions, { added, removed }) => {\n\t\t\tif (removed.length) {\n\t\t\t\tthis.removeViews(removed);\n\t\t\t}\n\t\t\tif (added.length) {\n\t\t\t\tthis.addViews(added);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addViews(extensions: IExtensionPointUser<ViewExtensionPointType>[]): void {\n\t\tfor (const extension of extensions) {\n\t\t\tconst { value, collector } = extension;\n\n\t\t\tforEach(value, entry => {\n\t\t\t\tif (!this.isValidViewDescriptors(entry.value, collector)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst viewContainer = this.getViewContainer(entry.key);\n\t\t\t\tif (!viewContainer) {\n\t\t\t\t\tcollector.warn(localize('ViewContainerDoesnotExist', \"View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.\", entry.key));\n\t\t\t\t}\n\t\t\t\tconst container = viewContainer || this.getDefaultViewContainer();\n\t\t\t\tconst registeredViews = this.viewsRegistry.getViews(container);\n\t\t\t\tconst viewIds: string[] = [];\n\t\t\t\tconst viewDescriptors = coalesce(entry.value.map((item, index) => {\n\t\t\t\t\t// validate\n\t\t\t\t\tif (viewIds.indexOf(item.id) !== -1) {\n\t\t\t\t\t\tcollector.error(localize('duplicateView1', \"Cannot register multiple views with same id `{0}` in the view container `{1}`\", item.id, container.id));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (registeredViews.some(v => v.id === item.id)) {\n\t\t\t\t\t\tcollector.error(localize('duplicateView2', \"A view with id `{0}` is already registered in the view container `{1}`\", item.id, container.id));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewDescriptor = <ICustomViewDescriptor>{\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\tctorDescriptor: { ctor: CustomTreeViewPanel },\n\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(item.when),\n\t\t\t\t\t\tcanToggleVisibility: true,\n\t\t\t\t\t\tcollapsed: this.showCollapsed(container),\n\t\t\t\t\t\ttreeView: this.instantiationService.createInstance(CustomTreeView, item.id, container),\n\t\t\t\t\t\torder: ExtensionIdentifier.equals(extension.description.identifier, container.extensionId) ? index + 1 : undefined,\n\t\t\t\t\t\textensionId: extension.description.identifier,\n\t\t\t\t\t\toriginalContainerId: entry.key\n\t\t\t\t\t};\n\n\t\t\t\t\tviewIds.push(viewDescriptor.id);\n\t\t\t\t\treturn viewDescriptor;\n\t\t\t\t}));\n\t\t\t\tthis.viewsRegistry.registerViews(viewDescriptors, container);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getDefaultViewContainer(): ViewContainer {\n\t\treturn this.viewContainersRegistry.get(EXPLORER)!;\n\t}\n\n\tprivate removeViews(extensions: IExtensionPointUser<ViewExtensionPointType>[]): void {\n\t\tconst removedExtensions: Set<string> = extensions.reduce((result, e) => { result.add(ExtensionIdentifier.toKey(e.description.identifier)); return result; }, new Set<string>());\n\t\tfor (const viewContainer of this.viewContainersRegistry.all) {\n\t\t\tconst removedViews = this.viewsRegistry.getViews(viewContainer).filter((v: ICustomViewDescriptor) => v.extensionId && removedExtensions.has(ExtensionIdentifier.toKey(v.extensionId)));\n\t\t\tif (removedViews.length) {\n\t\t\t\tthis.viewsRegistry.deregisterViews(removedViews, viewContainer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isValidViewDescriptors(viewDescriptors: IUserFriendlyViewDescriptor[], collector: ExtensionMessageCollector): boolean {\n\t\tif (!Array.isArray(viewDescriptors)) {\n\t\t\tcollector.error(localize('requirearray', \"views must be an array\"));\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let descriptor of viewDescriptors) {\n\t\t\tif (typeof descriptor.id !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'id'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (typeof descriptor.name !== 'string') {\n\t\t\t\tcollector.error(localize('requirestring', \"property `{0}` is mandatory and must be of type `string`\", 'name'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (descriptor.when && typeof descriptor.when !== 'string') {\n\t\t\t\tcollector.error(localize('optstring', \"property `{0}` can be omitted or must be of type `string`\", 'when'));\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getViewContainer(value: string): ViewContainer | undefined {\n\t\tswitch (value) {\n\t\t\tcase 'explorer': return this.viewContainersRegistry.get(EXPLORER);\n\t\t\tcase 'debug': return this.viewContainersRegistry.get(DEBUG);\n\t\t\tcase 'scm': return this.viewContainersRegistry.get(SCM);\n\t\t\tdefault: return this.viewContainersRegistry.get(`workbench.view.extension.${value}`);\n\t\t}\n\t}\n\n\tprivate showCollapsed(container: ViewContainer): boolean {\n\t\tswitch (container.id) {\n\t\t\tcase EXPLORER:\n\t\t\tcase SCM:\n\t\t\tcase DEBUG:\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ViewsExtensionHandler, LifecyclePhase.Starting);"]}]}