{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/base/node/id.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/node/id.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/errors\", \"vs/base/common/uuid\", \"os\", \"vs/base/common/map\"], function (require, exports, errors, uuid, os_1, map_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // http://www.techrepublic.com/blog/data-center/mac-address-scorecard-for-common-virtual-machine-platforms/\n    // VMware ESX 3, Server, Workstation, Player\t00-50-56, 00-0C-29, 00-05-69\n    // Microsoft Hyper-V, Virtual Server, Virtual PC\t00-03-FF\n    // Parallells Desktop, Workstation, Server, Virtuozzo\t00-1C-42\n    // Virtual Iron 4\t00-0F-4B\n    // Red Hat Xen\t00-16-3E\n    // Oracle VM\t00-16-3E\n    // XenSource\t00-16-3E\n    // Novell Xen\t00-16-3E\n    // Sun xVM VirtualBox\t08-00-27\n    exports.virtualMachineHint = new class {\n        _isVirtualMachineMacAdress(mac) {\n            if (!this._virtualMachineOUIs) {\n                this._virtualMachineOUIs = map_1.TernarySearchTree.forStrings();\n                // dash-separated\n                this._virtualMachineOUIs.set('00-50-56', true);\n                this._virtualMachineOUIs.set('00-0C-29', true);\n                this._virtualMachineOUIs.set('00-05-69', true);\n                this._virtualMachineOUIs.set('00-03-FF', true);\n                this._virtualMachineOUIs.set('00-1C-42', true);\n                this._virtualMachineOUIs.set('00-16-3E', true);\n                this._virtualMachineOUIs.set('08-00-27', true);\n                // colon-separated\n                this._virtualMachineOUIs.set('00:50:56', true);\n                this._virtualMachineOUIs.set('00:0C:29', true);\n                this._virtualMachineOUIs.set('00:05:69', true);\n                this._virtualMachineOUIs.set('00:03:FF', true);\n                this._virtualMachineOUIs.set('00:1C:42', true);\n                this._virtualMachineOUIs.set('00:16:3E', true);\n                this._virtualMachineOUIs.set('08:00:27', true);\n            }\n            return !!this._virtualMachineOUIs.findSubstr(mac);\n        }\n        value() {\n            if (this._value === undefined) {\n                let vmOui = 0;\n                let interfaceCount = 0;\n                const interfaces = os_1.networkInterfaces();\n                for (let name in interfaces) {\n                    if (Object.prototype.hasOwnProperty.call(interfaces, name)) {\n                        for (const { mac, internal } of interfaces[name]) {\n                            if (!internal) {\n                                interfaceCount += 1;\n                                if (this._isVirtualMachineMacAdress(mac.toUpperCase())) {\n                                    vmOui += 1;\n                                }\n                            }\n                        }\n                    }\n                }\n                this._value = interfaceCount > 0\n                    ? vmOui / interfaceCount\n                    : 0;\n            }\n            return this._value;\n        }\n    };\n    let machineId;\n    function getMachineId() {\n        return machineId || (machineId = getMacMachineId()\n            .then(id => id || uuid.generateUuid())); // fallback, generate a UUID\n    }\n    exports.getMachineId = getMachineId;\n    function getMacMachineId() {\n        return new Promise(resolve => {\n            Promise.all([new Promise((resolve_1, reject_1) => { require(['crypto'], resolve_1, reject_1); }), new Promise((resolve_2, reject_2) => { require(['getmac'], resolve_2, reject_2); })]).then(([crypto, getmac]) => {\n                try {\n                    getmac.getMac((error, macAddress) => {\n                        if (!error) {\n                            resolve(crypto.createHash('sha256').update(macAddress, 'utf8').digest('hex'));\n                        }\n                        else {\n                            resolve(undefined);\n                        }\n                    });\n                    // Timeout due to hang with reduced privileges #58392\n                    // TODO@sbatten: Remove this when getmac is patched\n                    setTimeout(() => {\n                        resolve(undefined);\n                    }, 10000);\n                }\n                catch (err) {\n                    errors.onUnexpectedError(err);\n                    resolve(undefined);\n                }\n            }, err => {\n                errors.onUnexpectedError(err);\n                resolve(undefined);\n            });\n        });\n    }\n});\n",null]}