{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar uri_1 = require(\"vs/base/common/uri\");\nrequire(\"vs/css!../browser/media/preferences\");\nvar editorExtensions_1 = require(\"vs/editor/browser/editorExtensions\");\nvar suggest_1 = require(\"vs/editor/contrib/suggest/suggest\");\nvar nls = require(\"vs/nls\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar contextkeys_1 = require(\"vs/workbench/common/contextkeys\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar lifecycle_2 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar contributions_1 = require(\"vs/workbench/common/contributions\");\nvar editor_2 = require(\"vs/workbench/common/editor\");\nvar resources_1 = require(\"vs/workbench/common/resources\");\nvar keybindingsEditor_1 = require(\"vs/workbench/contrib/preferences/browser/keybindingsEditor\");\nvar preferencesActions_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesActions\");\nvar preferencesEditor_1 = require(\"vs/workbench/contrib/preferences/browser/preferencesEditor\");\nvar preferences_1 = require(\"vs/workbench/contrib/preferences/common/preferences\");\nvar preferencesContribution_1 = require(\"vs/workbench/contrib/preferences/common/preferencesContribution\");\nvar preferencesSearch_1 = require(\"vs/workbench/contrib/preferences/electron-browser/preferencesSearch\");\nvar settingsEditor2_1 = require(\"vs/workbench/contrib/preferences/electron-browser/settingsEditor2\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar preferences_2 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar preferencesEditorInput_1 = require(\"vs/workbench/services/preferences/common/preferencesEditorInput\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar extensions_2 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar remoteHosts_1 = require(\"vs/platform/remote/common/remoteHosts\");\nextensions_1.registerSingleton(preferences_1.IPreferencesSearchService, preferencesSearch_1.PreferencesSearchService, true);\nplatform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(preferencesEditor_1.PreferencesEditor, preferencesEditor_1.PreferencesEditor.ID, nls.localize('defaultPreferencesEditor', \"Default Preferences Editor\")), [\n    new descriptors_1.SyncDescriptor(preferencesEditorInput_1.PreferencesEditorInput)\n]);\nplatform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(settingsEditor2_1.SettingsEditor2, settingsEditor2_1.SettingsEditor2.ID, nls.localize('settingsEditor2', \"Settings Editor 2\")), [\n    new descriptors_1.SyncDescriptor(preferencesEditorInput_1.SettingsEditor2Input)\n]);\nplatform_1.Registry.as(editor_1.Extensions.Editors).registerEditor(new editor_1.EditorDescriptor(keybindingsEditor_1.KeybindingsEditor, keybindingsEditor_1.KeybindingsEditor.ID, nls.localize('keybindingsEditor', \"Keybindings Editor\")), [\n    new descriptors_1.SyncDescriptor(preferencesEditorInput_1.KeybindingsEditorInput)\n]);\n// Register Preferences Editor Input Factory\nvar PreferencesEditorInputFactory = /** @class */ (function () {\n    function PreferencesEditorInputFactory() {\n    }\n    PreferencesEditorInputFactory.prototype.serialize = function (editorInput) {\n        var input = editorInput;\n        if (input.details && input.master) {\n            var registry_1 = platform_1.Registry.as(editor_2.Extensions.EditorInputFactories);\n            var detailsInputFactory = registry_1.getEditorInputFactory(input.details.getTypeId());\n            var masterInputFactory = registry_1.getEditorInputFactory(input.master.getTypeId());\n            if (detailsInputFactory && masterInputFactory) {\n                var detailsSerialized = detailsInputFactory.serialize(input.details);\n                var masterSerialized = masterInputFactory.serialize(input.master);\n                if (detailsSerialized && masterSerialized) {\n                    return JSON.stringify({\n                        name: input.getName(),\n                        description: input.getDescription(),\n                        detailsSerialized: detailsSerialized,\n                        masterSerialized: masterSerialized,\n                        detailsTypeId: input.details.getTypeId(),\n                        masterTypeId: input.master.getTypeId()\n                    });\n                }\n            }\n        }\n        return undefined;\n    };\n    PreferencesEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        var deserialized = JSON.parse(serializedEditorInput);\n        var registry = platform_1.Registry.as(editor_2.Extensions.EditorInputFactories);\n        var detailsInputFactory = registry.getEditorInputFactory(deserialized.detailsTypeId);\n        var masterInputFactory = registry.getEditorInputFactory(deserialized.masterTypeId);\n        if (detailsInputFactory && masterInputFactory) {\n            var detailsInput = detailsInputFactory.deserialize(instantiationService, deserialized.detailsSerialized);\n            var masterInput = masterInputFactory.deserialize(instantiationService, deserialized.masterSerialized);\n            if (detailsInput && masterInput) {\n                return new preferencesEditorInput_1.PreferencesEditorInput(deserialized.name, deserialized.description, detailsInput, masterInput);\n            }\n        }\n        return undefined;\n    };\n    return PreferencesEditorInputFactory;\n}());\nvar KeybindingsEditorInputFactory = /** @class */ (function () {\n    function KeybindingsEditorInputFactory() {\n    }\n    KeybindingsEditorInputFactory.prototype.serialize = function (editorInput) {\n        var input = editorInput;\n        return JSON.stringify({\n            name: input.getName(),\n            typeId: input.getTypeId()\n        });\n    };\n    KeybindingsEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        return instantiationService.createInstance(preferencesEditorInput_1.KeybindingsEditorInput);\n    };\n    return KeybindingsEditorInputFactory;\n}());\nvar SettingsEditor2InputFactory = /** @class */ (function () {\n    function SettingsEditor2InputFactory() {\n    }\n    SettingsEditor2InputFactory.prototype.serialize = function (input) {\n        var serialized = {};\n        return JSON.stringify(serialized);\n    };\n    SettingsEditor2InputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        return instantiationService.createInstance(preferencesEditorInput_1.SettingsEditor2Input);\n    };\n    return SettingsEditor2InputFactory;\n}());\n// Register Default Preferences Editor Input Factory\nvar DefaultPreferencesEditorInputFactory = /** @class */ (function () {\n    function DefaultPreferencesEditorInputFactory() {\n    }\n    DefaultPreferencesEditorInputFactory.prototype.serialize = function (editorInput) {\n        var input = editorInput;\n        var serialized = { resource: input.getResource().toString() };\n        return JSON.stringify(serialized);\n    };\n    DefaultPreferencesEditorInputFactory.prototype.deserialize = function (instantiationService, serializedEditorInput) {\n        var deserialized = JSON.parse(serializedEditorInput);\n        return instantiationService.createInstance(preferencesEditorInput_1.DefaultPreferencesEditorInput, uri_1.URI.parse(deserialized.resource));\n    };\n    return DefaultPreferencesEditorInputFactory;\n}());\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.PreferencesEditorInput.ID, PreferencesEditorInputFactory);\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputFactory);\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.KeybindingsEditorInput.ID, KeybindingsEditorInputFactory);\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(preferencesEditorInput_1.SettingsEditor2Input.ID, SettingsEditor2InputFactory);\n// Contribute Global Actions\nvar category = nls.localize('preferences', \"Preferences\");\nvar registry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenRawDefaultSettingsAction, preferencesActions_1.OpenRawDefaultSettingsAction.ID, preferencesActions_1.OpenRawDefaultSettingsAction.LABEL), 'Preferences: Open Raw Default Settings', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenSettingsJsonAction, preferencesActions_1.OpenSettingsJsonAction.ID, preferencesActions_1.OpenSettingsJsonAction.LABEL), 'Preferences: Open Settings (JSON)', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenSettings2Action, preferencesActions_1.OpenSettings2Action.ID, preferencesActions_1.OpenSettings2Action.LABEL), 'Preferences: Open Settings (UI)', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalSettingsAction, preferencesActions_1.OpenGlobalSettingsAction.ID, preferencesActions_1.OpenGlobalSettingsAction.LABEL), 'Preferences: Open User Settings', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsAction, preferencesActions_1.OpenGlobalKeybindingsAction.ID, preferencesActions_1.OpenGlobalKeybindingsAction.LABEL, { primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_S) }), 'Preferences: Open Keyboard Shortcuts', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenDefaultKeybindingsFileAction, preferencesActions_1.OpenDefaultKeybindingsFileAction.ID, preferencesActions_1.OpenDefaultKeybindingsFileAction.LABEL), 'Preferences: Open Default Keyboard Shortcuts File', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.OpenGlobalKeybindingsFileAction, preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL, { primary: 0 }), 'Preferences: Open Keyboard Shortcuts File', category);\nregistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(preferencesActions_1.ConfigureLanguageBasedSettingsAction, preferencesActions_1.ConfigureLanguageBasedSettingsAction.ID, preferencesActions_1.ConfigureLanguageBasedSettingsAction.LABEL), 'Preferences: Configure Language Specific Settings...', category);\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.SETTINGS_COMMAND_OPEN_SETTINGS,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: null,\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_COMMA,\n    handler: function (accessor, args) {\n        accessor.get(preferences_2.IPreferencesService).openSettings();\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_DEFINE,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K),\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.defineKeybinding(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_E),\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor && control.activeKeybindingEntry.keybindingItem.keybinding) {\n            control.defineWhenExpression(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_REMOVE,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: keyCodes_1.KeyCode.Delete,\n    mac: {\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.Backspace)\n    },\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.removeKeybinding(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_RESET,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: 0,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.resetKeybinding(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SEARCH,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.focusSearch();\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_K,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_K },\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.recordSearchKeys();\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n    primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_P,\n    mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_P },\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control && control instanceof keybindingsEditor_1.KeybindingsEditor) {\n            control.toggleSortByPrecedence();\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: 0,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.showSimilarKeybindings(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_COPY,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.copyKeybinding(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDING_FOCUS),\n    primary: 0,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.copyKeybindingCommand(control.activeKeybindingEntry);\n        }\n    }\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n    primary: keyCodes_1.KeyCode.DownArrow,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.focusKeybindings();\n        }\n    }\n});\nvar PreferencesActionsContribution = /** @class */ (function (_super) {\n    tslib_1.__extends(PreferencesActionsContribution, _super);\n    function PreferencesActionsContribution(environmentService, preferencesService, workpsaceContextService, labelService, extensionService, windowService) {\n        var _this = _super.call(this) || this;\n        _this.preferencesService = preferencesService;\n        _this.workpsaceContextService = workpsaceContextService;\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n            command: {\n                id: preferencesActions_1.OpenGlobalKeybindingsAction.ID,\n                title: preferencesActions_1.OpenGlobalKeybindingsAction.LABEL,\n                iconLocation: {\n                    light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg\")),\n                    dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg\"))\n                }\n            },\n            when: resources_1.ResourceContextKey.Resource.isEqualTo(uri_1.URI.file(environmentService.appKeybindingsPath).toString()),\n            group: 'navigation',\n            order: 1\n        });\n        var commandId = '_workbench.openUserSettingsEditor';\n        commands_1.CommandsRegistry.registerCommand(commandId, function () { return _this.preferencesService.openGlobalSettings(false); });\n        actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n            command: {\n                id: commandId,\n                title: preferencesActions_1.OpenSettings2Action.LABEL,\n                iconLocation: {\n                    light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg\")),\n                    dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg\"))\n                }\n            },\n            when: resources_1.ResourceContextKey.Resource.isEqualTo(uri_1.URI.file(environmentService.appSettingsPath).toString()),\n            group: 'navigation',\n            order: 1\n        });\n        _this.updatePreferencesEditorMenuItem();\n        _this._register(workpsaceContextService.onDidChangeWorkbenchState(function () { return _this.updatePreferencesEditorMenuItem(); }));\n        _this._register(workpsaceContextService.onDidChangeWorkspaceFolders(function () { return _this.updatePreferencesEditorMenuItemForWorkspaceFolders(); }));\n        extensionService.whenInstalledExtensionsRegistered()\n            .then(function () {\n            var remoteAuthority = windowService.getConfiguration().remoteAuthority;\n            var hostLabel = labelService.getHostLabel(remoteHosts_1.REMOTE_HOST_SCHEME, remoteAuthority) || remoteAuthority;\n            var label = nls.localize('openRemoteSettings', \"Open User Settings ({0})\", hostLabel);\n            commands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenRemoteSettingsAction.ID, function (serviceAccessor) {\n                serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenRemoteSettingsAction, preferencesActions_1.OpenRemoteSettingsAction.ID, label).run();\n            });\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n                command: {\n                    id: preferencesActions_1.OpenRemoteSettingsAction.ID,\n                    title: { value: label, original: \"Preferences: Open User Settings (\" + hostLabel + \")\" },\n                    category: nls.localize('preferencesCategory', \"Preferences\")\n                },\n                when: contextkeys_1.IsRemoteContext\n            });\n        });\n        return _this;\n    }\n    PreferencesActionsContribution.prototype.updatePreferencesEditorMenuItem = function () {\n        var _this = this;\n        var commandId = '_workbench.openWorkspaceSettingsEditor';\n        if (this.workpsaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.WORKSPACE && !commands_1.CommandsRegistry.getCommand(commandId)) {\n            commands_1.CommandsRegistry.registerCommand(commandId, function () { return _this.preferencesService.openWorkspaceSettings(false); });\n            actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                command: {\n                    id: commandId,\n                    title: preferencesActions_1.OpenSettings2Action.LABEL,\n                    iconLocation: {\n                        light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg\")),\n                        dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg\"))\n                    }\n                },\n                when: contextkey_1.ContextKeyExpr.and(resources_1.ResourceContextKey.Resource.isEqualTo(this.preferencesService.workspaceSettingsResource.toString()), contextkeys_1.WorkbenchStateContext.isEqualTo('workspace')),\n                group: 'navigation',\n                order: 1\n            });\n        }\n        this.updatePreferencesEditorMenuItemForWorkspaceFolders();\n    };\n    PreferencesActionsContribution.prototype.updatePreferencesEditorMenuItemForWorkspaceFolders = function () {\n        var _this = this;\n        var _loop_1 = function (folder) {\n            var commandId = \"_workbench.openFolderSettings.\" + folder.uri.toString();\n            if (!commands_1.CommandsRegistry.getCommand(commandId)) {\n                commands_1.CommandsRegistry.registerCommand(commandId, function () {\n                    if (_this.workpsaceContextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER) {\n                        return _this.preferencesService.openWorkspaceSettings(false);\n                    }\n                    else {\n                        return _this.preferencesService.openFolderSettings(folder.uri, false);\n                    }\n                });\n                actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n                    command: {\n                        id: commandId,\n                        title: preferencesActions_1.OpenSettings2Action.LABEL,\n                        iconLocation: {\n                            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg\")),\n                            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg\"))\n                        }\n                    },\n                    when: contextkey_1.ContextKeyExpr.and(resources_1.ResourceContextKey.Resource.isEqualTo(this_1.preferencesService.getFolderSettingsResource(folder.uri).toString())),\n                    group: 'navigation',\n                    order: 1\n                });\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = this.workpsaceContextService.getWorkspace().folders; _i < _a.length; _i++) {\n            var folder = _a[_i];\n            _loop_1(folder);\n        }\n    };\n    PreferencesActionsContribution = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, preferences_2.IPreferencesService),\n        tslib_1.__param(2, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(3, label_1.ILabelService),\n        tslib_1.__param(4, extensions_2.IExtensionService),\n        tslib_1.__param(5, windows_1.IWindowService)\n    ], PreferencesActionsContribution);\n    return PreferencesActionsContribution;\n}(lifecycle_1.Disposable));\nvar workbenchContributionsRegistry = platform_1.Registry.as(contributions_1.Extensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(PreferencesActionsContribution, lifecycle_2.LifecyclePhase.Starting);\nworkbenchContributionsRegistry.registerWorkbenchContribution(preferencesContribution_1.PreferencesContribution, lifecycle_2.LifecyclePhase.Starting);\ncommands_1.CommandsRegistry.registerCommand(preferencesActions_1.OPEN_FOLDER_SETTINGS_COMMAND, function (accessor, resource) {\n    var preferencesService = accessor.get(preferences_2.IPreferencesService);\n    return preferencesService.openFolderSettings(resource);\n});\ncommands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenFolderSettingsAction.ID, function (serviceAccessor) {\n    serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenFolderSettingsAction, preferencesActions_1.OpenFolderSettingsAction.ID, preferencesActions_1.OpenFolderSettingsAction.LABEL).run();\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n    command: {\n        id: preferencesActions_1.OpenFolderSettingsAction.ID,\n        title: { value: preferencesActions_1.OpenFolderSettingsAction.LABEL, original: 'Preferences: Open Folder Settings' },\n        category: nls.localize('preferencesCategory', \"Preferences\")\n    },\n    when: contextkeys_1.WorkbenchStateContext.isEqualTo('workspace')\n});\ncommands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenWorkspaceSettingsAction.ID, function (serviceAccessor) {\n    serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenWorkspaceSettingsAction, preferencesActions_1.OpenWorkspaceSettingsAction.ID, preferencesActions_1.OpenWorkspaceSettingsAction.LABEL).run();\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n    command: {\n        id: preferencesActions_1.OpenWorkspaceSettingsAction.ID,\n        title: { value: preferencesActions_1.OpenWorkspaceSettingsAction.LABEL, original: 'Preferences: Open Workspace Settings' },\n        category: nls.localize('preferencesCategory', \"Preferences\")\n    },\n    when: contextkeys_1.WorkbenchStateContext.notEqualsTo('empty')\n});\nkeybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n    id: preferences_1.KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n    weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR, preferences_1.CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n    primary: keyCodes_1.KeyCode.Escape,\n    handler: function (accessor, args) {\n        var control = accessor.get(editorService_1.IEditorService).activeControl;\n        if (control) {\n            control.clearSearchResults();\n        }\n    }\n});\ncommands_1.CommandsRegistry.registerCommand(preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, function (serviceAccessor) {\n    serviceAccessor.get(instantiation_1.IInstantiationService).createInstance(preferencesActions_1.OpenGlobalKeybindingsFileAction, preferencesActions_1.OpenGlobalKeybindingsFileAction.ID, preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL).run();\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferencesActions_1.OpenGlobalKeybindingsFileAction.ID,\n        title: preferencesActions_1.OpenGlobalKeybindingsFileAction.LABEL,\n        iconLocation: {\n            light: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg\")),\n            dark: uri_1.URI.parse(require.toUrl(\"vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg\"))\n        }\n    },\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n    group: 'navigation',\n});\ncommands_1.CommandsRegistry.registerCommand(preferences_1.KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, function (serviceAccessor) {\n    var control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n    if (control) {\n        control.search('@source:default');\n    }\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferences_1.KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS,\n        title: nls.localize('showDefaultKeybindings', \"Show Default Keybindings\")\n    },\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n    group: '1_keyboard_preferences_actions'\n});\ncommands_1.CommandsRegistry.registerCommand(preferences_1.KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, function (serviceAccessor) {\n    var control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n    if (control) {\n        control.search('@source:user');\n    }\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferences_1.KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS,\n        title: nls.localize('showUserKeybindings', \"Show User Keybindings\")\n    },\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_KEYBINDINGS_EDITOR),\n    group: '1_keyboard_preferences_actions'\n});\nvar SettingsCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsCommand, _super);\n    function SettingsCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SettingsCommand.prototype.getPreferencesEditor = function (accessor) {\n        var activeControl = accessor.get(editorService_1.IEditorService).activeControl;\n        if (activeControl instanceof preferencesEditor_1.PreferencesEditor || activeControl instanceof settingsEditor2_1.SettingsEditor2) {\n            return activeControl;\n        }\n        return null;\n    };\n    return SettingsCommand;\n}(editorExtensions_1.Command));\nvar StartSearchDefaultSettingsCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(StartSearchDefaultSettingsCommand, _super);\n    function StartSearchDefaultSettingsCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StartSearchDefaultSettingsCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor) {\n            preferencesEditor.focusSearch();\n        }\n    };\n    return StartSearchDefaultSettingsCommand;\n}(SettingsCommand));\nvar startSearchCommand = new StartSearchDefaultSettingsCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_SEARCH,\n    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR),\n    kbOpts: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\nstartSearchCommand.register();\nvar ClearSearchResultsCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ClearSearchResultsCommand, _super);\n    function ClearSearchResultsCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ClearSearchResultsCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor) {\n            preferencesEditor.clearSearchResults();\n        }\n    };\n    return ClearSearchResultsCommand;\n}(SettingsCommand));\nvar clearSearchResultsCommand = new ClearSearchResultsCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n    precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n    kbOpts: { primary: keyCodes_1.KeyCode.Escape, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\nclearSearchResultsCommand.register();\nvar FocusSettingsFileEditorCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusSettingsFileEditorCommand, _super);\n    function FocusSettingsFileEditorCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FocusSettingsFileEditorCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n            preferencesEditor.focusSettingsFileEditor();\n        }\n        else if (preferencesEditor) {\n            preferencesEditor.focusSettings();\n        }\n    };\n    return FocusSettingsFileEditorCommand;\n}(SettingsCommand));\nvar focusSettingsFileEditorCommand = new FocusSettingsFileEditorCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_FILE,\n    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS, suggest_1.Context.Visible.toNegated()),\n    kbOpts: { primary: keyCodes_1.KeyCode.DownArrow, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\nfocusSettingsFileEditorCommand.register();\nvar focusSettingsFromSearchCommand = new FocusSettingsFileEditorCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH,\n    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS, suggest_1.Context.Visible.toNegated()),\n    kbOpts: { primary: keyCodes_1.KeyCode.DownArrow, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n});\nfocusSettingsFromSearchCommand.register();\nvar FocusNextSearchResultCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusNextSearchResultCommand, _super);\n    function FocusNextSearchResultCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FocusNextSearchResultCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n            preferencesEditor.focusNextResult();\n        }\n    };\n    return FocusNextSearchResultCommand;\n}(SettingsCommand));\nvar focusNextSearchResultCommand = new FocusNextSearchResultCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING,\n    precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n    kbOpts: { primary: keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\nfocusNextSearchResultCommand.register();\nvar FocusPreviousSearchResultCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusPreviousSearchResultCommand, _super);\n    function FocusPreviousSearchResultCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FocusPreviousSearchResultCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n            preferencesEditor.focusPreviousResult();\n        }\n    };\n    return FocusPreviousSearchResultCommand;\n}(SettingsCommand));\nvar focusPreviousSearchResultCommand = new FocusPreviousSearchResultCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING,\n    precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n    kbOpts: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\nfocusPreviousSearchResultCommand.register();\nvar EditFocusedSettingCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(EditFocusedSettingCommand, _super);\n    function EditFocusedSettingCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EditFocusedSettingCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof preferencesEditor_1.PreferencesEditor) {\n            preferencesEditor.editFocusedPreference();\n        }\n    };\n    return EditFocusedSettingCommand;\n}(SettingsCommand));\nvar editFocusedSettingCommand = new EditFocusedSettingCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING,\n    precondition: preferences_1.CONTEXT_SETTINGS_SEARCH_FOCUS,\n    kbOpts: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.US_DOT, weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib }\n});\neditFocusedSettingCommand.register();\nvar FocusSettingsListCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(FocusSettingsListCommand, _super);\n    function FocusSettingsListCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FocusSettingsListCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof settingsEditor2_1.SettingsEditor2) {\n            preferencesEditor.focusSettings();\n        }\n    };\n    return FocusSettingsListCommand;\n}(SettingsCommand));\nvar focusSettingsListCommand = new FocusSettingsListCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST,\n    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_TOC_ROW_FOCUS),\n    kbOpts: { primary: keyCodes_1.KeyCode.Enter, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n});\nfocusSettingsListCommand.register();\nvar ShowContextMenuCommand = /** @class */ (function (_super) {\n    tslib_1.__extends(ShowContextMenuCommand, _super);\n    function ShowContextMenuCommand() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ShowContextMenuCommand.prototype.runCommand = function (accessor, args) {\n        var preferencesEditor = this.getPreferencesEditor(accessor);\n        if (preferencesEditor instanceof settingsEditor2_1.SettingsEditor2) {\n            preferencesEditor.showContextMenu();\n        }\n    };\n    return ShowContextMenuCommand;\n}(SettingsCommand));\nvar showContextMenuCommand = new ShowContextMenuCommand({\n    id: preferences_1.SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU,\n    precondition: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR),\n    kbOpts: { primary: keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F9, weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib }\n});\nshowContextMenuCommand.register();\ncommands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON, function (serviceAccessor) {\n    var control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n    if (control instanceof settingsEditor2_1.SettingsEditor2) {\n        return control.switchToSettingsFile();\n    }\n    return Promise.resolve(null);\n});\ncommands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED, function (serviceAccessor) {\n    var control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n    if (control instanceof settingsEditor2_1.SettingsEditor2) {\n        control.focusSearch(\"@\" + preferences_1.MODIFIED_SETTING_TAG);\n    }\n});\ncommands_1.CommandsRegistry.registerCommand(preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_ONLINE, function (serviceAccessor) {\n    var control = serviceAccessor.get(editorService_1.IEditorService).activeControl;\n    if (control instanceof settingsEditor2_1.SettingsEditor2) {\n        control.focusSearch(\"@tag:usesOnlineServices\");\n    }\n});\n// Preferences menu\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n    group: '1_settings',\n    command: {\n        id: preferences_1.SETTINGS_COMMAND_OPEN_SETTINGS,\n        title: nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, \"&&Settings\")\n    },\n    order: 1\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.MenubarPreferencesMenu, {\n    group: '2_keybindings',\n    command: {\n        id: preferencesActions_1.OpenGlobalKeybindingsAction.ID,\n        title: nls.localize({ key: 'miOpenKeymap', comment: ['&& denotes a mnemonic'] }, \"&&Keyboard Shortcuts\")\n    },\n    order: 1\n});\n// Editor tool items\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON,\n        title: nls.localize('openSettingsJson', \"Open Settings (JSON)\"),\n        iconLocation: {\n            dark: uri_1.URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg')),\n            light: uri_1.URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg'))\n        }\n    },\n    group: 'navigation',\n    order: 1,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED,\n        title: nls.localize('filterModifiedLabel', \"Show modified settings\")\n    },\n    group: '1_filter',\n    order: 1,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {\n    command: {\n        id: preferences_1.SETTINGS_EDITOR_COMMAND_FILTER_ONLINE,\n        title: nls.localize('filterOnlineServicesLabel', \"Show settings for online services\"),\n    },\n    group: '1_filter',\n    order: 2,\n    when: contextkey_1.ContextKeyExpr.and(preferences_1.CONTEXT_SETTINGS_EDITOR, preferences_1.CONTEXT_SETTINGS_JSON_EDITOR.toNegated())\n});\nactions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.ExplorerContext, {\n    group: '2_workspace',\n    order: 20,\n    command: {\n        id: preferencesActions_1.OPEN_FOLDER_SETTINGS_COMMAND,\n        title: preferencesActions_1.OPEN_FOLDER_SETTINGS_LABEL\n    },\n    when: contextkey_1.ContextKeyExpr.and(files_1.ExplorerRootContext, files_1.ExplorerFolderContext)\n});\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/electron-browser/preferences.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport 'vs/css!../browser/media/preferences';\nimport { Command } from 'vs/editor/browser/editorExtensions';\nimport { Context as SuggestContext } from 'vs/editor/contrib/suggest/suggest';\nimport * as nls from 'vs/nls';\nimport { MenuId, MenuRegistry, SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { WorkbenchStateContext, IsRemoteContext } from 'vs/workbench/common/contextkeys';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { LifecyclePhase } from 'vs/platform/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { EditorDescriptor, Extensions as EditorExtensions, IEditorRegistry } from 'vs/workbench/browser/editor';\nimport { Extensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { EditorInput, Extensions as EditorInputExtensions, IEditorInputFactory, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { KeybindingsEditor } from 'vs/workbench/contrib/preferences/browser/keybindingsEditor';\nimport { ConfigureLanguageBasedSettingsAction, OpenDefaultKeybindingsFileAction, OpenFolderSettingsAction, OpenGlobalKeybindingsAction, OpenGlobalKeybindingsFileAction, OpenGlobalSettingsAction, OpenRawDefaultSettingsAction, OpenSettings2Action, OpenSettingsJsonAction, OpenWorkspaceSettingsAction, OPEN_FOLDER_SETTINGS_COMMAND, OPEN_FOLDER_SETTINGS_LABEL, OpenRemoteSettingsAction } from 'vs/workbench/contrib/preferences/browser/preferencesActions';\nimport { PreferencesEditor } from 'vs/workbench/contrib/preferences/browser/preferencesEditor';\nimport { CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS, CONTEXT_KEYBINDING_FOCUS, CONTEXT_SETTINGS_EDITOR, CONTEXT_SETTINGS_JSON_EDITOR, CONTEXT_SETTINGS_SEARCH_FOCUS, CONTEXT_TOC_ROW_FOCUS, IKeybindingsEditor, IPreferencesSearchService, KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, KEYBINDINGS_EDITOR_COMMAND_COPY, KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND, KEYBINDINGS_EDITOR_COMMAND_DEFINE, KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS, KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS, KEYBINDINGS_EDITOR_COMMAND_REMOVE, KEYBINDINGS_EDITOR_COMMAND_RESET, KEYBINDINGS_EDITOR_COMMAND_SEARCH, KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR, KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE, KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, MODIFIED_SETTING_TAG, SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS, SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING, SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED, SETTINGS_EDITOR_COMMAND_FILTER_ONLINE, SETTINGS_EDITOR_COMMAND_FOCUS_FILE, SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING, SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING, SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH, SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST, SETTINGS_EDITOR_COMMAND_SEARCH, SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU, SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON, SETTINGS_COMMAND_OPEN_SETTINGS, KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { PreferencesContribution } from 'vs/workbench/contrib/preferences/common/preferencesContribution';\nimport { PreferencesSearchService } from 'vs/workbench/contrib/preferences/electron-browser/preferencesSearch';\nimport { SettingsEditor2 } from 'vs/workbench/contrib/preferences/electron-browser/settingsEditor2';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { DefaultPreferencesEditorInput, KeybindingsEditorInput, PreferencesEditorInput, SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\nimport { ExplorerRootContext, ExplorerFolderContext } from 'vs/workbench/contrib/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWindowService } from 'vs/platform/windows/common/windows';\nimport { REMOTE_HOST_SCHEME } from 'vs/platform/remote/common/remoteHosts';\n\nregisterSingleton(IPreferencesSearchService, PreferencesSearchService, true);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tPreferencesEditor,\n\t\tPreferencesEditor.ID,\n\t\tnls.localize('defaultPreferencesEditor', \"Default Preferences Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor(PreferencesEditorInput)\n\t]\n);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tSettingsEditor2,\n\t\tSettingsEditor2.ID,\n\t\tnls.localize('settingsEditor2', \"Settings Editor 2\")\n\t),\n\t[\n\t\tnew SyncDescriptor(SettingsEditor2Input)\n\t]\n);\n\nRegistry.as<IEditorRegistry>(EditorExtensions.Editors).registerEditor(\n\tnew EditorDescriptor(\n\t\tKeybindingsEditor,\n\t\tKeybindingsEditor.ID,\n\t\tnls.localize('keybindingsEditor', \"Keybindings Editor\")\n\t),\n\t[\n\t\tnew SyncDescriptor(KeybindingsEditorInput)\n\t]\n);\n\ninterface ISerializedPreferencesEditorInput {\n\tname: string;\n\tdescription: string;\n\n\tdetailsSerialized: string;\n\tmasterSerialized: string;\n\n\tdetailsTypeId: string;\n\tmasterTypeId: string;\n}\n\n// Register Preferences Editor Input Factory\nclass PreferencesEditorInputFactory implements IEditorInputFactory {\n\n\tserialize(editorInput: EditorInput): string | undefined {\n\t\tconst input = <PreferencesEditorInput>editorInput;\n\n\t\tif (input.details && input.master) {\n\t\t\tconst registry = Registry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories);\n\t\t\tconst detailsInputFactory = registry.getEditorInputFactory(input.details.getTypeId());\n\t\t\tconst masterInputFactory = registry.getEditorInputFactory(input.master.getTypeId());\n\n\t\t\tif (detailsInputFactory && masterInputFactory) {\n\t\t\t\tconst detailsSerialized = detailsInputFactory.serialize(input.details);\n\t\t\t\tconst masterSerialized = masterInputFactory.serialize(input.master);\n\n\t\t\t\tif (detailsSerialized && masterSerialized) {\n\t\t\t\t\treturn JSON.stringify(<ISerializedPreferencesEditorInput>{\n\t\t\t\t\t\tname: input.getName(),\n\t\t\t\t\t\tdescription: input.getDescription(),\n\t\t\t\t\t\tdetailsSerialized,\n\t\t\t\t\t\tmasterSerialized,\n\t\t\t\t\t\tdetailsTypeId: input.details.getTypeId(),\n\t\t\t\t\t\tmasterTypeId: input.master.getTypeId()\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput | undefined {\n\t\tconst deserialized: ISerializedPreferencesEditorInput = JSON.parse(serializedEditorInput);\n\n\t\tconst registry = Registry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories);\n\t\tconst detailsInputFactory = registry.getEditorInputFactory(deserialized.detailsTypeId);\n\t\tconst masterInputFactory = registry.getEditorInputFactory(deserialized.masterTypeId);\n\n\t\tif (detailsInputFactory && masterInputFactory) {\n\t\t\tconst detailsInput = detailsInputFactory.deserialize(instantiationService, deserialized.detailsSerialized);\n\t\t\tconst masterInput = masterInputFactory.deserialize(instantiationService, deserialized.masterSerialized);\n\n\t\t\tif (detailsInput && masterInput) {\n\t\t\t\treturn new PreferencesEditorInput(deserialized.name, deserialized.description, detailsInput, masterInput);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nclass KeybindingsEditorInputFactory implements IEditorInputFactory {\n\n\tserialize(editorInput: EditorInput): string {\n\t\tconst input = <KeybindingsEditorInput>editorInput;\n\t\treturn JSON.stringify({\n\t\t\tname: input.getName(),\n\t\t\ttypeId: input.getTypeId()\n\t\t});\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput {\n\t\treturn instantiationService.createInstance(KeybindingsEditorInput);\n\t}\n}\n\ninterface ISerializedSettingsEditor2EditorInput {\n}\n\nclass SettingsEditor2InputFactory implements IEditorInputFactory {\n\n\tserialize(input: SettingsEditor2Input): string {\n\t\tconst serialized: ISerializedSettingsEditor2EditorInput = {\n\t\t};\n\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): SettingsEditor2Input {\n\t\treturn instantiationService.createInstance(\n\t\t\tSettingsEditor2Input);\n\t}\n}\n\ninterface ISerializedDefaultPreferencesEditorInput {\n\tresource: string;\n}\n\n// Register Default Preferences Editor Input Factory\nclass DefaultPreferencesEditorInputFactory implements IEditorInputFactory {\n\n\tserialize(editorInput: EditorInput): string {\n\t\tconst input = <DefaultPreferencesEditorInput>editorInput;\n\n\t\tconst serialized: ISerializedDefaultPreferencesEditorInput = { resource: input.getResource().toString() };\n\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput {\n\t\tconst deserialized: ISerializedDefaultPreferencesEditorInput = JSON.parse(serializedEditorInput);\n\n\t\treturn instantiationService.createInstance(DefaultPreferencesEditorInput, URI.parse(deserialized.resource));\n\t}\n}\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(PreferencesEditorInput.ID, PreferencesEditorInputFactory);\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(DefaultPreferencesEditorInput.ID, DefaultPreferencesEditorInputFactory);\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(KeybindingsEditorInput.ID, KeybindingsEditorInputFactory);\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(SettingsEditor2Input.ID, SettingsEditor2InputFactory);\n\n// Contribute Global Actions\nconst category = nls.localize('preferences', \"Preferences\");\nconst registry = Registry.as<IWorkbenchActionRegistry>(Extensions.WorkbenchActions);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenRawDefaultSettingsAction, OpenRawDefaultSettingsAction.ID, OpenRawDefaultSettingsAction.LABEL), 'Preferences: Open Raw Default Settings', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenSettingsJsonAction, OpenSettingsJsonAction.ID, OpenSettingsJsonAction.LABEL), 'Preferences: Open Settings (JSON)', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenSettings2Action, OpenSettings2Action.ID, OpenSettings2Action.LABEL), 'Preferences: Open Settings (UI)', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenGlobalSettingsAction, OpenGlobalSettingsAction.ID, OpenGlobalSettingsAction.LABEL), 'Preferences: Open User Settings', category);\n\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenGlobalKeybindingsAction, OpenGlobalKeybindingsAction.ID, OpenGlobalKeybindingsAction.LABEL, { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_S) }), 'Preferences: Open Keyboard Shortcuts', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenDefaultKeybindingsFileAction, OpenDefaultKeybindingsFileAction.ID, OpenDefaultKeybindingsFileAction.LABEL), 'Preferences: Open Default Keyboard Shortcuts File', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(OpenGlobalKeybindingsFileAction, OpenGlobalKeybindingsFileAction.ID, OpenGlobalKeybindingsFileAction.LABEL, { primary: 0 }), 'Preferences: Open Keyboard Shortcuts File', category);\nregistry.registerWorkbenchAction(new SyncActionDescriptor(ConfigureLanguageBasedSettingsAction, ConfigureLanguageBasedSettingsAction.ID, ConfigureLanguageBasedSettingsAction.LABEL), 'Preferences: Configure Language Specific Settings...', category);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: SETTINGS_COMMAND_OPEN_SETTINGS,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: null,\n\tprimary: KeyMod.CtrlCmd | KeyCode.US_COMMA,\n\thandler: (accessor, args: any) => {\n\t\taccessor.get(IPreferencesService).openSettings();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_DEFINE,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_K),\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.defineKeybinding(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_DEFINE_WHEN,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.KEY_E),\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor && control.activeKeybindingEntry!.keybindingItem.keybinding) {\n\t\t\tcontrol.defineWhenExpression(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_REMOVE,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: KeyCode.Delete,\n\tmac: {\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyMod.CtrlCmd | KeyCode.Backspace)\n\t},\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.removeKeybinding(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_RESET,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: 0,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.resetKeybinding(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_SEARCH,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_F,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.focusSearch();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_RECORD_SEARCH_KEYS,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n\tprimary: KeyMod.Alt | KeyCode.KEY_K,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_K },\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.recordSearchKeys();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_SORTBY_PRECEDENCE,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR),\n\tprimary: KeyMod.Alt | KeyCode.KEY_P,\n\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_P },\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control && control instanceof KeybindingsEditor) {\n\t\t\tcontrol.toggleSortByPrecedence();\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_SHOW_SIMILAR,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: 0,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control) {\n\t\t\tcontrol.showSimilarKeybindings(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_COPY,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_C,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control) {\n\t\t\tcontrol.copyKeybinding(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_COPY_COMMAND,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDING_FOCUS),\n\tprimary: 0,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control) {\n\t\t\tcontrol.copyKeybindingCommand(control.activeKeybindingEntry!);\n\t\t}\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_FOCUS_KEYBINDINGS,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n\tprimary: KeyCode.DownArrow,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control) {\n\t\t\tcontrol.focusKeybindings();\n\t\t}\n\t}\n});\n\nclass PreferencesActionsContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@IWorkspaceContextService private readonly workpsaceContextService: IWorkspaceContextService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWindowService windowService: IWindowService\n\t) {\n\t\tsuper();\n\t\tMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\t\t\tcommand: {\n\t\t\t\tid: OpenGlobalKeybindingsAction.ID,\n\t\t\t\ttitle: OpenGlobalKeybindingsAction.LABEL,\n\t\t\t\ticonLocation: {\n\t\t\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n\t\t\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n\t\t\t\t}\n\t\t\t},\n\t\t\twhen: ResourceContextKey.Resource.isEqualTo(URI.file(environmentService.appKeybindingsPath).toString()),\n\t\t\tgroup: 'navigation',\n\t\t\torder: 1\n\t\t});\n\n\t\tconst commandId = '_workbench.openUserSettingsEditor';\n\t\tCommandsRegistry.registerCommand(commandId, () => this.preferencesService.openGlobalSettings(false));\n\t\tMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\t\t\tcommand: {\n\t\t\t\tid: commandId,\n\t\t\t\ttitle: OpenSettings2Action.LABEL,\n\t\t\t\ticonLocation: {\n\t\t\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n\t\t\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n\t\t\t\t}\n\t\t\t},\n\t\t\twhen: ResourceContextKey.Resource.isEqualTo(URI.file(environmentService.appSettingsPath).toString()),\n\t\t\tgroup: 'navigation',\n\t\t\torder: 1\n\t\t});\n\n\t\tthis.updatePreferencesEditorMenuItem();\n\t\tthis._register(workpsaceContextService.onDidChangeWorkbenchState(() => this.updatePreferencesEditorMenuItem()));\n\t\tthis._register(workpsaceContextService.onDidChangeWorkspaceFolders(() => this.updatePreferencesEditorMenuItemForWorkspaceFolders()));\n\n\t\textensionService.whenInstalledExtensionsRegistered()\n\t\t\t.then(() => {\n\t\t\t\tconst remoteAuthority = windowService.getConfiguration().remoteAuthority;\n\t\t\t\tconst hostLabel = labelService.getHostLabel(REMOTE_HOST_SCHEME, remoteAuthority) || remoteAuthority;\n\t\t\t\tconst label = nls.localize('openRemoteSettings', \"Open User Settings ({0})\", hostLabel);\n\t\t\t\tCommandsRegistry.registerCommand(OpenRemoteSettingsAction.ID, serviceAccessor => {\n\t\t\t\t\tserviceAccessor.get(IInstantiationService).createInstance(OpenRemoteSettingsAction, OpenRemoteSettingsAction.ID, label).run();\n\t\t\t\t});\n\t\t\t\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\t\t\t\tcommand: {\n\t\t\t\t\t\tid: OpenRemoteSettingsAction.ID,\n\t\t\t\t\t\ttitle: { value: label, original: `Preferences: Open User Settings (${hostLabel})` },\n\t\t\t\t\t\tcategory: nls.localize('preferencesCategory', \"Preferences\")\n\t\t\t\t\t},\n\t\t\t\t\twhen: IsRemoteContext\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate updatePreferencesEditorMenuItem() {\n\t\tconst commandId = '_workbench.openWorkspaceSettingsEditor';\n\t\tif (this.workpsaceContextService.getWorkbenchState() === WorkbenchState.WORKSPACE && !CommandsRegistry.getCommand(commandId)) {\n\t\t\tCommandsRegistry.registerCommand(commandId, () => this.preferencesService.openWorkspaceSettings(false));\n\t\t\tMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\t\t\t\tcommand: {\n\t\t\t\t\tid: commandId,\n\t\t\t\t\ttitle: OpenSettings2Action.LABEL,\n\t\t\t\t\ticonLocation: {\n\t\t\t\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n\t\t\t\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twhen: ContextKeyExpr.and(ResourceContextKey.Resource.isEqualTo(this.preferencesService.workspaceSettingsResource!.toString()), WorkbenchStateContext.isEqualTo('workspace')),\n\t\t\t\tgroup: 'navigation',\n\t\t\t\torder: 1\n\t\t\t});\n\t\t}\n\t\tthis.updatePreferencesEditorMenuItemForWorkspaceFolders();\n\t}\n\n\tprivate updatePreferencesEditorMenuItemForWorkspaceFolders() {\n\t\tfor (const folder of this.workpsaceContextService.getWorkspace().folders) {\n\t\t\tconst commandId = `_workbench.openFolderSettings.${folder.uri.toString()}`;\n\t\t\tif (!CommandsRegistry.getCommand(commandId)) {\n\t\t\t\tCommandsRegistry.registerCommand(commandId, () => {\n\t\t\t\t\tif (this.workpsaceContextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\t\t\treturn this.preferencesService.openWorkspaceSettings(false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.preferencesService.openFolderSettings(folder.uri, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\t\t\t\t\tcommand: {\n\t\t\t\t\t\tid: commandId,\n\t\t\t\t\t\ttitle: OpenSettings2Action.LABEL,\n\t\t\t\t\t\ticonLocation: {\n\t\t\t\t\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor.svg`)),\n\t\t\t\t\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/preferences-editor-inverse.svg`))\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\twhen: ContextKeyExpr.and(ResourceContextKey.Resource.isEqualTo(this.preferencesService.getFolderSettingsResource(folder.uri)!.toString())),\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: 1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(PreferencesActionsContribution, LifecyclePhase.Starting);\nworkbenchContributionsRegistry.registerWorkbenchContribution(PreferencesContribution, LifecyclePhase.Starting);\n\nCommandsRegistry.registerCommand(OPEN_FOLDER_SETTINGS_COMMAND, function (accessor: ServicesAccessor, resource: URI) {\n\tconst preferencesService = accessor.get(IPreferencesService);\n\treturn preferencesService.openFolderSettings(resource);\n});\n\nCommandsRegistry.registerCommand(OpenFolderSettingsAction.ID, serviceAccessor => {\n\tserviceAccessor.get(IInstantiationService).createInstance(OpenFolderSettingsAction, OpenFolderSettingsAction.ID, OpenFolderSettingsAction.LABEL).run();\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OpenFolderSettingsAction.ID,\n\t\ttitle: { value: OpenFolderSettingsAction.LABEL, original: 'Preferences: Open Folder Settings' },\n\t\tcategory: nls.localize('preferencesCategory', \"Preferences\")\n\t},\n\twhen: WorkbenchStateContext.isEqualTo('workspace')\n});\n\nCommandsRegistry.registerCommand(OpenWorkspaceSettingsAction.ID, serviceAccessor => {\n\tserviceAccessor.get(IInstantiationService).createInstance(OpenWorkspaceSettingsAction, OpenWorkspaceSettingsAction.ID, OpenWorkspaceSettingsAction.LABEL).run();\n});\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OpenWorkspaceSettingsAction.ID,\n\t\ttitle: { value: OpenWorkspaceSettingsAction.LABEL, original: 'Preferences: Open Workspace Settings' },\n\t\tcategory: nls.localize('preferencesCategory', \"Preferences\")\n\t},\n\twhen: WorkbenchStateContext.notEqualsTo('empty')\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: KEYBINDINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR, CONTEXT_KEYBINDINGS_SEARCH_FOCUS),\n\tprimary: KeyCode.Escape,\n\thandler: (accessor, args: any) => {\n\t\tconst control = accessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\t\tif (control) {\n\t\t\tcontrol.clearSearchResults();\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand(OpenGlobalKeybindingsFileAction.ID, serviceAccessor => {\n\tserviceAccessor.get(IInstantiationService).createInstance(OpenGlobalKeybindingsFileAction, OpenGlobalKeybindingsFileAction.ID, OpenGlobalKeybindingsFileAction.LABEL).run();\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: OpenGlobalKeybindingsFileAction.ID,\n\t\ttitle: OpenGlobalKeybindingsFileAction.LABEL,\n\t\ticonLocation: {\n\t\t\tlight: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg`)),\n\t\t\tdark: URI.parse(require.toUrl(`vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg`))\n\t\t}\n\t},\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR),\n\tgroup: 'navigation',\n});\n\nCommandsRegistry.registerCommand(KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS, serviceAccessor => {\n\tconst control = serviceAccessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\tif (control) {\n\t\tcontrol.search('@source:default');\n\t}\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: KEYBINDINGS_EDITOR_SHOW_DEFAULT_KEYBINDINGS,\n\t\ttitle: nls.localize('showDefaultKeybindings', \"Show Default Keybindings\")\n\t},\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR),\n\tgroup: '1_keyboard_preferences_actions'\n});\n\nCommandsRegistry.registerCommand(KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS, serviceAccessor => {\n\tconst control = serviceAccessor.get(IEditorService).activeControl as IKeybindingsEditor;\n\tif (control) {\n\t\tcontrol.search('@source:user');\n\t}\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: KEYBINDINGS_EDITOR_SHOW_USER_KEYBINDINGS,\n\t\ttitle: nls.localize('showUserKeybindings', \"Show User Keybindings\")\n\t},\n\twhen: ContextKeyExpr.and(CONTEXT_KEYBINDINGS_EDITOR),\n\tgroup: '1_keyboard_preferences_actions'\n});\n\nabstract class SettingsCommand extends Command {\n\n\tprotected getPreferencesEditor(accessor: ServicesAccessor): PreferencesEditor | SettingsEditor2 | null {\n\t\tconst activeControl = accessor.get(IEditorService).activeControl;\n\t\tif (activeControl instanceof PreferencesEditor || activeControl instanceof SettingsEditor2) {\n\t\t\treturn activeControl;\n\t\t}\n\n\t\treturn null;\n\t}\n\n}\nclass StartSearchDefaultSettingsCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor) {\n\t\t\tpreferencesEditor.focusSearch();\n\t\t}\n\t}\n}\nconst startSearchCommand = new StartSearchDefaultSettingsCommand({\n\tid: SETTINGS_EDITOR_COMMAND_SEARCH,\n\tprecondition: ContextKeyExpr.and(CONTEXT_SETTINGS_EDITOR),\n\tkbOpts: { primary: KeyMod.CtrlCmd | KeyCode.KEY_F, weight: KeybindingWeight.EditorContrib }\n});\nstartSearchCommand.register();\n\nclass ClearSearchResultsCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor) {\n\t\t\tpreferencesEditor.clearSearchResults();\n\t\t}\n\t}\n}\nconst clearSearchResultsCommand = new ClearSearchResultsCommand({\n\tid: SETTINGS_EDITOR_COMMAND_CLEAR_SEARCH_RESULTS,\n\tprecondition: CONTEXT_SETTINGS_SEARCH_FOCUS,\n\tkbOpts: { primary: KeyCode.Escape, weight: KeybindingWeight.EditorContrib }\n});\nclearSearchResultsCommand.register();\n\nclass FocusSettingsFileEditorCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof PreferencesEditor) {\n\t\t\tpreferencesEditor.focusSettingsFileEditor();\n\t\t} else if (preferencesEditor) {\n\t\t\tpreferencesEditor.focusSettings();\n\t\t}\n\t}\n}\nconst focusSettingsFileEditorCommand = new FocusSettingsFileEditorCommand({\n\tid: SETTINGS_EDITOR_COMMAND_FOCUS_FILE,\n\tprecondition: ContextKeyExpr.and(CONTEXT_SETTINGS_SEARCH_FOCUS, SuggestContext.Visible.toNegated()),\n\tkbOpts: { primary: KeyCode.DownArrow, weight: KeybindingWeight.EditorContrib }\n});\nfocusSettingsFileEditorCommand.register();\n\nconst focusSettingsFromSearchCommand = new FocusSettingsFileEditorCommand({\n\tid: SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_FROM_SEARCH,\n\tprecondition: ContextKeyExpr.and(CONTEXT_SETTINGS_SEARCH_FOCUS, SuggestContext.Visible.toNegated()),\n\tkbOpts: { primary: KeyCode.DownArrow, weight: KeybindingWeight.WorkbenchContrib }\n});\nfocusSettingsFromSearchCommand.register();\n\nclass FocusNextSearchResultCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof PreferencesEditor) {\n\t\t\tpreferencesEditor.focusNextResult();\n\t\t}\n\t}\n}\nconst focusNextSearchResultCommand = new FocusNextSearchResultCommand({\n\tid: SETTINGS_EDITOR_COMMAND_FOCUS_NEXT_SETTING,\n\tprecondition: CONTEXT_SETTINGS_SEARCH_FOCUS,\n\tkbOpts: { primary: KeyCode.Enter, weight: KeybindingWeight.EditorContrib }\n});\nfocusNextSearchResultCommand.register();\n\nclass FocusPreviousSearchResultCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof PreferencesEditor) {\n\t\t\tpreferencesEditor.focusPreviousResult();\n\t\t}\n\t}\n}\nconst focusPreviousSearchResultCommand = new FocusPreviousSearchResultCommand({\n\tid: SETTINGS_EDITOR_COMMAND_FOCUS_PREVIOUS_SETTING,\n\tprecondition: CONTEXT_SETTINGS_SEARCH_FOCUS,\n\tkbOpts: { primary: KeyMod.Shift | KeyCode.Enter, weight: KeybindingWeight.EditorContrib }\n});\nfocusPreviousSearchResultCommand.register();\n\nclass EditFocusedSettingCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof PreferencesEditor) {\n\t\t\tpreferencesEditor.editFocusedPreference();\n\t\t}\n\t}\n}\nconst editFocusedSettingCommand = new EditFocusedSettingCommand({\n\tid: SETTINGS_EDITOR_COMMAND_EDIT_FOCUSED_SETTING,\n\tprecondition: CONTEXT_SETTINGS_SEARCH_FOCUS,\n\tkbOpts: { primary: KeyMod.CtrlCmd | KeyCode.US_DOT, weight: KeybindingWeight.EditorContrib }\n});\neditFocusedSettingCommand.register();\n\nclass FocusSettingsListCommand extends SettingsCommand {\n\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof SettingsEditor2) {\n\t\t\tpreferencesEditor.focusSettings();\n\t\t}\n\t}\n}\n\nconst focusSettingsListCommand = new FocusSettingsListCommand({\n\tid: SETTINGS_EDITOR_COMMAND_FOCUS_SETTINGS_LIST,\n\tprecondition: ContextKeyExpr.and(CONTEXT_SETTINGS_EDITOR, CONTEXT_TOC_ROW_FOCUS),\n\tkbOpts: { primary: KeyCode.Enter, weight: KeybindingWeight.WorkbenchContrib }\n});\nfocusSettingsListCommand.register();\n\nclass ShowContextMenuCommand extends SettingsCommand {\n\trunCommand(accessor: ServicesAccessor, args: any): void {\n\t\tconst preferencesEditor = this.getPreferencesEditor(accessor);\n\t\tif (preferencesEditor instanceof SettingsEditor2) {\n\t\t\tpreferencesEditor.showContextMenu();\n\t\t}\n\t}\n}\n\nconst showContextMenuCommand = new ShowContextMenuCommand({\n\tid: SETTINGS_EDITOR_COMMAND_SHOW_CONTEXT_MENU,\n\tprecondition: ContextKeyExpr.and(CONTEXT_SETTINGS_EDITOR),\n\tkbOpts: { primary: KeyMod.Shift | KeyCode.F9, weight: KeybindingWeight.WorkbenchContrib }\n});\nshowContextMenuCommand.register();\n\nCommandsRegistry.registerCommand(SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON, serviceAccessor => {\n\tconst control = serviceAccessor.get(IEditorService).activeControl as SettingsEditor2;\n\tif (control instanceof SettingsEditor2) {\n\t\treturn control.switchToSettingsFile();\n\t}\n\n\treturn Promise.resolve(null);\n});\n\nCommandsRegistry.registerCommand(SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED, serviceAccessor => {\n\tconst control = serviceAccessor.get(IEditorService).activeControl as SettingsEditor2;\n\tif (control instanceof SettingsEditor2) {\n\t\tcontrol.focusSearch(`@${MODIFIED_SETTING_TAG}`);\n\t}\n});\n\nCommandsRegistry.registerCommand(SETTINGS_EDITOR_COMMAND_FILTER_ONLINE, serviceAccessor => {\n\tconst control = serviceAccessor.get(IEditorService).activeControl as SettingsEditor2;\n\tif (control instanceof SettingsEditor2) {\n\t\tcontrol.focusSearch(`@tag:usesOnlineServices`);\n\t}\n});\n\n// Preferences menu\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '1_settings',\n\tcommand: {\n\t\tid: SETTINGS_COMMAND_OPEN_SETTINGS,\n\t\ttitle: nls.localize({ key: 'miOpenSettings', comment: ['&& denotes a mnemonic'] }, \"&&Settings\")\n\t},\n\torder: 1\n});\n\nMenuRegistry.appendMenuItem(MenuId.MenubarPreferencesMenu, {\n\tgroup: '2_keybindings',\n\tcommand: {\n\t\tid: OpenGlobalKeybindingsAction.ID,\n\t\ttitle: nls.localize({ key: 'miOpenKeymap', comment: ['&& denotes a mnemonic'] }, \"&&Keyboard Shortcuts\")\n\t},\n\torder: 1\n});\n\n// Editor tool items\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: SETTINGS_EDITOR_COMMAND_SWITCH_TO_JSON,\n\t\ttitle: nls.localize('openSettingsJson', \"Open Settings (JSON)\"),\n\t\ticonLocation: {\n\t\t\tdark: URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json-inverse.svg')),\n\t\t\tlight: URI.parse(require.toUrl('vs/workbench/contrib/preferences/electron-browser/media/edit-json.svg'))\n\t\t}\n\t},\n\tgroup: 'navigation',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tCONTEXT_SETTINGS_EDITOR,\n\t\tCONTEXT_SETTINGS_JSON_EDITOR.toNegated()\n\t)\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: SETTINGS_EDITOR_COMMAND_FILTER_MODIFIED,\n\t\ttitle: nls.localize('filterModifiedLabel', \"Show modified settings\")\n\t},\n\tgroup: '1_filter',\n\torder: 1,\n\twhen: ContextKeyExpr.and(\n\t\tCONTEXT_SETTINGS_EDITOR,\n\t\tCONTEXT_SETTINGS_JSON_EDITOR.toNegated()\n\t)\n});\n\nMenuRegistry.appendMenuItem(MenuId.EditorTitle, {\n\tcommand: {\n\t\tid: SETTINGS_EDITOR_COMMAND_FILTER_ONLINE,\n\t\ttitle: nls.localize('filterOnlineServicesLabel', \"Show settings for online services\"),\n\t},\n\tgroup: '1_filter',\n\torder: 2,\n\twhen: ContextKeyExpr.and(\n\t\tCONTEXT_SETTINGS_EDITOR,\n\t\tCONTEXT_SETTINGS_JSON_EDITOR.toNegated()\n\t)\n});\n\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n\tgroup: '2_workspace',\n\torder: 20,\n\tcommand: {\n\t\tid: OPEN_FOLDER_SETTINGS_COMMAND,\n\t\ttitle: OPEN_FOLDER_SETTINGS_LABEL\n\t},\n\twhen: ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext)\n});\n"]}]}