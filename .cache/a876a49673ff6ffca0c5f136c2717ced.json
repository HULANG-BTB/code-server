{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/extensions/electron-browser/extensionProfileService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/event\", \"vs/platform/instantiation/common/instantiation\", \"vs/workbench/services/extensions/common/extensions\", \"vs/base/common/lifecycle\", \"vs/base/common/errors\", \"vs/base/browser/dom\", \"vs/workbench/browser/parts/statusbar/statusbar\", \"vs/platform/statusbar/common/statusbar\", \"vs/platform/registry/common/platform\", \"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsEditor\", \"vs/workbench/services/editor/common/editorService\", \"vs/platform/windows/common/windows\", \"vs/platform/dialogs/common/dialogs\", \"vs/base/node/ports\", \"vs/platform/product/node/product\", \"vs/workbench/contrib/extensions/electron-browser/runtimeExtensionsInput\", \"vs/platform/extensions/common/extensions\"], function (require, exports, nls, event_1, instantiation_1, extensions_1, lifecycle_1, errors_1, dom_1, statusbar_1, statusbar_2, platform_1, runtimeExtensionsEditor_1, editorService_1, windows_1, dialogs_1, ports_1, product_1, runtimeExtensionsInput_1, extensions_2) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    let ExtensionHostProfileService = class ExtensionHostProfileService extends lifecycle_1.Disposable {\n        constructor(_extensionService, _editorService, _instantiationService, _windowsService, _dialogService) {\n            super();\n            this._extensionService = _extensionService;\n            this._editorService = _editorService;\n            this._instantiationService = _instantiationService;\n            this._windowsService = _windowsService;\n            this._dialogService = _dialogService;\n            this._onDidChangeState = this._register(new event_1.Emitter());\n            this.onDidChangeState = this._onDidChangeState.event;\n            this._onDidChangeLastProfile = this._register(new event_1.Emitter());\n            this.onDidChangeLastProfile = this._onDidChangeLastProfile.event;\n            this._unresponsiveProfiles = new Map();\n            this._profile = null;\n            this._profileSession = null;\n            this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n        }\n        get state() { return this._state; }\n        get lastProfile() { return this._profile; }\n        _setState(state) {\n            if (this._state === state) {\n                return;\n            }\n            this._state = state;\n            if (this._state === runtimeExtensionsEditor_1.ProfileSessionState.Running) {\n                ProfileExtHostStatusbarItem.instance.show(() => {\n                    this.stopProfiling();\n                    this._editorService.openEditor(this._instantiationService.createInstance(runtimeExtensionsInput_1.RuntimeExtensionsInput), { revealIfOpened: true });\n                });\n            }\n            else if (this._state === runtimeExtensionsEditor_1.ProfileSessionState.Stopping) {\n                ProfileExtHostStatusbarItem.instance.hide();\n            }\n            this._onDidChangeState.fire(undefined);\n        }\n        startProfiling() {\n            if (this._state !== runtimeExtensionsEditor_1.ProfileSessionState.None) {\n                return null;\n            }\n            if (!this._extensionService.canProfileExtensionHost()) {\n                return this._dialogService.confirm({\n                    type: 'info',\n                    message: nls.localize('restart1', \"Profile Extensions\"),\n                    detail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", product_1.default.nameLong),\n                    primaryButton: nls.localize('restart3', \"Restart\"),\n                    secondaryButton: nls.localize('cancel', \"Cancel\")\n                }).then(res => {\n                    if (res.confirmed) {\n                        this._windowsService.relaunch({ addArgs: [`--inspect-extensions=${ports_1.randomPort()}`] });\n                    }\n                });\n            }\n            this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Starting);\n            return this._extensionService.startExtensionHostProfile().then((value) => {\n                this._profileSession = value;\n                this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Running);\n            }, (err) => {\n                errors_1.onUnexpectedError(err);\n                this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n            });\n        }\n        stopProfiling() {\n            if (this._state !== runtimeExtensionsEditor_1.ProfileSessionState.Running || !this._profileSession) {\n                return;\n            }\n            this._setState(runtimeExtensionsEditor_1.ProfileSessionState.Stopping);\n            this._profileSession.stop().then((result) => {\n                this._setLastProfile(result);\n                this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n            }, (err) => {\n                errors_1.onUnexpectedError(err);\n                this._setState(runtimeExtensionsEditor_1.ProfileSessionState.None);\n            });\n            this._profileSession = null;\n        }\n        _setLastProfile(profile) {\n            this._profile = profile;\n            this._onDidChangeLastProfile.fire(undefined);\n        }\n        getUnresponsiveProfile(extensionId) {\n            return this._unresponsiveProfiles.get(extensions_2.ExtensionIdentifier.toKey(extensionId));\n        }\n        setUnresponsiveProfile(extensionId, profile) {\n            this._unresponsiveProfiles.set(extensions_2.ExtensionIdentifier.toKey(extensionId), profile);\n            this._setLastProfile(profile);\n        }\n    };\n    ExtensionHostProfileService = __decorate([\n        __param(0, extensions_1.IExtensionService),\n        __param(1, editorService_1.IEditorService),\n        __param(2, instantiation_1.IInstantiationService),\n        __param(3, windows_1.IWindowsService),\n        __param(4, dialogs_1.IDialogService)\n    ], ExtensionHostProfileService);\n    exports.ExtensionHostProfileService = ExtensionHostProfileService;\n    class ProfileExtHostStatusbarItem {\n        constructor() {\n            ProfileExtHostStatusbarItem.instance = this;\n            this.toDispose = [];\n            this.timeStarted = 0;\n        }\n        show(clickHandler) {\n            this.clickHandler = clickHandler;\n            if (this.timeStarted === 0) {\n                this.timeStarted = new Date().getTime();\n                this.statusBarItem.hidden = false;\n                this.labelUpdater = setInterval(() => {\n                    this.updateLabel();\n                }, 1000);\n                this.updateLabel();\n            }\n        }\n        hide() {\n            this.clickHandler = null;\n            this.statusBarItem.hidden = true;\n            this.timeStarted = 0;\n            clearInterval(this.labelUpdater);\n            this.labelUpdater = null;\n        }\n        render(container) {\n            if (!this.statusBarItem && container) {\n                this.statusBarItem = dom_1.append(container, dom_1.$('.profileExtHost-statusbar-item'));\n                this.toDispose.push(dom_1.addDisposableListener(this.statusBarItem, 'click', () => {\n                    if (this.clickHandler) {\n                        this.clickHandler();\n                    }\n                }));\n                this.statusBarItem.title = nls.localize('selectAndStartDebug', \"Click to stop profiling.\");\n                const a = dom_1.append(this.statusBarItem, dom_1.$('a'));\n                dom_1.append(a, dom_1.$('.icon'));\n                this.label = dom_1.append(a, dom_1.$('span.label'));\n                this.updateLabel();\n                this.statusBarItem.hidden = true;\n            }\n            return this;\n        }\n        updateLabel() {\n            let label = 'Profiling Extension Host';\n            if (this.timeStarted > 0) {\n                let secondsRecoreded = (new Date().getTime() - this.timeStarted) / 1000;\n                label = `Profiling Extension Host (${Math.round(secondsRecoreded)} sec)`;\n            }\n            this.label.textContent = label;\n        }\n        dispose() {\n            this.toDispose = lifecycle_1.dispose(this.toDispose);\n        }\n    }\n    exports.ProfileExtHostStatusbarItem = ProfileExtHostStatusbarItem;\n    platform_1.Registry.as(statusbar_1.Extensions.Statusbar).registerStatusbarItem(new statusbar_1.StatusbarItemDescriptor(ProfileExtHostStatusbarItem, statusbar_2.StatusbarAlignment.RIGHT));\n});\n",null]}