{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorCommands.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorCommands.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nls = require(\"vs/nls\");\nvar types = require(\"vs/base/common/types\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar editorContextKeys_1 = require(\"vs/editor/common/editorContextKeys\");\nvar textDiffEditor_1 = require(\"vs/workbench/browser/parts/editor/textDiffEditor\");\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar quickOpen_1 = require(\"vs/platform/quickOpen/common/quickOpen\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar listWidget_1 = require(\"vs/base/browser/ui/list/listWidget\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar commands_1 = require(\"vs/platform/commands/common/commands\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nexports.CLOSE_SAVED_EDITORS_COMMAND_ID = 'workbench.action.closeUnmodifiedEditors';\nexports.CLOSE_EDITORS_IN_GROUP_COMMAND_ID = 'workbench.action.closeEditorsInGroup';\nexports.CLOSE_EDITORS_AND_GROUP_COMMAND_ID = 'workbench.action.closeEditorsAndGroup';\nexports.CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID = 'workbench.action.closeEditorsToTheRight';\nexports.CLOSE_EDITOR_COMMAND_ID = 'workbench.action.closeActiveEditor';\nexports.CLOSE_EDITOR_GROUP_COMMAND_ID = 'workbench.action.closeGroup';\nexports.CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID = 'workbench.action.closeOtherEditors';\nexports.MOVE_ACTIVE_EDITOR_COMMAND_ID = 'moveActiveEditor';\nexports.LAYOUT_EDITOR_GROUPS_COMMAND_ID = 'layoutEditorGroups';\nexports.KEEP_EDITOR_COMMAND_ID = 'workbench.action.keepEditor';\nexports.SHOW_EDITORS_IN_GROUP = 'workbench.action.showEditorsInGroup';\nexports.TOGGLE_DIFF_SIDE_BY_SIDE = 'toggle.diff.renderSideBySide';\nexports.GOTO_NEXT_CHANGE = 'workbench.action.compareEditor.nextChange';\nexports.GOTO_PREVIOUS_CHANGE = 'workbench.action.compareEditor.previousChange';\nexports.TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE = 'toggle.diff.ignoreTrimWhitespace';\nexports.SPLIT_EDITOR_UP = 'workbench.action.splitEditorUp';\nexports.SPLIT_EDITOR_DOWN = 'workbench.action.splitEditorDown';\nexports.SPLIT_EDITOR_LEFT = 'workbench.action.splitEditorLeft';\nexports.SPLIT_EDITOR_RIGHT = 'workbench.action.splitEditorRight';\nexports.NAVIGATE_ALL_EDITORS_GROUP_PREFIX = 'edt ';\nexports.NAVIGATE_IN_ACTIVE_GROUP_PREFIX = 'edt active ';\nexports.OPEN_EDITOR_AT_INDEX_COMMAND_ID = 'workbench.action.openEditorAtIndex';\nvar isActiveEditorMoveArg = function (arg) {\n    if (!types.isObject(arg)) {\n        return false;\n    }\n    if (!types.isString(arg.to)) {\n        return false;\n    }\n    if (!types.isUndefined(arg.by) && !types.isString(arg.by)) {\n        return false;\n    }\n    if (!types.isUndefined(arg.value) && !types.isNumber(arg.value)) {\n        return false;\n    }\n    return true;\n};\nfunction registerActiveEditorMoveCommand() {\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.MOVE_ACTIVE_EDITOR_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: editorContextKeys_1.EditorContextKeys.editorTextFocus,\n        primary: 0,\n        handler: function (accessor, args) { return moveActiveEditor(args, accessor); },\n        description: {\n            description: nls.localize('editorCommand.activeEditorMove.description', \"Move the active editor by tabs or groups\"),\n            args: [\n                {\n                    name: nls.localize('editorCommand.activeEditorMove.arg.name', \"Active editor move argument\"),\n                    description: nls.localize('editorCommand.activeEditorMove.arg.description', \"Argument Properties:\\n\\t* 'to': String value providing where to move.\\n\\t* 'by': String value providing the unit for move (by tab or by group).\\n\\t* 'value': Number value providing how many positions or an absolute position to move.\"),\n                    constraint: isActiveEditorMoveArg,\n                    schema: {\n                        'type': 'object',\n                        'required': ['to'],\n                        'properties': {\n                            'to': {\n                                'type': 'string',\n                                'enum': ['left', 'right']\n                            },\n                            'by': {\n                                'type': 'string',\n                                'enum': ['tab', 'group']\n                            },\n                            'value': {\n                                'type': 'number'\n                            }\n                        },\n                    }\n                }\n            ]\n        }\n    });\n}\nfunction moveActiveEditor(args, accessor) {\n    if (args === void 0) { args = Object.create(null); }\n    args.to = args.to || 'right';\n    args.by = args.by || 'tab';\n    args.value = typeof args.value === 'number' ? args.value : 1;\n    var activeControl = accessor.get(editorService_1.IEditorService).activeControl;\n    if (activeControl) {\n        switch (args.by) {\n            case 'tab':\n                return moveActiveTab(args, activeControl, accessor);\n            case 'group':\n                return moveActiveEditorToGroup(args, activeControl, accessor);\n        }\n    }\n}\nfunction moveActiveTab(args, control, accessor) {\n    var group = control.group;\n    var index = group.getIndexOfEditor(control.input);\n    switch (args.to) {\n        case 'first':\n            index = 0;\n            break;\n        case 'last':\n            index = group.count - 1;\n            break;\n        case 'left':\n            index = index - args.value;\n            break;\n        case 'right':\n            index = index + args.value;\n            break;\n        case 'center':\n            index = Math.round(group.count / 2) - 1;\n            break;\n        case 'position':\n            index = args.value - 1;\n            break;\n    }\n    index = index < 0 ? 0 : index >= group.count ? group.count - 1 : index;\n    group.moveEditor(control.input, group, { index: index });\n}\nfunction moveActiveEditorToGroup(args, control, accessor) {\n    var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n    var configurationService = accessor.get(configuration_1.IConfigurationService);\n    var sourceGroup = control.group;\n    var targetGroup;\n    switch (args.to) {\n        case 'left':\n            targetGroup = editorGroupService.findGroup({ direction: editorGroupsService_1.GroupDirection.LEFT }, sourceGroup);\n            if (!targetGroup) {\n                targetGroup = editorGroupService.addGroup(sourceGroup, editorGroupsService_1.GroupDirection.LEFT);\n            }\n            break;\n        case 'right':\n            targetGroup = editorGroupService.findGroup({ direction: editorGroupsService_1.GroupDirection.RIGHT }, sourceGroup);\n            if (!targetGroup) {\n                targetGroup = editorGroupService.addGroup(sourceGroup, editorGroupsService_1.GroupDirection.RIGHT);\n            }\n            break;\n        case 'up':\n            targetGroup = editorGroupService.findGroup({ direction: editorGroupsService_1.GroupDirection.UP }, sourceGroup);\n            if (!targetGroup) {\n                targetGroup = editorGroupService.addGroup(sourceGroup, editorGroupsService_1.GroupDirection.UP);\n            }\n            break;\n        case 'down':\n            targetGroup = editorGroupService.findGroup({ direction: editorGroupsService_1.GroupDirection.DOWN }, sourceGroup);\n            if (!targetGroup) {\n                targetGroup = editorGroupService.addGroup(sourceGroup, editorGroupsService_1.GroupDirection.DOWN);\n            }\n            break;\n        case 'first':\n            targetGroup = editorGroupService.findGroup({ location: editorGroupsService_1.GroupLocation.FIRST }, sourceGroup);\n            break;\n        case 'last':\n            targetGroup = editorGroupService.findGroup({ location: editorGroupsService_1.GroupLocation.LAST }, sourceGroup);\n            break;\n        case 'previous':\n            targetGroup = editorGroupService.findGroup({ location: editorGroupsService_1.GroupLocation.PREVIOUS }, sourceGroup);\n            break;\n        case 'next':\n            targetGroup = editorGroupService.findGroup({ location: editorGroupsService_1.GroupLocation.NEXT }, sourceGroup);\n            if (!targetGroup) {\n                targetGroup = editorGroupService.addGroup(sourceGroup, editorGroupsService_1.preferredSideBySideGroupDirection(configurationService));\n            }\n            break;\n        case 'center':\n            targetGroup = editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE)[(editorGroupService.count / 2) - 1];\n            break;\n        case 'position':\n            targetGroup = editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE)[args.value - 1];\n            break;\n    }\n    if (targetGroup) {\n        sourceGroup.moveEditor(control.input, targetGroup);\n        targetGroup.focus();\n    }\n}\nfunction registerEditorGroupsLayoutCommand() {\n    commands_1.CommandsRegistry.registerCommand(exports.LAYOUT_EDITOR_GROUPS_COMMAND_ID, function (accessor, args) {\n        if (!args || typeof args !== 'object') {\n            return;\n        }\n        var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n        editorGroupService.applyLayout(args);\n    });\n}\nfunction mergeAllGroups(editorGroupService) {\n    var target = editorGroupService.activeGroup;\n    editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.MOST_RECENTLY_ACTIVE).forEach(function (group) {\n        if (group === target) {\n            return; // keep target\n        }\n        editorGroupService.mergeGroup(group, target);\n    });\n}\nexports.mergeAllGroups = mergeAllGroups;\nfunction registerDiffEditorCommands() {\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.GOTO_NEXT_CHANGE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: editor_1.TextCompareEditorVisibleContext,\n        primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.F5,\n        handler: function (accessor) { return navigateInDiffEditor(accessor, true); }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.GOTO_PREVIOUS_CHANGE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: editor_1.TextCompareEditorVisibleContext,\n        primary: keyCodes_1.KeyMod.Alt | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.F5,\n        handler: function (accessor) { return navigateInDiffEditor(accessor, false); }\n    });\n    function navigateInDiffEditor(accessor, next) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var candidates = [editorService.activeControl].concat(editorService.visibleControls).filter(function (e) { return e instanceof textDiffEditor_1.TextDiffEditor; });\n        if (candidates.length > 0) {\n            next ? candidates[0].getDiffNavigator().next() : candidates[0].getDiffNavigator().previous();\n        }\n    }\n    function toggleDiffSideBySide(accessor) {\n        var configurationService = accessor.get(configuration_1.IConfigurationService);\n        var newValue = !configurationService.getValue('diffEditor.renderSideBySide');\n        configurationService.updateValue('diffEditor.renderSideBySide', newValue, configuration_1.ConfigurationTarget.USER);\n    }\n    function toggleDiffIgnoreTrimWhitespace(accessor) {\n        var configurationService = accessor.get(configuration_1.IConfigurationService);\n        var newValue = !configurationService.getValue('diffEditor.ignoreTrimWhitespace');\n        configurationService.updateValue('diffEditor.ignoreTrimWhitespace', newValue, configuration_1.ConfigurationTarget.USER);\n    }\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.TOGGLE_DIFF_SIDE_BY_SIDE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor) { return toggleDiffSideBySide(accessor); }\n    });\n    actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.CommandPalette, {\n        command: {\n            id: exports.TOGGLE_DIFF_SIDE_BY_SIDE,\n            title: {\n                value: nls.localize('toggleInlineView', \"Toggle Inline View\"),\n                original: 'Compare: Toggle Inline View'\n            },\n            category: nls.localize('compare', \"Compare\")\n        },\n        when: contextkey_1.ContextKeyExpr.has('textCompareEditorActive')\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor) { return toggleDiffIgnoreTrimWhitespace(accessor); }\n    });\n}\nfunction registerOpenEditorAtIndexCommands() {\n    var openEditorAtIndex = function (accessor, editorIndex) {\n        var editorService = accessor.get(editorService_1.IEditorService);\n        var activeControl = editorService.activeControl;\n        if (activeControl) {\n            var editor = activeControl.group.getEditor(editorIndex);\n            if (editor) {\n                editorService.openEditor(editor);\n            }\n        }\n    };\n    // This command takes in the editor index number to open as an argument\n    commands_1.CommandsRegistry.registerCommand({\n        id: exports.OPEN_EDITOR_AT_INDEX_COMMAND_ID,\n        handler: openEditorAtIndex\n    });\n    var _loop_1 = function (i) {\n        var editorIndex = i;\n        var visibleIndex = i + 1;\n        keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: exports.OPEN_EDITOR_AT_INDEX_COMMAND_ID + visibleIndex,\n            weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n            when: undefined,\n            primary: keyCodes_1.KeyMod.Alt | toKeyCode(visibleIndex),\n            mac: { primary: keyCodes_1.KeyMod.WinCtrl | toKeyCode(visibleIndex) },\n            handler: function (accessor) { return openEditorAtIndex(accessor, editorIndex); }\n        });\n    };\n    // Keybindings to focus a specific index in the tab folder if tabs are enabled\n    for (var i = 0; i < 9; i++) {\n        _loop_1(i);\n    }\n    function toKeyCode(index) {\n        switch (index) {\n            case 0: return keyCodes_1.KeyCode.KEY_0;\n            case 1: return keyCodes_1.KeyCode.KEY_1;\n            case 2: return keyCodes_1.KeyCode.KEY_2;\n            case 3: return keyCodes_1.KeyCode.KEY_3;\n            case 4: return keyCodes_1.KeyCode.KEY_4;\n            case 5: return keyCodes_1.KeyCode.KEY_5;\n            case 6: return keyCodes_1.KeyCode.KEY_6;\n            case 7: return keyCodes_1.KeyCode.KEY_7;\n            case 8: return keyCodes_1.KeyCode.KEY_8;\n            case 9: return keyCodes_1.KeyCode.KEY_9;\n        }\n        throw new Error('invalid index');\n    }\n}\nfunction registerFocusEditorGroupAtIndexCommands() {\n    var _loop_2 = function (groupIndex) {\n        keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n            id: toCommandId(groupIndex),\n            weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n            when: undefined,\n            primary: keyCodes_1.KeyMod.CtrlCmd | toKeyCode(groupIndex),\n            handler: function (accessor) {\n                var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n                var configurationService = accessor.get(configuration_1.IConfigurationService);\n                // To keep backwards compatibility (pre-grid), allow to focus a group\n                // that does not exist as long as it is the next group after the last\n                // opened group. Otherwise we return.\n                if (groupIndex > editorGroupService.count) {\n                    return;\n                }\n                // Group exists: just focus\n                var groups = editorGroupService.getGroups(editorGroupsService_1.GroupsOrder.GRID_APPEARANCE);\n                if (groups[groupIndex]) {\n                    return groups[groupIndex].focus();\n                }\n                // Group does not exist: create new by splitting the active one of the last group\n                var direction = editorGroupsService_1.preferredSideBySideGroupDirection(configurationService);\n                var lastGroup = editorGroupService.findGroup({ location: editorGroupsService_1.GroupLocation.LAST });\n                var newGroup = editorGroupService.addGroup(lastGroup, direction);\n                // Focus\n                newGroup.focus();\n            }\n        });\n    };\n    // Keybindings to focus a specific group (2-8) in the editor area\n    for (var groupIndex = 1; groupIndex < 8; groupIndex++) {\n        _loop_2(groupIndex);\n    }\n    function toCommandId(index) {\n        switch (index) {\n            case 1: return 'workbench.action.focusSecondEditorGroup';\n            case 2: return 'workbench.action.focusThirdEditorGroup';\n            case 3: return 'workbench.action.focusFourthEditorGroup';\n            case 4: return 'workbench.action.focusFifthEditorGroup';\n            case 5: return 'workbench.action.focusSixthEditorGroup';\n            case 6: return 'workbench.action.focusSeventhEditorGroup';\n            case 7: return 'workbench.action.focusEighthEditorGroup';\n        }\n        throw new Error('Invalid index');\n    }\n    function toKeyCode(index) {\n        switch (index) {\n            case 1: return keyCodes_1.KeyCode.KEY_2;\n            case 2: return keyCodes_1.KeyCode.KEY_3;\n            case 3: return keyCodes_1.KeyCode.KEY_4;\n            case 4: return keyCodes_1.KeyCode.KEY_5;\n            case 5: return keyCodes_1.KeyCode.KEY_6;\n            case 6: return keyCodes_1.KeyCode.KEY_7;\n            case 7: return keyCodes_1.KeyCode.KEY_8;\n        }\n        throw new Error('Invalid index');\n    }\n}\nfunction splitEditor(editorGroupService, direction, context) {\n    var sourceGroup;\n    if (context && typeof context.groupId === 'number') {\n        sourceGroup = editorGroupService.getGroup(context.groupId);\n    }\n    else {\n        sourceGroup = editorGroupService.activeGroup;\n    }\n    if (!sourceGroup) {\n        return;\n    }\n    // Add group\n    var newGroup = editorGroupService.addGroup(sourceGroup, direction);\n    // Split editor (if it can be split)\n    var editorToCopy;\n    if (context && typeof context.editorIndex === 'number') {\n        editorToCopy = sourceGroup.getEditor(context.editorIndex);\n    }\n    else {\n        editorToCopy = sourceGroup.activeEditor;\n    }\n    if (editorToCopy && editorToCopy.supportsSplitEditor()) {\n        sourceGroup.copyEditor(editorToCopy, newGroup);\n    }\n    // Focus\n    newGroup.focus();\n}\nexports.splitEditor = splitEditor;\nfunction registerSplitEditorCommands() {\n    [\n        { id: exports.SPLIT_EDITOR_UP, direction: editorGroupsService_1.GroupDirection.UP },\n        { id: exports.SPLIT_EDITOR_DOWN, direction: editorGroupsService_1.GroupDirection.DOWN },\n        { id: exports.SPLIT_EDITOR_LEFT, direction: editorGroupsService_1.GroupDirection.LEFT },\n        { id: exports.SPLIT_EDITOR_RIGHT, direction: editorGroupsService_1.GroupDirection.RIGHT }\n    ].forEach(function (_a) {\n        var id = _a.id, direction = _a.direction;\n        commands_1.CommandsRegistry.registerCommand(id, function (accessor, resourceOrContext, context) {\n            splitEditor(accessor.get(editorGroupsService_1.IEditorGroupsService), direction, getCommandsContext(resourceOrContext, context));\n        });\n    });\n}\nfunction registerCloseEditorCommands() {\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_SAVED_EDITORS_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_U),\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(listService_1.IListService), editorGroupService);\n            var activeGroup = editorGroupService.activeGroup;\n            if (contexts.length === 0) {\n                contexts.push({ groupId: activeGroup.id }); // active group as fallback\n            }\n            return Promise.all(arrays_1.distinct(contexts.map(function (c) { return c.groupId; })).map(function (groupId) {\n                var group = editorGroupService.getGroup(groupId);\n                if (group) {\n                    return group.closeEditors({ savedOnly: true });\n                }\n                return Promise.resolve();\n            }));\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_EDITORS_IN_GROUP_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.KEY_W),\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(listService_1.IListService), editorGroupService);\n            var distinctGroupIds = arrays_1.distinct(contexts.map(function (c) { return c.groupId; }));\n            if (distinctGroupIds.length === 0) {\n                distinctGroupIds.push(editorGroupService.activeGroup.id);\n            }\n            return Promise.all(distinctGroupIds.map(function (groupId) {\n                var group = editorGroupService.getGroup(groupId);\n                if (group) {\n                    return group.closeAllEditors();\n                }\n                return Promise.resolve();\n            }));\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_EDITOR_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_W,\n        win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F4, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_W] },\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(listService_1.IListService), editorGroupService);\n            var activeGroup = editorGroupService.activeGroup;\n            if (contexts.length === 0 && activeGroup.activeEditor) {\n                contexts.push({ groupId: activeGroup.id, editorIndex: activeGroup.getIndexOfEditor(activeGroup.activeEditor) }); // active editor as fallback\n            }\n            var groupIds = arrays_1.distinct(contexts.map(function (context) { return context.groupId; }));\n            return Promise.all(groupIds.map(function (groupId) {\n                var group = editorGroupService.getGroup(groupId);\n                if (group) {\n                    var editors = arrays_1.coalesce(contexts\n                        .filter(function (context) { return context.groupId === groupId; })\n                        .map(function (context) { return typeof context.editorIndex === 'number' ? group.getEditor(context.editorIndex) : group.activeEditor; }));\n                    return group.closeEditors(editors);\n                }\n                return Promise.resolve();\n            }));\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_EDITOR_GROUP_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: contextkey_1.ContextKeyExpr.and(editor_1.ActiveEditorGroupEmptyContext, editor_1.MultipleEditorGroupsContext),\n        primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_W,\n        win: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.F4, secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_W] },\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var commandsContext = getCommandsContext(resourceOrContext, context);\n            var group;\n            if (commandsContext && typeof commandsContext.groupId === 'number') {\n                group = editorGroupService.getGroup(commandsContext.groupId);\n            }\n            else {\n                group = editorGroupService.activeGroup;\n            }\n            if (group) {\n                editorGroupService.removeGroup(group);\n            }\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Alt | keyCodes_1.KeyCode.KEY_T },\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(listService_1.IListService), editorGroupService);\n            var activeGroup = editorGroupService.activeGroup;\n            if (contexts.length === 0 && activeGroup.activeEditor) {\n                contexts.push({ groupId: activeGroup.id, editorIndex: activeGroup.getIndexOfEditor(activeGroup.activeEditor) }); // active editor as fallback\n            }\n            var groupIds = arrays_1.distinct(contexts.map(function (context) { return context.groupId; }));\n            return Promise.all(groupIds.map(function (groupId) {\n                var group = editorGroupService.getGroup(groupId);\n                if (group) {\n                    var editors_1 = contexts\n                        .filter(function (context) { return context.groupId === groupId; })\n                        .map(function (context) { return typeof context.editorIndex === 'number' ? group.getEditor(context.editorIndex) : group.activeEditor; });\n                    var editorsToClose = group.editors.filter(function (e) { return editors_1.indexOf(e) === -1; });\n                    return group.closeEditors(editorsToClose);\n                }\n                return Promise.resolve();\n            }));\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var _a = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context)), group = _a.group, editor = _a.editor;\n            if (group && editor) {\n                return group.closeEditors({ direction: editor_1.CloseDirection.RIGHT, except: editor });\n            }\n            return Promise.resolve(false);\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.KEEP_EDITOR_COMMAND_ID,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: keyCodes_1.KeyChord(keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_K, keyCodes_1.KeyCode.Enter),\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var _a = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context)), group = _a.group, editor = _a.editor;\n            if (group && editor) {\n                return group.pinEditor(editor);\n            }\n            return Promise.resolve(false);\n        }\n    });\n    keybindingsRegistry_1.KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: exports.SHOW_EDITORS_IN_GROUP,\n        weight: keybindingsRegistry_1.KeybindingWeight.WorkbenchContrib,\n        when: undefined,\n        primary: undefined,\n        handler: function (accessor, resourceOrContext, context) {\n            var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n            var quickOpenService = accessor.get(quickOpen_1.IQuickOpenService);\n            if (editorGroupService.count <= 1) {\n                return quickOpenService.show(exports.NAVIGATE_ALL_EDITORS_GROUP_PREFIX);\n            }\n            var commandsContext = getCommandsContext(resourceOrContext, context);\n            if (commandsContext && typeof commandsContext.groupId === 'number') {\n                var group = editorGroupService.getGroup(commandsContext.groupId);\n                if (group) {\n                    editorGroupService.activateGroup(group); // we need the group to be active\n                }\n            }\n            return quickOpenService.show(exports.NAVIGATE_IN_ACTIVE_GROUP_PREFIX);\n        }\n    });\n    commands_1.CommandsRegistry.registerCommand(exports.CLOSE_EDITORS_AND_GROUP_COMMAND_ID, function (accessor, resourceOrContext, context) {\n        var editorGroupService = accessor.get(editorGroupsService_1.IEditorGroupsService);\n        var group = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context)).group;\n        if (group) {\n            return group.closeAllEditors().then(function () {\n                if (group.count === 0 && editorGroupService.getGroup(group.id) /* could be gone by now */) {\n                    editorGroupService.removeGroup(group); // only remove group if it is now empty\n                }\n            });\n        }\n        return undefined;\n    });\n}\nfunction getCommandsContext(resourceOrContext, context) {\n    if (uri_1.URI.isUri(resourceOrContext)) {\n        return context;\n    }\n    if (resourceOrContext && typeof resourceOrContext.groupId === 'number') {\n        return resourceOrContext;\n    }\n    if (context && typeof context.groupId === 'number') {\n        return context;\n    }\n    return undefined;\n}\nfunction resolveCommandsContext(editorGroupService, context) {\n    // Resolve from context\n    var group = context && typeof context.groupId === 'number' ? editorGroupService.getGroup(context.groupId) : undefined;\n    var editor = group && context && typeof context.editorIndex === 'number' ? types.withNullAsUndefined(group.getEditor(context.editorIndex)) : undefined;\n    var control = group ? group.activeControl : undefined;\n    // Fallback to active group as needed\n    if (!group) {\n        group = editorGroupService.activeGroup;\n        editor = group.activeEditor;\n        control = group.activeControl;\n    }\n    return { group: group, editor: editor, control: control };\n}\nfunction getMultiSelectedEditorContexts(editorContext, listService, editorGroupService) {\n    // First check for a focused list to return the selected items from\n    var list = listService.lastFocusedList;\n    if (list instanceof listWidget_1.List && list.getHTMLElement() === document.activeElement) {\n        var elementToContext = function (element) {\n            if (isEditorGroup(element)) {\n                return { groupId: element.id, editorIndex: undefined };\n            }\n            var group = editorGroupService.getGroup(element.groupId);\n            return { groupId: element.groupId, editorIndex: group ? group.getIndexOfEditor(element.editor) : -1 };\n        };\n        var onlyEditorGroupAndEditor = function (e) { return isEditorGroup(e) || isEditorIdentifier(e); };\n        var focusedElements = list.getFocusedElements().filter(onlyEditorGroupAndEditor);\n        var focus_1 = editorContext ? editorContext : focusedElements.length ? focusedElements.map(elementToContext)[0] : undefined; // need to take into account when editor context is { group: group }\n        if (focus_1) {\n            var selection = list.getSelectedElements().filter(onlyEditorGroupAndEditor);\n            // Only respect selection if it contains focused element\n            if (selection && selection.some(function (s) {\n                if (isEditorGroup(s)) {\n                    return s.id === focus_1.groupId;\n                }\n                var group = editorGroupService.getGroup(s.groupId);\n                return s.groupId === focus_1.groupId && (group ? group.getIndexOfEditor(s.editor) : -1) === focus_1.editorIndex;\n            })) {\n                return selection.map(elementToContext);\n            }\n            return [focus_1];\n        }\n    }\n    // Otherwise go with passed in context\n    return !!editorContext ? [editorContext] : [];\n}\nexports.getMultiSelectedEditorContexts = getMultiSelectedEditorContexts;\nfunction isEditorGroup(thing) {\n    var group = thing;\n    return group && typeof group.id === 'number' && Array.isArray(group.editors);\n}\nfunction isEditorIdentifier(thing) {\n    var identifier = thing;\n    return identifier && typeof identifier.groupId === 'number';\n}\nfunction setup() {\n    registerActiveEditorMoveCommand();\n    registerEditorGroupsLayoutCommand();\n    registerDiffEditorCommands();\n    registerOpenEditorAtIndexCommands();\n    registerCloseEditorCommands();\n    registerFocusEditorGroupAtIndexCommands();\n    registerSplitEditorCommands();\n}\nexports.setup = setup;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorCommands.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/parts/editor/editorCommands.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as types from 'vs/base/common/types';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { TextCompareEditorVisibleContext, EditorInput, IEditorIdentifier, IEditorCommandsContext, ActiveEditorGroupEmptyContext, MultipleEditorGroupsContext, CloseDirection, IEditor, IEditorInput } from 'vs/workbench/common/editor';\nimport { IEditorService, IVisibleEditor } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { TextDiffEditor } from 'vs/workbench/browser/parts/editor/textDiffEditor';\nimport { KeyMod, KeyCode, KeyChord } from 'vs/base/common/keyCodes';\nimport { URI } from 'vs/base/common/uri';\nimport { IQuickOpenService } from 'vs/platform/quickOpen/common/quickOpen';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { List } from 'vs/base/browser/ui/list/listWidget';\nimport { distinct, coalesce } from 'vs/base/common/arrays';\nimport { IEditorGroupsService, IEditorGroup, GroupDirection, GroupLocation, GroupsOrder, preferredSideBySideGroupDirection, EditorGroupLayout } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { CommandsRegistry, ICommandHandler } from 'vs/platform/commands/common/commands';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\n\nexport const CLOSE_SAVED_EDITORS_COMMAND_ID = 'workbench.action.closeUnmodifiedEditors';\nexport const CLOSE_EDITORS_IN_GROUP_COMMAND_ID = 'workbench.action.closeEditorsInGroup';\nexport const CLOSE_EDITORS_AND_GROUP_COMMAND_ID = 'workbench.action.closeEditorsAndGroup';\nexport const CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID = 'workbench.action.closeEditorsToTheRight';\nexport const CLOSE_EDITOR_COMMAND_ID = 'workbench.action.closeActiveEditor';\nexport const CLOSE_EDITOR_GROUP_COMMAND_ID = 'workbench.action.closeGroup';\nexport const CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID = 'workbench.action.closeOtherEditors';\n\nexport const MOVE_ACTIVE_EDITOR_COMMAND_ID = 'moveActiveEditor';\nexport const LAYOUT_EDITOR_GROUPS_COMMAND_ID = 'layoutEditorGroups';\nexport const KEEP_EDITOR_COMMAND_ID = 'workbench.action.keepEditor';\nexport const SHOW_EDITORS_IN_GROUP = 'workbench.action.showEditorsInGroup';\n\nexport const TOGGLE_DIFF_SIDE_BY_SIDE = 'toggle.diff.renderSideBySide';\nexport const GOTO_NEXT_CHANGE = 'workbench.action.compareEditor.nextChange';\nexport const GOTO_PREVIOUS_CHANGE = 'workbench.action.compareEditor.previousChange';\nexport const TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE = 'toggle.diff.ignoreTrimWhitespace';\n\nexport const SPLIT_EDITOR_UP = 'workbench.action.splitEditorUp';\nexport const SPLIT_EDITOR_DOWN = 'workbench.action.splitEditorDown';\nexport const SPLIT_EDITOR_LEFT = 'workbench.action.splitEditorLeft';\nexport const SPLIT_EDITOR_RIGHT = 'workbench.action.splitEditorRight';\n\nexport const NAVIGATE_ALL_EDITORS_GROUP_PREFIX = 'edt ';\nexport const NAVIGATE_IN_ACTIVE_GROUP_PREFIX = 'edt active ';\n\nexport const OPEN_EDITOR_AT_INDEX_COMMAND_ID = 'workbench.action.openEditorAtIndex';\n\nexport interface ActiveEditorMoveArguments {\n\tto: 'first' | 'last' | 'left' | 'right' | 'up' | 'down' | 'center' | 'position' | 'previous' | 'next';\n\tby: 'tab' | 'group';\n\tvalue: number;\n}\n\nconst isActiveEditorMoveArg = function (arg: ActiveEditorMoveArguments): boolean {\n\tif (!types.isObject(arg)) {\n\t\treturn false;\n\t}\n\n\tif (!types.isString(arg.to)) {\n\t\treturn false;\n\t}\n\n\tif (!types.isUndefined(arg.by) && !types.isString(arg.by)) {\n\t\treturn false;\n\t}\n\n\tif (!types.isUndefined(arg.value) && !types.isNumber(arg.value)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nfunction registerActiveEditorMoveCommand(): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: MOVE_ACTIVE_EDITOR_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: EditorContextKeys.editorTextFocus,\n\t\tprimary: 0,\n\t\thandler: (accessor, args: any) => moveActiveEditor(args, accessor),\n\t\tdescription: {\n\t\t\tdescription: nls.localize('editorCommand.activeEditorMove.description', \"Move the active editor by tabs or groups\"),\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tname: nls.localize('editorCommand.activeEditorMove.arg.name', \"Active editor move argument\"),\n\t\t\t\t\tdescription: nls.localize('editorCommand.activeEditorMove.arg.description', \"Argument Properties:\\n\\t* 'to': String value providing where to move.\\n\\t* 'by': String value providing the unit for move (by tab or by group).\\n\\t* 'value': Number value providing how many positions or an absolute position to move.\"),\n\t\t\t\t\tconstraint: isActiveEditorMoveArg,\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'required': ['to'],\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'to': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t'enum': ['left', 'right']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'by': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t\t'enum': ['tab', 'group']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\t\t'type': 'number'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n}\n\nfunction moveActiveEditor(args: ActiveEditorMoveArguments = Object.create(null), accessor: ServicesAccessor): void {\n\targs.to = args.to || 'right';\n\targs.by = args.by || 'tab';\n\targs.value = typeof args.value === 'number' ? args.value : 1;\n\n\tconst activeControl = accessor.get(IEditorService).activeControl;\n\tif (activeControl) {\n\t\tswitch (args.by) {\n\t\t\tcase 'tab':\n\t\t\t\treturn moveActiveTab(args, activeControl, accessor);\n\t\t\tcase 'group':\n\t\t\t\treturn moveActiveEditorToGroup(args, activeControl, accessor);\n\t\t}\n\t}\n}\n\nfunction moveActiveTab(args: ActiveEditorMoveArguments, control: IVisibleEditor, accessor: ServicesAccessor): void {\n\tconst group = control.group;\n\tlet index = group.getIndexOfEditor(control.input);\n\tswitch (args.to) {\n\t\tcase 'first':\n\t\t\tindex = 0;\n\t\t\tbreak;\n\t\tcase 'last':\n\t\t\tindex = group.count - 1;\n\t\t\tbreak;\n\t\tcase 'left':\n\t\t\tindex = index - args.value;\n\t\t\tbreak;\n\t\tcase 'right':\n\t\t\tindex = index + args.value;\n\t\t\tbreak;\n\t\tcase 'center':\n\t\t\tindex = Math.round(group.count / 2) - 1;\n\t\t\tbreak;\n\t\tcase 'position':\n\t\t\tindex = args.value - 1;\n\t\t\tbreak;\n\t}\n\n\tindex = index < 0 ? 0 : index >= group.count ? group.count - 1 : index;\n\tgroup.moveEditor(control.input, group, { index });\n}\n\nfunction moveActiveEditorToGroup(args: ActiveEditorMoveArguments, control: IVisibleEditor, accessor: ServicesAccessor): void {\n\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst sourceGroup = control.group;\n\tlet targetGroup: IEditorGroup | undefined;\n\n\tswitch (args.to) {\n\t\tcase 'left':\n\t\t\ttargetGroup = editorGroupService.findGroup({ direction: GroupDirection.LEFT }, sourceGroup);\n\t\t\tif (!targetGroup) {\n\t\t\t\ttargetGroup = editorGroupService.addGroup(sourceGroup, GroupDirection.LEFT);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'right':\n\t\t\ttargetGroup = editorGroupService.findGroup({ direction: GroupDirection.RIGHT }, sourceGroup);\n\t\t\tif (!targetGroup) {\n\t\t\t\ttargetGroup = editorGroupService.addGroup(sourceGroup, GroupDirection.RIGHT);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'up':\n\t\t\ttargetGroup = editorGroupService.findGroup({ direction: GroupDirection.UP }, sourceGroup);\n\t\t\tif (!targetGroup) {\n\t\t\t\ttargetGroup = editorGroupService.addGroup(sourceGroup, GroupDirection.UP);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'down':\n\t\t\ttargetGroup = editorGroupService.findGroup({ direction: GroupDirection.DOWN }, sourceGroup);\n\t\t\tif (!targetGroup) {\n\t\t\t\ttargetGroup = editorGroupService.addGroup(sourceGroup, GroupDirection.DOWN);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'first':\n\t\t\ttargetGroup = editorGroupService.findGroup({ location: GroupLocation.FIRST }, sourceGroup);\n\t\t\tbreak;\n\t\tcase 'last':\n\t\t\ttargetGroup = editorGroupService.findGroup({ location: GroupLocation.LAST }, sourceGroup);\n\t\t\tbreak;\n\t\tcase 'previous':\n\t\t\ttargetGroup = editorGroupService.findGroup({ location: GroupLocation.PREVIOUS }, sourceGroup);\n\t\t\tbreak;\n\t\tcase 'next':\n\t\t\ttargetGroup = editorGroupService.findGroup({ location: GroupLocation.NEXT }, sourceGroup);\n\t\t\tif (!targetGroup) {\n\t\t\t\ttargetGroup = editorGroupService.addGroup(sourceGroup, preferredSideBySideGroupDirection(configurationService));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'center':\n\t\t\ttargetGroup = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[(editorGroupService.count / 2) - 1];\n\t\t\tbreak;\n\t\tcase 'position':\n\t\t\ttargetGroup = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[args.value - 1];\n\t\t\tbreak;\n\t}\n\n\tif (targetGroup) {\n\t\tsourceGroup.moveEditor(control.input, targetGroup);\n\t\ttargetGroup.focus();\n\t}\n}\n\nfunction registerEditorGroupsLayoutCommand(): void {\n\tCommandsRegistry.registerCommand(LAYOUT_EDITOR_GROUPS_COMMAND_ID, (accessor: ServicesAccessor, args: EditorGroupLayout) => {\n\t\tif (!args || typeof args !== 'object') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\teditorGroupService.applyLayout(args);\n\t});\n}\n\nexport function mergeAllGroups(editorGroupService: IEditorGroupsService): void {\n\tconst target = editorGroupService.activeGroup;\n\teditorGroupService.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE).forEach(group => {\n\t\tif (group === target) {\n\t\t\treturn; // keep target\n\t\t}\n\n\t\teditorGroupService.mergeGroup(group, target);\n\t});\n}\n\nfunction registerDiffEditorCommands(): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_NEXT_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyCode.F5,\n\t\thandler: accessor => navigateInDiffEditor(accessor, true)\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: GOTO_PREVIOUS_CHANGE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: TextCompareEditorVisibleContext,\n\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.F5,\n\t\thandler: accessor => navigateInDiffEditor(accessor, false)\n\t});\n\n\tfunction navigateInDiffEditor(accessor: ServicesAccessor, next: boolean): void {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst candidates = [editorService.activeControl, ...editorService.visibleControls].filter(e => e instanceof TextDiffEditor);\n\n\t\tif (candidates.length > 0) {\n\t\t\tnext ? (<TextDiffEditor>candidates[0]).getDiffNavigator().next() : (<TextDiffEditor>candidates[0]).getDiffNavigator().previous();\n\t\t}\n\t}\n\n\tfunction toggleDiffSideBySide(accessor: ServicesAccessor): void {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst newValue = !configurationService.getValue<boolean>('diffEditor.renderSideBySide');\n\t\tconfigurationService.updateValue('diffEditor.renderSideBySide', newValue, ConfigurationTarget.USER);\n\t}\n\n\tfunction toggleDiffIgnoreTrimWhitespace(accessor: ServicesAccessor): void {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tconst newValue = !configurationService.getValue<boolean>('diffEditor.ignoreTrimWhitespace');\n\t\tconfigurationService.updateValue('diffEditor.ignoreTrimWhitespace', newValue, ConfigurationTarget.USER);\n\t}\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: accessor => toggleDiffSideBySide(accessor)\n\t});\n\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\t\tcommand: {\n\t\t\tid: TOGGLE_DIFF_SIDE_BY_SIDE,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('toggleInlineView', \"Toggle Inline View\"),\n\t\t\t\toriginal: 'Compare: Toggle Inline View'\n\t\t\t},\n\t\t\tcategory: nls.localize('compare', \"Compare\")\n\t\t},\n\t\twhen: ContextKeyExpr.has('textCompareEditorActive')\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: accessor => toggleDiffIgnoreTrimWhitespace(accessor)\n\t});\n}\n\nfunction registerOpenEditorAtIndexCommands(): void {\n\tconst openEditorAtIndex: ICommandHandler = (accessor: ServicesAccessor, editorIndex: number): void => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeControl = editorService.activeControl;\n\t\tif (activeControl) {\n\t\t\tconst editor = activeControl.group.getEditor(editorIndex);\n\t\t\tif (editor) {\n\t\t\t\teditorService.openEditor(editor);\n\t\t\t}\n\t\t}\n\t};\n\n\t// This command takes in the editor index number to open as an argument\n\tCommandsRegistry.registerCommand({\n\t\tid: OPEN_EDITOR_AT_INDEX_COMMAND_ID,\n\t\thandler: openEditorAtIndex\n\t});\n\n\t// Keybindings to focus a specific index in the tab folder if tabs are enabled\n\tfor (let i = 0; i < 9; i++) {\n\t\tconst editorIndex = i;\n\t\tconst visibleIndex = i + 1;\n\n\t\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\t\tid: OPEN_EDITOR_AT_INDEX_COMMAND_ID + visibleIndex,\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: undefined,\n\t\t\tprimary: KeyMod.Alt | toKeyCode(visibleIndex),\n\t\t\tmac: { primary: KeyMod.WinCtrl | toKeyCode(visibleIndex) },\n\t\t\thandler: accessor => openEditorAtIndex(accessor, editorIndex)\n\t\t});\n\t}\n\n\tfunction toKeyCode(index: number): KeyCode {\n\t\tswitch (index) {\n\t\t\tcase 0: return KeyCode.KEY_0;\n\t\t\tcase 1: return KeyCode.KEY_1;\n\t\t\tcase 2: return KeyCode.KEY_2;\n\t\t\tcase 3: return KeyCode.KEY_3;\n\t\t\tcase 4: return KeyCode.KEY_4;\n\t\t\tcase 5: return KeyCode.KEY_5;\n\t\t\tcase 6: return KeyCode.KEY_6;\n\t\t\tcase 7: return KeyCode.KEY_7;\n\t\t\tcase 8: return KeyCode.KEY_8;\n\t\t\tcase 9: return KeyCode.KEY_9;\n\t\t}\n\n\t\tthrow new Error('invalid index');\n\t}\n}\n\nfunction registerFocusEditorGroupAtIndexCommands(): void {\n\n\t// Keybindings to focus a specific group (2-8) in the editor area\n\tfor (let groupIndex = 1; groupIndex < 8; groupIndex++) {\n\t\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\t\tid: toCommandId(groupIndex),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\twhen: undefined,\n\t\t\tprimary: KeyMod.CtrlCmd | toKeyCode(groupIndex),\n\t\t\thandler: accessor => {\n\t\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\t\t\t// To keep backwards compatibility (pre-grid), allow to focus a group\n\t\t\t\t// that does not exist as long as it is the next group after the last\n\t\t\t\t// opened group. Otherwise we return.\n\t\t\t\tif (groupIndex > editorGroupService.count) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Group exists: just focus\n\t\t\t\tconst groups = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t\t\tif (groups[groupIndex]) {\n\t\t\t\t\treturn groups[groupIndex].focus();\n\t\t\t\t}\n\n\t\t\t\t// Group does not exist: create new by splitting the active one of the last group\n\t\t\t\tconst direction = preferredSideBySideGroupDirection(configurationService);\n\t\t\t\tconst lastGroup = editorGroupService.findGroup({ location: GroupLocation.LAST });\n\t\t\t\tconst newGroup = editorGroupService.addGroup(lastGroup, direction);\n\n\t\t\t\t// Focus\n\t\t\t\tnewGroup.focus();\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction toCommandId(index: number): string {\n\t\tswitch (index) {\n\t\t\tcase 1: return 'workbench.action.focusSecondEditorGroup';\n\t\t\tcase 2: return 'workbench.action.focusThirdEditorGroup';\n\t\t\tcase 3: return 'workbench.action.focusFourthEditorGroup';\n\t\t\tcase 4: return 'workbench.action.focusFifthEditorGroup';\n\t\t\tcase 5: return 'workbench.action.focusSixthEditorGroup';\n\t\t\tcase 6: return 'workbench.action.focusSeventhEditorGroup';\n\t\t\tcase 7: return 'workbench.action.focusEighthEditorGroup';\n\t\t}\n\n\t\tthrow new Error('Invalid index');\n\t}\n\n\tfunction toKeyCode(index: number): KeyCode {\n\t\tswitch (index) {\n\t\t\tcase 1: return KeyCode.KEY_2;\n\t\t\tcase 2: return KeyCode.KEY_3;\n\t\t\tcase 3: return KeyCode.KEY_4;\n\t\t\tcase 4: return KeyCode.KEY_5;\n\t\t\tcase 5: return KeyCode.KEY_6;\n\t\t\tcase 6: return KeyCode.KEY_7;\n\t\t\tcase 7: return KeyCode.KEY_8;\n\t\t}\n\n\t\tthrow new Error('Invalid index');\n\t}\n}\n\nexport function splitEditor(editorGroupService: IEditorGroupsService, direction: GroupDirection, context?: IEditorCommandsContext): void {\n\tlet sourceGroup: IEditorGroup | undefined;\n\tif (context && typeof context.groupId === 'number') {\n\t\tsourceGroup = editorGroupService.getGroup(context.groupId);\n\t} else {\n\t\tsourceGroup = editorGroupService.activeGroup;\n\t}\n\n\tif (!sourceGroup) {\n\t\treturn;\n\t}\n\n\t// Add group\n\tconst newGroup = editorGroupService.addGroup(sourceGroup, direction);\n\n\t// Split editor (if it can be split)\n\tlet editorToCopy: IEditorInput | null;\n\tif (context && typeof context.editorIndex === 'number') {\n\t\teditorToCopy = sourceGroup.getEditor(context.editorIndex);\n\t} else {\n\t\teditorToCopy = sourceGroup.activeEditor;\n\t}\n\n\tif (editorToCopy && (editorToCopy as EditorInput).supportsSplitEditor()) {\n\t\tsourceGroup.copyEditor(editorToCopy, newGroup);\n\t}\n\n\t// Focus\n\tnewGroup.focus();\n}\n\nfunction registerSplitEditorCommands() {\n\t[\n\t\t{ id: SPLIT_EDITOR_UP, direction: GroupDirection.UP },\n\t\t{ id: SPLIT_EDITOR_DOWN, direction: GroupDirection.DOWN },\n\t\t{ id: SPLIT_EDITOR_LEFT, direction: GroupDirection.LEFT },\n\t\t{ id: SPLIT_EDITOR_RIGHT, direction: GroupDirection.RIGHT }\n\t].forEach(({ id, direction }) => {\n\t\tCommandsRegistry.registerCommand(id, function (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) {\n\t\t\tsplitEditor(accessor.get(IEditorGroupsService), direction, getCommandsContext(resourceOrContext, context));\n\t\t});\n\t});\n}\n\nfunction registerCloseEditorCommands() {\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_SAVED_EDITORS_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_U),\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(IListService), editorGroupService);\n\n\t\t\tconst activeGroup = editorGroupService.activeGroup;\n\t\t\tif (contexts.length === 0) {\n\t\t\t\tcontexts.push({ groupId: activeGroup.id }); // active group as fallback\n\t\t\t}\n\n\t\t\treturn Promise.all(distinct(contexts.map(c => c.groupId)).map(groupId => {\n\t\t\t\tconst group = editorGroupService.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\treturn group.closeEditors({ savedOnly: true });\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve();\n\t\t\t}));\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_EDITORS_IN_GROUP_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.KEY_W),\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(IListService), editorGroupService);\n\t\t\tconst distinctGroupIds = distinct(contexts.map(c => c.groupId));\n\n\t\t\tif (distinctGroupIds.length === 0) {\n\t\t\t\tdistinctGroupIds.push(editorGroupService.activeGroup.id);\n\t\t\t}\n\n\t\t\treturn Promise.all(distinctGroupIds.map(groupId => {\n\t\t\t\tconst group = editorGroupService.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\treturn group.closeAllEditors();\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve();\n\t\t\t}));\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_EDITOR_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_W,\n\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.F4, secondary: [KeyMod.CtrlCmd | KeyCode.KEY_W] },\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(IListService), editorGroupService);\n\n\t\t\tconst activeGroup = editorGroupService.activeGroup;\n\t\t\tif (contexts.length === 0 && activeGroup.activeEditor) {\n\t\t\t\tcontexts.push({ groupId: activeGroup.id, editorIndex: activeGroup.getIndexOfEditor(activeGroup.activeEditor) });  // active editor as fallback\n\t\t\t}\n\n\t\t\tconst groupIds = distinct(contexts.map(context => context.groupId));\n\n\t\t\treturn Promise.all(groupIds.map(groupId => {\n\t\t\t\tconst group = editorGroupService.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\tconst editors = coalesce(contexts\n\t\t\t\t\t\t.filter(context => context.groupId === groupId)\n\t\t\t\t\t\t.map(context => typeof context.editorIndex === 'number' ? group.getEditor(context.editorIndex) : group.activeEditor));\n\n\t\t\t\t\treturn group.closeEditors(editors);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve();\n\t\t\t}));\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_EDITOR_GROUP_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(ActiveEditorGroupEmptyContext, MultipleEditorGroupsContext),\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_W,\n\t\twin: { primary: KeyMod.CtrlCmd | KeyCode.F4, secondary: [KeyMod.CtrlCmd | KeyCode.KEY_W] },\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst commandsContext = getCommandsContext(resourceOrContext, context);\n\n\t\t\tlet group: IEditorGroup | undefined;\n\t\t\tif (commandsContext && typeof commandsContext.groupId === 'number') {\n\t\t\t\tgroup = editorGroupService.getGroup(commandsContext.groupId);\n\t\t\t} else {\n\t\t\t\tgroup = editorGroupService.activeGroup;\n\t\t\t}\n\n\t\t\tif (group) {\n\t\t\t\teditorGroupService.removeGroup(group);\n\t\t\t}\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KEY_T },\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst contexts = getMultiSelectedEditorContexts(getCommandsContext(resourceOrContext, context), accessor.get(IListService), editorGroupService);\n\n\t\t\tconst activeGroup = editorGroupService.activeGroup;\n\t\t\tif (contexts.length === 0 && activeGroup.activeEditor) {\n\t\t\t\tcontexts.push({ groupId: activeGroup.id, editorIndex: activeGroup.getIndexOfEditor(activeGroup.activeEditor) });  // active editor as fallback\n\t\t\t}\n\n\t\t\tconst groupIds = distinct(contexts.map(context => context.groupId));\n\n\t\t\treturn Promise.all(groupIds.map(groupId => {\n\t\t\t\tconst group = editorGroupService.getGroup(groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\tconst editors = contexts\n\t\t\t\t\t\t.filter(context => context.groupId === groupId)\n\t\t\t\t\t\t.map(context => typeof context.editorIndex === 'number' ? group.getEditor(context.editorIndex) : group.activeEditor);\n\t\t\t\t\tconst editorsToClose = group.editors.filter(e => editors.indexOf(e) === -1);\n\n\t\t\t\t\treturn group.closeEditors(editorsToClose);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.resolve();\n\t\t\t}));\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\n\t\t\tconst { group, editor } = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context));\n\t\t\tif (group && editor) {\n\t\t\t\treturn group.closeEditors({ direction: CloseDirection.RIGHT, except: editor });\n\t\t\t}\n\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: KEEP_EDITOR_COMMAND_ID,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KEY_K, KeyCode.Enter),\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\n\t\t\tconst { group, editor } = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context));\n\t\t\tif (group && editor) {\n\t\t\t\treturn group.pinEditor(editor);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t});\n\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: SHOW_EDITORS_IN_GROUP,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: undefined,\n\t\tprimary: undefined,\n\t\thandler: (accessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\t\t\tconst quickOpenService = accessor.get(IQuickOpenService);\n\n\t\t\tif (editorGroupService.count <= 1) {\n\t\t\t\treturn quickOpenService.show(NAVIGATE_ALL_EDITORS_GROUP_PREFIX);\n\t\t\t}\n\n\t\t\tconst commandsContext = getCommandsContext(resourceOrContext, context);\n\t\t\tif (commandsContext && typeof commandsContext.groupId === 'number') {\n\t\t\t\tconst group = editorGroupService.getGroup(commandsContext.groupId);\n\t\t\t\tif (group) {\n\t\t\t\t\teditorGroupService.activateGroup(group); // we need the group to be active\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn quickOpenService.show(NAVIGATE_IN_ACTIVE_GROUP_PREFIX);\n\t\t}\n\t});\n\n\tCommandsRegistry.registerCommand(CLOSE_EDITORS_AND_GROUP_COMMAND_ID, (accessor: ServicesAccessor, resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext) => {\n\t\tconst editorGroupService = accessor.get(IEditorGroupsService);\n\n\t\tconst { group } = resolveCommandsContext(editorGroupService, getCommandsContext(resourceOrContext, context));\n\t\tif (group) {\n\t\t\treturn group.closeAllEditors().then(() => {\n\t\t\t\tif (group.count === 0 && editorGroupService.getGroup(group.id) /* could be gone by now */) {\n\t\t\t\t\teditorGroupService.removeGroup(group); // only remove group if it is now empty\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn undefined;\n\t});\n}\n\nfunction getCommandsContext(resourceOrContext: URI | IEditorCommandsContext, context?: IEditorCommandsContext): IEditorCommandsContext | undefined {\n\tif (URI.isUri(resourceOrContext)) {\n\t\treturn context;\n\t}\n\n\tif (resourceOrContext && typeof resourceOrContext.groupId === 'number') {\n\t\treturn resourceOrContext;\n\t}\n\n\tif (context && typeof context.groupId === 'number') {\n\t\treturn context;\n\t}\n\n\treturn undefined;\n}\n\nfunction resolveCommandsContext(editorGroupService: IEditorGroupsService, context?: IEditorCommandsContext): { group: IEditorGroup, editor?: IEditorInput, control?: IEditor } {\n\n\t// Resolve from context\n\tlet group = context && typeof context.groupId === 'number' ? editorGroupService.getGroup(context.groupId) : undefined;\n\tlet editor = group && context && typeof context.editorIndex === 'number' ? types.withNullAsUndefined(group.getEditor(context.editorIndex)) : undefined;\n\tlet control = group ? group.activeControl : undefined;\n\n\t// Fallback to active group as needed\n\tif (!group) {\n\t\tgroup = editorGroupService.activeGroup;\n\t\teditor = <EditorInput>group.activeEditor;\n\t\tcontrol = group.activeControl;\n\t}\n\n\treturn { group, editor, control };\n}\n\nexport function getMultiSelectedEditorContexts(editorContext: IEditorCommandsContext | undefined, listService: IListService, editorGroupService: IEditorGroupsService): IEditorCommandsContext[] {\n\n\t// First check for a focused list to return the selected items from\n\tconst list = listService.lastFocusedList;\n\tif (list instanceof List && list.getHTMLElement() === document.activeElement) {\n\t\tconst elementToContext = (element: IEditorIdentifier | IEditorGroup) => {\n\t\t\tif (isEditorGroup(element)) {\n\t\t\t\treturn { groupId: element.id, editorIndex: undefined };\n\t\t\t}\n\n\t\t\tconst group = editorGroupService.getGroup(element.groupId);\n\n\t\t\treturn { groupId: element.groupId, editorIndex: group ? group.getIndexOfEditor(element.editor) : -1 };\n\t\t};\n\n\t\tconst onlyEditorGroupAndEditor = (e: IEditorIdentifier | IEditorGroup) => isEditorGroup(e) || isEditorIdentifier(e);\n\n\t\tconst focusedElements: Array<IEditorIdentifier | IEditorGroup> = list.getFocusedElements().filter(onlyEditorGroupAndEditor);\n\t\tconst focus = editorContext ? editorContext : focusedElements.length ? focusedElements.map(elementToContext)[0] : undefined; // need to take into account when editor context is { group: group }\n\n\t\tif (focus) {\n\t\t\tconst selection: Array<IEditorIdentifier | IEditorGroup> = list.getSelectedElements().filter(onlyEditorGroupAndEditor);\n\n\t\t\t// Only respect selection if it contains focused element\n\t\t\tif (selection && selection.some(s => {\n\t\t\t\tif (isEditorGroup(s)) {\n\t\t\t\t\treturn s.id === focus.groupId;\n\t\t\t\t}\n\n\t\t\t\tconst group = editorGroupService.getGroup(s.groupId);\n\t\t\t\treturn s.groupId === focus.groupId && (group ? group.getIndexOfEditor(s.editor) : -1) === focus.editorIndex;\n\t\t\t})) {\n\t\t\t\treturn selection.map(elementToContext);\n\t\t\t}\n\n\t\t\treturn [focus];\n\t\t}\n\t}\n\n\t// Otherwise go with passed in context\n\treturn !!editorContext ? [editorContext] : [];\n}\n\nfunction isEditorGroup(thing: any): thing is IEditorGroup {\n\tconst group = thing as IEditorGroup;\n\n\treturn group && typeof group.id === 'number' && Array.isArray(group.editors);\n}\n\nfunction isEditorIdentifier(thing: any): thing is IEditorIdentifier {\n\tconst identifier = thing as IEditorIdentifier;\n\n\treturn identifier && typeof identifier.groupId === 'number';\n}\n\nexport function setup(): void {\n\tregisterActiveEditorMoveCommand();\n\tregisterEditorGroupsLayoutCommand();\n\tregisterDiffEditorCommands();\n\tregisterOpenEditorAtIndexCommands();\n\tregisterCloseEditorCommands();\n\tregisterFocusEditorGroupAtIndexCommands();\n\tregisterSplitEditorCommands();\n}\n"]}]}