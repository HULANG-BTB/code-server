{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/packages/server/src/ipc.ts","dependencies":[{"path":"/home/coding/workspace/packages/server/src/ipc.ts","mtime":1555841535690},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["define([\"require\", \"exports\", \"events\"], function (require, exports, events_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class StdioIpcHandler extends events_1.EventEmitter {\n        constructor(childProcess) {\n            super();\n            this.childProcess = childProcess;\n            this.isListening = false;\n        }\n        // tslint:disable-next-line no-any\n        on(event, cb) {\n            this.listen();\n            return super.on(event, cb);\n        }\n        // tslint:disable-next-line no-any\n        once(event, cb) {\n            this.listen();\n            return super.once(event, cb);\n        }\n        // tslint:disable-next-line no-any\n        addListener(event, cb) {\n            this.listen();\n            return super.addListener(event, cb);\n        }\n        // tslint:disable-next-line no-any\n        send(event, ...args) {\n            const msg = {\n                event,\n                args,\n            };\n            const d = JSON.stringify(msg);\n            if (this.childProcess) {\n                this.childProcess.stdin.write(d + \"\\n\");\n            }\n            else {\n                process.stdout.write(d);\n            }\n        }\n        listen() {\n            if (this.isListening) {\n                return;\n            }\n            // tslint:disable-next-line no-any\n            const onData = (data) => {\n                try {\n                    const d = JSON.parse(data.toString());\n                    this.emit(d.event, ...d.args);\n                }\n                catch (ex) {\n                    if (!this.childProcess) {\n                        process.stderr.write(`Failed to parse incoming data: ${ex.message}`);\n                    }\n                }\n            };\n            if (this.childProcess) {\n                this.childProcess.stdout.resume();\n                this.childProcess.stdout.on(\"data\", onData);\n            }\n            else {\n                process.stdin.resume();\n                process.stdin.on(\"data\", onData);\n            }\n        }\n    }\n    exports.StdioIpcHandler = StdioIpcHandler;\n});\n",null]}