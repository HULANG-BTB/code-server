{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/menubar/common/menubar.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/menubar/common/menubar.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nexports.IMenubarService = instantiation_1.createDecorator('menubarService');\nfunction isMenubarMenuItemSubmenu(menuItem) {\n    return menuItem.submenu !== undefined;\n}\nexports.isMenubarMenuItemSubmenu = isMenubarMenuItemSubmenu;\nfunction isMenubarMenuItemSeparator(menuItem) {\n    return menuItem.id === 'vscode.menubar.separator';\n}\nexports.isMenubarMenuItemSeparator = isMenubarMenuItemSeparator;\nfunction isMenubarMenuItemUriAction(menuItem) {\n    return menuItem.uri !== undefined;\n}\nexports.isMenubarMenuItemUriAction = isMenubarMenuItemUriAction;\nfunction isMenubarMenuItemAction(menuItem) {\n    return !isMenubarMenuItemSubmenu(menuItem) && !isMenubarMenuItemSeparator(menuItem) && !isMenubarMenuItemUriAction(menuItem);\n}\nexports.isMenubarMenuItemAction = isMenubarMenuItemAction;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/menubar/common/menubar.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/menubar/common/menubar.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,gFAAiF;AAGpE,QAAA,eAAe,GAAG,+BAAe,CAAkB,gBAAgB,CAAC,CAAC;AAiDlF,SAAgB,wBAAwB,CAAC,QAAyB;IACjE,OAAiC,QAAS,CAAC,OAAO,KAAK,SAAS,CAAC;AAClE,CAAC;AAFD,4DAEC;AAED,SAAgB,0BAA0B,CAAC,QAAyB;IACnE,OAAmC,QAAS,CAAC,EAAE,KAAK,0BAA0B,CAAC;AAChF,CAAC;AAFD,gEAEC;AAED,SAAgB,0BAA0B,CAAC,QAAyB;IACnE,OAAmC,QAAS,CAAC,GAAG,KAAK,SAAS,CAAC;AAChE,CAAC;AAFD,gEAEC;AAED,SAAgB,uBAAuB,CAAC,QAAyB;IAChE,OAAO,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;AAC9H,CAAC;AAFD,0DAEC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\n\nexport const IMenubarService = createDecorator<IMenubarService>('menubarService');\n\nexport interface IMenubarService {\n\t_serviceBrand: any;\n\n\tupdateMenubar(windowId: number, menuData: IMenubarData): Promise<void>;\n}\n\nexport interface IMenubarData {\n\tmenus: { [id: string]: IMenubarMenu };\n\tkeybindings: { [id: string]: IMenubarKeybinding };\n}\n\nexport interface IMenubarMenu {\n\titems: Array<MenubarMenuItem>;\n}\n\nexport interface IMenubarKeybinding {\n\tlabel: string;\n\tuserSettingsLabel?: string;\n\tisNative?: boolean; // Assumed true if missing\n}\n\nexport interface IMenubarMenuItemAction {\n\tid: string;\n\tlabel: string;\n\tchecked?: boolean; // Assumed false if missing\n\tenabled?: boolean; // Assumed true if missing\n}\n\nexport interface IMenubarMenuUriItemAction {\n\tid: string;\n\tlabel: string;\n\turi: URI;\n\tenabled?: boolean;\n}\n\nexport interface IMenubarMenuItemSubmenu {\n\tid: string;\n\tlabel: string;\n\tsubmenu: IMenubarMenu;\n}\n\nexport interface IMenubarMenuItemSeparator {\n\tid: 'vscode.menubar.separator';\n}\n\nexport type MenubarMenuItem = IMenubarMenuItemAction | IMenubarMenuItemSubmenu | IMenubarMenuItemSeparator | IMenubarMenuUriItemAction;\n\nexport function isMenubarMenuItemSubmenu(menuItem: MenubarMenuItem): menuItem is IMenubarMenuItemSubmenu {\n\treturn (<IMenubarMenuItemSubmenu>menuItem).submenu !== undefined;\n}\n\nexport function isMenubarMenuItemSeparator(menuItem: MenubarMenuItem): menuItem is IMenubarMenuItemSeparator {\n\treturn (<IMenubarMenuItemSeparator>menuItem).id === 'vscode.menubar.separator';\n}\n\nexport function isMenubarMenuItemUriAction(menuItem: MenubarMenuItem): menuItem is IMenubarMenuUriItemAction {\n\treturn (<IMenubarMenuUriItemAction>menuItem).uri !== undefined;\n}\n\nexport function isMenubarMenuItemAction(menuItem: MenubarMenuItem): menuItem is IMenubarMenuItemAction {\n\treturn !isMenubarMenuItemSubmenu(menuItem) && !isMenubarMenuItemSeparator(menuItem) && !isMenubarMenuItemUriAction(menuItem);\n}\n"]}]}