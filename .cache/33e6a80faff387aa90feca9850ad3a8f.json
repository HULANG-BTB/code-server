{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/contrib/codeAction/codeActionTrigger.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\", \"vs/base/common/strings\"], function (require, exports, strings_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class CodeActionKind {\n        constructor(value) {\n            this.value = value;\n        }\n        contains(other) {\n            return this.value === other.value || strings_1.startsWith(other.value, this.value + CodeActionKind.sep);\n        }\n        intersects(other) {\n            return this.contains(other) || other.contains(this);\n        }\n    }\n    CodeActionKind.sep = '.';\n    CodeActionKind.Empty = new CodeActionKind('');\n    CodeActionKind.QuickFix = new CodeActionKind('quickfix');\n    CodeActionKind.Refactor = new CodeActionKind('refactor');\n    CodeActionKind.Source = new CodeActionKind('source');\n    CodeActionKind.SourceOrganizeImports = new CodeActionKind('source.organizeImports');\n    CodeActionKind.SourceFixAll = new CodeActionKind('source.fixAll');\n    exports.CodeActionKind = CodeActionKind;\n    var CodeActionAutoApply;\n    (function (CodeActionAutoApply) {\n        CodeActionAutoApply[CodeActionAutoApply[\"IfSingle\"] = 0] = \"IfSingle\";\n        CodeActionAutoApply[CodeActionAutoApply[\"First\"] = 1] = \"First\";\n        CodeActionAutoApply[CodeActionAutoApply[\"Never\"] = 2] = \"Never\";\n    })(CodeActionAutoApply = exports.CodeActionAutoApply || (exports.CodeActionAutoApply = {}));\n    function mayIncludeActionsOfKind(filter, providedKind) {\n        // A provided kind may be a subset or superset of our filtered kind.\n        if (filter.kind && !filter.kind.intersects(providedKind)) {\n            return false;\n        }\n        // Don't return source actions unless they are explicitly requested\n        if (CodeActionKind.Source.contains(providedKind) && !filter.includeSourceActions) {\n            return false;\n        }\n        return true;\n    }\n    exports.mayIncludeActionsOfKind = mayIncludeActionsOfKind;\n    function filtersAction(filter, action) {\n        const actionKind = action.kind ? new CodeActionKind(action.kind) : undefined;\n        // Filter out actions by kind\n        if (filter.kind) {\n            if (!actionKind || !filter.kind.contains(actionKind)) {\n                return false;\n            }\n        }\n        // Don't return source actions unless they are explicitly requested\n        if (!filter.includeSourceActions) {\n            if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n                return false;\n            }\n        }\n        if (filter.onlyIncludePreferredActions) {\n            if (!action.isPreferred) {\n                return false;\n            }\n        }\n        return true;\n    }\n    exports.filtersAction = filtersAction;\n});\n",null]}