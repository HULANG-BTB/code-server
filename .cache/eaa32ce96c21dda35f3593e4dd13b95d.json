{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/terminals.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/terminals.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar cp = require(\"child_process\");\nvar nls = require(\"vs/nls\");\nvar env = require(\"vs/base/common/platform\");\nvar pfs = require(\"vs/base/node/pfs\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar amd_1 = require(\"vs/base/common/amd\");\nvar TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\nvar terminalLauncher = undefined;\nfunction getTerminalLauncher() {\n    if (!terminalLauncher) {\n        if (env.isWindows) {\n            terminalLauncher = new WinTerminalService();\n        }\n        else if (env.isMacintosh) {\n            terminalLauncher = new MacTerminalService();\n        }\n        else if (env.isLinux) {\n            terminalLauncher = new LinuxTerminalService();\n        }\n    }\n    return terminalLauncher;\n}\nexports.getTerminalLauncher = getTerminalLauncher;\nvar _DEFAULT_TERMINAL_LINUX_READY = null;\nfunction getDefaultTerminalLinuxReady() {\n    if (!_DEFAULT_TERMINAL_LINUX_READY) {\n        _DEFAULT_TERMINAL_LINUX_READY = new Promise(function (c) {\n            if (env.isLinux) {\n                Promise.all([pfs.exists('/etc/debian_version'), process.lazyEnv]).then(function (_a) {\n                    var isDebian = _a[0];\n                    if (isDebian) {\n                        c('x-terminal-emulator');\n                    }\n                    else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n                        c('gnome-terminal');\n                    }\n                    else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n                        c('konsole');\n                    }\n                    else if (process.env.COLORTERM) {\n                        c(process.env.COLORTERM);\n                    }\n                    else if (process.env.TERM) {\n                        c(process.env.TERM);\n                    }\n                    else {\n                        c('xterm');\n                    }\n                });\n                return;\n            }\n            c('xterm');\n        });\n    }\n    return _DEFAULT_TERMINAL_LINUX_READY;\n}\nexports.getDefaultTerminalLinuxReady = getDefaultTerminalLinuxReady;\nvar _DEFAULT_TERMINAL_WINDOWS = null;\nfunction getDefaultTerminalWindows() {\n    if (!_DEFAULT_TERMINAL_WINDOWS) {\n        var isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n        _DEFAULT_TERMINAL_WINDOWS = (process.env.windir ? process.env.windir : 'C:\\\\Windows') + \"\\\\\" + (isWoW64 ? 'Sysnative' : 'System32') + \"\\\\cmd.exe\";\n    }\n    return _DEFAULT_TERMINAL_WINDOWS;\n}\nexports.getDefaultTerminalWindows = getDefaultTerminalWindows;\nvar TerminalLauncher = /** @class */ (function () {\n    function TerminalLauncher() {\n    }\n    TerminalLauncher.prototype.runInTerminal = function (args, config) {\n        return this.runInTerminal0(args.title, args.cwd, args.args, args.env || {}, config);\n    };\n    return TerminalLauncher;\n}());\nvar WinTerminalService = /** @class */ (function (_super) {\n    tslib_1.__extends(WinTerminalService, _super);\n    function WinTerminalService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WinTerminalService.prototype.runInTerminal0 = function (title, dir, args, envVars, configuration) {\n        var exec = configuration.external.windowsExec || getDefaultTerminalWindows();\n        return new Promise(function (c, e) {\n            var title = \"\\\"\" + dir + \" - \" + TERMINAL_TITLE + \"\\\"\";\n            var command = \"\\\"\\\"\" + args.join('\" \"') + \"\\\" & pause\\\"\"; // use '|' to only pause on non-zero exit code\n            var cmdArgs = [\n                '/c', 'start', title, '/wait', exec, '/c', command\n            ];\n            // merge environment variables into a copy of the process.env\n            var env = objects_1.assign({}, process.env, envVars);\n            // delete environment variables that have a null value\n            Object.keys(env).filter(function (v) { return env[v] === null; }).forEach(function (key) { return delete env[key]; });\n            var options = {\n                cwd: dir,\n                env: env,\n                windowsVerbatimArguments: true\n            };\n            var cmd = cp.spawn(WinTerminalService.CMD, cmdArgs, options);\n            cmd.on('error', e);\n            c(undefined);\n        });\n    };\n    WinTerminalService.CMD = 'cmd.exe';\n    return WinTerminalService;\n}(TerminalLauncher));\nvar MacTerminalService = /** @class */ (function (_super) {\n    tslib_1.__extends(MacTerminalService, _super);\n    function MacTerminalService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MacTerminalService.prototype.runInTerminal0 = function (title, dir, args, envVars, configuration) {\n        var terminalApp = configuration.external.osxExec || MacTerminalService.DEFAULT_TERMINAL_OSX;\n        return new Promise(function (c, e) {\n            if (terminalApp === MacTerminalService.DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n                // On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n                // and then launches the program inside that window.\n                var script_1 = terminalApp === MacTerminalService.DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n                var scriptpath = amd_1.getPathFromAmdModule(require, \"vs/workbench/contrib/externalTerminal/electron-browser/\" + script_1 + \".scpt\");\n                var osaArgs = [\n                    scriptpath,\n                    '-t', title || TERMINAL_TITLE,\n                    '-w', dir,\n                ];\n                for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n                    var a = args_1[_i];\n                    osaArgs.push('-a');\n                    osaArgs.push(a);\n                }\n                if (envVars) {\n                    for (var key in envVars) {\n                        var value = envVars[key];\n                        if (value === null) {\n                            osaArgs.push('-u');\n                            osaArgs.push(key);\n                        }\n                        else {\n                            osaArgs.push('-e');\n                            osaArgs.push(key + \"=\" + value);\n                        }\n                    }\n                }\n                var stderr_1 = '';\n                var osa = cp.spawn(MacTerminalService.OSASCRIPT, osaArgs);\n                osa.on('error', e);\n                osa.stderr.on('data', function (data) {\n                    stderr_1 += data.toString();\n                });\n                osa.on('exit', function (code) {\n                    if (code === 0) { // OK\n                        c(undefined);\n                    }\n                    else {\n                        if (stderr_1) {\n                            var lines = stderr_1.split('\\n', 1);\n                            e(new Error(lines[0]));\n                        }\n                        else {\n                            e(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script_1, code)));\n                        }\n                    }\n                });\n            }\n            else {\n                e(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n            }\n        });\n    };\n    MacTerminalService.DEFAULT_TERMINAL_OSX = 'Terminal.app';\n    MacTerminalService.OSASCRIPT = '/usr/bin/osascript'; // osascript is the AppleScript interpreter on OS X\n    return MacTerminalService;\n}(TerminalLauncher));\nvar LinuxTerminalService = /** @class */ (function (_super) {\n    tslib_1.__extends(LinuxTerminalService, _super);\n    function LinuxTerminalService() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LinuxTerminalService.prototype.runInTerminal0 = function (title, dir, args, envVars, configuration) {\n        var terminalConfig = configuration.external;\n        var execThenable = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : getDefaultTerminalLinuxReady();\n        return new Promise(function (c, e) {\n            var termArgs = [];\n            //termArgs.push('--title');\n            //termArgs.push(`\"${TERMINAL_TITLE}\"`);\n            execThenable.then(function (exec) {\n                if (exec.indexOf('gnome-terminal') >= 0) {\n                    termArgs.push('-x');\n                }\n                else {\n                    termArgs.push('-e');\n                }\n                termArgs.push('bash');\n                termArgs.push('-c');\n                var bashCommand = quote(args) + \"; echo; read -p \\\"\" + LinuxTerminalService.WAIT_MESSAGE + \"\\\" -n1;\";\n                termArgs.push(\"''\" + bashCommand + \"''\"); // wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n                // merge environment variables into a copy of the process.env\n                var env = objects_1.assign({}, process.env, envVars);\n                // delete environment variables that have a null value\n                Object.keys(env).filter(function (v) { return env[v] === null; }).forEach(function (key) { return delete env[key]; });\n                var options = {\n                    cwd: dir,\n                    env: env\n                };\n                var stderr = '';\n                var cmd = cp.spawn(exec, termArgs, options);\n                cmd.on('error', e);\n                cmd.stderr.on('data', function (data) {\n                    stderr += data.toString();\n                });\n                cmd.on('exit', function (code) {\n                    if (code === 0) { // OK\n                        c(undefined);\n                    }\n                    else {\n                        if (stderr) {\n                            var lines = stderr.split('\\n', 1);\n                            e(new Error(lines[0]));\n                        }\n                        else {\n                            e(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n                        }\n                    }\n                });\n            });\n        });\n    };\n    LinuxTerminalService.WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n    return LinuxTerminalService;\n}(TerminalLauncher));\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args) {\n    var r = '';\n    for (var _i = 0, args_2 = args; _i < args_2.length; _i++) {\n        var a = args_2[_i];\n        if (a.indexOf(' ') >= 0) {\n            r += '\"' + a + '\"';\n        }\n        else {\n            r += a;\n        }\n        r += ' ';\n    }\n    return r;\n}\nfunction hasChildProcesses(processId) {\n    if (processId) {\n        try {\n            // if shell has at least one child process, assume that shell is busy\n            if (env.isWindows) {\n                var result = cp.spawnSync('wmic', ['process', 'get', 'ParentProcessId']);\n                if (result.stdout) {\n                    var pids = result.stdout.toString().split('\\r\\n');\n                    if (!pids.some(function (p) { return parseInt(p) === processId; })) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                var result = cp.spawnSync('/usr/bin/pgrep', ['-lP', String(processId)]);\n                if (result.stdout) {\n                    var r = result.stdout.toString().trim();\n                    if (r.length === 0 || r.indexOf(' tmux') >= 0) { // ignore 'tmux'; see #43683\n                        return false;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            // silently ignore\n        }\n    }\n    // fall back to safe side\n    return true;\n}\nexports.hasChildProcesses = hasChildProcesses;\nvar ShellType;\n(function (ShellType) {\n    ShellType[ShellType[\"cmd\"] = 0] = \"cmd\";\n    ShellType[ShellType[\"powershell\"] = 1] = \"powershell\";\n    ShellType[ShellType[\"bash\"] = 2] = \"bash\";\n})(ShellType || (ShellType = {}));\nfunction prepareCommand(args, config) {\n    var shellType;\n    // get the shell configuration for the current platform\n    var shell;\n    var shell_config = config.integrated.shell;\n    if (env.isWindows) {\n        shell = shell_config.windows;\n        shellType = ShellType.cmd;\n    }\n    else if (env.isLinux) {\n        shell = shell_config.linux;\n        shellType = ShellType.bash;\n    }\n    else if (env.isMacintosh) {\n        shell = shell_config.osx;\n        shellType = ShellType.bash;\n    }\n    else {\n        throw new Error('Unknown platform');\n    }\n    // try to determine the shell type\n    shell = shell.trim().toLowerCase();\n    if (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0) {\n        shellType = ShellType.powershell;\n    }\n    else if (shell.indexOf('cmd.exe') >= 0) {\n        shellType = ShellType.cmd;\n    }\n    else if (shell.indexOf('bash') >= 0) {\n        shellType = ShellType.bash;\n    }\n    else if (shell.indexOf('git\\\\bin\\\\bash.exe') >= 0) {\n        shellType = ShellType.bash;\n    }\n    var quote;\n    var command = '';\n    switch (shellType) {\n        case ShellType.powershell:\n            quote = function (s) {\n                s = s.replace(/\\'/g, '\\'\\'');\n                return \"'\" + s + \"'\";\n                //return s.indexOf(' ') >= 0 || s.indexOf('\\'') >= 0 || s.indexOf('\"') >= 0 ? `'${s}'` : s;\n            };\n            if (args.cwd) {\n                command += \"cd '\" + args.cwd + \"'; \";\n            }\n            if (args.env) {\n                for (var key in args.env) {\n                    var value = args.env[key];\n                    if (value === null) {\n                        command += \"Remove-Item env:\" + key + \"; \";\n                    }\n                    else {\n                        command += \"${env:\" + key + \"}='\" + value + \"'; \";\n                    }\n                }\n            }\n            if (args.args && args.args.length > 0) {\n                var cmd = quote(args.args.shift());\n                command += (cmd[0] === '\\'') ? \"& \" + cmd + \" \" : cmd + \" \";\n                for (var _i = 0, _a = args.args; _i < _a.length; _i++) {\n                    var a = _a[_i];\n                    command += quote(a) + \" \";\n                }\n            }\n            break;\n        case ShellType.cmd:\n            quote = function (s) {\n                s = s.replace(/\\\"/g, '\"\"');\n                return (s.indexOf(' ') >= 0 || s.indexOf('\"') >= 0) ? \"\\\"\" + s + \"\\\"\" : s;\n            };\n            if (args.cwd) {\n                command += \"cd \" + quote(args.cwd) + \" && \";\n            }\n            if (args.env) {\n                command += 'cmd /C \"';\n                for (var key in args.env) {\n                    var value = args.env[key];\n                    if (value === null) {\n                        command += \"set \\\"\" + key + \"=\\\" && \";\n                    }\n                    else {\n                        value = value.replace(/[\\^\\&]/g, function (s) { return \"^\" + s; });\n                        command += \"set \\\"\" + key + \"=\" + value + \"\\\" && \";\n                    }\n                }\n            }\n            for (var _b = 0, _c = args.args; _b < _c.length; _b++) {\n                var a = _c[_b];\n                command += quote(a) + \" \";\n            }\n            if (args.env) {\n                command += '\"';\n            }\n            break;\n        case ShellType.bash:\n            quote = function (s) {\n                s = s.replace(/\\\"/g, '\\\\\"');\n                return (s.indexOf(' ') >= 0 || s.indexOf('\\\\') >= 0) ? \"\\\"\" + s + \"\\\"\" : s;\n            };\n            var hardQuote = function (s) {\n                return /[^\\w@%\\/+=,.:^-]/.test(s) ? \"'\" + s.replace(/'/g, '\\'\\\\\\'\\'') + \"'\" : s;\n            };\n            if (args.cwd) {\n                command += \"cd \" + quote(args.cwd) + \" ; \";\n            }\n            if (args.env) {\n                command += 'env';\n                for (var key in args.env) {\n                    var value = args.env[key];\n                    if (value === null) {\n                        command += \" -u \" + hardQuote(key);\n                    }\n                    else {\n                        command += \" \" + hardQuote(key + \"=\" + value);\n                    }\n                }\n                command += ' ';\n            }\n            for (var _d = 0, _e = args.args; _d < _e.length; _d++) {\n                var a = _e[_d];\n                command += quote(a) + \" \";\n            }\n            break;\n    }\n    return command;\n}\nexports.prepareCommand = prepareCommand;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/terminals.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/node/terminals.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as nls from 'vs/nls';\nimport * as env from 'vs/base/common/platform';\nimport * as pfs from 'vs/base/node/pfs';\nimport { assign } from 'vs/base/common/objects';\nimport { ITerminalLauncher, ITerminalSettings } from 'vs/workbench/contrib/debug/common/debug';\nimport { getPathFromAmdModule } from 'vs/base/common/amd';\n\nconst TERMINAL_TITLE = nls.localize('console.title', \"VS Code Console\");\n\nlet terminalLauncher: ITerminalLauncher | undefined = undefined;\n\nexport function getTerminalLauncher() {\n\tif (!terminalLauncher) {\n\t\tif (env.isWindows) {\n\t\t\tterminalLauncher = new WinTerminalService();\n\t\t} else if (env.isMacintosh) {\n\t\t\tterminalLauncher = new MacTerminalService();\n\t\t} else if (env.isLinux) {\n\t\t\tterminalLauncher = new LinuxTerminalService();\n\t\t}\n\t}\n\treturn terminalLauncher;\n}\n\nlet _DEFAULT_TERMINAL_LINUX_READY: Promise<string> | null = null;\nexport function getDefaultTerminalLinuxReady(): Promise<string> {\n\tif (!_DEFAULT_TERMINAL_LINUX_READY) {\n\t\t_DEFAULT_TERMINAL_LINUX_READY = new Promise<string>(c => {\n\t\t\tif (env.isLinux) {\n\t\t\t\tPromise.all<any>([pfs.exists('/etc/debian_version'), process.lazyEnv]).then(([isDebian]) => {\n\t\t\t\t\tif (isDebian) {\n\t\t\t\t\t\tc('x-terminal-emulator');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'gnome' || process.env.DESKTOP_SESSION === 'gnome-classic') {\n\t\t\t\t\t\tc('gnome-terminal');\n\t\t\t\t\t} else if (process.env.DESKTOP_SESSION === 'kde-plasma') {\n\t\t\t\t\t\tc('konsole');\n\t\t\t\t\t} else if (process.env.COLORTERM) {\n\t\t\t\t\t\tc(process.env.COLORTERM);\n\t\t\t\t\t} else if (process.env.TERM) {\n\t\t\t\t\t\tc(process.env.TERM);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tc('xterm');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tc('xterm');\n\t\t});\n\t}\n\treturn _DEFAULT_TERMINAL_LINUX_READY;\n}\n\nlet _DEFAULT_TERMINAL_WINDOWS: string | null = null;\nexport function getDefaultTerminalWindows(): string {\n\tif (!_DEFAULT_TERMINAL_WINDOWS) {\n\t\tconst isWoW64 = !!process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t_DEFAULT_TERMINAL_WINDOWS = `${process.env.windir ? process.env.windir : 'C:\\\\Windows'}\\\\${isWoW64 ? 'Sysnative' : 'System32'}\\\\cmd.exe`;\n\t}\n\treturn _DEFAULT_TERMINAL_WINDOWS;\n}\n\nabstract class TerminalLauncher implements ITerminalLauncher {\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, config: ITerminalSettings): Promise<number | undefined> {\n\t\treturn this.runInTerminal0(args.title!, args.cwd, args.args, args.env || {}, config);\n\t}\n\n\tabstract runInTerminal0(title: string, dir: string, args: string[], envVars: env.IProcessEnvironment | {}, config: ITerminalSettings): Promise<number | undefined>;\n}\n\nclass WinTerminalService extends TerminalLauncher {\n\n\tprivate static readonly CMD = 'cmd.exe';\n\n\trunInTerminal0(title: string, dir: string, args: string[], envVars: env.IProcessEnvironment, configuration: ITerminalSettings): Promise<number | undefined> {\n\n\t\tconst exec = configuration.external.windowsExec || getDefaultTerminalWindows();\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tconst title = `\"${dir} - ${TERMINAL_TITLE}\"`;\n\t\t\tconst command = `\"\"${args.join('\" \"')}\" & pause\"`; // use '|' to only pause on non-zero exit code\n\n\t\t\tconst cmdArgs = [\n\t\t\t\t'/c', 'start', title, '/wait', exec, '/c', command\n\t\t\t];\n\n\t\t\t// merge environment variables into a copy of the process.env\n\t\t\tconst env = assign({}, process.env, envVars);\n\n\t\t\t// delete environment variables that have a null value\n\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\tconst options: any = {\n\t\t\t\tcwd: dir,\n\t\t\t\tenv: env,\n\t\t\t\twindowsVerbatimArguments: true\n\t\t\t};\n\n\t\t\tconst cmd = cp.spawn(WinTerminalService.CMD, cmdArgs, options);\n\t\t\tcmd.on('error', e);\n\n\t\t\tc(undefined);\n\t\t});\n\t}\n}\n\nclass MacTerminalService extends TerminalLauncher {\n\n\tprivate static readonly DEFAULT_TERMINAL_OSX = 'Terminal.app';\n\tprivate static readonly OSASCRIPT = '/usr/bin/osascript';\t// osascript is the AppleScript interpreter on OS X\n\n\trunInTerminal0(title: string, dir: string, args: string[], envVars: env.IProcessEnvironment, configuration: ITerminalSettings): Promise<number | undefined> {\n\n\t\tconst terminalApp = configuration.external.osxExec || MacTerminalService.DEFAULT_TERMINAL_OSX;\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tif (terminalApp === MacTerminalService.DEFAULT_TERMINAL_OSX || terminalApp === 'iTerm.app') {\n\n\t\t\t\t// On OS X we launch an AppleScript that creates (or reuses) a Terminal window\n\t\t\t\t// and then launches the program inside that window.\n\n\t\t\t\tconst script = terminalApp === MacTerminalService.DEFAULT_TERMINAL_OSX ? 'TerminalHelper' : 'iTermHelper';\n\t\t\t\tconst scriptpath = getPathFromAmdModule(require, `vs/workbench/contrib/externalTerminal/electron-browser/${script}.scpt`);\n\n\t\t\t\tconst osaArgs = [\n\t\t\t\t\tscriptpath,\n\t\t\t\t\t'-t', title || TERMINAL_TITLE,\n\t\t\t\t\t'-w', dir,\n\t\t\t\t];\n\n\t\t\t\tfor (let a of args) {\n\t\t\t\t\tosaArgs.push('-a');\n\t\t\t\t\tosaArgs.push(a);\n\t\t\t\t}\n\n\t\t\t\tif (envVars) {\n\t\t\t\t\tfor (let key in envVars) {\n\t\t\t\t\t\tconst value = envVars[key];\n\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\tosaArgs.push('-u');\n\t\t\t\t\t\t\tosaArgs.push(key);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tosaArgs.push('-e');\n\t\t\t\t\t\t\tosaArgs.push(`${key}=${value}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst osa = cp.spawn(MacTerminalService.OSASCRIPT, osaArgs);\n\t\t\t\tosa.on('error', e);\n\t\t\t\tosa.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tosa.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\te(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te(new Error(nls.localize('mac.terminal.script.failed', \"Script '{0}' failed with exit code {1}\", script, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\te(new Error(nls.localize('mac.terminal.type.not.supported', \"'{0}' not supported\", terminalApp)));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass LinuxTerminalService extends TerminalLauncher {\n\n\tprivate static readonly WAIT_MESSAGE = nls.localize('press.any.key', \"Press any key to continue...\");\n\n\trunInTerminal0(title: string, dir: string, args: string[], envVars: env.IProcessEnvironment, configuration: ITerminalSettings): Promise<number | undefined> {\n\n\t\tconst terminalConfig = configuration.external;\n\t\tconst execThenable: Promise<string> = terminalConfig.linuxExec ? Promise.resolve(terminalConfig.linuxExec) : getDefaultTerminalLinuxReady();\n\n\t\treturn new Promise<number | undefined>((c, e) => {\n\n\t\t\tlet termArgs: string[] = [];\n\t\t\t//termArgs.push('--title');\n\t\t\t//termArgs.push(`\"${TERMINAL_TITLE}\"`);\n\t\t\texecThenable.then(exec => {\n\t\t\t\tif (exec.indexOf('gnome-terminal') >= 0) {\n\t\t\t\t\ttermArgs.push('-x');\n\t\t\t\t} else {\n\t\t\t\t\ttermArgs.push('-e');\n\t\t\t\t}\n\t\t\t\ttermArgs.push('bash');\n\t\t\t\ttermArgs.push('-c');\n\n\t\t\t\tconst bashCommand = `${quote(args)}; echo; read -p \"${LinuxTerminalService.WAIT_MESSAGE}\" -n1;`;\n\t\t\t\ttermArgs.push(`''${bashCommand}''`);\t// wrapping argument in two sets of ' because node is so \"friendly\" that it removes one set...\n\n\t\t\t\t// merge environment variables into a copy of the process.env\n\t\t\t\tconst env = assign({}, process.env, envVars);\n\n\t\t\t\t// delete environment variables that have a null value\n\t\t\t\tObject.keys(env).filter(v => env[v] === null).forEach(key => delete env[key]);\n\n\t\t\t\tconst options: any = {\n\t\t\t\t\tcwd: dir,\n\t\t\t\t\tenv: env\n\t\t\t\t};\n\n\t\t\t\tlet stderr = '';\n\t\t\t\tconst cmd = cp.spawn(exec, termArgs, options);\n\t\t\t\tcmd.on('error', e);\n\t\t\t\tcmd.stderr.on('data', (data) => {\n\t\t\t\t\tstderr += data.toString();\n\t\t\t\t});\n\t\t\t\tcmd.on('exit', (code: number) => {\n\t\t\t\t\tif (code === 0) {\t// OK\n\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (stderr) {\n\t\t\t\t\t\t\tconst lines = stderr.split('\\n', 1);\n\t\t\t\t\t\t\te(new Error(lines[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\te(new Error(nls.localize('linux.term.failed', \"'{0}' failed with exit code {1}\", exec, code)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Quote args if necessary and combine into a space separated string.\n */\nfunction quote(args: string[]): string {\n\tlet r = '';\n\tfor (let a of args) {\n\t\tif (a.indexOf(' ') >= 0) {\n\t\t\tr += '\"' + a + '\"';\n\t\t} else {\n\t\t\tr += a;\n\t\t}\n\t\tr += ' ';\n\t}\n\treturn r;\n}\n\n\nexport function hasChildProcesses(processId: number): boolean {\n\tif (processId) {\n\t\ttry {\n\t\t\t// if shell has at least one child process, assume that shell is busy\n\t\t\tif (env.isWindows) {\n\t\t\t\tconst result = cp.spawnSync('wmic', ['process', 'get', 'ParentProcessId']);\n\t\t\t\tif (result.stdout) {\n\t\t\t\t\tconst pids = result.stdout.toString().split('\\r\\n');\n\t\t\t\t\tif (!pids.some(p => parseInt(p) === processId)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst result = cp.spawnSync('/usr/bin/pgrep', ['-lP', String(processId)]);\n\t\t\t\tif (result.stdout) {\n\t\t\t\t\tconst r = result.stdout.toString().trim();\n\t\t\t\t\tif (r.length === 0 || r.indexOf(' tmux') >= 0) { // ignore 'tmux'; see #43683\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (e) {\n\t\t\t// silently ignore\n\t\t}\n\t}\n\t// fall back to safe side\n\treturn true;\n}\n\nconst enum ShellType { cmd, powershell, bash }\n\nexport function prepareCommand(args: DebugProtocol.RunInTerminalRequestArguments, config: ITerminalSettings): string {\n\n\tlet shellType: ShellType;\n\n\t// get the shell configuration for the current platform\n\tlet shell: string;\n\tconst shell_config = config.integrated.shell;\n\tif (env.isWindows) {\n\t\tshell = shell_config.windows;\n\t\tshellType = ShellType.cmd;\n\t} else if (env.isLinux) {\n\t\tshell = shell_config.linux;\n\t\tshellType = ShellType.bash;\n\t} else if (env.isMacintosh) {\n\t\tshell = shell_config.osx;\n\t\tshellType = ShellType.bash;\n\t} else {\n\t\tthrow new Error('Unknown platform');\n\t}\n\n\t// try to determine the shell type\n\tshell = shell.trim().toLowerCase();\n\tif (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0) {\n\t\tshellType = ShellType.powershell;\n\t} else if (shell.indexOf('cmd.exe') >= 0) {\n\t\tshellType = ShellType.cmd;\n\t} else if (shell.indexOf('bash') >= 0) {\n\t\tshellType = ShellType.bash;\n\t} else if (shell.indexOf('git\\\\bin\\\\bash.exe') >= 0) {\n\t\tshellType = ShellType.bash;\n\t}\n\n\tlet quote: (s: string) => string;\n\tlet command = '';\n\n\tswitch (shellType) {\n\n\t\tcase ShellType.powershell:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/\\'/g, '\\'\\'');\n\t\t\t\treturn `'${s}'`;\n\t\t\t\t//return s.indexOf(' ') >= 0 || s.indexOf('\\'') >= 0 || s.indexOf('\"') >= 0 ? `'${s}'` : s;\n\t\t\t};\n\n\t\t\tif (args.cwd) {\n\t\t\t\tcommand += `cd '${args.cwd}'; `;\n\t\t\t}\n\t\t\tif (args.env) {\n\t\t\t\tfor (let key in args.env) {\n\t\t\t\t\tconst value = args.env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += `Remove-Item env:${key}; `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommand += `\\${env:${key}}='${value}'; `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (args.args && args.args.length > 0) {\n\t\t\t\tconst cmd = quote(args.args.shift()!);\n\t\t\t\tcommand += (cmd[0] === '\\'') ? `& ${cmd} ` : `${cmd} `;\n\t\t\t\tfor (let a of args.args) {\n\t\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ShellType.cmd:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/\\\"/g, '\"\"');\n\t\t\t\treturn (s.indexOf(' ') >= 0 || s.indexOf('\"') >= 0) ? `\"${s}\"` : s;\n\t\t\t};\n\n\t\t\tif (args.cwd) {\n\t\t\t\tcommand += `cd ${quote(args.cwd)} && `;\n\t\t\t}\n\t\t\tif (args.env) {\n\t\t\t\tcommand += 'cmd /C \"';\n\t\t\t\tfor (let key in args.env) {\n\t\t\t\t\tlet value = args.env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += `set \"${key}=\" && `;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = value.replace(/[\\^\\&]/g, s => `^${s}`);\n\t\t\t\t\t\tcommand += `set \"${key}=${value}\" && `;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let a of args.args) {\n\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t}\n\t\t\tif (args.env) {\n\t\t\t\tcommand += '\"';\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase ShellType.bash:\n\n\t\t\tquote = (s: string) => {\n\t\t\t\ts = s.replace(/\\\"/g, '\\\\\"');\n\t\t\t\treturn (s.indexOf(' ') >= 0 || s.indexOf('\\\\') >= 0) ? `\"${s}\"` : s;\n\t\t\t};\n\n\t\t\tconst hardQuote = (s: string) => {\n\t\t\t\treturn /[^\\w@%\\/+=,.:^-]/.test(s) ? `'${s.replace(/'/g, '\\'\\\\\\'\\'')}'` : s;\n\t\t\t};\n\n\t\t\tif (args.cwd) {\n\t\t\t\tcommand += `cd ${quote(args.cwd)} ; `;\n\t\t\t}\n\t\t\tif (args.env) {\n\t\t\t\tcommand += 'env';\n\t\t\t\tfor (let key in args.env) {\n\t\t\t\t\tconst value = args.env[key];\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tcommand += ` -u ${hardQuote(key)}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcommand += ` ${hardQuote(`${key}=${value}`)}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcommand += ' ';\n\t\t\t}\n\t\t\tfor (let a of args.args) {\n\t\t\t\tcommand += `${quote(a)} `;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn command;\n}\n"]}]}