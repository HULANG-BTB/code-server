{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHost.api.impl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/node/extHost.api.impl.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\ndefine([\"require\", \"exports\", \"vs/nls\", \"vs/base/common/cancellation\", \"vs/base/common/errors\", \"vs/base/common/event\", \"vs/base/common/path\", \"vs/base/common/platform\", \"vs/base/common/severity\", \"vs/base/common/uri\", \"vs/editor/common/config/editorOptions\", \"vs/editor/common/model\", \"vs/editor/common/modes/languageConfiguration\", \"vs/editor/common/modes/languageSelector\", \"vs/platform/files/common/files\", \"vs/platform/product/node/package\", \"vs/platform/product/node/product\", \"vs/workbench/api/common/extHost.protocol\", \"vs/workbench/api/node/extHostApiCommands\", \"vs/workbench/api/node/extHostClipboard\", \"vs/workbench/api/node/extHostCommands\", \"vs/workbench/api/node/extHostComments\", \"vs/workbench/api/node/extHostDebugService\", \"vs/workbench/api/node/extHostDecorations\", \"vs/workbench/api/node/extHostDiagnostics\", \"vs/workbench/api/node/extHostDialogs\", \"vs/workbench/api/node/extHostDocumentContentProviders\", \"vs/workbench/api/node/extHostDocumentSaveParticipant\", \"vs/workbench/api/node/extHostDocuments\", \"vs/workbench/api/node/extHostDocumentsAndEditors\", \"vs/workbench/api/node/extHostExtensionActivator\", \"vs/workbench/api/node/extHostFileSystem\", \"vs/workbench/api/node/extHostFileSystemEventService\", \"vs/workbench/api/node/extHostHeapService\", \"vs/workbench/api/node/extHostLanguageFeatures\", \"vs/workbench/api/node/extHostLanguages\", \"vs/workbench/api/node/extHostMessageService\", \"vs/workbench/api/node/extHostOutputService\", \"vs/workbench/api/node/extHostProgress\", \"vs/workbench/api/node/extHostQuickOpen\", \"vs/workbench/api/node/extHostSCM\", \"vs/workbench/api/node/extHostSearch\", \"vs/workbench/api/node/extHostStatusBar\", \"vs/workbench/api/node/extHostTask\", \"vs/workbench/api/node/extHostTerminalService\", \"vs/workbench/api/node/extHostTextEditors\", \"vs/workbench/api/node/extHostTreeViews\", \"vs/workbench/api/node/extHostTypeConverters\", \"vs/workbench/api/node/extHostTypes\", \"vs/workbench/api/node/extHostUrls\", \"vs/workbench/api/node/extHostWebview\", \"vs/workbench/api/node/extHostWindow\", \"vs/workbench/services/extensions/common/extensions\", \"vs/platform/extensions/common/extensions\", \"vs/base/common/resources\", \"vs/workbench/api/node/extHostCLIServer\", \"vs/base/common/types\"], function (require, exports, nls_1, cancellation_1, errors, event_1, path, platform, severity_1, uri_1, editorOptions_1, model_1, languageConfiguration, languageSelector_1, files, package_1, product_1, extHost_protocol_1, extHostApiCommands_1, extHostClipboard_1, extHostCommands_1, extHostComments_1, extHostDebugService_1, extHostDecorations_1, extHostDiagnostics_1, extHostDialogs_1, extHostDocumentContentProviders_1, extHostDocumentSaveParticipant_1, extHostDocuments_1, extHostDocumentsAndEditors_1, extHostExtensionActivator_1, extHostFileSystem_1, extHostFileSystemEventService_1, extHostHeapService_1, extHostLanguageFeatures_1, extHostLanguages_1, extHostMessageService_1, extHostOutputService_1, extHostProgress_1, extHostQuickOpen_1, extHostSCM_1, extHostSearch_1, extHostStatusBar_1, extHostTask_1, extHostTerminalService_1, extHostTextEditors_1, extHostTreeViews_1, typeConverters, extHostTypes, extHostUrls_1, extHostWebview_1, extHostWindow_1, extensions_1, extensions_2, resources_1, extHostCLIServer_1, types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function proposedApiFunction(extension, fn) {\n        if (extension.enableProposedApi) {\n            return fn;\n        }\n        else {\n            return extensions_1.throwProposedApiError.bind(null, extension);\n        }\n    }\n    /**\n     * This method instantiates and returns the extension API surface\n     */\n    function createApiFactory(initData, rpcProtocol, extHostWorkspace, extHostConfiguration, extensionService, extHostLogService, extHostStorage) {\n        const schemeTransformer = null;\n        // Addressable instances\n        rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostLogService, extHostLogService);\n        const extHostHeapService = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostHeapService, new extHostHeapService_1.ExtHostHeapService());\n        const extHostDecorations = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDecorations, new extHostDecorations_1.ExtHostDecorations(rpcProtocol));\n        const extHostWebviews = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostWebviews, new extHostWebview_1.ExtHostWebviews(rpcProtocol));\n        const extHostUrls = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostUrls, new extHostUrls_1.ExtHostUrls(rpcProtocol));\n        const extHostDocumentsAndEditors = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDocumentsAndEditors, new extHostDocumentsAndEditors_1.ExtHostDocumentsAndEditors(rpcProtocol));\n        const extHostDocuments = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDocuments, new extHostDocuments_1.ExtHostDocuments(rpcProtocol, extHostDocumentsAndEditors));\n        const extHostDocumentContentProviders = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDocumentContentProviders, new extHostDocumentContentProviders_1.ExtHostDocumentContentProvider(rpcProtocol, extHostDocumentsAndEditors, extHostLogService));\n        const extHostDocumentSaveParticipant = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDocumentSaveParticipant, new extHostDocumentSaveParticipant_1.ExtHostDocumentSaveParticipant(extHostLogService, extHostDocuments, rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadTextEditors)));\n        const extHostEditors = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostEditors, new extHostTextEditors_1.ExtHostEditors(rpcProtocol, extHostDocumentsAndEditors));\n        const extHostCommands = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostCommands, new extHostCommands_1.ExtHostCommands(rpcProtocol, extHostHeapService, extHostLogService));\n        const extHostTreeViews = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostTreeViews, new extHostTreeViews_1.ExtHostTreeViews(rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadTreeViews), extHostCommands, extHostLogService));\n        rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostWorkspace, extHostWorkspace);\n        rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostConfiguration, extHostConfiguration);\n        const extHostDiagnostics = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDiagnostics, new extHostDiagnostics_1.ExtHostDiagnostics(rpcProtocol));\n        const extHostLanguageFeatures = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostLanguageFeatures, new extHostLanguageFeatures_1.ExtHostLanguageFeatures(rpcProtocol, schemeTransformer, extHostDocuments, extHostCommands, extHostHeapService, extHostDiagnostics, extHostLogService));\n        const extHostFileSystem = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostFileSystem, new extHostFileSystem_1.ExtHostFileSystem(rpcProtocol, extHostLanguageFeatures));\n        const extHostFileSystemEvent = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostFileSystemEventService, new extHostFileSystemEventService_1.ExtHostFileSystemEventService(rpcProtocol, extHostDocumentsAndEditors));\n        const extHostQuickOpen = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostQuickOpen, new extHostQuickOpen_1.ExtHostQuickOpen(rpcProtocol, extHostWorkspace, extHostCommands));\n        const extHostTerminalService = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostTerminalService, new extHostTerminalService_1.ExtHostTerminalService(rpcProtocol, extHostConfiguration, extHostLogService));\n        const extHostDebugService = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostDebugService, new extHostDebugService_1.ExtHostDebugService(rpcProtocol, extHostWorkspace, extensionService, extHostDocumentsAndEditors, extHostConfiguration, extHostTerminalService, extHostCommands));\n        const extHostSCM = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostSCM, new extHostSCM_1.ExtHostSCM(rpcProtocol, extHostCommands, extHostLogService));\n        const extHostComment = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostComments, new extHostComments_1.ExtHostComments(rpcProtocol, extHostCommands, extHostDocuments));\n        const extHostSearch = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostSearch, new extHostSearch_1.ExtHostSearch(rpcProtocol, schemeTransformer, extHostLogService));\n        const extHostTask = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostTask, new extHostTask_1.ExtHostTask(rpcProtocol, extHostWorkspace, extHostDocumentsAndEditors, extHostConfiguration, extHostTerminalService));\n        const extHostWindow = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostWindow, new extHostWindow_1.ExtHostWindow(rpcProtocol));\n        rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostExtensionService, extensionService);\n        const extHostProgress = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostProgress, new extHostProgress_1.ExtHostProgress(rpcProtocol.getProxy(extHost_protocol_1.MainContext.MainThreadProgress)));\n        const extHostOutputService = rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostOutputService, new extHostOutputService_1.ExtHostOutputService(initData.logsLocation, rpcProtocol));\n        rpcProtocol.set(extHost_protocol_1.ExtHostContext.ExtHostStorage, extHostStorage);\n        if (initData.remoteAuthority) {\n            const cliServer = new extHostCLIServer_1.CLIServer(extHostCommands);\n            process.env['VSCODE_IPC_HOOK_CLI'] = cliServer.ipcHandlePath;\n        }\n        // Check that no named customers are missing\n        const expected = Object.keys(extHost_protocol_1.ExtHostContext).map((key) => extHost_protocol_1.ExtHostContext[key]);\n        rpcProtocol.assertRegistered(expected);\n        // Other instances\n        const extHostClipboard = new extHostClipboard_1.ExtHostClipboard(rpcProtocol);\n        const extHostMessageService = new extHostMessageService_1.ExtHostMessageService(rpcProtocol);\n        const extHostDialogs = new extHostDialogs_1.ExtHostDialogs(rpcProtocol);\n        const extHostStatusBar = new extHostStatusBar_1.ExtHostStatusBar(rpcProtocol);\n        const extHostLanguages = new extHostLanguages_1.ExtHostLanguages(rpcProtocol, extHostDocuments);\n        // Register an output channel for exthost log\n        const name = nls_1.localize('extensionsLog', \"Extension Host\");\n        extHostOutputService.createOutputChannelFromLogFile(name, extHostLogService.logFile);\n        // Register API-ish commands\n        extHostApiCommands_1.ExtHostApiCommands.register(extHostCommands);\n        return function (extension, extensionRegistry, configProvider) {\n            // Check document selectors for being overly generic. Technically this isn't a problem but\n            // in practice many extensions say they support `fooLang` but need fs-access to do so. Those\n            // extension should specify then the `file`-scheme, e.g `{ scheme: 'fooLang', language: 'fooLang' }`\n            // We only inform once, it is not a warning because we just want to raise awareness and because\n            // we cannot say if the extension is doing it right or wrong...\n            const checkSelector = (function () {\n                let done = (!extension.isUnderDevelopment);\n                function informOnce(selector) {\n                    if (!done) {\n                        console.info(`Extension '${extension.identifier.value}' uses a document selector without scheme. Learn more about this: https://go.microsoft.com/fwlink/?linkid=872305`);\n                        done = true;\n                    }\n                }\n                return function perform(selector) {\n                    if (Array.isArray(selector)) {\n                        selector.forEach(perform);\n                    }\n                    else if (typeof selector === 'string') {\n                        informOnce(selector);\n                    }\n                    else {\n                        if (typeof selector.scheme === 'undefined') {\n                            informOnce(selector);\n                        }\n                        if (!extension.enableProposedApi && typeof selector.exclusive === 'boolean') {\n                            extensions_1.throwProposedApiError(extension);\n                        }\n                    }\n                    return selector;\n                };\n            })();\n            // namespace: commands\n            const commands = {\n                registerCommand(id, command, thisArgs) {\n                    return extHostCommands.registerCommand(true, id, command, thisArgs);\n                },\n                registerTextEditorCommand(id, callback, thisArg) {\n                    return extHostCommands.registerCommand(true, id, (...args) => {\n                        const activeTextEditor = extHostEditors.getActiveTextEditor();\n                        if (!activeTextEditor) {\n                            console.warn('Cannot execute ' + id + ' because there is no active text editor.');\n                            return undefined;\n                        }\n                        return activeTextEditor.edit((edit) => {\n                            args.unshift(activeTextEditor, edit);\n                            callback.apply(thisArg, args);\n                        }).then((result) => {\n                            if (!result) {\n                                console.warn('Edits from command ' + id + ' were not applied.');\n                            }\n                        }, (err) => {\n                            console.warn('An error occurred while running command ' + id, err);\n                        });\n                    });\n                },\n                registerDiffInformationCommand: proposedApiFunction(extension, (id, callback, thisArg) => {\n                    return extHostCommands.registerCommand(true, id, (...args) => __awaiter(this, void 0, void 0, function* () {\n                        const activeTextEditor = extHostEditors.getActiveTextEditor();\n                        if (!activeTextEditor) {\n                            console.warn('Cannot execute ' + id + ' because there is no active text editor.');\n                            return undefined;\n                        }\n                        const diff = yield extHostEditors.getDiffInformation(activeTextEditor.id);\n                        callback.apply(thisArg, [diff, ...args]);\n                    }));\n                }),\n                executeCommand(id, ...args) {\n                    return extHostCommands.executeCommand(id, ...args);\n                },\n                getCommands(filterInternal = false) {\n                    return extHostCommands.getCommands(filterInternal);\n                }\n            };\n            // namespace: env\n            const env = Object.freeze({\n                get machineId() { return initData.telemetryInfo.machineId; },\n                get sessionId() { return initData.telemetryInfo.sessionId; },\n                get language() { return platform.language; },\n                get appName() { return product_1.default.nameLong; },\n                get appRoot() { return initData.environment.appRoot.fsPath; },\n                get logLevel() {\n                    extensions_1.checkProposedApiEnabled(extension);\n                    return typeConverters.LogLevel.to(extHostLogService.getLevel());\n                },\n                get onDidChangeLogLevel() {\n                    extensions_1.checkProposedApiEnabled(extension);\n                    return event_1.Event.map(extHostLogService.onDidChangeLogLevel, l => typeConverters.LogLevel.to(l));\n                },\n                get clipboard() {\n                    return extHostClipboard;\n                },\n                openExternal(uri) {\n                    return extHostWindow.openUri(uri);\n                }\n            });\n            // namespace: extensions\n            const extensions = {\n                getExtension(extensionId) {\n                    const desc = extensionRegistry.getExtensionDescription(extensionId);\n                    if (desc) {\n                        return new Extension(extensionService, desc);\n                    }\n                    return undefined;\n                },\n                get all() {\n                    return extensionRegistry.getAllExtensionDescriptions().map((desc) => new Extension(extensionService, desc));\n                },\n                get onDidChange() {\n                    return extensionRegistry.onDidChange;\n                }\n            };\n            // namespace: languages\n            const languages = {\n                createDiagnosticCollection(name) {\n                    return extHostDiagnostics.createDiagnosticCollection(name);\n                },\n                get onDidChangeDiagnostics() {\n                    return extHostDiagnostics.onDidChangeDiagnostics;\n                },\n                getDiagnostics: (resource) => {\n                    return extHostDiagnostics.getDiagnostics(resource);\n                },\n                getLanguages() {\n                    return extHostLanguages.getLanguages();\n                },\n                setTextDocumentLanguage(document, languageId) {\n                    return extHostLanguages.changeLanguage(document.uri, languageId);\n                },\n                match(selector, document) {\n                    return languageSelector_1.score(typeConverters.LanguageSelector.from(selector), document.uri, document.languageId, true);\n                },\n                registerCodeActionsProvider(selector, provider, metadata) {\n                    return extHostLanguageFeatures.registerCodeActionProvider(extension, checkSelector(selector), provider, metadata);\n                },\n                registerCodeLensProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerCodeLensProvider(extension, checkSelector(selector), provider);\n                },\n                registerCodeInsetProvider(selector, provider) {\n                    extensions_1.checkProposedApiEnabled(extension);\n                    return extHostLanguageFeatures.registerCodeInsetProvider(extension, checkSelector(selector), provider);\n                },\n                registerDefinitionProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDefinitionProvider(extension, checkSelector(selector), provider);\n                },\n                registerDeclarationProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDeclarationProvider(extension, checkSelector(selector), provider);\n                },\n                registerImplementationProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerImplementationProvider(extension, checkSelector(selector), provider);\n                },\n                registerTypeDefinitionProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerTypeDefinitionProvider(extension, checkSelector(selector), provider);\n                },\n                registerHoverProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerHoverProvider(extension, checkSelector(selector), provider, extension.identifier);\n                },\n                registerDocumentHighlightProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDocumentHighlightProvider(extension, checkSelector(selector), provider);\n                },\n                registerReferenceProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerReferenceProvider(extension, checkSelector(selector), provider);\n                },\n                registerRenameProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerRenameProvider(extension, checkSelector(selector), provider);\n                },\n                registerDocumentSymbolProvider(selector, provider, metadata) {\n                    return extHostLanguageFeatures.registerDocumentSymbolProvider(extension, checkSelector(selector), provider, metadata);\n                },\n                registerWorkspaceSymbolProvider(provider) {\n                    return extHostLanguageFeatures.registerWorkspaceSymbolProvider(extension, provider);\n                },\n                registerDocumentFormattingEditProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDocumentFormattingEditProvider(extension, checkSelector(selector), provider);\n                },\n                registerDocumentRangeFormattingEditProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDocumentRangeFormattingEditProvider(extension, checkSelector(selector), provider);\n                },\n                registerOnTypeFormattingEditProvider(selector, provider, firstTriggerCharacter, ...moreTriggerCharacters) {\n                    return extHostLanguageFeatures.registerOnTypeFormattingEditProvider(extension, checkSelector(selector), provider, [firstTriggerCharacter].concat(moreTriggerCharacters));\n                },\n                registerSignatureHelpProvider(selector, provider, firstItem, ...remaining) {\n                    if (typeof firstItem === 'object') {\n                        return extHostLanguageFeatures.registerSignatureHelpProvider(extension, checkSelector(selector), provider, firstItem);\n                    }\n                    return extHostLanguageFeatures.registerSignatureHelpProvider(extension, checkSelector(selector), provider, typeof firstItem === 'undefined' ? [] : [firstItem, ...remaining]);\n                },\n                registerCompletionItemProvider(selector, provider, ...triggerCharacters) {\n                    return extHostLanguageFeatures.registerCompletionItemProvider(extension, checkSelector(selector), provider, triggerCharacters);\n                },\n                registerDocumentLinkProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerDocumentLinkProvider(extension, checkSelector(selector), provider);\n                },\n                registerColorProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerColorProvider(extension, checkSelector(selector), provider);\n                },\n                registerFoldingRangeProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerFoldingRangeProvider(extension, checkSelector(selector), provider);\n                },\n                registerSelectionRangeProvider(selector, provider) {\n                    return extHostLanguageFeatures.registerSelectionRangeProvider(extension, selector, provider);\n                },\n                registerCallHierarchyProvider(selector, provider) {\n                    extensions_1.checkProposedApiEnabled(extension);\n                    return extHostLanguageFeatures.registerCallHierarchyProvider(extension, selector, provider);\n                },\n                setLanguageConfiguration: (language, configuration) => {\n                    return extHostLanguageFeatures.setLanguageConfiguration(language, configuration);\n                }\n            };\n            // namespace: window\n            const window = {\n                get activeTextEditor() {\n                    return extHostEditors.getActiveTextEditor();\n                },\n                get visibleTextEditors() {\n                    return extHostEditors.getVisibleTextEditors();\n                },\n                get activeTerminal() {\n                    return extHostTerminalService.activeTerminal;\n                },\n                get terminals() {\n                    return extHostTerminalService.terminals;\n                },\n                showTextDocument(documentOrUri, columnOrOptions, preserveFocus) {\n                    let documentPromise;\n                    if (uri_1.URI.isUri(documentOrUri)) {\n                        documentPromise = Promise.resolve(workspace.openTextDocument(documentOrUri));\n                    }\n                    else {\n                        documentPromise = Promise.resolve(documentOrUri);\n                    }\n                    return documentPromise.then(document => {\n                        return extHostEditors.showTextDocument(document, columnOrOptions, preserveFocus);\n                    });\n                },\n                createTextEditorDecorationType(options) {\n                    return extHostEditors.createTextEditorDecorationType(options);\n                },\n                onDidChangeActiveTextEditor(listener, thisArg, disposables) {\n                    return extHostEditors.onDidChangeActiveTextEditor(listener, thisArg, disposables);\n                },\n                onDidChangeVisibleTextEditors(listener, thisArg, disposables) {\n                    return extHostEditors.onDidChangeVisibleTextEditors(listener, thisArg, disposables);\n                },\n                onDidChangeTextEditorSelection(listener, thisArgs, disposables) {\n                    return extHostEditors.onDidChangeTextEditorSelection(listener, thisArgs, disposables);\n                },\n                onDidChangeTextEditorOptions(listener, thisArgs, disposables) {\n                    return extHostEditors.onDidChangeTextEditorOptions(listener, thisArgs, disposables);\n                },\n                onDidChangeTextEditorVisibleRanges(listener, thisArgs, disposables) {\n                    return extHostEditors.onDidChangeTextEditorVisibleRanges(listener, thisArgs, disposables);\n                },\n                onDidChangeTextEditorViewColumn(listener, thisArg, disposables) {\n                    return extHostEditors.onDidChangeTextEditorViewColumn(listener, thisArg, disposables);\n                },\n                onDidCloseTerminal(listener, thisArg, disposables) {\n                    return extHostTerminalService.onDidCloseTerminal(listener, thisArg, disposables);\n                },\n                onDidOpenTerminal(listener, thisArg, disposables) {\n                    return extHostTerminalService.onDidOpenTerminal(listener, thisArg, disposables);\n                },\n                onDidChangeActiveTerminal(listener, thisArg, disposables) {\n                    return extHostTerminalService.onDidChangeActiveTerminal(listener, thisArg, disposables);\n                },\n                onDidChangeTerminalDimensions(listener, thisArg, disposables) {\n                    return extHostTerminalService.onDidChangeTerminalDimensions(listener, thisArg, disposables);\n                },\n                get state() {\n                    return extHostWindow.state;\n                },\n                onDidChangeWindowState(listener, thisArg, disposables) {\n                    return extHostWindow.onDidChangeWindowState(listener, thisArg, disposables);\n                },\n                showInformationMessage(message, first, ...rest) {\n                    return extHostMessageService.showMessage(extension, severity_1.default.Info, message, first, rest);\n                },\n                showWarningMessage(message, first, ...rest) {\n                    return extHostMessageService.showMessage(extension, severity_1.default.Warning, message, first, rest);\n                },\n                showErrorMessage(message, first, ...rest) {\n                    return extHostMessageService.showMessage(extension, severity_1.default.Error, message, first, rest);\n                },\n                showQuickPick(items, options, token) {\n                    return extHostQuickOpen.showQuickPick(items, !!extension.enableProposedApi, options, token);\n                },\n                showWorkspaceFolderPick(options) {\n                    return extHostQuickOpen.showWorkspaceFolderPick(options);\n                },\n                showInputBox(options, token) {\n                    return extHostQuickOpen.showInput(options, token);\n                },\n                showOpenDialog(options) {\n                    return extHostDialogs.showOpenDialog(options);\n                },\n                showSaveDialog(options) {\n                    return extHostDialogs.showSaveDialog(options);\n                },\n                createStatusBarItem(position, priority) {\n                    return extHostStatusBar.createStatusBarEntry(extension.identifier, position, priority);\n                },\n                setStatusBarMessage(text, timeoutOrThenable) {\n                    return extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);\n                },\n                withScmProgress(task) {\n                    console.warn(`[Deprecation Warning] function 'withScmProgress' is deprecated and should no longer be used. Use 'withProgress' instead.`);\n                    return extHostProgress.withProgress(extension, { location: extHostTypes.ProgressLocation.SourceControl }, (progress, token) => task({ report(n) { } }));\n                },\n                withProgress(options, task) {\n                    return extHostProgress.withProgress(extension, options, task);\n                },\n                createOutputChannel(name) {\n                    return extHostOutputService.createOutputChannel(name);\n                },\n                createWebviewPanel(viewType, title, showOptions, options) {\n                    return extHostWebviews.createWebviewPanel(extension, viewType, title, showOptions, options);\n                },\n                createTerminal(nameOrOptions, shellPath, shellArgs) {\n                    if (typeof nameOrOptions === 'object') {\n                        return extHostTerminalService.createTerminalFromOptions(nameOrOptions);\n                    }\n                    return extHostTerminalService.createTerminal(nameOrOptions, shellPath, shellArgs);\n                },\n                createTerminalRenderer(name) {\n                    return extHostTerminalService.createTerminalRenderer(name);\n                },\n                registerTreeDataProvider(viewId, treeDataProvider) {\n                    return extHostTreeViews.registerTreeDataProvider(viewId, treeDataProvider, extension);\n                },\n                createTreeView(viewId, options) {\n                    return extHostTreeViews.createTreeView(viewId, options, extension);\n                },\n                registerWebviewPanelSerializer: (viewType, serializer) => {\n                    return extHostWebviews.registerWebviewPanelSerializer(viewType, serializer);\n                },\n                registerDecorationProvider: proposedApiFunction(extension, (provider) => {\n                    return extHostDecorations.registerDecorationProvider(provider, extension.identifier);\n                }),\n                registerUriHandler(handler) {\n                    return extHostUrls.registerUriHandler(extension.identifier, handler);\n                },\n                createQuickPick() {\n                    return extHostQuickOpen.createQuickPick(extension.identifier, !!extension.enableProposedApi);\n                },\n                createInputBox() {\n                    return extHostQuickOpen.createInputBox(extension.identifier);\n                }\n            };\n            // namespace: workspace\n            const workspace = {\n                get rootPath() {\n                    return extHostWorkspace.getPath();\n                },\n                set rootPath(value) {\n                    throw errors.readonly();\n                },\n                getWorkspaceFolder(resource) {\n                    return extHostWorkspace.getWorkspaceFolder(resource);\n                },\n                get workspaceFolders() {\n                    return extHostWorkspace.getWorkspaceFolders();\n                },\n                get name() {\n                    return extHostWorkspace.name;\n                },\n                set name(value) {\n                    throw errors.readonly();\n                },\n                updateWorkspaceFolders: (index, deleteCount, ...workspaceFoldersToAdd) => {\n                    return extHostWorkspace.updateWorkspaceFolders(extension, index, deleteCount || 0, ...workspaceFoldersToAdd);\n                },\n                onDidChangeWorkspaceFolders: function (listener, thisArgs, disposables) {\n                    return extHostWorkspace.onDidChangeWorkspace(listener, thisArgs, disposables);\n                },\n                asRelativePath: (pathOrUri, includeWorkspace) => {\n                    return extHostWorkspace.getRelativePath(pathOrUri, includeWorkspace);\n                },\n                findFiles: (include, exclude, maxResults, token) => {\n                    return extHostWorkspace.findFiles(typeConverters.GlobPattern.from(include), typeConverters.GlobPattern.from(types_1.withNullAsUndefined(exclude)), maxResults, extension.identifier, token);\n                },\n                findTextInFiles: (query, optionsOrCallback, callbackOrToken, token) => {\n                    let options;\n                    let callback;\n                    if (typeof optionsOrCallback === 'object') {\n                        options = optionsOrCallback;\n                        callback = callbackOrToken;\n                    }\n                    else {\n                        options = {};\n                        callback = optionsOrCallback;\n                        token = callbackOrToken;\n                    }\n                    return extHostWorkspace.findTextInFiles(query, options || {}, callback, extension.identifier, token);\n                },\n                saveAll: (includeUntitled) => {\n                    return extHostWorkspace.saveAll(includeUntitled);\n                },\n                applyEdit(edit) {\n                    return extHostEditors.applyWorkspaceEdit(edit);\n                },\n                createFileSystemWatcher: (pattern, ignoreCreate, ignoreChange, ignoreDelete) => {\n                    return extHostFileSystemEvent.createFileSystemWatcher(typeConverters.GlobPattern.from(pattern), ignoreCreate, ignoreChange, ignoreDelete);\n                },\n                get textDocuments() {\n                    return extHostDocuments.getAllDocumentData().map(data => data.document);\n                },\n                set textDocuments(value) {\n                    throw errors.readonly();\n                },\n                openTextDocument(uriOrFileNameOrOptions) {\n                    let uriPromise;\n                    const options = uriOrFileNameOrOptions;\n                    if (typeof uriOrFileNameOrOptions === 'string') {\n                        uriPromise = Promise.resolve(uri_1.URI.file(uriOrFileNameOrOptions));\n                    }\n                    else if (uriOrFileNameOrOptions instanceof uri_1.URI) {\n                        uriPromise = Promise.resolve(uriOrFileNameOrOptions);\n                    }\n                    else if (!options || typeof options === 'object') {\n                        uriPromise = extHostDocuments.createDocumentData(options);\n                    }\n                    else {\n                        throw new Error('illegal argument - uriOrFileNameOrOptions');\n                    }\n                    return uriPromise.then(uri => {\n                        return extHostDocuments.ensureDocumentData(uri).then(() => {\n                            return extHostDocuments.getDocument(uri);\n                        });\n                    });\n                },\n                onDidOpenTextDocument: (listener, thisArgs, disposables) => {\n                    return extHostDocuments.onDidAddDocument(listener, thisArgs, disposables);\n                },\n                onDidCloseTextDocument: (listener, thisArgs, disposables) => {\n                    return extHostDocuments.onDidRemoveDocument(listener, thisArgs, disposables);\n                },\n                onDidChangeTextDocument: (listener, thisArgs, disposables) => {\n                    return extHostDocuments.onDidChangeDocument(listener, thisArgs, disposables);\n                },\n                onDidSaveTextDocument: (listener, thisArgs, disposables) => {\n                    return extHostDocuments.onDidSaveDocument(listener, thisArgs, disposables);\n                },\n                onWillSaveTextDocument: (listener, thisArgs, disposables) => {\n                    return extHostDocumentSaveParticipant.getOnWillSaveTextDocumentEvent(extension)(listener, thisArgs, disposables);\n                },\n                onDidChangeConfiguration: (listener, thisArgs, disposables) => {\n                    return configProvider.onDidChangeConfiguration(listener, thisArgs, disposables);\n                },\n                getConfiguration(section, resource) {\n                    resource = arguments.length === 1 ? undefined : resource;\n                    return configProvider.getConfiguration(section, resource, extension.identifier);\n                },\n                registerTextDocumentContentProvider(scheme, provider) {\n                    return extHostDocumentContentProviders.registerTextDocumentContentProvider(scheme, provider);\n                },\n                registerTaskProvider: (type, provider) => {\n                    return extHostTask.registerTaskProvider(extension, provider);\n                },\n                registerFileSystemProvider(scheme, provider, options) {\n                    return extHostFileSystem.registerFileSystemProvider(scheme, provider, options);\n                },\n                registerFileSearchProvider: proposedApiFunction(extension, (scheme, provider) => {\n                    return extHostSearch.registerFileSearchProvider(scheme, provider);\n                }),\n                registerSearchProvider: proposedApiFunction(extension, () => {\n                    // Temp for live share in Insiders\n                    return { dispose: () => { } };\n                }),\n                registerTextSearchProvider: proposedApiFunction(extension, (scheme, provider) => {\n                    return extHostSearch.registerTextSearchProvider(scheme, provider);\n                }),\n                registerDocumentCommentProvider: proposedApiFunction(extension, (provider) => {\n                    return extHostComment.registerDocumentCommentProvider(extension.identifier, provider);\n                }),\n                registerWorkspaceCommentProvider: proposedApiFunction(extension, (provider) => {\n                    return extHostComment.registerWorkspaceCommentProvider(extension.identifier, provider);\n                }),\n                registerRemoteAuthorityResolver: proposedApiFunction(extension, (authorityPrefix, resolver) => {\n                    return extensionService.registerRemoteAuthorityResolver(authorityPrefix, resolver);\n                }),\n                registerResourceLabelFormatter: proposedApiFunction(extension, (formatter) => {\n                    return extHostFileSystem.registerResourceLabelFormatter(formatter);\n                }),\n                onDidRenameFile: proposedApiFunction(extension, (listener, thisArg, disposables) => {\n                    return extHostFileSystemEvent.onDidRenameFile(listener, thisArg, disposables);\n                }),\n                onWillRenameFile: proposedApiFunction(extension, (listener, thisArg, disposables) => {\n                    return extHostFileSystemEvent.getOnWillRenameFileEvent(extension)(listener, thisArg, disposables);\n                })\n            };\n            // namespace: scm\n            const scm = {\n                get inputBox() {\n                    return extHostSCM.getLastInputBox(extension); // Strict null override - Deprecated api\n                },\n                createSourceControl(id, label, rootUri) {\n                    return extHostSCM.createSourceControl(extension, id, label, rootUri);\n                }\n            };\n            const comment = {\n                createCommentController(id, label) {\n                    return extHostComment.createCommentController(extension, id, label);\n                }\n            };\n            // namespace: debug\n            const debug = {\n                get activeDebugSession() {\n                    return extHostDebugService.activeDebugSession;\n                },\n                get activeDebugConsole() {\n                    return extHostDebugService.activeDebugConsole;\n                },\n                get breakpoints() {\n                    return extHostDebugService.breakpoints;\n                },\n                onDidStartDebugSession(listener, thisArg, disposables) {\n                    return extHostDebugService.onDidStartDebugSession(listener, thisArg, disposables);\n                },\n                onDidTerminateDebugSession(listener, thisArg, disposables) {\n                    return extHostDebugService.onDidTerminateDebugSession(listener, thisArg, disposables);\n                },\n                onDidChangeActiveDebugSession(listener, thisArg, disposables) {\n                    return extHostDebugService.onDidChangeActiveDebugSession(listener, thisArg, disposables);\n                },\n                onDidReceiveDebugSessionCustomEvent(listener, thisArg, disposables) {\n                    return extHostDebugService.onDidReceiveDebugSessionCustomEvent(listener, thisArg, disposables);\n                },\n                onDidChangeBreakpoints(listener, thisArgs, disposables) {\n                    return extHostDebugService.onDidChangeBreakpoints(listener, thisArgs, disposables);\n                },\n                registerDebugConfigurationProvider(debugType, provider) {\n                    return extHostDebugService.registerDebugConfigurationProvider(debugType, provider);\n                },\n                registerDebugAdapterDescriptorFactory(debugType, factory) {\n                    return extHostDebugService.registerDebugAdapterDescriptorFactory(extension, debugType, factory);\n                },\n                registerDebugAdapterTrackerFactory(debugType, factory) {\n                    return extHostDebugService.registerDebugAdapterTrackerFactory(debugType, factory);\n                },\n                startDebugging(folder, nameOrConfig, parentSession) {\n                    return extHostDebugService.startDebugging(folder, nameOrConfig, parentSession);\n                },\n                addBreakpoints(breakpoints) {\n                    return extHostDebugService.addBreakpoints(breakpoints);\n                },\n                removeBreakpoints(breakpoints) {\n                    return extHostDebugService.removeBreakpoints(breakpoints);\n                }\n            };\n            const tasks = {\n                registerTaskProvider: (type, provider) => {\n                    return extHostTask.registerTaskProvider(extension, provider);\n                },\n                fetchTasks: (filter) => {\n                    return extHostTask.fetchTasks(filter);\n                },\n                executeTask: (task) => {\n                    return extHostTask.executeTask(extension, task);\n                },\n                get taskExecutions() {\n                    return extHostTask.taskExecutions;\n                },\n                onDidStartTask: (listeners, thisArgs, disposables) => {\n                    return extHostTask.onDidStartTask(listeners, thisArgs, disposables);\n                },\n                onDidEndTask: (listeners, thisArgs, disposables) => {\n                    return extHostTask.onDidEndTask(listeners, thisArgs, disposables);\n                },\n                onDidStartTaskProcess: (listeners, thisArgs, disposables) => {\n                    return extHostTask.onDidStartTaskProcess(listeners, thisArgs, disposables);\n                },\n                onDidEndTaskProcess: (listeners, thisArgs, disposables) => {\n                    return extHostTask.onDidEndTaskProcess(listeners, thisArgs, disposables);\n                }\n            };\n            return {\n                version: package_1.default.version,\n                // namespaces\n                commands,\n                debug,\n                env,\n                extensions,\n                languages,\n                scm,\n                comment,\n                tasks,\n                window,\n                workspace,\n                // types\n                Breakpoint: extHostTypes.Breakpoint,\n                CancellationTokenSource: cancellation_1.CancellationTokenSource,\n                CodeAction: extHostTypes.CodeAction,\n                CodeActionKind: extHostTypes.CodeActionKind,\n                CodeActionTrigger: extHostTypes.CodeActionTrigger,\n                CodeLens: extHostTypes.CodeLens,\n                CodeInset: extHostTypes.CodeInset,\n                Color: extHostTypes.Color,\n                ColorInformation: extHostTypes.ColorInformation,\n                ColorPresentation: extHostTypes.ColorPresentation,\n                CommentThreadCollapsibleState: extHostTypes.CommentThreadCollapsibleState,\n                CompletionItem: extHostTypes.CompletionItem,\n                CompletionItemKind: extHostTypes.CompletionItemKind,\n                CompletionList: extHostTypes.CompletionList,\n                CompletionTriggerKind: extHostTypes.CompletionTriggerKind,\n                ConfigurationTarget: extHostTypes.ConfigurationTarget,\n                DebugAdapterExecutable: extHostTypes.DebugAdapterExecutable,\n                DebugAdapterServer: extHostTypes.DebugAdapterServer,\n                DecorationRangeBehavior: extHostTypes.DecorationRangeBehavior,\n                Diagnostic: extHostTypes.Diagnostic,\n                DiagnosticRelatedInformation: extHostTypes.DiagnosticRelatedInformation,\n                DiagnosticSeverity: extHostTypes.DiagnosticSeverity,\n                DiagnosticTag: extHostTypes.DiagnosticTag,\n                Disposable: extHostTypes.Disposable,\n                DocumentHighlight: extHostTypes.DocumentHighlight,\n                DocumentHighlightKind: extHostTypes.DocumentHighlightKind,\n                DocumentLink: extHostTypes.DocumentLink,\n                DocumentSymbol: extHostTypes.DocumentSymbol,\n                EndOfLine: extHostTypes.EndOfLine,\n                EventEmitter: event_1.Emitter,\n                CustomExecution: extHostTypes.CustomExecution,\n                FileChangeType: extHostTypes.FileChangeType,\n                FileSystemError: extHostTypes.FileSystemError,\n                FileType: files.FileType,\n                FoldingRange: extHostTypes.FoldingRange,\n                FoldingRangeKind: extHostTypes.FoldingRangeKind,\n                FunctionBreakpoint: extHostTypes.FunctionBreakpoint,\n                Hover: extHostTypes.Hover,\n                IndentAction: languageConfiguration.IndentAction,\n                Location: extHostTypes.Location,\n                LogLevel: extHostTypes.LogLevel,\n                MarkdownString: extHostTypes.MarkdownString,\n                OverviewRulerLane: model_1.OverviewRulerLane,\n                ParameterInformation: extHostTypes.ParameterInformation,\n                Position: extHostTypes.Position,\n                ProcessExecution: extHostTypes.ProcessExecution,\n                ProgressLocation: extHostTypes.ProgressLocation,\n                QuickInputButtons: extHostTypes.QuickInputButtons,\n                Range: extHostTypes.Range,\n                RelativePattern: extHostTypes.RelativePattern,\n                ResolvedAuthority: extHostTypes.ResolvedAuthority,\n                Selection: extHostTypes.Selection,\n                SelectionRange: extHostTypes.SelectionRange,\n                ShellExecution: extHostTypes.ShellExecution,\n                ShellQuoting: extHostTypes.ShellQuoting,\n                SignatureHelpTriggerKind: extHostTypes.SignatureHelpTriggerKind,\n                SignatureHelp: extHostTypes.SignatureHelp,\n                SignatureInformation: extHostTypes.SignatureInformation,\n                SnippetString: extHostTypes.SnippetString,\n                SourceBreakpoint: extHostTypes.SourceBreakpoint,\n                SourceControlInputBoxValidationType: extHostTypes.SourceControlInputBoxValidationType,\n                StatusBarAlignment: extHostTypes.StatusBarAlignment,\n                SymbolInformation: extHostTypes.SymbolInformation,\n                SymbolKind: extHostTypes.SymbolKind,\n                Task: extHostTypes.Task,\n                Task2: extHostTypes.Task,\n                TaskGroup: extHostTypes.TaskGroup,\n                TaskPanelKind: extHostTypes.TaskPanelKind,\n                TaskRevealKind: extHostTypes.TaskRevealKind,\n                TaskScope: extHostTypes.TaskScope,\n                TextDocumentSaveReason: extHostTypes.TextDocumentSaveReason,\n                TextEdit: extHostTypes.TextEdit,\n                TextEditorCursorStyle: editorOptions_1.TextEditorCursorStyle,\n                TextEditorLineNumbersStyle: extHostTypes.TextEditorLineNumbersStyle,\n                TextEditorRevealType: extHostTypes.TextEditorRevealType,\n                TextEditorSelectionChangeKind: extHostTypes.TextEditorSelectionChangeKind,\n                ThemeColor: extHostTypes.ThemeColor,\n                ThemeIcon: extHostTypes.ThemeIcon,\n                TreeItem: extHostTypes.TreeItem,\n                TreeItem2: extHostTypes.TreeItem,\n                TreeItemCollapsibleState: extHostTypes.TreeItemCollapsibleState,\n                Uri: uri_1.URI,\n                ViewColumn: extHostTypes.ViewColumn,\n                WorkspaceEdit: extHostTypes.WorkspaceEdit,\n                // proposed\n                CallHierarchyDirection: extHostTypes.CallHierarchyDirection,\n                CallHierarchyItem: extHostTypes.CallHierarchyItem\n            };\n        };\n    }\n    exports.createApiFactory = createApiFactory;\n    class Extension {\n        constructor(extensionService, description) {\n            this._extensionService = extensionService;\n            this._identifier = description.identifier;\n            this.id = description.identifier.value;\n            this.extensionPath = path.normalize(resources_1.originalFSPath(description.extensionLocation));\n            this.packageJSON = description;\n        }\n        get isActive() {\n            return this._extensionService.isActivated(this._identifier);\n        }\n        get exports() {\n            if (this.packageJSON.api === 'none') {\n                return undefined; // Strict nulloverride - Public api\n            }\n            return this._extensionService.getExtensionExports(this._identifier);\n        }\n        activate() {\n            return this._extensionService.activateByIdWithErrors(this._identifier, new extHostExtensionActivator_1.ExtensionActivatedByAPI(false)).then(() => this.exports);\n        }\n    }\n    function initializeExtensionApi(extensionService, apiFactory, extensionRegistry, configProvider) {\n        return extensionService.getExtensionPathIndex().then(trie => defineAPI(apiFactory, trie, extensionRegistry, configProvider));\n    }\n    exports.initializeExtensionApi = initializeExtensionApi;\n    function defineAPI(factory, extensionPaths, extensionRegistry, configProvider) {\n        // each extension is meant to get its own api implementation\n        const extApiImpl = new Map();\n        let defaultApiImpl;\n        const node_module = require.__$__nodeRequire('module');\n        const original = node_module._load;\n        node_module._load = function load(request, parent, isMain) {\n            if (request !== 'vscode') {\n                return original.apply(this, arguments);\n            }\n            // get extension id from filename and api for extension\n            const ext = extensionPaths.findSubstr(uri_1.URI.file(parent.filename).fsPath);\n            if (ext) {\n                let apiImpl = extApiImpl.get(extensions_2.ExtensionIdentifier.toKey(ext.identifier));\n                if (!apiImpl) {\n                    apiImpl = factory(ext, extensionRegistry, configProvider);\n                    extApiImpl.set(extensions_2.ExtensionIdentifier.toKey(ext.identifier), apiImpl);\n                }\n                return apiImpl;\n            }\n            // fall back to a default implementation\n            if (!defaultApiImpl) {\n                let extensionPathsPretty = '';\n                extensionPaths.forEach((value, index) => extensionPathsPretty += `\\t${index} -> ${value.identifier.value}\\n`);\n                console.warn(`Could not identify extension for 'vscode' require call from ${parent.filename}. These are the extension path mappings: \\n${extensionPathsPretty}`);\n                defaultApiImpl = factory(extensions_1.nullExtensionDescription, extensionRegistry, configProvider);\n            }\n            return defaultApiImpl;\n        };\n    }\n});\n",null]}