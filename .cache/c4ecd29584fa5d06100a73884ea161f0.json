{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybinding.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybinding.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar KeybindingSource;\n(function (KeybindingSource) {\n    KeybindingSource[KeybindingSource[\"Default\"] = 1] = \"Default\";\n    KeybindingSource[KeybindingSource[\"User\"] = 2] = \"User\";\n})(KeybindingSource = exports.KeybindingSource || (exports.KeybindingSource = {}));\nexports.IKeybindingService = instantiation_1.createDecorator('keybindingService');\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybinding.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/platform/keybinding/common/keybinding.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAKhG,gFAAiF;AAWjF,IAAkB,gBAGjB;AAHD,WAAkB,gBAAgB;IACjC,6DAAW,CAAA;IACX,uDAAI,CAAA;AACL,CAAC,EAHiB,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAGjC;AAkBY,QAAA,kBAAkB,GAAG,+BAAe,CAAqB,mBAAmB,CAAC,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { KeyCode, Keybinding, ResolvedKeybinding } from 'vs/base/common/keyCodes';\nimport { IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IResolveResult } from 'vs/platform/keybinding/common/keybindingResolver';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\n\nexport interface IUserFriendlyKeybinding {\n\tkey: string;\n\tcommand: string;\n\targs?: any;\n\twhen?: string;\n}\n\nexport const enum KeybindingSource {\n\tDefault = 1,\n\tUser\n}\n\nexport interface IKeybindingEvent {\n\tsource: KeybindingSource;\n\tkeybindings?: IUserFriendlyKeybinding[];\n}\n\nexport interface IKeyboardEvent {\n\treadonly _standardKeyboardEventBrand: true;\n\n\treadonly ctrlKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly altKey: boolean;\n\treadonly metaKey: boolean;\n\treadonly keyCode: KeyCode;\n\treadonly code: string;\n}\n\nexport const IKeybindingService = createDecorator<IKeybindingService>('keybindingService');\n\nexport interface IKeybindingService {\n\t_serviceBrand: any;\n\n\tonDidUpdateKeybindings: Event<IKeybindingEvent>;\n\n\t/**\n\t * Returns none, one or many (depending on keyboard layout)!\n\t */\n\tresolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[];\n\n\tresolveKeyboardEvent(keyboardEvent: IKeyboardEvent): ResolvedKeybinding;\n\n\tresolveUserBinding(userBinding: string): ResolvedKeybinding[];\n\n\t/**\n\t * Resolve and dispatch `keyboardEvent` and invoke the command.\n\t */\n\tdispatchEvent(e: IKeyboardEvent, target: IContextKeyServiceTarget): boolean;\n\n\t/**\n\t * Resolve and dispatch `keyboardEvent`, but do not invoke the command or change inner state.\n\t */\n\tsoftDispatch(keyboardEvent: IKeyboardEvent, target: IContextKeyServiceTarget): IResolveResult | null;\n\n\tdispatchByUserSettingsLabel(userSettingsLabel: string, target: IContextKeyServiceTarget): void;\n\n\t/**\n\t * Look up keybindings for a command.\n\t * Use `lookupKeybinding` if you are interested in the preferred keybinding.\n\t */\n\tlookupKeybindings(commandId: string): ResolvedKeybinding[];\n\n\t/**\n\t * Look up the preferred (last defined) keybinding for a command.\n\t * @returns The preferred keybinding or null if the command is not bound.\n\t */\n\tlookupKeybinding(commandId: string): ResolvedKeybinding | undefined;\n\n\tgetDefaultKeybindingsContent(): string;\n\n\tgetDefaultKeybindings(): ResolvedKeybindingItem[];\n\n\tgetKeybindings(): ResolvedKeybindingItem[];\n\n\tcustomKeybindingsCount(): number;\n\n\t/**\n\t * Will the given key event produce a character that's rendered on screen, e.g. in a\n\t * text box. *Note* that the results of this function can be incorrect.\n\t */\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n\n\t_dumpDebugInfo(): string;\n}\n\n"]}]}