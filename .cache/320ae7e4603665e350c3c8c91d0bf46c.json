{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar event_1 = require(\"vs/base/common/event\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar errors = require(\"vs/base/common/errors\");\nvar severity_1 = require(\"vs/base/common/severity\");\nvar aria = require(\"vs/base/browser/ui/aria/aria\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar markers_1 = require(\"vs/platform/markers/common/markers\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar debugModel_1 = require(\"vs/workbench/contrib/debug/common/debugModel\");\nvar debugViewModel_1 = require(\"vs/workbench/contrib/debug/common/debugViewModel\");\nvar debugactions = require(\"vs/workbench/contrib/debug/browser/debugActions\");\nvar debugConfigurationManager_1 = require(\"vs/workbench/contrib/debug/electron-browser/debugConfigurationManager\");\nvar constants_1 = require(\"vs/workbench/contrib/markers/browser/constants\");\nvar taskService_1 = require(\"vs/workbench/contrib/tasks/common/taskService\");\nvar files_2 = require(\"vs/workbench/contrib/files/common/files\");\nvar viewlet_1 = require(\"vs/workbench/services/viewlet/browser/viewlet\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar extensionHost_1 = require(\"vs/platform/extensions/common/extensionHost\");\nvar broadcast_1 = require(\"vs/workbench/services/broadcast/common/broadcast\");\nvar console_1 = require(\"vs/base/common/console\");\nvar tasks_1 = require(\"vs/workbench/contrib/tasks/common/tasks\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar actions_1 = require(\"vs/base/common/actions\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar debugSession_1 = require(\"vs/workbench/contrib/debug/electron-browser/debugSession\");\nvar lifecycle_2 = require(\"vs/base/common/lifecycle\");\nvar debug_1 = require(\"vs/workbench/contrib/debug/common/debug\");\nvar debugUtils_1 = require(\"vs/workbench/contrib/debug/common/debugUtils\");\nvar errorsWithActions_1 = require(\"vs/base/common/errorsWithActions\");\nvar async_1 = require(\"vs/base/common/async\");\nvar DEBUG_BREAKPOINTS_KEY = 'debug.breakpoint';\nvar DEBUG_BREAKPOINTS_ACTIVATED_KEY = 'debug.breakpointactivated';\nvar DEBUG_FUNCTION_BREAKPOINTS_KEY = 'debug.functionbreakpoint';\nvar DEBUG_EXCEPTION_BREAKPOINTS_KEY = 'debug.exceptionbreakpoint';\nvar DEBUG_WATCH_EXPRESSIONS_KEY = 'debug.watchexpressions';\nfunction once(match, event) {\n    return function (listener, thisArgs, disposables) {\n        if (thisArgs === void 0) { thisArgs = null; }\n        var result = event(function (e) {\n            if (match(e)) {\n                result.dispose();\n                return listener.call(thisArgs, e);\n            }\n        }, null, disposables);\n        return result;\n    };\n}\nvar TaskRunResult;\n(function (TaskRunResult) {\n    TaskRunResult[TaskRunResult[\"Failure\"] = 0] = \"Failure\";\n    TaskRunResult[TaskRunResult[\"Success\"] = 1] = \"Success\";\n})(TaskRunResult || (TaskRunResult = {}));\nvar DebugService = /** @class */ (function () {\n    function DebugService(storageService, editorService, textFileService, viewletService, panelService, notificationService, dialogService, layoutService, broadcastService, telemetryService, contextService, contextKeyService, lifecycleService, instantiationService, extensionService, markerService, taskService, fileService, configurationService) {\n        var _this = this;\n        this.storageService = storageService;\n        this.editorService = editorService;\n        this.textFileService = textFileService;\n        this.viewletService = viewletService;\n        this.panelService = panelService;\n        this.notificationService = notificationService;\n        this.dialogService = dialogService;\n        this.layoutService = layoutService;\n        this.broadcastService = broadcastService;\n        this.telemetryService = telemetryService;\n        this.contextService = contextService;\n        this.lifecycleService = lifecycleService;\n        this.instantiationService = instantiationService;\n        this.extensionService = extensionService;\n        this.markerService = markerService;\n        this.taskService = taskService;\n        this.fileService = fileService;\n        this.configurationService = configurationService;\n        this.initializing = false;\n        this.toDispose = [];\n        this.breakpointsToSendOnResourceSaved = new Set();\n        this._onDidChangeState = new event_1.Emitter();\n        this._onDidNewSession = new event_1.Emitter();\n        this._onWillNewSession = new event_1.Emitter();\n        this._onDidEndSession = new event_1.Emitter();\n        this.configurationManager = this.instantiationService.createInstance(debugConfigurationManager_1.ConfigurationManager, this);\n        this.toDispose.push(this.configurationManager);\n        this.debugType = debug_1.CONTEXT_DEBUG_TYPE.bindTo(contextKeyService);\n        this.debugState = debug_1.CONTEXT_DEBUG_STATE.bindTo(contextKeyService);\n        this.inDebugMode = debug_1.CONTEXT_IN_DEBUG_MODE.bindTo(contextKeyService);\n        this.model = new debugModel_1.DebugModel(this.loadBreakpoints(), this.storageService.getBoolean(DEBUG_BREAKPOINTS_ACTIVATED_KEY, storage_1.StorageScope.WORKSPACE, true), this.loadFunctionBreakpoints(), this.loadExceptionBreakpoints(), this.loadWatchExpressions(), this.textFileService);\n        this.toDispose.push(this.model);\n        this.viewModel = new debugViewModel_1.ViewModel(contextKeyService);\n        this.toDispose.push(this.fileService.onFileChanges(function (e) { return _this.onFileChanges(e); }));\n        this.toDispose.push(this.storageService.onWillSaveState(this.saveState, this));\n        this.lifecycleService.onShutdown(this.dispose, this);\n        this.toDispose.push(this.broadcastService.onBroadcast(function (broadcast) {\n            var session = _this.model.getSession(broadcast.payload.debugId, true);\n            if (session) {\n                switch (broadcast.channel) {\n                    case extensionHost_1.EXTENSION_ATTACH_BROADCAST_CHANNEL:\n                        // EH was started in debug mode -> attach to it\n                        session.configuration.request = 'attach';\n                        session.configuration.port = broadcast.payload.port;\n                        _this.launchOrAttachToSession(session);\n                        break;\n                    case extensionHost_1.EXTENSION_TERMINATE_BROADCAST_CHANNEL:\n                        // EH was terminated\n                        session.disconnect();\n                        break;\n                    case extensionHost_1.EXTENSION_LOG_BROADCAST_CHANNEL:\n                        // extension logged output -> show it in REPL\n                        var extensionOutput = broadcast.payload.logEntry;\n                        var sev = extensionOutput.severity === 'warn' ? severity_1.default.Warning : extensionOutput.severity === 'error' ? severity_1.default.Error : severity_1.default.Info;\n                        var _a = console_1.parse(extensionOutput), args = _a.args, stack = _a.stack;\n                        var frame = !!stack ? console_1.getFirstFrame(stack) : undefined;\n                        session.logToRepl(sev, args, frame);\n                        break;\n                }\n            }\n        }, this));\n        this.toDispose.push(this.viewModel.onDidFocusStackFrame(function () {\n            _this.onStateChange();\n        }));\n        this.toDispose.push(this.viewModel.onDidFocusSession(function (session) {\n            var id = session ? session.getId() : undefined;\n            _this.model.setBreakpointsSessionId(id);\n            _this.onStateChange();\n        }));\n    }\n    DebugService.prototype.getModel = function () {\n        return this.model;\n    };\n    DebugService.prototype.getViewModel = function () {\n        return this.viewModel;\n    };\n    DebugService.prototype.getConfigurationManager = function () {\n        return this.configurationManager;\n    };\n    DebugService.prototype.sourceIsNotAvailable = function (uri) {\n        this.model.sourceIsNotAvailable(uri);\n    };\n    DebugService.prototype.dispose = function () {\n        this.toDispose = lifecycle_2.dispose(this.toDispose);\n    };\n    Object.defineProperty(DebugService.prototype, \"state\", {\n        //---- state management\n        get: function () {\n            var focusedSession = this.viewModel.focusedSession;\n            if (focusedSession) {\n                return focusedSession.state;\n            }\n            return this.initializing ? debug_1.State.Initializing : debug_1.State.Inactive;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DebugService.prototype.startInitializingState = function () {\n        if (!this.initializing) {\n            this.initializing = true;\n            this.onStateChange();\n        }\n    };\n    DebugService.prototype.endInitializingState = function () {\n        if (this.initializing) {\n            this.initializing = false;\n            this.onStateChange();\n        }\n    };\n    DebugService.prototype.onStateChange = function () {\n        var state = this.state;\n        if (this.previousState !== state) {\n            this.debugState.set(debug_1.getStateLabel(state));\n            this.inDebugMode.set(state !== debug_1.State.Inactive);\n            this.previousState = state;\n            this._onDidChangeState.fire(state);\n        }\n    };\n    Object.defineProperty(DebugService.prototype, \"onDidChangeState\", {\n        get: function () {\n            return this._onDidChangeState.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugService.prototype, \"onDidNewSession\", {\n        get: function () {\n            return this._onDidNewSession.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugService.prototype, \"onWillNewSession\", {\n        get: function () {\n            return this._onWillNewSession.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugService.prototype, \"onDidEndSession\", {\n        get: function () {\n            return this._onDidEndSession.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //---- life cycle management\n    /**\n     * main entry point\n     * properly manages compounds, checks for errors and handles the initializing state.\n     */\n    DebugService.prototype.startDebugging = function (launch, configOrName, noDebug, parentSession) {\n        var _this = this;\n        if (noDebug === void 0) { noDebug = false; }\n        this.startInitializingState();\n        // make sure to save all files and that the configuration is up to date\n        return this.extensionService.activateByEvent('onDebug').then(function () {\n            return _this.textFileService.saveAll().then(function () { return _this.configurationService.reloadConfiguration(launch ? launch.workspace : undefined).then(function () {\n                return _this.extensionService.whenInstalledExtensionsRegistered().then(function () {\n                    var config;\n                    var compound;\n                    if (!configOrName) {\n                        configOrName = _this.configurationManager.selectedConfiguration.name;\n                    }\n                    if (typeof configOrName === 'string' && launch) {\n                        config = launch.getConfiguration(configOrName);\n                        compound = launch.getCompound(configOrName);\n                        var sessions = _this.model.getSessions();\n                        var alreadyRunningMessage = nls.localize('configurationAlreadyRunning', \"There is already a debug configuration \\\"{0}\\\" running.\", configOrName);\n                        if (sessions.some(function (s) { return s.configuration.name === configOrName && (!launch || !launch.workspace || !s.root || s.root.uri.toString() === launch.workspace.uri.toString()); })) {\n                            return Promise.reject(new Error(alreadyRunningMessage));\n                        }\n                        if (compound && compound.configurations && sessions.some(function (p) { return compound.configurations.indexOf(p.configuration.name) !== -1; })) {\n                            return Promise.reject(new Error(alreadyRunningMessage));\n                        }\n                    }\n                    else if (typeof configOrName !== 'string') {\n                        config = configOrName;\n                    }\n                    if (compound) {\n                        // we are starting a compound debug, first do some error checking and than start each configuration in the compound\n                        if (!compound.configurations) {\n                            return Promise.reject(new Error(nls.localize({ key: 'compoundMustHaveConfigurations', comment: ['compound indicates a \"compounds\" configuration item', '\"configurations\" is an attribute and should not be localized'] }, \"Compound must have \\\"configurations\\\" attribute set in order to start multiple configurations.\")));\n                        }\n                        return Promise.all(compound.configurations.map(function (configData) {\n                            var name = typeof configData === 'string' ? configData : configData.name;\n                            if (name === compound.name) {\n                                return Promise.resolve(false);\n                            }\n                            var launchForName;\n                            if (typeof configData === 'string') {\n                                var launchesContainingName = _this.configurationManager.getLaunches().filter(function (l) { return !!l.getConfiguration(name); });\n                                if (launchesContainingName.length === 1) {\n                                    launchForName = launchesContainingName[0];\n                                }\n                                else if (launch && launchesContainingName.length > 1 && launchesContainingName.indexOf(launch) >= 0) {\n                                    // If there are multiple launches containing the configuration give priority to the configuration in the current launch\n                                    launchForName = launch;\n                                }\n                                else {\n                                    return Promise.reject(new Error(launchesContainingName.length === 0 ? nls.localize('noConfigurationNameInWorkspace', \"Could not find launch configuration '{0}' in the workspace.\", name)\n                                        : nls.localize('multipleConfigurationNamesInWorkspace', \"There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.\", name)));\n                                }\n                            }\n                            else if (configData.folder) {\n                                var launchesMatchingConfigData = _this.configurationManager.getLaunches().filter(function (l) { return l.workspace && l.workspace.name === configData.folder && !!l.getConfiguration(configData.name); });\n                                if (launchesMatchingConfigData.length === 1) {\n                                    launchForName = launchesMatchingConfigData[0];\n                                }\n                                else {\n                                    return Promise.reject(new Error(nls.localize('noFolderWithName', \"Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.\", configData.folder, configData.name, compound.name)));\n                                }\n                            }\n                            return _this.createSession(launchForName, launchForName.getConfiguration(name), noDebug, parentSession);\n                        })).then(function (values) { return values.every(function (success) { return !!success; }); }); // Compound launch is a success only if each configuration launched successfully\n                    }\n                    if (configOrName && !config) {\n                        var message = !!launch ? nls.localize('configMissing', \"Configuration '{0}' is missing in 'launch.json'.\", typeof configOrName === 'string' ? configOrName : JSON.stringify(configOrName)) :\n                            nls.localize('launchJsonDoesNotExist', \"'launch.json' does not exist.\");\n                        return Promise.reject(new Error(message));\n                    }\n                    return _this.createSession(launch, config, noDebug, parentSession);\n                });\n            }); });\n        }).then(function (success) {\n            // make sure to get out of initializing state, and propagate the result\n            _this.endInitializingState();\n            return success;\n        }, function (err) {\n            _this.endInitializingState();\n            return Promise.reject(err);\n        });\n    };\n    /**\n     * gets the debugger for the type, resolves configurations by providers, substitutes variables and runs prelaunch tasks\n     */\n    DebugService.prototype.createSession = function (launch, config, noDebug, parentSession) {\n        var _this = this;\n        // We keep the debug type in a separate variable 'type' so that a no-folder config has no attributes.\n        // Storing the type in the config would break extensions that assume that the no-folder case is indicated by an empty config.\n        var type;\n        if (config) {\n            type = config.type;\n        }\n        else {\n            // a no-folder workspace has no launch.config\n            config = Object.create(null);\n        }\n        var unresolvedConfig = objects_1.deepClone(config);\n        if (noDebug) {\n            config.noDebug = true;\n        }\n        var debuggerThenable = type ? Promise.resolve() : this.configurationManager.guessDebugger().then(function (dbgr) { type = dbgr && dbgr.type; });\n        return debuggerThenable.then(function () {\n            return _this.configurationManager.resolveConfigurationByProviders(launch && launch.workspace ? launch.workspace.uri : undefined, type, config).then(function (config) {\n                // a falsy config indicates an aborted launch\n                if (config && config.type) {\n                    return _this.substituteVariables(launch, config).then(function (resolvedConfig) {\n                        if (!resolvedConfig) {\n                            // User canceled resolving of interactive variables, silently return\n                            return false;\n                        }\n                        if (!_this.configurationManager.getDebugger(resolvedConfig.type) || (config.request !== 'attach' && config.request !== 'launch')) {\n                            var message = void 0;\n                            if (config.request !== 'attach' && config.request !== 'launch') {\n                                message = config.request ? nls.localize('debugRequestNotSupported', \"Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.\", 'request', config.request)\n                                    : nls.localize('debugRequesMissing', \"Attribute '{0}' is missing from the chosen debug configuration.\", 'request');\n                            }\n                            else {\n                                message = resolvedConfig.type ? nls.localize('debugTypeNotSupported', \"Configured debug type '{0}' is not supported.\", resolvedConfig.type) :\n                                    nls.localize('debugTypeMissing', \"Missing property 'type' for the chosen launch configuration.\");\n                            }\n                            return _this.showError(message).then(function () { return false; });\n                        }\n                        var workspace = launch ? launch.workspace : undefined;\n                        return _this.runTaskAndCheckErrors(workspace, resolvedConfig.preLaunchTask).then(function (result) {\n                            if (result === TaskRunResult.Success) {\n                                return _this.doCreateSession(workspace, { resolved: resolvedConfig, unresolved: unresolvedConfig }, parentSession);\n                            }\n                            return false;\n                        });\n                    }, function (err) {\n                        if (err && err.message) {\n                            return _this.showError(err.message).then(function () { return false; });\n                        }\n                        if (_this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.EMPTY) {\n                            return _this.showError(nls.localize('noFolderWorkspaceDebugError', \"The active file can not be debugged. Make sure it is saved on disk and that you have a debug extension installed for that file type.\"))\n                                .then(function () { return false; });\n                        }\n                        return launch && launch.openConfigFile(false, true).then(function () { return false; });\n                    });\n                }\n                if (launch && type && config === null) { // show launch.json only for \"config\" being \"null\".\n                    return launch.openConfigFile(false, true, type).then(function () { return false; });\n                }\n                return false;\n            });\n        });\n    };\n    /**\n     * instantiates the new session, initializes the session, registers session listeners and reports telemetry\n     */\n    DebugService.prototype.doCreateSession = function (root, configuration, parentSession) {\n        var _this = this;\n        var session = this.instantiationService.createInstance(debugSession_1.DebugSession, configuration, root, this.model, parentSession);\n        this.model.addSession(session);\n        // register listeners as the very first thing!\n        this.registerSessionListeners(session);\n        // since the Session is now properly registered under its ID and hooked, we can announce it\n        // this event doesn't go to extensions\n        this._onWillNewSession.fire(session);\n        var openDebug = this.configurationService.getValue('debug').openDebug;\n        // Open debug viewlet based on the visibility of the side bar and openDebug setting. Do not open for 'run without debug'\n        if (!configuration.resolved.noDebug && (openDebug === 'openOnSessionStart' || (openDebug === 'openOnFirstSessionStart' && this.viewModel.firstSessionStart))) {\n            this.viewletService.openViewlet(debug_1.VIEWLET_ID).then(undefined, errors.onUnexpectedError);\n        }\n        return this.launchOrAttachToSession(session).then(function () {\n            // since the initialized response has arrived announce the new Session (including extensions)\n            _this._onDidNewSession.fire(session);\n            var internalConsoleOptions = session.configuration.internalConsoleOptions || _this.configurationService.getValue('debug').internalConsoleOptions;\n            if (internalConsoleOptions === 'openOnSessionStart' || (_this.viewModel.firstSessionStart && internalConsoleOptions === 'openOnFirstSessionStart')) {\n                _this.panelService.openPanel(debug_1.REPL_ID, false);\n            }\n            _this.viewModel.firstSessionStart = false;\n            if (_this.model.getSessions().length > 1) {\n                _this.viewModel.setMultiSessionView(true);\n            }\n            return _this.telemetryDebugSessionStart(root, session.configuration.type);\n        }).then(function () { return true; }, function (error) {\n            if (errors.isPromiseCanceledError(error)) {\n                // don't show 'canceled' error messages to the user #7906\n                return Promise.resolve(false);\n            }\n            // Show the repl if some error got logged there #5870\n            if (session && session.getReplElements().length > 0) {\n                _this.panelService.openPanel(debug_1.REPL_ID, false);\n            }\n            if (session.configuration && session.configuration.request === 'attach' && session.configuration.__autoAttach) {\n                // ignore attach timeouts in auto attach mode\n                return Promise.resolve(false);\n            }\n            var errorMessage = error instanceof Error ? error.message : error;\n            _this.telemetryDebugMisconfiguration(session.configuration ? session.configuration.type : undefined, errorMessage);\n            return _this.showError(errorMessage, errorsWithActions_1.isErrorWithActions(error) ? error.actions : []).then(function () { return false; });\n        });\n    };\n    DebugService.prototype.launchOrAttachToSession = function (session, focus) {\n        var _this = this;\n        if (focus === void 0) { focus = true; }\n        var dbgr = this.configurationManager.getDebugger(session.configuration.type);\n        return session.initialize(dbgr).then(function () {\n            return session.launchOrAttach(session.configuration).then(function () {\n                if (focus) {\n                    _this.focusStackFrame(undefined, undefined, session);\n                }\n            });\n        }).then(undefined, function (err) {\n            session.shutdown();\n            return Promise.reject(err);\n        });\n    };\n    DebugService.prototype.registerSessionListeners = function (session) {\n        var _this = this;\n        var sessionRunningScheduler = new async_1.RunOnceScheduler(function () {\n            // Do not immediatly defocus the stack frame if the session is running\n            if (session.state === debug_1.State.Running && _this.viewModel.focusedSession === session) {\n                _this.viewModel.setFocus(undefined, _this.viewModel.focusedThread, session, false);\n            }\n        }, 200);\n        this.toDispose.push(session.onDidChangeState(function () {\n            if (session.state === debug_1.State.Running && _this.viewModel.focusedSession === session) {\n                sessionRunningScheduler.schedule();\n            }\n            if (session === _this.viewModel.focusedSession) {\n                _this.onStateChange();\n            }\n        }));\n        this.toDispose.push(session.onDidEndAdapter(function (adapterExitEvent) {\n            if (adapterExitEvent.error) {\n                _this.notificationService.error(nls.localize('debugAdapterCrash', \"Debug adapter process has terminated unexpectedly ({0})\", adapterExitEvent.error.message || adapterExitEvent.error.toString()));\n            }\n            // 'Run without debugging' mode VSCode must terminate the extension host. More details: #3905\n            if (debugUtils_1.isExtensionHostDebugging(session.configuration) && session.state === debug_1.State.Running && session.configuration.noDebug) {\n                _this.broadcastService.broadcast({\n                    channel: extensionHost_1.EXTENSION_CLOSE_EXTHOST_BROADCAST_CHANNEL,\n                    payload: [session.root.uri.toString()]\n                });\n            }\n            _this.telemetryDebugSessionStop(session, adapterExitEvent);\n            if (session.configuration.postDebugTask) {\n                _this.runTask(session.root, session.configuration.postDebugTask).then(undefined, function (err) {\n                    return _this.notificationService.error(err);\n                });\n            }\n            session.shutdown();\n            _this.endInitializingState();\n            _this._onDidEndSession.fire(session);\n            var focusedSession = _this.viewModel.focusedSession;\n            if (focusedSession && focusedSession.getId() === session.getId()) {\n                _this.focusStackFrame(undefined);\n            }\n            if (_this.model.getSessions().length === 0) {\n                _this.viewModel.setMultiSessionView(false);\n                if (_this.layoutService.isVisible(layoutService_1.Parts.SIDEBAR_PART) && _this.configurationService.getValue('debug').openExplorerOnEnd) {\n                    _this.viewletService.openViewlet(files_2.VIEWLET_ID);\n                }\n            }\n        }));\n    };\n    DebugService.prototype.restartSession = function (session, restartData) {\n        var _this = this;\n        return this.textFileService.saveAll().then(function () {\n            var isAutoRestart = !!restartData;\n            var runTasks = function () {\n                if (isAutoRestart) {\n                    // Do not run preLaunch and postDebug tasks for automatic restarts\n                    return Promise.resolve(TaskRunResult.Success);\n                }\n                return _this.runTask(session.root, session.configuration.postDebugTask)\n                    .then(function () { return _this.runTaskAndCheckErrors(session.root, session.configuration.preLaunchTask); });\n            };\n            if (session.capabilities.supportsRestartRequest) {\n                return runTasks().then(function (taskResult) { return taskResult === TaskRunResult.Success ? session.restart() : undefined; });\n            }\n            if (debugUtils_1.isExtensionHostDebugging(session.configuration) && session.root) {\n                return runTasks().then(function (taskResult) { return taskResult === TaskRunResult.Success ? _this.broadcastService.broadcast({\n                    channel: extensionHost_1.EXTENSION_RELOAD_BROADCAST_CHANNEL,\n                    payload: [session.root.uri.toString()]\n                }) : undefined; });\n            }\n            var shouldFocus = _this.viewModel.focusedSession && session.getId() === _this.viewModel.focusedSession.getId();\n            // If the restart is automatic  -> disconnect, otherwise -> terminate #55064\n            return (isAutoRestart ? session.disconnect(true) : session.terminate(true)).then(function () {\n                return new Promise(function (c, e) {\n                    setTimeout(function () {\n                        runTasks().then(function (taskResult) {\n                            if (taskResult !== TaskRunResult.Success) {\n                                return;\n                            }\n                            // Read the configuration again if a launch.json has been changed, if not just use the inmemory configuration\n                            var needsToSubstitute = false;\n                            var unresolved;\n                            var launch = session.root ? _this.configurationManager.getLaunch(session.root.uri) : undefined;\n                            if (launch) {\n                                unresolved = launch.getConfiguration(session.configuration.name);\n                                if (unresolved && !objects_1.equals(unresolved, session.unresolvedConfiguration)) {\n                                    // Take the type from the session since the debug extension might overwrite it #21316\n                                    unresolved.type = session.configuration.type;\n                                    unresolved.noDebug = session.configuration.noDebug;\n                                    needsToSubstitute = true;\n                                }\n                            }\n                            var substitutionThenable = Promise.resolve(session.configuration);\n                            if (launch && needsToSubstitute && unresolved) {\n                                substitutionThenable = _this.configurationManager.resolveConfigurationByProviders(launch.workspace ? launch.workspace.uri : undefined, unresolved.type, unresolved)\n                                    .then(function (resolved) {\n                                    if (resolved) {\n                                        // start debugging\n                                        return _this.substituteVariables(launch, resolved);\n                                    }\n                                    else if (resolved === null) {\n                                        // abort debugging silently and open launch.json\n                                        return Promise.resolve(null);\n                                    }\n                                    else {\n                                        // abort debugging silently\n                                        return Promise.resolve(undefined);\n                                    }\n                                });\n                            }\n                            substitutionThenable.then(function (resolved) {\n                                if (!resolved) {\n                                    return c(undefined);\n                                }\n                                session.setConfiguration({ resolved: resolved, unresolved: unresolved });\n                                session.configuration.__restart = restartData;\n                                _this.launchOrAttachToSession(session, shouldFocus).then(function () {\n                                    _this._onDidNewSession.fire(session);\n                                    c(undefined);\n                                }, function (err) { return e(err); });\n                            });\n                        });\n                    }, 300);\n                });\n            });\n        });\n    };\n    DebugService.prototype.stopSession = function (session) {\n        if (session) {\n            return session.terminate();\n        }\n        var sessions = this.model.getSessions();\n        if (sessions.length === 0) {\n            this.endInitializingState();\n        }\n        return Promise.all(sessions.map(function (s) { return s.terminate(); }));\n    };\n    DebugService.prototype.substituteVariables = function (launch, config) {\n        var _this = this;\n        var dbg = this.configurationManager.getDebugger(config.type);\n        if (dbg) {\n            var folder = undefined;\n            if (launch && launch.workspace) {\n                folder = launch.workspace;\n            }\n            else {\n                var folders = this.contextService.getWorkspace().folders;\n                if (folders.length === 1) {\n                    folder = folders[0];\n                }\n            }\n            return dbg.substituteVariables(folder, config).then(function (config) {\n                return config;\n            }, function (err) {\n                _this.showError(err.message);\n                return undefined; // bail out\n            });\n        }\n        return Promise.resolve(config);\n    };\n    DebugService.prototype.showError = function (message, actions) {\n        if (actions === void 0) { actions = []; }\n        var configureAction = this.instantiationService.createInstance(debugactions.ConfigureAction, debugactions.ConfigureAction.ID, debugactions.ConfigureAction.LABEL);\n        actions.push(configureAction);\n        return this.dialogService.show(severity_1.default.Error, message, actions.map(function (a) { return a.label; }).concat(nls.localize('cancel', \"Cancel\")), { cancelId: actions.length }).then(function (choice) {\n            if (choice < actions.length) {\n                return actions[choice].run();\n            }\n            return undefined;\n        });\n    };\n    //---- task management\n    DebugService.prototype.runTaskAndCheckErrors = function (root, taskId) {\n        var _this = this;\n        var debugAnywayAction = new actions_1.Action('debug.debugAnyway', nls.localize('debugAnyway', \"Debug Anyway\"), undefined, true, function () { return Promise.resolve(TaskRunResult.Success); });\n        return this.runTask(root, taskId).then(function (taskSummary) {\n            var errorCount = taskId ? _this.markerService.getStatistics().errors : 0;\n            var successExitCode = taskSummary && taskSummary.exitCode === 0;\n            var failureExitCode = taskSummary && taskSummary.exitCode !== undefined && taskSummary.exitCode !== 0;\n            if (successExitCode || (errorCount === 0 && !failureExitCode)) {\n                return TaskRunResult.Success;\n            }\n            var taskLabel = typeof taskId === 'string' ? taskId : taskId ? taskId.name : '';\n            var message = errorCount > 1\n                ? nls.localize('preLaunchTaskErrors', \"Errors exist after running preLaunchTask '{0}'.\", taskLabel)\n                : errorCount === 1\n                    ? nls.localize('preLaunchTaskError', \"Error exists after running preLaunchTask '{0}'.\", taskLabel)\n                    : nls.localize('preLaunchTaskExitCode', \"The preLaunchTask '{0}' terminated with exit code {1}.\", taskLabel, taskSummary.exitCode);\n            var showErrorsAction = new actions_1.Action('debug.showErrors', nls.localize('showErrors', \"Show Errors\"), undefined, true, function () {\n                _this.panelService.openPanel(constants_1.default.MARKERS_PANEL_ID);\n                return Promise.resolve(TaskRunResult.Failure);\n            });\n            return _this.showError(message, [debugAnywayAction, showErrorsAction]);\n        }, function (err) {\n            return _this.showError(err.message, [debugAnywayAction, _this.taskService.configureAction()]);\n        });\n    };\n    DebugService.prototype.runTask = function (root, taskId) {\n        var _this = this;\n        if (!taskId) {\n            return Promise.resolve(null);\n        }\n        if (!root) {\n            return Promise.reject(new Error(nls.localize('invalidTaskReference', \"Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.\", typeof taskId === 'string' ? taskId : taskId.type)));\n        }\n        // run a task before starting a debug session\n        return this.taskService.getTask(root, taskId).then(function (task) {\n            if (!task) {\n                var errorMessage = typeof taskId === 'string'\n                    ? nls.localize('DebugTaskNotFoundWithTaskId', \"Could not find the task '{0}'.\", taskId)\n                    : nls.localize('DebugTaskNotFound', \"Could not find the specified task.\");\n                return Promise.reject(errorsWithActions_1.createErrorWithActions(errorMessage));\n            }\n            // If a task is missing the problem matcher the promise will never complete, so we need to have a workaround #35340\n            var taskStarted = false;\n            var promise = _this.taskService.getActiveTasks().then(function (tasks) {\n                if (tasks.filter(function (t) { return t._id === task._id; }).length) {\n                    // task is already running - nothing to do.\n                    return Promise.resolve(null);\n                }\n                once(function (e) { return ((e.kind === tasks_1.TaskEventKind.Active) || (e.kind === tasks_1.TaskEventKind.DependsOnStarted)) && e.taskId === task._id; }, _this.taskService.onDidStateChange)(function () {\n                    // Task is active, so everything seems to be fine, no need to prompt after 10 seconds\n                    // Use case being a slow running task should not be prompted even though it takes more than 10 seconds\n                    taskStarted = true;\n                });\n                var taskPromise = _this.taskService.run(task);\n                if (task.configurationProperties.isBackground) {\n                    return new Promise(function (c, e) { return once(function (e) { return e.kind === tasks_1.TaskEventKind.Inactive && e.taskId === task._id; }, _this.taskService.onDidStateChange)(function () {\n                        taskStarted = true;\n                        c(undefined);\n                    }); });\n                }\n                return taskPromise;\n            });\n            return new Promise(function (c, e) {\n                promise.then(function (result) {\n                    taskStarted = true;\n                    c(result);\n                }, function (error) { return e(error); });\n                setTimeout(function () {\n                    if (!taskStarted) {\n                        var errorMessage = typeof taskId === 'string'\n                            ? nls.localize('taskNotTrackedWithTaskId', \"The specified task cannot be tracked.\")\n                            : nls.localize('taskNotTracked', \"The task '{0}' cannot be tracked.\", JSON.stringify(taskId));\n                        e({ severity: severity_1.default.Error, message: errorMessage });\n                    }\n                }, 10000);\n            });\n        });\n    };\n    //---- focus management\n    DebugService.prototype.focusStackFrame = function (stackFrame, thread, session, explicit) {\n        if (!session) {\n            if (stackFrame || thread) {\n                session = stackFrame ? stackFrame.thread.session : thread.session;\n            }\n            else {\n                var sessions = this.model.getSessions();\n                var stoppedSession = sessions.filter(function (s) { return s.state === debug_1.State.Stopped; }).shift();\n                session = stoppedSession || (sessions.length ? sessions[0] : undefined);\n            }\n        }\n        if (!thread) {\n            if (stackFrame) {\n                thread = stackFrame.thread;\n            }\n            else {\n                var threads = session ? session.getAllThreads() : undefined;\n                var stoppedThread = threads && threads.filter(function (t) { return t.stopped; }).shift();\n                thread = stoppedThread || (threads && threads.length ? threads[0] : undefined);\n            }\n        }\n        if (!stackFrame) {\n            if (thread) {\n                var callStack = thread.getCallStack();\n                stackFrame = arrays_1.first(callStack, function (sf) { return !!(sf && sf.source && sf.source.available && sf.source.presentationHint !== 'deemphasize'); }, undefined);\n            }\n        }\n        if (stackFrame) {\n            stackFrame.openInEditor(this.editorService, true);\n            aria.alert(nls.localize('debuggingPaused', \"Debugging paused {0}, {1} {2}\", thread && thread.stoppedDetails ? \", reason \" + thread.stoppedDetails.reason : '', stackFrame.source ? stackFrame.source.name : '', stackFrame.range.startLineNumber));\n        }\n        if (session) {\n            this.debugType.set(session.configuration.type);\n        }\n        else {\n            this.debugType.reset();\n        }\n        this.viewModel.setFocus(stackFrame, thread, session, !!explicit);\n    };\n    //---- watches\n    DebugService.prototype.addWatchExpression = function (name) {\n        var we = this.model.addWatchExpression(name);\n        this.viewModel.setSelectedExpression(we);\n    };\n    DebugService.prototype.renameWatchExpression = function (id, newName) {\n        return this.model.renameWatchExpression(id, newName);\n    };\n    DebugService.prototype.moveWatchExpression = function (id, position) {\n        this.model.moveWatchExpression(id, position);\n    };\n    DebugService.prototype.removeWatchExpressions = function (id) {\n        this.model.removeWatchExpressions(id);\n    };\n    //---- breakpoints\n    DebugService.prototype.enableOrDisableBreakpoints = function (enable, breakpoint) {\n        if (breakpoint) {\n            this.model.setEnablement(breakpoint, enable);\n            if (breakpoint instanceof debugModel_1.Breakpoint) {\n                return this.sendBreakpoints(breakpoint.uri);\n            }\n            else if (breakpoint instanceof debugModel_1.FunctionBreakpoint) {\n                return this.sendFunctionBreakpoints();\n            }\n            return this.sendExceptionBreakpoints();\n        }\n        this.model.enableOrDisableAllBreakpoints(enable);\n        return this.sendAllBreakpoints();\n    };\n    DebugService.prototype.addBreakpoints = function (uri, rawBreakpoints, context) {\n        var _this = this;\n        var breakpoints = this.model.addBreakpoints(uri, rawBreakpoints);\n        breakpoints.forEach(function (bp) { return aria.status(nls.localize('breakpointAdded', \"Added breakpoint, line {0}, file {1}\", bp.lineNumber, uri.fsPath)); });\n        breakpoints.forEach(function (bp) { return _this.telemetryDebugAddBreakpoint(bp, context); });\n        return this.sendBreakpoints(uri).then(function () { return breakpoints; });\n    };\n    DebugService.prototype.updateBreakpoints = function (uri, data, sendOnResourceSaved) {\n        this.model.updateBreakpoints(data);\n        if (sendOnResourceSaved) {\n            this.breakpointsToSendOnResourceSaved.add(uri.toString());\n        }\n        else {\n            this.sendBreakpoints(uri);\n        }\n    };\n    DebugService.prototype.removeBreakpoints = function (id) {\n        var _this = this;\n        var toRemove = this.model.getBreakpoints().filter(function (bp) { return !id || bp.getId() === id; });\n        toRemove.forEach(function (bp) { return aria.status(nls.localize('breakpointRemoved', \"Removed breakpoint, line {0}, file {1}\", bp.lineNumber, bp.uri.fsPath)); });\n        var urisToClear = arrays_1.distinct(toRemove, function (bp) { return bp.uri.toString(); }).map(function (bp) { return bp.uri; });\n        this.model.removeBreakpoints(toRemove);\n        return Promise.all(urisToClear.map(function (uri) { return _this.sendBreakpoints(uri); }));\n    };\n    DebugService.prototype.setBreakpointsActivated = function (activated) {\n        this.model.setBreakpointsActivated(activated);\n        return this.sendAllBreakpoints();\n    };\n    DebugService.prototype.addFunctionBreakpoint = function (name, id) {\n        var newFunctionBreakpoint = this.model.addFunctionBreakpoint(name || '', id);\n        this.viewModel.setSelectedFunctionBreakpoint(newFunctionBreakpoint);\n    };\n    DebugService.prototype.renameFunctionBreakpoint = function (id, newFunctionName) {\n        this.model.renameFunctionBreakpoint(id, newFunctionName);\n        return this.sendFunctionBreakpoints();\n    };\n    DebugService.prototype.removeFunctionBreakpoints = function (id) {\n        this.model.removeFunctionBreakpoints(id);\n        return this.sendFunctionBreakpoints();\n    };\n    DebugService.prototype.sendAllBreakpoints = function (session) {\n        var _this = this;\n        return Promise.all(arrays_1.distinct(this.model.getBreakpoints(), function (bp) { return bp.uri.toString(); }).map(function (bp) { return _this.sendBreakpoints(bp.uri, false, session); }))\n            .then(function () { return _this.sendFunctionBreakpoints(session); })\n            // send exception breakpoints at the end since some debug adapters rely on the order\n            .then(function () { return _this.sendExceptionBreakpoints(session); });\n    };\n    DebugService.prototype.sendBreakpoints = function (modelUri, sourceModified, session) {\n        if (sourceModified === void 0) { sourceModified = false; }\n        var breakpointsToSend = this.model.getBreakpoints({ uri: modelUri, enabledOnly: true });\n        return this.sendToOneOrAllSessions(session, function (s) {\n            return s.sendBreakpoints(modelUri, breakpointsToSend, sourceModified);\n        });\n    };\n    DebugService.prototype.sendFunctionBreakpoints = function (session) {\n        var _this = this;\n        var breakpointsToSend = this.model.getFunctionBreakpoints().filter(function (fbp) { return fbp.enabled && _this.model.areBreakpointsActivated(); });\n        return this.sendToOneOrAllSessions(session, function (s) {\n            return s.capabilities.supportsFunctionBreakpoints ? s.sendFunctionBreakpoints(breakpointsToSend) : Promise.resolve(undefined);\n        });\n    };\n    DebugService.prototype.sendExceptionBreakpoints = function (session) {\n        var enabledExceptionBps = this.model.getExceptionBreakpoints().filter(function (exb) { return exb.enabled; });\n        return this.sendToOneOrAllSessions(session, function (s) {\n            return s.sendExceptionBreakpoints(enabledExceptionBps);\n        });\n    };\n    DebugService.prototype.sendToOneOrAllSessions = function (session, send) {\n        if (session) {\n            return send(session);\n        }\n        return Promise.all(this.model.getSessions().map(function (s) { return send(s); })).then(function () { return undefined; });\n    };\n    DebugService.prototype.onFileChanges = function (fileChangesEvent) {\n        var _this = this;\n        var toRemove = this.model.getBreakpoints().filter(function (bp) {\n            return fileChangesEvent.contains(bp.uri, files_1.FileChangeType.DELETED);\n        });\n        if (toRemove.length) {\n            this.model.removeBreakpoints(toRemove);\n        }\n        fileChangesEvent.getUpdated().forEach(function (event) {\n            if (_this.breakpointsToSendOnResourceSaved.delete(event.resource.toString())) {\n                _this.sendBreakpoints(event.resource, true);\n            }\n        });\n    };\n    DebugService.prototype.loadBreakpoints = function () {\n        var _this = this;\n        var result;\n        try {\n            result = JSON.parse(this.storageService.get(DEBUG_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (breakpoint) {\n                return new debugModel_1.Breakpoint(uri_1.URI.parse(breakpoint.uri.external || breakpoint.source.uri.external), breakpoint.lineNumber, breakpoint.column, breakpoint.enabled, breakpoint.condition, breakpoint.hitCondition, breakpoint.logMessage, breakpoint.adapterData, _this.textFileService);\n            });\n        }\n        catch (e) { }\n        return result || [];\n    };\n    DebugService.prototype.loadFunctionBreakpoints = function () {\n        var result;\n        try {\n            result = JSON.parse(this.storageService.get(DEBUG_FUNCTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (fb) {\n                return new debugModel_1.FunctionBreakpoint(fb.name, fb.enabled, fb.hitCondition, fb.condition, fb.logMessage);\n            });\n        }\n        catch (e) { }\n        return result || [];\n    };\n    DebugService.prototype.loadExceptionBreakpoints = function () {\n        var result;\n        try {\n            result = JSON.parse(this.storageService.get(DEBUG_EXCEPTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (exBreakpoint) {\n                return new debugModel_1.ExceptionBreakpoint(exBreakpoint.filter, exBreakpoint.label, exBreakpoint.enabled);\n            });\n        }\n        catch (e) { }\n        return result || [];\n    };\n    DebugService.prototype.loadWatchExpressions = function () {\n        var result;\n        try {\n            result = JSON.parse(this.storageService.get(DEBUG_WATCH_EXPRESSIONS_KEY, storage_1.StorageScope.WORKSPACE, '[]')).map(function (watchStoredData) {\n                return new debugModel_1.Expression(watchStoredData.name, watchStoredData.id);\n            });\n        }\n        catch (e) { }\n        return result || [];\n    };\n    DebugService.prototype.saveState = function () {\n        var breakpoints = this.model.getBreakpoints();\n        if (breakpoints.length) {\n            this.storageService.store(DEBUG_BREAKPOINTS_KEY, JSON.stringify(breakpoints), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(DEBUG_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        if (!this.model.areBreakpointsActivated()) {\n            this.storageService.store(DEBUG_BREAKPOINTS_ACTIVATED_KEY, 'false', storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(DEBUG_BREAKPOINTS_ACTIVATED_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        var functionBreakpoints = this.model.getFunctionBreakpoints();\n        if (functionBreakpoints.length) {\n            this.storageService.store(DEBUG_FUNCTION_BREAKPOINTS_KEY, JSON.stringify(functionBreakpoints), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(DEBUG_FUNCTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        var exceptionBreakpoints = this.model.getExceptionBreakpoints();\n        if (exceptionBreakpoints.length) {\n            this.storageService.store(DEBUG_EXCEPTION_BREAKPOINTS_KEY, JSON.stringify(exceptionBreakpoints), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(DEBUG_EXCEPTION_BREAKPOINTS_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n        var watchExpressions = this.model.getWatchExpressions();\n        if (watchExpressions.length) {\n            this.storageService.store(DEBUG_WATCH_EXPRESSIONS_KEY, JSON.stringify(watchExpressions.map(function (we) { return ({ name: we.name, id: we.getId() }); })), storage_1.StorageScope.WORKSPACE);\n        }\n        else {\n            this.storageService.remove(DEBUG_WATCH_EXPRESSIONS_KEY, storage_1.StorageScope.WORKSPACE);\n        }\n    };\n    //---- telemetry\n    DebugService.prototype.telemetryDebugSessionStart = function (root, type) {\n        var dbgr = this.configurationManager.getDebugger(type);\n        if (!dbgr) {\n            return Promise.resolve();\n        }\n        var extension = dbgr.getMainExtensionDescriptor();\n        /* __GDPR__\n            \"debugSessionStart\" : {\n                \"type\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"exceptionBreakpoints\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"extensionName\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n                \"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true},\n                \"launchJsonExists\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        return this.telemetryService.publicLog('debugSessionStart', {\n            type: type,\n            breakpointCount: this.model.getBreakpoints().length,\n            exceptionBreakpoints: this.model.getExceptionBreakpoints(),\n            watchExpressionsCount: this.model.getWatchExpressions().length,\n            extensionName: extension.identifier.value,\n            isBuiltin: extension.isBuiltin,\n            launchJsonExists: root && !!this.configurationService.getValue('launch', { resource: root.uri })\n        });\n    };\n    DebugService.prototype.telemetryDebugSessionStop = function (session, adapterExitEvent) {\n        var breakpoints = this.model.getBreakpoints();\n        /* __GDPR__\n            \"debugSessionStop\" : {\n                \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"sessionLengthInSeconds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        return this.telemetryService.publicLog('debugSessionStop', {\n            type: session && session.configuration.type,\n            success: adapterExitEvent.emittedStopped || breakpoints.length === 0,\n            sessionLengthInSeconds: adapterExitEvent.sessionLengthInSeconds,\n            breakpointCount: breakpoints.length,\n            watchExpressionsCount: this.model.getWatchExpressions().length\n        });\n    };\n    DebugService.prototype.telemetryDebugMisconfiguration = function (debugType, message) {\n        /* __GDPR__\n            \"debugMisconfiguration\" : {\n                \"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"error\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" }\n            }\n        */\n        return this.telemetryService.publicLog('debugMisconfiguration', {\n            type: debugType,\n            error: message\n        });\n    };\n    DebugService.prototype.telemetryDebugAddBreakpoint = function (breakpoint, context) {\n        /* __GDPR__\n            \"debugAddBreakpoint\" : {\n                \"context\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"hasCondition\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"hasHitCondition\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n                \"hasLogMessage\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n            }\n        */\n        return this.telemetryService.publicLog('debugAddBreakpoint', {\n            context: context,\n            hasCondition: !!breakpoint.condition,\n            hasHitCondition: !!breakpoint.hitCondition,\n            hasLogMessage: !!breakpoint.logMessage\n        });\n    };\n    DebugService = tslib_1.__decorate([\n        tslib_1.__param(0, storage_1.IStorageService),\n        tslib_1.__param(1, editorService_1.IEditorService),\n        tslib_1.__param(2, textfiles_1.ITextFileService),\n        tslib_1.__param(3, viewlet_1.IViewletService),\n        tslib_1.__param(4, panelService_1.IPanelService),\n        tslib_1.__param(5, notification_1.INotificationService),\n        tslib_1.__param(6, dialogs_1.IDialogService),\n        tslib_1.__param(7, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(8, broadcast_1.IBroadcastService),\n        tslib_1.__param(9, telemetry_1.ITelemetryService),\n        tslib_1.__param(10, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(11, contextkey_1.IContextKeyService),\n        tslib_1.__param(12, lifecycle_1.ILifecycleService),\n        tslib_1.__param(13, instantiation_1.IInstantiationService),\n        tslib_1.__param(14, extensions_1.IExtensionService),\n        tslib_1.__param(15, markers_1.IMarkerService),\n        tslib_1.__param(16, taskService_1.ITaskService),\n        tslib_1.__param(17, files_1.IFileService),\n        tslib_1.__param(18, configuration_1.IConfigurationService)\n    ], DebugService);\n    return DebugService;\n}());\nexports.DebugService = DebugService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/debug/electron-browser/debugService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { first, distinct } from 'vs/base/common/arrays';\nimport * as errors from 'vs/base/common/errors';\nimport severity from 'vs/base/common/severity';\nimport * as aria from 'vs/base/browser/ui/aria/aria';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { FileChangesEvent, FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { DebugModel, ExceptionBreakpoint, FunctionBreakpoint, Breakpoint, Expression } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { ViewModel } from 'vs/workbench/contrib/debug/common/debugViewModel';\nimport * as debugactions from 'vs/workbench/contrib/debug/browser/debugActions';\nimport { ConfigurationManager } from 'vs/workbench/contrib/debug/electron-browser/debugConfigurationManager';\nimport Constants from 'vs/workbench/contrib/markers/browser/constants';\nimport { ITaskService, ITaskSummary } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { TaskError } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { VIEWLET_ID as EXPLORER_VIEWLET_ID } from 'vs/workbench/contrib/files/common/files';\nimport { IViewletService } from 'vs/workbench/services/viewlet/browser/viewlet';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceContextService, WorkbenchState, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EXTENSION_LOG_BROADCAST_CHANNEL, EXTENSION_ATTACH_BROADCAST_CHANNEL, EXTENSION_TERMINATE_BROADCAST_CHANNEL, EXTENSION_RELOAD_BROADCAST_CHANNEL, EXTENSION_CLOSE_EXTHOST_BROADCAST_CHANNEL } from 'vs/platform/extensions/common/extensionHost';\nimport { IBroadcastService } from 'vs/workbench/services/broadcast/common/broadcast';\nimport { IRemoteConsoleLog, parse, getFirstFrame } from 'vs/base/common/console';\nimport { TaskEvent, TaskEventKind, TaskIdentifier } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { deepClone, equals } from 'vs/base/common/objects';\nimport { DebugSession } from 'vs/workbench/contrib/debug/electron-browser/debugSession';\nimport { dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { IDebugService, State, IDebugSession, CONTEXT_DEBUG_TYPE, CONTEXT_DEBUG_STATE, CONTEXT_IN_DEBUG_MODE, IThread, IDebugConfiguration, VIEWLET_ID, REPL_ID, IConfig, ILaunch, IViewModel, IConfigurationManager, IDebugModel, IEnablement, IBreakpoint, IBreakpointData, ICompound, IGlobalConfig, IStackFrame, AdapterEndEvent, getStateLabel } from 'vs/workbench/contrib/debug/common/debug';\nimport { isExtensionHostDebugging } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { isErrorWithActions, createErrorWithActions } from 'vs/base/common/errorsWithActions';\nimport { RunOnceScheduler } from 'vs/base/common/async';\n\nconst DEBUG_BREAKPOINTS_KEY = 'debug.breakpoint';\nconst DEBUG_BREAKPOINTS_ACTIVATED_KEY = 'debug.breakpointactivated';\nconst DEBUG_FUNCTION_BREAKPOINTS_KEY = 'debug.functionbreakpoint';\nconst DEBUG_EXCEPTION_BREAKPOINTS_KEY = 'debug.exceptionbreakpoint';\nconst DEBUG_WATCH_EXPRESSIONS_KEY = 'debug.watchexpressions';\n\nfunction once(match: (e: TaskEvent) => boolean, event: Event<TaskEvent>): Event<TaskEvent> {\n\treturn (listener, thisArgs = null, disposables?) => {\n\t\tconst result = event(e => {\n\t\t\tif (match(e)) {\n\t\t\t\tresult.dispose();\n\t\t\t\treturn listener.call(thisArgs, e);\n\t\t\t}\n\t\t}, null, disposables);\n\t\treturn result;\n\t};\n}\n\nconst enum TaskRunResult {\n\tFailure,\n\tSuccess\n}\n\nexport class DebugService implements IDebugService {\n\t_serviceBrand: any;\n\n\tprivate readonly _onDidChangeState: Emitter<State>;\n\tprivate readonly _onDidNewSession: Emitter<IDebugSession>;\n\tprivate readonly _onWillNewSession: Emitter<IDebugSession>;\n\tprivate readonly _onDidEndSession: Emitter<IDebugSession>;\n\tprivate model: DebugModel;\n\tprivate viewModel: ViewModel;\n\tprivate configurationManager: ConfigurationManager;\n\tprivate toDispose: IDisposable[];\n\tprivate debugType: IContextKey<string>;\n\tprivate debugState: IContextKey<string>;\n\tprivate inDebugMode: IContextKey<boolean>;\n\tprivate breakpointsToSendOnResourceSaved: Set<string>;\n\tprivate initializing = false;\n\tprivate previousState: State;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IViewletService private readonly viewletService: IViewletService,\n\t\t@IPanelService private readonly panelService: IPanelService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IBroadcastService private readonly broadcastService: IBroadcastService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tthis.toDispose = [];\n\n\t\tthis.breakpointsToSendOnResourceSaved = new Set<string>();\n\n\t\tthis._onDidChangeState = new Emitter<State>();\n\t\tthis._onDidNewSession = new Emitter<IDebugSession>();\n\t\tthis._onWillNewSession = new Emitter<IDebugSession>();\n\t\tthis._onDidEndSession = new Emitter<IDebugSession>();\n\n\t\tthis.configurationManager = this.instantiationService.createInstance(ConfigurationManager, this);\n\t\tthis.toDispose.push(this.configurationManager);\n\n\t\tthis.debugType = CONTEXT_DEBUG_TYPE.bindTo(contextKeyService);\n\t\tthis.debugState = CONTEXT_DEBUG_STATE.bindTo(contextKeyService);\n\t\tthis.inDebugMode = CONTEXT_IN_DEBUG_MODE.bindTo(contextKeyService);\n\n\t\tthis.model = new DebugModel(this.loadBreakpoints(), this.storageService.getBoolean(DEBUG_BREAKPOINTS_ACTIVATED_KEY, StorageScope.WORKSPACE, true), this.loadFunctionBreakpoints(),\n\t\t\tthis.loadExceptionBreakpoints(), this.loadWatchExpressions(), this.textFileService);\n\t\tthis.toDispose.push(this.model);\n\n\t\tthis.viewModel = new ViewModel(contextKeyService);\n\n\t\tthis.toDispose.push(this.fileService.onFileChanges(e => this.onFileChanges(e)));\n\t\tthis.toDispose.push(this.storageService.onWillSaveState(this.saveState, this));\n\t\tthis.lifecycleService.onShutdown(this.dispose, this);\n\n\t\tthis.toDispose.push(this.broadcastService.onBroadcast(broadcast => {\n\t\t\tconst session = this.model.getSession(broadcast.payload.debugId, true);\n\t\t\tif (session) {\n\t\t\t\tswitch (broadcast.channel) {\n\n\t\t\t\t\tcase EXTENSION_ATTACH_BROADCAST_CHANNEL:\n\t\t\t\t\t\t// EH was started in debug mode -> attach to it\n\t\t\t\t\t\tsession.configuration.request = 'attach';\n\t\t\t\t\t\tsession.configuration.port = broadcast.payload.port;\n\t\t\t\t\t\tthis.launchOrAttachToSession(session);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSION_TERMINATE_BROADCAST_CHANNEL:\n\t\t\t\t\t\t// EH was terminated\n\t\t\t\t\t\tsession.disconnect();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase EXTENSION_LOG_BROADCAST_CHANNEL:\n\t\t\t\t\t\t// extension logged output -> show it in REPL\n\t\t\t\t\t\tconst extensionOutput = <IRemoteConsoleLog>broadcast.payload.logEntry;\n\t\t\t\t\t\tconst sev = extensionOutput.severity === 'warn' ? severity.Warning : extensionOutput.severity === 'error' ? severity.Error : severity.Info;\n\t\t\t\t\t\tconst { args, stack } = parse(extensionOutput);\n\t\t\t\t\t\tconst frame = !!stack ? getFirstFrame(stack) : undefined;\n\t\t\t\t\t\tsession.logToRepl(sev, args, frame);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}, this));\n\n\t\tthis.toDispose.push(this.viewModel.onDidFocusStackFrame(() => {\n\t\t\tthis.onStateChange();\n\t\t}));\n\t\tthis.toDispose.push(this.viewModel.onDidFocusSession(session => {\n\t\t\tconst id = session ? session.getId() : undefined;\n\t\t\tthis.model.setBreakpointsSessionId(id);\n\t\t\tthis.onStateChange();\n\t\t}));\n\t}\n\n\tgetModel(): IDebugModel {\n\t\treturn this.model;\n\t}\n\n\tgetViewModel(): IViewModel {\n\t\treturn this.viewModel;\n\t}\n\n\tgetConfigurationManager(): IConfigurationManager {\n\t\treturn this.configurationManager;\n\t}\n\n\tsourceIsNotAvailable(uri: uri): void {\n\t\tthis.model.sourceIsNotAvailable(uri);\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n\n\t//---- state management\n\n\tget state(): State {\n\t\tconst focusedSession = this.viewModel.focusedSession;\n\t\tif (focusedSession) {\n\t\t\treturn focusedSession.state;\n\t\t}\n\n\t\treturn this.initializing ? State.Initializing : State.Inactive;\n\t}\n\n\tprivate startInitializingState() {\n\t\tif (!this.initializing) {\n\t\t\tthis.initializing = true;\n\t\t\tthis.onStateChange();\n\t\t}\n\t}\n\n\tprivate endInitializingState() {\n\t\tif (this.initializing) {\n\t\t\tthis.initializing = false;\n\t\t\tthis.onStateChange();\n\t\t}\n\t}\n\n\tprivate onStateChange(): void {\n\t\tconst state = this.state;\n\t\tif (this.previousState !== state) {\n\t\t\tthis.debugState.set(getStateLabel(state));\n\t\t\tthis.inDebugMode.set(state !== State.Inactive);\n\t\t\tthis.previousState = state;\n\t\t\tthis._onDidChangeState.fire(state);\n\t\t}\n\t}\n\n\tget onDidChangeState(): Event<State> {\n\t\treturn this._onDidChangeState.event;\n\t}\n\n\tget onDidNewSession(): Event<IDebugSession> {\n\t\treturn this._onDidNewSession.event;\n\t}\n\n\tget onWillNewSession(): Event<IDebugSession> {\n\t\treturn this._onWillNewSession.event;\n\t}\n\n\tget onDidEndSession(): Event<IDebugSession> {\n\t\treturn this._onDidEndSession.event;\n\t}\n\n\t//---- life cycle management\n\n\t/**\n\t * main entry point\n\t * properly manages compounds, checks for errors and handles the initializing state.\n\t */\n\tstartDebugging(launch: ILaunch | undefined, configOrName?: IConfig | string, noDebug = false, parentSession?: IDebugSession): Promise<boolean> {\n\n\t\tthis.startInitializingState();\n\t\t// make sure to save all files and that the configuration is up to date\n\t\treturn this.extensionService.activateByEvent('onDebug').then(() => {\n\t\t\treturn this.textFileService.saveAll().then(() => this.configurationService.reloadConfiguration(launch ? launch.workspace : undefined).then(() => {\n\t\t\t\treturn this.extensionService.whenInstalledExtensionsRegistered().then(() => {\n\n\t\t\t\t\tlet config: IConfig | undefined;\n\t\t\t\t\tlet compound: ICompound | undefined;\n\t\t\t\t\tif (!configOrName) {\n\t\t\t\t\t\tconfigOrName = this.configurationManager.selectedConfiguration.name;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof configOrName === 'string' && launch) {\n\t\t\t\t\t\tconfig = launch.getConfiguration(configOrName);\n\t\t\t\t\t\tcompound = launch.getCompound(configOrName);\n\n\t\t\t\t\t\tconst sessions = this.model.getSessions();\n\t\t\t\t\t\tconst alreadyRunningMessage = nls.localize('configurationAlreadyRunning', \"There is already a debug configuration \\\"{0}\\\" running.\", configOrName);\n\t\t\t\t\t\tif (sessions.some(s => s.configuration.name === configOrName && (!launch || !launch.workspace || !s.root || s.root.uri.toString() === launch.workspace.uri.toString()))) {\n\t\t\t\t\t\t\treturn Promise.reject(new Error(alreadyRunningMessage));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (compound && compound.configurations && sessions.some(p => compound!.configurations.indexOf(p.configuration.name) !== -1)) {\n\t\t\t\t\t\t\treturn Promise.reject(new Error(alreadyRunningMessage));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof configOrName !== 'string') {\n\t\t\t\t\t\tconfig = configOrName;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (compound) {\n\t\t\t\t\t\t// we are starting a compound debug, first do some error checking and than start each configuration in the compound\n\t\t\t\t\t\tif (!compound.configurations) {\n\t\t\t\t\t\t\treturn Promise.reject(new Error(nls.localize({ key: 'compoundMustHaveConfigurations', comment: ['compound indicates a \"compounds\" configuration item', '\"configurations\" is an attribute and should not be localized'] },\n\t\t\t\t\t\t\t\t\"Compound must have \\\"configurations\\\" attribute set in order to start multiple configurations.\")));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.all(compound.configurations.map(configData => {\n\t\t\t\t\t\t\tconst name = typeof configData === 'string' ? configData : configData.name;\n\t\t\t\t\t\t\tif (name === compound!.name) {\n\t\t\t\t\t\t\t\treturn Promise.resolve(false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet launchForName: ILaunch | undefined;\n\t\t\t\t\t\t\tif (typeof configData === 'string') {\n\t\t\t\t\t\t\t\tconst launchesContainingName = this.configurationManager.getLaunches().filter(l => !!l.getConfiguration(name));\n\t\t\t\t\t\t\t\tif (launchesContainingName.length === 1) {\n\t\t\t\t\t\t\t\t\tlaunchForName = launchesContainingName[0];\n\t\t\t\t\t\t\t\t} else if (launch && launchesContainingName.length > 1 && launchesContainingName.indexOf(launch) >= 0) {\n\t\t\t\t\t\t\t\t\t// If there are multiple launches containing the configuration give priority to the configuration in the current launch\n\t\t\t\t\t\t\t\t\tlaunchForName = launch;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Promise.reject(new Error(launchesContainingName.length === 0 ? nls.localize('noConfigurationNameInWorkspace', \"Could not find launch configuration '{0}' in the workspace.\", name)\n\t\t\t\t\t\t\t\t\t\t: nls.localize('multipleConfigurationNamesInWorkspace', \"There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.\", name)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (configData.folder) {\n\t\t\t\t\t\t\t\tconst launchesMatchingConfigData = this.configurationManager.getLaunches().filter(l => l.workspace && l.workspace.name === configData.folder && !!l.getConfiguration(configData.name));\n\t\t\t\t\t\t\t\tif (launchesMatchingConfigData.length === 1) {\n\t\t\t\t\t\t\t\t\tlaunchForName = launchesMatchingConfigData[0];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Promise.reject(new Error(nls.localize('noFolderWithName', \"Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.\", configData.folder, configData.name, compound!.name)));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.createSession(launchForName, launchForName!.getConfiguration(name), noDebug, parentSession);\n\t\t\t\t\t\t})).then(values => values.every(success => !!success)); // Compound launch is a success only if each configuration launched successfully\n\t\t\t\t\t}\n\n\t\t\t\t\tif (configOrName && !config) {\n\t\t\t\t\t\tconst message = !!launch ? nls.localize('configMissing', \"Configuration '{0}' is missing in 'launch.json'.\", typeof configOrName === 'string' ? configOrName : JSON.stringify(configOrName)) :\n\t\t\t\t\t\t\tnls.localize('launchJsonDoesNotExist', \"'launch.json' does not exist.\");\n\t\t\t\t\t\treturn Promise.reject(new Error(message));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.createSession(launch, config, noDebug, parentSession);\n\t\t\t\t});\n\t\t\t}));\n\t\t}).then(success => {\n\t\t\t// make sure to get out of initializing state, and propagate the result\n\t\t\tthis.endInitializingState();\n\t\t\treturn success;\n\t\t}, err => {\n\t\t\tthis.endInitializingState();\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\t/**\n\t * gets the debugger for the type, resolves configurations by providers, substitutes variables and runs prelaunch tasks\n\t */\n\tprivate createSession(launch: ILaunch | undefined, config: IConfig | undefined, noDebug: boolean, parentSession?: IDebugSession): Promise<boolean> {\n\t\t// We keep the debug type in a separate variable 'type' so that a no-folder config has no attributes.\n\t\t// Storing the type in the config would break extensions that assume that the no-folder case is indicated by an empty config.\n\t\tlet type: string | undefined;\n\t\tif (config) {\n\t\t\ttype = config.type;\n\t\t} else {\n\t\t\t// a no-folder workspace has no launch.config\n\t\t\tconfig = Object.create(null);\n\t\t}\n\t\tconst unresolvedConfig = deepClone(config);\n\n\t\tif (noDebug) {\n\t\t\tconfig!.noDebug = true;\n\t\t}\n\n\t\tconst debuggerThenable: Promise<void> = type ? Promise.resolve() : this.configurationManager.guessDebugger().then(dbgr => { type = dbgr && dbgr.type; });\n\t\treturn debuggerThenable.then(() =>\n\t\t\tthis.configurationManager.resolveConfigurationByProviders(launch && launch.workspace ? launch.workspace.uri : undefined, type, config!).then(config => {\n\t\t\t\t// a falsy config indicates an aborted launch\n\t\t\t\tif (config && config.type) {\n\t\t\t\t\treturn this.substituteVariables(launch, config).then(resolvedConfig => {\n\n\t\t\t\t\t\tif (!resolvedConfig) {\n\t\t\t\t\t\t\t// User canceled resolving of interactive variables, silently return\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!this.configurationManager.getDebugger(resolvedConfig.type) || (config.request !== 'attach' && config.request !== 'launch')) {\n\t\t\t\t\t\t\tlet message: string;\n\t\t\t\t\t\t\tif (config.request !== 'attach' && config.request !== 'launch') {\n\t\t\t\t\t\t\t\tmessage = config.request ? nls.localize('debugRequestNotSupported', \"Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.\", 'request', config.request)\n\t\t\t\t\t\t\t\t\t: nls.localize('debugRequesMissing', \"Attribute '{0}' is missing from the chosen debug configuration.\", 'request');\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmessage = resolvedConfig.type ? nls.localize('debugTypeNotSupported', \"Configured debug type '{0}' is not supported.\", resolvedConfig.type) :\n\t\t\t\t\t\t\t\t\tnls.localize('debugTypeMissing', \"Missing property 'type' for the chosen launch configuration.\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn this.showError(message).then(() => false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst workspace = launch ? launch.workspace : undefined;\n\t\t\t\t\t\treturn this.runTaskAndCheckErrors(workspace, resolvedConfig.preLaunchTask).then(result => {\n\t\t\t\t\t\t\tif (result === TaskRunResult.Success) {\n\t\t\t\t\t\t\t\treturn this.doCreateSession(workspace, { resolved: resolvedConfig, unresolved: unresolvedConfig }, parentSession);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\t\t\t\t\t}, err => {\n\t\t\t\t\t\tif (err && err.message) {\n\t\t\t\t\t\t\treturn this.showError(err.message).then(() => false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\t\t\t\t\treturn this.showError(nls.localize('noFolderWorkspaceDebugError', \"The active file can not be debugged. Make sure it is saved on disk and that you have a debug extension installed for that file type.\"))\n\t\t\t\t\t\t\t\t.then(() => false);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn launch && launch.openConfigFile(false, true).then(() => false);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (launch && type && config === null) {\t// show launch.json only for \"config\" being \"null\".\n\t\t\t\t\treturn launch.openConfigFile(false, true, type).then(() => false);\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * instantiates the new session, initializes the session, registers session listeners and reports telemetry\n\t */\n\tprivate doCreateSession(root: IWorkspaceFolder | undefined, configuration: { resolved: IConfig, unresolved: IConfig | undefined }, parentSession?: IDebugSession): Promise<boolean> {\n\n\t\tconst session = this.instantiationService.createInstance(DebugSession, configuration, root, this.model, parentSession);\n\t\tthis.model.addSession(session);\n\t\t// register listeners as the very first thing!\n\t\tthis.registerSessionListeners(session);\n\n\t\t// since the Session is now properly registered under its ID and hooked, we can announce it\n\t\t// this event doesn't go to extensions\n\t\tthis._onWillNewSession.fire(session);\n\n\t\tconst openDebug = this.configurationService.getValue<IDebugConfiguration>('debug').openDebug;\n\t\t// Open debug viewlet based on the visibility of the side bar and openDebug setting. Do not open for 'run without debug'\n\t\tif (!configuration.resolved.noDebug && (openDebug === 'openOnSessionStart' || (openDebug === 'openOnFirstSessionStart' && this.viewModel.firstSessionStart))) {\n\t\t\tthis.viewletService.openViewlet(VIEWLET_ID).then(undefined, errors.onUnexpectedError);\n\t\t}\n\n\t\treturn this.launchOrAttachToSession(session).then(() => {\n\n\t\t\t// since the initialized response has arrived announce the new Session (including extensions)\n\t\t\tthis._onDidNewSession.fire(session);\n\n\t\t\tconst internalConsoleOptions = session.configuration.internalConsoleOptions || this.configurationService.getValue<IDebugConfiguration>('debug').internalConsoleOptions;\n\t\t\tif (internalConsoleOptions === 'openOnSessionStart' || (this.viewModel.firstSessionStart && internalConsoleOptions === 'openOnFirstSessionStart')) {\n\t\t\t\tthis.panelService.openPanel(REPL_ID, false);\n\t\t\t}\n\n\t\t\tthis.viewModel.firstSessionStart = false;\n\n\t\t\tif (this.model.getSessions().length > 1) {\n\t\t\t\tthis.viewModel.setMultiSessionView(true);\n\t\t\t}\n\n\t\t\treturn this.telemetryDebugSessionStart(root, session.configuration.type);\n\t\t}).then(() => true, (error: Error | string) => {\n\n\t\t\tif (errors.isPromiseCanceledError(error)) {\n\t\t\t\t// don't show 'canceled' error messages to the user #7906\n\t\t\t\treturn Promise.resolve(false);\n\t\t\t}\n\n\t\t\t// Show the repl if some error got logged there #5870\n\t\t\tif (session && session.getReplElements().length > 0) {\n\t\t\t\tthis.panelService.openPanel(REPL_ID, false);\n\t\t\t}\n\n\t\t\tif (session.configuration && session.configuration.request === 'attach' && session.configuration.__autoAttach) {\n\t\t\t\t// ignore attach timeouts in auto attach mode\n\t\t\t\treturn Promise.resolve(false);\n\t\t\t}\n\n\t\t\tconst errorMessage = error instanceof Error ? error.message : error;\n\t\t\tthis.telemetryDebugMisconfiguration(session.configuration ? session.configuration.type : undefined, errorMessage);\n\t\t\treturn this.showError(errorMessage, isErrorWithActions(error) ? error.actions : []).then(() => false);\n\t\t});\n\t}\n\n\tprivate launchOrAttachToSession(session: IDebugSession, focus = true): Promise<void> {\n\t\tconst dbgr = this.configurationManager.getDebugger(session.configuration.type);\n\t\treturn session.initialize(dbgr!).then(() => {\n\t\t\treturn session.launchOrAttach(session.configuration).then(() => {\n\t\t\t\tif (focus) {\n\t\t\t\t\tthis.focusStackFrame(undefined, undefined, session);\n\t\t\t\t}\n\t\t\t});\n\t\t}).then(undefined, err => {\n\t\t\tsession.shutdown();\n\t\t\treturn Promise.reject(err);\n\t\t});\n\t}\n\n\tprivate registerSessionListeners(session: IDebugSession): void {\n\t\tconst sessionRunningScheduler = new RunOnceScheduler(() => {\n\t\t\t// Do not immediatly defocus the stack frame if the session is running\n\t\t\tif (session.state === State.Running && this.viewModel.focusedSession === session) {\n\t\t\t\tthis.viewModel.setFocus(undefined, this.viewModel.focusedThread, session, false);\n\t\t\t}\n\t\t}, 200);\n\t\tthis.toDispose.push(session.onDidChangeState(() => {\n\t\t\tif (session.state === State.Running && this.viewModel.focusedSession === session) {\n\t\t\t\tsessionRunningScheduler.schedule();\n\t\t\t}\n\t\t\tif (session === this.viewModel.focusedSession) {\n\t\t\t\tthis.onStateChange();\n\t\t\t}\n\t\t}));\n\n\t\tthis.toDispose.push(session.onDidEndAdapter(adapterExitEvent => {\n\n\t\t\tif (adapterExitEvent.error) {\n\t\t\t\tthis.notificationService.error(nls.localize('debugAdapterCrash', \"Debug adapter process has terminated unexpectedly ({0})\", adapterExitEvent.error.message || adapterExitEvent.error.toString()));\n\t\t\t}\n\n\t\t\t// 'Run without debugging' mode VSCode must terminate the extension host. More details: #3905\n\t\t\tif (isExtensionHostDebugging(session.configuration) && session.state === State.Running && session.configuration.noDebug) {\n\t\t\t\tthis.broadcastService.broadcast({\n\t\t\t\t\tchannel: EXTENSION_CLOSE_EXTHOST_BROADCAST_CHANNEL,\n\t\t\t\t\tpayload: [session.root.uri.toString()]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis.telemetryDebugSessionStop(session, adapterExitEvent);\n\n\t\t\tif (session.configuration.postDebugTask) {\n\t\t\t\tthis.runTask(session.root, session.configuration.postDebugTask).then(undefined, err =>\n\t\t\t\t\tthis.notificationService.error(err)\n\t\t\t\t);\n\t\t\t}\n\t\t\tsession.shutdown();\n\t\t\tthis.endInitializingState();\n\t\t\tthis._onDidEndSession.fire(session);\n\n\t\t\tconst focusedSession = this.viewModel.focusedSession;\n\t\t\tif (focusedSession && focusedSession.getId() === session.getId()) {\n\t\t\t\tthis.focusStackFrame(undefined);\n\t\t\t}\n\n\t\t\tif (this.model.getSessions().length === 0) {\n\t\t\t\tthis.viewModel.setMultiSessionView(false);\n\n\t\t\t\tif (this.layoutService.isVisible(Parts.SIDEBAR_PART) && this.configurationService.getValue<IDebugConfiguration>('debug').openExplorerOnEnd) {\n\t\t\t\t\tthis.viewletService.openViewlet(EXPLORER_VIEWLET_ID);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}));\n\t}\n\n\trestartSession(session: IDebugSession, restartData?: any): Promise<any> {\n\t\treturn this.textFileService.saveAll().then(() => {\n\t\t\tconst isAutoRestart = !!restartData;\n\t\t\tconst runTasks: () => Promise<TaskRunResult> = () => {\n\t\t\t\tif (isAutoRestart) {\n\t\t\t\t\t// Do not run preLaunch and postDebug tasks for automatic restarts\n\t\t\t\t\treturn Promise.resolve(TaskRunResult.Success);\n\t\t\t\t}\n\n\t\t\t\treturn this.runTask(session.root, session.configuration.postDebugTask)\n\t\t\t\t\t.then(() => this.runTaskAndCheckErrors(session.root, session.configuration.preLaunchTask));\n\t\t\t};\n\n\t\t\tif (session.capabilities.supportsRestartRequest) {\n\t\t\t\treturn runTasks().then(taskResult => taskResult === TaskRunResult.Success ? session.restart() : undefined);\n\t\t\t}\n\n\t\t\tif (isExtensionHostDebugging(session.configuration) && session.root) {\n\t\t\t\treturn runTasks().then(taskResult => taskResult === TaskRunResult.Success ? this.broadcastService.broadcast({\n\t\t\t\t\tchannel: EXTENSION_RELOAD_BROADCAST_CHANNEL,\n\t\t\t\t\tpayload: [session.root.uri.toString()]\n\t\t\t\t}) : undefined);\n\t\t\t}\n\n\t\t\tconst shouldFocus = this.viewModel.focusedSession && session.getId() === this.viewModel.focusedSession.getId();\n\t\t\t// If the restart is automatic  -> disconnect, otherwise -> terminate #55064\n\t\t\treturn (isAutoRestart ? session.disconnect(true) : session.terminate(true)).then(() => {\n\n\t\t\t\treturn new Promise<void>((c, e) => {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\trunTasks().then(taskResult => {\n\t\t\t\t\t\t\tif (taskResult !== TaskRunResult.Success) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Read the configuration again if a launch.json has been changed, if not just use the inmemory configuration\n\t\t\t\t\t\t\tlet needsToSubstitute = false;\n\t\t\t\t\t\t\tlet unresolved: IConfig | undefined;\n\t\t\t\t\t\t\tconst launch = session.root ? this.configurationManager.getLaunch(session.root.uri) : undefined;\n\t\t\t\t\t\t\tif (launch) {\n\t\t\t\t\t\t\t\tunresolved = launch.getConfiguration(session.configuration.name);\n\t\t\t\t\t\t\t\tif (unresolved && !equals(unresolved, session.unresolvedConfiguration)) {\n\t\t\t\t\t\t\t\t\t// Take the type from the session since the debug extension might overwrite it #21316\n\t\t\t\t\t\t\t\t\tunresolved.type = session.configuration.type;\n\t\t\t\t\t\t\t\t\tunresolved.noDebug = session.configuration.noDebug;\n\t\t\t\t\t\t\t\t\tneedsToSubstitute = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet substitutionThenable: Promise<IConfig | null | undefined> = Promise.resolve(session.configuration);\n\t\t\t\t\t\t\tif (launch && needsToSubstitute && unresolved) {\n\t\t\t\t\t\t\t\tsubstitutionThenable = this.configurationManager.resolveConfigurationByProviders(launch.workspace ? launch.workspace.uri : undefined, unresolved.type, unresolved)\n\t\t\t\t\t\t\t\t\t.then(resolved => {\n\t\t\t\t\t\t\t\t\t\tif (resolved) {\n\t\t\t\t\t\t\t\t\t\t\t// start debugging\n\t\t\t\t\t\t\t\t\t\t\treturn this.substituteVariables(launch, resolved);\n\t\t\t\t\t\t\t\t\t\t} else if (resolved === null) {\n\t\t\t\t\t\t\t\t\t\t\t// abort debugging silently and open launch.json\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t// abort debugging silently\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsubstitutionThenable.then(resolved => {\n\n\t\t\t\t\t\t\t\tif (!resolved) {\n\t\t\t\t\t\t\t\t\treturn c(undefined);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsession.setConfiguration({ resolved, unresolved });\n\t\t\t\t\t\t\t\tsession.configuration.__restart = restartData;\n\n\t\t\t\t\t\t\t\tthis.launchOrAttachToSession(session, shouldFocus).then(() => {\n\t\t\t\t\t\t\t\t\tthis._onDidNewSession.fire(session);\n\t\t\t\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t\t\t\t}, err => e(err));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 300);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tstopSession(session: IDebugSession): Promise<any> {\n\n\t\tif (session) {\n\t\t\treturn session.terminate();\n\t\t}\n\n\t\tconst sessions = this.model.getSessions();\n\t\tif (sessions.length === 0) {\n\t\t\tthis.endInitializingState();\n\t\t}\n\n\t\treturn Promise.all(sessions.map(s => s.terminate()));\n\t}\n\n\tprivate substituteVariables(launch: ILaunch | undefined, config: IConfig): Promise<IConfig | undefined> {\n\t\tconst dbg = this.configurationManager.getDebugger(config.type);\n\t\tif (dbg) {\n\t\t\tlet folder: IWorkspaceFolder | undefined = undefined;\n\t\t\tif (launch && launch.workspace) {\n\t\t\t\tfolder = launch.workspace;\n\t\t\t} else {\n\t\t\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\t\t\tif (folders.length === 1) {\n\t\t\t\t\tfolder = folders[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn dbg.substituteVariables(folder, config).then(config => {\n\t\t\t\treturn config;\n\t\t\t}, (err: Error) => {\n\t\t\t\tthis.showError(err.message);\n\t\t\t\treturn undefined;\t// bail out\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\tprivate showError(message: string, actions: IAction[] = []): Promise<void> {\n\t\tconst configureAction = this.instantiationService.createInstance(debugactions.ConfigureAction, debugactions.ConfigureAction.ID, debugactions.ConfigureAction.LABEL);\n\t\tactions.push(configureAction);\n\t\treturn this.dialogService.show(severity.Error, message, actions.map(a => a.label).concat(nls.localize('cancel', \"Cancel\")), { cancelId: actions.length }).then(choice => {\n\t\t\tif (choice < actions.length) {\n\t\t\t\treturn actions[choice].run();\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t//---- task management\n\n\tprivate runTaskAndCheckErrors(root: IWorkspaceFolder | undefined, taskId: string | TaskIdentifier | undefined): Promise<TaskRunResult> {\n\n\t\tconst debugAnywayAction = new Action('debug.debugAnyway', nls.localize('debugAnyway', \"Debug Anyway\"), undefined, true, () => Promise.resolve(TaskRunResult.Success));\n\t\treturn this.runTask(root, taskId).then((taskSummary: ITaskSummary) => {\n\t\t\tconst errorCount = taskId ? this.markerService.getStatistics().errors : 0;\n\t\t\tconst successExitCode = taskSummary && taskSummary.exitCode === 0;\n\t\t\tconst failureExitCode = taskSummary && taskSummary.exitCode !== undefined && taskSummary.exitCode !== 0;\n\t\t\tif (successExitCode || (errorCount === 0 && !failureExitCode)) {\n\t\t\t\treturn <any>TaskRunResult.Success;\n\t\t\t}\n\n\t\t\tconst taskLabel = typeof taskId === 'string' ? taskId : taskId ? taskId.name : '';\n\t\t\tconst message = errorCount > 1\n\t\t\t\t? nls.localize('preLaunchTaskErrors', \"Errors exist after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t: errorCount === 1\n\t\t\t\t\t? nls.localize('preLaunchTaskError', \"Error exists after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t\t: nls.localize('preLaunchTaskExitCode', \"The preLaunchTask '{0}' terminated with exit code {1}.\", taskLabel, taskSummary.exitCode);\n\n\t\t\tconst showErrorsAction = new Action('debug.showErrors', nls.localize('showErrors', \"Show Errors\"), undefined, true, () => {\n\t\t\t\tthis.panelService.openPanel(Constants.MARKERS_PANEL_ID);\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t});\n\n\t\t\treturn this.showError(message, [debugAnywayAction, showErrorsAction]);\n\t\t}, (err: TaskError) => {\n\t\t\treturn this.showError(err.message, [debugAnywayAction, this.taskService.configureAction()]);\n\t\t});\n\t}\n\n\tprivate runTask(root: IWorkspaceFolder | undefined, taskId: string | TaskIdentifier | undefined): Promise<ITaskSummary | null> {\n\t\tif (!taskId) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (!root) {\n\t\t\treturn Promise.reject(new Error(nls.localize('invalidTaskReference', \"Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.\", typeof taskId === 'string' ? taskId : taskId.type)));\n\t\t}\n\t\t// run a task before starting a debug session\n\t\treturn this.taskService.getTask(root, taskId).then(task => {\n\t\t\tif (!task) {\n\t\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t\t? nls.localize('DebugTaskNotFoundWithTaskId', \"Could not find the task '{0}'.\", taskId)\n\t\t\t\t\t: nls.localize('DebugTaskNotFound', \"Could not find the specified task.\");\n\t\t\t\treturn Promise.reject(createErrorWithActions(errorMessage));\n\t\t\t}\n\n\t\t\t// If a task is missing the problem matcher the promise will never complete, so we need to have a workaround #35340\n\t\t\tlet taskStarted = false;\n\t\t\tconst promise = this.taskService.getActiveTasks().then(tasks => {\n\t\t\t\tif (tasks.filter(t => t._id === task._id).length) {\n\t\t\t\t\t// task is already running - nothing to do.\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t\tonce(e => ((e.kind === TaskEventKind.Active) || (e.kind === TaskEventKind.DependsOnStarted)) && e.taskId === task._id, this.taskService.onDidStateChange)(() => {\n\t\t\t\t\t// Task is active, so everything seems to be fine, no need to prompt after 10 seconds\n\t\t\t\t\t// Use case being a slow running task should not be prompted even though it takes more than 10 seconds\n\t\t\t\t\ttaskStarted = true;\n\t\t\t\t});\n\t\t\t\tconst taskPromise = this.taskService.run(task);\n\t\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\t\treturn new Promise((c, e) => once(e => e.kind === TaskEventKind.Inactive && e.taskId === task._id, this.taskService.onDidStateChange)(() => {\n\t\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\t\tc(undefined);\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\treturn taskPromise;\n\t\t\t});\n\n\t\t\treturn new Promise((c, e) => {\n\t\t\t\tpromise.then(result => {\n\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\tc(result);\n\t\t\t\t}, error => e(error));\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (!taskStarted) {\n\t\t\t\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t\t\t\t? nls.localize('taskNotTrackedWithTaskId', \"The specified task cannot be tracked.\")\n\t\t\t\t\t\t\t: nls.localize('taskNotTracked', \"The task '{0}' cannot be tracked.\", JSON.stringify(taskId));\n\t\t\t\t\t\te({ severity: severity.Error, message: errorMessage });\n\t\t\t\t\t}\n\t\t\t\t}, 10000);\n\t\t\t});\n\t\t});\n\t}\n\n\t//---- focus management\n\n\tfocusStackFrame(stackFrame: IStackFrame | undefined, thread?: IThread, session?: IDebugSession, explicit?: boolean): void {\n\t\tif (!session) {\n\t\t\tif (stackFrame || thread) {\n\t\t\t\tsession = stackFrame ? stackFrame.thread.session : thread!.session;\n\t\t\t} else {\n\t\t\t\tconst sessions = this.model.getSessions();\n\t\t\t\tconst stoppedSession = sessions.filter(s => s.state === State.Stopped).shift();\n\t\t\t\tsession = stoppedSession || (sessions.length ? sessions[0] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (!thread) {\n\t\t\tif (stackFrame) {\n\t\t\t\tthread = stackFrame.thread;\n\t\t\t} else {\n\t\t\t\tconst threads = session ? session.getAllThreads() : undefined;\n\t\t\t\tconst stoppedThread = threads && threads.filter(t => t.stopped).shift();\n\t\t\t\tthread = stoppedThread || (threads && threads.length ? threads[0] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (!stackFrame) {\n\t\t\tif (thread) {\n\t\t\t\tconst callStack = thread.getCallStack();\n\t\t\t\tstackFrame = first(callStack, sf => !!(sf && sf.source && sf.source.available && sf.source.presentationHint !== 'deemphasize'), undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (stackFrame) {\n\t\t\tstackFrame.openInEditor(this.editorService, true);\n\t\t\taria.alert(nls.localize('debuggingPaused', \"Debugging paused {0}, {1} {2}\", thread && thread.stoppedDetails ? `, reason ${thread.stoppedDetails.reason}` : '', stackFrame.source ? stackFrame.source.name : '', stackFrame.range.startLineNumber));\n\t\t}\n\t\tif (session) {\n\t\t\tthis.debugType.set(session.configuration.type);\n\t\t} else {\n\t\t\tthis.debugType.reset();\n\t\t}\n\n\t\tthis.viewModel.setFocus(stackFrame, thread, session, !!explicit);\n\t}\n\n\t//---- watches\n\n\taddWatchExpression(name: string): void {\n\t\tconst we = this.model.addWatchExpression(name);\n\t\tthis.viewModel.setSelectedExpression(we);\n\t}\n\n\trenameWatchExpression(id: string, newName: string): void {\n\t\treturn this.model.renameWatchExpression(id, newName);\n\t}\n\n\tmoveWatchExpression(id: string, position: number): void {\n\t\tthis.model.moveWatchExpression(id, position);\n\t}\n\n\tremoveWatchExpressions(id?: string): void {\n\t\tthis.model.removeWatchExpressions(id);\n\t}\n\n\t//---- breakpoints\n\n\tenableOrDisableBreakpoints(enable: boolean, breakpoint?: IEnablement): Promise<void> {\n\t\tif (breakpoint) {\n\t\t\tthis.model.setEnablement(breakpoint, enable);\n\t\t\tif (breakpoint instanceof Breakpoint) {\n\t\t\t\treturn this.sendBreakpoints(breakpoint.uri);\n\t\t\t} else if (breakpoint instanceof FunctionBreakpoint) {\n\t\t\t\treturn this.sendFunctionBreakpoints();\n\t\t\t}\n\n\t\t\treturn this.sendExceptionBreakpoints();\n\t\t}\n\n\t\tthis.model.enableOrDisableAllBreakpoints(enable);\n\t\treturn this.sendAllBreakpoints();\n\t}\n\n\taddBreakpoints(uri: uri, rawBreakpoints: IBreakpointData[], context: string): Promise<IBreakpoint[]> {\n\t\tconst breakpoints = this.model.addBreakpoints(uri, rawBreakpoints);\n\t\tbreakpoints.forEach(bp => aria.status(nls.localize('breakpointAdded', \"Added breakpoint, line {0}, file {1}\", bp.lineNumber, uri.fsPath)));\n\t\tbreakpoints.forEach(bp => this.telemetryDebugAddBreakpoint(bp, context));\n\n\t\treturn this.sendBreakpoints(uri).then(() => breakpoints);\n\t}\n\n\tupdateBreakpoints(uri: uri, data: { [id: string]: DebugProtocol.Breakpoint }, sendOnResourceSaved: boolean): void {\n\t\tthis.model.updateBreakpoints(data);\n\t\tif (sendOnResourceSaved) {\n\t\t\tthis.breakpointsToSendOnResourceSaved.add(uri.toString());\n\t\t} else {\n\t\t\tthis.sendBreakpoints(uri);\n\t\t}\n\t}\n\n\tremoveBreakpoints(id?: string): Promise<any> {\n\t\tconst toRemove = this.model.getBreakpoints().filter(bp => !id || bp.getId() === id);\n\t\ttoRemove.forEach(bp => aria.status(nls.localize('breakpointRemoved', \"Removed breakpoint, line {0}, file {1}\", bp.lineNumber, bp.uri.fsPath)));\n\t\tconst urisToClear = distinct(toRemove, bp => bp.uri.toString()).map(bp => bp.uri);\n\n\t\tthis.model.removeBreakpoints(toRemove);\n\n\t\treturn Promise.all(urisToClear.map(uri => this.sendBreakpoints(uri)));\n\t}\n\n\tsetBreakpointsActivated(activated: boolean): Promise<void> {\n\t\tthis.model.setBreakpointsActivated(activated);\n\t\treturn this.sendAllBreakpoints();\n\t}\n\n\taddFunctionBreakpoint(name?: string, id?: string): void {\n\t\tconst newFunctionBreakpoint = this.model.addFunctionBreakpoint(name || '', id);\n\t\tthis.viewModel.setSelectedFunctionBreakpoint(newFunctionBreakpoint);\n\t}\n\n\trenameFunctionBreakpoint(id: string, newFunctionName: string): Promise<void> {\n\t\tthis.model.renameFunctionBreakpoint(id, newFunctionName);\n\t\treturn this.sendFunctionBreakpoints();\n\t}\n\n\tremoveFunctionBreakpoints(id?: string): Promise<void> {\n\t\tthis.model.removeFunctionBreakpoints(id);\n\t\treturn this.sendFunctionBreakpoints();\n\t}\n\n\tsendAllBreakpoints(session?: IDebugSession): Promise<any> {\n\t\treturn Promise.all(distinct(this.model.getBreakpoints(), bp => bp.uri.toString()).map(bp => this.sendBreakpoints(bp.uri, false, session)))\n\t\t\t.then(() => this.sendFunctionBreakpoints(session))\n\t\t\t// send exception breakpoints at the end since some debug adapters rely on the order\n\t\t\t.then(() => this.sendExceptionBreakpoints(session));\n\t}\n\n\tprivate sendBreakpoints(modelUri: uri, sourceModified = false, session?: IDebugSession): Promise<void> {\n\t\tconst breakpointsToSend = this.model.getBreakpoints({ uri: modelUri, enabledOnly: true });\n\n\t\treturn this.sendToOneOrAllSessions(session, s =>\n\t\t\ts.sendBreakpoints(modelUri, breakpointsToSend, sourceModified)\n\t\t);\n\t}\n\n\tprivate sendFunctionBreakpoints(session?: IDebugSession): Promise<void> {\n\t\tconst breakpointsToSend = this.model.getFunctionBreakpoints().filter(fbp => fbp.enabled && this.model.areBreakpointsActivated());\n\n\t\treturn this.sendToOneOrAllSessions(session, s => {\n\t\t\treturn s.capabilities.supportsFunctionBreakpoints ? s.sendFunctionBreakpoints(breakpointsToSend) : Promise.resolve(undefined);\n\t\t});\n\t}\n\n\tprivate sendExceptionBreakpoints(session?: IDebugSession): Promise<void> {\n\t\tconst enabledExceptionBps = this.model.getExceptionBreakpoints().filter(exb => exb.enabled);\n\n\t\treturn this.sendToOneOrAllSessions(session, s => {\n\t\t\treturn s.sendExceptionBreakpoints(enabledExceptionBps);\n\t\t});\n\t}\n\n\tprivate sendToOneOrAllSessions(session: IDebugSession | undefined, send: (session: IDebugSession) => Promise<void>): Promise<void> {\n\t\tif (session) {\n\t\t\treturn send(session);\n\t\t}\n\t\treturn Promise.all(this.model.getSessions().map(s => send(s))).then(() => undefined);\n\t}\n\n\tprivate onFileChanges(fileChangesEvent: FileChangesEvent): void {\n\t\tconst toRemove = this.model.getBreakpoints().filter(bp =>\n\t\t\tfileChangesEvent.contains(bp.uri, FileChangeType.DELETED));\n\t\tif (toRemove.length) {\n\t\t\tthis.model.removeBreakpoints(toRemove);\n\t\t}\n\n\t\tfileChangesEvent.getUpdated().forEach(event => {\n\n\t\t\tif (this.breakpointsToSendOnResourceSaved.delete(event.resource.toString())) {\n\t\t\t\tthis.sendBreakpoints(event.resource, true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate loadBreakpoints(): Breakpoint[] {\n\t\tlet result: Breakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((breakpoint: any) => {\n\t\t\t\treturn new Breakpoint(uri.parse(breakpoint.uri.external || breakpoint.source.uri.external), breakpoint.lineNumber, breakpoint.column, breakpoint.enabled, breakpoint.condition, breakpoint.hitCondition, breakpoint.logMessage, breakpoint.adapterData, this.textFileService);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadFunctionBreakpoints(): FunctionBreakpoint[] {\n\t\tlet result: FunctionBreakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_FUNCTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((fb: any) => {\n\t\t\t\treturn new FunctionBreakpoint(fb.name, fb.enabled, fb.hitCondition, fb.condition, fb.logMessage);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadExceptionBreakpoints(): ExceptionBreakpoint[] {\n\t\tlet result: ExceptionBreakpoint[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_EXCEPTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE, '[]')).map((exBreakpoint: any) => {\n\t\t\t\treturn new ExceptionBreakpoint(exBreakpoint.filter, exBreakpoint.label, exBreakpoint.enabled);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate loadWatchExpressions(): Expression[] {\n\t\tlet result: Expression[] | undefined;\n\t\ttry {\n\t\t\tresult = JSON.parse(this.storageService.get(DEBUG_WATCH_EXPRESSIONS_KEY, StorageScope.WORKSPACE, '[]')).map((watchStoredData: { name: string, id: string }) => {\n\t\t\t\treturn new Expression(watchStoredData.name, watchStoredData.id);\n\t\t\t});\n\t\t} catch (e) { }\n\n\t\treturn result || [];\n\t}\n\n\tprivate saveState(): void {\n\t\tconst breakpoints = this.model.getBreakpoints();\n\t\tif (breakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_BREAKPOINTS_KEY, JSON.stringify(breakpoints), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tif (!this.model.areBreakpointsActivated()) {\n\t\t\tthis.storageService.store(DEBUG_BREAKPOINTS_ACTIVATED_KEY, 'false', StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_BREAKPOINTS_ACTIVATED_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst functionBreakpoints = this.model.getFunctionBreakpoints();\n\t\tif (functionBreakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_FUNCTION_BREAKPOINTS_KEY, JSON.stringify(functionBreakpoints), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_FUNCTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst exceptionBreakpoints = this.model.getExceptionBreakpoints();\n\t\tif (exceptionBreakpoints.length) {\n\t\t\tthis.storageService.store(DEBUG_EXCEPTION_BREAKPOINTS_KEY, JSON.stringify(exceptionBreakpoints), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_EXCEPTION_BREAKPOINTS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst watchExpressions = this.model.getWatchExpressions();\n\t\tif (watchExpressions.length) {\n\t\t\tthis.storageService.store(DEBUG_WATCH_EXPRESSIONS_KEY, JSON.stringify(watchExpressions.map(we => ({ name: we.name, id: we.getId() }))), StorageScope.WORKSPACE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_WATCH_EXPRESSIONS_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\t//---- telemetry\n\n\tprivate telemetryDebugSessionStart(root: IWorkspaceFolder | undefined, type: string): Promise<void> {\n\t\tconst dbgr = this.configurationManager.getDebugger(type);\n\t\tif (!dbgr) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst extension = dbgr.getMainExtensionDescriptor();\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStart\" : {\n\t\t\t\t\"type\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"exceptionBreakpoints\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"extensionName\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true},\n\t\t\t\t\"launchJsonExists\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\treturn this.telemetryService.publicLog('debugSessionStart', {\n\t\t\ttype: type,\n\t\t\tbreakpointCount: this.model.getBreakpoints().length,\n\t\t\texceptionBreakpoints: this.model.getExceptionBreakpoints(),\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length,\n\t\t\textensionName: extension.identifier.value,\n\t\t\tisBuiltin: extension.isBuiltin,\n\t\t\tlaunchJsonExists: root && !!this.configurationService.getValue<IGlobalConfig>('launch', { resource: root.uri })\n\t\t});\n\t}\n\n\tprivate telemetryDebugSessionStop(session: IDebugSession, adapterExitEvent: AdapterEndEvent): Promise<any> {\n\n\t\tconst breakpoints = this.model.getBreakpoints();\n\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStop\" : {\n\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"sessionLengthInSeconds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\treturn this.telemetryService.publicLog('debugSessionStop', {\n\t\t\ttype: session && session.configuration.type,\n\t\t\tsuccess: adapterExitEvent.emittedStopped || breakpoints.length === 0,\n\t\t\tsessionLengthInSeconds: adapterExitEvent.sessionLengthInSeconds,\n\t\t\tbreakpointCount: breakpoints.length,\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length\n\t\t});\n\t}\n\n\tprivate telemetryDebugMisconfiguration(debugType: string | undefined, message: string): Promise<any> {\n\t\t/* __GDPR__\n\t\t\t\"debugMisconfiguration\" : {\n\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"error\": { \"classification\": \"CallstackOrException\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t*/\n\t\treturn this.telemetryService.publicLog('debugMisconfiguration', {\n\t\t\ttype: debugType,\n\t\t\terror: message\n\t\t});\n\t}\n\n\tprivate telemetryDebugAddBreakpoint(breakpoint: IBreakpoint, context: string): Promise<any> {\n\t\t/* __GDPR__\n\t\t\t\"debugAddBreakpoint\" : {\n\t\t\t\t\"context\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"hasCondition\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"hasHitCondition\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"hasLogMessage\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\n\t\treturn this.telemetryService.publicLog('debugAddBreakpoint', {\n\t\t\tcontext: context,\n\t\t\thasCondition: !!breakpoint.condition,\n\t\t\thasHitCondition: !!breakpoint.hitCondition,\n\t\t\thasLogMessage: !!breakpoint.logMessage\n\t\t});\n\t}\n}\n"]}]}