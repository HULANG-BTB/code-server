{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar arrays = require(\"vs/base/common/arrays\");\nvar types_1 = require(\"vs/base/common/types\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar nls_1 = require(\"vs/nls\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar settingsLayout_1 = require(\"vs/workbench/contrib/preferences/browser/settingsLayout\");\nvar preferences_1 = require(\"vs/workbench/services/preferences/common/preferences\");\nvar preferences_2 = require(\"vs/workbench/contrib/preferences/common/preferences\");\nexports.ONLINE_SERVICES_SETTING_TAG = 'usesOnlineServices';\nvar SettingsTreeElement = /** @class */ (function () {\n    function SettingsTreeElement() {\n    }\n    return SettingsTreeElement;\n}());\nexports.SettingsTreeElement = SettingsTreeElement;\nvar SettingsTreeGroupElement = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsTreeGroupElement, _super);\n    function SettingsTreeGroupElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(SettingsTreeGroupElement.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        set: function (newChildren) {\n            var _this = this;\n            this._children = newChildren;\n            this._childSettingKeys = new Set();\n            this._children.forEach(function (child) {\n                if (child instanceof SettingsTreeSettingElement) {\n                    _this._childSettingKeys.add(child.setting.key);\n                }\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns whether this group contains the given child key (to a depth of 1 only)\n     */\n    SettingsTreeGroupElement.prototype.containsSetting = function (key) {\n        return this._childSettingKeys.has(key);\n    };\n    return SettingsTreeGroupElement;\n}(SettingsTreeElement));\nexports.SettingsTreeGroupElement = SettingsTreeGroupElement;\nvar SettingsTreeNewExtensionsElement = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsTreeNewExtensionsElement, _super);\n    function SettingsTreeNewExtensionsElement() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return SettingsTreeNewExtensionsElement;\n}(SettingsTreeElement));\nexports.SettingsTreeNewExtensionsElement = SettingsTreeNewExtensionsElement;\nvar SettingsTreeSettingElement = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsTreeSettingElement, _super);\n    function SettingsTreeSettingElement(setting, parent, index, inspectResult) {\n        var _this = _super.call(this) || this;\n        _this.index = index;\n        _this.setting = setting;\n        _this.parent = parent;\n        _this.id = sanitizeId(parent.id + '_' + setting.key);\n        _this.update(inspectResult);\n        return _this;\n    }\n    Object.defineProperty(SettingsTreeSettingElement.prototype, \"displayCategory\", {\n        get: function () {\n            if (!this._displayCategory) {\n                this.initLabel();\n            }\n            return this._displayCategory;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SettingsTreeSettingElement.prototype, \"displayLabel\", {\n        get: function () {\n            if (!this._displayLabel) {\n                this.initLabel();\n            }\n            return this._displayLabel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SettingsTreeSettingElement.prototype.initLabel = function () {\n        var displayKeyFormat = settingKeyToDisplayFormat(this.setting.key, this.parent.id);\n        this._displayLabel = displayKeyFormat.label;\n        this._displayCategory = displayKeyFormat.category;\n    };\n    SettingsTreeSettingElement.prototype.update = function (inspectResult) {\n        var _this = this;\n        var isConfigured = inspectResult.isConfigured, inspected = inspectResult.inspected, targetSelector = inspectResult.targetSelector;\n        var displayValue = isConfigured ? inspected[targetSelector] : inspected.default;\n        var overriddenScopeList = [];\n        if (targetSelector === 'user' && typeof inspected.workspace !== 'undefined') {\n            overriddenScopeList.push(nls_1.localize('workspace', \"Workspace\"));\n        }\n        if (targetSelector === 'workspace' && typeof inspected.user !== 'undefined') {\n            overriddenScopeList.push(nls_1.localize('user', \"User\"));\n        }\n        this.value = displayValue;\n        this.scopeValue = isConfigured && inspected[targetSelector];\n        this.defaultValue = inspected.default;\n        this.isConfigured = isConfigured;\n        if (isConfigured || this.setting.tags || this.tags) {\n            // Don't create an empty Set for all 1000 settings, only if needed\n            this.tags = new Set();\n            if (isConfigured) {\n                this.tags.add(preferences_2.MODIFIED_SETTING_TAG);\n            }\n            if (this.setting.tags) {\n                this.setting.tags.forEach(function (tag) { return _this.tags.add(tag); });\n            }\n        }\n        this.overriddenScopeList = overriddenScopeList;\n        if (this.setting.description.length > SettingsTreeSettingElement.MAX_DESC_LINES) {\n            var truncatedDescLines = this.setting.description.slice(0, SettingsTreeSettingElement.MAX_DESC_LINES);\n            truncatedDescLines.push('[...]');\n            this.description = truncatedDescLines.join('\\n');\n        }\n        else {\n            this.description = this.setting.description.join('\\n');\n        }\n        if (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {\n            this.valueType = preferences_1.SettingValueType.Enum;\n        }\n        else if (this.setting.type === 'string') {\n            this.valueType = preferences_1.SettingValueType.String;\n        }\n        else if (isExcludeSetting(this.setting)) {\n            this.valueType = preferences_1.SettingValueType.Exclude;\n        }\n        else if (this.setting.type === 'integer') {\n            this.valueType = preferences_1.SettingValueType.Integer;\n        }\n        else if (this.setting.type === 'number') {\n            this.valueType = preferences_1.SettingValueType.Number;\n        }\n        else if (this.setting.type === 'boolean') {\n            this.valueType = preferences_1.SettingValueType.Boolean;\n        }\n        else if (types_1.isArray(this.setting.type) && this.setting.type.indexOf(preferences_1.SettingValueType.Null) > -1 && this.setting.type.length === 2) {\n            if (this.setting.type.indexOf(preferences_1.SettingValueType.Integer) > -1) {\n                this.valueType = preferences_1.SettingValueType.NullableInteger;\n            }\n            else if (this.setting.type.indexOf(preferences_1.SettingValueType.Number) > -1) {\n                this.valueType = preferences_1.SettingValueType.NullableNumber;\n            }\n            else {\n                this.valueType = preferences_1.SettingValueType.Complex;\n            }\n        }\n        else {\n            this.valueType = preferences_1.SettingValueType.Complex;\n        }\n    };\n    SettingsTreeSettingElement.prototype.matchesAllTags = function (tagFilters) {\n        var _this = this;\n        if (!tagFilters || !tagFilters.size) {\n            return true;\n        }\n        if (this.tags) {\n            var hasFilteredTag_1 = true;\n            tagFilters.forEach(function (tag) {\n                hasFilteredTag_1 = hasFilteredTag_1 && _this.tags.has(tag);\n            });\n            return hasFilteredTag_1;\n        }\n        else {\n            return false;\n        }\n    };\n    SettingsTreeSettingElement.prototype.matchesScope = function (scope) {\n        var configTarget = uri_1.URI.isUri(scope) ? configuration_1.ConfigurationTarget.WORKSPACE_FOLDER : scope;\n        if (configTarget === configuration_1.ConfigurationTarget.WORKSPACE_FOLDER) {\n            return this.setting.scope === configurationRegistry_1.ConfigurationScope.RESOURCE;\n        }\n        if (configTarget === configuration_1.ConfigurationTarget.WORKSPACE) {\n            return this.setting.scope === configurationRegistry_1.ConfigurationScope.WINDOW || this.setting.scope === configurationRegistry_1.ConfigurationScope.RESOURCE;\n        }\n        return true;\n    };\n    SettingsTreeSettingElement.MAX_DESC_LINES = 20;\n    return SettingsTreeSettingElement;\n}(SettingsTreeElement));\nexports.SettingsTreeSettingElement = SettingsTreeSettingElement;\nvar SettingsTreeModel = /** @class */ (function () {\n    function SettingsTreeModel(_viewState, _configurationService) {\n        this._viewState = _viewState;\n        this._configurationService = _configurationService;\n        this._treeElementsById = new Map();\n        this._treeElementsBySettingName = new Map();\n    }\n    Object.defineProperty(SettingsTreeModel.prototype, \"root\", {\n        get: function () {\n            return this._root;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SettingsTreeModel.prototype.update = function (newTocRoot) {\n        if (newTocRoot === void 0) { newTocRoot = this._tocRoot; }\n        this._treeElementsById.clear();\n        this._treeElementsBySettingName.clear();\n        var newRoot = this.createSettingsTreeGroupElement(newTocRoot);\n        if (newRoot.children[0] instanceof SettingsTreeGroupElement) {\n            newRoot.children[0].isFirstGroup = true; // TODO\n        }\n        if (this._root) {\n            this._root.children = newRoot.children;\n        }\n        else {\n            this._root = newRoot;\n        }\n    };\n    SettingsTreeModel.prototype.getElementById = function (id) {\n        return types_1.withUndefinedAsNull(this._treeElementsById.get(id));\n    };\n    SettingsTreeModel.prototype.getElementsByName = function (name) {\n        return types_1.withUndefinedAsNull(this._treeElementsBySettingName.get(name));\n    };\n    SettingsTreeModel.prototype.updateElementsByName = function (name) {\n        var _this = this;\n        if (!this._treeElementsBySettingName.has(name)) {\n            return;\n        }\n        this._treeElementsBySettingName.get(name).forEach(function (element) {\n            var inspectResult = inspectSetting(element.setting.key, _this._viewState.settingsTarget, _this._configurationService);\n            element.update(inspectResult);\n        });\n    };\n    SettingsTreeModel.prototype.createSettingsTreeGroupElement = function (tocEntry, parent) {\n        var _this = this;\n        var element = new SettingsTreeGroupElement();\n        var index = this._treeElementsById.size;\n        element.index = index;\n        element.id = tocEntry.id;\n        element.label = tocEntry.label;\n        element.parent = parent;\n        element.level = this.getDepth(element);\n        var children = [];\n        if (tocEntry.settings) {\n            var settingChildren = tocEntry.settings.map(function (s) { return _this.createSettingsTreeSettingElement(s, element); })\n                .filter(function (el) { return el.setting.deprecationMessage ? el.isConfigured : true; });\n            children.push.apply(children, settingChildren);\n        }\n        if (tocEntry.children) {\n            var groupChildren = tocEntry.children.map(function (child) { return _this.createSettingsTreeGroupElement(child, element); });\n            children.push.apply(children, groupChildren);\n        }\n        element.children = children;\n        this._treeElementsById.set(element.id, element);\n        return element;\n    };\n    SettingsTreeModel.prototype.getDepth = function (element) {\n        if (element.parent) {\n            return 1 + this.getDepth(element.parent);\n        }\n        else {\n            return 0;\n        }\n    };\n    SettingsTreeModel.prototype.createSettingsTreeSettingElement = function (setting, parent) {\n        var index = this._treeElementsById.size;\n        var inspectResult = inspectSetting(setting.key, this._viewState.settingsTarget, this._configurationService);\n        var element = new SettingsTreeSettingElement(setting, parent, index, inspectResult);\n        this._treeElementsById.set(element.id, element);\n        var nameElements = this._treeElementsBySettingName.get(setting.key) || [];\n        nameElements.push(element);\n        this._treeElementsBySettingName.set(setting.key, nameElements);\n        return element;\n    };\n    SettingsTreeModel = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], SettingsTreeModel);\n    return SettingsTreeModel;\n}());\nexports.SettingsTreeModel = SettingsTreeModel;\nfunction inspectSetting(key, target, configurationService) {\n    var inspectOverrides = uri_1.URI.isUri(target) ? { resource: target } : undefined;\n    var inspected = configurationService.inspect(key, inspectOverrides);\n    var targetSelector = target === configuration_1.ConfigurationTarget.USER ? 'user' :\n        target === configuration_1.ConfigurationTarget.WORKSPACE ? 'workspace' :\n            'workspaceFolder';\n    var isConfigured = typeof inspected[targetSelector] !== 'undefined';\n    return { isConfigured: isConfigured, inspected: inspected, targetSelector: targetSelector };\n}\nfunction sanitizeId(id) {\n    return id.replace(/[\\.\\/]/, '_');\n}\nfunction settingKeyToDisplayFormat(key, groupId) {\n    if (groupId === void 0) { groupId = ''; }\n    var lastDotIdx = key.lastIndexOf('.');\n    var category = '';\n    if (lastDotIdx >= 0) {\n        category = key.substr(0, lastDotIdx);\n        key = key.substr(lastDotIdx + 1);\n    }\n    groupId = groupId.replace(/\\//g, '.');\n    category = trimCategoryForGroup(category, groupId);\n    category = wordifyKey(category);\n    var label = wordifyKey(key);\n    return { category: category, label: label };\n}\nexports.settingKeyToDisplayFormat = settingKeyToDisplayFormat;\nfunction wordifyKey(key) {\n    return key\n        .replace(/\\.([a-z])/g, function (match, p1) { return \" \\u203A \" + p1.toUpperCase(); })\n        .replace(/([a-z])([A-Z])/g, '$1 $2') // fooBar => foo Bar\n        .replace(/^[a-z]/g, function (match) { return match.toUpperCase(); }) // foo => Foo\n        .replace(/\\b\\w+\\b/g, function (match) {\n        return settingsLayout_1.knownAcronyms.has(match.toLowerCase()) ?\n            match.toUpperCase() :\n            match;\n    });\n}\nfunction trimCategoryForGroup(category, groupId) {\n    var doTrim = function (forward) {\n        var parts = groupId.split('.');\n        while (parts.length) {\n            var reg = new RegExp(\"^\" + parts.join('\\\\.') + \"(\\\\.|$)\", 'i');\n            if (reg.test(category)) {\n                return category.replace(reg, '');\n            }\n            if (forward) {\n                parts.pop();\n            }\n            else {\n                parts.shift();\n            }\n        }\n        return null;\n    };\n    var trimmed = doTrim(true);\n    if (trimmed === null) {\n        trimmed = doTrim(false);\n    }\n    if (trimmed === null) {\n        trimmed = category;\n    }\n    return trimmed;\n}\nfunction isExcludeSetting(setting) {\n    return setting.key === 'files.exclude' ||\n        setting.key === 'search.exclude' ||\n        setting.key === 'files.watcherExclude';\n}\nexports.isExcludeSetting = isExcludeSetting;\nfunction settingTypeEnumRenderable(_type) {\n    var enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];\n    var type = types_1.isArray(_type) ? _type : [_type];\n    return type.every(function (type) { return enumRenderableSettingTypes.indexOf(type) > -1; });\n}\nvar SearchResultIdx;\n(function (SearchResultIdx) {\n    SearchResultIdx[SearchResultIdx[\"Local\"] = 0] = \"Local\";\n    SearchResultIdx[SearchResultIdx[\"Remote\"] = 1] = \"Remote\";\n    SearchResultIdx[SearchResultIdx[\"NewExtensions\"] = 2] = \"NewExtensions\";\n})(SearchResultIdx = exports.SearchResultIdx || (exports.SearchResultIdx = {}));\nvar SearchResultModel = /** @class */ (function (_super) {\n    tslib_1.__extends(SearchResultModel, _super);\n    function SearchResultModel(viewState, configurationService) {\n        var _this = _super.call(this, viewState, configurationService) || this;\n        _this.id = 'searchResultModel';\n        _this.update({ id: 'searchResultModel', label: '' });\n        return _this;\n    }\n    SearchResultModel.prototype.getUniqueResults = function () {\n        if (this.cachedUniqueSearchResults) {\n            return this.cachedUniqueSearchResults;\n        }\n        if (!this.rawSearchResults) {\n            return [];\n        }\n        var localMatchKeys = new Set();\n        var localResult = this.rawSearchResults[SearchResultIdx.Local];\n        if (localResult) {\n            localResult.filterMatches.forEach(function (m) { return localMatchKeys.add(m.setting.key); });\n        }\n        var remoteResult = this.rawSearchResults[SearchResultIdx.Remote];\n        if (remoteResult) {\n            remoteResult.filterMatches = remoteResult.filterMatches.filter(function (m) { return !localMatchKeys.has(m.setting.key); });\n        }\n        if (remoteResult) {\n            this.newExtensionSearchResults = this.rawSearchResults[SearchResultIdx.NewExtensions];\n        }\n        this.cachedUniqueSearchResults = [localResult, remoteResult];\n        return this.cachedUniqueSearchResults;\n    };\n    SearchResultModel.prototype.getRawResults = function () {\n        return this.rawSearchResults;\n    };\n    SearchResultModel.prototype.setResult = function (order, result) {\n        this.cachedUniqueSearchResults = undefined;\n        this.rawSearchResults = this.rawSearchResults || [];\n        if (!result) {\n            delete this.rawSearchResults[order];\n            return;\n        }\n        this.rawSearchResults[order] = result;\n        this.updateChildren();\n    };\n    SearchResultModel.prototype.updateChildren = function () {\n        var _this = this;\n        this.update({\n            id: 'searchResultModel',\n            label: 'searchResultModel',\n            settings: this.getFlatSettings()\n        });\n        // Save time, filter children in the search model instead of relying on the tree filter, which still requires heights to be calculated.\n        this.root.children = this.root.children\n            .filter(function (child) { return child instanceof SettingsTreeSettingElement && child.matchesAllTags(_this._viewState.tagFilters) && child.matchesScope(_this._viewState.settingsTarget); });\n        if (this.newExtensionSearchResults && this.newExtensionSearchResults.filterMatches.length) {\n            var newExtElement = new SettingsTreeNewExtensionsElement();\n            newExtElement.index = this._treeElementsById.size;\n            newExtElement.parent = this._root;\n            newExtElement.id = 'newExtensions';\n            this._treeElementsById.set(newExtElement.id, newExtElement);\n            var resultExtensionIds = this.newExtensionSearchResults.filterMatches\n                .map(function (result) { return result.setting; })\n                .filter(function (setting) { return setting.extensionName && setting.extensionPublisher; })\n                .map(function (setting) { return setting.extensionPublisher + \".\" + setting.extensionName; });\n            newExtElement.extensionIds = arrays.distinct(resultExtensionIds);\n            this._root.children.push(newExtElement);\n        }\n    };\n    SearchResultModel.prototype.getFlatSettings = function () {\n        var flatSettings = [];\n        arrays.coalesce(this.getUniqueResults())\n            .forEach(function (r) {\n            flatSettings.push.apply(flatSettings, r.filterMatches.map(function (m) { return m.setting; }));\n        });\n        return flatSettings;\n    };\n    SearchResultModel = tslib_1.__decorate([\n        tslib_1.__param(1, configuration_1.IConfigurationService)\n    ], SearchResultModel);\n    return SearchResultModel;\n}(SettingsTreeModel));\nexports.SearchResultModel = SearchResultModel;\nvar tagRegex = /(^|\\s)@tag:(\"([^\"]*)\"|[^\"]\\S*)/g;\nfunction parseQuery(query) {\n    var tags = [];\n    query = query.replace(tagRegex, function (_, __, quotedTag, tag) {\n        tags.push(tag || quotedTag);\n        return '';\n    });\n    query = query.replace(\"@\" + preferences_2.MODIFIED_SETTING_TAG, function () {\n        tags.push(preferences_2.MODIFIED_SETTING_TAG);\n        return '';\n    });\n    query = query.trim();\n    return {\n        tags: tags,\n        query: query\n    };\n}\nexports.parseQuery = parseQuery;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { isArray, withUndefinedAsNull } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { SettingsTarget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';\nimport { ITOCEntry, knownAcronyms } from 'vs/workbench/contrib/preferences/browser/settingsLayout';\nimport { IExtensionSetting, ISearchResult, ISetting, SettingValueType } from 'vs/workbench/services/preferences/common/preferences';\nimport { MODIFIED_SETTING_TAG } from 'vs/workbench/contrib/preferences/common/preferences';\n\nexport const ONLINE_SERVICES_SETTING_TAG = 'usesOnlineServices';\n\nexport interface ISettingsEditorViewState {\n\tsettingsTarget: SettingsTarget;\n\ttagFilters?: Set<string>;\n\tfilterToCategory?: SettingsTreeGroupElement;\n}\n\nexport abstract class SettingsTreeElement {\n\tid: string;\n\tparent?: SettingsTreeGroupElement;\n\n\t/**\n\t * Index assigned in display order, used for paging.\n\t */\n\tindex: number;\n}\n\nexport type SettingsTreeGroupChild = (SettingsTreeGroupElement | SettingsTreeSettingElement | SettingsTreeNewExtensionsElement);\n\nexport class SettingsTreeGroupElement extends SettingsTreeElement {\n\tcount?: number;\n\tlabel: string;\n\tlevel: number;\n\tisFirstGroup: boolean;\n\n\tprivate _childSettingKeys: Set<string>;\n\tprivate _children: SettingsTreeGroupChild[];\n\n\tget children(): SettingsTreeGroupChild[] {\n\t\treturn this._children;\n\t}\n\n\tset children(newChildren: SettingsTreeGroupChild[]) {\n\t\tthis._children = newChildren;\n\n\t\tthis._childSettingKeys = new Set();\n\t\tthis._children.forEach(child => {\n\t\t\tif (child instanceof SettingsTreeSettingElement) {\n\t\t\t\tthis._childSettingKeys.add(child.setting.key);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Returns whether this group contains the given child key (to a depth of 1 only)\n\t */\n\tcontainsSetting(key: string): boolean {\n\t\treturn this._childSettingKeys.has(key);\n\t}\n}\n\nexport class SettingsTreeNewExtensionsElement extends SettingsTreeElement {\n\textensionIds: string[];\n}\n\nexport class SettingsTreeSettingElement extends SettingsTreeElement {\n\tprivate static MAX_DESC_LINES = 20;\n\n\tsetting: ISetting;\n\n\tprivate _displayCategory: string;\n\tprivate _displayLabel: string;\n\n\t/**\n\t * scopeValue || defaultValue, for rendering convenience.\n\t */\n\tvalue: any;\n\n\t/**\n\t * The value in the current settings scope.\n\t */\n\tscopeValue: any;\n\n\t/**\n\t * The default value\n\t */\n\tdefaultValue?: any;\n\n\t/**\n\t * Whether the setting is configured in the selected scope.\n\t */\n\tisConfigured: boolean;\n\n\ttags?: Set<string>;\n\toverriddenScopeList: string[];\n\tdescription: string;\n\tvalueType: SettingValueType;\n\n\tconstructor(setting: ISetting, parent: SettingsTreeGroupElement, index: number, inspectResult: IInspectResult) {\n\t\tsuper();\n\t\tthis.index = index;\n\t\tthis.setting = setting;\n\t\tthis.parent = parent;\n\t\tthis.id = sanitizeId(parent.id + '_' + setting.key);\n\n\t\tthis.update(inspectResult);\n\t}\n\n\tget displayCategory(): string {\n\t\tif (!this._displayCategory) {\n\t\t\tthis.initLabel();\n\t\t}\n\n\t\treturn this._displayCategory;\n\t}\n\n\tget displayLabel(): string {\n\t\tif (!this._displayLabel) {\n\t\t\tthis.initLabel();\n\t\t}\n\n\t\treturn this._displayLabel;\n\t}\n\n\tprivate initLabel(): void {\n\t\tconst displayKeyFormat = settingKeyToDisplayFormat(this.setting.key, this.parent!.id);\n\t\tthis._displayLabel = displayKeyFormat.label;\n\t\tthis._displayCategory = displayKeyFormat.category;\n\t}\n\n\tupdate(inspectResult: IInspectResult): void {\n\t\tconst { isConfigured, inspected, targetSelector } = inspectResult;\n\n\t\tconst displayValue = isConfigured ? inspected[targetSelector] : inspected.default;\n\t\tconst overriddenScopeList: string[] = [];\n\t\tif (targetSelector === 'user' && typeof inspected.workspace !== 'undefined') {\n\t\t\toverriddenScopeList.push(localize('workspace', \"Workspace\"));\n\t\t}\n\n\t\tif (targetSelector === 'workspace' && typeof inspected.user !== 'undefined') {\n\t\t\toverriddenScopeList.push(localize('user', \"User\"));\n\t\t}\n\n\t\tthis.value = displayValue;\n\t\tthis.scopeValue = isConfigured && inspected[targetSelector];\n\t\tthis.defaultValue = inspected.default;\n\n\t\tthis.isConfigured = isConfigured;\n\t\tif (isConfigured || this.setting.tags || this.tags) {\n\t\t\t// Don't create an empty Set for all 1000 settings, only if needed\n\t\t\tthis.tags = new Set<string>();\n\t\t\tif (isConfigured) {\n\t\t\t\tthis.tags.add(MODIFIED_SETTING_TAG);\n\t\t\t}\n\n\t\t\tif (this.setting.tags) {\n\t\t\t\tthis.setting.tags.forEach(tag => this.tags!.add(tag));\n\t\t\t}\n\t\t}\n\n\t\tthis.overriddenScopeList = overriddenScopeList;\n\t\tif (this.setting.description.length > SettingsTreeSettingElement.MAX_DESC_LINES) {\n\t\t\tconst truncatedDescLines = this.setting.description.slice(0, SettingsTreeSettingElement.MAX_DESC_LINES);\n\t\t\ttruncatedDescLines.push('[...]');\n\t\t\tthis.description = truncatedDescLines.join('\\n');\n\t\t} else {\n\t\t\tthis.description = this.setting.description.join('\\n');\n\t\t}\n\n\t\tif (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {\n\t\t\tthis.valueType = SettingValueType.Enum;\n\t\t} else if (this.setting.type === 'string') {\n\t\t\tthis.valueType = SettingValueType.String;\n\t\t} else if (isExcludeSetting(this.setting)) {\n\t\t\tthis.valueType = SettingValueType.Exclude;\n\t\t} else if (this.setting.type === 'integer') {\n\t\t\tthis.valueType = SettingValueType.Integer;\n\t\t} else if (this.setting.type === 'number') {\n\t\t\tthis.valueType = SettingValueType.Number;\n\t\t} else if (this.setting.type === 'boolean') {\n\t\t\tthis.valueType = SettingValueType.Boolean;\n\t\t} else if (isArray(this.setting.type) && this.setting.type.indexOf(SettingValueType.Null) > -1 && this.setting.type.length === 2) {\n\t\t\tif (this.setting.type.indexOf(SettingValueType.Integer) > -1) {\n\t\t\t\tthis.valueType = SettingValueType.NullableInteger;\n\t\t\t} else if (this.setting.type.indexOf(SettingValueType.Number) > -1) {\n\t\t\t\tthis.valueType = SettingValueType.NullableNumber;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t}\n\t}\n\n\tmatchesAllTags(tagFilters?: Set<string>): boolean {\n\t\tif (!tagFilters || !tagFilters.size) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.tags) {\n\t\t\tlet hasFilteredTag = true;\n\t\t\ttagFilters.forEach(tag => {\n\t\t\t\thasFilteredTag = hasFilteredTag && this.tags!.has(tag);\n\t\t\t});\n\t\t\treturn hasFilteredTag;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tmatchesScope(scope: SettingsTarget): boolean {\n\t\tconst configTarget = URI.isUri(scope) ? ConfigurationTarget.WORKSPACE_FOLDER : scope;\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn this.setting.scope === ConfigurationScope.RESOURCE;\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn this.setting.scope === ConfigurationScope.WINDOW || this.setting.scope === ConfigurationScope.RESOURCE;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport class SettingsTreeModel {\n\tprotected _root: SettingsTreeGroupElement;\n\tprotected _treeElementsById = new Map<string, SettingsTreeElement>();\n\tprivate _treeElementsBySettingName = new Map<string, SettingsTreeSettingElement[]>();\n\tprivate _tocRoot: ITOCEntry;\n\n\tconstructor(\n\t\tprotected _viewState: ISettingsEditorViewState,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) { }\n\n\tget root(): SettingsTreeGroupElement {\n\t\treturn this._root;\n\t}\n\n\tupdate(newTocRoot = this._tocRoot): void {\n\t\tthis._treeElementsById.clear();\n\t\tthis._treeElementsBySettingName.clear();\n\n\t\tconst newRoot = this.createSettingsTreeGroupElement(newTocRoot);\n\t\tif (newRoot.children[0] instanceof SettingsTreeGroupElement) {\n\t\t\t(<SettingsTreeGroupElement>newRoot.children[0]).isFirstGroup = true; // TODO\n\t\t}\n\n\t\tif (this._root) {\n\t\t\tthis._root.children = newRoot.children;\n\t\t} else {\n\t\t\tthis._root = newRoot;\n\t\t}\n\t}\n\n\tgetElementById(id: string): SettingsTreeElement | null {\n\t\treturn withUndefinedAsNull(this._treeElementsById.get(id));\n\t}\n\n\tgetElementsByName(name: string): SettingsTreeSettingElement[] | null {\n\t\treturn withUndefinedAsNull(this._treeElementsBySettingName.get(name));\n\t}\n\n\tupdateElementsByName(name: string): void {\n\t\tif (!this._treeElementsBySettingName.has(name)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._treeElementsBySettingName.get(name)!.forEach(element => {\n\t\t\tconst inspectResult = inspectSetting(element.setting.key, this._viewState.settingsTarget, this._configurationService);\n\t\t\telement.update(inspectResult);\n\t\t});\n\t}\n\n\tprivate createSettingsTreeGroupElement(tocEntry: ITOCEntry, parent?: SettingsTreeGroupElement): SettingsTreeGroupElement {\n\t\tconst element = new SettingsTreeGroupElement();\n\t\tconst index = this._treeElementsById.size;\n\t\telement.index = index;\n\t\telement.id = tocEntry.id;\n\t\telement.label = tocEntry.label;\n\t\telement.parent = parent;\n\t\telement.level = this.getDepth(element);\n\n\t\tconst children: SettingsTreeGroupChild[] = [];\n\t\tif (tocEntry.settings) {\n\t\t\tconst settingChildren = tocEntry.settings.map(s => this.createSettingsTreeSettingElement(<ISetting>s, element))\n\t\t\t\t.filter(el => el.setting.deprecationMessage ? el.isConfigured : true);\n\t\t\tchildren.push(...settingChildren);\n\t\t}\n\n\t\tif (tocEntry.children) {\n\t\t\tconst groupChildren = tocEntry.children.map(child => this.createSettingsTreeGroupElement(child, element));\n\t\t\tchildren.push(...groupChildren);\n\t\t}\n\n\t\telement.children = children;\n\n\t\tthis._treeElementsById.set(element.id, element);\n\t\treturn element;\n\t}\n\n\tprivate getDepth(element: SettingsTreeElement): number {\n\t\tif (element.parent) {\n\t\t\treturn 1 + this.getDepth(element.parent);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate createSettingsTreeSettingElement(setting: ISetting, parent: SettingsTreeGroupElement): SettingsTreeSettingElement {\n\t\tconst index = this._treeElementsById.size;\n\t\tconst inspectResult = inspectSetting(setting.key, this._viewState.settingsTarget, this._configurationService);\n\t\tconst element = new SettingsTreeSettingElement(setting, parent, index, inspectResult);\n\t\tthis._treeElementsById.set(element.id, element);\n\n\t\tconst nameElements = this._treeElementsBySettingName.get(setting.key) || [];\n\t\tnameElements.push(element);\n\t\tthis._treeElementsBySettingName.set(setting.key, nameElements);\n\t\treturn element;\n\t}\n}\n\ninterface IInspectResult {\n\tisConfigured: boolean;\n\tinspected: any;\n\ttargetSelector: string;\n}\n\nfunction inspectSetting(key: string, target: SettingsTarget, configurationService: IConfigurationService): IInspectResult {\n\tconst inspectOverrides = URI.isUri(target) ? { resource: target } : undefined;\n\tconst inspected = configurationService.inspect(key, inspectOverrides);\n\tconst targetSelector = target === ConfigurationTarget.USER ? 'user' :\n\t\ttarget === ConfigurationTarget.WORKSPACE ? 'workspace' :\n\t\t\t'workspaceFolder';\n\tconst isConfigured = typeof inspected[targetSelector] !== 'undefined';\n\n\treturn { isConfigured, inspected, targetSelector };\n}\n\nfunction sanitizeId(id: string): string {\n\treturn id.replace(/[\\.\\/]/, '_');\n}\n\nexport function settingKeyToDisplayFormat(key: string, groupId = ''): { category: string, label: string } {\n\tconst lastDotIdx = key.lastIndexOf('.');\n\tlet category = '';\n\tif (lastDotIdx >= 0) {\n\t\tcategory = key.substr(0, lastDotIdx);\n\t\tkey = key.substr(lastDotIdx + 1);\n\t}\n\n\tgroupId = groupId.replace(/\\//g, '.');\n\tcategory = trimCategoryForGroup(category, groupId);\n\tcategory = wordifyKey(category);\n\n\tconst label = wordifyKey(key);\n\treturn { category, label };\n}\n\nfunction wordifyKey(key: string): string {\n\treturn key\n\t\t.replace(/\\.([a-z])/g, (match, p1) => ` › ${p1.toUpperCase()}`)\n\t\t.replace(/([a-z])([A-Z])/g, '$1 $2') // fooBar => foo Bar\n\t\t.replace(/^[a-z]/g, match => match.toUpperCase()) // foo => Foo\n\t\t.replace(/\\b\\w+\\b/g, match => {\n\t\t\treturn knownAcronyms.has(match.toLowerCase()) ?\n\t\t\t\tmatch.toUpperCase() :\n\t\t\t\tmatch;\n\t\t});\n}\n\nfunction trimCategoryForGroup(category: string, groupId: string): string {\n\tconst doTrim = (forward: boolean) => {\n\t\tconst parts = groupId.split('.');\n\t\twhile (parts.length) {\n\t\t\tconst reg = new RegExp(`^${parts.join('\\\\.')}(\\\\.|$)`, 'i');\n\t\t\tif (reg.test(category)) {\n\t\t\t\treturn category.replace(reg, '');\n\t\t\t}\n\n\t\t\tif (forward) {\n\t\t\t\tparts.pop();\n\t\t\t} else {\n\t\t\t\tparts.shift();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tlet trimmed = doTrim(true);\n\tif (trimmed === null) {\n\t\ttrimmed = doTrim(false);\n\t}\n\n\tif (trimmed === null) {\n\t\ttrimmed = category;\n\t}\n\n\treturn trimmed;\n}\n\nexport function isExcludeSetting(setting: ISetting): boolean {\n\treturn setting.key === 'files.exclude' ||\n\t\tsetting.key === 'search.exclude' ||\n\t\tsetting.key === 'files.watcherExclude';\n}\n\nfunction settingTypeEnumRenderable(_type: string | string[]) {\n\tconst enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];\n\tconst type = isArray(_type) ? _type : [_type];\n\treturn type.every(type => enumRenderableSettingTypes.indexOf(type) > -1);\n}\n\nexport const enum SearchResultIdx {\n\tLocal = 0,\n\tRemote = 1,\n\tNewExtensions = 2\n}\n\nexport class SearchResultModel extends SettingsTreeModel {\n\tprivate rawSearchResults: ISearchResult[];\n\tprivate cachedUniqueSearchResults: ISearchResult[] | undefined;\n\tprivate newExtensionSearchResults: ISearchResult;\n\n\treadonly id = 'searchResultModel';\n\n\tconstructor(\n\t\tviewState: ISettingsEditorViewState,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(viewState, configurationService);\n\t\tthis.update({ id: 'searchResultModel', label: '' });\n\t}\n\n\tgetUniqueResults(): ISearchResult[] {\n\t\tif (this.cachedUniqueSearchResults) {\n\t\t\treturn this.cachedUniqueSearchResults;\n\t\t}\n\n\t\tif (!this.rawSearchResults) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst localMatchKeys = new Set();\n\t\tconst localResult = this.rawSearchResults[SearchResultIdx.Local];\n\t\tif (localResult) {\n\t\t\tlocalResult.filterMatches.forEach(m => localMatchKeys.add(m.setting.key));\n\t\t}\n\n\t\tconst remoteResult = this.rawSearchResults[SearchResultIdx.Remote];\n\t\tif (remoteResult) {\n\t\t\tremoteResult.filterMatches = remoteResult.filterMatches.filter(m => !localMatchKeys.has(m.setting.key));\n\t\t}\n\n\t\tif (remoteResult) {\n\t\t\tthis.newExtensionSearchResults = this.rawSearchResults[SearchResultIdx.NewExtensions];\n\t\t}\n\n\t\tthis.cachedUniqueSearchResults = [localResult, remoteResult];\n\t\treturn this.cachedUniqueSearchResults;\n\t}\n\n\tgetRawResults(): ISearchResult[] {\n\t\treturn this.rawSearchResults;\n\t}\n\n\tsetResult(order: SearchResultIdx, result: ISearchResult | null): void {\n\t\tthis.cachedUniqueSearchResults = undefined;\n\t\tthis.rawSearchResults = this.rawSearchResults || [];\n\t\tif (!result) {\n\t\t\tdelete this.rawSearchResults[order];\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rawSearchResults[order] = result;\n\t\tthis.updateChildren();\n\t}\n\n\tupdateChildren(): void {\n\t\tthis.update({\n\t\t\tid: 'searchResultModel',\n\t\t\tlabel: 'searchResultModel',\n\t\t\tsettings: this.getFlatSettings()\n\t\t});\n\n\t\t// Save time, filter children in the search model instead of relying on the tree filter, which still requires heights to be calculated.\n\t\tthis.root.children = this.root.children\n\t\t\t.filter(child => child instanceof SettingsTreeSettingElement && child.matchesAllTags(this._viewState.tagFilters) && child.matchesScope(this._viewState.settingsTarget));\n\n\t\tif (this.newExtensionSearchResults && this.newExtensionSearchResults.filterMatches.length) {\n\t\t\tconst newExtElement = new SettingsTreeNewExtensionsElement();\n\t\t\tnewExtElement.index = this._treeElementsById.size;\n\t\t\tnewExtElement.parent = this._root;\n\t\t\tnewExtElement.id = 'newExtensions';\n\t\t\tthis._treeElementsById.set(newExtElement.id, newExtElement);\n\n\t\t\tconst resultExtensionIds = this.newExtensionSearchResults.filterMatches\n\t\t\t\t.map(result => (<IExtensionSetting>result.setting))\n\t\t\t\t.filter(setting => setting.extensionName && setting.extensionPublisher)\n\t\t\t\t.map(setting => `${setting.extensionPublisher}.${setting.extensionName}`);\n\t\t\tnewExtElement.extensionIds = arrays.distinct(resultExtensionIds);\n\t\t\tthis._root.children.push(newExtElement);\n\t\t}\n\t}\n\n\tprivate getFlatSettings(): ISetting[] {\n\t\tconst flatSettings: ISetting[] = [];\n\t\tarrays.coalesce(this.getUniqueResults())\n\t\t\t.forEach(r => {\n\t\t\t\tflatSettings.push(\n\t\t\t\t\t...r.filterMatches.map(m => m.setting));\n\t\t\t});\n\n\t\treturn flatSettings;\n\t}\n}\n\nexport interface IParsedQuery {\n\ttags: string[];\n\tquery: string;\n}\n\nconst tagRegex = /(^|\\s)@tag:(\"([^\"]*)\"|[^\"]\\S*)/g;\nexport function parseQuery(query: string): IParsedQuery {\n\tconst tags: string[] = [];\n\tquery = query.replace(tagRegex, (_, __, quotedTag, tag) => {\n\t\ttags.push(tag || quotedTag);\n\t\treturn '';\n\t});\n\n\tquery = query.replace(`@${MODIFIED_SETTING_TAG}`, () => {\n\t\ttags.push(MODIFIED_SETTING_TAG);\n\t\treturn '';\n\t});\n\n\tquery = query.trim();\n\n\treturn {\n\t\ttags,\n\t\tquery\n\t};\n}\n"]}]}