{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/actions/common/actions.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/actions/common/actions.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/actions\", \"vs/platform/instantiation/common/descriptors\", \"vs/platform/instantiation/common/instantiation\", \"vs/platform/keybinding/common/keybindingsRegistry\", \"vs/platform/contextkey/common/contextkey\", \"vs/platform/commands/common/commands\", \"vs/base/common/event\"], function (require, exports, actions_1, descriptors_1, instantiation_1, keybindingsRegistry_1, contextkey_1, commands_1, event_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function isIMenuItem(item) {\n        return item.command !== undefined;\n    }\n    exports.isIMenuItem = isIMenuItem;\n    function isISubmenuItem(item) {\n        return item.submenu !== undefined;\n    }\n    exports.isISubmenuItem = isISubmenuItem;\n    var MenuId;\n    (function (MenuId) {\n        MenuId[MenuId[\"CommandPalette\"] = 0] = \"CommandPalette\";\n        MenuId[MenuId[\"DebugBreakpointsContext\"] = 1] = \"DebugBreakpointsContext\";\n        MenuId[MenuId[\"DebugCallStackContext\"] = 2] = \"DebugCallStackContext\";\n        MenuId[MenuId[\"DebugConsoleContext\"] = 3] = \"DebugConsoleContext\";\n        MenuId[MenuId[\"DebugVariablesContext\"] = 4] = \"DebugVariablesContext\";\n        MenuId[MenuId[\"DebugWatchContext\"] = 5] = \"DebugWatchContext\";\n        MenuId[MenuId[\"DebugToolBar\"] = 6] = \"DebugToolBar\";\n        MenuId[MenuId[\"EditorContext\"] = 7] = \"EditorContext\";\n        MenuId[MenuId[\"EditorTitle\"] = 8] = \"EditorTitle\";\n        MenuId[MenuId[\"EditorTitleContext\"] = 9] = \"EditorTitleContext\";\n        MenuId[MenuId[\"EmptyEditorGroupContext\"] = 10] = \"EmptyEditorGroupContext\";\n        MenuId[MenuId[\"ExplorerContext\"] = 11] = \"ExplorerContext\";\n        MenuId[MenuId[\"MenubarAppearanceMenu\"] = 12] = \"MenubarAppearanceMenu\";\n        MenuId[MenuId[\"MenubarDebugMenu\"] = 13] = \"MenubarDebugMenu\";\n        MenuId[MenuId[\"MenubarEditMenu\"] = 14] = \"MenubarEditMenu\";\n        MenuId[MenuId[\"MenubarFileMenu\"] = 15] = \"MenubarFileMenu\";\n        MenuId[MenuId[\"MenubarGoMenu\"] = 16] = \"MenubarGoMenu\";\n        MenuId[MenuId[\"MenubarHelpMenu\"] = 17] = \"MenubarHelpMenu\";\n        MenuId[MenuId[\"MenubarLayoutMenu\"] = 18] = \"MenubarLayoutMenu\";\n        MenuId[MenuId[\"MenubarNewBreakpointMenu\"] = 19] = \"MenubarNewBreakpointMenu\";\n        MenuId[MenuId[\"MenubarPreferencesMenu\"] = 20] = \"MenubarPreferencesMenu\";\n        MenuId[MenuId[\"MenubarRecentMenu\"] = 21] = \"MenubarRecentMenu\";\n        MenuId[MenuId[\"MenubarSelectionMenu\"] = 22] = \"MenubarSelectionMenu\";\n        MenuId[MenuId[\"MenubarSwitchEditorMenu\"] = 23] = \"MenubarSwitchEditorMenu\";\n        MenuId[MenuId[\"MenubarSwitchGroupMenu\"] = 24] = \"MenubarSwitchGroupMenu\";\n        MenuId[MenuId[\"MenubarTerminalMenu\"] = 25] = \"MenubarTerminalMenu\";\n        MenuId[MenuId[\"MenubarViewMenu\"] = 26] = \"MenubarViewMenu\";\n        MenuId[MenuId[\"OpenEditorsContext\"] = 27] = \"OpenEditorsContext\";\n        MenuId[MenuId[\"ProblemsPanelContext\"] = 28] = \"ProblemsPanelContext\";\n        MenuId[MenuId[\"SCMChangeContext\"] = 29] = \"SCMChangeContext\";\n        MenuId[MenuId[\"SCMResourceContext\"] = 30] = \"SCMResourceContext\";\n        MenuId[MenuId[\"SCMResourceGroupContext\"] = 31] = \"SCMResourceGroupContext\";\n        MenuId[MenuId[\"SCMSourceControl\"] = 32] = \"SCMSourceControl\";\n        MenuId[MenuId[\"SCMTitle\"] = 33] = \"SCMTitle\";\n        MenuId[MenuId[\"SearchContext\"] = 34] = \"SearchContext\";\n        MenuId[MenuId[\"StatusBarWindowIndicatorMenu\"] = 35] = \"StatusBarWindowIndicatorMenu\";\n        MenuId[MenuId[\"TouchBarContext\"] = 36] = \"TouchBarContext\";\n        MenuId[MenuId[\"ViewItemContext\"] = 37] = \"ViewItemContext\";\n        MenuId[MenuId[\"ViewTitle\"] = 38] = \"ViewTitle\";\n    })(MenuId = exports.MenuId || (exports.MenuId = {}));\n    exports.IMenuService = instantiation_1.createDecorator('menuService');\n    exports.MenuRegistry = new class {\n        constructor() {\n            this._commands = Object.create(null);\n            this._menuItems = Object.create(null);\n            this._onDidChangeMenu = new event_1.Emitter();\n            this.onDidChangeMenu = this._onDidChangeMenu.event;\n        }\n        addCommand(command) {\n            this._commands[command.id] = command;\n            this._onDidChangeMenu.fire(MenuId.CommandPalette);\n            return {\n                dispose: () => {\n                    if (delete this._commands[command.id]) {\n                        this._onDidChangeMenu.fire(MenuId.CommandPalette);\n                    }\n                }\n            };\n        }\n        getCommand(id) {\n            return this._commands[id];\n        }\n        getCommands() {\n            const result = Object.create(null);\n            for (const key in this._commands) {\n                result[key] = this.getCommand(key);\n            }\n            return result;\n        }\n        appendMenuItem(id, item) {\n            let array = this._menuItems[id];\n            if (!array) {\n                this._menuItems[id] = array = [item];\n            }\n            else {\n                array.push(item);\n            }\n            this._onDidChangeMenu.fire(id);\n            return {\n                dispose: () => {\n                    const idx = array.indexOf(item);\n                    if (idx >= 0) {\n                        array.splice(idx, 1);\n                        this._onDidChangeMenu.fire(id);\n                    }\n                }\n            };\n        }\n        getMenuItems(id) {\n            const result = (this._menuItems[id] || []).slice(0);\n            if (id === MenuId.CommandPalette) {\n                // CommandPalette is special because it shows\n                // all commands by default\n                this._appendImplicitItems(result);\n            }\n            return result;\n        }\n        _appendImplicitItems(result) {\n            const set = new Set();\n            const temp = result.filter(item => { return isIMenuItem(item); });\n            for (const { command, alt } of temp) {\n                set.add(command.id);\n                if (alt) {\n                    set.add(alt.id);\n                }\n            }\n            for (let id in this._commands) {\n                if (!set.has(id)) {\n                    result.push({ command: this._commands[id] });\n                }\n            }\n        }\n    };\n    let ExecuteCommandAction = class ExecuteCommandAction extends actions_1.Action {\n        constructor(id, label, _commandService) {\n            super(id, label);\n            this._commandService = _commandService;\n        }\n        run(...args) {\n            return this._commandService.executeCommand(this.id, ...args);\n        }\n    };\n    ExecuteCommandAction = __decorate([\n        __param(2, commands_1.ICommandService)\n    ], ExecuteCommandAction);\n    exports.ExecuteCommandAction = ExecuteCommandAction;\n    class SubmenuItemAction extends actions_1.Action {\n        constructor(item) {\n            typeof item.title === 'string' ? super('', item.title, 'submenu') : super('', item.title.value, 'submenu');\n            this.item = item;\n        }\n    }\n    exports.SubmenuItemAction = SubmenuItemAction;\n    let MenuItemAction = class MenuItemAction extends ExecuteCommandAction {\n        constructor(item, alt, options, contextKeyService, commandService) {\n            typeof item.title === 'string' ? super(item.id, item.title, commandService) : super(item.id, item.title.value, commandService);\n            this._cssClass = undefined;\n            this._enabled = !item.precondition || contextKeyService.contextMatchesRules(item.precondition);\n            this._checked = Boolean(item.toggled && contextKeyService.contextMatchesRules(item.toggled));\n            this._options = options || {};\n            this.item = item;\n            this.alt = alt ? new MenuItemAction(alt, undefined, this._options, contextKeyService, commandService) : undefined;\n        }\n        run(...args) {\n            let runArgs = [];\n            if (this._options.arg) {\n                runArgs = [...runArgs, this._options.arg];\n            }\n            if (this._options.shouldForwardArgs) {\n                runArgs = [...runArgs, ...args];\n            }\n            return super.run(...runArgs);\n        }\n    };\n    MenuItemAction = __decorate([\n        __param(3, contextkey_1.IContextKeyService),\n        __param(4, commands_1.ICommandService)\n    ], MenuItemAction);\n    exports.MenuItemAction = MenuItemAction;\n    class SyncActionDescriptor {\n        constructor(ctor, id, label, keybindings, keybindingContext, keybindingWeight) {\n            this._id = id;\n            this._label = label;\n            this._keybindings = keybindings;\n            this._keybindingContext = keybindingContext;\n            this._keybindingWeight = keybindingWeight;\n            this._descriptor = descriptors_1.createSyncDescriptor(ctor, this._id, this._label);\n        }\n        get syncDescriptor() {\n            return this._descriptor;\n        }\n        get id() {\n            return this._id;\n        }\n        get label() {\n            return this._label;\n        }\n        get keybindings() {\n            return this._keybindings;\n        }\n        get keybindingContext() {\n            return this._keybindingContext;\n        }\n        get keybindingWeight() {\n            return this._keybindingWeight;\n        }\n    }\n    exports.SyncActionDescriptor = SyncActionDescriptor;\n    function registerAction(desc) {\n        const { id, handler, title, category, menu, keybinding } = desc;\n        // 1) register as command\n        commands_1.CommandsRegistry.registerCommand(id, handler);\n        // 2) menus\n        if (menu && title) {\n            let command = { id, title, category };\n            let { menuId, when, group } = menu;\n            exports.MenuRegistry.appendMenuItem(menuId, {\n                command,\n                when,\n                group\n            });\n        }\n        // 3) keybindings\n        if (keybinding) {\n            let { when, weight, keys } = keybinding;\n            keybindingsRegistry_1.KeybindingsRegistry.registerKeybindingRule({\n                id,\n                when,\n                weight: weight || 0,\n                primary: keys.primary,\n                secondary: keys.secondary,\n                linux: keys.linux,\n                mac: keys.mac,\n                win: keys.win\n            });\n        }\n    }\n    exports.registerAction = registerAction;\n});\n",null]}