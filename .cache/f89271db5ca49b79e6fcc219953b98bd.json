{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/pointerHandler.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/pointerHandler.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom = require(\"vs/base/browser/dom\");\nvar touch_1 = require(\"vs/base/browser/touch\");\nvar mouseHandler_1 = require(\"vs/editor/browser/controller/mouseHandler\");\nvar editorDom_1 = require(\"vs/editor/browser/editorDom\");\nfunction gestureChangeEventMerger(lastEvent, currentEvent) {\n    var r = {\n        translationY: currentEvent.translationY,\n        translationX: currentEvent.translationX\n    };\n    if (lastEvent) {\n        r.translationY += lastEvent.translationY;\n        r.translationX += lastEvent.translationX;\n    }\n    return r;\n}\n/**\n * Basically IE10 and IE11\n */\nvar MsPointerHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(MsPointerHandler, _super);\n    function MsPointerHandler(context, viewController, viewHelper) {\n        var _this = _super.call(this, context, viewController, viewHelper) || this;\n        _this.viewHelper.linesContentDomNode.style.msTouchAction = 'none';\n        _this.viewHelper.linesContentDomNode.style.msContentZooming = 'none';\n        // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n        // This handler should be added when the dom node is in the dom tree\n        _this._installGestureHandlerTimeout = window.setTimeout(function () {\n            _this._installGestureHandlerTimeout = -1;\n            if (window.MSGesture) {\n                var touchGesture_1 = new MSGesture();\n                var penGesture_1 = new MSGesture();\n                touchGesture_1.target = _this.viewHelper.linesContentDomNode;\n                penGesture_1.target = _this.viewHelper.linesContentDomNode;\n                _this.viewHelper.linesContentDomNode.addEventListener('MSPointerDown', function (e) {\n                    // Circumvent IE11 breaking change in e.pointerType & TypeScript's stale definitions\n                    var pointerType = e.pointerType;\n                    if (pointerType === (e.MSPOINTER_TYPE_MOUSE || 'mouse')) {\n                        _this._lastPointerType = 'mouse';\n                        return;\n                    }\n                    else if (pointerType === (e.MSPOINTER_TYPE_TOUCH || 'touch')) {\n                        _this._lastPointerType = 'touch';\n                        touchGesture_1.addPointer(e.pointerId);\n                    }\n                    else {\n                        _this._lastPointerType = 'pen';\n                        penGesture_1.addPointer(e.pointerId);\n                    }\n                });\n                _this._register(dom.addDisposableThrottledListener(_this.viewHelper.linesContentDomNode, 'MSGestureChange', function (e) { return _this._onGestureChange(e); }, gestureChangeEventMerger));\n                _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, 'MSGestureTap', function (e) { return _this._onCaptureGestureTap(e); }, true));\n            }\n        }, 100);\n        _this._lastPointerType = 'mouse';\n        return _this;\n    }\n    MsPointerHandler.prototype._onMouseDown = function (e) {\n        if (this._lastPointerType === 'mouse') {\n            _super.prototype._onMouseDown.call(this, e);\n        }\n    };\n    MsPointerHandler.prototype._onCaptureGestureTap = function (rawEvent) {\n        var _this = this;\n        var e = new editorDom_1.EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\n        var t = this._createMouseTarget(e, false);\n        if (t.position) {\n            this.viewController.moveTo(t.position);\n        }\n        // IE does not want to focus when coming in from the browser's address bar\n        if (e.browserEvent.fromElement) {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        }\n        else {\n            // TODO@Alex -> cancel this is focus is lost\n            setTimeout(function () {\n                _this.viewHelper.focusTextArea();\n            });\n        }\n    };\n    MsPointerHandler.prototype._onGestureChange = function (e) {\n        this._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    };\n    MsPointerHandler.prototype.dispose = function () {\n        window.clearTimeout(this._installGestureHandlerTimeout);\n        _super.prototype.dispose.call(this);\n    };\n    return MsPointerHandler;\n}(mouseHandler_1.MouseHandler));\n/**\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\n */\nvar StandardPointerHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(StandardPointerHandler, _super);\n    function StandardPointerHandler(context, viewController, viewHelper) {\n        var _this = _super.call(this, context, viewController, viewHelper) || this;\n        _this.viewHelper.linesContentDomNode.style.touchAction = 'none';\n        // TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n        // This handler should be added when the dom node is in the dom tree\n        _this._installGestureHandlerTimeout = window.setTimeout(function () {\n            _this._installGestureHandlerTimeout = -1;\n            // TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\n            if (window.MSGesture) {\n                var touchGesture_2 = new MSGesture();\n                var penGesture_2 = new MSGesture();\n                touchGesture_2.target = _this.viewHelper.linesContentDomNode;\n                penGesture_2.target = _this.viewHelper.linesContentDomNode;\n                _this.viewHelper.linesContentDomNode.addEventListener('pointerdown', function (e) {\n                    var pointerType = e.pointerType;\n                    if (pointerType === 'mouse') {\n                        _this._lastPointerType = 'mouse';\n                        return;\n                    }\n                    else if (pointerType === 'touch') {\n                        _this._lastPointerType = 'touch';\n                        touchGesture_2.addPointer(e.pointerId);\n                    }\n                    else {\n                        _this._lastPointerType = 'pen';\n                        penGesture_2.addPointer(e.pointerId);\n                    }\n                });\n                _this._register(dom.addDisposableThrottledListener(_this.viewHelper.linesContentDomNode, 'MSGestureChange', function (e) { return _this._onGestureChange(e); }, gestureChangeEventMerger));\n                _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, 'MSGestureTap', function (e) { return _this._onCaptureGestureTap(e); }, true));\n            }\n        }, 100);\n        _this._lastPointerType = 'mouse';\n        return _this;\n    }\n    StandardPointerHandler.prototype._onMouseDown = function (e) {\n        if (this._lastPointerType === 'mouse') {\n            _super.prototype._onMouseDown.call(this, e);\n        }\n    };\n    StandardPointerHandler.prototype._onCaptureGestureTap = function (rawEvent) {\n        var _this = this;\n        var e = new editorDom_1.EditorMouseEvent(rawEvent, this.viewHelper.viewDomNode);\n        var t = this._createMouseTarget(e, false);\n        if (t.position) {\n            this.viewController.moveTo(t.position);\n        }\n        // IE does not want to focus when coming in from the browser's address bar\n        if (e.browserEvent.fromElement) {\n            e.preventDefault();\n            this.viewHelper.focusTextArea();\n        }\n        else {\n            // TODO@Alex -> cancel this is focus is lost\n            setTimeout(function () {\n                _this.viewHelper.focusTextArea();\n            });\n        }\n    };\n    StandardPointerHandler.prototype._onGestureChange = function (e) {\n        this._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    };\n    StandardPointerHandler.prototype.dispose = function () {\n        window.clearTimeout(this._installGestureHandlerTimeout);\n        _super.prototype.dispose.call(this);\n    };\n    return StandardPointerHandler;\n}(mouseHandler_1.MouseHandler));\nvar TouchHandler = /** @class */ (function (_super) {\n    tslib_1.__extends(TouchHandler, _super);\n    function TouchHandler(context, viewController, viewHelper) {\n        var _this = _super.call(this, context, viewController, viewHelper) || this;\n        touch_1.Gesture.addTarget(_this.viewHelper.linesContentDomNode);\n        _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, touch_1.EventType.Tap, function (e) { return _this.onTap(e); }));\n        _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, touch_1.EventType.Change, function (e) { return _this.onChange(e); }));\n        _this._register(dom.addDisposableListener(_this.viewHelper.linesContentDomNode, touch_1.EventType.Contextmenu, function (e) { return _this._onContextMenu(new editorDom_1.EditorMouseEvent(e, _this.viewHelper.viewDomNode), false); }));\n        return _this;\n    }\n    TouchHandler.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n    };\n    TouchHandler.prototype.onTap = function (event) {\n        event.preventDefault();\n        this.viewHelper.focusTextArea();\n        var target = this._createMouseTarget(new editorDom_1.EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n        if (target.position) {\n            this.viewController.moveTo(target.position);\n        }\n    };\n    TouchHandler.prototype.onChange = function (e) {\n        this._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n    };\n    return TouchHandler;\n}(mouseHandler_1.MouseHandler));\nvar PointerHandler = /** @class */ (function () {\n    function PointerHandler(context, viewController, viewHelper) {\n        if (window.navigator.msPointerEnabled) {\n            this.handler = new MsPointerHandler(context, viewController, viewHelper);\n        }\n        else if (window.TouchEvent) {\n            this.handler = new TouchHandler(context, viewController, viewHelper);\n        }\n        else if (window.navigator.pointerEnabled || window.PointerEvent) {\n            this.handler = new StandardPointerHandler(context, viewController, viewHelper);\n        }\n        else {\n            this.handler = new mouseHandler_1.MouseHandler(context, viewController, viewHelper);\n        }\n    }\n    PointerHandler.prototype.getTargetAtClientPoint = function (clientX, clientY) {\n        return this.handler.getTargetAtClientPoint(clientX, clientY);\n    };\n    PointerHandler.prototype.dispose = function () {\n        this.handler.dispose();\n    };\n    return PointerHandler;\n}());\nexports.PointerHandler = PointerHandler;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/pointerHandler.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/controller/pointerHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { EventType, Gesture, GestureEvent } from 'vs/base/browser/touch';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IPointerHandlerHelper, MouseHandler } from 'vs/editor/browser/controller/mouseHandler';\nimport { IMouseTarget } from 'vs/editor/browser/editorBrowser';\nimport { EditorMouseEvent } from 'vs/editor/browser/editorDom';\nimport { ViewController } from 'vs/editor/browser/view/viewController';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\n\ninterface IThrottledGestureEvent {\n\ttranslationX: number;\n\ttranslationY: number;\n}\n\nfunction gestureChangeEventMerger(lastEvent: IThrottledGestureEvent, currentEvent: MSGestureEvent): IThrottledGestureEvent {\n\tconst r = {\n\t\ttranslationY: currentEvent.translationY,\n\t\ttranslationX: currentEvent.translationX\n\t};\n\tif (lastEvent) {\n\t\tr.translationY += lastEvent.translationY;\n\t\tr.translationX += lastEvent.translationX;\n\t}\n\treturn r;\n}\n\n/**\n * Basically IE10 and IE11\n */\nclass MsPointerHandler extends MouseHandler implements IDisposable {\n\n\tprivate _lastPointerType: string;\n\tprivate _installGestureHandlerTimeout: number;\n\n\tconstructor(context: ViewContext, viewController: ViewController, viewHelper: IPointerHandlerHelper) {\n\t\tsuper(context, viewController, viewHelper);\n\n\t\tthis.viewHelper.linesContentDomNode.style.msTouchAction = 'none';\n\t\tthis.viewHelper.linesContentDomNode.style.msContentZooming = 'none';\n\n\t\t// TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n\t\t// This handler should be added when the dom node is in the dom tree\n\t\tthis._installGestureHandlerTimeout = window.setTimeout(() => {\n\t\t\tthis._installGestureHandlerTimeout = -1;\n\t\t\tif ((<any>window).MSGesture) {\n\t\t\t\tconst touchGesture = new MSGesture();\n\t\t\t\tconst penGesture = new MSGesture();\n\t\t\t\ttouchGesture.target = this.viewHelper.linesContentDomNode;\n\t\t\t\tpenGesture.target = this.viewHelper.linesContentDomNode;\n\t\t\t\tthis.viewHelper.linesContentDomNode.addEventListener('MSPointerDown', (e: MSPointerEvent) => {\n\t\t\t\t\t// Circumvent IE11 breaking change in e.pointerType & TypeScript's stale definitions\n\t\t\t\t\tconst pointerType = <any>e.pointerType;\n\t\t\t\t\tif (pointerType === ((<any>e).MSPOINTER_TYPE_MOUSE || 'mouse')) {\n\t\t\t\t\t\tthis._lastPointerType = 'mouse';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (pointerType === ((<any>e).MSPOINTER_TYPE_TOUCH || 'touch')) {\n\t\t\t\t\t\tthis._lastPointerType = 'touch';\n\t\t\t\t\t\ttouchGesture.addPointer(e.pointerId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._lastPointerType = 'pen';\n\t\t\t\t\t\tpenGesture.addPointer(e.pointerId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._register(dom.addDisposableThrottledListener<IThrottledGestureEvent>(this.viewHelper.linesContentDomNode, 'MSGestureChange', (e) => this._onGestureChange(e), gestureChangeEventMerger));\n\t\t\t\tthis._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'MSGestureTap', (e) => this._onCaptureGestureTap(e), true));\n\t\t\t}\n\t\t}, 100);\n\t\tthis._lastPointerType = 'mouse';\n\t}\n\n\tpublic _onMouseDown(e: EditorMouseEvent): void {\n\t\tif (this._lastPointerType === 'mouse') {\n\t\t\tsuper._onMouseDown(e);\n\t\t}\n\t}\n\n\tprivate _onCaptureGestureTap(rawEvent: MSGestureEvent): void {\n\t\tconst e = new EditorMouseEvent(<MouseEvent><any>rawEvent, this.viewHelper.viewDomNode);\n\t\tconst t = this._createMouseTarget(e, false);\n\t\tif (t.position) {\n\t\t\tthis.viewController.moveTo(t.position);\n\t\t}\n\t\t// IE does not want to focus when coming in from the browser's address bar\n\t\tif ((<any>e.browserEvent).fromElement) {\n\t\t\te.preventDefault();\n\t\t\tthis.viewHelper.focusTextArea();\n\t\t} else {\n\t\t\t// TODO@Alex -> cancel this is focus is lost\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.viewHelper.focusTextArea();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onGestureChange(e: IThrottledGestureEvent): void {\n\t\tthis._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n\t}\n\n\tpublic dispose(): void {\n\t\twindow.clearTimeout(this._installGestureHandlerTimeout);\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * Basically Edge but should be modified to handle any pointerEnabled, even without support of MSGesture\n */\nclass StandardPointerHandler extends MouseHandler implements IDisposable {\n\n\tprivate _lastPointerType: string;\n\tprivate _installGestureHandlerTimeout: number;\n\n\tconstructor(context: ViewContext, viewController: ViewController, viewHelper: IPointerHandlerHelper) {\n\t\tsuper(context, viewController, viewHelper);\n\n\t\tthis.viewHelper.linesContentDomNode.style.touchAction = 'none';\n\n\t\t// TODO@Alex -> this expects that the view is added in 100 ms, might not be the case\n\t\t// This handler should be added when the dom node is in the dom tree\n\t\tthis._installGestureHandlerTimeout = window.setTimeout(() => {\n\t\t\tthis._installGestureHandlerTimeout = -1;\n\n\t\t\t// TODO@Alex: replace the usage of MSGesture here with something that works across all browsers\n\t\t\tif ((<any>window).MSGesture) {\n\t\t\t\tconst touchGesture = new MSGesture();\n\t\t\t\tconst penGesture = new MSGesture();\n\t\t\t\ttouchGesture.target = this.viewHelper.linesContentDomNode;\n\t\t\t\tpenGesture.target = this.viewHelper.linesContentDomNode;\n\t\t\t\tthis.viewHelper.linesContentDomNode.addEventListener('pointerdown', (e: MSPointerEvent) => {\n\t\t\t\t\tconst pointerType = <any>e.pointerType;\n\t\t\t\t\tif (pointerType === 'mouse') {\n\t\t\t\t\t\tthis._lastPointerType = 'mouse';\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else if (pointerType === 'touch') {\n\t\t\t\t\t\tthis._lastPointerType = 'touch';\n\t\t\t\t\t\ttouchGesture.addPointer(e.pointerId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._lastPointerType = 'pen';\n\t\t\t\t\t\tpenGesture.addPointer(e.pointerId);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._register(dom.addDisposableThrottledListener<IThrottledGestureEvent>(this.viewHelper.linesContentDomNode, 'MSGestureChange', (e) => this._onGestureChange(e), gestureChangeEventMerger));\n\t\t\t\tthis._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, 'MSGestureTap', (e) => this._onCaptureGestureTap(e), true));\n\t\t\t}\n\t\t}, 100);\n\t\tthis._lastPointerType = 'mouse';\n\t}\n\n\tpublic _onMouseDown(e: EditorMouseEvent): void {\n\t\tif (this._lastPointerType === 'mouse') {\n\t\t\tsuper._onMouseDown(e);\n\t\t}\n\t}\n\n\tprivate _onCaptureGestureTap(rawEvent: MSGestureEvent): void {\n\t\tconst e = new EditorMouseEvent(<MouseEvent><any>rawEvent, this.viewHelper.viewDomNode);\n\t\tconst t = this._createMouseTarget(e, false);\n\t\tif (t.position) {\n\t\t\tthis.viewController.moveTo(t.position);\n\t\t}\n\t\t// IE does not want to focus when coming in from the browser's address bar\n\t\tif ((<any>e.browserEvent).fromElement) {\n\t\t\te.preventDefault();\n\t\t\tthis.viewHelper.focusTextArea();\n\t\t} else {\n\t\t\t// TODO@Alex -> cancel this is focus is lost\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.viewHelper.focusTextArea();\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _onGestureChange(e: IThrottledGestureEvent): void {\n\t\tthis._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n\t}\n\n\tpublic dispose(): void {\n\t\twindow.clearTimeout(this._installGestureHandlerTimeout);\n\t\tsuper.dispose();\n\t}\n}\n\nclass TouchHandler extends MouseHandler {\n\n\tconstructor(context: ViewContext, viewController: ViewController, viewHelper: IPointerHandlerHelper) {\n\t\tsuper(context, viewController, viewHelper);\n\n\t\tGesture.addTarget(this.viewHelper.linesContentDomNode);\n\n\t\tthis._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Tap, (e) => this.onTap(e)));\n\t\tthis._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Change, (e) => this.onChange(e)));\n\t\tthis._register(dom.addDisposableListener(this.viewHelper.linesContentDomNode, EventType.Contextmenu, (e: MouseEvent) => this._onContextMenu(new EditorMouseEvent(e, this.viewHelper.viewDomNode), false)));\n\n\t}\n\n\tpublic dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprivate onTap(event: GestureEvent): void {\n\t\tevent.preventDefault();\n\n\t\tthis.viewHelper.focusTextArea();\n\n\t\tconst target = this._createMouseTarget(new EditorMouseEvent(event, this.viewHelper.viewDomNode), false);\n\n\t\tif (target.position) {\n\t\t\tthis.viewController.moveTo(target.position);\n\t\t}\n\t}\n\n\tprivate onChange(e: GestureEvent): void {\n\t\tthis._context.viewLayout.deltaScrollNow(-e.translationX, -e.translationY);\n\t}\n}\n\nexport class PointerHandler implements IDisposable {\n\tprivate readonly handler: MouseHandler;\n\n\tconstructor(context: ViewContext, viewController: ViewController, viewHelper: IPointerHandlerHelper) {\n\t\tif (window.navigator.msPointerEnabled) {\n\t\t\tthis.handler = new MsPointerHandler(context, viewController, viewHelper);\n\t\t} else if ((<any>window).TouchEvent) {\n\t\t\tthis.handler = new TouchHandler(context, viewController, viewHelper);\n\t\t} else if (window.navigator.pointerEnabled || (<any>window).PointerEvent) {\n\t\t\tthis.handler = new StandardPointerHandler(context, viewController, viewHelper);\n\t\t} else {\n\t\t\tthis.handler = new MouseHandler(context, viewController, viewHelper);\n\t\t}\n\t}\n\n\tpublic getTargetAtClientPoint(clientX: number, clientY: number): IMouseTarget | null {\n\t\treturn this.handler.getTargetAtClientPoint(clientX, clientY);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.handler.dispose();\n\t}\n}\n"]}]}