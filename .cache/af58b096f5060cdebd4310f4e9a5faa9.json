{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTelemetry.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTelemetry.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar MainThreadTelemetry = /** @class */ (function () {\n    function MainThreadTelemetry(extHostContext, _telemetryService) {\n        this._telemetryService = _telemetryService;\n        //\n    }\n    MainThreadTelemetry_1 = MainThreadTelemetry;\n    MainThreadTelemetry.prototype.dispose = function () {\n        //\n    };\n    MainThreadTelemetry.prototype.$publicLog = function (eventName, data) {\n        if (data === void 0) { data = Object.create(null); }\n        // __GDPR__COMMON__ \"pluginHostTelemetry\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n        data[MainThreadTelemetry_1._name] = true;\n        this._telemetryService.publicLog(eventName, data);\n    };\n    var MainThreadTelemetry_1;\n    MainThreadTelemetry._name = 'pluginHostTelemetry';\n    MainThreadTelemetry = MainThreadTelemetry_1 = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadTelemetry),\n        tslib_1.__param(1, telemetry_1.ITelemetryService)\n    ], MainThreadTelemetry);\n    return MainThreadTelemetry;\n}());\nexports.MainThreadTelemetry = MainThreadTelemetry;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTelemetry.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadTelemetry.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oEAA2E;AAC3E,+DAAoG;AACpG,6EAAgF;AAGhF;IAIC,6BACC,cAA+B,EACK,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;QAExE,EAAE;IACH,CAAC;4BATW,mBAAmB;IAW/B,qCAAO,GAAP;QACC,EAAE;IACH,CAAC;IAED,wCAAU,GAAV,UAAW,SAAiB,EAAE,IAA+B;QAA/B,qBAAA,EAAA,OAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5D,sIAAsI;QACtI,IAAI,CAAC,qBAAmB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QACvC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;;IAjBuB,yBAAK,GAAG,qBAAqB,CAAC;IAF1C,mBAAmB;QAD/B,uCAAoB,CAAC,8BAAW,CAAC,mBAAmB,CAAC;QAOnD,mBAAA,6BAAiB,CAAA;OANP,mBAAmB,CAoB/B;IAAD,0BAAC;CAAA,AApBD,IAoBC;AApBY,kDAAmB","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { MainThreadTelemetryShape, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadTelemetry)\nexport class MainThreadTelemetry implements MainThreadTelemetryShape {\n\n\tprivate static readonly _name = 'pluginHostTelemetry';\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\t//\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$publicLog(eventName: string, data: any = Object.create(null)): void {\n\t\t// __GDPR__COMMON__ \"pluginHostTelemetry\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tdata[MainThreadTelemetry._name] = true;\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n}\n"]}]}