{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/common/editor/untitledEditorInput.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/mime\", \"vs/base/common/decorators\", \"vs/editor/common/modes/modesRegistry\", \"vs/base/common/path\", \"vs/base/common/resources\", \"vs/workbench/common/editor\", \"vs/workbench/common/editor/untitledEditorModel\", \"vs/platform/instantiation/common/instantiation\", \"vs/base/common/event\", \"vs/workbench/services/textfile/common/textfiles\", \"vs/platform/label/common/label\"], function (require, exports, mime_1, decorators_1, modesRegistry_1, path_1, resources_1, editor_1, untitledEditorModel_1, instantiation_1, event_1, textfiles_1, label_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * An editor input to be used for untitled text buffers.\n     */\n    let UntitledEditorInput = class UntitledEditorInput extends editor_1.EditorInput {\n        constructor(resource, _hasAssociatedFilePath, modeId, initialValue, preferredEncoding, instantiationService, textFileService, labelService) {\n            super();\n            this.resource = resource;\n            this._hasAssociatedFilePath = _hasAssociatedFilePath;\n            this.modeId = modeId;\n            this.initialValue = initialValue;\n            this.preferredEncoding = preferredEncoding;\n            this.instantiationService = instantiationService;\n            this.textFileService = textFileService;\n            this.labelService = labelService;\n            this._onDidModelChangeContent = this._register(new event_1.Emitter());\n            this._onDidModelChangeEncoding = this._register(new event_1.Emitter());\n        }\n        get onDidModelChangeContent() { return this._onDidModelChangeContent.event; }\n        get onDidModelChangeEncoding() { return this._onDidModelChangeEncoding.event; }\n        get hasAssociatedFilePath() {\n            return this._hasAssociatedFilePath;\n        }\n        getTypeId() {\n            return UntitledEditorInput.ID;\n        }\n        getResource() {\n            return this.resource;\n        }\n        getModeId() {\n            if (this.cachedModel) {\n                return this.cachedModel.getModeId();\n            }\n            return this.modeId;\n        }\n        getName() {\n            return this.hasAssociatedFilePath ? resources_1.basenameOrAuthority(this.resource) : this.resource.path;\n        }\n        get shortDescription() {\n            return path_1.basename(this.labelService.getUriLabel(resources_1.dirname(this.resource)));\n        }\n        get mediumDescription() {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource), { relative: true });\n        }\n        get longDescription() {\n            return this.labelService.getUriLabel(resources_1.dirname(this.resource));\n        }\n        getDescription(verbosity = editor_1.Verbosity.MEDIUM) {\n            if (!this.hasAssociatedFilePath) {\n                return null;\n            }\n            switch (verbosity) {\n                case editor_1.Verbosity.SHORT:\n                    return this.shortDescription;\n                case editor_1.Verbosity.LONG:\n                    return this.longDescription;\n                case editor_1.Verbosity.MEDIUM:\n                default:\n                    return this.mediumDescription;\n            }\n        }\n        get shortTitle() {\n            return this.getName();\n        }\n        get mediumTitle() {\n            return this.labelService.getUriLabel(this.resource, { relative: true });\n        }\n        get longTitle() {\n            return this.labelService.getUriLabel(this.resource);\n        }\n        getTitle(verbosity) {\n            if (!this.hasAssociatedFilePath) {\n                return this.getName();\n            }\n            switch (verbosity) {\n                case editor_1.Verbosity.SHORT:\n                    return this.shortTitle;\n                case editor_1.Verbosity.MEDIUM:\n                    return this.mediumTitle;\n                case editor_1.Verbosity.LONG:\n                    return this.longTitle;\n            }\n            return null;\n        }\n        isDirty() {\n            if (this.cachedModel) {\n                return this.cachedModel.isDirty();\n            }\n            // A disposed input is never dirty, even if it was restored from backup\n            if (this.isDisposed()) {\n                return false;\n            }\n            // untitled files with an associated path or associated resource\n            return this.hasAssociatedFilePath;\n        }\n        confirmSave() {\n            return this.textFileService.confirmSave([this.resource]);\n        }\n        save() {\n            return this.textFileService.save(this.resource);\n        }\n        revert() {\n            if (this.cachedModel) {\n                this.cachedModel.revert();\n            }\n            this.dispose(); // a reverted untitled editor is no longer valid, so we dispose it\n            return Promise.resolve(true);\n        }\n        suggestFileName() {\n            if (!this.hasAssociatedFilePath) {\n                if (this.cachedModel) {\n                    const modeId = this.cachedModel.getModeId();\n                    if (modeId !== modesRegistry_1.PLAINTEXT_MODE_ID) { // do not suggest when the mode ID is simple plain text\n                        return mime_1.suggestFilename(modeId, this.getName());\n                    }\n                }\n            }\n            return this.getName();\n        }\n        getEncoding() {\n            if (this.cachedModel) {\n                return this.cachedModel.getEncoding();\n            }\n            return this.preferredEncoding;\n        }\n        setEncoding(encoding, mode /* ignored, we only have Encode */) {\n            this.preferredEncoding = encoding;\n            if (this.cachedModel) {\n                this.cachedModel.setEncoding(encoding);\n            }\n        }\n        resolve() {\n            // Join a model resolve if we have had one before\n            if (this.modelResolve) {\n                return this.modelResolve;\n            }\n            // Otherwise Create Model and load\n            this.cachedModel = this.createModel();\n            this.modelResolve = this.cachedModel.load();\n            return this.modelResolve;\n        }\n        createModel() {\n            const model = this._register(this.instantiationService.createInstance(untitledEditorModel_1.UntitledEditorModel, this.modeId, this.resource, this.hasAssociatedFilePath, this.initialValue, this.preferredEncoding));\n            // re-emit some events from the model\n            this._register(model.onDidChangeContent(() => this._onDidModelChangeContent.fire()));\n            this._register(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n            this._register(model.onDidChangeEncoding(() => this._onDidModelChangeEncoding.fire()));\n            return model;\n        }\n        matches(otherInput) {\n            if (super.matches(otherInput) === true) {\n                return true;\n            }\n            if (otherInput instanceof UntitledEditorInput) {\n                const otherUntitledEditorInput = otherInput;\n                // Otherwise compare by properties\n                return otherUntitledEditorInput.resource.toString() === this.resource.toString();\n            }\n            return false;\n        }\n        dispose() {\n            this.modelResolve = undefined;\n            super.dispose();\n        }\n    };\n    UntitledEditorInput.ID = 'workbench.editors.untitledEditorInput';\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"shortDescription\", null);\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"mediumDescription\", null);\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"longDescription\", null);\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"shortTitle\", null);\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"mediumTitle\", null);\n    __decorate([\n        decorators_1.memoize\n    ], UntitledEditorInput.prototype, \"longTitle\", null);\n    UntitledEditorInput = __decorate([\n        __param(5, instantiation_1.IInstantiationService),\n        __param(6, textfiles_1.ITextFileService),\n        __param(7, label_1.ILabelService)\n    ], UntitledEditorInput);\n    exports.UntitledEditorInput = UntitledEditorInput;\n});\n",null]}