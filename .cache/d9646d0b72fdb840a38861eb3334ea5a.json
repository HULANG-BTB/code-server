{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCommon.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCommon.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar strings = require(\"vs/base/common/strings\");\nvar position_1 = require(\"vs/editor/common/core/position\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar selection_1 = require(\"vs/editor/common/core/selection\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar languageConfigurationRegistry_1 = require(\"vs/editor/common/modes/languageConfigurationRegistry\");\nvar RevealTarget;\n(function (RevealTarget) {\n    RevealTarget[RevealTarget[\"Primary\"] = 0] = \"Primary\";\n    RevealTarget[RevealTarget[\"TopMost\"] = 1] = \"TopMost\";\n    RevealTarget[RevealTarget[\"BottomMost\"] = 2] = \"BottomMost\";\n})(RevealTarget = exports.RevealTarget || (exports.RevealTarget = {}));\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nvar EditOperationType;\n(function (EditOperationType) {\n    EditOperationType[EditOperationType[\"Other\"] = 0] = \"Other\";\n    EditOperationType[EditOperationType[\"Typing\"] = 1] = \"Typing\";\n    EditOperationType[EditOperationType[\"DeletingLeft\"] = 2] = \"DeletingLeft\";\n    EditOperationType[EditOperationType[\"DeletingRight\"] = 3] = \"DeletingRight\";\n})(EditOperationType = exports.EditOperationType || (exports.EditOperationType = {}));\nvar autoCloseAlways = function () { return true; };\nvar autoCloseNever = function () { return false; };\nvar autoCloseBeforeWhitespace = function (chr) { return (chr === ' ' || chr === '\\t'); };\nvar CursorConfiguration = /** @class */ (function () {\n    function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\n        this._languageIdentifier = languageIdentifier;\n        var c = configuration.editor;\n        this.readOnly = c.readOnly;\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.pageSize = Math.max(1, Math.floor(c.layoutInfo.height / c.fontInfo.lineHeight) - 2);\n        this.lineHeight = c.lineHeight;\n        this.useTabStops = c.useTabStops;\n        this.wordSeparators = c.wordSeparators;\n        this.emptySelectionClipboard = c.emptySelectionClipboard;\n        this.copyWithSyntaxHighlighting = c.copyWithSyntaxHighlighting;\n        this.multiCursorMergeOverlapping = c.multiCursorMergeOverlapping;\n        this.autoClosingBrackets = c.autoClosingBrackets;\n        this.autoClosingQuotes = c.autoClosingQuotes;\n        this.autoSurround = c.autoSurround;\n        this.autoIndent = c.autoIndent;\n        this.autoClosingPairsOpen = {};\n        this.autoClosingPairsClose = {};\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n        };\n        var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\n        if (autoClosingPairs) {\n            for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\n                var pair = autoClosingPairs_1[_i];\n                this.autoClosingPairsOpen[pair.open] = pair.close;\n                this.autoClosingPairsClose[pair.close] = pair.open;\n            }\n        }\n        var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n        if (surroundingPairs) {\n            for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\n                var pair = surroundingPairs_1[_a];\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n    }\n    CursorConfiguration.shouldRecreate = function (e) {\n        return (e.layoutInfo\n            || e.wordSeparators\n            || e.emptySelectionClipboard\n            || e.multiCursorMergeOverlapping\n            || e.autoClosingBrackets\n            || e.autoClosingQuotes\n            || e.autoSurround\n            || e.useTabStops\n            || e.lineHeight\n            || e.readOnly);\n    };\n    Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\n        get: function () {\n            if (!this._electricChars) {\n                this._electricChars = {};\n                var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n                if (electricChars) {\n                    for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\n                        var char = electricChars_1[_i];\n                        this._electricChars[char] = true;\n                    }\n                }\n            }\n            return this._electricChars;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CursorConfiguration.prototype.normalizeIndentation = function (str) {\n        return textModel_1.TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    };\n    CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\n        try {\n            return languageConfigurationRegistry_1.LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n        }\n        catch (e) {\n            errors_1.onUnexpectedError(e);\n            return null;\n        }\n    };\n    CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\n        try {\n            return languageConfigurationRegistry_1.LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n        }\n        catch (e) {\n            errors_1.onUnexpectedError(e);\n            return null;\n        }\n    };\n    CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    };\n    CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\n        try {\n            var autoCloseBeforeSet_1 = languageConfigurationRegistry_1.LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n            return function (c) { return autoCloseBeforeSet_1.indexOf(c) !== -1; };\n        }\n        catch (e) {\n            errors_1.onUnexpectedError(e);\n            return autoCloseNever;\n        }\n    };\n    CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\n        try {\n            return languageConfigurationRegistry_1.LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n        }\n        catch (e) {\n            errors_1.onUnexpectedError(e);\n            return null;\n        }\n    };\n    return CursorConfiguration;\n}());\nexports.CursorConfiguration = CursorConfiguration;\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nvar SingleCursorState = /** @class */ (function () {\n    function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this.selectionStart = selectionStart;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    SingleCursorState.prototype.equals = function (other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    };\n    SingleCursorState.prototype.hasSelection = function () {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    };\n    SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new position_1.Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new range_1.Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new position_1.Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    };\n    SingleCursorState._computeSelection = function (selectionStart, position) {\n        var startLineNumber, startColumn, endLineNumber, endColumn;\n        if (selectionStart.isEmpty()) {\n            startLineNumber = selectionStart.startLineNumber;\n            startColumn = selectionStart.startColumn;\n            endLineNumber = position.lineNumber;\n            endColumn = position.column;\n        }\n        else {\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n                startLineNumber = selectionStart.endLineNumber;\n                startColumn = selectionStart.endColumn;\n                endLineNumber = position.lineNumber;\n                endColumn = position.column;\n            }\n            else {\n                startLineNumber = selectionStart.startLineNumber;\n                startColumn = selectionStart.startColumn;\n                endLineNumber = position.lineNumber;\n                endColumn = position.column;\n            }\n        }\n        return new selection_1.Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n    };\n    return SingleCursorState;\n}());\nexports.SingleCursorState = SingleCursorState;\nvar CursorContext = /** @class */ (function () {\n    function CursorContext(configuration, model, viewModel) {\n        this.model = model;\n        this.viewModel = viewModel;\n        this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\n    }\n    CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\n        return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\n    };\n    CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n        return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\n    };\n    CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n    };\n    CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new position_1.Position(lineNumber, column));\n    };\n    CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n        return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    };\n    CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\n        return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\n    };\n    CursorContext.prototype.getCurrentScrollTop = function () {\n        return this.viewModel.viewLayout.getCurrentScrollTop();\n    };\n    CursorContext.prototype.getCompletelyVisibleViewRange = function () {\n        return this.viewModel.getCompletelyVisibleViewRange();\n    };\n    CursorContext.prototype.getCompletelyVisibleModelRange = function () {\n        var viewRange = this.viewModel.getCompletelyVisibleViewRange();\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n    };\n    CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n        return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\n    };\n    CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\n        return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n    };\n    return CursorContext;\n}());\nexports.CursorContext = CursorContext;\nvar PartialModelCursorState = /** @class */ (function () {\n    function PartialModelCursorState(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n    return PartialModelCursorState;\n}());\nexports.PartialModelCursorState = PartialModelCursorState;\nvar PartialViewCursorState = /** @class */ (function () {\n    function PartialViewCursorState(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n    return PartialViewCursorState;\n}());\nexports.PartialViewCursorState = PartialViewCursorState;\nvar CursorState = /** @class */ (function () {\n    function CursorState(modelState, viewState) {\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    CursorState.fromModelState = function (modelState) {\n        return new PartialModelCursorState(modelState);\n    };\n    CursorState.fromViewState = function (viewState) {\n        return new PartialViewCursorState(viewState);\n    };\n    CursorState.fromModelSelection = function (modelSelection) {\n        var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n        var selectionStartColumn = modelSelection.selectionStartColumn;\n        var positionLineNumber = modelSelection.positionLineNumber;\n        var positionColumn = modelSelection.positionColumn;\n        var modelState = new SingleCursorState(new range_1.Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new position_1.Position(positionLineNumber, positionColumn), 0);\n        return CursorState.fromModelState(modelState);\n    };\n    CursorState.fromModelSelections = function (modelSelections) {\n        var states = [];\n        for (var i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    };\n    CursorState.prototype.equals = function (other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    };\n    return CursorState;\n}());\nexports.CursorState = CursorState;\nvar EditOperationResult = /** @class */ (function () {\n    function EditOperationResult(type, commands, opts) {\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n    return EditOperationResult;\n}());\nexports.EditOperationResult = EditOperationResult;\n/**\n * Common operations that work and make sense both on the model and on the view model.\n */\nvar CursorColumns = /** @class */ (function () {\n    function CursorColumns() {\n    }\n    CursorColumns.isLowSurrogate = function (model, lineNumber, charOffset) {\n        var lineContent = model.getLineContent(lineNumber);\n        if (charOffset < 0 || charOffset >= lineContent.length) {\n            return false;\n        }\n        return strings.isLowSurrogate(lineContent.charCodeAt(charOffset));\n    };\n    CursorColumns.isHighSurrogate = function (model, lineNumber, charOffset) {\n        var lineContent = model.getLineContent(lineNumber);\n        if (charOffset < 0 || charOffset >= lineContent.length) {\n            return false;\n        }\n        return strings.isHighSurrogate(lineContent.charCodeAt(charOffset));\n    };\n    CursorColumns.isInsideSurrogatePair = function (model, lineNumber, column) {\n        return this.isHighSurrogate(model, lineNumber, column - 2);\n    };\n    CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\n        var endOffset = lineContent.length;\n        if (endOffset > column - 1) {\n            endOffset = column - 1;\n        }\n        var result = 0;\n        for (var i = 0; i < endOffset; i++) {\n            var charCode = lineContent.charCodeAt(i);\n            if (charCode === charCode_1.CharCode.Tab) {\n                result = this.nextRenderTabStop(result, tabSize);\n            }\n            else if (strings.isFullWidthCharacter(charCode)) {\n                result = result + 2;\n            }\n            else {\n                result = result + 1;\n            }\n        }\n        return result;\n    };\n    CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n    };\n    CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        var lineLength = lineContent.length;\n        var beforeVisibleColumn = 0;\n        for (var i = 0; i < lineLength; i++) {\n            var charCode = lineContent.charCodeAt(i);\n            var afterVisibleColumn = void 0;\n            if (charCode === charCode_1.CharCode.Tab) {\n                afterVisibleColumn = this.nextRenderTabStop(beforeVisibleColumn, tabSize);\n            }\n            else if (strings.isFullWidthCharacter(charCode)) {\n                afterVisibleColumn = beforeVisibleColumn + 2;\n            }\n            else {\n                afterVisibleColumn = beforeVisibleColumn + 1;\n            }\n            if (afterVisibleColumn >= visibleColumn) {\n                var prevDelta = visibleColumn - beforeVisibleColumn;\n                var afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < prevDelta) {\n                    return i + 2;\n                }\n                else {\n                    return i + 1;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n        }\n        // walked the entire string\n        return lineLength + 1;\n    };\n    CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\n        var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n        var minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        var maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    };\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     */\n    CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    };\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     */\n    CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    };\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     */\n    CursorColumns.prevRenderTabStop = function (column, tabSize) {\n        return column - 1 - (column - 1) % tabSize;\n    };\n    /**\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n     */\n    CursorColumns.prevIndentTabStop = function (column, indentSize) {\n        return column - 1 - (column - 1) % indentSize;\n    };\n    return CursorColumns;\n}());\nexports.CursorColumns = CursorColumns;\nfunction isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\nexports.isQuote = isQuote;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCommon.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/cursorCommon.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport * as strings from 'vs/base/common/strings';\nimport { EditorAutoClosingStrategy, EditorAutoSurroundStrategy, IConfigurationChangedEvent } from 'vs/editor/common/config/editorOptions';\nimport { CursorChangeReason } from 'vs/editor/common/controller/cursorEvents';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, IConfiguration, ScrollType } from 'vs/editor/common/editorCommon';\nimport { ITextModel, TextModelResolvedOptions } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { LanguageIdentifier } from 'vs/editor/common/modes';\nimport { IAutoClosingPair } from 'vs/editor/common/modes/languageConfiguration';\nimport { LanguageConfigurationRegistry } from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport { VerticalRevealType } from 'vs/editor/common/view/viewEvents';\nimport { IViewModel } from 'vs/editor/common/viewModel/viewModel';\n\nexport interface IColumnSelectData {\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\nexport const enum RevealTarget {\n\tPrimary = 0,\n\tTopMost = 1,\n\tBottomMost = 2\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tTyping = 1,\n\tDeletingLeft = 2,\n\tDeletingRight = 3\n}\n\nexport interface ICursors {\n\treadonly context: CursorContext;\n\tgetPrimaryCursor(): CursorState;\n\tgetLastAddedCursorIndex(): number;\n\tgetAll(): CursorState[];\n\n\tgetColumnSelectData(): IColumnSelectData;\n\tsetColumnSelectData(columnSelectData: IColumnSelectData): void;\n\n\tsetStates(source: string, reason: CursorChangeReason, states: PartialCursorState[] | null): void;\n\treveal(horizontal: boolean, target: RevealTarget, scrollType: ScrollType): void;\n\trevealRange(revealHorizontal: boolean, viewRange: Range, verticalType: VerticalRevealType, scrollType: ScrollType): void;\n\n\tscrollTo(desiredScrollTop: number): void;\n\n\tgetPrevEditOperationType(): EditOperationType;\n\tsetPrevEditOperationType(type: EditOperationType): void;\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: boolean;\n\tpublic readonly autoClosingPairsOpen: CharacterMap;\n\tpublic readonly autoClosingPairsClose: CharacterMap;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean, bracket: (ch: string) => boolean };\n\n\tprivate readonly _languageIdentifier: LanguageIdentifier;\n\tprivate _electricChars: { [key: string]: boolean; } | null;\n\n\tpublic static shouldRecreate(e: IConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.layoutInfo\n\t\t\t|| e.wordSeparators\n\t\t\t|| e.emptySelectionClipboard\n\t\t\t|| e.multiCursorMergeOverlapping\n\t\t\t|| e.autoClosingBrackets\n\t\t\t|| e.autoClosingQuotes\n\t\t\t|| e.autoSurround\n\t\t\t|| e.useTabStops\n\t\t\t|| e.lineHeight\n\t\t\t|| e.readOnly\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageIdentifier: LanguageIdentifier,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IConfiguration\n\t) {\n\t\tthis._languageIdentifier = languageIdentifier;\n\n\t\tlet c = configuration.editor;\n\n\t\tthis.readOnly = c.readOnly;\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.pageSize = Math.max(1, Math.floor(c.layoutInfo.height / c.fontInfo.lineHeight) - 2);\n\t\tthis.lineHeight = c.lineHeight;\n\t\tthis.useTabStops = c.useTabStops;\n\t\tthis.wordSeparators = c.wordSeparators;\n\t\tthis.emptySelectionClipboard = c.emptySelectionClipboard;\n\t\tthis.copyWithSyntaxHighlighting = c.copyWithSyntaxHighlighting;\n\t\tthis.multiCursorMergeOverlapping = c.multiCursorMergeOverlapping;\n\t\tthis.autoClosingBrackets = c.autoClosingBrackets;\n\t\tthis.autoClosingQuotes = c.autoClosingQuotes;\n\t\tthis.autoSurround = c.autoSurround;\n\t\tthis.autoIndent = c.autoIndent;\n\n\t\tthis.autoClosingPairsOpen = {};\n\t\tthis.autoClosingPairsClose = {};\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n\t\t\tbracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n\t\t};\n\n\t\tlet autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\n\t\tif (autoClosingPairs) {\n\t\t\tfor (const pair of autoClosingPairs) {\n\t\t\t\tthis.autoClosingPairsOpen[pair.open] = pair.close;\n\t\t\t\tthis.autoClosingPairsClose[pair.close] = pair.open;\n\t\t\t}\n\t\t}\n\n\t\tlet surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tlet electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate static _getElectricCharacters(languageIdentifier: LanguageIdentifier): string[] | null {\n\t\ttry {\n\t\t\treturn LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static _getAutoClosingPairs(languageIdentifier: LanguageIdentifier): IAutoClosingPair[] | null {\n\t\ttry {\n\t\t\treturn LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static _getShouldAutoClose(languageIdentifier: LanguageIdentifier, autoCloseConfig: EditorAutoClosingStrategy): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate static _getLanguageDefinedShouldAutoClose(languageIdentifier: LanguageIdentifier): (ch: string) => boolean {\n\t\ttry {\n\t\t\tconst autoCloseBeforeSet = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n\t\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate static _getSurroundingPairs(languageIdentifier: LanguageIdentifier): IAutoClosingPair[] | null {\n\t\ttry {\n\t\t\treturn LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void;\n\n\t// --- selection can start as a range (think double click and drag)\n\tpublic readonly selectionStart: Range;\n\tpublic readonly selectionStartLeftoverVisibleColumns: number;\n\tpublic readonly position: Position;\n\tpublic readonly leftoverVisibleColumns: number;\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tselectionStart: Range,\n\t\tselectionStartLeftoverVisibleColumns: number,\n\t\tposition: Position,\n\t\tleftoverVisibleColumns: number,\n\t) {\n\t\tthis.selectionStart = selectionStart;\n\t\tthis.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n\t\tthis.position = position;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tlet startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number;\n\t\tif (selectionStart.isEmpty()) {\n\t\t\tstartLineNumber = selectionStart.startLineNumber;\n\t\t\tstartColumn = selectionStart.startColumn;\n\t\t\tendLineNumber = position.lineNumber;\n\t\t\tendColumn = position.column;\n\t\t} else {\n\t\t\tif (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\t\tstartLineNumber = selectionStart.endLineNumber;\n\t\t\t\tstartColumn = selectionStart.endColumn;\n\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\tendColumn = position.column;\n\t\t\t} else {\n\t\t\t\tstartLineNumber = selectionStart.startLineNumber;\n\t\t\t\tstartColumn = selectionStart.startColumn;\n\t\t\t\tendLineNumber = position.lineNumber;\n\t\t\t\tendColumn = position.column;\n\t\t\t}\n\t\t}\n\t\treturn new Selection(\n\t\t\tstartLineNumber,\n\t\t\tstartColumn,\n\t\t\tendLineNumber,\n\t\t\tendColumn\n\t\t);\n\t}\n}\n\nexport class CursorContext {\n\t_cursorContextBrand: void;\n\n\tpublic readonly model: ITextModel;\n\tpublic readonly viewModel: IViewModel;\n\tpublic readonly config: CursorConfiguration;\n\n\tconstructor(configuration: IConfiguration, model: ITextModel, viewModel: IViewModel) {\n\t\tthis.model = model;\n\t\tthis.viewModel = viewModel;\n\t\tthis.config = new CursorConfiguration(\n\t\t\tthis.model.getLanguageIdentifier(),\n\t\t\tthis.model.getOptions(),\n\t\t\tconfiguration\n\t\t);\n\t}\n\n\tpublic validateViewPosition(viewPosition: Position, modelPosition: Position): Position {\n\t\treturn this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic convertViewPositionToModelPosition(lineNumber: number, column: number): Position {\n\t\treturn this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\n\t}\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\n\t}\n\n\tpublic getCurrentScrollTop(): number {\n\t\treturn this.viewModel.viewLayout.getCurrentScrollTop();\n\t}\n\n\tpublic getCompletelyVisibleViewRange(): Range {\n\t\treturn this.viewModel.getCompletelyVisibleViewRange();\n\t}\n\n\tpublic getCompletelyVisibleModelRange(): Range {\n\t\tconst viewRange = this.viewModel.getCompletelyVisibleViewRange();\n\t\treturn this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic getCompletelyVisibleViewRangeAtScrollTop(scrollTop: number): Range {\n\t\treturn this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\n\t}\n\n\tpublic getVerticalOffsetForViewLine(viewLineNumber: number): number {\n\t\treturn this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n\t\tconst selectionStartColumn = modelSelection.selectionStartColumn;\n\t\tconst positionLineNumber = modelSelection.positionLineNumber;\n\t\tconst positionColumn = modelSelection.positionColumn;\n\t\tconst modelState = new SingleCursorState(\n\t\t\tnew Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0,\n\t\t\tnew Position(positionLineNumber, positionColumn), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: ISelection[]): PartialModelCursorState[] {\n\t\tlet states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\n/**\n * Common operations that work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n\n\tpublic static isLowSurrogate(model: ICursorSimpleModel, lineNumber: number, charOffset: number): boolean {\n\t\tlet lineContent = model.getLineContent(lineNumber);\n\t\tif (charOffset < 0 || charOffset >= lineContent.length) {\n\t\t\treturn false;\n\t\t}\n\t\treturn strings.isLowSurrogate(lineContent.charCodeAt(charOffset));\n\t}\n\n\tpublic static isHighSurrogate(model: ICursorSimpleModel, lineNumber: number, charOffset: number): boolean {\n\t\tlet lineContent = model.getLineContent(lineNumber);\n\t\tif (charOffset < 0 || charOffset >= lineContent.length) {\n\t\t\treturn false;\n\t\t}\n\t\treturn strings.isHighSurrogate(lineContent.charCodeAt(charOffset));\n\t}\n\n\tpublic static isInsideSurrogatePair(model: ICursorSimpleModel, lineNumber: number, column: number): boolean {\n\t\treturn this.isHighSurrogate(model, lineNumber, column - 2);\n\t}\n\n\tpublic static visibleColumnFromColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tlet endOffset = lineContent.length;\n\t\tif (endOffset > column - 1) {\n\t\t\tendOffset = column - 1;\n\t\t}\n\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < endOffset; i++) {\n\t\t\tlet charCode = lineContent.charCodeAt(i);\n\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\tresult = this.nextRenderTabStop(result, tabSize);\n\t\t\t} else if (strings.isFullWidthCharacter(charCode)) {\n\t\t\t\tresult = result + 2;\n\t\t\t} else {\n\t\t\t\tresult = result + 1;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static visibleColumnFromColumn2(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): number {\n\t\treturn this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n\t}\n\n\tpublic static columnFromVisibleColumn(lineContent: string, visibleColumn: number, tabSize: number): number {\n\t\tif (visibleColumn <= 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst lineLength = lineContent.length;\n\n\t\tlet beforeVisibleColumn = 0;\n\t\tfor (let i = 0; i < lineLength; i++) {\n\t\t\tlet charCode = lineContent.charCodeAt(i);\n\n\t\t\tlet afterVisibleColumn: number;\n\t\t\tif (charCode === CharCode.Tab) {\n\t\t\t\tafterVisibleColumn = this.nextRenderTabStop(beforeVisibleColumn, tabSize);\n\t\t\t} else if (strings.isFullWidthCharacter(charCode)) {\n\t\t\t\tafterVisibleColumn = beforeVisibleColumn + 2;\n\t\t\t} else {\n\t\t\t\tafterVisibleColumn = beforeVisibleColumn + 1;\n\t\t\t}\n\n\t\t\tif (afterVisibleColumn >= visibleColumn) {\n\t\t\t\tlet prevDelta = visibleColumn - beforeVisibleColumn;\n\t\t\t\tlet afterDelta = afterVisibleColumn - visibleColumn;\n\t\t\t\tif (afterDelta < prevDelta) {\n\t\t\t\t\treturn i + 2;\n\t\t\t\t} else {\n\t\t\t\t\treturn i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbeforeVisibleColumn = afterVisibleColumn;\n\t\t}\n\n\t\t// walked the entire string\n\t\treturn lineLength + 1;\n\t}\n\n\tpublic static columnFromVisibleColumn2(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tlet result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n\n\t\tlet minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tlet maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static nextRenderTabStop(visibleColumn: number, tabSize: number): number {\n\t\treturn visibleColumn + tabSize - visibleColumn % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static nextIndentTabStop(visibleColumn: number, indentSize: number): number {\n\t\treturn visibleColumn + indentSize - visibleColumn % indentSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static prevRenderTabStop(column: number, tabSize: number): number {\n\t\treturn column - 1 - (column - 1) % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n\t */\n\tpublic static prevIndentTabStop(column: number, indentSize: number): number {\n\t\treturn column - 1 - (column - 1) % indentSize;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"]}]}