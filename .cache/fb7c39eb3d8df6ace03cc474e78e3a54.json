{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts","mtime":1555846338044},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar keyCodes_1 = require(\"vs/base/common/keyCodes\");\nvar nls_1 = require(\"vs/nls\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar descriptors_1 = require(\"vs/platform/instantiation/common/descriptors\");\nvar extensions_1 = require(\"vs/platform/instantiation/common/extensions\");\nvar keybindingsRegistry_1 = require(\"vs/platform/keybinding/common/keybindingsRegistry\");\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar editor_1 = require(\"vs/workbench/browser/editor\");\nvar actions_2 = require(\"vs/workbench/common/actions\");\nvar editor_2 = require(\"vs/workbench/common/editor\");\nvar webviewEditorInputFactory_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory\");\nvar webviewCommands_1 = require(\"./webviewCommands\");\nvar webviewEditor_1 = require(\"./webviewEditor\");\nvar webviewEditorInput_1 = require(\"./webviewEditorInput\");\nvar webviewEditorService_1 = require(\"./webviewEditorService\");\nvar contextkeys_1 = require(\"vs/platform/contextkey/common/contextkeys\");\nvar browser_1 = require(\"vs/base/browser/browser\");\n(platform_1.Registry.as(editor_1.Extensions.Editors)).registerEditor(new editor_1.EditorDescriptor(webviewEditor_1.WebviewEditor, webviewEditor_1.WebviewEditor.ID, nls_1.localize('webview.editor.label', \"webview editor\")), [new descriptors_1.SyncDescriptor(webviewEditorInput_1.WebviewEditorInput)]);\nplatform_1.Registry.as(editor_2.Extensions.EditorInputFactories).registerEditorInputFactory(webviewEditorInputFactory_1.WebviewEditorInputFactory.ID, webviewEditorInputFactory_1.WebviewEditorInputFactory);\nextensions_1.registerSingleton(webviewEditorService_1.IWebviewEditorService, webviewEditorService_1.WebviewEditorService, true);\nvar webviewDeveloperCategory = nls_1.localize('developer', \"Developer\");\nvar actionRegistry = platform_1.Registry.as(actions_2.Extensions.WorkbenchActions);\nfunction registerWebViewCommands(editorId) {\n    var contextKeyExpr = contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.equals('activeEditor', editorId), contextkey_1.ContextKeyExpr.not('editorFocus') /* https://github.com/Microsoft/vscode/issues/58668 */);\n    var showNextFindWidgetCommand = new webviewCommands_1.ShowWebViewEditorFindWidgetCommand({\n        id: webviewCommands_1.ShowWebViewEditorFindWidgetCommand.ID,\n        precondition: contextKeyExpr,\n        kbOpts: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_F,\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        }\n    });\n    showNextFindWidgetCommand.register();\n    (new webviewCommands_1.HideWebViewEditorFindCommand({\n        id: webviewCommands_1.HideWebViewEditorFindCommand.ID,\n        precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, webviewEditor_1.KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE),\n        kbOpts: {\n            primary: keyCodes_1.KeyCode.Escape,\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        }\n    })).register();\n    (new webviewCommands_1.SelectAllWebviewEditorCommand({\n        id: webviewCommands_1.SelectAllWebviewEditorCommand.ID,\n        precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n        kbOpts: {\n            primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_A,\n            weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n        }\n    })).register();\n    // These commands are only needed on MacOS where we have to disable the menu bar commands\n    if (browser_1.isMacintosh) {\n        (new webviewCommands_1.CopyWebviewEditorCommand({\n            id: webviewCommands_1.CopyWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_C,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        (new webviewCommands_1.PasteWebviewEditorCommand({\n            id: webviewCommands_1.PasteWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_V,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        (new webviewCommands_1.CutWebviewEditorCommand({\n            id: webviewCommands_1.CutWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_X,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        (new webviewCommands_1.UndoWebviewEditorCommand({\n            id: webviewCommands_1.UndoWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Z,\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n        (new webviewCommands_1.RedoWebviewEditorCommand({\n            id: webviewCommands_1.RedoWebviewEditorCommand.ID,\n            precondition: contextkey_1.ContextKeyExpr.and(contextKeyExpr, contextkey_1.ContextKeyExpr.not(contextkeys_1.InputFocusedContextKey)),\n            kbOpts: {\n                primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyCode.KEY_Y,\n                secondary: [keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z],\n                mac: { primary: keyCodes_1.KeyMod.CtrlCmd | keyCodes_1.KeyMod.Shift | keyCodes_1.KeyCode.KEY_Z },\n                weight: keybindingsRegistry_1.KeybindingWeight.EditorContrib\n            }\n        })).register();\n    }\n}\nexports.registerWebViewCommands = registerWebViewCommands;\nregisterWebViewCommands(webviewEditor_1.WebviewEditor.ID);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(webviewCommands_1.OpenWebviewDeveloperToolsAction, webviewCommands_1.OpenWebviewDeveloperToolsAction.ID, webviewCommands_1.OpenWebviewDeveloperToolsAction.LABEL), 'Webview Tools', webviewDeveloperCategory);\nactionRegistry.registerWorkbenchAction(new actions_1.SyncActionDescriptor(webviewCommands_1.ReloadWebviewAction, webviewCommands_1.ReloadWebviewAction.ID, webviewCommands_1.ReloadWebviewAction.LABEL), 'Reload Webview', webviewDeveloperCategory);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/webview/electron-browser/webview.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { localize } from 'vs/nls';\nimport { SyncActionDescriptor } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorDescriptor, Extensions as EditorExtensions, IEditorRegistry } from 'vs/workbench/browser/editor';\nimport { Extensions as ActionExtensions, IWorkbenchActionRegistry } from 'vs/workbench/common/actions';\nimport { Extensions as EditorInputExtensions, IEditorInputFactoryRegistry } from 'vs/workbench/common/editor';\nimport { WebviewEditorInputFactory } from 'vs/workbench/contrib/webview/electron-browser/webviewEditorInputFactory';\nimport { HideWebViewEditorFindCommand, OpenWebviewDeveloperToolsAction, ReloadWebviewAction, ShowWebViewEditorFindWidgetCommand, SelectAllWebviewEditorCommand, CopyWebviewEditorCommand, PasteWebviewEditorCommand, CutWebviewEditorCommand, UndoWebviewEditorCommand, RedoWebviewEditorCommand } from './webviewCommands';\nimport { WebviewEditor, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE } from './webviewEditor';\nimport { WebviewEditorInput } from './webviewEditorInput';\nimport { IWebviewEditorService, WebviewEditorService } from './webviewEditorService';\nimport { InputFocusedContextKey } from 'vs/platform/contextkey/common/contextkeys';\nimport { isMacintosh } from 'vs/base/browser/browser';\n\n(Registry.as<IEditorRegistry>(EditorExtensions.Editors)).registerEditor(new EditorDescriptor(\n\tWebviewEditor,\n\tWebviewEditor.ID,\n\tlocalize('webview.editor.label', \"webview editor\")),\n\t[new SyncDescriptor(WebviewEditorInput)]);\n\nRegistry.as<IEditorInputFactoryRegistry>(EditorInputExtensions.EditorInputFactories).registerEditorInputFactory(\n\tWebviewEditorInputFactory.ID,\n\tWebviewEditorInputFactory);\n\nregisterSingleton(IWebviewEditorService, WebviewEditorService, true);\n\n\nconst webviewDeveloperCategory = localize('developer', \"Developer\");\n\nconst actionRegistry = Registry.as<IWorkbenchActionRegistry>(ActionExtensions.WorkbenchActions);\n\nexport function registerWebViewCommands(editorId: string): void {\n\tconst contextKeyExpr = ContextKeyExpr.and(ContextKeyExpr.equals('activeEditor', editorId), ContextKeyExpr.not('editorFocus') /* https://github.com/Microsoft/vscode/issues/58668 */);\n\n\tconst showNextFindWidgetCommand = new ShowWebViewEditorFindWidgetCommand({\n\t\tid: ShowWebViewEditorFindWidgetCommand.ID,\n\t\tprecondition: contextKeyExpr,\n\t\tkbOpts: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_F,\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t}\n\t});\n\tshowNextFindWidgetCommand.register();\n\n\t(new HideWebViewEditorFindCommand({\n\t\tid: HideWebViewEditorFindCommand.ID,\n\t\tprecondition: ContextKeyExpr.and(\n\t\t\tcontextKeyExpr,\n\t\t\tKEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE),\n\t\tkbOpts: {\n\t\t\tprimary: KeyCode.Escape,\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t}\n\t})).register();\n\n\t(new SelectAllWebviewEditorCommand({\n\t\tid: SelectAllWebviewEditorCommand.ID,\n\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\tkbOpts: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_A,\n\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t}\n\t})).register();\n\n\t// These commands are only needed on MacOS where we have to disable the menu bar commands\n\tif (isMacintosh) {\n\t\t(new CopyWebviewEditorCommand({\n\t\t\tid: CopyWebviewEditorCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_C,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})).register();\n\n\t\t(new PasteWebviewEditorCommand({\n\t\t\tid: PasteWebviewEditorCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_V,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})).register();\n\n\n\t\t(new CutWebviewEditorCommand({\n\t\t\tid: CutWebviewEditorCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_X,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})).register();\n\n\t\t(new UndoWebviewEditorCommand({\n\t\t\tid: UndoWebviewEditorCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_Z,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})).register();\n\n\t\t(new RedoWebviewEditorCommand({\n\t\t\tid: RedoWebviewEditorCommand.ID,\n\t\t\tprecondition: ContextKeyExpr.and(contextKeyExpr, ContextKeyExpr.not(InputFocusedContextKey)),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KEY_Y,\n\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Z],\n\t\t\t\tmac: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KEY_Z },\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t})).register();\n\t}\n}\n\nregisterWebViewCommands(WebviewEditor.ID);\n\nactionRegistry.registerWorkbenchAction(\n\tnew SyncActionDescriptor(OpenWebviewDeveloperToolsAction, OpenWebviewDeveloperToolsAction.ID, OpenWebviewDeveloperToolsAction.LABEL),\n\t'Webview Tools',\n\twebviewDeveloperCategory);\n\nactionRegistry.registerWorkbenchAction(\n\tnew SyncActionDescriptor(ReloadWebviewAction, ReloadWebviewAction.ID, ReloadWebviewAction.LABEL),\n\t'Reload Webview',\n\twebviewDeveloperCategory);\n"]}]}