{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/codeEditorServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/codeEditorServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar dom = require(\"vs/base/browser/dom\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar strings = require(\"vs/base/common/strings\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar abstractCodeEditorService_1 = require(\"vs/editor/browser/services/abstractCodeEditorService\");\nvar editorCommon_1 = require(\"vs/editor/common/editorCommon\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar CodeEditorServiceImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(CodeEditorServiceImpl, _super);\n    function CodeEditorServiceImpl(themeService, styleSheet) {\n        if (styleSheet === void 0) { styleSheet = dom.createStyleSheet(); }\n        var _this = _super.call(this) || this;\n        _this._styleSheet = styleSheet;\n        _this._decorationOptionProviders = Object.create(null);\n        _this._themeService = themeService;\n        return _this;\n    }\n    CodeEditorServiceImpl.prototype.registerDecorationType = function (key, options, parentTypeKey) {\n        var provider = this._decorationOptionProviders[key];\n        if (!provider) {\n            var providerArgs = {\n                styleSheet: this._styleSheet,\n                key: key,\n                parentTypeKey: parentTypeKey,\n                options: options || Object.create(null)\n            };\n            if (!parentTypeKey) {\n                provider = new DecorationTypeOptionsProvider(this._themeService, providerArgs);\n            }\n            else {\n                provider = new DecorationSubTypeOptionsProvider(this._themeService, providerArgs);\n            }\n            this._decorationOptionProviders[key] = provider;\n        }\n        provider.refCount++;\n    };\n    CodeEditorServiceImpl.prototype.removeDecorationType = function (key) {\n        var provider = this._decorationOptionProviders[key];\n        if (provider) {\n            provider.refCount--;\n            if (provider.refCount <= 0) {\n                delete this._decorationOptionProviders[key];\n                provider.dispose();\n                this.listCodeEditors().forEach(function (ed) { return ed.removeDecorations(key); });\n            }\n        }\n    };\n    CodeEditorServiceImpl.prototype.resolveDecorationOptions = function (decorationTypeKey, writable) {\n        var provider = this._decorationOptionProviders[decorationTypeKey];\n        if (!provider) {\n            throw new Error('Unknown decoration type key: ' + decorationTypeKey);\n        }\n        return provider.getOptions(this, writable);\n    };\n    CodeEditorServiceImpl = tslib_1.__decorate([\n        tslib_1.__param(0, themeService_1.IThemeService)\n    ], CodeEditorServiceImpl);\n    return CodeEditorServiceImpl;\n}(abstractCodeEditorService_1.AbstractCodeEditorService));\nexports.CodeEditorServiceImpl = CodeEditorServiceImpl;\nvar DecorationSubTypeOptionsProvider = /** @class */ (function () {\n    function DecorationSubTypeOptionsProvider(themeService, providerArgs) {\n        this._parentTypeKey = providerArgs.parentTypeKey;\n        this.refCount = 0;\n        this._beforeContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName, providerArgs, themeService);\n        this._afterContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.AfterContentClassName, providerArgs, themeService);\n    }\n    DecorationSubTypeOptionsProvider.prototype.getOptions = function (codeEditorService, writable) {\n        var options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n        if (this._beforeContentRules) {\n            options.beforeContentClassName = this._beforeContentRules.className;\n        }\n        if (this._afterContentRules) {\n            options.afterContentClassName = this._afterContentRules.className;\n        }\n        return options;\n    };\n    DecorationSubTypeOptionsProvider.prototype.dispose = function () {\n        if (this._beforeContentRules) {\n            this._beforeContentRules.dispose();\n            this._beforeContentRules = null;\n        }\n        if (this._afterContentRules) {\n            this._afterContentRules.dispose();\n            this._afterContentRules = null;\n        }\n    };\n    return DecorationSubTypeOptionsProvider;\n}());\nvar DecorationTypeOptionsProvider = /** @class */ (function () {\n    function DecorationTypeOptionsProvider(themeService, providerArgs) {\n        var _this = this;\n        this.refCount = 0;\n        this._disposables = [];\n        var createCSSRules = function (type) {\n            var rules = new DecorationCSSRules(type, providerArgs, themeService);\n            _this._disposables.push(rules);\n            if (rules.hasContent) {\n                return rules.className;\n            }\n            return undefined;\n        };\n        var createInlineCSSRules = function (type) {\n            var rules = new DecorationCSSRules(type, providerArgs, themeService);\n            _this._disposables.push(rules);\n            if (rules.hasContent) {\n                return { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\n            }\n            return null;\n        };\n        this.className = createCSSRules(ModelDecorationCSSRuleType.ClassName);\n        var inlineData = createInlineCSSRules(ModelDecorationCSSRuleType.InlineClassName);\n        if (inlineData) {\n            this.inlineClassName = inlineData.className;\n            this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n        }\n        this.beforeContentClassName = createCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName);\n        this.afterContentClassName = createCSSRules(ModelDecorationCSSRuleType.AfterContentClassName);\n        this.glyphMarginClassName = createCSSRules(ModelDecorationCSSRuleType.GlyphMarginClassName);\n        var options = providerArgs.options;\n        this.isWholeLine = Boolean(options.isWholeLine);\n        this.stickiness = options.rangeBehavior;\n        var lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n        var darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n        if (typeof lightOverviewRulerColor !== 'undefined'\n            || typeof darkOverviewRulerColor !== 'undefined') {\n            this.overviewRuler = {\n                color: lightOverviewRulerColor || darkOverviewRulerColor,\n                darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n                position: options.overviewRulerLane || model_1.OverviewRulerLane.Center\n            };\n        }\n    }\n    DecorationTypeOptionsProvider.prototype.getOptions = function (codeEditorService, writable) {\n        if (!writable) {\n            return this;\n        }\n        return {\n            inlineClassName: this.inlineClassName,\n            beforeContentClassName: this.beforeContentClassName,\n            afterContentClassName: this.afterContentClassName,\n            className: this.className,\n            glyphMarginClassName: this.glyphMarginClassName,\n            isWholeLine: this.isWholeLine,\n            overviewRuler: this.overviewRuler,\n            stickiness: this.stickiness\n        };\n    };\n    DecorationTypeOptionsProvider.prototype.dispose = function () {\n        this._disposables = lifecycle_1.dispose(this._disposables);\n    };\n    return DecorationTypeOptionsProvider;\n}());\nvar _CSS_MAP = {\n    color: 'color:{0} !important;',\n    opacity: 'opacity:{0};',\n    backgroundColor: 'background-color:{0};',\n    outline: 'outline:{0};',\n    outlineColor: 'outline-color:{0};',\n    outlineStyle: 'outline-style:{0};',\n    outlineWidth: 'outline-width:{0};',\n    border: 'border:{0};',\n    borderColor: 'border-color:{0};',\n    borderRadius: 'border-radius:{0};',\n    borderSpacing: 'border-spacing:{0};',\n    borderStyle: 'border-style:{0};',\n    borderWidth: 'border-width:{0};',\n    fontStyle: 'font-style:{0};',\n    fontWeight: 'font-weight:{0};',\n    textDecoration: 'text-decoration:{0};',\n    cursor: 'cursor:{0};',\n    letterSpacing: 'letter-spacing:{0};',\n    gutterIconPath: 'background:url(\\'{0}\\') center center no-repeat;',\n    gutterIconSize: 'background-size:{0};',\n    contentText: 'content:\\'{0}\\';',\n    contentIconPath: 'content:url(\\'{0}\\');',\n    margin: 'margin:{0};',\n    width: 'width:{0};',\n    height: 'height:{0};'\n};\nvar DecorationCSSRules = /** @class */ (function () {\n    function DecorationCSSRules(ruleType, providerArgs, themeService) {\n        var _this = this;\n        this._theme = themeService.getTheme();\n        this._ruleType = ruleType;\n        this._providerArgs = providerArgs;\n        this._usesThemeColors = false;\n        this._hasContent = false;\n        this._hasLetterSpacing = false;\n        var className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n        if (this._providerArgs.parentTypeKey) {\n            className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n        }\n        this._className = className;\n        this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n        this._buildCSS();\n        if (this._usesThemeColors) {\n            this._themeListener = themeService.onThemeChange(function (theme) {\n                _this._theme = themeService.getTheme();\n                _this._removeCSS();\n                _this._buildCSS();\n            });\n        }\n        else {\n            this._themeListener = null;\n        }\n    }\n    DecorationCSSRules.prototype.dispose = function () {\n        if (this._hasContent) {\n            this._removeCSS();\n            this._hasContent = false;\n        }\n        if (this._themeListener) {\n            this._themeListener.dispose();\n            this._themeListener = null;\n        }\n    };\n    Object.defineProperty(DecorationCSSRules.prototype, \"hasContent\", {\n        get: function () {\n            return this._hasContent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DecorationCSSRules.prototype, \"hasLetterSpacing\", {\n        get: function () {\n            return this._hasLetterSpacing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DecorationCSSRules.prototype, \"className\", {\n        get: function () {\n            return this._className;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DecorationCSSRules.prototype._buildCSS = function () {\n        var options = this._providerArgs.options;\n        var unthemedCSS, lightCSS, darkCSS;\n        switch (this._ruleType) {\n            case ModelDecorationCSSRuleType.ClassName:\n                unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n                break;\n            case ModelDecorationCSSRuleType.InlineClassName:\n                unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n                break;\n            case ModelDecorationCSSRuleType.GlyphMarginClassName:\n                unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n                lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n                darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n                break;\n            case ModelDecorationCSSRuleType.BeforeContentClassName:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n                break;\n            case ModelDecorationCSSRuleType.AfterContentClassName:\n                unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n                lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n                darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n                break;\n            default:\n                throw new Error('Unknown rule type: ' + this._ruleType);\n        }\n        var sheet = this._providerArgs.styleSheet.sheet;\n        var hasContent = false;\n        if (unthemedCSS.length > 0) {\n            sheet.insertRule(this._unThemedSelector + \" {\" + unthemedCSS + \"}\", 0);\n            hasContent = true;\n        }\n        if (lightCSS.length > 0) {\n            sheet.insertRule(\".vs\" + this._unThemedSelector + \" {\" + lightCSS + \"}\", 0);\n            hasContent = true;\n        }\n        if (darkCSS.length > 0) {\n            sheet.insertRule(\".vs-dark\" + this._unThemedSelector + \", .hc-black\" + this._unThemedSelector + \" {\" + darkCSS + \"}\", 0);\n            hasContent = true;\n        }\n        this._hasContent = hasContent;\n    };\n    DecorationCSSRules.prototype._removeCSS = function () {\n        dom.removeCSSRulesContainingSelector(this._unThemedSelector, this._providerArgs.styleSheet);\n    };\n    /**\n     * Build the CSS for decorations styled via `className`.\n     */\n    DecorationCSSRules.prototype.getCSSTextForModelDecorationClassName = function (opts) {\n        if (!opts) {\n            return '';\n        }\n        var cssTextArr = [];\n        this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n        this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n        this.collectBorderSettingsCSSText(opts, cssTextArr);\n        return cssTextArr.join('');\n    };\n    /**\n     * Build the CSS for decorations styled via `inlineClassName`.\n     */\n    DecorationCSSRules.prototype.getCSSTextForModelDecorationInlineClassName = function (opts) {\n        if (!opts) {\n            return '';\n        }\n        var cssTextArr = [];\n        this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n        if (opts.letterSpacing) {\n            this._hasLetterSpacing = true;\n        }\n        return cssTextArr.join('');\n    };\n    /**\n     * Build the CSS for decorations styled before or after content.\n     */\n    DecorationCSSRules.prototype.getCSSTextForModelDecorationContentClassName = function (opts) {\n        if (!opts) {\n            return '';\n        }\n        var cssTextArr = [];\n        if (typeof opts !== 'undefined') {\n            this.collectBorderSettingsCSSText(opts, cssTextArr);\n            if (typeof opts.contentIconPath !== 'undefined') {\n                cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, uri_1.URI.revive(opts.contentIconPath).toString(true).replace(/'/g, '%27')));\n            }\n            if (typeof opts.contentText === 'string') {\n                var truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\n                var escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n                cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n            }\n            this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin'], cssTextArr);\n            if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n                cssTextArr.push('display:inline-block;');\n            }\n        }\n        return cssTextArr.join('');\n    };\n    /**\n     * Build the CSS for decorations styled via `glpyhMarginClassName`.\n     */\n    DecorationCSSRules.prototype.getCSSTextForModelDecorationGlyphMarginClassName = function (opts) {\n        if (!opts) {\n            return '';\n        }\n        var cssTextArr = [];\n        if (typeof opts.gutterIconPath !== 'undefined') {\n            cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, uri_1.URI.revive(opts.gutterIconPath).toString(true).replace(/'/g, '%27')));\n            if (typeof opts.gutterIconSize !== 'undefined') {\n                cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n            }\n        }\n        return cssTextArr.join('');\n    };\n    DecorationCSSRules.prototype.collectBorderSettingsCSSText = function (opts, cssTextArr) {\n        if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n            cssTextArr.push(strings.format('box-sizing: border-box;'));\n            return true;\n        }\n        return false;\n    };\n    DecorationCSSRules.prototype.collectCSSText = function (opts, properties, cssTextArr) {\n        var lenBefore = cssTextArr.length;\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var property = properties_1[_i];\n            var value = this.resolveValue(opts[property]);\n            if (typeof value === 'string') {\n                cssTextArr.push(strings.format(_CSS_MAP[property], value));\n            }\n        }\n        return cssTextArr.length !== lenBefore;\n    };\n    DecorationCSSRules.prototype.resolveValue = function (value) {\n        if (editorCommon_1.isThemeColor(value)) {\n            this._usesThemeColors = true;\n            var color = this._theme.getColor(value.id);\n            if (color) {\n                return color.toString();\n            }\n            return 'transparent';\n        }\n        return value;\n    };\n    return DecorationCSSRules;\n}());\nvar ModelDecorationCSSRuleType;\n(function (ModelDecorationCSSRuleType) {\n    ModelDecorationCSSRuleType[ModelDecorationCSSRuleType[\"ClassName\"] = 0] = \"ClassName\";\n    ModelDecorationCSSRuleType[ModelDecorationCSSRuleType[\"InlineClassName\"] = 1] = \"InlineClassName\";\n    ModelDecorationCSSRuleType[ModelDecorationCSSRuleType[\"GlyphMarginClassName\"] = 2] = \"GlyphMarginClassName\";\n    ModelDecorationCSSRuleType[ModelDecorationCSSRuleType[\"BeforeContentClassName\"] = 3] = \"BeforeContentClassName\";\n    ModelDecorationCSSRuleType[ModelDecorationCSSRuleType[\"AfterContentClassName\"] = 4] = \"AfterContentClassName\";\n})(ModelDecorationCSSRuleType || (ModelDecorationCSSRuleType = {}));\nvar CSSNameHelper = /** @class */ (function () {\n    function CSSNameHelper() {\n    }\n    CSSNameHelper.getClassName = function (key, type) {\n        return 'ced-' + key + '-' + type;\n    };\n    CSSNameHelper.getSelector = function (key, parentKey, ruleType) {\n        var selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n        if (parentKey) {\n            selector = selector + '.' + this.getClassName(parentKey, ruleType);\n        }\n        if (ruleType === ModelDecorationCSSRuleType.BeforeContentClassName) {\n            selector += '::before';\n        }\n        else if (ruleType === ModelDecorationCSSRuleType.AfterContentClassName) {\n            selector += '::after';\n        }\n        return selector;\n    };\n    return CSSNameHelper;\n}());\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/codeEditorServiceImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/browser/services/codeEditorServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { IDisposable, dispose as disposeAll } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { AbstractCodeEditorService } from 'vs/editor/browser/services/abstractCodeEditorService';\nimport { IContentDecorationRenderOptions, IDecorationRenderOptions, IThemeDecorationRenderOptions, isThemeColor } from 'vs/editor/common/editorCommon';\nimport { IModelDecorationOptions, IModelDecorationOverviewRulerOptions, OverviewRulerLane, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { IResourceInput } from 'vs/platform/editor/common/editor';\nimport { ITheme, IThemeService, ThemeColor } from 'vs/platform/theme/common/themeService';\n\nexport abstract class CodeEditorServiceImpl extends AbstractCodeEditorService {\n\n\tprivate readonly _styleSheet: HTMLStyleElement;\n\tprivate readonly _decorationOptionProviders: { [key: string]: IModelDecorationOptionsProvider };\n\tprivate readonly _themeService: IThemeService;\n\n\tconstructor(@IThemeService themeService: IThemeService, styleSheet = dom.createStyleSheet()) {\n\t\tsuper();\n\t\tthis._styleSheet = styleSheet;\n\t\tthis._decorationOptionProviders = Object.create(null);\n\t\tthis._themeService = themeService;\n\t}\n\n\tpublic registerDecorationType(key: string, options: IDecorationRenderOptions, parentTypeKey?: string): void {\n\t\tlet provider = this._decorationOptionProviders[key];\n\t\tif (!provider) {\n\t\t\tconst providerArgs: ProviderArguments = {\n\t\t\t\tstyleSheet: this._styleSheet,\n\t\t\t\tkey: key,\n\t\t\t\tparentTypeKey: parentTypeKey,\n\t\t\t\toptions: options || Object.create(null)\n\t\t\t};\n\t\t\tif (!parentTypeKey) {\n\t\t\t\tprovider = new DecorationTypeOptionsProvider(this._themeService, providerArgs);\n\t\t\t} else {\n\t\t\t\tprovider = new DecorationSubTypeOptionsProvider(this._themeService, providerArgs);\n\t\t\t}\n\t\t\tthis._decorationOptionProviders[key] = provider;\n\t\t}\n\t\tprovider.refCount++;\n\t}\n\n\tpublic removeDecorationType(key: string): void {\n\t\tconst provider = this._decorationOptionProviders[key];\n\t\tif (provider) {\n\t\t\tprovider.refCount--;\n\t\t\tif (provider.refCount <= 0) {\n\t\t\t\tdelete this._decorationOptionProviders[key];\n\t\t\t\tprovider.dispose();\n\t\t\t\tthis.listCodeEditors().forEach((ed) => ed.removeDecorations(key));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic resolveDecorationOptions(decorationTypeKey: string, writable: boolean): IModelDecorationOptions {\n\t\tconst provider = this._decorationOptionProviders[decorationTypeKey];\n\t\tif (!provider) {\n\t\t\tthrow new Error('Unknown decoration type key: ' + decorationTypeKey);\n\t\t}\n\t\treturn provider.getOptions(this, writable);\n\t}\n\n\tabstract getActiveCodeEditor(): ICodeEditor | null;\n\tabstract openCodeEditor(input: IResourceInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null>;\n}\n\ninterface IModelDecorationOptionsProvider extends IDisposable {\n\trefCount: number;\n\tgetOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions;\n}\n\nclass DecorationSubTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tpublic refCount: number;\n\n\tprivate readonly _parentTypeKey: string | undefined;\n\tprivate _beforeContentRules: DecorationCSSRules | null;\n\tprivate _afterContentRules: DecorationCSSRules | null;\n\n\tconstructor(themeService: IThemeService, providerArgs: ProviderArguments) {\n\t\tthis._parentTypeKey = providerArgs.parentTypeKey;\n\t\tthis.refCount = 0;\n\n\t\tthis._beforeContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName, providerArgs, themeService);\n\t\tthis._afterContentRules = new DecorationCSSRules(ModelDecorationCSSRuleType.AfterContentClassName, providerArgs, themeService);\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tconst options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n\t\tif (this._beforeContentRules) {\n\t\t\toptions.beforeContentClassName = this._beforeContentRules.className;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\toptions.afterContentClassName = this._afterContentRules.className;\n\t\t}\n\t\treturn options;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._beforeContentRules) {\n\t\t\tthis._beforeContentRules.dispose();\n\t\t\tthis._beforeContentRules = null;\n\t\t}\n\t\tif (this._afterContentRules) {\n\t\t\tthis._afterContentRules.dispose();\n\t\t\tthis._afterContentRules = null;\n\t\t}\n\t}\n}\n\ninterface ProviderArguments {\n\tstyleSheet: HTMLStyleElement;\n\tkey: string;\n\tparentTypeKey?: string;\n\toptions: IDecorationRenderOptions;\n}\n\n\nclass DecorationTypeOptionsProvider implements IModelDecorationOptionsProvider {\n\n\tprivate _disposables: IDisposable[];\n\tpublic refCount: number;\n\n\tpublic className: string | undefined;\n\tpublic inlineClassName: string;\n\tpublic inlineClassNameAffectsLetterSpacing: boolean;\n\tpublic beforeContentClassName: string | undefined;\n\tpublic afterContentClassName: string | undefined;\n\tpublic glyphMarginClassName: string | undefined;\n\tpublic isWholeLine: boolean;\n\tpublic overviewRuler: IModelDecorationOverviewRulerOptions;\n\tpublic stickiness: TrackedRangeStickiness | undefined;\n\n\tconstructor(themeService: IThemeService, providerArgs: ProviderArguments) {\n\t\tthis.refCount = 0;\n\t\tthis._disposables = [];\n\n\t\tconst createCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.push(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn rules.className;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t\tconst createInlineCSSRules = (type: ModelDecorationCSSRuleType) => {\n\t\t\tconst rules = new DecorationCSSRules(type, providerArgs, themeService);\n\t\t\tthis._disposables.push(rules);\n\t\t\tif (rules.hasContent) {\n\t\t\t\treturn { className: rules.className, hasLetterSpacing: rules.hasLetterSpacing };\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\n\t\tthis.className = createCSSRules(ModelDecorationCSSRuleType.ClassName);\n\t\tconst inlineData = createInlineCSSRules(ModelDecorationCSSRuleType.InlineClassName);\n\t\tif (inlineData) {\n\t\t\tthis.inlineClassName = inlineData.className;\n\t\t\tthis.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n\t\t}\n\t\tthis.beforeContentClassName = createCSSRules(ModelDecorationCSSRuleType.BeforeContentClassName);\n\t\tthis.afterContentClassName = createCSSRules(ModelDecorationCSSRuleType.AfterContentClassName);\n\t\tthis.glyphMarginClassName = createCSSRules(ModelDecorationCSSRuleType.GlyphMarginClassName);\n\n\t\tconst options = providerArgs.options;\n\t\tthis.isWholeLine = Boolean(options.isWholeLine);\n\t\tthis.stickiness = options.rangeBehavior;\n\n\t\tconst lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n\t\tconst darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n\t\tif (\n\t\t\ttypeof lightOverviewRulerColor !== 'undefined'\n\t\t\t|| typeof darkOverviewRulerColor !== 'undefined'\n\t\t) {\n\t\t\tthis.overviewRuler = {\n\t\t\t\tcolor: lightOverviewRulerColor || darkOverviewRulerColor,\n\t\t\t\tdarkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n\t\t\t\tposition: options.overviewRulerLane || OverviewRulerLane.Center\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic getOptions(codeEditorService: AbstractCodeEditorService, writable: boolean): IModelDecorationOptions {\n\t\tif (!writable) {\n\t\t\treturn this;\n\t\t}\n\t\treturn {\n\t\t\tinlineClassName: this.inlineClassName,\n\t\t\tbeforeContentClassName: this.beforeContentClassName,\n\t\t\tafterContentClassName: this.afterContentClassName,\n\t\t\tclassName: this.className,\n\t\t\tglyphMarginClassName: this.glyphMarginClassName,\n\t\t\tisWholeLine: this.isWholeLine,\n\t\t\toverviewRuler: this.overviewRuler,\n\t\t\tstickiness: this.stickiness\n\t\t};\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposables = disposeAll(this._disposables);\n\t}\n}\n\n\nconst _CSS_MAP: { [prop: string]: string; } = {\n\tcolor: 'color:{0} !important;',\n\topacity: 'opacity:{0};',\n\tbackgroundColor: 'background-color:{0};',\n\n\toutline: 'outline:{0};',\n\toutlineColor: 'outline-color:{0};',\n\toutlineStyle: 'outline-style:{0};',\n\toutlineWidth: 'outline-width:{0};',\n\n\tborder: 'border:{0};',\n\tborderColor: 'border-color:{0};',\n\tborderRadius: 'border-radius:{0};',\n\tborderSpacing: 'border-spacing:{0};',\n\tborderStyle: 'border-style:{0};',\n\tborderWidth: 'border-width:{0};',\n\n\tfontStyle: 'font-style:{0};',\n\tfontWeight: 'font-weight:{0};',\n\ttextDecoration: 'text-decoration:{0};',\n\tcursor: 'cursor:{0};',\n\tletterSpacing: 'letter-spacing:{0};',\n\n\tgutterIconPath: 'background:url(\\'{0}\\') center center no-repeat;',\n\tgutterIconSize: 'background-size:{0};',\n\n\tcontentText: 'content:\\'{0}\\';',\n\tcontentIconPath: 'content:url(\\'{0}\\');',\n\tmargin: 'margin:{0};',\n\twidth: 'width:{0};',\n\theight: 'height:{0};'\n};\n\n\nclass DecorationCSSRules {\n\n\tprivate _theme: ITheme;\n\tprivate readonly _className: string;\n\tprivate readonly _unThemedSelector: string;\n\tprivate _hasContent: boolean;\n\tprivate _hasLetterSpacing: boolean;\n\tprivate readonly _ruleType: ModelDecorationCSSRuleType;\n\tprivate _themeListener: IDisposable | null;\n\tprivate readonly _providerArgs: ProviderArguments;\n\tprivate _usesThemeColors: boolean;\n\n\tpublic constructor(ruleType: ModelDecorationCSSRuleType, providerArgs: ProviderArguments, themeService: IThemeService) {\n\t\tthis._theme = themeService.getTheme();\n\t\tthis._ruleType = ruleType;\n\t\tthis._providerArgs = providerArgs;\n\t\tthis._usesThemeColors = false;\n\t\tthis._hasContent = false;\n\t\tthis._hasLetterSpacing = false;\n\n\t\tlet className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n\t\tif (this._providerArgs.parentTypeKey) {\n\t\t\tclassName = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n\t\t}\n\t\tthis._className = className;\n\n\t\tthis._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n\n\t\tthis._buildCSS();\n\n\t\tif (this._usesThemeColors) {\n\t\t\tthis._themeListener = themeService.onThemeChange(theme => {\n\t\t\t\tthis._theme = themeService.getTheme();\n\t\t\t\tthis._removeCSS();\n\t\t\t\tthis._buildCSS();\n\t\t\t});\n\t\t} else {\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tif (this._hasContent) {\n\t\t\tthis._removeCSS();\n\t\t\tthis._hasContent = false;\n\t\t}\n\t\tif (this._themeListener) {\n\t\t\tthis._themeListener.dispose();\n\t\t\tthis._themeListener = null;\n\t\t}\n\t}\n\n\tpublic get hasContent(): boolean {\n\t\treturn this._hasContent;\n\t}\n\n\tpublic get hasLetterSpacing(): boolean {\n\t\treturn this._hasLetterSpacing;\n\t}\n\n\tpublic get className(): string {\n\t\treturn this._className;\n\t}\n\n\tprivate _buildCSS(): void {\n\t\tconst options = this._providerArgs.options;\n\t\tlet unthemedCSS: string, lightCSS: string, darkCSS: string;\n\t\tswitch (this._ruleType) {\n\t\t\tcase ModelDecorationCSSRuleType.ClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.InlineClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.GlyphMarginClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.BeforeContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n\t\t\t\tbreak;\n\t\t\tcase ModelDecorationCSSRuleType.AfterContentClassName:\n\t\t\t\tunthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n\t\t\t\tlightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n\t\t\t\tdarkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown rule type: ' + this._ruleType);\n\t\t}\n\t\tconst sheet = <CSSStyleSheet>this._providerArgs.styleSheet.sheet;\n\n\t\tlet hasContent = false;\n\t\tif (unthemedCSS.length > 0) {\n\t\t\tsheet.insertRule(`${this._unThemedSelector} {${unthemedCSS}}`, 0);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (lightCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs${this._unThemedSelector} {${lightCSS}}`, 0);\n\t\t\thasContent = true;\n\t\t}\n\t\tif (darkCSS.length > 0) {\n\t\t\tsheet.insertRule(`.vs-dark${this._unThemedSelector}, .hc-black${this._unThemedSelector} {${darkCSS}}`, 0);\n\t\t\thasContent = true;\n\t\t}\n\t\tthis._hasContent = hasContent;\n\t}\n\n\tprivate _removeCSS(): void {\n\t\tdom.removeCSSRulesContainingSelector(this._unThemedSelector, this._providerArgs.styleSheet);\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `className`.\n\t */\n\tprivate getCSSTextForModelDecorationClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n\t\tthis.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `inlineClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationInlineClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\t\tthis.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n\t\tif (opts.letterSpacing) {\n\t\t\tthis._hasLetterSpacing = true;\n\t\t}\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled before or after content.\n\t */\n\tprivate getCSSTextForModelDecorationContentClassName(opts: IContentDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts !== 'undefined') {\n\t\t\tthis.collectBorderSettingsCSSText(opts, cssTextArr);\n\t\t\tif (typeof opts.contentIconPath !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentIconPath, URI.revive(opts.contentIconPath).toString(true).replace(/'/g, '%27')));\n\t\t\t}\n\t\t\tif (typeof opts.contentText === 'string') {\n\t\t\t\tconst truncated = opts.contentText.match(/^.*$/m)![0]; // only take first line\n\t\t\t\tconst escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n\t\t\t}\n\t\t\tthis.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin'], cssTextArr);\n\t\t\tif (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n\t\t\t\tcssTextArr.push('display:inline-block;');\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\t/**\n\t * Build the CSS for decorations styled via `glpyhMarginClassName`.\n\t */\n\tprivate getCSSTextForModelDecorationGlyphMarginClassName(opts: IThemeDecorationRenderOptions | undefined): string {\n\t\tif (!opts) {\n\t\t\treturn '';\n\t\t}\n\t\tconst cssTextArr: string[] = [];\n\n\t\tif (typeof opts.gutterIconPath !== 'undefined') {\n\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, URI.revive(opts.gutterIconPath).toString(true).replace(/'/g, '%27')));\n\t\t\tif (typeof opts.gutterIconSize !== 'undefined') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n\t\t\t}\n\t\t}\n\n\t\treturn cssTextArr.join('');\n\t}\n\n\tprivate collectBorderSettingsCSSText(opts: any, cssTextArr: string[]): boolean {\n\t\tif (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n\t\t\tcssTextArr.push(strings.format('box-sizing: border-box;'));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate collectCSSText(opts: any, properties: string[], cssTextArr: string[]): boolean {\n\t\tconst lenBefore = cssTextArr.length;\n\t\tfor (let property of properties) {\n\t\t\tconst value = this.resolveValue(opts[property]);\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tcssTextArr.push(strings.format(_CSS_MAP[property], value));\n\t\t\t}\n\t\t}\n\t\treturn cssTextArr.length !== lenBefore;\n\t}\n\n\tprivate resolveValue(value: string | ThemeColor): string {\n\t\tif (isThemeColor(value)) {\n\t\t\tthis._usesThemeColors = true;\n\t\t\tconst color = this._theme.getColor(value.id);\n\t\t\tif (color) {\n\t\t\t\treturn color.toString();\n\t\t\t}\n\t\t\treturn 'transparent';\n\t\t}\n\t\treturn value;\n\t}\n}\n\nconst enum ModelDecorationCSSRuleType {\n\tClassName = 0,\n\tInlineClassName = 1,\n\tGlyphMarginClassName = 2,\n\tBeforeContentClassName = 3,\n\tAfterContentClassName = 4\n}\n\nclass CSSNameHelper {\n\n\tpublic static getClassName(key: string, type: ModelDecorationCSSRuleType): string {\n\t\treturn 'ced-' + key + '-' + type;\n\t}\n\n\tpublic static getSelector(key: string, parentKey: string | undefined, ruleType: ModelDecorationCSSRuleType): string {\n\t\tlet selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n\t\tif (parentKey) {\n\t\t\tselector = selector + '.' + this.getClassName(parentKey, ruleType);\n\t\t}\n\t\tif (ruleType === ModelDecorationCSSRuleType.BeforeContentClassName) {\n\t\t\tselector += '::before';\n\t\t} else if (ruleType === ModelDecorationCSSRuleType.AfterContentClassName) {\n\t\t\tselector += '::after';\n\t\t}\n\t\treturn selector;\n\t}\n}\n"]}]}