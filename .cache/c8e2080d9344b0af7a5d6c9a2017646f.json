{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar lifecycle_1 = require(\"vs/platform/lifecycle/common/lifecycle\");\nvar panelService_1 = require(\"vs/workbench/services/panel/common/panelService\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar terminalService_1 = require(\"vs/workbench/contrib/terminal/browser/terminalService\");\nvar terminalConfigHelper_1 = require(\"vs/workbench/contrib/terminal/browser/terminalConfigHelper\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar terminal_1 = require(\"vs/workbench/contrib/terminal/node/terminal\");\nvar dialogs_1 = require(\"vs/platform/dialogs/common/dialogs\");\nvar notification_1 = require(\"vs/platform/notification/common/notification\");\nvar electron_1 = require(\"electron\");\nvar windows_1 = require(\"vs/platform/windows/common/windows\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar quickInput_1 = require(\"vs/platform/quickinput/common/quickInput\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar terminalEnvironment_1 = require(\"vs/workbench/contrib/terminal/common/terminalEnvironment\");\nvar child_process_1 = require(\"child_process\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar TerminalService = /** @class */ (function (_super) {\n    tslib_1.__extends(TerminalService, _super);\n    function TerminalService(contextKeyService, panelService, layoutService, storageService, lifecycleService, _configurationService, instantiationService, _quickInputService, notificationService, dialogService, extensionService, windowService, fileService) {\n        var _this = _super.call(this, contextKeyService, panelService, layoutService, lifecycleService, storageService, notificationService, dialogService, instantiationService, windowService, extensionService, fileService) || this;\n        _this._configurationService = _configurationService;\n        _this._quickInputService = _quickInputService;\n        _this._configHelper = _this._instantiationService.createInstance(terminalConfigHelper_1.TerminalConfigHelper, terminal_1.linuxDistro);\n        electron_1.ipcRenderer.on('vscode:openFiles', function (_event, request) {\n            // if the request to open files is coming in from the integrated terminal (identified though\n            // the termProgram variable) and we are instructed to wait for editors close, wait for the\n            // marker file to get deleted and then focus back to the integrated terminal.\n            if (request.termProgram === 'vscode' && request.filesToWait) {\n                var waitMarkerFileUri = uri_1.URI.revive(request.filesToWait.waitMarkerFileUri);\n                _this.whenDeleted(waitMarkerFileUri).then(function () {\n                    if (_this.terminalInstances.length > 0) {\n                        var terminal = _this.getActiveInstance();\n                        if (terminal) {\n                            terminal.focus();\n                        }\n                    }\n                });\n            }\n        });\n        electron_1.ipcRenderer.on('vscode:osResume', function () {\n            var activeTab = _this.getActiveTab();\n            if (!activeTab) {\n                return;\n            }\n            activeTab.terminalInstances.forEach(function (instance) { return instance.forceRedraw(); });\n        });\n        return _this;\n    }\n    Object.defineProperty(TerminalService.prototype, \"configHelper\", {\n        get: function () { return this._configHelper; },\n        enumerable: true,\n        configurable: true\n    });\n    TerminalService.prototype.whenDeleted = function (path) {\n        var _this = this;\n        // Complete when wait marker file is deleted\n        return new Promise(function (resolve) {\n            var running = false;\n            var interval = setInterval(function () {\n                if (!running) {\n                    running = true;\n                    _this._fileService.existsFile(path).then(function (exists) {\n                        running = false;\n                        if (!exists) {\n                            clearInterval(interval);\n                            resolve(undefined);\n                        }\n                    });\n                }\n            }, 1000);\n        });\n    };\n    TerminalService.prototype._getDefaultShell = function (p) {\n        return terminal_1.getDefaultShell(p);\n    };\n    TerminalService.prototype.selectDefaultWindowsShell = function () {\n        var _this = this;\n        return this._detectWindowsShells().then(function (shells) {\n            var options = {\n                placeHolder: nls.localize('terminal.integrated.chooseWindowsShell', \"Select your preferred terminal shell, you can change this later in your settings\")\n            };\n            return _this._quickInputService.pick(shells, options).then(function (value) {\n                if (!value) {\n                    return undefined;\n                }\n                var shell = value.description;\n                return _this._configurationService.updateValue('terminal.integrated.shell.windows', shell, configuration_1.ConfigurationTarget.USER).then(function () { return shell; });\n            });\n        });\n    };\n    TerminalService.prototype._detectWindowsShells = function () {\n        var _this = this;\n        // Determine the correct System32 path. We want to point to Sysnative\n        // when the 32-bit version of VS Code is running on a 64-bit machine.\n        // The reason for this is because PowerShell's important PSReadline\n        // module doesn't work if this is not the case. See #27915.\n        var is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n        var system32Path = process.env['windir'] + \"\\\\\" + (is32ProcessOn64Windows ? 'Sysnative' : 'System32');\n        var useWSLexe = false;\n        if (terminal_1.getWindowsBuildNumber() >= 16299) {\n            useWSLexe = true;\n        }\n        var expectedLocations = {\n            'Command Prompt': [system32Path + \"\\\\cmd.exe\"],\n            PowerShell: [system32Path + \"\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"],\n            'WSL Bash': [system32Path + \"\\\\\" + (useWSLexe ? 'wsl.exe' : 'bash.exe')],\n            'Git Bash': [\n                process.env['ProgramW6432'] + \"\\\\Git\\\\bin\\\\bash.exe\",\n                process.env['ProgramW6432'] + \"\\\\Git\\\\usr\\\\bin\\\\bash.exe\",\n                process.env['ProgramFiles'] + \"\\\\Git\\\\bin\\\\bash.exe\",\n                process.env['ProgramFiles'] + \"\\\\Git\\\\usr\\\\bin\\\\bash.exe\",\n                process.env['LocalAppData'] + \"\\\\Programs\\\\Git\\\\bin\\\\bash.exe\",\n            ]\n        };\n        var promises = [];\n        Object.keys(expectedLocations).forEach(function (key) { return promises.push(_this._validateShellPaths(key, expectedLocations[key])); });\n        return Promise.all(promises)\n            .then(arrays_1.coalesce)\n            .then(function (results) {\n            return results.map(function (result) {\n                return {\n                    label: result[0],\n                    description: result[1]\n                };\n            });\n        });\n    };\n    TerminalService.prototype._getWindowsBuildNumber = function () {\n        return terminal_1.getWindowsBuildNumber();\n    };\n    /**\n     * Converts a path to a path on WSL using the wslpath utility.\n     * @param path The original path.\n     */\n    TerminalService.prototype._getWslPath = function (path) {\n        if (terminal_1.getWindowsBuildNumber() < 17063) {\n            throw new Error('wslpath does not exist on Windows build < 17063');\n        }\n        return new Promise(function (c) {\n            child_process_1.execFile('bash.exe', ['-c', 'echo $(wslpath ' + terminalEnvironment_1.escapeNonWindowsPath(path) + ')'], {}, function (error, stdout, stderr) {\n                c(terminalEnvironment_1.escapeNonWindowsPath(stdout.trim()));\n            });\n        });\n    };\n    TerminalService = tslib_1.__decorate([\n        tslib_1.__param(0, contextkey_1.IContextKeyService),\n        tslib_1.__param(1, panelService_1.IPanelService),\n        tslib_1.__param(2, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(3, storage_1.IStorageService),\n        tslib_1.__param(4, lifecycle_1.ILifecycleService),\n        tslib_1.__param(5, configuration_1.IConfigurationService),\n        tslib_1.__param(6, instantiation_1.IInstantiationService),\n        tslib_1.__param(7, quickInput_1.IQuickInputService),\n        tslib_1.__param(8, notification_1.INotificationService),\n        tslib_1.__param(9, dialogs_1.IDialogService),\n        tslib_1.__param(10, extensions_1.IExtensionService),\n        tslib_1.__param(11, windows_1.IWindowService),\n        tslib_1.__param(12, files_1.IFileService)\n    ], TerminalService);\n    return TerminalService;\n}(terminalService_1.TerminalService));\nexports.TerminalService = TerminalService;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/terminal/electron-browser/terminalService.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as platform from 'vs/base/common/platform';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleService } from 'vs/platform/lifecycle/common/lifecycle';\nimport { IPanelService } from 'vs/workbench/services/panel/common/panelService';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { ITerminalService, ITerminalConfigHelper } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalService as BrowserTerminalService } from 'vs/workbench/contrib/terminal/browser/terminalService';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { getDefaultShell, linuxDistro, getWindowsBuildNumber } from 'vs/workbench/contrib/terminal/node/terminal';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ipcRenderer as ipc } from 'electron';\nimport { IOpenFileRequest, IWindowService } from 'vs/platform/windows/common/windows';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IQuickInputService, IQuickPickItem, IPickOptions } from 'vs/platform/quickinput/common/quickInput';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { escapeNonWindowsPath } from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { execFile } from 'child_process';\nimport { URI } from 'vs/base/common/uri';\n\nexport class TerminalService extends BrowserTerminalService implements ITerminalService {\n\tpublic get configHelper(): ITerminalConfigHelper { return this._configHelper; }\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IPanelService panelService: IPanelService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWindowService windowService: IWindowService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(contextKeyService, panelService, layoutService, lifecycleService, storageService, notificationService, dialogService, instantiationService, windowService, extensionService, fileService);\n\n\t\tthis._configHelper = this._instantiationService.createInstance(TerminalConfigHelper, linuxDistro);\n\t\tipc.on('vscode:openFiles', (_event: any, request: IOpenFileRequest) => {\n\t\t\t// if the request to open files is coming in from the integrated terminal (identified though\n\t\t\t// the termProgram variable) and we are instructed to wait for editors close, wait for the\n\t\t\t// marker file to get deleted and then focus back to the integrated terminal.\n\t\t\tif (request.termProgram === 'vscode' && request.filesToWait) {\n\t\t\t\tconst waitMarkerFileUri = URI.revive(request.filesToWait.waitMarkerFileUri);\n\t\t\t\tthis.whenDeleted(waitMarkerFileUri).then(() => {\n\t\t\t\t\tif (this.terminalInstances.length > 0) {\n\t\t\t\t\t\tconst terminal = this.getActiveInstance();\n\t\t\t\t\t\tif (terminal) {\n\t\t\t\t\t\t\tterminal.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tipc.on('vscode:osResume', () => {\n\t\t\tconst activeTab = this.getActiveTab();\n\t\t\tif (!activeTab) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactiveTab.terminalInstances.forEach(instance => instance.forceRedraw());\n\t\t});\n\t}\n\n\tprivate whenDeleted(path: URI): Promise<void> {\n\n\t\t// Complete when wait marker file is deleted\n\t\treturn new Promise<void>(resolve => {\n\t\t\tlet running = false;\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tif (!running) {\n\t\t\t\t\trunning = true;\n\t\t\t\t\tthis._fileService.existsFile(path).then(exists => {\n\t\t\t\t\t\trunning = false;\n\n\t\t\t\t\t\tif (!exists) {\n\t\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t});\n\t}\n\n\tprotected _getDefaultShell(p: platform.Platform): string {\n\t\treturn getDefaultShell(p);\n\t}\n\n\tpublic selectDefaultWindowsShell(): Promise<string | undefined> {\n\t\treturn this._detectWindowsShells().then(shells => {\n\t\t\tconst options: IPickOptions<IQuickPickItem> = {\n\t\t\t\tplaceHolder: nls.localize('terminal.integrated.chooseWindowsShell', \"Select your preferred terminal shell, you can change this later in your settings\")\n\t\t\t};\n\t\t\treturn this._quickInputService.pick(shells, options).then(value => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst shell = value.description;\n\t\t\t\treturn this._configurationService.updateValue('terminal.integrated.shell.windows', shell, ConfigurationTarget.USER).then(() => shell);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _detectWindowsShells(): Promise<IQuickPickItem[]> {\n\t\t// Determine the correct System32 path. We want to point to Sysnative\n\t\t// when the 32-bit version of VS Code is running on a 64-bit machine.\n\t\t// The reason for this is because PowerShell's important PSReadline\n\t\t// module doesn't work if this is not the case. See #27915.\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\tconst system32Path = `${process.env['windir']}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}`;\n\n\t\tlet useWSLexe = false;\n\n\t\tif (getWindowsBuildNumber() >= 16299) {\n\t\t\tuseWSLexe = true;\n\t\t}\n\n\t\tconst expectedLocations = {\n\t\t\t'Command Prompt': [`${system32Path}\\\\cmd.exe`],\n\t\t\tPowerShell: [`${system32Path}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`],\n\t\t\t'WSL Bash': [`${system32Path}\\\\${useWSLexe ? 'wsl.exe' : 'bash.exe'}`],\n\t\t\t'Git Bash': [\n\t\t\t\t`${process.env['ProgramW6432']}\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t\t`${process.env['ProgramW6432']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n\t\t\t\t`${process.env['ProgramFiles']}\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t\t`${process.env['ProgramFiles']}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n\t\t\t\t`${process.env['LocalAppData']}\\\\Programs\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t]\n\t\t};\n\t\tconst promises: PromiseLike<[string, string]>[] = [];\n\t\tObject.keys(expectedLocations).forEach(key => promises.push(this._validateShellPaths(key, expectedLocations[key])));\n\t\treturn Promise.all(promises)\n\t\t\t.then(coalesce)\n\t\t\t.then(results => {\n\t\t\t\treturn results.map(result => {\n\t\t\t\t\treturn <IQuickPickItem>{\n\t\t\t\t\t\tlabel: result[0],\n\t\t\t\t\t\tdescription: result[1]\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprotected _getWindowsBuildNumber(): number {\n\t\treturn getWindowsBuildNumber();\n\t}\n\n\t/**\n\t * Converts a path to a path on WSL using the wslpath utility.\n\t * @param path The original path.\n\t */\n\tprotected _getWslPath(path: string): Promise<string> {\n\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\tthrow new Error('wslpath does not exist on Windows build < 17063');\n\t\t}\n\t\treturn new Promise<string>(c => {\n\t\t\texecFile('bash.exe', ['-c', 'echo $(wslpath ' + escapeNonWindowsPath(path) + ')'], {}, (error, stdout, stderr) => {\n\t\t\t\tc(escapeNonWindowsPath(stdout.trim()));\n\t\t\t});\n\t\t});\n\t}\n}\n"]}]}