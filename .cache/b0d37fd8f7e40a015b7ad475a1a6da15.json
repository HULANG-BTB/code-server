{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/preferences/common/preferencesContribution.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/lifecycle\", \"vs/base/common/platform\", \"vs/base/common/resources\", \"vs/base/common/strings\", \"vs/base/common/uri\", \"vs/editor/common/services/modelService\", \"vs/editor/common/services/modeService\", \"vs/editor/common/services/resolverService\", \"vs/platform/configuration/common/configuration\", \"vs/platform/environment/common/environment\", \"vs/platform/jsonschemas/common/jsonContributionRegistry\", \"vs/platform/registry/common/platform\", \"vs/platform/workspace/common/workspace\", \"vs/workbench/services/editor/common/editorService\", \"vs/workbench/services/preferences/common/preferences\"], function (require, exports, lifecycle_1, platform_1, resources_1, strings_1, uri_1, modelService_1, modeService_1, resolverService_1, configuration_1, environment_1, JSONContributionRegistry, platform_2, workspace_1, editorService_1, preferences_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const schemaRegistry = platform_2.Registry.as(JSONContributionRegistry.Extensions.JSONContribution);\n    let PreferencesContribution = class PreferencesContribution {\n        constructor(modelService, textModelResolverService, preferencesService, modeService, editorService, environmentService, workspaceService, configurationService) {\n            this.modelService = modelService;\n            this.textModelResolverService = textModelResolverService;\n            this.preferencesService = preferencesService;\n            this.modeService = modeService;\n            this.editorService = editorService;\n            this.environmentService = environmentService;\n            this.workspaceService = workspaceService;\n            this.configurationService = configurationService;\n            this.settingsListener = this.configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration(preferences_1.USE_SPLIT_JSON_SETTING)) {\n                    this.handleSettingsEditorOverride();\n                }\n            });\n            this.handleSettingsEditorOverride();\n            this.start();\n        }\n        handleSettingsEditorOverride() {\n            // dispose any old listener we had\n            this.editorOpeningListener = lifecycle_1.dispose(this.editorOpeningListener);\n            // install editor opening listener unless user has disabled this\n            if (!!this.configurationService.getValue(preferences_1.USE_SPLIT_JSON_SETTING)) {\n                this.editorOpeningListener = this.editorService.overrideOpenEditor((editor, options, group) => this.onEditorOpening(editor, options, group));\n            }\n        }\n        onEditorOpening(editor, options, group) {\n            const resource = editor.getResource();\n            if (!resource ||\n                !strings_1.endsWith(resource.path, 'settings.json') || // resource must end in settings.json\n                !this.configurationService.getValue(preferences_1.USE_SPLIT_JSON_SETTING) // user has not disabled default settings editor\n            ) {\n                return undefined;\n            }\n            // If the resource was already opened before in the group, do not prevent\n            // the opening of that resource. Otherwise we would have the same settings\n            // opened twice (https://github.com/Microsoft/vscode/issues/36447)\n            if (group.isOpened(editor)) {\n                return undefined;\n            }\n            // Global User Settings File\n            if (resources_1.isEqual(resource, uri_1.URI.file(this.environmentService.appSettingsPath), !platform_1.isLinux)) {\n                return { override: this.preferencesService.openGlobalSettings(true, options, group) };\n            }\n            // Single Folder Workspace Settings File\n            const state = this.workspaceService.getWorkbenchState();\n            if (state === workspace_1.WorkbenchState.FOLDER) {\n                const folders = this.workspaceService.getWorkspace().folders;\n                if (resources_1.isEqual(resource, folders[0].toResource(preferences_1.FOLDER_SETTINGS_PATH))) {\n                    return { override: this.preferencesService.openWorkspaceSettings(true, options, group) };\n                }\n            }\n            // Multi Folder Workspace Settings File\n            else if (state === workspace_1.WorkbenchState.WORKSPACE) {\n                const folders = this.workspaceService.getWorkspace().folders;\n                for (const folder of folders) {\n                    if (resources_1.isEqual(resource, folder.toResource(preferences_1.FOLDER_SETTINGS_PATH))) {\n                        return { override: this.preferencesService.openFolderSettings(folder.uri, true, options, group) };\n                    }\n                }\n            }\n            return undefined;\n        }\n        start() {\n            this.textModelResolverService.registerTextModelContentProvider('vscode', {\n                provideTextContent: (uri) => {\n                    if (uri.scheme !== 'vscode') {\n                        return null;\n                    }\n                    if (uri.authority === 'schemas') {\n                        const schemaModel = this.getSchemaModel(uri);\n                        if (schemaModel) {\n                            return Promise.resolve(schemaModel);\n                        }\n                    }\n                    return this.preferencesService.resolveModel(uri);\n                }\n            });\n        }\n        getSchemaModel(uri) {\n            let schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n            if (schema) {\n                const modelContent = JSON.stringify(schema);\n                const languageSelection = this.modeService.create('jsonc');\n                const model = this.modelService.createModel(modelContent, languageSelection, uri);\n                const disposables = [];\n                disposables.push(schemaRegistry.onDidChangeSchema(schemaUri => {\n                    if (schemaUri === uri.toString()) {\n                        schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n                        model.setValue(JSON.stringify(schema));\n                    }\n                }));\n                disposables.push(model.onWillDispose(() => lifecycle_1.dispose(disposables)));\n                return model;\n            }\n            return null;\n        }\n        dispose() {\n            this.editorOpeningListener = lifecycle_1.dispose(this.editorOpeningListener);\n            this.settingsListener = lifecycle_1.dispose(this.settingsListener);\n        }\n    };\n    PreferencesContribution = __decorate([\n        __param(0, modelService_1.IModelService),\n        __param(1, resolverService_1.ITextModelService),\n        __param(2, preferences_1.IPreferencesService),\n        __param(3, modeService_1.IModeService),\n        __param(4, editorService_1.IEditorService),\n        __param(5, environment_1.IEnvironmentService),\n        __param(6, workspace_1.IWorkspaceContextService),\n        __param(7, configuration_1.IConfigurationService)\n    ], PreferencesContribution);\n    exports.PreferencesContribution = PreferencesContribution;\n});\n",null]}