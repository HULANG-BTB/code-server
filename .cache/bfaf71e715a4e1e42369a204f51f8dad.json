{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/base/common/path.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/base/common/path.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/tree/43dd49c9782848c25e5b03448c8a0f923f13c158\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nvar process = require(\"vs/base/common/process\");\nvar CHAR_UPPERCASE_A = 65; /* A */\nvar CHAR_LOWERCASE_A = 97; /* a */\nvar CHAR_UPPERCASE_Z = 90; /* Z */\nvar CHAR_LOWERCASE_Z = 122; /* z */\nvar CHAR_DOT = 46; /* . */\nvar CHAR_FORWARD_SLASH = 47; /* / */\nvar CHAR_BACKWARD_SLASH = 92; /* \\ */\nvar CHAR_COLON = 58; /* : */\nvar CHAR_QUESTION_MARK = 63; /* ? */\nvar ErrorInvalidArgType = /** @class */ (function (_super) {\n    tslib_1.__extends(ErrorInvalidArgType, _super);\n    function ErrorInvalidArgType(name, expected, actual) {\n        var _this = this;\n        // determiner: 'must be' or 'must not be'\n        var determiner;\n        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n            determiner = 'must not be';\n            expected = expected.replace(/^not /, '');\n        }\n        else {\n            determiner = 'must be';\n        }\n        var type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n        var msg = \"The \\\"\" + name + \"\\\" \" + type + \" \" + determiner + \" of type \" + expected;\n        msg += \". Received type \" + typeof actual;\n        _this = _super.call(this, msg) || this;\n        return _this;\n    }\n    return ErrorInvalidArgType;\n}(Error));\nfunction validateString(value, name) {\n    if (typeof value !== 'string') {\n        throw new ErrorInvalidArgType(name, 'string', value);\n    }\n}\nfunction isPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n    return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z ||\n        code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n    var res = '';\n    var lastSegmentLength = 0;\n    var lastSlash = -1;\n    var dots = 0;\n    var code;\n    for (var i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (isPathSeparator(code)) {\n            break;\n        }\n        else {\n            code = CHAR_FORWARD_SLASH;\n        }\n        if (isPathSeparator(code)) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n                    if (res.length > 2) {\n                        var lastSlashIndex = res.lastIndexOf(separator);\n                        if (lastSlashIndex === -1) {\n                            res = '';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length === 2 || res.length === 1) {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    if (res.length > 0) {\n                        res += separator + \"..\";\n                    }\n                    else {\n                        res = '..';\n                    }\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0) {\n                    res += separator + path.slice(lastSlash + 1, i);\n                }\n                else {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === CHAR_DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nfunction _format(sep, pathObject) {\n    var dir = pathObject.dir || pathObject.root;\n    var base = pathObject.base ||\n        ((pathObject.name || '') + (pathObject.ext || ''));\n    if (!dir) {\n        return base;\n    }\n    if (dir === pathObject.root) {\n        return dir + base;\n    }\n    return dir + sep + base;\n}\nexports.win32 = {\n    // path.resolve([from ...], to)\n    resolve: function () {\n        var pathSegments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            pathSegments[_i] = arguments[_i];\n        }\n        var resolvedDevice = '';\n        var resolvedTail = '';\n        var resolvedAbsolute = false;\n        for (var i = pathSegments.length - 1; i >= -1; i--) {\n            var path = void 0;\n            if (i >= 0) {\n                path = pathSegments[i];\n            }\n            else if (!resolvedDevice) {\n                path = process.cwd();\n            }\n            else {\n                // Windows has the concept of drive-specific current working\n                // directories. If we've resolved a drive letter but not yet an\n                // absolute path, get cwd for that drive, or the process cwd if\n                // the drive cwd is not available. We're sure the device is not\n                // a UNC path at this points, because UNC paths are always absolute.\n                path = process.env['=' + resolvedDevice] || process.cwd();\n                // Verify that a cwd was found and that it actually points\n                // to our drive. If not, default to the drive's root.\n                if (path === undefined ||\n                    path.slice(0, 3).toLowerCase() !==\n                        resolvedDevice.toLowerCase() + '\\\\') {\n                    path = resolvedDevice + '\\\\';\n                }\n            }\n            validateString(path, 'path');\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            var len = path.length;\n            var rootEnd = 0;\n            var device = '';\n            var isAbsolute_1 = false;\n            var code = path.charCodeAt(0);\n            // Try to match a root\n            if (len > 1) {\n                if (isPathSeparator(code)) {\n                    // Possible UNC root\n                    // If we started with a separator, we know we at least have an\n                    // absolute path of some kind (UNC or otherwise)\n                    isAbsolute_1 = true;\n                    if (isPathSeparator(path.charCodeAt(1))) {\n                        // Matched double path separator at beginning\n                        var j = 2;\n                        var last = j;\n                        // Match 1 or more non-path separators\n                        for (; j < len; ++j) {\n                            if (isPathSeparator(path.charCodeAt(j))) {\n                                break;\n                            }\n                        }\n                        if (j < len && j !== last) {\n                            var firstPart = path.slice(last, j);\n                            // Matched!\n                            last = j;\n                            // Match 1 or more path separators\n                            for (; j < len; ++j) {\n                                if (!isPathSeparator(path.charCodeAt(j))) {\n                                    break;\n                                }\n                            }\n                            if (j < len && j !== last) {\n                                // Matched!\n                                last = j;\n                                // Match 1 or more non-path separators\n                                for (; j < len; ++j) {\n                                    if (isPathSeparator(path.charCodeAt(j))) {\n                                        break;\n                                    }\n                                }\n                                if (j === len) {\n                                    // We matched a UNC root only\n                                    device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last);\n                                    rootEnd = j;\n                                }\n                                else if (j !== last) {\n                                    // We matched a UNC root with leftovers\n                                    device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n                                    rootEnd = j;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        rootEnd = 1;\n                    }\n                }\n                else if (isWindowsDeviceRoot(code)) {\n                    // Possible device root\n                    if (path.charCodeAt(1) === CHAR_COLON) {\n                        device = path.slice(0, 2);\n                        rootEnd = 2;\n                        if (len > 2) {\n                            if (isPathSeparator(path.charCodeAt(2))) {\n                                // Treat separator following drive name as an absolute path\n                                // indicator\n                                isAbsolute_1 = true;\n                                rootEnd = 3;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (isPathSeparator(code)) {\n                // `path` contains just a path separator\n                rootEnd = 1;\n                isAbsolute_1 = true;\n            }\n            if (device.length > 0 &&\n                resolvedDevice.length > 0 &&\n                device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n                // This path points to another device so it is not applicable\n                continue;\n            }\n            if (resolvedDevice.length === 0 && device.length > 0) {\n                resolvedDevice = device;\n            }\n            if (!resolvedAbsolute) {\n                resolvedTail = path.slice(rootEnd) + '\\\\' + resolvedTail;\n                resolvedAbsolute = isAbsolute_1;\n            }\n            if (resolvedDevice.length > 0 && resolvedAbsolute) {\n                break;\n            }\n        }\n        // At this point the path should be resolved to a full absolute path,\n        // but handle relative paths to be safe (might happen when process.cwd()\n        // fails)\n        // Normalize the tail path\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n        return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n            '.';\n    },\n    normalize: function (path) {\n        validateString(path, 'path');\n        var len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        var rootEnd = 0;\n        var device;\n        var isAbsolute = false;\n        var code = path.charCodeAt(0);\n        // Try to match a root\n        if (len > 1) {\n            if (isPathSeparator(code)) {\n                // Possible UNC root\n                // If we started with a separator, we know we at least have an absolute\n                // path of some kind (UNC or otherwise)\n                isAbsolute = true;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    var j = 2;\n                    var last = j;\n                    // Match 1 or more non-path separators\n                    for (; j < len; ++j) {\n                        if (isPathSeparator(path.charCodeAt(j))) {\n                            break;\n                        }\n                    }\n                    if (j < len && j !== last) {\n                        var firstPart = path.slice(last, j);\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        for (; j < len; ++j) {\n                            if (!isPathSeparator(path.charCodeAt(j))) {\n                                break;\n                            }\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            for (; j < len; ++j) {\n                                if (isPathSeparator(path.charCodeAt(j))) {\n                                    break;\n                                }\n                            }\n                            if (j === len) {\n                                // We matched a UNC root only\n                                // Return the normalized version of the UNC root since there\n                                // is nothing left to process\n                                return '\\\\\\\\' + firstPart + '\\\\' + path.slice(last) + '\\\\';\n                            }\n                            else if (j !== last) {\n                                // We matched a UNC root with leftovers\n                                device = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n                                rootEnd = j;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rootEnd = 1;\n                }\n            }\n            else if (isWindowsDeviceRoot(code)) {\n                // Possible device root\n                if (path.charCodeAt(1) === CHAR_COLON) {\n                    device = path.slice(0, 2);\n                    rootEnd = 2;\n                    if (len > 2) {\n                        if (isPathSeparator(path.charCodeAt(2))) {\n                            // Treat separator following drive name as an absolute path\n                            // indicator\n                            isAbsolute = true;\n                            rootEnd = 3;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isPathSeparator(code)) {\n            // `path` contains just a path separator, exit early to avoid unnecessary\n            // work\n            return '\\\\';\n        }\n        var tail;\n        if (rootEnd < len) {\n            tail = normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator);\n        }\n        else {\n            tail = '';\n        }\n        if (tail.length === 0 && !isAbsolute) {\n            tail = '.';\n        }\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n            tail += '\\\\';\n        }\n        if (device === undefined) {\n            if (isAbsolute) {\n                if (tail.length > 0) {\n                    return '\\\\' + tail;\n                }\n                else {\n                    return '\\\\';\n                }\n            }\n            else if (tail.length > 0) {\n                return tail;\n            }\n            else {\n                return '';\n            }\n        }\n        else if (isAbsolute) {\n            if (tail.length > 0) {\n                return device + '\\\\' + tail;\n            }\n            else {\n                return device + '\\\\';\n            }\n        }\n        else if (tail.length > 0) {\n            return device + tail;\n        }\n        else {\n            return device;\n        }\n    },\n    isAbsolute: function (path) {\n        validateString(path, 'path');\n        var len = path.length;\n        if (len === 0) {\n            return false;\n        }\n        var code = path.charCodeAt(0);\n        if (isPathSeparator(code)) {\n            return true;\n        }\n        else if (isWindowsDeviceRoot(code)) {\n            // Possible device root\n            if (len > 2 && path.charCodeAt(1) === CHAR_COLON) {\n                if (isPathSeparator(path.charCodeAt(2))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n    join: function () {\n        var paths = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            paths[_i] = arguments[_i];\n        }\n        if (paths.length === 0) {\n            return '.';\n        }\n        var joined;\n        var firstPart;\n        for (var i = 0; i < paths.length; ++i) {\n            var arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = firstPart = arg;\n                }\n                else {\n                    joined += '\\\\' + arg;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        // Make sure that the joined path doesn't start with two slashes, because\n        // normalize() will mistake it for an UNC path then.\n        //\n        // This step is skipped when it is very clear that the user actually\n        // intended to point at an UNC path. This is assumed when the first\n        // non-empty string arguments starts with exactly two slashes followed by\n        // at least one more non-slash character.\n        //\n        // Note that for normalize() to treat a path as an UNC path it needs to\n        // have at least 2 components, so we don't filter for that here.\n        // This means that the user can use join to construct UNC paths from\n        // a server name and a share name; for example:\n        //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n        var needsReplace = true;\n        var slashCount = 0;\n        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n            ++slashCount;\n            var firstLen = firstPart.length;\n            if (firstLen > 1) {\n                if (isPathSeparator(firstPart.charCodeAt(1))) {\n                    ++slashCount;\n                    if (firstLen > 2) {\n                        if (isPathSeparator(firstPart.charCodeAt(2))) {\n                            ++slashCount;\n                        }\n                        else {\n                            // We matched a UNC path in the first part\n                            needsReplace = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (needsReplace) {\n            // Find any more consecutive slashes we need to replace\n            for (; slashCount < joined.length; ++slashCount) {\n                if (!isPathSeparator(joined.charCodeAt(slashCount))) {\n                    break;\n                }\n            }\n            // Replace the slashes if needed\n            if (slashCount >= 2) {\n                joined = '\\\\' + joined.slice(slashCount);\n            }\n        }\n        return exports.win32.normalize(joined);\n    },\n    // It will solve the relative path from `from` to `to`, for instance:\n    //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n    //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n    // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n    relative: function (from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        var fromOrig = exports.win32.resolve(from);\n        var toOrig = exports.win32.resolve(to);\n        if (fromOrig === toOrig) {\n            return '';\n        }\n        from = fromOrig.toLowerCase();\n        to = toOrig.toLowerCase();\n        if (from === to) {\n            return '';\n        }\n        // Trim any leading backslashes\n        var fromStart = 0;\n        for (; fromStart < from.length; ++fromStart) {\n            if (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH) {\n                break;\n            }\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        var fromEnd = from.length;\n        for (; fromEnd - 1 > fromStart; --fromEnd) {\n            if (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH) {\n                break;\n            }\n        }\n        var fromLen = (fromEnd - fromStart);\n        // Trim any leading backslashes\n        var toStart = 0;\n        for (; toStart < to.length; ++toStart) {\n            if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH) {\n                break;\n            }\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        var toEnd = to.length;\n        for (; toEnd - 1 > toStart; --toEnd) {\n            if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH) {\n                break;\n            }\n        }\n        var toLen = (toEnd - toStart);\n        // Compare paths to find the longest common path from root\n        var length = (fromLen < toLen ? fromLen : toLen);\n        var lastCommonSep = -1;\n        var i = 0;\n        for (; i <= length; ++i) {\n            if (i === length) {\n                if (toLen > length) {\n                    if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n                        // We get here if `from` is the exact base path for `to`.\n                        // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n                        return toOrig.slice(toStart + i + 1);\n                    }\n                    else if (i === 2) {\n                        // We get here if `from` is the device root.\n                        // For example: from='C:\\\\'; to='C:\\\\foo'\n                        return toOrig.slice(toStart + i);\n                    }\n                }\n                if (fromLen > length) {\n                    if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n                        // We get here if `to` is the exact base path for `from`.\n                        // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n                        lastCommonSep = i;\n                    }\n                    else if (i === 2) {\n                        // We get here if `to` is the device root.\n                        // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n                        lastCommonSep = 3;\n                    }\n                }\n                break;\n            }\n            var fromCode = from.charCodeAt(fromStart + i);\n            var toCode = to.charCodeAt(toStart + i);\n            if (fromCode !== toCode) {\n                break;\n            }\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        // We found a mismatch before the first common path separator was seen, so\n        // return the original `to`.\n        if (i !== length && lastCommonSep === -1) {\n            return toOrig;\n        }\n        var out = '';\n        if (lastCommonSep === -1) {\n            lastCommonSep = 0;\n        }\n        // Generate the relative path based on the path difference between `to` and\n        // `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n                if (out.length === 0) {\n                    out += '..';\n                }\n                else {\n                    out += '\\\\..';\n                }\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return out + toOrig.slice(toStart + lastCommonSep, toEnd);\n        }\n        else {\n            toStart += lastCommonSep;\n            if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n                ++toStart;\n            }\n            return toOrig.slice(toStart, toEnd);\n        }\n    },\n    toNamespacedPath: function (path) {\n        // Note: this will *probably* throw somewhere.\n        if (typeof path !== 'string') {\n            return path;\n        }\n        if (path.length === 0) {\n            return '';\n        }\n        var resolvedPath = exports.win32.resolve(path);\n        if (resolvedPath.length >= 3) {\n            if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n                // Possible UNC root\n                if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n                    var code = resolvedPath.charCodeAt(2);\n                    if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n                        // Matched non-long UNC root, convert the path to a long UNC path\n                        return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.slice(2);\n                    }\n                }\n            }\n            else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {\n                // Possible device root\n                if (resolvedPath.charCodeAt(1) === CHAR_COLON &&\n                    resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n                    // Matched device root, convert the path to a long UNC path\n                    return '\\\\\\\\?\\\\' + resolvedPath;\n                }\n            }\n        }\n        return path;\n    },\n    dirname: function (path) {\n        validateString(path, 'path');\n        var len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        var rootEnd = -1;\n        var end = -1;\n        var matchedSlash = true;\n        var offset = 0;\n        var code = path.charCodeAt(0);\n        // Try to match a root\n        if (len > 1) {\n            if (isPathSeparator(code)) {\n                // Possible UNC root\n                rootEnd = offset = 1;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    var j = 2;\n                    var last = j;\n                    // Match 1 or more non-path separators\n                    for (; j < len; ++j) {\n                        if (isPathSeparator(path.charCodeAt(j))) {\n                            break;\n                        }\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        for (; j < len; ++j) {\n                            if (!isPathSeparator(path.charCodeAt(j))) {\n                                break;\n                            }\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            for (; j < len; ++j) {\n                                if (isPathSeparator(path.charCodeAt(j))) {\n                                    break;\n                                }\n                            }\n                            if (j === len) {\n                                // We matched a UNC root only\n                                return path;\n                            }\n                            if (j !== last) {\n                                // We matched a UNC root with leftovers\n                                // Offset by 1 to include the separator after the UNC root to\n                                // treat it as a \"normal root\" on top of a (UNC) root\n                                rootEnd = offset = j + 1;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (isWindowsDeviceRoot(code)) {\n                // Possible device root\n                if (path.charCodeAt(1) === CHAR_COLON) {\n                    rootEnd = offset = 2;\n                    if (len > 2) {\n                        if (isPathSeparator(path.charCodeAt(2))) {\n                            rootEnd = offset = 3;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isPathSeparator(code)) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work\n            return path;\n        }\n        for (var i = len - 1; i >= offset; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            if (rootEnd === -1) {\n                return '.';\n            }\n            else {\n                end = rootEnd;\n            }\n        }\n        return path.slice(0, end);\n    },\n    basename: function (path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        var start = 0;\n        var end = -1;\n        var matchedSlash = true;\n        var i;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2) {\n            var drive = path.charCodeAt(0);\n            if (isWindowsDeviceRoot(drive)) {\n                if (path.charCodeAt(1) === CHAR_COLON) {\n                    start = 2;\n                }\n            }\n        }\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext.length === path.length && ext === path) {\n                return '';\n            }\n            var extIdx = ext.length - 1;\n            var firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= start; --i) {\n                var code = path.charCodeAt(i);\n                if (isPathSeparator(code)) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        else {\n            for (i = path.length - 1; i >= start; --i) {\n                if (isPathSeparator(path.charCodeAt(i))) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else if (end === -1) {\n                    // We saw the first non-path separator, mark this as the end of our\n                    // path component\n                    matchedSlash = false;\n                    end = i + 1;\n                }\n            }\n            if (end === -1) {\n                return '';\n            }\n            return path.slice(start, end);\n        }\n    },\n    extname: function (path) {\n        validateString(path, 'path');\n        var start = 0;\n        var startDot = -1;\n        var startPart = 0;\n        var end = -1;\n        var matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        var preDotState = 0;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            path.charCodeAt(1) === CHAR_COLON &&\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\n            start = startPart = 2;\n        }\n        for (var i = path.length - 1; i >= start; --i) {\n            var code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: function (pathObject) {\n        if (pathObject === null || typeof pathObject !== 'object') {\n            throw new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n        }\n        return _format('\\\\', pathObject);\n    },\n    parse: function (path) {\n        validateString(path, 'path');\n        var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        var len = path.length;\n        var rootEnd = 0;\n        var code = path.charCodeAt(0);\n        // Try to match a root\n        if (len > 1) {\n            if (isPathSeparator(code)) {\n                // Possible UNC root\n                rootEnd = 1;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    var j = 2;\n                    var last = j;\n                    // Match 1 or more non-path separators\n                    for (; j < len; ++j) {\n                        if (isPathSeparator(path.charCodeAt(j))) {\n                            break;\n                        }\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        for (; j < len; ++j) {\n                            if (!isPathSeparator(path.charCodeAt(j))) {\n                                break;\n                            }\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            for (; j < len; ++j) {\n                                if (isPathSeparator(path.charCodeAt(j))) {\n                                    break;\n                                }\n                            }\n                            if (j === len) {\n                                // We matched a UNC root only\n                                rootEnd = j;\n                            }\n                            else if (j !== last) {\n                                // We matched a UNC root with leftovers\n                                rootEnd = j + 1;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (isWindowsDeviceRoot(code)) {\n                // Possible device root\n                if (path.charCodeAt(1) === CHAR_COLON) {\n                    rootEnd = 2;\n                    if (len > 2) {\n                        if (isPathSeparator(path.charCodeAt(2))) {\n                            if (len === 3) {\n                                // `path` contains just a drive root, exit early to avoid\n                                // unnecessary work\n                                ret.root = ret.dir = path;\n                                return ret;\n                            }\n                            rootEnd = 3;\n                        }\n                    }\n                    else {\n                        // `path` contains just a drive root, exit early to avoid\n                        // unnecessary work\n                        ret.root = ret.dir = path;\n                        return ret;\n                    }\n                }\n            }\n        }\n        else if (isPathSeparator(code)) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work\n            ret.root = ret.dir = path;\n            return ret;\n        }\n        if (rootEnd > 0) {\n            ret.root = path.slice(0, rootEnd);\n        }\n        var startDot = -1;\n        var startPart = rootEnd;\n        var end = -1;\n        var matchedSlash = true;\n        var i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        var preDotState = 0;\n        // Get non-dir info\n        for (; i >= rootEnd; --i) {\n            code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            if (end !== -1) {\n                ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else {\n            ret.name = path.slice(startPart, startDot);\n            ret.base = path.slice(startPart, end);\n            ret.ext = path.slice(startDot, end);\n        }\n        // If the directory is the root, use the entire root as the `dir` including\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n        if (startPart > 0 && startPart !== rootEnd) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else {\n            ret.dir = ret.root;\n        }\n        return ret;\n    },\n    sep: '\\\\',\n    delimiter: ';',\n    win32: null,\n    posix: null\n};\nexports.posix = {\n    // path.resolve([from ...], to)\n    resolve: function () {\n        var pathSegments = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            pathSegments[_i] = arguments[_i];\n        }\n        var resolvedPath = '';\n        var resolvedAbsolute = false;\n        for (var i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            var path = void 0;\n            if (i >= 0) {\n                path = pathSegments[i];\n            }\n            else {\n                path = process.cwd();\n            }\n            validateString(path, 'path');\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            resolvedPath = path + '/' + resolvedPath;\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n        if (resolvedAbsolute) {\n            if (resolvedPath.length > 0) {\n                return '/' + resolvedPath;\n            }\n            else {\n                return '/';\n            }\n        }\n        else if (resolvedPath.length > 0) {\n            return resolvedPath;\n        }\n        else {\n            return '.';\n        }\n    },\n    normalize: function (path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        var isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        var trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n        // Normalize the path\n        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n        if (path.length === 0 && !isAbsolute) {\n            path = '.';\n        }\n        if (path.length > 0 && trailingSeparator) {\n            path += '/';\n        }\n        if (isAbsolute) {\n            return '/' + path;\n        }\n        return path;\n    },\n    isAbsolute: function (path) {\n        validateString(path, 'path');\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    },\n    join: function () {\n        var paths = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            paths[_i] = arguments[_i];\n        }\n        if (paths.length === 0) {\n            return '.';\n        }\n        var joined;\n        for (var i = 0; i < paths.length; ++i) {\n            var arg = arguments[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = arg;\n                }\n                else {\n                    joined += '/' + arg;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        return exports.posix.normalize(joined);\n    },\n    relative: function (from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        from = exports.posix.resolve(from);\n        to = exports.posix.resolve(to);\n        if (from === to) {\n            return '';\n        }\n        // Trim any leading backslashes\n        var fromStart = 1;\n        for (; fromStart < from.length; ++fromStart) {\n            if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) {\n                break;\n            }\n        }\n        var fromEnd = from.length;\n        var fromLen = (fromEnd - fromStart);\n        // Trim any leading backslashes\n        var toStart = 1;\n        for (; toStart < to.length; ++toStart) {\n            if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) {\n                break;\n            }\n        }\n        var toEnd = to.length;\n        var toLen = (toEnd - toStart);\n        // Compare paths to find the longest common path from root\n        var length = (fromLen < toLen ? fromLen : toLen);\n        var lastCommonSep = -1;\n        var i = 0;\n        for (; i <= length; ++i) {\n            if (i === length) {\n                if (toLen > length) {\n                    if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n                        // We get here if `from` is the exact base path for `to`.\n                        // For example: from='/foo/bar'; to='/foo/bar/baz'\n                        return to.slice(toStart + i + 1);\n                    }\n                    else if (i === 0) {\n                        // We get here if `from` is the root\n                        // For example: from='/'; to='/foo'\n                        return to.slice(toStart + i);\n                    }\n                }\n                else if (fromLen > length) {\n                    if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n                        // We get here if `to` is the exact base path for `from`.\n                        // For example: from='/foo/bar/baz'; to='/foo/bar'\n                        lastCommonSep = i;\n                    }\n                    else if (i === 0) {\n                        // We get here if `to` is the root.\n                        // For example: from='/foo'; to='/'\n                        lastCommonSep = 0;\n                    }\n                }\n                break;\n            }\n            var fromCode = from.charCodeAt(fromStart + i);\n            var toCode = to.charCodeAt(toStart + i);\n            if (fromCode !== toCode) {\n                break;\n            }\n            else if (fromCode === CHAR_FORWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        var out = '';\n        // Generate the relative path based on the path difference between `to`\n        // and `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (out.length === 0) {\n                    out += '..';\n                }\n                else {\n                    out += '/..';\n                }\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return out + to.slice(toStart + lastCommonSep);\n        }\n        else {\n            toStart += lastCommonSep;\n            if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) {\n                ++toStart;\n            }\n            return to.slice(toStart);\n        }\n    },\n    toNamespacedPath: function (path) {\n        // Non-op on posix systems\n        return path;\n    },\n    dirname: function (path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        var hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        var end = -1;\n        var matchedSlash = true;\n        for (var i = path.length - 1; i >= 1; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            return hasRoot ? '/' : '.';\n        }\n        if (hasRoot && end === 1) {\n            return '//';\n        }\n        return path.slice(0, end);\n    },\n    basename: function (path, ext) {\n        if (ext !== undefined) {\n            validateString(ext, 'ext');\n        }\n        validateString(path, 'path');\n        var start = 0;\n        var end = -1;\n        var matchedSlash = true;\n        var i;\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n            if (ext.length === path.length && ext === path) {\n                return '';\n            }\n            var extIdx = ext.length - 1;\n            var firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= 0; --i) {\n                var code = path.charCodeAt(i);\n                if (code === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        else {\n            for (i = path.length - 1; i >= 0; --i) {\n                if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else if (end === -1) {\n                    // We saw the first non-path separator, mark this as the end of our\n                    // path component\n                    matchedSlash = false;\n                    end = i + 1;\n                }\n            }\n            if (end === -1) {\n                return '';\n            }\n            return path.slice(start, end);\n        }\n    },\n    extname: function (path) {\n        validateString(path, 'path');\n        var startDot = -1;\n        var startPart = 0;\n        var end = -1;\n        var matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        var preDotState = 0;\n        for (var i = path.length - 1; i >= 0; --i) {\n            var code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: function (pathObject) {\n        if (pathObject === null || typeof pathObject !== 'object') {\n            throw new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n        }\n        return _format('/', pathObject);\n    },\n    parse: function (path) {\n        validateString(path, 'path');\n        var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        var isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        var start;\n        if (isAbsolute) {\n            ret.root = '/';\n            start = 1;\n        }\n        else {\n            start = 0;\n        }\n        var startDot = -1;\n        var startPart = 0;\n        var end = -1;\n        var matchedSlash = true;\n        var i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        var preDotState = 0;\n        // Get non-dir info\n        for (; i >= start; --i) {\n            var code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            if (end !== -1) {\n                if (startPart === 0 && isAbsolute) {\n                    ret.base = ret.name = path.slice(1, end);\n                }\n                else {\n                    ret.base = ret.name = path.slice(startPart, end);\n                }\n            }\n        }\n        else {\n            if (startPart === 0 && isAbsolute) {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n        if (startPart > 0) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else if (isAbsolute) {\n            ret.dir = '/';\n        }\n        return ret;\n    },\n    sep: '/',\n    delimiter: ':',\n    win32: null,\n    posix: null\n};\nexports.posix.win32 = exports.win32.win32 = exports.win32;\nexports.posix.posix = exports.win32.posix = exports.posix;\nexports.normalize = (process.platform === 'win32' ? exports.win32.normalize : exports.posix.normalize);\nexports.isAbsolute = (process.platform === 'win32' ? exports.win32.isAbsolute : exports.posix.isAbsolute);\nexports.join = (process.platform === 'win32' ? exports.win32.join : exports.posix.join);\nexports.resolve = (process.platform === 'win32' ? exports.win32.resolve : exports.posix.resolve);\nexports.relative = (process.platform === 'win32' ? exports.win32.relative : exports.posix.relative);\nexports.dirname = (process.platform === 'win32' ? exports.win32.dirname : exports.posix.dirname);\nexports.basename = (process.platform === 'win32' ? exports.win32.basename : exports.posix.basename);\nexports.extname = (process.platform === 'win32' ? exports.win32.extname : exports.posix.extname);\nexports.format = (process.platform === 'win32' ? exports.win32.format : exports.posix.format);\nexports.parse = (process.platform === 'win32' ? exports.win32.parse : exports.posix.parse);\nexports.toNamespacedPath = (process.platform === 'win32' ? exports.win32.toNamespacedPath : exports.posix.toNamespacedPath);\nexports.sep = (process.platform === 'win32' ? exports.win32.sep : exports.posix.sep);\nexports.delimiter = (process.platform === 'win32' ? exports.win32.delimiter : exports.posix.delimiter);\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/base/common/path.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/base/common/path.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/tree/43dd49c9782848c25e5b03448c8a0f923f13c158\n\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport * as process from 'vs/base/common/process';\n\nconst CHAR_UPPERCASE_A = 65;/* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\n\nclass ErrorInvalidArgType extends Error {\n\tcode: 'ERR_INVALID_ARG_TYPE';\n\tconstructor(name: string, expected: string, actual: any) {\n\t\t// determiner: 'must be' or 'must not be'\n\t\tlet determiner;\n\t\tif (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n\t\t\tdeterminer = 'must not be';\n\t\t\texpected = expected.replace(/^not /, '');\n\t\t} else {\n\t\t\tdeterminer = 'must be';\n\t\t}\n\n\t\tconst type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n\t\tlet msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n\n\t\tmsg += `. Received type ${typeof actual}`;\n\t\tsuper(msg);\n\t}\n}\n\nfunction validateString(value: string, name: string) {\n\tif (typeof value !== 'string') {\n\t\tthrow new ErrorInvalidArgType(name, 'string', value);\n\t}\n}\n\nfunction isPathSeparator(code: number) {\n\treturn code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\n\nfunction isPosixPathSeparator(code: number) {\n\treturn code === CHAR_FORWARD_SLASH;\n}\n\nfunction isWindowsDeviceRoot(code: number) {\n\treturn code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z ||\n\t\tcode >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path: string, allowAboveRoot: boolean, separator: string, isPathSeparator: (code?: number) => boolean) {\n\tlet res = '';\n\tlet lastSegmentLength = 0;\n\tlet lastSlash = -1;\n\tlet dots = 0;\n\tlet code;\n\tfor (let i = 0; i <= path.length; ++i) {\n\t\tif (i < path.length) {\n\t\t\tcode = path.charCodeAt(i);\n\t\t}\n\t\telse if (isPathSeparator(code)) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tcode = CHAR_FORWARD_SLASH;\n\t\t}\n\n\t\tif (isPathSeparator(code)) {\n\t\t\tif (lastSlash === i - 1 || dots === 1) {\n\t\t\t\t// NOOP\n\t\t\t} else if (lastSlash !== i - 1 && dots === 2) {\n\t\t\t\tif (res.length < 2 || lastSegmentLength !== 2 ||\n\t\t\t\t\tres.charCodeAt(res.length - 1) !== CHAR_DOT ||\n\t\t\t\t\tres.charCodeAt(res.length - 2) !== CHAR_DOT) {\n\t\t\t\t\tif (res.length > 2) {\n\t\t\t\t\t\tconst lastSlashIndex = res.lastIndexOf(separator);\n\t\t\t\t\t\tif (lastSlashIndex === -1) {\n\t\t\t\t\t\t\tres = '';\n\t\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tres = res.slice(0, lastSlashIndex);\n\t\t\t\t\t\t\tlastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (res.length === 2 || res.length === 1) {\n\t\t\t\t\t\tres = '';\n\t\t\t\t\t\tlastSegmentLength = 0;\n\t\t\t\t\t\tlastSlash = i;\n\t\t\t\t\t\tdots = 0;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (allowAboveRoot) {\n\t\t\t\t\tif (res.length > 0) {\n\t\t\t\t\t\tres += `${separator}..`;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tres = '..';\n\t\t\t\t\t}\n\t\t\t\t\tlastSegmentLength = 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (res.length > 0) {\n\t\t\t\t\tres += separator + path.slice(lastSlash + 1, i);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres = path.slice(lastSlash + 1, i);\n\t\t\t\t}\n\t\t\t\tlastSegmentLength = i - lastSlash - 1;\n\t\t\t}\n\t\t\tlastSlash = i;\n\t\t\tdots = 0;\n\t\t} else if (code === CHAR_DOT && dots !== -1) {\n\t\t\t++dots;\n\t\t} else {\n\t\t\tdots = -1;\n\t\t}\n\t}\n\treturn res;\n}\n\nfunction _format(sep: string, pathObject: ParsedPath) {\n\tconst dir = pathObject.dir || pathObject.root;\n\tconst base = pathObject.base ||\n\t\t((pathObject.name || '') + (pathObject.ext || ''));\n\tif (!dir) {\n\t\treturn base;\n\t}\n\tif (dir === pathObject.root) {\n\t\treturn dir + base;\n\t}\n\treturn dir + sep + base;\n}\n\ninterface ParsedPath {\n\troot: string;\n\tdir: string;\n\tbase: string;\n\text: string;\n\tname: string;\n}\n\ninterface IPath {\n\tnormalize(path: string): string;\n\tisAbsolute(path: string): boolean;\n\tjoin(...paths: string[]): string;\n\tresolve(...pathSegments: string[]): string;\n\trelative(from: string, to: string): string;\n\tdirname(path: string): string;\n\tbasename(path: string, ext?: string): string;\n\textname(path: string): string;\n\tformat(pathObject: ParsedPath): string;\n\tparse(path: string): ParsedPath;\n\ttoNamespacedPath(path: string): string;\n\tsep: '\\\\' | '/';\n\tdelimiter: string;\n\twin32: IPath | null;\n\tposix: IPath | null;\n}\n\nexport const win32: IPath = {\n\t// path.resolve([from ...], to)\n\tresolve(...pathSegments: string[]): string {\n\t\tlet resolvedDevice = '';\n\t\tlet resolvedTail = '';\n\t\tlet resolvedAbsolute = false;\n\n\t\tfor (let i = pathSegments.length - 1; i >= -1; i--) {\n\t\t\tlet path;\n\t\t\tif (i >= 0) {\n\t\t\t\tpath = pathSegments[i];\n\t\t\t} else if (!resolvedDevice) {\n\t\t\t\tpath = process.cwd();\n\t\t\t} else {\n\t\t\t\t// Windows has the concept of drive-specific current working\n\t\t\t\t// directories. If we've resolved a drive letter but not yet an\n\t\t\t\t// absolute path, get cwd for that drive, or the process cwd if\n\t\t\t\t// the drive cwd is not available. We're sure the device is not\n\t\t\t\t// a UNC path at this points, because UNC paths are always absolute.\n\t\t\t\tpath = process.env['=' + resolvedDevice] || process.cwd();\n\n\t\t\t\t// Verify that a cwd was found and that it actually points\n\t\t\t\t// to our drive. If not, default to the drive's root.\n\t\t\t\tif (path === undefined ||\n\t\t\t\t\tpath.slice(0, 3).toLowerCase() !==\n\t\t\t\t\tresolvedDevice.toLowerCase() + '\\\\') {\n\t\t\t\t\tpath = resolvedDevice + '\\\\';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvalidateString(path, 'path');\n\n\t\t\t// Skip empty entries\n\t\t\tif (path.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst len = path.length;\n\t\t\tlet rootEnd = 0;\n\t\t\tlet device = '';\n\t\t\tlet isAbsolute = false;\n\t\t\tconst code = path.charCodeAt(0);\n\n\t\t\t// Try to match a root\n\t\t\tif (len > 1) {\n\t\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t\t// Possible UNC root\n\n\t\t\t\t\t// If we started with a separator, we know we at least have an\n\t\t\t\t\t// absolute path of some kind (UNC or otherwise)\n\t\t\t\t\tisAbsolute = true;\n\n\t\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\t\tlet j = 2;\n\t\t\t\t\t\tlet last = j;\n\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\tconst firstPart = path.slice(last, j);\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t\t// We matched a UNC root only\n\n\t\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last);\n\t\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n\t\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEnd = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t\t// Possible device root\n\n\t\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\t\tdevice = path.slice(0, 2);\n\t\t\t\t\t\trootEnd = 2;\n\t\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\t\t// Treat separator following drive name as an absolute path\n\t\t\t\t\t\t\t\t// indicator\n\t\t\t\t\t\t\t\tisAbsolute = true;\n\t\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isPathSeparator(code)) {\n\t\t\t\t// `path` contains just a path separator\n\t\t\t\trootEnd = 1;\n\t\t\t\tisAbsolute = true;\n\t\t\t}\n\n\t\t\tif (device.length > 0 &&\n\t\t\t\tresolvedDevice.length > 0 &&\n\t\t\t\tdevice.toLowerCase() !== resolvedDevice.toLowerCase()) {\n\t\t\t\t// This path points to another device so it is not applicable\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (resolvedDevice.length === 0 && device.length > 0) {\n\t\t\t\tresolvedDevice = device;\n\t\t\t}\n\t\t\tif (!resolvedAbsolute) {\n\t\t\t\tresolvedTail = path.slice(rootEnd) + '\\\\' + resolvedTail;\n\t\t\t\tresolvedAbsolute = isAbsolute;\n\t\t\t}\n\n\t\t\tif (resolvedDevice.length > 0 && resolvedAbsolute) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// At this point the path should be resolved to a full absolute path,\n\t\t// but handle relative paths to be safe (might happen when process.cwd()\n\t\t// fails)\n\n\t\t// Normalize the tail path\n\t\tresolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\',\n\t\t\tisPathSeparator);\n\n\t\treturn (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\n\t\t\t'.';\n\t},\n\n\tnormalize(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet rootEnd = 0;\n\t\tlet device;\n\t\tlet isAbsolute = false;\n\t\tconst code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\t// If we started with a separator, we know we at least have an absolute\n\t\t\t\t// path of some kind (UNC or otherwise)\n\t\t\t\tisAbsolute = true;\n\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\tconst firstPart = path.slice(last, j);\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\t\t\t\t\t\t\t\t// Return the normalized version of the UNC root since there\n\t\t\t\t\t\t\t\t// is nothing left to process\n\n\t\t\t\t\t\t\t\treturn '\\\\\\\\' + firstPart + '\\\\' + path.slice(last) + '\\\\';\n\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\tdevice = '\\\\\\\\' + firstPart + '\\\\' + path.slice(last, j);\n\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trootEnd = 1;\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\tdevice = path.slice(0, 2);\n\t\t\t\t\trootEnd = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\t// Treat separator following drive name as an absolute path\n\t\t\t\t\t\t\t// indicator\n\t\t\t\t\t\t\tisAbsolute = true;\n\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid unnecessary\n\t\t\t// work\n\t\t\treturn '\\\\';\n\t\t}\n\n\t\tlet tail;\n\t\tif (rootEnd < len) {\n\t\t\ttail = normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\',\n\t\t\t\tisPathSeparator);\n\t\t} else {\n\t\t\ttail = '';\n\t\t}\n\t\tif (tail.length === 0 && !isAbsolute) {\n\t\t\ttail = '.';\n\t\t}\n\t\tif (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n\t\t\ttail += '\\\\';\n\t\t}\n\t\tif (device === undefined) {\n\t\t\tif (isAbsolute) {\n\t\t\t\tif (tail.length > 0) {\n\t\t\t\t\treturn '\\\\' + tail;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn '\\\\';\n\t\t\t\t}\n\t\t\t} else if (tail.length > 0) {\n\t\t\t\treturn tail;\n\t\t\t} else {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else if (isAbsolute) {\n\t\t\tif (tail.length > 0) {\n\t\t\t\treturn device + '\\\\' + tail;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn device + '\\\\';\n\t\t\t}\n\t\t} else if (tail.length > 0) {\n\t\t\treturn device + tail;\n\t\t} else {\n\t\t\treturn device;\n\t\t}\n\t},\n\n\tisAbsolute(path: string): boolean {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst code = path.charCodeAt(0);\n\t\tif (isPathSeparator(code)) {\n\t\t\treturn true;\n\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t// Possible device root\n\n\t\t\tif (len > 2 && path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\n\tjoin(...paths: string[]): string {\n\t\tif (paths.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\n\t\tlet joined;\n\t\tlet firstPart: string | undefined;\n\t\tfor (let i = 0; i < paths.length; ++i) {\n\t\t\tconst arg = paths[i];\n\t\t\tvalidateString(arg, 'path');\n\t\t\tif (arg.length > 0) {\n\t\t\t\tif (joined === undefined) {\n\t\t\t\t\tjoined = firstPart = arg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tjoined += '\\\\' + arg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (joined === undefined) {\n\t\t\treturn '.';\n\t\t}\n\n\t\t// Make sure that the joined path doesn't start with two slashes, because\n\t\t// normalize() will mistake it for an UNC path then.\n\t\t//\n\t\t// This step is skipped when it is very clear that the user actually\n\t\t// intended to point at an UNC path. This is assumed when the first\n\t\t// non-empty string arguments starts with exactly two slashes followed by\n\t\t// at least one more non-slash character.\n\t\t//\n\t\t// Note that for normalize() to treat a path as an UNC path it needs to\n\t\t// have at least 2 components, so we don't filter for that here.\n\t\t// This means that the user can use join to construct UNC paths from\n\t\t// a server name and a share name; for example:\n\t\t//   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n\t\tlet needsReplace = true;\n\t\tlet slashCount = 0;\n\t\tif (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n\t\t\t++slashCount;\n\t\t\tconst firstLen = firstPart.length;\n\t\t\tif (firstLen > 1) {\n\t\t\t\tif (isPathSeparator(firstPart.charCodeAt(1))) {\n\t\t\t\t\t++slashCount;\n\t\t\t\t\tif (firstLen > 2) {\n\t\t\t\t\t\tif (isPathSeparator(firstPart.charCodeAt(2))) {\n\t\t\t\t\t\t\t++slashCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// We matched a UNC path in the first part\n\t\t\t\t\t\t\tneedsReplace = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (needsReplace) {\n\t\t\t// Find any more consecutive slashes we need to replace\n\t\t\tfor (; slashCount < joined.length; ++slashCount) {\n\t\t\t\tif (!isPathSeparator(joined.charCodeAt(slashCount))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Replace the slashes if needed\n\t\t\tif (slashCount >= 2) {\n\t\t\t\tjoined = '\\\\' + joined.slice(slashCount);\n\t\t\t}\n\t\t}\n\n\t\treturn win32.normalize(joined);\n\t},\n\n\n\t// It will solve the relative path from `from` to `to`, for instance:\n\t//  from = 'C:\\\\orandea\\\\test\\\\aaa'\n\t//  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n\t// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n\trelative(from: string, to: string): string {\n\t\tvalidateString(from, 'from');\n\t\tvalidateString(to, 'to');\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst fromOrig = win32.resolve(from);\n\t\tconst toOrig = win32.resolve(to);\n\n\t\tif (fromOrig === toOrig) {\n\t\t\treturn '';\n\t\t}\n\n\t\tfrom = fromOrig.toLowerCase();\n\t\tto = toOrig.toLowerCase();\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Trim any leading backslashes\n\t\tlet fromStart = 0;\n\t\tfor (; fromStart < from.length; ++fromStart) {\n\t\t\tif (from.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Trim trailing backslashes (applicable to UNC paths only)\n\t\tlet fromEnd = from.length;\n\t\tfor (; fromEnd - 1 > fromStart; --fromEnd) {\n\t\t\tif (from.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst fromLen = (fromEnd - fromStart);\n\n\t\t// Trim any leading backslashes\n\t\tlet toStart = 0;\n\t\tfor (; toStart < to.length; ++toStart) {\n\t\t\tif (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Trim trailing backslashes (applicable to UNC paths only)\n\t\tlet toEnd = to.length;\n\t\tfor (; toEnd - 1 > toStart; --toEnd) {\n\t\t\tif (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst toLen = (toEnd - toStart);\n\n\t\t// Compare paths to find the longest common path from root\n\t\tconst length = (fromLen < toLen ? fromLen : toLen);\n\t\tlet lastCommonSep = -1;\n\t\tlet i = 0;\n\t\tfor (; i <= length; ++i) {\n\t\t\tif (i === length) {\n\t\t\t\tif (toLen > length) {\n\t\t\t\t\tif (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `from` is the exact base path for `to`.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n\t\t\t\t\t\treturn toOrig.slice(toStart + i + 1);\n\t\t\t\t\t} else if (i === 2) {\n\t\t\t\t\t\t// We get here if `from` is the device root.\n\t\t\t\t\t\t// For example: from='C:\\\\'; to='C:\\\\foo'\n\t\t\t\t\t\treturn toOrig.slice(toStart + i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fromLen > length) {\n\t\t\t\t\tif (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `to` is the exact base path for `from`.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n\t\t\t\t\t\tlastCommonSep = i;\n\t\t\t\t\t} else if (i === 2) {\n\t\t\t\t\t\t// We get here if `to` is the device root.\n\t\t\t\t\t\t// For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n\t\t\t\t\t\tlastCommonSep = 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst fromCode = from.charCodeAt(fromStart + i);\n\t\t\tconst toCode = to.charCodeAt(toStart + i);\n\t\t\tif (fromCode !== toCode) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (fromCode === CHAR_BACKWARD_SLASH) {\n\t\t\t\tlastCommonSep = i;\n\t\t\t}\n\t\t}\n\n\t\t// We found a mismatch before the first common path separator was seen, so\n\t\t// return the original `to`.\n\t\tif (i !== length && lastCommonSep === -1) {\n\t\t\treturn toOrig;\n\t\t}\n\n\t\tlet out = '';\n\t\tif (lastCommonSep === -1) {\n\t\t\tlastCommonSep = 0;\n\t\t}\n\t\t// Generate the relative path based on the path difference between `to` and\n\t\t// `from`\n\t\tfor (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n\t\t\tif (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n\t\t\t\tif (out.length === 0) {\n\t\t\t\t\tout += '..';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout += '\\\\..';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lastly, append the rest of the destination (`to`) path that comes after\n\t\t// the common path parts\n\t\tif (out.length > 0) {\n\t\t\treturn out + toOrig.slice(toStart + lastCommonSep, toEnd);\n\t\t}\n\t\telse {\n\t\t\ttoStart += lastCommonSep;\n\t\t\tif (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t++toStart;\n\t\t\t}\n\t\t\treturn toOrig.slice(toStart, toEnd);\n\t\t}\n\t},\n\n\ttoNamespacedPath(path: string): string {\n\t\t// Note: this will *probably* throw somewhere.\n\t\tif (typeof path !== 'string') {\n\t\t\treturn path;\n\t\t}\n\n\t\tif (path.length === 0) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst resolvedPath = win32.resolve(path);\n\n\t\tif (resolvedPath.length >= 3) {\n\t\t\tif (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\tif (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\tconst code = resolvedPath.charCodeAt(2);\n\t\t\t\t\tif (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n\t\t\t\t\t\t// Matched non-long UNC root, convert the path to a long UNC path\n\t\t\t\t\t\treturn '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.slice(2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (resolvedPath.charCodeAt(1) === CHAR_COLON &&\n\t\t\t\t\tresolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n\t\t\t\t\t// Matched device root, convert the path to a long UNC path\n\t\t\t\t\treturn '\\\\\\\\?\\\\' + resolvedPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn path;\n\t},\n\n\tdirname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tconst len = path.length;\n\t\tif (len === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet rootEnd = -1;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet offset = 0;\n\t\tconst code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\trootEnd = offset = 1;\n\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\t\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\t// Offset by 1 to include the separator after the UNC root to\n\t\t\t\t\t\t\t\t// treat it as a \"normal root\" on top of a (UNC) root\n\t\t\t\t\t\t\t\trootEnd = offset = j + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\trootEnd = offset = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\trootEnd = offset = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid\n\t\t\t// unnecessary work\n\t\t\treturn path;\n\t\t}\n\n\t\tfor (let i = len - 1; i >= offset; --i) {\n\t\t\tif (isPathSeparator(path.charCodeAt(i))) {\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We saw the first non-path separator\n\t\t\t\tmatchedSlash = false;\n\t\t\t}\n\t\t}\n\n\t\tif (end === -1) {\n\t\t\tif (rootEnd === -1) {\n\t\t\t\treturn '.';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tend = rootEnd;\n\t\t\t}\n\t\t}\n\t\treturn path.slice(0, end);\n\t},\n\n\tbasename(path: string, ext?: string): string {\n\t\tif (ext !== undefined) {\n\t\t\tvalidateString(ext, 'ext');\n\t\t}\n\t\tvalidateString(path, 'path');\n\t\tlet start = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i;\n\n\t\t// Check for a drive letter prefix so as not to mistake the following\n\t\t// path separator as an extra separator at the end of the path that can be\n\t\t// disregarded\n\t\tif (path.length >= 2) {\n\t\t\tconst drive = path.charCodeAt(0);\n\t\t\tif (isWindowsDeviceRoot(drive)) {\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\tstart = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n\t\t\tif (ext.length === path.length && ext === path) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet extIdx = ext.length - 1;\n\t\t\tlet firstNonSlashEnd = -1;\n\t\t\tfor (i = path.length - 1; i >= start; --i) {\n\t\t\t\tconst code = path.charCodeAt(i);\n\t\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (firstNonSlashEnd === -1) {\n\t\t\t\t\t\t// We saw the first non-path separator, remember this index in case\n\t\t\t\t\t\t// we need it if the extension ends up not matching\n\t\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\t\tfirstNonSlashEnd = i + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (extIdx >= 0) {\n\t\t\t\t\t\t// Try to match the explicit extension\n\t\t\t\t\t\tif (code === ext.charCodeAt(extIdx)) {\n\t\t\t\t\t\t\tif (--extIdx === -1) {\n\t\t\t\t\t\t\t\t// We matched the extension, so mark this as the end of our path\n\t\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Extension does not match, so our result is the entire path\n\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\textIdx = -1;\n\t\t\t\t\t\t\tend = firstNonSlashEnd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === end) {\n\t\t\t\tend = firstNonSlashEnd;\n\t\t\t}\n\t\t\telse if (end === -1) {\n\t\t\t\tend = path.length;\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t} else {\n\t\t\tfor (i = path.length - 1; i >= start; --i) {\n\t\t\t\tif (isPathSeparator(path.charCodeAt(i))) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (end === -1) {\n\t\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t\t// path component\n\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\tend = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end === -1) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t}\n\t},\n\n\textname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tlet start = 0;\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Check for a drive letter prefix so as not to mistake the following\n\t\t// path separator as an extra separator at the end of the path that can be\n\t\t// disregarded\n\n\t\tif (path.length >= 2 &&\n\t\t\tpath.charCodeAt(1) === CHAR_COLON &&\n\t\t\tisWindowsDeviceRoot(path.charCodeAt(0))) {\n\t\t\tstart = startPart = 2;\n\t\t}\n\n\t\tfor (let i = path.length - 1; i >= start; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn path.slice(startDot, end);\n\t},\n\n\tformat(pathObject): string {\n\t\tif (pathObject === null || typeof pathObject !== 'object') {\n\t\t\tthrow new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n\t\t}\n\n\t\treturn _format('\\\\', pathObject);\n\t},\n\n\n\tparse(path) {\n\t\tvalidateString(path, 'path');\n\n\t\tconst ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\t\tif (path.length === 0) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tconst len = path.length;\n\t\tlet rootEnd = 0;\n\t\tlet code = path.charCodeAt(0);\n\n\t\t// Try to match a root\n\t\tif (len > 1) {\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// Possible UNC root\n\n\t\t\t\trootEnd = 1;\n\t\t\t\tif (isPathSeparator(path.charCodeAt(1))) {\n\t\t\t\t\t// Matched double path separator at beginning\n\t\t\t\t\tlet j = 2;\n\t\t\t\t\tlet last = j;\n\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t// Match 1 or more path separators\n\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\tif (!isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (j < len && j !== last) {\n\t\t\t\t\t\t\t// Matched!\n\t\t\t\t\t\t\tlast = j;\n\t\t\t\t\t\t\t// Match 1 or more non-path separators\n\t\t\t\t\t\t\tfor (; j < len; ++j) {\n\t\t\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(j))) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (j === len) {\n\t\t\t\t\t\t\t\t// We matched a UNC root only\n\n\t\t\t\t\t\t\t\trootEnd = j;\n\t\t\t\t\t\t\t} else if (j !== last) {\n\t\t\t\t\t\t\t\t// We matched a UNC root with leftovers\n\n\t\t\t\t\t\t\t\trootEnd = j + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (isWindowsDeviceRoot(code)) {\n\t\t\t\t// Possible device root\n\n\t\t\t\tif (path.charCodeAt(1) === CHAR_COLON) {\n\t\t\t\t\trootEnd = 2;\n\t\t\t\t\tif (len > 2) {\n\t\t\t\t\t\tif (isPathSeparator(path.charCodeAt(2))) {\n\t\t\t\t\t\t\tif (len === 3) {\n\t\t\t\t\t\t\t\t// `path` contains just a drive root, exit early to avoid\n\t\t\t\t\t\t\t\t// unnecessary work\n\t\t\t\t\t\t\t\tret.root = ret.dir = path;\n\t\t\t\t\t\t\t\treturn ret;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trootEnd = 3;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// `path` contains just a drive root, exit early to avoid\n\t\t\t\t\t\t// unnecessary work\n\t\t\t\t\t\tret.root = ret.dir = path;\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (isPathSeparator(code)) {\n\t\t\t// `path` contains just a path separator, exit early to avoid\n\t\t\t// unnecessary work\n\t\t\tret.root = ret.dir = path;\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (rootEnd > 0) {\n\t\t\tret.root = path.slice(0, rootEnd);\n\t\t}\n\n\t\tlet startDot = -1;\n\t\tlet startPart = rootEnd;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i = path.length - 1;\n\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Get non-dir info\n\t\tfor (; i >= rootEnd; --i) {\n\t\t\tcode = path.charCodeAt(i);\n\t\t\tif (isPathSeparator(code)) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\tif (end !== -1) {\n\t\t\t\tret.base = ret.name = path.slice(startPart, end);\n\t\t\t}\n\t\t} else {\n\t\t\tret.name = path.slice(startPart, startDot);\n\t\t\tret.base = path.slice(startPart, end);\n\t\t\tret.ext = path.slice(startDot, end);\n\t\t}\n\n\t\t// If the directory is the root, use the entire root as the `dir` including\n\t\t// the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n\t\t// trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n\t\tif (startPart > 0 && startPart !== rootEnd) {\n\t\t\tret.dir = path.slice(0, startPart - 1);\n\t\t}\n\t\telse {\n\t\t\tret.dir = ret.root;\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tsep: '\\\\',\n\tdelimiter: ';',\n\twin32: null,\n\tposix: null\n};\n\nexport const posix: IPath = {\n\t// path.resolve([from ...], to)\n\tresolve(...pathSegments: string[]): string {\n\t\tlet resolvedPath = '';\n\t\tlet resolvedAbsolute = false;\n\n\t\tfor (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n\t\t\tlet path;\n\t\t\tif (i >= 0) {\n\t\t\t\tpath = pathSegments[i];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpath = process.cwd();\n\t\t\t}\n\n\t\t\tvalidateString(path, 'path');\n\n\t\t\t// Skip empty entries\n\t\t\tif (path.length === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresolvedPath = path + '/' + resolvedPath;\n\t\t\tresolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\t}\n\n\t\t// At this point the path should be resolved to a full absolute path, but\n\t\t// handle relative paths to be safe (might happen when process.cwd() fails)\n\n\t\t// Normalize the path\n\t\tresolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',\n\t\t\tisPosixPathSeparator);\n\n\t\tif (resolvedAbsolute) {\n\t\t\tif (resolvedPath.length > 0) {\n\t\t\t\treturn '/' + resolvedPath;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn '/';\n\t\t\t}\n\t\t} else if (resolvedPath.length > 0) {\n\t\t\treturn resolvedPath;\n\t\t} else {\n\t\t\treturn '.';\n\t\t}\n\t},\n\n\tnormalize(path: string): string {\n\t\tvalidateString(path, 'path');\n\n\t\tif (path.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\n\t\tconst isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tconst trailingSeparator =\n\t\t\tpath.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n\t\t// Normalize the path\n\t\tpath = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n\n\t\tif (path.length === 0 && !isAbsolute) {\n\t\t\tpath = '.';\n\t\t}\n\t\tif (path.length > 0 && trailingSeparator) {\n\t\t\tpath += '/';\n\t\t}\n\n\t\tif (isAbsolute) {\n\t\t\treturn '/' + path;\n\t\t}\n\t\treturn path;\n\t},\n\n\tisAbsolute(path: string): boolean {\n\t\tvalidateString(path, 'path');\n\t\treturn path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t},\n\n\tjoin(...paths: string[]): string {\n\t\tif (paths.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tlet joined;\n\t\tfor (let i = 0; i < paths.length; ++i) {\n\t\t\tconst arg = arguments[i];\n\t\t\tvalidateString(arg, 'path');\n\t\t\tif (arg.length > 0) {\n\t\t\t\tif (joined === undefined) {\n\t\t\t\t\tjoined = arg;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tjoined += '/' + arg;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (joined === undefined) {\n\t\t\treturn '.';\n\t\t}\n\t\treturn posix.normalize(joined);\n\t},\n\n\trelative(from: string, to: string): string {\n\t\tvalidateString(from, 'from');\n\t\tvalidateString(to, 'to');\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\tfrom = posix.resolve(from);\n\t\tto = posix.resolve(to);\n\n\t\tif (from === to) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Trim any leading backslashes\n\t\tlet fromStart = 1;\n\t\tfor (; fromStart < from.length; ++fromStart) {\n\t\t\tif (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst fromEnd = from.length;\n\t\tconst fromLen = (fromEnd - fromStart);\n\n\t\t// Trim any leading backslashes\n\t\tlet toStart = 1;\n\t\tfor (; toStart < to.length; ++toStart) {\n\t\t\tif (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst toEnd = to.length;\n\t\tconst toLen = (toEnd - toStart);\n\n\t\t// Compare paths to find the longest common path from root\n\t\tconst length = (fromLen < toLen ? fromLen : toLen);\n\t\tlet lastCommonSep = -1;\n\t\tlet i = 0;\n\t\tfor (; i <= length; ++i) {\n\t\t\tif (i === length) {\n\t\t\t\tif (toLen > length) {\n\t\t\t\t\tif (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `from` is the exact base path for `to`.\n\t\t\t\t\t\t// For example: from='/foo/bar'; to='/foo/bar/baz'\n\t\t\t\t\t\treturn to.slice(toStart + i + 1);\n\t\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t\t// We get here if `from` is the root\n\t\t\t\t\t\t// For example: from='/'; to='/foo'\n\t\t\t\t\t\treturn to.slice(toStart + i);\n\t\t\t\t\t}\n\t\t\t\t} else if (fromLen > length) {\n\t\t\t\t\tif (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t\t// We get here if `to` is the exact base path for `from`.\n\t\t\t\t\t\t// For example: from='/foo/bar/baz'; to='/foo/bar'\n\t\t\t\t\t\tlastCommonSep = i;\n\t\t\t\t\t} else if (i === 0) {\n\t\t\t\t\t\t// We get here if `to` is the root.\n\t\t\t\t\t\t// For example: from='/foo'; to='/'\n\t\t\t\t\t\tlastCommonSep = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst fromCode = from.charCodeAt(fromStart + i);\n\t\t\tconst toCode = to.charCodeAt(toStart + i);\n\t\t\tif (fromCode !== toCode) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (fromCode === CHAR_FORWARD_SLASH) {\n\t\t\t\tlastCommonSep = i;\n\t\t\t}\n\t\t}\n\n\t\tlet out = '';\n\t\t// Generate the relative path based on the path difference between `to`\n\t\t// and `from`\n\t\tfor (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n\t\t\tif (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\tif (out.length === 0) {\n\t\t\t\t\tout += '..';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout += '/..';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Lastly, append the rest of the destination (`to`) path that comes after\n\t\t// the common path parts\n\t\tif (out.length > 0) {\n\t\t\treturn out + to.slice(toStart + lastCommonSep);\n\t\t}\n\t\telse {\n\t\t\ttoStart += lastCommonSep;\n\t\t\tif (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) {\n\t\t\t\t++toStart;\n\t\t\t}\n\t\t\treturn to.slice(toStart);\n\t\t}\n\t},\n\n\ttoNamespacedPath(path: string): string {\n\t\t// Non-op on posix systems\n\t\treturn path;\n\t},\n\n\tdirname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tif (path.length === 0) {\n\t\t\treturn '.';\n\t\t}\n\t\tconst hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tfor (let i = path.length - 1; i >= 1; --i) {\n\t\t\tif (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tend = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We saw the first non-path separator\n\t\t\t\tmatchedSlash = false;\n\t\t\t}\n\t\t}\n\n\t\tif (end === -1) {\n\t\t\treturn hasRoot ? '/' : '.';\n\t\t}\n\t\tif (hasRoot && end === 1) {\n\t\t\treturn '//';\n\t\t}\n\t\treturn path.slice(0, end);\n\t},\n\n\tbasename(path: string, ext?: string): string {\n\t\tif (ext !== undefined) {\n\t\t\tvalidateString(ext, 'ext');\n\t\t}\n\t\tvalidateString(path, 'path');\n\n\t\tlet start = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i;\n\n\t\tif (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n\t\t\tif (ext.length === path.length && ext === path) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet extIdx = ext.length - 1;\n\t\t\tlet firstNonSlashEnd = -1;\n\t\t\tfor (i = path.length - 1; i >= 0; --i) {\n\t\t\t\tconst code = path.charCodeAt(i);\n\t\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (firstNonSlashEnd === -1) {\n\t\t\t\t\t\t// We saw the first non-path separator, remember this index in case\n\t\t\t\t\t\t// we need it if the extension ends up not matching\n\t\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\t\tfirstNonSlashEnd = i + 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (extIdx >= 0) {\n\t\t\t\t\t\t// Try to match the explicit extension\n\t\t\t\t\t\tif (code === ext.charCodeAt(extIdx)) {\n\t\t\t\t\t\t\tif (--extIdx === -1) {\n\t\t\t\t\t\t\t\t// We matched the extension, so mark this as the end of our path\n\t\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Extension does not match, so our result is the entire path\n\t\t\t\t\t\t\t// component\n\t\t\t\t\t\t\textIdx = -1;\n\t\t\t\t\t\t\tend = firstNonSlashEnd;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (start === end) {\n\t\t\t\tend = firstNonSlashEnd;\n\t\t\t}\n\t\t\telse if (end === -1) {\n\t\t\t\tend = path.length;\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t} else {\n\t\t\tfor (i = path.length - 1; i >= 0; --i) {\n\t\t\t\tif (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n\t\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (end === -1) {\n\t\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t\t// path component\n\t\t\t\t\tmatchedSlash = false;\n\t\t\t\t\tend = i + 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end === -1) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn path.slice(start, end);\n\t\t}\n\t},\n\n\textname(path: string): string {\n\t\tvalidateString(path, 'path');\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\t\tfor (let i = path.length - 1; i >= 0; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\treturn '';\n\t\t}\n\t\treturn path.slice(startDot, end);\n\t},\n\n\tformat(pathObject): string {\n\t\tif (pathObject === null || typeof pathObject !== 'object') {\n\t\t\tthrow new ErrorInvalidArgType('pathObject', 'Object', pathObject);\n\t\t}\n\n\t\treturn _format('/', pathObject);\n\t},\n\n\tparse(path: string): ParsedPath {\n\t\tvalidateString(path, 'path');\n\n\t\tconst ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\t\tif (path.length === 0) {\n\t\t\treturn ret;\n\t\t}\n\t\tconst isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n\t\tlet start;\n\t\tif (isAbsolute) {\n\t\t\tret.root = '/';\n\t\t\tstart = 1;\n\t\t} else {\n\t\t\tstart = 0;\n\t\t}\n\t\tlet startDot = -1;\n\t\tlet startPart = 0;\n\t\tlet end = -1;\n\t\tlet matchedSlash = true;\n\t\tlet i = path.length - 1;\n\n\t\t// Track the state of characters (if any) we see before our first dot and\n\t\t// after any path separator we find\n\t\tlet preDotState = 0;\n\n\t\t// Get non-dir info\n\t\tfor (; i >= start; --i) {\n\t\t\tconst code = path.charCodeAt(i);\n\t\t\tif (code === CHAR_FORWARD_SLASH) {\n\t\t\t\t// If we reached a path separator that was not part of a set of path\n\t\t\t\t// separators at the end of the string, stop now\n\t\t\t\tif (!matchedSlash) {\n\t\t\t\t\tstartPart = i + 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (end === -1) {\n\t\t\t\t// We saw the first non-path separator, mark this as the end of our\n\t\t\t\t// extension\n\t\t\t\tmatchedSlash = false;\n\t\t\t\tend = i + 1;\n\t\t\t}\n\t\t\tif (code === CHAR_DOT) {\n\t\t\t\t// If this is our first dot, mark it as the start of our extension\n\t\t\t\tif (startDot === -1) {\n\t\t\t\t\tstartDot = i;\n\t\t\t\t}\n\t\t\t\telse if (preDotState !== 1) {\n\t\t\t\t\tpreDotState = 1;\n\t\t\t\t}\n\t\t\t} else if (startDot !== -1) {\n\t\t\t\t// We saw a non-dot and non-path separator before our dot, so we should\n\t\t\t\t// have a good chance at having a non-empty extension\n\t\t\t\tpreDotState = -1;\n\t\t\t}\n\t\t}\n\n\t\tif (startDot === -1 ||\n\t\t\tend === -1 ||\n\t\t\t// We saw a non-dot character immediately before the dot\n\t\t\tpreDotState === 0 ||\n\t\t\t// The (right-most) trimmed path component is exactly '..'\n\t\t\t(preDotState === 1 &&\n\t\t\t\tstartDot === end - 1 &&\n\t\t\t\tstartDot === startPart + 1)) {\n\t\t\tif (end !== -1) {\n\t\t\t\tif (startPart === 0 && isAbsolute) {\n\t\t\t\t\tret.base = ret.name = path.slice(1, end);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret.base = ret.name = path.slice(startPart, end);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (startPart === 0 && isAbsolute) {\n\t\t\t\tret.name = path.slice(1, startDot);\n\t\t\t\tret.base = path.slice(1, end);\n\t\t\t} else {\n\t\t\t\tret.name = path.slice(startPart, startDot);\n\t\t\t\tret.base = path.slice(startPart, end);\n\t\t\t}\n\t\t\tret.ext = path.slice(startDot, end);\n\t\t}\n\n\t\tif (startPart > 0) {\n\t\t\tret.dir = path.slice(0, startPart - 1);\n\t\t}\n\t\telse if (isAbsolute) {\n\t\t\tret.dir = '/';\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tsep: '/',\n\tdelimiter: ':',\n\twin32: null,\n\tposix: null\n};\n\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\n\nexport const normalize = (process.platform === 'win32' ? win32.normalize : posix.normalize);\nexport const isAbsolute = (process.platform === 'win32' ? win32.isAbsolute : posix.isAbsolute);\nexport const join = (process.platform === 'win32' ? win32.join : posix.join);\nexport const resolve = (process.platform === 'win32' ? win32.resolve : posix.resolve);\nexport const relative = (process.platform === 'win32' ? win32.relative : posix.relative);\nexport const dirname = (process.platform === 'win32' ? win32.dirname : posix.dirname);\nexport const basename = (process.platform === 'win32' ? win32.basename : posix.basename);\nexport const extname = (process.platform === 'win32' ? win32.extname : posix.extname);\nexport const format = (process.platform === 'win32' ? win32.format : posix.format);\nexport const parse = (process.platform === 'win32' ? win32.parse : posix.parse);\nexport const toNamespacedPath = (process.platform === 'win32' ? win32.toNamespacedPath : posix.toNamespacedPath);\nexport const sep = (process.platform === 'win32' ? win32.sep : posix.sep);\nexport const delimiter = (process.platform === 'win32' ? win32.delimiter : posix.delimiter);\n"]}]}