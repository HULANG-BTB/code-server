{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar marked = require(\"vs/base/common/marked/marked\");\nvar platform_1 = require(\"vs/base/common/platform\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar request_1 = require(\"vs/base/node/request\");\nvar modes_1 = require(\"vs/editor/common/modes\");\nvar tokenization_1 = require(\"vs/editor/common/modes/supports/tokenization\");\nvar textToHtmlTokenizer_1 = require(\"vs/editor/common/modes/textToHtmlTokenizer\");\nvar modeService_1 = require(\"vs/editor/common/services/modeService\");\nvar nls = require(\"vs/nls\");\nvar environment_1 = require(\"vs/platform/environment/common/environment\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar opener_1 = require(\"vs/platform/opener/common/opener\");\nvar request_2 = require(\"vs/platform/request/node/request\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar telemetryNodeUtils_1 = require(\"vs/platform/telemetry/node/telemetryNodeUtils\");\nvar webviewEditorService_1 = require(\"vs/workbench/contrib/webview/electron-browser/webviewEditorService\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar keybindingParser_1 = require(\"vs/base/common/keybindingParser\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar extensions_1 = require(\"vs/workbench/services/extensions/common/extensions\");\nvar editorGroupsService_1 = require(\"vs/workbench/services/editor/common/editorGroupsService\");\nfunction renderBody(body, css) {\n    var styleSheetPath = require.toUrl('./media/markdown.css').replace('file://', 'vscode-core-resource://');\n    return \"<!DOCTYPE html>\\n\\t\\t<html>\\n\\t\\t\\t<head>\\n\\t\\t\\t\\t<base href=\\\"https://code.visualstudio.com/raw/\\\">\\n\\t\\t\\t\\t<meta http-equiv=\\\"Content-type\\\" content=\\\"text/html;charset=UTF-8\\\">\\n\\t\\t\\t\\t<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource: https: 'unsafe-inline'; child-src 'none'; frame-src 'none';\\\">\\n\\t\\t\\t\\t<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" + styleSheetPath + \"\\\">\\n\\t\\t\\t\\t<style>\" + css + \"</style>\\n\\t\\t\\t</head>\\n\\t\\t\\t<body>\" + body + \"</body>\\n\\t\\t</html>\";\n}\nvar ReleaseNotesManager = /** @class */ (function () {\n    function ReleaseNotesManager(_environmentService, _keybindingService, _modeService, _openerService, _requestService, _telemetryService, _editorService, _editorGroupService, _webviewEditorService, _extensionService) {\n        var _this = this;\n        this._environmentService = _environmentService;\n        this._keybindingService = _keybindingService;\n        this._modeService = _modeService;\n        this._openerService = _openerService;\n        this._requestService = _requestService;\n        this._telemetryService = _telemetryService;\n        this._editorService = _editorService;\n        this._editorGroupService = _editorGroupService;\n        this._webviewEditorService = _webviewEditorService;\n        this._extensionService = _extensionService;\n        this._releaseNotesCache = Object.create(null);\n        this._currentReleaseNotes = undefined;\n        modes_1.TokenizationRegistry.onDidChange(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var html;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._currentReleaseNotes || !this._lastText) {\n                            return [2 /*return*/];\n                        }\n                        return [4 /*yield*/, this.renderBody(this._lastText)];\n                    case 1:\n                        html = _a.sent();\n                        if (this._currentReleaseNotes) {\n                            this._currentReleaseNotes.html = html;\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    }\n    ReleaseNotesManager.prototype.show = function (accessor, version) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var releaseNoteText, html, title, activeControl, iconPath;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.loadReleaseNotes(version)];\n                    case 1:\n                        releaseNoteText = _a.sent();\n                        this._lastText = releaseNoteText;\n                        return [4 /*yield*/, this.renderBody(releaseNoteText)];\n                    case 2:\n                        html = _a.sent();\n                        title = nls.localize('releaseNotesInputName', \"Release Notes: {0}\", version);\n                        activeControl = this._editorService.activeControl;\n                        if (this._currentReleaseNotes) {\n                            this._currentReleaseNotes.setName(title);\n                            this._currentReleaseNotes.html = html;\n                            this._webviewEditorService.revealWebview(this._currentReleaseNotes, activeControl ? activeControl.group : this._editorGroupService.activeGroup, false);\n                        }\n                        else {\n                            this._currentReleaseNotes = this._webviewEditorService.createWebview('releaseNotes', title, { group: editorService_1.ACTIVE_GROUP, preserveFocus: false }, { tryRestoreScrollPosition: true, enableFindWidget: true }, undefined, {\n                                onDidClickLink: function (uri) { return _this.onDidClickLink(uri); },\n                                onDispose: function () { _this._currentReleaseNotes = undefined; }\n                            });\n                            iconPath = uri_1.URI.parse(require.toUrl('./media/code-icon.svg'));\n                            this._currentReleaseNotes.iconPath = {\n                                light: iconPath,\n                                dark: iconPath\n                            };\n                            this._currentReleaseNotes.html = html;\n                        }\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    ReleaseNotesManager.prototype.loadReleaseNotes = function (version) {\n        var _this = this;\n        var match = /^(\\d+\\.\\d+)\\./.exec(version);\n        if (!match) {\n            return Promise.reject(new Error('not found'));\n        }\n        var versionLabel = match[1].replace(/\\./g, '_');\n        var baseUrl = 'https://code.visualstudio.com/raw';\n        var url = baseUrl + \"/v\" + versionLabel + \".md\";\n        var unassigned = nls.localize('unassigned', \"unassigned\");\n        var patchKeybindings = function (text) {\n            var kb = function (match, kb) {\n                var keybinding = _this._keybindingService.lookupKeybinding(kb);\n                if (!keybinding) {\n                    return unassigned;\n                }\n                return keybinding.getLabel() || unassigned;\n            };\n            var kbstyle = function (match, kb) {\n                var keybinding = keybindingParser_1.KeybindingParser.parseKeybinding(kb, platform_1.OS);\n                if (!keybinding) {\n                    return unassigned;\n                }\n                var resolvedKeybindings = _this._keybindingService.resolveKeybinding(keybinding);\n                if (resolvedKeybindings.length === 0) {\n                    return unassigned;\n                }\n                return resolvedKeybindings[0].getLabel() || unassigned;\n            };\n            return text\n                .replace(/kb\\(([a-z.\\d\\-]+)\\)/gi, kb)\n                .replace(/kbstyle\\(([^\\)]+)\\)/gi, kbstyle);\n        };\n        if (!this._releaseNotesCache[version]) {\n            this._releaseNotesCache[version] = this._requestService.request({ url: url }, cancellation_1.CancellationToken.None)\n                .then(request_1.asText)\n                .then(function (text) {\n                if (!text || !/^#\\s/.test(text)) { // release notes always starts with `#` followed by whitespace\n                    return Promise.reject(new Error('Invalid release notes'));\n                }\n                return Promise.resolve(text);\n            })\n                .then(function (text) { return patchKeybindings(text); });\n        }\n        return this._releaseNotesCache[version];\n    };\n    ReleaseNotesManager.prototype.onDidClickLink = function (uri) {\n        var _this = this;\n        telemetryNodeUtils_1.addGAParameters(this._telemetryService, this._environmentService, uri, 'ReleaseNotes')\n            .then(function (updated) { return _this._openerService.open(updated); })\n            .then(undefined, errors_1.onUnexpectedError);\n    };\n    ReleaseNotesManager.prototype.renderBody = function (text) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var content, colorMap, css, body;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.renderContent(text)];\n                    case 1:\n                        content = _a.sent();\n                        colorMap = modes_1.TokenizationRegistry.getColorMap();\n                        css = colorMap ? tokenization_1.generateTokensCSSForColorMap(colorMap) : '';\n                        body = renderBody(content, css);\n                        return [2 /*return*/, body];\n                }\n            });\n        });\n    };\n    ReleaseNotesManager.prototype.renderContent = function (text) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var renderer;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRenderer(text)];\n                    case 1:\n                        renderer = _a.sent();\n                        return [2 /*return*/, marked(text, { renderer: renderer })];\n                }\n            });\n        });\n    };\n    ReleaseNotesManager.prototype.getRenderer = function (text) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result, renderer;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        result = [];\n                        renderer = new marked.Renderer();\n                        renderer.code = function (_code, lang) {\n                            var modeId = _this._modeService.getModeIdForLanguageName(lang);\n                            if (modeId) {\n                                result.push(_this._extensionService.whenInstalledExtensionsRegistered().then(function () {\n                                    _this._modeService.triggerMode(modeId);\n                                    return modes_1.TokenizationRegistry.getPromise(modeId);\n                                }));\n                            }\n                            return '';\n                        };\n                        marked(text, { renderer: renderer });\n                        return [4 /*yield*/, Promise.all(result)];\n                    case 1:\n                        _a.sent();\n                        renderer.code = function (code, lang) {\n                            var modeId = _this._modeService.getModeIdForLanguageName(lang);\n                            return \"<code>\" + textToHtmlTokenizer_1.tokenizeToString(code, modeId ? modes_1.TokenizationRegistry.get(modeId) : undefined) + \"</code>\";\n                        };\n                        return [2 /*return*/, renderer];\n                }\n            });\n        });\n    };\n    ReleaseNotesManager = tslib_1.__decorate([\n        tslib_1.__param(0, environment_1.IEnvironmentService),\n        tslib_1.__param(1, keybinding_1.IKeybindingService),\n        tslib_1.__param(2, modeService_1.IModeService),\n        tslib_1.__param(3, opener_1.IOpenerService),\n        tslib_1.__param(4, request_2.IRequestService),\n        tslib_1.__param(5, telemetry_1.ITelemetryService),\n        tslib_1.__param(6, editorService_1.IEditorService),\n        tslib_1.__param(7, editorGroupsService_1.IEditorGroupsService),\n        tslib_1.__param(8, webviewEditorService_1.IWebviewEditorService),\n        tslib_1.__param(9, extensions_1.IExtensionService)\n    ], ReleaseNotesManager);\n    return ReleaseNotesManager;\n}());\nexports.ReleaseNotesManager = ReleaseNotesManager;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/update/electron-browser/releaseNotesEditor.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport * as marked from 'vs/base/common/marked/marked';\nimport { OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { asText } from 'vs/base/node/request';\nimport { TokenizationRegistry, ITokenizationSupport } from 'vs/editor/common/modes';\nimport { generateTokensCSSForColorMap } from 'vs/editor/common/modes/supports/tokenization';\nimport { tokenizeToString } from 'vs/editor/common/modes/textToHtmlTokenizer';\nimport { IModeService } from 'vs/editor/common/services/modeService';\nimport * as nls from 'vs/nls';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IRequestService } from 'vs/platform/request/node/request';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { addGAParameters } from 'vs/platform/telemetry/node/telemetryNodeUtils';\nimport { IWebviewEditorService } from 'vs/workbench/contrib/webview/electron-browser/webviewEditorService';\nimport { IEditorService, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { WebviewEditorInput } from 'vs/workbench/contrib/webview/electron-browser/webviewEditorInput';\nimport { KeybindingParser } from 'vs/base/common/keybindingParser';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nfunction renderBody(\n\tbody: string,\n\tcss: string\n): string {\n\tconst styleSheetPath = require.toUrl('./media/markdown.css').replace('file://', 'vscode-core-resource://');\n\treturn `<!DOCTYPE html>\n\t\t<html>\n\t\t\t<head>\n\t\t\t\t<base href=\"https://code.visualstudio.com/raw/\">\n\t\t\t\t<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; img-src https: data:; media-src https:; script-src 'none'; style-src vscode-core-resource: https: 'unsafe-inline'; child-src 'none'; frame-src 'none';\">\n\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${styleSheetPath}\">\n\t\t\t\t<style>${css}</style>\n\t\t\t</head>\n\t\t\t<body>${body}</body>\n\t\t</html>`;\n}\n\nexport class ReleaseNotesManager {\n\n\tprivate _releaseNotesCache: { [version: string]: Promise<string>; } = Object.create(null);\n\n\tprivate _currentReleaseNotes: WebviewEditorInput | undefined = undefined;\n\tprivate _lastText: string;\n\n\tpublic constructor(\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IModeService private readonly _modeService: IModeService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IRequestService private readonly _requestService: IRequestService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IWebviewEditorService private readonly _webviewEditorService: IWebviewEditorService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t\tTokenizationRegistry.onDidChange(async () => {\n\t\t\tif (!this._currentReleaseNotes || !this._lastText) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst html = await this.renderBody(this._lastText);\n\t\t\tif (this._currentReleaseNotes) {\n\t\t\t\tthis._currentReleaseNotes.html = html;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async show(\n\t\taccessor: ServicesAccessor,\n\t\tversion: string\n\t): Promise<boolean> {\n\t\tconst releaseNoteText = await this.loadReleaseNotes(version);\n\t\tthis._lastText = releaseNoteText;\n\t\tconst html = await this.renderBody(releaseNoteText);\n\t\tconst title = nls.localize('releaseNotesInputName', \"Release Notes: {0}\", version);\n\n\t\tconst activeControl = this._editorService.activeControl;\n\t\tif (this._currentReleaseNotes) {\n\t\t\tthis._currentReleaseNotes.setName(title);\n\t\t\tthis._currentReleaseNotes.html = html;\n\t\t\tthis._webviewEditorService.revealWebview(this._currentReleaseNotes, activeControl ? activeControl.group : this._editorGroupService.activeGroup, false);\n\t\t} else {\n\t\t\tthis._currentReleaseNotes = this._webviewEditorService.createWebview(\n\t\t\t\t'releaseNotes',\n\t\t\t\ttitle,\n\t\t\t\t{ group: ACTIVE_GROUP, preserveFocus: false },\n\t\t\t\t{ tryRestoreScrollPosition: true, enableFindWidget: true },\n\t\t\t\tundefined, {\n\t\t\t\t\tonDidClickLink: uri => this.onDidClickLink(uri),\n\t\t\t\t\tonDispose: () => { this._currentReleaseNotes = undefined; }\n\t\t\t\t});\n\n\t\t\tconst iconPath = URI.parse(require.toUrl('./media/code-icon.svg'));\n\t\t\tthis._currentReleaseNotes.iconPath = {\n\t\t\t\tlight: iconPath,\n\t\t\t\tdark: iconPath\n\t\t\t};\n\t\t\tthis._currentReleaseNotes.html = html;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate loadReleaseNotes(version: string): Promise<string> {\n\t\tconst match = /^(\\d+\\.\\d+)\\./.exec(version);\n\t\tif (!match) {\n\t\t\treturn Promise.reject(new Error('not found'));\n\t\t}\n\n\t\tconst versionLabel = match[1].replace(/\\./g, '_');\n\t\tconst baseUrl = 'https://code.visualstudio.com/raw';\n\t\tconst url = `${baseUrl}/v${versionLabel}.md`;\n\t\tconst unassigned = nls.localize('unassigned', \"unassigned\");\n\n\t\tconst patchKeybindings = (text: string): string => {\n\t\t\tconst kb = (match: string, kb: string) => {\n\t\t\t\tconst keybinding = this._keybindingService.lookupKeybinding(kb);\n\n\t\t\t\tif (!keybinding) {\n\t\t\t\t\treturn unassigned;\n\t\t\t\t}\n\n\t\t\t\treturn keybinding.getLabel() || unassigned;\n\t\t\t};\n\n\t\t\tconst kbstyle = (match: string, kb: string) => {\n\t\t\t\tconst keybinding = KeybindingParser.parseKeybinding(kb, OS);\n\n\t\t\t\tif (!keybinding) {\n\t\t\t\t\treturn unassigned;\n\t\t\t\t}\n\n\t\t\t\tconst resolvedKeybindings = this._keybindingService.resolveKeybinding(keybinding);\n\n\t\t\t\tif (resolvedKeybindings.length === 0) {\n\t\t\t\t\treturn unassigned;\n\t\t\t\t}\n\n\t\t\t\treturn resolvedKeybindings[0].getLabel() || unassigned;\n\t\t\t};\n\n\t\t\treturn text\n\t\t\t\t.replace(/kb\\(([a-z.\\d\\-]+)\\)/gi, kb)\n\t\t\t\t.replace(/kbstyle\\(([^\\)]+)\\)/gi, kbstyle);\n\t\t};\n\n\t\tif (!this._releaseNotesCache[version]) {\n\t\t\tthis._releaseNotesCache[version] = this._requestService.request({ url }, CancellationToken.None)\n\t\t\t\t.then(asText)\n\t\t\t\t.then(text => {\n\t\t\t\t\tif (!text || !/^#\\s/.test(text)) { // release notes always starts with `#` followed by whitespace\n\t\t\t\t\t\treturn Promise.reject(new Error('Invalid release notes'));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.resolve(text);\n\t\t\t\t})\n\t\t\t\t.then(text => patchKeybindings(text));\n\t\t}\n\n\t\treturn this._releaseNotesCache[version];\n\t}\n\n\tprivate onDidClickLink(uri: URI) {\n\t\taddGAParameters(this._telemetryService, this._environmentService, uri, 'ReleaseNotes')\n\t\t\t.then(updated => this._openerService.open(updated))\n\t\t\t.then(undefined, onUnexpectedError);\n\t}\n\n\tprivate async renderBody(text: string) {\n\t\tconst content = await this.renderContent(text);\n\t\tconst colorMap = TokenizationRegistry.getColorMap();\n\t\tconst css = colorMap ? generateTokensCSSForColorMap(colorMap) : '';\n\t\tconst body = renderBody(content, css);\n\t\treturn body;\n\t}\n\n\tprivate async renderContent(text: string): Promise<string> {\n\t\tconst renderer = await this.getRenderer(text);\n\t\treturn marked(text, { renderer });\n\t}\n\n\tprivate async getRenderer(text: string): Promise<marked.Renderer> {\n\t\tlet result: Promise<ITokenizationSupport | null>[] = [];\n\t\tconst renderer = new marked.Renderer();\n\t\trenderer.code = (_code, lang) => {\n\t\t\tconst modeId = this._modeService.getModeIdForLanguageName(lang);\n\t\t\tif (modeId) {\n\t\t\t\tresult.push(this._extensionService.whenInstalledExtensionsRegistered().then<ITokenizationSupport | null>(() => {\n\t\t\t\t\tthis._modeService.triggerMode(modeId);\n\t\t\t\t\treturn TokenizationRegistry.getPromise(modeId);\n\t\t\t\t}));\n\t\t\t}\n\t\t\treturn '';\n\t\t};\n\n\t\tmarked(text, { renderer });\n\t\tawait Promise.all(result);\n\n\t\trenderer.code = (code, lang) => {\n\t\t\tconst modeId = this._modeService.getModeIdForLanguageName(lang);\n\t\t\treturn `<code>${tokenizeToString(code, modeId ? TokenizationRegistry.get(modeId)! : undefined)}</code>`;\n\t\t};\n\t\treturn renderer;\n\t}\n}\n"]}]}