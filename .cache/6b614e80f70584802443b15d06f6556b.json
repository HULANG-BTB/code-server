{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/view/viewEventDispatcher.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/view/viewEventDispatcher.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\ndefine([\"require\", \"exports\"], function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class ViewEventDispatcher {\n        constructor(eventHandlerGateKeeper) {\n            this._eventHandlerGateKeeper = eventHandlerGateKeeper;\n            this._eventHandlers = [];\n            this._eventQueue = null;\n            this._isConsumingQueue = false;\n        }\n        addEventHandler(eventHandler) {\n            for (let i = 0, len = this._eventHandlers.length; i < len; i++) {\n                if (this._eventHandlers[i] === eventHandler) {\n                    console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n                }\n            }\n            this._eventHandlers.push(eventHandler);\n        }\n        removeEventHandler(eventHandler) {\n            for (let i = 0; i < this._eventHandlers.length; i++) {\n                if (this._eventHandlers[i] === eventHandler) {\n                    this._eventHandlers.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        emit(event) {\n            if (this._eventQueue) {\n                this._eventQueue.push(event);\n            }\n            else {\n                this._eventQueue = [event];\n            }\n            if (!this._isConsumingQueue) {\n                this.consumeQueue();\n            }\n        }\n        emitMany(events) {\n            if (this._eventQueue) {\n                this._eventQueue = this._eventQueue.concat(events);\n            }\n            else {\n                this._eventQueue = events;\n            }\n            if (!this._isConsumingQueue) {\n                this.consumeQueue();\n            }\n        }\n        consumeQueue() {\n            this._eventHandlerGateKeeper(() => {\n                try {\n                    this._isConsumingQueue = true;\n                    this._doConsumeQueue();\n                }\n                finally {\n                    this._isConsumingQueue = false;\n                }\n            });\n        }\n        _doConsumeQueue() {\n            while (this._eventQueue) {\n                // Empty event queue, as events might come in while sending these off\n                let events = this._eventQueue;\n                this._eventQueue = null;\n                // Use a clone of the event handlers list, as they might remove themselves\n                let eventHandlers = this._eventHandlers.slice(0);\n                for (let i = 0, len = eventHandlers.length; i < len; i++) {\n                    eventHandlers[i].handleEvents(events);\n                }\n            }\n        }\n    }\n    exports.ViewEventDispatcher = ViewEventDispatcher;\n});\n",null]}