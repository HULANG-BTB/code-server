{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar charCode_1 = require(\"vs/base/common/charCode\");\nvar characterClassifier_1 = require(\"vs/editor/common/core/characterClassifier\");\nvar WordCharacterClass;\n(function (WordCharacterClass) {\n    WordCharacterClass[WordCharacterClass[\"Regular\"] = 0] = \"Regular\";\n    WordCharacterClass[WordCharacterClass[\"Whitespace\"] = 1] = \"Whitespace\";\n    WordCharacterClass[WordCharacterClass[\"WordSeparator\"] = 2] = \"WordSeparator\";\n})(WordCharacterClass = exports.WordCharacterClass || (exports.WordCharacterClass = {}));\nvar WordCharacterClassifier = /** @class */ (function (_super) {\n    tslib_1.__extends(WordCharacterClassifier, _super);\n    function WordCharacterClassifier(wordSeparators) {\n        var _this = _super.call(this, WordCharacterClass.Regular) || this;\n        for (var i = 0, len = wordSeparators.length; i < len; i++) {\n            _this.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n        }\n        _this.set(charCode_1.CharCode.Space, WordCharacterClass.Whitespace);\n        _this.set(charCode_1.CharCode.Tab, WordCharacterClass.Whitespace);\n        return _this;\n    }\n    return WordCharacterClassifier;\n}(characterClassifier_1.CharacterClassifier));\nexports.WordCharacterClassifier = WordCharacterClassifier;\nfunction once(computeFn) {\n    var cache = {}; // TODO@Alex unbounded cache\n    return function (input) {\n        if (!cache.hasOwnProperty(input)) {\n            cache[input] = computeFn(input);\n        }\n        return cache[input];\n    };\n}\nexports.getMapForWordSeparators = once(function (input) { return new WordCharacterClassifier(input); });\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/controller/wordCharacterClassifier.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,oDAAmD;AACnD,iFAAgF;AAEhF,IAAkB,kBAIjB;AAJD,WAAkB,kBAAkB;IACnC,iEAAW,CAAA;IACX,uEAAc,CAAA;IACd,6EAAiB,CAAA;AAClB,CAAC,EAJiB,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAInC;AAED;IAA6C,mDAAuC;IAEnF,iCAAY,cAAsB;QAAlC,YACC,kBAAM,kBAAkB,CAAC,OAAO,CAAC,SAQjC;QANA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1D,KAAI,CAAC,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,aAAa,CAAC,CAAC;SACzE;QAED,KAAI,CAAC,GAAG,CAAC,mBAAQ,CAAC,KAAK,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;QACxD,KAAI,CAAC,GAAG,CAAC,mBAAQ,CAAC,GAAG,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;;IACvD,CAAC;IAEF,8BAAC;AAAD,CAAC,AAbD,CAA6C,yCAAmB,GAa/D;AAbY,0DAAuB;AAepC,SAAS,IAAI,CAAI,SAA+B;IAC/C,IAAI,KAAK,GAA0B,EAAE,CAAC,CAAC,4BAA4B;IACnE,OAAO,UAAC,KAAa;QACpB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACjC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;SAChC;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC;AACH,CAAC;AAEY,QAAA,uBAAuB,GAAG,IAAI,CAC1C,UAAC,KAAK,IAAK,OAAA,IAAI,uBAAuB,CAAC,KAAK,CAAC,EAAlC,CAAkC,CAC7C,CAAC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { CharacterClassifier } from 'vs/editor/common/core/characterClassifier';\n\nexport const enum WordCharacterClass {\n\tRegular = 0,\n\tWhitespace = 1,\n\tWordSeparator = 2\n}\n\nexport class WordCharacterClassifier extends CharacterClassifier<WordCharacterClass> {\n\n\tconstructor(wordSeparators: string) {\n\t\tsuper(WordCharacterClass.Regular);\n\n\t\tfor (let i = 0, len = wordSeparators.length; i < len; i++) {\n\t\t\tthis.set(wordSeparators.charCodeAt(i), WordCharacterClass.WordSeparator);\n\t\t}\n\n\t\tthis.set(CharCode.Space, WordCharacterClass.Whitespace);\n\t\tthis.set(CharCode.Tab, WordCharacterClass.Whitespace);\n\t}\n\n}\n\nfunction once<R>(computeFn: (input: string) => R): (input: string) => R {\n\tlet cache: { [key: string]: R; } = {}; // TODO@Alex unbounded cache\n\treturn (input: string): R => {\n\t\tif (!cache.hasOwnProperty(input)) {\n\t\t\tcache[input] = computeFn(input);\n\t\t}\n\t\treturn cache[input];\n\t};\n}\n\nexport const getMapForWordSeparators = once<WordCharacterClassifier>(\n\t(input) => new WordCharacterClassifier(input)\n);\n"]}]}