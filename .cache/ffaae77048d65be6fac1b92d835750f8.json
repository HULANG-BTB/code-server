{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSCM.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSCM.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar uri_1 = require(\"vs/base/common/uri\");\nvar event_1 = require(\"vs/base/common/event\");\nvar objects_1 = require(\"vs/base/common/objects\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar scm_1 = require(\"vs/workbench/contrib/scm/common/scm\");\nvar extHost_protocol_1 = require(\"../common/extHost.protocol\");\nvar extHostCustomers_1 = require(\"vs/workbench/api/common/extHostCustomers\");\nvar sequence_1 = require(\"vs/base/common/sequence\");\nvar cancellation_1 = require(\"vs/base/common/cancellation\");\nvar MainThreadSCMResourceGroup = /** @class */ (function () {\n    function MainThreadSCMResourceGroup(sourceControlHandle, handle, provider, features, label, id) {\n        this.sourceControlHandle = sourceControlHandle;\n        this.handle = handle;\n        this.provider = provider;\n        this.features = features;\n        this.label = label;\n        this.id = id;\n        this.elements = [];\n        this._onDidSplice = new event_1.Emitter();\n        this.onDidSplice = this._onDidSplice.event;\n        this._onDidChange = new event_1.Emitter();\n    }\n    Object.defineProperty(MainThreadSCMResourceGroup.prototype, \"hideWhenEmpty\", {\n        get: function () { return !!this.features.hideWhenEmpty; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMResourceGroup.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadSCMResourceGroup.prototype.toJSON = function () {\n        return {\n            $mid: 4,\n            sourceControlHandle: this.sourceControlHandle,\n            groupHandle: this.handle\n        };\n    };\n    MainThreadSCMResourceGroup.prototype.splice = function (start, deleteCount, toInsert) {\n        var _a;\n        (_a = this.elements).splice.apply(_a, [start, deleteCount].concat(toInsert));\n        this._onDidSplice.fire({ start: start, deleteCount: deleteCount, toInsert: toInsert });\n    };\n    MainThreadSCMResourceGroup.prototype.$updateGroup = function (features) {\n        this.features = objects_1.assign(this.features, features);\n        this._onDidChange.fire();\n    };\n    MainThreadSCMResourceGroup.prototype.$updateGroupLabel = function (label) {\n        this.label = label;\n        this._onDidChange.fire();\n    };\n    return MainThreadSCMResourceGroup;\n}());\nvar MainThreadSCMResource = /** @class */ (function () {\n    function MainThreadSCMResource(proxy, sourceControlHandle, groupHandle, handle, sourceUri, resourceGroup, decorations) {\n        this.proxy = proxy;\n        this.sourceControlHandle = sourceControlHandle;\n        this.groupHandle = groupHandle;\n        this.handle = handle;\n        this.sourceUri = sourceUri;\n        this.resourceGroup = resourceGroup;\n        this.decorations = decorations;\n    }\n    MainThreadSCMResource.prototype.open = function () {\n        return this.proxy.$executeResourceCommand(this.sourceControlHandle, this.groupHandle, this.handle);\n    };\n    MainThreadSCMResource.prototype.toJSON = function () {\n        return {\n            $mid: 3,\n            sourceControlHandle: this.sourceControlHandle,\n            groupHandle: this.groupHandle,\n            handle: this.handle\n        };\n    };\n    return MainThreadSCMResource;\n}());\nvar MainThreadSCMProvider = /** @class */ (function () {\n    function MainThreadSCMProvider(proxy, _handle, _contextValue, _label, _rootUri, scmService) {\n        this.proxy = proxy;\n        this._handle = _handle;\n        this._contextValue = _contextValue;\n        this._label = _label;\n        this._rootUri = _rootUri;\n        this._id = \"scm\" + MainThreadSCMProvider.ID_HANDLE++;\n        this.groups = new sequence_1.Sequence();\n        this._groupsByHandle = Object.create(null);\n        // get groups(): ISequence<ISCMResourceGroup> {\n        // \treturn {\n        // \t\telements: this._groups,\n        // \t\tonDidSplice: this._onDidSplice.event\n        // \t};\n        // \t// return this._groups\n        // \t// \t.filter(g => g.resources.elements.length > 0 || !g.features.hideWhenEmpty);\n        // }\n        this._onDidChangeResources = new event_1.Emitter();\n        this.features = {};\n        this._onDidChangeCommitTemplate = new event_1.Emitter();\n        this._onDidChangeStatusBarCommands = new event_1.Emitter();\n        this._onDidChange = new event_1.Emitter();\n    }\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"id\", {\n        get: function () { return this._id; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"onDidChangeResources\", {\n        get: function () { return this._onDidChangeResources.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"handle\", {\n        get: function () { return this._handle; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"label\", {\n        get: function () { return this._label; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"rootUri\", {\n        get: function () { return this._rootUri; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"contextValue\", {\n        get: function () { return this._contextValue; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"commitTemplate\", {\n        get: function () { return this.features.commitTemplate; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"acceptInputCommand\", {\n        get: function () { return this.features.acceptInputCommand; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"statusBarCommands\", {\n        get: function () { return this.features.statusBarCommands; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"count\", {\n        get: function () { return this.features.count; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"onDidChangeCommitTemplate\", {\n        get: function () { return this._onDidChangeCommitTemplate.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"onDidChangeStatusBarCommands\", {\n        get: function () { return this._onDidChangeStatusBarCommands.event; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MainThreadSCMProvider.prototype, \"onDidChange\", {\n        get: function () { return this._onDidChange.event; },\n        enumerable: true,\n        configurable: true\n    });\n    MainThreadSCMProvider.prototype.$updateSourceControl = function (features) {\n        this.features = objects_1.assign(this.features, features);\n        this._onDidChange.fire();\n        if (typeof features.commitTemplate !== 'undefined') {\n            this._onDidChangeCommitTemplate.fire(this.commitTemplate);\n        }\n        if (typeof features.statusBarCommands !== 'undefined') {\n            this._onDidChangeStatusBarCommands.fire(this.statusBarCommands);\n        }\n    };\n    MainThreadSCMProvider.prototype.$registerGroup = function (handle, id, label) {\n        var group = new MainThreadSCMResourceGroup(this.handle, handle, this, {}, label, id);\n        this._groupsByHandle[handle] = group;\n        this.groups.splice(this.groups.elements.length, 0, [group]);\n    };\n    MainThreadSCMProvider.prototype.$updateGroup = function (handle, features) {\n        var group = this._groupsByHandle[handle];\n        if (!group) {\n            return;\n        }\n        group.$updateGroup(features);\n    };\n    MainThreadSCMProvider.prototype.$updateGroupLabel = function (handle, label) {\n        var group = this._groupsByHandle[handle];\n        if (!group) {\n            return;\n        }\n        group.$updateGroupLabel(label);\n    };\n    MainThreadSCMProvider.prototype.$spliceGroupResourceStates = function (splices) {\n        var _this = this;\n        var _loop_1 = function (groupHandle, groupSlices) {\n            var group = this_1._groupsByHandle[groupHandle];\n            if (!group) {\n                console.warn(\"SCM group \" + groupHandle + \" not found in provider \" + this_1.label);\n                return \"continue\";\n            }\n            // reverse the splices sequence in order to apply them correctly\n            groupSlices.reverse();\n            for (var _i = 0, groupSlices_1 = groupSlices; _i < groupSlices_1.length; _i++) {\n                var _a = groupSlices_1[_i], start = _a[0], deleteCount = _a[1], rawResources = _a[2];\n                var resources = rawResources.map(function (rawResource) {\n                    var handle = rawResource[0], sourceUri = rawResource[1], icons = rawResource[2], tooltip = rawResource[3], strikeThrough = rawResource[4], faded = rawResource[5], source = rawResource[6], letter = rawResource[7], color = rawResource[8];\n                    var icon = icons[0];\n                    var iconDark = icons[1] || icon;\n                    var decorations = {\n                        icon: icon ? uri_1.URI.parse(icon) : undefined,\n                        iconDark: iconDark ? uri_1.URI.parse(iconDark) : undefined,\n                        tooltip: tooltip,\n                        strikeThrough: strikeThrough,\n                        faded: faded,\n                        source: source,\n                        letter: letter,\n                        color: color ? color.id : undefined\n                    };\n                    return new MainThreadSCMResource(_this.proxy, _this.handle, groupHandle, handle, uri_1.URI.revive(sourceUri), group, decorations);\n                });\n                group.splice(start, deleteCount, resources);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, splices_1 = splices; _i < splices_1.length; _i++) {\n            var _a = splices_1[_i], groupHandle = _a[0], groupSlices = _a[1];\n            _loop_1(groupHandle, groupSlices);\n        }\n        this._onDidChangeResources.fire();\n    };\n    MainThreadSCMProvider.prototype.$unregisterGroup = function (handle) {\n        var group = this._groupsByHandle[handle];\n        if (!group) {\n            return;\n        }\n        delete this._groupsByHandle[handle];\n        this.groups.splice(this.groups.elements.indexOf(group), 1);\n    };\n    MainThreadSCMProvider.prototype.getOriginalResource = function (uri) {\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var result;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.features.hasQuickDiffProvider) {\n                            return [2 /*return*/, null];\n                        }\n                        return [4 /*yield*/, this.proxy.$provideOriginalResource(this.handle, uri, cancellation_1.CancellationToken.None)];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result && uri_1.URI.revive(result)];\n                }\n            });\n        });\n    };\n    MainThreadSCMProvider.prototype.toJSON = function () {\n        return {\n            $mid: 5,\n            handle: this.handle\n        };\n    };\n    MainThreadSCMProvider.prototype.dispose = function () {\n    };\n    MainThreadSCMProvider.ID_HANDLE = 0;\n    MainThreadSCMProvider = tslib_1.__decorate([\n        tslib_1.__param(5, scm_1.ISCMService)\n    ], MainThreadSCMProvider);\n    return MainThreadSCMProvider;\n}());\nvar MainThreadSCM = /** @class */ (function () {\n    function MainThreadSCM(extHostContext, scmService) {\n        this.scmService = scmService;\n        this._repositories = Object.create(null);\n        this._inputDisposables = Object.create(null);\n        this._disposables = [];\n        this._proxy = extHostContext.getProxy(extHost_protocol_1.ExtHostContext.ExtHostSCM);\n        event_1.Event.debounce(scmService.onDidChangeSelectedRepositories, function (_, e) { return e; }, 100)(this.onDidChangeSelectedRepositories, this, this._disposables);\n    }\n    MainThreadSCM.prototype.dispose = function () {\n        var _this = this;\n        Object.keys(this._repositories)\n            .forEach(function (id) { return _this._repositories[id].dispose(); });\n        this._repositories = Object.create(null);\n        Object.keys(this._inputDisposables)\n            .forEach(function (id) { return _this._inputDisposables[id].dispose(); });\n        this._inputDisposables = Object.create(null);\n        this._disposables = lifecycle_1.dispose(this._disposables);\n    };\n    MainThreadSCM.prototype.$registerSourceControl = function (handle, id, label, rootUri) {\n        var _this = this;\n        var provider = new MainThreadSCMProvider(this._proxy, handle, id, label, rootUri && uri_1.URI.revive(rootUri), this.scmService);\n        var repository = this.scmService.registerSCMProvider(provider);\n        this._repositories[handle] = repository;\n        var inputDisposable = repository.input.onDidChange(function (value) { return _this._proxy.$onInputBoxValueChange(handle, value); });\n        this._inputDisposables[handle] = inputDisposable;\n    };\n    MainThreadSCM.prototype.$updateSourceControl = function (handle, features) {\n        var repository = this._repositories[handle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$updateSourceControl(features);\n    };\n    MainThreadSCM.prototype.$unregisterSourceControl = function (handle) {\n        var repository = this._repositories[handle];\n        if (!repository) {\n            return;\n        }\n        this._inputDisposables[handle].dispose();\n        delete this._inputDisposables[handle];\n        repository.dispose();\n        delete this._repositories[handle];\n    };\n    MainThreadSCM.prototype.$registerGroup = function (sourceControlHandle, groupHandle, id, label) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$registerGroup(groupHandle, id, label);\n    };\n    MainThreadSCM.prototype.$updateGroup = function (sourceControlHandle, groupHandle, features) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$updateGroup(groupHandle, features);\n    };\n    MainThreadSCM.prototype.$updateGroupLabel = function (sourceControlHandle, groupHandle, label) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$updateGroupLabel(groupHandle, label);\n    };\n    MainThreadSCM.prototype.$spliceResourceStates = function (sourceControlHandle, splices) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$spliceGroupResourceStates(splices);\n    };\n    MainThreadSCM.prototype.$unregisterGroup = function (sourceControlHandle, handle) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        var provider = repository.provider;\n        provider.$unregisterGroup(handle);\n    };\n    MainThreadSCM.prototype.$setInputBoxValue = function (sourceControlHandle, value) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        repository.input.value = value;\n    };\n    MainThreadSCM.prototype.$setInputBoxPlaceholder = function (sourceControlHandle, placeholder) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        repository.input.placeholder = placeholder;\n    };\n    MainThreadSCM.prototype.$setInputBoxVisibility = function (sourceControlHandle, visible) {\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        repository.input.visible = visible;\n    };\n    MainThreadSCM.prototype.$setValidationProviderIsEnabled = function (sourceControlHandle, enabled) {\n        var _this = this;\n        var repository = this._repositories[sourceControlHandle];\n        if (!repository) {\n            return;\n        }\n        if (enabled) {\n            repository.input.validateInput = function (value, pos) { return tslib_1.__awaiter(_this, void 0, Promise, function () {\n                var result;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this._proxy.$validateInput(sourceControlHandle, value, pos)];\n                        case 1:\n                            result = _a.sent();\n                            return [2 /*return*/, result && { message: result[0], type: result[1] }];\n                    }\n                });\n            }); };\n        }\n        else {\n            repository.input.validateInput = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {\n                return [2 /*return*/, undefined];\n            }); }); };\n        }\n    };\n    MainThreadSCM.prototype.onDidChangeSelectedRepositories = function (repositories) {\n        var handles = repositories\n            .filter(function (r) { return r.provider instanceof MainThreadSCMProvider; })\n            .map(function (r) { return r.provider.handle; });\n        this._proxy.$setSelectedSourceControls(handles);\n    };\n    MainThreadSCM = tslib_1.__decorate([\n        extHostCustomers_1.extHostNamedCustomer(extHost_protocol_1.MainContext.MainThreadSCM),\n        tslib_1.__param(1, scm_1.ISCMService)\n    ], MainThreadSCM);\n    return MainThreadSCM;\n}());\nexports.MainThreadSCM = MainThreadSCM;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSCM.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/api/browser/mainThreadSCM.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;;AAEhG,0CAAwD;AACxD,8CAAsD;AACtD,kDAAgD;AAChD,sDAAgE;AAChE,2DAA4K;AAC5K,+DAA6L;AAE7L,6EAAgF;AAChF,oDAA4D;AAC5D,4DAAgE;AAEhE;IAYC,oCACkB,mBAA2B,EAC3B,MAAc,EACxB,QAAsB,EACtB,QAA0B,EAC1B,KAAa,EACb,EAAU;QALA,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,WAAM,GAAN,MAAM,CAAQ;QACxB,aAAQ,GAAR,QAAQ,CAAc;QACtB,aAAQ,GAAR,QAAQ,CAAkB;QAC1B,UAAK,GAAL,KAAK,CAAQ;QACb,OAAE,GAAF,EAAE,CAAQ;QAhBT,aAAQ,GAAmB,EAAE,CAAC;QAE/B,iBAAY,GAAG,IAAI,eAAO,EAAyB,CAAC;QACnD,gBAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QAIvC,iBAAY,GAAG,IAAI,eAAO,EAAQ,CAAC;IAUvC,CAAC;IAZL,sBAAI,qDAAa;aAAjB,cAA+B,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAGtE,sBAAI,mDAAW;aAAf,cAAiC,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAWlE,2CAAM,GAAN;QACC,OAAO;YACN,IAAI,EAAE,CAAC;YACP,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,WAAW,EAAE,IAAI,CAAC,MAAM;SACxB,CAAC;IACH,CAAC;IAED,2CAAM,GAAN,UAAO,KAAa,EAAE,WAAmB,EAAE,QAAwB;;QAClE,CAAA,KAAA,IAAI,CAAC,QAAQ,CAAA,CAAC,MAAM,YAAC,KAAK,EAAE,WAAW,SAAK,QAAQ,GAAE;QACtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,WAAW,aAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,iDAAY,GAAZ,UAAa,QAA0B;QACtC,IAAI,CAAC,QAAQ,GAAG,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,sDAAiB,GAAjB,UAAkB,KAAa;QAC9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IACF,iCAAC;AAAD,CAAC,AA3CD,IA2CC;AAED;IAEC,+BACkB,KAAsB,EACtB,mBAA2B,EAC3B,WAAmB,EACnB,MAAc,EACxB,SAAc,EACd,aAAgC,EAChC,WAAoC;QAN1B,UAAK,GAAL,KAAK,CAAiB;QACtB,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,gBAAW,GAAX,WAAW,CAAQ;QACnB,WAAM,GAAN,MAAM,CAAQ;QACxB,cAAS,GAAT,SAAS,CAAK;QACd,kBAAa,GAAb,aAAa,CAAmB;QAChC,gBAAW,GAAX,WAAW,CAAyB;IACxC,CAAC;IAEL,oCAAI,GAAJ;QACC,OAAO,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACpG,CAAC;IAED,sCAAM,GAAN;QACC,OAAO;YACN,IAAI,EAAE,CAAC;YACP,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;SACnB,CAAC;IACH,CAAC;IACF,4BAAC;AAAD,CAAC,AAxBD,IAwBC;AAED;IA2CC,+BACkB,KAAsB,EACtB,OAAe,EACf,aAAqB,EACrB,MAAc,EACd,QAAyB,EAC7B,UAAuB;QALnB,UAAK,GAAL,KAAK,CAAiB;QACtB,YAAO,GAAP,OAAO,CAAQ;QACf,kBAAa,GAAb,aAAa,CAAQ;QACrB,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAiB;QA7CnC,QAAG,GAAG,QAAM,qBAAqB,CAAC,SAAS,EAAI,CAAC;QAG/C,WAAM,GAAG,IAAI,mBAAQ,EAA8B,CAAC;QAC5C,oBAAe,GAAsD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE1G,+CAA+C;QAC/C,YAAY;QACZ,4BAA4B;QAC5B,yCAAyC;QACzC,MAAM;QAEN,0BAA0B;QAC1B,mFAAmF;QACnF,IAAI;QAEI,0BAAqB,GAAG,IAAI,eAAO,EAAQ,CAAC;QAG5C,aAAQ,GAAwB,EAAE,CAAC;QAYnC,+BAA0B,GAAG,IAAI,eAAO,EAAU,CAAC;QAGnD,kCAA6B,GAAG,IAAI,eAAO,EAAa,CAAC;QAGzD,iBAAY,GAAG,IAAI,eAAO,EAAQ,CAAC;IAUvC,CAAC;IA9CL,sBAAI,qCAAE;aAAN,cAAmB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;;OAAA;IAgBrC,sBAAI,uDAAoB;aAAxB,cAA0C,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAIpF,sBAAI,yCAAM;aAAV,cAAuB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;;;OAAA;IAC7C,sBAAI,wCAAK;aAAT,cAAsB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;;;OAAA;IAC3C,sBAAI,0CAAO;aAAX,cAAiC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;;;OAAA;IACxD,sBAAI,+CAAY;aAAhB,cAA6B,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;;;OAAA;IAEzD,sBAAI,iDAAc;aAAlB,cAA2C,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;;;OAAA;IACjF,sBAAI,qDAAkB;aAAtB,cAAgD,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;;;OAAA;IAC1F,sBAAI,oDAAiB;aAArB,cAAiD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;;;OAAA;IAC1F,sBAAI,wCAAK;aAAT,cAAkC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAG/D,sBAAI,4DAAyB;aAA7B,cAAiD,OAAO,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGhG,sBAAI,+DAA4B;aAAhC,cAAuD,OAAO,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAGzG,sBAAI,8CAAW;aAAf,cAAiC,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;;OAAA;IAWlE,oDAAoB,GAApB,UAAqB,QAA6B;QACjD,IAAI,CAAC,QAAQ,GAAG,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAEzB,IAAI,OAAO,QAAQ,CAAC,cAAc,KAAK,WAAW,EAAE;YACnD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,cAAe,CAAC,CAAC;SAC3D;QAED,IAAI,OAAO,QAAQ,CAAC,iBAAiB,KAAK,WAAW,EAAE;YACtD,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAkB,CAAC,CAAC;SACjE;IACF,CAAC;IAED,8CAAc,GAAd,UAAe,MAAc,EAAE,EAAU,EAAE,KAAa;QACvD,IAAM,KAAK,GAAG,IAAI,0BAA0B,CAC3C,IAAI,CAAC,MAAM,EACX,MAAM,EACN,IAAI,EACJ,EAAE,EACF,KAAK,EACL,EAAE,CACF,CAAC;QAEF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,4CAAY,GAAZ,UAAa,MAAc,EAAE,QAA0B;QACtD,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAE3C,IAAI,CAAC,KAAK,EAAE;YACX,OAAO;SACP;QAED,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IAED,iDAAiB,GAAjB,UAAkB,MAAc,EAAE,KAAa;QAC9C,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAE3C,IAAI,CAAC,KAAK,EAAE;YACX,OAAO;SACP;QAED,KAAK,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,0DAA0B,GAA1B,UAA2B,OAAgC;QAA3D,iBA4CC;gCA3CY,WAAW,EAAE,WAAW;YACnC,IAAM,KAAK,GAAG,OAAK,eAAe,CAAC,WAAW,CAAC,CAAC;YAEhD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,CAAC,IAAI,CAAC,eAAa,WAAW,+BAA0B,OAAK,KAAO,CAAC,CAAC;;aAE7E;YAED,gEAAgE;YAChE,WAAW,CAAC,OAAO,EAAE,CAAC;YAEtB,KAAiD,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;gBAAnD,IAAA,sBAAkC,EAAjC,aAAK,EAAE,mBAAW,EAAE,oBAAY;gBAC3C,IAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW;oBACtC,IAAA,uBAAM,EAAE,0BAAS,EAAE,sBAAK,EAAE,wBAAO,EAAE,8BAAa,EAAE,sBAAK,EAAE,uBAAM,EAAE,uBAAM,EAAE,sBAAK,CAAgB;oBACrG,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtB,IAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;oBAClC,IAAM,WAAW,GAAG;wBACnB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,SAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;wBACxC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS;wBACpD,OAAO,SAAA;wBACP,aAAa,eAAA;wBACb,KAAK,OAAA;wBACL,MAAM,QAAA;wBACN,MAAM,QAAA;wBACN,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;qBACnC,CAAC;oBAEF,OAAO,IAAI,qBAAqB,CAC/B,KAAI,CAAC,KAAK,EACV,KAAI,CAAC,MAAM,EACX,WAAW,EACX,MAAM,EACN,SAAG,CAAC,MAAM,CAAC,SAAS,CAAC,EACrB,KAAK,EACL,WAAW,CACX,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;aAC5C;;;QAvCF,KAAyC,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAArC,IAAA,kBAA0B,EAAzB,mBAAW,EAAE,mBAAW;oBAAxB,WAAW,EAAE,WAAW;SAwCnC;QAED,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IACnC,CAAC;IAED,gDAAgB,GAAhB,UAAiB,MAAc;QAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAE3C,IAAI,CAAC,KAAK,EAAE;YACX,OAAO;SACP;QAED,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEK,mDAAmB,GAAzB,UAA0B,GAAQ;+CAAG,OAAO;;;;;wBAC3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE;4BACxC,sBAAO,IAAI,EAAC;yBACZ;wBAEc,qBAAM,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,gCAAiB,CAAC,IAAI,CAAC,EAAA;;wBAA5F,MAAM,GAAG,SAAmF;wBAClG,sBAAO,MAAM,IAAI,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAC;;;;KACpC;IAED,sCAAM,GAAN;QACC,OAAO;YACN,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,IAAI,CAAC,MAAM;SACnB,CAAC;IACH,CAAC;IAED,uCAAO,GAAP;IAEA,CAAC;IA5Kc,+BAAS,GAAG,CAAC,CAAC;IAFxB,qBAAqB;QAiDxB,mBAAA,iBAAW,CAAA;OAjDR,qBAAqB,CA+K1B;IAAD,4BAAC;CAAA,AA/KD,IA+KC;AAGD;IAOC,uBACC,cAA+B,EACD,UAAuB;QAAvB,eAAU,GAAV,UAAU,CAAa;QAN9C,kBAAa,GAA0C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3E,sBAAiB,GAAuC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5E,iBAAY,GAAkB,EAAE,CAAC;QAMxC,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,iCAAc,CAAC,UAAU,CAAC,CAAC;QAEjE,aAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,+BAA+B,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,EAAD,CAAC,EAAE,GAAG,CAAC,CAC1E,IAAI,CAAC,+BAA+B,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAClE,CAAC;IAED,+BAAO,GAAP;QAAA,iBAUC;QATA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;aAC7B,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,EAAhC,CAAgC,CAAC,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEzC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;aACjC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,EAApC,CAAoC,CAAC,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,YAAY,GAAG,mBAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;IAED,8CAAsB,GAAtB,UAAuB,MAAc,EAAE,EAAU,EAAE,KAAa,EAAE,OAAkC;QAApG,iBAOC;QANA,IAAM,QAAQ,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,IAAI,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5H,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;QAExC,IAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,MAAM,EAAE,KAAK,CAAC,EAAjD,CAAiD,CAAC,CAAC;QACjH,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC;IAClD,CAAC;IAED,4CAAoB,GAApB,UAAqB,MAAc,EAAE,QAA6B;QACjE,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAE9C,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,gDAAwB,GAAxB,UAAyB,MAAc;QACtC,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAE9C,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAEtC,UAAU,CAAC,OAAO,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,sCAAc,GAAd,UAAe,mBAA2B,EAAE,WAAmB,EAAE,EAAU,EAAE,KAAa;QACzF,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,cAAc,CAAC,WAAW,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,oCAAY,GAAZ,UAAa,mBAA2B,EAAE,WAAmB,EAAE,QAA0B;QACxF,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,yCAAiB,GAAjB,UAAkB,mBAA2B,EAAE,WAAmB,EAAE,KAAa;QAChF,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,iBAAiB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,6CAAqB,GAArB,UAAsB,mBAA2B,EAAE,OAAgC;QAClF,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,wCAAgB,GAAhB,UAAiB,mBAA2B,EAAE,MAAc;QAC3D,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAM,QAAQ,GAAG,UAAU,CAAC,QAAiC,CAAC;QAC9D,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,yCAAiB,GAAjB,UAAkB,mBAA2B,EAAE,KAAa;QAC3D,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;IAChC,CAAC;IAED,+CAAuB,GAAvB,UAAwB,mBAA2B,EAAE,WAAmB;QACvE,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,UAAU,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;IAC5C,CAAC;IAED,8CAAsB,GAAtB,UAAuB,mBAA2B,EAAE,OAAgB;QACnE,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IACpC,CAAC;IAED,uDAA+B,GAA/B,UAAgC,mBAA2B,EAAE,OAAgB;QAA7E,iBAeC;QAdA,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,EAAE;YAChB,OAAO;SACP;QAED,IAAI,OAAO,EAAE;YACZ,UAAU,CAAC,KAAK,CAAC,aAAa,GAAG,UAAO,KAAK,EAAE,GAAG,4CAAG,OAAO;;;;gCAC5C,qBAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,mBAAmB,EAAE,KAAK,EAAE,GAAG,CAAC,EAAA;;4BAA1E,MAAM,GAAG,SAAiE;4BAChF,sBAAO,MAAM,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAC;;;iBACzD,CAAC;SACF;aAAM;YACN,UAAU,CAAC,KAAK,CAAC,aAAa,GAAG;gBAAY,sBAAA,SAAS,EAAA;qBAAA,CAAC;SACvD;IACF,CAAC;IAEO,uDAA+B,GAAvC,UAAwC,YAA8B;QACrE,IAAM,OAAO,GAAG,YAAY;aAC1B,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,QAAQ,YAAY,qBAAqB,EAA3C,CAA2C,CAAC;aACxD,GAAG,CAAC,UAAA,CAAC,IAAI,OAAC,CAAC,CAAC,QAAkC,CAAC,MAAM,EAA5C,CAA4C,CAAC,CAAC;QAEzD,IAAI,CAAC,MAAM,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IA3KW,aAAa;QADzB,uCAAoB,CAAC,8BAAW,CAAC,aAAa,CAAC;QAU7C,mBAAA,iBAAW,CAAA;OATD,aAAa,CA4KzB;IAAD,oBAAC;CAAA,AA5KD,IA4KC;AA5KY,sCAAa","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { assign } from 'vs/base/common/objects';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ISCMService, ISCMRepository, ISCMProvider, ISCMResource, ISCMResourceGroup, ISCMResourceDecorations, IInputValidation } from 'vs/workbench/contrib/scm/common/scm';\nimport { ExtHostContext, MainThreadSCMShape, ExtHostSCMShape, SCMProviderFeatures, SCMRawResourceSplices, SCMGroupFeatures, MainContext, IExtHostContext } from '../common/extHost.protocol';\nimport { Command } from 'vs/editor/common/modes';\nimport { extHostNamedCustomer } from 'vs/workbench/api/common/extHostCustomers';\nimport { ISplice, Sequence } from 'vs/base/common/sequence';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nclass MainThreadSCMResourceGroup implements ISCMResourceGroup {\n\n\treadonly elements: ISCMResource[] = [];\n\n\tprivate _onDidSplice = new Emitter<ISplice<ISCMResource>>();\n\treadonly onDidSplice = this._onDidSplice.event;\n\n\tget hideWhenEmpty(): boolean { return !!this.features.hideWhenEmpty; }\n\n\tprivate _onDidChange = new Emitter<void>();\n\tget onDidChange(): Event<void> { return this._onDidChange.event; }\n\n\tconstructor(\n\t\tprivate readonly sourceControlHandle: number,\n\t\tprivate readonly handle: number,\n\t\tpublic provider: ISCMProvider,\n\t\tpublic features: SCMGroupFeatures,\n\t\tpublic label: string,\n\t\tpublic id: string\n\t) { }\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: 4,\n\t\t\tsourceControlHandle: this.sourceControlHandle,\n\t\t\tgroupHandle: this.handle\n\t\t};\n\t}\n\n\tsplice(start: number, deleteCount: number, toInsert: ISCMResource[]) {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n\n\t$updateGroup(features: SCMGroupFeatures): void {\n\t\tthis.features = assign(this.features, features);\n\t\tthis._onDidChange.fire();\n\t}\n\n\t$updateGroupLabel(label: string): void {\n\t\tthis.label = label;\n\t\tthis._onDidChange.fire();\n\t}\n}\n\nclass MainThreadSCMResource implements ISCMResource {\n\n\tconstructor(\n\t\tprivate readonly proxy: ExtHostSCMShape,\n\t\tprivate readonly sourceControlHandle: number,\n\t\tprivate readonly groupHandle: number,\n\t\tprivate readonly handle: number,\n\t\tpublic sourceUri: URI,\n\t\tpublic resourceGroup: ISCMResourceGroup,\n\t\tpublic decorations: ISCMResourceDecorations\n\t) { }\n\n\topen(): Promise<void> {\n\t\treturn this.proxy.$executeResourceCommand(this.sourceControlHandle, this.groupHandle, this.handle);\n\t}\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: 3,\n\t\t\tsourceControlHandle: this.sourceControlHandle,\n\t\t\tgroupHandle: this.groupHandle,\n\t\t\thandle: this.handle\n\t\t};\n\t}\n}\n\nclass MainThreadSCMProvider implements ISCMProvider {\n\n\tprivate static ID_HANDLE = 0;\n\tprivate _id = `scm${MainThreadSCMProvider.ID_HANDLE++}`;\n\tget id(): string { return this._id; }\n\n\treadonly groups = new Sequence<MainThreadSCMResourceGroup>();\n\tprivate readonly _groupsByHandle: { [handle: number]: MainThreadSCMResourceGroup; } = Object.create(null);\n\n\t// get groups(): ISequence<ISCMResourceGroup> {\n\t// \treturn {\n\t// \t\telements: this._groups,\n\t// \t\tonDidSplice: this._onDidSplice.event\n\t// \t};\n\n\t// \t// return this._groups\n\t// \t// \t.filter(g => g.resources.elements.length > 0 || !g.features.hideWhenEmpty);\n\t// }\n\n\tprivate _onDidChangeResources = new Emitter<void>();\n\tget onDidChangeResources(): Event<void> { return this._onDidChangeResources.event; }\n\n\tprivate features: SCMProviderFeatures = {};\n\n\tget handle(): number { return this._handle; }\n\tget label(): string { return this._label; }\n\tget rootUri(): URI | undefined { return this._rootUri; }\n\tget contextValue(): string { return this._contextValue; }\n\n\tget commitTemplate(): string | undefined { return this.features.commitTemplate; }\n\tget acceptInputCommand(): Command | undefined { return this.features.acceptInputCommand; }\n\tget statusBarCommands(): Command[] | undefined { return this.features.statusBarCommands; }\n\tget count(): number | undefined { return this.features.count; }\n\n\tprivate _onDidChangeCommitTemplate = new Emitter<string>();\n\tget onDidChangeCommitTemplate(): Event<string> { return this._onDidChangeCommitTemplate.event; }\n\n\tprivate _onDidChangeStatusBarCommands = new Emitter<Command[]>();\n\tget onDidChangeStatusBarCommands(): Event<Command[]> { return this._onDidChangeStatusBarCommands.event; }\n\n\tprivate _onDidChange = new Emitter<void>();\n\tget onDidChange(): Event<void> { return this._onDidChange.event; }\n\n\tconstructor(\n\t\tprivate readonly proxy: ExtHostSCMShape,\n\t\tprivate readonly _handle: number,\n\t\tprivate readonly _contextValue: string,\n\t\tprivate readonly _label: string,\n\t\tprivate readonly _rootUri: URI | undefined,\n\t\t@ISCMService scmService: ISCMService\n\t) { }\n\n\t$updateSourceControl(features: SCMProviderFeatures): void {\n\t\tthis.features = assign(this.features, features);\n\t\tthis._onDidChange.fire();\n\n\t\tif (typeof features.commitTemplate !== 'undefined') {\n\t\t\tthis._onDidChangeCommitTemplate.fire(this.commitTemplate!);\n\t\t}\n\n\t\tif (typeof features.statusBarCommands !== 'undefined') {\n\t\t\tthis._onDidChangeStatusBarCommands.fire(this.statusBarCommands!);\n\t\t}\n\t}\n\n\t$registerGroup(handle: number, id: string, label: string): void {\n\t\tconst group = new MainThreadSCMResourceGroup(\n\t\t\tthis.handle,\n\t\t\thandle,\n\t\t\tthis,\n\t\t\t{},\n\t\t\tlabel,\n\t\t\tid\n\t\t);\n\n\t\tthis._groupsByHandle[handle] = group;\n\t\tthis.groups.splice(this.groups.elements.length, 0, [group]);\n\t}\n\n\t$updateGroup(handle: number, features: SCMGroupFeatures): void {\n\t\tconst group = this._groupsByHandle[handle];\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.$updateGroup(features);\n\t}\n\n\t$updateGroupLabel(handle: number, label: string): void {\n\t\tconst group = this._groupsByHandle[handle];\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tgroup.$updateGroupLabel(label);\n\t}\n\n\t$spliceGroupResourceStates(splices: SCMRawResourceSplices[]): void {\n\t\tfor (const [groupHandle, groupSlices] of splices) {\n\t\t\tconst group = this._groupsByHandle[groupHandle];\n\n\t\t\tif (!group) {\n\t\t\t\tconsole.warn(`SCM group ${groupHandle} not found in provider ${this.label}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// reverse the splices sequence in order to apply them correctly\n\t\t\tgroupSlices.reverse();\n\n\t\t\tfor (const [start, deleteCount, rawResources] of groupSlices) {\n\t\t\t\tconst resources = rawResources.map(rawResource => {\n\t\t\t\t\tconst [handle, sourceUri, icons, tooltip, strikeThrough, faded, source, letter, color] = rawResource;\n\t\t\t\t\tconst icon = icons[0];\n\t\t\t\t\tconst iconDark = icons[1] || icon;\n\t\t\t\t\tconst decorations = {\n\t\t\t\t\t\ticon: icon ? URI.parse(icon) : undefined,\n\t\t\t\t\t\ticonDark: iconDark ? URI.parse(iconDark) : undefined,\n\t\t\t\t\t\ttooltip,\n\t\t\t\t\t\tstrikeThrough,\n\t\t\t\t\t\tfaded,\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\tletter,\n\t\t\t\t\t\tcolor: color ? color.id : undefined\n\t\t\t\t\t};\n\n\t\t\t\t\treturn new MainThreadSCMResource(\n\t\t\t\t\t\tthis.proxy,\n\t\t\t\t\t\tthis.handle,\n\t\t\t\t\t\tgroupHandle,\n\t\t\t\t\t\thandle,\n\t\t\t\t\t\tURI.revive(sourceUri),\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\tdecorations\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tgroup.splice(start, deleteCount, resources);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChangeResources.fire();\n\t}\n\n\t$unregisterGroup(handle: number): void {\n\t\tconst group = this._groupsByHandle[handle];\n\n\t\tif (!group) {\n\t\t\treturn;\n\t\t}\n\n\t\tdelete this._groupsByHandle[handle];\n\t\tthis.groups.splice(this.groups.elements.indexOf(group), 1);\n\t}\n\n\tasync getOriginalResource(uri: URI): Promise<URI | null> {\n\t\tif (!this.features.hasQuickDiffProvider) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result = await this.proxy.$provideOriginalResource(this.handle, uri, CancellationToken.None);\n\t\treturn result && URI.revive(result);\n\t}\n\n\ttoJSON(): any {\n\t\treturn {\n\t\t\t$mid: 5,\n\t\t\thandle: this.handle\n\t\t};\n\t}\n\n\tdispose(): void {\n\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadSCM)\nexport class MainThreadSCM implements MainThreadSCMShape {\n\n\tprivate readonly _proxy: ExtHostSCMShape;\n\tprivate _repositories: { [handle: number]: ISCMRepository; } = Object.create(null);\n\tprivate _inputDisposables: { [handle: number]: IDisposable; } = Object.create(null);\n\tprivate _disposables: IDisposable[] = [];\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISCMService private readonly scmService: ISCMService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSCM);\n\n\t\tEvent.debounce(scmService.onDidChangeSelectedRepositories, (_, e) => e, 100)\n\t\t\t(this.onDidChangeSelectedRepositories, this, this._disposables);\n\t}\n\n\tdispose(): void {\n\t\tObject.keys(this._repositories)\n\t\t\t.forEach(id => this._repositories[id].dispose());\n\t\tthis._repositories = Object.create(null);\n\n\t\tObject.keys(this._inputDisposables)\n\t\t\t.forEach(id => this._inputDisposables[id].dispose());\n\t\tthis._inputDisposables = Object.create(null);\n\n\t\tthis._disposables = dispose(this._disposables);\n\t}\n\n\t$registerSourceControl(handle: number, id: string, label: string, rootUri: UriComponents | undefined): void {\n\t\tconst provider = new MainThreadSCMProvider(this._proxy, handle, id, label, rootUri && URI.revive(rootUri), this.scmService);\n\t\tconst repository = this.scmService.registerSCMProvider(provider);\n\t\tthis._repositories[handle] = repository;\n\n\t\tconst inputDisposable = repository.input.onDidChange(value => this._proxy.$onInputBoxValueChange(handle, value));\n\t\tthis._inputDisposables[handle] = inputDisposable;\n\t}\n\n\t$updateSourceControl(handle: number, features: SCMProviderFeatures): void {\n\t\tconst repository = this._repositories[handle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$updateSourceControl(features);\n\t}\n\n\t$unregisterSourceControl(handle: number): void {\n\t\tconst repository = this._repositories[handle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._inputDisposables[handle].dispose();\n\t\tdelete this._inputDisposables[handle];\n\n\t\trepository.dispose();\n\t\tdelete this._repositories[handle];\n\t}\n\n\t$registerGroup(sourceControlHandle: number, groupHandle: number, id: string, label: string): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$registerGroup(groupHandle, id, label);\n\t}\n\n\t$updateGroup(sourceControlHandle: number, groupHandle: number, features: SCMGroupFeatures): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$updateGroup(groupHandle, features);\n\t}\n\n\t$updateGroupLabel(sourceControlHandle: number, groupHandle: number, label: string): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$updateGroupLabel(groupHandle, label);\n\t}\n\n\t$spliceResourceStates(sourceControlHandle: number, splices: SCMRawResourceSplices[]): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$spliceGroupResourceStates(splices);\n\t}\n\n\t$unregisterGroup(sourceControlHandle: number, handle: number): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = repository.provider as MainThreadSCMProvider;\n\t\tprovider.$unregisterGroup(handle);\n\t}\n\n\t$setInputBoxValue(sourceControlHandle: number, value: string): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\trepository.input.value = value;\n\t}\n\n\t$setInputBoxPlaceholder(sourceControlHandle: number, placeholder: string): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\trepository.input.placeholder = placeholder;\n\t}\n\n\t$setInputBoxVisibility(sourceControlHandle: number, visible: boolean): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\trepository.input.visible = visible;\n\t}\n\n\t$setValidationProviderIsEnabled(sourceControlHandle: number, enabled: boolean): void {\n\t\tconst repository = this._repositories[sourceControlHandle];\n\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (enabled) {\n\t\t\trepository.input.validateInput = async (value, pos): Promise<IInputValidation | undefined> => {\n\t\t\t\tconst result = await this._proxy.$validateInput(sourceControlHandle, value, pos);\n\t\t\t\treturn result && { message: result[0], type: result[1] };\n\t\t\t};\n\t\t} else {\n\t\t\trepository.input.validateInput = async () => undefined;\n\t\t}\n\t}\n\n\tprivate onDidChangeSelectedRepositories(repositories: ISCMRepository[]): void {\n\t\tconst handles = repositories\n\t\t\t.filter(r => r.provider instanceof MainThreadSCMProvider)\n\t\t\t.map(r => (r.provider as MainThreadSCMProvider).handle);\n\n\t\tthis._proxy.$setSelectedSourceControls(handles);\n\t}\n}\n"]}]}