{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar backup_1 = require(\"vs/workbench/services/backup/common/backup\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar textfiles_1 = require(\"vs/workbench/services/textfile/common/textfiles\");\nvar untitledEditorService_1 = require(\"vs/workbench/services/untitled/common/untitledEditorService\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar files_1 = require(\"vs/platform/files/common/files\");\nvar AUTO_SAVE_AFTER_DELAY_DISABLED_TIME = files_1.CONTENT_CHANGE_EVENT_BUFFER_DELAY + 500;\nvar BackupModelTracker = /** @class */ (function (_super) {\n    tslib_1.__extends(BackupModelTracker, _super);\n    function BackupModelTracker(backupFileService, textFileService, untitledEditorService, configurationService) {\n        var _this = _super.call(this) || this;\n        _this.backupFileService = backupFileService;\n        _this.textFileService = textFileService;\n        _this.untitledEditorService = untitledEditorService;\n        _this.configurationService = configurationService;\n        _this.registerListeners();\n        return _this;\n    }\n    BackupModelTracker.prototype.registerListeners = function () {\n        var _this = this;\n        // Listen for text file model changes\n        this._register(this.textFileService.models.onModelContentChanged(function (e) { return _this.onTextFileModelChanged(e); }));\n        this._register(this.textFileService.models.onModelSaved(function (e) { return _this.discardBackup(e.resource); }));\n        this._register(this.textFileService.models.onModelDisposed(function (e) { return _this.discardBackup(e); }));\n        // Listen for untitled model changes\n        this._register(this.untitledEditorService.onDidChangeContent(function (e) { return _this.onUntitledModelChanged(e); }));\n        this._register(this.untitledEditorService.onDidDisposeModel(function (e) { return _this.discardBackup(e); }));\n        // Listen to config changes\n        this._register(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationChange(_this.configurationService.getValue()); }));\n    };\n    BackupModelTracker.prototype.onConfigurationChange = function (configuration) {\n        if (!configuration || !configuration.files) {\n            this.configuredAutoSaveAfterDelay = false;\n            return;\n        }\n        this.configuredAutoSaveAfterDelay =\n            (configuration.files.autoSave === files_1.AutoSaveConfiguration.AFTER_DELAY &&\n                configuration.files.autoSaveDelay <= AUTO_SAVE_AFTER_DELAY_DISABLED_TIME);\n    };\n    BackupModelTracker.prototype.onTextFileModelChanged = function (event) {\n        if (event.kind === textfiles_1.StateChange.REVERTED) {\n            // This must proceed even if auto save after delay is configured in order to clean up\n            // any backups made before the config change\n            this.discardBackup(event.resource);\n        }\n        else if (event.kind === textfiles_1.StateChange.CONTENT_CHANGE) {\n            // Do not backup when auto save after delay is configured\n            if (!this.configuredAutoSaveAfterDelay) {\n                var model = this.textFileService.models.get(event.resource);\n                if (model) {\n                    var snapshot = model.createSnapshot();\n                    if (snapshot) {\n                        this.backupFileService.backupResource(model.getResource(), snapshot, model.getVersionId());\n                    }\n                }\n            }\n        }\n    };\n    BackupModelTracker.prototype.onUntitledModelChanged = function (resource) {\n        var _this = this;\n        if (this.untitledEditorService.isDirty(resource)) {\n            this.untitledEditorService.loadOrCreate({ resource: resource }).then(function (model) {\n                var snapshot = model.createSnapshot();\n                if (snapshot) {\n                    _this.backupFileService.backupResource(resource, snapshot, model.getVersionId());\n                }\n            });\n        }\n        else {\n            this.discardBackup(resource);\n        }\n    };\n    BackupModelTracker.prototype.discardBackup = function (resource) {\n        this.backupFileService.discardResourceBackup(resource);\n    };\n    BackupModelTracker = tslib_1.__decorate([\n        tslib_1.__param(0, backup_1.IBackupFileService),\n        tslib_1.__param(1, textfiles_1.ITextFileService),\n        tslib_1.__param(2, untitledEditorService_1.IUntitledEditorService),\n        tslib_1.__param(3, configuration_1.IConfigurationService)\n    ], BackupModelTracker);\n    return BackupModelTracker;\n}(lifecycle_1.Disposable));\nexports.BackupModelTracker = BackupModelTracker;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/backup/common/backupModelTracker.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as Uri } from 'vs/base/common/uri';\nimport { IBackupFileService } from 'vs/workbench/services/backup/common/backup';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ITextFileService, TextFileModelChangeEvent, StateChange } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IUntitledEditorService } from 'vs/workbench/services/untitled/common/untitledEditorService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfiguration, AutoSaveConfiguration, CONTENT_CHANGE_EVENT_BUFFER_DELAY } from 'vs/platform/files/common/files';\n\nconst AUTO_SAVE_AFTER_DELAY_DISABLED_TIME = CONTENT_CHANGE_EVENT_BUFFER_DELAY + 500;\n\nexport class BackupModelTracker extends Disposable implements IWorkbenchContribution {\n\n\t_serviceBrand: any;\n\n\tprivate configuredAutoSaveAfterDelay: boolean;\n\n\tconstructor(\n\t\t@IBackupFileService private readonly backupFileService: IBackupFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IUntitledEditorService private readonly untitledEditorService: IUntitledEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\n\t\t// Listen for text file model changes\n\t\tthis._register(this.textFileService.models.onModelContentChanged((e) => this.onTextFileModelChanged(e)));\n\t\tthis._register(this.textFileService.models.onModelSaved((e) => this.discardBackup(e.resource)));\n\t\tthis._register(this.textFileService.models.onModelDisposed((e) => this.discardBackup(e)));\n\n\t\t// Listen for untitled model changes\n\t\tthis._register(this.untitledEditorService.onDidChangeContent((e) => this.onUntitledModelChanged(e)));\n\t\tthis._register(this.untitledEditorService.onDidDisposeModel((e) => this.discardBackup(e)));\n\n\t\t// Listen to config changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(this.configurationService.getValue<IFilesConfiguration>())));\n\t}\n\n\tprivate onConfigurationChange(configuration: IFilesConfiguration): void {\n\t\tif (!configuration || !configuration.files) {\n\t\t\tthis.configuredAutoSaveAfterDelay = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.configuredAutoSaveAfterDelay =\n\t\t\t(configuration.files.autoSave === AutoSaveConfiguration.AFTER_DELAY &&\n\t\t\t\tconfiguration.files.autoSaveDelay <= AUTO_SAVE_AFTER_DELAY_DISABLED_TIME);\n\t}\n\n\tprivate onTextFileModelChanged(event: TextFileModelChangeEvent): void {\n\t\tif (event.kind === StateChange.REVERTED) {\n\t\t\t// This must proceed even if auto save after delay is configured in order to clean up\n\t\t\t// any backups made before the config change\n\t\t\tthis.discardBackup(event.resource);\n\t\t} else if (event.kind === StateChange.CONTENT_CHANGE) {\n\t\t\t// Do not backup when auto save after delay is configured\n\t\t\tif (!this.configuredAutoSaveAfterDelay) {\n\t\t\t\tconst model = this.textFileService.models.get(event.resource);\n\t\t\t\tif (model) {\n\t\t\t\t\tconst snapshot = model.createSnapshot();\n\t\t\t\t\tif (snapshot) {\n\t\t\t\t\t\tthis.backupFileService.backupResource(model.getResource(), snapshot, model.getVersionId());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onUntitledModelChanged(resource: Uri): void {\n\t\tif (this.untitledEditorService.isDirty(resource)) {\n\t\t\tthis.untitledEditorService.loadOrCreate({ resource }).then(model => {\n\t\t\t\tconst snapshot = model.createSnapshot();\n\t\t\t\tif (snapshot) {\n\t\t\t\t\tthis.backupFileService.backupResource(resource, snapshot, model.getVersionId());\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.discardBackup(resource);\n\t\t}\n\t}\n\n\tprivate discardBackup(resource: Uri): void {\n\t\tthis.backupFileService.discardResourceBackup(resource);\n\t}\n}"]}]}