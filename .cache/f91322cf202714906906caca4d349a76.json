{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerView.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerView.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar nls = require(\"vs/nls\");\nvar perf = require(\"vs/base/common/performance\");\nvar decorators_1 = require(\"vs/base/common/decorators\");\nvar files_1 = require(\"vs/workbench/contrib/files/common/files\");\nvar fileActions_1 = require(\"vs/workbench/contrib/files/browser/fileActions\");\nvar editor_1 = require(\"vs/workbench/common/editor\");\nvar diffEditorInput_1 = require(\"vs/workbench/common/editor/diffEditorInput\");\nvar DOM = require(\"vs/base/browser/dom\");\nvar viewlet_1 = require(\"vs/workbench/browser/viewlet\");\nvar layoutService_1 = require(\"vs/workbench/services/layout/browser/layoutService\");\nvar explorerDecorationsProvider_1 = require(\"vs/workbench/contrib/files/browser/views/explorerDecorationsProvider\");\nvar workspace_1 = require(\"vs/platform/workspace/common/workspace\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nvar keybinding_1 = require(\"vs/platform/keybinding/common/keybinding\");\nvar instantiation_1 = require(\"vs/platform/instantiation/common/instantiation\");\nvar progress_1 = require(\"vs/platform/progress/common/progress\");\nvar contextView_1 = require(\"vs/platform/contextview/browser/contextView\");\nvar contextkey_1 = require(\"vs/platform/contextkey/common/contextkey\");\nvar resources_1 = require(\"vs/workbench/common/resources\");\nvar decorations_1 = require(\"vs/workbench/services/decorations/browser/decorations\");\nvar listService_1 = require(\"vs/platform/list/browser/listService\");\nvar dnd_1 = require(\"vs/base/browser/dnd\");\nvar editorService_1 = require(\"vs/workbench/services/editor/common/editorService\");\nvar panelViewlet_1 = require(\"vs/workbench/browser/parts/views/panelViewlet\");\nvar label_1 = require(\"vs/platform/label/common/label\");\nvar explorerViewer_1 = require(\"vs/workbench/contrib/files/browser/views/explorerViewer\");\nvar themeService_1 = require(\"vs/platform/theme/common/themeService\");\nvar actions_1 = require(\"vs/platform/actions/common/actions\");\nvar menuItemActionItem_1 = require(\"vs/platform/actions/browser/menuItemActionItem\");\nvar telemetry_1 = require(\"vs/platform/telemetry/common/telemetry\");\nvar explorerModel_1 = require(\"vs/workbench/contrib/files/common/explorerModel\");\nvar errors_1 = require(\"vs/base/common/errors\");\nvar labels_1 = require(\"vs/workbench/browser/labels\");\nvar views_1 = require(\"vs/workbench/browser/parts/views/views\");\nvar storage_1 = require(\"vs/platform/storage/common/storage\");\nvar clipboardService_1 = require(\"vs/platform/clipboard/common/clipboardService\");\nvar resources_2 = require(\"vs/base/common/resources\");\nvar map_1 = require(\"vs/base/common/map\");\nvar arrays_1 = require(\"vs/base/common/arrays\");\nvar types_1 = require(\"vs/base/common/types\");\nvar ExplorerView = /** @class */ (function (_super) {\n    tslib_1.__extends(ExplorerView, _super);\n    function ExplorerView(options, contextMenuService, instantiationService, contextService, progressService, editorService, layoutService, keybindingService, contextKeyService, configurationService, decorationService, labelService, themeService, menuService, telemetryService, explorerService, storageService, clipboardService) {\n        var _this = _super.call(this, tslib_1.__assign({}, options, { id: ExplorerView.ID, ariaHeaderLabel: nls.localize('explorerSection', \"Files Explorer Section\") }), keybindingService, contextMenuService, configurationService) || this;\n        _this.instantiationService = instantiationService;\n        _this.contextService = contextService;\n        _this.progressService = progressService;\n        _this.editorService = editorService;\n        _this.layoutService = layoutService;\n        _this.contextKeyService = contextKeyService;\n        _this.labelService = labelService;\n        _this.themeService = themeService;\n        _this.menuService = menuService;\n        _this.telemetryService = telemetryService;\n        _this.explorerService = explorerService;\n        _this.storageService = storageService;\n        _this.clipboardService = clipboardService;\n        // Refresh is needed on the initial explorer open\n        _this.shouldRefresh = true;\n        _this.autoReveal = false;\n        _this.resourceContext = instantiationService.createInstance(resources_1.ResourceContextKey);\n        _this.disposables.push(_this.resourceContext);\n        _this.folderContext = files_1.ExplorerFolderContext.bindTo(contextKeyService);\n        _this.readonlyContext = files_1.ExplorerResourceReadonlyContext.bindTo(contextKeyService);\n        _this.rootContext = files_1.ExplorerRootContext.bindTo(contextKeyService);\n        var decorationProvider = new explorerDecorationsProvider_1.ExplorerDecorationsProvider(_this.explorerService, contextService);\n        decorationService.registerDecorationsProvider(decorationProvider);\n        _this.disposables.push(decorationProvider);\n        _this.disposables.push(_this.resourceContext);\n        return _this;\n    }\n    Object.defineProperty(ExplorerView.prototype, \"name\", {\n        get: function () {\n            return this.labelService.getWorkspaceLabel(this.contextService.getWorkspace());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerView.prototype, \"title\", {\n        get: function () {\n            return this.name;\n        },\n        set: function (value) {\n            // noop\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerView.prototype, \"contributedContextMenu\", {\n        // Memoized locals\n        get: function () {\n            var contributedContextMenu = this.menuService.createMenu(actions_1.MenuId.ExplorerContext, this.tree.contextKeyService);\n            this.disposables.push(contributedContextMenu);\n            return contributedContextMenu;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerView.prototype, \"fileCopiedContextKey\", {\n        get: function () {\n            return fileActions_1.FileCopiedContext.bindTo(this.contextKeyService);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ExplorerView.prototype, \"resourceCutContextKey\", {\n        get: function () {\n            return files_1.ExplorerResourceCut.bindTo(this.contextKeyService);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Split view methods\n    ExplorerView.prototype.renderHeader = function (container) {\n        var _this = this;\n        _super.prototype.renderHeader.call(this, container);\n        // Expand on drag over\n        this.dragHandler = new dnd_1.DelayedDragHandler(container, function () { return _this.setExpanded(true); });\n        var titleElement = container.querySelector('.title');\n        var setHeader = function () {\n            var workspace = _this.contextService.getWorkspace();\n            var title = workspace.folders.map(function (folder) { return folder.name; }).join();\n            titleElement.textContent = _this.name;\n            titleElement.title = title;\n        };\n        this.disposables.push(this.contextService.onDidChangeWorkspaceName(setHeader));\n        this.disposables.push(this.labelService.onDidChangeFormatters(setHeader));\n        setHeader();\n    };\n    ExplorerView.prototype.layoutBody = function (height, width) {\n        this.tree.layout(height, width);\n    };\n    ExplorerView.prototype.renderBody = function (container) {\n        var _this = this;\n        var treeContainer = DOM.append(container, DOM.$('.explorer-folders-view'));\n        this.createTree(treeContainer);\n        if (this.toolbar) {\n            this.toolbar.setActions(this.getActions(), this.getSecondaryActions())();\n        }\n        this.disposables.push(this.labelService.onDidChangeFormatters(function () {\n            _this._onDidChangeTitleArea.fire();\n            _this.refresh();\n        }));\n        this.disposables.push(this.explorerService.onDidChangeRoots(function () { return _this.setTreeInput(); }));\n        this.disposables.push(this.explorerService.onDidChangeItem(function (e) { return _this.refresh(e); }));\n        this.disposables.push(this.explorerService.onDidChangeEditable(function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var isEditing;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        isEditing = !!this.explorerService.getEditableData(e);\n                        if (!isEditing) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.tree.expand(e.parent)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        DOM.removeClass(treeContainer, 'highlight');\n                        _a.label = 3;\n                    case 3: return [4 /*yield*/, this.refresh(e.parent)];\n                    case 4:\n                        _a.sent();\n                        if (isEditing) {\n                            DOM.addClass(treeContainer, 'highlight');\n                            this.tree.reveal(e);\n                        }\n                        else {\n                            this.tree.domFocus();\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); }));\n        this.disposables.push(this.explorerService.onDidSelectResource(function (e) { return _this.onSelectResource(e.resource, e.reveal); }));\n        this.disposables.push(this.explorerService.onDidCopyItems(function (e) { return _this.onCopyItems(e.items, e.cut, e.previouslyCutItems); }));\n        // Update configuration\n        var configuration = this.configurationService.getValue();\n        this.onConfigurationUpdated(configuration);\n        // When the explorer viewer is loaded, listen to changes to the editor input\n        this.disposables.push(this.editorService.onDidActiveEditorChange(function () {\n            _this.selectActiveFile(true);\n        }));\n        // Also handle configuration updates\n        this.disposables.push(this.configurationService.onDidChangeConfiguration(function (e) { return _this.onConfigurationUpdated(_this.configurationService.getValue(), e); }));\n        this.disposables.push(this.onDidChangeBodyVisibility(function (visible) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!visible) return [3 /*break*/, 3];\n                        if (!this.shouldRefresh) return [3 /*break*/, 2];\n                        this.shouldRefresh = false;\n                        return [4 /*yield*/, this.setTreeInput()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        // Find resource to focus from active editor input if set\n                        this.selectActiveFile(false, true);\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); }));\n    };\n    ExplorerView.prototype.getActions = function () {\n        var _this = this;\n        var actions = [];\n        var getFocus = function () {\n            var focus = _this.tree.getFocus();\n            return focus.length > 0 ? focus[0] : undefined;\n        };\n        actions.push(this.instantiationService.createInstance(fileActions_1.NewFileAction, getFocus));\n        actions.push(this.instantiationService.createInstance(fileActions_1.NewFolderAction, getFocus));\n        actions.push(this.instantiationService.createInstance(fileActions_1.RefreshExplorerView, fileActions_1.RefreshExplorerView.ID, fileActions_1.RefreshExplorerView.LABEL));\n        actions.push(this.instantiationService.createInstance(viewlet_1.CollapseAction, this.tree, true, 'explorer-action collapse-explorer'));\n        return actions;\n    };\n    ExplorerView.prototype.focus = function () {\n        this.tree.domFocus();\n        var focused = this.tree.getFocus();\n        if (focused.length === 1) {\n            if (this.autoReveal) {\n                this.tree.reveal(focused[0], 0.5);\n            }\n            var activeFile = this.getActiveFile();\n            if (!activeFile && !focused[0].isDirectory) {\n                // Open the focused element in the editor if there is currently no file opened #67708\n                this.editorService.openEditor({ resource: focused[0].resource, options: { preserveFocus: true, revealIfVisible: true } })\n                    .then(undefined, errors_1.onUnexpectedError);\n            }\n        }\n    };\n    ExplorerView.prototype.selectActiveFile = function (deselect, reveal) {\n        if (reveal === void 0) { reveal = this.autoReveal; }\n        if (this.autoReveal) {\n            var activeFile = this.getActiveFile();\n            if (activeFile) {\n                var focus = this.tree.getFocus();\n                if (focus.length === 1 && focus[0].resource.toString() === activeFile.toString()) {\n                    // No action needed, active file is already focused\n                    return;\n                }\n                this.explorerService.select(activeFile, reveal);\n            }\n            else if (deselect) {\n                this.tree.setSelection([]);\n                this.tree.setFocus([]);\n            }\n        }\n    };\n    ExplorerView.prototype.createTree = function (container) {\n        var _this = this;\n        this.filter = this.instantiationService.createInstance(explorerViewer_1.FilesFilter);\n        this.disposables.push(this.filter);\n        var explorerLabels = this.instantiationService.createInstance(labels_1.ResourceLabels, { onDidChangeVisibility: this.onDidChangeBodyVisibility });\n        this.disposables.push(explorerLabels);\n        var updateWidth = function (stat) { return _this.tree.updateWidth(stat); };\n        var filesRenderer = this.instantiationService.createInstance(explorerViewer_1.FilesRenderer, explorerLabels, updateWidth);\n        this.disposables.push(filesRenderer);\n        this.disposables.push(views_1.createFileIconThemableTreeContainerScope(container, this.themeService));\n        this.tree = this.instantiationService.createInstance(listService_1.WorkbenchAsyncDataTree, container, new explorerViewer_1.ExplorerDelegate(), [filesRenderer], this.instantiationService.createInstance(explorerViewer_1.ExplorerDataSource), {\n            accessibilityProvider: new explorerViewer_1.ExplorerAccessibilityProvider(),\n            ariaLabel: nls.localize('treeAriaLabel', \"Files Explorer\"),\n            identityProvider: {\n                getId: function (stat) {\n                    if (stat instanceof explorerModel_1.NewExplorerItem) {\n                        return \"new:\" + stat.resource;\n                    }\n                    return stat.resource;\n                }\n            },\n            keyboardNavigationLabelProvider: {\n                getKeyboardNavigationLabel: function (stat) {\n                    if (_this.explorerService.isEditable(stat)) {\n                        return undefined;\n                    }\n                    return stat.name;\n                }\n            },\n            multipleSelectionSupport: true,\n            filter: this.filter,\n            sorter: this.instantiationService.createInstance(explorerViewer_1.FileSorter),\n            dnd: this.instantiationService.createInstance(explorerViewer_1.FileDragAndDrop),\n            autoExpandSingleChildren: true\n        });\n        this.disposables.push(this.tree);\n        // Bind context keys\n        files_1.FilesExplorerFocusedContext.bindTo(this.tree.contextKeyService);\n        files_1.ExplorerFocusedContext.bindTo(this.tree.contextKeyService);\n        // Update resource context based on focused element\n        this.disposables.push(this.tree.onDidChangeFocus(function (e) { return _this.onFocusChanged(e.elements); }));\n        this.onFocusChanged([]);\n        var explorerNavigator = new listService_1.TreeResourceNavigator2(this.tree);\n        this.disposables.push(explorerNavigator);\n        // Open when selecting via keyboard\n        this.disposables.push(explorerNavigator.onDidOpenResource(function (e) {\n            var selection = _this.tree.getSelection();\n            // Do not react if the user is expanding selection via keyboard.\n            // Check if the item was previously also selected, if yes the user is simply expanding / collapsing current selection #66589.\n            var shiftDown = e.browserEvent instanceof KeyboardEvent && e.browserEvent.shiftKey;\n            if (selection.length === 1 && !shiftDown) {\n                if (selection[0].isDirectory || _this.explorerService.isEditable(undefined)) {\n                    // Do not react if user is clicking on explorer items while some are being edited #70276\n                    // Do not react if clicking on directories\n                    return;\n                }\n                /* __GDPR__\n                \"workbenchActionExecuted\" : {\n                    \"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                    \"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                }*/\n                _this.telemetryService.publicLog('workbenchActionExecuted', { id: 'workbench.files.openFile', from: 'explorer' });\n                _this.editorService.openEditor({ resource: selection[0].resource, options: { preserveFocus: e.editorOptions.preserveFocus, pinned: e.editorOptions.pinned } }, e.sideBySide ? editorService_1.SIDE_GROUP : editorService_1.ACTIVE_GROUP)\n                    .then(undefined, errors_1.onUnexpectedError);\n            }\n        }));\n        this.disposables.push(this.tree.onContextMenu(function (e) { return _this.onContextMenu(e); }));\n        // save view state on shutdown\n        this.storageService.onWillSaveState(function () {\n            _this.storageService.store(ExplorerView.TREE_VIEW_STATE_STORAGE_KEY, JSON.stringify(_this.tree.getViewState()), storage_1.StorageScope.WORKSPACE);\n        }, null, this.disposables);\n    };\n    // React on events\n    ExplorerView.prototype.onConfigurationUpdated = function (configuration, event) {\n        this.autoReveal = configuration && configuration.explorer && configuration.explorer.autoReveal;\n        // Push down config updates to components of viewer\n        var needsRefresh = false;\n        if (this.filter) {\n            needsRefresh = this.filter.updateConfiguration();\n        }\n        if (event && !needsRefresh) {\n            needsRefresh = event.affectsConfiguration('explorer.decorations.colors')\n                || event.affectsConfiguration('explorer.decorations.badges');\n        }\n        // Refresh viewer as needed if this originates from a config event\n        if (event && needsRefresh) {\n            this.refresh();\n        }\n    };\n    ExplorerView.prototype.onContextMenu = function (e) {\n        var _this = this;\n        var stat = e.element;\n        // update dynamic contexts\n        this.fileCopiedContextKey.set(this.clipboardService.hasResources());\n        var selection = this.tree.getSelection();\n        this.contextMenuService.showContextMenu({\n            getAnchor: function () { return e.anchor; },\n            getActions: function () {\n                var actions = [];\n                // If the click is outside of the elements pass the root resource if there is only one root. If there are multiple roots pass empty object.\n                var roots = _this.explorerService.roots;\n                var arg = stat instanceof explorerModel_1.ExplorerItem ? stat.resource : roots.length === 1 ? roots[0].resource : {};\n                menuItemActionItem_1.fillInContextMenuActions(_this.contributedContextMenu, { arg: arg, shouldForwardArgs: true }, actions, _this.contextMenuService);\n                return actions;\n            },\n            onHide: function (wasCancelled) {\n                if (wasCancelled) {\n                    _this.tree.domFocus();\n                }\n            },\n            getActionsContext: function () { return stat && selection && selection.indexOf(stat) >= 0\n                ? selection.map(function (fs) { return fs.resource; })\n                : stat instanceof explorerModel_1.ExplorerItem ? [stat.resource] : []; }\n        });\n    };\n    ExplorerView.prototype.onFocusChanged = function (elements) {\n        var stat = elements && elements.length ? elements[0] : undefined;\n        var isSingleFolder = this.contextService.getWorkbenchState() === workspace_1.WorkbenchState.FOLDER;\n        var resource = stat ? stat.resource : isSingleFolder ? this.contextService.getWorkspace().folders[0].uri : null;\n        this.resourceContext.set(resource);\n        this.folderContext.set((isSingleFolder && !stat) || !!stat && stat.isDirectory);\n        this.readonlyContext.set(!!stat && stat.isReadonly);\n        this.rootContext.set(!stat || (stat && stat.isRoot));\n    };\n    // General methods\n    /**\n     * Refresh the contents of the explorer to get up to date data from the disk about the file structure.\n     * If the item is passed we refresh only that level of the tree, otherwise we do a full refresh.\n     */\n    ExplorerView.prototype.refresh = function (item) {\n        if (!this.tree || !this.isBodyVisible()) {\n            this.shouldRefresh = true;\n            return Promise.resolve(undefined);\n        }\n        // Tree node doesn't exist yet\n        if (item && !this.tree.hasNode(item)) {\n            return Promise.resolve(undefined);\n        }\n        var recursive = !item;\n        var toRefresh = item || this.tree.getInput();\n        return this.tree.updateChildren(toRefresh, recursive);\n    };\n    ExplorerView.prototype.getOptimalWidth = function () {\n        var parentNode = this.tree.getHTMLElement();\n        var childNodes = [].slice.call(parentNode.querySelectorAll('.explorer-item .label-name')); // select all file labels\n        return DOM.getLargestChildWidth(parentNode, childNodes);\n    };\n    // private didLoad = false;\n    ExplorerView.prototype.setTreeInput = function () {\n        var _this = this;\n        if (!this.isBodyVisible()) {\n            this.shouldRefresh = true;\n            return Promise.resolve(undefined);\n        }\n        var initialInputSetup = !this.tree.getInput();\n        if (initialInputSetup) {\n            perf.mark('willResolveExplorer');\n        }\n        var roots = this.explorerService.roots;\n        var input = roots[0];\n        if (this.contextService.getWorkbenchState() !== workspace_1.WorkbenchState.FOLDER || roots[0].isError) {\n            // Display roots only when multi folder workspace\n            input = roots;\n        }\n        var viewState;\n        if (this.tree && this.tree.getInput()) {\n            viewState = this.tree.getViewState();\n        }\n        else {\n            var rawViewState = this.storageService.get(ExplorerView.TREE_VIEW_STATE_STORAGE_KEY, storage_1.StorageScope.WORKSPACE);\n            if (rawViewState) {\n                viewState = JSON.parse(rawViewState);\n            }\n        }\n        var previousInput = this.tree.getInput();\n        var promise = this.tree.setInput(input, viewState).then(function () {\n            if (Array.isArray(input)) {\n                if (!viewState || previousInput instanceof explorerModel_1.ExplorerItem) {\n                    // There is no view state for this workspace, expand all roots. Or we transitioned from a folder workspace.\n                    input.forEach(function (item) { return _this.tree.expand(item).then(undefined, errors_1.onUnexpectedError); });\n                }\n                if (Array.isArray(previousInput) && previousInput.length < input.length) {\n                    // Roots added to the explorer -> expand them.\n                    input.slice(previousInput.length).forEach(function (item) { return _this.tree.expand(item).then(undefined, errors_1.onUnexpectedError); });\n                }\n            }\n            if (initialInputSetup) {\n                perf.mark('didResolveExplorer');\n            }\n        });\n        this.progressService.showWhile(promise, this.layoutService.isRestored() ? 800 : 1200 /* less ugly initial startup */);\n        return promise;\n    };\n    ExplorerView.prototype.getActiveFile = function () {\n        var input = this.editorService.activeEditor;\n        // ignore diff editor inputs (helps to get out of diffing when returning to explorer)\n        if (input instanceof diffEditorInput_1.DiffEditorInput) {\n            return undefined;\n        }\n        // check for files\n        return types_1.withNullAsUndefined(editor_1.toResource(input, { supportSideBySide: true }));\n    };\n    ExplorerView.prototype.onSelectResource = function (resource, reveal) {\n        if (reveal === void 0) { reveal = this.autoReveal; }\n        return tslib_1.__awaiter(this, void 0, Promise, function () {\n            var item;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!resource || !this.isBodyVisible()) {\n                            return [2 /*return*/];\n                        }\n                        item = this.explorerService.roots.filter(function (i) { return resources_2.isEqualOrParent(resource, i.resource); })[0];\n                        _a.label = 1;\n                    case 1:\n                        if (!(item && item.resource.toString() !== resource.toString())) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.tree.expand(item)];\n                    case 2:\n                        _a.sent();\n                        item = arrays_1.first(map_1.values(item.children), function (i) { return resources_2.isEqualOrParent(resource, i.resource); });\n                        return [3 /*break*/, 1];\n                    case 3:\n                        if (item && item.parent) {\n                            if (reveal) {\n                                this.tree.reveal(item, 0.5);\n                            }\n                            this.tree.setFocus([item]);\n                            this.tree.setSelection([item]);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    ExplorerView.prototype.onCopyItems = function (stats, cut, previousCut) {\n        var _this = this;\n        this.fileCopiedContextKey.set(stats.length > 0);\n        this.resourceCutContextKey.set(cut && stats.length > 0);\n        if (previousCut) {\n            previousCut.forEach(function (item) { return _this.tree.rerender(item); });\n        }\n        if (cut) {\n            stats.forEach(function (s) { return _this.tree.rerender(s); });\n        }\n    };\n    ExplorerView.prototype.collapseAll = function () {\n        this.tree.collapseAll();\n    };\n    ExplorerView.prototype.dispose = function () {\n        if (this.dragHandler) {\n            this.dragHandler.dispose();\n        }\n        _super.prototype.dispose.call(this);\n    };\n    ExplorerView.ID = 'workbench.explorer.fileView';\n    ExplorerView.TREE_VIEW_STATE_STORAGE_KEY = 'workbench.explorer.treeViewState';\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ExplorerView.prototype, \"contributedContextMenu\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ExplorerView.prototype, \"fileCopiedContextKey\", null);\n    tslib_1.__decorate([\n        decorators_1.memoize\n    ], ExplorerView.prototype, \"resourceCutContextKey\", null);\n    ExplorerView = tslib_1.__decorate([\n        tslib_1.__param(1, contextView_1.IContextMenuService),\n        tslib_1.__param(2, instantiation_1.IInstantiationService),\n        tslib_1.__param(3, workspace_1.IWorkspaceContextService),\n        tslib_1.__param(4, progress_1.IProgressService),\n        tslib_1.__param(5, editorService_1.IEditorService),\n        tslib_1.__param(6, layoutService_1.IWorkbenchLayoutService),\n        tslib_1.__param(7, keybinding_1.IKeybindingService),\n        tslib_1.__param(8, contextkey_1.IContextKeyService),\n        tslib_1.__param(9, configuration_1.IConfigurationService),\n        tslib_1.__param(10, decorations_1.IDecorationsService),\n        tslib_1.__param(11, label_1.ILabelService),\n        tslib_1.__param(12, themeService_1.IThemeService),\n        tslib_1.__param(13, actions_1.IMenuService),\n        tslib_1.__param(14, telemetry_1.ITelemetryService),\n        tslib_1.__param(15, files_1.IExplorerService),\n        tslib_1.__param(16, storage_1.IStorageService),\n        tslib_1.__param(17, clipboardService_1.IClipboardService)\n    ], ExplorerView);\n    return ExplorerView;\n}(panelViewlet_1.ViewletPanel));\nexports.ExplorerView = ExplorerView;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerView.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/contrib/files/browser/views/explorerView.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport * as perf from 'vs/base/common/performance';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { memoize } from 'vs/base/common/decorators';\nimport { IFilesConfiguration, ExplorerFolderContext, FilesExplorerFocusedContext, ExplorerFocusedContext, ExplorerRootContext, ExplorerResourceReadonlyContext, IExplorerService, ExplorerResourceCut } from 'vs/workbench/contrib/files/common/files';\nimport { NewFolderAction, NewFileAction, FileCopiedContext, RefreshExplorerView } from 'vs/workbench/contrib/files/browser/fileActions';\nimport { toResource } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport * as DOM from 'vs/base/browser/dom';\nimport { CollapseAction } from 'vs/workbench/browser/viewlet';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ExplorerDecorationsProvider } from 'vs/workbench/contrib/files/browser/views/explorerDecorationsProvider';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IContextKeyService, IContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ResourceContextKey } from 'vs/workbench/common/resources';\nimport { IDecorationsService } from 'vs/workbench/services/decorations/browser/decorations';\nimport { WorkbenchAsyncDataTree, TreeResourceNavigator2 } from 'vs/platform/list/browser/listService';\nimport { DelayedDragHandler } from 'vs/base/browser/dnd';\nimport { IEditorService, SIDE_GROUP, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IViewletPanelOptions, ViewletPanel } from 'vs/workbench/browser/parts/views/panelViewlet';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ExplorerDelegate, ExplorerAccessibilityProvider, ExplorerDataSource, FilesRenderer, FilesFilter, FileSorter, FileDragAndDrop } from 'vs/workbench/contrib/files/browser/views/explorerViewer';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { ITreeContextMenuEvent } from 'vs/base/browser/ui/tree/tree';\nimport { IMenuService, MenuId, IMenu } from 'vs/platform/actions/common/actions';\nimport { fillInContextMenuActions } from 'vs/platform/actions/browser/menuItemActionItem';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ExplorerItem, NewExplorerItem } from 'vs/workbench/contrib/files/common/explorerModel';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ResourceLabels, IResourceLabelsContainer } from 'vs/workbench/browser/labels';\nimport { createFileIconThemableTreeContainerScope } from 'vs/workbench/browser/parts/views/views';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IAsyncDataTreeViewState } from 'vs/base/browser/ui/tree/asyncDataTree';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { isEqualOrParent } from 'vs/base/common/resources';\nimport { values } from 'vs/base/common/map';\nimport { first } from 'vs/base/common/arrays';\nimport { withNullAsUndefined } from 'vs/base/common/types';\n\nexport class ExplorerView extends ViewletPanel {\n\tstatic readonly ID: string = 'workbench.explorer.fileView';\n\tstatic readonly TREE_VIEW_STATE_STORAGE_KEY: string = 'workbench.explorer.treeViewState';\n\n\tprivate tree: WorkbenchAsyncDataTree<ExplorerItem | ExplorerItem[], ExplorerItem, FuzzyScore>;\n\tprivate filter: FilesFilter;\n\n\tprivate resourceContext: ResourceContextKey;\n\tprivate folderContext: IContextKey<boolean>;\n\tprivate readonlyContext: IContextKey<boolean>;\n\tprivate rootContext: IContextKey<boolean>;\n\n\t// Refresh is needed on the initial explorer open\n\tprivate shouldRefresh = true;\n\tprivate dragHandler: DelayedDragHandler;\n\tprivate autoReveal = false;\n\n\tconstructor(\n\t\toptions: IViewletPanelOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IDecorationsService decorationService: IDecorationsService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IThemeService private readonly themeService: IWorkbenchThemeService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IClipboardService private clipboardService: IClipboardService\n\t) {\n\t\tsuper({ ...(options as IViewletPanelOptions), id: ExplorerView.ID, ariaHeaderLabel: nls.localize('explorerSection', \"Files Explorer Section\") }, keybindingService, contextMenuService, configurationService);\n\n\t\tthis.resourceContext = instantiationService.createInstance(ResourceContextKey);\n\t\tthis.disposables.push(this.resourceContext);\n\t\tthis.folderContext = ExplorerFolderContext.bindTo(contextKeyService);\n\t\tthis.readonlyContext = ExplorerResourceReadonlyContext.bindTo(contextKeyService);\n\t\tthis.rootContext = ExplorerRootContext.bindTo(contextKeyService);\n\n\t\tconst decorationProvider = new ExplorerDecorationsProvider(this.explorerService, contextService);\n\t\tdecorationService.registerDecorationsProvider(decorationProvider);\n\t\tthis.disposables.push(decorationProvider);\n\t\tthis.disposables.push(this.resourceContext);\n\t}\n\n\tget name(): string {\n\t\treturn this.labelService.getWorkspaceLabel(this.contextService.getWorkspace());\n\t}\n\n\tget title(): string {\n\t\treturn this.name;\n\t}\n\n\tset title(value: string) {\n\t\t// noop\n\t}\n\n\t// Memoized locals\n\t@memoize private get contributedContextMenu(): IMenu {\n\t\tconst contributedContextMenu = this.menuService.createMenu(MenuId.ExplorerContext, this.tree.contextKeyService);\n\t\tthis.disposables.push(contributedContextMenu);\n\t\treturn contributedContextMenu;\n\t}\n\n\t@memoize private get fileCopiedContextKey(): IContextKey<boolean> {\n\t\treturn FileCopiedContext.bindTo(this.contextKeyService);\n\t}\n\n\t@memoize private get resourceCutContextKey(): IContextKey<boolean> {\n\t\treturn ExplorerResourceCut.bindTo(this.contextKeyService);\n\t}\n\n\t// Split view methods\n\n\tprotected renderHeader(container: HTMLElement): void {\n\t\tsuper.renderHeader(container);\n\n\t\t// Expand on drag over\n\t\tthis.dragHandler = new DelayedDragHandler(container, () => this.setExpanded(true));\n\n\t\tconst titleElement = container.querySelector('.title') as HTMLElement;\n\t\tconst setHeader = () => {\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tconst title = workspace.folders.map(folder => folder.name).join();\n\t\t\ttitleElement.textContent = this.name;\n\t\t\ttitleElement.title = title;\n\t\t};\n\n\t\tthis.disposables.push(this.contextService.onDidChangeWorkspaceName(setHeader));\n\t\tthis.disposables.push(this.labelService.onDidChangeFormatters(setHeader));\n\t\tsetHeader();\n\t}\n\n\tprotected layoutBody(height: number, width: number): void {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\trenderBody(container: HTMLElement): void {\n\t\tconst treeContainer = DOM.append(container, DOM.$('.explorer-folders-view'));\n\t\tthis.createTree(treeContainer);\n\n\t\tif (this.toolbar) {\n\t\t\tthis.toolbar.setActions(this.getActions(), this.getSecondaryActions())();\n\t\t}\n\n\t\tthis.disposables.push(this.labelService.onDidChangeFormatters(() => {\n\t\t\tthis._onDidChangeTitleArea.fire();\n\t\t\tthis.refresh();\n\t\t}));\n\n\t\tthis.disposables.push(this.explorerService.onDidChangeRoots(() => this.setTreeInput()));\n\t\tthis.disposables.push(this.explorerService.onDidChangeItem(e => this.refresh(e)));\n\t\tthis.disposables.push(this.explorerService.onDidChangeEditable(async e => {\n\t\t\tconst isEditing = !!this.explorerService.getEditableData(e);\n\n\t\t\tif (isEditing) {\n\t\t\t\tawait this.tree.expand(e.parent!);\n\t\t\t} else {\n\t\t\t\tDOM.removeClass(treeContainer, 'highlight');\n\t\t\t}\n\n\t\t\tawait this.refresh(e.parent);\n\n\t\t\tif (isEditing) {\n\t\t\t\tDOM.addClass(treeContainer, 'highlight');\n\t\t\t\tthis.tree.reveal(e);\n\t\t\t} else {\n\t\t\t\tthis.tree.domFocus();\n\t\t\t}\n\t\t}));\n\t\tthis.disposables.push(this.explorerService.onDidSelectResource(e => this.onSelectResource(e.resource, e.reveal)));\n\t\tthis.disposables.push(this.explorerService.onDidCopyItems(e => this.onCopyItems(e.items, e.cut, e.previouslyCutItems)));\n\n\t\t// Update configuration\n\t\tconst configuration = this.configurationService.getValue<IFilesConfiguration>();\n\t\tthis.onConfigurationUpdated(configuration);\n\n\t\t// When the explorer viewer is loaded, listen to changes to the editor input\n\t\tthis.disposables.push(this.editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.selectActiveFile(true);\n\t\t}));\n\n\t\t// Also handle configuration updates\n\t\tthis.disposables.push(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationUpdated(this.configurationService.getValue<IFilesConfiguration>(), e)));\n\n\t\tthis.disposables.push(this.onDidChangeBodyVisibility(async visible => {\n\t\t\tif (visible) {\n\t\t\t\t// If a refresh was requested and we are now visible, run it\n\t\t\t\tif (this.shouldRefresh) {\n\t\t\t\t\tthis.shouldRefresh = false;\n\t\t\t\t\tawait this.setTreeInput();\n\t\t\t\t}\n\t\t\t\t// Find resource to focus from active editor input if set\n\t\t\t\tthis.selectActiveFile(false, true);\n\t\t\t}\n\t\t}));\n\t}\n\n\tgetActions(): IAction[] {\n\t\tconst actions: Action[] = [];\n\n\t\tconst getFocus = () => {\n\t\t\tconst focus = this.tree.getFocus();\n\t\t\treturn focus.length > 0 ? focus[0] : undefined;\n\t\t};\n\t\tactions.push(this.instantiationService.createInstance(NewFileAction, getFocus));\n\t\tactions.push(this.instantiationService.createInstance(NewFolderAction, getFocus));\n\t\tactions.push(this.instantiationService.createInstance(RefreshExplorerView, RefreshExplorerView.ID, RefreshExplorerView.LABEL));\n\t\tactions.push(this.instantiationService.createInstance(CollapseAction, this.tree, true, 'explorer-action collapse-explorer'));\n\n\t\treturn actions;\n\t}\n\n\tfocus(): void {\n\t\tthis.tree.domFocus();\n\n\t\tconst focused = this.tree.getFocus();\n\t\tif (focused.length === 1) {\n\t\t\tif (this.autoReveal) {\n\t\t\t\tthis.tree.reveal(focused[0], 0.5);\n\t\t\t}\n\n\t\t\tconst activeFile = this.getActiveFile();\n\t\t\tif (!activeFile && !focused[0].isDirectory) {\n\t\t\t\t// Open the focused element in the editor if there is currently no file opened #67708\n\t\t\t\tthis.editorService.openEditor({ resource: focused[0].resource, options: { preserveFocus: true, revealIfVisible: true } })\n\t\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate selectActiveFile(deselect?: boolean, reveal = this.autoReveal): void {\n\t\tif (this.autoReveal) {\n\t\t\tconst activeFile = this.getActiveFile();\n\t\t\tif (activeFile) {\n\t\t\t\tconst focus = this.tree.getFocus();\n\t\t\t\tif (focus.length === 1 && focus[0].resource.toString() === activeFile.toString()) {\n\t\t\t\t\t// No action needed, active file is already focused\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.explorerService.select(activeFile, reveal);\n\t\t\t} else if (deselect) {\n\t\t\t\tthis.tree.setSelection([]);\n\t\t\t\tthis.tree.setFocus([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createTree(container: HTMLElement): void {\n\t\tthis.filter = this.instantiationService.createInstance(FilesFilter);\n\t\tthis.disposables.push(this.filter);\n\t\tconst explorerLabels = this.instantiationService.createInstance(ResourceLabels, { onDidChangeVisibility: this.onDidChangeBodyVisibility } as IResourceLabelsContainer);\n\t\tthis.disposables.push(explorerLabels);\n\n\t\tconst updateWidth = (stat: ExplorerItem) => this.tree.updateWidth(stat);\n\t\tconst filesRenderer = this.instantiationService.createInstance(FilesRenderer, explorerLabels, updateWidth);\n\t\tthis.disposables.push(filesRenderer);\n\n\t\tthis.disposables.push(createFileIconThemableTreeContainerScope(container, this.themeService));\n\n\t\tthis.tree = this.instantiationService.createInstance(WorkbenchAsyncDataTree, container, new ExplorerDelegate(), [filesRenderer],\n\t\t\tthis.instantiationService.createInstance(ExplorerDataSource), {\n\t\t\t\taccessibilityProvider: new ExplorerAccessibilityProvider(),\n\t\t\t\tariaLabel: nls.localize('treeAriaLabel', \"Files Explorer\"),\n\t\t\t\tidentityProvider: {\n\t\t\t\t\tgetId: (stat: ExplorerItem) => {\n\t\t\t\t\t\tif (stat instanceof NewExplorerItem) {\n\t\t\t\t\t\t\treturn `new:${stat.resource}`;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn stat.resource;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tkeyboardNavigationLabelProvider: {\n\t\t\t\t\tgetKeyboardNavigationLabel: (stat: ExplorerItem) => {\n\t\t\t\t\t\tif (this.explorerService.isEditable(stat)) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn stat.name;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tmultipleSelectionSupport: true,\n\t\t\t\tfilter: this.filter,\n\t\t\t\tsorter: this.instantiationService.createInstance(FileSorter),\n\t\t\t\tdnd: this.instantiationService.createInstance(FileDragAndDrop),\n\t\t\t\tautoExpandSingleChildren: true\n\t\t\t}) as WorkbenchAsyncDataTree<ExplorerItem | ExplorerItem[], ExplorerItem, FuzzyScore>;\n\t\tthis.disposables.push(this.tree);\n\n\t\t// Bind context keys\n\t\tFilesExplorerFocusedContext.bindTo(this.tree.contextKeyService);\n\t\tExplorerFocusedContext.bindTo(this.tree.contextKeyService);\n\n\t\t// Update resource context based on focused element\n\t\tthis.disposables.push(this.tree.onDidChangeFocus(e => this.onFocusChanged(e.elements)));\n\t\tthis.onFocusChanged([]);\n\t\tconst explorerNavigator = new TreeResourceNavigator2(this.tree);\n\t\tthis.disposables.push(explorerNavigator);\n\t\t// Open when selecting via keyboard\n\t\tthis.disposables.push(explorerNavigator.onDidOpenResource(e => {\n\t\t\tconst selection = this.tree.getSelection();\n\t\t\t// Do not react if the user is expanding selection via keyboard.\n\t\t\t// Check if the item was previously also selected, if yes the user is simply expanding / collapsing current selection #66589.\n\t\t\tconst shiftDown = e.browserEvent instanceof KeyboardEvent && e.browserEvent.shiftKey;\n\t\t\tif (selection.length === 1 && !shiftDown) {\n\t\t\t\tif (selection[0].isDirectory || this.explorerService.isEditable(undefined)) {\n\t\t\t\t\t// Do not react if user is clicking on explorer items while some are being edited #70276\n\t\t\t\t\t// Do not react if clicking on directories\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t/* __GDPR__\n\t\t\t\t\"workbenchActionExecuted\" : {\n\t\t\t\t\t\"id\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\t\"from\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t\t}*/\n\t\t\t\tthis.telemetryService.publicLog('workbenchActionExecuted', { id: 'workbench.files.openFile', from: 'explorer' });\n\t\t\t\tthis.editorService.openEditor({ resource: selection[0].resource, options: { preserveFocus: e.editorOptions.preserveFocus, pinned: e.editorOptions.pinned } }, e.sideBySide ? SIDE_GROUP : ACTIVE_GROUP)\n\t\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.push(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\n\t\t// save view state on shutdown\n\t\tthis.storageService.onWillSaveState(() => {\n\t\t\tthis.storageService.store(ExplorerView.TREE_VIEW_STATE_STORAGE_KEY, JSON.stringify(this.tree.getViewState()), StorageScope.WORKSPACE);\n\t\t}, null, this.disposables);\n\t}\n\n\t// React on events\n\n\tprivate onConfigurationUpdated(configuration: IFilesConfiguration, event?: IConfigurationChangeEvent): void {\n\t\tthis.autoReveal = configuration && configuration.explorer && configuration.explorer.autoReveal;\n\n\t\t// Push down config updates to components of viewer\n\t\tlet needsRefresh = false;\n\t\tif (this.filter) {\n\t\t\tneedsRefresh = this.filter.updateConfiguration();\n\t\t}\n\n\t\tif (event && !needsRefresh) {\n\t\t\tneedsRefresh = event.affectsConfiguration('explorer.decorations.colors')\n\t\t\t\t|| event.affectsConfiguration('explorer.decorations.badges');\n\t\t}\n\n\t\t// Refresh viewer as needed if this originates from a config event\n\t\tif (event && needsRefresh) {\n\t\t\tthis.refresh();\n\t\t}\n\t}\n\n\tprivate onContextMenu(e: ITreeContextMenuEvent<ExplorerItem>): void {\n\t\tconst stat = e.element;\n\n\t\t// update dynamic contexts\n\t\tthis.fileCopiedContextKey.set(this.clipboardService.hasResources());\n\n\t\tconst selection = this.tree.getSelection();\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => e.anchor,\n\t\t\tgetActions: () => {\n\t\t\t\tconst actions: IAction[] = [];\n\t\t\t\t// If the click is outside of the elements pass the root resource if there is only one root. If there are multiple roots pass empty object.\n\t\t\t\tconst roots = this.explorerService.roots;\n\t\t\t\tconst arg = stat instanceof ExplorerItem ? stat.resource : roots.length === 1 ? roots[0].resource : {};\n\t\t\t\tfillInContextMenuActions(this.contributedContextMenu, { arg, shouldForwardArgs: true }, actions, this.contextMenuService);\n\t\t\t\treturn actions;\n\t\t\t},\n\t\t\tonHide: (wasCancelled?: boolean) => {\n\t\t\t\tif (wasCancelled) {\n\t\t\t\t\tthis.tree.domFocus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetActionsContext: () => stat && selection && selection.indexOf(stat) >= 0\n\t\t\t\t? selection.map((fs: ExplorerItem) => fs.resource)\n\t\t\t\t: stat instanceof ExplorerItem ? [stat.resource] : []\n\t\t});\n\t}\n\n\tprivate onFocusChanged(elements: ExplorerItem[]): void {\n\t\tconst stat = elements && elements.length ? elements[0] : undefined;\n\t\tconst isSingleFolder = this.contextService.getWorkbenchState() === WorkbenchState.FOLDER;\n\t\tconst resource = stat ? stat.resource : isSingleFolder ? this.contextService.getWorkspace().folders[0].uri : null;\n\t\tthis.resourceContext.set(resource);\n\t\tthis.folderContext.set((isSingleFolder && !stat) || !!stat && stat.isDirectory);\n\t\tthis.readonlyContext.set(!!stat && stat.isReadonly);\n\t\tthis.rootContext.set(!stat || (stat && stat.isRoot));\n\t}\n\n\t// General methods\n\n\t/**\n\t * Refresh the contents of the explorer to get up to date data from the disk about the file structure.\n\t * If the item is passed we refresh only that level of the tree, otherwise we do a full refresh.\n\t */\n\tprivate refresh(item?: ExplorerItem): Promise<void> {\n\t\tif (!this.tree || !this.isBodyVisible()) {\n\t\t\tthis.shouldRefresh = true;\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Tree node doesn't exist yet\n\t\tif (item && !this.tree.hasNode(item)) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst recursive = !item;\n\t\tconst toRefresh = item || this.tree.getInput();\n\n\t\treturn this.tree.updateChildren(toRefresh, recursive);\n\t}\n\n\tgetOptimalWidth(): number {\n\t\tconst parentNode = this.tree.getHTMLElement();\n\t\tconst childNodes = ([] as HTMLElement[]).slice.call(parentNode.querySelectorAll('.explorer-item .label-name')); // select all file labels\n\n\t\treturn DOM.getLargestChildWidth(parentNode, childNodes);\n\t}\n\n\t// private didLoad = false;\n\n\tprivate setTreeInput(): Promise<void> {\n\t\tif (!this.isBodyVisible()) {\n\t\t\tthis.shouldRefresh = true;\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst initialInputSetup = !this.tree.getInput();\n\t\tif (initialInputSetup) {\n\t\t\tperf.mark('willResolveExplorer');\n\t\t}\n\t\tconst roots = this.explorerService.roots;\n\t\tlet input: ExplorerItem | ExplorerItem[] = roots[0];\n\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.FOLDER || roots[0].isError) {\n\t\t\t// Display roots only when multi folder workspace\n\t\t\tinput = roots;\n\t\t}\n\n\t\tlet viewState: IAsyncDataTreeViewState | undefined;\n\t\tif (this.tree && this.tree.getInput()) {\n\t\t\tviewState = this.tree.getViewState();\n\t\t} else {\n\t\t\tconst rawViewState = this.storageService.get(ExplorerView.TREE_VIEW_STATE_STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t\tif (rawViewState) {\n\t\t\t\tviewState = JSON.parse(rawViewState) as IAsyncDataTreeViewState;\n\t\t\t}\n\t\t}\n\n\t\tconst previousInput = this.tree.getInput();\n\t\tconst promise = this.tree.setInput(input, viewState).then(() => {\n\t\t\tif (Array.isArray(input)) {\n\t\t\t\tif (!viewState || previousInput instanceof ExplorerItem) {\n\t\t\t\t\t// There is no view state for this workspace, expand all roots. Or we transitioned from a folder workspace.\n\t\t\t\t\tinput.forEach(item => this.tree.expand(item).then(undefined, onUnexpectedError));\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(previousInput) && previousInput.length < input.length) {\n\t\t\t\t\t// Roots added to the explorer -> expand them.\n\t\t\t\t\tinput.slice(previousInput.length).forEach(item => this.tree.expand(item).then(undefined, onUnexpectedError));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (initialInputSetup) {\n\t\t\t\tperf.mark('didResolveExplorer');\n\t\t\t}\n\t\t});\n\n\t\tthis.progressService.showWhile(promise, this.layoutService.isRestored() ? 800 : 1200 /* less ugly initial startup */);\n\t\treturn promise;\n\t}\n\n\tprivate getActiveFile(): URI | undefined {\n\t\tconst input = this.editorService.activeEditor;\n\n\t\t// ignore diff editor inputs (helps to get out of diffing when returning to explorer)\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// check for files\n\t\treturn withNullAsUndefined(toResource(input, { supportSideBySide: true }));\n\t}\n\n\tprivate async onSelectResource(resource: URI | undefined, reveal = this.autoReveal): Promise<void> {\n\t\tif (!resource || !this.isBodyVisible()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Expand all stats in the parent chain\n\t\tlet item: ExplorerItem | undefined = this.explorerService.roots.filter(i => isEqualOrParent(resource, i.resource))[0];\n\n\t\twhile (item && item.resource.toString() !== resource.toString()) {\n\t\t\tawait this.tree.expand(item);\n\t\t\titem = first(values(item.children), i => isEqualOrParent(resource, i.resource));\n\t\t}\n\n\t\tif (item && item.parent) {\n\t\t\tif (reveal) {\n\t\t\t\tthis.tree.reveal(item, 0.5);\n\t\t\t}\n\n\t\t\tthis.tree.setFocus([item]);\n\t\t\tthis.tree.setSelection([item]);\n\t\t}\n\t}\n\n\tprivate onCopyItems(stats: ExplorerItem[], cut: boolean, previousCut: ExplorerItem[] | undefined): void {\n\t\tthis.fileCopiedContextKey.set(stats.length > 0);\n\t\tthis.resourceCutContextKey.set(cut && stats.length > 0);\n\t\tif (previousCut) {\n\t\t\tpreviousCut.forEach(item => this.tree.rerender(item));\n\t\t}\n\t\tif (cut) {\n\t\t\tstats.forEach(s => this.tree.rerender(s));\n\t\t}\n\t}\n\n\tcollapseAll(): void {\n\t\tthis.tree.collapseAll();\n\t}\n\n\tdispose(): void {\n\t\tif (this.dragHandler) {\n\t\t\tthis.dragHandler.dispose();\n\t\t}\n\t\tsuper.dispose();\n\t}\n}\n"]}]}