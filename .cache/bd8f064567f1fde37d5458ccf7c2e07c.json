{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/workbench/browser/workbench.contribution.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/workbench.contribution.ts","mtime":1555846338036},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar platform_1 = require(\"vs/platform/registry/common/platform\");\nvar nls = require(\"vs/nls\");\nvar configurationRegistry_1 = require(\"vs/platform/configuration/common/configurationRegistry\");\nvar browser_1 = require(\"vs/base/browser/browser\");\n// Configuration\n(function registerConfiguration() {\n    var registry = platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration);\n    // Workbench\n    registry.registerConfiguration({\n        'id': 'workbench',\n        'order': 7,\n        'title': nls.localize('workbenchConfigurationTitle', \"Workbench\"),\n        'type': 'object',\n        'properties': {\n            'workbench.editor.showTabs': {\n                'type': 'boolean',\n                'description': nls.localize('showEditorTabs', \"Controls whether opened editors should show in tabs or not.\"),\n                'default': true\n            },\n            'workbench.editor.highlightModifiedTabs': {\n                'type': 'boolean',\n                'description': nls.localize('highlightModifiedTabs', \"Controls whether a top border is drawn on modified (dirty) editor tabs or not.\"),\n                'default': false\n            },\n            'workbench.editor.labelFormat': {\n                'type': 'string',\n                'enum': ['default', 'short', 'medium', 'long'],\n                'enumDescriptions': [\n                    nls.localize('workbench.editor.labelFormat.default', \"Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.\"),\n                    nls.localize('workbench.editor.labelFormat.short', \"Show the name of the file followed by its directory name.\"),\n                    nls.localize('workbench.editor.labelFormat.medium', \"Show the name of the file followed by its path relative to the workspace folder.\"),\n                    nls.localize('workbench.editor.labelFormat.long', \"Show the name of the file followed by its absolute path.\")\n                ],\n                'default': 'default',\n                'description': nls.localize({\n                    comment: ['This is the description for a setting. Values surrounded by parenthesis are not to be translated.'],\n                    key: 'tabDescription'\n                }, \"Controls the format of the label for an editor.\"),\n            },\n            'workbench.editor.tabCloseButton': {\n                'type': 'string',\n                'enum': ['left', 'right', 'off'],\n                'default': 'right',\n                'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorTabCloseButton' }, \"Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.\")\n            },\n            'workbench.editor.tabSizing': {\n                'type': 'string',\n                'enum': ['fit', 'shrink'],\n                'default': 'fit',\n                'enumDescriptions': [\n                    nls.localize('workbench.editor.tabSizing.fit', \"Always keep tabs large enough to show the full editor label.\"),\n                    nls.localize('workbench.editor.tabSizing.shrink', \"Allow tabs to get smaller when the available space is not enough to show all tabs at once.\")\n                ],\n                'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'tabSizing' }, \"Controls the sizing of editor tabs.\")\n            },\n            'workbench.editor.focusRecentEditorAfterClose': {\n                'type': 'boolean',\n                'description': nls.localize('focusRecentEditorAfterClose', \"Controls whether tabs are closed in most recently used order or from left to right.\"),\n                'default': true\n            },\n            'workbench.editor.showIcons': {\n                'type': 'boolean',\n                'description': nls.localize('showIcons', \"Controls whether opened editors should show with an icon or not. This requires an icon theme to be enabled as well.\"),\n                'default': true\n            },\n            'workbench.editor.enablePreview': {\n                'type': 'boolean',\n                'description': nls.localize('enablePreview', \"Controls whether opened editors show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing) and show up with an italic font style.\"),\n                'default': true\n            },\n            'workbench.editor.enablePreviewFromQuickOpen': {\n                'type': 'boolean',\n                'description': nls.localize('enablePreviewFromQuickOpen', \"Controls whether opened editors from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).\"),\n                'default': true\n            },\n            'workbench.editor.closeOnFileDelete': {\n                'type': 'boolean',\n                'description': nls.localize('closeOnFileDelete', \"Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.\"),\n                'default': false\n            },\n            'workbench.editor.openPositioning': {\n                'type': 'string',\n                'enum': ['left', 'right', 'first', 'last'],\n                'default': 'right',\n                'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, \"Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.\")\n            },\n            'workbench.editor.openSideBySideDirection': {\n                'type': 'string',\n                'enum': ['right', 'down'],\n                'default': 'right',\n                'markdownDescription': nls.localize('sideBySideDirection', \"Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.\")\n            },\n            'workbench.editor.closeEmptyGroups': {\n                'type': 'boolean',\n                'description': nls.localize('closeEmptyGroups', \"Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.\"),\n                'default': true\n            },\n            'workbench.editor.revealIfOpen': {\n                'type': 'boolean',\n                'description': nls.localize('revealIfOpen', \"Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.\"),\n                'default': false\n            },\n            'workbench.editor.swipeToNavigate': {\n                'type': 'boolean',\n                'description': nls.localize('swipeToNavigate', \"Navigate between open files using three-finger swipe horizontally.\"),\n                'default': false,\n                'included': browser_1.isMacintosh\n            },\n            'workbench.editor.restoreViewState': {\n                'type': 'boolean',\n                'description': nls.localize('restoreViewState', \"Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.\"),\n                'default': true,\n            },\n            'workbench.editor.centeredLayoutAutoResize': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('centeredLayoutAutoResize', \"Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.\")\n            },\n            'workbench.commandPalette.history': {\n                'type': 'number',\n                'description': nls.localize('commandHistory', \"Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.\"),\n                'default': 50\n            },\n            'workbench.commandPalette.preserveInput': {\n                'type': 'boolean',\n                'description': nls.localize('preserveInput', \"Controls whether the last typed input to the command palette should be restored when opening it the next time.\"),\n                'default': false\n            },\n            'workbench.quickOpen.closeOnFocusLost': {\n                'type': 'boolean',\n                'description': nls.localize('closeOnFocusLost', \"Controls whether Quick Open should close automatically once it loses focus.\"),\n                'default': true\n            },\n            'workbench.quickOpen.preserveInput': {\n                'type': 'boolean',\n                'description': nls.localize('workbench.quickOpen.preserveInput', \"Controls whether the last typed input to Quick Open should be restored when opening it the next time.\"),\n                'default': false\n            },\n            'workbench.settings.openDefaultSettings': {\n                'type': 'boolean',\n                'description': nls.localize('openDefaultSettings', \"Controls whether opening settings also opens an editor showing all default settings.\"),\n                'default': false\n            },\n            'workbench.settings.useSplitJSON': {\n                'type': 'boolean',\n                'markdownDescription': nls.localize('useSplitJSON', \"Controls whether to use the split JSON editor when editing settings as JSON.\"),\n                'default': false\n            },\n            'workbench.settings.openDefaultKeybindings': {\n                'type': 'boolean',\n                'description': nls.localize('openDefaultKeybindings', \"Controls whether opening keybinding settings also opens an editor showing all default keybindings.\"),\n                'default': false\n            },\n            'workbench.sideBar.location': {\n                'type': 'string',\n                'enum': ['left', 'right'],\n                'default': 'left',\n                'description': nls.localize('sideBarLocation', \"Controls the location of the sidebar. It can either show on the left or right of the workbench.\")\n            },\n            'workbench.panel.defaultLocation': {\n                'type': 'string',\n                'enum': ['bottom', 'right'],\n                'default': 'bottom',\n                'description': nls.localize('panelDefaultLocation', \"Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.\")\n            },\n            'workbench.statusBar.visible': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('statusBarVisibility', \"Controls the visibility of the status bar at the bottom of the workbench.\")\n            },\n            'workbench.activityBar.visible': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('activityBarVisibility', \"Controls the visibility of the activity bar in the workbench.\")\n            },\n            'workbench.view.alwaysShowHeaderActions': {\n                'type': 'boolean',\n                'default': false,\n                'description': nls.localize('viewVisibility', \"Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.\")\n            },\n            'workbench.fontAliasing': {\n                'type': 'string',\n                'enum': ['default', 'antialiased', 'none', 'auto'],\n                'default': 'default',\n                'description': nls.localize('fontAliasing', \"Controls font aliasing method in the workbench.\"),\n                'enumDescriptions': [\n                    nls.localize('workbench.fontAliasing.default', \"Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.\"),\n                    nls.localize('workbench.fontAliasing.antialiased', \"Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.\"),\n                    nls.localize('workbench.fontAliasing.none', \"Disables font smoothing. Text will show with jagged sharp edges.\"),\n                    nls.localize('workbench.fontAliasing.auto', \"Applies `default` or `antialiased` automatically based on the DPI of displays.\")\n                ],\n                'included': browser_1.isMacintosh\n            },\n            'workbench.settings.enableNaturalLanguageSearch': {\n                'type': 'boolean',\n                'description': nls.localize('enableNaturalLanguageSettingsSearch', \"Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.\"),\n                'default': true,\n                'scope': configurationRegistry_1.ConfigurationScope.WINDOW,\n                'tags': ['usesOnlineServices']\n            },\n            'workbench.settings.settingsSearchTocBehavior': {\n                'type': 'string',\n                'enum': ['hide', 'filter'],\n                'enumDescriptions': [\n                    nls.localize('settingsSearchTocBehavior.hide', \"Hide the Table of Contents while searching.\"),\n                    nls.localize('settingsSearchTocBehavior.filter', \"Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.\"),\n                ],\n                'description': nls.localize('settingsSearchTocBehavior', \"Controls the behavior of the settings editor Table of Contents while searching.\"),\n                'default': 'filter',\n                'scope': configurationRegistry_1.ConfigurationScope.WINDOW\n            },\n            'workbench.settings.editor': {\n                'type': 'string',\n                'enum': ['ui', 'json'],\n                'enumDescriptions': [\n                    nls.localize('settings.editor.ui', \"Use the settings UI editor.\"),\n                    nls.localize('settings.editor.json', \"Use the JSON file editor.\"),\n                ],\n                'description': nls.localize('settings.editor.desc', \"Determines which settings editor to use by default.\"),\n                'default': 'ui',\n                'scope': configurationRegistry_1.ConfigurationScope.WINDOW\n            },\n            'workbench.enableExperiments': {\n                'type': 'boolean',\n                'description': nls.localize('workbench.enableExperiments', \"Fetches experiments to run from a Microsoft online service.\"),\n                'default': true,\n                'tags': ['usesOnlineServices']\n            },\n            'workbench.useExperimentalGridLayout': {\n                'type': 'boolean',\n                'description': nls.localize('workbench.useExperimentalGridLayout', \"Enables the grid layout for the workbench. This setting may enable additional layout options for workbench components.\"),\n                'default': false,\n                'scope': configurationRegistry_1.ConfigurationScope.APPLICATION\n            }\n        }\n    });\n    // Window\n    var windowTitleDescription = nls.localize('windowTitle', \"Controls the window title based on the active editor. Variables are substituted based on the context:\");\n    windowTitleDescription += [\n        nls.localize('activeEditorShort', \"`\\${activeEditorShort}`: the file name (e.g. myFile.txt).\"),\n        nls.localize('activeEditorMedium', \"`\\${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).\"),\n        nls.localize('activeEditorLong', \"`\\${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).\"),\n        nls.localize('activeFolderShort', \"`\\${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).\"),\n        nls.localize('activeFolderMedium', \"`\\${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).\"),\n        nls.localize('activeFolderLong', \"`\\${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).\"),\n        nls.localize('folderName', \"`\\${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).\"),\n        nls.localize('folderPath', \"`\\${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).\"),\n        nls.localize('rootName', \"`\\${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).\"),\n        nls.localize('rootPath', \"`\\${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).\"),\n        nls.localize('appName', \"`\\${appName}`: e.g. VS Code.\"),\n        nls.localize('dirty', \"`\\${dirty}`: a dirty indicator if the active editor is dirty.\"),\n        nls.localize('separator', \"`\\${separator}`: a conditional separator (\\\" - \\\") that only shows when surrounded by variables with values or static text.\")\n    ].join('\\n- '); // intentionally concatenated to not produce a string that is too long for translations\n    registry.registerConfiguration({\n        'id': 'window',\n        'order': 8,\n        'title': nls.localize('windowConfigurationTitle', \"Window\"),\n        'type': 'object',\n        'properties': {\n            'window.title': {\n                'type': 'string',\n                'default': browser_1.isMacintosh ? '${activeEditorShort}${separator}${rootName}' : '${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}',\n                'markdownDescription': windowTitleDescription\n            }\n        }\n    });\n    // Zen Mode\n    registry.registerConfiguration({\n        'id': 'zenMode',\n        'order': 9,\n        'title': nls.localize('zenModeConfigurationTitle', \"Zen Mode\"),\n        'type': 'object',\n        'properties': {\n            'zenMode.fullScreen': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.fullScreen', \"Controls whether turning on Zen Mode also puts the workbench into full screen mode.\")\n            },\n            'zenMode.centerLayout': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.centerLayout', \"Controls whether turning on Zen Mode also centers the layout.\")\n            },\n            'zenMode.hideTabs': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.hideTabs', \"Controls whether turning on Zen Mode also hides workbench tabs.\")\n            },\n            'zenMode.hideStatusBar': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.hideStatusBar', \"Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.\")\n            },\n            'zenMode.hideActivityBar': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.hideActivityBar', \"Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.\")\n            },\n            'zenMode.hideLineNumbers': {\n                'type': 'boolean',\n                'default': true,\n                'description': nls.localize('zenMode.hideLineNumbers', \"Controls whether turning on Zen Mode also hides the editor line numbers.\")\n            },\n            'zenMode.restore': {\n                'type': 'boolean',\n                'default': false,\n                'description': nls.localize('zenMode.restore', \"Controls whether a window should restore to zen mode if it was exited in zen mode.\")\n            }\n        }\n    });\n})();\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/workbench/browser/workbench.contribution.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/workbench/browser/workbench.contribution.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport * as nls from 'vs/nls';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { isMacintosh } from 'vs/base/browser/browser';\n\n// Configuration\n(function registerConfiguration(): void {\n\tconst registry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\n\t// Workbench\n\tregistry.registerConfiguration({\n\t\t'id': 'workbench',\n\t\t'order': 7,\n\t\t'title': nls.localize('workbenchConfigurationTitle', \"Workbench\"),\n\t\t'type': 'object',\n\t\t'properties': {\n\t\t\t'workbench.editor.showTabs': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('showEditorTabs', \"Controls whether opened editors should show in tabs or not.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.highlightModifiedTabs': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('highlightModifiedTabs', \"Controls whether a top border is drawn on modified (dirty) editor tabs or not.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.editor.labelFormat': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['default', 'short', 'medium', 'long'],\n\t\t\t\t'enumDescriptions': [\n\t\t\t\t\tnls.localize('workbench.editor.labelFormat.default', \"Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.\"),\n\t\t\t\t\tnls.localize('workbench.editor.labelFormat.short', \"Show the name of the file followed by its directory name.\"),\n\t\t\t\t\tnls.localize('workbench.editor.labelFormat.medium', \"Show the name of the file followed by its path relative to the workspace folder.\"),\n\t\t\t\t\tnls.localize('workbench.editor.labelFormat.long', \"Show the name of the file followed by its absolute path.\")\n\t\t\t\t],\n\t\t\t\t'default': 'default',\n\t\t\t\t'description': nls.localize({\n\t\t\t\t\tcomment: ['This is the description for a setting. Values surrounded by parenthesis are not to be translated.'],\n\t\t\t\t\tkey: 'tabDescription'\n\t\t\t\t}, \"Controls the format of the label for an editor.\"),\n\t\t\t},\n\t\t\t'workbench.editor.tabCloseButton': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['left', 'right', 'off'],\n\t\t\t\t'default': 'right',\n\t\t\t\t'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorTabCloseButton' }, \"Controls the position of the editor's tabs close buttons, or disables them when set to 'off'.\")\n\t\t\t},\n\t\t\t'workbench.editor.tabSizing': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['fit', 'shrink'],\n\t\t\t\t'default': 'fit',\n\t\t\t\t'enumDescriptions': [\n\t\t\t\t\tnls.localize('workbench.editor.tabSizing.fit', \"Always keep tabs large enough to show the full editor label.\"),\n\t\t\t\t\tnls.localize('workbench.editor.tabSizing.shrink', \"Allow tabs to get smaller when the available space is not enough to show all tabs at once.\")\n\t\t\t\t],\n\t\t\t\t'description': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'tabSizing' }, \"Controls the sizing of editor tabs.\")\n\t\t\t},\n\t\t\t'workbench.editor.focusRecentEditorAfterClose': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('focusRecentEditorAfterClose', \"Controls whether tabs are closed in most recently used order or from left to right.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.showIcons': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('showIcons', \"Controls whether opened editors should show with an icon or not. This requires an icon theme to be enabled as well.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.enablePreview': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('enablePreview', \"Controls whether opened editors show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing) and show up with an italic font style.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.enablePreviewFromQuickOpen': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('enablePreviewFromQuickOpen', \"Controls whether opened editors from Quick Open show as preview. Preview editors are reused until they are pinned (e.g. via double click or editing).\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.closeOnFileDelete': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('closeOnFileDelete', \"Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that dirty files will never close to preserve your data.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.editor.openPositioning': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['left', 'right', 'first', 'last'],\n\t\t\t\t'default': 'right',\n\t\t\t\t'markdownDescription': nls.localize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'editorOpenPositioning' }, \"Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.\")\n\t\t\t},\n\t\t\t'workbench.editor.openSideBySideDirection': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['right', 'down'],\n\t\t\t\t'default': 'right',\n\t\t\t\t'markdownDescription': nls.localize('sideBySideDirection', \"Controls the default direction of editors that are opened side by side (e.g. from the explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.\")\n\t\t\t},\n\t\t\t'workbench.editor.closeEmptyGroups': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('closeEmptyGroups', \"Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.editor.revealIfOpen': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('revealIfOpen', \"Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.editor.swipeToNavigate': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('swipeToNavigate', \"Navigate between open files using three-finger swipe horizontally.\"),\n\t\t\t\t'default': false,\n\t\t\t\t'included': isMacintosh\n\t\t\t},\n\t\t\t'workbench.editor.restoreViewState': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('restoreViewState', \"Restores the last view state (e.g. scroll position) when re-opening files after they have been closed.\"),\n\t\t\t\t'default': true,\n\t\t\t},\n\t\t\t'workbench.editor.centeredLayoutAutoResize': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('centeredLayoutAutoResize', \"Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.\")\n\t\t\t},\n\t\t\t'workbench.commandPalette.history': {\n\t\t\t\t'type': 'number',\n\t\t\t\t'description': nls.localize('commandHistory', \"Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.\"),\n\t\t\t\t'default': 50\n\t\t\t},\n\t\t\t'workbench.commandPalette.preserveInput': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('preserveInput', \"Controls whether the last typed input to the command palette should be restored when opening it the next time.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.quickOpen.closeOnFocusLost': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('closeOnFocusLost', \"Controls whether Quick Open should close automatically once it loses focus.\"),\n\t\t\t\t'default': true\n\t\t\t},\n\t\t\t'workbench.quickOpen.preserveInput': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('workbench.quickOpen.preserveInput', \"Controls whether the last typed input to Quick Open should be restored when opening it the next time.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.settings.openDefaultSettings': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('openDefaultSettings', \"Controls whether opening settings also opens an editor showing all default settings.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.settings.useSplitJSON': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'markdownDescription': nls.localize('useSplitJSON', \"Controls whether to use the split JSON editor when editing settings as JSON.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.settings.openDefaultKeybindings': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('openDefaultKeybindings', \"Controls whether opening keybinding settings also opens an editor showing all default keybindings.\"),\n\t\t\t\t'default': false\n\t\t\t},\n\t\t\t'workbench.sideBar.location': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['left', 'right'],\n\t\t\t\t'default': 'left',\n\t\t\t\t'description': nls.localize('sideBarLocation', \"Controls the location of the sidebar. It can either show on the left or right of the workbench.\")\n\t\t\t},\n\t\t\t'workbench.panel.defaultLocation': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['bottom', 'right'],\n\t\t\t\t'default': 'bottom',\n\t\t\t\t'description': nls.localize('panelDefaultLocation', \"Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom or on the right of the workbench.\")\n\t\t\t},\n\t\t\t'workbench.statusBar.visible': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('statusBarVisibility', \"Controls the visibility of the status bar at the bottom of the workbench.\")\n\t\t\t},\n\t\t\t'workbench.activityBar.visible': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('activityBarVisibility', \"Controls the visibility of the activity bar in the workbench.\")\n\t\t\t},\n\t\t\t'workbench.view.alwaysShowHeaderActions': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': false,\n\t\t\t\t'description': nls.localize('viewVisibility', \"Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.\")\n\t\t\t},\n\t\t\t'workbench.fontAliasing': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['default', 'antialiased', 'none', 'auto'],\n\t\t\t\t'default': 'default',\n\t\t\t\t'description':\n\t\t\t\t\tnls.localize('fontAliasing', \"Controls font aliasing method in the workbench.\"),\n\t\t\t\t'enumDescriptions': [\n\t\t\t\t\tnls.localize('workbench.fontAliasing.default', \"Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.\"),\n\t\t\t\t\tnls.localize('workbench.fontAliasing.antialiased', \"Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.\"),\n\t\t\t\t\tnls.localize('workbench.fontAliasing.none', \"Disables font smoothing. Text will show with jagged sharp edges.\"),\n\t\t\t\t\tnls.localize('workbench.fontAliasing.auto', \"Applies `default` or `antialiased` automatically based on the DPI of displays.\")\n\t\t\t\t],\n\t\t\t\t'included': isMacintosh\n\t\t\t},\n\t\t\t'workbench.settings.enableNaturalLanguageSearch': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('enableNaturalLanguageSettingsSearch', \"Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.\"),\n\t\t\t\t'default': true,\n\t\t\t\t'scope': ConfigurationScope.WINDOW,\n\t\t\t\t'tags': ['usesOnlineServices']\n\t\t\t},\n\t\t\t'workbench.settings.settingsSearchTocBehavior': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['hide', 'filter'],\n\t\t\t\t'enumDescriptions': [\n\t\t\t\t\tnls.localize('settingsSearchTocBehavior.hide', \"Hide the Table of Contents while searching.\"),\n\t\t\t\t\tnls.localize('settingsSearchTocBehavior.filter', \"Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.\"),\n\t\t\t\t],\n\t\t\t\t'description': nls.localize('settingsSearchTocBehavior', \"Controls the behavior of the settings editor Table of Contents while searching.\"),\n\t\t\t\t'default': 'filter',\n\t\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t\t},\n\t\t\t'workbench.settings.editor': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'enum': ['ui', 'json'],\n\t\t\t\t'enumDescriptions': [\n\t\t\t\t\tnls.localize('settings.editor.ui', \"Use the settings UI editor.\"),\n\t\t\t\t\tnls.localize('settings.editor.json', \"Use the JSON file editor.\"),\n\t\t\t\t],\n\t\t\t\t'description': nls.localize('settings.editor.desc', \"Determines which settings editor to use by default.\"),\n\t\t\t\t'default': 'ui',\n\t\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t\t},\n\t\t\t'workbench.enableExperiments': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('workbench.enableExperiments', \"Fetches experiments to run from a Microsoft online service.\"),\n\t\t\t\t'default': true,\n\t\t\t\t'tags': ['usesOnlineServices']\n\t\t\t},\n\t\t\t'workbench.useExperimentalGridLayout': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'description': nls.localize('workbench.useExperimentalGridLayout', \"Enables the grid layout for the workbench. This setting may enable additional layout options for workbench components.\"),\n\t\t\t\t'default': false,\n\t\t\t\t'scope': ConfigurationScope.APPLICATION\n\t\t\t}\n\t\t}\n\t});\n\n\t// Window\n\n\tlet windowTitleDescription = nls.localize('windowTitle', \"Controls the window title based on the active editor. Variables are substituted based on the context:\");\n\twindowTitleDescription += [\n\t\tnls.localize('activeEditorShort', \"`\\${activeEditorShort}`: the file name (e.g. myFile.txt).\"),\n\t\tnls.localize('activeEditorMedium', \"`\\${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).\"),\n\t\tnls.localize('activeEditorLong', \"`\\${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).\"),\n\t\tnls.localize('activeFolderShort', \"`\\${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).\"),\n\t\tnls.localize('activeFolderMedium', \"`\\${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).\"),\n\t\tnls.localize('activeFolderLong', \"`\\${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).\"),\n\t\tnls.localize('folderName', \"`\\${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).\"),\n\t\tnls.localize('folderPath', \"`\\${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).\"),\n\t\tnls.localize('rootName', \"`\\${rootName}`: name of the workspace (e.g. myFolder or myWorkspace).\"),\n\t\tnls.localize('rootPath', \"`\\${rootPath}`: file path of the workspace (e.g. /Users/Development/myWorkspace).\"),\n\t\tnls.localize('appName', \"`\\${appName}`: e.g. VS Code.\"),\n\t\tnls.localize('dirty', \"`\\${dirty}`: a dirty indicator if the active editor is dirty.\"),\n\t\tnls.localize('separator', \"`\\${separator}`: a conditional separator (\\\" - \\\") that only shows when surrounded by variables with values or static text.\")\n\t].join('\\n- '); // intentionally concatenated to not produce a string that is too long for translations\n\n\tregistry.registerConfiguration({\n\t\t'id': 'window',\n\t\t'order': 8,\n\t\t'title': nls.localize('windowConfigurationTitle', \"Window\"),\n\t\t'type': 'object',\n\t\t'properties': {\n\t\t\t'window.title': {\n\t\t\t\t'type': 'string',\n\t\t\t\t'default': isMacintosh ? '${activeEditorShort}${separator}${rootName}' : '${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}',\n\t\t\t\t'markdownDescription': windowTitleDescription\n\t\t\t}\n\t\t}\n\t});\n\n\t// Zen Mode\n\tregistry.registerConfiguration({\n\t\t'id': 'zenMode',\n\t\t'order': 9,\n\t\t'title': nls.localize('zenModeConfigurationTitle', \"Zen Mode\"),\n\t\t'type': 'object',\n\t\t'properties': {\n\t\t\t'zenMode.fullScreen': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.fullScreen', \"Controls whether turning on Zen Mode also puts the workbench into full screen mode.\")\n\t\t\t},\n\t\t\t'zenMode.centerLayout': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.centerLayout', \"Controls whether turning on Zen Mode also centers the layout.\")\n\t\t\t},\n\t\t\t'zenMode.hideTabs': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.hideTabs', \"Controls whether turning on Zen Mode also hides workbench tabs.\")\n\t\t\t},\n\t\t\t'zenMode.hideStatusBar': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.hideStatusBar', \"Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.\")\n\t\t\t},\n\t\t\t'zenMode.hideActivityBar': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.hideActivityBar', \"Controls whether turning on Zen Mode also hides the activity bar at the left of the workbench.\")\n\t\t\t},\n\t\t\t'zenMode.hideLineNumbers': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true,\n\t\t\t\t'description': nls.localize('zenMode.hideLineNumbers', \"Controls whether turning on Zen Mode also hides the editor line numbers.\")\n\t\t\t},\n\t\t\t'zenMode.restore': {\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': false,\n\t\t\t\t'description': nls.localize('zenMode.restore', \"Controls whether a window should restore to zen mode if it was exited in zen mode.\")\n\t\t\t}\n\t\t}\n\t});\n})();"]}]}