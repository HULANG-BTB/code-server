{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es6\"}}!/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-main/electronUrlListener.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/platform/url/electron-main/electronUrlListener.ts","mtime":1555102317000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine([\"require\", \"exports\", \"vs/base/common/event\", \"vs/platform/url/common/url\", \"vs/platform/product/node/product\", \"electron\", \"vs/base/common/uri\", \"vs/base/common/lifecycle\", \"vs/platform/windows/electron-main/windows\", \"vs/base/common/platform\", \"vs/base/common/arrays\"], function (require, exports, event_1, url_1, product_1, electron_1, uri_1, lifecycle_1, windows_1, platform_1, arrays_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function uriFromRawUrl(url) {\n        try {\n            return uri_1.URI.parse(url);\n        }\n        catch (e) {\n            return null;\n        }\n    }\n    let ElectronURLListener = class ElectronURLListener {\n        constructor(initial, urlService, windowsService) {\n            this.urlService = urlService;\n            this.disposables = [];\n            const globalBuffer = (global.getOpenUrls() || []);\n            const rawBuffer = [\n                ...(typeof initial === 'string' ? [initial] : initial),\n                ...globalBuffer\n            ];\n            const buffer = arrays_1.coalesce(rawBuffer.map(uriFromRawUrl));\n            const flush = () => buffer.forEach(uri => {\n                if (uri) {\n                    urlService.open(uri);\n                }\n            });\n            if (platform_1.isWindows) {\n                electron_1.app.setAsDefaultProtocolClient(product_1.default.urlProtocol, process.execPath, ['--open-url', '--']);\n            }\n            const onOpenElectronUrl = event_1.Event.map(event_1.Event.fromNodeEventEmitter(electron_1.app, 'open-url', (event, url) => ({ event, url })), ({ event, url }) => {\n                // always prevent default and return the url as string\n                event.preventDefault();\n                return url;\n            });\n            const onOpenUrl = event_1.Event.filter(event_1.Event.map(onOpenElectronUrl, uriFromRawUrl), uri => !!uri);\n            onOpenUrl(this.urlService.open, this.urlService, this.disposables);\n            const isWindowReady = windowsService.getWindows()\n                .filter(w => w.isReady)\n                .length > 0;\n            if (isWindowReady) {\n                flush();\n            }\n            else {\n                event_1.Event.once(windowsService.onWindowReady)(flush);\n            }\n        }\n        dispose() {\n            this.disposables = lifecycle_1.dispose(this.disposables);\n        }\n    };\n    ElectronURLListener = __decorate([\n        __param(1, url_1.IURLService),\n        __param(2, windows_1.IWindowsMainService)\n    ], ElectronURLListener);\n    exports.ElectronURLListener = ElectronURLListener;\n});\n",null]}