{"remainingRequest":"/home/coding/workspace/node_modules/ts-loader/index.js?{\"happyPackMode\":true,\"compilerOptions\":{\"target\":\"es5\",\"lib\":[\"dom\",\"esnext\"]}}!/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts","dependencies":[{"path":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts","mtime":1555102316000},{"path":"/home/coding/workspace/node_modules/cache-loader/dist/cjs.js","mtime":1555844183884},{"path":"/home/coding/workspace/node_modules/ts-loader/index.js","mtime":1555844217316}],"contextDependencies":[],"result":["\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar event_1 = require(\"vs/base/common/event\");\nvar lifecycle_1 = require(\"vs/base/common/lifecycle\");\nvar platform = require(\"vs/base/common/platform\");\nvar editorOptions_1 = require(\"vs/editor/common/config/editorOptions\");\nvar editOperation_1 = require(\"vs/editor/common/core/editOperation\");\nvar range_1 = require(\"vs/editor/common/core/range\");\nvar model_1 = require(\"vs/editor/common/model\");\nvar textModel_1 = require(\"vs/editor/common/model/textModel\");\nvar modesRegistry_1 = require(\"vs/editor/common/modes/modesRegistry\");\nvar resourceConfiguration_1 = require(\"vs/editor/common/services/resourceConfiguration\");\nvar configuration_1 = require(\"vs/platform/configuration/common/configuration\");\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nvar ModelData = /** @class */ (function () {\n    function ModelData(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._languageSelection = null;\n        this._languageSelectionListener = null;\n        this._modelEventListeners = [];\n        this._modelEventListeners.push(model.onWillDispose(function () { return onWillDispose(model); }));\n        this._modelEventListeners.push(model.onDidChangeLanguage(function (e) { return onDidChangeLanguage(model, e); }));\n    }\n    ModelData.prototype._disposeLanguageSelection = function () {\n        if (this._languageSelectionListener) {\n            this._languageSelectionListener.dispose();\n            this._languageSelectionListener = null;\n        }\n        if (this._languageSelection) {\n            this._languageSelection.dispose();\n            this._languageSelection = null;\n        }\n    };\n    ModelData.prototype.dispose = function () {\n        this._modelEventListeners = lifecycle_1.dispose(this._modelEventListeners);\n        this._disposeLanguageSelection();\n    };\n    ModelData.prototype.setLanguage = function (languageSelection) {\n        var _this = this;\n        this._disposeLanguageSelection();\n        this._languageSelection = languageSelection;\n        this._languageSelectionListener = this._languageSelection.onDidChange(function () { return _this.model.setMode(languageSelection.languageIdentifier); });\n        this.model.setMode(languageSelection.languageIdentifier);\n    };\n    return ModelData;\n}());\nvar DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? model_1.DefaultEndOfLine.LF : model_1.DefaultEndOfLine.CRLF;\nvar ModelServiceImpl = /** @class */ (function (_super) {\n    tslib_1.__extends(ModelServiceImpl, _super);\n    function ModelServiceImpl(configurationService, resourcePropertiesService) {\n        var _this = _super.call(this) || this;\n        _this._onModelAdded = _this._register(new event_1.Emitter());\n        _this.onModelAdded = _this._onModelAdded.event;\n        _this._onModelRemoved = _this._register(new event_1.Emitter());\n        _this.onModelRemoved = _this._onModelRemoved.event;\n        _this._onModelModeChanged = _this._register(new event_1.Emitter());\n        _this.onModelModeChanged = _this._onModelModeChanged.event;\n        _this._configurationService = configurationService;\n        _this._resourcePropertiesService = resourcePropertiesService;\n        _this._models = {};\n        _this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        _this._configurationServiceSubscription = _this._configurationService.onDidChangeConfiguration(function (e) { return _this._updateModelOptions(); });\n        _this._updateModelOptions();\n        return _this;\n    }\n    ModelServiceImpl._readModelOptions = function (config, isForSimpleWidget) {\n        var tabSize = editorOptions_1.EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            var parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        var indentSize = tabSize;\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            var parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = parsedIndentSize;\n            }\n            if (indentSize < 1) {\n                indentSize = 1;\n            }\n        }\n        var insertSpaces = editorOptions_1.EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        var newDefaultEOL = DEFAULT_EOL;\n        var eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = model_1.DefaultEndOfLine.CRLF;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = model_1.DefaultEndOfLine.LF;\n        }\n        var trimAutoWhitespace = editorOptions_1.EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        var detectIndentation = editorOptions_1.EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        var largeFileOptimizations = editorOptions_1.EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations\n        };\n    };\n    ModelServiceImpl.prototype.getCreationOptions = function (language, resource, isForSimpleWidget) {\n        var creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            var editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource: resource });\n            var eol = this._resourcePropertiesService.getEOL(resource, language);\n            creationOptions = ModelServiceImpl._readModelOptions({ editor: editor, eol: eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    };\n    ModelServiceImpl.prototype._updateModelOptions = function () {\n        var oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        var keys = Object.keys(this._models);\n        for (var i = 0, len = keys.length; i < len; i++) {\n            var modelId = keys[i];\n            var modelData = this._models[modelId];\n            var language = modelData.model.getLanguageIdentifier().language;\n            var uri = modelData.model.uri;\n            var oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            var newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    };\n    ModelServiceImpl._setModelOptionsForModel = function (model, newOptions, currentOptions) {\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace\n            });\n        }\n    };\n    ModelServiceImpl.prototype.dispose = function () {\n        this._configurationServiceSubscription.dispose();\n        _super.prototype.dispose.call(this);\n    };\n    // --- begin IModelService\n    ModelServiceImpl.prototype._createModelData = function (value, languageIdentifier, resource, isForSimpleWidget) {\n        var _this = this;\n        // create & save the model\n        var options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\n        var model = new textModel_1.TextModel(value, options, languageIdentifier, resource);\n        var modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        var modelData = new ModelData(model, function (model) { return _this._onWillDispose(model); }, function (model, e) { return _this._onDidChangeLanguage(model, e); });\n        this._models[modelId] = modelData;\n        return modelData;\n    };\n    ModelServiceImpl.prototype.updateModel = function (model, value) {\n        var options = this.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n        var textBuffer = textModel_1.createTextBuffer(value, options.defaultEOL);\n        // Return early if the text is already set in that form\n        if (model.equalsTextBuffer(textBuffer)) {\n            return;\n        }\n        // Otherwise find a diff between the values and update model\n        model.pushStackElement();\n        model.pushEOL(textBuffer.getEOL() === '\\r\\n' ? model_1.EndOfLineSequence.CRLF : model_1.EndOfLineSequence.LF);\n        model.pushEditOperations([], ModelServiceImpl._computeEdits(model, textBuffer), function (inverseEditOperations) { return []; });\n        model.pushStackElement();\n    };\n    ModelServiceImpl._commonPrefix = function (a, aLen, aDelta, b, bLen, bDelta) {\n        var maxResult = Math.min(aLen, bLen);\n        var result = 0;\n        for (var i = 0; i < maxResult && a.getLineContent(aDelta + i) === b.getLineContent(bDelta + i); i++) {\n            result++;\n        }\n        return result;\n    };\n    ModelServiceImpl._commonSuffix = function (a, aLen, aDelta, b, bLen, bDelta) {\n        var maxResult = Math.min(aLen, bLen);\n        var result = 0;\n        for (var i = 0; i < maxResult && a.getLineContent(aDelta + aLen - i) === b.getLineContent(bDelta + bLen - i); i++) {\n            result++;\n        }\n        return result;\n    };\n    /**\n     * Compute edits to bring `model` to the state of `textSource`.\n     */\n    ModelServiceImpl._computeEdits = function (model, textBuffer) {\n        var modelLineCount = model.getLineCount();\n        var textBufferLineCount = textBuffer.getLineCount();\n        var commonPrefix = this._commonPrefix(model, modelLineCount, 1, textBuffer, textBufferLineCount, 1);\n        if (modelLineCount === textBufferLineCount && commonPrefix === modelLineCount) {\n            // equality case\n            return [];\n        }\n        var commonSuffix = this._commonSuffix(model, modelLineCount - commonPrefix, commonPrefix, textBuffer, textBufferLineCount - commonPrefix, commonPrefix);\n        var oldRange, newRange;\n        if (commonSuffix > 0) {\n            oldRange = new range_1.Range(commonPrefix + 1, 1, modelLineCount - commonSuffix + 1, 1);\n            newRange = new range_1.Range(commonPrefix + 1, 1, textBufferLineCount - commonSuffix + 1, 1);\n        }\n        else if (commonPrefix > 0) {\n            oldRange = new range_1.Range(commonPrefix, model.getLineMaxColumn(commonPrefix), modelLineCount, model.getLineMaxColumn(modelLineCount));\n            newRange = new range_1.Range(commonPrefix, 1 + textBuffer.getLineLength(commonPrefix), textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n        }\n        else {\n            oldRange = new range_1.Range(1, 1, modelLineCount, model.getLineMaxColumn(modelLineCount));\n            newRange = new range_1.Range(1, 1, textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n        }\n        return [editOperation_1.EditOperation.replaceMove(oldRange, textBuffer.getValueInRange(newRange, model_1.EndOfLinePreference.TextDefined))];\n    };\n    ModelServiceImpl.prototype.createModel = function (value, languageSelection, resource, isForSimpleWidget) {\n        if (isForSimpleWidget === void 0) { isForSimpleWidget = false; }\n        var modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\n            this.setMode(modelData.model, languageSelection);\n        }\n        else {\n            modelData = this._createModelData(value, modesRegistry_1.PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    };\n    ModelServiceImpl.prototype.setMode = function (model, languageSelection) {\n        if (!languageSelection) {\n            return;\n        }\n        var modelData = this._models[MODEL_ID(model.uri)];\n        if (!modelData) {\n            return;\n        }\n        modelData.setLanguage(languageSelection);\n    };\n    ModelServiceImpl.prototype.destroyModel = function (resource) {\n        // We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n        var modelData = this._models[MODEL_ID(resource)];\n        if (!modelData) {\n            return;\n        }\n        modelData.model.dispose();\n    };\n    ModelServiceImpl.prototype.getModels = function () {\n        var ret = [];\n        var keys = Object.keys(this._models);\n        for (var i = 0, len = keys.length; i < len; i++) {\n            var modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    };\n    ModelServiceImpl.prototype.getModel = function (resource) {\n        var modelId = MODEL_ID(resource);\n        var modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    };\n    // --- end IModelService\n    ModelServiceImpl.prototype._onWillDispose = function (model) {\n        var modelId = MODEL_ID(model.uri);\n        var modelData = this._models[modelId];\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\n        this._onModelRemoved.fire(model);\n    };\n    ModelServiceImpl.prototype._onDidChangeLanguage = function (model, e) {\n        var oldModeId = e.oldLanguage;\n        var newModeId = model.getLanguageIdentifier().language;\n        var oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\n        var newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\n        ModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model: model, oldModeId: oldModeId });\n    };\n    ModelServiceImpl = tslib_1.__decorate([\n        tslib_1.__param(0, configuration_1.IConfigurationService),\n        tslib_1.__param(1, resourceConfiguration_1.ITextResourcePropertiesService)\n    ], ModelServiceImpl);\n    return ModelServiceImpl;\n}(lifecycle_1.Disposable));\nexports.ModelServiceImpl = ModelServiceImpl;\n",{"version":3,"file":"/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts","sourceRoot":"","sources":["/home/coding/workspace/lib/vscode/src/vs/editor/common/services/modelServiceImpl.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { EDITOR_MODEL_DEFAULTS } from 'vs/editor/common/config/editorOptions';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { DefaultEndOfLine, EndOfLinePreference, EndOfLineSequence, IIdentifiedSingleEditOperation, ITextBuffer, ITextBufferFactory, ITextModel, ITextModelCreationOptions } from 'vs/editor/common/model';\nimport { TextModel, createTextBuffer } from 'vs/editor/common/model/textModel';\nimport { IModelLanguageChangedEvent } from 'vs/editor/common/model/textModelEvents';\nimport { LanguageIdentifier } from 'vs/editor/common/modes';\nimport { PLAINTEXT_LANGUAGE_IDENTIFIER } from 'vs/editor/common/modes/modesRegistry';\nimport { ILanguageSelection } from 'vs/editor/common/services/modeService';\nimport { IModelService } from 'vs/editor/common/services/modelService';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/resourceConfiguration';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nfunction MODEL_ID(resource: URI): string {\n\treturn resource.toString();\n}\n\nclass ModelData implements IDisposable {\n\tpublic readonly model: ITextModel;\n\n\tprivate _languageSelection: ILanguageSelection | null;\n\tprivate _languageSelectionListener: IDisposable | null;\n\n\tprivate _modelEventListeners: IDisposable[];\n\n\tconstructor(\n\t\tmodel: ITextModel,\n\t\tonWillDispose: (model: ITextModel) => void,\n\t\tonDidChangeLanguage: (model: ITextModel, e: IModelLanguageChangedEvent) => void\n\t) {\n\t\tthis.model = model;\n\n\t\tthis._languageSelection = null;\n\t\tthis._languageSelectionListener = null;\n\n\t\tthis._modelEventListeners = [];\n\t\tthis._modelEventListeners.push(model.onWillDispose(() => onWillDispose(model)));\n\t\tthis._modelEventListeners.push(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n\t}\n\n\tprivate _disposeLanguageSelection(): void {\n\t\tif (this._languageSelectionListener) {\n\t\t\tthis._languageSelectionListener.dispose();\n\t\t\tthis._languageSelectionListener = null;\n\t\t}\n\t\tif (this._languageSelection) {\n\t\t\tthis._languageSelection.dispose();\n\t\t\tthis._languageSelection = null;\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._modelEventListeners = dispose(this._modelEventListeners);\n\t\tthis._disposeLanguageSelection();\n\t}\n\n\tpublic setLanguage(languageSelection: ILanguageSelection): void {\n\t\tthis._disposeLanguageSelection();\n\t\tthis._languageSelection = languageSelection;\n\t\tthis._languageSelectionListener = this._languageSelection.onDidChange(() => this.model.setMode(languageSelection.languageIdentifier));\n\t\tthis.model.setMode(languageSelection.languageIdentifier);\n\t}\n}\n\ninterface IRawEditorConfig {\n\ttabSize?: any;\n\tindentSize?: any;\n\tinsertSpaces?: any;\n\tdetectIndentation?: any;\n\ttrimAutoWhitespace?: any;\n\tcreationOptions?: any;\n\tlargeFileOptimizations?: any;\n}\n\ninterface IRawConfig {\n\teol?: any;\n\teditor?: IRawEditorConfig;\n}\n\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? DefaultEndOfLine.LF : DefaultEndOfLine.CRLF;\n\nexport class ModelServiceImpl extends Disposable implements IModelService {\n\tpublic _serviceBrand: any;\n\n\tprivate readonly _configurationService: IConfigurationService;\n\tprivate readonly _configurationServiceSubscription: IDisposable;\n\tprivate readonly _resourcePropertiesService: ITextResourcePropertiesService;\n\n\tprivate readonly _onModelAdded: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onModelAdded: Event<ITextModel> = this._onModelAdded.event;\n\n\tprivate readonly _onModelRemoved: Emitter<ITextModel> = this._register(new Emitter<ITextModel>());\n\tpublic readonly onModelRemoved: Event<ITextModel> = this._onModelRemoved.event;\n\n\tprivate readonly _onModelModeChanged: Emitter<{ model: ITextModel; oldModeId: string; }> = this._register(new Emitter<{ model: ITextModel; oldModeId: string; }>());\n\tpublic readonly onModelModeChanged: Event<{ model: ITextModel; oldModeId: string; }> = this._onModelModeChanged.event;\n\n\tprivate _modelCreationOptionsByLanguageAndResource: {\n\t\t[languageAndResource: string]: ITextModelCreationOptions;\n\t};\n\n\t/**\n\t * All the models known in the system.\n\t */\n\tprivate readonly _models: { [modelId: string]: ModelData; };\n\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITextResourcePropertiesService resourcePropertiesService: ITextResourcePropertiesService\n\t) {\n\t\tsuper();\n\t\tthis._configurationService = configurationService;\n\t\tthis._resourcePropertiesService = resourcePropertiesService;\n\t\tthis._models = {};\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\n\t\tthis._configurationServiceSubscription = this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions());\n\t\tthis._updateModelOptions();\n\t}\n\n\tprivate static _readModelOptions(config: IRawConfig, isForSimpleWidget: boolean): ITextModelCreationOptions {\n\t\tlet tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n\t\tif (config.editor && typeof config.editor.tabSize !== 'undefined') {\n\t\t\tlet parsedTabSize = parseInt(config.editor.tabSize, 10);\n\t\t\tif (!isNaN(parsedTabSize)) {\n\t\t\t\ttabSize = parsedTabSize;\n\t\t\t}\n\t\t\tif (tabSize < 1) {\n\t\t\t\ttabSize = 1;\n\t\t\t}\n\t\t}\n\n\t\tlet indentSize = tabSize;\n\t\tif (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n\t\t\tlet parsedIndentSize = parseInt(config.editor.indentSize, 10);\n\t\t\tif (!isNaN(parsedIndentSize)) {\n\t\t\t\tindentSize = parsedIndentSize;\n\t\t\t}\n\t\t\tif (indentSize < 1) {\n\t\t\t\tindentSize = 1;\n\t\t\t}\n\t\t}\n\n\t\tlet insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n\t\tif (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n\t\t\tinsertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n\t\t}\n\n\t\tlet newDefaultEOL = DEFAULT_EOL;\n\t\tconst eol = config.eol;\n\t\tif (eol === '\\r\\n') {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.CRLF;\n\t\t} else if (eol === '\\n') {\n\t\t\tnewDefaultEOL = DefaultEndOfLine.LF;\n\t\t}\n\n\t\tlet trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n\t\tif (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n\t\t\ttrimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n\t\t}\n\n\t\tlet detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n\t\tif (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n\t\t\tdetectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n\t\t}\n\n\t\tlet largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n\t\tif (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n\t\t\tlargeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n\t\t}\n\n\t\treturn {\n\t\t\tisForSimpleWidget: isForSimpleWidget,\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdetectIndentation: detectIndentation,\n\t\t\tdefaultEOL: newDefaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tlargeFileOptimizations: largeFileOptimizations\n\t\t};\n\t}\n\n\tpublic getCreationOptions(language: string, resource: URI | undefined, isForSimpleWidget: boolean): ITextModelCreationOptions {\n\t\tlet creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n\t\tif (!creationOptions) {\n\t\t\tconst editor = this._configurationService.getValue<IRawEditorConfig>('editor', { overrideIdentifier: language, resource });\n\t\t\tconst eol = this._resourcePropertiesService.getEOL(resource, language);\n\t\t\tcreationOptions = ModelServiceImpl._readModelOptions({ editor, eol }, isForSimpleWidget);\n\t\t\tthis._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n\t\t}\n\t\treturn creationOptions;\n\t}\n\n\tprivate _updateModelOptions(): void {\n\t\tlet oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n\t\tthis._modelCreationOptionsByLanguageAndResource = Object.create(null);\n\n\t\t// Update options on all models\n\t\tlet keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet modelId = keys[i];\n\t\t\tlet modelData = this._models[modelId];\n\t\t\tconst language = modelData.model.getLanguageIdentifier().language;\n\t\t\tconst uri = modelData.model.uri;\n\t\t\tconst oldOptions = oldOptionsByLanguageAndResource[language + uri];\n\t\t\tconst newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n\t\t\tModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n\t\t}\n\t}\n\n\tprivate static _setModelOptionsForModel(model: ITextModel, newOptions: ITextModelCreationOptions, currentOptions: ITextModelCreationOptions): void {\n\t\tif (currentOptions\n\t\t\t&& (currentOptions.detectIndentation === newOptions.detectIndentation)\n\t\t\t&& (currentOptions.insertSpaces === newOptions.insertSpaces)\n\t\t\t&& (currentOptions.tabSize === newOptions.tabSize)\n\t\t\t&& (currentOptions.indentSize === newOptions.indentSize)\n\t\t\t&& (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n\t\t) {\n\t\t\t// Same indent opts, no need to touch the model\n\t\t\treturn;\n\t\t}\n\n\t\tif (newOptions.detectIndentation) {\n\t\t\tmodel.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n\t\t\tmodel.updateOptions({\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace\n\t\t\t});\n\t\t} else {\n\t\t\tmodel.updateOptions({\n\t\t\t\tinsertSpaces: newOptions.insertSpaces,\n\t\t\t\ttabSize: newOptions.tabSize,\n\t\t\t\tindentSize: newOptions.indentSize,\n\t\t\t\ttrimAutoWhitespace: newOptions.trimAutoWhitespace\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._configurationServiceSubscription.dispose();\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin IModelService\n\n\tprivate _createModelData(value: string | ITextBufferFactory, languageIdentifier: LanguageIdentifier, resource: URI | undefined, isForSimpleWidget: boolean): ModelData {\n\t\t// create & save the model\n\t\tconst options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\n\t\tconst model: TextModel = new TextModel(value, options, languageIdentifier, resource);\n\t\tconst modelId = MODEL_ID(model.uri);\n\n\t\tif (this._models[modelId]) {\n\t\t\t// There already exists a model with this id => this is a programmer error\n\t\t\tthrow new Error('ModelService: Cannot add model because it already exists!');\n\t\t}\n\n\t\tconst modelData = new ModelData(\n\t\t\tmodel,\n\t\t\t(model) => this._onWillDispose(model),\n\t\t\t(model, e) => this._onDidChangeLanguage(model, e)\n\t\t);\n\t\tthis._models[modelId] = modelData;\n\n\t\treturn modelData;\n\t}\n\n\tpublic updateModel(model: ITextModel, value: string | ITextBufferFactory): void {\n\t\tconst options = this.getCreationOptions(model.getLanguageIdentifier().language, model.uri, model.isForSimpleWidget);\n\t\tconst textBuffer = createTextBuffer(value, options.defaultEOL);\n\n\t\t// Return early if the text is already set in that form\n\t\tif (model.equalsTextBuffer(textBuffer)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Otherwise find a diff between the values and update model\n\t\tmodel.pushStackElement();\n\t\tmodel.pushEOL(textBuffer.getEOL() === '\\r\\n' ? EndOfLineSequence.CRLF : EndOfLineSequence.LF);\n\t\tmodel.pushEditOperations(\n\t\t\t[],\n\t\t\tModelServiceImpl._computeEdits(model, textBuffer),\n\t\t\t(inverseEditOperations: IIdentifiedSingleEditOperation[]) => []\n\t\t);\n\t\tmodel.pushStackElement();\n\t}\n\n\tprivate static _commonPrefix(a: ILineSequence, aLen: number, aDelta: number, b: ILineSequence, bLen: number, bDelta: number): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < maxResult && a.getLineContent(aDelta + i) === b.getLineContent(bDelta + i); i++) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate static _commonSuffix(a: ILineSequence, aLen: number, aDelta: number, b: ILineSequence, bLen: number, bDelta: number): number {\n\t\tconst maxResult = Math.min(aLen, bLen);\n\n\t\tlet result = 0;\n\t\tfor (let i = 0; i < maxResult && a.getLineContent(aDelta + aLen - i) === b.getLineContent(bDelta + bLen - i); i++) {\n\t\t\tresult++;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Compute edits to bring `model` to the state of `textSource`.\n\t */\n\tpublic static _computeEdits(model: ITextModel, textBuffer: ITextBuffer): IIdentifiedSingleEditOperation[] {\n\t\tconst modelLineCount = model.getLineCount();\n\t\tconst textBufferLineCount = textBuffer.getLineCount();\n\t\tconst commonPrefix = this._commonPrefix(model, modelLineCount, 1, textBuffer, textBufferLineCount, 1);\n\n\t\tif (modelLineCount === textBufferLineCount && commonPrefix === modelLineCount) {\n\t\t\t// equality case\n\t\t\treturn [];\n\t\t}\n\n\t\tconst commonSuffix = this._commonSuffix(model, modelLineCount - commonPrefix, commonPrefix, textBuffer, textBufferLineCount - commonPrefix, commonPrefix);\n\n\t\tlet oldRange: Range, newRange: Range;\n\t\tif (commonSuffix > 0) {\n\t\t\toldRange = new Range(commonPrefix + 1, 1, modelLineCount - commonSuffix + 1, 1);\n\t\t\tnewRange = new Range(commonPrefix + 1, 1, textBufferLineCount - commonSuffix + 1, 1);\n\t\t} else if (commonPrefix > 0) {\n\t\t\toldRange = new Range(commonPrefix, model.getLineMaxColumn(commonPrefix), modelLineCount, model.getLineMaxColumn(modelLineCount));\n\t\t\tnewRange = new Range(commonPrefix, 1 + textBuffer.getLineLength(commonPrefix), textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n\t\t} else {\n\t\t\toldRange = new Range(1, 1, modelLineCount, model.getLineMaxColumn(modelLineCount));\n\t\t\tnewRange = new Range(1, 1, textBufferLineCount, 1 + textBuffer.getLineLength(textBufferLineCount));\n\t\t}\n\n\t\treturn [EditOperation.replaceMove(oldRange, textBuffer.getValueInRange(newRange, EndOfLinePreference.TextDefined))];\n\t}\n\n\tpublic createModel(value: string | ITextBufferFactory, languageSelection: ILanguageSelection | null, resource?: URI, isForSimpleWidget: boolean = false): ITextModel {\n\t\tlet modelData: ModelData;\n\n\t\tif (languageSelection) {\n\t\t\tmodelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\n\t\t\tthis.setMode(modelData.model, languageSelection);\n\t\t} else {\n\t\t\tmodelData = this._createModelData(value, PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\n\t\t}\n\n\t\tthis._onModelAdded.fire(modelData.model);\n\n\t\treturn modelData.model;\n\t}\n\n\tpublic setMode(model: ITextModel, languageSelection: ILanguageSelection): void {\n\t\tif (!languageSelection) {\n\t\t\treturn;\n\t\t}\n\t\tlet modelData = this._models[MODEL_ID(model.uri)];\n\t\tif (!modelData) {\n\t\t\treturn;\n\t\t}\n\t\tmodelData.setLanguage(languageSelection);\n\t}\n\n\tpublic destroyModel(resource: URI): void {\n\t\t// We need to support that not all models get disposed through this service (i.e. model.dispose() should work!)\n\t\tlet modelData = this._models[MODEL_ID(resource)];\n\t\tif (!modelData) {\n\t\t\treturn;\n\t\t}\n\t\tmodelData.model.dispose();\n\t}\n\n\tpublic getModels(): ITextModel[] {\n\t\tlet ret: ITextModel[] = [];\n\n\t\tlet keys = Object.keys(this._models);\n\t\tfor (let i = 0, len = keys.length; i < len; i++) {\n\t\t\tlet modelId = keys[i];\n\t\t\tret.push(this._models[modelId].model);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tpublic getModel(resource: URI): ITextModel | null {\n\t\tlet modelId = MODEL_ID(resource);\n\t\tlet modelData = this._models[modelId];\n\t\tif (!modelData) {\n\t\t\treturn null;\n\t\t}\n\t\treturn modelData.model;\n\t}\n\n\t// --- end IModelService\n\n\tprivate _onWillDispose(model: ITextModel): void {\n\t\tlet modelId = MODEL_ID(model.uri);\n\t\tlet modelData = this._models[modelId];\n\n\t\tdelete this._models[modelId];\n\t\tmodelData.dispose();\n\n\t\t// clean up cache\n\t\tdelete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\n\n\t\tthis._onModelRemoved.fire(model);\n\t}\n\n\tprivate _onDidChangeLanguage(model: ITextModel, e: IModelLanguageChangedEvent): void {\n\t\tconst oldModeId = e.oldLanguage;\n\t\tconst newModeId = model.getLanguageIdentifier().language;\n\t\tconst oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\n\t\tconst newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\n\t\tModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\n\t\tthis._onModelModeChanged.fire({ model, oldModeId });\n\t}\n}\n\nexport interface ILineSequence {\n\tgetLineContent(lineNumber: number): string;\n}\n"]}]}